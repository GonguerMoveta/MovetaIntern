// <ppj name="Moveta.Test" date="2/1/2024 4:57:08 AM" id="81D2178B90EA4C3811FAF8A9B3B47AB90B1F29A1"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using PPJ.Runtime;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using C1.Win.C1Ribbon;

namespace Moveta.Intern
{

    /// <summary>
    /// </summary>
    public partial class FCRibbonFormWindow : SalRibbonBarForm
    {
        #region Constructors/Destructors

        /// <summary>
        /// Default Constructor.
        /// </summary>
        public FCRibbonFormWindow()
        {
            // This call is required by the Windows Form Designer.
            InitializeComponent();
        }
        #endregion

        #region Properties
        /// <summary>
        /// Use this property instead of the Menu property 
        /// otherwise the old menu will be displayed on top of the ribbonbar
        /// </summary>
        /// <returns></returns>
        public Menu RibbonMenu { get; set; }
        #endregion

        #region Methods

        /// <summary>
        /// </summary>
        /// <returns></returns>
        public SalBoolean DrawMenuBar()
        {
            UpdateCurrentTab();
            return base.DrawMenuBar();
        }

        /// <summary>
        /// </summary>
        /// <returns></returns>
        //protected override void OnLoad(EventArgs e)
        //{
        //    base.OnLoad(e);

        //    CreateRibbon();
        //    RibbonBar.ApplicationMenu.Visible = false;
        //    RibbonBar.SelectedTabChanged += ribbonBar_SelectedTabChanged;

        //}

        public void CreateRibbon2()
        {
            RibbonBar.Tabs.Clear();
            C1.Win.C1Ribbon.RibbonTab ribbonTab = new C1.Win.C1Ribbon.RibbonTab();
            ribbonTab.Text = "Test";
            ribbonTab.Name = "ribbonTab2";
            this.Ribbon.Tabs.Add(ribbonTab);
        }

        /// <summary>
        /// </summary>
        /// <returns></returns>
        public void CreateRibbon()
        {
        RibbonBar.Tabs.Clear();

        var menu = default(Menu);
        if (Sys.hWndForm != default)
        {
            // PPJ:FINAL:AM:#6 - use the MainMenu; Menu shouldn't be assigned anymore
            // menu = CType(Sys.hWndForm.Control, Form).Menu
            try
            {
                //menu = (Menu)Sys.hWndForm.FindMember("MainMenu").Value;
                menu = (Menu)((SalWindowHandle)this).FindMember("MainMenu").Value;
            }
            catch
            {
            }
        }
        if (menu is null)
        {
            menu = RibbonMenu;
        }

        if (menu != null)
        {
            foreach (MenuItem mnuItem in menu.MenuItems)
            {
                var tab = new RibbonTab();

                tab.Text = mnuItem.Text;
                tab.Visible = mnuItem.Visible;
                tab.Enabled = mnuItem.Enabled;
                tab.Name = mnuItem.Name;
                RibbonBar.Tabs.Add(tab);

                foreach (MenuItem groupItem in mnuItem.MenuItems)
                {
                    var group = new RibbonGroup();

                    if (groupItem.MenuItems.Count > 0)
                    {
                        group.Name = groupItem.Name;
                        group.Text = groupItem.Text;
                        group.Visible = groupItem.Visible;
                        group.Enabled = groupItem.Enabled;
                        group.Tag = groupItem;
                        tab.Groups.Add(group);

                        foreach (MenuItem groupMnuItem in groupItem.MenuItems)
                            CreateGroup(groupMnuItem, group);

                        tab.Groups.Add(group);
                    }
                    else
                    {
                        group.Name = groupItem.Name;
                        // group.Text = groupItem.Text
                        group.Visible = groupItem.Visible;
                        group.Enabled = groupItem.Enabled;
                        group.Tag = groupItem;
                        if (CreateGroup(groupItem, group, false))
                            tab.Groups.Add(group);

                    }

                    //tab.Groups.Add(group);
                }
            }
            RibbonBar.BringToFront();
        }
    }

        private bool CreateGroup(MenuItem mnuItem, RibbonGroup group, bool setSeparatoe = true)
        {
            if (mnuItem.MenuItems.Count > 0)
            {
                CreateSplitButton(mnuItem, group);
            }
            else if (mnuItem is SalMenuSeparator)
            {
                if (setSeparatoe)
                {
                    group.Items.Add(CreateSeparator(mnuItem));
                }
                else
                    return false;
            }
            else
            {
                group.Items.Add(CreateButton(mnuItem));
            }
            return true;
        }

        private void CreateSplitButton(MenuItem mnuItem, RibbonGroup group)
        {
            var splitButton = new RibbonSplitButton();
            Image image;
            splitButton.Text = mnuItem.Text;
            splitButton.Name = mnuItem.Name;
            splitButton.Visible = mnuItem.Visible;
            splitButton.Enabled = mnuItem.Enabled;
            image = ((SalMenuItem)mnuItem).Image;
            if (image != null)
            {
                splitButton.LargeImage = image;
                splitButton.SmallImage = image;
                splitButton.TextImageRelation = C1.Win.C1Ribbon.TextImageRelation.ImageBeforeText;
            }
            group.Items.Add(splitButton);

            splitButton.DropDown += ribbonSplitButton_DropDown;

            foreach (MenuItem cMnuItem in mnuItem.MenuItems)
            {
                if (!(cMnuItem is SalMenuSeparator))
                {
                    splitButton.Items.Add(CreateButton(cMnuItem));
                }
                else
                {
                    splitButton.Items.Add(CreateSeparator(cMnuItem));
                }
            }

            AssociateSplitButtonMenu(mnuItem, splitButton);
        }

        private RibbonButton CreateButton(MenuItem mnuItem)
        {
            var button = new RibbonButton();
            Image image;
            button.Text = mnuItem.Text;
            button.Name = mnuItem.Name;
            button.Visible = mnuItem.Visible;
            button.Enabled = mnuItem.Enabled;
            image = ((SalMenuItem)mnuItem).Image;
            if (image != null)
            {
                button.LargeImage = image;
                button.SmallImage = image;
                button.TextImageRelation = C1.Win.C1Ribbon.TextImageRelation.ImageBeforeText;
            }
            button.Tag = mnuItem;

            AssociateButtonMenu(mnuItem, button);

            button.Click += ribbonButton_Click;

            return button;
        }

        private RibbonSeparator CreateSeparator(MenuItem mnuItem)
        {
            var separator = new RibbonSeparator();
            separator.Tag = mnuItem;
            return separator;
        }

        private void AssociateButtonMenu(MenuItem mnuItem, RibbonButton button)
        {
            if (ReferenceEquals(mnuItem.GetType(), typeof(SalMenuItem)))
            {
                mnuItem.Tag = button;
                button.Tag = mnuItem;
                return;
            }
        }

        private void AssociateSplitButtonMenu(MenuItem mnuItem, RibbonSplitButton button)
        {
            if (ReferenceEquals(mnuItem.GetType(), typeof(SalPopupMenu)))
            {
                mnuItem.Tag = button;
                button.Tag = mnuItem;
                return;
            }
        }

        private void ribbonBar_SelectedTabChanged(object sender, EventArgs e)
        {
            UpdateCurrentTab();
        }

        private void ribbonButton_Click(object sender, EventArgs e)
        {
            using (new SalContext(this))
                ((SalMenuItem)((RibbonButton)sender).Tag).PerformClick();
        }

        private void ribbonSplitButton_DropDown(object sender, EventArgs e)
        {
            using (new SalContext(this))
            {
                RibbonSplitButton splitButton = (RibbonSplitButton)sender;
                ((SalPopupMenu)splitButton.Tag).Update();

                foreach (RibbonItem ribbonItem in splitButton.Items)
                    SyncItem(ribbonItem);
            }
        }

        private void UpdateCurrentTab()
        {
            foreach (RibbonGroup group in RibbonBar.SelectedTab.Groups)
            {
                if (group.Tag is ISalMenu)
                {
                    ISalMenu iSalMenu = (ISalMenu)group.Tag;
                    iSalMenu.Update();
                }

                if (group.Tag is SalMenuItem)
                {
                    SalMenuItem salMenuItem = (SalMenuItem)group.Tag;
                    group.Visible = salMenuItem.Visible;
                    group.Enabled = salMenuItem.Enabled;
                }


                foreach (RibbonItem item in group.Items)
                    SyncItem(item);
            }
        }

        private void SyncItem(RibbonItem ribbonItem)
        {
            using (new SalContext(this))
            {
                if (ribbonItem.Tag is ISalMenu)
                {
                    ((ISalMenu)ribbonItem.Tag).Update();
                }

                if (ribbonItem.Tag is SalMenuItem)
                {
                    SalMenuItem salMenuItem = (SalMenuItem)ribbonItem.Tag;

                    ribbonItem.Enabled = salMenuItem.Enabled;
                    ribbonItem.Visible = salMenuItem.Visible;

                    ((RibbonButton)ribbonItem).Text = salMenuItem.Text;
                }
                else if (ribbonItem.Tag is SalPopupMenu)
                {
                    SalPopupMenu salPopupMenu = (SalPopupMenu)ribbonItem.Tag;
                    ribbonItem.Enabled = salPopupMenu.Enabled;
                    ribbonItem.Visible = salPopupMenu.Visible;

                    ((RibbonSplitButton)ribbonItem).Text = salPopupMenu.Text;
                }
                else if (ribbonItem.Tag is SalMenuSeparator)
                {
                    SalMenuSeparator salMenuSeparator = (SalMenuSeparator)ribbonItem.Tag;
                    ribbonItem.Visible = salMenuSeparator.Visible;
                }
            }
        }
        #endregion

        #region Window Actions

        /// <summary>
        /// clsRibbonFormWindow WindowActions Handler
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void clsStdFormWindow_WindowActions(object sender, WindowActionsEventArgs e)
        {
            #region Actions
            switch (e.ActionType)
            {
                case Sys.SAM_Create:
                    this.clsStdFormWindow_OnSAM_Create(sender, e);
                    break;
            }
            #endregion
        }

        /// <summary>
        /// SAM_Create event handler.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void clsStdFormWindow_OnSAM_Create(object sender, WindowActionsEventArgs e)
        {
            #region Actions
            e.Handled = true;
            this.CreateRibbon();
            #endregion
        }
        #endregion

        #region System Methods/Properties

        /// <summary>
        /// Returns the object instance associated with the window handle.
        /// </summary>
        /// <param name="handle"></param>
        /// <returns></returns>
        [DebuggerStepThrough]
        public static FCRibbonFormWindow FromHandle(SalWindowHandle handle)
        {
            return ((FCRibbonFormWindow)SalWindow.FromHandle(handle, typeof(FCRibbonFormWindow)));
        }
        #endregion
    }
}
