// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using System.Runtime.InteropServices;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	[ComSourceInterfaces(typeof(AX_CMLL24RLib_LlRtfCtrl__LlRtfCtrlEvents))]
	public class AX_CMLL24RLib_LlRtfCtrl : SalActiveX, AX_CMLL24RLib_LlRtfCtrl__LlRtfCtrlEvents
	{
		
		/// <summary>
		/// This is the real COM object class.
		/// </summary>
		internal CMLL24RLib_LlRtfCtrl _CoClass = new CMLL24RLib_LlRtfCtrl();
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public AX_CMLL24RLib_LlRtfCtrl(): base("{C78B7BCD-03B4-412F-A25E-62DA8A4D2E0F}")
		{
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		public event ContentsChangedEventHandler ContentsChanged;
		public event SelectionChangedEventHandler SelectionChanged;
		public event DialogKeyEventHandler DialogKey;
		public event KeyDownEventHandler KeyDown;
		public event KeyUpEventHandler KeyUp;
		public event CharEventHandler Char;
		
		#region Windows Form Designer generated code
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			// 
			// AX_CMLL24RLib_LlRtfCtrl
			// 
			this.Name = "AX_CMLL24RLib_LlRtfCtrl";
			this.Size = new System.Drawing.Size(72, 21);
			this.TabStop = false;
		}
		#endregion
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the CMLL24RLib_LlTextModeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetTextMode(ref SalNumber returnValue)
		{
			using (new SalContext(this))
			{
				return _CoClass.PropGetTextMode(ref returnValue);
			}
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the CMLL24RLib_LlTextModeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetTextMode(SalNumber rhs)
		{
			using (new SalContext(this))
			{
				return _CoClass.PropSetTextMode(rhs);
			}
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean CopyToClipboard()
		{
			using (new SalContext(this))
			{
				return _CoClass.CopyToClipboard();
			}
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the CMLL24RLib_LlContentModeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetContentMode(SalNumber rhs)
		{
			using (new SalContext(this))
			{
				return _CoClass.PropSetContentMode(rhs);
			}
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the CMLL24RLib_LlContentModeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetContentMode(ref SalNumber returnValue)
		{
			using (new SalContext(this))
			{
				return _CoClass.PropGetContentMode(ref returnValue);
			}
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetText(ref SalString returnValue)
		{
			using (new SalContext(this))
			{
				return _CoClass.PropGetText(ref returnValue);
			}
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetText(SalString rhs)
		{
			using (new SalContext(this))
			{
				return _CoClass.PropSetText(rhs);
			}
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPrintState(ref SalNumber returnValue)
		{
			using (new SalContext(this))
			{
				return _CoClass.PropGetPrintState(ref returnValue);
			}
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetParentComponent(SalObject rhs)
		{
			using (new SalContext(this))
			{
				return _CoClass.PropSetParentComponent(rhs);
			}
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hDC"></param>
		/// <param name="left"></param>
		/// <param name="top"></param>
		/// <param name="right"></param>
		/// <param name="bottom"></param>
		/// <param name="bRestart"></param>
		/// <returns></returns>
		public SalBoolean Display(SalNumber hDC, SalNumber left, SalNumber top, SalNumber right, SalNumber bottom, SalBoolean bRestart)
		{
			using (new SalContext(this))
			{
				return _CoClass.Display(hDC, left, top, right, bottom, bRestart);
			}
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetParentComponent(SalObject returnValue)
		{
			using (new SalContext(this))
			{
				return _CoClass.PropGetParentComponent(returnValue);
			}
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ControlID"></param>
		/// <returns></returns>
		public SalBoolean ProhibitAction(SalNumber ControlID)
		{
			using (new SalContext(this))
			{
				return _CoClass.ProhibitAction(ControlID);
			}
		}
		
		#region AX_CMLL24RLib_LlRtfCtrl__LlRtfCtrlEvents Implementation
		void AX_CMLL24RLib_LlRtfCtrl__LlRtfCtrlEvents.ContentsChanged()
		{
			if (ContentsChanged != null)
			{
				ContentsChanged();
			}
		}
		void AX_CMLL24RLib_LlRtfCtrl__LlRtfCtrlEvents.SelectionChanged(ref int nType, ref int nMin, ref int nMax)
		{
			if (SelectionChanged != null)
			{
				SelectionChanged(ref nType, ref nMin, ref nMax);
			}
		}
		void AX_CMLL24RLib_LlRtfCtrl__LlRtfCtrlEvents.DialogKey(ref bool bDown, ref int nVKCodeAndModifiers, ref int lParam, ref bool pbHandled)
		{
			if (DialogKey != null)
			{
				DialogKey(ref bDown, ref nVKCodeAndModifiers, ref lParam, ref pbHandled);
			}
		}
		void AX_CMLL24RLib_LlRtfCtrl__LlRtfCtrlEvents.KeyDown(ref int nVKCodeAndModifiers, ref int lParam, ref bool pbHandled)
		{
			if (KeyDown != null)
			{
				KeyDown(ref nVKCodeAndModifiers, ref lParam, ref pbHandled);
			}
		}
		void AX_CMLL24RLib_LlRtfCtrl__LlRtfCtrlEvents.KeyUp(ref int nVKCodeAndModifiers, ref int lParam, ref bool pbHandled)
		{
			if (KeyUp != null)
			{
				KeyUp(ref nVKCodeAndModifiers, ref lParam, ref pbHandled);
			}
		}
		void AX_CMLL24RLib_LlRtfCtrl__LlRtfCtrlEvents.Char(ref int nCharAndModifiers, ref int lParam, ref bool pbHandled)
		{
			if (Char != null)
			{
				Char(ref nCharAndModifiers, ref lParam, ref pbHandled);
			}
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public new static AX_CMLL24RLib_LlRtfCtrl FromHandle(SalWindowHandle handle)
		{
			return ((AX_CMLL24RLib_LlRtfCtrl)SalWindow.FromHandle(handle, typeof(AX_CMLL24RLib_LlRtfCtrl)));
		}
		#endregion
		
		public delegate void ContentsChangedEventHandler();
		
		public delegate void SelectionChangedEventHandler(ref int nType, ref int nMin, ref int nMax);
		
		public delegate void DialogKeyEventHandler(ref bool bDown, ref int nVKCodeAndModifiers, ref int lParam, ref bool pbHandled);
		
		public delegate void KeyDownEventHandler(ref int nVKCodeAndModifiers, ref int lParam, ref bool pbHandled);
		
		public delegate void KeyUpEventHandler(ref int nVKCodeAndModifiers, ref int lParam, ref bool pbHandled);
		
		public delegate void CharEventHandler(ref int nCharAndModifiers, ref int lParam, ref bool pbHandled);
	}
	
	[ComImport]
	[Guid("4E5D0BC2-4201-499C-A109-7DC577ABFC23")]
	[InterfaceType(ComInterfaceType.InterfaceIsIDispatch)]
	public interface AX_CMLL24RLib_LlRtfCtrl__LlRtfCtrlEvents
	{
		[DispId(1)] void ContentsChanged();
		[DispId(2)] void SelectionChanged(ref int nType, ref int nMin, ref int nMax);
		[DispId(3)] void DialogKey(ref bool bDown, ref int nVKCodeAndModifiers, ref int lParam, ref bool pbHandled);
		[DispId(4)] void KeyDown(ref int nVKCodeAndModifiers, ref int lParam, ref bool pbHandled);
		[DispId(5)] void KeyUp(ref int nVKCodeAndModifiers, ref int lParam, ref bool pbHandled);
		[DispId(6)] void Char(ref int nCharAndModifiers, ref int lParam, ref bool pbHandled);
	}
}
