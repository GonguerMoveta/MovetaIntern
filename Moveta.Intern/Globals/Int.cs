// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;
using System.Globalization;
using System.Linq;

namespace Moveta.Intern
{
	
	public static class Int
	{
		private static SalBoolean __QOFindWindow_bDoItTwice = false;
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public static SalString GetUserID()
		{
			#region Local Variables
			SalString strNetUser = "";
			SalNumber nNetUserLength = 0;
			#endregion
			
			#region Actions
			nNetUserLength = 256;
			Sal.StrSetBufferLength(ref strNetUser, nNetUserLength);
			// MF Hier
			// Call WNetGetUser(strNetUser,nNetUserLength)
			return strNetUser;
			#endregion
		}
		
		/// <summary>
		/// Pushes a number onto the number stack
		/// </summary>
		/// <param name="nNumber"></param>
		/// <returns></returns>
		public static SalNumber PushNumber(SalNumber nNumber)
		{
			#region Actions
			Var.nNumStack[Var.nNumStackPtr] = nNumber;
			Var.nNumStackPtr = Var.nNumStackPtr + 1;

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Pushes a string onto the string stack
		/// </summary>
		/// <param name="sString"></param>
		/// <returns></returns>
		public static SalNumber PushString(SalString sString)
		{
			#region Actions
			Var.strStringStack[Var.nStrStackPtr] = sString;
			Var.nStrStackPtr = Var.nStrStackPtr + 1;

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Pop a number from the number stack
		/// </summary>
		/// <param name="nNumber"></param>
		/// <returns></returns>
		public static SalBoolean PopNumber(ref SalNumber nNumber)
		{
			#region Actions
			if (Var.nNumStackPtr == 0) 
			{

				// should never happen but better check for this error condition

				// Call SalMessageBox ('Interner Fehler','ACHTUNG', MB_IconHand)
				return false;
			}
			else
			{

				// pop the number and adjust the pointer

				Var.nNumStackPtr = Var.nNumStackPtr - 1;
				nNumber = Var.nNumStack[Var.nNumStackPtr];
				return true;
			}
			#endregion
		}
		
		/// <summary>
		/// Pop a string off the string stack
		/// </summary>
		/// <param name="sString"></param>
		/// <returns></returns>
		public static SalBoolean PopString(ref SalString sString)
		{
			#region Actions
			if (Var.nStrStackPtr == 0) 
			{

				// should never happen but better check for this error condition

				return false;
			}
			else
			{

				// pop the string and adjust our pointer

				Var.nStrStackPtr = Var.nStrStackPtr - 1;
				sString = Var.strStringStack[Var.nStrStackPtr];
				return true;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hSqlLocal"></param>
		/// <param name="strSqlStatement"></param>
		/// <param name="strSqlMsg"></param>
		/// <returns></returns>
		public static SalNumber SqlErrorAction(SalSqlHandle hSqlLocal, SalString strSqlStatement, SalString strSqlMsg)
		{
			#region Local Variables
			SalNumber nResult = 0;
			SalNumber nError = 0;
			SalBoolean bOk = false;
			#endregion
			
			#region Actions
			nError = hSqlLocal.LastErrorCode;
			switch (nError)
			{
				case Const.DEADLOCK:
					// 28.04.14
					Int.PalLogToFile("SQL-Deadlock", 0);

					// Set nResult = nError
					nResult = Sal.MessageBox(@"Ein sogenannter Deadlock ist aufgetreten. Zwei Benutzer wollen jeweils den Datenbereich des Anderen sperren.
Einer von Ihnen muß abbrechen und einen Fehler in Kauf  nehmen.

" + strSqlStatement, "Deadlock", (Sys.MB_RetryCancel | Sys.MB_IconExclamation));
					Int.PalLog("Deadlock " + strSqlStatement);
					break;
				

				
				case Const.ISOLATION:
					// 28.04.14
					Int.PalLogToFile("SQL-Isolation", 0);

					goto case Const.DATABASE;
				
				case Const.DATABASE:
					// 28.04.14
					Int.PalLogToFile("SQL-Database", 0);

					goto case Const.PASSWORD;
				
				case Const.PASSWORD:
					// 28.04.14
					Int.PalLogToFile("SQL-Password", 0);

					goto case Const.USER;
				
				case Const.USER:
					// 28.04.14
					Int.PalLogToFile("SQL-User", 0);

					Sal.MessageBox(strSqlStatement + " !", "Datenbank-Fehler", (Sys.MB_Ok | Sys.MB_IconStop));
					break;
				
				// 05.01.12
				
				case Const.TIMEOUT:
					// 28.04.14
					Int.PalLogToFile("SQL-Timeout: " + strSqlStatement, 0);

					Sal.MessageBox(@"Die u.g. Datenbankaktion kann momentan nicht ausgeführt werden, da der betroffene Datenbereich durch einen anderen Benutzer oder in einer anderen Sitzung belegt ist.
Bitte klären Sie dies Moveta-intern oder warten Sie eine Weile. Klicken Sie dann bitte auf Ok, um die Aktion zu wiederholen.

" + strSqlStatement, "Zeitüberschreitung", (Sys.MB_Ok | Sys.MB_IconExclamation));
					Int.PalLog("Timeout " + strSqlStatement);
					nResult = Sys.IDRETRY;
					break;
				
				case 203:
					// 28.04.14
					Int.PalLogToFile("SQL-Not executed: " + strSqlStatement, 0);

					Sal.MessageBox(@"Die u.g. Datenbankaktion kann momentan nicht ausgeführt werden, da der betroffene Datenbereich durch einen anderen Benutzer oder in einer anderen Sitzung belegt ist.
Bitte klären Sie dies Moveta-intern oder warten Sie eine Weile. Klicken Sie dann bitte auf Ok, um die Aktion zu wiederholen.

" + strSqlStatement, "Zeitüberschreitung", (Sys.MB_Ok | Sys.MB_IconExclamation));
					Int.PalLog("Timeout " + strSqlStatement);
					nResult = Sys.IDRETRY;
					break;
				

				
				default:
					// 28.04.14
					Int.PalLogToFile("SQL-Fehler " + nError.ToString(0), 0);

					Int.PushString(strSqlStatement);
					Int.PushString(strSqlMsg);
					Int.PushNumber(nError);
					Int.PushNumber(Sal.WindowHandleToNumber(hSqlLocal));
					nResult = dlgSqlErrorAction.ModalDialog(Sys.hWndForm);
					break;
			}
			Sys.hWndForm.SetStatusBarText("");
			return nResult;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hSqlLocal"></param>
		/// <returns></returns>
		public static SalNumber SqlConnection(ref SalSqlHandle hSqlLocal)
		{
			#region Local Variables
			SqlLocals.SqlConnectionLocals locals = new SqlLocals.SqlConnectionLocals();
			#endregion
			
			#region Actions
			using (new SqlContext(locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.hSqlLocal = hSqlLocal;

					Sal.WaitCursor(true);
					locals.strSqlMsg = "Fehler bei Herstellung der Verbindung zur Datenbank";
					locals.bOk = false;
					while (locals.bOk == false) 
					{
						#region WhenSqlError
						WhenSqlErrorHandler sqlErrorHandler1 = delegate(SalSqlHandle hSql)
						{
							locals.nResult = locals.hSqlLocal.LastErrorCode;
							Sql.GetErrorText(locals.nResult, ref locals.strSqlMsg);
							return false;
						};
						#endregion

						if (locals.hSqlLocal.Connect(sqlErrorHandler1)) 
						{
							locals.bOk = true;
						}
						if (locals.bOk == false) 
						{
							locals.nResult = Int.SqlErrorAction(SalSqlHandle.Null, locals.strSqlMsg, "");
							if (locals.nResult != Sys.IDRETRY) 
							{
								locals.bOk = true;
							}
						}
						else
						{
							locals.nResult = Sys.IDOK;
						}
					}
					if (locals.nResult == Sys.IDOK) 
					{
						locals.strSqlMsg = "Fehler bei Setzen der Parameter für Datenbank-Zugriff";
						// *** AutoCommit setzen ***
						if (locals.bOk) 
						{
							locals.bOk = false;
							while (locals.bOk == false) 
							{
								#region WhenSqlError
								WhenSqlErrorHandler sqlErrorHandler2 = delegate(SalSqlHandle hSql)
								{
									return false;
								};
								#endregion

								if (locals.hSqlLocal.SetParameter(Sys.DBP_AUTOCOMMIT, 1, "")) 
								{
									locals.bOk = true;
								}
								if (locals.bOk == false) 
								{
									locals.nResult = Int.SqlErrorAction(locals.hSqlLocal, locals.strSqlMsg + "AUTOCOMMIT", "");
									if (locals.nResult != Sys.IDRETRY) 
									{
										locals.bOk = true;
									}
								}
								else
								{
									locals.nResult = Sys.IDOK;
								}
							}
						}
						// *** No Prebuild setzen ***
						if (locals.bOk) 
						{
							locals.bOk = false;
							while (locals.bOk == false) 
							{
								#region WhenSqlError
								WhenSqlErrorHandler sqlErrorHandler3 = delegate(SalSqlHandle hSql)
								{
									return false;
								};
								#endregion
								//FC:FINAL: Sys.DBP_NOPREBUILD is not supported by PPJ
								//if (locals.hSqlLocal.SetParameter(Sys.DBP_NOPREBUILD, 1, "")) 
								//{
								//	locals.bOk = true;
								//}
								//if (locals.bOk == false) 
								//{
								//	locals.nResult = Int.SqlErrorAction(locals.hSqlLocal, locals.strSqlMsg + "NOPREBUILD", "");
								//	if (locals.nResult != Sys.IDRETRY) 
								//	{
								//		locals.bOk = true;
								//	}
								//}
								//else
								//{
								//	locals.nResult = Sys.IDOK;
								//}
								locals.bOk = true;
							}
						}
						// *** PreServe setzen ***
						if (locals.bOk) 
						{
							locals.bOk = false;
							while (locals.bOk == false) 
							{
								#region WhenSqlError
								WhenSqlErrorHandler sqlErrorHandler4 = delegate(SalSqlHandle hSql)
								{
									return false;
								};
								#endregion

								if (locals.hSqlLocal.SetParameter(Sys.DBP_PRESERVE, 1, "")) 
								{
									locals.bOk = true;
								}
								if (locals.bOk == false) 
								{
									locals.nResult = Int.SqlErrorAction(locals.hSqlLocal, locals.strSqlMsg + "PRESERVE", "");
									if (locals.nResult != Sys.IDRETRY) 
									{
										locals.bOk = true;
									}
								}
								else
								{
									locals.nResult = Sys.IDOK;
								}
							}
						}
						// *** Isolation-Level setzen ***
						if (locals.bOk) 
						{
							locals.bOk = false;
							while (locals.bOk == false) 
							{
								#region WhenSqlError
								WhenSqlErrorHandler sqlErrorHandler5 = delegate(SalSqlHandle hSql)
								{
									return false;
								};
								#endregion
								//FC:FINAL: Isolation level R3 is not supported.
								//if (locals.hSqlLocal.SetIsolationLevel("R3")) 
								//{
								//	locals.bOk = true;
								//}
								//if (locals.bOk == false) 
								//{
								//	locals.nResult = Int.SqlErrorAction(locals.hSqlLocal, locals.strSqlMsg + "ISOLATION", "");
								//	if (locals.nResult != Sys.IDRETRY) 
								//	{
								//		locals.bOk = true;
								//	}
								//}
								//else
								//{
								//	locals.nResult = Sys.IDOK;
								//}
								locals.bOk = true;
							}
						}
						// *** Preserve setzen ***
						// 24.08.22 doppelt, daher raus
						// If bOk
						// Set bOk = FALSE
						// While bOk = FALSE
						// When SqlError
						// Return FALSE
						// If SqlSetParameter( hSqlLocal, DBP_PRESERVE, TRUE, '' )
						// Set bOk = TRUE
						// If bOk = FALSE
						// Set nResult = SqlErrorAction( hSqlLocal, strSqlMsg || 'PRESERVE', '' )
						// If nResult != IDRETRY
						// Set bOk = TRUE
						// Else
						// Set nResult = IDOK
						// *** TimeOut setzen ***
						if (locals.bOk) 
						{
							locals.bOk = false;
							while (locals.bOk == false) 
							{
								#region WhenSqlError
								WhenSqlErrorHandler sqlErrorHandler6 = delegate(SalSqlHandle hSql)
								{
									return false;
								};
                                #endregion
                                //FC:FINAL: increase timeout 20 -> 10000
                                if (locals.hSqlLocal.SetTimeout(10000))
                                {
									locals.bOk = true;
								}
								if (locals.bOk == false) 
								{
									locals.nResult = Int.SqlErrorAction(locals.hSqlLocal, locals.strSqlMsg + "TIMEOUT", "");
									if (locals.nResult != Sys.IDRETRY) 
									{
										locals.bOk = true;
									}
								}
								else
								{
									locals.nResult = Sys.IDOK;
								}
							}
						}
						// 12.05.14 Set Buffers
						// TODO: Obsolete functions or constants used: SetInMessage.
						Sql.SetInMessage(locals.hSqlLocal, 32000);
						// TODO: Obsolete functions or constants used: SetOutMessage.
						Sql.SetOutMessage(locals.hSqlLocal, 32000);

						if (locals.nResult != Sys.IDOK) 
						{
							locals.hSqlLocal.Disconnect();
						}
					}
					Sal.WaitCursor(false);
					return locals.nResult;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					hSqlLocal = locals.hSqlLocal;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hSqlLocal"></param>
		/// <param name="strSqlStatement"></param>
		/// <param name="strSqlMsg"></param>
		/// <param name="nCount"></param>
		/// <returns></returns>
		public static SalNumber SqlHandleExec(SalSqlHandle hSqlLocal, SalString strSqlStatement, SalString strSqlMsg, ref SalNumber nCount)
		{
			#region Local Variables
			SqlLocals.SqlHandleExecLocals locals = new SqlLocals.SqlHandleExecLocals();
			#endregion
			
			#region Actions
			using (new SqlContext(locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.hSqlLocal = hSqlLocal;
					locals.strSqlStatement = strSqlStatement;
					locals.strSqlMsg = strSqlMsg;
					locals.nCount = nCount;

					locals.nCount = 0;
					locals.bOk = false;
					locals.nPRetry = 0;
					while (locals.bOk == false) 
					{
						#region WhenSqlError
						WhenSqlErrorHandler sqlErrorHandler7 = delegate(SalSqlHandle hSql)
						{
							locals.nPRetry = locals.nPRetry + 1;
							return false;
						};
						#endregion

						if (locals.hSqlLocal.Prepare(locals.strSqlStatement, sqlErrorHandler7)) 
						{
							#region WhenSqlError
							WhenSqlErrorHandler sqlErrorHandler8 = delegate(SalSqlHandle hSql)
							{
								return false;
							};
							#endregion

							if (locals.hSqlLocal.Execute(sqlErrorHandler8)) 
							{
								locals.bOk = true;
							}
						}
						if (locals.bOk == false) 
						{
							if (locals.nPRetry > 1) 
							{
								locals.nResult = Int.SqlErrorAction(locals.hSqlLocal, locals.strSqlStatement, locals.strSqlMsg);
								if (locals.nResult != Sys.IDRETRY) 
								{
									locals.bOk = true;
								}
							}
							locals.nPRetry = locals.nPRetry + 1;
						}
						else
						{
							locals.nResult = Sys.IDOK;
						}
					}
					if (locals.nResult == Sys.IDOK) 
					{
						locals.nCount = locals.hSqlLocal.GetModifiedRows();
					}
					return locals.nResult;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					nCount = locals.nCount;

				}
			}
			#endregion
		}
		// Function: SqlHandleExecX	! ohne GetModifiedRows
		// Description:
		// Returns
		// Number:
		// Parameters
		// Sql Handle: hSqlLocal
		// String: strSqlStatement
		// String: strSqlMsg
		// Static Variables
		// Local variables
		// Number: nResult
		// Number: nError
		// Boolean: bOk
		// Actions
		// Set bOk = FALSE
		// While bOk = FALSE
		// When SqlError
		// Return FALSE
		// If SqlPrepare( hSqlLocal, strSqlStatement )
		// When SqlError
		// Return FALSE
		// If SqlExecute( hSqlLocal )
		// Set bOk = TRUE
		// If bOk = FALSE
		// Set nResult = SqlErrorAction( hSqlLocal, strSqlStatement, strSqlMsg )
		// If nResult != IDRETRY
		// Set bOk = TRUE
		// Else
		// Set nResult = IDOK
		// Return nResult
		/// <summary>
		/// </summary>
		/// <param name="hSqlLocal"></param>
		/// <param name="strSqlMsg"></param>
		/// <returns></returns>
		public static SalNumber SqlHandleExecuteX(SalSqlHandle hSqlLocal, SalString strSqlMsg)
		{
			#region Local Variables
			SqlLocals.SqlHandleExecuteXLocals locals = new SqlLocals.SqlHandleExecuteXLocals();
			#endregion
			
			#region Actions
			using (new SqlContext(locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.hSqlLocal = hSqlLocal;
				locals.strSqlMsg = strSqlMsg;

				locals.bOk = false;
				while (locals.bOk == false) 
				{
					#region WhenSqlError
					WhenSqlErrorHandler sqlErrorHandler9 = delegate(SalSqlHandle hSql)
					{
						return false;
					};
					#endregion

					if (locals.hSqlLocal.Execute(sqlErrorHandler9)) 
					{
						locals.bOk = true;
					}
					if (locals.bOk == false) 
					{
						locals.nResult = Int.SqlErrorAction(locals.hSqlLocal, "", locals.strSqlMsg);
						if (locals.nResult != Sys.IDRETRY) 
						{
							locals.bOk = true;
						}
					}
					else
					{
						locals.nResult = Sys.IDOK;
					}
				}
				return locals.nResult;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hSqlLocal"></param>
		/// <param name="strSqlMsg"></param>
		/// <returns></returns>
		public static SalNumber SqlExecut(SalSqlHandle hSqlLocal, SalString strSqlMsg)
		{
			#region Local Variables
			SqlLocals.SqlExecutLocals locals = new SqlLocals.SqlExecutLocals();
			#endregion
			
			#region Actions
			using (new SqlContext(locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.hSqlLocal = hSqlLocal;
				locals.strSqlMsg = strSqlMsg;

				locals.bOk = false;
				while (locals.bOk == false) 
				{
					#region WhenSqlError
					WhenSqlErrorHandler sqlErrorHandler10 = delegate(SalSqlHandle hSql)
					{
						return false;
					};
					#endregion

					if (locals.hSqlLocal.Execute(sqlErrorHandler10)) 
					{
						locals.bOk = true;
					}
					if (locals.bOk == false) 
					{
						locals.nResult = Int.SqlErrorAction(locals.hSqlLocal, "", locals.strSqlMsg);
						if (locals.nResult != Sys.IDRETRY) 
						{
							locals.bOk = true;
						}
					}
					else
					{
						locals.nResult = Sys.IDOK;
					}
				}
				return locals.nResult;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hSqlLocal"></param>
		/// <param name="strSqlStatement"></param>
		/// <param name="strSqlMsg"></param>
		/// <returns></returns>
		public static SalNumber SqlHandleExecuteXError(SalSqlHandle hSqlLocal, SalString strSqlStatement, SalString strSqlMsg)
		{
			#region Local Variables
			SqlLocals.SqlHandleExecuteXErrorLocals locals = new SqlLocals.SqlHandleExecuteXErrorLocals();
			#endregion
			
			#region Actions
			using (new SqlContext(locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.hSqlLocal = hSqlLocal;
				locals.strSqlStatement = strSqlStatement;
				locals.strSqlMsg = strSqlMsg;

				locals.bOk = false;
				while (locals.bOk == false) 
				{
					#region WhenSqlError
					WhenSqlErrorHandler sqlErrorHandler11 = delegate(SalSqlHandle hSql)
					{
						return false;
					};
					#endregion

					if (locals.hSqlLocal.Execute(sqlErrorHandler11)) 
					{
						locals.bOk = true;
					}
					if (locals.bOk == false) 
					{
						locals.nResult = Int.SqlErrorAction(locals.hSqlLocal, "", locals.strSqlMsg);
						if (locals.nResult != Sys.IDRETRY) 
						{
							locals.bOk = true;
						}
						else
						{
							locals.hSqlLocal.Prepare(locals.strSqlStatement);
						}
					}
					else
					{
						locals.nResult = Sys.IDOK;
					}
				}
				return locals.nResult;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strSqlStatement"></param>
		/// <returns></returns>
		public static SalNumber SqlImmed(SalString strSqlStatement)
		{
			#region Local Variables
			SalNumber nResult = 0;
			SalString strSqlMsg = "";
			SalNumber nCount = 0;
			// 06.01.14 Ä1005
			SalSqlHandle hSqlP = SalSqlHandle.Null;
			// Session Handle: hSessionP
			#endregion
			
			#region Actions
			Int.SqlConnection(ref hSqlP);

			strSqlMsg = "Programmfehler bei SQLIMMED";
			nResult = Int.SqlHandleExec(hSqlP, strSqlStatement, strSqlMsg, ref nCount);
			if (nResult == Sys.IDOK) 
			{
				hSqlP.Commit();
			}
			if (hSqlP.Disconnect()) 
			{
			}
			return nResult;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strSqlStatement"></param>
		/// <returns></returns>
		public static SalNumber SqlImmedX(SalString strSqlStatement)
		{
			#region Local Variables
			SalNumber nResult = 0;
			SalString strSqlMsg = "";
			SalSqlHandle hSqlP = SalSqlHandle.Null;
			// Session Handle: hSession
			SalNumber nPCount = 0;
			#endregion
			
			#region Actions
			strSqlMsg = "Programmfehler bei SQLIMMEDX";
			Int.SqlConnection(ref hSqlP);

			nResult = Int.SqlHandleExec(hSqlP, strSqlStatement, strSqlMsg, ref nPCount);
			if (nResult == Sys.IDOK) 
			{
				hSqlP.Commit();
			}
			// 06.01.14 Ä1005
			hSqlP.Disconnect();

			return nResult;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strSqlStatement"></param>
		/// <returns></returns>
		public static SalNumber SqlImmedSel(SalString strSqlStatement)
		{
			#region Local Variables
			SqlLocals.SqlImmedSelLocals locals = new SqlLocals.SqlImmedSelLocals();
			#endregion
			
			#region Actions
			using (new SqlContext(locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.strSqlStatement = strSqlStatement;

				// 28.11.13
				Int.SqlConnection(ref locals.hSqlSel);
				// Set bOk=SqlCreateSession(hSession,'')
				// If not bOk
				// Call SalMessageBox( 'Session kann nicht erzeugt werden.', 'SqlImmedSel', MB_Ok )
				// 06.01.14 RO
				// Set bOk=SqlCreateStatement (hSession, hSqlSel)
				// Call SqlSetIsolationLevel(hSqlSel,'RO')

				locals.strSqlMsg = "Programmfehler bei SQLIMMEDSEL";
				locals.nResult = Int.SqlHandleExec(locals.hSqlSel, locals.strSqlStatement, locals.strSqlMsg, ref locals.nCount);
				if (locals.nResult == Sys.IDOK) 
				{
					Var.nFetchImmed = locals.hSqlSel.FetchNext();
				}

				// If nFetchImmed != FETCH_Ok
				// Set nResult = IDABORT
				// If nResult = IDOK
				// Call SqlCommit( hSqlSel )
				locals.hSqlSel.Disconnect();
				// 28.11.13
				// Call SqlFreeSession( hSession )

				return locals.nResult;
			}
			#endregion
		}
		
		/// <summary>
		/// Ersatz für SqlExists
		/// </summary>
		/// <param name="strSqlStatement"></param>
		/// <param name="bExists"></param>
		/// <returns></returns>
		public static SalNumber SqlIstDa(SalString strSqlStatement, ref SalBoolean bExists)
		{
			#region Local Variables
			SalString strKommando = "";
			SalNumber nResult = 0;
			// Session Handle: hSession
			SalSqlHandle hSqlSel = SalSqlHandle.Null;
			SalNumber nCount = 0;
			SalBoolean bOk = false;
			SalString strSqlMsg = "";
			#endregion
			
			#region Actions
			bExists = false;
			// 28.11.13
			// Set strKommando = 'SELECT count(*) INTO :nIstDaAnz  ' || strSqlStatement
			// Set nResult = SqlImmedSel( strKommando )
			// If nResult = IDOK
			// If nIstDaAnz != 0
			// Set bExists = TRUE
			// Return nResult
			strKommando = "SELECT NULL  " + strSqlStatement;
			// 06.01.14 Ä1005 RO
			Int.SqlConnection(ref hSqlSel);
			// Set bOk=SqlCreateSession(hSession,'')
			// Set bOk=SqlCreateStatement (hSession, hSqlSel)
			// Call SqlSetIsolationLevel(hSqlSel,'RO')
			strSqlMsg = "Programmfehler bei SQLIMMEDSEL";
			nResult = Int.SqlHandleExec(hSqlSel, strKommando, strSqlMsg, ref nCount);
			nCount = hSqlSel.GetResultSetCount();
			if (nResult == Sys.IDOK) 
			{
				hSqlSel.Commit();
			}
			hSqlSel.Disconnect();
			// Call SqlFreeSession( hSession )
			if (nCount > 0) 
			{
				bExists = true;
			}

			return nResult;
			#endregion
		}
		// Function: PalGebuehrenProz
		// Description: errechnet anhand der ArztNr und der übergebenen Summe die Geb.%
		// Returns
		// Number:
		// Parameters
		// Number: nArztNr
		// Number: nAbrSumme
		// Receive Number: nFest
		// Static Variables
		// Local variables
		// Actions
		// Set nArztPGP = nArztNr
		// Set nAbrSummePGP = nAbrSumme
		// Call SqlImmedSel('SELECT ASTAFFEL INTO :nStNr FROM A
		// WHERE AARZTNR = :nArztPGP')
		// Call SqlImmedSel('SELECT ST1,ST2,ST3,ST4,ST5,ST6, STGEB
		// INTO :nSt[1], :nSt[2],
		// :nSt[3], :nSt[4],
		// :nSt[5], :nSt[6], :nStGeb
		// FROM ST WHERE STNR = :nStNr')
		// Set nFest = nStGeb
		// If nAbrSumme <= 25.56
		// Return nSt[1]
		// Else If nAbrSumme <=51.13
		// Return nSt[2]
		// Else If nAbrSumme <= 76.69
		// Return nSt[3]
		// Else If nAbrSumme <= 127.82
		// Return nSt[4]
		// Else If nAbrSumme <= 255.65
		// Return nSt[5]
		// Else
		// Return nSt[6]
		/// <summary>
		/// konvertiert String von Windows- in DOS-Format
		/// </summary>
		/// <param name="strConv"></param>
		/// <returns></returns>
		public static SalString PalWinToDos(SalString strConv)
		{
			#region Local Variables
			SalString strNeu = "";
			#endregion
			
			#region Actions
			// 08.11.10 in TD52 funktioniert Funktion nicht mehr
			// Call SalStrSetBufferLength(strNeu,254)
			// Call CharToOemA(strConv,strNeu)
			strNeu = strConv;
			return strNeu;
			#endregion
		}
		
		/// <summary>
		/// konvertiert String von Windows- in DOS-Format
		/// </summary>
		/// <param name="strConv"></param>
		/// <returns></returns>
		public static SalString PalDosToWin(SalString strConv)
		{
			#region Local Variables
			SalString strNeu = "";
			SalNumber nCount = 0;
			#endregion
			
			#region Actions
			// 31.05.07 F179
			// Call SalStrSetBufferLength(strNeu,254)
			// 09.11.10 auskommentiert, da bei TVN3 nichts ankommt.
			// Call SalStrSetBufferLength(strNeu,SalStrLength(strConv))
			// Call OemToCharA(strConv,strNeu)
			// 11.01.11 OTF828
			strNeu = strConv;
			nCount = 1;
			while (nCount < 9) 
			{
				strNeu = Int.PalStrReplace(strNeu, Var.strDOS[nCount], Var.strWin[nCount]);
				nCount = nCount + 1;
			}
			// Set strWin[01] = 'ä'
			// Set strWin[02] = 'ö'
			// Set strWin[03] = 'ü'
			// Set strWin[04] = 'Ä'
			// Set strWin[05] = 'Ö'
			// Set strWin[06] = 'Ü'
			// Set strWin[07] = 'ß'
			// Set strWin[08] = '´'
			// Set strDOS[01] = SalNumberToChar(132)
			// Set strDOS[02] = SalNumberToChar(148)
			// Set strDOS[03] = SalNumberToChar(129)
			// Set strDOS[04] = SalNumberToChar(142)
			// Set strDOS[05] = SalNumberToChar(153)
			// Set strDOS[06] = SalNumberToChar(154)
			// Set strDOS[07] = SalNumberToChar(225)
			// Set strDOS[08] = SalNumberToChar(039)

			return strNeu;
			#endregion
		}
		
		/// <summary>
		/// füllt Number nach links mit Nullen auf. Ergebnis: String
		/// </summary>
		/// <param name="nZahl"></param>
		/// <param name="nLaenge"></param>
		/// <returns></returns>
		public static SalString PalNullen(SalNumber nZahl, SalNumber nLaenge)
		{
			#region Local Variables
			SalNumber nLength = 0;
			SalString strNum = "";
			#endregion
			
			#region Actions
			nLength = nZahl.Truncate(nLaenge, 0).ToString(0, ref strNum);
			strNum = ((SalString)"000000000000").Left(nLaenge - nLength) + strNum;
			return strNum;
			#endregion
		}
		
		/// <summary>
		/// füllt String nach links mit Nullen auf. Ergebnis: String
		/// </summary>
		/// <param name="strZahl"></param>
		/// <param name="nLaenge"></param>
		/// <returns></returns>
		public static SalString PalStrNullen(SalString strZahl, SalNumber nLaenge)
		{
			#region Local Variables
			SalString strNum = "";
			#endregion
			
			#region Actions
			strNum = ((SalString)"000000000000000000000000000000000").Left(nLaenge - strZahl.Length) + strZahl;
			strNum = strNum.Left(nLaenge);
			return strNum;
			#endregion
		}
		
		/// <summary>
		/// füllt String nach links mit Nullen auf. Ergebnis: String
		/// </summary>
		/// <param name="nZahl"></param>
		/// <param name="nLaenge"></param>
		/// <returns></returns>
		public static SalString PalStrNullenausNum(SalNumber nZahl, SalNumber nLaenge)
		{
			#region Local Variables
			SalString strNum = "";
			SalString strZahl = "";
			#endregion
			
			#region Actions
			strZahl = nZahl.ToString(0);
			strNum = ((SalString)"000000000000000000000000000000000").Left(nLaenge - strZahl.Length) + strZahl;
			strNum = strNum.Left(nLaenge);
			return strNum;
			#endregion
		}
		
		/// <summary>
		/// kürzt String und füllt nach rechts mit Blanks auf. Ergebnis: String
		/// </summary>
		/// <param name="strZahl"></param>
		/// <param name="nLaenge"></param>
		/// <returns></returns>
		public static SalString PalLF(SalString strZahl, SalNumber nLaenge)
		{
			#region Local Variables
			SalString strNum = "";
			#endregion
			
			#region Actions
			strNum = strZahl + "                                                                                                                   ";
			strNum = strNum.Left(nLaenge);
			return strNum;
			#endregion
		}
		
		/// <summary>
		/// Erstellt aus String eine Prüfziffer(String)
		/// </summary>
		/// <param name="strMZF"></param>
		/// <returns></returns>
		public static SalString PalPruefZiffer(SalString strMZF)
		{
			#region Local Variables
			SalNumber nNr = 0;
			SalNumber nZahl = 0;
			SalString strPruef = "";
			#endregion
			
			#region Actions
			nNr = 0;
			nZahl = 10;
			while (true)
			{
				if (nNr > 11) 
				{
					break;
				}
				nZahl = nZahl + strMZF.Mid(nNr, 1).ToNumber();
				nZahl = nZahl.Mod(10) * 2;
				if (nZahl == 0) 
				{
					nZahl = 20;
				}
				nZahl = nZahl.Mod(11);
				nNr = nNr + 1;
			}
			if (nZahl == 1) 
			{
				nZahl = 11;
			}
			return (11 - nZahl).ToString(0);
			#endregion
		}
		
		/// <summary>
		/// Erstellt aus String eine Prüfziffer(String)
		/// </summary>
		/// <param name="strMZF"></param>
		/// <returns></returns>
		public static SalString PalPruefZiffer22(SalString strMZF)
		{
			#region Local Variables
			SalNumber nNr = 0;
			SalNumber nZahl = 0;
			SalString strPruef = "";
			#endregion
			
			#region Actions
			nNr = 0;
			nZahl = 10;
			while (true)
			{
				if (nNr > 13) 
				{
					break;
				}
				nZahl = nZahl + strMZF.Mid(nNr, 1).ToNumber();
				nZahl = nZahl.Mod(10) * 2;
				if (nZahl == 0) 
				{
					nZahl = 20;
				}
				nZahl = nZahl.Mod(11);
				nNr = nNr + 1;
			}
			if (nZahl == 1) 
			{
				nZahl = 11;
			}
			return (11 - nZahl).ToString(0);
			#endregion
		}
		
		/// <summary>
		/// TRUE = String enthält nur Ziffern
		/// </summary>
		/// <param name="strMZF"></param>
		/// <returns></returns>
		public static SalBoolean PalNurZiffern(SalString strMZF)
		{
			#region Local Variables
			SalNumber nNr = 0;
			SalNumber nZahl = 0;
			SalString strPruef = "";
			#endregion
			
			#region Actions
			nNr = strMZF.Length - 1;
			while (true)
			{
				if (strMZF.Mid(nNr, 1) < "0" || strMZF.Mid(nNr, 1) > "9") 
				{
					return false;
				}
				if (nNr == 0) 
				{
					break;
				}
				nNr = nNr - 1;
			}
			return true;
			#endregion
		}
		
		/// <summary>
		/// entfernt alle Nicht-Ziffern
		/// </summary>
		/// <param name="strMZF"></param>
		/// <returns></returns>
		public static SalString PalStrNurZiffern(SalString strMZF)
		{
			#region Local Variables
			SalNumber nNr = 0;
			SalNumber nLen = 0;
			SalNumber nZahl = 0;
			SalString strNeu = "";
			#endregion
			
			#region Actions
			nLen = strMZF.Length;
			nNr = 0;
			strNeu = "";
			if (nLen > 0)  // 19.12.17 Ä1662
			{
				while (true)
				{
					if (strMZF.Mid(nNr, 1) >= "0" && strMZF.Mid(nNr, 1) <= "9") 
					{
						strNeu = strNeu + strMZF.Mid(nNr, 1);
					}
					nNr = nNr + 1;
					if (nNr == nLen) 
					{
						break;
					}
				}
			}
			return strNeu;
			#endregion
		}
		
		/// <summary>
		/// Schreibe in Logbuch
		/// </summary>
		/// <param name="strLogText"></param>
		/// <returns></returns>
		public static SalNumber PalLog(SalString strLogText)
		{
			#region Actions
			Var.strLogtext = strLogText.Left(254);
			// 19.08.14 Ä1098 + Version
			Int.SqlImmedX("INSERT INTO LOG (logname, logdate, logtext, logversion) VALUES(:strBNUser, SYSDATETIME,  :strLogtext, :strProgVer)");

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Schreibe in AKTIONEN
		/// </summary>
		/// <param name="nArztX"></param>
		/// <param name="nHalterX"></param>
		/// <param name="nRechX"></param>
		/// <param name="strTyp"></param>
		/// <param name="strTypDetail"></param>
		/// <param name="nAnzahl"></param>
		/// <param name="nProz"></param>
		/// <param name="nDM"></param>
		/// <param name="nRechSumm"></param>
		/// <param name="nProzNr"></param>
		/// <param name="nDauer"></param>
		/// <returns></returns>
		public static SalNumber PalAktion(SalNumber nArztX, SalNumber nHalterX, SalNumber nRechX, SalString strTyp, SalString strTypDetail, SalNumber nAnzahl, SalNumber nProz, SalNumber nDM, SalNumber nRechSumm, SalNumber nProzNr, SalNumber nDauer)
		{
			#region Actions
			Var.nAkArztX = nArztX;
			Var.nAkHalterX = nHalterX;
			Var.nAkRechX = nRechX;
			Var.strAkTyp = strTyp.Left(2);
			Var.strAkTypDetail = strTypDetail.Left(5);
			Var.nAkAnzahl = nAnzahl;
			Var.nAkProz = nProz;
			Var.nAkDM = nDM;
			Var.nAkRechSumm = nRechSumm;
			Var.nAkProzNr = nProzNr;
			Var.nAkDauer = nDauer;
			// 09.09.08 A278 MK + akzeichen
			Int.SqlImmedX(@"INSERT INTO ak
(AKARZTNR, AKHALTERNR, AKRECHNR, AKDATUM, AKTYP,
AKTYPDETAIL, AKANZAHL, AKPROZGEB, AKDM, AKRECHSUMM, AKPROZNR, AKDAUER, AKZEICHEN)
VALUES(:nAkArztX, :nAkHalterX, :nAkRechX, SYSDATETIME,  :strAkTyp, :strAkTypDetail, :nAkAnzahl, :nAkProz, :nAkDM, :nAkRechSumm, :nAkProzNr, :nAkDauer, :strBNZei)");

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Schreibe in AKTIONEN
		/// </summary>
		/// <param name="dtDatum"></param>
		/// <param name="nArztX"></param>
		/// <param name="nHalterX"></param>
		/// <param name="nRechX"></param>
		/// <param name="strTyp"></param>
		/// <param name="strTypDetail"></param>
		/// <param name="nAnzahl"></param>
		/// <param name="nProz"></param>
		/// <param name="nDM"></param>
		/// <param name="nRechSumm"></param>
		/// <param name="nProzNr"></param>
		/// <param name="nDauer"></param>
		/// <param name="strAbrID">21.09.23 Ä2132</param>
		/// <returns></returns>
		public static SalNumber PalAktionDatum(SalDateTime dtDatum, SalNumber nArztX, SalNumber nHalterX, SalNumber nRechX, SalString strTyp, SalString strTypDetail, SalNumber nAnzahl, SalNumber nProz, SalNumber nDM, SalNumber nRechSumm, SalNumber nProzNr, SalNumber nDauer, SalString strAbrID)
		{
			#region Actions
			Var.dtAkDatum = dtDatum;
			Var.nAkArztX = nArztX;
			Var.nAkHalterX = nHalterX;
			Var.nAkRechX = nRechX;
			Var.strAkTyp = strTyp.Left(2);
			Var.strAkTypDetail = strTypDetail.Left(5);
			Var.nAkAnzahl = nAnzahl;
			Var.nAkProz = nProz;
			Var.nAkDM = nDM;
			Var.nAkRechSumm = nRechSumm;
			Var.nAkProzNr = nProzNr;
			Var.nAkDauer = nDauer;
			// 21.09.23 Ä2132 + akabrid
			Var.strAkAbrID = strAbrID;
			// 09.09.08 A278 MK + akzeichen
			Int.SqlImmedX(@"INSERT INTO ak
(AKARZTNR, AKHALTERNR, AKRECHNR, AKDATUM, AKTYP,
AKTYPDETAIL, AKANZAHL, AKPROZGEB, AKDM, AKRECHSUMM, AKPROZNR, AKDAUER, AKZEICHEN, AKABRID)
VALUES(:nAkArztX, :nAkHalterX, :nAkRechX, :dtAkDatum,  :strAkTyp, :strAkTypDetail, :nAkAnzahl, :nAkProz, :nAkDM, :nAkRechSumm, :nAkProzNr, :nAkDauer, :strBNZei, :strAkAbrID)");

			return 0;
			#endregion
		}
		
		/// <summary>
		/// ist der MwSt-Satz gültig ?
		/// </summary>
		/// <param name="nMwSt"></param>
		/// <returns></returns>
		public static SalBoolean PalMwStOk(SalNumber nMwSt)
		{
			#region Local Variables
			SalBoolean bOk = false;
			SalNumber nMwNr = 0;
			#endregion
			
			#region Actions
			bOk = false;
			nMwNr = 0;
			while (nMwNr < Var.nAnzMwSt) 
			{
				if (Var.nMwSatz[nMwNr] == nMwSt) 
				{
					bOk = true;
					nMwNr = Var.nAnzMwSt;
				}
				nMwNr = nMwNr + 1;
			}
			return bOk;
			#endregion
		}
		
		/// <summary>
		/// ist der MwSt-Satz gültig ?  ( nur Satz 0,1,2,8,9,10)
		/// </summary>
		/// <param name="nMwSt"></param>
		/// <returns></returns>
		public static SalBoolean PalMwStOkAbr(SalNumber nMwSt)
		{
			#region Local Variables
			SalBoolean bOk = false;
			#endregion
			
			#region Actions
			bOk = false;
			if (Var.nMwSatz[0] == nMwSt) 
			{
				bOk = true;
			}
			else if (Var.nMwSatz[1] == nMwSt) 
			{
				bOk = true;
			}
			else if (Var.nMwSatz[2] == nMwSt) 
			{
				bOk = true;
			}
			else if (Var.nMwSatz[3] == nMwSt) 
			{
				bOk = true;
			}
			else if (Var.nMwSatz[4] == nMwSt) 
			{
				bOk = true;
			}
			else if (Var.nMwSatz[5] == nMwSt)  // 29.01.14 Ä1017 (Pegasus)
			{
				bOk = true;
			}
			else if (Var.nMwSatz[11] == nMwSt) 
			{
				bOk = true;
			}
			else if (Var.nMwSatz[8] == nMwSt) 
			{
				bOk = true;
			}
			else if (Var.nMwSatz[9] == nMwSt) 
			{
				bOk = true;
			}
			else if (Var.nMwSatz[10] == nMwSt)  // 08.12.06 Ä48 19% MwSt.
			{
				bOk = true;
			}
			else if (Var.nMwSatz[13] == nMwSt)  // 19.01.15 Ä1144
			{
				bOk = true;
			}
			else if (Var.nMwSatz[14] == nMwSt)  // 02.05.16 F2680
			{
				bOk = true;
			}
			else if (Var.nMwSatz[7] == nMwSt)  // 11.06.20 Ä1892
			{
				bOk = true;
			}
			return bOk;
			#endregion
		}
		
		/// <summary>
		/// Wandelt Umlaute und ß in AE,OE,UE und SS um
		/// </summary>
		/// <param name="strMatch"></param>
		/// <returns></returns>
		public static SalString PalStringToMatch(SalString strMatch)
		{
			#region Actions
			while (strMatch.Scan("Ä") != -1) 
			{
				strMatch = strMatch.Left(strMatch.Scan("Ä")) + "AE" + strMatch.Mid(strMatch.Scan("Ä") + 1, 255);
			}
			while (strMatch.Scan("Ö") != -1) 
			{
				strMatch = strMatch.Left(strMatch.Scan("Ö")) + "OE" + strMatch.Mid(strMatch.Scan("Ö") + 1, 255);
			}
			while (strMatch.Scan("Ü") != -1) 
			{
				strMatch = strMatch.Left(strMatch.Scan("Ü")) + "UE" + strMatch.Mid(strMatch.Scan("Ü") + 1, 255);
			}
			while (strMatch.Scan("ä") != -1) 
			{
				strMatch = strMatch.Left(strMatch.Scan("ä")) + "AE" + strMatch.Mid(strMatch.Scan("ä") + 1, 255);
			}
			while (strMatch.Scan("ö") != -1) 
			{
				strMatch = strMatch.Left(strMatch.Scan("ö")) + "OE" + strMatch.Mid(strMatch.Scan("ö") + 1, 255);
			}
			while (strMatch.Scan("ü") != -1) 
			{
				strMatch = strMatch.Left(strMatch.Scan("ü")) + "UE" + strMatch.Mid(strMatch.Scan("ü") + 1, 255);
			}
			while (strMatch.Scan("ß") != -1) 
			{
				strMatch = strMatch.Left(strMatch.Scan("ß")) + "SS" + strMatch.Mid(strMatch.Scan("ß") + 1, 255);
			}
			return strMatch.Trim();
			#endregion
		}
		
		/// <summary>
		/// Löscht jeden Blank in String
		/// </summary>
		/// <param name="strMatch"></param>
		/// <returns></returns>
		public static SalString PalDelBlank(SalString strMatch)
		{
			#region Actions
			while (strMatch.Scan(" ") != -1) 
			{
				strMatch = strMatch.Left(strMatch.Scan(" ")) + strMatch.Mid(strMatch.Scan(" ") + 1, 255);
			}
			return strMatch.Trim();
			#endregion
		}
		
		/// <summary>
		/// Löscht jeden Blank in String
		/// </summary>
		/// <param name="strMatch"></param>
		/// <param name="strZeichen"></param>
		/// <returns></returns>
		public static SalString PalDelZeichen(SalString strMatch, SalString strZeichen)
		{
			#region Local Variables
			SalNumber nByte = 0;
			#endregion
			
			#region Actions
			nByte = strMatch.Scan(strZeichen);
			while (nByte != -1) 
			{
				strMatch = strMatch.Left(strMatch.Scan(strZeichen)) + strMatch.Mid(strMatch.Scan(strZeichen) + 1, 255);
				nByte = strMatch.Scan(strZeichen);
			}
			return strMatch.Trim();
			#endregion
		}
		
		/// <summary>
		/// Wandelt BLZ in String ohne Blanks um
		/// </summary>
		/// <param name="strMatch"></param>
		/// <returns></returns>
		public static SalString PalTrimBLZ(SalString strMatch)
		{
			#region Actions
			while (strMatch.Scan(" ") != -1) 
			{
				strMatch = strMatch.Left(strMatch.Scan(" ")) + strMatch.Mid(strMatch.Scan(" ") + 1, 255);
			}
			return strMatch.Trim();
			#endregion
		}
		
		/// <summary>
		/// eigene Report-Behandlung
		/// </summary>
		/// <param name="hWndRepForm"></param>
		/// <param name="strTemplate"></param>
		/// <param name="strVariables"></param>
		/// <param name="strInputs"></param>
		/// <param name="nErr"></param>
		/// <returns></returns>
		public static SalNumber PalReport(SalWindowHandle hWndRepForm, SalString strTemplate, SalString strVariables, SalString strInputs, ref SalNumber nErr)
		{
			#region Local Variables
			SalWindowHandle hWndRepErgeb = SalWindowHandle.Null;
			#endregion
			
			#region Actions
			nErr = 0;
			// Call SalCreateWindow( frmDruckUtil, hWndNULL, hWndRepForm, strTemplate, strVariables, strInputs )
			dlgDruckUtil.ModalDialog(Sys.hWndForm, hWndRepForm, strTemplate, strVariables, strInputs);

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Stammdaten erstellen,ändern,löschen
		/// </summary>
		/// <returns></returns>
		public static SalNumber PalStamm()
		{
			#region Actions
			frmStamm.CreateWindow(Sys.hWndForm);

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPForm"></param>
		/// <returns></returns>
		public static SalBoolean PalFormSperren(SalString strPForm)
		{
			#region Local Variables
			SalBoolean bBesetzt = false;
			#endregion
			
			#region Actions
			Var.strForm = strPForm;
			Int.SqlIstDa(" FROM sp WHERE spform = :strForm", ref bBesetzt);
			if (bBesetzt) 
			{
				return false;
			}
			else
			{
				//FC:FINAL:#63 add column list
				Int.SqlImmed("INSERT INTO sp (spform) VALUES ( :strForm)");
				return true;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPForm"></param>
		/// <returns></returns>
		public static SalBoolean PalFormFrei(SalString strPForm)
		{
			#region Local Variables
			SalBoolean bBesetzt = false;
			#endregion
			
			#region Actions
			Var.strForm = strPForm;
			Int.SqlIstDa(" FROM sp WHERE spform = :strForm", ref bBesetzt);
			if (bBesetzt) 
			{
				return false;
			}
			else
			{
				return true;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPForm"></param>
		/// <returns></returns>
		public static SalBoolean PalFormErlauben(SalString strPForm)
		{
			#region Actions
			Var.strForm = strPForm;
			Int.SqlImmed("DELETE FROM sp WHERE spform =  :strForm");
			return true;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strFile"></param>
		/// <returns></returns>
		public static SalNumber PalFileGetSize(SalString strFile)
		{
			#region Local Variables
			SalFileHandle hPFile = SalFileHandle.Null;
			SalNumber nTell = 0;
			#endregion
			
			#region Actions
			nTell = -1;
			if (Var.hFile.Open(strFile, Sys.OF_Read)) 
			{
				if (Var.hFile.Seek(0, Sys.FILE_SeekEnd)) 
				{
					nTell = Var.hFile.Tell();
				}
				Var.hFile.Close();
			}
			return nTell;
			#endregion
		}
		
		/// <summary>
		/// Processes errors returned by the SalLoadAppAndWait function.
		/// </summary>
		/// <param name="nError"></param>
		/// <returns></returns>
		public static SalNumber ProcessErrors(SalNumber nError)
		{
			#region Actions
			switch (nError)
			{
				case 0:
					Sal.MessageBox("Error 0: Out of memory, executable file was corrupt, or invalid relocations", "Error", (Sys.MB_Ok | Sys.MB_IconStop));
					break;
				
				case 2:
					Sal.MessageBox("Error 2: File not found", "Error", (Sys.MB_Ok | Sys.MB_IconStop));
					break;
				
				case 3:
					Sal.MessageBox("Error 3: Path not found", "Error", (Sys.MB_Ok | Sys.MB_IconStop));
					break;
				
				case 5:
					Sal.MessageBox("Error 5: Attempt to dynamically link to a task, or there was a sharing or network protection violation", "Error", (Sys.MB_Ok | Sys.MB_IconStop));
					break;
				
				case 6:
					Sal.MessageBox("Error 6: Library requires separate data segments for each task", "Error", (Sys.MB_Ok | Sys.MB_IconStop));
					break;
				
				case 8:
					Sal.MessageBox("Error 8: Insufficient memory to start application", "Error", (Sys.MB_Ok | Sys.MB_IconStop));
					break;
				
				case 10:
					Sal.MessageBox("Error 10: Incorrect Windows version", "Error", (Sys.MB_Ok | Sys.MB_IconStop));
					break;
				
				case 11:
					Sal.MessageBox("Error 11: Invalid .EXE file (non-Windows .EXE or error in .EXE image)", "Error", (Sys.MB_Ok | Sys.MB_IconStop));
					break;
				
				case 12:
					Sal.MessageBox("Error 12: Application designed for different operating system", "Error", (Sys.MB_Ok | Sys.MB_IconStop));
					break;
				
				case 13:
					Sal.MessageBox("Error 13: DOS 4.0 application", "Error", (Sys.MB_Ok | Sys.MB_IconStop));
					break;
				
				case 14:
					Sal.MessageBox("Error 14: Unknown .EXE type", "Error", (Sys.MB_Ok | Sys.MB_IconStop));
					break;
				
				case 15:
					Sal.MessageBox("Error 15: Attempt to load real-mode application developed for an earlier version of Windows", "Error", (Sys.MB_Ok | Sys.MB_IconStop));
					break;
				
				case 16:
					Sal.MessageBox("Error 16: Attempt to load a second instance of an .EXE containing multiple, writeable data segments", "Error", (Sys.MB_Ok | Sys.MB_IconStop));
					break;
				
				case 19:
					Sal.MessageBox("Error 19: Attempt to load a compressed executable file.  The file must be decompressed before it can be loaded.", "Error", (Sys.MB_Ok | Sys.MB_IconStop));
					break;
				
				case 20:
					Sal.MessageBox("Error 20: A DLL required to run this application was corrupt.", "Error", (Sys.MB_Ok | Sys.MB_IconStop));
					break;
				
				case 21:
					Sal.MessageBox("Error 21: Application requires Microsoft Windows 32-bit extensions", "Error", (Sys.MB_Ok | Sys.MB_IconStop));
					break;
				
				default:
					Sal.MessageBox("Unknown Error", "Error", (Sys.MB_Ok | Sys.MB_IconStop));
					break;
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Entfernt Blanks aus String
		/// </summary>
		/// <param name="strMatch"></param>
		/// <returns></returns>
		public static SalString PalTrim(SalString strMatch)
		{
			#region Local Variables
			SalNumber nPos = 0;
			#endregion
			
			#region Actions
			nPos = strMatch.Scan(" ");
			while (nPos != -1) 
			{
				strMatch = strMatch.Left(nPos) + strMatch.Mid(nPos + 1, 255);
				nPos = strMatch.Scan(" ");
			}
			return strMatch.Trim();
			#endregion
		}
		
		/// <summary>
		/// Entfernt Zahlen aus String
		/// </summary>
		/// <param name="strMatch"></param>
		/// <returns></returns>
		public static SalString PalTrimStr(SalString strMatch)
		{
			#region Local Variables
			SalNumber nPos = 0;
			SalString strResult = "";
			SalString strChar = "";
			SalNumber nLength = 0;
			#endregion
			
			#region Actions
			if (strMatch.ToUpper().Left(3) == "OT ") 
			{
				strMatch = strMatch.Right(strMatch.Length - 3);
			}
			if (strMatch.ToUpper().Left(3) == "OT.") 
			{
				strMatch = strMatch.Right(strMatch.Length - 3);
			}
			nPos = 0;
			strResult = "";
			nLength = strMatch.Length;
			while (nPos < nLength) 
			{
				strChar = strMatch.Mid(nPos, 1);
				if (((SalString)"0123456789.").Scan(strChar) == -1) 
				{
					strResult = strResult + strChar;
				}
				else
				{
					nPos = nLength;
				}
				nPos = nPos + 1;
			}
			strResult = strResult.Trim();
			if (strResult.ToUpper().Right(3) == " NR") 
			{
				strResult = strResult.Left(strResult.Length - 3);
			}
			// If SalStrRightX( SalStrUpperX(strResult), 3) = 'STR'
			// Set strResult = SalStrLeftX( strResult, SalStrLength(strResult)-3)
			if (strResult.ToUpper().Right(7) == "STRASSE") 
			{
				strResult = strResult.Left(strResult.Length - 4);
			}
			if (strResult.ToUpper().Right(6) == "STRAßE") 
			{
				strResult = strResult.Left(strResult.Length - 3);
			}
			return strResult.Trim();
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strTabelle"></param>
		/// <param name="nPArztNr"></param>
		/// <param name="nPArztNr2"></param>
		/// <returns></returns>
		public static SalString PalArztNr(SalString strTabelle, SalNumber nPArztNr, SalNumber nPArztNr2)
		{
			#region Actions
			// (rkarztnr =  ' || SalNumberToStrX(nArztNr,0) || ' or rkarztnr =  ' || SalNumberToStrX(nArztNr2,0) || ')
			if (nPArztNr == nPArztNr2 || nPArztNr2 < 1 || nPArztNr2 == SalNumber.Null) 
			{
				return strTabelle + "arztnr =  " + nPArztNr.ToString(0);
			}
			else
			{
				return "(" + strTabelle + "arztnr =  " + nPArztNr.ToString(0) + " or " + strTabelle + "arztnr =  " + nPArztNr2.ToString(0) + ")";
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="p_nLParam">Number: p_nLParam</param>
		/// <param name="p_sText"></param>
		/// <returns></returns>
		public static SalBoolean XSalTooltipSetTextActive(SalWindowHandle p_nLParam, SalString p_sText)
		{
			#region Actions
			// If GetActiveWindow(  ) = hWndForm
			// Return XSalTooltipSetText( p_nLParam, p_sText )
			// 05.05.14
			// Return XSalTooltipSetText( p_nLParam, p_sText )
			//FC:FINAL: Tooltip
			return new SalToolTipManager().SetTipText(p_nLParam, p_sText);
			#endregion
        }

        /// <summary>
        /// </summary>
        /// <param name="strPText"></param>
        /// <returns></returns>
        public static SalString PalLics1(SalString strPText)
		{
			#region Local Variables
			SalNumber nPPos = 0;
			#endregion
			
			#region Actions
			Var.strLics = strPText;
			Int.SqlImmedSel("SELECT @LICS(:strLics) INTO :strLics FROM SYSADM.dummy");
			nPPos = Var.strLics.Scan("\\\\");
			if (nPPos != -1) 
			{
				Var.strLics = Var.strLics.Left(nPPos) + "\\" + Var.strLics.Mid(nPPos, 4096);
			}
			return Var.strLics;
			#endregion
		}
		
		/// <summary>
		/// Entfernt Blanks aus String
		/// </summary>
		/// <param name="strMatch"></param>
		/// <returns></returns>
		public static SalString PalTrimUnd(SalString strMatch)
		{
			#region Local Variables
			SalNumber nPos = 0;
			SalNumber nPosAlt = 0;
			#endregion
			
			#region Actions
			// 03.03.23
			Vis.StrSubstitute(strMatch, " Und", " und");
			// Set nPos = SalStrScan(strMatch,' Und')
			// While nPos != -1
			// Set strMatch = SalStrLeftX(strMatch, nPos) ||  ' und' ||
			//  SalStrMidX(strMatch, nPos+4,255)
			// 20.10.22 F4931
			// Set nPos = SalStrScan(strMatch,',')
			// Set nPos = SalStrScan(SalStrMidX( strMatch, nPos+4, 32000) ,' Und')
			// If nPos != -1
			// Set nPos = nPos + 4
			return strMatch.Trim();
			#endregion
		}
		
		/// <summary>
		/// Entfernt Blanks aus String
		/// </summary>
		/// <param name="strMatch"></param>
		/// <returns></returns>
		public static SalString PalTrimKommaLeer(SalString strMatch)
		{
			#region Local Variables
			SalNumber nPos = 0;
			#endregion
			
			#region Actions
			nPos = strMatch.Scan(",");
			if (nPos != -1) 
			{
				strMatch = strMatch.Left(nPos) + ", " + strMatch.Mid(nPos + 1, 255);
			}
			return strMatch.Trim();
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strP"></param>
		/// <returns></returns>
		public static SalNumber PalTrimFeld(ref SalString strP)
		{
			#region Actions
			strP = Int.PalTrimKommaLeer(strP);
			strP = Int.PalTrimStrichWeit(strP);
			strP = strP.Trim().ToProper();
			strP = Int.PalTrimSpezial(strP);
			strP = Int.PalTrimStrichEng(strP);
			strP = Int.PalTrimSpezial(strP);

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPName"></param>
		/// <param name="strPNN"></param>
		/// <param name="strPVN"></param>
		/// <param name="strPTitel"></param>
		/// <param name="strPN2"></param>
		/// <returns></returns>
		public static SalNumber PalSplitName(SalString strPName, ref SalString strPNN, ref SalString strPVN, ref SalString strPTitel, ref SalString strPN2)
		{
			// Receive String: strPAnrede
			
			#region Local Variables
			SalNumber nFetch3 = 0;
			SalSqlHandle hSql3 = SalSqlHandle.Null;
			SalNumber nWords = 0;
			SalNumber nKomma = 0;
			SalNumber nBlank = 0;
			SalArray<SalString> strW = new SalArray<SalString>(10);
			SalNumber nPPos = 0;
			SalString strDummy = "";
			SalBoolean bChange = false;
			#endregion
			
			#region Actions

			strPTitel = "";
			strPNN = "";
			strPVN = "";
			Int.PalTrimFeld(ref strPName);
			Int.PalTrimFeld(ref strPN2);
			// Titel
			nBlank = strPName.ToProper().Scan("Prof.");
			if (nBlank != -1) 
			{
				strPTitel = strPTitel + "Prof. ";
				strPName = strPName.Left(nBlank) + strPName.Mid(nBlank + 5, 255);
			}
			nBlank = strPName.ToProper().Scan("Dr.");
			if (nBlank != -1) 
			{
				strPTitel = strPTitel + "Dr. ";
				strPName = strPName.Left(nBlank) + strPName.Mid(nBlank + 3, 255);
			}
			// VN + NN
			nKomma = strPName.Scan(",");
			nBlank = strPName.Scan(" ");
			if (nKomma != -1) 
			{
				strPNN = strPName.Left(nKomma);
				strPVN = strPName.Mid(nKomma + 1, 255);
			}
			else if (nBlank != -1) 
			{
				nWords = strPName.Tokenize("", " ", strW);
				if (nWords == 1) 
				{
					strPNN = strW[0];
					strPVN = "";
					strPTitel = "";
				}
				else
				{
					Var.nCount = 0;
					while (Var.nCount < nWords - 1) 
					{
						strPVN = strPVN + " " + strW[Var.nCount];
						Var.nCount = Var.nCount + 1;
					}
					strPNN = strW[Var.nCount];
				}
				// Set strPVN = SalStrLeftX(strPName,nBlank)
				// Set strPNN = SalStrMidX(strPName,nBlank+1,255)
			}
			else
			{
				strPNN = strPName;
				strPVN = "";
			}
			// del Blanks
			// Set strPTitel = SalStrProperX(SalStrTrimX(strPTitel))
			strPVN = Int.PalTrimUnd(strPVN);
			strPVN = Int.PalTrimUnd(strPVN);
			// 24.09.02
			if (strPNN == "") 
			{
				strPNN = strPVN;
				strPVN = "";
			}
			// ! Berufe
			if (strPVN.ToUpper().Right(8) == "LANDWIRT") 
			{
				strPVN = strPVN.Left(strPVN.Length - 8);
				if (strPN2 != "") 
				{
					strPN2 = strPN2 + " ";
				}
				strPN2 = strPN2 + "Landwirt";
				bChange = true;
			}
			if (strPVN.ToUpper().Right(6) == "LANDW.") 
			{
				strPVN = strPVN.Left(strPVN.Length - 6);
				if (strPN2 != "") 
				{
					strPN2 = strPN2 + " ";
				}
				strPN2 = strPN2 + "Landwirt";
				bChange = true;
			}
			if (strPVN.ToUpper().Right(5) == "LANDW") 
			{
				strPVN = strPVN.Left(strPVN.Length - 5);
				if (strPN2 != "") 
				{
					strPN2 = strPN2 + " ";
				}
				strPN2 = strPN2 + "Landwirt";
				bChange = true;
			}
			if (strPVN.ToUpper().Right(4) == "LDW.") 
			{
				strPVN = strPVN.Left(strPVN.Length - 4);
				if (strPN2 != "") 
				{
					strPN2 = strPN2 + " ";
				}
				strPN2 = strPN2 + "Ldw.";
				bChange = true;
			}
			if (strPNN.ToUpper().Right(8) == "LANDWIRT") 
			{
				strPNN = strPNN.Left(strPNN.Length - 8);
				if (strPN2 != "") 
				{
					strPN2 = strPN2 + " ";
				}
				strPN2 = strPN2 + "Landwirt";
				bChange = true;
			}
			if (strPNN.ToUpper().Right(6) == "LANDW.") 
			{
				strPNN = strPNN.Left(strPNN.Length - 6);
				if (strPN2 != "") 
				{
					strPN2 = strPN2 + " ";
				}
				strPN2 = strPN2 + "Landwirt";
				bChange = true;
			}
			if (strPNN.ToUpper().Right(5) == "LANDW") 
			{
				strPNN = strPNN.Left(strPNN.Length - 5);
				if (strPN2 != "") 
				{
					strPN2 = strPN2 + " ";
				}
				strPN2 = strPN2 + "Landwirt";
				bChange = true;
			}
			if (strPNN.ToUpper().Right(4) == "LDW.") 
			{
				strPNN = strPNN.Left(strPNN.Length - 4);
				if (strPN2 != "") 
				{
					strPN2 = strPN2 + " ";
				}
				strPN2 = strPN2 + "Ldw.";
				bChange = true;
			}
			// 27.09.02
			strPNN = Int.PalTrimStrichWeit(strPNN);
			nWords = strPNN.Tokenize("", " ", strW);
			if (nWords == 3 && (strW[1] == "U." || strW[1] == "Und" || strW[1] == "+")) 
			{
				if (!(Int.PalCheckVN(ref strW.GetArray(0)[0], ref Var.strVNAnrede, ref strPN2))) 
				{
					if (!(Int.PalCheckVN(ref strW.GetArray(2)[2], ref Var.strVNAnrede, ref strPN2))) 
					{
						strDummy = Int.PalTrimStrichEng(strPNN);
						strPNN = strPVN;
						strPVN = strDummy;
						// Set strPAnrede = 'Herrn/Frau/Firma'
					}
				}
			}

			if (strPVN == "Stall") 
			{
				strPNN = strPVN + " " + strPNN;
				strPVN = "";
			}
			if (strPVN == "Gestüt") 
			{
				strPNN = strPVN + " " + strPNN;
				strPVN = "";
			}
			if (strPVN == "Rv") 
			{
				strPNN = "RV " + strPNN;
				strPVN = "";
			}
			if (strPVN == "Rufv") 
			{
				strPNN = "RuFV " + strPNN;
				strPVN = "";
			}
			if (strPNN == "Stall") 
			{
				strPNN = strPNN + " " + strPVN;
				strPVN = "";
			}
			if (strPNN == "Gestüt") 
			{
				strPNN = strPNN + " " + strPVN;
				strPVN = "";
			}
			// ! 08.10.02
			if (strPVN.ToUpper() == "V." && strPNN.ToUpper().Right(3) == " E.") 
			{
				nPPos = strPNN.Length - 3;
				strPNN = strPNN.Left(nPPos) + " e.V.";
				strPVN = "";
				bChange = true;
			}
			if (strPNN.ToUpper() == "V." && strPVN.ToUpper().Right(3) == " E.") 
			{
				nPPos = strPVN.Length - 3;
				strPNN = strPVN.Left(nPPos) + " e.V.";
				strPVN = "";
				bChange = true;
			}
			if (strPVN.ToUpper().Scan("VEREIN") != -1) 
			{
				strPNN = strPNN + " " + strPVN;
				strPVN = "";
				bChange = true;
			}
			if (strPVN.ToUpper().Scan("CLUB") != -1) 
			{
				strPNN = strPNN + " " + strPVN;
				strPVN = "";
				bChange = true;
			}
			if (strPNN.ToUpper().Scan("VEREIN") != -1 && strPVN != "") 
			{
				strPNN = strPVN + " " + strPNN;
				strPVN = "";
				bChange = true;
			}
			if (strPNN.ToUpper().Scan("CLUB") != -1 && strPVN != "") 
			{
				strPNN = strPVN + " " + strPNN;
				strPVN = "";
				bChange = true;
			}
			if (strPVN.Right(4) == " von") 
			{
				strPNN = "von " + strPNN;
				strPVN = strPVN.Left(strPVN.Length - 4);
			}
			if (strPVN.Right(4) == " zur") 
			{
				strPNN = "zur " + strPNN;
				strPVN = strPVN.Left(strPVN.Length - 4);
			}
			if (strPVN.Right(8) == " von der") 
			{
				strPNN = "von der " + strPNN;
				strPVN = strPVN.Left(strPVN.Length - 8);
			}
			if (strPVN.Right(8) == " von zur") 
			{
				strPNN = "von zur " + strPNN;
				strPVN = strPVN.Left(strPVN.Length - 8);
			}
			if (Int.PalSplitAdel(ref strPVN, ref strPNN, "Graf")) 
			{
				bChange = true;
			}
			if (Int.PalSplitAdel(ref strPVN, ref strPNN, "Gräfin")) 
			{
				bChange = true;
			}
			if (Int.PalSplitAdel(ref strPVN, ref strPNN, "Baron")) 
			{
				bChange = true;
			}
			if (Int.PalSplitAdel(ref strPVN, ref strPNN, "Baronin")) 
			{
				bChange = true;
			}
			if (Int.PalSplitAdel(ref strPVN, ref strPNN, "Fürst")) 
			{
				bChange = true;
			}
			if (Int.PalSplitAdel(ref strPVN, ref strPNN, "Fürstin")) 
			{
				bChange = true;
			}
			if (Int.PalSplitAdel(ref strPVN, ref strPNN, "Herzog")) 
			{
				bChange = true;
			}
			if (Int.PalSplitAdel(ref strPVN, ref strPNN, "Herzogin")) 
			{
				bChange = true;
			}
			if (Int.PalSplitAdel(ref strPVN, ref strPNN, "Freiherr")) 
			{
				bChange = true;
			}
			if (Int.PalSplitAdel(ref strPVN, ref strPNN, "Freifrau")) 
			{
				bChange = true;
			}
			if (Int.PalSplitAdel(ref strPVN, ref strPNN, "Freiin")) 
			{
				bChange = true;
			}
			if (Int.PalSplitAdel(ref strPVN, ref strPNN, "Konsul")) 
			{
				bChange = true;
			}
			if (Int.PalSplitAdel(ref strPVN, ref strPNN, "Konsulin")) 
			{
				bChange = true;
			}
			if (Int.PalSplitAdel(ref strPVN, ref strPNN, "Prinz")) 
			{
				bChange = true;
			}
			if (Int.PalSplitAdel(ref strPVN, ref strPNN, "Prinzessin")) 
			{
				bChange = true;
			}

			// If SalStrLeftX(strPNN,4) = 'von '
			// Set strPNN = 'von ' || SalStrMidX(strPNN,4,255)
			// If SalStrLeftX(strPNN,4) = 'Van '
			// Set strPNN = 'van ' || SalStrMidX(strPNN,4,255)
			// If SalStrLeftX(strPNN,3) = 'De '
			// Set strPNN = 'de ' || SalStrMidX(strPNN,3,255)
			// If SalStrLeftX(strPNN,3) = 'Zu '
			// Set strPNN = 'zu ' || SalStrMidX(strPNN,3,255)
			// If SalStrLeftX(strPNN,4) = 'Der '
			// Set strPNN = 'der ' || SalStrMidX(strPNN,4,255)
			// If SalStrLeftX(strPNN,3) = 'V. '
			// Set strPNN = 'v. ' || SalStrMidX(strPNN,3,255)
			// If SalStrLeftX(strPNN,5) = 'V.d. '
			// Set strPNN = 'v.d. ' || SalStrMidX(strPNN,5,255)
			// Set strPNN = SalStrProperX(SalStrTrimX(strPNN))
			// 28.08.02
			// Set nBlank = SalStrScan(strPNN, ' ')
			// If nBlank != -1
			// Set strPVN = strPVN || SalStrLeftX(strPNN,nBlank+1)
			// Set strPNN = SalStrMidX(strPNN,nBlank+1,255)
			// If strPNN = ''
			// Set strPNN = strPVN
			// Set strPVN = ''
			// ! 09.09.02
			if (nKomma == -1) 
			{
				if (!(Int.PalCheckVN(ref strPVN, ref Var.strVNAnrede, ref strPN2))) 
				{
					if (Int.PalCheckVN(ref strPNN, ref Var.strVNAnrede, ref strPN2)) 
					{
						strPNN = strPVN;
						strPVN = Var.strVNErg;
					}
					else
					{
						// Call SalMessageBeep(0)
					}
				}
				// If strVNAnrede != ''
				// Set strPAnrede = strVNAnrede
			}
			// ! 23.09.02
			if (strPVN == "") 
			{
				if (Int.PalCheckVN(ref strPN2, ref Var.strVNAnrede, ref strPN2)) 
				{
					strPVN = strPN2 + " " + strPVN;
					strPN2 = "";
				}
				// If strVNAnrede != ''
				// Set strPAnrede = strVNAnrede
			}
            // 26.09.02
            // 31.05.24 + or strPVN = 'eGbR' ### fecher
            // + or strPNN = 'eGbR'
            if (strPVN == "GbR" || strPVN == "GmbH" || strPVN == "eGbR")
            {
                strPNN = strPNN + " " + strPVN;
                strPVN = "";
            }
            if (strPNN == "GbR" || strPNN == "GmbH" || strPNN == "eGbR")
            {
                strPNN = strPVN + " " + strPNN;
                strPVN = "";
            }

            // 27.09.02
            nPPos = strPVN.Scan(" U.");
			if (nPPos != -1) 
			{
				strPVN = strPVN.Left(nPPos) + " u." + strPVN.Mid(nPPos + 3, 255);
			}
			if (strPNN == "") 
			{
				strPNN = strPVN;
				strPVN = "";
			}
			// 30.09.02
			strPNN = Int.PalTrimStrichWeit(strPNN);
			nWords = strPNN.Tokenize("", " ", strW);
			if (nWords == 3 && (strW[2] == "U." || strW[2] == "Und" || strW[2] == "+")) 
			{
				if (Int.PalCheckVN(ref strW.GetArray(1)[1], ref Var.strVNAnrede, ref strPN2)) 
				{
					if (!(Int.PalCheckVN(ref strW.GetArray(0)[0], ref Var.strVNAnrede, ref strPN2))) 
					{
						strPNN = strW[0];
						strPVN = strW[1] + " + " + strPVN;
						// Set strPAnrede = 'Herrn/Frau/Firma'
						bChange = true;
					}
				}
				// Call SqlDisconnect(hSql3)
			}
			// ! 30.09.02
			strPVN = Int.PalTrimStrichWeit(strPVN);
			nWords = strPVN.Tokenize("", " ", strW);
			if (nWords == 3 && (strW[1] == "U." || strW[1] == "Und" || strW[1] == "+")) 
			{
				// If PalCheckVN(strW[0], strVNAnrede)
				// Set strPAnrede = 'Herrn/Frau/Firma'
				// Set strPVN = PalTrimStrichEng(strPVN)
				// Set bChange = TRUE
				// Call SqlDisconnect(hSql3)
			}
			else if (nWords == 1) 
			{
				if (!(Int.PalCheckVN(ref strPVN, ref Var.strVNAnrede, ref strPN2))) 
				{
					if (Int.PalCheckVN(ref strPNN, ref Var.strVNAnrede, ref strPN2)) 
					{
						strDummy = strPNN;
						strPNN = strPVN;
						strPVN = strDummy;
						bChange = true;
					}
					else
					{
						if (strPVN.Left(4) == "Reit" || strPVN.Left(4) == "Tier") 
						{
							strPNN = strPVN + " " + strPNN;
							strPVN = "";
							bChange = true;
						}
					}
				}
			}
			// Set strPVN = PalTrimStrichEng(strPVN)
			// Set strPNN = PalTrimStrichEng(strPNN)
			Int.PalTrimFeld(ref strPVN);
			Int.PalTrimFeld(ref strPNN);
			Int.PalTrimFeld(ref strPN2);
			strPTitel = strPTitel.Left(10);
			// 08.08.16 Ä1339
			strPVN = strPVN.Left(50);
			strPNN = strPNN.Left(50);
			strPN2 = strPN2.Left(50);

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPOrt"></param>
		/// <returns></returns>
		public static SalNumber PalTrimOrt(ref SalString strPOrt)
		{
			#region Local Variables
			SalNumber nPPos = 0;
			#endregion
			
			#region Actions
			Int.PalTrimFeld(ref strPOrt);
			nPPos = strPOrt.Scan(" Am ");
			if (nPPos != -1) 
			{
				strPOrt = strPOrt.Left(nPPos) + " am " + strPOrt.Mid(nPPos + 4, 255);
			}
			nPPos = strPOrt.Scan(" An ");
			if (nPPos != -1) 
			{
				strPOrt = strPOrt.Left(nPPos) + " an " + strPOrt.Mid(nPPos + 4, 255);
			}
			nPPos = strPOrt.Scan(" Der ");
			if (nPPos != -1) 
			{
				strPOrt = strPOrt.Left(nPPos) + " der " + strPOrt.Mid(nPPos + 5, 255);
			}
			nPPos = strPOrt.Scan(" Dem ");
			if (nPPos != -1) 
			{
				strPOrt = strPOrt.Left(nPPos) + " dem " + strPOrt.Mid(nPPos + 5, 255);
			}
			nPPos = strPOrt.Scan(" Den ");
			if (nPPos != -1) 
			{
				strPOrt = strPOrt.Left(nPPos) + " den " + strPOrt.Mid(nPPos + 5, 255);
			}
			nPPos = strPOrt.Scan(" Auf ");
			if (nPPos != -1) 
			{
				strPOrt = strPOrt.Left(nPPos) + " auf " + strPOrt.Mid(nPPos + 5, 255);
			}
			// 11.10.23 F5049
			if (strPOrt.Left(2) == "zu") 
			{
				strPOrt = "Zu" + strPOrt.Mid(2, 255);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPOrt"></param>
		/// <param name="strPLand"></param>
		/// <returns></returns>
		public static SalNumber PalTrimOrtUK(ref SalString strPOrt, SalString strPLand)
		{
			#region Local Variables
			SalNumber nPPos = 0;
			#endregion
			
			#region Actions
			// 01.02.16 Ä1168
			Int.PalTrimOrt(ref strPOrt);
			if (strPLand == "GB" || strPLand == "UK") 
			{
				strPOrt = strPOrt.Left(7).ToUpper() + strPOrt.Mid(7, 255);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPVN"></param>
		/// <returns></returns>
		public static SalNumber PalTrimVN(ref SalString strPVN)
		{
			#region Local Variables
			SalNumber nPPos = 0;
			#endregion
			
			#region Actions
			Int.PalTrimFeld(ref strPVN);
			// 27.09.02
			nPPos = strPVN.Scan(" U.");
			if (nPPos != -1) 
			{
				strPVN = strPVN.Left(nPPos) + " u." + strPVN.Mid(nPPos + 3, 255);
			}
			nPPos = strPVN.Scan(" Und ");
			if (nPPos != -1) 
			{
				strPVN = strPVN.Left(nPPos) + " und " + strPVN.Mid(nPPos + 5, 255);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPV"></param>
		/// <param name="strPVAnrede"></param>
		/// <param name="strPName2"></param>
		/// <returns></returns>
		public static SalBoolean PalCheckVN(ref SalString strPV, ref SalString strPVAnrede, ref SalString strPName2)
		{
			#region Local Variables
			SqlLocals.PalCheckVNLocals locals = new SqlLocals.PalCheckVNLocals();
			#endregion
			
			#region Actions
			using (new SqlContext(locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.strPV = strPV;
					locals.strPVAnrede = strPVAnrede;
					locals.strPName2 = strPName2;

					Int.SqlConnection(ref locals.hSqlPVN);
					// Call SqlPrepare(hSqlPVN, 'SELECT vnanrede, vvorname INTO :strVNAnrede, :strVNErg FROM vn
					// WHERE vvorname = :strVNSuch OR vvorname2 = :strVNSuch')
					// Set strPVAnrede = ''
					// Set strVNErg = ''
					// Set strVNAnrede = ''
					// If strPV = '' And strPName2 != ''
					// Set strVNSuch = strPName2
					// 07.07.10 OTÄ440
					// Call PalTrimFeld( strVNSuch )
					// Call SqlExecute(hSqlPVN)
					// Call SqlFetchNext(hSqlPVN, nFetchVN)
					// If strVNErg = ''
					// Call SqlDisconnect(hSqlPVN)
					// Return FALSE
					// Else
					// Set strPVAnrede = strVNAnrede
					// Set strPV = strPName2
					// Set strPName2 = ''
					// Call SqlDisconnect(hSqlPVN)
					// Return TRUE
					// Else If SalStrLength(strPV)<=4 And SalStrRightX(strPV,1)  = '.'
					// Call SqlDisconnect(hSqlPVN)
					// Return TRUE
					// Else
					// Set strVNSuch = strPV
					// 07.07.10 OTÄ440
					// Call PalTrimFeld( strVNSuch )
					// Call SqlExecute(hSqlPVN)
					// Call SqlFetchNext(hSqlPVN, nFetchVN)
					// If strVNErg = ''
					// Call SqlDisconnect(hSqlPVN)
					// Return FALSE
					// Else
					// Set strPVAnrede = strVNAnrede
					// Call SqlDisconnect(hSqlPVN)
					// Return TRUE
					locals.hSqlPVN.Prepare(@"SELECT vnanrede, vvorname INTO :strVNAnrede, :strVNErg FROM vn
WHERE vvorname = :strVNSuch");
					locals.strPVAnrede = "";
					Var.strVNErg = "";
					Var.strVNAnrede = "";
					if (locals.strPV == "" && locals.strPName2 != "") 
					{
						Var.strVNSuch = locals.strPName2;
						// 07.07.10 OTÄ440
						Int.PalTrimFeld(ref Var.strVNSuch);

						locals.hSqlPVN.Execute();
						locals.nFetchVN = locals.hSqlPVN.FetchNext();
						if (Var.strVNErg == "") 
						{
							locals.hSqlPVN.Prepare(@"SELECT vnanrede, vvorname INTO :strVNAnrede, :strVNErg FROM vn
WHERE vvorname2 = :strVNSuch");
							locals.hSqlPVN.Execute();
							locals.nFetchVN = locals.hSqlPVN.FetchNext();
							if (Var.strVNErg == "") 
							{
								locals.hSqlPVN.Disconnect();
								return false;
							}
							else
							{
								locals.strPVAnrede = Var.strVNAnrede;
								locals.strPV = locals.strPName2;
								locals.strPName2 = "";
								locals.hSqlPVN.Disconnect();
								return true;
							}
						}
						else
						{
							locals.strPVAnrede = Var.strVNAnrede;
							locals.strPV = locals.strPName2;
							locals.strPName2 = "";
							locals.hSqlPVN.Disconnect();
							return true;
						}
					}
					else if (locals.strPV.Length <= 4 && locals.strPV.Right(1) == ".") 
					{
						locals.hSqlPVN.Disconnect();
						return true;
					}
					else
					{
						Var.strVNSuch = locals.strPV;
						// 07.07.10 OTÄ440
						Int.PalTrimFeld(ref Var.strVNSuch);

						locals.hSqlPVN.Execute();
						locals.nFetchVN = locals.hSqlPVN.FetchNext();
						if (Var.strVNErg == "") 
						{
							locals.hSqlPVN.Prepare(@"SELECT vnanrede, vvorname INTO :strVNAnrede, :strVNErg FROM vn
WHERE vvorname2 = :strVNSuch");
							locals.hSqlPVN.Execute();
							locals.nFetchVN = locals.hSqlPVN.FetchNext();
							if (Var.strVNErg == "") 
							{
								locals.hSqlPVN.Disconnect();
								return false;
							}
							else
							{
								locals.strPVAnrede = Var.strVNAnrede;
								locals.hSqlPVN.Disconnect();
								return true;
							}
						}
						else
						{
							locals.strPVAnrede = Var.strVNAnrede;
							locals.hSqlPVN.Disconnect();
							return true;
						}
					}
					if (locals.hSqlPVN) 
					{
						locals.hSqlPVN.Disconnect();
					}
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					strPV = locals.strPV;
					strPVAnrede = locals.strPVAnrede;
					strPName2 = locals.strPName2;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strP"></param>
		/// <param name="strPQ"></param>
		/// <param name="strPZ"></param>
		/// <returns></returns>
		public static SalString PalStrReplace(SalString strP, SalString strPQ, SalString strPZ)
		{
			#region Local Variables
			SalNumber nL = 0;
			SalNumber nN = 0;
			SalString strPErg = "";
			SalString strPMid = "";
			SalNumber nLen = 0;
			#endregion
			
			#region Actions
			nL = strPQ.Length;
			strPErg = "";
			nN = 0;
			nLen = strP.Length;
			while (nN < nLen) 
			{
				strPMid = strP.Mid(nN, nL);
				if (strPMid == strPQ) 
				{
					strPErg = strPErg + strPZ;
					nN = nN + nL;
				}
				else
				{
					strPErg = strPErg + strP.Mid(nN, 1);
					nN = nN + 1;
				}
			}
			return strPErg;
			#endregion
		}
		
		/// <summary>
		/// Entfernt Blanks aus String
		/// </summary>
		/// <param name="strMatch"></param>
		/// <returns></returns>
		public static SalString PalTrimStrichEng(SalString strMatch)
		{
			#region Local Variables
			SalNumber nPos = 0;
			#endregion
			
			#region Actions
			// Set nPos = SalStrScan(strMatch,' -')
			// If nPos != -1
			// Set strMatch = SalStrLeftX(strMatch, nPos) ||  '-' ||
			//  SalStrMidX(strMatch, nPos+2,255)
			// Set nPos = SalStrScan(strMatch,'- ')
			// If nPos != -1
			// Set strMatch = SalStrLeftX(strMatch, nPos) ||  '-' ||
			//  SalStrMidX(strMatch, nPos+2,255)
			// Set nPos = SalStrScan(strMatch,'/ ')
			// If nPos != -1
			// Set strMatch = SalStrLeftX(strMatch, nPos) ||  '/' ||
			//  SalStrMidX(strMatch, nPos+2,255)
			// Set nPos = SalStrScan(strMatch,' /')
			// If nPos != -1
			// Set strMatch = SalStrLeftX(strMatch, nPos) ||  '/' ||
			//  SalStrMidX(strMatch, nPos+2,255)
			strMatch = Int.PalStrReplace(strMatch, " -", "-");
			strMatch = Int.PalStrReplace(strMatch, "- ", "-");
			strMatch = Int.PalStrReplace(strMatch, " /", "/");
			strMatch = Int.PalStrReplace(strMatch, "/ ", "/");
			strMatch = Int.PalStrReplace(strMatch, ". ", ".");
			return strMatch;
			#endregion
		}
		
		/// <summary>
		/// Entfernt Blanks aus String
		/// </summary>
		/// <param name="strMatch"></param>
		/// <returns></returns>
		public static SalString PalTrimStrichWeit(SalString strMatch)
		{
			#region Local Variables
			SalNumber nPos = 0;
			#endregion
			
			#region Actions
			// Set nPos = SalStrScan(strMatch,'-')
			// While nPos != -1
			// Set strMatch = SalStrLeftX(strMatch, nPos) ||  ' - ' ||
			//  SalStrMidX(strMatch, nPos+1,255)
			// Set nPos = nPos + 4 + SalStrScan(SalStrMidX(strMatch,nPos+4,255),'-')
			// Set nPos = SalStrScan(strMatch,'/')
			// While nPos != -1
			// Set strMatch = SalStrLeftX(strMatch, nPos) ||  ' / ' ||
			//  SalStrMidX(strMatch, nPos+1,255)
			// Set nPos = nPos + 4 + SalStrScan(SalStrMidX(strMatch,nPos+4,255),'/')
			strMatch = Int.PalStrReplace(strMatch, "-", " - ");
			strMatch = Int.PalStrReplace(strMatch, "/", " / ");
			strMatch = Int.PalStrReplace(strMatch, ".", ". ");
			return strMatch.Trim();
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPMatch"></param>
		/// <param name="nPPos"></param>
		/// <param name="nPLength"></param>
		/// <returns></returns>
		public static SalBoolean PalCheckEinzelWord(SalString strPMatch, SalNumber nPPos, SalNumber nPLength)
		{
			#region Actions
			if (((strPMatch.Mid(nPPos + nPLength, 1) == " " || strPMatch.Mid(nPPos + nPLength, 1) == "." || strPMatch.Mid(nPPos + nPLength, 1) == "/" || strPMatch.Mid(nPPos + nPLength, 1) == "-") || strPMatch.Length == nPPos + nPLength) && ((strPMatch.Mid(
				nPPos - 1, 1) == " " || strPMatch.Mid(nPPos - 1, 1) == "." || strPMatch.Mid(nPPos - 1, 1) == "/" || strPMatch.Mid(nPPos - 1, 1) == "-") || nPPos == 0)) 
			{
				return true;
			}
			else
			{
				return false;
			}
			#endregion
		}
		
		/// <summary>
		/// Entfernt Blanks aus String
		/// </summary>
		/// <param name="strMatch"></param>
		/// <returns></returns>
		public static SalString PalTrimSpezial(SalString strMatch)
		{
			#region Local Variables
			SalNumber nPos = 0;
			SalNumber nLength = 0;
			SalString strScan = "";
			#endregion
			
			#region Actions
			strScan = "GBR";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos != -1) 
			{
				if ((strMatch.Mid(nPos + nLength, 1) == " " || strMatch.Length == nPos + nLength) && (strMatch.Mid(nPos - 1, 1) == " " || nPos == 0)) 
				{
					strMatch = strMatch.Left(nPos) + "GbR" + strMatch.Mid(nPos + nLength, 255);
				}
			}

			strScan = "GMBH";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos != -1) 
			{
				if ((strMatch.Mid(nPos + nLength, 1) == " " || strMatch.Length == nPos + nLength) && (strMatch.Mid(nPos - 1, 1) == " " || nPos == 0)) 
				{
					strMatch = strMatch.Left(nPos) + "GmbH" + strMatch.Mid(nPos + nLength, 255);
				}
			}

			strScan = "AG";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos != -1) 
			{
				if ((strMatch.Mid(nPos + nLength, 1) == " " || strMatch.Length == nPos + nLength) && (strMatch.Mid(nPos - 1, 1) == " " || nPos == 0)) 
				{
					strMatch = strMatch.Left(nPos) + "AG" + strMatch.Mid(nPos + nLength, 255);
				}
			}

			strScan = "KG";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos != -1) 
			{
				if ((strMatch.Mid(nPos + nLength, 1) == " " || strMatch.Length == nPos + nLength) && (strMatch.Mid(nPos - 1, 1) == " " || nPos == 0)) 
				{
					strMatch = strMatch.Left(nPos) + "KG" + strMatch.Mid(nPos + nLength, 255);
				}
			}

			strScan = "EG";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos != -1) 
			{
				if ((strMatch.Mid(nPos + nLength, 1) == " " || strMatch.Length == nPos + nLength) && (strMatch.Mid(nPos - 1, 1) == " " || nPos == 0)) 
				{
					strMatch = strMatch.Left(nPos) + "eG" + strMatch.Mid(nPos + nLength, 255);
				}
			}

			strScan = "AUF";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos > 0) 
			{
				if (Int.PalCheckEinzelWord(strMatch, nPos, nLength)) 
				{
					strMatch = strMatch.Left(nPos) + "auf" + strMatch.Mid(nPos + nLength, 255);
				}
			}

			strScan = "DER";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos > 0) 
			{
				if (Int.PalCheckEinzelWord(strMatch, nPos, nLength)) 
				{
					strMatch = strMatch.Left(nPos) + "der" + strMatch.Mid(nPos + nLength, 255);
				}
			}

			strScan = "DEM";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos > 0) 
			{
				if (Int.PalCheckEinzelWord(strMatch, nPos, nLength)) 
				{
					strMatch = strMatch.Left(nPos) + "dem" + strMatch.Mid(nPos + nLength, 255);
				}
			}

			strScan = "D.";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos > 0) 
			{
				if ((strMatch.Mid(nPos + nLength, 1) == " " || strMatch.Length == nPos + nLength) && (strMatch.Mid(nPos - 1, 1) == " " && nPos != 0)) 
				{
					strMatch = strMatch.Left(nPos) + "d." + strMatch.Mid(nPos + nLength, 255);
				}
			}

			strScan = "V.D.";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos != -1) 
			{
				if (strMatch.Mid(nPos + nLength, 1) == " " || strMatch.Length == nPos + nLength) 
				{
					strMatch = strMatch.Left(nPos) + "v.d." + strMatch.Mid(nPos + nLength, 255);
				}
			}
			// !
			strScan = "V.";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos != -1) 
			{
				strMatch = strMatch.Left(nPos) + "v." + strMatch.Mid(nPos + nLength, 255);
			}
			// !
			strScan = "VON";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos != -1) 
			{
				if (Int.PalCheckEinzelWord(strMatch, nPos, nLength)) 
				{
					strMatch = strMatch.Left(nPos) + "von" + strMatch.Mid(nPos + nLength, 255);
				}
			}
			// !
			strScan = "VAN";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos != -1) 
			{
				if (Int.PalCheckEinzelWord(strMatch, nPos, nLength)) 
				{
					strMatch = strMatch.Left(nPos) + "van" + strMatch.Mid(nPos + nLength, 255);
				}
			}
			// !
			strScan = "ZUR";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos > 0) 
			{
				if (Int.PalCheckEinzelWord(strMatch, nPos, nLength)) 
				{
					strMatch = strMatch.Left(nPos) + "zur" + strMatch.Mid(nPos + nLength, 255);
				}
			}
			// !
			strScan = "ZU";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos != -1) 
			{
				if (Int.PalCheckEinzelWord(strMatch, nPos, nLength)) 
				{
					strMatch = strMatch.Left(nPos) + "zu" + strMatch.Mid(nPos + nLength, 255);
				}
			}
			// !
			strScan = "U.";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos > 0) 
			{
				if ((strMatch.Mid(nPos + nLength, 1) == " " || strMatch.Length == nPos + nLength) && (strMatch.Mid(nPos - 1, 1) == " " && nPos != 0)) 
				{
					strMatch = strMatch.Left(nPos) + "u." + strMatch.Mid(nPos + nLength, 255);
				}
			}
			// !
			strScan = "UND";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos > 0) 
			{
				if (Int.PalCheckEinzelWord(strMatch, nPos, nLength)) 
				{
					strMatch = strMatch.Left(nPos) + "und" + strMatch.Mid(nPos + nLength, 255);
				}
			}
			// !
			strScan = "E.V.";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos > 0) 
			{
				if (strMatch.Mid(nPos - 1, 1) == " " && nPos != 0) 
				{
					strMatch = strMatch.Left(nPos) + "e.V." + strMatch.Mid(nPos + nLength, 255);
				}
			}

			strScan = "Z.";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos != -1) 
			{
				if (strMatch.Mid(nPos + nLength, 1) == " " || nPos == 0) 
				{
					strMatch = strMatch.Left(nPos) + "z." + strMatch.Mid(nPos + nLength, 255);
				}
			}
			// !
			strScan = "C/O";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos != -1) 
			{
				if (Int.PalCheckEinzelWord(strMatch, nPos, nLength)) 
				{
					strMatch = strMatch.Left(nPos) + "c/o" + strMatch.Mid(nPos + nLength, 255);
				}
			}
			// 15.02.07 F131
			strScan = "DE LA ";
			nLength = strScan.Length;
			nPos = strMatch.ToUpper().Scan(strScan);
			if (nPos != -1) 
			{
				if (nPos == 0 || strMatch.Mid(nPos - 1, 1) == " ") 
				{
					strMatch = strMatch.Left(nPos) + "de la " + strMatch.Mid(nPos + nLength, 255);
				}
			}
			// 17.01.14 F1848	17.04.14 'Mc' -> ' Mc'
			strScan = " Mc";
			nLength = strScan.Length;
			nPos = strMatch.Scan(strScan);
			if (nPos != -1) 
			{
				strMatch = strMatch.Left(nPos) + " Mc" + strMatch.Mid(nPos + nLength, 1).ToUpper() + strMatch.Mid(nPos + nLength + 1, 255);
			}
			// 24.08.22
			strScan = " PARTG";
			nLength = strScan.Length;
			nPos = strMatch.Scan(strScan);
			if (nPos != -1) 
			{
				strMatch = strMatch.Left(nPos) + " PartG" + strMatch.Mid(nPos + nLength, 1).ToUpper() + strMatch.Mid(nPos + nLength + 1, 255);
			}
			// 24.08.22
			strScan = " MBB";
			nLength = strScan.Length;
			nPos = strMatch.Scan(strScan);
			if (nPos != -1) 
			{
				strMatch = strMatch.Left(nPos) + " mbB" + strMatch.Mid(nPos + nLength, 1).ToUpper() + strMatch.Mid(nPos + nLength + 1, 255);
			}
            // 31.05.24 ### fecher
            strScan = " EGBR";
            nLength = strScan.Length;
            nPos = strMatch.Scan(strScan);
            if (nPos != -1)
            {
                strMatch = strMatch.Left(nPos) + " eGbR" + strMatch.Mid(nPos + nLength, 1).ToUpper() + strMatch.Mid(nPos + nLength + 1, 255);
            }

            return strMatch.Trim();
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPV"></param>
		/// <param name="strPN"></param>
		/// <param name="strPAdel"></param>
		/// <returns></returns>
		public static SalBoolean PalSplitAdel(ref SalString strPV, ref SalString strPN, SalString strPAdel)
		{
			#region Local Variables
			SalBoolean bPChange = false;
			SalNumber nPLength = 0;
			#endregion
			
			#region Actions
			bPChange = false;
			nPLength = strPAdel.Length;
			if (strPV.Left(nPLength + 1) == (strPAdel + " ") || strPV == strPAdel) 
			{
				strPN = strPAdel + " " + strPN;
				strPV = strPV.Mid(nPLength + 1, 255);
				bPChange = true;
			}
			if (strPV.Right(nPLength + 1) == (" " + strPAdel)) 
			{
				strPN = strPAdel + " " + strPN;
				strPV = strPV.Left(strPV.Length - (nPLength + 1));
				bPChange = true;
			}
			return bPChange;
			#endregion
		}
		
		/// <summary>
		/// Entfernt Blanks aus String
		/// </summary>
		/// <param name="strMatch"></param>
		/// <returns></returns>
		public static SalString PalTrimKomma(SalString strMatch)
		{
			#region Local Variables
			SalNumber nPos = 0;
			#endregion
			
			#region Actions
			nPos = strMatch.Scan(",");
			while (nPos != -1) 
			{
				strMatch = strMatch.Left(nPos) + " " + strMatch.Mid(nPos + 1, 255);
				nPos = strMatch.Scan(",");
			}
			return strMatch.Trim();
			#endregion
		}
		
		/// <summary>
		/// Entfernt Zahlen aus String
		/// </summary>
		/// <param name="strMatch"></param>
		/// <returns></returns>
		public static SalString PalTrimStrPhon(SalString strMatch)
		{
			#region Local Variables
			SalNumber nPos = 0;
			SalString strResult = "";
			SalString strChar = "";
			SalNumber nLength = 0;
			#endregion
			
			#region Actions
			// 04.06.04
			strResult = Int.PalTrimStr(strMatch);
			strResult = strResult.ToUpper();
			strResult = Int.PalStrReplace(strResult, " ", "");
			strResult = Int.PalStrReplace(strResult, "-", "");
			strResult = Int.PalStrReplace(strResult, "Ä", "AE");
			strResult = Int.PalStrReplace(strResult, "Ö", "OE");
			strResult = Int.PalStrReplace(strResult, "Ü", "UE");
			strResult = Int.PalStrReplace(strResult, "ß", "SS");
			return strResult.Trim();
			#endregion
		}
		
		/// <summary>
		/// wandelt Datum in String um
		/// </summary>
		/// <param name="dtDate"></param>
		/// <returns></returns>
		public static SalString PalDateToStrJJJJMMTThhmmss(SalDateTime dtDate)
		{
			#region Local Variables
			SalString strDate = "";
			SalString strDatum = "";
			#endregion
			
			#region Actions
			strDate = dtDate.ToString();
			strDatum = strDate.Mid(0, 4) + strDate.Mid(5, 2) + strDate.Mid(8, 2) + strDate.Mid(11, 2) + strDate.Mid(14, 2) + strDate.Mid(17, 2);
			return strDatum;
			#endregion
		}
		
		/// <summary>
		/// wandelt Datum in String um
		/// </summary>
		/// <param name="dtDate"></param>
		/// <returns></returns>
		public static SalString PalDateToStrJJJJMMTThhmmssmitStrichen(SalDateTime dtDate)
		{
			#region Local Variables
			SalString strDate = "";
			SalString strDatum = "";
			#endregion
			
			#region Actions
			strDate = dtDate.ToString();
			strDatum = strDate.Mid(0, 4) + "-" + strDate.Mid(5, 2) + "-" + strDate.Mid(8, 2) + "-" + strDate.Mid(11, 2) + "-" + strDate.Mid(14, 2) + "-" + strDate.Mid(17, 2);
			return strDatum;
			#endregion
		}
		// Function: PalZustAlt
		// Description: sucht zuständigen Mitarbeiter aus Arzt-Matchcode
		// Returns
		// String:
		// Parameters
		// Number: nPArztNr
		// Static Variables
		// Local variables
		// String: strResult
		// Actions
		// Set nZArztNr = nPArztNr
		// 13.11.12 Ä845 Änderungen wg. KN
		// 28.08.15 Ä1241
		// Call SqlImmedSel('SELECT amatch INTO :strZMatch FROM a WHERE aarztnr = :nZArztNr')
		// Set strZMatch = SalStrUpperX(PalStringToMatch(strZMatch))
		// If (SalStrLeftX(strZMatch,1) >= 'B' and SalStrLeftX(strZMatch,1) <= 'F') or SalStrLeftX(strZMatch,1) = 'Z' or SalStrLeftX(strZMatch,1) = 'J' or SalStrLeftX(strZMatch,1) = 'V'
		// Set strResult = 'KO'
		// Else If SalStrLeftX(strZMatch,1) >= 'G' And SalStrLeftX(strZMatch,1) <= 'I'
		// Set strResult = 'SE'
		// Else If (SalStrLeftX(strZMatch,1) >= 'K' And SalStrLeftX(strZMatch,1) <= 'M')
		// Set strResult = 'YI'
		// Else If (SalStrLeftX(strZMatch,1) >= 'N' And SalStrLeftX(strZMatch,1) <= 'R') or SalStrLeftX(strZMatch,1) = 'A'
		// Set strResult = 'TO'
		// Else
		// Set strResult = 'ZK'
		// Return strResult
		/// <summary>
		/// sucht zuständigen Mitarbeiter aus Arzt-Matchcode
		/// </summary>
		/// <param name="nPArztNr"></param>
		/// <returns></returns>
		public static SalString PalZust(SalNumber nPArztNr)
		{
			#region Local Variables
			SalString strResult = "";
			#endregion
			
			#region Actions
			Var.nZArztNr = nPArztNr;
			// 13.11.12 Ä845 Änderungen wg. KN
			// 28.08.15 Ä1241
			Int.SqlImmedSel("SELECT amatch INTO :strZMatch FROM a WHERE aarztnr = :nZArztNr");
			Var.strZMatch = Int.PalStringToMatch(Var.strZMatch).ToUpper().Left(1);
			// 22.06.22 Ä2023
			Int.SqlImmedSel("SELECT zuzei INTO :strZResult FROM zu WHERE zuabc = :strZMatch");
			return Var.strZResult;
			#endregion
		}
		
		/// <summary>
		/// kürzt String und füllt nach rechts mit Blanks auf. Ergebnis: String Falls = 0, dann in Blanks umwandeln
		/// </summary>
		/// <param name="strZahl"></param>
		/// <param name="nLaenge"></param>
		/// <returns></returns>
		public static SalString PalLFBlank(SalString strZahl, SalNumber nLaenge)
		{
			#region Local Variables
			SalString strNum = "";
			#endregion
			
			#region Actions
			if (strZahl == "0") 
			{
				strZahl = "";
			}
			strNum = strZahl + "                                                                                              ";
			strNum = strNum.Left(nLaenge);
			return strNum;
			#endregion
		}
		
		/// <summary>
		/// wandelt Datum in String um
		/// </summary>
		/// <param name="dtDate"></param>
		/// <returns></returns>
		public static SalString PalDateToStrJJJJMMTT(SalDateTime dtDate)
		{
			#region Local Variables
			SalString strDate = "";
			SalString strDatum = "";
			#endregion
			
			#region Actions
			strDate = dtDate.ToString();
			strDatum = strDate.Mid(0, 4) + strDate.Mid(5, 2) + strDate.Mid(8, 2);
			return strDatum;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPText"></param>
		/// <param name="strPCaption"></param>
		/// <param name="nPFlags"></param>
		/// <returns></returns>
		public static SalNumber PalMessageBox(SalString strPText, SalString strPCaption, SalNumber nPFlags)
		{
			#region Local Variables
			SalDateTime dtStartTime = SalDateTime.Null;
			SalDateTime dtEndTime = SalDateTime.Null;
			SalNumber nPTime = 0;
			SalString strPText1 = "";
			SalNumber nPAnswer = 0;
			#endregion
			
			#region Actions
			nPTime = 0;
			strPText1 = strPText;
			while (nPTime < 4) 
			{
				dtStartTime = SalDateTime.Current;
				nPAnswer = Sal.MessageBox(strPText1, strPCaption, nPFlags);
				dtEndTime = SalDateTime.Current;
				nPTime = (dtEndTime - dtStartTime) * 86400;
				if (nPTime < 4) 
				{
					strPText1 = Int.PalStrNum(nPTime, 5, 1) + @" Sekunden ist viel zu kurz zum Durchlesen. Nochmal bitte!

" + strPText;
				}
			}
			return nPAnswer;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public static SalNumber PalCheckLeseberechtigung()
		{
			#region Local Variables
			SqlLocals.PalCheckLeseberechtigungLocals locals = new SqlLocals.PalCheckLeseberechtigungLocals();
			#endregion
			
			#region Actions
			using (new SqlContext(locals))
			{
				Var.strBNLeseberechtigung = "";
				Int.SqlConnection(ref locals.hSqlLB);
				if (locals.hSqlLB.PrepareAndExecute("SELECT bnzei INTO :strDummy FROM bn WHERE bnvertr = :strBNZei")) 
				{
					while (locals.hSqlLB.FetchNext(ref locals.nFetchLB)) 
					{
						Var.strBNLeseberechtigung = Var.strBNLeseberechtigung + ",\'" + Var.strDummy + "\'";
					}
					locals.hSqlLB.Commit();
				}
				locals.hSqlLB.Disconnect();

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strXLC"></param>
		/// <param name="nXTyp"></param>
		/// <returns></returns>
		public static SalString PalPruefeLC(SalString strXLC, SalNumber nXTyp)
		{
			#region Actions
			Var.strPLC = strXLC.Left(2);
			// Call SalMessageBeep( 0 )
			if (nXTyp == 0) 
			{
				Var.strPLN = "";
				Int.SqlImmedSel("SELECT lcname FROM lc INTO :strPLN WHERE lccode = @UPPER(:strPLC) AND lccode <> \'DE\'");
			}
			else if (nXTyp == 1) 
			{
				Int.SqlImmedSel("SELECT lccode || \' \' || lcname FROM lc INTO :strPLN WHERE lccode = @UPPER(:strPLC)");
			}
			else
			{
				Int.SqlImmedSel("SELECT lccode FROM lc INTO :strPLN WHERE lccode = @UPPER(:strPLC)");
			}
			return Var.strPLN;
			#endregion
		}
		
		/// <summary>
		/// Ermittle aus dem Ort das Land
		/// </summary>
		/// <param name="strPOrt"></param>
		/// <returns></returns>
		public static SalString PalGetLand(ref SalString strPOrt)
		{
			#region Local Variables
			SalString strPLand = "";
			SalString strPPLZ = "";
			SalNumber nPPos = 0;
			SalBoolean bPExists = false;
			#endregion
			
			#region Actions
			strPLand = "--";
			// #29 07.07.06 wenn der ISO-Code in den ersten beiden Bytes steht, wird dieser genommen.
			nPPos = strPOrt.Scan(" ");
			if (nPPos == 2) 
			{
				strPLand = strPOrt.Left(nPPos).ToUpper();
				Int.SqlIstDa("FROM lc WHERE lccode = \'" + strPLand + "\'", ref bPExists);
				if (bPExists) 
				{
					strPOrt = strPOrt.Mid(nPPos + 1, 255);
				}
				else
				{
					strPLand = "--";
				}
			}

			if (strPLand == "--") 
			{
				nPPos = strPOrt.Scan("-");
				if (nPPos >= 1 && nPPos <= 4) 
				{
				}
				else
				{
					nPPos = strPOrt.Scan(" ");
					if (nPPos >= 1 && nPPos <= 3) 
					{
					}
					else
					{
						nPPos = -1;
					}
				}
				if (strPOrt.Scan(" ") == 5 && Int.PalValNum(strPOrt.Left(5)) > 0 && nPPos == -1) 
				{
					strPLand = "DE";
				}
				else if (nPPos != -1) 
				{
					strPLand = strPOrt.ToUpper().Left(nPPos).Trim();
					strPOrt = strPOrt.Mid(nPPos + 1, 255);
					if (strPLand == "F") 
					{
						strPLand = "FR";
					}
					else if (strPLand == "A") 
					{
						strPLand = "AT";
					}
					else if (strPLand == "CH") 
					{
						strPLand = "CH";
					}
					else if (strPLand == "NL") 
					{
						strPLand = "NL";
					}
					else if (strPLand == "DK") 
					{
						strPLand = "DK";
					}
					else if (strPLand == "FI") 
					{
						strPLand = "FI";
					}
					else if (strPLand == "GB") 
					{
						strPLand = "UK";
					}
					else if (strPLand == "I") 
					{
						strPLand = "IT";
					}
					else if (strPLand == "B") 
					{
						strPLand = "BE";
					}
					else
					{
						strPLand = "--";
					}
				}
				else
				{
					strPLand = "--";
				}
			}
			return strPLand;
			#endregion
		}
		
		/// <summary>
		/// Addiere Tage zu Datum
		/// </summary>
		/// <param name="dtPOri"></param>
		/// <param name="nPAdd"></param>
		/// <returns></returns>
		public static SalDateTime PalAddDay(SalDateTime dtPOri, SalNumber nPAdd)
		{
			#region Actions
			return new SalDateTime(dtPOri.Year(), dtPOri.Month(), dtPOri.Day() + nPAdd, dtPOri.Hour(), dtPOri.Minute(), dtPOri.Second());
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="dtPSeit"></param>
		/// <param name="dtPBis"></param>
		/// <param name="bErlaubeNegativeWerte"></param>
		/// <returns></returns>
		public static SalNumber PalTage(SalDateTime dtPSeit, SalDateTime dtPBis, SalBoolean bErlaubeNegativeWerte)
		{
			#region Local Variables
			SalNumber nJS = 0;
			SalNumber nMS = 0;
			SalNumber nTS = 0;
			SalNumber nJB = 0;
			SalNumber nMB = 0;
			SalNumber nTB = 0;
			SalNumber nTage = 0;
			#endregion
			
			#region Actions
			// 24.08.06 Ä17 DATEV
			// Set nJS = SalDateYear(dtPSeit)
			// Set nMS = SalDateMonth(dtPSeit)
			// Set nTS = SalDateDay(dtPSeit)
			// Set nJB = SalDateYear(dtPBis)
			// Set nMB = SalDateMonth(dtPBis)
			// Set nTB = SalDateDay(dtPBis)
			// Set nTage = (nJB - nJS) * 360
			// Set nTage = nTage + (nMB - nMS) * 30
			// Set nTage = nTage + (nTB - nTS)
			nTage = dtPBis - dtPSeit + 1;
			// 04.06.07 F168
			if (!(bErlaubeNegativeWerte)) 
			{
				if (nTage < 0) 
				{
					nTage = 0;
				}
			}

			return nTage;
			#endregion
		}
		
		/// <summary>
		/// wandelt Datum in String um
		/// </summary>
		/// <param name="dtDate"></param>
		/// <returns></returns>
		public static SalString PalDateToStrJJMMTT(SalDateTime dtDate)
		{
			#region Local Variables
			SalString strDate = "";
			SalString strDatum = "";
			#endregion
			
			#region Actions
			strDate = dtDate.ToString();
			strDatum = strDate.Mid(2, 2) + strDate.Mid(5, 2) + strDate.Mid(8, 2);
			return strDatum;
			#endregion
		}
		
		/// <summary>
		/// wandelt Datum in String um
		/// </summary>
		/// <param name="dtDate"></param>
		/// <returns></returns>
		public static SalString PalDateToStrJJMMTTLeer(SalDateTime dtDate)
		{
			#region Local Variables
			SalString strDate = "";
			SalString strDatum = "";
			#endregion
			
			#region Actions
			// 15.08.18 Ä1662
			if (dtDate == SalDateTime.Null) 
			{
				strDatum = "      ";
			}
			else
			{
				strDate = dtDate.ToString();
				strDatum = strDate.Mid(2, 2) + strDate.Mid(5, 2) + strDate.Mid(8, 2);
			}
			return strDatum;
			#endregion
		}
		
		/// <summary>
		/// wandelt Datum in String um
		/// </summary>
		/// <param name="dtDate"></param>
		/// <returns></returns>
		public static SalString PalDateToStrDE(SalDateTime dtDate)
		{
			#region Local Variables
			SalString strDate = "";
			SalString strDatum = "";
			#endregion
			
			#region Actions
			strDate = dtDate.ToString();
			strDatum = strDate.Mid(8, 2) + "." + strDate.Mid(5, 2) + "." + strDate.Mid(0, 4);
			return strDatum;
			#endregion
		}
		
		/// <summary>
		/// kürzt String und füllt nach links mit Blanks auf. Ergebnis: String
		/// </summary>
		/// <param name="strZahl"></param>
		/// <param name="nLaenge"></param>
		/// <returns></returns>
		public static SalString PalRF(SalString strZahl, SalNumber nLaenge)
		{
			#region Local Variables
			SalString strNum = "";
			#endregion
			
			#region Actions
			strNum = ((SalString)" ").Repeat(nLaenge - strZahl.Length) + strZahl;
			return strNum;
			#endregion
		}
		
		/// <summary>
		/// erstellt die Datengrundlage für eine Forderungsaufstellung
		/// </summary>
		/// <param name="nPR"></param>
		/// <param name="nArzt"></param>
		/// <param name="nHalter"></param>
		/// <param name="strZusatzkosten"></param>
		/// <param name="nZusatzkosten"></param>
		/// <param name="dtPDatum"></param>
		/// <param name="bFingiert">15.03.16 Ä1358</param>
		/// <returns></returns>
		public static SalBoolean PalFAalt(SalNumber nPR, SalNumber nArzt, SalNumber nHalter, SalString strZusatzkosten, SalNumber nZusatzkosten, SalDateTime dtPDatum, SalBoolean bFingiert)
		{
			#region Local Variables
			SqlLocals.PalFAaltLocals locals = new SqlLocals.PalFAaltLocals();
			#endregion
			
			#region Actions
			using (new SqlContext(locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.nPR = nPR;
				locals.nArzt = nArzt;
				locals.nHalter = nHalter;
				locals.strZusatzkosten = strZusatzkosten;
				locals.nZusatzkosten = nZusatzkosten;
				locals.dtPDatum = dtPDatum;
				locals.bFingiert = bFingiert;

				Var.nFAArzt = locals.nArzt;
				Var.nFAHalter = locals.nHalter;
				// 03.04.08 F358
				Var.nProzNr = 0;
				// 29.06.10 OTÄ433
				locals.bRZFetched = false;

				Int.SqlImmedSel("SELECT ANR2 INTO :nFAArzt2 FROM A WHERE AARZTNR = :nFAArzt");
				if (Var.nFAArzt2 == 0) 
				{
					Var.nFAArzt2 = Var.nFAArzt;
				}

				Int.SqlImmedSel(@"SELECT MAX(prdnr)
INTO :nFAPRNr
FROM prd
WHERE prdhalternr=:nFAHalter
and " + Int.PalArztNr("prd", Var.nFAArzt, Var.nFAArzt2));
				Var.ndlgDM = SalNumber.Null;
				// 05.01.11 ModalDialog, nur noch, wenn nicht in Parameter angegeben
				if (locals.nZusatzkosten == SalNumber.Null) 
				{
					dlgTextPRundDM.ModalDialog(Sys.hWndForm, "Geben Sie eventuelle Zusatzkosten an :", ref Var.strFAText, ref Var.nFAPRNr, ref Var.nFADM);
				}
				else
				{
					Var.strFAText = locals.strZusatzkosten;
					Var.nFADM = locals.nZusatzkosten;
					Var.ndlgDM = 1;
				}
				while (Var.ndlgDM == SalNumber.Null) 
				{
				}
				// 07.09.06 F55 + If ndlgDM != 0
				if (Var.ndlgDM != 0) 
				{
					// 18.01.11 Ä498
					if (locals.dtPDatum == SalDateTime.Null) 
					{
						Var.dtdlgDatum = SalDateTime.Current;
						dlgDatum.ModalDialog(Sys.hWndForm, "Datum der Forderungsaufstellung :", ref Var.dtdlgDatum);
					}
					else
					{
						Var.dtdlgDatum = locals.dtPDatum;
					}
					Var.dtdlgDatum = new SalDateTime(Var.dtdlgDatum.Year(), Var.dtdlgDatum.Month(), Var.dtdlgDatum.Day(), 23, 59, 59);
					// 27.06.07
					// #25
					Int.SqlConnection(ref Var.hSqlBZ);
					// 26.01.07 F112
					Int.SqlConnection(ref Var.hSqlZi);
					Int.SqlConnection(ref Var.hSqlZiZahl);
					Int.SqlConnection(ref locals.hSqlFA);
					// 26.04.05
					Int.SqlImmed("DELETE FROM FA WHERE fauser = :strBNUser");
					// 28.08.06 Aufgabe 7
					Var.strZust = Int.PalZust(Var.nFAArzt);
					// 09.04.99
					Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn,hname2,hstr,hort, hland
into :frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand
from H where hhalternr=:nFAHalter and harztnr=:nFAArzt AND hdeaktiv IS NULL");
					// 07.06.01 plus , prdmhf
					// 18.12.07
					if (locals.nPR > 0) 
					{
						locals.hSqlFA.PrepareAndExecute(@"SELECT prnr, prdatum, prdma, prdmb, prdmc, praz, prdmhf, prprozhf, prprozko
INTO :nProzNr, :dtFADate, :nDMa, :nDMb, :nDMc, :strAZ, :nDMRechSum, :nZinsen, :nZiKo
FROM pr
WHERE prnr= " + locals.nPR.ToString(0) + " And (prerledigt IS NULL or prerledigt <> 1)");
					}
					else
					{
						locals.hSqlFA.PrepareAndExecute(@"SELECT prnr, prdatum, prdma, prdmb, prdmc, praz, prdmhf, prprozhf, prprozko
INTO :nProzNr, :dtFADate, :nDMa, :nDMb, :nDMc, :strAZ, :nDMRechSum, :nZinsen, :nZiKo
FROM pr
WHERE prhalternr=:nFAHalter
and prarztnr IN (:nFAArzt, :nFAArzt2) And (prerledigt IS NULL or prerledigt <> 1)");
					}
					locals.nFetchRep = locals.hSqlFA.FetchNext();
					while (locals.nFetchRep != Sys.FETCH_EOF) 
					{
						if (Var.nZinsen == 0 || Var.nZinsen == SalNumber.Null) 
						{
							Var.ndlgDM = SalNumber.Null;
							if (1 == dlgDM.ModalDialog(Sys.hWndForm, "Bitte geben Sie für PR" + Int.PalStrNum(Var.nProzNr, 6, 0) + " den Zinssatz für die HF ein  (%) :", ref Var.nZinsen)) 
							{
							}
							while (Var.ndlgDM == SalNumber.Null) 
							{
							}
						}
						// HF
						// Call SalStatusSetText(hWndForm, 'HF')
						// Set nDMRechSum = 0
						Var.hFileFA.Open(Var.strTVNPath + "\\fa.log", (Sys.OF_Create | Sys.OF_Write));
						if (Var.dtFADate <= Var.dtdlgDatum) 
						{
							if (Var.strAZ == "") 
							{
								Var.strAZ = "Mahnbescheid";
							}
							else
							{
								Var.strAZ = "Mahnbescheid AZ " + Var.strAZ;
							}
							Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, fazinshf, fadmhf)
VALUES(:strBNUser, :nProzNr, :dtFADate,  :strAZ, :nZinsen, :nDMRechSum)");

							// 26.01.07 F112
							if (Var.nProzNr >= 16672) 
							{
								Var.nZiHFDM = 0;
								Var.nZiRest = 0;
								Var.nZiSumme = 0;
								// 20.12.07
								Var.dtZiBis = SalDateTime.Null;

								Int.SqlImmedSel(@"SELECT akzust INTO :dtZiBis
FROM ak  WHERE akzust IS NOT NULL AND akproznr = :nProzNr AND aktyp='MB' AND (aktypdetail ='MB' OR aktypdetail ='MB-AG') AND akdeaktiv IS NULL ");
								// 27.09.07 F272
								if (Var.dtZiBis == SalDateTime.Null) 
								{
									Var.dtZiBis = Int.PalAddDay(Var.dtdlgDatum, -1);
								}

								locals.strSelectFA = @"SELECT prdarztnr, prdrechnr, rkrechDat, (rkdmleis+rkdmarzn)
INTO :nZiArztNr, :nZiRechNr, :dtZiRechDat, :nZiHFDM
FROM prd, rk WHERE prdnr = :nProzNr AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr AND rkdeaktiv IS NULL ORDER BY prdarztnr, prdrechnr";
								Int.SqlHandleExec(Var.hSqlZi, locals.strSelectFA, "Fehler", ref Var.nCount);
								Var.nFetchZi = Var.hSqlZi.FetchNext();
								while (Var.nFetchZi != Sys.FETCH_EOF) 
								{
									Var.dtZiVon = Int.PalAddDay(Var.dtZiRechDat, 30);


									// Zinsberechnung je Zahldatum
									locals.strSelectFA = @"SELECT zabuchdat, zadm
INTO :dtZiZahlDat, :nZiZahlDM
FROM za WHERE zaarztnr = :nZiArztNr AND zarechnr = :nZiRechNr AND zadeaktiv IS NULL ORDER BY zabuchdat";
									Var.nZiRest = Var.nZiHFDM;
									Int.SqlHandleExec(Var.hSqlZiZahl, locals.strSelectFA, "Fehler", ref Var.nCount);
									Var.nFetchZiZahl = Var.hSqlZiZahl.FetchNext();
									while (Var.nFetchZiZahl != Sys.FETCH_EOF) 
									{
										Var.hSqlBZ.PrepareAndExecute(@"SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
FROM bz ORDER BY bzvon, bzbis");
										Var.nFetchBZ = Var.hSqlBZ.FetchNext();
										while (Var.nFetchBZ != Sys.FETCH_EOF) 
										{
											// 17.03.08 F350 +
											// Else If dtZiBis < dtBZvon
											// Else If dtZiBis < dtZiVon
											// Else If dtBZbis < dtZiVon
											if (Var.dtZiZahlDat < Var.dtBZvon) 
											{
											}
											else if (Var.dtBZbis < Var.dtZiVon) 
											{
											}
											else if (Var.dtZiBis < Var.dtBZvon) 
											{
											}
											else if (Var.dtZiBis < Var.dtZiVon) 
											{
											}
											else if (Var.dtBZbis < Var.dtZiVon) 
											{
											}
											else
											{
												if (Var.dtZiZahlDat <= Var.dtBZbis) 
												{
													Var.dtBZbis = Int.PalAddDay(Var.dtZiZahlDat, -1);
												}
												// 17.03.08 F350
												if (Var.dtZiBis <= Var.dtBZbis) 
												{
													Var.dtBZbis = Int.PalAddDay(Var.dtZiBis, -1);
												}

												if (Var.dtBZvon < Var.dtZiVon) 
												{
													Var.dtBZvon = Var.dtZiVon;
												}
												Var.nZinsTage = Int.PalTage(Var.dtBZvon, Var.dtBZbis, false);
												Var.nZiSumme = Var.nZiSumme + (Var.nZiRest * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100;

												Var.hFileFA.PutString("a: " + Int.SalDateToStrX(Var.dtBZvon) + "-" + Int.SalDateToStrX(Var.dtBZbis) + " = " + Int.PalStrNum(Var.nZinsTage, 4, 0) + " Tage * " + Int.PalStrNum(Var.nBZZins, 5, 1) + "% auf €" + Int.PalStrNum(Var.nZiRest, 
														8, 2) + " = € " + Int.PalStrNum((Var.nZiRest * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100, 8, 2));

											}

											Var.nFetchBZ = Var.hSqlBZ.FetchNext();
										}

										// Hochsetzen für nächsten Datensatz
										Var.dtZiVon = Var.dtZiZahlDat;
										Var.nZiRest = Var.nZiRest - Var.nZiZahlDM;
										Var.nFetchZiZahl = Var.hSqlZiZahl.FetchNext();
									}
									// Zinsen für Zeitraum von letzter Zahlung bis heute
									Var.hSqlBZ.PrepareAndExecute(@"SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
FROM bz ORDER BY bzvon, bzbis");
									Var.nFetchBZ = Var.hSqlBZ.FetchNext();
									while (Var.nFetchBZ != Sys.FETCH_EOF) 
									{
										if (Var.dtZiBis < Var.dtBZvon) 
										{
										}
										else if (Var.dtZiBis < Var.dtZiVon) 
										{
										}
										else if (Var.dtBZbis < Var.dtZiVon) 
										{
										}
										else
										{
											if (Var.dtZiBis <= Var.dtBZbis) 
											{
												Var.dtBZbis = Int.PalAddDay(Var.dtZiBis, -1);
											}
											if (Var.dtBZvon < Var.dtZiVon) 
											{
												Var.dtBZvon = Var.dtZiVon;
											}
											Var.nZinsTage = Int.PalTage(Var.dtBZvon, Var.dtBZbis, false);
											Var.nZiSumme = Var.nZiSumme + (Var.nZiRest * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100;

											Var.hFileFA.PutString("b: " + Int.SalDateToStrX(Var.dtBZvon) + "-" + Int.SalDateToStrX(Var.dtBZbis) + " = " + Int.PalStrNum(Var.nZinsTage, 4, 0) + " Tage * " + Int.PalStrNum(Var.nBZZins, 5, 1) + "% auf €" + Int.PalStrNum(Var.nZiRest, 
													8, 2) + " = € " + Int.PalStrNum((Var.nZiRest * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100, 8, 2));

										}

										Var.nFetchBZ = Var.hSqlBZ.FetchNext();
									}


									Var.nFetchZi = Var.hSqlZi.FetchNext();
								}
								Var.hSqlZi.Commit();

								Var.strAZ = "vorgerichtliche Zinsen bis " + Int.SalDateToStrX(Var.dtZiBis);
								// 07.01.08 Ä200
								// Call SqlImmed('INSERT INTO fa
								// (fauser, faproznr, fadatum, fatext, faunvzdm)
								// VALUES(:strBNUser, :nProzNr, :dtFADate,  :strAZ, :nZiSumme)')
								Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, fazinsdm)
VALUES(:strBNUser, :nProzNr, :dtFADate,  :strAZ, :nZiSumme)");

							}
							// ENDE F112
						}
						Var.hFileFA.Close();
						// MG
						Sys.hWndForm.SetStatusBarText("Mahngebühren");
						Var.nDMRechSum = 0;
						// 11.03.02
						// 19.10.15 Ä1261
						// Call SqlImmedSel('SELECT sum(rkdmmahn) INTO :nDMRechSum
						// FROM rk,prd WHERE prdnr= :nProzNr AND prdarztnr=rkarztnr AND prdhalternr=rkhalternr AND prdrechnr=rkrechnr')
						Int.SqlImmedSel(@"SELECT prdmmahn INTO :nDMRechSum
FROM pr WHERE prnr= :nProzNr");
						if (Var.nDMRechSum == SalNumber.Null) 
						{
							Int.SqlImmedSel(@"SELECT sum(rkdmmahn) INTO :nDMRechSum
FROM rk,prd WHERE prdnr= :nProzNr AND prdarztnr=rkarztnr AND prdhalternr=rkhalternr AND prdrechnr=rkrechnr AND rkdeaktiv IS NULL");
						}

						if (Var.dtFADate <= Var.dtdlgDatum) 
						{
							Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, faunvzdm)
VALUES(:strBNUser, :nProzNr, :dtFADate,  'Nebenforderung', :nDMRechSum)");
						}
						// 25.06.10 OTÄ433 Halterkonto
						// Halterkonto
						if (!(locals.bRZFetched)) 
						{
							Sys.hWndForm.SetStatusBarText("Halterkonto");
							Var.nDMRechSum = 0;
							// Call SqlImmedSel('SELECT sum(hbdm) INTO :nDMRechSum
							// FROM hb WHERE hbarztnr IN (:nFAArzt, :nFAArzt2) AND hbhalternr = :nFAHalter AND @LEFT(hbcode,2) = \'Zi\'')
							locals.strSelectFA = @"SELECT hbrznr, sum(hbdm) INTO :nFARZNr, :nDMRechSum
FROM hb WHERE hbarztnr IN (:nFAArzt, :nFAArzt2) AND hbhalternr = :nFAHalter AND @LEFT(hbcode,2) = 'Zi' AND hbbuchdat <= :dtdlgDatum GROUP BY 1";
							Int.SqlHandleExec(Var.hSqlZiZahl, locals.strSelectFA, "Fehler", ref Var.nCount);
							Var.nFetchZiZahl = Var.hSqlZiZahl.FetchNext();
							while (Var.nFetchZiZahl != Sys.FETCH_EOF) 
							{
								Var.nDMRechSum = Var.nDMRechSum * -1;
								Var.strDummy = "Zinsen aus Ratenzahlervereinbarung Nr." + Var.nFARZNr.ToString(0);
								Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, faunvzdm)
VALUES(:strBNUser, :nProzNr, :dtdlgDatum,  :strDummy, :nDMRechSum)");
								Var.nFetchZiZahl = Var.hSqlZiZahl.FetchNext();
							}
							locals.bRZFetched = true;
						}
						// AK, MB (unverzinslich)
						Sys.hWndForm.SetStatusBarText("unverz. Kosten");
						// Call SqlImmed('INSERT INTO fa
						// (faproznr, fadatum, fatext, faunvzdm)
						// SELECT akproznr, akdatum, \'Nebenforderung\', ' || PalStrNumDecPoint(nDMa+nDMc,9,2) || '
						// FROM ak WHERE akproznr = :frmRgSuchen.nProzNr AND aktyp=\'MB\' AND aktypdetail =\'MB\'')
						// AK, MB (verzinslich)
						// 14.02.02 lt. Fr. Seil und Fr. Kollay statt 4 jetzt 8% für Kosten
						Sys.hWndForm.SetStatusBarText("verz. Kosten");
						// 12.03.02
						if (Var.nDMb == SalNumber.Null) 
						{
							Var.nDMb = 0;
						}
						if (Var.nDMb != 0) 
						{
							Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, fazinsko, fadmko)
SELECT '" + Var.strBNUser + "\', akproznr, akdatum, aktypdetail || \'-Kosten\', 4, " + Int.PalStrNumDecPoint(Var.nDMb, 9, 2) + @"
FROM ak WHERE akproznr = :nProzNr AND aktyp='MB' AND aktypdetail ='MB' AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL");

						}
						// 24.02.05
						if (Var.nDMa + Var.nDMc != 0) 
						{
							// 18.10.07 F285
							if (Var.nProzNr < 12003) 
							{
								Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, faunvzdm)
SELECT '" + Var.strBNUser + "\', akproznr, akdatum, aktypdetail || \'-Kosten\', " + Int.PalStrNumDecPoint(Var.nDMa + Var.nDMc, 9, 2) + @"
FROM ak WHERE akproznr = :nProzNr AND aktyp='MB' AND aktypdetail ='MB' AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL");
							}
							else
							{
								Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, faunvzdm)
SELECT '" + Var.strBNUser + @"', akproznr, akdatum, aktypdetail || '-Kosten', akdm
FROM ak WHERE akproznr = :nProzNr AND aktyp='MB' AND aktypdetail ='MB' AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL");
							}
						}
						Var.nRestVZ = Var.nRestVZ + Var.nDMb;
						// 01.11.07 F292
						// Call SqlImmed('INSERT INTO fa
						// (fauser, faproznr, fadatum, fatext, fazinsko, fadmko)
						// SELECT \'' || strBNUser || '\', akproznr, akdatum, aktypdetail || \'-Kosten\', 4, akdm
						// FROM ak WHERE akproznr = :nProzNr AND aktyp=\'MB\' AND aktypdetail =\'MB-AG\' AND akdatum <= :dtdlgDatum')
						Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, fazinsko, fadmko)
SELECT '" + Var.strBNUser + @"', akproznr, @DATEVALUE(akdatum), aktypdetail || '-Kosten', 4, SUM(akdm)
FROM ak WHERE akproznr = :nProzNr AND aktyp='MB' AND aktypdetail ='MB-AG' AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL GROUP BY 1,2,3,4,5");

						Int.SqlImmedSel(@"SELECT sum(akdm) INTO :nDMb
FROM ak WHERE akproznr = :nProzNr AND aktyp='MB' AND aktypdetail ='MB-AG' AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL");
						Var.nRestVZ = Var.nRestVZ + Var.nDMb;

						// AK, VB (verzinslich)
						Sys.hWndForm.SetStatusBarText("verz. Kosten");
						Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, fazinsko, fadmko)
SELECT '" + Var.strBNUser + @"', akproznr, akdatum, aktypdetail || '-Kosten', 4, akdm
FROM ak WHERE akproznr = :nProzNr AND aktyp='MB' AND aktypdetail = 'VB' AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL");
						// AK, Rest (unverzinslich)
						Sys.hWndForm.SetStatusBarText("unverz. Kosten");
						Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, faunvzdm)
SELECT '" + Var.strBNUser + @"', akproznr, akdatum, aktypdetail || '-Kosten', akdm
FROM ak WHERE akproznr = :nProzNr AND aktyp='MB' AND aktypdetail  NOT IN ('MB', 'MB-AG', 'VB') AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL");
						Var.nRestVZ = Var.nRestVZ + Var.nDMb;
						// ZA
						Sys.hWndForm.SetStatusBarText("Zahlungen");
						// 20.08.14 F2120
						Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, fadmhf)
SELECT '" + Var.strBNUser + @"', zaproznr, zabuchdat+0.1, 'Zahlung', sum(zadm*-1)
FROM za WHERE zaproznr = :nProzNr  AND zabuchdat <= :dtdlgDatum AND zadeaktiv IS NULL GROUP BY 1,2,3");
						// Call SqlImmed('INSERT INTO fa
						// (fauser, faproznr, fadatum, fatext, fadmhf)
						// SELECT \'' || strBNUser || '\', zaproznr, zabuchdat+0.1, \'Zahlung\', sum(zadm*-1)
						// FROM za WHERE zaproznr = :nProzNr  AND zabuchdat <= :dtdlgDatum AND zarechnr<999990 GROUP BY 1,2,3')
						// Call SqlImmed('INSERT INTO fa
						// (fauser, faproznr, fadatum, fatext, fadmko)
						// SELECT \'' || strBNUser || '\', zaproznr, zabuchdat+0.1, \'Zahlung\', sum(zadm*-1)
						// FROM za WHERE zaproznr = :nProzNr  AND zabuchdat <= :dtdlgDatum AND zarechnr>=999990 GROUP BY 1,2,3')
						// Call SqlImmedSel( 'SELECT SUM(fadmhf) INTO :nDummyHaben FROM fa WHERE fauser = :strBNUser' )
						// While nDummyHaben < 0
						// Call SqlImmedSel( 'SELECT ROWID, fadmhf, fadatum INTO :strDummy, :nDMRech, :dtRDDatum FROM fa WHERE fauser = :strBNUser AND fadmhf < 0 ORDER BY fadatum DESC' )
						// Set nDMRech = nDMRech - nDummyHaben
						// If nDMRech > 0
						// Set nDummySoll = nDummyHaben + nDMRech
						// Set nDMRech = 0
						// Else
						// Set nDummySoll = nDummyHaben
						// Call SqlImmed( 'UPDATE fa SET fadmhf = :nDMRech WHERE ROWID = :strDummy' )
						// Call SqlImmed( 'INSERT INTO fa (fauser, faproznr, fadatum, fatext, fadmko)
						// VALUES(:strBNUser, :nProzNr, :dtRDDatum, \'Zahlung\', :nDummySoll)')
						// Set nDummyHaben = nDummyHaben - nDummySoll
						// 20.08.14 F2120
						// Call SqlImmedSel( 'SELECT SUM(fadmko) INTO :nDummyHaben FROM fa WHERE fauser = :strBNUser' )
						// While nDummyHaben < 0
						// Call SqlImmedSel( 'SELECT ROWID, fadmko, fadatum INTO :strDummy, :nDMRech, :dtRDDatum FROM fa WHERE fauser = :strBNUser AND fadmko < 0 ORDER BY fadatum DESC' )
						// Set nDMRech = nDMRech - nDummyHaben
						// If nDMRech > 0
						// Set nDummySoll = nDummyHaben + nDMRech
						// Set nDMRech = 0
						// Else
						// Set nDummySoll = nDummyHaben
						// Call SqlImmed( 'UPDATE fa SET fadmko = :nDMRech WHERE ROWID = :strDummy' )
						// Call SqlImmed( 'INSERT INTO fa (fauser, faproznr, fadatum, fatext, faunvzdm)
						// VALUES(:strBNUser, :nProzNr, :dtRDDatum, \'Zahlung\', :nDummySoll)')
						// Set nDummyHaben = nDummyHaben - nDummySoll

						locals.nFetchRep = locals.hSqlFA.FetchNext();
					}
					// Berechnung SEIT
					// 03.04.08 F358
					if (Var.nProzNr > 0) 
					{
						Sys.hWndForm.SetStatusBarText("Hole Startdaten für Zinsberechnung");
						locals.hSqlFA.PrepareAndExecute(@"SELECT DISTINCT faproznr
INTO :nProzNr
FROM fa WHERE fauser = :strBNUser");
						locals.nFetchRep = locals.hSqlFA.FetchNext();
						while (locals.nFetchRep != Sys.FETCH_EOF) 
						{
							// Ermittlung der Zinsen HF
							Var.dtSeit = SalDateTime.Null;
							Int.SqlImmedSel(@"SELECT akzust INTO :dtSeit
FROM ak  WHERE akproznr = :nProzNr AND aktyp='MB' AND (aktypdetail ='MB' OR aktypdetail ='MB-AG') AND akdeaktiv IS NULL ");
							// 20.11.07 F305
							// Call SqlImmed('UPDATE fa SET faseitko = :dtSeit
							// WHERE faproznr = :nProzNr AND fazinshf>=0')
							// 29.11.07
							if (Var.dtSeit != SalDateTime.Null) 
							{
								Var.dtSeit = Int.PalAddDay(Var.dtSeit, 1);
							}
							// Set dtSeit = PalAddDay(dtSeit,1)

							Int.SqlImmed(@"UPDATE fa SET faseitko = :dtSeit
WHERE faproznr = :nProzNr AND fazinshf IS NOT NULL");

							// Ermittlung der Zinsen MB-Kosten
							Var.dtSeit = SalDateTime.Null;
							Int.SqlImmedSel(@"SELECT akzust INTO :dtSeit
FROM ak  WHERE akproznr = :nProzNr AND aktyp='MB' AND aktypdetail ='VB' AND akdeaktiv IS NULL ");
							Int.SqlImmed(@"UPDATE fa SET faseitko = :dtSeit
WHERE faproznr = :nProzNr AND fazinsko>=0");

							locals.nFetchRep = locals.hSqlFA.FetchNext();
						}
						// Haupt-Berechnung
						Sys.hWndForm.SetStatusBarText("Berechne Zinsen");
						Var.nProzNrAlt = 0;
						locals.hSqlFA.PrepareAndExecute(@"SELECT faproznr, @DATEVALUE(fadatum), fazinshf, fadmhf, fazinsko, fadmko, faseitko, faunvzdm, fazinsdm
INTO :nProzNr, :dtFADate, :nZinsen, :nDMRech,
:nZinsKo, :nDMKo, :dtSeit, :nUnvzDM, :nZinsDM
FROM fa WHERE fauser = :strBNUser  ORDER BY faproznr, fadatum");
						locals.nFetchRep = locals.hSqlFA.FetchNext();
						while (locals.nFetchRep != Sys.FETCH_EOF) 
						{

							if (Var.nDMRech == SalNumber.Null) 
							{
								Var.nDMRech = 0;
							}
							if (Var.nZinsen == SalNumber.Null) 
							{
								Var.nZinsen = 0;
							}
							if (Var.nZinsKo == SalNumber.Null) 
							{
								Var.nZinsKo = 0;
							}
							if (Var.nDMKo == SalNumber.Null) 
							{
								Var.nDMKo = 0;
							}
							if (Var.nUnvzDM == SalNumber.Null) 
							{
								Var.nUnvzDM = 0;
							}
							if (Var.nZinsDM == SalNumber.Null) 
							{
								Var.nZinsDM = 0;
							}

							if (Var.nProzNr != Var.nProzNrAlt) 
							{
								if (Var.nProzNrAlt != 0) 
								{
									// 20.11.07 F305 nZinsHF enthielt den Wert -5 (5% üBZ) und wurde nicht berechnet. SalNumberAbs hinzugefügt
									if (Var.nZiHF.Abs() > 0 && Var.dtHFSeitAlt != SalDateTime.Null) 
									{
										Var.dtFADate = Var.dtdlgDatum;
										// #25
										// 07.01.08 OTF138 nProzNr -> nProzNrAlt
										if (Var.nProzNrAlt >= 12003)  // EDA-Verfahren
										{
											Var.hSqlBZ.PrepareAndExecute(@"SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
FROM bz ORDER BY bzvon, bzbis");
											Var.nFetchBZ = Var.hSqlBZ.FetchNext();
											// Set dtBZvon = dtHFSeitAlt
											while (Var.nFetchBZ != Sys.FETCH_EOF) 
											{
												if (Var.dtFADate < Var.dtBZvon) 
												{
												}
												else if (Var.dtBZbis < Var.dtHFSeitAlt) 
												{
												}
												else
												{
													if (Var.dtFADate <= Var.dtBZbis) 
													{
														// 24.08.06 Ä17
														// Set dtBZbis = dtFADate
														Var.dtBZbis = Int.PalAddDay(Var.dtFADate, -1);
													}
													if (Var.dtBZvon < Var.dtHFSeitAlt) 
													{
														// 24.08.06 Ä17
														// Set dtBZvon = PalAddDay( dtHFSeitAlt, 1)
														Var.dtBZvon = Var.dtHFSeitAlt;
														// 26.01.07 F112 auskommentiert, da Zinsen aus Vorjahren fehlten: 17.01.08 F326
														// If dtBZvon < dtZiBis
														// Set dtBZvon = PalAddDay(dtZiBis,1)

													}
													Var.nZinsTage = Int.PalTage(Var.dtBZvon, Var.dtBZbis, false);
													// 24.08.06 Ä17
													Var.nDMZins = (Var.nRestHF * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100;
													// Set dtBZvon = PalAddDay( dtBZvon, 1)
													Var.strAZ = Int.PalStrNum(Var.nBZZins, 5, 2) + "% " + Int.SalDateToStrX(Var.dtBZvon) + "-" + Int.SalDateToStrX(Var.dtBZbis) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2);
													if (Var.nDMZins > 0) 
													{
														Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
VALUES(:strBNUser, :nProzNrAlt, :dtFADate,  :strAZ, :nDMZins)");
													}
												}

												Var.nFetchBZ = Var.hSqlBZ.FetchNext();
											}
											Var.dtHFSeitAlt = Var.dtFADate;
										}
										else
										{
											Var.ndlgDM = SalNumber.Null;
											if (1 == dlgDM.ModalDialog(Sys.hWndForm, "Bitte geben Sie für " + Int.SalDateToStrX(Var.dtHFSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2) + " den Zinssatz ein  (%) :", ref Var.nZiHF)) 
											{
											}
											while (Var.ndlgDM == SalNumber.Null) 
											{
											}
											if (Var.nZiHF > 0) 
											{
												Var.strAZ = Int.PalStrNum(Var.nZiHF, 5, 2) + "% " + Int.SalDateToStrX(Var.dtHFSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2);
												Var.nZinsTage = Int.PalTage(Var.dtHFSeitAlt, Var.dtFADate, false);
												// 24.08.06 Ä17
												Var.nDMZins = (Var.nRestHF * (Var.nZinsTage / 365) * Var.nZiHF).Round() / 100;
												if (Var.nDMZins > 0) 
												{
													Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
VALUES(:strBNUser, :nProzNrAlt, :dtFADate,  :strAZ, :nDMZins)");
												}
											}
										}
									}
									if (Var.nZiKo > 0 && Var.dtKoSeitAlt != SalDateTime.Null) 
									{
										Var.dtFADate = Var.dtdlgDatum;
										// #25
										// 07.01.08 OTF138 nProzNr -> nProzNrAlt
										if (Var.nProzNrAlt >= 12003)  // EDA-Verfahren
										{
											Var.hSqlBZ.PrepareAndExecute(@"SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
FROM bz  ORDER BY bzvon, bzbis");
											Var.nFetchBZ = Var.hSqlBZ.FetchNext();
											// Set dtBZvon = dtKoSeitAlt
											while (Var.nFetchBZ != Sys.FETCH_EOF) 
											{
												if (Var.dtFADate < Var.dtBZvon) 
												{
												}
												else if (Var.dtBZbis < Var.dtKoSeitAlt) 
												{
												}
												else
												{
													if (Var.dtFADate <= Var.dtBZbis) 
													{
														// 24.08.06 Ä17
														// Set dtBZbis = dtFADate
														Var.dtBZbis = Int.PalAddDay(Var.dtFADate, -1);
													}
													if (Var.dtBZvon < Var.dtKoSeitAlt) 
													{
														// 24.08.06 Ä17
														// Set dtBZvon = PalAddDay( dtHFSeitAlt, 1)
														Var.dtBZvon = Var.dtKoSeitAlt;
													}
													Var.nZinsTage = Int.PalTage(Var.dtBZvon, Var.dtBZbis, false);
													// 24.08.06 Ä17
													// 16.01.08 F326
													// Set nDMZins = SalNumberRound( nRestHF * (nZinsTage / 365) * nBZZins) / 100
													Var.nDMZins = (Var.nRestVZ * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100;

													// Set dtBZvon = PalAddDay( dtBZvon, 1)
													Var.strAZ = Int.PalStrNum(Var.nBZZins, 5, 2) + "% " + Int.SalDateToStrX(Var.dtBZvon) + "-" + Int.SalDateToStrX(Var.dtBZbis) + " auf Kosten €" + Int.PalStrNum(Var.nRestVZ, 7, 2);
													if (Var.nDMZins > 0) 
													{
														Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
VALUES(:strBNUser, :nProzNrAlt, :dtFADate,  :strAZ, :nDMZins)");
													}
												}

												Var.nFetchBZ = Var.hSqlBZ.FetchNext();
											}
											// 26.04.10 OTF432 + If dtFADate > dtKoSeitAlt
											if (Var.dtFADate > Var.dtKoSeitAlt) 
											{
												Var.dtKoSeitAlt = Var.dtFADate;
											}

										}
										else
										{
											Var.ndlgDM = SalNumber.Null;
											if (1 == dlgDM.ModalDialog(Sys.hWndForm, "Bitte geben Sie für " + Int.SalDateToStrX(Var.dtKoSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf Kosten €" + Int.PalStrNum(Var.nRestVZ, 7, 2) + " den Zinssatz ein  (%) :", ref Var.nZiKo)) 
											{
											}
											while (Var.ndlgDM == SalNumber.Null) 
											{
											}
											if (Var.nZiKo > 0) 
											{
												Var.strAZ = Int.PalStrNum(Var.nZiKo, 5, 2) + "% " + Int.SalDateToStrX(Var.dtKoSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf Kosten €" + Int.PalStrNum(Var.nRestVZ, 7, 2);
												Var.nZinsTage = Int.PalTage(Var.dtKoSeitAlt, Var.dtFADate, false);
												// 24.08.06 Ä17
												Var.nDMZins = (Var.nRestVZ * (Var.nZinsTage / 365) * Var.nZiKo).Round() / 100;
												if (Var.nDMZins > 0) 
												{
													Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
VALUES(:strBNUser, :nProzNrAlt, :dtFADate,  :strAZ, :nDMZins)");
												}
											}
										}
									}
								}
								Var.nRestHF = 0;
								Var.nRestVZ = 0;
								Var.nRestUVZ = 0;
								Var.dtKoSeitAlt = SalDateTime.Null;
								Var.dtHFSeitAlt = SalDateTime.Null;
							}

							if (Var.nDMRech > 0) 
							{
								Var.nRestHF = Var.nRestHF + Var.nDMRech;
								Var.dtHFSeitAlt = Var.dtSeit;
								Var.nZiHF = Var.nZinsen;
							}
							else if (Var.nDMKo != 0)  // 16.07.10 F714 >0 -->> != 0
							{
								Var.nRestVZ = Var.nRestVZ + Var.nDMKo;
								Var.dtKoSeitAlt = Var.dtSeit;
								Var.nZiKo = Var.nZinsKo;
							}
							else if (Var.nUnvzDM != 0)  // 16.07.10 F714 >0 -->> != 0
							{
								Var.nRestUVZ = Var.nRestUVZ + Var.nUnvzDM;
							}
							else if (Var.nDMRech < 0)  // Zahlung
							{
								if (Var.nRestHF > 0)  // HF noch offen
								{
									if (Var.nDMRech * -1 > Var.nRestHF) 
									{
										Var.nZahlDM = Var.nRestHF * -1;
									}
									else
									{
										Var.nZahlDM = Var.nDMRech;
									}
									// 25.02.02 aus + ein - gemacht
									Var.nDMRech = Var.nDMRech - Var.nZahlDM;
									// #25
									// 07.01.08 OTF138 nProzNr -> nProzNrAlt
									if (Var.nProzNrAlt >= 12003)  // EDA-Verfahren
									{
										if (Var.dtHFSeitAlt != SalDateTime.Null) 
										{
											Var.hSqlBZ.PrepareAndExecute(@"SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
FROM bz ORDER BY bzvon, bzbis");
											Var.nFetchBZ = Var.hSqlBZ.FetchNext();
											// Set dtBZvon = dtHFSeitAlt
											while (Var.nFetchBZ != Sys.FETCH_EOF) 
											{
												if (Var.dtFADate < Var.dtBZvon) 
												{
												}
												else if (Var.dtBZbis < Var.dtHFSeitAlt) 
												{
												}
												else
												{
													if (Var.dtFADate <= Var.dtBZbis) 
													{
														// 24.08.06 Ä17
														Var.dtBZbis = Var.dtFADate;
														Var.dtBZbis = Int.PalAddDay(Var.dtFADate, -1);
													}
													if (Var.dtBZvon < Var.dtHFSeitAlt) 
													{
														// 24.08.06 Ä17
														// Set dtBZvon = PalAddDay( dtHFSeitAlt, 1)
														Var.dtBZvon = Var.dtHFSeitAlt;
														// 26.01.07 F112 auskommentiert, da Zinsen aus Vorjahren fehlten: 17.01.08 F326
														// If dtBZvon < dtZiBis
														// Set dtBZvon = PalAddDay(dtZiBis,1)

													}
													Var.nZinsTage = Int.PalTage(Var.dtBZvon, Var.dtBZbis, false);
													// 24.08.06 Ä17
													Var.nDMZins = (Var.nRestHF * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100;
													// Set dtBZvon = PalAddDay( dtBZvon, 1)
													Var.strAZ = Int.PalStrNum(Var.nBZZins, 5, 2) + "% " + Int.SalDateToStrX(Var.dtBZvon) + "-" + Int.SalDateToStrX(Var.dtBZbis) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2);
													if (Var.nDMZins > 0) 
													{
														Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
VALUES(:strBNUser, :nProzNr, :dtFADate,  :strAZ, :nDMZins)");
													}
												}

												Var.nFetchBZ = Var.hSqlBZ.FetchNext();
											}
										}
										Var.dtHFSeitAlt = Var.dtFADate;
									}
									else
									{
										if (Var.nZiHF > 0 && Var.dtHFSeitAlt != SalDateTime.Null) 
										{
											Var.ndlgDM = SalNumber.Null;
											if (1 == dlgDM.ModalDialog(Sys.hWndForm, "Bitte geben Sie für " + Int.SalDateToStrX(Var.dtHFSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2) + " den Zinssatz ein  (%) :", ref Var.nZiHF)) 
											{
											}
											while (Var.ndlgDM == SalNumber.Null) 
											{
											}
											if (Var.nZiHF > 0) 
											{
												Var.dtFADate = Var.dtFADate - 0.1m;
												Var.strAZ = Int.PalStrNum(Var.nZiHF, 5, 2) + "% " + Int.SalDateToStrX(Var.dtHFSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2);
												Var.nZinsTage = Int.PalTage(Var.dtHFSeitAlt, Var.dtFADate, false);
												// 24.08.06 Ä17
												Var.nDMZins = (Var.nRestHF * (Var.nZinsTage / 365) * Var.nZiHF).Round() / 100;
												if (Var.nDMZins > 0) 
												{
													Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
VALUES(:strBNUser, :nProzNr, :dtFADate,  :strAZ, :nDMZins)");
												}
											}
											Var.dtHFSeitAlt = Var.dtFADate;
										}
									}

									Var.nRestHF = Var.nRestHF + Var.nZahlDM;
								}
								if (Var.nRestVZ > 0)  // verz. Kosten noch offen
								{
									if (Var.nDMRech * -1 > Var.nRestVZ) 
									{
										Var.nZahlDM = Var.nRestVZ * -1;
									}
									else
									{
										Var.nZahlDM = Var.nDMRech;
									}
									// 25.02.02 aus + ein - gemacht
									Var.nDMRech = Var.nDMRech - Var.nZahlDM;
									// #25
									// 07.01.08 OTF138 nProzNr -> nProzNrAlt
									if (Var.nProzNrAlt >= 12003)  // EDA-Verfahren
									{
										if (Var.dtKoSeitAlt != SalDateTime.Null) 
										{
											Var.hSqlBZ.PrepareAndExecute(@"SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
FROM bz  ORDER BY bzvon, bzbis");
											Var.nFetchBZ = Var.hSqlBZ.FetchNext();
											// Set dtBZvon = dtKoSeitAlt
											while (Var.nFetchBZ != Sys.FETCH_EOF) 
											{
												if (Var.dtFADate < Var.dtBZvon) 
												{
												}
												else if (Var.dtBZbis < Var.dtKoSeitAlt) 
												{
												}
												else
												{
													// 26.04.10 OTF432
													if (Var.dtBZvon < Var.dtKoSeitAlt) 
													{
														Var.dtBZvon = Var.dtKoSeitAlt;
													}

													if (Var.dtFADate <= Var.dtBZbis) 
													{
														// 24.08.06 Ä17
														// Set dtBZbis = dtFADate
														Var.dtBZbis = Int.PalAddDay(Var.dtFADate, -1);
													}
													if (Var.dtBZvon < Var.dtKoSeitAlt) 
													{
														// 24.08.06 Ä17
														// Set dtBZvon = PalAddDay( dtKoSeitAlt, 1)
														Var.dtBZvon = Var.dtKoSeitAlt;
													}
													Var.nZinsTage = Int.PalTage(Var.dtBZvon, Var.dtBZbis, false);
													// 24.08.06 Ä17
													Var.nDMZins = (Var.nRestVZ * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100;
													// Set dtBZvon = PalAddDay( dtBZvon, 1)
													Var.strAZ = Int.PalStrNum(Var.nBZZins, 5, 2) + "% " + Int.SalDateToStrX(Var.dtBZvon) + "-" + Int.SalDateToStrX(Var.dtBZbis) + " auf Kosten €" + Int.PalStrNum(Var.nRestVZ, 7, 2);
													if (Var.nDMZins > 0) 
													{
														Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
VALUES(:strBNUser, :nProzNr, :dtFADate,  :strAZ, :nDMZins)");
													}
												}

												Var.nFetchBZ = Var.hSqlBZ.FetchNext();
											}
										}
										// 26.04.10 OTF432 + If dtFADate > dtKoSeitAlt
										if (Var.dtFADate > Var.dtKoSeitAlt) 
										{
											Var.dtKoSeitAlt = Var.dtFADate;
										}

									}
									else
									{
										if (Var.nZiKo > 0 && Var.dtKoSeitAlt != SalDateTime.Null) 
										{
											Var.ndlgDM = SalNumber.Null;
											if (1 == dlgDM.ModalDialog(Sys.hWndForm, "Bitte geben Sie für " + Int.SalDateToStrX(Var.dtKoSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf Kosten €" + Int.PalStrNum(Var.nRestVZ, 7, 2) + " den Zinssatz ein  (%) :", ref Var.nZiKo)) 
											{
											}
											while (Var.ndlgDM == SalNumber.Null) 
											{
											}
											if (Var.nZiKo > 0) 
											{
												Var.dtFADate = Var.dtFADate - 0.1m;
												Var.strAZ = Int.PalStrNum(Var.nZiKo, 5, 2) + "% " + Int.SalDateToStrX(Var.dtKoSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf Kosten €" + Int.PalStrNum(Var.nRestVZ, 7, 2);
												Var.nZinsTage = Int.PalTage(Var.dtKoSeitAlt, Var.dtFADate, false);
												// 24.08.06 Ä17
												Var.nDMZins = (Var.nRestVZ * (Var.nZinsTage / 365) * Var.nZiKo).Round() / 100;
												if (Var.nDMZins > 0) 
												{
													Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
VALUES(:strBNUser, :nProzNr, :dtFADate,  :strAZ, :nDMZins)");
												}
											}
											Var.dtKoSeitAlt = Var.dtFADate;
										}
									}

									Var.nRestVZ = Var.nRestVZ + Var.nZahlDM;
								}
								if (Var.nRestUVZ > 0)  // unverz. Kosten noch offen
								{
									if (Var.nDMRech * -1 > Var.nRestUVZ) 
									{
										Var.nZahlDM = Var.nRestUVZ * -1;
									}
									else
									{
										Var.nZahlDM = Var.nDMRech;
									}
									Var.nDMRech = Var.nDMRech + Var.nZahlDM;
									Var.nRestUVZ = Var.nRestUVZ + Var.nZahlDM;
								}
							}
							Var.nProzNrAlt = Var.nProzNr;

							locals.nFetchRep = locals.hSqlFA.FetchNext();
						}
						// 20.11.07 F305 nZinsHF enthielt den Wert -5 (5% üBZ) und wurde nicht berechnet. SalNumberAbs hinzugefügt
						if (Var.nZiHF.Abs() > 0 && Var.nRestHF > 0 && Var.dtHFSeitAlt != SalDateTime.Null) 
						{
							Var.dtFADate = Var.dtdlgDatum;
							// #25
							if (Var.nProzNr >= 12003)  // EDA-Verfahren
							{
								Var.hSqlBZ.PrepareAndExecute(@"SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
FROM bz ORDER BY bzvon, bzbis");
								Var.nFetchBZ = Var.hSqlBZ.FetchNext();
								// Set dtBZvon = dtHFSeitAlt
								while (Var.nFetchBZ != Sys.FETCH_EOF) 
								{
									if (Var.dtFADate < Var.dtBZvon) 
									{
									}
									else if (Var.dtBZbis < Var.dtHFSeitAlt) 
									{
									}
									else
									{
										if (Var.dtFADate <= Var.dtBZbis) 
										{
											// 18.01.08 F326 hier wurde bis aktuellem Datum, vorher nur bis Vortag berechnet.
											// Set dtBZbis = dtFADate
											Var.dtBZbis = Int.PalAddDay(Var.dtFADate, -1);

										}
										if (Var.dtBZvon < Var.dtHFSeitAlt) 
										{
											// 24.08.06 Ä17
											// Set dtBZvon = PalAddDay( dtHFSeitAlt,1)
											Var.dtBZvon = Var.dtHFSeitAlt;
											// 26.01.07 F112 auskommentiert, da Zinsen aus Vorjahren fehlten: 17.01.08 F326
											// If dtBZvon < dtZiBis
											// Set dtBZvon = PalAddDay(dtZiBis,1)

										}
										Var.nZinsTage = Int.PalTage(Var.dtBZvon, Var.dtBZbis, false);
										// 24.08.06 Ä17
										Var.nDMZins = (Var.nRestHF * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100;
										// Set dtBZvon = PalAddDay( dtBZvon, 1)
										Var.strAZ = Int.PalStrNum(Var.nBZZins, 5, 2) + "% " + Int.SalDateToStrX(Var.dtBZvon) + "-" + Int.SalDateToStrX(Var.dtBZbis) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2);
										if (Var.nDMZins > 0) 
										{
											Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
VALUES(:strBNUser, :nProzNr, :dtFADate,  :strAZ, :nDMZins)");
										}
									}

									Var.nFetchBZ = Var.hSqlBZ.FetchNext();
								}
							}
							else
							{
								Var.ndlgDM = SalNumber.Null;
								if (1 == dlgDM.ModalDialog(Sys.hWndForm, "Bitte geben Sie für " + Int.SalDateToStrX(Var.dtHFSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2) + " den Zinssatz ein  (%) :", ref Var.nZiHF)) 
								{
								}
								while (Var.ndlgDM == SalNumber.Null) 
								{
								}
								if (Var.nZiHF > 0) 
								{
									Var.strAZ = Int.PalStrNum(Var.nZiHF, 5, 2) + "% " + Int.SalDateToStrX(Var.dtHFSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2);
									Var.nZinsTage = Int.PalTage(Var.dtHFSeitAlt, Var.dtFADate, false);
									// 24.08.06 Ä17
									Var.nDMZins = (Var.nRestHF * (Var.nZinsTage / 365) * Var.nZiHF).Round() / 100;
									if (Var.nDMZins > 0) 
									{
										Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
VALUES(:strBNUser, :nProzNr, :dtFADate,  :strAZ, :nDMZins)");
									}
								}
							}
						}
						if (Var.nZiKo > 0 && Var.nRestVZ > 0 && Var.dtKoSeitAlt != SalDateTime.Null) 
						{
							Var.dtFADate = Var.dtdlgDatum;
							// #25
							if (Var.nProzNr >= 12003)  // EDA-Verfahren
							{
								Var.hSqlBZ.PrepareAndExecute(@"SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
FROM bz  ORDER BY bzvon, bzbis");
								Var.nFetchBZ = Var.hSqlBZ.FetchNext();
								// Set dtBZvon = dtKoSeitAlt
								while (Var.nFetchBZ != Sys.FETCH_EOF) 
								{
									// 26.04.10 OTF432
									if (Var.dtBZvon < Var.dtKoSeitAlt) 
									{
										Var.dtBZvon = Var.dtKoSeitAlt;
									}

									if (Var.dtFADate < Var.dtBZvon) 
									{
									}
									else if (Var.dtBZbis < Var.dtKoSeitAlt) 
									{
									}
									else
									{
										if (Var.dtFADate <= Var.dtBZbis) 
										{
											// 18.01.08 F326 hier wurde bis aktuellem Datum, vorher nur bis Vortag berechnet.
											// Set dtBZbis = dtFADate
											Var.dtBZbis = Int.PalAddDay(Var.dtFADate, -1);
										}
										if (Var.dtBZvon < Var.dtKoSeitAlt) 
										{
											// 24.08.06 Ä17
											// Set dtBZvon = PalAddDay( dtKoSeitAlt, 1)
											Var.dtBZvon = Var.dtKoSeitAlt;
										}
										Var.nZinsTage = Int.PalTage(Var.dtBZvon, Var.dtBZbis, false);
										// 24.08.06 Ä17
										Var.nDMZins = (Var.nRestVZ * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100;
										Var.strAZ = Int.PalStrNum(Var.nBZZins, 5, 2) + "% " + Int.SalDateToStrX(Var.dtBZvon) + "-" + Int.SalDateToStrX(Var.dtBZbis) + " auf Kosten €" + Int.PalStrNum(Var.nRestVZ, 7, 2);
										if (Var.nDMZins > 0) 
										{
											Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
VALUES(:strBNUser, :nProzNr, :dtFADate,  :strAZ, :nDMZins)");
										}
									}

									Var.nFetchBZ = Var.hSqlBZ.FetchNext();
								}
							}
							else
							{
								Var.ndlgDM = SalNumber.Null;
								if (1 == dlgDM.ModalDialog(Sys.hWndForm, "Bitte geben Sie für " + Int.SalDateToStrX(Var.dtKoSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf Kosten €" + Int.PalStrNum(Var.nRestVZ, 7, 2) + " den Zinssatz ein  (%) :", ref Var.nZiKo)) 
								{
								}
								while (Var.ndlgDM == SalNumber.Null) 
								{
								}
								if (Var.nZiKo > 0) 
								{
									Var.strAZ = Int.PalStrNum(Var.nZiKo, 5, 2) + "% " + Int.SalDateToStrX(Var.dtKoSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf Kosten €" + Int.PalStrNum(Var.nRestVZ, 7, 2);
									Var.nZinsTage = Int.PalTage(Var.dtKoSeitAlt, Var.dtFADate, false);
									// 24.08.06 Ä17
									Var.nDMZins = (Var.nRestVZ * (Var.nZinsTage / 365) * Var.nZiKo).Round() / 100;
									if (Var.nDMZins > 0) 
									{
										Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
VALUES(:strBNUser, :nProzNr, :dtFADate,  :strAZ, :nDMZins)");
									}
								}
							}
						}
						Sys.hWndForm.SetStatusBarText("");
						// 07.02.02
						if (Var.nFADM == SalNumber.Null) 
						{
							Var.nFADM = 0;
						}
						if (Var.nFADM != 0 || Var.strFAText != "") 
						{
							Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, faunvzdm)
VALUES(:strBNUser, :nFAPRNr, SYSDATETIME,  :strFAText, :nFADM)");
						}
					}

					// 27.06.07
					locals.hSqlFA.Disconnect();
					// 18.05.99
					// 30.08.07 F241 mal auskommentiert, um nachprüfen zu können, ob Berichts- oder Programmproblem
					// Call SqlImmed('DELETE FROM FA WHERE fauser = :strBNUser')
					// #25
					Var.hSqlBZ.Disconnect();
					// 26.01.07 F112
					Var.hSqlZi.Disconnect();
					Var.hSqlZiZahl.Disconnect();

					return true;
				}
				else
				{

					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// Liefert immer die Arzt-Nr. für Leistungen, also die hauptnummer
		/// </summary>
		/// <param name="nPArztNr"></param>
		/// <returns></returns>
		public static SalNumber PalCheckLarztnr(SalNumber nPArztNr)
		{
			#region Actions
			Var.nCheckLnr = nPArztNr;
			Int.SqlImmedSel("SELECT anr2 INTO :nCheckLnr FROM a WHERE akzpraxart=2 AND aarztnr=:nCheckLnr");
			// If nCheckLnr = 0 or nCheckLnr = NUMBER_Null
			// Set nCheckLnr = nPArztNr
			return Var.nCheckLnr;
			#endregion
		}
		
		/// <summary>
		/// wandelt Datum in String um
		/// </summary>
		/// <param name="dtDate"></param>
		/// <returns></returns>
		public static SalString PalDateToStrJJJJMMTThhmmsst(SalDateTime dtDate)
		{
			#region Local Variables
			SalString strDate = "";
			SalString strDatum = "";
			#endregion
			
			#region Actions
			strDate = dtDate.ToString();
			strDatum = strDate.Mid(0, 4) + strDate.Mid(5, 2) + strDate.Mid(8, 2) + strDate.Mid(11, 2) + strDate.Mid(14, 2) + strDate.Mid(17, 2) + strDate.Mid(20, 1);
			return strDatum;
			#endregion
		}
		
		/// <summary>
		/// Erstellt aus String eine Prüfziffer(String)
		/// </summary>
		/// <param name="strMZF"></param>
		/// <param name="nLen"></param>
		/// <returns></returns>
		public static SalString PalPruefZifferB1(SalString strMZF, SalNumber nLen)
		{
			#region Local Variables
			SalNumber nNr = 0;
			SalNumber nZahl = 0;
			// String: strPruef
			SalNumber nLfd = 0;
			SalNumber nFaktor = 0;
			SalString strDummy = "";
			SalNumber nDummy = 0;
			#endregion
			
			#region Actions
			nNr = 0;
			// Set nZahl = 10
			// Loop
			// If nNr > 11
			// Break
			// Set nZahl = nZahl + SalStrToNumber(SalStrMidX(strMZF,nNr,1))
			// Set nZahl = SalNumberMod(nZahl,10) * 2
			// If nZahl = 0
			// Set nZahl = 20
			// Set nZahl = SalNumberMod(nZahl,11)
			// Set nNr = nNr + 1
			// If nZahl = 1
			// Set nZahl = 11
			// Return SalNumberToStrX(11-nZahl,0)

			if (strMZF.Length < nLen) 
			{
				strMZF = ((SalString)"00000000000000000000000").Left(nLen - strMZF.Length) + strMZF;
			}
			nZahl = 0;
			nLfd = 1;
			while (true)
			{
				if (nNr >= nLen) 
				{
					break;
				}
				if (nLfd == 1) 
				{
					nFaktor = 7;
				}
				else if (nLfd == 2) 
				{
					nFaktor = 3;
				}
				else if (nLfd == 3) 
				{
					nFaktor = 1;
					nLfd = 0;
				}
				nDummy = strMZF.Mid(nLen - nNr - 1, 1).ToNumber();
				nZahl = nZahl + nDummy * nFaktor;
				nLfd = nLfd + 1;
				nNr = nNr + 1;
			}
			strDummy = nZahl.ToString(0).Right(1);
			nZahl = 10 - strDummy.ToNumber();
			if (nZahl == 10) 
			{
				nZahl = 0;
			}
			return nZahl.ToString(0);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strMatch"></param>
		/// <param name="strRemove"></param>
		/// <returns></returns>
		public static SalString PalStringStrip(SalString strMatch, SalString strRemove)
		{
			#region Actions
			while (strMatch.Scan(strRemove) != -1) 
			{
				strMatch = strMatch.Left(strMatch.Scan(strRemove)) + "" + strMatch.Mid(strMatch.Scan(strRemove) + 1, 255);
			}
			return strMatch.Trim();
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strGRIATable"></param>
		/// <param name="strGRIAWhere"></param>
		/// <param name="strVariante"></param>
		/// <param name="strGRIALLFeld"></param>
		/// <returns></returns>
		public static SalNumber PalGetRecordInArray(SalString strGRIATable, SalString strGRIAWhere, SalString strVariante, SalArray<SalString> strGRIALLFeld)
		{
			#region Local Variables
			SqlLocals.PalGetRecordInArrayLocals locals = new SqlLocals.PalGetRecordInArrayLocals();
			#endregion
			
			#region Actions
			using (new SqlContext(locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.strGRIATable = strGRIATable;
					locals.strGRIAWhere = strGRIAWhere;
					locals.strVariante = strVariante;
					locals.strGRIALLFeld = strGRIALLFeld;


					locals.lsGRIAPFields = "";
					locals.lsGRIAPValues = "";
					// Set strGRIATable = ''
					locals.strGRIAName = "";
					locals.strGRIAColType = "";
					locals.strGRIAColumnLabel = "";
					locals.strGRIATableLabel = "";
					// !
					locals.nGRIACountSaetze = 0;
					while (locals.nGRIACountSaetze < 500) 
					{
						if (locals.strVariante == "2") 
						{
							Var.nN2[locals.nGRIACountSaetze] = SalNumber.Null;
							Var.strS2[locals.nGRIACountSaetze] = "";
							Var.lsS2[locals.nGRIACountSaetze] = "";
							Var.dtD2[locals.nGRIACountSaetze] = SalDateTime.Null;
						}
						else
						{
							Var.nN[locals.nGRIACountSaetze] = SalNumber.Null;
							Var.strS[locals.nGRIACountSaetze] = "";
							Var.lsS[locals.nGRIACountSaetze] = "";
							Var.dtD[locals.nGRIACountSaetze] = SalDateTime.Null;
						}
						// Set strLLFeld[nCountSaetze] = ''
						locals.nGRIACountSaetze = locals.nGRIACountSaetze + 1;
					}
					// !
					locals.nGRIACountSaetze = 0;
					Int.SqlConnection(ref locals.hSqlSelect);
					//FC:FINAL:WORKAROUN: SYSTABLES, SYSCOLUMNS
//					locals.hSqlSelect.Prepare(@"SELECT systables.name || '.' || syscolumns.name, syscolumns.coltype, syscolumns.scale, systables.label, syscolumns.label
//INTO :strGRIAName, :strGRIAColType, :nGRIAScale, :strGRIATableLabel, :strGRIAColumnLabel
//FROM systables, syscolumns
//WHERE syscolumns.label <>'-' AND syscolumns.label NOT LIKE '%intern%'  AND systables.name = :strGRIATable
//AND systables.name = syscolumns.tbname
//ORDER BY systables.name, syscolumns.colno");
//					locals.hSqlSelect.Execute();
//					locals.nGRIAReturn = locals.hSqlSelect.FetchNext();
//					while (locals.nGRIAReturn != Sys.FETCH_EOF) 
//					{
//						locals.lsGRIAPFields = locals.lsGRIAPFields + ", " + locals.strGRIAName;
//						locals.strGRIALLFeld[locals.nGRIACountSaetze] = Int.PalStringStrip(locals.strGRIATableLabel, ".") + "." + Int.PalStringStrip(locals.strGRIAColumnLabel, ".");
//						if (locals.strGRIAColType == "CHAR") 
//						{
//							locals.lsGRIAPValues = locals.lsGRIAPValues + ", :strS" + locals.strVariante + "[" + locals.nGRIACountSaetze.ToString(0) + "]";
//							locals.strGRIALLFeld[locals.nGRIACountSaetze] = "S" + locals.strGRIALLFeld[locals.nGRIACountSaetze];
//						}
//						else if (locals.strGRIAColType == "VARCHAR" || locals.strGRIAColType == "LONGVAR") 
//						{
//							locals.lsGRIAPValues = locals.lsGRIAPValues + ", :lsS" + locals.strVariante + "[" + locals.nGRIACountSaetze.ToString(0) + "]";
//							locals.strGRIALLFeld[locals.nGRIACountSaetze] = "L" + locals.strGRIALLFeld[locals.nGRIACountSaetze];
//						}
//						else if (locals.strGRIAColType == "DATE" || locals.strGRIAColType == "TIME" || locals.strGRIAColType == "TIMESTMP") 
//						{
//							locals.lsGRIAPValues = locals.lsGRIAPValues + ", :dtD" + locals.strVariante + "[" + locals.nGRIACountSaetze.ToString(0) + "]";
//							locals.strGRIALLFeld[locals.nGRIACountSaetze] = "D" + locals.strGRIALLFeld[locals.nGRIACountSaetze];
//						}
//						else if (locals.strGRIAColType == "DECIMAL" || locals.strGRIAColType == "FLOAT" || locals.strGRIAColType == "INTEGER" || locals.strGRIAColType == "SMALLINT") 
//						{
//							locals.lsGRIAPValues = locals.lsGRIAPValues + ", :nN" + locals.strVariante + "[" + locals.nGRIACountSaetze.ToString(0) + "]";
//							locals.strGRIALLFeld[locals.nGRIACountSaetze] = "N" + Int.PalStrNum(locals.nGRIAScale, 2, 0) + locals.strGRIALLFeld[locals.nGRIACountSaetze];
//						}
//						locals.nGRIACountSaetze = locals.nGRIACountSaetze + 1;
//						locals.nGRIAReturn = locals.hSqlSelect.FetchNext();
//					}
					locals.hSqlSelect.Disconnect();
					//FC:FINAL:WORKAROUND Ersetzung Systables, Syscolumns
					var sysolumns = Var.SYSCOLUMNS.Where(c => c.TBName == strGRIATable && c.Label != "-" && !c.Label.Contains("INTERN")).OrderBy(c => c.Colno).ToList();
					foreach(var column in sysolumns)
                    {
						locals.strGRIAName = column.TBName + "." + column.Name;
						locals.strGRIAColType = column.Coltype;
						locals.nGRIAScale = column.Scale;
						locals.strGRIAColumnLabel = column.Label;
						locals.strGRIATableLabel = Var.SYSTABLES.Where(t => t.Name == column.TBName).FirstOrDefault().Label;

						locals.lsGRIAPFields = locals.lsGRIAPFields + ", " + locals.strGRIAName;
						locals.strGRIALLFeld[locals.nGRIACountSaetze] = Int.PalStringStrip(locals.strGRIATableLabel, ".") + "." + Int.PalStringStrip(locals.strGRIAColumnLabel, ".");
						if (locals.strGRIAColType == "CHAR")
						{
							locals.lsGRIAPValues = locals.lsGRIAPValues + ", :strS" + locals.strVariante + "[" + locals.nGRIACountSaetze.ToString(0) + "]";
							locals.strGRIALLFeld[locals.nGRIACountSaetze] = "S" + locals.strGRIALLFeld[locals.nGRIACountSaetze];
						}
						else if (locals.strGRIAColType == "VARCHAR" || locals.strGRIAColType == "LONGVAR")
						{
							locals.lsGRIAPValues = locals.lsGRIAPValues + ", :lsS" + locals.strVariante + "[" + locals.nGRIACountSaetze.ToString(0) + "]";
							locals.strGRIALLFeld[locals.nGRIACountSaetze] = "L" + locals.strGRIALLFeld[locals.nGRIACountSaetze];
						}
						else if (locals.strGRIAColType == "DATE" || locals.strGRIAColType == "TIME" || locals.strGRIAColType == "TIMESTMP")
						{
							locals.lsGRIAPValues = locals.lsGRIAPValues + ", :dtD" + locals.strVariante + "[" + locals.nGRIACountSaetze.ToString(0) + "]";
							locals.strGRIALLFeld[locals.nGRIACountSaetze] = "D" + locals.strGRIALLFeld[locals.nGRIACountSaetze];
						}
						else if (locals.strGRIAColType == "DECIMAL" || locals.strGRIAColType == "FLOAT" || locals.strGRIAColType == "INTEGER" || locals.strGRIAColType == "SMALLINT")
						{
							locals.lsGRIAPValues = locals.lsGRIAPValues + ", :nN" + locals.strVariante + "[" + locals.nGRIACountSaetze.ToString(0) + "]";
							locals.strGRIALLFeld[locals.nGRIACountSaetze] = "N" + Int.PalStrNum(locals.nGRIAScale, 2, 0) + locals.strGRIALLFeld[locals.nGRIACountSaetze];
						}
						locals.nGRIACountSaetze = locals.nGRIACountSaetze + 1;
					}

					locals.lsGRIAPFields = locals.lsGRIAPFields.Mid(1, 32000);
					locals.lsGRIAPValues = locals.lsGRIAPValues.Mid(1, 32000);
					// SELECT
					locals.strGRIAPSelect = "SELECT " + locals.lsGRIAPFields + " INTO " + locals.lsGRIAPValues + " FROM " + locals.strGRIATable + " " + locals.strGRIAWhere;
					Int.SqlImmedSel(locals.strGRIAPSelect);

					return 0;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					strGRIALLFeld = locals.strGRIALLFeld;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public static SalString PalCompareRecordsInArray()
		{
			#region Local Variables
			// Number: nN2[500]
			// String: strS2[500]
			// Long String: lsS2[500]
			// Date/Time: dtD2[500]
			// String: strLLFeld[500]
			SalNumber nCount = 0;
			SalString lsLog = "";
			// 07.08.19 F4528
			SalString str1 = "";
			SalString str2 = "";
			// Long String: frmMain.ml1
			#endregion
			
			#region Actions
			nCount = 0;
			App.frmMain.ml1.Text = "";
			while (nCount < 500) 
			{
				if (Var.nN[nCount] != Var.nN2[nCount]) 
				{
					// 07.08.19 F4528
					Int.PalPrepareRecordsinArray(nCount, "N", ref str1, ref str2);

					App.frmMain.ml1.Text = App.frmMain.ml1.Text + Var.strLLFeld[nCount].Mid(3, 255);
					App.frmMain.ml1.Text = App.frmMain.ml1.Text + " geändert von " + str1;
					App.frmMain.ml1.Text = App.frmMain.ml1.Text + " in " + str2 + @"
";
				}
				else if (Var.strS[nCount] != Var.strS2[nCount]) 
				{
					// 07.08.19 F4528
					Int.PalPrepareRecordsinArray(nCount, "S", ref str1, ref str2);

					App.frmMain.ml1.Text = App.frmMain.ml1.Text + Var.strLLFeld[nCount].Mid(1, 255) + " geändert von " + str1 + " in " + str2 + @"
";
				}
				else if (Var.lsS[nCount] != Var.lsS2[nCount]) 
				{
					// 07.08.19 F4528
					Int.PalPrepareRecordsinArray(nCount, "LS", ref str1, ref str2);

					App.frmMain.ml1.Text = App.frmMain.ml1.Text + Var.strLLFeld[nCount].Mid(1, 255);
					App.frmMain.ml1.Text = App.frmMain.ml1.Text + " geändert von " + str1;
					App.frmMain.ml1.Text = App.frmMain.ml1.Text + " in ";
					App.frmMain.ml1.Text = App.frmMain.ml1.Text + str2;
					App.frmMain.ml1.Text = App.frmMain.ml1.Text + @"
";
				}
				else if (Var.dtD[nCount] != Var.dtD2[nCount]) 
				{
					// 07.08.19 F4528
					Int.PalPrepareRecordsinArray(nCount, "D", ref str1, ref str2);

					App.frmMain.ml1.Text = App.frmMain.ml1.Text + Var.strLLFeld[nCount].Mid(1, 255);
					App.frmMain.ml1.Text = App.frmMain.ml1.Text + " geändert von " + str1;
					App.frmMain.ml1.Text = App.frmMain.ml1.Text + " in " + str2 + @"
";
				}
				nCount = nCount + 1;
			}
			return App.frmMain.ml1.Text;
			#endregion
		}
		
		/// <summary>
		/// Schreibe in AKTIONEN
		/// </summary>
		/// <param name="nArztX"></param>
		/// <param name="nHalterX"></param>
		/// <param name="nRZX"></param>
		/// <param name="strTyp"></param>
		/// <param name="strTypDetail"></param>
		/// <param name="nAnzahl"></param>
		/// <param name="nProz"></param>
		/// <param name="nDM"></param>
		/// <param name="nRechSumm"></param>
		/// <param name="nProzNr"></param>
		/// <param name="nDauer"></param>
		/// <returns></returns>
		public static SalNumber PalAktionRZ(SalNumber nArztX, SalNumber nHalterX, SalNumber nRZX, SalString strTyp, SalString strTypDetail, SalNumber nAnzahl, SalNumber nProz, SalNumber nDM, SalNumber nRechSumm, SalNumber nProzNr, SalNumber nDauer)
		{
			#region Actions
			Var.nAkArztX = nArztX;
			Var.nAkHalterX = nHalterX;
			Var.nAkRechX = nRZX;
			Var.strAkTyp = strTyp.Left(2);
			Var.strAkTypDetail = strTypDetail.Left(5);
			Var.nAkAnzahl = nAnzahl;
			Var.nAkProz = nProz;
			Var.nAkDM = nDM;
			Var.nAkRechSumm = nRechSumm;
			Var.nAkProzNr = nProzNr;
			Var.nAkDauer = nDauer;
			// 09.09.08 A278 MK + akzeichen
			Int.SqlImmedX(@"INSERT INTO ak
(AKARZTNR, AKHALTERNR, AKRZNR, AKDATUM, AKTYP,
AKTYPDETAIL, AKANZAHL, AKPROZGEB, AKDM, AKRECHSUMM, AKPROZNR, AKDAUER, AKZEICHEN)
VALUES(:nAkArztX, :nAkHalterX, :nAkRechX, SYSDATETIME,  :strAkTyp, :strAkTypDetail, :nAkAnzahl, :nAkProz, :nAkDM, :nAkRechSumm, :nAkProzNr, :nAkDauer, :strBNZei)");

			return 0;
			#endregion
		}
		
		/// <summary>
		/// für Rechnungen TVN -> TA
		/// </summary>
		/// <param name="nPArztNr"></param>
		/// <returns></returns>
		public static SalNumber PalCheckAuslMwSt(SalNumber nPArztNr)
		{
			#region Actions
			Var.strCheckLand = "";
			Var.nCheckLnr = nPArztNr;
			if (Int.SqlImmedSel("SELECT aland INTO :strCheckLand FROM a WHERE aarztnr=:nCheckLnr")) 
			{
			}
			if (Var.strCheckLand == "" || Var.strCheckLand == "DE") 
			{
				Var.nCheckLnr = Var.nMwStVoll;
			}
			else
			{
				Var.nCheckLnr = 0;
			}
			return Var.nCheckLnr;
			#endregion
		}
		
		/// <summary>
		/// für Rechnungen TA -> Halter
		/// </summary>
		/// <param name="nPArztNr"></param>
		/// <returns></returns>
		public static SalNumber PalCheckAuslMwStTA(SalNumber nPArztNr)
		{
			#region Actions
			Var.strCheckLand = "";
			Var.nCheckLnr = nPArztNr;
			Int.SqlImmedSel("SELECT aland INTO :strCheckLand FROM a WHERE aarztnr=:nCheckLnr");
			if (Var.strCheckLand == "" || Var.strCheckLand == "DE") 
			{
				Var.nCheckLnr = Var.nMwStVoll;
			}
			else if (Var.strCheckLand == "AT") 
			{
				Var.nCheckLnr = 20;
			}
			else if (Var.strCheckLand == "LU")  // 19.01.15 Ä1144
			{
				Var.nCheckLnr = 17;
			}
			else
			{
				Var.nCheckLnr = Var.nMwStVoll;
			}
			return Var.nCheckLnr;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="dtBuchDat"></param>
		/// <param name="nBuchArt"></param>
		/// <param name="nDM1"></param>
		/// <param name="nDM2"></param>
		/// <param name="nDM3"></param>
		/// <param name="nArztNr"></param>
		/// <param name="nHalterNr"></param>
		/// <param name="nProzNr"></param>
		/// <param name="nBelNr"></param>
		/// <param name="nBank"></param>
		/// <param name="strBuchText"></param>
		/// <param name="nExportNr">16.07.19 Ä1860</param>
		/// <param name="bMwStSenkung"></param>
		/// <param name="nTKFall">04.10.23 Ä2134</param>
		/// <returns></returns>
		public static SalBoolean PalBuchMB(SalSqlHandle phSql, SalDateTime dtBuchDat, SalNumber nBuchArt, SalNumber nDM1, SalNumber nDM2, SalNumber nDM3, SalNumber nArztNr, SalNumber nHalterNr, SalNumber nProzNr, SalNumber nBelNr, SalNumber nBank, SalString strBuchText, SalNumber nExportNr, SalBoolean bMwStSenkung, SalNumber nTKFall)
		{
			#region Local Variables
			SqlLocals.PalBuchMBLocals locals = new SqlLocals.PalBuchMBLocals();
			#endregion
			
			#region Actions
			using (new SqlContext(locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.dtBuchDat = dtBuchDat;
				locals.nBuchArt = nBuchArt;
				locals.nDM1 = nDM1;
				locals.nDM2 = nDM2;
				locals.nDM3 = nDM3;
				locals.nArztNr = nArztNr;
				locals.nHalterNr = nHalterNr;
				locals.nProzNr = nProzNr;
				locals.nBelNr = nBelNr;
				locals.nBank = nBank;
				locals.strBuchText = strBuchText;
				locals.nExportNr = nExportNr;
				locals.bMwStSenkung = bMwStSenkung;
				locals.nTKFall = nTKFall;

				// 06.03.23 Ä2086
				Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
				if (locals.dtBuchDat < Var.dtINIMinBuchDat) 
				{
					locals.dtBuchDat = Var.dtINIMinBuchDat;
				}

				if (locals.strBuchText == "")  // 29.03.11 F866
				{
					locals.strBuchText = Int.PalStrNum(locals.nArztNr, 4, 0) + "H" + Int.PalStrNum(locals.nHalterNr, 5, 0);
				}
				// 16.07.19 Ä1860
				locals.nPExportNr = locals.nExportNr;
				// 18.03.13 F1513
				// 11.07.07 F184
				locals.phSql.PrepareAndExecute("SELECT anr2, akzpraxart INTO :nPArztNr2, :nPPraxArt FROM a WHERE aarztnr=:nArztNr");
				locals.nInd = locals.phSql.FetchNext();
				if (locals.nPPraxArt == 2) 
				{
					locals.nArztNr = locals.nPArztNr2;
				}

				// 11.06.21 Ä1962 + babuchtext
				locals.phSql.PrepareAndExecute(@"SELECT babuart, bastkzarzt1, bastkzabrst1, baktosoll1, baktohaben1, baktosoll2, baktohaben2,bastkzabrst3, baktosoll3, baktohaben3, babuchtext
INTO :strSBuchArt,
:nVSt1, :nMwSt1, :nSoll1, :nHaben1,
:nSoll2, :nHaben2,
:nMwSt3, :nSoll3, :nHaben3, :strBABuchtext
FROM ba WHERE banr = :nBuchArt");
				locals.nInd = locals.phSql.FetchNext();
				// 24.06.20 Ä1892
				// 18.01.21 Mail Hennecke dtBuchDat >= 2020-07-01 and dtBuchDat <= 2020-12-31 And not bKeineMwStSenkung <= 2020-12-31 And Not cbkeineMwStSenkung -> (dtBuchDat >= 2020-07-01 and dtBuchDat <= 2020-12-31) Or bMwStSenkung
				if ((locals.dtBuchDat >= new SalDateTime(2020, 7, 1) && locals.dtBuchDat <= new SalDateTime(2020, 12, 31)) || locals.bMwStSenkung) 
				{
					if (locals.nVSt1 == 10) 
					{
						locals.nVSt1 = 1;
					}
					if (locals.nMwSt1 == 10) 
					{
						locals.nMwSt1 = 1;
					}
					if (locals.nMwSt3 == 10) 
					{
						locals.nMwSt3 = 1;
					}
				}

				locals.nPMwStSchl = locals.nVSt1;
				locals.nVSt1 = Var.nMwSatz[locals.nVSt1];
				locals.nMwSt1 = Var.nMwSatz[locals.nMwSt1];
				locals.nMwSt3 = Var.nMwSatz[locals.nMwSt3];
				locals.nHaben1 = locals.nHaben1 * 10;
				locals.nHaben2 = locals.nHaben2 * 10;
				locals.nHaben3 = locals.nHaben3 * 10;
				// 14.04.14 Ä1046
				if (Int.PalCheckAuslTA(locals.nArztNr) == "EU") 
				{
					App.frmMain.nErloeskonto = locals.nHaben1;
					if (App.frmMain.nErloeskonto == 80100) 
					{
						App.frmMain.nErloeskonto = 80200;
					}
					else if (App.frmMain.nErloeskonto == 80110) 
					{
						App.frmMain.nErloeskonto = 80120;
					}
					else if (App.frmMain.nErloeskonto == 80900) 
					{
						App.frmMain.nErloeskonto = 80980;
					}
					else if (App.frmMain.nErloeskonto == 81200) 
					{
						App.frmMain.nErloeskonto = 81210;
					}
					else if (App.frmMain.nErloeskonto == 81300) 
					{
						App.frmMain.nErloeskonto = 81340;
					}
					else if (App.frmMain.nErloeskonto == 81310) 
					{
						App.frmMain.nErloeskonto = 81360;
					}
					else if (App.frmMain.nErloeskonto == 81700) 
					{
						App.frmMain.nErloeskonto = 81710;
					}
					else if (App.frmMain.nErloeskonto == 82000) 
					{
						App.frmMain.nErloeskonto = 82010;
					}
					else if (App.frmMain.nErloeskonto == 82200) 
					{
						App.frmMain.nErloeskonto = 82210;
					}
					else if (App.frmMain.nErloeskonto == 86000) 
					{
						App.frmMain.nErloeskonto = 86010;
					}
					locals.nHaben1 = App.frmMain.nErloeskonto;

					App.frmMain.nErloeskonto = locals.nHaben2;
					if (App.frmMain.nErloeskonto == 80100) 
					{
						App.frmMain.nErloeskonto = 80200;
					}
					else if (App.frmMain.nErloeskonto == 80110) 
					{
						App.frmMain.nErloeskonto = 80120;
					}
					else if (App.frmMain.nErloeskonto == 80900) 
					{
						App.frmMain.nErloeskonto = 80980;
					}
					else if (App.frmMain.nErloeskonto == 81200) 
					{
						App.frmMain.nErloeskonto = 81210;
					}
					else if (App.frmMain.nErloeskonto == 81300) 
					{
						App.frmMain.nErloeskonto = 81340;
					}
					else if (App.frmMain.nErloeskonto == 81310) 
					{
						App.frmMain.nErloeskonto = 81360;
					}
					else if (App.frmMain.nErloeskonto == 81700) 
					{
						App.frmMain.nErloeskonto = 81710;
					}
					else if (App.frmMain.nErloeskonto == 82000) 
					{
						App.frmMain.nErloeskonto = 82010;
					}
					else if (App.frmMain.nErloeskonto == 82200) 
					{
						App.frmMain.nErloeskonto = 82210;
					}
					else if (App.frmMain.nErloeskonto == 86000) 
					{
						App.frmMain.nErloeskonto = 86010;
					}
					locals.nHaben2 = App.frmMain.nErloeskonto;

					App.frmMain.nErloeskonto = locals.nHaben3;
					if (App.frmMain.nErloeskonto == 80100) 
					{
						App.frmMain.nErloeskonto = 80200;
					}
					else if (App.frmMain.nErloeskonto == 80110) 
					{
						App.frmMain.nErloeskonto = 80120;
					}
					else if (App.frmMain.nErloeskonto == 80900) 
					{
						App.frmMain.nErloeskonto = 80980;
					}
					else if (App.frmMain.nErloeskonto == 81200) 
					{
						App.frmMain.nErloeskonto = 81210;
					}
					else if (App.frmMain.nErloeskonto == 81300) 
					{
						App.frmMain.nErloeskonto = 81340;
					}
					else if (App.frmMain.nErloeskonto == 81310) 
					{
						App.frmMain.nErloeskonto = 81360;
					}
					else if (App.frmMain.nErloeskonto == 81700) 
					{
						App.frmMain.nErloeskonto = 81710;
					}
					else if (App.frmMain.nErloeskonto == 82000) 
					{
						App.frmMain.nErloeskonto = 82010;
					}
					else if (App.frmMain.nErloeskonto == 82200) 
					{
						App.frmMain.nErloeskonto = 82210;
					}
					else if (App.frmMain.nErloeskonto == 86000) 
					{
						App.frmMain.nErloeskonto = 86010;
					}
					locals.nHaben3 = App.frmMain.nErloeskonto;
					// 08.05.17 F2906
					if (locals.nBuchArt == 40 || locals.nBuchArt == 41) 
					{
						locals.nVSt1 = 0;
						locals.nMwSt1 = 0;
						locals.nMwSt3 = 0;
					}

				}

				locals.nSoll1 = locals.nSoll1 * 10;
				locals.nSoll2 = locals.nSoll2 * 10;
				locals.nSoll3 = locals.nSoll3 * 10;
				// 30.06.20 Ä1892
				if ((locals.dtBuchDat >= new SalDateTime(2020, 7, 1) && locals.dtBuchDat <= new SalDateTime(2020, 12, 31)) || locals.bMwStSenkung) 
				{
					locals.nSoll1 = Int.PalKontenMwStSenkung(locals.nSoll1);
					locals.nSoll2 = Int.PalKontenMwStSenkung(locals.nSoll2);
					locals.nSoll3 = Int.PalKontenMwStSenkung(locals.nSoll3);
					locals.nHaben1 = Int.PalKontenMwStSenkung(locals.nHaben1);
					locals.nHaben2 = Int.PalKontenMwStSenkung(locals.nHaben2);
					locals.nHaben3 = Int.PalKontenMwStSenkung(locals.nHaben3);
				}
				// 11.08.10
				if (locals.nBank != 0 && locals.nBank != SalNumber.Null) 
				{
					if (locals.nHaben1 == 12000) 
					{
						locals.nHaben1 = locals.nBank;
					}
					if (locals.nHaben2 == 12000) 
					{
						locals.nHaben2 = locals.nBank;
					}
					if (locals.nHaben3 == 12000) 
					{
						locals.nHaben3 = locals.nBank;
					}
				}
				// #16 kein leeres Buchungsdatum mehr erlauben
				if (locals.dtBuchDat == SalDateTime.Null) 
				{
					locals.dtBuchDat = SalDateTime.Current;
				}

				// 11.06.21 Ä1962 + babuchtext
				// Set strBuchText = strSBuchArt || ' ' || strBuchText
				if (locals.strBABuchtext == "") 
				{
					locals.strBABuchtext = locals.strSBuchArt;
				}
				locals.strBuchText = locals.strBABuchtext + " " + locals.strBuchText;
				// 11.07.11 F956
				// 30.03.21 Ä1948 20 -> 50
				locals.strBuchText = locals.strBuchText.Left(50);

				if (locals.nDM1 == SalNumber.Null) 
				{
					locals.nDM1 = 0;
				}
				if (locals.nDM2 == SalNumber.Null) 
				{
					locals.nDM2 = 0;
				}
				if (locals.nDM3 == SalNumber.Null) 
				{
					locals.nDM3 = 0;
				}
				// Aktionsdatei
				// 27.07.22 Mail Jaroenjit 27.07.22
				if (locals.nBuchArt == 41) 
				{
					Int.PalAktionDatum(locals.dtBuchDat, locals.nArztNr, locals.nHalterNr, SalNumber.Null, "MG", locals.strSBuchArt, SalNumber.Null, SalNumber.Null, locals.nDM1 + locals.nDM2 + locals.nDM3, 0, locals.nProzNr, SalNumber.Null, "");
				}
				else
				{
					// 02.11.10 PalAktion -> PalAktionDatum
					Int.PalAktionDatum(locals.dtBuchDat, locals.nArztNr, locals.nHalterNr, SalNumber.Null, "MB", locals.strSBuchArt, SalNumber.Null, SalNumber.Null, locals.nDM1 + locals.nDM2 + locals.nDM3, 0, locals.nProzNr, SalNumber.Null, "");
				}

				// MB-Kosten-Protokoll
				locals.phSql.PrepareAndExecute(@"INSERT INTO mk (mktyp, mkarztnr, mkhalternr, mkrechnr, mkbuchdat, mkdma, mkdmb, mkdmc)
VALUES ('M', :nArztNr, :nHalterNr, :nBelNr, :dtBuchDat,
:nDM1, :nDM2, :nDM3)");
				// Tierarzt-Buchhaltung (Kontoauszug)
				locals.nTAVSt = (locals.nDM1 * locals.nVSt1 * 100 / (100 + locals.nVSt1)).Round() / 100;
				// 04.10.23 Ä2134 + tkfall bei allen INSERT INTO tk
				// 20.11.23 Ä2144 + tkkontocode
				locals.strPKontoCode = "BA." + locals.strSBuchArt;
				if (locals.nDM1 != 0) 
				{
					locals.phSql.PrepareAndExecute(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkfall, tkkontocode)
VALUES (:nArztNr, 0, 0, :strBuchText,
:nHalterNr, :nBelNr, :nBelNr, :dtBuchDat,
:nHaben1, 0,0,:nTAVSt, 0,0,0,0,0,
:nVSt1, 0, 0, :nDM1, :nDM1, 0, :nTKFall, :strPKontoCode)");
				}
				if (locals.nDM2 != 0) 
				{
					locals.phSql.PrepareAndExecute(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkfall, tkkontocode)
VALUES (:nArztNr, 0, 0, :strBuchText,
:nHalterNr, :nBelNr, :nBelNr, :dtBuchDat,
:nHaben2, 0,0,0, 0,0,0,0,0,
0, 0, 0, :nDM2, :nDM2, 0, :nTKFall, :strPKontoCode)");
				}
				if (locals.nDM3 != 0)  // 23.03.23
				{
					if (locals.nBuchArt == 37) 
					{
						locals.nTAVSt = (locals.nDM3 * locals.nMwSt3 * 100 / (100 + locals.nMwSt3)).Round() / 100;
						locals.phSql.PrepareAndExecute(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkfall, tkkontocode)
VALUES (:nArztNr, 0, 0, :strBuchText,
:nHalterNr, :nBelNr, :nBelNr, :dtBuchDat,
:nHaben3, 0,0,:nTAVSt, 0,0,0,0,0,
:nMwSt3, 0, 0, :nDM3, :nDM3, 0, :nTKFall, :strPKontoCode)");
					}
				}
				// 21.11.17 F2969
				if (locals.nBuchArt == 40 || locals.nBuchArt == 41) 
				{
					locals.nMwStKonto = 15760;
				}
				else
				{
					locals.nMwStKonto = 17760;
				}
				// 30.06.20 Ä1892
				if ((SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) || locals.bMwStSenkung) 
				{
					locals.nMwStKonto = Int.PalKontenMwStSenkung(locals.nMwStKonto);
					locals.nSoll1 = Int.PalKontenMwStSenkung(locals.nSoll1);
					locals.nSoll2 = Int.PalKontenMwStSenkung(locals.nSoll2);
					locals.nSoll3 = Int.PalKontenMwStSenkung(locals.nSoll3);
					locals.nHaben1 = Int.PalKontenMwStSenkung(locals.nHaben1);
					locals.nHaben2 = Int.PalKontenMwStSenkung(locals.nHaben2);
					locals.nHaben3 = Int.PalKontenMwStSenkung(locals.nHaben3);
				}

				// KHK-FiBu
				// a)
				if (locals.nDM1 != 0) 
				{
					locals.nTAVSt = (locals.nDM1 * locals.nMwSt1 * 100 / (100 + locals.nMwSt1)).Round() / 100;
					locals.nDiverse = locals.nDM1 - locals.nTAVSt;
					locals.phSql.PrepareAndExecute(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiexportnr)
VALUES (0, :nSoll1, :nHaben1, :nBelNr,
:dtBuchDat, :strBuchText, :nDiverse, 7, :nPExportNr)");
					locals.phSql.PrepareAndExecute(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiexportnr)
VALUES (0, :nSoll1, :nMwStKonto, :nBelNr,
:dtBuchDat, :strBuchText, :nTAVSt, 7, :nPExportNr)");
					if (locals.nBank != 0 && locals.nBank != SalNumber.Null) 
					{
						locals.phSql.PrepareAndExecute(@" INSERT INTO bub (bubbearbeiter, bubbearbdatum, bubarztnr, bubsoll, bubhaben, bubdm, bubbuchtext)
VALUES (:frmMain.strUser, SYSDATETIME, :nArztNr, :nSoll1,:nHaben1, :nDiverse, :strBuchText)");
						locals.phSql.PrepareAndExecute(@" INSERT INTO bub
									(bubbearbeiter, bubbearbdatum, bubarztnr, bubsoll, bubhaben, bubdm, bubbuchtext)
									VALUES (:frmMain.strUser, SYSDATETIME, :nArztNr, :nSoll1, :nMwStKonto, :nTAVSt, :strBuchText)");
					}
				}
				// b)
				if (locals.nDM2 != 0) 
				{
					locals.nDiverse = locals.nDM2;
					locals.phSql.PrepareAndExecute(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiexportnr)
VALUES (0, :nSoll2, :nHaben2, :nBelNr,
:dtBuchDat, :strBuchText, :nDiverse, 7, :nPExportNr)");
					if (locals.nBank != 0 && locals.nBank != SalNumber.Null) 
					{
						locals.phSql.PrepareAndExecute(@" INSERT INTO bub
									(bubbearbeiter, bubbearbdatum, bubarztnr, bubsoll, bubhaben, bubdm, bubbuchtext)
									VALUES (:frmMain.strUser, SYSDATETIME, :nArztNr, :nSoll2,:nHaben2, :nDiverse, :strBuchText)");
					}
				}
				// c)
				// 24.01.18 F2969
				locals.nMwStKonto = 17760;
				// 30.06.20 Ä1892
				if ((SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) || locals.bMwStSenkung) 
				{
					locals.nMwStKonto = Int.PalKontenMwStSenkung(locals.nMwStKonto);
					locals.nSoll1 = Int.PalKontenMwStSenkung(locals.nSoll1);
					locals.nSoll2 = Int.PalKontenMwStSenkung(locals.nSoll2);
					locals.nSoll3 = Int.PalKontenMwStSenkung(locals.nSoll3);
					locals.nHaben1 = Int.PalKontenMwStSenkung(locals.nHaben1);
					locals.nHaben2 = Int.PalKontenMwStSenkung(locals.nHaben2);
					locals.nHaben3 = Int.PalKontenMwStSenkung(locals.nHaben3);
				}

				if (locals.nDM3 != 0) 
				{
					locals.nTAVSt = (locals.nDM3 * locals.nMwSt3 * 100 / (100 + locals.nMwSt3)).Round() / 100;
					locals.nDiverse = locals.nDM3 - locals.nTAVSt;
					locals.phSql.PrepareAndExecute(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiexportnr)
VALUES (0, :nSoll3, :nHaben3, :nBelNr,
:dtBuchDat, :strBuchText, :nDiverse, 7, :nPExportNr)");
					locals.phSql.PrepareAndExecute(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiexportnr)
VALUES (0, :nSoll3, :nMwStKonto, :nBelNr,
:dtBuchDat, :strBuchText, :nTAVSt, 7, :nPExportNr)");
					if (locals.nBank != 0 && locals.nBank != SalNumber.Null) 
					{
						locals.phSql.PrepareAndExecute(@" INSERT INTO bub
									(bubbearbeiter, bubbearbdatum, bubarztnr, bubsoll, bubhaben, bubdm, bubbuchtext)
									VALUES (:frmMain.strUser, SYSDATETIME, :nArztNr, :nSoll3,:nHaben3, :nDiverse, :strBuchText)");
						locals.phSql.PrepareAndExecute(@" INSERT INTO bub
									(bubbearbeiter, bubbearbdatum, bubarztnr, bubsoll, bubhaben, bubdm, bubbuchtext)
									VALUES (:frmMain.strUser, SYSDATETIME, :nArztNr, :nSoll3, :nMwStKonto, :nTAVSt, :strBuchText)");
					}
				}
				// 999990
				// 10.01.07 F103
				locals.nPRechNr = 999989 + locals.nPMwStSchl;

				// 11.12.06 Ä48 19% MwSt.
				// 14.09.10 OTÄ443 Nur, wenn PR <> 0
				if (locals.nProzNr == SalNumber.Null || locals.nProzNr == 0) 
				{
				}
				else
				{
					Int.SqlIstDa(@" FROM rk
WHERE rkdeaktiv IS NULL AND rkarztnr = " + locals.nArztNr.ToString(0) + " AND rkhalternr = " + locals.nHalterNr.ToString(0) + " AND rkrechnr = " + locals.nPRechNr.ToString(0), ref Var.bExists);
					if (Var.bExists) 
					{
						locals.phSql.PrepareAndExecute(@"SELECT rkkzzahl INTO :nKZZahl FROM rk
WHERE rkarztnr = :nArztNr
AND rkhalternr = :nHalterNr AND rkrechnr = :nPRechNr AND rkdeaktiv IS NULL");
						locals.nInd = locals.phSql.FetchNext();
						if (locals.nKZZahl > 1) 
						{
							locals.nKZZahl = 0;
						}
						locals.phSql.PrepareAndExecute(@"UPDATE rk SET
rkkzzahl = :nKZZahl,
rkrechdat = :dtBuchDat,
rkfaelldat = :dtBuchDat,
rkdmleis = rkdmleis + :nDM1,
rkdmarzn = rkdmarzn + :nDM2,
rkmbdmopl = rkmbdmopl + :nDM3
WHERE rkarztnr = :nArztNr
AND rkhalternr = :nHalterNr AND rkrechnr = :nPRechNr");
					}
					else
					{
						locals.strBuchText = "MB-Sammler " + locals.nVSt1.ToString(0) + "%";
						locals.phSql.PrepareAndExecute(@"INSERT INTO RK (RKARZTNR, RKHALTERNR, RKRECHNR,
RKBUCHTEXT, RKRECHDAT, RKFAELLDAT, RKDMLEIS, RKDMARZN,  RKDMMAHN, RKDMZINS, RKMBDMOPL,
RKVERJAEHR,RKZALEIS,RKZAARZN,RKZAMAHN, RKZAZINS, RKMBZAOPL, RKKZZAHL,RKKZ,RKMAHNSTUFE)
VALUES(:nArztNr, :nHalterNr, :nPRechNr,
:strBuchText, :dtBuchDat, :dtBuchDat, :nDM1, :nDM2,0,0,:nDM3,
NULL,0, 0,0,0,0,0,2,0)");
					}
				}

				return false;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strSection"></param>
		/// <param name="strEntry"></param>
		/// <param name="strValue"></param>
		/// <param name="strFileName"></param>
		/// <returns></returns>
		public static SalBoolean PalSetProfileStringR(SalString strSection, SalString strEntry, SalString strValue, SalString strFileName)
		{
			#region Local Variables
			SalBoolean bPExists = false;
			SalBoolean bPOk = false;
			#endregion
			
			#region Actions

			bPOk = Sal.SetProfileString(strSection, strEntry, strValue, strFileName);
			return bPOk;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strSection"></param>
		/// <param name="strEntry"></param>
		/// <param name="strDefault"></param>
		/// <param name="strValue"></param>
		/// <param name="strFileName"></param>
		/// <returns></returns>
		public static SalNumber PalGetProfileStringR(SalString strSection, SalString strEntry, SalString strDefault, ref SalString strValue, SalString strFileName)
		{
			#region Actions
			Sal.GetProfileString(strSection, strEntry, strDefault, ref strValue, strFileName);
			return strValue.Length;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strUnterordner"></param>
		/// <param name="bShowExternal"></param>
		/// <returns></returns>
		public static SalNumber PalExplorer(SalString strUnterordner, SalBoolean bShowExternal)
		{
			#region Local Variables
			SalBoolean bFileOk = false;
			SalNumber nAnzahl = 0;
			SalString strOrdn = "";
			SalString strOrdner = "";
			SalNumber nNr = 0;
			#endregion
			
			#region Actions

			if (!(Vis.DosExist(Var.strPfadArchiv))) 
			{
				if (!(Sal.FileCreateDirectory(Var.strPfadArchiv))) 
				{
					Var.strPfadArchiv = "";
				}
			}
			if (Var.strPfadArchiv != "") 
			{
				if (!(Vis.DosExist(Var.strPfadArchiv + Sql.Database))) 
				{
					if (!(Sal.FileCreateDirectory(Var.strPfadArchiv + Sql.Database))) 
					{
						Var.strPfadArchiv = "";
					}
				}
			}
			// 03.04.09 OTÄ153
			if (Var.strPfadArchiv == "") 
			{
				Sal.MessageBox("Bitte geben Sie den Netzwerkordner für Ihr Dateiarchiv an (Datei/Eigenschaften). Dieser Ordner muß für alle Pegasus-Anwender Schreib- und Leserechte enthalten.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				bFileOk = false;
				// If strUnterordner != ''
				// Set strUnterordner =  '\\' || strUnterordner
				strOrdner = "";

				nNr = 0;
				while (nNr < 20) 
				{
					Var.strArrToken[nNr] = "";
					nNr = nNr + 1;
				}

				nAnzahl = strUnterordner.Tokenize("", "\\", Var.strArrToken);
				if (nAnzahl > 0) 
				{
					Var.nCount = 0;
					while (Var.nCount <= nAnzahl) 
					{
						strOrdn = Var.strArrToken[Var.nCount].Trim();
						Var.nCount = Var.nCount + 1;
						if (strOrdn != "") 
						{
							strOrdner = strOrdner + "\\" + strOrdn;

							if (!(Vis.DosExist(Var.strPfadArchiv + Sql.Database + strOrdner))) 
							{
								if (!(Sal.FileCreateDirectory(Var.strPfadArchiv + Sql.Database + strOrdner))) 
								{
									Sal.MessageBox("Der Ordner " + Var.strPfadArchiv + Sql.Database + strOrdner + " kann nicht angelegt werden!", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
								}
								else
								{
									bFileOk = true;
								}
							}
							else
							{
								bFileOk = true;
							}
						}
					}
				}

				if (bFileOk && bShowExternal) 
				{
					Ext.ShellExecuteA(App.frmRgSuchen, "explore", Var.strPfadArchiv + Sql.Database + "\\" + strUnterordner, "", "", Const.SW_SHOW);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public static SalNumber PalClearToken()
		{
			#region Local Variables
			SalNumber nCount = 0;
			#endregion
			
			#region Actions
			nCount = 0;
			while (nCount < 50) 
			{
				Var.strArrToken[nCount] = "";
				nCount = nCount + 1;
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strMatch"></param>
		/// <returns></returns>
		public static SalString PalStringMakeCSV(SalString strMatch)
		{
			#region Actions
			return Int.PalStringStrip(strMatch, "\"");
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nXArztNr"></param>
		/// <param name="nXArztNr2"></param>
		/// <param name="strXNeben"></param>
		/// <returns></returns>
		public static SalNumber PalGetNewHalterNr(SalNumber nXArztNr, SalNumber nXArztNr2, SalString strXNeben)
		{
			#region Local Variables
			SqlLocals.PalGetNewHalterNrLocals locals = new SqlLocals.PalGetNewHalterNrLocals();
			#endregion
			
			#region Actions
			using (new SqlContext(locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.nXArztNr = nXArztNr;
				locals.nXArztNr2 = nXArztNr2;
				locals.strXNeben = strXNeben;

				// 04.09.12 Ä811
				Var.nArzt = locals.nXArztNr;
				Var.nArztPGP = locals.nXArztNr2;
				if (Var.nArztPGP == 0 || Var.nArztPGP == SalNumber.Null) 
				{
					Var.nArztPGP = Var.nArzt;
				}
				Int.SqlImmedSel("SELECT MAX(hhalternr) INTO :nIstDaAnz FROM h WHERE harztnr IN (:nArzt, :nArztPGP" + locals.strXNeben + ")");
				if (Var.nIstDaAnz < 99999) 
				{
					locals.nPMax = Var.nIstDaAnz + 1;
				}
				else
				{
					locals.nPMax = 100000;
					Var.hSqlFetch.PrepareAndExecute("SELECT DISTINCT hhalternr INTO :nHalter FROM h WHERE harztnr IN (:nArzt, :nArztPGP" + locals.strXNeben + ") ORDER BY hhalternr DESC");
					Var.nRow = Var.hSqlFetch.FetchNext();
					while (Var.nRow != Sys.FETCH_EOF) 
					{
						if (locals.nPMax - Var.nHalter > 1)  // Lücke gefunden
						{
							locals.nPMax = locals.nPMax - 1;
							Var.nRow = Sys.FETCH_EOF;
						}
						else if (Var.nHalter == 1)  // alle durch, keiner frei
						{
							locals.nPMax = 0;
							Var.nRow = Sys.FETCH_EOF;
						}
						else
						{
							locals.nPMax = Var.nHalter;
							Var.nRow = Var.hSqlFetch.FetchNext();
						}
					}
					Var.hSqlFetch.Commit();
				}
				return locals.nPMax;
			}
			#endregion
		}
		
		/// <summary>
		/// Wandelt eine Number in einen String um.
		/// </summary>
		/// <param name="nNum"></param>
		/// <param name="nVor"></param>
		/// <param name="nNach"></param>
		/// <returns></returns>
		public static SalString PalStrNum0(SalNumber nNum, SalNumber nVor, SalNumber nNach)
		{
			#region Local Variables
			SalString strNum = "";
			SalNumber nLength = 0;
			#endregion
			
			#region Actions
			nLength = nNum.ToString(nNach, ref strNum);
			strNum = "000000000000000000000000000000" + strNum;
			if (nNach != 0) 
			{
				nVor = nVor + 1;
			}
			strNum = strNum.Right(nVor + nNach);
			return strNum;
			#endregion
		}
		
		/// <summary>
		/// Wandelt eine Number in einen String um.
		/// </summary>
		/// <param name="nNum"></param>
		/// <param name="nVor"></param>
		/// <param name="nNach"></param>
		/// <returns></returns>
		public static SalString PalStrNum0Leer(SalNumber nNum, SalNumber nVor, SalNumber nNach)
		{
			#region Local Variables
			SalString strNum = "";
			SalNumber nLength = 0;
			#endregion
			
			#region Actions
			// 15.08.18 Ä1662
			if (nNum == SalNumber.Null) 
			{
				strNum = "                                         ";
			}
			else
			{
				nLength = nNum.ToString(nNach, ref strNum);
				strNum = "000000000000000000000000000000" + strNum;
			}
			if (nNach != 0) 
			{
				nVor = nVor + 1;
			}
			strNum = strNum.Right(nVor + nNach);
			return strNum;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strLand"></param>
		/// <param name="strBLZ"></param>
		/// <param name="strKonto"></param>
		/// <returns></returns>
		public static SalString PalIBAN(SalString strLand, SalString strBLZ, SalString strKonto)
		{
			#region Local Variables
			SalNumber nModulo = 0;
			SalString strIBAN = "";
			SalString strLC = "";
			SalString strBC = "";
			SalString strAC = "";
			SalString strChar = "";
			SalNumber nChar = 0;
			SalNumber nLen = 0;
			SalNumber nOff = 0;
			SalString strPLand = "";
			#endregion
			
			#region Actions
			if (strPLand == "") 
			{
				strPLand = "DE";
			}
			strPLand = strLand;
			Sal.StrFirstChar(ref strPLand, ref nChar);
			strLC = (nChar - 55).ToString(0);
			Sal.StrFirstChar(ref strPLand, ref nChar);
			strLC = strLC + (nChar - 55).ToString(0) + "00";

			nLen = strBLZ.Length;
			while (nLen < 8) 
			{
				strBLZ = "0" + strBLZ;
				nLen = strBLZ.Length;
			}

			nLen = strKonto.Length;
			while (nLen < 10) 
			{
				strKonto = "0" + strKonto;
				nLen = strKonto.Length;
			}

			strIBAN = strBLZ + strKonto + strLC;
			nChar = strIBAN.ToNumber();
			nModulo = nChar.Mod(97);
			nModulo = 98 - nModulo;
			strIBAN = strLand + Int.PalStrNum0(nModulo, 2, 0) + strBLZ + strKonto;
			return strIBAN;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strIBAN"></param>
		/// <returns></returns>
		public static SalBoolean PalIBANPruef(SalString strIBAN)
		{
			#region Local Variables
			SalNumber nModulo = 0;
			SalString strPIBAN = "";
			SalString strLC = "";
			SalString strBC = "";
			SalString strAC = "";
			SalString strChar = "";
			SalNumber nChar = 0;
			SalNumber nLen = 0;
			SalNumber nOff = 0;
			SalString strPLand = "";
			#endregion
			
			#region Actions
			strPLand = strIBAN.Left(2);
			Sal.StrFirstChar(ref strPLand, ref nChar);
			strLC = (nChar - 55).ToString(0);
			Sal.StrFirstChar(ref strPLand, ref nChar);
			strLC = strLC + (nChar - 55).ToString(0) + "00";

			strPIBAN = strIBAN.Mid(4, 255) + strLC;
			nChar = strPIBAN.ToNumber();
			nModulo = nChar.Mod(97);
			nModulo = 98 - nModulo;
			strPIBAN = strIBAN.Left(2) + Int.PalStrNum0(nModulo, 2, 0) + strIBAN.Mid(4, 255);
			if (strIBAN == strPIBAN) 
			{
				return true;
			}
			else
			{
				return false;
			}
			#endregion
		}
		
		/// <summary>
		/// wandelt Datum in String um
		/// </summary>
		/// <param name="dtDate"></param>
		/// <returns></returns>
		public static SalString PalDateToStrISO(SalDateTime dtDate)
		{
			#region Local Variables
			SalString strDate = "";
			SalString strDatum = "";
			SalString strTimeISO = "";
			#endregion
			
			#region Actions
			// '2013-07-12T10:20:00.000Z'
			strDate = dtDate.ToString();
			strTimeISO = Int.PalStrReplace(strDate.Mid(11, 8), ".", ":") + strDate.Mid(19, 3);
			strDatum = strDate.Mid(0, 10) + "T" + strTimeISO + "Z";
			return strDatum;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strXBLZ"></param>
		/// <returns></returns>
		public static SalString PalGetBIC(SalString strXBLZ)
		{
			#region Actions
			Var.strDummy1 = strXBLZ;
			Var.strDummy = "";
			Int.SqlImmedSel("SELECT blzbic INTO :strDummy FROM blz WHERE blzblz = :strDummy1");
			// Call SqlPrepareAndExecute( hSql, 'SELECT blzbic INTO :strDummy FROM blz WHERE blzblz = :strDummy1' )
			// Call SqlFetchNext( hSql, nFetchBZ )
			return Var.strDummy;
			#endregion
		}
		
		/// <summary>
		/// Wandelt Umlaute und ß in AE,OE,UE und SS um
		/// </summary>
		/// <param name="strMatch"></param>
		/// <returns></returns>
		public static SalString PalStringToSEPA(SalString strMatch)
		{
			#region Local Variables
			SalNumber nPLen = 0;
			SalString strPChar = "";
			SalString strPNeu = "";
			#endregion
			
			#region Actions
			while (strMatch.Scan("Ä") != -1) 
			{
				strMatch = strMatch.Left(strMatch.Scan("Ä")) + "Ae" + strMatch.Mid(strMatch.Scan("Ä") + 1, 255);
			}
			while (strMatch.Scan("Ö") != -1) 
			{
				strMatch = strMatch.Left(strMatch.Scan("Ö")) + "Oe" + strMatch.Mid(strMatch.Scan("Ö") + 1, 255);
			}
			while (strMatch.Scan("Ü") != -1) 
			{
				strMatch = strMatch.Left(strMatch.Scan("Ü")) + "Ue" + strMatch.Mid(strMatch.Scan("Ü") + 1, 255);
			}
			while (strMatch.Scan("ä") != -1) 
			{
				strMatch = strMatch.Left(strMatch.Scan("ä")) + "ae" + strMatch.Mid(strMatch.Scan("ä") + 1, 255);
			}
			while (strMatch.Scan("ö") != -1) 
			{
				strMatch = strMatch.Left(strMatch.Scan("ö")) + "oe" + strMatch.Mid(strMatch.Scan("ö") + 1, 255);
			}
			while (strMatch.Scan("ü") != -1) 
			{
				strMatch = strMatch.Left(strMatch.Scan("ü")) + "ue" + strMatch.Mid(strMatch.Scan("ü") + 1, 255);
			}
			while (strMatch.Scan("ß") != -1) 
			{
				strMatch = strMatch.Left(strMatch.Scan("ß")) + "ss" + strMatch.Mid(strMatch.Scan("ß") + 1, 255);
			}
			// 12.09.13
			strPNeu = "";
			nPLen = strMatch.Length;
			while (nPLen > 0) 
			{
				strPChar = strMatch.Mid(nPLen - 1, 1);
				if (strPChar >= "0" && strPChar <= "9") 
				{
					strPNeu = strPChar + strPNeu;
				}
				else if (strPChar >= "a" && strPChar <= "z") 
				{
					strPNeu = strPChar + strPNeu;
				}
				else if (strPChar >= "A" && strPChar <= "Z") 
				{
					strPNeu = strPChar + strPNeu;
				}
				else if (strPChar == "\"" || strPChar == ":" || strPChar == "?" || strPChar == "," || strPChar == "-" || strPChar == " " || strPChar == "(" || strPChar == "+" || strPChar == "." || strPChar == ")" || strPChar == "/") 
				{
					strPNeu = strPChar + strPNeu;
				}
				else
				{
				}
				nPLen = nPLen - 1;
			}

			return strPNeu.Trim();
			#endregion
		}
		
		/// <summary>
		/// wandelt Datum in String um
		/// </summary>
		/// <param name="dtDate"></param>
		/// <returns></returns>
		public static SalString PalDateToStrhhmmss(SalDateTime dtDate)
		{
			#region Local Variables
			SalString strDate = "";
			SalString strDatum = "";
			#endregion
			
			#region Actions
			strDate = dtDate.ToString();
			strDatum = strDate.Mid(11, 2) + ":" + strDate.Mid(14, 2) + ":" + strDate.Mid(17, 2);
			return strDatum;
			#endregion
		}
		// Function: SqlConnectionRO
		// Description:
		// Returns
		// Number:
		// Parameters
		// Receive Sql Handle: hSqlLocal
		// Static Variables
		// Local variables
		// Number: nResult
		// Boolean: bOk
		// Number: nError
		// String: strSqlMsg
		// Actions
		// Call SalWaitCursor( TRUE )
		// Set strSqlMsg = 'Fehler bei Herstellung der Verbindung zur Datenbank'
		// Set bOk = FALSE
		// While bOk = FALSE
		// When SqlError
		// Set nResult = SqlError ( hSqlLocal )
		// Call SqlGetErrorText ( nResult, strSqlMsg )
		// Return FALSE
		// If SqlConnect ( hSqlLocal )
		// Set bOk = TRUE
		// If bOk = FALSE
		// Set nResult = SqlErrorAction( hWndNULL, strSqlMsg, '' )
		// If nResult != IDRETRY
		// Set bOk = TRUE
		// Else
		// Set nResult = IDOK
		// If nResult = IDOK
		// Set strSqlMsg = 'Fehler bei Setzen der Parameter für Datenbank-Zugriff'
		// *** AutoCommit setzen ***
		// If bOk
		// Set bOk = FALSE
		// While bOk = FALSE
		// When SqlError
		// Return FALSE
		// If SqlSetParameter(hSqlLocal,DBP_AUTOCOMMIT,FALSE,'')
		// Set bOk = TRUE
		// If SqlSetParameter(hSqlLocal,DBP_AUTOCOMMIT,TRUE,'')
		// Set bOk = TRUE
		// If bOk = FALSE
		// Set nResult = SqlErrorAction( hSqlLocal, strSqlMsg || 'AUTOCOMMIT', '' )
		// If nResult != IDRETRY
		// Set bOk = TRUE
		// Else
		// Set nResult = IDOK
		// *** No Prebuild setzen ***
		// If bOk
		// Set bOk = FALSE
		// While bOk = FALSE
		// When SqlError
		// Return FALSE
		// If SqlSetParameter(hSqlLocal,DBP_NOPREBUILD,TRUE,'')
		// Set bOk = TRUE
		// If bOk = FALSE
		// Set nResult = SqlErrorAction( hSqlLocal, strSqlMsg || 'NOPREBUILD', '' )
		// If nResult != IDRETRY
		// Set bOk = TRUE
		// Else
		// Set nResult = IDOK
		// *** PreServe setzen ***
		// If bOk
		// Set bOk = FALSE
		// While bOk = FALSE
		// When SqlError
		// Return FALSE
		// If SqlSetParameter(hSqlLocal,DBP_PRESERVE,TRUE,'')
		// Set bOk = TRUE
		// If bOk = FALSE
		// Set nResult = SqlErrorAction( hSqlLocal, strSqlMsg || 'PRESERVE', '' )
		// If nResult != IDRETRY
		// Set bOk = TRUE
		// Else
		// Set nResult = IDOK
		// *** Isolation-Level setzen ***
		// If bOk
		// Set bOk = FALSE
		// While bOk = FALSE
		// When SqlError
		// Return FALSE
		// If SqlSetIsolationLevel( hSqlLocal, 'RO' )
		// Set bOk = TRUE
		// If bOk = FALSE
		// Set nResult = SqlErrorAction( hSqlLocal, strSqlMsg || 'ISOLATION', '' )
		// If nResult != IDRETRY
		// Set bOk = TRUE
		// Else
		// Set nResult = IDOK
		// *** Preserve setzen ***
		// If bOk
		// Set bOk = FALSE
		// While bOk = FALSE
		// When SqlError
		// Return FALSE
		// If SqlSetParameter( hSqlLocal, DBP_PRESERVE, TRUE, '' )
		// Set bOk = TRUE
		// If bOk = FALSE
		// Set nResult = SqlErrorAction( hSqlLocal, strSqlMsg || 'PRESERVE', '' )
		// If nResult != IDRETRY
		// Set bOk = TRUE
		// Else
		// Set nResult = IDOK
		// *** TimeOut setzen ***
		// If bOk
		// Set bOk = FALSE
		// While bOk = FALSE
		// When SqlError
		// Return FALSE
		// If SqlSetLockTimeout( hSqlLocal, -1 )
		// Set bOk = TRUE
		// If bOk = FALSE
		// Set nResult = SqlErrorAction( hSqlLocal, strSqlMsg || 'TIMEOUT', '' )
		// If nResult != IDRETRY
		// Set bOk = TRUE
		// Else
		// Set nResult = IDOK
		// If nResult != IDOK
		// Call SqlDisconnect( hSqlLocal )
		// Call SalWaitCursor( FALSE )
		// Return nResult
		/// <summary>
		/// 06.01.14 Ä1005
		/// </summary>
		/// <param name="strSqlStatement"></param>
		/// <returns></returns>
		public static SalNumber SqlGetAnzahl(SalString strSqlStatement)
		{
			#region Local Variables
			SalString strKommando = "";
			SalNumber nResult = 0;
			// Session Handle: hSession
			SalSqlHandle hSqlSel = SalSqlHandle.Null;
			SalNumber nCount = 0;
			SalBoolean bOk = false;
			SalString strSqlMsg = "";
			#endregion
			
			#region Actions
			Var.bExists = false;
			// 28.11.13
			// Set strKommando = 'SELECT count(*) INTO :nIstDaAnz  ' || strSqlStatement
			// Set nResult = SqlImmedSel( strKommando )
			// If nResult = IDOK
			// If nIstDaAnz != 0
			// Set bExists = TRUE
			// Return nResult
			strKommando = "SELECT NULL  " + strSqlStatement;
			// 06.01.14 Ä1005 RO
			Int.SqlConnection(ref hSqlSel);
			// Set bOk=SqlCreateSession(hSession,'')
			// Set bOk=SqlCreateStatement (hSession, hSqlSel)
			// Call SqlSetIsolationLevel(hSqlSel,'RO')
			strSqlMsg = "Programmfehler bei SQLIMMEDSEL";
			nResult = Int.SqlHandleExec(hSqlSel, strKommando, strSqlMsg, ref nCount);
			nCount = hSqlSel.GetResultSetCount();
			// If nResult = IDOK
			// Call SqlCommit( hSqlSel )
			hSqlSel.Disconnect();
			// Call SqlFreeSession( hSession )

			return nCount;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hSqlLocal"></param>
		/// <param name="strSqlStatement"></param>
		/// <returns></returns>
		public static SalBoolean SqlPrepar(SalSqlHandle hSqlLocal, SalString strSqlStatement)
		{
			#region Local Variables
			SqlLocals.SqlPreparLocals locals = new SqlLocals.SqlPreparLocals();
			#endregion
			
			#region Actions
			using (new SqlContext(locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.hSqlLocal = hSqlLocal;
				locals.strSqlStatement = strSqlStatement;


				locals.bOk = false;
				locals.nPRetry = 0;
				while (locals.bOk == false) 
				{
					#region WhenSqlError
					WhenSqlErrorHandler sqlErrorHandler12 = delegate(SalSqlHandle hSql)
					{
						locals.nPRetry = locals.nPRetry + 1;
						return false;
					};
					#endregion

					if (locals.hSqlLocal.Prepare(locals.strSqlStatement, sqlErrorHandler12)) 
					{
						#region WhenSqlError
						WhenSqlErrorHandler sqlErrorHandler13 = delegate(SalSqlHandle hSql)
						{
							return false;
						};
						#endregion

						locals.bOk = true;
					}
					if (locals.bOk == false) 
					{
						if (locals.nPRetry > 1) 
						{
							locals.nResult = Int.SqlErrorAction(locals.hSqlLocal, locals.strSqlStatement, "SqlPrepar");
							if (locals.nResult != Sys.IDRETRY) 
							{
								locals.bOk = true;
							}
						}
					}
					else
					{
						locals.nResult = Sys.IDOK;
					}
				}
				return locals.nResult;
			}
			#endregion
		}
		
		/// <summary>
		/// für Rechnungen TVN -> TA
		/// </summary>
		/// <param name="nPArztNr"></param>
		/// <returns></returns>
		public static SalString PalCheckAuslTA(SalNumber nPArztNr)
		{
			#region Actions
			Var.strCheckLand = "";
			Var.nCheckLnr = nPArztNr;
			if (Int.SqlImmedSel("SELECT aland INTO :strCheckLand FROM a WHERE aarztnr=:nCheckLnr")) 
			{
			}
			if (Var.strCheckLand == "" || Var.strCheckLand == "DE") 
			{
				Var.strCheckLand = "";
			}
			else
			{
				Var.strCheckLand = "EU";
			}
			// 25.04.14
			Int.PalLog("CheckAuslTA:" + Int.PalStrNum(Var.nCheckLnr, 4, 0));

			return Var.strCheckLand;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPArztNr"></param>
		/// <returns></returns>
		public static SalString PalGetArztLand(SalNumber nPArztNr)
		{
			#region Actions
			Var.strCheckLand = "";
			Var.nCheckLnr = nPArztNr;
			if (Int.SqlImmedSel("SELECT aland INTO :strCheckLand FROM a WHERE aarztnr=:nCheckLnr")) 
			{
			}
			if (Var.strCheckLand == "") 
			{
				Var.strCheckLand = "DE";
			}
			return Var.strCheckLand;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strLogText"></param>
		/// <param name="nXPrio"></param>
		/// <returns></returns>
		public static SalNumber PalLogToFile(SalString strLogText, SalNumber nXPrio)
		{
			#region Local Variables
			SalFileHandle hFileSelect = SalFileHandle.Null;
			SalString strPComputer = "";
			SalString strPUser = "";
			#endregion
			
			#region Actions
			if (Int.PalGetUser(ref strPUser, ref strPComputer)) 
			{
			}
			if (!(hFileSelect.Open(Const.PATH_LOG + "Log.txt", Sys.OF_Exist))) 
			{
				hFileSelect.Open(Const.PATH_LOG + "Log.txt", (Sys.OF_Create | Sys.OF_Text));
				hFileSelect.Open(Const.PATH_LOG + "Log.txt", (Sys.OF_Append | Sys.OF_Text));
			}
			else
			{
				hFileSelect.Open(Const.PATH_LOG + "Log.txt", (Sys.OF_Append | Sys.OF_Text));
			}
			if (hFileSelect.PutString(Int.PalDateToStrJJJJMMTThhmmss(SalDateTime.Current) + ";" + Var.strProgVer + ";" + strPComputer + ";" + strPUser + ";" + strLogText)) 
			{
			}
			hFileSelect.Close();

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public static SalBoolean PalMailInit()
		{
			#region Local Variables
			SalString strPName = "";
			SalString strPPw = "";
			#endregion
			
			#region Actions
			// Call PalLogToFile( 'IInitialize', 0 )
			// Call oIncomingMail.Initialize(  )
			// Call PalLogToFile( 'ISetMailServer', 0 )
			// 29.07.14 F2003
			// Call oIncomingMail.SetMailServer( 'pop3.strato.de', 110, FALSE, FALSE )
			// Call oIncomingMail.SetMailServer( '10.0.0.60', 110, FALSE, FALSE )
			// Call PalLogToFile( 'ISetUser', 0 )
			// 29.07.14 F2003
			// Call oIncomingMail.SetUser( 'noreply@tvn-online.de' , '%websys4711' )
			// Call oIncomingMail.SetUser( '' , '' )
			// Call PalLogToFile( 'ISetMailProtocol', 0 )
			// Call oIncomingMail.SetMailProtocol( MAIL_PROTOCOL_POP3 )
			// Call PalLogToFile( 'IConnect', 0 )
			// If oIncomingMail.Connect(  ) != 0
			// Return FALSE
			// Else
			// Call PalLogToFile( 'IIsConnected', 0 )
			// If oIncomingMail.m_bIsConnected
			Int.PalLogToFile("OInitialize", 0);
			if (!(Var.oOutgoingMail.Initialize())) 
			{
				Sal.MessageBeep(0);
			}
			Int.PalLogToFile("OSetMailServer", 0);
			// 29.07.14 F2003
			// Call oOutgoingMail.SetMailServer( 'smtp.strato.de', 25, FALSE, TRUE )
			// 07.05.18 Ä1741
			// Call oOutgoingMail.SetMailServer( '10.0.0.60', 25, FALSE, TRUE )
			Var.oOutgoingMail.SetMailServer("mail.moveta.de", 587, true, true);
			// Call oOutgoingMail.SetMailServer( 'smtpmail.tvn1.local', 587, FALSE, TRUE )
			Int.PalLogToFile("OSetUser", 0);
			// 29.07.14 F2003
			// Call oOutgoingMail.SetUser(  'noreply@tvn-online.de' , '%websys4711' )
			// 30.10.20 Ä1911
			// Call oOutgoingMail.SetUser(  '' , '' )
			Int.PalGetProfileStringR("Credentials", "Name", "", ref strPName, "TVN");
			Int.PalGetProfileStringR("Credentials", "Passwort", "", ref strPPw, "TVN");
			Var.nErr = 1;
			if (strPName == "" || strPPw == "") 
			{
				Var.nErr = dlgUserCredentials.ModalDialog(Sys.hWndForm, "");
				if (Var.nErr == 1) 
				{
					Int.PalGetProfileStringR("Credentials", "Name", "", ref strPName, "TVN");
					Int.PalGetProfileStringR("Credentials", "Passwort", "", ref strPPw, "TVN");
					if (strPName == "" || strPPw == "") 
					{
						Var.nErr = 0;
					}
				}
			}
			Var.oOutgoingMail.SetUser(strPName, strPPw);
			// Call oOutgoingMail.SetUser( 'Keuer', '%sanne25' )
			// Call oOutgoingMail.SetUser( '', '' )

			// Call PalLogToFile( 'OSetMailProtocol', 0 )
			// Call oOutgoingMail.SetMailProtocol( MAIL_PROTOCOL_POP3 )
			Int.PalLogToFile("OConnect", 0);
			if (Var.nErr == 1) 
			{
				if (Var.oOutgoingMail.Connect() == 0) 
				{
					Int.PalLogToFile("OConnect Success", 0);
					return true;
				}
				else
				{
					Int.PalLogToFile("OConnect Failed", 0);
					return false;
				}
			}
			else
			{
				Int.PalLogToFile("OConnect kein SetUser", 0);
				return false;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public static SalNumber PalMailClose()
		{
			#region Actions
			// ! Disconnect from incomming and outgoing server:
			// Call PalLogToFile( 'IIsConnected', 0 )
			// If oIncomingMail.m_bIsConnected
			// Call PalLogToFile( 'IDisconnect', 0 )
			// Select Case oIncomingMail.Disconnect(  )
			// Default
			// Break
			// !
			Int.PalLogToFile("OIsConnected", 0);
			if (SalMail.m_bIsConnected) 
			{
				Int.PalLogToFile("ODisconnect", 0);
				switch (Var.oOutgoingMail.Disconnect())
				{
					default:
						break;
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nNumber"></param>
		/// <returns></returns>
		public static SalNumber PalCheckNULL(SalNumber nNumber)
		{
			#region Actions
			// 13.05.14 F2027
			if (nNumber == SalNumber.Null) 
			{
				nNumber = 0;
			}
			return nNumber;
			#endregion
		}
		
		/// <summary>
		/// 24.06.14 Ä1067
		/// </summary>
		/// <param name="strISOLand"></param>
		/// <returns></returns>
		public static SalBoolean PalIsLandEU(SalString strISOLand)
		{
			#region Actions
			if (((SalString)"BE BG CZ DK DE EE IE EL ES FR HR IT CY LV LT LU HU MT NL AT PL PT RO SI FI SE UK GB").Scan(strISOLand.Left(2)) != -1) 
			{
				return true;
			}
			else
			{
				return false;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strSection"></param>
		/// <param name="strEntry"></param>
		/// <param name="nDefault"></param>
		/// <returns></returns>
		public static SalNumber PalGetProfileInt(SalString strSection, SalString strEntry, SalNumber nDefault)
		{
			// String: strFileName
			
			#region Local Variables
			SalNumber nValue = 0;
			#endregion
			
			#region Actions
			// Set nValue = SalGetProfileInt(strSection, strEntry, nDefault, strFileName)
			Var.strINISection = strSection.Left(8);
			Var.strINIEntry = strEntry.Left(20);
			Var.strINIValue = "";
			Int.SqlImmedSel("SELECT inivalue INTO :strINIValue FROM ini WHERE inisection = :strINISection AND inientry = :strINIEntry");
			if (Var.strINIValue != "") 
			{
				nValue = Int.PalValNum(Var.strINIValue);
			}
			else
			{
				nValue = nDefault;
			}
			return nValue;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strSection"></param>
		/// <param name="strEntry"></param>
		/// <param name="nDefault"></param>
		/// <param name="strINIFile"></param>
		/// <returns></returns>
		public static SalNumber PalGetProfileReal(SalString strSection, SalString strEntry, SalNumber nDefault, SalString strINIFile)
		{
			#region Local Variables
			SalString strValue = "";
			SalNumber nResult = 0;
			SalNumber nValue = 0;
			#endregion
			
			#region Actions
			Sal.GetProfileString(strSection, strEntry, "XX", ref strValue, strINIFile);
			// If strEntry = 'Beh#Datum'
			// Call SalStatusSetText(frmBehErf, '#' || strValue || '#' || SalNumberToStrX(PalValNum(strValue),2) || '#' || SalNumberToStrX(SalStrToNumber(strValue),2) || '#')
			if (strValue == "XX") 
			{
				return nDefault;
			}
			else
			{
				// Return PalValNum(strValue)
				// 13.10.04
				nResult = strValue.ToNumber();
				if (nResult == 0) 
				{
					nResult = Int.PalStripKommaPunkt(strValue).ToNumber();
				}
				return nResult;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strSection"></param>
		/// <param name="strEntry"></param>
		/// <param name="strDefault"></param>
		/// <param name="strValue"></param>
		/// <param name="strFileName"></param>
		/// <returns></returns>
		public static SalNumber PalGetProfileString(SalString strSection, SalString strEntry, SalString strDefault, ref SalString strValue, SalString strFileName)
		{
			#region Actions
			Sal.GetProfileString(strSection, strEntry, strDefault, ref strValue, strFileName);
			Var.strINISection = strSection.Left(8);
			Var.strINIEntry = strEntry.Left(50);
			Var.strINIValue = "";
			Int.SqlImmedSel("SELECT inivalue INTO :strINIValue FROM ini WHERE inisection = :strINISection AND inientry = :strINIEntry");
			if (Var.strINIValue != "") 
			{
				strValue = Var.strINIValue;
			}
			return strValue.Length;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strSection"></param>
		/// <param name="strEntry"></param>
		/// <param name="strValue"></param>
		/// <returns></returns>
		public static SalBoolean PalSetProfileString(SalString strSection, SalString strEntry, SalString strValue)
		{
			// String: strFileName
			
			#region Local Variables
			SalBoolean bPExists = false;
			SalBoolean bPOk = false;
			#endregion
			
			#region Actions

			Var.strINISection = strSection.Left(8);
			Var.strINIEntry = strEntry.Left(50);
			Var.strINIValue = ((SalNumber)9).ToCharacter();
			Int.SqlImmedSel("SELECT inivalue INTO :strINIValue FROM ini WHERE inisection = :strINISection AND inientry = :strINIEntry");
			if (Var.strINIValue != ((SalNumber)9).ToCharacter())  // Änderung
			{
				if (Var.strINIValue != strValue.Left(250)) 
				{
					Int.PalLog("INI-Änd." + strSection + "/" + strEntry + " von " + Var.strINIValue + " in " + strValue.Left(250));
					Var.strINIValue = strValue.Left(250);
					bPOk = Int.SqlImmed("UPDATE ini SET inivalue = :strINIValue WHERE inisection = :strINISection AND inientry = :strINIEntry");
				}
			}
			else
			{
				Var.strINIValue = strValue.Left(250);
				bPOk = Int.SqlImmed("INSERT INTO ini (inisection, inientry, inivalue) VALUES(:strINISection, :strINIEntry, :strINIValue)");
			}
			return bPOk;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPText"></param>
		/// <returns></returns>
		public static SalString PalStripKommaPunkt(SalString strPText)
		{
			#region Actions
			while (strPText.Scan(",") != -1) 
			{
				strPText = strPText.Left(strPText.Scan(",")) + strPText.Mid(strPText.Scan(",") + 1, 255);
			}
			while (strPText.Scan(".") != -1) 
			{
				strPText = strPText.Left(strPText.Scan(".")) + strPText.Mid(strPText.Scan(".") + 1, 255);
			}
			return strPText.Trim();
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWndPItem"></param>
		/// <param name="nPColor"></param>
		/// <returns></returns>
		public static SalNumber PalPrepareMTbl(SalWindowHandle hWndPItem, SalNumber nPColor)
		{
			#region Actions
			MT.MTbl.SubClass(hWndPItem);
			if (nPColor != -1)  // 02.12.16
			{
				if (nPColor == 0 || nPColor == SalNumber.Null) 
				{
					nPColor = 0xffffe0;
				}
				MT.MTbl.SetAltRowBackColors(hWndPItem, false, Sys.COLOR_White, nPColor);
			}
			MT.MTbl.SetFlags(hWndPItem, MT.MTbl.MTBL_FLAG_ADAPT_LIST_WIDTH, true);
			// Call MTblSetFlags( hWndPItem, MTBL_FLAG_EXPAND_CRLF, TRUE )
			// Call MTblSetFlags( hWndPItem, MTBL_FLAG_EXPAND_TABS, TRUE )
			// Call MTblSetFlags( hWndPItem, MTBL_FLAG_GRADIENT_HEADERS, TRUE )
			// Call MTblSetFlags( hWndPItem, MTBL_FLAG_MOVE_INP_FOCUS_UD_EX, TRUE )
			// Call MTblSetFlags( hWndPItem, MTBL_FLAG_NO_FREE_COL_AREA_LINES, TRUE )
			// Call MTblSetFlags( hWndPItem, MTBL_FLAG_NO_FREE_ROW_AREA_LINES, TRUE )
			MT.MTbl.SetFlags(hWndPItem, MT.MTbl.MTBL_FLAG_THUMBTRACK_VSCROLL, true);
			// 16.02.17 raus, da Probleme mit runterscrollen
			// Call MTblSetFlags( hWndPItem, MTBL_FLAG_VARIABLE_ROW_HEIGHT, TRUE )

			MT.MTbl.SetSelectionColors(hWndPItem, Sys.COLOR_White, Sal.ColorFromRGB(128, 192, 250));
			MT.MTbl.SetPasswordChar(hWndPItem, "*");
			// Call MTblDefineColLines( hWndItem, MTLS_DOT, MTBL_COLOR_UNDEF )
			// Call MTblDefineRowLines( hWndItem, MTLS_INVISIBLE, MTBL_COLOR_UNDEF  )
			// 06.10.15
			// Call MTblSetFlags( hWndItem, MTBL_FLAG_COLOR_ENTIRE_ROW, TRUE )
			// Call MTblEnableExtMsgs( hWndPItem, TRUE )
			// Call objHiLiDef.Init(  )
			// Set objHiLiDef.BackColor = SalColorFromRGB( 255, 192, 128 )
			// ! Set objHiLiDef.BackColor = SalColorFromRGB( 255, 255, 200 )
			// Call MTblDefineHighlighting( hWndPItem, MTBL_ITEM_ROW, MTBL_PART_UNDEF, objHiLiDef, 0 )

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hPWndTbl"></param>
		/// <param name="nPRowFlag"></param>
		/// <param name="nPPic"></param>
		/// <returns></returns>
		public static SalNumber PalTblSetRowPicture(SalWindowHandle hPWndTbl, SalNumber nPRowFlag, SalNumber nPPic)
		{
			#region Actions
			// 26.06.13
			// If not MTblIsSubClassed( hPWndTbl )
			// Call VisTblSetRowPicture (tblWartezimmer, ROW_New, hPicNew)
			// Else
			if (MT.MTbl.SubClass(hPWndTbl)) 
			{
				MT.MTbl.SetRowFlagImage(hPWndTbl, nPRowFlag, nPPic, MT.MTbl.MTSI_NOSELINV);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hBSHandle"></param>
		/// <param name="bSize"></param>
		/// <returns></returns>
		public static SalNumber PalGetSize(SalWindowHandle hBSHandle, SalBoolean bSize)
		{
			#region Local Variables
			SalBoolean bBSOk = false;
			SalString strBSHandle = "";
			SalNumber nFUx = 0;
			SalNumber nFUy = 0;
			SalNumber nPx = 0;
			SalNumber nPy = 0;
			SalNumber nDummyDM = 0;
			#endregion
			
			#region Actions
			bBSOk = hBSHandle.GetName(ref strBSHandle);

			hBSHandle.GetSize(ref Var.nBSw, ref Var.nBSh);
			hBSHandle.GetLocation(ref Var.nBSx, ref Var.nBSy);
			Var.nBSState = hBSHandle.GetWindowState();

			Var.nBSx = Int.PalGetProfileIntR(strBSHandle, "x", Var.nBSx * 1000, "TVN") / 1000;
			Var.nBSy = Int.PalGetProfileIntR(strBSHandle, "y", Var.nBSy * 1000, "TVN") / 1000;
			Var.nBSw = Int.PalGetProfileIntR(strBSHandle, "w", Var.nBSw * 1000, "TVN") / 1000;
			Var.nBSh = Int.PalGetProfileIntR(strBSHandle, "h", Var.nBSh * 1000, "TVN") / 1000;
			Var.nBSState = Int.PalGetProfileIntR(strBSHandle, "State", Var.nBSState * 1000, "TVN") / 1000;

			// 17.02.10 OTF385
			nPx = hBSHandle.FormUnitsToPixels(Var.nBSx, false);
			nPy = hBSHandle.FormUnitsToPixels(Var.nBSy, true);
			nFUx = hBSHandle.PixelsToFormUnits(Var.FPrnSourceWidth, false);
			nFUy = hBSHandle.PixelsToFormUnits(Var.FPrnSourceHeight, true);
			// 06.05.15 nBSx -> (nBSx+nBSw)   / nBSy -> (nBSy+nBSh)
			if (Var.nBSx < 0 || Var.nBSx > nFUx) 
			{
				Var.nBSx = 0;
			}
			if (Var.nBSy < 0 || Var.nBSy > nFUy) 
			{
				Var.nBSy = 0;
			}
			// If FPrnSourceWidth < 800 Or FPrnSourceHeight < 600
			// 25.06.12 F1338
			// Set nDummyDM = SalPixelsToFormUnits(hBSHandle, FPrnSourceWidth, FALSE)
			// If (nBSx+nBSw) > nDummyDM
			// Set nBSx = SalPixelsToFormUnits(hBSHandle, FPrnSourceWidth, FALSE) - nBSw
			// Set nBSw = SalPixelsToFormUnits(hBSHandle, FPrnSourceWidth, FALSE) - nBSx
			// If (nBSy+nBSh) > SalPixelsToFormUnits(hBSHandle, FPrnSourceHeight, TRUE)
			// Set nBSy = SalPixelsToFormUnits(hBSHandle, FPrnSourceHeight, TRUE) - nBSh
			// Set nBSh = SalPixelsToFormUnits(hBSHandle, FPrnSourceHeight, TRUE) - nBSy

			// 30.10.09 OTÄ326 if bSize
			if (bSize) 
			{
				hBSHandle.SetSize(Var.nBSw, Var.nBSh);
			}
			hBSHandle.SetLocation(Var.nBSx, Var.nBSy);
			// Set nBSState = SalGetWindowState ( hBSHandle )


			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hBSHandle"></param>
		/// <returns></returns>
		public static SalNumber PalSetSize(SalWindowHandle hBSHandle)
		{
			#region Local Variables
			SalBoolean bBSOk = false;
			SalString strBSHandle = "";
			#endregion
			
			#region Actions
			bBSOk = hBSHandle.GetName(ref strBSHandle);

			hBSHandle.GetSize(ref Var.nBSw, ref Var.nBSh);
			hBSHandle.GetLocation(ref Var.nBSx, ref Var.nBSy);
			Var.nBSState = hBSHandle.GetWindowState();

			// 18.03.10 OTF406 If davorgesetzt
			if (Var.nBSState != 4)  // 4 = Minimized
			{
				Int.PalSetProfileStringR(strBSHandle, "x", (Var.nBSx * 1000).ToString(0), "TVN");
				Int.PalSetProfileStringR(strBSHandle, "y", (Var.nBSy * 1000).ToString(0), "TVN");
				Int.PalSetProfileStringR(strBSHandle, "w", (Var.nBSw * 1000).ToString(0), "TVN");
				Int.PalSetProfileStringR(strBSHandle, "h", (Var.nBSh * 1000).ToString(0), "TVN");
			}
			Int.PalSetProfileStringR(strBSHandle, "State", (Var.nBSState * 1000).ToString(0), "TVN");


			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strSection"></param>
		/// <param name="strEntry"></param>
		/// <param name="nDefault"></param>
		/// <param name="strFileName"></param>
		/// <returns></returns>
		public static SalNumber PalGetProfileIntR(SalString strSection, SalString strEntry, SalNumber nDefault, SalString strFileName)
		{
			#region Local Variables
			SalNumber nValue = 0;
			#endregion
			
			#region Actions
			nValue = Sal.GetProfileInt(strSection, strEntry, nDefault, strFileName);
			return nValue;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="dtDateOld"></param>
		/// <param name="dtDateRecent"></param>
		/// <returns></returns>
		public static SalNumber PalTimeDiffWorkDay(SalDateTime dtDateOld, SalDateTime dtDateRecent)
		{
			#region Local Variables
			SalNumber nMO = 0;
			SalNumber nJO = 0;
			SalNumber nWO = 0;
			SalNumber nTO = 0;
			SalNumber nStdO = 0;
			SalNumber nMinO = 0;
			SalNumber nMR = 0;
			SalNumber nJR = 0;
			SalNumber nWR = 0;
			SalNumber nTR = 0;
			SalNumber nStdR = 0;
			SalNumber nMinR = 0;
			SalNumber nRet = 0;
			// File Handle: hFile
			#endregion
			
			#region Actions
			// 06.01.16 F2603
			// Set nMO = SalDateMonth( dtDateOld )
			nJO = dtDateOld.Year();
			//FC:FINAL: replacement for SalDateWeekNumber
			nWO = Int.SalDateWeekNumber(dtDateOld);
			nTO = dtDateOld.Weekday();
			nStdO = dtDateOld.Hour();
			nMinO = dtDateOld.Minute();
			// Set nMR = SalDateMonth( dtDateRecent )
			nJR = dtDateRecent.Year();
            //FC:FINAL: replacement for SalDateWeekNumber
            nWR = Int.SalDateWeekNumber(dtDateRecent);
            nTR = dtDateRecent.Weekday();
			nStdR = dtDateRecent.Hour();
			nMinR = dtDateRecent.Minute();

			// Call SalFileOpen( hFile, 'K:\\TimeDiff.txt', OF_Text|OF_Append )
			// If nJO < nJR
			// Call SalMessageBeep( 0 )
			if (nJO < nJR) 
			{
				nWR = nWR + (nJR - nJO) * 52;
			}
			nRet = nMinR - nMinO;
			// Call SalFilePutStr( hFile, PalDateToStrDE( SalDateCurrent(  ) ) || ';' || PalDateToStrJJJJMMTThhmmss( dtDateOld ) || ';' || PalDateToStrJJJJMMTThhmmss( dtDateRecent ) || ';' ||  SalNumberToStrX( nRet, 0) || 'Min;' || SalNumberToStrX( nMinR, 0) || ' - ' || SalNumberToStrX( nMinO, 0) )
			nRet = nRet + (nStdR - nStdO) * 60;
			// Call SalFilePutStr( hFile, PalDateToStrDE( SalDateCurrent(  ) ) || ';' || PalDateToStrJJJJMMTThhmmss( dtDateOld ) || ';' || PalDateToStrJJJJMMTThhmmss( dtDateRecent ) || ';' ||  SalNumberToStrX( nRet, 0) || 'Std;' || SalNumberToStrX( nStdR, 0) || ' - ' || SalNumberToStrX( nStdO, 0) )
			nRet = nRet + (nTR - nTO) * 60 * 8;
			// Call SalFilePutStr( hFile, PalDateToStrDE( SalDateCurrent(  ) ) || ';' || PalDateToStrJJJJMMTThhmmss( dtDateOld ) || ';' || PalDateToStrJJJJMMTThhmmss( dtDateRecent ) || ';' ||  SalNumberToStrX( nRet, 0) || 'Tage;' || SalNumberToStrX( nTR, 0) || ' - ' || SalNumberToStrX( nTO, 0) )
			nRet = nRet + (nWR - nWO) * 60 * 8 * 5;
			// Call SalFilePutStr( hFile, PalDateToStrDE( SalDateCurrent(  ) ) || ';' || PalDateToStrJJJJMMTThhmmss( dtDateOld ) || ';' || PalDateToStrJJJJMMTThhmmss( dtDateRecent ) || ';' ||  SalNumberToStrX( nRet, 0) || 'Wochen;' || SalNumberToStrX( nWR, 0) || ' - ' || SalNumberToStrX( nWO, 0) )
			// Set nRet = nRet + (nJR - nJO) * 60 * 8 * 20 * 12

			// If ( nWR - nWO ) != 0
			// Set nRet = nRet - (60 * 8 * 2) * (nWR - nWO)
			// Call SalFileClose( hFile)

			return nRet;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPFunktion"></param>
		/// <param name="strUnterbereich"></param>
		/// <param name="nPDauerMilliSek"></param>
		/// <returns></returns>
		public static SalNumber PalLogDauer(SalString strPFunktion, SalString strUnterbereich, SalNumber nPDauerMilliSek)
		{
			#region Local Variables
			SalFileHandle hPFile = SalFileHandle.Null;
			SalString strPComputer = "";
			SalString strPText = "";
			SalString strPUser = "";
			#endregion
			
			#region Actions
			if (Int.PalGetUser(ref strPUser, ref strPComputer)) 
			{
			}
			if (!(hPFile.Open(Const.PATH_LOG + "LogDauer.txt", Sys.OF_Exist))) 
			{
				hPFile.Open(Const.PATH_LOG + "LogDauer.txt", (Sys.OF_Create | Sys.OF_Text));
				hPFile.Open(Const.PATH_LOG + "LogDauer.txt", (Sys.OF_Append | Sys.OF_Text));
			}
			else
			{
				hPFile.Open(Const.PATH_LOG + "LogDauer.txt", (Sys.OF_Append | Sys.OF_Text));
			}
			// If SalFilePutStr(hPFile, PalDateToStrJJJJMMTThhmmss( SalDateCurrent() ) || ';' || strProgVer || ';' || strPComputer || ';' || strPUser || ';' || strPFunktion || ';' || SalNumberToStrX( nPDauerMilliSek * 24 * 60 * 60 * 1000, 0 ))
			if (hPFile.PutString(Int.PalDateToStrJJJJMMTThhmmss(SalDateTime.Current) + ";" + Var.strProgVer + ";" + strPComputer + ";" + strPUser + ";" + strPFunktion + ";" + (nPDauerMilliSek * 24 * 60 * 60 * 1000).ToString(0) + ";" + strUnterbereich)) 
			{
			}
			hPFile.Close();

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Löscht jeden Blank in String
		/// </summary>
		/// <param name="strMatch"></param>
		/// <param name="bNurBiserstesNum"></param>
		/// <returns></returns>
		public static SalString PalDelNonNum(SalString strMatch, SalBoolean bNurBiserstesNum)
		{
			#region Local Variables
			SalNumber nCount = 0;
			SalString strTemp = "";
			// 05.11.18 F3234
			SalNumber nLen = 0;
			SalString strZiel = "";
			#endregion
			
			#region Actions
			// 05.11.18 F3234
			nCount = 0;
			nLen = strMatch.Length;
			strZiel = "";
			// 17.02.16 F2858
			// 05.11.18 F3234 + Else
			if (bNurBiserstesNum) 
			{
				while (true)
				{
					if (strMatch.Length == 0) 
					{
						break;
					}
					strTemp = strMatch.Left(1);
					if (strTemp < "0" || strTemp > "9") 
					{
						strMatch = strMatch.Mid(1, 32000);
					}
					else
					{
						if (bNurBiserstesNum) 
						{
							strZiel = strMatch;
							break;
						}
					}
				}
			}
			else
			{
				while (nCount < nLen) 
				{
					strTemp = strMatch.Mid(nCount, 1);
					if (strTemp >= "0" && strTemp <= "9") 
					{
						strZiel = strZiel + strTemp;
					}
					nCount = nCount + 1;
				}
			}

			return strZiel;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPArztNr"></param>
		/// <param name="nPHalterNr"></param>
		/// <returns></returns>
		public static SalNumber PalCheckELobBez(SalNumber nPArztNr, SalNumber nPHalterNr)
		{
			#region Actions
			// 04.12.17 Ä1433
			Var.nELArztNr = nPArztNr;
			Var.nELHalterNr = nPHalterNr;
			Int.SqlImmedSel("SELECT ANR2 INTO :nELArztNr2 FROM A WHERE AARZTNR = :nELArztNr");
			if (Var.nELArztNr2 == 0) 
			{
				Var.nELArztNr2 = Var.nELArztNr;
			}
			Int.SqlIstDa("FROM el WHERE " + Int.PalArztNr("el", Var.nELArztNr, Var.nELArztNr2) + " AND elhalternr = :nELHalterNr AND elerledigt = \'N\'", ref Var.bExists);
			if (Var.bExists) 
			{
				Int.SqlIstDa("FROM rk WHERE " + Int.PalArztNr("rk", Var.nELArztNr, Var.nELArztNr2) + @" AND rkhalternr = :nELHalterNr AND rkkzzahl<2
AND (rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)<>0 AND rkdeaktiv IS NULL", ref Var.bExists);
				if (!(Var.bExists)) 
				{
					Int.SqlIstDa("FROM pr WHERE " + Int.PalArztNr("pr", Var.nELArztNr, Var.nELArztNr2) + " AND prhalternr = :nELHalterNr AND prbezahlt IS NULL", ref Var.bExists);
					if (!(Var.bExists)) 
					{
						Int.SqlImmed("UPDATE el SET elerledigt = \'J\', elerldatum = SYSDATETIME WHERE " + Int.PalArztNr("el", Var.nELArztNr, Var.nELArztNr2) + " AND elhalternr = :nELHalterNr AND elerledigt = \'N\'");
						Int.PalLog("CheckELobBez: auf erl. gesetzt " + Int.PalStrNum(Var.nELArztNr, 4, 0) + "/H" + Int.PalStrNum(Var.nELHalterNr, 5, 0));
						Sal.MessageBox("EL auf erledigt gesetzt für: " + Int.PalStrNum(Var.nELArztNr, 4, 0) + "/H" + Int.PalStrNum(Var.nELHalterNr, 5, 0), "Erinnerungsliste", (Sys.MB_Ok | Sys.MB_IconAsterisk));
					}
				}
			}
			return Var.bExists;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strUnterordner"></param>
		/// <param name="strFileName"></param>
		/// <param name="strFileNameNeu"></param>
		/// <returns></returns>
		public static SalBoolean PalCopyBCDatei(SalString strUnterordner, SalString strFileName, SalString strFileNameNeu)
		{
			#region Local Variables
			SalBoolean bFileOk = false;
			SalNumber nAnzahl = 0;
			SalString strOrdn = "";
			SalString strOrdner = "";
			#endregion
			
			#region Actions

			if (!(Vis.DosExist(Var.strPfadArchiv))) 
			{
				if (!(Sal.FileCreateDirectory(Var.strPfadArchiv))) 
				{
					Var.strPfadArchiv = "";
				}
			}
			if (Var.strPfadArchiv != "") 
			{
				if (!(Vis.DosExist(Var.strPfadArchiv + Sql.Database + "-Rechnungen"))) 
				{
					if (!(Sal.FileCreateDirectory(Var.strPfadArchiv + Sql.Database + "-Rechnungen"))) 
					{
						Var.strPfadArchiv = "";
					}
				}
			}
			// 03.04.09 OTÄ153
			if (Var.strPfadArchiv == "") 
			{
				Sal.MessageBox("Der Ordner " + Var.strPfadArchiv + Sql.Database + @"-Rechnungen ist nicht vorhanden.
Die Anlage kann daher nicht der Rechnung zugefügt werden.

Dieses Problem muss geklärt werden, bevor mit der Abrechnung fortgefahren werden kann!", "Achtung", (Sys.MB_Ok | Sys.MB_IconStop));
				return false;
			}
			else
			{
				bFileOk = false;
				strOrdner = "";

				nAnzahl = strUnterordner.Tokenize("", "\\", Var.strArrToken);
				if (nAnzahl > 0) 
				{
					Var.nCount = 0;
					while (Var.nCount <= nAnzahl) 
					{
						strOrdn = Var.strArrToken[Var.nCount].Trim();
						Var.nCount = Var.nCount + 1;
						if (strOrdn != "") 
						{
							strOrdner = strOrdner + "\\" + strOrdn;

							if (!(Vis.DosExist(Var.strPfadArchiv + Sql.Database + "-Rechnungen" + strOrdner))) 
							{
								if (!(Sal.FileCreateDirectory(Var.strPfadArchiv + Sql.Database + "-Rechnungen" + strOrdner))) 
								{
									Sal.MessageBox("Der Ordner " + Var.strPfadArchiv + Sql.Database + strOrdner + "-Rechnungen" + @" kann nicht angelegt werden!
Die Anlage kann daher nicht der Rechnung zugefügt werden.

Dieses Problem muss geklärt werden, bevor mit der Abrechnung fortgefahren werden kan!", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
									return false;
								}
								else
								{
									bFileOk = true;
								}
							}
							else
							{
								bFileOk = true;
							}
						}
					}
				}
				// 27.08.18
				if (Vis.FileCopy("\\\\archiv01\\noviplan.net.doc\\PrintMachineBeilagen\\" + strFileName, Var.strPfadArchiv + Sql.Database + "-Rechnungen" + strOrdner + "\\" + strFileNameNeu) < 0) 
				{
					Sal.MessageBox("Die Datei " + strFileName + " konnte nicht in den Ordner " + Var.strPfadArchiv + Sql.Database + @"-Rechnungen kopiert werden.
Die Anlage kann daher nicht der Rechnung zugefügt werden.

Dieses Problem muss geklärt werden, bevor mit der Abrechnung fortgefahren werden kann!", "Achtung", (Sys.MB_Ok | Sys.MB_IconStop));
					return false;
				}

				if (bFileOk) 
				{
					return true;
				}
			}

			return false;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public static SalNumber PalGetNewMahnNr()
		{
			#region Local Variables
			SalNumber nPMax = 0;
			#endregion
			
			#region Actions
			Int.SqlImmedSel("SELECT MAX(manr) INTO :nMAMahnNr FROM ma");
			Int.SqlImmedSel("SELECT MAX(mvnr) INTO :nMVMahnNr FROM mv");
			if (Var.nMAMahnNr == SalNumber.Null) 
			{
				Var.nMAMahnNr = 0;
			}
			if (Var.nMVMahnNr == SalNumber.Null) 
			{
				Var.nMVMahnNr = 0;
			}
			if (Var.nMVMahnNr > Var.nMAMahnNr) 
			{
				nPMax = Var.nMVMahnNr + 1;
			}
			else
			{
				nPMax = Var.nMAMahnNr + 1;
			}
			return nPMax;
			#endregion
		}
		
		/// <summary>
		/// wandelt Datum in String um
		/// </summary>
		/// <param name="dtDate"></param>
		/// <returns></returns>
		public static SalString PalDateToStrSQLBase(SalDateTime dtDate)
		{
			#region Local Variables
			SalString strDate = "";
			SalString strDatum = "";
			#endregion
			
			#region Actions
			strDate = dtDate.ToString();
			strDatum = strDate.Mid(0, 4) + "-" + strDate.Mid(5, 2) + "-" + strDate.Mid(8, 2) + " " + strDate.Mid(11, 2) + ":" + strDate.Mid(14, 2) + ":" + strDate.Mid(17, 2) + "." + strDate.Mid(20, 2);
			return strDatum;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPLZ"></param>
		/// <param name="nDM"></param>
		/// <param name="strLand"></param>
		/// <param name="strStrasse"></param>
		/// <returns></returns>
		public static SalString PalHoleGericht(SalString strPLZ, SalNumber nDM, SalString strLand, ref SalString strStrasse)
		{
			#region Local Variables
			SalBoolean bExists = false;
			SalString strSelect = "";
			#endregion
			
			#region Actions
			// #20
			// 15.03.16 Ä960 Ausländer wie Deutsche behandeln
			// If strLand != 'DE' and strLand != ''
			// If nDM<= 5000		! DM 10000		! Amtsgericht
			// Set strBez = 'AG 31008 Elze'
			// Else
			// Set strBez = 'LG 31134 Hildesheim'
			// Return strBez
			// Else
			// If nDM<= 5000		! DM 10000		! Amtsgericht
			// Set strSelect = ' FROM ge WHERE gelg=0 AND geplz= ' || strPLZ
			// Else ! Landgericht
			// Set strSelect = ' FROM ge WHERE gelg=1 AND geplz= ' || strPLZ
			// Call SqlIstDa(strSelect , bExists)
			// If bExists
			// Call SqlImmedSel('SELECT gebez INTO :frmMBErf.strBez ' || strSelect)
			// Return strBez
			// 13.05.19 Ä1852 + Straße
			// 23.07.19 F4523 geplz= ' || strPLZ -> geplz= \'' || strPLZ || '\''
			if (nDM <= 5000)  // DM 10000		! Amtsgericht
			{
				strSelect = " FROM ge WHERE gelg=0 AND geplz= \'" + strPLZ + "\'";
			}
			else
			{
				strSelect = " FROM ge WHERE gelg=1 AND geplz= \'" + strPLZ + "\'";
			}
			Int.SqlIstDa(strSelect, ref bExists);
			if (bExists) 
			{
				Int.SqlImmedSel("SELECT gebez, gestr INTO :strMBGericht, :strMBStrasse " + strSelect);
				if (Var.strMBStrasse == "") 
				{
					Int.SqlImmedSel("SELECT gestr INTO :strMBStrasse " + strSelect + " AND gestr IS NOT NULL");
				}
				strStrasse = Var.strMBStrasse;
				return Var.strMBGericht;
			}

			return "";
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public static SalNumber PalGetNewUeberwNr()
		{
			#region Local Variables
			SalNumber nPMax = 0;
			#endregion
			
			#region Actions
			// 16.07.19 Ä1860
			Int.SqlImmedSel("SELECT MAX( ueexportnr ) INTO :nIstDaAnz FROM ue WHERE ueerldat IS NULL OR ueerldat >= @YEARBEG(SYSDATE)");
			if (Var.nIstDaAnz == SalNumber.Null) 
			{
				nPMax = 1;
			}
			else
			{
				nPMax = Var.nIstDaAnz + 1;
			}
			return nPMax;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCount"></param>
		/// <param name="strTyp"></param>
		/// <param name="str1"></param>
		/// <param name="str2"></param>
		/// <returns></returns>
		public static SalNumber PalPrepareRecordsinArray(SalNumber nCount, SalString strTyp, ref SalString str1, ref SalString str2)
		{
			#region Actions
			// 07.08.19 F4528
			if (strTyp == "N") 
			{
				if (Var.nN[nCount] == SalNumber.Null) 
				{
					str1 = "<leer>";
				}
				else
				{
					str1 = Var.nN[nCount].ToString(2);
				}
				if (Var.nN2[nCount] == SalNumber.Null) 
				{
					str2 = "<leer>";
				}
				else
				{
					str2 = Var.nN2[nCount].ToString(2);
				}
			}
			else if (strTyp == "S") 
			{
				if (Var.strS[nCount] == "") 
				{
					str1 = "<leer>";
				}
				else
				{
					str1 = Var.strS[nCount];
				}
				if (Var.strS2[nCount] == "") 
				{
					str2 = "<leer>";
				}
				else
				{
					str2 = Var.strS2[nCount];
				}
			}
			else if (strTyp == "LS") 
			{
				if (Var.lsS[nCount] == "") 
				{
					str1 = "<leer>";
				}
				else
				{
					str1 = Var.lsS[nCount];
				}
				if (Var.lsS2[nCount] == "") 
				{
					str2 = "<leer>";
				}
				else
				{
					str2 = Var.lsS2[nCount];
				}
			}
			else if (strTyp == "D") 
			{
				if (Var.dtD[nCount] == SalDateTime.Null) 
				{
					str1 = "<leer>";
				}
				else
				{
					str1 = Int.PalDateToStr(Var.dtD[nCount]);
				}
				if (Var.dtD2[nCount] == SalDateTime.Null) 
				{
					str2 = "<leer>";
				}
				else
				{
					str2 = Int.PalDateToStr(Var.dtD2[nCount]);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// erstellt die Datengrundlage für eine Forderungsaufstellung
		/// </summary>
		/// <param name="nPR"></param>
		/// <param name="nArzt"></param>
		/// <param name="nHalter"></param>
		/// <param name="strZusatzkosten"></param>
		/// <param name="nZusatzkosten"></param>
		/// <param name="dtPDatum"></param>
		/// <param name="bRaZaZinsen">29.03.16 Ä1358</param>
		/// <param name="bFingiert"></param>
		/// <param name="bVAPfue">12.09.16 F2758</param>
		/// <returns></returns>
		public static SalBoolean PalFA(SalNumber nPR, SalNumber nArzt, SalNumber nHalter, SalString strZusatzkosten, SalNumber nZusatzkosten, SalDateTime dtPDatum, SalBoolean bRaZaZinsen, SalBoolean bFingiert, SalBoolean bVAPfue)
		{
			#region Local Variables
			SqlLocals.PalFALocals locals = new SqlLocals.PalFALocals();
			#endregion
			
			#region Actions
			using (new SqlContext(locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.nPR = nPR;
				locals.nArzt = nArzt;
				locals.nHalter = nHalter;
				locals.strZusatzkosten = strZusatzkosten;
				locals.nZusatzkosten = nZusatzkosten;
				locals.dtPDatum = dtPDatum;
				locals.bRaZaZinsen = bRaZaZinsen;
				locals.bFingiert = bFingiert;
				locals.bVAPfue = bVAPfue;

				Var.nFAArzt = locals.nArzt;
				Var.nFAHalter = locals.nHalter;
				// 03.04.08 F358
				Var.nProzNr = 0;
				// 29.06.10 OTÄ433
				locals.bRZFetched = false;

				Int.SqlImmedSel("SELECT ANR2 INTO :nFAArzt2 FROM A WHERE AARZTNR = :nFAArzt");
				if (Var.nFAArzt2 == 0) 
				{
					Var.nFAArzt2 = Var.nFAArzt;
				}

				Int.SqlImmedSel(@"SELECT MAX(prdnr)
INTO :nFAPRNr
FROM prd
WHERE prdhalternr=:nFAHalter
and " + Int.PalArztNr("prd", Var.nFAArzt, Var.nFAArzt2));
				Var.ndlgDM = SalNumber.Null;
				// 05.01.11 ModalDialog, nur noch, wenn nicht in Parameter angegeben
				if (locals.nZusatzkosten == SalNumber.Null) 
				{
					dlgTextPRundDM.ModalDialog(Sys.hWndForm, "Geben Sie eventuelle Zusatzkosten an :", ref Var.strFAText, ref Var.nFAPRNr, ref Var.nFADM);
				}
				else
				{
					Var.strFAText = locals.strZusatzkosten;
					Var.nFADM = locals.nZusatzkosten;
					Var.ndlgDM = 1;
				}
				while (Var.ndlgDM == SalNumber.Null) 
				{
				}
				// 07.09.06 F55 + If ndlgDM != 0
				if (Var.ndlgDM != 0) 
				{
					// 18.01.11 Ä498
					if (locals.dtPDatum == SalDateTime.Null) 
					{
						Var.dtdlgDatum = SalDateTime.Current;
						dlgDatum.ModalDialog(Sys.hWndForm, "Datum der Forderungsaufstellung :", ref Var.dtdlgDatum);
					}
					else
					{
						Var.dtdlgDatum = locals.dtPDatum;
					}
					Var.dtdlgDatum = new SalDateTime(Var.dtdlgDatum.Year(), Var.dtdlgDatum.Month(), Var.dtdlgDatum.Day(), 23, 59, 59);
					// 27.06.07
					// #25
					Int.SqlConnection(ref Var.hSqlBZ);
					// 26.01.07 F112
					Int.SqlConnection(ref Var.hSqlZi);
					Int.SqlConnection(ref Var.hSqlZiZahl);
					Int.SqlConnection(ref locals.hSqlFA);
					// 26.04.05
					Int.SqlImmed("DELETE FROM FA WHERE fauser = :strBNUser");
					// 28.08.06 Aufgabe 7
					Var.strZust = Int.PalZust(Var.nFAArzt);
					// 09.04.99
					Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn,hname2,hstr,hort, hland
into :frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand
from H where hhalternr=:nFAHalter and harztnr=:nFAArzt AND hdeaktiv IS NULL");
					// 07.06.01 plus , prdmhf
					// 18.12.07
					if (locals.nPR > 0) 
					{
						locals.hSqlFA.PrepareAndExecute(@"SELECT prnr, prdatum, prdma, prdmb, prdmc, praz, prdmhf, prprozhf, prprozko
INTO :nProzNr, :dtFADate, :nDMa, :nDMb, :nDMc, :strAZ, :nDMRechSum, :nZinsen, :nZiKo
FROM pr
WHERE prnr= " + locals.nPR.ToString(0) + " And (prerledigt IS NULL or prerledigt <> 1)");
					}
					else
					{
						locals.hSqlFA.PrepareAndExecute(@"SELECT prnr, prdatum, prdma, prdmb, prdmc, praz, prdmhf, prprozhf, prprozko
INTO :nProzNr, :dtFADate, :nDMa, :nDMb, :nDMc, :strAZ, :nDMRechSum, :nZinsen, :nZiKo
FROM pr
WHERE prhalternr=:nFAHalter
and prarztnr IN (:nFAArzt, :nFAArzt2) And (prerledigt IS NULL or prerledigt <> 1)");
					}
					locals.nFetchRep = locals.hSqlFA.FetchNext();
					while (locals.nFetchRep != Sys.FETCH_EOF) 
					{
						if (Var.nZinsen == 0 || Var.nZinsen == SalNumber.Null) 
						{
							Var.ndlgDM = SalNumber.Null;
							if (1 == dlgDM.ModalDialog(Sys.hWndForm, "Bitte geben Sie für PR" + Int.PalStrNum(Var.nProzNr, 6, 0) + " den Zinssatz für die HF ein  (%) :", ref Var.nZinsen)) 
							{
							}
							while (Var.ndlgDM == SalNumber.Null) 
							{
							}
						}
						// HF
						// Call SalStatusSetText(hWndForm, 'HF')
						// Set nDMRechSum = 0
						Var.hFileFA.Open(Var.strTVNPath + "\\fa.log", (Sys.OF_Create | Sys.OF_Write));
						if (Var.dtFADate <= Var.dtdlgDatum) 
						{
							if (Var.strAZ == "") 
							{
								Var.strAZ = "Mahnbescheid";
							}
							else
							{
								Var.strAZ = "Mahnbescheid AZ " + Var.strAZ;
							}
							// 23.03.16 Ä1358
							// Set strGUID = GetGUID(  )

							Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, fazinshf, fadmhf)
VALUES(:strBNUser, :nProzNr, :dtFADate,  :strAZ, :nZinsen, :nDMRechSum)");

							// 26.01.07 F112
							if (Var.nProzNr >= 16672) 
							{
								Var.nZiHFDM = 0;
								Var.nZiRest = 0;
								Var.nZiSumme = 0;
								// 20.12.07
								Var.dtZiBis = SalDateTime.Null;

								Int.SqlImmedSel(@"SELECT akzust INTO :dtZiBis
FROM ak  WHERE akzust IS NOT NULL AND akproznr = :nProzNr AND aktyp='MB' AND (aktypdetail ='MB' OR aktypdetail ='MB-AG') AND akdeaktiv IS NULL ");
								// 27.09.07 F272
								if (Var.dtZiBis == SalDateTime.Null) 
								{
									Var.dtZiBis = Int.PalAddDay(Var.dtdlgDatum, -1);
								}

								locals.strSelectFA = @"SELECT prdarztnr, prdrechnr, rkrechDat, (rkdmleis+rkdmarzn)
INTO :nZiArztNr, :nZiRechNr, :dtZiRechDat, :nZiHFDM
FROM prd, rk WHERE prdnr = :nProzNr AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr AND rkdeaktiv IS NULL ORDER BY prdarztnr, prdrechnr";
								Int.SqlHandleExec(Var.hSqlZi, locals.strSelectFA, "Fehler", ref Var.nCount);
								Var.nFetchZi = Var.hSqlZi.FetchNext();
								while (Var.nFetchZi != Sys.FETCH_EOF) 
								{
									Var.dtZiVon = Int.PalAddDay(Var.dtZiRechDat, 30);


									// Zinsberechnung je Zahldatum
									locals.strSelectFA = @"SELECT zabuchdat, zadm
INTO :dtZiZahlDat, :nZiZahlDM
FROM za WHERE zaarztnr = :nZiArztNr AND zarechnr = :nZiRechNr AND zadeaktiv IS NULL ORDER BY zabuchdat";
									Var.nZiRest = Var.nZiHFDM;
									Int.SqlHandleExec(Var.hSqlZiZahl, locals.strSelectFA, "Fehler", ref Var.nCount);
									Var.nFetchZiZahl = Var.hSqlZiZahl.FetchNext();
									while (Var.nFetchZiZahl != Sys.FETCH_EOF) 
									{
										Var.hSqlBZ.PrepareAndExecute(@"SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
FROM bz ORDER BY bzvon, bzbis");
										Var.nFetchBZ = Var.hSqlBZ.FetchNext();
										while (Var.nFetchBZ != Sys.FETCH_EOF) 
										{
											// 17.03.08 F350 +
											// Else If dtZiBis < dtBZvon
											// Else If dtZiBis < dtZiVon
											// Else If dtBZbis < dtZiVon
											if (Var.dtZiZahlDat < Var.dtBZvon) 
											{
											}
											else if (Var.dtBZbis < Var.dtZiVon) 
											{
											}
											else if (Var.dtZiBis < Var.dtBZvon) 
											{
											}
											else if (Var.dtZiBis < Var.dtZiVon) 
											{
											}
											else if (Var.dtBZbis < Var.dtZiVon) 
											{
											}
											else
											{
												if (Var.dtZiZahlDat <= Var.dtBZbis) 
												{
													Var.dtBZbis = Int.PalAddDay(Var.dtZiZahlDat, -1);
												}
												// 17.03.08 F350
												if (Var.dtZiBis <= Var.dtBZbis) 
												{
													Var.dtBZbis = Int.PalAddDay(Var.dtZiBis, -1);
												}

												if (Var.dtBZvon < Var.dtZiVon) 
												{
													Var.dtBZvon = Var.dtZiVon;
												}
												Var.nZinsTage = Int.PalTage(Var.dtBZvon, Var.dtBZbis, false);
												Var.nZiSumme = Var.nZiSumme + (Var.nZiRest * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100;

												Var.hFileFA.PutString("a: " + Int.SalDateToStrX(Var.dtBZvon) + "-" + Int.SalDateToStrX(Var.dtBZbis) + " = " + Int.PalStrNum(Var.nZinsTage, 4, 0) + " Tage * " + Int.PalStrNum(Var.nBZZins, 5, 1) + "% auf €" + Int.PalStrNum(Var.nZiRest, 
														8, 2) + " = € " + Int.PalStrNum((Var.nZiRest * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100, 8, 2));

											}

											Var.nFetchBZ = Var.hSqlBZ.FetchNext();
										}

										// Hochsetzen für nächsten Datensatz
										Var.dtZiVon = Var.dtZiZahlDat;
										Var.nZiRest = Var.nZiRest - Var.nZiZahlDM;
										Var.nFetchZiZahl = Var.hSqlZiZahl.FetchNext();
									}
									// Zinsen für Zeitraum von letzter Zahlung bis heute
									Var.hSqlBZ.PrepareAndExecute(@"SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
FROM bz ORDER BY bzvon, bzbis");
									Var.nFetchBZ = Var.hSqlBZ.FetchNext();
									while (Var.nFetchBZ != Sys.FETCH_EOF) 
									{
										if (Var.dtZiBis < Var.dtBZvon) 
										{
										}
										else if (Var.dtZiBis < Var.dtZiVon) 
										{
										}
										else if (Var.dtBZbis < Var.dtZiVon) 
										{
										}
										else
										{
											if (Var.dtZiBis <= Var.dtBZbis) 
											{
												Var.dtBZbis = Int.PalAddDay(Var.dtZiBis, -1);
											}
											if (Var.dtBZvon < Var.dtZiVon) 
											{
												Var.dtBZvon = Var.dtZiVon;
											}
											Var.nZinsTage = Int.PalTage(Var.dtBZvon, Var.dtBZbis, false);
											Var.nZiSumme = Var.nZiSumme + (Var.nZiRest * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100;

											Var.hFileFA.PutString("b: " + Int.SalDateToStrX(Var.dtBZvon) + "-" + Int.SalDateToStrX(Var.dtBZbis) + " = " + Int.PalStrNum(Var.nZinsTage, 4, 0) + " Tage * " + Int.PalStrNum(Var.nBZZins, 5, 1) + "% auf €" + Int.PalStrNum(Var.nZiRest, 
													8, 2) + " = € " + Int.PalStrNum((Var.nZiRest * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100, 8, 2));

										}

										Var.nFetchBZ = Var.hSqlBZ.FetchNext();
									}


									Var.nFetchZi = Var.hSqlZi.FetchNext();
								}
								Var.hSqlZi.Commit();

								Var.strAZ = "vorgerichtliche Zinsen bis " + Int.SalDateToStrX(Var.dtZiBis);
								// 07.01.08 Ä200
								// Call SqlImmed('INSERT INTO fa
								// (fauser, faproznr, fadatum, fatext, faunvzdm)
								// VALUES(:strBNUser, :nProzNr, :dtFADate,  :strAZ, :nZiSumme)')
								Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, fazinsdm)
VALUES(:strBNUser, :nProzNr, :dtFADate,  :strAZ, :nZiSumme)");

							}
							// ENDE F112
						}
						Var.hFileFA.Close();
						// MG
						Sys.hWndForm.SetStatusBarText("Mahngebühren");
						Var.nDMRechSum = 0;
						// 11.03.02
						// 19.10.15 Ä1261
						// Call SqlImmedSel('SELECT sum(rkdmmahn) INTO :nDMRechSum
						// FROM rk,prd WHERE prdnr= :nProzNr AND prdarztnr=rkarztnr AND prdhalternr=rkhalternr AND prdrechnr=rkrechnr')
						Int.SqlImmedSel(@"SELECT prdmmahn INTO :nDMRechSum
FROM pr WHERE prnr= :nProzNr");
						if (Var.nDMRechSum == SalNumber.Null) 
						{
							Int.SqlImmedSel(@"SELECT sum(rkdmmahn) INTO :nDMRechSum
FROM rk,prd WHERE prdnr= :nProzNr AND prdarztnr=rkarztnr AND prdhalternr=rkhalternr AND prdrechnr=rkrechnr AND rkdeaktiv IS NULL");
						}

						if (Var.dtFADate <= Var.dtdlgDatum) 
						{
							Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, faunvzdmtit)
VALUES(:strBNUser, :nProzNr, :dtFADate,  'Nebenforderung', :nDMRechSum)");
						}
						// 25.06.10 OTÄ433 Halterkonto
						// Halterkonto
						// 29.03.16 + and bRaZaZinsen
						if (!(locals.bRZFetched) && locals.bRaZaZinsen) 
						{
							Sys.hWndForm.SetStatusBarText("Halterkonto");
							Var.nDMRechSum = 0;
							// Call SqlImmedSel('SELECT sum(hbdm) INTO :nDMRechSum
							// FROM hb WHERE hbarztnr IN (:nFAArzt, :nFAArzt2) AND hbhalternr = :nFAHalter AND @LEFT(hbcode,2) = \'Zi\'')
							locals.strSelectFA = @"SELECT hbrznr, sum(hbdm) INTO :nFARZNr, :nDMRechSum
FROM hb WHERE hbarztnr IN (:nFAArzt, :nFAArzt2) AND hbhalternr = :nFAHalter AND @LEFT(hbcode,2) = 'Zi' AND hbbuchdat <= :dtdlgDatum GROUP BY 1";
							Int.SqlHandleExec(Var.hSqlZiZahl, locals.strSelectFA, "Fehler", ref Var.nCount);
							Var.nFetchZiZahl = Var.hSqlZiZahl.FetchNext();
							while (Var.nFetchZiZahl != Sys.FETCH_EOF) 
							{
								Var.nDMRechSum = Var.nDMRechSum * -1;
								if (Var.nDMRechSum != 0 && Var.nDMRechSum != SalNumber.Null)  // 18.01.22 F4852
								{
									Var.strDummy = "Zinsen aus Ratenzahlervereinbarung Nr." + Var.nFARZNr.ToString(0);
									Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, faunvzdm)
VALUES(:strBNUser, :nProzNr, :dtdlgDatum,  :strDummy, :nDMRechSum)");
								}
								Var.nFetchZiZahl = Var.hSqlZiZahl.FetchNext();
							}
							locals.bRZFetched = true;
						}
						// AK, MB (unverzinslich)
						Sys.hWndForm.SetStatusBarText("unverz. Kosten");
						// Call SqlImmed('INSERT INTO fa
						// (faproznr, fadatum, fatext, faunvzdm)
						// SELECT akproznr, akdatum, \'Nebenforderung\', ' || PalStrNumDecPoint(nDMa+nDMc,9,2) || '
						// FROM ak WHERE akproznr = :frmRgSuchen.nProzNr AND aktyp=\'MB\' AND aktypdetail =\'MB\'')
						// AK, MB (verzinslich)
						// 14.02.02 lt. Fr. Seil und Fr. Kollay statt 4 jetzt 8% für Kosten
						Sys.hWndForm.SetStatusBarText("verz. Kosten");
						// 12.03.02
						if (Var.nDMb == SalNumber.Null) 
						{
							Var.nDMb = 0;
						}
						if (Var.nDMb != 0) 
						{
							// 11.06.21 Ä1962
							// Call SqlImmed('INSERT INTO fa
							// (fauser, faproznr, fadatum, fatext, fazinsko, fadmko)
							// SELECT \'' || strBNUser || '\', akproznr, akdatum, aktypdetail || \'-Kosten\', 4, ' || PalStrNumDecPoint(nDMb,9,2) || '
							// FROM ak WHERE akproznr = :nProzNr AND aktyp=\'MB\' AND aktypdetail =\'MB\' AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL')
							Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, fazinsko, fadmko)
SELECT '" + Var.strBNUser + "\', akproznr, akdatum, @IF( @ISNA( babuchtext ), aktypdetail || \'-Kosten\', babuchtext ), 4, " + Int.PalStrNumDecPoint(Var.nDMb, 9, 2) + @"
FROM ak,ba WHERE akproznr = :nProzNr AND aktyp='MB' AND aktypdetail ='MB' AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL
 AND aktypdetail=babuart(+) GROUP BY 1,2,3,4,5,6");

						}
						// 24.02.05
						if (Var.nDMa + Var.nDMc != 0) 
						{
							// 18.10.07 F285
							if (Var.nProzNr < 12003) 
							{
								// 11.06.21 Ä1962
								// Call SqlImmed('INSERT INTO fa
								// (fauser, faproznr, fadatum, fatext, faunvzdmtit)
								// SELECT \'' || strBNUser || '\', akproznr, akdatum, aktypdetail || \'-Kosten\', ' || PalStrNumDecPoint(nDMa+nDMc,9,2) || '
								// FROM ak WHERE akproznr = :nProzNr AND aktyp=\'MB\' AND aktypdetail =\'MB\' AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL')
								Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, faunvzdmtit)
SELECT '" + Var.strBNUser + "\', akproznr, akdatum, @IF( @ISNA( babuchtext ), aktypdetail || \'-Kosten\', babuchtext ), " + Int.PalStrNumDecPoint(Var.nDMa + Var.nDMc, 9, 2) + @"
FROM ak,ba WHERE akproznr = :nProzNr AND aktyp='MB' AND aktypdetail ='MB' AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL
 AND aktypdetail=babuart(+) GROUP BY 1,2,3,4,5");

							}
							else
							{
								// 11.06.21 Ä1962
								// Call SqlImmed('INSERT INTO fa
								// (fauser, faproznr, fadatum, fatext, faunvzdmtit)
								// SELECT \'' || strBNUser || '\', akproznr, akdatum, aktypdetail || \'-Kosten\', akdm
								// FROM ak WHERE akproznr = :nProzNr AND aktyp=\'MB\' AND aktypdetail =\'MB\' AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL')
								Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, faunvzdmtit)
SELECT '" + Var.strBNUser + @"', akproznr, akdatum, @IF( @ISNA( babuchtext ), aktypdetail || '-Kosten', babuchtext ), akdm
FROM ak,ba WHERE akproznr = :nProzNr AND aktyp='MB' AND aktypdetail ='MB' AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL
 AND aktypdetail=babuart(+) GROUP BY 1,2,3,4,5");

							}
						}
						Var.nRestVZ = Var.nRestVZ + Var.nDMb;
						// 01.11.07 F292
						// Call SqlImmed('INSERT INTO fa
						// (fauser, faproznr, fadatum, fatext, fazinsko, fadmko)
						// SELECT \'' || strBNUser || '\', akproznr, akdatum, aktypdetail || \'-Kosten\', 4, akdm
						// FROM ak WHERE akproznr = :nProzNr AND aktyp=\'MB\' AND aktypdetail =\'MB-AG\' AND akdatum <= :dtdlgDatum')
						// 11.06.21 Ä1962
						// Call SqlImmed('INSERT INTO fa
						// (fauser, faproznr, fadatum, fatext, fazinsko, fadmko)
						// SELECT \'' || strBNUser || '\', akproznr, @DATEVALUE(akdatum), aktypdetail || \'-Kosten\', 4, SUM(akdm)
						// FROM ak WHERE akproznr = :nProzNr AND aktyp=\'MB\' AND aktypdetail =\'MB-AG\' AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL GROUP BY 1,2,3,4,5')
						Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, fazinsko, fadmko)
SELECT '" + Var.strBNUser + @"', akproznr, @DATEVALUE(akdatum), @IF( @ISNA( babuchtext ), aktypdetail || '-Kosten', babuchtext ), 4, SUM(akdm)
FROM ak,ba WHERE akproznr = :nProzNr AND aktyp='MB' AND aktypdetail ='MB-AG' AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL AND banr=14
 AND aktypdetail=babuart(+) GROUP BY 1,2,3,4,5");


						Int.SqlImmedSel(@"SELECT sum(akdm) INTO :nDMb
FROM ak WHERE akproznr = :nProzNr AND aktyp='MB' AND aktypdetail ='MB-AG' AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL");
						Var.nRestVZ = Var.nRestVZ + Var.nDMb;

						// AK, VB (verzinslich)
						Sys.hWndForm.SetStatusBarText("verz. Kosten");
						// 11.06.21 Ä1962
						// Call SqlImmed('INSERT INTO fa
						// (fauser, faproznr, fadatum, fatext, fazinsko, fadmko)
						// SELECT \'' || strBNUser || '\', akproznr, akdatum, aktypdetail || \'-Kosten\', 4, akdm
						// FROM ak WHERE akproznr = :nProzNr AND aktyp=\'MB\' AND aktypdetail = \'VB\' AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL')
						Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, fazinsko, fadmko)
SELECT '" + Var.strBNUser + @"', akproznr, akdatum, @IF( @ISNA( babuchtext ), aktypdetail || '-Kosten', babuchtext ), 4, akdm
FROM ak,ba WHERE akproznr = :nProzNr AND aktyp='MB' AND aktypdetail = 'VB' AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL
 AND aktypdetail=babuart(+) GROUP BY 1,2,3,4,5,6");

						// AK, Rest (unverzinslich)
						Sys.hWndForm.SetStatusBarText("unverz. Kosten");
						// 23.07.19 F4510 + VBNeu
						// 11.06.21 Ä1962
						// Call SqlImmed('INSERT INTO fa
						// (fauser, faproznr, fadatum, fatext, faunvzdm)
						// SELECT \'' || strBNUser || '\', akproznr, akdatum, aktypdetail || \'-Kosten\', akdm
						// FROM ak WHERE akproznr = :nProzNr AND aktyp=\'MB\' AND aktypdetail  NOT IN (\'MB\', \'MB-AG\', \'VB\', \'VBNeu\') AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL')
						// 28.02.23 F4957
						// Call SqlImmed('INSERT INTO fa
						// (fauser, faproznr, fadatum, fatext, faunvzdm)
						// SELECT \'' || strBNUser || '\', akproznr, akdatum, @IF( @ISNA( babuchtext ), aktypdetail || \'-Kosten\', babuchtext ), akdm
						// FROM ak,ba WHERE akproznr = :nProzNr AND aktyp=\'MB\' AND aktypdetail  NOT IN (\'MB\', \'MB-AG\', \'VB\', \'VBNeu\') AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL
						//  AND aktypdetail=babuart(+) GROUP BY 1,2,3,4,5')
						locals.strSelectFA = "SELECT \'" + Var.strBNUser + @"', akproznr, akdatum, aktypdetail, akdm
INTO :strAkUser, :nAkProzNr, :dtAkDatum, :strAkTypDetail, :nAkDM
FROM ak WHERE akproznr = :nProzNr AND aktyp='MB' AND aktypdetail  NOT IN ('MB', 'MB-AG', 'VB', 'VBNeu') AND akdatum <= :dtdlgDatum AND akdeaktiv IS NULL
 ";
						Int.SqlHandleExec(Var.hSqlZi, locals.strSelectFA, "Fehler", ref Var.nCount);
						Var.nFetchZi = Var.hSqlZi.FetchNext();
						while (Var.nFetchZi != Sys.FETCH_EOF) 
						{
							Var.strBaBuchtext = "";
							Int.SqlImmedSel("SELECT babuchtext INTO :strBaBuchtext FROM ba WHERE babuart = :strAkTypDetail");
							if (Var.strBaBuchtext != "") 
							{
								Var.strAkTypDetail = Var.strBaBuchtext;
							}
							else
							{
								Var.strAkTypDetail = Var.strAkTypDetail + "-Kosten";
							}
							Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, faunvzdm)
VALUES( :strAkUser, :nAkProzNr, :dtAkDatum, :strAkTypDetail, :nAkDM )");

							Var.nFetchZi = Var.hSqlZi.FetchNext();
						}
						Var.hSqlZi.Commit();

						Var.nRestVZ = Var.nRestVZ + Var.nDMb;
						// ZA
						Sys.hWndForm.SetStatusBarText("Zahlungen");
						// 20.08.14 F2120
						Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, fadmhf)
SELECT '" + Var.strBNUser + @"', zaproznr, zabuchdat+0.1, 'Zahlung', sum(zadm*-1)
FROM za WHERE zaproznr = :nProzNr  AND zabuchdat <= :dtdlgDatum AND zadeaktiv IS NULL GROUP BY 1,2,3");
						// Call SqlImmed('INSERT INTO fa
						// (fauser, faproznr, fadatum, fatext, fadmhf)
						// SELECT \'' || strBNUser || '\', zaproznr, zabuchdat+0.1, \'Zahlung\', sum(zadm*-1)
						// FROM za WHERE zaproznr = :nProzNr  AND zabuchdat <= :dtdlgDatum AND zarechnr<999990 GROUP BY 1,2,3')
						// Call SqlImmed('INSERT INTO fa
						// (fauser, faproznr, fadatum, fatext, fadmko)
						// SELECT \'' || strBNUser || '\', zaproznr, zabuchdat+0.1, \'Zahlung\', sum(zadm*-1)
						// FROM za WHERE zaproznr = :nProzNr  AND zabuchdat <= :dtdlgDatum AND zarechnr>=999990 GROUP BY 1,2,3')
						// Call SqlImmedSel( 'SELECT SUM(fadmhf) INTO :nDummyHaben FROM fa WHERE fauser = :strBNUser' )
						// While nDummyHaben < 0
						// Call SqlImmedSel( 'SELECT ROWID, fadmhf, fadatum INTO :strDummy, :nDMRech, :dtRDDatum FROM fa WHERE fauser = :strBNUser AND fadmhf < 0 ORDER BY fadatum DESC' )
						// Set nDMRech = nDMRech - nDummyHaben
						// If nDMRech > 0
						// Set nDummySoll = nDummyHaben + nDMRech
						// Set nDMRech = 0
						// Else
						// Set nDummySoll = nDummyHaben
						// Call SqlImmed( 'UPDATE fa SET fadmhf = :nDMRech WHERE ROWID = :strDummy' )
						// Call SqlImmed( 'INSERT INTO fa (fauser, faproznr, fadatum, fatext, fadmko)
						// VALUES(:strBNUser, :nProzNr, :dtRDDatum, \'Zahlung\', :nDummySoll)')
						// Set nDummyHaben = nDummyHaben - nDummySoll
						// 20.08.14 F2120
						// Call SqlImmedSel( 'SELECT SUM(fadmko) INTO :nDummyHaben FROM fa WHERE fauser = :strBNUser' )
						// While nDummyHaben < 0
						// Call SqlImmedSel( 'SELECT ROWID, fadmko, fadatum INTO :strDummy, :nDMRech, :dtRDDatum FROM fa WHERE fauser = :strBNUser AND fadmko < 0 ORDER BY fadatum DESC' )
						// Set nDMRech = nDMRech - nDummyHaben
						// If nDMRech > 0
						// Set nDummySoll = nDummyHaben + nDMRech
						// Set nDMRech = 0
						// Else
						// Set nDummySoll = nDummyHaben
						// Call SqlImmed( 'UPDATE fa SET fadmko = :nDMRech WHERE ROWID = :strDummy' )
						// Call SqlImmed( 'INSERT INTO fa (fauser, faproznr, fadatum, fatext, faunvzdm)
						// VALUES(:strBNUser, :nProzNr, :dtRDDatum, \'Zahlung\', :nDummySoll)')
						// Set nDummyHaben = nDummyHaben - nDummySoll

						locals.nFetchRep = locals.hSqlFA.FetchNext();
					}
					// Berechnung SEIT
					// 03.04.08 F358
					if (Var.nProzNr > 0) 
					{
						Sys.hWndForm.SetStatusBarText("Hole Startdaten für Zinsberechnung");
						locals.hSqlFA.PrepareAndExecute(@"SELECT DISTINCT faproznr
INTO :nProzNr
FROM fa WHERE fauser = :strBNUser");
						locals.nFetchRep = locals.hSqlFA.FetchNext();
						while (locals.nFetchRep != Sys.FETCH_EOF) 
						{
							// Ermittlung der Zinsen HF
							Var.dtSeit = SalDateTime.Null;
							Int.SqlImmedSel(@"SELECT akzust INTO :dtSeit
FROM ak  WHERE akproznr = :nProzNr AND aktyp='MB' AND (aktypdetail ='MB' OR aktypdetail ='MB-AG') AND akdeaktiv IS NULL ");
							// 20.11.07 F305
							// Call SqlImmed('UPDATE fa SET faseitko = :dtSeit
							// WHERE faproznr = :nProzNr AND fazinshf>=0')
							// 29.11.07
							if (Var.dtSeit != SalDateTime.Null) 
							{
								Var.dtSeit = Int.PalAddDay(Var.dtSeit, 1);
							}
							// Set dtSeit = PalAddDay(dtSeit,1)

							Int.SqlImmed(@"UPDATE fa SET faseitko = :dtSeit
WHERE faproznr = :nProzNr AND fazinshf IS NOT NULL");

							// Ermittlung der Zinsen MB-Kosten
							Var.dtSeit = SalDateTime.Null;
							Int.SqlImmedSel(@"SELECT akzust INTO :dtSeit
FROM ak  WHERE akproznr = :nProzNr AND aktyp='MB' AND aktypdetail ='VB' AND akdeaktiv IS NULL ");
							Int.SqlImmed(@"UPDATE fa SET faseitko = :dtSeit
WHERE faproznr = :nProzNr AND fazinsko>=0");

							locals.nFetchRep = locals.hSqlFA.FetchNext();
						}
						// Haupt-Berechnung
						Sys.hWndForm.SetStatusBarText("Berechne Zinsen");
						Var.nProzNrAlt = 0;
						Var.nRestHF = 0;
						Var.nRestUVZ = 0;
						Var.nRestUVZTit = 0;
						Var.nRestVZ = 0;
						locals.hSqlFA.PrepareAndExecute(@"SELECT ROWID, faproznr, @DATEVALUE(fadatum), fazinshf, fadmhf, fazinsko, fadmko, faseitko, faunvzdm, faunvzdmtit, fazinsdm, fatext
INTO :strROWID, :nProzNr, :dtFADate, :nZinsen, :nDMRech,
:nZinsKo, :nDMKo, :dtSeit, :nUnvzDM, :nUnvzDMTit, :nZinsDM, :strBuchText
FROM fa WHERE fauser = :strBNUser  ORDER BY faproznr, fadatum");
						locals.nFetchRep = locals.hSqlFA.FetchNext();
						while (locals.nFetchRep != Sys.FETCH_EOF) 
						{
							if (Var.nProzNr != Var.nProzNrAlt) 
							{
								Var.nRestHF = 0;
								Var.nRestVZ = 0;
								Var.nRestUVZ = 0;
								Var.nRestUVZTit = 0;
								Var.dtKoSeitAlt = SalDateTime.Null;
								Var.dtHFSeitAlt = SalDateTime.Null;
								// 20.09.16 F2758
								Var.nFADMZins = 0;
							}
							// ### fecher
							//if (Var.nDMRech == 101.14m) 
							//{
							//	Sal.MessageBeep(0);
							//}
							// 16.03.16
							Var.dtFADate2 = new SalDateTime(Var.dtFADate.Year(), Var.dtFADate.Month(), Var.dtFADate.Day(), 0, 0, 0);

							if (Var.nDMRech == SalNumber.Null) 
							{
								Var.nDMRech = 0;
							}
							if (Var.nZinsen == SalNumber.Null) 
							{
								Var.nZinsen = 0;
							}
							if (Var.nZinsKo == SalNumber.Null) 
							{
								Var.nZinsKo = 0;
							}
							if (Var.nDMKo == SalNumber.Null) 
							{
								Var.nDMKo = 0;
							}
							if (Var.nUnvzDM == SalNumber.Null) 
							{
								Var.nUnvzDM = 0;
							}
							if (Var.nUnvzDMTit == SalNumber.Null) 
							{
								Var.nUnvzDMTit = 0;
							}
							if (Var.nZinsDM == SalNumber.Null) 
							{
								Var.nZinsDM = 0;
							}

							if (Var.nDMRech > 0) 
							{
								Var.nRestHF = Var.nRestHF + Var.nDMRech;
								Var.dtHFSeitAlt = Var.dtSeit;
								Var.nZiHF = Var.nZinsen;
							}
							else if (Var.nDMKo != 0)  // 16.07.10 F714 >0 -->> != 0
							{
								Var.nRestVZ = Var.nRestVZ + Var.nDMKo;
								Var.dtKoSeitAlt = Var.dtSeit;
								Var.nZiKo = Var.nZinsKo;
							}
							else if (Var.nUnvzDMTit != 0)  // 30.03.16
							{
								Var.nRestUVZTit = Var.nRestUVZTit + Var.nUnvzDMTit;
							}
							else if (Var.nUnvzDM != 0)  // 16.07.10 F714 >0 -->> != 0
							{
								Var.nRestUVZ = Var.nRestUVZ + Var.nUnvzDM;
							}

							// 20.11.07 F305 nZinsHF enthielt den Wert -5 (5% üBZ) und wurde nicht berechnet. SalNumberAbs hinzugefügt
							// If nProzNrAlt != 0
							// If SalNumberAbs(nZiHF) > 0 And dtHFSeitAlt != DATETIME_Null
							// Set dtFADate = dtdlgDatum
							// Set dtFADate2 = SalDateConstruct( SalDateYear( dtFADate ), SalDateMonth( dtFADate ), SalDateDay( dtFADate ), 23, 59, 59 )
							// #25
							// 07.01.08 OTF138 nProzNr -> nProzNrAlt
							// If nProzNrAlt >= 12003 		! EDA-Verfahren
							// Call SqlPrepareAndExecute(hSqlBZ, 'SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
							// FROM bz ORDER BY bzvon, bzbis')
							// Call SqlFetchNext(hSqlBZ, nFetchBZ)
							// Set dtBZvon = dtHFSeitAlt
							// While nFetchBZ != FETCH_EOF
							// If dtFADate < dtBZvon
							// Else If dtBZbis < dtHFSeitAlt
							// Else
							// If dtFADate <= dtBZbis
							// 24.08.06 Ä17
							// Set dtBZbis = dtFADate
							// Set dtBZbis = PalAddDay(dtFADate,-1)
							// If dtBZvon < dtHFSeitAlt
							// 24.08.06 Ä17
							// Set dtBZvon = PalAddDay( dtHFSeitAlt, 1)
							// Set dtBZvon = dtHFSeitAlt
							// 26.01.07 F112 auskommentiert, da Zinsen aus Vorjahren fehlten: 17.01.08 F326
							// If dtBZvon < dtZiBis
							// Set dtBZvon = PalAddDay(dtZiBis,1)
							// Set nZinsTage = PalTage( dtBZvon, dtBZbis, FALSE )
							// 24.08.06 Ä17
							// Set nDMZins = SalNumberRound( nRestHF * (nZinsTage / 365) * nBZZins) / 100
							// Set dtBZvon = PalAddDay( dtBZvon, 1)
							// Set strAZ = PalStrNum(nBZZins,5,2) || '% ' || SalDateToStrX(dtBZvon) || '-' || SalDateToStrX(dtBZbis) ||
							// ' auf € HF' || PalStrNum(nRestHF,7,2)
							// If nDMZins > 0
							// Call SqlImmed('INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
							// VALUES(:strBNUser, :nProzNrAlt, :dtFADate2,  :strAZ, :nDMZins)')
							// Call SqlFetchNext(hSqlBZ, nFetchBZ)
							// Set dtHFSeitAlt = dtFADate
							// Else
							// Set ndlgDM = NUMBER_Null
							// If 1 = SalModalDialog(dlgDM, hWndForm, 'Bitte geben Sie für ' || SalDateToStrX(dtHFSeitAlt) || '-' || SalDateToStrX(dtFADate) ||
							// ' auf € HF' || PalStrNum(nRestHF,7,2) || ' den Zinssatz ein  (%) :',nZiHF)
							// While ndlgDM = NUMBER_Null
							// If nZiHF > 0
							// Set strAZ = PalStrNum(nZiHF,5,2) || '% ' || SalDateToStrX(dtHFSeitAlt) || '-' || SalDateToStrX(dtFADate) ||
							// ' auf € HF' || PalStrNum(nRestHF,7,2)
							// Set nZinsTage = PalTage( dtHFSeitAlt, dtFADate, FALSE)
							// 24.08.06 Ä17
							// Set nDMZins = SalNumberRound( nRestHF * (nZinsTage / 365) * nZiHF) / 100
							// If nDMZins > 0
							// Call SqlImmed('INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
							// VALUES(:strBNUser, :nProzNrAlt, :dtFADate2,  :strAZ, :nDMZins)')
							// If nZiKo > 0 And dtKoSeitAlt != DATETIME_Null
							// Set dtFADate = dtdlgDatum
							// Set dtFADate2 = SalDateConstruct( SalDateYear( dtFADate ), SalDateMonth( dtFADate ), SalDateDay( dtFADate ), 23, 59, 59 )
							// #25
							// 07.01.08 OTF138 nProzNr -> nProzNrAlt
							// If nProzNrAlt >= 12003 		! EDA-Verfahren
							// Call SqlPrepareAndExecute(hSqlBZ, 'SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
							// FROM bz  ORDER BY bzvon, bzbis')
							// Call SqlFetchNext(hSqlBZ, nFetchBZ)
							// Set dtBZvon = dtKoSeitAlt
							// While nFetchBZ != FETCH_EOF
							// If dtFADate < dtBZvon
							// Else If dtBZbis < dtKoSeitAlt
							// Else
							// If dtFADate <= dtBZbis
							// 24.08.06 Ä17
							// Set dtBZbis = dtFADate
							// Set dtBZbis = PalAddDay(dtFADate,-1)
							// If dtBZvon < dtKoSeitAlt
							// 24.08.06 Ä17
							// Set dtBZvon = PalAddDay( dtHFSeitAlt, 1)
							// Set dtBZvon = dtKoSeitAlt
							// Set nZinsTage = PalTage( dtBZvon, dtBZbis, FALSE )
							// 24.08.06 Ä17
							// 16.01.08 F326
							// Set nDMZins = SalNumberRound( nRestHF * (nZinsTage / 365) * nBZZins) / 100
							// Set nDMZins = SalNumberRound( nRestVZ * (nZinsTage / 365) * nBZZins) / 100
							// Set dtBZvon = PalAddDay( dtBZvon, 1)
							// Set strAZ = PalStrNum(nBZZins,5,2) || '% ' || SalDateToStrX(dtBZvon) || '-' || SalDateToStrX(dtBZbis) ||
							// ' auf € VZ' || PalStrNum(nRestVZ,7,2)
							// If nDMZins > 0
							// Call SqlImmed('INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
							// VALUES(:strBNUser, :nProzNrAlt, :dtFADate2,  :strAZ, :nDMZins)')
							// Call SqlFetchNext(hSqlBZ, nFetchBZ)
							// 26.04.10 OTF432 + If dtFADate > dtKoSeitAlt
							// If dtFADate > dtKoSeitAlt
							// Set dtKoSeitAlt = dtFADate
							// Else
							// Set ndlgDM = NUMBER_Null
							// If 1 = SalModalDialog(dlgDM, hWndForm, 'Bitte geben Sie für ' || SalDateToStrX(dtKoSeitAlt) || '-' || SalDateToStrX(dtFADate) ||
							// ' auf € VZ' || PalStrNum(nRestVZ,7,2) || ' den Zinssatz ein  (%) :',nZiKo)
							// While ndlgDM = NUMBER_Null
							// If nZiKo > 0
							// Set strAZ = PalStrNum(nZiKo,5,2) || '% ' || SalDateToStrX(dtKoSeitAlt) || '-' || SalDateToStrX(dtFADate) ||
							// ' auf € VZ' || PalStrNum(nRestVZ,7,2)
							// Set nZinsTage = PalTage( dtKoSeitAlt, dtFADate, FALSE )
							// 24.08.06 Ä17
							// Set nDMZins = SalNumberRound( nRestVZ * (nZinsTage / 365) * nZiKo) / 100
							// If nDMZins > 0
							// Call SqlImmed('INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
							// VALUES(:strBNUser, :nProzNrAlt, :dtFADate2,  :strAZ, :nDMZins)')
							// Set nRestHF = 0
							// Set nRestVZ = 0
							// Set nRestUVZ = 0
							// Set dtKoSeitAlt = DATETIME_Null
							// Set dtHFSeitAlt = DATETIME_Null
							if (Var.nZiHF.Abs() > 0 && Var.dtHFSeitAlt != SalDateTime.Null) 
							{
								// Set dtFADate = dtdlgDatum
								Var.dtFADate2 = new SalDateTime(Var.dtFADate.Year(), Var.dtFADate.Month(), Var.dtFADate.Day(), 0, 0, 0);
								// #25
								// 07.01.08 OTF138 nProzNr -> nProzNrAlt
								if (Var.nProzNr >= 12003)  // EDA-Verfahren
								{
									Var.hSqlBZ.PrepareAndExecute(@"SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
FROM bz ORDER BY bzvon, bzbis");
									Var.nFetchBZ = Var.hSqlBZ.FetchNext();
									// Set dtBZvon = dtHFSeitAlt
									while (Var.nFetchBZ != Sys.FETCH_EOF) 
									{
										if (Var.dtFADate < Var.dtBZvon) 
										{
										}
										else if (Var.dtBZbis < Var.dtHFSeitAlt) 
										{
										}
										else
										{
											if (Var.dtFADate <= Var.dtBZbis) 
											{
												// 24.08.06 Ä17
												// Set dtBZbis = dtFADate
												Var.dtBZbis = Int.PalAddDay(Var.dtFADate, -1);
											}
											if (Var.dtBZvon < Var.dtHFSeitAlt) 
											{
												// 24.08.06 Ä17
												// Set dtBZvon = PalAddDay( dtHFSeitAlt, 1)
												Var.dtBZvon = Var.dtHFSeitAlt;
												// 26.01.07 F112 auskommentiert, da Zinsen aus Vorjahren fehlten: 17.01.08 F326
												// If dtBZvon < dtZiBis
												// Set dtBZvon = PalAddDay(dtZiBis,1)

											}
											Var.nZinsTage = Int.PalTage(Var.dtBZvon, Var.dtBZbis, false);
											// 24.08.06 Ä17
											Var.nDMZins = (Var.nRestHF * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100;
											// Set dtBZvon = PalAddDay( dtBZvon, 1)
											Var.strAZ = Int.PalStrNum(Var.nBZZins, 5, 2) + "% " + Int.SalDateToStrX(Var.dtBZvon) + "-" + Int.SalDateToStrX(Var.dtBZbis) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2);
											if (Var.nDMZins > 0) 
											{
                                                // 09.10.24 ### + , fazinsvon, fazinsbis
                                                Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm, fazinsvon, fazinsbis)
VALUES(:strBNUser, :nProzNr, :dtFADate2,  :strAZ, :nDMZins, :dtBZvon, :dtBZbis )");
                                            }
										}

										Var.nFetchBZ = Var.hSqlBZ.FetchNext();
									}
								}
								else
								{
									if (Var.dtFADate > Var.dtHFSeitAlt) 
									{
										Var.ndlgDM = SalNumber.Null;
										if (1 == dlgDM.ModalDialog(Sys.hWndForm, "Bitte geben Sie für " + Int.SalDateToStrX(Var.dtHFSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2) + " den Zinssatz ein  (%) :", ref Var.nZiHF)) 
										{
										}
										while (Var.ndlgDM == SalNumber.Null) 
										{
										}
										if (Var.nZiHF > 0) 
										{
											Var.strAZ = Int.PalStrNum(Var.nZiHF, 5, 2) + "% " + Int.SalDateToStrX(Var.dtHFSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2);
											Var.nZinsTage = Int.PalTage(Var.dtHFSeitAlt, Var.dtFADate, false);
											// 24.08.06 Ä17
											Var.nDMZins = (Var.nRestHF * (Var.nZinsTage / 365) * Var.nZiHF).Round() / 100;
											if (Var.nDMZins > 0) 
											{
                                                // 09.10.24 ### + , fazinsvon, fazinsbis
                                                Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm, fazinsvon, fazinsbis)
VALUES(:strBNUser, :nProzNr, :dtFADate2,  :strAZ, :nDMZins, :dtHFSeitAlt, :dtFADate)");
                                            }
										}
									}
								}
								if (Var.dtFADate > Var.dtHFSeitAlt) 
								{
									Var.dtHFSeitAlt = Var.dtFADate;
								}
							}
							if (Var.nZiKo > 0 && Var.dtKoSeitAlt != SalDateTime.Null) 
							{
								// Set dtFADate = dtdlgDatum
								Var.dtFADate2 = new SalDateTime(Var.dtFADate.Year(), Var.dtFADate.Month(), Var.dtFADate.Day(), 0, 0, 0);
								// #25
								// 07.01.08 OTF138 nProzNr -> nProzNrAlt
								if (Var.nProzNr >= 12003)  // EDA-Verfahren
								{
									Var.hSqlBZ.PrepareAndExecute(@"SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
FROM bz  ORDER BY bzvon, bzbis");
									Var.nFetchBZ = Var.hSqlBZ.FetchNext();
									// Set dtBZvon = dtKoSeitAlt
									while (Var.nFetchBZ != Sys.FETCH_EOF) 
									{
										if (Var.dtFADate < Var.dtBZvon) 
										{
										}
										else if (Var.dtBZbis < Var.dtKoSeitAlt) 
										{
										}
										else
										{
											if (Var.dtFADate <= Var.dtBZbis) 
											{
												// 24.08.06 Ä17
												// Set dtBZbis = dtFADate
												Var.dtBZbis = Int.PalAddDay(Var.dtFADate, -1);
											}
											if (Var.dtBZvon < Var.dtKoSeitAlt) 
											{
												// 24.08.06 Ä17
												// Set dtBZvon = PalAddDay( dtHFSeitAlt, 1)
												Var.dtBZvon = Var.dtKoSeitAlt;
											}
											Var.nZinsTage = Int.PalTage(Var.dtBZvon, Var.dtBZbis, false);
											// 24.08.06 Ä17
											// 16.01.08 F326
											// Set nDMZins = SalNumberRound( nRestHF * (nZinsTage / 365) * nBZZins) / 100
											Var.nDMZins = (Var.nRestVZ * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100;

											// Set dtBZvon = PalAddDay( dtBZvon, 1)
											Var.strAZ = Int.PalStrNum(Var.nBZZins, 5, 2) + "% " + Int.SalDateToStrX(Var.dtBZvon) + "-" + Int.SalDateToStrX(Var.dtBZbis) + " auf Kosten €" + Int.PalStrNum(Var.nRestVZ, 7, 2);
											if (Var.nDMZins > 0) 
											{
                                                // 09.10.24 ### + , fazinsvon, fazinsbis
                                                Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm, fazinsvon, fazinsbis)
VALUES(:strBNUser, :nProzNr, :dtFADate,  :strAZ, :nDMZins, :dtBZvon, :dtBZbis)");
                                            }
										}

										Var.nFetchBZ = Var.hSqlBZ.FetchNext();
									}
								}
								else
								{
									if (Var.dtFADate > Var.dtKoSeitAlt) 
									{
										Var.ndlgDM = SalNumber.Null;
										if (1 == dlgDM.ModalDialog(Sys.hWndForm, "Bitte geben Sie für " + Int.SalDateToStrX(Var.dtKoSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf Kosten €" + Int.PalStrNum(Var.nRestVZ, 7, 2) + " den Zinssatz ein  (%) :", ref Var.nZiKo)) 
										{
										}
										while (Var.ndlgDM == SalNumber.Null) 
										{
										}
										if (Var.nZiKo > 0) 
										{
											Var.strAZ = Int.PalStrNum(Var.nZiKo, 5, 2) + "% " + Int.SalDateToStrX(Var.dtKoSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf Kosten €" + Int.PalStrNum(Var.nRestVZ, 7, 2);
											Var.nZinsTage = Int.PalTage(Var.dtKoSeitAlt, Var.dtFADate, false);
											// 24.08.06 Ä17
											Var.nDMZins = (Var.nRestVZ * (Var.nZinsTage / 365) * Var.nZiKo).Round() / 100;
											if (Var.nDMZins > 0) 
											{
                                                // 09.10.24 ### + , fazinsvon, fazinsbis
                                                Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm, fazinsvon, fazinsbis)
VALUES(:strBNUser, :nProzNr, :dtFADate,  :strAZ, :nDMZins, :dtKoSeitAlt, :dtFADate)");
                                            }
										}
									}
								}
								// 26.04.10 OTF432 + If dtFADate > dtKoSeitAlt
								if (Var.dtFADate > Var.dtKoSeitAlt) 
								{
									Var.dtKoSeitAlt = Var.dtFADate;
								}

							}
							// 22.10.18 F3408
							// nDMRech < 0
							if (Var.strBuchText == "Zahlung")  // Zahlung
							{
								// 15.03.16 Ä1358
								Var.nDMRechori = Var.nDMRech;
								locals.bHFgebucht = false;
								Var.nFADMRech = 0;
								Var.nFADMUvz = 0;
								Var.nFADMUvzTit = 0;
								Var.nFADMVz = 0;
								// 21.04.16 F2676
								Var.nFADMZinsVZ = 0;
								// 12.09.16 F2758
								Var.nExtraZinsen = 0;
								// 20.09.16 F2758
								Var.nFADMZins = 0;
								// 03.09.19 F3408
								if (Var.nDMRech > 0)  // Retoure
								{
									Int.SqlIstDa("FROM fa WHERE (fadmhf + fadmko + faunvzdm + faunvzdmtit +fazinsdm)*-1 = :nDMRech AND fatext = \'Zahlung\'", ref Var.bExists);
									if (Var.bExists) 
									{
										Int.SqlImmedSel(@"SELECT fadmhf*-1, fadmko*-1, faunvzdm*-1, faunvzdmtit*-1, fazinsdm*-1
INTO :nFA2DMRech, :nFA2DMVz, :nFA2DMUvz, :nFA2DMUvzTit, :nFA2DMZins
FROM fa
WHERE (fadmhf + fadmko + faunvzdm + faunvzdmtit +fazinsdm)*-1 = :nDMRech AND fadatum <= :dtFADate AND fatext = 'Zahlung'
ORDER BY fadatum DESC");
										Int.SqlImmed(@"UPDATE fa SET fadmhf = :nFA2DMRech, fadmko = :nFA2DMVz, faunvzdm = :nFA2DMUvz, fazinsdm = :nFA2DMZins, faunvzdmtit = :nFA2DMUvzTit
WHERE ROWID = :strROWID");
										Var.nRestHF = Var.nRestHF - Var.nFA2DMRech;
										Var.nRestVZ = Var.nRestVZ - Var.nFA2DMVz;
										Var.nRestUVZTit = Var.nRestUVZTit - Var.nFA2DMUvzTit;
										Var.nRestUVZ = Var.nRestUVZ + Var.nZahlDM;

										Var.nDMRech = 0;
									}
								}

								if (Var.nDMRech != 0 && Var.nDMRech != SalNumber.Null) 
								{

									// Set nFADMZins = 0
									if (!(locals.bFingiert))  // 15.03.16 Ä1358
									{
										if (Var.nRestHF > 0)  // HF noch offen
										{
											if (Var.nDMRech * -1 > Var.nRestHF) 
											{
												Var.nZahlDM = Var.nRestHF * -1;
											}
											else
											{
												Var.nZahlDM = Var.nDMRech;
											}
											// 25.02.02 aus + ein - gemacht
											Var.nDMRech = Var.nDMRech - Var.nZahlDM;
											// #25
											// 07.01.08 OTF138 nProzNr -> nProzNrAlt
											if (Var.nProzNr >= 12003)  // EDA-Verfahren
											{
												if (Var.dtHFSeitAlt != SalDateTime.Null) 
												{
													Var.hSqlBZ.PrepareAndExecute(@"SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
FROM bz ORDER BY bzvon, bzbis");
													Var.nFetchBZ = Var.hSqlBZ.FetchNext();
													// Set dtBZvon = dtHFSeitAlt
													while (Var.nFetchBZ != Sys.FETCH_EOF) 
													{
														if (Var.dtFADate < Var.dtBZvon) 
														{
														}
														else if (Var.dtBZbis < Var.dtHFSeitAlt) 
														{
														}
														else
														{
															if (Var.dtFADate <= Var.dtBZbis) 
															{
																// 24.08.06 Ä17
																Var.dtBZbis = Var.dtFADate;
																Var.dtBZbis = Int.PalAddDay(Var.dtFADate, -1);
															}
															if (Var.dtBZvon < Var.dtHFSeitAlt) 
															{
																// 24.08.06 Ä17
																// Set dtBZvon = PalAddDay( dtHFSeitAlt, 1)
																Var.dtBZvon = Var.dtHFSeitAlt;
																// 26.01.07 F112 auskommentiert, da Zinsen aus Vorjahren fehlten: 17.01.08 F326
																// If dtBZvon < dtZiBis
																// Set dtBZvon = PalAddDay(dtZiBis,1)

															}
															Var.nZinsTage = Int.PalTage(Var.dtBZvon, Var.dtBZbis, false);
															// 24.08.06 Ä17
															Var.nDMZins = (Var.nRestHF * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100;
															// Set dtBZvon = PalAddDay( dtBZvon, 1)
															Var.strAZ = Int.PalStrNum(Var.nBZZins, 5, 2) + "% " + Int.SalDateToStrX(Var.dtBZvon) + "-" + Int.SalDateToStrX(Var.dtBZbis) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2);
															if (Var.nDMZins > 0) 
															{
                                                                // 09.10.24 ### + , fazinsvon, fazinsbis
                                                                Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm, fazinsvon, fazinsbis)
VALUES(:strBNUser, :nProzNr, :dtFADate,  :strAZ, :nDMZins, :dtBZvon, :dtBZbis )");
                                                            }
														}

														Var.nFetchBZ = Var.hSqlBZ.FetchNext();
													}
												}
												Var.dtHFSeitAlt = Var.dtFADate;
											}
											else
											{
												if (Var.nZiHF > 0 && Var.dtHFSeitAlt != SalDateTime.Null && (Var.dtFADate - 0.1m) > Var.dtHFSeitAlt) 
												{
													Var.ndlgDM = SalNumber.Null;
													if (1 == dlgDM.ModalDialog(Sys.hWndForm, "Bitte geben Sie für " + Int.SalDateToStrX(Var.dtHFSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2) + " den Zinssatz ein  (%) :", ref Var.nZiHF)) 
													{
													}
													while (Var.ndlgDM == SalNumber.Null) 
													{
													}
													if (Var.nZiHF > 0) 
													{
														Var.dtFADate = Var.dtFADate - 0.1m;
														Var.dtFADate2 = new SalDateTime(Var.dtFADate.Year(), Var.dtFADate.Month(), Var.dtFADate.Day(), 0, 0, 0);
														Var.strAZ = Int.PalStrNum(Var.nZiHF, 5, 2) + "% " + Int.SalDateToStrX(Var.dtHFSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2);
														Var.nZinsTage = Int.PalTage(Var.dtHFSeitAlt, Var.dtFADate, false);
														// 24.08.06 Ä17
														Var.nDMZins = (Var.nRestHF * (Var.nZinsTage / 365) * Var.nZiHF).Round() / 100;
														if (Var.nDMZins > 0) 
														{
                                                            // 09.10.24 ### + , fazinsvon, fazinsbis
                                                            Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm, fazinsvon, fazinsbis)
VALUES(:strBNUser, :nProzNr, :dtFADate2,  :strAZ, :nDMZins, :dtHFSeitAlt, :dtFADate )");
                                                        }
													}
													Var.dtHFSeitAlt = Var.dtFADate;
												}
											}

											Var.nRestHF = Var.nRestHF + Var.nZahlDM;
											// 23.03.16 Ä1358
											// 16.03.16 Ä1358
											// Call SqlImmed( 'UPDATE fa SET fadmhf = :nZahlDM
											// WHERE fauser = :strBNUser AND fatext = :strBuchText AND @DATEVALUE(fadatum) = :dtFADate AND fadmhf = :nDMRechori AND faproznr = :nProzNr' )
											Var.nFADMRech = Var.nZahlDM;

											locals.bHFgebucht = true;
										}
									}
									if (Var.nRestVZ > 0)  // verz. Kosten noch offen
									{
										if (Var.nDMRech * -1 > Var.nRestVZ) 
										{
											Var.nZahlDM = Var.nRestVZ * -1;
										}
										else
										{
											Var.nZahlDM = Var.nDMRech;
										}
										// 25.02.02 aus + ein - gemacht
										Var.nDMRech = Var.nDMRech - Var.nZahlDM;
										// #25
										// 07.01.08 OTF138 nProzNr -> nProzNrAlt
										if (Var.nProzNr >= 12003)  // EDA-Verfahren
										{
											if (Var.dtKoSeitAlt != SalDateTime.Null) 
											{
												Var.hSqlBZ.PrepareAndExecute(@"SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
FROM bz  ORDER BY bzvon, bzbis");
												Var.nFetchBZ = Var.hSqlBZ.FetchNext();
												// Set dtBZvon = dtKoSeitAlt
												while (Var.nFetchBZ != Sys.FETCH_EOF) 
												{
													if (Var.dtFADate < Var.dtBZvon) 
													{
													}
													else if (Var.dtBZbis < Var.dtKoSeitAlt) 
													{
													}
													else
													{
														// 26.04.10 OTF432
														if (Var.dtBZvon < Var.dtKoSeitAlt) 
														{
															Var.dtBZvon = Var.dtKoSeitAlt;
														}

														if (Var.dtFADate <= Var.dtBZbis) 
														{
															// 24.08.06 Ä17
															// Set dtBZbis = dtFADate
															Var.dtBZbis = Int.PalAddDay(Var.dtFADate, -1);
														}
														if (Var.dtBZvon < Var.dtKoSeitAlt) 
														{
															// 24.08.06 Ä17
															// Set dtBZvon = PalAddDay( dtKoSeitAlt, 1)
															Var.dtBZvon = Var.dtKoSeitAlt;
														}
														Var.nZinsTage = Int.PalTage(Var.dtBZvon, Var.dtBZbis, false);
														// 24.08.06 Ä17
														Var.nDMZins = (Var.nRestVZ * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100;
														// Set dtBZvon = PalAddDay( dtBZvon, 1)
														Var.strAZ = Int.PalStrNum(Var.nBZZins, 5, 2) + "% " + Int.SalDateToStrX(Var.dtBZvon) + "-" + Int.SalDateToStrX(Var.dtBZbis) + " auf Kosten €" + Int.PalStrNum(Var.nRestVZ, 7, 2);
														if (Var.nDMZins > 0) 
														{
                                                            // 09.10.24 ### + , fazinsvon, fazinsbis
                                                            Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm, fazinsvon, fazinsbis)
VALUES(:strBNUser, :nProzNr, :dtFADate,  :strAZ, :nDMZins, :dtBZvon, :dtBZbis)");
                                                        }
													}

													Var.nFetchBZ = Var.hSqlBZ.FetchNext();
												}
											}
											// 26.04.10 OTF432 + If dtFADate > dtKoSeitAlt
											if (Var.dtFADate > Var.dtKoSeitAlt) 
											{
												Var.dtKoSeitAlt = Var.dtFADate;
											}

										}
										else
										{
											if (Var.nZiKo > 0 && Var.dtKoSeitAlt != SalDateTime.Null && (Var.dtFADate - 0.1m) > Var.dtKoSeitAlt) 
											{
												Var.ndlgDM = SalNumber.Null;
												if (1 == dlgDM.ModalDialog(Sys.hWndForm, "Bitte geben Sie für " + Int.SalDateToStrX(Var.dtKoSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf Kosten €" + Int.PalStrNum(Var.nRestVZ, 7, 2) + " den Zinssatz ein  (%) :", ref Var.nZiKo)) 
												{
												}
												while (Var.ndlgDM == SalNumber.Null) 
												{
												}
												if (Var.nZiKo > 0) 
												{
													Var.dtFADate = Var.dtFADate - 0.1m;
													Var.dtFADate2 = new SalDateTime(Var.dtFADate.Year(), Var.dtFADate.Month(), Var.dtFADate.Day(), 0, 0, 0);
													Var.strAZ = Int.PalStrNum(Var.nZiKo, 5, 2) + "% " + Int.SalDateToStrX(Var.dtKoSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf Kosten €" + Int.PalStrNum(Var.nRestVZ, 7, 2);
													Var.nZinsTage = Int.PalTage(Var.dtKoSeitAlt, Var.dtFADate, false);
													// 24.08.06 Ä17
													Var.nDMZins = (Var.nRestVZ * (Var.nZinsTage / 365) * Var.nZiKo).Round() / 100;
													if (Var.nDMZins > 0) 
													{
                                                        // 09.10.24 ### + , fazinsvon, fazinsbis
                                                        Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm, fazinsvon, fazinsbis)
VALUES(:strBNUser, :nProzNr, :dtFADate2,  :strAZ, :nDMZins, :dtKoSeitAlt, :dtFADate)");
                                                    }
												}
												Var.dtKoSeitAlt = Var.dtFADate;
											}
										}

										Var.nRestVZ = Var.nRestVZ + Var.nZahlDM;
										// 23.03.16 Ä1358
										// 16.03.16 Ä1358
										// Call SqlImmed( 'UPDATE fa SET fadmko = :nZahlDM
										// WHERE fauser = :strBNUser AND fatext = :strBuchText AND @DATEVALUE(fadatum) = :dtFADate AND fadmhf = :nDMRechori AND faproznr = :nProzNr' )
										Var.nFADMVz = Var.nZahlDM;

									}
									if (Var.nRestUVZTit > 0)  // 30.03.16unverz. Titel noch offen
									{
										if (Var.nDMRech * -1 > Var.nRestUVZTit) 
										{
											Var.nZahlDM = Var.nRestUVZTit * -1;
										}
										else
										{
											Var.nZahlDM = Var.nDMRech;
										}
										Var.nDMRech = Var.nDMRech - Var.nZahlDM;
										Var.nRestUVZTit = Var.nRestUVZTit + Var.nZahlDM;
										// 23.03.16 Ä1358
										// 16.03.16 Ä1358
										// Call SqlImmed( 'UPDATE fa SET faunvzdm = :nZahlDM
										// WHERE fauser = :strBNUser AND fatext = :strBuchText AND @DATEVALUE(fadatum) = :dtFADate AND fadmhf = :nDMRechori AND faproznr = :nProzNr' )
										Var.nFADMUvzTit = Var.nZahlDM;

									}
									if (Var.nRestUVZ > 0)  // unverz. Kosten noch offen
									{
										if (Var.nDMRech * -1 > Var.nRestUVZ) 
										{
											Var.nZahlDM = Var.nRestUVZ * -1;
										}
										else
										{
											Var.nZahlDM = Var.nDMRech;
										}
										Var.nDMRech = Var.nDMRech - Var.nZahlDM;
										Var.nRestUVZ = Var.nRestUVZ + Var.nZahlDM;
										// 23.03.16 Ä1358
										// 16.03.16 Ä1358
										// Call SqlImmed( 'UPDATE fa SET faunvzdm = :nZahlDM
										// WHERE fauser = :strBNUser AND fatext = :strBuchText AND @DATEVALUE(fadatum) = :dtFADate AND fadmhf = :nDMRechori AND faproznr = :nProzNr' )
										Var.nFADMUvz = Var.nZahlDM;

									}
									// 29.03.16
									// Call SqlImmed( 'UPDATE fa SET fadmhf = :nFADMRech, fadmko = :nFADMVz, faunvzdm = :nFADMUvz
									// WHERE fauser = :strBNUser AND fatext = :strBuchText AND @DATEVALUE(fadatum) = :dtFADate AND fadmhf = :nDMRechori AND faproznr = :nProzNr' )
									// 22.04.16 F2676
									Int.SqlImmedSel("SELECT SUM(fazinsdm) INTO :nFADMZinsVZ FROM fa WHERE fauser = :strBNUser AND faproznr = :nProzNr and fatext LIKE \'%Kosten €%\'");
									if (Var.nFADMZinsVZ > 0)  // unverz. Kosten noch offen
									{
										if (Var.nDMRech * -1 > Var.nFADMZinsVZ) 
										{
											Var.nZahlDM = Var.nFADMZinsVZ * -1;
										}
										else
										{
											Var.nZahlDM = Var.nDMRech;
										}
										Var.nDMRech = Var.nDMRech - Var.nZahlDM;
										// If bVAPfue		! 12.09.16 F2758 If bVAPfue
										if (Var.nDMRech < 0) 
										{
											// 12.09.16 F2758
											Int.SqlImmedSel(@"SELECT ROWID, fadatum INTO :strDummy1, :dtAkDatum FROM fa WHERE fauser = :strBNUser
AND @DATEVALUE( fadatum ) = :dtFADate AND faproznr = :nProzNr AND fadmhf = :nDMRechori");
											// 17.10.16
											Int.SqlImmed(@"INSERT INTO fa
(fauser, faproznr, fadatum, fatext, fazinsdm)
VALUES(:strBNUser, :nProzNr, :dtAkDatum, 'Zahlung auf Kosten €', :nZahlDM)");
											// 12.09.16 F2758
											Int.SqlImmed("UPDATE fa SET fadmhf = fadmhf - :nZahlDM WHERE ROWID = :strDummy1 ");
											// 12.09.16 F2758
											Var.nExtraZinsen = Var.nZahlDM;
											// Set nDMRech = nDMRech - nZahlDM
											// Set nFADMZins = nFADMZins - nZahlDM
										}
									}
									// 16.03.16 Ä1358
									Int.SqlImmedSel("SELECT SUM(fazinsdm) INTO :nFAZins FROM fa WHERE fauser = :strBNUser AND faproznr = :nProzNr and fatext NOT LIKE \'%Kosten €%\'");
									if (Var.nFAZins > 0)  // unverz. Kosten noch offen
									{
										if (Var.nDMRech * -1 > Var.nFAZins) 
										{
											Var.nZahlDM = Var.nFAZins * -1;
										}
										else
										{
											Var.nZahlDM = Var.nDMRech;
										}
										Var.nDMRech = Var.nDMRech - Var.nZahlDM;
										// 23.03.16 Ä1358
										// 16.03.16 Ä1358
										// Call SqlImmed( 'UPDATE fa SET fazinsdm = :nZahlDM
										// WHERE fauser = :strBNUser AND fatext = :strBuchText AND @DATEVALUE(fadatum) = :dtFADate AND fadmhf = :nDMRechori AND faproznr = :nProzNr' )
										// 12.09.16 F2758 + "nFADMZins + "
										Var.nFADMZins = Var.nFADMZins + Var.nZahlDM;

									}

									if (locals.bFingiert)  // 15.03.16 Ä1358
									{
										if (Var.nRestHF > 0)  // HF noch offen
										{
											if (Var.nDMRech * -1 > Var.nRestHF) 
											{
												Var.nZahlDM = Var.nRestHF * -1;
											}
											else
											{
												Var.nZahlDM = Var.nDMRech;
											}
											// 25.02.02 aus + ein - gemacht
											Var.nDMRech = Var.nDMRech - Var.nZahlDM;
											// #25
											// 07.01.08 OTF138 nProzNr -> nProzNrAlt
											if (Var.nProzNr >= 12003)  // EDA-Verfahren
											{
												if (Var.dtHFSeitAlt != SalDateTime.Null) 
												{
													Var.hSqlBZ.PrepareAndExecute(@"SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
FROM bz ORDER BY bzvon, bzbis");
													Var.nFetchBZ = Var.hSqlBZ.FetchNext();
													// Set dtBZvon = dtHFSeitAlt
													while (Var.nFetchBZ != Sys.FETCH_EOF) 
													{
														if (Var.dtFADate < Var.dtBZvon) 
														{
														}
														else if (Var.dtBZbis < Var.dtHFSeitAlt) 
														{
														}
														else
														{
															if (Var.dtFADate <= Var.dtBZbis) 
															{
																// 24.08.06 Ä17
																Var.dtBZbis = Var.dtFADate;
																Var.dtBZbis = Int.PalAddDay(Var.dtFADate, -1);
															}
															if (Var.dtBZvon < Var.dtHFSeitAlt) 
															{
																// 24.08.06 Ä17
																// Set dtBZvon = PalAddDay( dtHFSeitAlt, 1)
																Var.dtBZvon = Var.dtHFSeitAlt;
																// 26.01.07 F112 auskommentiert, da Zinsen aus Vorjahren fehlten: 17.01.08 F326
																// If dtBZvon < dtZiBis
																// Set dtBZvon = PalAddDay(dtZiBis,1)

															}
															Var.nZinsTage = Int.PalTage(Var.dtBZvon, Var.dtBZbis, false);
															// 24.08.06 Ä17
															Var.nDMZins = (Var.nRestHF * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100;
															// Set dtBZvon = PalAddDay( dtBZvon, 1)
															Var.strAZ = Int.PalStrNum(Var.nBZZins, 5, 2) + "% " + Int.SalDateToStrX(Var.dtBZvon) + "-" + Int.SalDateToStrX(Var.dtBZbis) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2);
															if (Var.nDMZins > 0) 
															{
                                                                // 09.10.24 ### + , fazinsvon, fazinsbis
                                                                Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm, fazinsvon, fazinsbis)
VALUES(:strBNUser, :nProzNr, :dtFADate2,  :strAZ, :nDMZins, :dtBZvon, :dtBZbis)");
                                                            }
														}

														Var.nFetchBZ = Var.hSqlBZ.FetchNext();
													}
												}
												Var.dtHFSeitAlt = Var.dtFADate;
											}
											else
											{
												if (Var.nZiHF > 0 && Var.dtHFSeitAlt != SalDateTime.Null && (Var.dtFADate - 0.1m) > Var.dtHFSeitAlt) 
												{
													Var.ndlgDM = SalNumber.Null;
													if (1 == dlgDM.ModalDialog(Sys.hWndForm, "Bitte geben Sie für " + Int.SalDateToStrX(Var.dtHFSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2) + " den Zinssatz ein  (%) :", ref Var.nZiHF)) 
													{
													}
													while (Var.ndlgDM == SalNumber.Null) 
													{
													}
													if (Var.nZiHF > 0) 
													{
														Var.dtFADate = Var.dtFADate - 0.1m;
														Var.dtFADate2 = new SalDateTime(Var.dtFADate.Year(), Var.dtFADate.Month(), Var.dtFADate.Day(), 0, 0, 0);
														Var.strAZ = Int.PalStrNum(Var.nZiHF, 5, 2) + "% " + Int.SalDateToStrX(Var.dtHFSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2);
														Var.nZinsTage = Int.PalTage(Var.dtHFSeitAlt, Var.dtFADate, false);
														// 24.08.06 Ä17
														Var.nDMZins = (Var.nRestHF * (Var.nZinsTage / 365) * Var.nZiHF).Round() / 100;
														if (Var.nDMZins > 0) 
														{
                                                            // 09.10.24 ### + , fazinsvon, fazinsbis
                                                            Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm, fazinsvon, fazinsbis)
VALUES(:strBNUser, :nProzNr, :dtFADate2,  :strAZ, :nDMZins, :dtHFSeitAlt, :dtFADate)");
                                                        }
													}
													Var.dtHFSeitAlt = Var.dtFADate;
												}
											}

											Var.nRestHF = Var.nRestHF + Var.nZahlDM;
											// 23.03.16 Ä1358
											// 16.03.16 Ä1358
											// Call SqlImmed( 'UPDATE fa SET fadmhf = :nZahlDM
											// WHERE fauser = :strBNUser AND fatext = :strBuchText AND @DATEVALUE(fadatum) = :dtFADate AND fadmhf = :nDMRechori AND faproznr = :nProzNr' )
											Var.nFADMRech = Var.nZahlDM;

											locals.bHFgebucht = true;
										}
									}
									// 16.03.16 Ä1358
									// If not bHFgebucht
									// Call SqlImmed( 'UPDATE fa SET fadmhf = 0
									// WHERE fauser = :strBNUser AND fatext = :strBuchText AND @DATEVALUE(fadatum) = :dtFADate AND fadmhf = :nDMRechori AND faproznr = :nProzNr' )
									if (Var.nDMRechori < (Var.nFADMRech + Var.nFADMVz + Var.nFADMUvz + Var.nFADMUvzTit + Var.nFADMZins + Var.nExtraZinsen)) 
									{
										Var.nFADMRech = Var.nDMRechori - (Var.nFADMVz + Var.nFADMUvz + Var.nFADMUvzTit + Var.nFADMZins + Var.nExtraZinsen);
									}
									// 12.09.16 F2758
									Var.nDMRechori = Var.nDMRechori - Var.nExtraZinsen;

									Int.SqlImmed(@"UPDATE fa SET fadmhf = :nFADMRech, fadmko = :nFADMVz, faunvzdm = :nFADMUvz, fazinsdm = :nFADMZins, faunvzdmtit = :nFADMUvzTit
WHERE fauser = :strBNUser AND fatext = :strBuchText AND @DATEVALUE(fadatum) = :dtFADate AND fadmhf = :nDMRechori AND faproznr = :nProzNr");
								}
							}
							Var.nProzNrAlt = Var.nProzNr;

							locals.nFetchRep = locals.hSqlFA.FetchNext();
						}
						// 20.11.07 F305 nZinsHF enthielt den Wert -5 (5% üBZ) und wurde nicht berechnet. SalNumberAbs hinzugefügt
						if (Var.nZiHF.Abs() > 0 && Var.nRestHF > 0 && Var.dtHFSeitAlt != SalDateTime.Null) 
						{
							Var.dtFADate = Var.dtdlgDatum;
							// #25
							if (Var.nProzNr >= 12003)  // EDA-Verfahren
							{
								Var.hSqlBZ.PrepareAndExecute(@"SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
FROM bz ORDER BY bzvon, bzbis");
								Var.nFetchBZ = Var.hSqlBZ.FetchNext();
								// Set dtBZvon = dtHFSeitAlt
								while (Var.nFetchBZ != Sys.FETCH_EOF) 
								{
									if (Var.dtFADate < Var.dtBZvon) 
									{
									}
									else if (Var.dtBZbis < Var.dtHFSeitAlt) 
									{
									}
									else
									{
										if (Var.dtFADate <= Var.dtBZbis) 
										{
											// 18.01.08 F326 hier wurde bis aktuellem Datum, vorher nur bis Vortag berechnet.
											// Set dtBZbis = dtFADate
											Var.dtBZbis = Int.PalAddDay(Var.dtFADate, -1);

										}
										if (Var.dtBZvon < Var.dtHFSeitAlt) 
										{
											// 24.08.06 Ä17
											// Set dtBZvon = PalAddDay( dtHFSeitAlt,1)
											Var.dtBZvon = Var.dtHFSeitAlt;
											// 26.01.07 F112 auskommentiert, da Zinsen aus Vorjahren fehlten: 17.01.08 F326
											// If dtBZvon < dtZiBis
											// Set dtBZvon = PalAddDay(dtZiBis,1)

										}
										if (Var.dtBZbis > Var.dtBZvon)  // 05.12.18
										{
											Var.nZinsTage = Int.PalTage(Var.dtBZvon, Var.dtBZbis, false);
											// 24.08.06 Ä17
											Var.nDMZins = (Var.nRestHF * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100;
											// Set dtBZvon = PalAddDay( dtBZvon, 1)
											Var.strAZ = Int.PalStrNum(Var.nBZZins, 5, 2) + "% " + Int.SalDateToStrX(Var.dtBZvon) + "-" + Int.SalDateToStrX(Var.dtBZbis) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2);
											if (Var.nDMZins > 0) 
											{
                                                // 09.10.24 ### + , fazinsvon, fazinsbis
                                                Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm, fazinsvon, fazinsbis)
VALUES(:strBNUser, :nProzNr, :dtFADate2,  :strAZ, :nDMZins, :dtBZvon, :dtBZbis)");
                                            }
										}
									}

									Var.nFetchBZ = Var.hSqlBZ.FetchNext();
								}
							}
							else
							{
								Var.ndlgDM = SalNumber.Null;
								if (1 == dlgDM.ModalDialog(Sys.hWndForm, "Bitte geben Sie für " + Int.SalDateToStrX(Var.dtHFSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2) + " den Zinssatz ein  (%) :", ref Var.nZiHF)) 
								{
								}
								while (Var.ndlgDM == SalNumber.Null) 
								{
								}
								if (Var.nZiHF > 0) 
								{
									Var.strAZ = Int.PalStrNum(Var.nZiHF, 5, 2) + "% " + Int.SalDateToStrX(Var.dtHFSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf HF €" + Int.PalStrNum(Var.nRestHF, 7, 2);
									Var.nZinsTage = Int.PalTage(Var.dtHFSeitAlt, Var.dtFADate, false);
									// 24.08.06 Ä17
									Var.nDMZins = (Var.nRestHF * (Var.nZinsTage / 365) * Var.nZiHF).Round() / 100;
									if (Var.nDMZins > 0) 
									{
                                        // 09.10.24 ### + , fazinsvon, fazinsbis
                                        Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm, fazinsvon, fazinsbis)
VALUES(:strBNUser, :nProzNr, :dtFADate2,  :strAZ, :nDMZins, :dtBZvon, :dtBZbis)");
                                    }
								}
							}
						}
						if (Var.nZiKo > 0 && Var.nRestVZ > 0 && Var.dtKoSeitAlt != SalDateTime.Null) 
						{
							Var.dtFADate = Var.dtdlgDatum;
							Var.dtFADate2 = new SalDateTime(Var.dtFADate.Year(), Var.dtFADate.Month(), Var.dtFADate.Day(), 23, 59, 59);
							// #25
							if (Var.nProzNr >= 12003)  // EDA-Verfahren
							{
								Var.hSqlBZ.PrepareAndExecute(@"SELECT bzvon, bzbis, bzzins INTO :dtBZvon, :dtBZbis, :nBZZins
FROM bz  ORDER BY bzvon, bzbis");
								Var.nFetchBZ = Var.hSqlBZ.FetchNext();
								// Set dtBZvon = dtKoSeitAlt
								while (Var.nFetchBZ != Sys.FETCH_EOF) 
								{
									// 26.04.10 OTF432
									if (Var.dtBZvon < Var.dtKoSeitAlt) 
									{
										Var.dtBZvon = Var.dtKoSeitAlt;
									}

									if (Var.dtFADate < Var.dtBZvon) 
									{
									}
									else if (Var.dtBZbis < Var.dtKoSeitAlt) 
									{
									}
									else
									{
										if (Var.dtFADate <= Var.dtBZbis) 
										{
											// 18.01.08 F326 hier wurde bis aktuellem Datum, vorher nur bis Vortag berechnet.
											// Set dtBZbis = dtFADate
											Var.dtBZbis = Int.PalAddDay(Var.dtFADate, -1);
										}
										if (Var.dtBZvon < Var.dtKoSeitAlt) 
										{
											// 24.08.06 Ä17
											// Set dtBZvon = PalAddDay( dtKoSeitAlt, 1)
											Var.dtBZvon = Var.dtKoSeitAlt;
										}
										if (Var.dtBZbis > Var.dtBZvon)  // 05.12.18
										{
											Var.nZinsTage = Int.PalTage(Var.dtBZvon, Var.dtBZbis, false);
											// 24.08.06 Ä17
											Var.nDMZins = (Var.nRestVZ * (Var.nZinsTage / 365) * Var.nBZZins).Round() / 100;
											Var.strAZ = Int.PalStrNum(Var.nBZZins, 5, 2) + "% " + Int.SalDateToStrX(Var.dtBZvon) + "-" + Int.SalDateToStrX(Var.dtBZbis) + " auf Kosten €" + Int.PalStrNum(Var.nRestVZ, 7, 2);
											if (Var.nDMZins > 0) 
											{
                                                // 09.10.24 ### + , fazinsvon, fazinsbis
                                                Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm, fazinsvon, fazinsbis)
VALUES(:strBNUser, :nProzNr, :dtFADate2,  :strAZ, :nDMZins, :dtBZvon, :dtBZbis)");
                                            }
										}
									}

									Var.nFetchBZ = Var.hSqlBZ.FetchNext();
								}
							}
							else
							{
								Var.ndlgDM = SalNumber.Null;
								if (1 == dlgDM.ModalDialog(Sys.hWndForm, "Bitte geben Sie für " + Int.SalDateToStrX(Var.dtKoSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf Kosten €" + Int.PalStrNum(Var.nRestVZ, 7, 2) + " den Zinssatz ein  (%) :", ref Var.nZiKo)) 
								{
								}
								while (Var.ndlgDM == SalNumber.Null) 
								{
								}
								if (Var.nZiKo > 0) 
								{
									Var.strAZ = Int.PalStrNum(Var.nZiKo, 5, 2) + "% " + Int.SalDateToStrX(Var.dtKoSeitAlt) + "-" + Int.SalDateToStrX(Var.dtFADate) + " auf Kosten €" + Int.PalStrNum(Var.nRestVZ, 7, 2);
									Var.nZinsTage = Int.PalTage(Var.dtKoSeitAlt, Var.dtFADate, false);
									// 24.08.06 Ä17
									Var.nDMZins = (Var.nRestVZ * (Var.nZinsTage / 365) * Var.nZiKo).Round() / 100;
									if (Var.nDMZins > 0) 
									{
                                        // 09.10.24 ### + , fazinsvon, fazinsbis
                                        Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm, fazinsvon, fazinsbis)
VALUES(:strBNUser, :nProzNr, :dtFADate2,  :strAZ, :nDMZins, :dtBZvon, :dtBZbis)");
                                    }
								}
							}
						}
						Sys.hWndForm.SetStatusBarText("");
						// 07.02.02
						if (Var.nFADM == SalNumber.Null) 
						{
							Var.nFADM = 0;
						}
						if (Var.nFADM != 0 || Var.strFAText != "") 
						{
							// 22.02.23 F4971
							if (locals.nPR != 0 && locals.nPR != SalNumber.Null) 
							{
								Var.nFAPRNr = locals.nPR;
							}

							Int.SqlImmed(@"INSERT INTO fa (fauser, faproznr, fadatum, fatext, faunvzdm)
VALUES(:strBNUser, :nFAPRNr, SYSDATETIME,  :strFAText, :nFADM)");
						}
					}

					// 27.06.07
					locals.hSqlFA.Disconnect();
					// 18.05.99
					// 30.08.07 F241 mal auskommentiert, um nachprüfen zu können, ob Berichts- oder Programmproblem
					// Call SqlImmed('DELETE FROM FA WHERE fauser = :strBNUser')
					// #25
					Var.hSqlBZ.Disconnect();
					// 26.01.07 F112
					Var.hSqlZi.Disconnect();
					Var.hSqlZiZahl.Disconnect();

					return true;
				}
				else
				{

					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// 30.06.20 Ä1892
		/// </summary>
		/// <param name="nKontoAlt"></param>
		/// <returns></returns>
		public static SalNumber PalKontenMwStSenkung(SalNumber nKontoAlt)
		{
			#region Local Variables
			SalNumber nKontoNeu = 0;
			#endregion
			
			#region Actions
			if (nKontoAlt == 15760) 
			{
				nKontoNeu = 15761;
			}
			else if (nKontoAlt == 15710) 
			{
				nKontoNeu = 15711;
			}
			else if (nKontoAlt == 17760) 
			{
				nKontoNeu = 17750;
			}
			else if (nKontoAlt == 17780) 
			{
				nKontoNeu = 17770;
			}
			else if (nKontoAlt == 80100) 
			{
				nKontoNeu = 80101;
			}
			else if (nKontoAlt == 80110) 
			{
				nKontoNeu = 80111;
			}
			else if (nKontoAlt == 80900) 
			{
				nKontoNeu = 80901;
			}
			else if (nKontoAlt == 81200) 
			{
				nKontoNeu = 81201;
			}
			else if (nKontoAlt == 81300) 
			{
				nKontoNeu = 81301;
			}
			else if (nKontoAlt == 81400) 
			{
				nKontoNeu = 81401;
			}
			else if (nKontoAlt == 81450) 
			{
				nKontoNeu = 81451;
			}
			else if (nKontoAlt == 81700) 
			{
				nKontoNeu = 81701;
			}
			else if (nKontoAlt == 82000) 
			{
				nKontoNeu = 82001;
			}
			else if (nKontoAlt == 82200) 
			{
				nKontoNeu = 82201;
			}
			else if (nKontoAlt == 86000) 
			{
				nKontoNeu = 86001;
			}
			else if (nKontoAlt == 86030) 
			{
				nKontoNeu = 86031;
			}
			else if (nKontoAlt == 86100) 
			{
				nKontoNeu = 86101;
			}
			else
			{
				nKontoNeu = nKontoAlt;
			}
			return nKontoNeu;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strParent"></param>
		/// <param name="p_strMethod"></param>
		/// <param name="p_strTSS_Id"></param>
		/// <param name="p_strClient_Id"></param>
		/// <param name="p_strSerial_Number"></param>
		/// <param name="p_strTx_Id"></param>
		/// <param name="p_strState"></param>
		/// <param name="p_strType"></param>
		/// <param name="p_nLastRevision"></param>
		/// <param name="p_strParam"></param>
		/// <param name="p_strStatus"></param>
		/// <param name="p_strObject"></param>
		/// <param name="p_strCertificateSerial"></param>
		/// <param name="p_strPublicKey"></param>
		/// <param name="p_strSignature_algorithm"></param>
		/// <param name="p_nSignature_counter"></param>
		/// <param name="p_strSignature_timestamp_format"></param>
		/// <param name="p_nTransaction_number"></param>
		/// <param name="p_strSignature_value"></param>
		/// <param name="p_strQR_code_date"></param>
		/// <param name="p_strEnv"></param>
		/// <param name="p_strDescription"></param>
		/// <param name="p_strProcessType"></param>
		/// <param name="p_strProcessData"></param>
		/// <param name="p_strExportID"></param>
		/// <param name="p_strTime_Start"></param>
		/// <param name="p_strTime_End"></param>
		/// <returns></returns>
		public static SalBoolean PalFiskalyRunMethodAlt(
					SalString strParent, 
					SalString p_strMethod, 
					ref SalString p_strTSS_Id, 
					ref SalString p_strClient_Id, 
					ref SalString p_strSerial_Number, 
					ref SalString p_strTx_Id, 
					ref SalString p_strState, 
					SalString p_strType, 
					SalNumber p_nLastRevision, 
					SalString p_strParam, 
					ref SalString p_strStatus, 
					ref SalString p_strObject, 
					ref SalString p_strCertificateSerial, 
					ref SalString p_strPublicKey, 
					ref SalString p_strSignature_algorithm, 
					ref SalNumber p_nSignature_counter, 
					ref SalString p_strSignature_timestamp_format, 
					ref SalNumber p_nTransaction_number, 
					ref SalString p_strSignature_value, 
					ref SalString p_strQR_code_date, 
					ref SalString p_strEnv, 
					SalString p_strDescription, 
					ref SalString p_strProcessType, 
					ref SalString p_strProcessData, 
					ref SalString p_strExportID, 
					ref SalString p_strTime_Start, 
					ref SalString p_strTime_End)
		{
			#region Local Variables
			SalString strResult = "";
			SalNumber nTSS = 0;
			SalNumber nCount = 0;
			// FiskalyTSSList: p_FISKALYTSSLIST
			SalNumber ret_nStatusMethod = 0;
			SalString rp_strObjectFromMethod = "";
			SalString lsJSON = "";
			SalDateTime dtTest = SalDateTime.Null;
			#endregion
			
			#region Actions
			Var.strFiskalyError = "";
			// 14.07.20 Ä1896
			if (p_strMethod.Length > 0) 
			{
				// Set FISKALY.Method=p_strMethod
				// Set FISKALY.TssId=p_strTSS_Id
				// Set FISKALY.ClientId=p_strClient_Id
				// Set FISKALY.TxId=p_strTx_Id
				// Set FISKALY.SerialNumber=p_strSerial_Number
				// Set FISKALY.State=p_strState
				// Set FISKALY.Type=p_strType
				// Set FISKALY.LastRevision=p_nLastRevision
				// Set FISKALY.Param=p_strParam

				Int.PalLog("Fiskaly Input " + p_strMethod + " /State:" + p_strState + " /TSE-Id:" + p_strTSS_Id + "/Tx-Id:" + p_strTx_Id);

				ret_nStatusMethod = 0;
				// ! TSS
				if (p_strMethod == "ListTSS") 
				{
					ret_nStatusMethod = Var.FISKALY.fRunMethod("ListTSS", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("ListTSS", ref rp_strObjectFromMethod);
						}
					}
					// 14.01.21
					p_nSignature_counter = Fiskaly.TSS_LIST.count;
				}
				if (p_strMethod == "RetrieveTSS") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("RetrieveTSS", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("RetrieveTSS", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "CreateOrUpdateTSS") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					// - Description / State
					Var.FISKALY.SetSTATE(p_strState);
					Var.FISKALY.SetDESCRIPTION(p_strDescription);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("CreateOrUpdateTSS", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("CreateOrUpdateTSS", ref rp_strObjectFromMethod);
						}
					}
				}
				// ! CLIENTS
				if (p_strMethod == "ListAllClients") 
				{
					ret_nStatusMethod = Var.FISKALY.fRunMethod("ListAllClients", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("ListAllClients", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "ListClientsOfTSS") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("ListClientsOfTSS", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("ListClientsOfTSS", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "RetrieveClient") 
				{
					// - CLIENT-ID erforderlich
					Var.FISKALY.SetCLIENT_ID(p_strClient_Id);
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("RetrieveClient", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("RetrieveClient", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "CreateOrUpdateClient") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					// - CLIENT-ID , wenn leer wird automatisch neue erzeugt
					Var.FISKALY.SetCLIENT_ID(p_strClient_Id);
					// - SERIAL-NUMBER, wenn leer wird automatisch neue erzeugt
					Var.FISKALY.SetSERIAL_NUMBER(p_strSerial_Number);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("CreateOrUpdateClient", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("CreateOrUpdateClient", ref rp_strObjectFromMethod);
						}
					}
				}
				// ! TRANSACTION
				if (p_strMethod == "ListAllTransactions") 
				{
					ret_nStatusMethod = Var.FISKALY.fRunMethod("ListAllTransactions", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("ListAllTransactions", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "ListTransactionsOfTSS") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("ListTransactionsOfTSS", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("ListTransactionsOfTSS", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "ListTransactionsOfClient") 
				{
					// - CLIENT-ID erforderlich
					Var.FISKALY.SetCLIENT_ID(p_strClient_Id);
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("ListTransactionsOfClient", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("ListTransactionsOfClient", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "RetrieveTransaction") 
				{
					// Call FISKALY.SetREVISION( 2 )
					// Call FISKALY.SetCLIENT_ID( "e05e361c-1cc6-4e03-8f64-aedff8eb9493" )
					// Call FISKALY.SetTSS_ID( "06f3c55c-6a16-4691-90b5-0ad81fbc28d9" )
					// Call FISKALY.SetTX_ID( "da4cc33d-7a56-4302-8732-9d2101f5a2e6" )
					// - Last Revision erforderlich
					Var.FISKALY.SetREVISION(p_nLastRevision);
					// - CLIENT-ID erforderlich
					Var.FISKALY.SetCLIENT_ID(p_strClient_Id);
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					// - Transaction-ID erforderlich
					Var.FISKALY.SetTX_ID(p_strTx_Id);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("RetrieveTransaction", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("RetrieveTransaction", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "CreateOrUpdateTransaction") 
				{
					// Create
					// - TSS-ID, CLIENT-ID, STATE erforderlich
					// - State = ACTIVE
					// Call FISKALY.SetCLIENT_ID( "e05e361c-1cc6-4e03-8f64-aedff8eb9493" )
					// Call FISKALY.SetTSS_ID( "06f3c55c-6a16-4691-90b5-0ad81fbc28d9" )
					// Call FISKALY.SetTX_ID( "" )
					// Call FISKALY.SetSTATE( "ACTIVE" )
					// Update
					// - TSS-ID, CLIENT-ID, STATE, LAST_REVISION , PROCESS_TYPE und PROCESS_DATA erforderlich
					// - State = FINISH
					// Call FISKALY.SetCLIENT_ID( "e05e361c-1cc6-4e03-8f64-aedff8eb9493" )
					// Call FISKALY.SetTSS_ID( "06f3c55c-6a16-4691-90b5-0ad81fbc28d9" )
					// Call FISKALY.SetTX_ID( "7bc1b1e1-2ee1-4c59-8944-aaa40b0d4ee7" )
					// Call FISKALY.SetSTATE( "FINISHED" )
					// Call FISKALY.SetREVISION( 1 )
					// Call FISKALY.SetPROCESS_TYPE("Kassenbeleg-V1")
					// Call FISKALY.SetPROCESS_DATA("Beleg^30.00_0.00_0.00_0.00_0.00^30.00:Bar:EUR" )
					if (p_nLastRevision == SalNumber.Null) 
					{
						p_nLastRevision = 0;
					}
					Var.FISKALY.SetCLIENT_ID(p_strClient_Id);
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					Var.FISKALY.SetTX_ID(p_strTx_Id);
					Var.FISKALY.SetSTATE(p_strState);
					Var.FISKALY.SetREVISION(p_nLastRevision);
					Var.FISKALY.SetPROCESS_TYPE(p_strProcessType);
					Var.FISKALY.SetPROCESS_DATA(p_strProcessData);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("CreateOrUpdateTransaction", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("CreateOrUpdateTransaction", ref rp_strObjectFromMethod);
						}
					}
				}
				// ! EXPORT
				if (p_strMethod == "ListAllExports") 
				{
					ret_nStatusMethod = Var.FISKALY.fRunMethod("ListAllExports", ref rp_strObjectFromMethod);
					strResult = Var.FISKALY.GetERROR();
					if (strResult == "HTTP timeout") 
					{
					}
				}
				if (p_strMethod == "ListExportsOfTSS") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("ListExportsofTSS", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("ListExportsofTSS", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "RetrieveExport") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					// - Export-ID erforderlich
					Var.FISKALY.SetEXPORT_ID(p_strExportID);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("RetrieveExport", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("RetrieveExport", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "CancelExport") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					// - Export-ID erforderlich
					Var.FISKALY.SetEXPORT_ID(p_strExportID);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("CancelExport", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("CancelExport", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "TriggerExport") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					// - Export-ID erforderlich
					Var.FISKALY.SetEXPORT_ID(p_strExportID);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("TriggerExport", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
					}
					strResult = Var.FISKALY.GetERROR();
				}

				// Call FISKALY.fRunMethod()
				// Set strResult =FISKALY.ResponseStatus
				// Set p_strStatus = FISKALY.ResponseStatus
				// Set p_strObject = FISKALY.ResponseObject
				if (ret_nStatusMethod == 200) 
				{
					lsJSON = Var.FISKALY.GetCONTENT();
					if (lsJSON.Length > 0) 
					{
						if (rp_strObjectFromMethod == "TSS") 
						{
							p_strTSS_Id = Fiskaly.TSS._id;
							if (p_strTSS_Id == "") 
							{
								// Set p_strTSS_Id = FISKALY.TssId
								Sal.MessageBeep(0);
							}
							p_strCertificateSerial = Fiskaly.TSS.certificate_serial;
							p_strPublicKey = Fiskaly.TSS.public_key;
							p_strSignature_algorithm = Fiskaly.TSS.signature_algorithm;
							p_nSignature_counter = Fiskaly.TSS.signature_counter;
							p_strSignature_timestamp_format = Fiskaly.TSS.signature_timestamp_format;
							p_strState = Fiskaly.TSS.state;
							p_strEnv = Fiskaly.TSS._env;
						}
						if (rp_strObjectFromMethod == "TSS_LIST") 
						{
							if (strParent == "frmAerzte") 
							{
								if (Fiskaly.TSS_LIST == null) 
								{
									return false;
								}
								else
								{
									App.frmAerzte.tblTSE.fFuelleTSSList(Fiskaly.TSS_LIST);
								}
							}
							else if (strParent == "frmFibu") 
							{
								p_nSignature_counter = 0;
								nTSS = Fiskaly.TSS_LIST.count;
								if (nTSS > 0) 
								{
									nCount = 0;
									while (true)
									{
										// If FISKALY.TSS_LIST.TSS_LIST[nCount].state = 'INITIALIZED' And FISKALY.TSS_LIST.TSS_LIST[nCount]._env != 'TEST'
										// Set p_nSignature_counter = p_nSignature_counter + 1
										if (Fiskaly.TSS_LIST.TSS_LIST[nCount].state == "INITIALIZED" && Fiskaly.TSS_LIST.TSS_LIST[nCount]._env != "TEST") 
										{
											p_nSignature_counter = p_nSignature_counter + 1;
										}
										nCount = nCount + 1;
										if (nCount >= nTSS) 
										{
											break;
										}
									}
								}
							}
						}
						else if (rp_strObjectFromMethod == "CLIENT_LIST") 
						{
							if (Fiskaly.CLIENT_LIST.count > 0) 
							{
								p_strSerial_Number = Fiskaly.CLIENT_LIST.CLIENT_LIST[0].serial_number;
								p_strTSS_Id = Fiskaly.CLIENT_LIST.CLIENT_LIST[0].tss_id;
								p_strClient_Id = Fiskaly.CLIENT_LIST.CLIENT_LIST[0]._id;
								p_strType = Fiskaly.CLIENT_LIST.CLIENT_LIST[0]._type;
								p_strEnv = Fiskaly.CLIENT_LIST.CLIENT_LIST[0]._env;
							}
							else
							{
								Int.PalLog("Fiskaly Output " + p_strMethod + " /Result:" + strResult + " /Status:" + p_strStatus + " /kein Client gefunden");
								return false;
							}
						}
						if (rp_strObjectFromMethod == "CLIENT") 
						{
							p_strSerial_Number = Fiskaly.CLIENT.serial_number;
							p_strTSS_Id = Fiskaly.CLIENT.tss_id;
							p_strClient_Id = Fiskaly.CLIENT._id;
							p_strType = Fiskaly.CLIENT._type;
							p_strEnv = Fiskaly.CLIENT._env;
						}
						else if (rp_strObjectFromMethod == "TRANSACTION") 
						{
							p_strTx_Id = Fiskaly.TRANSACTION._id;
							if (p_strTx_Id == "") 
							{
								// Set p_strTx_Id = FISKALY.TxId
								Sal.MessageBeep(0);
							}
							p_strState = Fiskaly.TRANSACTION.state;
							p_strCertificateSerial = Fiskaly.TRANSACTION.certificate_serial;
							p_strSignature_timestamp_format = Fiskaly.TRANSACTION.log.timestamp_format;
							p_strSignature_algorithm = Fiskaly.TRANSACTION.signature.algorithm;
							p_nTransaction_number = Fiskaly.TRANSACTION.number;
							p_strSignature_value = Fiskaly.TRANSACTION.signature.value;
							p_strQR_code_date = Fiskaly.TRANSACTION.qr_code_data;
							p_strEnv = Fiskaly.TRANSACTION._env;
							p_strTime_Start = Var.FISKALY.GetDateFromTimestamp(Fiskaly.TRANSACTION.time_start);
							p_strTime_End = Var.FISKALY.GetDateFromTimestamp(Fiskaly.TRANSACTION.time_end);
							// Set dtTest = FISKALY.GetDateFormatFromTimestamp(FISKALY.TRANSACTION.time_start)
						}
						strResult = "OK";
					}
					else
					{
						strResult = "Content leer";
					}
					Int.PalLog("Fiskaly Output " + p_strMethod + " /Result:" + strResult + " /Status:" + p_strStatus + " /Object:" + p_strObject + " /TSE-Id:" + p_strTSS_Id + "/Tx-Id:" + p_strTx_Id + "/Signature-Value:" + p_strSignature_value);
					return true;
				}
				else
				{
					strResult = Var.FISKALY.GetERROR();
					Int.PalLog("Fiskaly Output " + p_strMethod + " /Result:" + strResult + " /Status:" + p_strStatus + " /Object:" + p_strObject + " /TSE-Id:" + p_strTSS_Id + "/Tx-Id:" + p_strTx_Id);
					Var.strFiskalyError = strResult;
					return false;
				}
			}
			else
			{
				return false;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strParent"></param>
		/// <param name="p_strMethod"></param>
		/// <param name="p_strTSS_Id"></param>
		/// <param name="p_strClient_Id"></param>
		/// <param name="p_strSerial_Number"></param>
		/// <param name="p_strTx_Id"></param>
		/// <param name="p_strState"></param>
		/// <param name="p_strType"></param>
		/// <param name="p_nLastRevision"></param>
		/// <param name="p_strParam"></param>
		/// <param name="p_strStatus"></param>
		/// <param name="p_strObject"></param>
		/// <param name="p_strCertificateSerial"></param>
		/// <param name="p_strPublicKey"></param>
		/// <param name="p_strSignature_algorithm"></param>
		/// <param name="p_nSignature_counter"></param>
		/// <param name="p_strSignature_timestamp_format"></param>
		/// <param name="p_nTransaction_number"></param>
		/// <param name="p_strSignature_value"></param>
		/// <param name="p_strQR_code_date"></param>
		/// <param name="p_strEnv"></param>
		/// <param name="p_strDescription"></param>
		/// <param name="p_strProcessType"></param>
		/// <param name="p_strProcessData"></param>
		/// <param name="p_strExportID"></param>
		/// <param name="p_strTime_Start"></param>
		/// <param name="p_strTime_End"></param>
		/// <returns></returns>
		public static SalBoolean PalFiskalyRunMethod(
					SalString strParent, 
					SalString p_strMethod, 
					ref SalString p_strTSS_Id, 
					ref SalString p_strClient_Id, 
					ref SalString p_strSerial_Number, 
					ref SalString p_strTx_Id, 
					ref SalString p_strState, 
					SalString p_strType, 
					SalNumber p_nLastRevision, 
					SalString p_strParam, 
					ref SalString p_strStatus, 
					ref SalString p_strObject, 
					ref SalString p_strCertificateSerial, 
					ref SalString p_strPublicKey, 
					ref SalString p_strSignature_algorithm, 
					ref SalNumber p_nSignature_counter, 
					ref SalString p_strSignature_timestamp_format, 
					ref SalNumber p_nTransaction_number, 
					ref SalString p_strSignature_value, 
					ref SalString p_strQR_code_date, 
					ref SalString p_strEnv, 
					SalString p_strDescription, 
					ref SalString p_strProcessType, 
					ref SalString p_strProcessData, 
					ref SalString p_strExportID, 
					SalString p_strTime_Start, 
					SalString p_strTime_End)
		{
			// Receive String: p_strURL
			// Receive String: p_strFileDownload
			
			#region Local Variables
			SalString strResult = "";
			SalNumber nTSS = 0;
			SalNumber nCount = 0;
			// FiskalyTSSList: p_FISKALYTSSLIST
			SalNumber ret_nStatusMethod = 0;
			SalString rp_strObjectFromMethod = "";
			SalString lsJSON = "";
			SalDateTime dtTest = SalDateTime.Null;
			// 29.10.21
			SalBoolean bPRun = false;
			#endregion
			
			#region Actions
			Var.strFiskalyError = "";
			// 14.07.20 Ä1896
			if (p_strMethod.Length > 0) 
			{
				// Set FISKALY.Method=p_strMethod
				// Set FISKALY.TssId=p_strTSS_Id
				// Set FISKALY.ClientId=p_strClient_Id
				// Set FISKALY.TxId=p_strTx_Id
				// Set FISKALY.SerialNumber=p_strSerial_Number
				// Set FISKALY.State=p_strState
				// Set FISKALY.Type=p_strType
				// Set FISKALY.LastRevision=p_nLastRevision
				// Set FISKALY.Param=p_strParam

				Int.PalLog("Fiskaly Input " + p_strMethod + " /State:" + p_strState + " /TSE-Id:" + p_strTSS_Id + "/Tx-Id:" + p_strTx_Id);

				ret_nStatusMethod = 0;
				// ! TSS
				if (p_strMethod == "ListTSS") 
				{
					ret_nStatusMethod = Var.FISKALY.fRunMethod("ListTSS", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("ListTSS", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "RetrieveTSS") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("RetrieveTSS", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("RetrieveTSS", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "CreateOrUpdateTSS") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					// - Description / State
					Var.FISKALY.SetSTATE(p_strState);
					Var.FISKALY.SetDESCRIPTION(p_strDescription);
					if (Fiskaly.VERSION == "V2") 
					{
						// ! - Admin PIN
						Var.FISKALY.SetADMIN_PIN("0123456789");

						ret_nStatusMethod = Var.FISKALY.fRunMethod("CreateAndUpdateTSS", ref rp_strObjectFromMethod);
						if (ret_nStatusMethod <= 0) 
						{
							strResult = Var.FISKALY.GetERROR();
							if (strResult == "HTTP timeout") 
							{
								ret_nStatusMethod = Var.FISKALY.fRunMethod("CreateAndUpdateTSS", ref rp_strObjectFromMethod);
							}
						}
					}
					else
					{
						ret_nStatusMethod = Var.FISKALY.fRunMethod("CreateOrUpdateTSS", ref rp_strObjectFromMethod);
						if (ret_nStatusMethod <= 0) 
						{
							strResult = Var.FISKALY.GetERROR();
							if (strResult == "HTTP timeout") 
							{
								ret_nStatusMethod = Var.FISKALY.fRunMethod("CreateOrUpdateTSS", ref rp_strObjectFromMethod);
							}
						}
					}
				}
				if (p_strMethod == "UpdateTSS") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					// - Description / State
					Var.FISKALY.SetSTATE(p_strState);
					Var.FISKALY.SetDESCRIPTION(p_strDescription);
					if (Fiskaly.VERSION == "V2") 
					{
						// ! - Admin PIN
						Var.FISKALY.SetADMIN_PIN("0123456789");

						ret_nStatusMethod = Var.FISKALY.fRunMethod("UpdateTSS", ref rp_strObjectFromMethod);
					}
					else
					{
						ret_nStatusMethod = Var.FISKALY.fRunMethod("CreateOrUpdateTSS", ref rp_strObjectFromMethod);
					}
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("UpdateTSS", ref rp_strObjectFromMethod);
						}
					}
				}
				// ! CLIENTS
				if (p_strMethod == "ListAllClients") 
				{
					ret_nStatusMethod = Var.FISKALY.fRunMethod("ListAllClients", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("ListAllClients", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "ListClientsOfTSS") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("ListClientsOfTSS", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("ListClientsOfTSS", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "RetrieveClient") 
				{
					// - CLIENT-ID erforderlich
					Var.FISKALY.SetCLIENT_ID(p_strClient_Id);
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("RetrieveClient", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("RetrieveClient", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "CreateOrUpdateClient") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					// - CLIENT-ID , wenn leer wird automatisch neue erzeugt
					Var.FISKALY.SetCLIENT_ID(p_strClient_Id);
					// - SERIAL-NUMBER, wenn leer wird automatisch neue erzeugt
					Var.FISKALY.SetSERIAL_NUMBER(p_strSerial_Number);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("CreateOrUpdateClient", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("CreateOrUpdateClient", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "CreateClient") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					// - CLIENT-ID , wenn leer wird automatisch neue erzeugt
					Var.FISKALY.SetCLIENT_ID(p_strClient_Id);
					// - SERIAL-NUMBER, wenn leer wird automatisch neue erzeugt
					Var.FISKALY.SetSERIAL_NUMBER(p_strSerial_Number);
					// ! - Admin PIN
					Var.FISKALY.SetADMIN_PIN("0123456789");

					ret_nStatusMethod = Var.FISKALY.fRunMethod("CreateClient", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("CreateClient", ref rp_strObjectFromMethod);
						}
					}
				}
				// ! TRANSACTION
				if (p_strMethod == "ListAllTransactions") 
				{
					ret_nStatusMethod = Var.FISKALY.fRunMethod("ListAllTransactions", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("ListAllTransactions", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "ListTransactionsOfTSS") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("ListTransactionsOfTSS", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("ListTransactionsOfTSS", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "ListTransactionsOfClient") 
				{
					// - CLIENT-ID erforderlich
					Var.FISKALY.SetCLIENT_ID(p_strClient_Id);
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("ListTransactionsOfClient", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("ListTransactionsOfClient", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "RetrieveTransaction") 
				{
					// Call FISKALY.SetREVISION( 2 )
					// Call FISKALY.SetCLIENT_ID( "e05e361c-1cc6-4e03-8f64-aedff8eb9493" )
					// Call FISKALY.SetTSS_ID( "06f3c55c-6a16-4691-90b5-0ad81fbc28d9" )
					// Call FISKALY.SetTX_ID( "da4cc33d-7a56-4302-8732-9d2101f5a2e6" )
					// - Last Revision erforderlich
					Var.FISKALY.SetREVISION(p_nLastRevision);
					// - CLIENT-ID erforderlich
					Var.FISKALY.SetCLIENT_ID(p_strClient_Id);
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					// - Transaction-ID erforderlich
					Var.FISKALY.SetTX_ID(p_strTx_Id);
					// ! - Admin PIN
					Var.FISKALY.SetADMIN_PIN("0123456789");

					ret_nStatusMethod = Var.FISKALY.fRunMethod("RetrieveTransaction", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("RetrieveTransaction", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "CreateOrUpdateTransaction" || p_strMethod == "CreateTransaction" || p_strMethod == "CancelTransaction" || p_strMethod == "FinishTransaction") 
				{
					// Create
					// - TSS-ID, CLIENT-ID, STATE erforderlich
					// - State = ACTIVE
					// Call FISKALY.SetCLIENT_ID( "e05e361c-1cc6-4e03-8f64-aedff8eb9493" )
					// Call FISKALY.SetTSS_ID( "06f3c55c-6a16-4691-90b5-0ad81fbc28d9" )
					// Call FISKALY.SetTX_ID( "" )
					// Call FISKALY.SetSTATE( "ACTIVE" )
					// Update
					// - TSS-ID, CLIENT-ID, STATE, LAST_REVISION , PROCESS_TYPE und PROCESS_DATA erforderlich
					// - State = FINISH
					// Call FISKALY.SetCLIENT_ID( "e05e361c-1cc6-4e03-8f64-aedff8eb9493" )
					// Call FISKALY.SetTSS_ID( "06f3c55c-6a16-4691-90b5-0ad81fbc28d9" )
					// Call FISKALY.SetTX_ID( "7bc1b1e1-2ee1-4c59-8944-aaa40b0d4ee7" )
					// Call FISKALY.SetSTATE( "FINISHED" )
					// Call FISKALY.SetREVISION( 1 )
					// Call FISKALY.SetPROCESS_TYPE("Kassenbeleg-V1")
					// Call FISKALY.SetPROCESS_DATA("Beleg^30.00_0.00_0.00_0.00_0.00^30.00:Bar:EUR" )
					if (p_nLastRevision == SalNumber.Null) 
					{
						p_nLastRevision = 0;
					}
					Var.FISKALY.SetCLIENT_ID(p_strClient_Id);
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					Var.FISKALY.SetTX_ID(p_strTx_Id);
					Var.FISKALY.SetSTATE(p_strState);
					Var.FISKALY.SetREVISION(p_nLastRevision);
					Var.FISKALY.SetPROCESS_TYPE(p_strProcessType);
					Var.FISKALY.SetPROCESS_DATA(p_strProcessData);
					if (Fiskaly.VERSION == "V2") 
					{
						// ! - Admin PIN
						Var.FISKALY.SetADMIN_PIN("0123456789");

						if (p_strMethod == "CreateOrUpdateTransaction") 
						{
							if (p_strState == "ACTIVE") 
							{
								ret_nStatusMethod = Var.FISKALY.fRunMethod("CreateTransaction", ref rp_strObjectFromMethod);
							}
							else if (p_strState == "CANCELLED") 
							{
								ret_nStatusMethod = Var.FISKALY.fRunMethod("CancelTransaction", ref rp_strObjectFromMethod);
							}
							else
							{
								ret_nStatusMethod = Var.FISKALY.fRunMethod("FinishTransaction", ref rp_strObjectFromMethod);
							}
						}
						else
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod(p_strMethod, ref rp_strObjectFromMethod);
						}
					}
					else
					{
						ret_nStatusMethod = Var.FISKALY.fRunMethod(p_strMethod, ref rp_strObjectFromMethod);
					}
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("CreateOrUpdateTransaction", ref rp_strObjectFromMethod);
						}
					}
				}
				// ! EXPORT
				if (p_strMethod == "ListAllExports") 
				{
					ret_nStatusMethod = Var.FISKALY.fRunMethod("ListAllExports", ref rp_strObjectFromMethod);
					strResult = Var.FISKALY.GetERROR();
					if (strResult == "HTTP timeout") 
					{
					}
				}
				if (p_strMethod == "ListExportsOfTSS") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("ListExportsOfTSS", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("ListExportsOfTSS", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "RetrieveExport") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					// - Export-ID erforderlich
					Var.FISKALY.SetEXPORT_ID(p_strExportID);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("RetrieveExport", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("RetrieveExport", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "CancelExport") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					// - Export-ID erforderlich
					Var.FISKALY.SetEXPORT_ID(p_strExportID);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("CancelExport", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
						strResult = Var.FISKALY.GetERROR();
						if (strResult == "HTTP timeout") 
						{
							ret_nStatusMethod = Var.FISKALY.fRunMethod("CancelExport", ref rp_strObjectFromMethod);
						}
					}
				}
				if (p_strMethod == "TriggerExport") 
				{
					// - TSS-ID erforderlich
					Var.FISKALY.SetTSS_ID(p_strTSS_Id);
					// - Export-ID erforderlich
					Var.FISKALY.SetEXPORT_ID(p_strExportID);
					Var.FISKALY.SetSTART_DATE(p_strTime_Start);
					Var.FISKALY.SetEND_DATE(p_strTime_End);
					ret_nStatusMethod = Var.FISKALY.fRunMethod("TriggerExport", ref rp_strObjectFromMethod);
					if (ret_nStatusMethod <= 0) 
					{
					}
					strResult = Var.FISKALY.GetERROR();
				}
				// ! -- Geändert (13.07.2021)
				// If p_strMethod = 'Download'
				// - TSS-ID erforderlich
				// Call FISKALY.SetURL_DOWNLOAD( p_strURL )
				// Call FISKALY.SetFILE_DOWNLOAD( p_strFileDownload )
				// Set ret_nStatusMethod=FISKALY.fRunMethod( 'Download',rp_strObjectFromMethod)
				// If p_strMethod = 'RetrieveFileOfExport'
				// - TSS-ID erforderlich
				// Call FISKALY.SetTSS_ID( p_strTSS_Id)
				// - Export-ID erforderlich
				// Call FISKALY.SetEXPORT_ID( p_strExportID)
				// Set ret_nStatusMethod=FISKALY.fRunMethod( 'RetrieveFileOfExport',rp_strObjectFromMethod)

				// Call FISKALY.fRunMethod()
				// Set strResult =FISKALY.ResponseStatus
				// Set p_strStatus = FISKALY.ResponseStatus
				// Set p_strObject = FISKALY.ResponseObject
				if (ret_nStatusMethod == 200) 
				{
					lsJSON = Var.FISKALY.GetCONTENT();
					if (lsJSON.Length > 0) 
					{
						if (rp_strObjectFromMethod == "TSS") 
						{
							p_strTSS_Id = Fiskaly.TSS._id;
							if (p_strTSS_Id == "") 
							{
								// Set p_strTSS_Id = FISKALY.TssId
								Sal.MessageBeep(0);
							}
							p_strCertificateSerial = Fiskaly.TSS.certificate_serial;
							p_strPublicKey = Fiskaly.TSS.public_key;
							p_strSignature_algorithm = Fiskaly.TSS.signature_algorithm;
							p_nSignature_counter = Fiskaly.TSS.signature_counter;
							p_strSignature_timestamp_format = Fiskaly.TSS.signature_timestamp_format;
							p_strState = Fiskaly.TSS.state;
							p_strEnv = Fiskaly.TSS._env;
						}
						else if (rp_strObjectFromMethod == "TSS_V2") 
						{
							p_strTSS_Id = Fiskaly.TSS_V2._id;
							if (p_strTSS_Id == "") 
							{
								// Set p_strTSS_Id = FISKALY.TssId
								Sal.MessageBeep(0);
							}
							p_strCertificateSerial = Fiskaly.TSS_V2.certificate;
							p_strPublicKey = Fiskaly.TSS_V2.public_key;
							p_strSignature_algorithm = Fiskaly.TSS_V2.signature_algorithm;
							p_nSignature_counter = Fiskaly.TSS_V2.signature_counter;
							p_strSignature_timestamp_format = Fiskaly.TSS_V2.signature_timestamp_format;
							p_strState = Fiskaly.TSS_V2.state;
							p_strEnv = Fiskaly.TSS_V2._env;
						}
						// Else If rp_strObjectFromMethod="TSS_LIST"
						// If strParent = 'frmTSE'
						// Call frmTSE.tblTSE.fFuelleTSSList( FISKALY.TSS_LIST )
						// Else If strParent = 'PalFiskalyGetFirstActiveTSS'
						// Call PalSucheErsteTSS( FISKALY.TSS_LIST, p_strTSS_Id, p_strEnv )
						// If FISKALY.TSS_LIST != OBJ_Null
						// Set nTSS=0
						// Set p_FISKALYTSSLIST = FISKALY.TSS_LIST
						// Set nTSS = FISKALY.TSS_LIST.count
						// If nTSS>0
						// Set nCount=0
						// Loop
						// If FISKALY.TSS_LIST.TSS_LIST[nCount].state = 'INITIALIZED'
						// Set p_strTSS_Id = FISKALY.TSS_LIST.TSS_LIST[nCount]._id
						// Set p_strEnv = FISKALY.TSS_LIST.TSS_LIST[nCount]._env
						// Break
						// Set nCount=nCount+1
						// If nCount>=nTSS
						// Break
						// Call SalTblSetFlagsAnyRows( hWndItem, ROW_New, FALSE, 0, 0 )
						// Else
						// Return FALSE
						else if (rp_strObjectFromMethod == "TSS_LIST") 
						{
							if (strParent == "frmAerzte") 
							{
								if (Fiskaly.TSS_LIST == null) 
								{
									return false;
								}
								else
								{
									App.frmAerzte.tblTSE.fFuelleTSSList(Fiskaly.TSS_LIST);
								}
							}
							else if (strParent == "frmFibu") 
							{
								// 12.08.22 Ä2037 Else
								if (SalDateTime.Current <= new SalDateTime(2023, 1, 15)) 
								{
									p_nSignature_counter = 0;
									nTSS = Fiskaly.TSS_LIST.count;
									if (nTSS > 0) 
									{
										nCount = 0;
										while (true)
										{
											if (Fiskaly.TSS_LIST.TSS_LIST[nCount].state == "INITIALIZED" && Fiskaly.TSS_LIST.TSS_LIST[nCount]._env != "TEST") 
											{
												p_nSignature_counter = p_nSignature_counter + 1;
											}
											nCount = nCount + 1;
											if (nCount >= nTSS) 
											{
												break;
											}
										}
									}
								}
							}
						}
						else if (rp_strObjectFromMethod == "TSS_LIST_V2") 
						{
							if (strParent == "frmAerzte") 
							{
								if (Fiskaly.TSS_LIST_V2 == null) 
								{
									return false;
								}
								else
								{
									App.frmAerzte.tblTSE.fFuelleTSSList_V2(Fiskaly.TSS_LIST_V2);
								}
							}
							else if (strParent == "frmFibu") 
							{
								p_nSignature_counter = 0;
								nTSS = Fiskaly.TSS_LIST_V2.count;
								if (nTSS > 0) 
								{
									nCount = 0;
									while (true)
									{
										// If FISKALY.TSS_LIST.TSS_LIST[nCount].state = 'INITIALIZED' And FISKALY.TSS_LIST.TSS_LIST[nCount]._env != 'TEST'
										// Set p_nSignature_counter = p_nSignature_counter + 1
										if (Fiskaly.TSS_LIST_V2.TSS_LIST[nCount].state == "INITIALIZED" && Fiskaly.TSS_LIST_V2.TSS_LIST[nCount]._env != "TEST") 
										{
											p_nSignature_counter = p_nSignature_counter + 1;
										}
										nCount = nCount + 1;
										if (nCount >= nTSS) 
										{
											break;
										}
									}
								}
							}
						}
						else if (rp_strObjectFromMethod == "CLIENT_LIST") 
						{
							if (Fiskaly.CLIENT_LIST.count > 0) 
							{
								p_strSerial_Number = Fiskaly.CLIENT_LIST.CLIENT_LIST[0].serial_number;
								p_strTSS_Id = Fiskaly.CLIENT_LIST.CLIENT_LIST[0].tss_id;
								p_strClient_Id = Fiskaly.CLIENT_LIST.CLIENT_LIST[0]._id;
								p_strType = Fiskaly.CLIENT_LIST.CLIENT_LIST[0]._type;
								p_strEnv = Fiskaly.CLIENT_LIST.CLIENT_LIST[0]._env;
							}
							else
							{
								Int.PalLog("Fiskaly Output " + p_strMethod + " /Result:" + strResult + " /Status:" + p_strStatus + " /kein Client gefunden");
								return false;
							}
						}
						else if (rp_strObjectFromMethod == "CLIENT_LIST_V2") 
						{
							if (Fiskaly.CLIENT_LIST_V2.count > 0) 
							{
								p_strSerial_Number = Fiskaly.CLIENT_LIST_V2.CLIENT_LIST[0].serial_number;
								p_strTSS_Id = Fiskaly.CLIENT_LIST_V2.CLIENT_LIST[0].tss_id;
								p_strClient_Id = Fiskaly.CLIENT_LIST_V2.CLIENT_LIST[0]._id;
								p_strType = Fiskaly.CLIENT_LIST_V2.CLIENT_LIST[0]._type;
								p_strEnv = Fiskaly.CLIENT_LIST_V2.CLIENT_LIST[0]._env;
							}
							else
							{
								Int.PalLog("Fiskaly Output " + p_strMethod + " /Result:" + strResult + " /Status:" + p_strStatus + " /kein Client gefunden");
								return false;
							}
						}
						else if (rp_strObjectFromMethod == "CLIENT") 
						{
							p_strSerial_Number = Fiskaly.CLIENT.serial_number;
							p_strTSS_Id = Fiskaly.CLIENT.tss_id;
							p_strClient_Id = Fiskaly.CLIENT._id;
							p_strType = Fiskaly.CLIENT._type;
							p_strEnv = Fiskaly.CLIENT._env;
						}
						else if (rp_strObjectFromMethod == "CLIENT_V2") 
						{
							p_strSerial_Number = Fiskaly.CLIENT_V2.serial_number;
							p_strTSS_Id = Fiskaly.CLIENT_V2.tss_id;
							p_strClient_Id = Fiskaly.CLIENT_V2._id;
							p_strType = Fiskaly.CLIENT_V2._type;
							p_strEnv = Fiskaly.CLIENT_V2._env;
						}
						else if (rp_strObjectFromMethod == "TRANSACTION") 
						{
							p_strTx_Id = Fiskaly.TRANSACTION._id;
							if (p_strTx_Id == "") 
							{
								// Set p_strTx_Id = FISKALY.TxId
								Sal.MessageBeep(0);
							}
							p_strState = Fiskaly.TRANSACTION.state;
							p_strCertificateSerial = Fiskaly.TRANSACTION.certificate_serial;
							p_strSignature_timestamp_format = Fiskaly.TRANSACTION.log.timestamp_format;
							p_strSignature_algorithm = Fiskaly.TRANSACTION.signature.algorithm;
							p_nTransaction_number = Fiskaly.TRANSACTION.number;
							p_strSignature_value = Fiskaly.TRANSACTION.signature.value;
							p_strQR_code_date = Fiskaly.TRANSACTION.qr_code_data;
							p_strEnv = Fiskaly.TRANSACTION._env;
							p_strTime_Start = Var.FISKALY.GetDateFromTimestamp(Fiskaly.TRANSACTION.time_start);
							p_strTime_End = Var.FISKALY.GetDateFromTimestamp(Fiskaly.TRANSACTION.time_end);
							// Set dtTest = FISKALY.GetDateFormatFromTimestamp(FISKALY.TRANSACTION.time_start)
						}
						else if (rp_strObjectFromMethod == "TRANSACTION_V2") 
						{
							p_strTx_Id = Fiskaly.TRANSACTION_V2._id;
							if (p_strTx_Id == "") 
							{
								// Set p_strTx_Id = FISKALY.TxId
								Sal.MessageBeep(0);
							}
							p_strState = Fiskaly.TRANSACTION_V2.state;
							p_strCertificateSerial = Fiskaly.TRANSACTION_V2.tss_serial_number;
							p_strSignature_timestamp_format = Fiskaly.TRANSACTION_V2.log.timestamp_format;
							p_strSignature_algorithm = Fiskaly.TRANSACTION_V2.signature.algorithm;
							p_nTransaction_number = Fiskaly.TRANSACTION.number;
							p_strSignature_value = Fiskaly.TRANSACTION_V2.signature.value;
							p_strQR_code_date = Fiskaly.TRANSACTION_V2.qr_code_data;
							p_strEnv = Fiskaly.TRANSACTION_V2._env;
							p_strTime_Start = Var.FISKALY.GetDateFromTimestamp(Fiskaly.TRANSACTION_V2.time_start);
							p_strTime_End = Var.FISKALY.GetDateFromTimestamp(Fiskaly.TRANSACTION_V2.time_end);
							// Set dtTest = FISKALY.GetDateFormatFromTimestamp(FISKALY.TRANSACTION.time_start)
						}
						// Else If rp_strObjectFromMethod="EXPORT_V2"
						// Call gridExportList.fFuelleExport_V2( FISKALY.EXPORT_V2)
						// Call dlgFiskalyExport.fExportV2( FISKALY.EXPORT_V2 )
						strResult = "OK";
					}
					else
					{
						strResult = "Content leer";
					}
					Int.PalLog("Fiskaly Output " + p_strMethod + " /Result:" + strResult + " /Status:" + p_strStatus + " /Object:" + p_strObject + " /TSE-Id:" + p_strTSS_Id + "/Tx-Id:" + p_strTx_Id + "/Signature-Value:" + p_strSignature_value);
					return true;
				}
				else if (ret_nStatusMethod == 100) 
				{
					strResult = Var.FISKALY.GetERROR();
					Int.PalLog("Fiskaly Output " + p_strMethod + " /Result:" + strResult + " /Status:" + p_strStatus + " /Object:" + p_strObject + " /TSE-Id:" + p_strTSS_Id + "/Tx-Id:" + p_strTx_Id);
					Var.strFiskalyError = strResult;
					return true;
				}
				else
				{
					strResult = Var.FISKALY.GetERROR();
					Int.PalLog("Fiskaly Output " + p_strMethod + " /Result:" + strResult + " /Status:" + p_strStatus + " /Object:" + p_strObject + " /TSE-Id:" + p_strTSS_Id + "/Tx-Id:" + p_strTx_Id);
					Var.strFiskalyError = strResult;
					return false;
				}
			}
			else
			{
				return false;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nFirma"></param>
		/// <param name="strTSSId"></param>
		/// <param name="strClientId"></param>
		/// <param name="strStatus"></param>
		/// <param name="strObject"></param>
		/// <param name="strCertificateSerial"></param>
		/// <param name="strPublicKey"></param>
		/// <param name="strSignature_algorithm"></param>
		/// <param name="nSignature_counter"></param>
		/// <param name="strSignature_timestamp_format"></param>
		/// <param name="strState"></param>
		/// <param name="nTransaction_number"></param>
		/// <param name="strSignature_value"></param>
		/// <param name="strQR_code_date"></param>
		/// <param name="strEnv"></param>
		/// <param name="p_strDescription"></param>
		/// <param name="p_strProcessType"></param>
		/// <param name="p_strProcessData"></param>
		/// <param name="p_strExportID"></param>
		/// <param name="p_strTime_Start"></param>
		/// <param name="p_strTime_End"></param>
		/// <returns></returns>
		public static SalBoolean PalFiskalyDisableTSS(
					SalNumber nFirma, 
					ref SalString strTSSId, 
					ref SalString strClientId, 
					ref SalString strStatus, 
					ref SalString strObject, 
					ref SalString strCertificateSerial, 
					ref SalString strPublicKey, 
					ref SalString strSignature_algorithm, 
					ref SalNumber nSignature_counter, 
					ref SalString strSignature_timestamp_format, 
					ref SalString strState, 
					ref SalNumber nTransaction_number, 
					ref SalString strSignature_value, 
					ref SalString strQR_code_date, 
					ref SalString strEnv, 
					SalString p_strDescription, 
					ref SalString p_strProcessType, 
					ref SalString p_strProcessData, 
					ref SalString p_strExportID, 
					ref SalString p_strTime_Start, 
					ref SalString p_strTime_End)
		{
			#region Local Variables
			SalString pstrTSSId = "";
			SalString pstrClientId = "";
			SalString pstrSerialNumber = "";
			SalString pstrTxId = "";
			// String: pstrCertificateSerial
			// String: pstrPublicKey
			// String: pstrSignature_algorithm
			// Number: nSignature_counter
			// String: pstrSignature_timestamp_format
			#endregion
			
			#region Actions
			pstrTxId = "";
			strState = "DISABLED";
			// 05.12.22 F4948 'CreateOrUpdateTSS' -> 'UpdateTSS'
			if (Int.PalFiskalyRunMethod("", "UpdateTSS", ref strTSSId, ref strClientId, ref pstrSerialNumber, ref pstrTxId, ref strState, "", SalNumber.Null, "", ref strStatus, ref strObject, ref strCertificateSerial, ref strPublicKey, ref strSignature_algorithm, ref 
				nSignature_counter, ref strSignature_timestamp_format, ref nTransaction_number, ref strSignature_value, ref strQR_code_date, ref strEnv, p_strDescription, ref p_strProcessType, ref p_strProcessData, ref p_strExportID, p_strTime_Start, p_strTime_End)) 
			{
				return true;
			}
			else
			{
				return false;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nFirma"></param>
		/// <param name="strTSSId"></param>
		/// <param name="strStatus"></param>
		/// <param name="strObject"></param>
		/// <param name="strCertificateSerial"></param>
		/// <param name="strPublicKey"></param>
		/// <param name="strSignature_algorithm"></param>
		/// <param name="nSignature_counter"></param>
		/// <param name="strSignature_timestamp_format"></param>
		/// <param name="strState"></param>
		/// <param name="nTransaction_number"></param>
		/// <param name="strSignature_value"></param>
		/// <param name="strQR_code_date"></param>
		/// <param name="strEnv"></param>
		/// <param name="p_strDescription"></param>
		/// <param name="p_strProcessType"></param>
		/// <param name="p_strProcessData"></param>
		/// <param name="p_strExportID"></param>
		/// <param name="p_strTime_Start"></param>
		/// <param name="p_strTime_End"></param>
		/// <returns></returns>
		public static SalBoolean PalFiskalyRetrieveTSS(
					SalNumber nFirma, 
					ref SalString strTSSId, 
					ref SalString strStatus, 
					ref SalString strObject, 
					ref SalString strCertificateSerial, 
					ref SalString strPublicKey, 
					ref SalString strSignature_algorithm, 
					ref SalNumber nSignature_counter, 
					ref SalString strSignature_timestamp_format, 
					ref SalString strState, 
					ref SalNumber nTransaction_number, 
					ref SalString strSignature_value, 
					ref SalString strQR_code_date, 
					ref SalString strEnv, 
					SalString p_strDescription, 
					ref SalString p_strProcessType, 
					ref SalString p_strProcessData, 
					ref SalString p_strExportID, 
					ref SalString p_strTime_Start, 
					ref SalString p_strTime_End)
		{
			#region Local Variables
			SalString pstrClientId = "";
			SalString pstrSerialNumber = "";
			SalString pstrTxId = "";
			#endregion
			
			#region Actions
			pstrClientId = "";
			pstrSerialNumber = "";
			pstrTxId = "";
			strStatus = "";
			strState = "";
			strCertificateSerial = "";
			strPublicKey = "";
			strSignature_algorithm = "";
			nSignature_counter = SalNumber.Null;
			strSignature_timestamp_format = "";
			nTransaction_number = SalNumber.Null;
			strSignature_value = "";
			strQR_code_date = "";
			strEnv = "";
			if (Int.PalFiskalyRunMethod("", "RetrieveTSS", ref strTSSId, ref pstrClientId, ref pstrSerialNumber, ref pstrTxId, ref strState, "", SalNumber.Null, "", ref strStatus, ref strObject, ref strCertificateSerial, ref strPublicKey, ref strSignature_algorithm, ref 
				nSignature_counter, ref strSignature_timestamp_format, ref nTransaction_number, ref strSignature_value, ref strQR_code_date, ref strEnv, p_strDescription, ref p_strProcessType, ref p_strProcessData, ref p_strExportID, p_strTime_Start, p_strTime_End)) 
			{
				return true;
			}
			else
			{
				return false;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nFirma"></param>
		/// <param name="strTSSId"></param>
		/// <param name="strStatus"></param>
		/// <param name="strObject"></param>
		/// <param name="strCertificateSerial"></param>
		/// <param name="strPublicKey"></param>
		/// <param name="strSignature_algorithm"></param>
		/// <param name="nSignature_counter"></param>
		/// <param name="strSignature_timestamp_format"></param>
		/// <param name="strClientId"></param>
		/// <param name="strSerialNumber"></param>
		/// <param name="strState"></param>
		/// <param name="nTransaction_number"></param>
		/// <param name="strSignature_value"></param>
		/// <param name="strQR_code_date"></param>
		/// <param name="strEnv"></param>
		/// <param name="p_strDescription"></param>
		/// <param name="p_strProcessType"></param>
		/// <param name="p_strProcessData"></param>
		/// <param name="p_strExportID"></param>
		/// <param name="p_strTime_Start"></param>
		/// <param name="p_strTime_End"></param>
		/// <returns></returns>
		public static SalBoolean PalFiskalyListClientsOfTSS(
					SalNumber nFirma, 
					ref SalString strTSSId, 
					ref SalString strStatus, 
					ref SalString strObject, 
					ref SalString strCertificateSerial, 
					ref SalString strPublicKey, 
					ref SalString strSignature_algorithm, 
					ref SalNumber nSignature_counter, 
					ref SalString strSignature_timestamp_format, 
					ref SalString strClientId, 
					ref SalString strSerialNumber, 
					ref SalString strState, 
					ref SalNumber nTransaction_number, 
					ref SalString strSignature_value, 
					ref SalString strQR_code_date, 
					ref SalString strEnv, 
					SalString p_strDescription, 
					ref SalString p_strProcessType, 
					ref SalString p_strProcessData, 
					ref SalString p_strExportID, 
					ref SalString p_strTime_Start, 
					ref SalString p_strTime_End)
		{
			#region Local Variables
			SalString pstrTxId = "";
			#endregion
			
			#region Actions
			strClientId = "";
			strSerialNumber = "";
			pstrTxId = "";
			strStatus = "";
			if (Int.PalFiskalyRunMethod("", "ListClientsOfTSS", ref strTSSId, ref strClientId, ref strSerialNumber, ref pstrTxId, ref strState, "", SalNumber.Null, "", ref strStatus, ref strObject, ref strCertificateSerial, ref strPublicKey, ref strSignature_algorithm, ref 
				nSignature_counter, ref strSignature_timestamp_format, ref nTransaction_number, ref strSignature_value, ref strQR_code_date, ref strEnv, p_strDescription, ref p_strProcessType, ref p_strProcessData, ref p_strExportID, p_strTime_Start, p_strTime_End)) 
			{
				return true;
			}
			else
			{
				return false;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nFirma"></param>
		/// <param name="strTSSId"></param>
		/// <param name="strStatus"></param>
		/// <param name="strObject"></param>
		/// <param name="strCertificateSerial"></param>
		/// <param name="strPublicKey"></param>
		/// <param name="strSignature_algorithm"></param>
		/// <param name="nSignature_counter"></param>
		/// <param name="strSignature_timestamp_format"></param>
		/// <param name="strState"></param>
		/// <param name="strClientId"></param>
		/// <param name="strSerialNumber"></param>
		/// <param name="nTransaction_number"></param>
		/// <param name="strSignature_value"></param>
		/// <param name="strQR_code_date"></param>
		/// <param name="strEnv"></param>
		/// <param name="p_strDescription"></param>
		/// <param name="p_strProcessType"></param>
		/// <param name="p_strProcessData"></param>
		/// <param name="p_strExportID"></param>
		/// <param name="p_strTime_Start"></param>
		/// <param name="p_strTime_End"></param>
		/// <returns></returns>
		public static SalBoolean PalFiskalyCreateOrUpdateClient(
					SalNumber nFirma, 
					SalString strTSSId, 
					ref SalString strStatus, 
					ref SalString strObject, 
					ref SalString strCertificateSerial, 
					ref SalString strPublicKey, 
					ref SalString strSignature_algorithm, 
					ref SalNumber nSignature_counter, 
					ref SalString strSignature_timestamp_format, 
					ref SalString strState, 
					ref SalString strClientId, 
					ref SalString strSerialNumber, 
					ref SalNumber nTransaction_number, 
					ref SalString strSignature_value, 
					ref SalString strQR_code_date, 
					ref SalString strEnv, 
					SalString p_strDescription, 
					ref SalString p_strProcessType, 
					ref SalString p_strProcessData, 
					ref SalString p_strExportID, 
					ref SalString p_strTime_Start, 
					ref SalString p_strTime_End)
		{
			#region Local Variables
			SalString pstrTSSId = "";
			SalString pstrClientId = "";
			SalString pstrSerialNumber = "";
			SalString pstrTxId = "";
			// String: pstrCertificateSerial
			// String: pstrPublicKey
			// String: pstrSignature_algorithm
			// Number: nSignature_counter
			// String: pstrSignature_timestamp_format
			#endregion
			
			#region Actions
			if (strClientId == "") 
			{
				strClientId = Var.FISKALY.fNewGuid();
				strSerialNumber = Var.FISKALY.fNewGuid();
			}
			pstrTxId = "";
			strStatus = "";
			strState = strStatus;
			if (Int.PalFiskalyRunMethod("", "CreateOrUpdateClient", ref strTSSId, ref strClientId, ref strSerialNumber, ref pstrTxId, ref strState, "", SalNumber.Null, "", ref strStatus, ref strObject, ref strCertificateSerial, ref strPublicKey, ref 
				strSignature_algorithm, ref nSignature_counter, ref strSignature_timestamp_format, ref nTransaction_number, ref strSignature_value, ref strQR_code_date, ref Var.strFiskalyEnv, p_strDescription, ref p_strProcessType, ref p_strProcessData, ref 
				p_strExportID, p_strTime_Start, p_strTime_End)) 
			{
				return true;
			}
			else
			{
				return false;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nR"></param>
		/// <param name="nG"></param>
		/// <param name="nB"></param>
		/// <returns></returns>
		public static SalNumber PalAddColor(SalNumber nR, SalNumber nG, SalNumber nB)
		{
			#region Actions
			if (nR > 255) 
			{
				nR = 255;
			}
			if (nG > 255) 
			{
				nG = 255;
			}
			if (nB > 255) 
			{
				nB = 255;
			}
			return Sal.ColorFromRGB(nR, nG, nB);
			#endregion
		}

		/// <summary>
		/// </summary>
		/// <param name="nFormatFlag"></param>
		/// <param name="sSubject"></param>
		/// <param name="sOriginator"></param>
		/// <param name="sRecipientslist"></param>
		/// <param name="sBody"></param>
		/// <param name="sAttachments"></param>
		/// <param name="nHighPriority"></param>
		/// <param name="strError"></param>
		/// <returns></returns>
		public static SalNumber SendeMail(SalNumber nFormatFlag, SalString sSubject, SalString sOriginator, SalString sRecipientslist, SalString sBody, SalString sAttachments, SalNumber nHighPriority, ref SalString strError, SalString strReciever, SalString Sender)
		{
			#region Local Variables
			SalNumber nPReturn = 0;
			SalBoolean bRepeat = false;
			SalString strPName = "";
			SalString strPPw = "";
			#endregion

			#region Actions
			nPReturn = Var.oOutgoingMail.SendMail(nFormatFlag, sSubject, sOriginator, sRecipientslist, SalString.Null, sBody, sAttachments, false, nHighPriority, strReciever, Sender, strPName, strPPw);
			if (nPReturn == 0)
			{
			}
			else
			{
				if (nPReturn == 1)
				{
					strError = "User hasn\'t connected to server yet.";
				}
				else if (nPReturn == 2)
				{
					strError = "Server is stopping.";
				}
				else if (nPReturn == 3)
				{
					strError = "Invalid recipient.";
				}
				else if (nPReturn == 4)
				{
					strError = "Invalid attachment file.";
				}
				else if (nPReturn == 5)
				{
					strError = "Attachment file denies access.";
				}
				else if (nPReturn == 6)
				{
					strError = "Other error.";
				}
				else
				{
					strError = "unbekannter Fehler";
					// Call SalModalDialog(dlgUserCredentials, hWndForm )
					// Call PalMailClose(  )
					// Call PalMailInit(  )
					// Set nPReturn = oOutgoingMail.SendMail( nFormatFlag, sSubject, sOriginator, sRecipientslist, STRING_Null, sBody, sAttachments, FALSE, nHighPriority )
					// If nPReturn = 1
					// Set strError = 'User hasn\'t connected to server yet.'
					// Else If nPReturn = 2
					// Set strError = 'Server is stopping.'
					// Else If nPReturn = 3
					// Set strError = 'Invalid recipient.'
					// Else If nPReturn = 4
					// Set strError = 'Invalid attachment file.'
					// Else If nPReturn = 5
					// Set strError = 'Attachment file denies access.'
					// Else If nPReturn = 6
					// Set strError = 'Other error.'
					// Else
					// Set strError = 'unbekannter Fehler'
					// 21.05.21
					Var.nErr = dlgUserCredentials.ModalDialog(Sys.hWndForm, "Bitte prüfen Sie Ihre Windows-Anmeldedaten");
					if (Var.nErr == 1)
					{
						Int.PalGetProfileStringR("Credentials", "Name", "", ref strPName, "TVN");
						Int.PalGetProfileStringR("Credentials", "Passwort", "", ref strPPw, "TVN");
						if (strPName != "" && strPPw != "")
						{
							Int.PalMailClose();
							Int.PalMailInit();
							nPReturn = Var.oOutgoingMail.SendMail(nFormatFlag, sSubject, sOriginator, sRecipientslist, SalString.Null, sBody, sAttachments, false, nHighPriority, strReciever, Sender, strPName, strPPw);
							if (nPReturn == 0)
							{
								strError = "";
							}
							else
							{
								strError = "unbekannter Fehler (" + nPReturn.ToString(0) + ")";
							}
						}
					}
				}
			}
			return nPReturn;
			#endregion
		}

		/// <summary>
		/// </summary>
		/// <param name="strSqlStatement"></param>
		/// <param name="nCount"></param>
		/// <returns></returns>
		public static SalNumber SqlImmedSelCount(SalString strSqlStatement, ref SalNumber nCount)
		{
			#region Local Variables
			SqlLocals.SqlImmedSelCountLocals locals = new SqlLocals.SqlImmedSelCountLocals();
			#endregion
			
			#region Actions
			using (new SqlContext(locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.strSqlStatement = strSqlStatement;
					locals.nCount = nCount;

					// 28.11.13
					Int.SqlConnection(ref locals.hSqlSel);
					// Set bOk=SqlCreateSession(hSession,'')
					// If not bOk
					// Call SalMessageBox( 'Session kann nicht erzeugt werden.', 'SqlImmedSel', MB_Ok )
					// 06.01.14 RO
					// Set bOk=SqlCreateStatement (hSession, hSqlSel)
					// Call SqlSetIsolationLevel(hSqlSel,'RO')

					locals.strSqlMsg = "Programmfehler bei SQLIMMEDSEL";
					locals.nResult = Int.SqlHandleExec(locals.hSqlSel, locals.strSqlStatement, locals.strSqlMsg, ref locals.nCount);
					if (locals.nResult == Sys.IDOK) 
					{
						Var.nFetchImmed = locals.hSqlSel.FetchNext();
					}

					// If nFetchImmed != FETCH_Ok
					// Set nResult = IDABORT
					// If nResult = IDOK
					// Call SqlCommit( hSqlSel )
					locals.hSqlSel.Disconnect();
					// 28.11.13
					// Call SqlFreeSession( hSession )

					return locals.nResult;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					nCount = locals.nCount;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// Schreibe in Logbuch
		/// </summary>
		/// <param name="strLogText"></param>
		/// <param name="nLogTyp"></param>
		/// <returns></returns>
		public static SalNumber PalLogTyp(SalString strLogText, SalNumber nLogTyp)
		{
			#region Actions
			Var.strLogtext = strLogText.Left(254);
			// 11.03.21
			Var.nLogtyp = nLogTyp;
			// 19.08.14 Ä1098 + Version
			Int.SqlImmedX("INSERT INTO LOG (logname, logdate, logtext, logversion, logtyp) VALUES(:strBNUser, SYSDATETIME,  :strLogtext, :strProgVer, :nLogtyp)");

			return 0;
			#endregion
		}
		
		/// <summary>
		/// wandelt Datum in String um
		/// </summary>
		/// <param name="dtDate"></param>
		/// <returns></returns>
		public static SalString PalDateToStrTTMMJJJJhhmmss(SalDateTime dtDate)
		{
			#region Local Variables
			SalString strDate = "";
			SalString strDatum = "";
			#endregion
			
			#region Actions
			strDate = dtDate.ToString();
			strDatum = strDate.Mid(8, 2) + "." + strDate.Mid(5, 2) + "." + strDate.Mid(0, 4) + " " + strDate.Mid(11, 2) + ":" + strDate.Mid(14, 2) + ":" + strDate.Mid(17, 2);
			return strDatum;
			#endregion
		}
		
		/// <summary>
		/// wandelt Datum in String um
		/// </summary>
		/// <param name="dtDate"></param>
		/// <returns></returns>
		public static SalString PalDateToStrTTMMJJ(SalDateTime dtDate)
		{
			#region Local Variables
			SalString strDate = "";
			SalString strDatum = "";
			#endregion
			
			#region Actions
			strDate = dtDate.ToString();
			strDatum = strDate.Mid(8, 2) + strDate.Mid(5, 2) + strDate.Mid(2, 2);
			return strDatum;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nNum"></param>
		/// <param name="strPict"></param>
		/// <returns></returns>
		public static SalString PalStrNumPicture(SalNumber nNum, SalString strPict)
		{
			#region Local Variables
			SalString strNum = "";
			SalNumber nLength = 0;
			#endregion
			
			#region Actions
			strNum = nNum.ToString(strPict);
			return strNum;
			#endregion
		}
		
		/// <summary>
		/// wandelt Datum in String um
		/// </summary>
		/// <param name="dtDate"></param>
		/// <returns></returns>
		public static SalString PalDateToStrDatevTTMMJJJJ(SalDateTime dtDate)
		{
			#region Local Variables
			SalString strDate = "";
			SalString strDatum = "";
			#endregion
			
			#region Actions
			strDate = dtDate.ToString();
			strDatum = strDate.Mid(8, 2) + strDate.Mid(5, 2) + strDate.Mid(0, 4);
			return strDatum;
			#endregion
		}
		
		/// <summary>
		/// Wandelt Umlaute und ß in AE,OE,UE und SS um
		/// </summary>
		/// <param name="strMatch"></param>
		/// <returns></returns>
		public static SalString PalStringToFileName(SalString strMatch)
		{
			#region Local Variables
			SalNumber nPLen = 0;
			SalString strPChar = "";
			SalString strPNeu = "";
			#endregion
			
			#region Actions
			strPNeu = "";
			nPLen = strMatch.Length;
			while (nPLen > 0) 
			{
				strPChar = strMatch.Mid(nPLen - 1, 1);
				if (strPChar >= "0" && strPChar <= "9") 
				{
					strPNeu = strPChar + strPNeu;
				}
				else if (strPChar >= "a" && strPChar <= "z") 
				{
					strPNeu = strPChar + strPNeu;
				}
				else if (strPChar >= "A" && strPChar <= "Z") 
				{
					strPNeu = strPChar + strPNeu;
				}
				else if (strPChar == "-" || strPChar == " ") 
				{
					strPNeu = strPChar + strPNeu;
				}
				else
				{
				}
				nPLen = nPLen - 1;
			}

			return strPNeu.Trim();
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPValue"></param>
		/// <returns></returns>
		public static SalNumber PalNULLto0(SalNumber nPValue)
		{
			#region Actions
			if (nPValue == SalNumber.Null) 
			{
				nPValue = 0;
			}
			return nPValue;
			#endregion
		}
		
		/// <summary>
		/// macht String Code39 kompatibel
		/// </summary>
		/// <param name="strBC"></param>
		/// <returns></returns>
		public static SalString PalStringToCode39(SalString strBC)
		{
			#region Local Variables
			SalNumber nCount = 0;
			SalNumber nLen = 0;
			SalString strByte = "";
			SalString strPDS = "";
			#endregion
			
			#region Actions
			nLen = strBC.Length;
			nCount = 0;
			strPDS = "";

			while (nCount < nLen) 
			{
				strByte = strBC.Mid(nCount, 1);
				if (((SalString)"01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ-.$/+%").Scan(strByte) != -1) 
				{
					strPDS = strPDS + strBC.Mid(nCount, 1);
				}
				nCount = nCount + 1;
			}

			return strPDS;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public static SalDateTime PalGetMinBuchDat()
		{
			#region Local Variables
			SalDateTime dtPMinBuchDat = SalDateTime.Null;
			SalString strMinBuchDat = "";
			#endregion
			
			#region Actions
			// 06.03.23 Ä2086
			Int.PalGetProfileString("BH", "MinBuchDat", Int.SalDateToStrX(new SalDateTime(1900, 1, 1)), ref strMinBuchDat, "");
			dtPMinBuchDat = strMinBuchDat.ToDate();
			return dtPMinBuchDat;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPGUID"></param>
		/// <returns></returns>
		public static SalNumber PalGetBeiHilfeausGUID(SalString strPGUID)
		{
			#region Actions
			Var.strBeihilfeGUID = strPGUID;
			Int.SqlImmedSel("SELECT bebetrag INTO :nBeihilfeDM FROM be WHERE beguid = :strBeihilfeGUID");
			return Var.nBeihilfeDM;
			#endregion
		}
		
		/// <summary>
		/// errechnet anhand der ArztNr und der übergebenen Summe die Geb.%
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="nAbrSumme"></param>
		/// <param name="nFest"></param>
		/// <returns></returns>
		public static SalNumber PalGebuehrenProz(SalNumber nArztNr, SalNumber nAbrSumme, ref SalNumber nFest)
		{
			#region Actions
			Var.nArztPGP = nArztNr;
			Var.nAbrSummePGP = nAbrSumme;
			Int.SqlImmedSel(@"SELECT ASTAFFEL INTO :nStNr FROM A
WHERE AARZTNR = :nArztPGP");
			// 29.09.23 Ä2139 + nStGeb4-6
			Int.SqlImmedSel(@"SELECT ST1,ST2,ST3,ST4,ST5,ST6, STGEB,STGR4,STGR5,STGR6
INTO :nSt[1], :nSt[2],
:nSt[3], :nSt[4],
:nSt[5], :nSt[6], :nStGeb,:nStGeb4,:nStGeb5,:nStGeb6
FROM ST WHERE STNR = :nStNr");
			nFest = Var.nStGeb;
			// If nAbrSumme <= 22.5
			// Return nSt[1]
			// Else If nAbrSumme <= 45
			// Return nSt[2]
			if (nAbrSumme <= Var.nStGeb4) 
			{
				return Var.nSt[3];
			}
			else if (nAbrSumme <= Var.nStGeb5) 
			{
				return Var.nSt[4];
			}
			else if (nAbrSumme <= Var.nStGeb6) 
			{
				return Var.nSt[5];
			}
			else
			{
				return Var.nSt[6];
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="pdtBehDat"></param>
		/// <param name="pnWert"></param>
		/// <param name="pnEUR"></param>
		/// <param name="pstrText"></param>
		/// <param name="pstrEinheit"></param>
		/// <returns></returns>
		public static SalNumber PalTSKAnfahrt(SalDateTime pdtBehDat, ref SalNumber pnWert, ref SalNumber pnEUR, ref SalString pstrText, ref SalString pstrEinheit)
		{
			#region Actions
			if (pdtBehDat < new SalDateTime(2020, 2, 14)) 
			{
				pnEUR = 2.3m * pnWert;
				if (pnEUR < 8.6m) 
				{
					pnEUR = 8.6m;
					pstrText = "Anfahrtspauschale: Mindestgebühr";
					pnWert = 1;
					pstrEinheit = "";
				}
			}
			else
			{
				pnEUR = 3.5m * pnWert;
				if (pnEUR < 13) 
				{
					pnEUR = 13;
					pstrText = "Anfahrtspauschale: Mindestgebühr";
					pnWert = 1;
					pstrEinheit = "";
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="dtBehDat"></param>
		/// <param name="strZM"></param>
		/// <param name="strTyp"></param>
		/// <param name="nPos"></param>
		/// <param name="strGOT"></param>
		/// <param name="strEinheit"></param>
		/// <param name="nWert"></param>
		/// <param name="strText"></param>
		/// <param name="nMwSt"></param>
		/// <returns></returns>
		public static SalNumber PalTSKBerechnePositionen(SalDateTime dtBehDat, SalString strZM, SalString strTyp, SalNumber nPos, SalString strGOT, SalString strEinheit, SalNumber nWert, ref SalString strText, ref SalNumber nMwSt)
		{
			#region Local Variables
			// Number: nMwSt
			SalNumber nEUR = 0;
			SalNumber nFaktor = 0;
			#endregion
			
			#region Actions
			if (strZM == "Z") 
			{
				// 13.07.20 Ä1892
				// Set nMwSt = nMwStHalb
				if (dtBehDat >= new SalDateTime(2020, 7, 1) && dtBehDat <= new SalDateTime(2020, 12, 31)) 
				{
					nMwSt = 5;
				}
				else if (dtBehDat < new SalDateTime(2020, 7, 1)) 
				{
					nMwSt = 7;
				}
				else
				{
					// 21.05.21 F4781
					// Set nMwStSenkung = nMwStHalb
					nMwSt = Var.nMwStHalb;
				}

			}
			else
			{
				// 13.07.20 Ä1892
				// Set nMwSt = nMwStVoll
				if (dtBehDat >= new SalDateTime(2020, 7, 1) && dtBehDat <= new SalDateTime(2020, 12, 31)) 
				{
					nMwSt = 16;
				}
				else if (dtBehDat < new SalDateTime(2020, 7, 1)) 
				{
					nMwSt = 19;
				}
				else
				{
					// 21.05.21 F4781
					// Set nMwStSenkung = nMwStVoll
					nMwSt = Var.nMwStVoll;
				}

			}
			if (strTyp == "TSKF") 
			{
				// 13.07.20 Ä1892
				// Set nMwSt = nMwStVoll
				if (dtBehDat >= new SalDateTime(2020, 7, 1) && dtBehDat <= new SalDateTime(2020, 12, 31)) 
				{
					nMwSt = 16;
				}
				else if (dtBehDat < new SalDateTime(2020, 7, 1)) 
				{
					nMwSt = 19;
				}
				else
				{
					// 21.05.21 F4781
					// Set nMwStSenkung = nMwStVoll
					nMwSt = Var.nMwStVoll;
				}

			}
			else if (strTyp == "ParaTB") 
			{
				nMwSt = Var.nMwStHalb;
			}

			if (strTyp == "BT") 
			{
				// If nFaktor = NUMBER_Null or nFaktor<1
				// 13.08.20 Anhebung der Fahrtgebühr von 2,3 auf 3,5, mind. 13,0 statt 8,6
				nFaktor = 1;

				if (nPos == 1) 
				{
					nEUR = 2.58m * nFaktor * nWert;
				}
				else if (nPos == 2) 
				{
					nEUR = 1.28m * nFaktor * nWert;
				}
				else if (nPos == 3) 
				{
					// Set nEUR = 3.5 * nWert
					// If nEUR < 13
					// Set nEUR = 13
					// Set strText = 'Anfahrtspauschale: Mindestgebühr'
					// Set nWert = 1
					// Set strEinheit = ''
					Int.PalTSKAnfahrt(dtBehDat, ref nWert, ref nEUR, ref strText, ref strEinheit);
				}
				else if (nPos == 4) 
				{
					nEUR = 16.03m * nWert;
				}
				else if (nPos == 5) 
				{
					nEUR = 3.85m * nWert;
				}
				else if (nPos == 6) 
				{
					nEUR = 22.33m * nWert;
				}
				else if (nPos == 7 || nPos == 8) 
				{
					nEUR = nWert;
					// 24.07.09 OTF296 auskommentiert: Set nMwSt = nMwStVoll
					// Set nMwSt = nMwStVoll
				}
			}
			if (strTyp == "BHVI") 
			{
				// If nFaktor = NUMBER_Null or nFaktor<1
				// Set nFaktor = 1
				nFaktor = 1;

				if (nPos == 11) 
				{
					if (dtBehDat < new SalDateTime(2022, 11, 22)) 
					{
						nEUR = 2.58m * nFaktor * nWert;
					}
					else
					{
						nEUR = 5.75m * nFaktor * nWert;
					}
				}
				else if (nPos == 12) 
				{
					nEUR = 3.85m * nFaktor * nWert;
				}
				else if (nPos == 13) 
				{
					nEUR = 7.71m * nFaktor * nWert;
				}
				else if (nPos == 14) 
				{
					if (dtBehDat < new SalDateTime(2022, 11, 22)) 
					{
						nEUR = 1.28m * nFaktor * nWert;
					}
					else
					{
						nEUR = 3.5m * nFaktor * nWert;
					}
				}
				else if (nPos == 15) 
				{
					if (dtBehDat < new SalDateTime(2022, 11, 22)) 
					{
						nEUR = 1.28m * nFaktor * nWert;
					}
					else
					{
						nEUR = 3.5m * nFaktor * nWert;
					}
				}
				// Else If nPos = 15
				// Set nEUR = 1.14 * nFaktor * nWert
				else if (nPos == 3) 
				{
					// Set nEUR = 3.5 * nWert
					// If nEUR < 13
					// Set nEUR = 13
					// Set strText = 'Anfahrtspauschale: Mindestgebühr'
					// Set nWert = 1
					// Set strEinheit = ''
					Int.PalTSKAnfahrt(dtBehDat, ref nWert, ref nEUR, ref strText, ref strEinheit);
				}
				else if (nPos == 4) 
				{
					if (dtBehDat < new SalDateTime(2022, 11, 22)) 
					{
						nEUR = 16.03m * nWert;
					}
					else
					{
						nEUR = 39.16m * nWert;
					}
				}
				else if (nPos == 5) 
				{
					if (dtBehDat < new SalDateTime(2022, 11, 22)) 
					{
						nEUR = 3.85m * nWert;
					}
					else
					{
						nEUR = 6.16m * nWert;
					}
				}
				else if (nPos == 19) 
				{
					nEUR = 11.2m * nWert;
				}
				else if (nPos == 7 || nPos == 8) 
				{
					nEUR = nWert;
					// 24.07.09 OTF296 auskommentiert: Set nMwSt = nMwStVoll
					// Set nMwSt = nMwStVoll
				}
				else if (nPos == 9) 
				{
					if (dtBehDat < new SalDateTime(2022, 11, 22)) 
					{
						nEUR = 6.41m * nWert;
					}
					else
					{
						nEUR = 10.26m * nWert;
					}
				}
				// 27.02.23 Ä2083 neue GOT
				if (nPos == 16) 
				{
					nEUR = 10.26m * nFaktor * nWert;
				}
				if (nPos == 17) 
				{
					nEUR = 6.16m * nFaktor * nWert;
				}
				if (nPos == 18) 
				{
					nEUR = 12.34m * nFaktor * nWert;
				}
				if (nPos == 20) 
				{
					if (dtBehDat < new SalDateTime(2022, 11, 22)) 
					{
						nEUR = 39.2m * nFaktor * nWert;
					}
					else
					{
						nEUR = 42.67m * nFaktor * nWert;
					}
				}
				if (nPos == 21) 
				{
					if (dtBehDat < new SalDateTime(2022, 11, 22)) 
					{
						nEUR = 39.2m * nFaktor * nWert;
					}
					else
					{
						nEUR = 42.67m * nFaktor * nWert;
					}
				}
				if (nPos == 22) 
				{
					if (dtBehDat < new SalDateTime(2022, 11, 22)) 
					{
						nEUR = 39.2m * nFaktor * nWert;
					}
					else
					{
						nEUR = 42.67m * nFaktor * nWert;
					}
				}
			}
			if (strTyp == "BVD") 
			{
				// If nFaktor = NUMBER_Null or nFaktor<1
				// Set nFaktor = 1
				nFaktor = 1;

				if (nPos == 11) 
				{
					nEUR = 2.58m * nFaktor * nWert;
				}
				else if (nPos == 12) 
				{
					nEUR = 3.85m * nFaktor * nWert;
				}
				else if (nPos == 13) 
				{
					nEUR = 7.71m * nFaktor * nWert;
				}
				else if (nPos == 3) 
				{
					// Set nEUR = 3.5 * nWert
					// If nEUR < 13
					// Set nEUR = 13
					// Set strText = 'Anfahrtspauschale: Mindestgebühr'
					// Set nWert = 1
					// Set strEinheit = ''
					Int.PalTSKAnfahrt(dtBehDat, ref nWert, ref nEUR, ref strText, ref strEinheit);
				}
				else if (nPos == 4) 
				{
					nEUR = 16.03m * nWert;
				}
				else if (nPos == 5) 
				{
					nEUR = 3.85m * nWert;
				}
				else if (nPos == 6) 
				{
					nEUR = 22.33m * nWert;
				}
				else if (nPos == 7 || nPos == 8) 
				{
					nEUR = nWert;
					// 24.07.09 OTF296 auskommentiert: Set nMwSt = nMwStVoll
					// Set nMwSt = nMwStVoll
				}
				else if (nPos == 9) 
				{
					nEUR = 6.41m * nWert;
				}
			}
			if (strTyp == "Tbc") 
			{
				// If nFaktor = NUMBER_Null or nFaktor<1
				// Set nFaktor = 1
				nFaktor = 1;

				if (nPos == 11) 
				{
					nEUR = 5.72m * nFaktor * nWert;
				}
				else if (nPos == 12) 
				{
					nEUR = 8.58m * nFaktor * nWert;
				}
				else if (nPos == 3) 
				{
					// Set nEUR = 3.5 * nWert
					// If nEUR < 13
					// Set nEUR = 13
					// Set strText = 'Anfahrtspauschale: Mindestgebühr'
					// Set nWert = 1
					// Set strEinheit = ''
					Int.PalTSKAnfahrt(dtBehDat, ref nWert, ref nEUR, ref strText, ref strEinheit);
				}
				else if (nPos == 4) 
				{
					nEUR = 16.03m * nWert;
				}
				else if (nPos == 5) 
				{
					nEUR = 3.85m * nWert;
				}
				else if (nPos == 6) 
				{
					nEUR = 22.33m * nWert;
				}
				else if (nPos == 9) 
				{
					nEUR = 6.41m * nWert;
				}
				else if (nPos == 7 || nPos == 8) 
				{
					nEUR = nWert;
					// 24.07.09 OTF296 auskommentiert: Set nMwSt = nMwStVoll
					// Set nMwSt = nMwStVoll
				}
			}
			if (strTyp == "Bruc") 
			{
				// If nFaktor = NUMBER_Null or nFaktor<1
				// Set nFaktor = 1
				nFaktor = 1;

				// 27.02.23 Ä2083 neue GOT
				if (dtBehDat < new SalDateTime(2022, 11, 22)) 
				{
					if (nPos == 12) 
					{
						nEUR = 3.85m * nFaktor * nWert;
					}
					else if (nPos == 13) 
					{
						nEUR = 7.71m * nFaktor * nWert;
					}
					else if (nPos == 16) 
					{
						// 16.01.17 F3091 7.71 -> 5.85	06.02.18 -> 3.85
						nEUR = 3.85m * nFaktor * nWert;
					}
					else if (nPos == 14)  // 06.02.18 F3097
					{
						nEUR = 1.28m * nFaktor * nWert;
					}
					else if (nPos == 3) 
					{
						// Set nEUR = 3.5 * nWert
						// If nEUR < 13
						// Set nEUR = 13
						// Set strText = 'Anfahrtspauschale: Mindestgebühr'
						// Set nWert = 1
						// Set strEinheit = ''
						Int.PalTSKAnfahrt(dtBehDat, ref nWert, ref nEUR, ref strText, ref strEinheit);
					}
					else if (nPos == 4) 
					{
						nEUR = 16.03m * nWert;
					}
					else if (nPos == 5) 
					{
						nEUR = 3.85m * nWert;
					}
					else if (nPos == 6) 
					{
						nEUR = 22.33m * nWert;
					}
					else if (nPos == 7 || nPos == 8) 
					{
						nEUR = nWert;
						// 24.07.09 OTF296 auskommentiert: Set nMwSt = nMwStVoll
						// Set nMwSt = nMwStVoll
					}
					else if (nPos == 9) 
					{
						nEUR = 6.41m * nWert;
					}
					else if (nPos == 22) 
					{
						nEUR = 39.2m * nFaktor * nWert;
					}
					else if (nPos == 23) 
					{
						nEUR = 39.2m * nFaktor * nWert;
					}
				}
				else
				{
					if (nPos == 17) 
					{
						nEUR = 10.26m * nFaktor * nWert;
					}
					else if (nPos == 18) 
					{
						nEUR = 6.16m * nFaktor * nWert;
					}
					else if (nPos == 20) 
					{
						nEUR = 12.34m * nFaktor * nWert;
					}
					else if (nPos == 21) 
					{
						nEUR = 4.48m * nFaktor * nWert;
					}
					else if (nPos == 14)  // 06.02.18 F3097
					{
						nEUR = 3.5m * nFaktor * nWert;
					}
					else if (nPos == 3) 
					{
						// Set nEUR = 3.5 * nWert
						// If nEUR < 13
						// Set nEUR = 13
						// Set strText = 'Anfahrtspauschale: Mindestgebühr'
						// Set nWert = 1
						// Set strEinheit = ''
						Int.PalTSKAnfahrt(dtBehDat, ref nWert, ref nEUR, ref strText, ref strEinheit);
					}
					else if (nPos == 4) 
					{
						nEUR = 39.16m * nWert;
					}
					else if (nPos == 5) 
					{
						nEUR = 6.16m * nWert;
					}
					else if (nPos == 19) 
					{
						nEUR = 11.2m * nWert;
					}
					else if (nPos == 7 || nPos == 8) 
					{
						nEUR = nWert;
						// 24.07.09 OTF296 auskommentiert: Set nMwSt = nMwStVoll
						// Set nMwSt = nMwStVoll
					}
					else if (nPos == 9) 
					{
						nEUR = 10.26m * nWert;
					}
					else if (nPos == 22) 
					{
						nEUR = 42.67m * nFaktor * nWert;
					}
					else if (nPos == 23) 
					{
						nEUR = 42.67m * nFaktor * nWert;
					}
				}
			}
			if (strTyp == "AK") 
			{
				// If nFaktor = NUMBER_Null or nFaktor<1
				// Set nFaktor = 1
				nFaktor = 1;

				// 27.02.23 Ä2083 neue GOT
				if (dtBehDat < new SalDateTime(2022, 11, 22)) 
				{
					if (nPos == 17) 
					{
						nEUR = 3.58m * nFaktor * nWert;
					}
					else if (nPos == 3) 
					{
						// Set nEUR = 3.5 * nWert
						// If nEUR < 13
						// Set nEUR = 13
						// Set strText = 'Anfahrtspauschale: Mindestgebühr'
						// Set nWert = 1
						// Set strEinheit = ''
						Int.PalTSKAnfahrt(dtBehDat, ref nWert, ref nEUR, ref strText, ref strEinheit);
					}
					else if (nPos == 4) 
					{
						nEUR = 16.03m * nWert;
					}
					else if (nPos == 5) 
					{
						nEUR = 3.85m * nWert;
					}
					else if (nPos == 6) 
					{
						nEUR = 22.33m * nWert;
					}
					else if (nPos == 7 || nPos == 8) 
					{
						nEUR = nWert;
						// 24.07.09 OTF296 auskommentiert: Set nMwSt = nMwStVoll
						// Set nMwSt = nMwStVoll
					}
					else if (nPos == 9) 
					{
						nEUR = 6.41m * nWert;
					}
					else if (nPos == 23) 
					{
						nEUR = 39.2m * nFaktor * nWert;
					}
				}
				else
				{
					if (nPos == 18) 
					{
						nEUR = 10.26m * nFaktor * nWert;
					}
					else if (nPos == 19) 
					{
						nEUR = 11.2m * nFaktor * nWert;
					}
					else if (nPos == 20) 
					{
						nEUR = 6.16m * nFaktor * nWert;
					}
					else if (nPos == 21) 
					{
						nEUR = 4.58m * nFaktor * nWert;
					}
					else if (nPos == 22) 
					{
						nEUR = 12.34m * nFaktor * nWert;
					}
					else if (nPos == 23) 
					{
						nEUR = 42.67m * nFaktor * nWert;
					}
					else if (nPos == 3) 
					{
						// Set nEUR = 3.5 * nWert
						// If nEUR < 13
						// Set nEUR = 13
						// Set strText = 'Anfahrtspauschale: Mindestgebühr'
						// Set nWert = 1
						// Set strEinheit = ''
						Int.PalTSKAnfahrt(dtBehDat, ref nWert, ref nEUR, ref strText, ref strEinheit);
					}
					else if (nPos == 4) 
					{
						nEUR = 39.16m * nWert;
					}
					else if (nPos == 5) 
					{
						nEUR = 6.16m * nWert;
					}
					else if (nPos == 7 || nPos == 8) 
					{
						nEUR = nWert;
						// 24.07.09 OTF296 auskommentiert: Set nMwSt = nMwStVoll
						// Set nMwSt = nMwStVoll
					}
					else if (nPos == 9) 
					{
						nEUR = 10.26m * nWert;
					}
				}
			}
			if (strTyp == "BTBV") 
			{
				// If nFaktor = NUMBER_Null or nFaktor<2
				// Set nFaktor = 2
				nFaktor = 1;

				if (nPos == 1) 
				{
					nEUR = 39.2m * nFaktor * nWert;
				}
				else if (nPos == 3) 
				{
					// Set nEUR = 3.5 * nWert
					// If nEUR < 13
					// Set nEUR = 13
					// Set strText = 'Anfahrtspauschale: Mindestgebühr'
					// Set nWert = 1
					// Set strEinheit = ''
					Int.PalTSKAnfahrt(dtBehDat, ref nWert, ref nEUR, ref strText, ref strEinheit);
				}
				else if (nPos == 4) 
				{
					nEUR = 16.03m * nWert;
				}
				else if (nPos == 5) 
				{
					nEUR = 3.85m * nWert;
				}
				else if (nPos == 6) 
				{
					nEUR = 22.33m * nWert;
				}
				else if (nPos == 7 || nPos == 8) 
				{
					nEUR = nWert;
					// 24.07.09 OTF296 auskommentiert: Set nMwSt = nMwStVoll
					// Set nMwSt = nMwStVoll
				}
			}
			if (strTyp == "BHVIBV") 
			{
				// If nFaktor = NUMBER_Null or nFaktor<1
				// Set nFaktor = 1
				nFaktor = 1;

				if (nPos == 11 || nPos == 12 || nPos == 14) 
				{
					nEUR = 39.2m * nFaktor * nWert;
				}
				else if (nPos == 15) 
				{
					nEUR = 1.28m * nFaktor * nWert;
				}
				else if (nPos == 3) 
				{
					// Set nEUR = 3.5 * nWert
					// If nEUR < 13
					// Set nEUR = 13
					// Set strText = 'Anfahrtspauschale: Mindestgebühr'
					// Set nWert = 1
					// Set strEinheit = ''
					Int.PalTSKAnfahrt(dtBehDat, ref nWert, ref nEUR, ref strText, ref strEinheit);
				}
				else if (nPos == 4) 
				{
					nEUR = 16.03m * nWert;
				}
				else if (nPos == 5) 
				{
					nEUR = 3.85m * nWert;
				}
				else if (nPos == 6) 
				{
					nEUR = 22.33m * nWert;
				}
				else if (nPos == 7 || nPos == 8) 
				{
					nEUR = nWert;
					// 24.07.09 OTF296 auskommentiert: Set nMwSt = nMwStVoll
					// Set nMwSt = nMwStVoll
				}
				else if (nPos == 9) 
				{
					nEUR = 6.41m * nWert;
				}
			}
			if (strTyp == "BVDBV") 
			{
				// If nFaktor = NUMBER_Null or nFaktor<1
				// Set nFaktor = 1
				nFaktor = 1;

				if (nPos == 11 || nPos == 12) 
				{
					nEUR = 39.2m * nFaktor * nWert;
				}
				else if (nPos == 3) 
				{
					// Set nEUR = 3.5 * nWert
					// If nEUR < 13
					// Set nEUR = 13
					// Set strText = 'Anfahrtspauschale: Mindestgebühr'
					// Set nWert = 1
					// Set strEinheit = ''
					Int.PalTSKAnfahrt(dtBehDat, ref nWert, ref nEUR, ref strText, ref strEinheit);
				}
				else if (nPos == 4) 
				{
					nEUR = 16.03m * nWert;
				}
				else if (nPos == 5) 
				{
					nEUR = 3.85m * nWert;
				}
				else if (nPos == 6) 
				{
					nEUR = 22.33m * nWert;
				}
				else if (nPos == 7 || nPos == 8) 
				{
					nEUR = nWert;
					// 24.07.09 OTF296 auskommentiert: Set nMwSt = nMwStVoll
					// Set nMwSt = nMwStVoll
				}
				else if (nPos == 9) 
				{
					nEUR = 6.41m * nWert;
				}
			}
			if (strTyp == "BrucBV") 
			{
				// If nFaktor = NUMBER_Null or nFaktor<1
				// Set nFaktor = 1
				nFaktor = 1;

				// 06.02.18 F3097 + or nPos = 14
				if (nPos == 12 || nPos == 16 || nPos == 14) 
				{
					nEUR = 39.2m * nFaktor * nWert;
				}
				else if (nPos == 3) 
				{
					// Set nEUR = 3.5 * nWert
					// If nEUR < 13
					// Set nEUR = 13
					// Set strText = 'Anfahrtspauschale: Mindestgebühr'
					// Set nWert = 1
					// Set strEinheit = ''
					Int.PalTSKAnfahrt(dtBehDat, ref nWert, ref nEUR, ref strText, ref strEinheit);
				}
				else if (nPos == 4) 
				{
					nEUR = 16.03m * nWert;
				}
				else if (nPos == 5) 
				{
					nEUR = 3.85m * nWert;
				}
				else if (nPos == 6) 
				{
					nEUR = 22.33m * nWert;
				}
				else if (nPos == 7 || nPos == 8) 
				{
					nEUR = nWert;
					// 24.07.09 OTF296 auskommentiert: Set nMwSt = nMwStVoll
					// Set nMwSt = nMwStVoll
				}
				else if (nPos == 9) 
				{
					nEUR = 6.41m * nWert;
				}
			}
			if (strTyp == "AKBV") 
			{
				// If nFaktor = NUMBER_Null or nFaktor<1
				// Set nFaktor = 1
				nFaktor = 1;

				if (nPos == 17) 
				{
					nEUR = 39.2m * nFaktor * nWert;
				}
				else if (nPos == 3) 
				{
					// Set nEUR = 3.5 * nWert
					// If nEUR < 13
					// Set nEUR = 13
					// Set strText = 'Anfahrtspauschale: Mindestgebühr'
					// Set nWert = 1
					// Set strEinheit = ''
					Int.PalTSKAnfahrt(dtBehDat, ref nWert, ref nEUR, ref strText, ref strEinheit);
				}
				else if (nPos == 4) 
				{
					nEUR = 16.03m * nWert;
				}
				else if (nPos == 5) 
				{
					nEUR = 3.85m * nWert;
				}
				else if (nPos == 6) 
				{
					nEUR = 22.22m * nWert;
				}
				else if (nPos == 7 || nPos == 8) 
				{
					nEUR = nWert;
					// 24.07.09 OTF296 auskommentiert: Set nMwSt = nMwStVoll
					// Set nMwSt = nMwStVoll
				}
				else if (nPos == 9) 
				{
					nEUR = 6.41m * nWert;
				}
			}
			if (strTyp == "BVDv") 
			{
				// If nFaktor = NUMBER_Null or nFaktor<1
				// Set nFaktor = 1
				nFaktor = 1;

				if (nPos == 20) 
				{
					nEUR = 6.29m * nFaktor * nWert;
				}
				else if (nPos == 21) 
				{
					nEUR = 17.18m * nFaktor * nWert;
				}
				else if (nPos == 22) 
				{
					nEUR = 20.05m * nFaktor * nWert;
				}
				else if (nPos == 23) 
				{
					nEUR = 0;
				}
				else if (nPos == 3) 
				{
					// Set nEUR = 3.5 * nWert
					// If nEUR < 13
					// Set nEUR = 13
					// Set strText = 'Anfahrtspauschale: Mindestgebühr'
					// Set nWert = 1
					// Set strEinheit = ''
					Int.PalTSKAnfahrt(dtBehDat, ref nWert, ref nEUR, ref strText, ref strEinheit);
				}
				else if (nPos == 4) 
				{
					nEUR = 14.31m * nWert;
				}
				else if (nPos == 5) 
				{
					nEUR = 3.44m * nWert;
				}
				else if (nPos == 6) 
				{
					nEUR = 17.18m * nWert;
				}
				else if (nPos == 7 || nPos == 8) 
				{
					nEUR = nWert;
					// 24.07.09 OTF296 auskommentiert: Set nMwSt = nMwStVoll
					// Set nMwSt = nMwStVoll
				}
				else if (nPos == 9) 
				{
					nEUR = 5.72m * nWert;
				}
			}
			if (strTyp == "TSKF") 
			{
				// If nFaktor = NUMBER_Null or nFaktor<1
				// Set nFaktor = 1
				nFaktor = 1;

				if (nPos == 3) 
				{
					nEUR = 550 * nFaktor * nWert;
				}
				else if (nPos == 4) 
				{
					nEUR = 61.36m * nFaktor * nWert;
				}
				else if (nPos == 5) 
				{
					nEUR = 400 * nWert;
				}
				else if (nPos == 6) 
				{
					nEUR = 0.3m * nWert;
				}
				else if (nPos == 7 || nPos == 8) 
				{
					nEUR = nWert;
				}
			}
			if (strTyp == "ParaTB") 
			{
				// If nFaktor = NUMBER_Null or nFaktor<1
				// Set nFaktor = 1
				nFaktor = 1;

				if (nPos == 3) 
				{
					nEUR = 93.46m * nFaktor * nWert;
				}
				else if (nPos == 4) 
				{
					nEUR = 70.09m * nFaktor * nWert;
				}
			}

			if (strEinheit != "€") 
			{
				strText = Int.PalStrNum(nWert, 5, 0) + " " + strEinheit + " " + strText;
			}
			if (strGOT != "") 
			{
				if (nPos == 18 && strTyp == "BHVI")  // 06.07.23
				{
				}
				else if (nPos == 20 && strTyp == "Bruc")  // 31.07.23
				{
				}
				else
				{
					strText = strText + " (" + strGOT + ")";
				}
			}

			return nEUR;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPArztNr"></param>
		/// <param name="strPCode"></param>
		/// <param name="nPSoll"></param>
		/// <param name="nPHaben"></param>
		/// <returns></returns>
		public static SalBoolean PalGetKontierung(SalNumber nPArztNr, SalString strPCode, ref SalNumber nPSoll, ref SalNumber nPHaben)
		{
			#region Local Variables
			SalBoolean bPOk = false;
			#endregion
			
			#region Actions
			// 20.11.23 Ä2144
			Var.nKontArztNr = nPArztNr;
			Int.SqlImmedSel(@"SELECT abilanzierer, adatevcode
INTO :nKontoBilanzierer, :strKontDatevCode
FROM a
WHERE aarztnr = :nKontArztNr");
			if (Var.nKontoBilanzierer == SalNumber.Null) 
			{
				Var.nKontoBilanzierer = 0;
			}
			Var.strKontCode = strPCode;
			Var.nKontSoll = -1;
			Var.nKontHaben = -1;
			Int.SqlImmedSel(@"SELECT kosoll, kohaben
INTO :nKontSoll, :nKontHaben
FROM ko
WHERE kocode = :strKontCode AND kobilanzierer = :nKontoBilanzierer AND kokontenrahmen = :strKontDatevCode");
			if (Var.nKontSoll > 0 && Var.nKontHaben > 0) 
			{
				bPOk = true;
			}
			else
			{
				bPOk = false;
			}
			nPSoll = Var.nKontSoll;
			nPHaben = Var.nKontHaben;
			return bPOk;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sUserName"></param>
		/// <param name="sComputerName"></param>
		/// <returns></returns>
		public static SalBoolean PalGetUser(ref SalString sUserName, ref SalString sComputerName)
		{
			#region Local Variables
			SalNumber nSize = 0;
			#endregion
			
			#region Actions
			Sal.StrSetBufferLength(ref sComputerName, 128);
			nSize = 128;
			if (!(Ext.GetComputerNameA(ref sComputerName, ref nSize))) 
			{
				// Call SalMessageBox( 'GetComputerName failed', 'Error', MB_Ok | MB_IconStop )
				return false;
			}
			Sal.StrSetBufferLength(ref sUserName, 128);
			nSize = 128;
			if (!(Ext.GetUserNameA(ref sUserName, ref nSize))) 
			{
				// Call SalMessageBox( 'GetUserName failed', 'Error', MB_Ok | MB_IconStop )
				return false;
			}
			// Call SalMessageBox( 'User ' || sUserName || ' on ' || sComputerName, 'Your are:', MB_Ok | MB_IconAsterisk )
			return true;
			#endregion
		}
		
		/// <summary>
		/// ZahlArt numerisch -> Textinfo
		/// </summary>
		/// <param name="nZA"></param>
		/// <returns></returns>
		public static SalString PalZahlArt(SalNumber nZA)
		{
			#region Actions
			switch (nZA)
			{
				case 0:
					return "offen";
				
				case 1:
					return "Teilbezahlt";
				
				case 2:
					return "Voll bezahlt";
				
				case 3:
					return "Voll bez. MG ausg.";
				
				case 4:
					return "Ausgbucht";
				
				case 5:
					return "Ausgebucht bei MB-Erst.";
				
				default:
					return "sonstiges";
			}

			return "";
			#endregion
		}
		
		/// <summary>
		/// Überprüfe Fetch-Ergebnis und gebe Meldungen aus
		/// </summary>
		/// <param name="nCheckFetch"></param>
		/// <returns></returns>
		public static SalNumber PalCheckFetch(SalNumber nCheckFetch)
		{
			#region Actions
			switch (nCheckFetch)
			{
				case Sys.FETCH_Delete:
					Sys.hWndForm.SetStatusBarText("Dieser Datensatz wurde mittlerweile gelöscht !");
					goto case Sys.FETCH_EOF;
				
				case Sys.FETCH_EOF:
					Sys.hWndForm.SetStatusBarText("Keine weiteren Daten");
					goto case Sys.FETCH_Update;
				
				case Sys.FETCH_Update:
					Sys.hWndForm.SetStatusBarText("Dieser Datensatz wurde mittlerweile geändert !");
					break;
			}
			return nCheckFetch;
			#endregion
		}
		
		/// <summary>
		/// Wandelt einen String mit Blanks in eine Number um.
		/// </summary>
		/// <param name="strValNum"></param>
		/// <returns></returns>
		public static SalNumber PalValNum(SalString strValNum)
		{
			#region Actions
			strValNum = strValNum.Trim();
			if (strValNum.Scan(".") != -1) 
			{
				strValNum = strValNum.Left(strValNum.Scan(".")) + "," + strValNum.Mid(strValNum.Scan(".") + 1, 255);
			}
			if (strValNum.Scan(" ") != -1) 
			{
				strValNum = strValNum.Left(strValNum.Scan(" ")) + strValNum.Mid(strValNum.Scan(" "), 255);
			}
			return strValNum.ToNumber();
			#endregion
		}
		
		/// <summary>
		/// Wandelt einen String mit Blanks in eine Number um.
		/// </summary>
		/// <param name="strValNum"></param>
		/// <returns></returns>
		public static SalNumber PalValNumBlankMinus1(SalString strValNum)
		{
			#region Local Variables
			SalNumber nReturn = 0;
			#endregion
			
			#region Actions
			strValNum = strValNum.Trim();
			if (strValNum.Trim() == "" || strValNum.Trim() == " ") 
			{
				nReturn = -1;
			}
			else
			{
				if (strValNum.Scan(".") != -1) 
				{
					strValNum = strValNum.Left(strValNum.Scan(".")) + "," + strValNum.Mid(strValNum.Scan(".") + 1, 255);
				}
				if (strValNum.Scan(" ") != -1) 
				{
					strValNum = strValNum.Left(strValNum.Scan(" ")) + strValNum.Mid(strValNum.Scan(" "), 255);
				}
				nReturn = strValNum.ToNumber();
			}
			return nReturn;
			#endregion
		}
		
		/// <summary>
		/// Wandelt eine Number in einen String um.
		/// </summary>
		/// <param name="nNum"></param>
		/// <param name="nVor"></param>
		/// <param name="nNach"></param>
		/// <returns></returns>
		public static SalString PalStrNum(SalNumber nNum, SalNumber nVor, SalNumber nNach)
		{
			#region Local Variables
			SalString strNum = "";
			SalNumber nLength = 0;
			#endregion
			
			#region Actions
			nLength = nNum.ToString(nNach, ref strNum);
			strNum = "                             " + strNum;
			if (nNach != 0) 
			{
				nVor = nVor + 1;
			}
			strNum = strNum.Right(nVor + nNach);
			return strNum;
			#endregion
		}
		
		/// <summary>
		/// Wandelt eine Number in einen String um.
		/// </summary>
		/// <param name="nNum"></param>
		/// <param name="nVor"></param>
		/// <param name="nNach"></param>
		/// <returns></returns>
		public static SalString PalStrNumDecPoint(SalNumber nNum, SalNumber nVor, SalNumber nNach)
		{
			#region Local Variables
			SalString strNum = "";
			SalNumber nLength = 0;
			#endregion
			
			#region Actions
			nLength = nNum.ToString(nNach, ref strNum);
			if (strNum.Scan(",") != -1) 
			{
				strNum = strNum.Left(strNum.Scan(",")) + "." + strNum.Mid(strNum.Scan(",") + 1, 255);
			}
			strNum = "                             " + strNum;
			if (nNach != 0) 
			{
				nVor = nVor + 1;
			}
			strNum = strNum.Right(nVor + nNach);
			return strNum;
			#endregion
		}
		
		/// <summary>
		/// Wandelt eine Number in einen String um.
		/// </summary>
		/// <param name="nNum"></param>
		/// <param name="nNach"></param>
		/// <returns></returns>
		public static SalString PalStrNumDecPointnurNK(SalNumber nNum, SalNumber nNach)
		{
			#region Local Variables
			SalString strNum = "";
			SalNumber nLength = 0;
			#endregion
			
			#region Actions
			nLength = nNum.ToString(nNach, ref strNum);
			if (strNum.Scan(",") != -1) 
			{
				strNum = strNum.Left(strNum.Scan(",")) + "." + strNum.Mid(strNum.Scan(",") + 1, 255);
			}
			return strNum;
			#endregion
		}
		
		/// <summary>
		/// wandelt Datum in String um
		/// </summary>
		/// <param name="dtDate"></param>
		/// <returns></returns>
		public static SalString PalDateToStr(SalDateTime dtDate)
		{
			#region Local Variables
			SalString strDate = "";
			#endregion
			
			#region Actions
			strDate = dtDate.ToString();
			return strDate;
			#endregion
		}
		
		/// <summary>
		/// wandelt Datum in String um
		/// </summary>
		/// <param name="dtDate"></param>
		/// <returns></returns>
		public static SalString SalDateToStrX(SalDateTime dtDate)
		{
			#region Local Variables
			SalString strDate = "";
			SalString strDatum = "";
			#endregion
			
			#region Actions
			strDate = dtDate.ToString();
			strDatum = strDate.Mid(8, 2) + "." + strDate.Mid(5, 2) + "." + strDate.Mid(2, 2);
			return strDatum;
			#endregion
		}
		
		/// <summary>
		/// Wandelt #027#100 in ESC-Sequenz um
		/// </summary>
		/// <param name="strText"></param>
		/// <returns></returns>
		public static SalString PalESCSequ(SalString strText)
		{
			#region Local Variables
			SalNumber nScan = 0;
			#endregion
			
			#region Actions
			nScan = strText.Scan("#");
			while (nScan != -1) 
			{
				strText = strText.Mid(0, nScan) + strText.Mid(nScan + 1, 3).ToNumber().ToCharacter() + strText.Mid(nScan + 4, 255);
				nScan = strText.Scan("#");
			}
			return strText;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strCheck"></param>
		/// <returns></returns>
		public static SalString PalCheckBLZKonto(SalString strCheck)
		{
			#region Local Variables
			SalNumber nCount = 0;
			SalString strReturn = "";
			SalString strChar = "";
			#endregion
			
			#region Actions
			nCount = 0;
			strReturn = "";
			while (nCount < strCheck.Length) 
			{
				strChar = strCheck.Mid(nCount, 1);
				if (((SalString)"0123456789").Scan(strChar) != -1) 
				{
					strReturn = strReturn + strChar;
				}
				nCount = nCount + 1;
			}
			return strReturn;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hArray"></param>
		/// <param name="hAppend"></param>
		/// <returns></returns>
		public static SalNumber __QOhWndArrayAppend(SalArray<SalWindowHandle> hArray, SalWindowHandle hAppend)
		{
			#region Local Variables
			SalNumber nMin = 0;
			SalNumber nMax = 0;
			SalNumber nCount = 0;
			#endregion
			
			#region Actions
			nCount = hArray.QueryBounds(ref nMin, ref nMax);
			hArray[nCount] = hAppend;

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Converts two values into dates and compares them
		/// Returns n <0 if StrDate1 < StrDate2
		/// Returns n >0 if StrDate1 > StrDate2
		/// Returns n =0 if StrDate1 = StrDate2
		/// </summary>
		/// <param name="StrDate1"></param>
		/// <param name="StrDate2"></param>
		/// <returns></returns>
		public static SalNumber __QOCompStrDate(SalString StrDate1, SalString StrDate2)
		{
			#region Actions
			if (StrDate1.ToDate() < StrDate2.ToDate()) 
			{
				return -1;
			}
			if (StrDate1.ToDate() > StrDate2.ToDate()) 
			{
				return 1;
			}
			return 0;
			#endregion
		}
		
		/// <summary>
		/// Converts two values into numbers and compares them
		/// Returns n <0 if StrNum1 < StrNum2
		/// Returns n >0 if StrNum1 > StrNum2
		/// Returns n =0 if StrNum1 = StrNum2
		/// </summary>
		/// <param name="StrNum1"></param>
		/// <param name="StrNum2"></param>
		/// <returns></returns>
		public static SalNumber __QOCompStrNum(SalString StrNum1, SalString StrNum2)
		{
			#region Actions
			if (StrNum1.ToNumber() < StrNum2.ToNumber()) 
			{
				return -1;
			}
			if (StrNum1.ToNumber() > StrNum2.ToNumber()) 
			{
				return 1;
			}
			return 0;
			#endregion
		}
		
		/// <summary>
		/// Compares the current value with a string
		/// in a data type sensitive fashion and returns
		/// TRUE if the current field value is less than
		/// the value to compare with
		/// </summary>
		/// <param name="sValue"></param>
		/// <param name="sLess"></param>
		/// <param name="bLessOrEqual"></param>
		/// <returns></returns>
		public static SalBoolean __QOCompLess(SalString sValue, SalString sLess, SalBoolean bLessOrEqual)
		{
			#region Local Variables
			SalBoolean bRet = false;
			SalNumber nComp = 0;
			#endregion
			
			#region Actions
			if (bLessOrEqual) 
			{
				nComp = 1;
			}
			switch (Sys.hWndItem.GetDataType())
			{
				case Sys.DT_DateTime:
					if (Int.__QOCompStrDate(sValue, sLess) < nComp) 
					{
						bRet = true;
					}
					break;
				
				case Sys.DT_Number:
					if (Int.__QOCompStrNum(sValue, sLess) < nComp) 
					{
						bRet = true;
					}
					break;
				
				default:
					if (bLessOrEqual) 
					{
						bRet = sValue <= sLess;
					}
					else
					{
						bRet = sValue < sLess;
					}
					break;
			}
			return bRet;
			#endregion
		}
		
		/// <summary>
		/// Compares the current value with a string
		/// in a data type sensitive fashion and returns
		/// TRUE if the current field value is more than
		/// the value to compare with
		/// </summary>
		/// <param name="sValue"></param>
		/// <param name="sMore"></param>
		/// <param name="bMoreOrEqual"></param>
		/// <returns></returns>
		public static SalBoolean __QOCompGreater(SalString sValue, SalString sMore, SalBoolean bMoreOrEqual)
		{
			#region Local Variables
			SalBoolean bRet = false;
			SalNumber nComp = 0;
			#endregion
			
			#region Actions
			if (bMoreOrEqual) 
			{
				nComp = -1;
			}
			switch (Sys.hWndItem.GetDataType())
			{
				case Sys.DT_DateTime:
					if (Int.__QOCompStrDate(sValue, sMore) > nComp) 
					{
						bRet = true;
					}
					break;
				
				case Sys.DT_Number:
					if (Int.__QOCompStrNum(sValue, sMore) > nComp) 
					{
						bRet = true;
					}
					break;
				
				default:
					if (bMoreOrEqual) 
					{
						bRet = sValue >= sMore;
					}
					else
					{
						bRet = sValue > sMore;
					}
					break;
			}
			return bRet;
			#endregion
		}
		
		/// <summary>
		/// This is to be discontinued function
		/// </summary>
		/// <param name="sConfirm"></param>
		/// <returns></returns>
		public static SalBoolean __QOConfirm(SalString sConfirm)
		{
			#region Actions
			if (Sal.MessageBox(sConfirm, Const.__QOTEXT_CONFIRM, (Sys.MB_YesNo | Sys.MB_IconQuestion)) == Sys.IDYES) 
			{
				return true;
			}
			else
			{
				return false;
			}
			#endregion
		}
		
		/// <summary>
		/// Initialize the commander by getting it's properties
		/// </summary>
		/// <param name="sSource"></param>
		/// <param name="nCommand"></param>
		/// <param name="sCommand"></param>
		/// <returns></returns>
		public static SalBoolean __QOCommanderInit(ref SalString sSource, ref SalNumber nCommand, ref SalString sCommand)
		{
			#region Local Variables
			SalString sId = "";
			#endregion
			
			#region Actions
			if (Sys.hWndItem.GetProperty(Const.__QOPROP_SOURCE, ref sSource)) 
			{
				if (Sys.hWndItem.GetProperty(Const.__QOPROP_COMMAND, ref sCommand)) 
				{
					if (Sys.hWndItem.GetProperty(Const.__QOPROP_COMMAND_ID, ref sId)) 
					{
						nCommand = sId.ToNumber();
						return true;
					}
				}
			}
			return false;
			#endregion
		}
		
		/// <summary>
		/// Connect to the database.
		/// SqlDatabase, user and password will be used if not null
		/// Otherwise, siUser, database and password will be used.
		/// These properties are set at design time.
		/// </summary>
		/// <param name="hiSqlDQL"></param>
		/// <param name="hiSqlDML"></param>
		/// <param name="sError"></param>
		/// <param name="nLockTimeout"></param>
		/// <param name="siDatabase"></param>
		/// <param name="siUser"></param>
		/// <param name="siPassword"></param>
		/// <param name="nBrand"></param>
		/// <returns></returns>
		public static SalBoolean __QODBConnect(ref SalSqlHandle hiSqlDQL, ref SalSqlHandle hiSqlDML, ref SalString sError, SalNumber nLockTimeout, SalString siDatabase, SalString siUser, SalString siPassword, ref SalNumber nBrand)
		{
			#region Local Variables
			SalArray<SalBoolean> bUsed = new SalArray<SalBoolean>(3);
			SalBoolean bDone = false;
			SalNumber n = 0;
			SalBoolean bOk = false;
			SalBoolean bNum = false;
			SalString sBuff = "";
			#endregion
			
			#region Actions
			// Check for SqlDatabase user and password and use these first
			while (n <= 3) 
			{
				switch (n)
				{
					case 0:
						if (Sql.Database == "") 
						{
							Sql.Database = siDatabase;
							bUsed[n] = true;
						}
						break;
					
					case 1:
						if (Sql.User == "") 
						{
							Sql.User = siUser;
							bUsed[n] = true;
						}
						break;
					
					case 2:
						if (Sql.Password == "") 
						{
							Sql.Password = siPassword;
							bUsed[n] = true;
						}
						break;
				}
				n = n + 1;
			}
			// We have to at least have a data base
			if (Sql.Database.Length == 0) 
			{
				sError = Const.__QOTEXT_ERRNODATABASE;
				return false;
			}
			n = 0;
			bOk = true;
			while (!(bDone) && bOk) 
			{
				switch (n)
				{
					case 0:
						bOk = hiSqlDQL.Connect();
						break;
					
					case 1:
						// This function sets up the sql handle for transaction mode in a back end independant fashion
						//FC:FINAL: not used anymore
						//bOk = SqlHandleSetParameters(hiSqlDQL);
						if (bOk) 
						{
							hiSqlDQL.GetParameter(Sys.DBP_BRAND, ref nBrand, ref sBuff);
							// RLJ Turn on result sets if Brand is SQLServer 6.0
							if (nBrand == Sys.DBV_BRAND_ODBC) 
							{
								// Get the ODBC driver name
								// TODO: Obsolete functions or constants used: GetParameterAll.
								Sql.GetParameterAll(hiSqlDQL, 5506, ref nBrand, ref sBuff, bNum);
								if (sBuff == Const.SQLSRVR_DLL) 
								{
									hiSqlDQL.SetResultSet(true);
								}
							}
							hiSqlDQL.SetTimeout(nLockTimeout);
						}
						break;
					
					case 2:
						bOk = hiSqlDML.Connect();
						break;
					
					case 3:
                        //FC:FINAL: not used anymore
                        //bOk = SqlHandleSetParameters(hiSqlDML);
						if (bOk) 
						{
							hiSqlDML.SetResultSet(false);
							hiSqlDML.SetTimeout(nLockTimeout);
						}
						break;
					
					case 4:
						bOk = hiSqlDML.GetParameter(Sys.DBP_BRAND, ref nBrand, ref sBuff);
						break;
					
					default:
						bDone = true;
						break;
				}
				n = n + 1;
			}
			if (!(bOk)) 
			{
				sError = Const.__QOTEXT_ERROR_CONNECT + Sql.Database;
			}
			// Restore the SQLXxxx vars back to their previously null state if necessary
			n = 0;
			while (n <= 3) 
			{
				switch (n)
				{
					case 0:
						if (bUsed[n]) 
						{
							Sql.Database = "";
						}
						break;
					
					case 1:
						if (bUsed[n]) 
						{
							Sql.User = "";
						}
						break;
					
					case 2:
						if (bUsed[n]) 
						{
							Sql.Password = "";
						}
						break;
				}
				n = n + 1;
			}
			return bOk;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWndContainer"></param>
		/// <param name="sTemplate"></param>
		/// <returns></returns>
		public static SalWindowHandle __QOFindWindow(SalWindowHandle hWndContainer, SalString sTemplate)
		{
			#region Local Variables
			SalWindowHandle hWnd = SalWindowHandle.Null;
			#endregion
			
			#region Actions
			//FC:FINAL: not used anymore
			//if (!(__QOFindWindow_bDoItTwice)) 
			//{
			//	hWnd = Ext.SWinFindWindow(hWndContainer, sTemplate);
			//	__QOFindWindow_bDoItTwice = true;
			//}
			//hWnd = Ext.SWinFindWindow(hWndContainer, sTemplate);
			return hWnd;
			#endregion
		}
		
		/// <summary>
		/// Returns the template name of a window
		/// </summary>
		/// <param name="hWnd"></param>
		/// <returns></returns>
		public static SalString __QOGetItemName(SalWindowHandle hWnd)
		{
			// The window you want the name for
			
			#region Local Variables
			SalString s = "";
			SalNumber hItem = 0;
			#endregion
			
			#region Actions
			s = hWnd.GetName();
			return s;
			#endregion
		}
		
		/// <summary>
		/// Retrieves a named property set at design time
		/// </summary>
		/// <param name="sProperty">The name of the property</param>
		/// <param name="sValue">The value of the property</param>
		/// <returns></returns>
		public static SalBoolean __QOGetProperty(SalString sProperty, ref SalString sValue)
		{
			#region Actions
			return Sys.hWndItem.GetProperty(sProperty, ref sValue);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public static SalBoolean __QOIsUserDisabled()
		{
			#region Local Variables
			SalNumber nItem = 0;
			SalString sValue = "";
            #endregion

            #region Actions
            //FC:FINAL: not supported by PPJ Framework
			//nItem = SalOutlineChildOfType(SalOutlineCurrent(), SalOutlineItemOfWindow(Sys.hWndItem), Const.__QO_USEREDITABLE, true);
			//if (nItem) 
			//{
			//	if (SalOutlineItemTypeText(SalOutlineCurrent(), nItem, Const.__QO_USEREDITABLE, false, sValue)) 
			//	{
			//		if (sValue == "No") 
			//		{
			//			return false;
			//		}
			//	}
			//}
			return true;
			#endregion
		}
		
		/// <summary>
		/// Add a display value and data value to the list / combo
		/// checks for duplicates and maps data values to display values
		/// </summary>
		/// <param name="sValue">The value to add to the list</param>
		/// <returns></returns>
		public static SalNumber __QOListAdd(SalString sValue)
		{
			#region Local Variables
			SalNumber n = 0;
			#endregion
			
			#region Actions
			if (sValue == "") 
			{
				return Sys.LB_Err;
			}
			// Check to see if it is already in the list
			n = Int.__QOSelectString(sValue, false);
			// If it is in the list
			if (n != Sys.LB_Err) 
			{
				// Return the index
				return n;
			}
			else
			{
				// It's not in the list - add it
				return Sys.hWndItem.AddListItem(sValue);
			}
			#endregion
		}
		
		/// <summary>
		/// Takes a tokenized lookup string and divides it so it can be
		/// added to the list.
		/// 
		/// The string is in the form <DisplayValue> {TAB} <DataValue>
		/// </summary>
		/// <param name="sProp">A tokenized lookup string</param>
		/// <param name="sDataMap">
		/// 2]
		/// The data values map
		/// </param>
		/// <param name="nNextData"></param>
		/// <returns></returns>
		public static SalNumber __QOListComboAddDataMap(SalString sProp, SalArray<SalString> sDataMap, SalNumber nNextData)
		{
			#region Local Variables
			SalArray<SalString> sTokens = new SalArray<SalString>();
			SalNumber nTokens = 0;
			#endregion
			
			#region Actions
			nTokens = sProp.Tokenize(Const.__QO_TAB, Const.__QO_TAB, sTokens);
			// Put the display value in the data map
			sDataMap[nNextData, Const.__QO_DISPLAY] = sTokens[0];
			// Put the data value in the data map
			sDataMap[nNextData, Const.__QO_DATA] = sTokens[1];

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Takes the tokenized lookup string property and
		/// passes it to AddDataMapElement so it can be added to the
		/// list box
		/// 
		/// This string is tokenized in the form
		/// <DisplayValue> TAB <DataValue >(CR)
		/// <DisplayValue> TAB <DataValue >(CR)
		/// <DisplayValue> TAB <DataValue >(CR)
		/// </summary>
		/// <param name="sProp">The tokenized looup string</param>
		/// <param name="sDataMap">
		/// 2]
		/// The data values map
		/// </param>
		/// <returns></returns>
		public static SalNumber __QOListComboCreateDataMap(SalString sProp, SalArray<SalString> sDataMap)
		{
			#region Local Variables
			SalArray<SalString> sTokens = new SalArray<SalString>();
			SalNumber nTokens = 0;
			SalNumber n = 0;
			#endregion
			
			#region Actions
			nTokens = sProp.Tokenize(Const.__QO_CR, Const.__QO_CR, sTokens);
			// sTokens will now contain an array of strings that have the form <DisplayValue> TAB <DataValue >
			while (n < nTokens) 
			{
				Int.__QOListComboAddDataMap(sTokens[n], sDataMap, n);
				n = n + 1;
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Initialize the list/combo class by creating the data map
		/// </summary>
		/// <param name="sDataMap">
		/// 2]
		/// The data values map
		/// </param>
		/// <param name="bValidSet"></param>
		/// <param name="bUseMap"></param>
		/// <param name="nValid"></param>
		/// <returns></returns>
		public static SalBoolean __QOListComboInit(SalArray<SalString> sDataMap, ref SalBoolean bValidSet, ref SalBoolean bUseMap, SalNumber nValid)
		{
			#region Local Variables
			SalString sTemp = "";
			#endregion
			
			#region Actions
			if (Sys.hWndItem.GetProperty(Const.__QOPROP_LOOKUP_SET, ref sTemp)) 
			{
				// We have a lookup list.  Add it to the list box
				bUseMap = true;
				Int.__QOListComboCreateDataMap(sTemp, sDataMap);
			}
			if ((nValid & Const.__QOB_VALID_SET) == Const.__QOB_VALID_SET) 
			{
				return Int.__QOListComboPopulateValidateSet(ref bValidSet);
			}
			return true;
			#endregion
		}
		
		/// <summary>
		/// If a validation set is in use, only that set will be added to the list
		/// /combo visualizer
		/// </summary>
		/// <param name="bValidateSetPopulated"></param>
		/// <returns></returns>
		public static SalBoolean __QOListComboPopulateValidateSet(ref SalBoolean bValidateSetPopulated)
		{
			#region Local Variables
			SalString sSet = "";
			SalArray<SalString> sTokens = new SalArray<SalString>();
			SalNumber nTokens = 0;
			SalNumber n = 0;
			#endregion
			
			#region Actions
			// If we haven't populated the valid set yet
			if (!(bValidateSetPopulated)) 
			{
				// If we can get the property
				if (Sys.hWndItem.GetProperty(Const.__QOPROP_VALID_SET, ref sSet)) 
				{
					// That's good enough to consider it a success
					bValidateSetPopulated = true;
					// Tokenize the list and add it
					nTokens = sSet.Tokenize(Const.__QO_TAB, Const.__QO_TAB, sTokens);
					if (nTokens) 
					{
						while (n < nTokens) 
						{
							if (Int.__QOListAdd(sTokens[n]) == Sys.LB_Err) 
							{
								return false;
							}
							n = n + 1;
						}
						return true;
					}
				}
				return false;
			}
			else
			{
				return true;
			}
			#endregion
		}
		
		/// <summary>
		/// Searches the data map for a given data value and if found,
		/// returns the associated display value
		/// </summary>
		/// <param name="sValue">The data value you are trying to match</param>
		/// <param name="sDataMap">2]</param>
		/// <param name="nType"></param>
		/// <returns></returns>
		public static SalString __QOSearchMap(SalString sValue, SalArray<SalString> sDataMap, SalNumber nType)
		{
			#region Local Variables
			SalNumber nMin = 0;
			SalNumber nMax = 0;
			SalNumber nRet = 0;
			#endregion
			
			#region Actions
			if (sDataMap.GetUpperBound(1, ref nMax)) 
			{
				if (nType == 0) 
				{
					nRet = 1;
				}
				// Loop through the entries until we find a match
				while (nMin <= nMax) 
				{
					// if the data values match
					if (sValue == sDataMap[nMin, nType]) 
					{
						// Return the display value
						return sDataMap[nMin, nRet];
					}
					nMin = nMin + 1;
				}
			}
			// if no match found, return the display value
			return sValue;
			#endregion
		}
		
		/// <summary>
		/// Searches an array for a match
		/// </summary>
		/// <param name="sValue">The value to search for</param>
		/// <param name="sArray"></param>
		/// <returns></returns>
		public static SalBoolean __QOStrInArray(SalString sValue, SalArray<SalString> sArray)
		{
			#region Local Variables
			SalNumber nMin = 0;
			SalNumber nMax = 0;
			#endregion
			
			#region Actions
			if (sArray.QueryBounds(ref nMin, ref nMax)) 
			{
				// Loop through the entries until we find a match
				while (nMin <= nMax) 
				{
					// if the data values match
					if (sValue == sArray[nMin]) 
					{
						return true;
					}
					nMin = nMin + 1;
				}
			}
			return false;
			#endregion
		}
		
		/// <summary>
		/// Sets the status text in the status bar hWndMDI if it exists, otherwise it will use
		/// the parent window of the data source.
		/// 
		/// Of course, accesories must be enabled to see these messages
		/// </summary>
		/// <returns></returns>
		public static SalWindowHandle __QOStatusWnd()
		{
			#region Local Variables
			SalWindowHandle hWndRet = SalWindowHandle.Null;
			#endregion
			
			#region Actions
			if (Sys.hWndMDI) 
			{
				return Sys.hWndMDI;
			}
			else
			{
				hWndRet = Sys.hWndItem.GetParent();
				if (hWndRet == SalWindowHandle.Null) 
				{
					return Sys.hWndForm;
				}
				else
				{
					return hWndRet;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// Sets the status text in the status bar hWndMDI if it exists, otherwise it will use
		/// the parent window of the data source.
		/// 
		/// Of course, accesories must be enabled to see these messages
		/// </summary>
		/// <param name="sMsg"></param>
		/// <returns></returns>
		public static SalNumber __QOStatus(SalString sMsg)
		{
			#region Local Variables
			SalWindowHandle hWnd = SalWindowHandle.Null;
			SalString sText = "";
			#endregion
			
			#region Actions
			hWnd = Int.__QOStatusWnd();
			sText = hWnd.GetStatusBarText(1024);
			if (sText != sMsg) 
			{
				hWnd.SetStatusBarText(sMsg);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Sets focus to the first visualizer that is not
		/// hidden or disabled
		/// </summary>
		/// <param name="hWndCurrent"></param>
		/// <param name="bDetail"></param>
		/// <returns></returns>
		public static SalBoolean __QOSetFocusToVisualizer(SalWindowHandle hWndCurrent, SalBoolean bDetail)
		{
			#region Local Variables
			SalWindowHandle hWnd = SalWindowHandle.Null;
			SalWindowHandle hWndParent = SalWindowHandle.Null;
			#endregion
			
			#region Actions
			if (!(bDetail)) 
			{
				hWndParent = hWndCurrent.GetParent();
			}
			else
			{
				hWndParent = hWndCurrent;
			}
			hWnd = hWndParent.GetFirstChild(Sys.TYPE_Any);
			while (hWnd) 
			{
				if (hWnd.IsVisible() && hWnd.IsEnabled()) 
				{
					hWnd.SetFocus();
					return true;
				}
				hWnd = hWnd.GetNextChild(Sys.TYPE_Any);
			}
			return hWndParent.SetFocus() != Sys.hWndNULL;
			#endregion
		}
		
		/// <summary>
		/// Converts a string into a boolean value
		/// </summary>
		/// <param name="sValue"></param>
		/// <returns></returns>
		public static SalBoolean __QOStrToBool(SalString sValue)
		{
			#region Actions
			if (sValue == "TRUE" || sValue == "YES") 
			{
				return true;
			}
			else
			{
				return false;
			}
			#endregion
		}
		
		/// <summary>
		/// Finds and optionally selects a string using an exact match
		/// SalList__QOSelectString does not use an exact match
		/// </summary>
		/// <param name="sSelect">The string you want to select</param>
		/// <param name="bSelect">
		/// If you just want to see if it is in the list set this to FALSE,
		/// to select it also, set it to TRUE
		/// </param>
		/// <returns></returns>
		public static SalNumber __QOSelectString(SalString sSelect, SalBoolean bSelect)
		{
			#region Local Variables
			SalNumber nIndex = 0;
            #endregion

            #region Actions
            //FC:FINAL: not used anymore
            //nIndex = Ext.QOVisListFindString(Sys.hWndItem, -1, sSelect);
            //if (nIndex != Sys.LB_Err && bSelect) 
            //{
            //	Sys.hWndItem.SetListSelectedIndex(nIndex);
            //}
            return nIndex;
			#endregion
		}
		
		/// <summary>
		/// Gets the window handle of the column based on a name
		/// if the column has a template name i.e. col1 this will be used
		/// to match.  If the column is dynamically created (as with a table window)
		/// it will match based on the column title.
		/// 
		/// Data sources use this function to get the window handle of the column
		/// when they want to get/set text from the column.
		/// </summary>
		/// <param name="sItem">The item you are looking for</param>
		/// <param name="hWndCol">The window handle of the column</param>
		/// <returns></returns>
		public static SalNumber __QOTblGetColumn(SalString sItem, ref SalWindowHandle hWndCol)
		{
			#region Local Variables
			SalNumber n = 0;
			SalString sTitle = "";
            #endregion

            #region Actions
            //FC:FINAL: not supported by PPJ Framework
            //hWndCol = SalDataGetFieldWindow(Sys.hWndItem, sItem);
			if (hWndCol) 
			{
				return hWndCol.GetColumnID();
			}
			else
			{
				n = 1;
				while (true)
				{
					hWndCol = Sys.hWndItem.GetColumnWindow(n, Sys.COL_GetID);
					if (hWndCol) 
					{
						if (((bool)hWndCol.GetColumnTitle(ref sTitle, 32)) && sTitle == sItem) 
						{
							return n;
						}
					}
					else
					{
						break;
					}
					n = n + 1;
				}
				return Sys.TBL_Error;
			}
			#endregion
		}
		
		/// <summary>
		/// Returns the window handle of the column
		/// </summary>
		/// <param name="sItem">The item you are looking for</param>
		/// <returns></returns>
		public static SalWindowHandle __QOTblGetColumnWnd(SalString sItem)
		{
			#region Actions
			//FC:FINAL: not supported by PPJ Framework
			//return SalDataGetFieldWindow(Sys.hWndItem, sItem);
			return null;
			#endregion
		}
		
		/// <summary>
		/// Converts a numeric command into it's string
		/// representation
		/// </summary>
		/// <param name="nCmd">The command to convert to a string</param>
		/// <returns></returns>
		public static SalString __QOTblCommandToStr(SalNumber nCmd)
		{
			#region Actions
			switch (nCmd)
			{
				case Const.__QTBL_EXEC_LAST:
					return Const.__QTBL_CMD_LAST;
				
				case Const.__QTBL_EXEC_APPLY:
					return Const.__QTBL_CMD_APPLY;
				
				case Const.__QTBL_EXEC_DELETE:
					return Const.__QTBL_CMD_DELETE;
				
				case Const.__QTBL_EXEC_NEW:
					return Const.__QTBL_CMD_NEW;
				
				case Const.__QTBL_EXEC_NEXT:
					return Const.__QTBL_CMD_NEXT;
				
				case Const.__QTBL_EXEC_RETRIEVE:
					return Const.__QTBL_CMD_RETRIEVE;
				
				case Const.__QTBL_EXEC_PREV:
					return Const.__QTBL_CMD_PREV;
				
				case Const.__QTBL_EXEC_FIRST:
					return Const.__QTBL_CMD_FIRST;
				
				case Const.__QTBL_EXEC_DISCARD:
					return Const.__QTBL_CMD_DISCARD;
				
				default:
					return "";
					break;
			}

			return "";
			#endregion
		}
		
		/// <summary>
		/// Returns the column name in the form table.col
		/// </summary>
		/// <param name="hWndCol"></param>
		/// <param name="bIsWired"></param>
		/// <returns></returns>
		public static SalString __QOTblGetQuallifedColName(SalWindowHandle hWndCol, SalBoolean bIsWired)
		{
			#region Local Variables
			SalString sGParent = "";
			SalString sParent = "";
			SalString sCol = "";
			SalWindowHandle hWndTbl = SalWindowHandle.Null;
			#endregion
			
			#region Actions
			sCol = hWndCol.GetName();
			hWndTbl = hWndCol.GetParent();
			sParent = hWndTbl.GetName();
			sGParent = hWndTbl.GetParent().GetName();
			if (bIsWired) 
			{
				return sParent + "." + sCol;
			}
			else
			{
				return "m_hWndParentForm." + sGParent + "." + sParent + "." + sCol;
			}
			// Return sCol
			#endregion
		}
		
		/// <summary>
		/// Returns the column name in the form table
		/// </summary>
		/// <param name="bWired"></param>
		/// <returns></returns>
		public static SalString __QOTblGetQuallifedName(SalBoolean bWired)
		{
			#region Local Variables
			SalString sParent = "";
			SalString sTable = "";
			#endregion
			
			#region Actions
			sTable = Sys.hWndForm.GetName();
			sParent = Sys.hWndForm.GetParent().GetName();
			if (bWired) 
			{
				return sParent + "." + sTable + ".";
			}
			else
			{
				return "m_hWndParentForm." + sParent + "." + sTable + ".";
			}
			// Return ''
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sSelWhere"></param>
		/// <returns></returns>
		public static SalNumber __QOTblAndCondition(ref SalString sSelWhere)
		{
			#region Actions
			if (sSelWhere.Length) 
			{
				sSelWhere = sSelWhere + @"
	AND	";
			}
			else
			{
				sSelWhere = @"
		";
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Returns the current value of the given item in sValue
		/// </summary>
		/// <param name="sItem">The item you want</param>
		/// <param name="sLongData"></param>
		/// <param name="sValue">The buffer to hold the value</param>
		/// <returns></returns>
		public static SalBoolean __QOTblGetItem(SalString sItem, SalArray<SalString> sLongData, ref SalString sValue)
		{
			#region Local Variables
			SalWindowHandle hWndCol = SalWindowHandle.Null;
			SalNumber nCol = 0;
			#endregion
			
			#region Actions
			// Get the column
			nCol = Int.__QOTblGetColumn(sItem, ref hWndCol);
			if (nCol == Sys.TBL_Error) 
			{
				return false;
			}
			if (hWndCol.GetFormattedText(ref sValue, false)) 
			{
				if (hWndCol.GetDataType() == Sys.DT_LongString) 
				{
					if (sValue.Length) 
					{
						// Long strings are in the sLongData array
						sValue = sLongData[sValue.ToNumber()];
					}
					else
					{
						sValue = "";
					}
				}
				return true;
			}
			return false;
			#endregion
		}
		
		/// <summary>
		/// Returns the current value of the given item in sValue
		/// </summary>
		/// <param name="sItem">The item you want</param>
		/// <param name="sLongData"></param>
		/// <param name="sValue">The buffer to hold the value</param>
		/// <param name="hWndCol"></param>
		/// <returns></returns>
		public static SalBoolean __QOTblGetItemInt(SalString sItem, SalArray<SalString> sLongData, ref SalString sValue, SalWindowHandle hWndCol)
		{
			#region Actions
			if (hWndCol.GetFormattedText(ref sValue, false)) 
			{
				if (hWndCol.GetDataType() == Sys.DT_LongString) 
				{
					if (sValue.Length) 
					{
						// Long strings are in the sLongData array
						sValue = sLongData[sValue.ToNumber()];
					}
					else
					{
						sValue = "";
					}
				}
				return true;
			}
			return false;
			#endregion
		}
		
		/// <summary>
		/// Returns in sValues an array of all unique values in the data source
		/// for the item
		/// </summary>
		/// <param name="sItem">The item you want</param>
		/// <param name="sValues">The array to receive the values</param>
		/// <returns></returns>
		public static SalBoolean __QOTblGetItemArray(SalString sItem, SalArray<SalString> sValues)
		{
			// Number: nCols
			
			#region Local Variables
			SalWindowHandle hWndCol = SalWindowHandle.Null;
			#endregion
			
			#region Actions
			if (Int.__QOTblGetColumn(sItem, ref hWndCol)) 
			{
				//FC:FINAL: not supported by PPJ Framework
				//return SalDataGetFieldData(hWndCol, sValues);
				return false;
			}
			return false;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sWhere"></param>
		/// <param name="sSelWhere"></param>
		/// <returns></returns>
		public static SalNumber __QOTblAppendWhere(SalString sWhere, ref SalString sSelWhere)
		{
			#region Actions
			if (sSelWhere.Length) 
			{
				sSelWhere = sSelWhere + @"
	AND	" + sWhere;
			}
			else
			{
				sSelWhere = @"
		" + sWhere;
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sOrderBy"></param>
		/// <param name="sSelOrderBy"></param>
		/// <returns></returns>
		public static SalNumber __QOTblAppendOrderBy(SalString sOrderBy, ref SalString sSelOrderBy)
		{
			#region Actions
			if (sSelOrderBy.Length) 
			{
				sSelOrderBy = sSelOrderBy + @"
		," + sOrderBy;
			}
			else
			{
				sSelOrderBy = @"
		" + sOrderBy;
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Set's the item's value. This function may be used
		/// by the visualizer to update the value of the data source's
		/// item.
		/// </summary>
		/// <param name="sItem"></param>
		/// <param name="sValue"></param>
		/// <param name="sLongData"></param>
		/// <returns></returns>
		public static SalBoolean __QOTblSetItem(SalString sItem, SalString sValue, SalArray<SalString> sLongData)
		{
			#region Local Variables
			SalWindowHandle hWndCol = SalWindowHandle.Null;
			SalNumber nCol = 0;
			SalNumber nMin = 0;
			SalNumber nMax = 0;
			SalNumber nCount = 0;
			SalString sText = "";
			#endregion
			
			#region Actions
			nCol = Int.__QOTblGetColumn(sItem, ref hWndCol);
			if (nCol == Sys.TBL_Error) 
			{
				return false;
			}
			if (hWndCol.GetDataType() == Sys.DT_LongString) 
			{
				if (Sys.hWndItem.GetColumnText(nCol, ref sText)) 
				{
					if (sText == "") 
					{
						// No long string index has been placed yet.
						// Give it the next available index
						nCount = sLongData.QueryBounds(ref nMin, ref nMax);
						Sys.hWndItem.SetColumnText(nCol, nCount.ToString(0));
					}
					else
					{
						nCount = sText.ToNumber();
					}
					// Long strings are in the sLongData array
					sLongData[nCount] = sValue;
					return true;
				}
			}
			return hWndCol.SetText(sValue, false);
			#endregion
		}
		
		/// <summary>
		/// Returns TRUE if the value exists in the source, FALSE if not
		/// </summary>
		/// <param name="sItem"></param>
		/// <param name="sValue"></param>
		/// <param name="nExistRow"></param>
		/// <returns></returns>
		public static SalBoolean __QOTblValueExists(SalString sItem, SalString sValue, SalNumber nExistRow)
		{
			#region Local Variables
			SalWindowHandle hWndCol = SalWindowHandle.Null;
			SalNumber nRow = 0;
			SalNumber nCol = 0;
			SalString sTemp = "";
			SalBoolean bRet = false;
			#endregion
			
			#region Actions
			if (sValue.Length) 
			{
				nCol = Int.__QOTblGetColumn(sItem, ref hWndCol);
				if (nCol) 
				{
					nRow = Sys.TBL_MinRow;
					while (Sys.hWndItem.FindNextRow(ref nRow, 0, 0)) 
					{
						if (nRow != nExistRow && Sys.hWndItem.SetContextRow(nRow)) 
						{
							if (hWndCol.GetFormattedText(ref sTemp, true)) 
							{
								if (sTemp == sValue) 
								{
									bRet = true;
									break;
								}
							}
						}
					}
				}
				Sys.hWndItem.SetContextRow(nExistRow);
			}
			return bRet;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sValue"></param>
		/// <param name="sSet"></param>
		/// <returns></returns>
		public static SalBoolean __QOValidateInSet(SalString sValue, SalString sSet)
		{
			#region Local Variables
			SalArray<SalString> sTokens = new SalArray<SalString>();
			SalNumber nTokens = 0;
			SalNumber n = 0;
			SalNumber nType = 0;
			SalBoolean bRet = false;
			#endregion
			
			#region Actions
			if (sValue == "") 
			{
				return false;
			}
			nTokens = sSet.Tokenize(Const.__QO_TAB, Const.__QO_TAB, sTokens);
			nType = Sys.hWndItem.GetDataType();
			if (nTokens) 
			{
				while (n < nTokens && !(bRet)) 
				{
					switch (nType)
					{
						case Sys.DT_DateTime:
							if (Int.__QOCompStrDate(sValue, sTokens[n]) == 0) 
							{
								bRet = true;
							}
							break;
						
						case Sys.DT_Number:
							if (Int.__QOCompStrNum(sValue, sTokens[n]) == 0) 
							{
								bRet = true;
							}
							break;
						
						default:
							if (sValue == sTokens[n]) 
							{
								bRet = true;
							}
							break;
					}
					n = n + 1;
				}
			}
			return bRet;
			#endregion
		}
		
		/// <summary>
		/// Handles the SAM_AnyEditMessage for visualizers
		/// </summary>
		/// <param name="nStyles"></param>
		/// <param name="nLen"></param>
		/// <returns></returns>
		public static SalNumber __QOVisualizerEditHandler(SalNumber nStyles, SalNumber nLen)
		{
			#region Local Variables
			SalString sTemp = "";
			#endregion
			
			#region Actions
			if ((nStyles & Const.__QOB_STYLE_AUTOTAB) == Const.__QOB_STYLE_AUTOTAB) 
			{
				// To remain data type independant here I must convert to a string
				if (nLen > 0) 
				{
					// In case you are wondering, I am using SalGetWindowText here because
					// SalFmtFieldToStr will not give me the string until it fits the format.
					sTemp = Sys.hWndItem.GetText(32767);
					if (sTemp.Length >= Sys.hWndItem.GetDataLength()) 
					{
						Sys.hWndForm.SendMessage(Const.__QOBJ_WM_NEXTDLGCTL, 0, 0);
					}
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Initialize the visualizer
		/// </summary>
		/// <param name="sSource"></param>
		/// <param name="sItem"></param>
		/// <param name="sPrompt"></param>
		/// <param name="nStyles"></param>
		/// <param name="nValid"></param>
		/// <param name="nDataLen"></param>
		/// <param name="bUserDisabled"></param>
		/// <returns></returns>
		public static SalBoolean __QOVisualizerInit(ref SalString sSource, ref SalString sItem, ref SalString sPrompt, ref SalNumber nStyles, ref SalNumber nValid, ref SalNumber nDataLen, ref SalBoolean bUserDisabled)
		{
			#region Local Variables
			SalBoolean bRet = false;
			SalBoolean bDone = false;
			SalNumber n = 0;
			SalString sTemp = "";
			#endregion
			
			#region Actions
			bRet = true;
			while (!(bDone) && bRet) 
			{
				switch (n)
				{
					// DATA SOURCE
					
					case 0:
						// If the visualizer is a column, it's source has to be it's parent window
						if (Sys.hWndItem.GetControlType() == Sys.TYPE_TableColumn) 
						{
							sSource = Int.__QOGetItemName(Sys.hWndForm);
						}
						else
						{
							bRet = Sys.hWndItem.GetProperty(Const.__QOPROP_SOURCE, ref sSource);
						}
						break;
					
					// ITEM NAME
					
					case 1:
						// If the visualizer is a column, it's item is the column name
						if (Sys.hWndItem.GetControlType() == Sys.TYPE_TableColumn) 
						{
							sItem = Int.__QOGetItemName(Sys.hWndItem);
							if (sItem != "") 
							{
								bRet = true;
							}
						}
						else
						{
							bRet = Sys.hWndItem.GetProperty(Const.__QOPROP_ITEM, ref sItem);
						}
						break;
					
					// STYLE
					
					case 2:
						if (Sys.hWndItem.GetProperty(Const.__QOPROP_STYLE, ref sTemp)) 
						{
							nStyles = sTemp.ToNumber();
						}
						break;
					
					// VALIDATION
					
					case 3:
						if (Sys.hWndItem.GetProperty(Const.__QOPROP_VALIDATION, ref sTemp)) 
						{
							nValid = sTemp.ToNumber();
						}
						break;
					
					// PROMPT
					
					case 4:
						sPrompt = Sys.hWndItem.GetProperty(Const.__QOPROP_PROMPT);
						break;
					
					// MAXIMUM DATA LENGTH
					
					case 5:
						nDataLen = Sys.hWndItem.GetDataLength();
						break;
					
					// IS IT ENABLED ?
					
					case 6:
						bUserDisabled = !(Int.__QOIsUserDisabled());
						break;
					
					default:
						bDone = true;
						break;
				}
				n = n + 1;
			}
			return bRet;
			#endregion
		}
		
		/// <summary>
		/// Returns TRUE if Window Handle represents a Data Source
		/// </summary>
		/// <param name="hWnd"></param>
		/// <returns></returns>
		public static SalBoolean __QOIsDataSourceWindow(SalWindowHandle hWnd)
		{
			#region Local Variables
			SalString sSource = "";
            #endregion

            #region Actions
            // If it;s not a window , it's not a data source
            //FC:FINAL: not used anymore
			//if (Ext.QOVisWinIsWindow(hWnd) == false) 
			//{
			//	return false;
			//}
			//// if it's a window , check it DATASOURCE property
			//if (hWnd.GetProperty("DATASOURCE", ref sSource)) 
			//{
			//	return true;
			//}
			return false;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWnd"></param>
		/// <returns></returns>
		public static SalString __QONumToStr(SalWindowHandle hWnd)
		{
			#region Local Variables
			SalString sValue = "";
			#endregion
			
			#region Actions
			sValue = hWnd.GetFormattedText(false);
			return sValue;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWnd"></param>
		/// <returns></returns>
		public static SalWindowHandle __QOGetHandle(SalWindowHandle hWnd)
		{
			#region Actions
			return hWnd;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWndCol"></param>
		/// <returns></returns>
		public static SalString __QOGetValue(SalWindowHandle hWndCol)
		{
			#region Local Variables
			SalString sValue = "";
			#endregion
			
			#region Actions
			sValue = hWndCol.GetFormattedText(false);
			return sValue;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strWindow"></param>
		/// <param name="strFunction"></param>
		/// <param name="strCall"></param>
		/// <returns></returns>
		public static SalNumber ShowErrorMessage(SalString strWindow, SalString strFunction, SalString strCall)
		{
			#region Local Variables
			SalString strSCode = "";
			SalString strWCode = "";
			SalString strMessage = "";
			#endregion
			
			#region Actions
			strSCode = Var.oError.scode.ToString(0);
			strWCode = Var.oError.wcode.ToString(0);
			strMessage = "scode: " + strSCode + @"
wcode: " + strWCode + @"
source: " + Var.oError.source + @"
description: " + Var.oError.description;
			Sal.MessageBox(strMessage, strWindow + ": " + strFunction + " : " + strCall, (Sys.MB_Ok | Sys.MB_IconStop));

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public static SalString GetGUID()
		{
			#region Local Variables
			SalString sBuffer = "";
			SalString sGuid1 = "";
			SalString sGuid2 = "";
			SalString sGuid3 = "";
			SalArray<SalString> sGuidByte = new SalArray<SalString>();
			SalString sGuid4 = "";
			SalString sGuid5 = "";
			SalNumber nData1 = 0;
			SalNumber nData2 = 0;
			SalNumber nData3 = 0;
			SalNumber nData4 = 0;
			SalNumber nCpt = 0;
			#endregion
			
			#region Actions
			//// ! 24.07.12 F1210 SalStrSetBufferLength ->
			//// Call SalStrSetBufferLength( sBuffer, 16 )
			//Sal.SetBufferLength(ref sBuffer, 34);
			//Ext.CoCreateGuid(ref sBuffer);
			//nData1 = Ext.CStructGetLong(sBuffer, 0).Abs();
			//// Call SalStrSetBufferLength( sGuid1, 256)
			//Sal.SetBufferLength(ref sGuid1, 514);
			//Ext.wsprintfA(ref sGuid1, "%08X", nData1);
			//nData2 = Ext.CStructGetWord(sBuffer, 4).Abs();
			//// Call SalStrSetBufferLength( sGuid2, 256)
			//Sal.SetBufferLength(ref sGuid2, 514);
			//Ext.wsprintfA(ref sGuid2, "%04X", nData2);
			//nData3 = Ext.CStructGetWord(sBuffer, 6).Abs();
			//// Call SalStrSetBufferLength( sGuid3, 256)
			//Sal.SetBufferLength(ref sGuid3, 514);
			//Ext.wsprintfA(ref sGuid3, "%04X", nData3);
			//sGuid5 = "";
			//nCpt = 0;
			//while (nCpt < 8) 
			//{
			//	nData4 = Ext.CStructGetByte(sBuffer, 8 + nCpt);
			//	// Call SalStrSetBufferLength( sGuidByte[nCpt], 256)
			//	Sal.SetBufferLength(ref sGuidByte.GetArray(nCpt)[nCpt], 514);
			//	Ext.wsprintfA(ref sGuidByte.GetArray(nCpt)[nCpt], "%02X", nData4);
			//	if (nCpt == 1) 
			//	{
			//		sGuid4 = sGuidByte[0] + sGuidByte[1];
			//	}
			//	if (nCpt > 1) 
			//	{
			//		sGuid5 = sGuid5 + sGuidByte[nCpt];
			//	}
			//	nCpt = nCpt + 1;
			//}
			//return sGuid1 + "-" + sGuid2 + "-" + sGuid3 + "-" + sGuid4 + "-" + sGuid5;
			//FC:FINAL:RHE: use System.Guid
			return Guid.NewGuid().ToString();
			#endregion
		}
		
		/// <summary>
		/// Initialize the InitCommonControlEx() function in COMMCTL32.DLL.
		/// </summary>
		/// <param name="p_nControlClass"></param>
		/// <returns></returns>
		public static SalNumber gfInitCommonControlsEx(SalNumber p_nControlClass)
		{
			#region Actions
			switch (p_nControlClass)
			{
				case Const.ICC_PROGRESS_CLASS:
					Ext.InitCommonControlsEx(8, (Const.ICC_PROGRESS_CLASS | Const.ICC_BAR_CLASSES));
					break;
				
				case Const.ICC_DATE_CLASSES:
					Ext.InitCommonControlsEx(8, Const.ICC_DATE_CLASSES);
					break;
				
				case Const.ICC_BAR_CLASSES:
					Ext.InitCommonControlsEx(8, Const.ICC_BAR_CLASSES);
					break;
				
				case Const.ICC_PAGESCROLLER_CLASS:
					Ext.InitCommonControlsEx(8, (Const.ICC_PAGESCROLLER_CLASS | Const.ICC_BAR_CLASSES));
					break;
			}

			return 0;
			#endregion
		}

        //PPJ:FINAL:AM: implementation for missing features from TD 6
        /// <summary>
        /// Sets the theme for the application
        /// </summary>
        /// <param name="theme">A numeric value that specifies a theme</param>
        /// <returns></returns>
        public static SalBoolean SalThemeSet(SalNumber theme)
        {
            try
            {
                switch (theme)
                {
                    case 0: App.LoadSkinFile("Skins\\Office2007 (Blue).vssf"); break;   //THEME_Default
                    case 1: App.LoadSkinFile("Skins\\Office2010 (Silver).vssf"); break; //THEME_Office2000
                    case 2: App.LoadSkinFile("Skins\\XP (Silver).vssf"); break;         //THEME_OfficeXP
                    case 3: App.LoadSkinFile("Skins\\Office2007 (Blue).vssf"); break;   //THEME_Office2003
                    case 4: App.SkinApplication = false; break;                         //THEME_Office2003NoThemes
                    case 5: App.LoadSkinFile("Skins\\Vista (Basic).vssf"); break;       //THEME_Studio2005
                    case 6: App.LoadSkinFile("Skins\\Office2010 (Blue).vssf"); break;   //THEME_Studio2008
                    case 7: App.LoadSkinFile("Skins\\XP (Silver).vssf"); break;         //THEME_NativeXP
                    case 8: App.LoadSkinFile("Skins\\XP (Royale).vssf"); break;         //THEME_Office2007_R1
                    case 9: App.LoadSkinFile("Skins\\Office2010 (Blue).vssf"); break;   //THEME_Office2007_R2_LunaBlue
                    case 10: App.LoadSkinFile("Skins\\Office2007 (Black).vssf"); break; //THEME_Office2007_R2_Obsidian
                    case 11: App.LoadSkinFile("Skins\\Office2010 (Silver).vssf"); break; //THEME_Office2007_R2_Silver
                    case 12: App.LoadSkinFile("Skins\\Office2007 (Blue).vssf"); break;  //THEME_Office2007_R3_LunaBlue
                    case 13: App.LoadSkinFile("Skins\\Office2007 (Black).vssf"); break; //THEME_Office2007_R3_Obsidian
                    case 14: App.LoadSkinFile("Skins\\Office2007 (Silver).vssf"); break; //THEME_Office2007_R3_Silver
                    case 15: App.LoadSkinFile("Skins\\Office2010 (Silver).vssf"); break; //THEME_Office2010_R1
                    case 16: App.LoadSkinFile("Skins\\Office2007 (Blue).vssf"); break;   //THEME_Office2010_R2_Blue
                    case 17: App.LoadSkinFile("Skins\\Office2010 (Silver).vssf"); break; //THEME_Office2010_R2_Silver
                    case 18: App.LoadSkinFile("Skins\\Office2007 (Black).vssf"); break;  //THEME_Office2010_R2_Black
                }
                Var.nCurrentTheme = theme;
            }
            catch
            {
                MessageBox.Show("Could not load skin file");
                return false;
            }
            return true;
        }

        /// <summary>
        /// Returns the current theme
        /// </summary>
        /// <returns></returns>
        public static SalNumber SalThemeGet()
        {
            return Var.nCurrentTheme;
        }

		public static SalNumber SalDateWeekNumber(DateTime date)
		{
            CultureInfo culture = CultureInfo.CurrentCulture;

            // Specify the calendar (GregorianCalendar in this case)
            Calendar calendar = culture.Calendar;

            // Get the week number
            return calendar.GetWeekOfYear(date, culture.DateTimeFormat.CalendarWeekRule, culture.DateTimeFormat.FirstDayOfWeek);
        }
        

        #region SqlLocals

        /// <summary>
        /// Container class used to group the inner classes that contain
        /// the local variables that have been extracted from methods that use sql calls.
        /// </summary>
        private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class SqlConnectionLocals
			{
				public SalNumber nResult = 0;
				public SalBoolean bOk = false;
				public SalNumber nError = 0;
				public SalString strSqlMsg = "";
				public SalSqlHandle hSqlLocal = SalSqlHandle.Null;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class SqlHandleExecLocals
			{
				public SalNumber nResult = 0;
				public SalNumber nError = 0;
				public SalBoolean bOk = false;
				public SalNumber nPRetry = 0;
				public SalSqlHandle hSqlLocal = SalSqlHandle.Null;
				public SalString strSqlStatement = "";
				public SalString strSqlMsg = "";
				public SalNumber nCount = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class SqlHandleExecuteXLocals
			{
				public SalNumber nResult = 0;
				public SalNumber nError = 0;
				public SalBoolean bOk = false;
				public SalSqlHandle hSqlLocal = SalSqlHandle.Null;
				public SalString strSqlMsg = "";
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class SqlExecutLocals
			{
				public SalNumber nResult = 0;
				public SalNumber nError = 0;
				public SalBoolean bOk = false;
				public SalSqlHandle hSqlLocal = SalSqlHandle.Null;
				public SalString strSqlMsg = "";
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class SqlHandleExecuteXErrorLocals
			{
				public SalNumber nResult = 0;
				public SalNumber nError = 0;
				public SalBoolean bOk = false;
				public SalSqlHandle hSqlLocal = SalSqlHandle.Null;
				public SalString strSqlStatement = "";
				public SalString strSqlMsg = "";
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class SqlImmedSelLocals
			{
				public SalNumber nResult = 0;
				public SalString strSqlMsg = "";
				public SalNumber nCount = 0;
				// Session Handle: hSession
				public SalSqlHandle hSqlSel = SalSqlHandle.Null;
				public SalBoolean bOk = false;
				public SalString strSqlStatement = "";
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalCheckVNLocals
			{
				public SalSqlHandle hSqlPVN = SalSqlHandle.Null;
				public SalNumber nFetchVN = 0;
				public SalString strPV = "";
				public SalString strPVAnrede = "";
				public SalString strPName2 = "";
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalCheckLeseberechtigungLocals
			{
				public SalSqlHandle hSqlLB = SalSqlHandle.Null;
				public SalNumber nFetchLB = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalFAaltLocals
			{
				public SalSqlHandle hSqlFA = SalSqlHandle.Null;
				public SalString strSelectFA = "";
				public SalNumber nFetchRep = 0;
				public SalBoolean bRZFetched = false;
				public SalNumber nPR = 0;
				public SalNumber nArzt = 0;
				public SalNumber nHalter = 0;
				public SalString strZusatzkosten = "";
				public SalNumber nZusatzkosten = 0;
				public SalDateTime dtPDatum = SalDateTime.Null;
				// 15.03.16 Ä1358
				public SalBoolean bFingiert = false; // 15.03.16 Ä1358
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalGetRecordInArrayLocals
			{
				public SalString lsGRIAPFields = "";
				public SalString lsGRIAPValues = "";
				public SalSqlHandle hSqlSelect = SalSqlHandle.Null;
				public SalNumber nGRIAReturn = 0;
				public SalString strGRIAPSelect = "";
				// String: strTable
				public SalString strGRIATableLabel = "";
				public SalString strGRIAName = "";
				public SalString strGRIAColumn = "";
				public SalString strGRIAColType = "";
				public SalString strGRIAColumnLabel = "";
				public SalString strGRIADataType = "";
				public SalNumber nGRIAScale = 0;
				public SalNumber nGRIACountSaetze = 0;
				public SalString strGRIATable = "";
				public SalString strGRIAWhere = "";
				public SalString strVariante = "";
				public SalArray<SalString> strGRIALLFeld = new SalArray<SalString>(500);
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalBuchMBLocals
			{
				public SalString strSBuchArt = "";
				public SalNumber nVSt1 = 0;
				public SalNumber nMwSt1 = 0;
				public SalNumber nMwSt3 = 0;
				public SalNumber nSoll1 = 0;
				public SalNumber nSoll2 = 0;
				public SalNumber nSoll3 = 0;
				public SalNumber nHaben1 = 0;
				public SalNumber nHaben2 = 0;
				public SalNumber nHaben3 = 0;
				public SalNumber nPMwStSchl = 0;
				// String: strBuchText
				public SalNumber nTAVSt = 0;
				public SalNumber nDiverse = 0;
				public SalNumber nPRechNr = 0;
				public SalNumber nKZZahl = 0;
				public SalNumber nInd = 0;
				// 18.03.13 F1513
				public SalNumber nPArztNr2 = 0;
				public SalNumber nPPraxArt = 0;
				// 21.11.17 F2969
				public SalNumber nMwStKonto = 0;
				// 16.07.19 Ä1860
				public SalNumber nPExportNr = 0;
				// 11.06.21 Ä1962 + babuchtext
				public SalString strBABuchtext = "";
				// 20.11.23 Ä2144
				public SalString strPKontoCode = "";
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalDateTime dtBuchDat = SalDateTime.Null;
				public SalNumber nBuchArt = 0;
				public SalNumber nDM1 = 0;
				public SalNumber nDM2 = 0;
				public SalNumber nDM3 = 0;
				public SalNumber nArztNr = 0;
				public SalNumber nHalterNr = 0;
				public SalNumber nProzNr = 0;
				public SalNumber nBelNr = 0;
				public SalNumber nBank = 0;
				public SalString strBuchText = "";
				// 16.07.19 Ä1860
				public SalNumber nExportNr = 0; // 16.07.19 Ä1860
				public SalBoolean bMwStSenkung = false;
				// 04.10.23 Ä2134
				public SalNumber nTKFall = 0; // 04.10.23 Ä2134
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalGetNewHalterNrLocals
			{
				public SalNumber nPMax = 0;
				public SalNumber nXArztNr = 0;
				public SalNumber nXArztNr2 = 0;
				public SalString strXNeben = "";
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class SqlPreparLocals
			{
				public SalBoolean bOk = false;
				public SalNumber nPRetry = 0;
				public SalNumber nResult = 0;
				public SalSqlHandle hSqlLocal = SalSqlHandle.Null;
				public SalString strSqlStatement = "";
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalFALocals
			{
				public SalSqlHandle hSqlFA = SalSqlHandle.Null;
				public SalString strSelectFA = "";
				public SalNumber nFetchRep = 0;
				public SalBoolean bRZFetched = false;
				public SalBoolean bHFgebucht = false; // 15.03.16 Ä1358
				public SalNumber nPR = 0;
				public SalNumber nArzt = 0;
				public SalNumber nHalter = 0;
				public SalString strZusatzkosten = "";
				public SalNumber nZusatzkosten = 0;
				public SalDateTime dtPDatum = SalDateTime.Null;
				// 29.03.16 Ä1358
				public SalBoolean bRaZaZinsen = false; // 29.03.16 Ä1358
				public SalBoolean bFingiert = false;
				// 12.09.16 F2758
				public SalBoolean bVAPfue = false; // 12.09.16 F2758
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class SqlImmedSelCountLocals
			{
				public SalNumber nResult = 0;
				public SalString strSqlMsg = "";
				// Number: nCount
				// Session Handle: hSession
				public SalSqlHandle hSqlSel = SalSqlHandle.Null;
				public SalBoolean bOk = false;
				public SalString strSqlStatement = "";
				public SalNumber nCount = 0;
			}
		}
		#endregion
	}
}
