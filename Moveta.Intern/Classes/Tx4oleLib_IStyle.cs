// <ppj name="Moveta.Intern" date="1/29/2024 3:39:48 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using System.Runtime.InteropServices;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public class Tx4oleLib_IStyle : SalObject
	{
		
		/// <summary>
		/// This is the real COM interface.
		/// </summary>
		internal COMInterface _Interface = null;
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public Tx4oleLib_IStyle(){ }
		public Tx4oleLib_IStyle(COMInterface obj) : this()
		{
			this._Interface = obj;
		}
		#endregion
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean Apply()
		{
			#region Actions
			try
			{
				_Interface.Apply();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="index"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTabPos(SalNumber index, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)index;
				returnValue = _Interface.TabPos(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="index"></param>
		/// <param name="arg_2"></param>
		/// <returns></returns>
		public SalBoolean PropSetTabPos(SalNumber index, SalNumber arg_2)
		{
			#region Actions
			try
			{
				short param1 = (short)index;
				short param2 = (short)arg_2;
				_Interface.TabPos(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="index"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTabType(SalNumber index, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)index;
				returnValue = _Interface.TabType(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="index"></param>
		/// <param name="arg_2"></param>
		/// <returns></returns>
		public SalBoolean PropSetTabType(SalNumber index, SalNumber arg_2)
		{
			#region Actions
			try
			{
				short param1 = (short)index;
				short param2 = (short)arg_2;
				_Interface.TabType(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Attribute">Important: this is one of the Tx4oleLib_BulletConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetBulletAttribute(SalNumber Attribute, SalVariant returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)Attribute;
				returnValue.Value = _Interface.BulletAttribute(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Attribute">Important: this is one of the Tx4oleLib_BulletConstants constants</param>
		/// <param name="arg_2"></param>
		/// <returns></returns>
		public SalBoolean PropSetBulletAttribute(SalNumber Attribute, SalVariant arg_2)
		{
			#region Actions
			try
			{
				int param1 = (int)Attribute;
				object param2 = (object)arg_2.Value;
				_Interface.BulletAttribute(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Attribute">Important: this is one of the Tx4oleLib_NumberingConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetNumberingAttribute(SalNumber Attribute, SalVariant returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)Attribute;
				returnValue.Value = _Interface.NumberingAttribute(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Attribute">Important: this is one of the Tx4oleLib_NumberingConstants constants</param>
		/// <param name="arg_2"></param>
		/// <returns></returns>
		public SalBoolean PropSetNumberingAttribute(SalNumber Attribute, SalVariant arg_2)
		{
			#region Actions
			try
			{
				int param1 = (int)Attribute;
				object param2 = (object)arg_2.Value;
				_Interface.NumberingAttribute(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="StyleName"></param>
		/// <returns></returns>
		public SalBoolean PropSetStyleName(SalString StyleName)
		{
			#region Actions
			try
			{
				string param1 = (string)StyleName;
				_Interface.StyleName = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetStyleName(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.StyleName;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontName"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontName(SalString FontName)
		{
			#region Actions
			try
			{
				string param1 = (string)FontName;
				_Interface.FontName = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontName(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontName;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontSize"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontSize(SalNumber FontSize)
		{
			#region Actions
			try
			{
				short param1 = (short)FontSize;
				_Interface.FontSize = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontSize(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontSize;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontBold"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontBold(SalNumber FontBold)
		{
			#region Actions
			try
			{
				short param1 = (short)FontBold;
				_Interface.FontBold = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontBold(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontBold;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontItalic"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontItalic(SalNumber FontItalic)
		{
			#region Actions
			try
			{
				short param1 = (short)FontItalic;
				_Interface.FontItalic = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontItalic(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontItalic;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontUnderline"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontUnderline(SalNumber FontUnderline)
		{
			#region Actions
			try
			{
				short param1 = (short)FontUnderline;
				_Interface.FontUnderline = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontUnderline(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontUnderline;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontStrikethru"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontStrikethru(SalNumber FontStrikethru)
		{
			#region Actions
			try
			{
				short param1 = (short)FontStrikethru;
				_Interface.FontStrikethru = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontStrikethru(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontStrikethru;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BaseLine"></param>
		/// <returns></returns>
		public SalBoolean PropSetBaseLine(SalNumber BaseLine)
		{
			#region Actions
			try
			{
				short param1 = (short)BaseLine;
				_Interface.BaseLine = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetBaseLine(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.BaseLine;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BaselineType"></param>
		/// <returns></returns>
		public SalBoolean PropSetBaselineType(SalNumber BaselineType)
		{
			#region Actions
			try
			{
				short param1 = (short)BaselineType;
				_Interface.BaselineType = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetBaselineType(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.BaselineType;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ForeColor"></param>
		/// <returns></returns>
		public SalBoolean PropSetForeColor(SalNumber ForeColor)
		{
			#region Actions
			try
			{
				int param1 = (int)ForeColor;
				_Interface.ForeColor = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetForeColor(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ForeColor;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TextBkColor"></param>
		/// <returns></returns>
		public SalBoolean PropSetTextBkColor(SalNumber TextBkColor)
		{
			#region Actions
			try
			{
				int param1 = (int)TextBkColor;
				_Interface.TextBkColor = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTextBkColor(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TextBkColor;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Alignment"></param>
		/// <returns></returns>
		public SalBoolean PropSetAlignment(SalNumber Alignment)
		{
			#region Actions
			try
			{
				short param1 = (short)Alignment;
				_Interface.Alignment = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetAlignment(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Alignment;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="IndentL"></param>
		/// <returns></returns>
		public SalBoolean PropSetIndentL(SalNumber IndentL)
		{
			#region Actions
			try
			{
				short param1 = (short)IndentL;
				_Interface.IndentL = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetIndentL(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.IndentL;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="IndentR"></param>
		/// <returns></returns>
		public SalBoolean PropSetIndentR(SalNumber IndentR)
		{
			#region Actions
			try
			{
				short param1 = (short)IndentR;
				_Interface.IndentR = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetIndentR(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.IndentR;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="IndentFL"></param>
		/// <returns></returns>
		public SalBoolean PropSetIndentFL(SalNumber IndentFL)
		{
			#region Actions
			try
			{
				short param1 = (short)IndentFL;
				_Interface.IndentFL = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetIndentFL(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.IndentFL;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="IndentT"></param>
		/// <returns></returns>
		public SalBoolean PropSetIndentT(SalNumber IndentT)
		{
			#region Actions
			try
			{
				short param1 = (short)IndentT;
				_Interface.IndentT = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetIndentT(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.IndentT;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="IndentB"></param>
		/// <returns></returns>
		public SalBoolean PropSetIndentB(SalNumber IndentB)
		{
			#region Actions
			try
			{
				short param1 = (short)IndentB;
				_Interface.IndentB = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetIndentB(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.IndentB;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="LineSpacing"></param>
		/// <returns></returns>
		public SalBoolean PropSetLineSpacing(SalNumber LineSpacing)
		{
			#region Actions
			try
			{
				short param1 = (short)LineSpacing;
				_Interface.LineSpacing = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetLineSpacing(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LineSpacing;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="LineSpacingT"></param>
		/// <returns></returns>
		public SalBoolean PropSetLineSpacingT(SalNumber LineSpacingT)
		{
			#region Actions
			try
			{
				short param1 = (short)LineSpacingT;
				_Interface.LineSpacingT = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetLineSpacingT(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LineSpacingT;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FrameStyle"></param>
		/// <returns></returns>
		public SalBoolean PropSetFrameStyle(SalNumber FrameStyle)
		{
			#region Actions
			try
			{
				int param1 = (int)FrameStyle;
				_Interface.FrameStyle = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFrameStyle(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FrameStyle;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FrameDistance"></param>
		/// <returns></returns>
		public SalBoolean PropSetFrameDistance(SalNumber FrameDistance)
		{
			#region Actions
			try
			{
				short param1 = (short)FrameDistance;
				_Interface.FrameDistance = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFrameDistance(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FrameDistance;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FrameLineWidth"></param>
		/// <returns></returns>
		public SalBoolean PropSetFrameLineWidth(SalNumber FrameLineWidth)
		{
			#region Actions
			try
			{
				short param1 = (short)FrameLineWidth;
				_Interface.FrameLineWidth = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFrameLineWidth(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FrameLineWidth;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ListType">Important: this is one of the Tx4oleLib_ListTypeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetListType(SalNumber ListType)
		{
			#region Actions
			try
			{
				int param1 = (int)ListType;
				_Interface.ListType = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the Tx4oleLib_ListTypeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetListType(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ListType;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="StyleType"></param>
		/// <returns></returns>
		public SalBoolean PropSetStyleType(SalNumber StyleType)
		{
			#region Actions
			try
			{
				short param1 = (short)StyleType;
				_Interface.StyleType = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetStyleType(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.StyleType;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="NextParaStyle"></param>
		/// <returns></returns>
		public SalBoolean PropSetNextParaStyle(SalString NextParaStyle)
		{
			#region Actions
			try
			{
				string param1 = (string)NextParaStyle;
				_Interface.NextParaStyle = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetNextParaStyle(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.NextParaStyle;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="KeepLinesTogether"></param>
		/// <returns></returns>
		public SalBoolean PropSetKeepLinesTogether(SalBoolean KeepLinesTogether)
		{
			#region Actions
			try
			{
				bool param1 = (bool)KeepLinesTogether;
				_Interface.KeepLinesTogether = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetKeepLinesTogether(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.KeepLinesTogether;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="KeepWithNext"></param>
		/// <returns></returns>
		public SalBoolean PropSetKeepWithNext(SalBoolean KeepWithNext)
		{
			#region Actions
			try
			{
				bool param1 = (bool)KeepWithNext;
				_Interface.KeepWithNext = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetKeepWithNext(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.KeepWithNext;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PageBreakBefore"></param>
		/// <returns></returns>
		public SalBoolean PropSetPageBreakBefore(SalBoolean PageBreakBefore)
		{
			#region Actions
			try
			{
				bool param1 = (bool)PageBreakBefore;
				_Interface.PageBreakBefore = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPageBreakBefore(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PageBreakBefore;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="WidowOrphanLines"></param>
		/// <returns></returns>
		public SalBoolean PropSetWidowOrphanLines(SalNumber WidowOrphanLines)
		{
			#region Actions
			try
			{
				short param1 = (short)WidowOrphanLines;
				_Interface.WidowOrphanLines = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetWidowOrphanLines(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.WidowOrphanLines;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// This is the real COM interface declaration.
		/// </summary>
		[Guid("26BD991C-E7D0-11DD-AA41-0013D350667C")]
		[InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch)]
		public interface COMInterface
		{
			void Apply();
			int TabPos(short index);
			void TabPos(short index, short arg_2);
			int TabType(short index);
			void TabType(short index, short arg_2);
			object BulletAttribute(int Attribute);
			void BulletAttribute(int Attribute, object arg_2);
			object NumberingAttribute(int Attribute);
			void NumberingAttribute(int Attribute, object arg_2);
			string StyleName { get; set; }
			string FontName { get; set; }
			int FontSize { get; set; }
			int FontBold { get; set; }
			int FontItalic { get; set; }
			int FontUnderline { get; set; }
			int FontStrikethru { get; set; }
			int BaseLine { get; set; }
			int BaselineType { get; set; }
			int ForeColor { get; set; }
			int TextBkColor { get; set; }
			int Alignment { get; set; }
			int IndentL { get; set; }
			int IndentR { get; set; }
			int IndentFL { get; set; }
			int IndentT { get; set; }
			int IndentB { get; set; }
			int LineSpacing { get; set; }
			int LineSpacingT { get; set; }
			int FrameStyle { get; set; }
			int FrameDistance { get; set; }
			int FrameLineWidth { get; set; }
			int ListType { get; set; }
			int StyleType { get; set; }
			string NextParaStyle { get; set; }
			bool KeepLinesTogether { get; set; }
			bool KeepWithNext { get; set; }
			bool PageBreakBefore { get; set; }
			int WidowOrphanLines { get; set; }
		}
	}
}
