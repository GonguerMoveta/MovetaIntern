// <ppj name="Moveta.Intern" date="1/29/2024 3:39:48 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using System.Runtime.InteropServices;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public class ShellBrowser_IJamFileListX : SalObject
	{
		
		/// <summary>
		/// This is the real COM interface.
		/// </summary>
		internal COMInterface _Interface = null;
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public ShellBrowser_IJamFileListX(){ }
		public ShellBrowser_IJamFileListX(COMInterface obj) : this()
		{
			this._Interface = obj;
		}
		#endregion
		
		/// <summary>
		/// </summary>
		/// <param name="Path"></param>
		/// <returns></returns>
		public SalBoolean Add(SalString Path)
		{
			#region Actions
			try
			{
				string param1 = (string)Path;
				_Interface.Add(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Path"></param>
		/// <returns></returns>
		public SalBoolean Search(SalString Path)
		{
			#region Actions
			try
			{
				string param1 = (string)Path;
				_Interface.Search(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean Stop()
		{
			#region Actions
			try
			{
				_Interface.Stop();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean Clear()
		{
			#region Actions
			try
			{
				_Interface.Clear();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetDetails(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Details;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetDetails(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.Details = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetShellContextMenu(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ShellContextMenu;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetShellContextMenu(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.ShellContextMenu = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetThumbnails(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Thumbnails;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetThumbnails(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.Thumbnails = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetThumbnailHeight(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ThumbnailHeight;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetThumbnailHeight(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.ThumbnailHeight = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetThumbnailWidth(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ThumbnailWidth;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetThumbnailWidth(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.ThumbnailWidth = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetOleDragDrop(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.OleDragDrop;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetOleDragDrop(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.OleDragDrop = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetAutomaticRefresh(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.AutomaticRefresh;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetAutomaticRefresh(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.AutomaticRefresh = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the ShellBrowser_TBorderStyle constants</param>
		/// <returns></returns>
		public SalBoolean PropGetBorderStyle(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.BorderStyle;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the ShellBrowser_TBorderStyle constants</param>
		/// <returns></returns>
		public SalBoolean PropSetBorderStyle(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.BorderStyle = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetColor(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Color;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetColor(SalNumber rhs)
		{
			#region Actions
			try
			{
				uint param1 = (uint)rhs;
				_Interface.Color = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetEnabled(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Enabled;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetEnabled(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.Enabled = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetHideSelection(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.HideSelection;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetHideSelection(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.HideSelection = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetReadOnly(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ReadOnly;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetReadOnly(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.ReadOnly = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetRowSelect(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.RowSelect;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetRowSelect(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.RowSelect = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetShowColumnHeaders(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ShowColumnHeaders;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetShowColumnHeaders(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.ShowColumnHeaders = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the ShellBrowser_TViewStyle constants</param>
		/// <returns></returns>
		public SalBoolean PropGetViewStyle(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ViewStyle;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the ShellBrowser_TViewStyle constants</param>
		/// <returns></returns>
		public SalBoolean PropSetViewStyle(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.ViewStyle = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetVisible(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Visible;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetVisible(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.Visible = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetHotTrack(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.HotTrack;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetHotTrack(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.HotTrack = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFullDrag(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FullDrag;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetFullDrag(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.FullDrag = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean AlphaSort(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.AlphaSort();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Code">Important: this is one of the ShellBrowser_TListArrangement constants</param>
		/// <returns></returns>
		public SalBoolean Arrange(SalNumber Code)
		{
			#region Actions
			try
			{
				int param1 = (int)Code;
				_Interface.Arrange(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean ClearSelection()
		{
			#region Actions
			try
			{
				_Interface.ClearSelection();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean DeleteSelected()
		{
			#region Actions
			try
			{
				_Interface.DeleteSelected();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetSearchString(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetSearchString();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean IsEditing(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.IsEditing();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean SelectAll()
		{
			#region Actions
			try
			{
				_Interface.SelectAll();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="DX"></param>
		/// <param name="DY"></param>
		/// <returns></returns>
		public SalBoolean Scroll(SalNumber DX, SalNumber DY)
		{
			#region Actions
			try
			{
				int param1 = (int)DX;
				int param2 = (int)DY;
				_Interface.Scroll(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="S"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean StringWidth(SalString S, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)S;
				returnValue = _Interface.StringWidth(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FirstIndex"></param>
		/// <param name="LastIndex"></param>
		/// <returns></returns>
		public SalBoolean UpdateItems(SalNumber FirstIndex, SalNumber LastIndex)
		{
			#region Actions
			try
			{
				int param1 = (int)FirstIndex;
				int param2 = (int)LastIndex;
				_Interface.UpdateItems(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean AboutBox()
		{
			#region Actions
			try
			{
				_Interface.AboutBox();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetShellLink(ShellBrowser_IJamShellLinkX rhs)
		{
			#region Actions
			try
			{
				ShellBrowser_IJamShellLinkX.COMInterface param1 = (ShellBrowser_IJamShellLinkX.COMInterface)rhs._Interface;
				_Interface.ShellLink = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Index"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetFullPath(SalNumber Index, ref SalString returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)Index;
				returnValue = _Interface.GetFullPath(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Filename"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean IsItemInList(SalString Filename, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)Filename;
				returnValue = _Interface.IsItemInList(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Index"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetItems(SalNumber Index, ref SalString returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)Index;
				returnValue = _Interface.Items(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSelected(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Selected;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean FullRefresh()
		{
			#region Actions
			try
			{
				_Interface.FullRefresh();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean SmartRefresh()
		{
			#region Actions
			try
			{
				_Interface.SmartRefresh();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Command"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean InvokeContextMenuCommand(SalString Command, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)Command;
				returnValue = _Interface.InvokeContextMenuCommand(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetItemsCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ItemsCount;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSearchOptions(ShellBrowser_IJamSearchOptionsX returnValue)
		{
			#region Actions
			try
			{
				returnValue.Value = _Interface.SearchOptions;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Filename"></param>
		/// <returns></returns>
		public SalBoolean DeleteItem(SalString Filename)
		{
			#region Actions
			try
			{
				string param1 = (string)Filename;
				_Interface.DeleteItem(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the ShellBrowser_TScrollStyle constants</param>
		/// <returns></returns>
		public SalBoolean PropGetScrollBars(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ScrollBars;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the ShellBrowser_TScrollStyle constants</param>
		/// <returns></returns>
		public SalBoolean PropSetScrollBars(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.ScrollBars = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFont(stdole_Font returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Font;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetFont(stdole_Font rhs)
		{
			#region Actions
			try
			{
				stdole_Font param1 = (stdole_Font)rhs;
				_Interface.Font = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontByRef(stdole_Font rhs)
		{
			#region Actions
			try
			{
				stdole_Font param1 = (stdole_Font)rhs;
				_Interface.FontByRef = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetUseSystemFont(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.UseSystemFont;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetUseSystemFont(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.UseSystemFont = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the ShellBrowser_TJamCopyMode constants</param>
		/// <returns></returns>
		public SalBoolean PropGetCopyMode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.CopyMode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the ShellBrowser_TJamCopyMode constants</param>
		/// <returns></returns>
		public SalBoolean PropSetCopyMode(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.CopyMode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSelectedPath(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SelectedPath;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSelectedPaths(ShellBrowser_IStrings returnValue)
		{
			#region Actions
			try
			{
				returnValue.Value = _Interface.SelectedPaths;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetShowOverlayIcons(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ShowOverlayIcons;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetShowOverlayIcons(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.ShowOverlayIcons = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean CheckAll()
		{
			#region Actions
			try
			{
				_Interface.CheckAll();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean UnCheckAll()
		{
			#region Actions
			try
			{
				_Interface.UnCheckAll();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetCheckIfExists(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.CheckIfExists;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetCheckIfExists(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.CheckIfExists = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="x"></param>
		/// <param name="y"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean ShowContextMenu(SalNumber x, SalNumber y, ref SalString returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)x;
				int param2 = (int)y;
				returnValue = _Interface.ShowContextMenu(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean CancelEdit()
		{
			#region Actions
			try
			{
				_Interface.CancelEdit();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetAllowDuplicates(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.AllowDuplicates;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetAllowDuplicates(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.AllowDuplicates = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTotalFileCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TotalFileCount;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTotalFileSize(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TotalFileSize;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSelectedFileCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SelectedFileCount;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSelectedFileSize(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SelectedFileSize;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetThumbnailBorderColor(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ThumbnailBorderColor;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetThumbnailBorderColor(SalNumber rhs)
		{
			#region Actions
			try
			{
				uint param1 = (uint)rhs;
				_Interface.ThumbnailBorderColor = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// This is the real COM interface declaration.
		/// </summary>
		[Guid("42DDA7D2-E005-4715-AA40-437D1DE167D3")]
		[InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch)]
		public interface COMInterface
		{
			void Add(string Path);
			void Search(string Path);
			void Stop();
			void Clear();
			bool Details { get; set; }
			bool ShellContextMenu { get; set; }
			bool Thumbnails { get; set; }
			int ThumbnailHeight { get; set; }
			int ThumbnailWidth { get; set; }
			bool OleDragDrop { get; set; }
			bool AutomaticRefresh { get; set; }
			int BorderStyle { get; set; }
			uint Color { get; set; }
			bool Enabled { get; set; }
			bool HideSelection { get; set; }
			bool ReadOnly { get; set; }
			bool RowSelect { get; set; }
			bool ShowColumnHeaders { get; set; }
			int ViewStyle { get; set; }
			bool Visible { get; set; }
			bool HotTrack { get; set; }
			bool FullDrag { get; set; }
			bool AlphaSort();
			void Arrange(int Code);
			void ClearSelection();
			void DeleteSelected();
			string GetSearchString();
			bool IsEditing();
			void SelectAll();
			void Scroll(int DX, int DY);
			int StringWidth(string S);
			void UpdateItems(int FirstIndex, int LastIndex);
			void AboutBox();
			ShellBrowser_IJamShellLinkX.COMInterface ShellLink { set; }
			string GetFullPath(int Index);
			bool IsItemInList(string Filename);
			string Items(int Index);
			int Selected { get; }
			void FullRefresh();
			void SmartRefresh();
			bool InvokeContextMenuCommand(string Command);
			int ItemsCount { get; }
			ShellBrowser_IJamSearchOptionsX.COMInterface SearchOptions { get; }
			void DeleteItem(string Filename);
			int ScrollBars { get; set; }
			stdole_Font Font { get; set; }
			stdole_Font FontByRef { set; }
			bool UseSystemFont { get; set; }
			int CopyMode { get; set; }
			string SelectedPath { get; }
			ShellBrowser_IStrings.COMInterface SelectedPaths { get; }
			bool ShowOverlayIcons { get; set; }
			void CheckAll();
			void UnCheckAll();
			bool CheckIfExists { get; set; }
			string ShowContextMenu(int x, int y);
			void CancelEdit();
			bool AllowDuplicates { get; set; }
			int TotalFileCount { get; }
			int TotalFileSize { get; }
			int SelectedFileCount { get; }
			int SelectedFileSize { get; }
			uint ThumbnailBorderColor { get; set; }
		}
	}
}
