// <ppj name="Moveta.Intern" date="1/29/2024 3:39:48 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using System.Runtime.InteropServices;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public class ShellBrowser_IJamSelectionListX : SalObject
	{
		
		/// <summary>
		/// This is the real COM interface.
		/// </summary>
		internal COMInterface _Interface = null;
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public ShellBrowser_IJamSelectionListX(){ }
		public ShellBrowser_IJamSelectionListX(COMInterface obj) : this()
		{
			this._Interface = obj;
		}
		#endregion
		
		/// <summary>
		/// </summary>
		/// <param name="Path"></param>
		/// <param name="returnValue">Important: this is one of the ShellBrowser_TJamSelectionState constants</param>
		/// <returns></returns>
		public SalBoolean IsPathSelected(SalString Path, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)Path;
				returnValue = _Interface.IsPathSelected(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFQPath"></param>
		/// <returns></returns>
		public SalBoolean AddPathToSelection(SalString sFQPath)
		{
			#region Actions
			try
			{
				string param1 = (string)sFQPath;
				_Interface.AddPathToSelection(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFQPath"></param>
		/// <returns></returns>
		public SalBoolean RemovePathFromSelection(SalString sFQPath)
		{
			#region Actions
			try
			{
				string param1 = (string)sFQPath;
				_Interface.RemovePathFromSelection(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean BeginUpdate()
		{
			#region Actions
			try
			{
				_Interface.BeginUpdate();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean EndUpdate()
		{
			#region Actions
			try
			{
				_Interface.EndUpdate();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean Clear()
		{
			#region Actions
			try
			{
				_Interface.Clear();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean FindNext(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FindNext();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetDifferentDrives(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.DifferentDrives;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetHandleShellLinks(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.HandleShellLinks;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetHandleShellLinks(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.HandleShellLinks = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFileName"></param>
		/// <param name="section"></param>
		/// <returns></returns>
		public SalBoolean SaveToIniFile(SalString sFileName, SalString section)
		{
			#region Actions
			try
			{
				string param1 = (string)sFileName;
				string param2 = (string)section;
				_Interface.SaveToIniFile(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFileName"></param>
		/// <param name="section"></param>
		/// <returns></returns>
		public SalBoolean LoadFromIniFile(SalString sFileName, SalString section)
		{
			#region Actions
			try
			{
				string param1 = (string)sFileName;
				string param2 = (string)section;
				_Interface.LoadFromIniFile(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFileCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FileCount;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Count;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPaths(ShellBrowser_IStrings returnValue)
		{
			#region Actions
			try
			{
				returnValue.Value = _Interface.Paths;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetPaths(ShellBrowser_IStrings rhs)
		{
			#region Actions
			try
			{
				ShellBrowser_IStrings.COMInterface param1 = (ShellBrowser_IStrings.COMInterface)rhs._Interface;
				_Interface.Paths = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSize(SalVariant returnValue)
		{
			#region Actions
			try
			{
				returnValue.Value = _Interface.Size;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Index"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Path(SalNumber Index, ref SalString returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)Index;
				returnValue = _Interface.Path(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetCalculateSelectedFiles(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.CalculateSelectedFiles;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetCalculateSelectedFiles(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.CalculateSelectedFiles = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFolderCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FolderCount;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean ResetFindNext()
		{
			#region Actions
			try
			{
				_Interface.ResetFindNext();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// This is the real COM interface declaration.
		/// </summary>
		[Guid("2E0381C8-14B0-4FAE-BA29-909832DBF9E3")]
		[InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch)]
		public interface COMInterface
		{
			int IsPathSelected(string Path);
			void AddPathToSelection(string sFQPath);
			void RemovePathFromSelection(string sFQPath);
			void BeginUpdate();
			void EndUpdate();
			void Clear();
			string FindNext();
			bool DifferentDrives { get; }
			bool HandleShellLinks { get; set; }
			void SaveToIniFile(string sFileName, string section);
			void LoadFromIniFile(string sFileName, string section);
			int FileCount { get; }
			int Count { get; }
			ShellBrowser_IStrings.COMInterface Paths { get; set; }
			object Size { get; }
			string Path(int Index);
			bool CalculateSelectedFiles { get; set; }
			int FolderCount { get; }
			void ResetFindNext();
		}
	}
}
