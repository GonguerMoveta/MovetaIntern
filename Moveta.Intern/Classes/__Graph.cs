// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public class __Graph : SalFunctionalClass
	{
		#region Fields
		public SalString Backdrop = "";
		public SalNumber BackdropStyle = 0;
		public SalArray<SalNumber> Background = new SalArray<SalNumber>("0:6");
		public SalString BottomTitle = "";
		public SalNumber CageFlip = 0;
		public SalString GraphCaption = "";
		public SalArray<SalNumber> ColorData = new SalArray<SalNumber>();
		public SalNumber CurveOrder = 0;
		public SalNumber CurveSteps = 0;
		public SalNumber CurveType = 0;
		public SalArray<SalString> DataField = new SalArray<SalString>("0:19");
		public SalNumber DataReset = 0;
		public SalString DataSource = "";
		public SalNumber PropDlg = 0;
		public SalNumber DrawMode = 0;
		public SalNumber DrawStyle = 0;
		public SalNumber Elevation = 0;
		public SalArray<__GraphDataSet> ExtraData = new SalArray<__GraphDataSet>();
		public SalArray<SalNumber> FontFamily = new SalArray<SalNumber>("0:3");
		public SalArray<SalString> FontName = new SalArray<SalString>("0:3");
		public SalArray<SalNumber> FontSize = new SalArray<SalNumber>("0:3");
		public SalArray<SalNumber> FontStyle = new SalArray<SalNumber>("0:3");
		public SalArray<SalNumber> Foreground = new SalArray<SalNumber>("0:13");
		public SalArray<__GraphDataSet> GraphData = new SalArray<__GraphDataSet>();
		public SalNumber GraphStyle = 0;
		public SalString GraphTitle = "";
		public SalNumber GraphType = 0;
		public SalNumber GridStyle = 0;
		public SalNumber HitSet = 0;
		public SalNumber HitPoint = 0;
		public SalNumber HitType = 0;
		public SalBoolean Hot = false;
		public SalString ImageFile = "";
		public SalNumber LabelEvery = 0;
		public SalString LabelField = "";
		public SalNumber Labels = 0;
		public SalArray<SalString> LabelText = new SalArray<SalString>();
		public SalString LeftTitle = "";
		public SalString LegendField = "";
		public SalNumber LegendStyle = 0;
		public SalArray<SalString> LegendText = new SalArray<SalString>();
		public SalNumber LineStats = 0;
		public SalNumber MousePointer = 0;
		public SalNumber NumDataFields = 0;
		public SalNumber NumPoints = 0;
		public SalNumber NumSets = 0;
		public SalNumber NWin = 0;
		public SalNumber Palette = 0;
		public SalArray<SalNumber> PatternData = new SalArray<SalNumber>();
		public SalBoolean PatternedLines = false;
		public SalNumber Perspective = 0;
		public SalNumber PrintStyle = 0;
		public SalString QuickData = "";
		public SalNumber RandomData = 0;
		public SalNumber Rotation = 0;
		public SalArray<SalNumber> SDKInfo = new SalArray<SalNumber>("0:8");
		public SalBoolean SDKMouse = false;
		public SalBoolean SDKPaint = false;
		public SalBoolean StatusBar = false;
		public SalArray<SalNumber> SymbolData = new SalArray<SalNumber>();
		public SalNumber SymbolSize = 0;
		public SalBoolean ThickLines = false;
		public SalNumber TickEvery = 0;
		public SalNumber Ticks = 0;
		public SalBoolean ToolBar = false;
		public SalArray<SalNumber> ToolStat = new SalArray<SalNumber>("0:19");
		public SalNumber True3D = 0;
		public SalNumber XAxisMax = 0;
		public SalNumber XAxisMin = 0;
		public SalNumber XAxisPos = 0;
		public SalNumber XAxisStyle = 0;
		public SalNumber XAxisTicks = 0;
		public SalArray<__GraphDataSet> XPosData = new SalArray<__GraphDataSet>();
		public SalArray<SalNumber> YAxisMax = new SalArray<SalNumber>("0:1");
		public SalArray<SalNumber> YAxisMin = new SalArray<SalNumber>("0:1");
		public SalArray<SalNumber> YAxisPos = new SalArray<SalNumber>("0:1");
		public SalArray<SalNumber> YAxisStyle = new SalArray<SalNumber>("0:1");
		public SalArray<SalNumber> YAxisTicks = new SalArray<SalNumber>("0:1");
		public SalArray<SalNumber> BackgroundStyle = new SalArray<SalNumber>("0:6");
		public SalNumber CageEdgeColor = 0;
		public SalNumber CageStyle = 0;
		public SalNumber CageWallColor = 0;
		public SalNumber DataLabels = 0;
		public SalArray<__GraphStringSet> DataLabelText = new SalArray<__GraphStringSet>();
		public SalArray<__GraphDataSet> EBarGraphDataMinus = new SalArray<__GraphDataSet>();
		public SalArray<__GraphDataSet> EBarGraphDataPlus = new SalArray<__GraphDataSet>();
		public SalArray<SalNumber> EBarSource = new SalArray<SalNumber>("0:1");
		public SalArray<SalNumber> EBarStyle = new SalArray<SalNumber>("0:1");
		public SalArray<SalNumber> EBarValue = new SalArray<SalNumber>("0:1");
		public SalArray<__GraphDataSet> EBarXPosDataMinus = new SalArray<__GraphDataSet>();
		public SalArray<__GraphDataSet> EBarXPosDataPlus = new SalArray<__GraphDataSet>();
		public SalNumber GridLineStyle = 0;
		public SalString HelpFile = "";
		public SalNumber HotButton = 0;
		public SalNumber LabelStyle = 0;
		public SalNumber LeftTitleStyle = 0;
		public SalNumber LegendPos = 0;
		public SalNumber OverlayGraph = 0;
		public SalNumber OverlayGraphStyle = 0;
		public SalNumber OverlayGraphType = 0;
		public SalArray<SalNumber> OverlayData = new SalArray<SalNumber>();
		public SalNumber OverlayColor = 0;
		public SalNumber OverlayPattern = 0;
		public SalNumber OverlaySymbol = 0;
		public SalBoolean OverlayPatternedLines = false;
		public SalBoolean OverlayThickLines = false;
		public SalString PropertyCaption = "";
		public SalNumber PropertyPages = 0;
		public SalString RightTitle = "";
		public SalNumber RightTitleStyle = 0;
		public SalBoolean RunTime = false;
		public SalNumber SurfaceColorMax = 0;
		public SalNumber SurfaceColorMin = 0;
		public SalNumber SurfaceWallColor = 0;
		public SalNumber True3DDepth = 0;
		public SalNumber True3DXGap = 0;
		public SalNumber True3DZGap = 0;
		public SalNumber XAxisMinorTicks = 0;
		public SalArray<SalNumber> YAxisMinorTicks = new SalArray<SalNumber>("0:1");
		public SalArray<__GraphStringSet> YLabelText = new SalArray<__GraphStringSet>();
		public SalArray<SalString> ZLabelText = new SalArray<SalString>();
		public SalArray<__GraphDataSet> ZPosData = new SalArray<__GraphDataSet>();
		public SalNumber ZAxisMax = 0;
		public SalNumber ZAxisMin = 0;
		public SalNumber ZAxisStyle = 0;
		public SalNumber ZAxisTicks = 0;
		public SalWindowHandle m_hWndCC = SalWindowHandle.Null;
		#endregion
		
		#region Constructors/Destructors
		#endregion
		
		#region Methods
		
		/// <summary>
		/// Invokes property dialog
		/// </summary>
		/// <param name="hWndGraph"></param>
		/// <param name="nPropDlg"></param>
		/// <returns></returns>
		public SalNumber GraphDialog(SalWindowHandle hWndGraph, SalNumber nPropDlg)
		{
			#region Actions
			PropDlg = nPropDlg;
			Ext.SetPropDialog(hWndGraph, PropDlg);

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWndGraph"></param>
		/// <returns></returns>
		public SalNumber GraphDraw(SalWindowHandle hWndGraph)
		{
			#region Local Variables
			SalNumber i = 0;
			#endregion
			
			#region Actions
			Ext.GraphPropUpdateExt(hWndGraph);
			Ext.SetDrawMode(hWndGraph, DrawMode);
			NWin = Ext.GetNWin(hWndGraph);
			i = 0;
			while (i < 9) 
			{
				SDKInfo[i] = Ext.GetSDKInfo(hWndGraph, i);
				i = i + 1;
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Initialises instance variables
		/// </summary>
		/// <param name="hWndGraph"></param>
		/// <returns></returns>
		public SalNumber GraphInit(SalWindowHandle hWndGraph)
		{
			#region Actions
			m_hWndCC = hWndGraph;
			Ext.GraphPropInitExt(hWndGraph);
			if (DrawMode < 2) 
			{
				DrawMode = 3;
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Implements DataReset action
		/// </summary>
		/// <returns></returns>
		public SalNumber GraphReset()
		{
			#region Actions
			if (DataReset == 1 || DataReset == 9) 
			{
				GraphData.SetBounds(0, -1);
				DataSource = "";
				NumDataFields = 0;
				DataField.SetBounds(0, -1);
				LabelField = "";
				LegendField = "";
			}
			if (DataReset == 2 || DataReset == 9) 
			{
				ColorData.SetBounds(0, -1);
			}
			if (DataReset == 3 || DataReset == 9) 
			{
				ExtraData.SetBounds(0, -1);
			}
			if (DataReset == 4 || DataReset == 9) 
			{
				LabelText.SetBounds(0, -1);
			}
			if (DataReset == 5 || DataReset == 9) 
			{
				LegendText.SetBounds(0, -1);
			}
			if (DataReset == 6 || DataReset == 9) 
			{
				PatternData.SetBounds(0, -1);
			}
			if (DataReset == 7 || DataReset == 9) 
			{
				SymbolData.SetBounds(0, -1);
			}
			if (DataReset == 8 || DataReset == 9) 
			{
				XPosData.SetBounds(0, -1);
			}
			if (DataReset == 10) 
			{
				FontFamily.SetBounds(0, -1);
				FontName.SetBounds(0, -1);
				FontSize.SetBounds(0, -1);
				FontStyle.SetBounds(0, -1);
			}
			if (DataReset) 
			{
				Ext.SetDataReset(m_hWndCC, DataReset);
				DataReset = 0;
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWndGraph"></param>
		/// <returns></returns>
		public SalNumber GraphRotate(SalWindowHandle hWndGraph)
		{
			#region Actions
			Ext.SetRotation(hWndGraph, Rotation);
			Ext.SetElevation(hWndGraph, Elevation);
			Ext.SetPerspective(hWndGraph, Perspective);
			Ext.SetDrawMode(hWndGraph, 7);

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Enables/disables toolbar buttons
		/// </summary>
		/// <param name="hWndGraph"></param>
		/// <param name="nTool"></param>
		/// <param name="bStat"></param>
		/// <returns></returns>
		public SalNumber GraphToolBar(SalWindowHandle hWndGraph, SalNumber nTool, SalBoolean bStat)
		{
			#region Actions
			ToolStat[nTool] = bStat;
			Ext.SetToolStat(hWndGraph, ToolStat);

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWndGraph"></param>
		/// <returns></returns>
		public SalNumber GraphUpdate(SalWindowHandle hWndGraph)
		{
			#region Local Variables
			SalNumber i = 0;
			#endregion
			
			#region Actions
			Ext.SetDrawMode(hWndGraph, DrawMode);
			NWin = Ext.GetNWin(hWndGraph);
			i = 0;
			while (i < 9) 
			{
				SDKInfo[i] = Ext.GetSDKInfo(hWndGraph, i);
				i = i + 1;
			}

			return 0;
			#endregion
		}
		#endregion
	}
}
