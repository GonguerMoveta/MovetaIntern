// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using System.Runtime.InteropServices;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public class ListLabel__DLul : SalObject
	{
		
		/// <summary>
		/// This is the real COM interface.
		/// </summary>
		internal COMInterface _Interface = null;
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public ListLabel__DLul()
		{
		}
		public ListLabel__DLul(COMInterface obj) : this()
		{
			this._Interface = obj;
		}
		#endregion
		
		/// <summary>
		/// </summary>
		/// <param name="nCmd">Important: this is one of the ListLabel_LlVersionConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlGetVersion(SalNumber nCmd, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCmd;
				returnValue = _Interface.LlGetVersion(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nFlags">Important: this is one of the ListLabel_LlDebugConstants constants</param>
		/// <returns></returns>
		public SalBoolean LlSetDebug(SalNumber nFlags)
		{
			#region Actions
			try
			{
				int param1 = (int)nFlags;
				_Interface.LlSetDebug(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sVarName"></param>
		/// <param name="sContent"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDefineField(SalString sVarName, SalString sContent, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sVarName;
				string param2 = (string)sContent;
				returnValue = _Interface.LlDefineField(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sVarName"></param>
		/// <param name="sContent"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDefineVariable(SalString sVarName, SalString sContent, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sVarName;
				string param2 = (string)sContent;
				returnValue = _Interface.LlDefineVariable(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sVarName"></param>
		/// <param name="sContent"></param>
		/// <param name="nFieldType">Important: this is one of the ListLabel_LlFieldTypeConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDefineFieldExt(SalString sVarName, SalString sContent, SalNumber nFieldType, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sVarName;
				string param2 = (string)sContent;
				int param3 = (int)nFieldType;
				returnValue = _Interface.LlDefineFieldExt(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sVarName"></param>
		/// <param name="sContent"></param>
		/// <param name="nFieldType">Important: this is one of the ListLabel_LlFieldTypeConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDefineVariableExt(SalString sVarName, SalString sContent, SalNumber nFieldType, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sVarName;
				string param2 = (string)sContent;
				int param3 = (int)nFieldType;
				returnValue = _Interface.LlDefineVariableExt(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean LlDefineFieldStart()
		{
			#region Actions
			try
			{
				_Interface.LlDefineFieldStart();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean LlDefineVariableStart()
		{
			#region Actions
			try
			{
				_Interface.LlDefineVariableStart();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sVarName"></param>
		/// <param name="sContent"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDefineSumVariable(SalString sVarName, SalString sContent, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sVarName;
				string param2 = (string)sContent;
				returnValue = _Interface.LlDefineSumVariable(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sVarName"></param>
		/// <param name="hContent"></param>
		/// <param name="nFieldType">Important: this is one of the ListLabel_LlFieldTypeConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDefineFieldExtHandle(SalString sVarName, SalNumber hContent, SalNumber nFieldType, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sVarName;
				int param2 = (int)hContent;
				int param3 = (int)nFieldType;
				returnValue = _Interface.LlDefineFieldExtHandle(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sVarName"></param>
		/// <param name="hContent"></param>
		/// <param name="nFieldType">Important: this is one of the ListLabel_LlFieldTypeConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDefineVariableExtHandle(SalString sVarName, SalNumber hContent, SalNumber nFieldType, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sVarName;
				int param2 = (int)hContent;
				int param3 = (int)nFieldType;
				returnValue = _Interface.LlDefineVariableExtHandle(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWnd"></param>
		/// <param name="sTitle"></param>
		/// <param name="nObjType">Important: this is one of the ListLabel_LlProjectConstants constants</param>
		/// <param name="sObjName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDefineLayout(SalNumber hWnd, SalString sTitle, SalNumber nObjType, SalString sObjName, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hWnd;
				string param2 = (string)sTitle;
				int param3 = (int)nObjType;
				string param4 = (string)sObjName;
				returnValue = _Interface.LlDefineLayout(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrint(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlPrint();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintAbort(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlPrintAbort();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintFields(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlPrintFields();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintFieldsEnd(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlPrintFieldsEnd();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPages"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintEnd(SalNumber nPages, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nPages;
				returnValue = _Interface.LlPrintEnd(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintGetCurrentPage(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlPrintGetCurrentPage();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintCheckLineFit(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlPrintCheckLineFit();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintGetItemsPerPage(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlPrintGetItemsPerPage();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintGetItemsPerTable(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlPrintGetItemsPerTable();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sField"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintGetRemItemsPerTable(SalString sField, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sField;
				returnValue = _Interface.LlPrintGetRemItemsPerTable(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sPath"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPreviewSetTempPath(SalString sPath, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sPath;
				returnValue = _Interface.LlPreviewSetTempPath(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sObjName"></param>
		/// <param name="sPath"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPreviewDeleteFiles(SalString sObjName, SalString sPath, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sObjName;
				string param2 = (string)sPath;
				returnValue = _Interface.LlPreviewDeleteFiles(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sObjName"></param>
		/// <param name="sPath"></param>
		/// <param name="hWnd"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPreviewDisplay(SalString sObjName, SalString sPath, SalNumber hWnd, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sObjName;
				string param2 = (string)sPath;
				int param3 = (int)hWnd;
				returnValue = _Interface.LlPreviewDisplay(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sObjName"></param>
		/// <param name="sPath"></param>
		/// <param name="hWnd"></param>
		/// <param name="nOptions"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPreviewDisplayEx(SalString sObjName, SalString sPath, SalNumber hWnd, SalNumber nOptions, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sObjName;
				string param2 = (string)sPath;
				int param3 = (int)hWnd;
				int param4 = (int)nOptions;
				returnValue = _Interface.LlPreviewDisplayEx(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nMode">Important: this is one of the ListLabel_LlOptionConstants constants</param>
		/// <param name="nValue"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlSetOption(SalNumber nMode, SalNumber nValue, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nMode;
				int param2 = (int)nValue;
				returnValue = _Interface.LlSetOption(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWnd"></param>
		/// <param name="nObjType">Important: this is one of the ListLabel_LlProjectConstants constants</param>
		/// <param name="sObjName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrinterSetup(SalNumber hWnd, SalNumber nObjType, SalString sObjName, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hWnd;
				int param2 = (int)nObjType;
				string param3 = (string)sObjName;
				returnValue = _Interface.LlPrinterSetup(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sText"></param>
		/// <param name="nPercentage"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintSetBoxText(SalString sText, SalNumber nPercentage, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sText;
				int param2 = (int)nPercentage;
				returnValue = _Interface.LlPrintSetBoxText(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sVarName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintIsVariableUsed(SalString sVarName, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sVarName;
				returnValue = _Interface.LlPrintIsVariableUsed(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFieldName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintIsFieldUsed(SalString sFieldName, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFieldName;
				returnValue = _Interface.LlPrintIsFieldUsed(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sObjName"></param>
		/// <param name="bEnable"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintEnableObject(SalString sObjName, SalNumber bEnable, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sObjName;
				int param2 = (int)bEnable;
				returnValue = _Interface.LlPrintEnableObject(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintWillMatchFilter(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlPrintWillMatchFilter();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintDidMatchFilter(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlPrintDidMatchFilter();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nObjType">Important: this is one of the ListLabel_LlProjectConstants constants</param>
		/// <param name="sObjName"></param>
		/// <param name="nPrintOptions">Important: this is one of the ListLabel_LlPrintModeConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintStart(SalNumber nObjType, SalString sObjName, SalNumber nPrintOptions, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nObjType;
				string param2 = (string)sObjName;
				int param3 = (int)nPrintOptions;
				returnValue = _Interface.LlPrintStart(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nObjType">Important: this is one of the ListLabel_LlProjectConstants constants</param>
		/// <param name="sObjName"></param>
		/// <param name="nPrintOptions">Important: this is one of the ListLabel_LlPrintModeConstants constants</param>
		/// <param name="nBoxType">Important: this is one of the ListLabel_LlBoxTypeConstants constants</param>
		/// <param name="hWnd"></param>
		/// <param name="sTitle"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintWithBoxStart(SalNumber nObjType, SalString sObjName, SalNumber nPrintOptions, SalNumber nBoxType, SalNumber hWnd, SalString sTitle, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nObjType;
				string param2 = (string)sObjName;
				int param3 = (int)nPrintOptions;
				int param4 = (int)nBoxType;
				int param5 = (int)hWnd;
				string param6 = (string)sTitle;
				returnValue = _Interface.LlPrintWithBoxStart(param1, param2, param3, param4, param5, param6);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWnd"></param>
		/// <param name="sText"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintOptionsDialog(SalNumber hWnd, SalString sText, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hWnd;
				string param2 = (string)sText;
				returnValue = _Interface.LlPrintOptionsDialog(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sDir"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlSetPrinterDefaultsDir(SalString sDir, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sDir;
				returnValue = _Interface.LlSetPrinterDefaultsDir(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWnd"></param>
		/// <param name="nFlags">Important: this is one of the ListLabel_LlCtlOptionConstants constants</param>
		/// <param name="sIniFile"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlAddCtlSupport(SalNumber hWnd, SalNumber nFlags, SalString sIniFile, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hWnd;
				int param2 = (int)nFlags;
				string param3 = (string)sIniFile;
				returnValue = _Interface.LlAddCtlSupport(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nObjType">Important: this is one of the ListLabel_LlProjectConstants constants</param>
		/// <param name="sObjectExt"></param>
		/// <param name="sPrinterExt"></param>
		/// <param name="sSketchExt"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlSetFileExtensions(SalNumber nObjType, SalString sObjectExt, SalString sPrinterExt, SalString sSketchExt, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nObjType;
				string param2 = (string)sObjectExt;
				string param3 = (string)sPrinterExt;
				string param4 = (string)sSketchExt;
				returnValue = _Interface.LlSetFileExtensions(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nObjType">Important: this is one of the ListLabel_LlProjectConstants constants</param>
		/// <param name="sObjName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlSetPrinterToDefault(SalNumber nObjType, SalString sObjName, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nObjType;
				string param2 = (string)sObjName;
				returnValue = _Interface.LlSetPrinterToDefault(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nIndex">Important: this is one of the ListLabel_LlPrintOptionConstants constants</param>
		/// <param name="nValue"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintSetOption(SalNumber nIndex, SalNumber nValue, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nIndex;
				int param2 = (int)nValue;
				returnValue = _Interface.LlPrintSetOption(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWnd"></param>
		/// <param name="sTitle"></param>
		/// <param name="sText"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintOptionsDialogTitle(SalNumber hWnd, SalString sTitle, SalString sText, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hWnd;
				string param2 = (string)sTitle;
				string param3 = (string)sText;
				returnValue = _Interface.LlPrintOptionsDialogTitle(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDefineSortOrderStart(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlDefineSortOrderStart();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sIdentifier"></param>
		/// <param name="sText"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDefineSortOrder(SalString sIdentifier, SalString sText, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sIdentifier;
				string param2 = (string)sText;
				returnValue = _Interface.LlDefineSortOrder(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="psBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintGetSortOrder(ref SalString psBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)psBuffer;
				returnValue = _Interface.LlPrintGetSortOrder(ref param1);
				psBuffer = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sSortorder"></param>
		/// <param name="sIdentifier"></param>
		/// <param name="sText"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDefineGrouping(SalString sSortorder, SalString sIdentifier, SalString sText, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sSortorder;
				string param2 = (string)sIdentifier;
				string param3 = (string)sText;
				returnValue = _Interface.LlDefineGrouping(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="psBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintGetGrouping(ref SalString psBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)psBuffer;
				returnValue = _Interface.LlPrintGetGrouping(ref param1);
				psBuffer = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nMode">Important: this is one of the ListLabel_LlOptionConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlGetOption(SalNumber nMode, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nMode;
				returnValue = _Interface.LlGetOption(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nIndex">Important: this is one of the ListLabel_LlOptionStringConstants constants</param>
		/// <param name="sBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlSetOptionString(SalNumber nIndex, SalString sBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nIndex;
				string param2 = (string)sBuffer;
				returnValue = _Interface.LlSetOptionString(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nIndex">Important: this is one of the ListLabel_LlOptionStringConstants constants</param>
		/// <param name="psBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlGetOptionString(SalNumber nIndex, ref SalString psBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nIndex;
				string param2 = (string)psBuffer;
				returnValue = _Interface.LlGetOptionString(param1, ref param2);
				psBuffer = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sName"></param>
		/// <param name="psBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlGetVariableContents(SalString sName, ref SalString psBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sName;
				string param2 = (string)psBuffer;
				returnValue = _Interface.LlGetVariableContents(param1, ref param2);
				psBuffer = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sName"></param>
		/// <param name="psBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlGetFieldContents(SalString sName, ref SalString psBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sName;
				string param2 = (string)psBuffer;
				returnValue = _Interface.LlGetFieldContents(param1, ref param2);
				psBuffer = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sName"></param>
		/// <param name="psBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlGetSumVariableContents(SalString sName, ref SalString psBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sName;
				string param2 = (string)psBuffer;
				returnValue = _Interface.LlGetSumVariableContents(param1, ref param2);
				psBuffer = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sName"></param>
		/// <param name="psBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlGetUserVariableContents(SalString sName, ref SalString psBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sName;
				string param2 = (string)psBuffer;
				returnValue = _Interface.LlGetUserVariableContents(param1, ref param2);
				psBuffer = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlGetVariableType(SalString sName, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sName;
				returnValue = _Interface.LlGetVariableType(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlGetFieldType(SalString sName, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sName;
				returnValue = _Interface.LlGetFieldType(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nIndex">Important: this is one of the ListLabel_LlPrintOptionConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintGetOption(SalNumber nIndex, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nIndex;
				returnValue = _Interface.LlPrintGetOption(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="psPrn"></param>
		/// <param name="psPort"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintGetPrinterInfo(ref SalString psPrn, ref SalString psPort, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)psPrn;
				string param2 = (string)psPort;
				returnValue = _Interface.LlPrintGetPrinterInfo(ref param1, ref param2);
				psPrn = param1;
				psPort = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="psBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintGetFilterExpression(ref SalString psBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)psBuffer;
				returnValue = _Interface.LlPrintGetFilterExpression(ref param1);
				psBuffer = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWnd"></param>
		/// <param name="nObjType">Important: this is one of the ListLabel_LlProjectConstants constants</param>
		/// <param name="psObjName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlSelectFileDlg(SalNumber hWnd, SalNumber nObjType, ref SalString psObjName, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hWnd;
				int param2 = (int)nObjType;
				string param3 = (string)psObjName;
				returnValue = _Interface.LlSelectFileDlg(param1, param2, ref param3);
				psObjName = param3;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWnd"></param>
		/// <param name="sTitle"></param>
		/// <param name="nObjType">Important: this is one of the ListLabel_LlProjectConstants constants</param>
		/// <param name="psObjName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlSelectFileDlgTitle(SalNumber hWnd, SalString sTitle, SalNumber nObjType, ref SalString psObjName, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hWnd;
				string param2 = (string)sTitle;
				int param3 = (int)nObjType;
				string param4 = (string)psObjName;
				returnValue = _Interface.LlSelectFileDlgTitle(param1, param2, param3, ref param4);
				psObjName = param4;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWnd"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintSelectOffset(SalNumber hWnd, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hWnd;
				returnValue = _Interface.LlPrintSelectOffset(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nMenuID"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDesignerProhibitAction(SalNumber nMenuID, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nMenuID;
				returnValue = _Interface.LlDesignerProhibitAction(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sExprText"></param>
		/// <param name="bTablefields"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlExprParse(SalString sExprText, SalNumber bTablefields, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sExprText;
				int param2 = (int)bTablefields;
				returnValue = _Interface.LlExprParse(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nptrExpr"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlExprType(SalNumber nptrExpr, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nptrExpr;
				returnValue = _Interface.LlExprType(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="psBuffer"></param>
		/// <returns></returns>
		public SalBoolean LlExprError(ref SalString psBuffer)
		{
			#region Actions
			try
			{
				string param1 = (string)psBuffer;
				_Interface.LlExprError(ref param1);
				psBuffer = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nptrExpr"></param>
		/// <returns></returns>
		public SalBoolean LlExprFree(SalNumber nptrExpr)
		{
			#region Actions
			try
			{
				int param1 = (int)nptrExpr;
				_Interface.LlExprFree(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nptrExpr"></param>
		/// <param name="psBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlExprEvaluate(SalNumber nptrExpr, ref SalString psBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nptrExpr;
				string param2 = (string)psBuffer;
				returnValue = _Interface.LlExprEvaluate(param1, ref param2);
				psBuffer = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWnd"></param>
		/// <param name="psBuffer"></param>
		/// <param name="nParaTypes"></param>
		/// <param name="sTitle"></param>
		/// <param name="bTable"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDlgEditLineEx(SalNumber hWnd, ref SalString psBuffer, SalNumber nParaTypes, SalString sTitle, SalNumber bTable, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hWnd;
				string param2 = (string)psBuffer;
				int param3 = (int)nParaTypes;
				string param4 = (string)sTitle;
				int param5 = (int)bTable;
				returnValue = _Interface.LlDlgEditLineEx(param1, ref param2, param3, param4, param5);
				psBuffer = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="cDecPoint"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlSetDecimalChar(SalNumber cDecPoint, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)cDecPoint;
				returnValue = _Interface.LlSetDecimalChar(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nObjType">Important: this is one of the ListLabel_LlProjectConstants constants</param>
		/// <param name="sObjName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlCreateSketch(SalNumber nObjType, SalString sObjName, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nObjType;
				string param2 = (string)sObjName;
				returnValue = _Interface.LlCreateSketch(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nMenuID"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlViewerProhibitAction(SalNumber nMenuID, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nMenuID;
				returnValue = _Interface.LlViewerProhibitAction(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFileName"></param>
		/// <param name="nFunction">Important: this is one of the ListLabel_LlPrinterConfigurationConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintCopyPrinterConfiguration(SalString sFileName, SalNumber nFunction, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFileName;
				int param2 = (int)nFunction;
				returnValue = _Interface.LlPrintCopyPrinterConfiguration(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFileName"></param>
		/// <param name="sTempPath"></param>
		/// <param name="bReadOnly"></param>
		/// <param name="bOneJobTranslation"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysStorageOpen(SalString sFileName, SalString sTempPath, SalNumber bReadOnly, SalNumber bOneJobTranslation, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFileName;
				string param2 = (string)sTempPath;
				int param3 = (int)bReadOnly;
				int param4 = (int)bOneJobTranslation;
				returnValue = _Interface.LlStgsysStorageOpen(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysStorageClose(SalNumber hStg)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				_Interface.LlStgsysStorageClose(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysGetAPIVersion(SalNumber hStg, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				returnValue = _Interface.LlStgsysGetAPIVersion(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysGetFileVersion(SalNumber hStg, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				returnValue = _Interface.LlStgsysGetFileVersion(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysGetJobCount(SalNumber hStg, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				returnValue = _Interface.LlStgsysGetJobCount(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysGetPageCount(SalNumber hStg, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				returnValue = _Interface.LlStgsysGetPageCount(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysGetLastError(SalNumber hStg, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				returnValue = _Interface.LlStgsysGetLastError(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysDeleteFiles(SalNumber hStg, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				returnValue = _Interface.LlStgsysDeleteFiles(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <param name="hStgToAppend"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysAppend(SalNumber hStg, SalNumber hStgToAppend, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				int param2 = (int)hStgToAppend;
				returnValue = _Interface.LlStgsysAppend(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <param name="nJob"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysSetJob(SalNumber hStg, SalNumber nJob, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				int param2 = (int)nJob;
				returnValue = _Interface.LlStgsysSetJob(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <param name="nJob"></param>
		/// <param name="nFile"></param>
		/// <param name="psBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysGetFilename(SalNumber hStg, SalNumber nJob, SalNumber nFile, ref SalString psBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				int param2 = (int)nJob;
				int param3 = (int)nFile;
				string param4 = (string)psBuffer;
				returnValue = _Interface.LlStgsysGetFilename(param1, param2, param3, ref param4);
				psBuffer = param4;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <param name="nOption">Important: this is one of the ListLabel_LlStgsysOptionConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysGetJobOptionValue(SalNumber hStg, SalNumber nOption, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				int param2 = (int)nOption;
				returnValue = _Interface.LlStgsysGetJobOptionValue(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <param name="nPageIndex"></param>
		/// <param name="nOption">Important: this is one of the ListLabel_LlStgsysOptionConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysGetPageOptionValue(SalNumber hStg, SalNumber nPageIndex, SalNumber nOption, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				int param2 = (int)nPageIndex;
				int param3 = (int)nOption;
				returnValue = _Interface.LlStgsysGetPageOptionValue(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <param name="nPageIndex"></param>
		/// <param name="nOption">Important: this is one of the ListLabel_LlStgsysOptionConstants constants</param>
		/// <param name="sBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysSetPageOptionString(SalNumber hStg, SalNumber nPageIndex, SalNumber nOption, SalString sBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				int param2 = (int)nPageIndex;
				int param3 = (int)nOption;
				string param4 = (string)sBuffer;
				returnValue = _Interface.LlStgsysSetPageOptionString(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <param name="nPageIndex"></param>
		/// <param name="nOption">Important: this is one of the ListLabel_LlStgsysOptionConstants constants</param>
		/// <param name="psBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysGetPageOptionString(SalNumber hStg, SalNumber nPageIndex, SalNumber nOption, ref SalString psBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				int param2 = (int)nPageIndex;
				int param3 = (int)nOption;
				string param4 = (string)psBuffer;
				returnValue = _Interface.LlStgsysGetPageOptionString(param1, param2, param3, ref param4);
				psBuffer = param4;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <param name="nPageIndex"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysGetPageMetafile(SalNumber hStg, SalNumber nPageIndex, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				int param2 = (int)nPageIndex;
				returnValue = _Interface.LlStgsysGetPageMetafile(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <param name="nPageIndex"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysGetPageMetafile16(SalNumber hStg, SalNumber nPageIndex, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				int param2 = (int)nPageIndex;
				returnValue = _Interface.LlStgsysGetPageMetafile16(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hMF"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysDestroyMetafile(SalNumber hMF, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hMF;
				returnValue = _Interface.LlStgsysDestroyMetafile(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <param name="hDC"></param>
		/// <param name="hPrnDC"></param>
		/// <param name="bAskPrinter"></param>
		/// <param name="left"></param>
		/// <param name="top"></param>
		/// <param name="right"></param>
		/// <param name="bottom"></param>
		/// <param name="nPageIndex"></param>
		/// <param name="bFit"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysDrawPage(SalNumber hStg, SalNumber hDC, SalNumber hPrnDC, SalNumber bAskPrinter, SalNumber left, SalNumber top, SalNumber right, SalNumber bottom, SalNumber nPageIndex, SalNumber bFit, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				int param2 = (int)hDC;
				int param3 = (int)hPrnDC;
				int param4 = (int)bAskPrinter;
				int param5 = (int)left;
				int param6 = (int)top;
				int param7 = (int)right;
				int param8 = (int)bottom;
				int param9 = (int)nPageIndex;
				int param10 = (int)bFit;
				returnValue = _Interface.LlStgsysDrawPage(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nIndex">Important: this is one of the ListLabel_LlPrintOptionStringConstants constants</param>
		/// <param name="sBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintSetOptionString(SalNumber nIndex, SalString sBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nIndex;
				string param2 = (string)sBuffer;
				returnValue = _Interface.LlPrintSetOptionString(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nIndex">Important: this is one of the ListLabel_LlPrintOptionStringConstants constants</param>
		/// <param name="psBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintGetOptionString(SalNumber nIndex, ref SalString psBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nIndex;
				string param2 = (string)psBuffer;
				returnValue = _Interface.LlPrintGetOptionString(param1, ref param2);
				psBuffer = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nUserData"></param>
		/// <param name="hWnd"></param>
		/// <param name="sTitle"></param>
		/// <param name="nObjType">Important: this is one of the ListLabel_LlProjectConstants constants</param>
		/// <param name="sObjName"></param>
		/// <param name="bWithFileSelect"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Design(SalNumber nUserData, SalNumber hWnd, SalString sTitle, SalNumber nObjType, SalString sObjName, SalNumber bWithFileSelect, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nUserData;
				int param2 = (int)hWnd;
				string param3 = (string)sTitle;
				int param4 = (int)nObjType;
				string param5 = (string)sObjName;
				int param6 = (int)bWithFileSelect;
				returnValue = _Interface.Design(param1, param2, param3, param4, param5, param6);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nUserData"></param>
		/// <param name="nObjType">Important: this is one of the ListLabel_LlProjectConstants constants</param>
		/// <param name="sObjName"></param>
		/// <param name="bWithFileSelect"></param>
		/// <param name="nPrintOptions"></param>
		/// <param name="nBoxType"></param>
		/// <param name="hWnd"></param>
		/// <param name="sTitle"></param>
		/// <param name="bShowPrintOptionsDlg"></param>
		/// <param name="sTempPath"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Print(SalNumber nUserData, SalNumber nObjType, SalString sObjName, SalNumber bWithFileSelect, SalNumber nPrintOptions, SalNumber nBoxType, SalNumber hWnd, SalString sTitle, SalNumber bShowPrintOptionsDlg, SalString sTempPath, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nUserData;
				int param2 = (int)nObjType;
				string param3 = (string)sObjName;
				int param4 = (int)bWithFileSelect;
				int param5 = (int)nPrintOptions;
				int param6 = (int)nBoxType;
				int param7 = (int)hWnd;
				string param8 = (string)sTitle;
				int param9 = (int)bShowPrintOptionsDlg;
				string param10 = (string)sTempPath;
				returnValue = _Interface.Print(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nIdent"></param>
		/// <param name="sText"></param>
		/// <returns></returns>
		public SalBoolean LlDebugOutput(SalNumber nIdent, SalString sText)
		{
			#region Actions
			try
			{
				int param1 = (int)nIdent;
				string param2 = (string)sText;
				_Interface.LlDebugOutput(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nFlags">Important: this is one of the ListLabel_LlFieldTypeConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlEnumGetFirstVar(SalNumber nFlags, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nFlags;
				returnValue = _Interface.LlEnumGetFirstVar(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nFlags">Important: this is one of the ListLabel_LlFieldTypeConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlEnumGetFirstField(SalNumber nFlags, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nFlags;
				returnValue = _Interface.LlEnumGetFirstField(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPos"></param>
		/// <param name="nFlags">Important: this is one of the ListLabel_LlFieldTypeConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlEnumGetNextEntry(SalNumber nPos, SalNumber nFlags, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nPos;
				int param2 = (int)nFlags;
				returnValue = _Interface.LlEnumGetNextEntry(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPos"></param>
		/// <param name="psName"></param>
		/// <param name="psContents"></param>
		/// <param name="pHandle"></param>
		/// <param name="pnType">Important: this is one of the ListLabel_LlFieldTypeConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlEnumGetEntry(SalNumber nPos, ref SalString psName, ref SalString psContents, ref SalNumber pHandle, SalNumber pnType, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nPos;
				string param2 = (string)psName;
				string param3 = (string)psContents;
				int param4 = (int)pHandle;
				int param5 = (int)pnType;
				returnValue = _Interface.LlEnumGetEntry(param1, ref param2, ref param3, ref param4, param5);
				psName = param2;
				psContents = param3;
				pHandle = param4;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nExtensionType">Important: this is one of the ListLabel_LlExtensionTypeConstants constants</param>
		/// <param name="sExtensionName"></param>
		/// <param name="sKey"></param>
		/// <param name="psBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlXGetParameter(SalNumber nExtensionType, SalString sExtensionName, SalString sKey, ref SalString psBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nExtensionType;
				string param2 = (string)sExtensionName;
				string param3 = (string)sKey;
				string param4 = (string)psBuffer;
				returnValue = _Interface.LlXGetParameter(param1, param2, param3, ref param4);
				psBuffer = param4;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nExtensionType">Important: this is one of the ListLabel_LlExtensionTypeConstants constants</param>
		/// <param name="sExtensionName"></param>
		/// <param name="sKey"></param>
		/// <param name="sValue"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlXSetParameter(SalNumber nExtensionType, SalString sExtensionName, SalString sKey, SalString sValue, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nExtensionType;
				string param2 = (string)sExtensionName;
				string param3 = (string)sKey;
				string param4 = (string)sValue;
				returnValue = _Interface.LlXSetParameter(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintResetObjectStates(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlPrintResetObjectStates();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <param name="sPrinterName1"></param>
		/// <param name="sPrinterName2"></param>
		/// <param name="nStartPageIndex"></param>
		/// <param name="nEndPageIndex"></param>
		/// <param name="nCopies"></param>
		/// <param name="nFlags">Important: this is one of the ListLabel_LlStgsysPrintFlagConstants constants</param>
		/// <param name="sMessage"></param>
		/// <param name="hWnd"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysPrint(SalNumber hStg, SalString sPrinterName1, SalString sPrinterName2, SalNumber nStartPageIndex, SalNumber nEndPageIndex, SalNumber nCopies, SalNumber nFlags, SalString sMessage, SalNumber hWnd, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				string param2 = (string)sPrinterName1;
				string param3 = (string)sPrinterName2;
				int param4 = (int)nStartPageIndex;
				int param5 = (int)nEndPageIndex;
				int param6 = (int)nCopies;
				int param7 = (int)nFlags;
				string param8 = (string)sMessage;
				int param9 = (int)hWnd;
				returnValue = _Interface.LlStgsysPrint(param1, param2, param3, param4, param5, param6, param7, param8, param9);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFileName"></param>
		/// <param name="sTempPath"></param>
		/// <param name="sPrinterName1"></param>
		/// <param name="sPrinterName2"></param>
		/// <param name="nStartPageIndex"></param>
		/// <param name="nEndPageIndex"></param>
		/// <param name="nCopies"></param>
		/// <param name="nFlags">Important: this is one of the ListLabel_LlStgsysPrintFlagConstants constants</param>
		/// <param name="sMessage"></param>
		/// <param name="hWnd"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysStoragePrint(SalString sFileName, SalString sTempPath, SalString sPrinterName1, SalString sPrinterName2, SalNumber nStartPageIndex, SalNumber nEndPageIndex, SalNumber nCopies, SalNumber nFlags, SalString sMessage, SalNumber hWnd, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFileName;
				string param2 = (string)sTempPath;
				string param3 = (string)sPrinterName1;
				string param4 = (string)sPrinterName2;
				int param5 = (int)nStartPageIndex;
				int param6 = (int)nEndPageIndex;
				int param7 = (int)nCopies;
				int param8 = (int)nFlags;
				string param9 = (string)sMessage;
				int param10 = (int)hWnd;
				returnValue = _Interface.LlStgsysStoragePrint(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintResetProjectState(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlPrintResetProjectState();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nObjType">Important: this is one of the ListLabel_LlProjectConstants constants</param>
		/// <param name="sObjName"></param>
		/// <param name="nPrinter"></param>
		/// <param name="sPrinter"></param>
		/// <param name="pDevMode"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlSetPrinterInPrinterFile(SalNumber nObjType, SalString sObjName, SalNumber nPrinter, SalString sPrinter, SalNumber pDevMode, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nObjType;
				string param2 = (string)sObjName;
				int param3 = (int)nPrinter;
				string param4 = (string)sPrinter;
				int param5 = (int)pDevMode;
				returnValue = _Interface.LlSetPrinterInPrinterFile(param1, param2, param3, param4, param5);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFunctionName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDesignerProhibitFunction(SalString sFunctionName, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFunctionName;
				returnValue = _Interface.LlDesignerProhibitFunction(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sVarName"></param>
		/// <param name="sContent"></param>
		/// <param name="nFieldType">Important: this is one of the ListLabel_LlFieldTypeConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDefineChartFieldExt(SalString sVarName, SalString sContent, SalNumber nFieldType, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sVarName;
				string param2 = (string)sContent;
				int param3 = (int)nFieldType;
				returnValue = _Interface.LlDefineChartFieldExt(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDefineChartFieldStart(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlDefineChartFieldStart();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nFlags">Important: this is one of the ListLabel_LlPrintDeclareChartRowConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintDeclareChartRow(SalNumber nFlags, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nFlags;
				returnValue = _Interface.LlPrintDeclareChartRow(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFieldName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintIsChartFieldUsed(SalString sFieldName, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFieldName;
				returnValue = _Interface.LlPrintIsChartFieldUsed(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sName"></param>
		/// <param name="psBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlGetChartFieldContents(SalString sName, ref SalString psBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sName;
				string param2 = (string)psBuffer;
				returnValue = _Interface.LlGetChartFieldContents(param1, ref param2);
				psBuffer = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nFlags">Important: this is one of the ListLabel_LlFieldTypeConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlEnumGetFirstChartField(SalNumber nFlags, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nFlags;
				returnValue = _Interface.LlEnumGetFirstChartField(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nFlags">Important: this is one of the ListLabel_LlPrintGetChartObjectCountConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintGetChartObjectCount(SalNumber nFlags, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nFlags;
				returnValue = _Interface.LlPrintGetChartObjectCount(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlRTFCreateObject(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlRTFCreateObject();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hRTFObj"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlRTFDeleteObject(SalNumber hRTFObj, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hRTFObj;
				returnValue = _Interface.LlRTFDeleteObject(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hRTFObj"></param>
		/// <param name="sText"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlRTFSetText(SalNumber hRTFObj, SalString sText, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hRTFObj;
				string param2 = (string)sText;
				returnValue = _Interface.LlRTFSetText(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hRTFObj"></param>
		/// <param name="nFlags">Important: this is one of the ListLabel_LlRTFTextModeConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlRTFGetTextLength(SalNumber hRTFObj, SalNumber nFlags, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hRTFObj;
				int param2 = (int)nFlags;
				returnValue = _Interface.LlRTFGetTextLength(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hRTFObj"></param>
		/// <param name="nFlags">Important: this is one of the ListLabel_LlRTFTextModeConstants constants</param>
		/// <param name="psText"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlRTFGetText(SalNumber hRTFObj, SalNumber nFlags, ref SalString psText, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hRTFObj;
				int param2 = (int)nFlags;
				string param3 = (string)psText;
				returnValue = _Interface.LlRTFGetText(param1, param2, ref param3);
				psText = param3;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hRTFObj"></param>
		/// <param name="hWnd"></param>
		/// <param name="hPrnDC"></param>
		/// <param name="nProjectType">Important: this is one of the ListLabel_LlProjectConstants constants</param>
		/// <param name="bModal"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlRTFEditObject(SalNumber hRTFObj, SalNumber hWnd, SalNumber hPrnDC, SalNumber nProjectType, SalNumber bModal, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hRTFObj;
				int param2 = (int)hWnd;
				int param3 = (int)hPrnDC;
				int param4 = (int)nProjectType;
				int param5 = (int)bModal;
				returnValue = _Interface.LlRTFEditObject(param1, param2, param3, param4, param5);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hRTFObj"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlRTFCopyToClipboard(SalNumber hRTFObj, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hRTFObj;
				returnValue = _Interface.LlRTFCopyToClipboard(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sField"></param>
		/// <param name="nDimension">Important: this is one of the ListLabel_LlGripDimConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintGetRemainingSpacePerTable(SalString sField, SalNumber nDimension, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sField;
				int param2 = (int)nDimension;
				returnValue = _Interface.LlPrintGetRemainingSpacePerTable(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hRTFObj"></param>
		/// <param name="hDC"></param>
		/// <param name="left"></param>
		/// <param name="top"></param>
		/// <param name="right"></param>
		/// <param name="bottom"></param>
		/// <param name="bRestart"></param>
		/// <param name="pnState"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlRTFDisplay(SalNumber hRTFObj, SalNumber hDC, ref SalNumber left, ref SalNumber top, ref SalNumber right, ref SalNumber bottom, SalNumber bRestart, ref SalNumber pnState, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hRTFObj;
				int param2 = (int)hDC;
				int param3 = (int)left;
				int param4 = (int)top;
				int param5 = (int)right;
				int param6 = (int)bottom;
				int param7 = (int)bRestart;
				int param8 = (int)pnState;
				returnValue = _Interface.LlRTFDisplay(param1, param2, ref param3, ref param4, ref param5, ref param6, param7, ref param8);
				left = param3;
				top = param4;
				right = param5;
				bottom = param6;
				pnState = param8;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hStg"></param>
		/// <param name="sDestFilename"></param>
		/// <param name="sFormat"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlStgsysConvert(SalNumber hStg, SalString sDestFilename, SalString sFormat, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hStg;
				string param2 = (string)sDestFilename;
				string param3 = (string)sFormat;
				returnValue = _Interface.LlStgsysConvert(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sParam"></param>
		/// <param name="sValue"></param>
		/// <param name="nFlags"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlSetDefaultProjectParameter(SalString sParam, SalString sValue, SalNumber nFlags, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sParam;
				string param2 = (string)sValue;
				int param3 = (int)nFlags;
				returnValue = _Interface.LlSetDefaultProjectParameter(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWndParent"></param>
		/// <param name="sSubKey"></param>
		/// <param name="nFlags"></param>
		/// <param name="nLanguage">Important: this is one of the ListLabel_LlLanguageConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LsMailConfigurationDialog(SalNumber hWndParent, SalString sSubKey, SalNumber nFlags, SalNumber nLanguage, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hWndParent;
				string param2 = (string)sSubKey;
				int param3 = (int)nFlags;
				int param4 = (int)nLanguage;
				returnValue = _Interface.LsMailConfigurationDialog(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sTableID"></param>
		/// <param name="sDisplayName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDbAddTable(SalString sTableID, SalString sDisplayName, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sTableID;
				string param2 = (string)sDisplayName;
				returnValue = _Interface.LlDbAddTable(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sTableID"></param>
		/// <param name="sParentTableID"></param>
		/// <param name="sRelationID"></param>
		/// <param name="sRelationDisplayName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDbAddTableRelation(SalString sTableID, SalString sParentTableID, SalString sRelationID, SalString sRelationDisplayName, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sTableID;
				string param2 = (string)sParentTableID;
				string param3 = (string)sRelationID;
				string param4 = (string)sRelationDisplayName;
				returnValue = _Interface.LlDbAddTableRelation(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sTableID"></param>
		/// <param name="sSortOrderID"></param>
		/// <param name="sSortOrderDisplayName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDbAddTableSortOrder(SalString sTableID, SalString sSortOrderID, SalString sSortOrderDisplayName, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sTableID;
				string param2 = (string)sSortOrderID;
				string param3 = (string)sSortOrderDisplayName;
				returnValue = _Interface.LlDbAddTableSortOrder(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sTableID"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDbSetMasterTable(SalString sTableID, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sTableID;
				returnValue = _Interface.LlDbSetMasterTable(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="psTableID"></param>
		/// <param name="bCompletePath"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintDbGetCurrentTable(ref SalString psTableID, SalNumber bCompletePath, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)psTableID;
				int param2 = (int)bCompletePath;
				returnValue = _Interface.LlPrintDbGetCurrentTable(ref param1, param2);
				psTableID = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="psSortOrderID"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintDbGetCurrentTableSortOrder(ref SalString psSortOrderID, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)psSortOrderID;
				returnValue = _Interface.LlPrintDbGetCurrentTableSortOrder(ref param1);
				psSortOrderID = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="psRelationID"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintDbGetCurrentTableRelation(ref SalString psRelationID, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)psRelationID;
				returnValue = _Interface.LlPrintDbGetCurrentTableRelation(ref param1);
				psRelationID = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintDbGetRootTableCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlPrintDbGetRootTableCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sParam"></param>
		/// <param name="sValue"></param>
		/// <param name="nFlags"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintSetProjectParameter(SalString sParam, SalString sValue, SalNumber nFlags, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sParam;
				string param2 = (string)sValue;
				int param3 = (int)nFlags;
				returnValue = _Interface.LlPrintSetProjectParameter(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sParam"></param>
		/// <param name="bEvaluated"></param>
		/// <param name="psValue"></param>
		/// <param name="pnFlags"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlPrintGetProjectParameter(SalString sParam, SalNumber bEvaluated, ref SalString psValue, ref SalNumber pnFlags, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sParam;
				int param2 = (int)bEvaluated;
				string param3 = (string)psValue;
				int param4 = (int)pnFlags;
				returnValue = _Interface.LlPrintGetProjectParameter(param1, param2, ref param3, ref param4);
				psValue = param3;
				pnFlags = param4;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sParam"></param>
		/// <param name="psValue"></param>
		/// <param name="pnFlags"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlGetDefaultProjectParameter(SalString sParam, ref SalString psValue, ref SalNumber pnFlags, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sParam;
				string param2 = (string)psValue;
				int param3 = (int)pnFlags;
				returnValue = _Interface.LlGetDefaultProjectParameter(param1, ref param2, ref param3);
				psValue = param2;
				pnFlags = param3;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sObject"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDesignerProhibitEditingObject(SalString sObject, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sObject;
				returnValue = _Interface.LlDesignerProhibitEditingObject(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nLanguage"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LsMailJobOpen(SalNumber nLanguage, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nLanguage;
				returnValue = _Interface.LsMailJobOpen(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hMailJob"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LsMailJobClose(SalNumber hMailJob, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hMailJob;
				returnValue = _Interface.LsMailJobClose(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hMailJob"></param>
		/// <param name="sKey"></param>
		/// <param name="sValue"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LsMailSetOptionString(SalNumber hMailJob, SalString sKey, SalString sValue, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hMailJob;
				string param2 = (string)sKey;
				string param3 = (string)sValue;
				returnValue = _Interface.LsMailSetOptionString(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hMailJob"></param>
		/// <param name="hWndParent"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LsMailSendFile(SalNumber hMailJob, SalNumber hWndParent, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hMailJob;
				int param2 = (int)hWndParent;
				returnValue = _Interface.LsMailSendFile(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sProjectName"></param>
		/// <param name="psBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlGetUsedIdentifiers(SalString sProjectName, ref SalString psBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sProjectName;
				string param2 = (string)psBuffer;
				returnValue = _Interface.LlGetUsedIdentifiers(param1, ref param2);
				psBuffer = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nDictionaryType">Important: this is one of the ListLabel_LlDictionaryConstants constants</param>
		/// <param name="sName"></param>
		/// <param name="sNameTranslated"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDictionaryAdd(SalNumber nDictionaryType, SalString sName, SalString sNameTranslated, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nDictionaryType;
				string param2 = (string)sName;
				string param3 = (string)sNameTranslated;
				returnValue = _Interface.LlDictionaryAdd(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDictionariesClear(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlDictionariesClear();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phDOMObj"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDomGetProject(ref SalNumber phDOMObj, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)phDOMObj;
				returnValue = _Interface.LlDomGetProject(ref param1);
				phDOMObj = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hDOMObj"></param>
		/// <param name="sName"></param>
		/// <param name="psValue"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDomGetProperty(SalNumber hDOMObj, SalString sName, ref SalString psValue, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hDOMObj;
				string param2 = (string)sName;
				string param3 = (string)psValue;
				returnValue = _Interface.LlDomGetProperty(param1, param2, ref param3);
				psValue = param3;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hDOMObj"></param>
		/// <param name="sName"></param>
		/// <param name="sValue"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDomSetProperty(SalNumber hDOMObj, SalString sName, SalString sValue, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hDOMObj;
				string param2 = (string)sName;
				string param3 = (string)sValue;
				returnValue = _Interface.LlDomSetProperty(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hDOMObj"></param>
		/// <param name="sName"></param>
		/// <param name="phDOMObj"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDomGetObject(SalNumber hDOMObj, SalString sName, ref SalNumber phDOMObj, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hDOMObj;
				string param2 = (string)sName;
				int param3 = (int)phDOMObj;
				returnValue = _Interface.LlDomGetObject(param1, param2, ref param3);
				phDOMObj = param3;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hDOMObj"></param>
		/// <param name="nPosition"></param>
		/// <param name="phDOMObj"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDomGetSubobject(SalNumber hDOMObj, SalNumber nPosition, ref SalNumber phDOMObj, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hDOMObj;
				int param2 = (int)nPosition;
				int param3 = (int)phDOMObj;
				returnValue = _Interface.LlDomGetSubobject(param1, param2, ref param3);
				phDOMObj = param3;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hDOMObj"></param>
		/// <param name="nPosition"></param>
		/// <param name="sType"></param>
		/// <param name="phDOMObj"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDomCreateSubobject(SalNumber hDOMObj, SalNumber nPosition, SalString sType, ref SalNumber phDOMObj, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hDOMObj;
				int param2 = (int)nPosition;
				string param3 = (string)sType;
				int param4 = (int)phDOMObj;
				returnValue = _Interface.LlDomCreateSubobject(param1, param2, param3, ref param4);
				phDOMObj = param4;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hDOMObj"></param>
		/// <param name="nPosition"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDomDeleteSubobject(SalNumber hDOMObj, SalNumber nPosition, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hDOMObj;
				int param2 = (int)nPosition;
				returnValue = _Interface.LlDomDeleteSubobject(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nObjType">Important: this is one of the ListLabel_LlProjectConstants constants</param>
		/// <param name="sProjectName"></param>
		/// <param name="nOpenMode"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlProjectOpen(SalNumber nObjType, SalString sProjectName, SalNumber nOpenMode, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nObjType;
				string param2 = (string)sProjectName;
				int param3 = (int)nOpenMode;
				returnValue = _Interface.LlProjectOpen(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sProjectName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlProjectSave(SalString sProjectName, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sProjectName;
				returnValue = _Interface.LlProjectSave(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlProjectClose(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlProjectClose();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWndControl"></param>
		/// <param name="nFlags"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlAssociatePreviewControl(SalNumber hWndControl, SalNumber nFlags, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hWndControl;
				int param2 = (int)nFlags;
				returnValue = _Interface.LlAssociatePreviewControl(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nErrorCode"></param>
		/// <param name="psErrorText"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlGetErrortext(SalNumber nErrorCode, ref SalString psErrorText, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nErrorCode;
				string param2 = (string)psErrorText;
				returnValue = _Interface.LlGetErrortext(param1, ref param2);
				psErrorText = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hDOMObj"></param>
		/// <param name="nCount"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDomGetSubobjectCount(SalNumber hDOMObj, ref SalNumber nCount, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hDOMObj;
				int param2 = (int)nCount;
				returnValue = _Interface.LlDomGetSubobjectCount(param1, ref param2);
				nCount = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nMenuID"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDesignerInvokeAction(SalNumber nMenuID, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nMenuID;
				returnValue = _Interface.LlDesignerInvokeAction(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDesignerRefreshWorkspace(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LlDesignerRefreshWorkspace();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFileName"></param>
		/// <param name="nFlags"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDesignerFileOpen(SalString sFileName, SalNumber nFlags, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFileName;
				int param2 = (int)nFlags;
				returnValue = _Interface.LlDesignerFileOpen(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nFlags"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDesignerFileSave(SalNumber nFlags, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nFlags;
				returnValue = _Interface.LlDesignerFileSave(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nID"></param>
		/// <param name="nFlags"></param>
		/// <param name="sMenuText"></param>
		/// <param name="sMenuHierarchy"></param>
		/// <param name="sTooltipText"></param>
		/// <param name="nIcon"></param>
		/// <param name="nReserved"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDesignerAddAction(SalNumber nID, SalNumber nFlags, SalString sMenuText, SalString sMenuHierarchy, SalString sTooltipText, SalNumber nIcon, SalNumber nReserved, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nID;
				int param2 = (int)nFlags;
				string param3 = (string)sMenuText;
				string param4 = (string)sMenuHierarchy;
				string param5 = (string)sTooltipText;
				int param6 = (int)nIcon;
				int param7 = (int)nReserved;
				returnValue = _Interface.LlDesignerAddAction(param1, param2, param3, param4, param5, param6, param7);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nIndex"></param>
		/// <param name="psBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDesignerGetOptionString(SalNumber nIndex, ref SalString psBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nIndex;
				string param2 = (string)psBuffer;
				returnValue = _Interface.LlDesignerGetOptionString(param1, ref param2);
				psBuffer = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nIndex"></param>
		/// <param name="sBuffer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDesignerSetOptionString(SalNumber nIndex, SalString sBuffer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nIndex;
				string param2 = (string)sBuffer;
				returnValue = _Interface.LlDesignerSetOptionString(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sProjectName"></param>
		/// <param name="sParam"></param>
		/// <param name="psValue"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlGetProjectParameter(SalString sProjectName, SalString sParam, ref SalString psValue, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sProjectName;
				string param2 = (string)sParam;
				string param3 = (string)psValue;
				returnValue = _Interface.LlGetProjectParameter(param1, param2, ref param3);
				psValue = param3;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sTableID"></param>
		/// <param name="sParentTableID"></param>
		/// <param name="sRelationID"></param>
		/// <param name="sRelationDisplayName"></param>
		/// <param name="sKeyField"></param>
		/// <param name="sParentKeyField"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDbAddTableRelationEx(SalString sTableID, SalString sParentTableID, SalString sRelationID, SalString sRelationDisplayName, SalString sKeyField, SalString sParentKeyField, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sTableID;
				string param2 = (string)sParentTableID;
				string param3 = (string)sRelationID;
				string param4 = (string)sRelationDisplayName;
				string param5 = (string)sKeyField;
				string param6 = (string)sParentKeyField;
				returnValue = _Interface.LlDbAddTableRelationEx(param1, param2, param3, param4, param5, param6);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sTableID"></param>
		/// <param name="sSortOrderID"></param>
		/// <param name="sSortOrderDisplayName"></param>
		/// <param name="sField"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDbAddTableSortOrderEx(SalString sTableID, SalString sSortOrderID, SalString sSortOrderDisplayName, SalString sField, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sTableID;
				string param2 = (string)sSortOrderID;
				string param3 = (string)sSortOrderDisplayName;
				string param4 = (string)sField;
				returnValue = _Interface.LlDbAddTableSortOrderEx(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nLCID"></param>
		/// <param name="sKey"></param>
		/// <param name="sValue"></param>
		/// <param name="nType">Important: this is one of the ListLabel_LlDictionaryTypeConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlLocAddDictionaryEntry(SalNumber nLCID, SalString sKey, SalString sValue, SalNumber nType, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nLCID;
				string param2 = (string)sKey;
				string param3 = (string)sValue;
				int param4 = (int)nType;
				returnValue = _Interface.LlLocAddDictionaryEntry(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nLCID"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlLocAddDesignLCID(SalNumber nLCID, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nLCID;
				returnValue = _Interface.LlLocAddDesignLCID(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sTableID"></param>
		/// <param name="sDisplayName"></param>
		/// <param name="nOptions"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlDbAddTableEx(SalString sTableID, SalString sDisplayName, SalNumber nOptions, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sTableID;
				string param2 = (string)sDisplayName;
				int param3 = (int)nOptions;
				returnValue = _Interface.LlDbAddTableEx(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="pStream"></param>
		/// <param name="nFlags"></param>
		/// <param name="bPacked"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlJobStateSave(ref SalNumber pStream, SalNumber nFlags, SalNumber bPacked, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)pStream;
				int param2 = (int)nFlags;
				int param3 = (int)bPacked;
				returnValue = _Interface.LlJobStateSave(ref param1, param2, param3);
				pStream = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="pStream"></param>
		/// <param name="nFlags"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LlJobStateRestore(ref SalNumber pStream, SalNumber nFlags, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)pStream;
				int param2 = (int)nFlags;
				returnValue = _Interface.LlJobStateRestore(ref param1, param2);
				pStream = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean AboutBox()
		{
			#region Actions
			try
			{
				_Interface.AboutBox();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hJob"></param>
		/// <returns></returns>
		public SalBoolean PropSethJob(SalNumber hJob)
		{
			#region Actions
			try
			{
				int param1 = (int)hJob;
				_Interface.hJob = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGethJob(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.hJob;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Reply"></param>
		/// <returns></returns>
		public SalBoolean PropSetReply(SalNumber Reply)
		{
			#region Actions
			try
			{
				int param1 = (int)Reply;
				_Interface.Reply = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetReply(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Reply;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Language">Important: this is one of the ListLabel_LlLanguageConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetLanguage(SalNumber Language)
		{
			#region Actions
			try
			{
				int param1 = (int)Language;
				_Interface.Language = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the ListLabel_LlLanguageConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetLanguage(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Language;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="DialogMode">Important: this is one of the ListLabel_LlDialogModeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetDialogMode(SalNumber DialogMode)
		{
			#region Actions
			try
			{
				int param1 = (int)DialogMode;
				_Interface.DialogMode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the ListLabel_LlDialogModeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetDialogMode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.DialogMode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="DialogFrame">Important: this is one of the ListLabel_LlDialogFrameConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetDialogFrame(SalNumber DialogFrame)
		{
			#region Actions
			try
			{
				int param1 = (int)DialogFrame;
				_Interface.DialogFrame = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the ListLabel_LlDialogFrameConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetDialogFrame(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.DialogFrame;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Dialog3DText">Important: this is one of the ListLabel_LlDialog3DTextConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetDialog3DText(SalNumber Dialog3DText)
		{
			#region Actions
			try
			{
				int param1 = (int)Dialog3DText;
				_Interface.Dialog3DText = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the ListLabel_LlDialog3DTextConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetDialog3DText(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Dialog3DText;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="DialogButtons">Important: this is one of the ListLabel_LlDialogBitmapButtonConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetDialogButtons(SalNumber DialogButtons)
		{
			#region Actions
			try
			{
				int param1 = (int)DialogButtons;
				_Interface.DialogButtons = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the ListLabel_LlDialogBitmapButtonConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetDialogButtons(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.DialogButtons;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="EnablePageCallback"></param>
		/// <returns></returns>
		public SalBoolean PropSetEnablePageCallback(SalBoolean EnablePageCallback)
		{
			#region Actions
			try
			{
				bool param1 = (bool)EnablePageCallback;
				_Interface.EnablePageCallback = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetEnablePageCallback(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.EnablePageCallback;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="EnableProjectCallback"></param>
		/// <returns></returns>
		public SalBoolean PropSetEnableProjectCallback(SalBoolean EnableProjectCallback)
		{
			#region Actions
			try
			{
				bool param1 = (bool)EnableProjectCallback;
				_Interface.EnableProjectCallback = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetEnableProjectCallback(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.EnableProjectCallback;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="EnableObjectCallback"></param>
		/// <returns></returns>
		public SalBoolean PropSetEnableObjectCallback(SalBoolean EnableObjectCallback)
		{
			#region Actions
			try
			{
				bool param1 = (bool)EnableObjectCallback;
				_Interface.EnableObjectCallback = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetEnableObjectCallback(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.EnableObjectCallback;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="NewExpressions">Important: this is one of the ListLabel_LlNewExpressionsConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetNewExpressions(SalNumber NewExpressions)
		{
			#region Actions
			try
			{
				int param1 = (int)NewExpressions;
				_Interface.NewExpressions = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the ListLabel_LlNewExpressionsConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetNewExpressions(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.NewExpressions;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="EnableHelpCallback"></param>
		/// <returns></returns>
		public SalBoolean PropSetEnableHelpCallback(SalBoolean EnableHelpCallback)
		{
			#region Actions
			try
			{
				bool param1 = (bool)EnableHelpCallback;
				_Interface.EnableHelpCallback = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetEnableHelpCallback(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.EnableHelpCallback;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="OnlyOneTable"></param>
		/// <returns></returns>
		public SalBoolean PropSetOnlyOneTable(SalBoolean OnlyOneTable)
		{
			#region Actions
			try
			{
				bool param1 = (bool)OnlyOneTable;
				_Interface.OnlyOneTable = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetOnlyOneTable(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.OnlyOneTable;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="MultipleTableLines"></param>
		/// <returns></returns>
		public SalBoolean PropSetMultipleTableLines(SalBoolean MultipleTableLines)
		{
			#region Actions
			try
			{
				bool param1 = (bool)MultipleTableLines;
				_Interface.MultipleTableLines = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetMultipleTableLines(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.MultipleTableLines;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableColoring">Important: this is one of the ListLabel_LlTableColoringConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetTableColoring(SalNumber TableColoring)
		{
			#region Actions
			try
			{
				int param1 = (int)TableColoring;
				_Interface.TableColoring = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the ListLabel_LlTableColoringConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetTableColoring(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TableColoring;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TabStops">Important: this is one of the ListLabel_LlTabStopConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetTabStops(SalNumber TabStops)
		{
			#region Actions
			try
			{
				int param1 = (int)TabStops;
				_Interface.TabStops = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the ListLabel_LlTabStopConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetTabStops(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TabStops;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="SortVariables"></param>
		/// <returns></returns>
		public SalBoolean PropSetSortVariables(SalBoolean SortVariables)
		{
			#region Actions
			try
			{
				bool param1 = (bool)SortVariables;
				_Interface.SortVariables = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSortVariables(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SortVariables;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="HelpAvailable"></param>
		/// <returns></returns>
		public SalBoolean PropSetHelpAvailable(SalBoolean HelpAvailable)
		{
			#region Actions
			try
			{
				bool param1 = (bool)HelpAvailable;
				_Interface.HelpAvailable = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetHelpAvailable(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.HelpAvailable;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="SupportPageBreak"></param>
		/// <returns></returns>
		public SalBoolean PropSetSupportPageBreak(SalBoolean SupportPageBreak)
		{
			#region Actions
			try
			{
				bool param1 = (bool)SupportPageBreak;
				_Interface.SupportPageBreak = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSupportPageBreak(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SupportPageBreak;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ShowPredefVars"></param>
		/// <returns></returns>
		public SalBoolean PropSetShowPredefVars(SalBoolean ShowPredefVars)
		{
			#region Actions
			try
			{
				bool param1 = (bool)ShowPredefVars;
				_Interface.ShowPredefVars = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetShowPredefVars(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ShowPredefVars;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="UseHostprinter"></param>
		/// <returns></returns>
		public SalBoolean PropSetUseHostprinter(SalBoolean UseHostprinter)
		{
			#region Actions
			try
			{
				bool param1 = (bool)UseHostprinter;
				_Interface.UseHostprinter = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetUseHostprinter(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.UseHostprinter;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="EMFResolution"></param>
		/// <returns></returns>
		public SalBoolean PropSetEMFResolution(SalNumber EMFResolution)
		{
			#region Actions
			try
			{
				int param1 = (int)EMFResolution;
				_Interface.EMFResolution = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetEMFResolution(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.EMFResolution;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="AddVarsToFields"></param>
		/// <returns></returns>
		public SalBoolean PropSetAddVarsToFields(SalBoolean AddVarsToFields)
		{
			#region Actions
			try
			{
				bool param1 = (bool)AddVarsToFields;
				_Interface.AddVarsToFields = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetAddVarsToFields(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.AddVarsToFields;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ConvertCRLF"></param>
		/// <returns></returns>
		public SalBoolean PropSetConvertCRLF(SalBoolean ConvertCRLF)
		{
			#region Actions
			try
			{
				bool param1 = (bool)ConvertCRLF;
				_Interface.ConvertCRLF = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetConvertCRLF(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ConvertCRLF;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="WizFileNew"></param>
		/// <returns></returns>
		public SalBoolean PropSetWizFileNew(SalBoolean WizFileNew)
		{
			#region Actions
			try
			{
				bool param1 = (bool)WizFileNew;
				_Interface.WizFileNew = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetWizFileNew(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.WizFileNew;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="VarsCaseSensitive"></param>
		/// <returns></returns>
		public SalBoolean PropSetVarsCaseSensitive(SalBoolean VarsCaseSensitive)
		{
			#region Actions
			try
			{
				bool param1 = (bool)VarsCaseSensitive;
				_Interface.VarsCaseSensitive = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetVarsCaseSensitive(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.VarsCaseSensitive;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="RealTime"></param>
		/// <returns></returns>
		public SalBoolean PropSetRealTime(SalBoolean RealTime)
		{
			#region Actions
			try
			{
				bool param1 = (bool)RealTime;
				_Interface.RealTime = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetRealTime(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.RealTime;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="SpaceOptimization"></param>
		/// <returns></returns>
		public SalBoolean PropSetSpaceOptimization(SalBoolean SpaceOptimization)
		{
			#region Actions
			try
			{
				bool param1 = (bool)SpaceOptimization;
				_Interface.SpaceOptimization = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSpaceOptimization(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SpaceOptimization;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="CompressStorage"></param>
		/// <returns></returns>
		public SalBoolean PropSetCompressStorage(SalBoolean CompressStorage)
		{
			#region Actions
			try
			{
				bool param1 = (bool)CompressStorage;
				_Interface.CompressStorage = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetCompressStorage(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.CompressStorage;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="NoParameterCheck"></param>
		/// <returns></returns>
		public SalBoolean PropSetNoParameterCheck(SalBoolean NoParameterCheck)
		{
			#region Actions
			try
			{
				bool param1 = (bool)NoParameterCheck;
				_Interface.NoParameterCheck = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetNoParameterCheck(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.NoParameterCheck;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="NoNoTableCheck"></param>
		/// <returns></returns>
		public SalBoolean PropSetNoNoTableCheck(SalBoolean NoNoTableCheck)
		{
			#region Actions
			try
			{
				bool param1 = (bool)NoNoTableCheck;
				_Interface.NoNoTableCheck = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetNoNoTableCheck(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.NoNoTableCheck;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PreviewZoomPerc"></param>
		/// <returns></returns>
		public SalBoolean PropSetPreviewZoomPerc(SalNumber PreviewZoomPerc)
		{
			#region Actions
			try
			{
				int param1 = (int)PreviewZoomPerc;
				_Interface.PreviewZoomPerc = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPreviewZoomPerc(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PreviewZoomPerc;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PreviewRectLeft"></param>
		/// <returns></returns>
		public SalBoolean PropSetPreviewRectLeft(SalNumber PreviewRectLeft)
		{
			#region Actions
			try
			{
				int param1 = (int)PreviewRectLeft;
				_Interface.PreviewRectLeft = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPreviewRectLeft(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PreviewRectLeft;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PreviewRectTop"></param>
		/// <returns></returns>
		public SalBoolean PropSetPreviewRectTop(SalNumber PreviewRectTop)
		{
			#region Actions
			try
			{
				int param1 = (int)PreviewRectTop;
				_Interface.PreviewRectTop = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPreviewRectTop(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PreviewRectTop;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PreviewRectWidth"></param>
		/// <returns></returns>
		public SalBoolean PropSetPreviewRectWidth(SalNumber PreviewRectWidth)
		{
			#region Actions
			try
			{
				int param1 = (int)PreviewRectWidth;
				_Interface.PreviewRectWidth = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPreviewRectWidth(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PreviewRectWidth;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PreviewRectHeight"></param>
		/// <returns></returns>
		public SalBoolean PropSetPreviewRectHeight(SalNumber PreviewRectHeight)
		{
			#region Actions
			try
			{
				int param1 = (int)PreviewRectHeight;
				_Interface.PreviewRectHeight = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPreviewRectHeight(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PreviewRectHeight;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Metric">Important: this is one of the ListLabel_LlMetricConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetMetric(SalNumber Metric)
		{
			#region Actions
			try
			{
				int param1 = (int)Metric;
				_Interface.Metric = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the ListLabel_LlMetricConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetMetric(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Metric;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TabRepresentationCode"></param>
		/// <returns></returns>
		public SalBoolean PropSetTabRepresentationCode(SalNumber TabRepresentationCode)
		{
			#region Actions
			try
			{
				short param1 = (short)TabRepresentationCode;
				_Interface.TabRepresentationCode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTabRepresentationCode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TabRepresentationCode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="RetRepresentationCode"></param>
		/// <returns></returns>
		public SalBoolean PropSetRetRepresentationCode(SalNumber RetRepresentationCode)
		{
			#region Actions
			try
			{
				short param1 = (short)RetRepresentationCode;
				_Interface.RetRepresentationCode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetRetRepresentationCode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.RetRepresentationCode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="StorageSystem">Important: this is one of the ListLabel_LlStorageSystemConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetStorageSystem(SalNumber StorageSystem)
		{
			#region Actions
			try
			{
				int param1 = (int)StorageSystem;
				_Interface.StorageSystem = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the ListLabel_LlStorageSystemConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetStorageSystem(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.StorageSystem;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="AutoMultipage"></param>
		/// <returns></returns>
		public SalBoolean PropSetAutoMultipage(SalBoolean AutoMultipage)
		{
			#region Actions
			try
			{
				bool param1 = (bool)AutoMultipage;
				_Interface.AutoMultipage = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetAutoMultipage(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.AutoMultipage;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="UseBarcodeSizes"></param>
		/// <returns></returns>
		public SalBoolean PropSetUseBarcodeSizes(SalBoolean UseBarcodeSizes)
		{
			#region Actions
			try
			{
				bool param1 = (bool)UseBarcodeSizes;
				_Interface.UseBarcodeSizes = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetUseBarcodeSizes(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.UseBarcodeSizes;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="MaxRTFVersion"></param>
		/// <returns></returns>
		public SalBoolean PropSetMaxRTFVersion(SalNumber MaxRTFVersion)
		{
			#region Actions
			try
			{
				short param1 = (short)MaxRTFVersion;
				_Interface.MaxRTFVersion = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetMaxRTFVersion(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.MaxRTFVersion;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="DelayTableHeader"></param>
		/// <returns></returns>
		public SalBoolean PropSetDelayTableHeader(SalBoolean DelayTableHeader)
		{
			#region Actions
			try
			{
				bool param1 = (bool)DelayTableHeader;
				_Interface.DelayTableHeader = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetDelayTableHeader(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.DelayTableHeader;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="OfnDialogExplorer"></param>
		/// <returns></returns>
		public SalBoolean PropSetOfnDialogExplorer(SalBoolean OfnDialogExplorer)
		{
			#region Actions
			try
			{
				bool param1 = (bool)OfnDialogExplorer;
				_Interface.OfnDialogExplorer = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetOfnDialogExplorer(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.OfnDialogExplorer;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="CreateInfo"></param>
		/// <returns></returns>
		public SalBoolean PropSetCreateInfo(SalBoolean CreateInfo)
		{
			#region Actions
			try
			{
				bool param1 = (bool)CreateInfo;
				_Interface.CreateInfo = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetCreateInfo(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.CreateInfo;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="XlatVarNames"></param>
		/// <returns></returns>
		public SalBoolean PropSetXlatVarNames(SalBoolean XlatVarNames)
		{
			#region Actions
			try
			{
				bool param1 = (bool)XlatVarNames;
				_Interface.XlatVarNames = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetXlatVarNames(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.XlatVarNames;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PhantomSpaceRepresentationCode"></param>
		/// <returns></returns>
		public SalBoolean PropSetPhantomSpaceRepresentationCode(SalNumber PhantomSpaceRepresentationCode)
		{
			#region Actions
			try
			{
				short param1 = (short)PhantomSpaceRepresentationCode;
				_Interface.PhantomSpaceRepresentationCode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPhantomSpaceRepresentationCode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PhantomSpaceRepresentationCode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="LockNextCharRepresentationCode"></param>
		/// <returns></returns>
		public SalBoolean PropSetLockNextCharRepresentationCode(SalNumber LockNextCharRepresentationCode)
		{
			#region Actions
			try
			{
				short param1 = (short)LockNextCharRepresentationCode;
				_Interface.LockNextCharRepresentationCode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetLockNextCharRepresentationCode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LockNextCharRepresentationCode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ExprSepRepresentationCode"></param>
		/// <returns></returns>
		public SalBoolean PropSetExprSepRepresentationCode(SalNumber ExprSepRepresentationCode)
		{
			#region Actions
			try
			{
				short param1 = (short)ExprSepRepresentationCode;
				_Interface.ExprSepRepresentationCode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetExprSepRepresentationCode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ExprSepRepresentationCode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TextQuoteRepresentationCode"></param>
		/// <returns></returns>
		public SalBoolean PropSetTextQuoteRepresentationCode(SalNumber TextQuoteRepresentationCode)
		{
			#region Actions
			try
			{
				short param1 = (short)TextQuoteRepresentationCode;
				_Interface.TextQuoteRepresentationCode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTextQuoteRepresentationCode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TextQuoteRepresentationCode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="InterCharSpacing"></param>
		/// <returns></returns>
		public SalBoolean PropSetInterCharSpacing(SalBoolean InterCharSpacing)
		{
			#region Actions
			try
			{
				bool param1 = (bool)InterCharSpacing;
				_Interface.InterCharSpacing = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetInterCharSpacing(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.InterCharSpacing;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="IncludeFontDescent"></param>
		/// <returns></returns>
		public SalBoolean PropSetIncludeFontDescent(SalBoolean IncludeFontDescent)
		{
			#region Actions
			try
			{
				bool param1 = (bool)IncludeFontDescent;
				_Interface.IncludeFontDescent = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetIncludeFontDescent(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.IncludeFontDescent;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Dummy6"></param>
		/// <returns></returns>
		public SalBoolean PropSetDummy6(SalBoolean Dummy6)
		{
			#region Actions
			try
			{
				bool param1 = (bool)Dummy6;
				_Interface.Dummy6 = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetDummy6(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Dummy6;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="UseChartFields"></param>
		/// <returns></returns>
		public SalBoolean PropSetUseChartFields(SalBoolean UseChartFields)
		{
			#region Actions
			try
			{
				bool param1 = (bool)UseChartFields;
				_Interface.UseChartFields = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetUseChartFields(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.UseChartFields;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Dummy7"></param>
		/// <returns></returns>
		public SalBoolean PropSetDummy7(SalBoolean Dummy7)
		{
			#region Actions
			try
			{
				bool param1 = (bool)Dummy7;
				_Interface.Dummy7 = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetDummy7(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Dummy7;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ProjectPassword"></param>
		/// <returns></returns>
		public SalBoolean PropSetProjectPassword(SalString ProjectPassword)
		{
			#region Actions
			try
			{
				string param1 = (string)ProjectPassword;
				_Interface.ProjectPassword = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetProjectPassword(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ProjectPassword;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="LicensingInfo"></param>
		/// <returns></returns>
		public SalBoolean PropSetLicensingInfo(SalString LicensingInfo)
		{
			#region Actions
			try
			{
				string param1 = (string)LicensingInfo;
				_Interface.LicensingInfo = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetLicensingInfo(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LicensingInfo;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="IncrementalPreview"></param>
		/// <returns></returns>
		public SalBoolean PropSetIncrementalPreview(SalBoolean IncrementalPreview)
		{
			#region Actions
			try
			{
				bool param1 = (bool)IncrementalPreview;
				_Interface.IncrementalPreview = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetIncrementalPreview(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.IncrementalPreview;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Dummy5"></param>
		/// <returns></returns>
		public SalBoolean PropSetDummy5(SalBoolean Dummy5)
		{
			#region Actions
			try
			{
				bool param1 = (bool)Dummy5;
				_Interface.Dummy5 = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetDummy5(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Dummy5;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Enabled"></param>
		/// <returns></returns>
		public SalBoolean PropSetEnabled(SalBoolean Enabled)
		{
			#region Actions
			try
			{
				bool param1 = (bool)Enabled;
				_Interface.Enabled = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetEnabled(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Enabled;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// This is the real COM interface declaration.
		/// </summary>
		[Guid("2213E281-16BC-101D-AFD4-040224009C18")]
		[InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch)]
		public interface COMInterface
		{
			int LlGetVersion(int nCmd);
			void LlSetDebug(int nFlags);
			int LlDefineField(string sVarName, string sContent);
			int LlDefineVariable(string sVarName, string sContent);
			int LlDefineFieldExt(string sVarName, string sContent, int nFieldType);
			int LlDefineVariableExt(string sVarName, string sContent, int nFieldType);
			void LlDefineFieldStart();
			void LlDefineVariableStart();
			int LlDefineSumVariable(string sVarName, string sContent);
			int LlDefineFieldExtHandle(string sVarName, int hContent, int nFieldType);
			int LlDefineVariableExtHandle(string sVarName, int hContent, int nFieldType);
			int LlDefineLayout(int hWnd, string sTitle, int nObjType, string sObjName);
			int LlPrint();
			int LlPrintAbort();
			int LlPrintFields();
			int LlPrintFieldsEnd();
			int LlPrintEnd(int nPages);
			int LlPrintGetCurrentPage();
			bool LlPrintCheckLineFit();
			int LlPrintGetItemsPerPage();
			int LlPrintGetItemsPerTable();
			int LlPrintGetRemItemsPerTable(string sField);
			int LlPreviewSetTempPath(string sPath);
			int LlPreviewDeleteFiles(string sObjName, string sPath);
			int LlPreviewDisplay(string sObjName, string sPath, int hWnd);
			int LlPreviewDisplayEx(string sObjName, string sPath, int hWnd, int nOptions);
			int LlSetOption(int nMode, int nValue);
			int LlPrinterSetup(int hWnd, int nObjType, string sObjName);
			int LlPrintSetBoxText(string sText, int nPercentage);
			int LlPrintIsVariableUsed(string sVarName);
			int LlPrintIsFieldUsed(string sFieldName);
			int LlPrintEnableObject(string sObjName, int bEnable);
			int LlPrintWillMatchFilter();
			int LlPrintDidMatchFilter();
			int LlPrintStart(int nObjType, string sObjName, int nPrintOptions);
			int LlPrintWithBoxStart(int nObjType, string sObjName, int nPrintOptions, int nBoxType, int hWnd, string sTitle);
			int LlPrintOptionsDialog(int hWnd, string sText);
			int LlSetPrinterDefaultsDir(string sDir);
			int LlAddCtlSupport(int hWnd, int nFlags, string sIniFile);
			int LlSetFileExtensions(int nObjType, string sObjectExt, string sPrinterExt, string sSketchExt);
			int LlSetPrinterToDefault(int nObjType, string sObjName);
			int LlPrintSetOption(int nIndex, int nValue);
			int LlPrintOptionsDialogTitle(int hWnd, string sTitle, string sText);
			int LlDefineSortOrderStart();
			int LlDefineSortOrder(string sIdentifier, string sText);
			int LlPrintGetSortOrder(ref string psBuffer);
			int LlDefineGrouping(string sSortorder, string sIdentifier, string sText);
			int LlPrintGetGrouping(ref string psBuffer);
			int LlGetOption(int nMode);
			int LlSetOptionString(int nIndex, string sBuffer);
			int LlGetOptionString(int nIndex, ref string psBuffer);
			int LlGetVariableContents(string sName, ref string psBuffer);
			int LlGetFieldContents(string sName, ref string psBuffer);
			int LlGetSumVariableContents(string sName, ref string psBuffer);
			int LlGetUserVariableContents(string sName, ref string psBuffer);
			int LlGetVariableType(string sName);
			int LlGetFieldType(string sName);
			int LlPrintGetOption(int nIndex);
			int LlPrintGetPrinterInfo(ref string psPrn, ref string psPort);
			int LlPrintGetFilterExpression(ref string psBuffer);
			int LlSelectFileDlg(int hWnd, int nObjType, ref string psObjName);
			int LlSelectFileDlgTitle(int hWnd, string sTitle, int nObjType, ref string psObjName);
			int LlPrintSelectOffset(int hWnd);
			int LlDesignerProhibitAction(int nMenuID);
			int LlExprParse(string sExprText, int bTablefields);
			int LlExprType(int nptrExpr);
			void LlExprError(ref string psBuffer);
			void LlExprFree(int nptrExpr);
			int LlExprEvaluate(int nptrExpr, ref string psBuffer);
			int LlDlgEditLineEx(int hWnd, ref string psBuffer, int nParaTypes, string sTitle, int bTable);
			int LlSetDecimalChar(int cDecPoint);
			int LlCreateSketch(int nObjType, string sObjName);
			int LlViewerProhibitAction(int nMenuID);
			int LlPrintCopyPrinterConfiguration(string sFileName, int nFunction);
			int LlStgsysStorageOpen(string sFileName, string sTempPath, int bReadOnly, int bOneJobTranslation);
			void LlStgsysStorageClose(int hStg);
			int LlStgsysGetAPIVersion(int hStg);
			int LlStgsysGetFileVersion(int hStg);
			int LlStgsysGetJobCount(int hStg);
			int LlStgsysGetPageCount(int hStg);
			int LlStgsysGetLastError(int hStg);
			int LlStgsysDeleteFiles(int hStg);
			int LlStgsysAppend(int hStg, int hStgToAppend);
			int LlStgsysSetJob(int hStg, int nJob);
			int LlStgsysGetFilename(int hStg, int nJob, int nFile, ref string psBuffer);
			int LlStgsysGetJobOptionValue(int hStg, int nOption);
			int LlStgsysGetPageOptionValue(int hStg, int nPageIndex, int nOption);
			int LlStgsysSetPageOptionString(int hStg, int nPageIndex, int nOption, string sBuffer);
			int LlStgsysGetPageOptionString(int hStg, int nPageIndex, int nOption, ref string psBuffer);
			int LlStgsysGetPageMetafile(int hStg, int nPageIndex);
			int LlStgsysGetPageMetafile16(int hStg, int nPageIndex);
			int LlStgsysDestroyMetafile(int hMF);
			int LlStgsysDrawPage(int hStg, int hDC, int hPrnDC, int bAskPrinter, int left, int top, int right, int bottom, int nPageIndex, int bFit);
			int LlPrintSetOptionString(int nIndex, string sBuffer);
			int LlPrintGetOptionString(int nIndex, ref string psBuffer);
			int Design(int nUserData, int hWnd, string sTitle, int nObjType, string sObjName, int bWithFileSelect);
			int Print(int nUserData, int nObjType, string sObjName, int bWithFileSelect, int nPrintOptions, int nBoxType, int hWnd, string sTitle, int bShowPrintOptionsDlg, string sTempPath);
			void LlDebugOutput(int nIdent, string sText);
			int LlEnumGetFirstVar(int nFlags);
			int LlEnumGetFirstField(int nFlags);
			int LlEnumGetNextEntry(int nPos, int nFlags);
			int LlEnumGetEntry(int nPos, ref string psName, ref string psContents, ref int pHandle, int pnType);
			int LlXGetParameter(int nExtensionType, string sExtensionName, string sKey, ref string psBuffer);
			int LlXSetParameter(int nExtensionType, string sExtensionName, string sKey, string sValue);
			int LlPrintResetObjectStates();
			int LlStgsysPrint(int hStg, string sPrinterName1, string sPrinterName2, int nStartPageIndex, int nEndPageIndex, int nCopies, int nFlags, string sMessage, int hWnd);
			int LlStgsysStoragePrint(string sFileName, string sTempPath, string sPrinterName1, string sPrinterName2, int nStartPageIndex, int nEndPageIndex, int nCopies, int nFlags, string sMessage, int hWnd);
			int LlPrintResetProjectState();
			int LlSetPrinterInPrinterFile(int nObjType, string sObjName, int nPrinter, string sPrinter, int pDevMode);
			int LlDesignerProhibitFunction(string sFunctionName);
			int LlDefineChartFieldExt(string sVarName, string sContent, int nFieldType);
			int LlDefineChartFieldStart();
			int LlPrintDeclareChartRow(int nFlags);
			int LlPrintIsChartFieldUsed(string sFieldName);
			int LlGetChartFieldContents(string sName, ref string psBuffer);
			int LlEnumGetFirstChartField(int nFlags);
			int LlPrintGetChartObjectCount(int nFlags);
			int LlRTFCreateObject();
			int LlRTFDeleteObject(int hRTFObj);
			int LlRTFSetText(int hRTFObj, string sText);
			int LlRTFGetTextLength(int hRTFObj, int nFlags);
			int LlRTFGetText(int hRTFObj, int nFlags, ref string psText);
			int LlRTFEditObject(int hRTFObj, int hWnd, int hPrnDC, int nProjectType, int bModal);
			int LlRTFCopyToClipboard(int hRTFObj);
			int LlPrintGetRemainingSpacePerTable(string sField, int nDimension);
			int LlRTFDisplay(int hRTFObj, int hDC, ref int left, ref int top, ref int right, ref int bottom, int bRestart, ref int pnState);
			int LlStgsysConvert(int hStg, string sDestFilename, string sFormat);
			int LlSetDefaultProjectParameter(string sParam, string sValue, int nFlags);
			int LsMailConfigurationDialog(int hWndParent, string sSubKey, int nFlags, int nLanguage);
			int LlDbAddTable(string sTableID, string sDisplayName);
			int LlDbAddTableRelation(string sTableID, string sParentTableID, string sRelationID, string sRelationDisplayName);
			int LlDbAddTableSortOrder(string sTableID, string sSortOrderID, string sSortOrderDisplayName);
			int LlDbSetMasterTable(string sTableID);
			int LlPrintDbGetCurrentTable(ref string psTableID, int bCompletePath);
			int LlPrintDbGetCurrentTableSortOrder(ref string psSortOrderID);
			int LlPrintDbGetCurrentTableRelation(ref string psRelationID);
			int LlPrintDbGetRootTableCount();
			int LlPrintSetProjectParameter(string sParam, string sValue, int nFlags);
			int LlPrintGetProjectParameter(string sParam, int bEvaluated, ref string psValue, ref int pnFlags);
			int LlGetDefaultProjectParameter(string sParam, ref string psValue, ref int pnFlags);
			int LlDesignerProhibitEditingObject(string sObject);
			int LsMailJobOpen(int nLanguage);
			int LsMailJobClose(int hMailJob);
			int LsMailSetOptionString(int hMailJob, string sKey, string sValue);
			int LsMailSendFile(int hMailJob, int hWndParent);
			int LlGetUsedIdentifiers(string sProjectName, ref string psBuffer);
			int LlDictionaryAdd(int nDictionaryType, string sName, string sNameTranslated);
			int LlDictionariesClear();
			int LlDomGetProject(ref int phDOMObj);
			int LlDomGetProperty(int hDOMObj, string sName, ref string psValue);
			int LlDomSetProperty(int hDOMObj, string sName, string sValue);
			int LlDomGetObject(int hDOMObj, string sName, ref int phDOMObj);
			int LlDomGetSubobject(int hDOMObj, int nPosition, ref int phDOMObj);
			int LlDomCreateSubobject(int hDOMObj, int nPosition, string sType, ref int phDOMObj);
			int LlDomDeleteSubobject(int hDOMObj, int nPosition);
			int LlProjectOpen(int nObjType, string sProjectName, int nOpenMode);
			int LlProjectSave(string sProjectName);
			int LlProjectClose();
			int LlAssociatePreviewControl(int hWndControl, int nFlags);
			int LlGetErrortext(int nErrorCode, ref string psErrorText);
			int LlDomGetSubobjectCount(int hDOMObj, ref int nCount);
			int LlDesignerInvokeAction(int nMenuID);
			int LlDesignerRefreshWorkspace();
			int LlDesignerFileOpen(string sFileName, int nFlags);
			int LlDesignerFileSave(int nFlags);
			int LlDesignerAddAction(int nID, int nFlags, string sMenuText, string sMenuHierarchy, string sTooltipText, int nIcon, int nReserved);
			int LlDesignerGetOptionString(int nIndex, ref string psBuffer);
			int LlDesignerSetOptionString(int nIndex, string sBuffer);
			int LlGetProjectParameter(string sProjectName, string sParam, ref string psValue);
			int LlDbAddTableRelationEx(string sTableID, string sParentTableID, string sRelationID, string sRelationDisplayName, string sKeyField, string sParentKeyField);
			int LlDbAddTableSortOrderEx(string sTableID, string sSortOrderID, string sSortOrderDisplayName, string sField);
			int LlLocAddDictionaryEntry(int nLCID, string sKey, string sValue, int nType);
			int LlLocAddDesignLCID(int nLCID);
			int LlDbAddTableEx(string sTableID, string sDisplayName, int nOptions);
			int LlJobStateSave(ref int pStream, int nFlags, int bPacked);
			int LlJobStateRestore(ref int pStream, int nFlags);
			void AboutBox();
			int hJob { get; set; }
			int Reply { get; set; }
			int Language { get; set; }
			int DialogMode { get; set; }
			int DialogFrame { get; set; }
			int Dialog3DText { get; set; }
			int DialogButtons { get; set; }
			bool EnablePageCallback { get; set; }
			bool EnableProjectCallback { get; set; }
			bool EnableObjectCallback { get; set; }
			int NewExpressions { get; set; }
			bool EnableHelpCallback { get; set; }
			bool OnlyOneTable { get; set; }
			bool MultipleTableLines { get; set; }
			int TableColoring { get; set; }
			int TabStops { get; set; }
			bool SortVariables { get; set; }
			bool HelpAvailable { get; set; }
			bool SupportPageBreak { get; set; }
			bool ShowPredefVars { get; set; }
			bool UseHostprinter { get; set; }
			int EMFResolution { get; set; }
			bool AddVarsToFields { get; set; }
			bool ConvertCRLF { get; set; }
			bool WizFileNew { get; set; }
			bool VarsCaseSensitive { get; set; }
			bool RealTime { get; set; }
			bool SpaceOptimization { get; set; }
			bool CompressStorage { get; set; }
			bool NoParameterCheck { get; set; }
			bool NoNoTableCheck { get; set; }
			int PreviewZoomPerc { get; set; }
			int PreviewRectLeft { get; set; }
			int PreviewRectTop { get; set; }
			int PreviewRectWidth { get; set; }
			int PreviewRectHeight { get; set; }
			int Metric { get; set; }
			int TabRepresentationCode { get; set; }
			int RetRepresentationCode { get; set; }
			int StorageSystem { get; set; }
			bool AutoMultipage { get; set; }
			bool UseBarcodeSizes { get; set; }
			int MaxRTFVersion { get; set; }
			bool DelayTableHeader { get; set; }
			bool OfnDialogExplorer { get; set; }
			bool CreateInfo { get; set; }
			bool XlatVarNames { get; set; }
			int PhantomSpaceRepresentationCode { get; set; }
			int LockNextCharRepresentationCode { get; set; }
			int ExprSepRepresentationCode { get; set; }
			int TextQuoteRepresentationCode { get; set; }
			bool InterCharSpacing { get; set; }
			bool IncludeFontDescent { get; set; }
			bool Dummy6 { get; set; }
			bool UseChartFields { get; set; }
			bool Dummy7 { get; set; }
			string ProjectPassword { get; set; }
			string LicensingInfo { get; set; }
			bool IncrementalPreview { get; set; }
			bool Dummy5 { get; set; }
			bool Enabled { get; set; }
		}
	}
}
