// <ppj name="Moveta.Intern" date="1/29/2024 3:39:48 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using System.Runtime.InteropServices;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public class Tx4oleLib__DTXSBAR : SalObject
	{
		
		/// <summary>
		/// This is the real COM interface.
		/// </summary>
		internal COMInterface _Interface = null;
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public Tx4oleLib__DTXSBAR(){ }
		public Tx4oleLib__DTXSBAR(COMInterface obj) : this()
		{
			this._Interface = obj;
		}
		#endregion
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean AboutBox()
		{
			#region Actions
			try
			{
				_Interface.AboutBox();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontBold"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontBold(SalBoolean FontBold)
		{
			#region Actions
			try
			{
				bool param1 = (bool)FontBold;
				_Interface.FontBold = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontBold(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontBold;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontItalic"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontItalic(SalBoolean FontItalic)
		{
			#region Actions
			try
			{
				bool param1 = (bool)FontItalic;
				_Interface.FontItalic = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontItalic(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontItalic;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontName"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontName(SalString FontName)
		{
			#region Actions
			try
			{
				string param1 = (string)FontName;
				_Interface.FontName = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontName(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontName;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontSize"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontSize(SalNumber FontSize)
		{
			#region Actions
			try
			{
				float param1 = (float)FontSize;
				_Interface.FontSize = (int)param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontSize(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontSize;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontStrikethru"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontStrikethru(SalBoolean FontStrikethru)
		{
			#region Actions
			try
			{
				bool param1 = (bool)FontStrikethru;
				_Interface.FontStrikethru = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontStrikethru(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontStrikethru;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontUnderline"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontUnderline(SalBoolean FontUnderline)
		{
			#region Actions
			try
			{
				bool param1 = (bool)FontUnderline;
				_Interface.FontUnderline = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontUnderline(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontUnderline;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TextLine"></param>
		/// <returns></returns>
		public SalBoolean PropSetTextLine(SalString TextLine)
		{
			#region Actions
			try
			{
				string param1 = (string)TextLine;
				_Interface.TextLine = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTextLine(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TextLine;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TextColumn"></param>
		/// <returns></returns>
		public SalBoolean PropSetTextColumn(SalString TextColumn)
		{
			#region Actions
			try
			{
				string param1 = (string)TextColumn;
				_Interface.TextColumn = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTextColumn(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TextColumn;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TextPage"></param>
		/// <returns></returns>
		public SalBoolean PropSetTextPage(SalString TextPage)
		{
			#region Actions
			try
			{
				string param1 = (string)TextPage;
				_Interface.TextPage = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTextPage(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TextPage;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PageMode"></param>
		/// <returns></returns>
		public SalBoolean PropSetPageMode(SalNumber PageMode)
		{
			#region Actions
			try
			{
				short param1 = (short)PageMode;
				_Interface.PageMode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPageMode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PageMode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Enabled"></param>
		/// <returns></returns>
		public SalBoolean PropSetEnabled(SalBoolean Enabled)
		{
			#region Actions
			try
			{
				bool param1 = (bool)Enabled;
				_Interface.Enabled = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetEnabled(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Enabled;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BorderStyle"></param>
		/// <returns></returns>
		public SalBoolean PropSetBorderStyle(SalNumber BorderStyle)
		{
			#region Actions
			try
			{
				short param1 = (short)BorderStyle;
				_Interface.BorderStyle = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetBorderStyle(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.BorderStyle;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Font"></param>
		/// <returns></returns>
		public SalBoolean PropSetFont(stdole_Font Font)
		{
			#region Actions
			try
			{
				stdole_Font param1 = (stdole_Font)Font;
				_Interface.Font = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFont(stdole_Font returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Font;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Text"></param>
		/// <returns></returns>
		public SalBoolean PropSetText(SalString Text)
		{
			#region Actions
			try
			{
				string param1 = (string)Text;
				_Interface.Text = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetText(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Text;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWnd"></param>
		/// <returns></returns>
		public SalBoolean PropSethWnd(SalNumber hWnd)
		{
			#region Actions
			try
			{
				int param1 = (int)hWnd;
				_Interface.hWnd = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGethWnd(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.hWnd;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Language"></param>
		/// <returns></returns>
		public SalBoolean PropSetLanguage(SalNumber Language)
		{
			#region Actions
			try
			{
				short param1 = (short)Language;
				_Interface.Language = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetLanguage(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Language;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ResourceFile"></param>
		/// <returns></returns>
		public SalBoolean PropSetResourceFile(SalString ResourceFile)
		{
			#region Actions
			try
			{
				string param1 = (string)ResourceFile;
				_Interface.ResourceFile = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetResourceFile(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ResourceFile;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Appearance">Important: this is one of the Tx4oleLib_AppearanceStyles constants</param>
		/// <returns></returns>
		public SalBoolean PropSetAppearance(SalNumber Appearance)
		{
			#region Actions
			try
			{
				int param1 = (int)Appearance;
				_Interface.Appearance = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the Tx4oleLib_AppearanceStyles constants</param>
		/// <returns></returns>
		public SalBoolean PropGetAppearance(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Appearance;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TextSection"></param>
		/// <returns></returns>
		public SalBoolean PropSetTextSection(SalString TextSection)
		{
			#region Actions
			try
			{
				string param1 = (string)TextSection;
				_Interface.TextSection = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTextSection(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TextSection;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TextPageCounter"></param>
		/// <returns></returns>
		public SalBoolean PropSetTextPageCounter(SalString TextPageCounter)
		{
			#region Actions
			try
			{
				string param1 = (string)TextPageCounter;
				_Interface.TextPageCounter = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTextPageCounter(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TextPageCounter;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TextSectionCounter"></param>
		/// <returns></returns>
		public SalBoolean PropSetTextSectionCounter(SalString TextSectionCounter)
		{
			#region Actions
			try
			{
				string param1 = (string)TextSectionCounter;
				_Interface.TextSectionCounter = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTextSectionCounter(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TextSectionCounter;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ShowPage"></param>
		/// <returns></returns>
		public SalBoolean PropSetShowPage(SalBoolean ShowPage)
		{
			#region Actions
			try
			{
				bool param1 = (bool)ShowPage;
				_Interface.ShowPage = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetShowPage(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ShowPage;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ShowLine"></param>
		/// <returns></returns>
		public SalBoolean PropSetShowLine(SalBoolean ShowLine)
		{
			#region Actions
			try
			{
				bool param1 = (bool)ShowLine;
				_Interface.ShowLine = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetShowLine(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ShowLine;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ShowColumn"></param>
		/// <returns></returns>
		public SalBoolean PropSetShowColumn(SalBoolean ShowColumn)
		{
			#region Actions
			try
			{
				bool param1 = (bool)ShowColumn;
				_Interface.ShowColumn = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetShowColumn(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ShowColumn;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ShowSection"></param>
		/// <returns></returns>
		public SalBoolean PropSetShowSection(SalBoolean ShowSection)
		{
			#region Actions
			try
			{
				bool param1 = (bool)ShowSection;
				_Interface.ShowSection = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetShowSection(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ShowSection;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ShowPageCounter"></param>
		/// <returns></returns>
		public SalBoolean PropSetShowPageCounter(SalBoolean ShowPageCounter)
		{
			#region Actions
			try
			{
				bool param1 = (bool)ShowPageCounter;
				_Interface.ShowPageCounter = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetShowPageCounter(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ShowPageCounter;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ShowSectionCounter"></param>
		/// <returns></returns>
		public SalBoolean PropSetShowSectionCounter(SalBoolean ShowSectionCounter)
		{
			#region Actions
			try
			{
				bool param1 = (bool)ShowSectionCounter;
				_Interface.ShowSectionCounter = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetShowSectionCounter(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ShowSectionCounter;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// This is the real COM interface declaration.
		/// </summary>
		[Guid("26BD9913-E7D0-11DD-AA41-0013D350667C")]
		[InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch)]
		public interface COMInterface
		{
			void AboutBox();
			bool FontBold { get; set; }
			bool FontItalic { get; set; }
			string FontName { get; set; }
			int FontSize { get; set; }
			bool FontStrikethru { get; set; }
			bool FontUnderline { get; set; }
			string TextLine { get; set; }
			string TextColumn { get; set; }
			string TextPage { get; set; }
			int PageMode { get; set; }
			bool Enabled { get; set; }
			int BorderStyle { get; set; }
			stdole_Font Font { get; set; }
			string Text { get; set; }
			int hWnd { get; set; }
			int Language { get; set; }
			string ResourceFile { get; set; }
			int Appearance { get; set; }
			string TextSection { get; set; }
			string TextPageCounter { get; set; }
			string TextSectionCounter { get; set; }
			bool ShowPage { get; set; }
			bool ShowLine { get; set; }
			bool ShowColumn { get; set; }
			bool ShowSection { get; set; }
			bool ShowPageCounter { get; set; }
			bool ShowSectionCounter { get; set; }
		}
	}
}
