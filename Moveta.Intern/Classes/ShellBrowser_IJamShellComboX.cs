// <ppj name="Moveta.Intern" date="1/29/2024 3:39:48 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using System.Runtime.InteropServices;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public class ShellBrowser_IJamShellComboX : SalObject
	{
		
		/// <summary>
		/// This is the real COM interface.
		/// </summary>
		internal COMInterface _Interface = null;
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public ShellBrowser_IJamShellComboX(){ }
		public ShellBrowser_IJamShellComboX(COMInterface obj) : this()
		{
			this._Interface = obj;
		}
		#endregion
		
		/// <summary>
		/// </summary>
		/// <param name="Path"></param>
		/// <param name="Indent"></param>
		/// <param name="Persistent"></param>
		/// <returns></returns>
		public SalBoolean AddFolder(SalString Path, SalNumber Indent, SalBoolean Persistent)
		{
			#region Actions
			try
			{
				string param1 = (string)Path;
				int param2 = (int)Indent;
				bool param3 = (bool)Persistent;
				_Interface.AddFolder(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSelectedFolder(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SelectedFolder;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetSelectedFolder(SalString rhs)
		{
			#region Actions
			try
			{
				string param1 = (string)rhs;
				_Interface.SelectedFolder = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetItemIndex(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ItemIndex;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetItemIndex(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.ItemIndex = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFileSystemOnly(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FileSystemOnly;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetFileSystemOnly(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.FileSystemOnly = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetShowContextMenu(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ShowContextMenu;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetShowContextMenu(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.ShowContextMenu = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetColor(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Color;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetColor(SalNumber rhs)
		{
			#region Actions
			try
			{
				uint param1 = (uint)rhs;
				_Interface.Color = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetDragCursor(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.DragCursor;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetDragCursor(SalNumber rhs)
		{
			#region Actions
			try
			{
				short param1 = (short)rhs;
				_Interface.DragCursor = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetDropDownCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.DropDownCount;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetDropDownCount(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.DropDownCount = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetEnabled(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Enabled;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetEnabled(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.Enabled = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetItemHeight(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ItemHeight;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetItemHeight(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.ItemHeight = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetMaxLength(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.MaxLength;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetMaxLength(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.MaxLength = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetText(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Text;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetText(SalString rhs)
		{
			#region Actions
			try
			{
				string param1 = (string)rhs;
				_Interface.Text = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetVisible(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Visible;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetVisible(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.Visible = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetEditable(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Editable;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetEditable(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.Editable = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetShowFullPath(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ShowFullPath;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetShowFullPath(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.ShowFullPath = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the ShellBrowser_TBevelCut constants</param>
		/// <returns></returns>
		public SalBoolean PropGetBevelInner(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.BevelInner;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the ShellBrowser_TBevelCut constants</param>
		/// <returns></returns>
		public SalBoolean PropSetBevelInner(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.BevelInner = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the ShellBrowser_TBevelKind constants</param>
		/// <returns></returns>
		public SalBoolean PropGetBevelKind(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.BevelKind;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the ShellBrowser_TBevelKind constants</param>
		/// <returns></returns>
		public SalBoolean PropSetBevelKind(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.BevelKind = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the ShellBrowser_TBevelCut constants</param>
		/// <returns></returns>
		public SalBoolean PropGetBevelOuter(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.BevelOuter;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the ShellBrowser_TBevelCut constants</param>
		/// <returns></returns>
		public SalBoolean PropSetBevelOuter(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.BevelOuter = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetAutoComplete(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.AutoComplete;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetAutoComplete(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.AutoComplete = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetAutoCloseUp(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.AutoCloseUp;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetAutoCloseUp(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.AutoCloseUp = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetAutoDropDown(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.AutoDropDown;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetAutoDropDown(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.AutoDropDown = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the ShellBrowser_TEditCharCase constants</param>
		/// <returns></returns>
		public SalBoolean PropGetCharCase(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.CharCase;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the ShellBrowser_TEditCharCase constants</param>
		/// <returns></returns>
		public SalBoolean PropSetCharCase(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.CharCase = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSelText(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SelText;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetSelText(SalString rhs)
		{
			#region Actions
			try
			{
				string param1 = (string)rhs;
				_Interface.SelText = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean Clear()
		{
			#region Actions
			try
			{
				_Interface.Clear();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean ClearSelection()
		{
			#region Actions
			try
			{
				_Interface.ClearSelection();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean DeleteSelected()
		{
			#region Actions
			try
			{
				_Interface.DeleteSelected();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean SelectAll()
		{
			#region Actions
			try
			{
				_Interface.SelectAll();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetDroppedDown(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.DroppedDown;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetDroppedDown(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.DroppedDown = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetItems(ShellBrowser_IStrings returnValue)
		{
			#region Actions
			try
			{
				returnValue.Value = _Interface.Items;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetItems(ShellBrowser_IStrings rhs)
		{
			#region Actions
			try
			{
				ShellBrowser_IStrings.COMInterface param1 = (ShellBrowser_IStrings.COMInterface)rhs._Interface;
				_Interface.Items = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSelLength(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SelLength;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetSelLength(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.SelLength = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSelStart(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SelStart;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetSelStart(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.SelStart = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetDoubleBuffered(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.DoubleBuffered;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetDoubleBuffered(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.DoubleBuffered = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean AboutBox()
		{
			#region Actions
			try
			{
				_Interface.AboutBox();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetShellLink(ShellBrowser_IJamShellLinkX rhs)
		{
			#region Actions
			try
			{
				ShellBrowser_IJamShellLinkX.COMInterface param1 = (ShellBrowser_IJamShellLinkX.COMInterface)rhs._Interface;
				_Interface.ShellLink = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetShowNetHood(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ShowNetHood;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetShowNetHood(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.ShowNetHood = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetShowRecycleBin(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ShowRecycleBin;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetShowRecycleBin(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.ShowRecycleBin = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetShowErrorMessages(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ShowErrorMessages;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetShowErrorMessages(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.ShowErrorMessages = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetShowHidden(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ShowHidden;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetShowHidden(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.ShowHidden = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetShowContextMenuOnTop(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ShowContextMenuOnTop;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetShowContextMenuOnTop(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.ShowContextMenuOnTop = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetColorCompressed(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ColorCompressed;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetColorCompressed(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.ColorCompressed = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetColorEncrypted(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ColorEncrypted;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetColorEncrypted(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.ColorEncrypted = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetNoFillOnStartup(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.NoFillOnStartup;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetNoFillOnStartup(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.NoFillOnStartup = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean FullRefresh()
		{
			#region Actions
			try
			{
				_Interface.FullRefresh();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFont(stdole_Font returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Font;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetFont(stdole_Font rhs)
		{
			#region Actions
			try
			{
				stdole_Font param1 = (stdole_Font)rhs;
				_Interface.Font = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontByRef(stdole_Font rhs)
		{
			#region Actions
			try
			{
				stdole_Font param1 = (stdole_Font)rhs;
				_Interface.FontByRef = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetShowFiles(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ShowFiles;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetShowFiles(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.ShowFiles = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetItemsCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ItemsCount;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetUseSystemFont(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.UseSystemFont;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetUseSystemFont(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.UseSystemFont = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetAutomaticRefresh(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.AutomaticRefresh;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetAutomaticRefresh(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.AutomaticRefresh = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// This is the real COM interface declaration.
		/// </summary>
		[Guid("D0C573C9-1E6C-48F6-85D0-4B1EF264CC68")]
		[InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch)]
		public interface COMInterface
		{
			void AddFolder(string Path, int Indent, bool Persistent);
			string SelectedFolder { get; set; }
			int ItemIndex { get; set; }
			bool FileSystemOnly { get; set; }
			bool ShowContextMenu { get; set; }
			uint Color { get; set; }
			short DragCursor { get; set; }
			int DropDownCount { get; set; }
			bool Enabled { get; set; }
			int ItemHeight { get; set; }
			int MaxLength { get; set; }
			string Text { get; set; }
			bool Visible { get; set; }
			bool Editable { get; set; }
			bool ShowFullPath { get; set; }
			int BevelInner { get; set; }
			int BevelKind { get; set; }
			int BevelOuter { get; set; }
			bool AutoComplete { get; set; }
			bool AutoCloseUp { get; set; }
			bool AutoDropDown { get; set; }
			int CharCase { get; set; }
			string SelText { get; set; }
			void Clear();
			void ClearSelection();
			void DeleteSelected();
			void SelectAll();
			bool DroppedDown { get; set; }
			ShellBrowser_IStrings.COMInterface Items { get; set; }
			int SelLength { get; set; }
			int SelStart { get; set; }
			bool DoubleBuffered { get; set; }
			void AboutBox();
			ShellBrowser_IJamShellLinkX.COMInterface ShellLink { set; }
			bool ShowNetHood { get; set; }
			bool ShowRecycleBin { get; set; }
			bool ShowErrorMessages { get; set; }
			bool ShowHidden { get; set; }
			bool ShowContextMenuOnTop { get; set; }
			bool ColorCompressed { get; set; }
			bool ColorEncrypted { get; set; }
			bool NoFillOnStartup { get; set; }
			void FullRefresh();
			stdole_Font Font { get; set; }
			stdole_Font FontByRef { set; }
			bool ShowFiles { get; set; }
			int ItemsCount { get; }
			bool UseSystemFont { get; set; }
			bool AutomaticRefresh { get; set; }
		}
	}
}
