// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public class XMLNode : SalFunctionalClass
	{
		#region Constructors/Destructors
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalString nodeName()
		{
			#region Actions
			return __XML_Node_nodeName();
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalString nodeValue()
		{
			#region Actions
			return __XML_Node_nodeValue();
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sValue"></param>
		/// <returns></returns>
		public SalBoolean setNodeValue(SalString sValue)
		{
			#region Actions
			return __XML_Node_setNodeValue(sValue);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber nodeType()
		{
			#region Actions
			return __XML_Node_nodeType();
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalString nodeTypeString()
		{
			#region Local Variables
			SalString sNodeType = "";
			SalNumber nType = 0;
			#endregion
			
			#region Actions
			sNodeType = "";
			nType = __XML_Node_nodeType();
			switch (nType)
			{
				case Const.XML_ELEMENT_NODE:
					sNodeType = Const.XML_ELEMENT_STRING;
					break;
				
				case Const.XML_ATTRIBUTE_NODE:
					sNodeType = Const.XML_ATTRIBUTE_STRING;
					break;
				
				case Const.XML_TEXT_NODE:
					sNodeType = Const.XML_TEXT_STRING;
					break;
				
				case Const.XML_CDATA_SECTION_NODE:
					sNodeType = Const.XML_CDATA_SECTION_STRING;
					break;
				
				case Const.XML_ENTITY_REFERENCE_NODE:
					sNodeType = Const.XML_ENTITY_REFERENCE_STRING;
					break;
				
				case Const.XML_ENTITY_NODE:
					sNodeType = Const.XML_ENTITY_STRING;
					break;
				
				case Const.XML_PROCESSING_INSTRUCTION_NODE:
					sNodeType = Const.XML_PROCESSING_INSTRUCTION_STRING;
					break;
				
				case Const.XML_COMMENT_NODE:
					sNodeType = Const.XML_COMMENT_STRING;
					break;
				
				case Const.XML_DOCUMENT_NODE:
					sNodeType = Const.XML_DOCUMENT_STRING;
					break;
				
				case Const.XML_DOCUMENT_TYPE_NODE:
					sNodeType = Const.XML_DOCUMENT_TYPE_STRING;
					break;
				
				case Const.XML_DOCUMENT_FRAGMENT_NODE:
					sNodeType = Const.XML_DOCUMENT_FRAGMENT_STRING;
					break;
				
				case Const.XML_NOTATION_NODE:
					sNodeType = Const.XML_NOTATION_STRING;
					break;
			}
			return sNodeType;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ParentNode"></param>
		/// <returns></returns>
		public SalBoolean parentNode(XMLNode ParentNode)
		{
			#region Actions
			return __XML_Node_parentNode(ParentNode);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nodeList"></param>
		/// <returns></returns>
		public SalBoolean childNodes(XMLNodeList nodeList)
		{
			#region Actions
			return __XML_Node_childNodes(nodeList.children);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FirstChild"></param>
		/// <returns></returns>
		public SalBoolean firstChild(XMLNode FirstChild)
		{
			#region Actions
			return __XML_Node_firstChild(FirstChild);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="LastChild"></param>
		/// <returns></returns>
		public SalBoolean lastChild(XMLNode LastChild)
		{
			#region Actions
			return __XML_Node_lastChild(LastChild);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PreviousSibling"></param>
		/// <returns></returns>
		public SalBoolean previousSibling(XMLNode PreviousSibling)
		{
			#region Actions
			return __XML_Node_previousSibling(PreviousSibling);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="NextSibling"></param>
		/// <returns></returns>
		public SalBoolean nextSibling(XMLNode NextSibling)
		{
			#region Actions
			return __XML_Node_nextSibling(NextSibling);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nodeMap"></param>
		/// <returns></returns>
		public SalBoolean attributes(XMLNamedNodeMap nodeMap)
		{
			#region Actions
			return __XML_Node_attributes(nodeMap.children);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean hasAttributes()
		{
			#region Actions
			return __XML_Node_hasAttributes();
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="OwnerDocument"></param>
		/// <returns></returns>
		public SalBoolean ownerDocument(XMLDocument OwnerDocument)
		{
			#region Actions
			return __XML_Node_ownerDocument(OwnerDocument);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="newChild"></param>
		/// <param name="refChild"></param>
		/// <returns></returns>
		public SalBoolean insertBefore(XMLNode newChild, XMLNode refChild)
		{
			#region Actions
			return __XML_Node_insertBefore(newChild, refChild);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="oldChild"></param>
		/// <param name="newChild"></param>
		/// <returns></returns>
		public SalBoolean replaceChild(XMLNode oldChild, XMLNode newChild)
		{
			#region Actions
			return __XML_Node_replaceChild(oldChild, newChild);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="oChild"></param>
		/// <returns></returns>
		public SalBoolean removeChild(XMLNode oChild)
		{
			#region Actions
			return __XML_Node_removeChild(oChild);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ChildToAppend"></param>
		/// <returns></returns>
		public SalBoolean appendChild(XMLNode ChildToAppend)
		{
			#region Actions
			return __XML_Node_appendChild(ChildToAppend);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean hasChildNodes()
		{
			#region Actions
			return __XML_Node_hasChildNodes();
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="targetNode"></param>
		/// <param name="bDeep"></param>
		/// <returns></returns>
		public SalBoolean cloneNode(XMLNode targetNode, SalBoolean bDeep)
		{
			#region Actions
			return __XML_Node_cloneNode(targetNode, bDeep);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalString writeToString()
		{
			#region Actions
			return __XML_Node_writeToString();
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sSchema"></param>
		/// <returns></returns>
		public SalBoolean getSchema(ref SalString sSchema)
		{
			#region Actions
			return __XML_Document_schemaDef(sSchema);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sDatatype"></param>
		/// <returns></returns>
		public SalBoolean getDatatype(ref SalString sDatatype)
		{
			#region Actions
			return __XML_Document_schemaDatatype(sDatatype);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalString getTextContent()
		{
			#region Actions
			return __XML_Node_getTextContent();
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sContent"></param>
		/// <returns></returns>
		public SalBoolean setTextContent(SalString sContent)
		{
			#region Actions
			return __XML_Node_setTextContent(sContent);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalString getLocalName()
		{
			#region Actions
			return __XML_Node_getLocalName();
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalString getNamespaceURI()
		{
			#region Actions
			return __XML_Node_getNamespaceURI();
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalString getPrefix()
		{
			#region Actions
			return __XML_Node_getPrefix();
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sNamespaceURI"></param>
		/// <returns></returns>
		public SalBoolean isDefaultNamespace(SalString sNamespaceURI)
		{
			#region Actions
			return __XML_Node_isDefaultNamespace(sNamespaceURI);
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean release()
		{
			#region Actions
			return __XML_Node_release();
			#endregion
		}
		// SAL date time conversion
		/// <summary>
		/// </summary>
		/// <param name="dtSal"></param>
		/// <param name="nZone"></param>
		/// <returns></returns>
		public SalBoolean getXMLDateTime(ref SalDateTime dtSal, ref SalNumber nZone)
		{
			#region Local Variables
			SalNumber nNodeType = 0;
			SalString sXML = "";
			SalString sZone = "";
			SalNumber nPos = 0;
			SalNumber nLength = 0;
			#endregion
			
			#region Actions
			nNodeType = this.nodeType();
			switch (nNodeType)
			{
				case Const.XML_TEXT_NODE:
				
				case Const.XML_ELEMENT_NODE:
					sXML = this.getTextContent();
					break;
				
				case Const.XML_ATTRIBUTE_NODE:
					sXML = this.nodeValue();
					break;
				
				default:
					dtSal = SalDateTime.Null;
					nZone = SalNumber.Null;
					return false;
			}
			// see if we have a candidate ..first remove all new lines
			nPos = sXML.Scan(((SalNumber)0x000a).ToCharacter());
			while (nPos >= 0) 
			{
				sXML = sXML.Replace(nPos, 1, " ");
				nPos = sXML.Scan(((SalNumber)0x000a).ToCharacter());
			}
			// trim and check to see if we have anything left
			sXML = sXML.Trim();
			nLength = sXML.Length;
			if (nLength == 0) 
			{
				dtSal = SalDateTime.Null;
				nZone = SalNumber.Null;
				return false;
			}
			// check for zone information
			nPos = sXML.Scan("Z");
			if (nPos >= 0) 
			{
				// get the zone portion
				nLength = sXML.Length - nPos;
				sZone = sXML.Right(nLength - 1);
				nZone = sZone.ToNumber();
				sXML = sXML.Left(nPos);
			}
			else
			{
				nZone = 0;
			}
			// replace the xml T delimiter with a dash
			nPos = sXML.Scan("T");
			if (nPos >= 0) 
			{
				sXML = sXML.Replace(nPos, 1, "-");
			}
			// and put it into a SAL DateTime if possible
			dtSal = sXML.ToDate();
			// check to see if we were successful
			if (dtSal == SalDateTime.Null) 
			{
				return false;
			}
			return true;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="dtSal"></param>
		/// <param name="nZone"></param>
		/// <param name="nFormat"></param>
		/// <returns></returns>
		public SalBoolean setXMLDateTime(SalDateTime dtSal, SalNumber nZone, SalNumber nFormat)
		{
			#region Local Variables
			SalNumber nNodeType = 0;
			SalString sDate = "";
			SalBoolean bReturn = false;
			SalString sTemp = "";
			SalNumber nLength = 0;
			#endregion
			
			#region Actions
			// do we support node type
			nNodeType = this.nodeType();
			switch (nNodeType)
			{
				case Const.XML_TEXT_NODE:
				
				case Const.XML_ELEMENT_NODE:
				
				case Const.XML_ATTRIBUTE_NODE:
					break;
				
				default:
					return false;
			}
			switch (nFormat)
			{
				case Const.XMLDATETIME_DATE:
				
				case Const.XMLDATETIME_DATETIME:
					// is it a null date time
					if (dtSal == SalDateTime.Null) 
					{
						break;
					}
					// Year
					sTemp = dtSal.Year().ToString(0);
					nLength = sTemp.Length;
					if (nLength == 2) 
					{
						sTemp = "20" + sTemp;
					}
					sDate = sTemp + "-";
					// Month
					sTemp = dtSal.Month().ToString(0);
					nLength = sTemp.Length;
					if (nLength == 1) 
					{
						sTemp = "0" + sTemp;
					}
					sDate = sDate + sTemp + "-";
					// Day
					sTemp = dtSal.Day().ToString(0);
					nLength = sTemp.Length;
					if (nLength == 1) 
					{
						sTemp = "0" + sTemp;
					}
					sDate = sDate + sTemp;
					break;
			}
			switch (nFormat)
			{
				case Const.XMLDATETIME_DATETIME:
					// is it a null date time
					if (dtSal == SalDateTime.Null) 
					{
						break;
					}
					sDate = sDate + "T";
					goto case Const.XMLDATETIME_TIME;
				
				case Const.XMLDATETIME_TIME:
					// is it a null date time
					if (dtSal == SalDateTime.Null) 
					{
						break;
					}
					// hour
					sTemp = dtSal.Hour().ToString(0);
					nLength = sTemp.Length;
					if (nLength == 1) 
					{
						sTemp = "0" + sTemp;
					}
					sDate = sDate + sTemp + ":";
					// minute
					sTemp = dtSal.Minute().ToString(0);
					nLength = sTemp.Length;
					if (nLength == 1) 
					{
						sTemp = "0" + sTemp;
					}
					sDate = sDate + sTemp + ":";
					// seconds
					sTemp = dtSal.Second().ToString(0);
					nLength = sTemp.Length;
					if (nLength == 1) 
					{
						sTemp = "0" + sTemp;
					}
					sDate = sDate + sTemp;
					break;
			}
			// All formats now supported can have zone information
			switch (nFormat)
			{
				case Const.XMLDATETIME_DATETIME:
				
				case Const.XMLDATETIME_TIME:
				
				case Const.XMLDATETIME_DATE:
					// is it a null date time
					if (dtSal == SalDateTime.Null) 
					{
						break;
					}
					// make sure we have a valid zone pad with a leading zero
					if (nZone >= 0 && nZone < 10) 
					{
						sDate = sDate + "Z" + "0" + nZone.ToString(0);
					}
					if (nZone >= 10 && nZone < 24) 
					{
						sDate = sDate + "Z" + nZone.ToString(0);
					}
					break;
			}

			switch (nNodeType)
			{
				case Const.XML_TEXT_NODE:
				
				case Const.XML_ELEMENT_NODE:
					bReturn = this.setTextContent(sDate);
					break;
				
				case Const.XML_ATTRIBUTE_NODE:
					bReturn = this.setNodeValue(sDate);
					break;
				
				default:
					return false;
			}
			return bReturn;
			#endregion
		}
		#endregion
	}
}
