// <ppj name="Moveta.Intern" date="1/29/2024 3:39:48 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using System.Runtime.InteropServices;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public class GdTwain2__Twain : SalObject
	{
		
		/// <summary>
		/// This is the real COM interface.
		/// </summary>
		internal COMInterface _Interface = null;
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public GdTwain2__Twain(){ }
		public GdTwain2__Twain(COMInterface obj) : this()
		{
			this._Interface = obj;
		}
		#endregion
		
		/// <summary>
		/// </summary>
		/// <param name="nBrightnessPct"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SetBrightness(SalNumber nBrightnessPct, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nBrightnessPct;
				returnValue = _Interface.SetBrightness(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nContrastPct"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SetContrast(SalNumber nContrastPct, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nContrastPct;
				returnValue = _Interface.SetContrast(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nGammaFactor"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SetGammaCorrection(SalNumber nGammaFactor, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nGammaFactor;
				returnValue = _Interface.SetGammaCorrection(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nSaturationPct"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SetSaturation(SalNumber nSaturationPct, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nSaturationPct;
				returnValue = _Interface.SetSaturation(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nSrcLeft"></param>
		/// <param name="nSrcTop"></param>
		/// <param name="nWidth"></param>
		/// <param name="nHeight"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean CopyRegionToClipboard(SalNumber nSrcLeft, SalNumber nSrcTop, SalNumber nWidth, SalNumber nHeight, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nSrcLeft;
				int param2 = (int)nSrcTop;
				int param3 = (int)nWidth;
				int param4 = (int)nHeight;
				returnValue = _Interface.CopyRegionToClipboard(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean CopyToClipboard(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.CopyToClipboard();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean DeleteClipboardData()
		{
			#region Actions
			try
			{
				_Interface.DeleteClipboardData();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nARGBColorsArray"></param>
		/// <param name="nEntriesCount"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean ColorPaletteGet(SalSafeArray nARGBColorsArray, ref SalNumber nEntriesCount, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				object[] param1 = (object[])nARGBColorsArray.Value;
				int param2 = (int)nEntriesCount;
				returnValue = _Interface.ColorPaletteGet(param1, ref param2);
				nEntriesCount = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean ColorPaletteGetColorsCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ColorPaletteGetColorsCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nARGBColorsArray"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean ColorPaletteSet(SalSafeArray nARGBColorsArray, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				object[] param1 = (object[])nARGBColorsArray.Value;
				returnValue = _Interface.ColorPaletteSet(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nRGBValue"></param>
		/// <param name="nRed"></param>
		/// <param name="nGreen"></param>
		/// <param name="nBlue"></param>
		/// <returns></returns>
		public SalBoolean ColorGetRGBFromRGBValue(SalNumber nRGBValue, ref SalNumber nRed, ref SalNumber nGreen, ref SalNumber nBlue)
		{
			#region Actions
			try
			{
				int param1 = (int)nRGBValue;
				int param2 = (int)nRed;
				int param3 = (int)nGreen;
				int param4 = (int)nBlue;
				_Interface.ColorGetRGBFromRGBValue(param1, ref param2, ref param3, ref param4);
				nRed = param2;
				nGreen = param3;
				nBlue = param4;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nRGBValue"></param>
		/// <param name="nRed"></param>
		/// <param name="nGreen"></param>
		/// <param name="nBlue"></param>
		/// <returns></returns>
		public SalBoolean ColorGetRGBFromRGBValuel(SalNumber nRGBValue, ref SalNumber nRed, ref SalNumber nGreen, ref SalNumber nBlue)
		{
			#region Actions
			try
			{
				int param1 = (int)nRGBValue;
				int param2 = (int)nRed;
				int param3 = (int)nGreen;
				int param4 = (int)nBlue;
				_Interface.ColorGetRGBFromRGBValuel(param1, ref param2, ref param3, ref param4);
				nRed = param2;
				nGreen = param3;
				nBlue = param4;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nARGBValue"></param>
		/// <param name="nAlpha"></param>
		/// <param name="nRed"></param>
		/// <param name="nGreen"></param>
		/// <param name="nBlue"></param>
		/// <returns></returns>
		public SalBoolean ColorGetARGBFromARGBValue(SalNumber nARGBValue, ref SalNumber nAlpha, ref SalNumber nRed, ref SalNumber nGreen, ref SalNumber nBlue)
		{
			#region Actions
			try
			{
				int param1 = (int)nARGBValue;
				int param2 = (int)nAlpha;
				int param3 = (int)nRed;
				int param4 = (int)nGreen;
				int param5 = (int)nBlue;
				_Interface.ColorGetARGBFromARGBValue(param1, ref param2, ref param3, ref param4, ref param5);
				nAlpha = param2;
				nRed = param3;
				nGreen = param4;
				nBlue = param5;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nARGBValue"></param>
		/// <param name="nAlpha"></param>
		/// <param name="nRed"></param>
		/// <param name="nGreen"></param>
		/// <param name="nBlue"></param>
		/// <returns></returns>
		public SalBoolean ColorGetARGBFromARGBValuel(SalNumber nARGBValue, ref SalNumber nAlpha, ref SalNumber nRed, ref SalNumber nGreen, ref SalNumber nBlue)
		{
			#region Actions
			try
			{
				int param1 = (int)nARGBValue;
				int param2 = (int)nAlpha;
				int param3 = (int)nRed;
				int param4 = (int)nGreen;
				int param5 = (int)nBlue;
				_Interface.ColorGetARGBFromARGBValuel(param1, ref param2, ref param3, ref param4, ref param5);
				nAlpha = param2;
				nRed = param3;
				nGreen = param4;
				nBlue = param5;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nAlpha"></param>
		/// <param name="nRed"></param>
		/// <param name="nGreen"></param>
		/// <param name="nBlue"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean argb(SalNumber nAlpha, SalNumber nRed, SalNumber nGreen, SalNumber nBlue, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nAlpha;
				int param2 = (int)nRed;
				int param3 = (int)nGreen;
				int param4 = (int)nBlue;
				returnValue = _Interface.argb(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nRed"></param>
		/// <param name="nGreen"></param>
		/// <param name="nBlue"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetRGB(SalNumber nRed, SalNumber nGreen, SalNumber nBlue, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nRed;
				int param2 = (int)nGreen;
				int param3 = (int)nBlue;
				returnValue = _Interface.GetRGB(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean AutoDeskew(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.AutoDeskew();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nConfidence"></param>
		/// <param name="nSkipLinesCount"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean CropWhiteBorders(SalNumber nConfidence, SalNumber nSkipLinesCount, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nConfidence;
				int param2 = (int)nSkipLinesCount;
				returnValue = _Interface.CropWhiteBorders(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nConfidence"></param>
		/// <param name="nSkipLinesCount"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean CropBlackBorders(SalNumber nConfidence, SalNumber nSkipLinesCount, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nConfidence;
				int param2 = (int)nSkipLinesCount;
				returnValue = _Interface.CropBlackBorders(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean CropBorders(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.CropBorders();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nConfidence"></param>
		/// <param name="nPixelReference"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean CropBordersEX(SalNumber nConfidence, SalNumber nPixelReference, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nConfidence;
				int param2 = (int)nPixelReference;
				returnValue = _Interface.CropBordersEX(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nSrcLeft"></param>
		/// <param name="nSrcTop"></param>
		/// <param name="nWidth"></param>
		/// <param name="nHeight"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean Crop(SalNumber nSrcLeft, SalNumber nSrcTop, SalNumber nWidth, SalNumber nHeight, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nSrcLeft;
				int param2 = (int)nSrcTop;
				int param3 = (int)nWidth;
				int param4 = (int)nHeight;
				returnValue = _Interface.Crop(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nLines"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean CropTop(SalNumber nLines, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nLines;
				returnValue = _Interface.CropTop(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nLines"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean CropBottom(SalNumber nLines, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nLines;
				returnValue = _Interface.CropBottom(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nLines"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean CropLeft(SalNumber nLines, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nLines;
				returnValue = _Interface.CropLeft(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nLines"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean CropRight(SalNumber nLines, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nLines;
				returnValue = _Interface.CropRight(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nHDC"></param>
		/// <param name="nDstLeft"></param>
		/// <param name="nDstTop"></param>
		/// <param name="nDstWidth"></param>
		/// <param name="nDstHeight"></param>
		/// <param name="nInterpolationMode">Important: this is one of the GdTwain2_InterpolationMode constants</param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean DisplayImageOnHDC(SalNumber nHDC, SalNumber nDstLeft, SalNumber nDstTop, SalNumber nDstWidth, SalNumber nDstHeight, SalNumber nInterpolationMode, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nHDC;
				int param2 = (int)nDstLeft;
				int param3 = (int)nDstTop;
				int param4 = (int)nDstWidth;
				int param5 = (int)nDstHeight;
				int param6 = (int)nInterpolationMode;
				returnValue = _Interface.DisplayImageOnHDC(param1, param2, param3, param4, param5, param6);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nHWND"></param>
		/// <param name="nDstLeft"></param>
		/// <param name="nDstTop"></param>
		/// <param name="nDstWidth"></param>
		/// <param name="nDstHeight"></param>
		/// <param name="nInterpolationMode">Important: this is one of the GdTwain2_InterpolationMode constants</param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean DisplayImageOnHwnd(SalNumber nHWND, SalNumber nDstLeft, SalNumber nDstTop, SalNumber nDstWidth, SalNumber nDstHeight, SalNumber nInterpolationMode, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nHWND;
				int param2 = (int)nDstLeft;
				int param3 = (int)nDstTop;
				int param4 = (int)nDstWidth;
				int param5 = (int)nDstHeight;
				int param6 = (int)nInterpolationMode;
				returnValue = _Interface.DisplayImageOnHwnd(param1, param2, param3, param4, param5, param6);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nHDC"></param>
		/// <param name="nDstLeft"></param>
		/// <param name="nDstTop"></param>
		/// <param name="nDstWidth"></param>
		/// <param name="nDstHeight"></param>
		/// <param name="nSrcLeft"></param>
		/// <param name="nSrcTop"></param>
		/// <param name="nSrcWidth"></param>
		/// <param name="nSrcHeight"></param>
		/// <param name="nInterpolationMode">Important: this is one of the GdTwain2_InterpolationMode constants</param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean DisplayImageRectOnHDC(SalNumber nHDC, SalNumber nDstLeft, SalNumber nDstTop, SalNumber nDstWidth, SalNumber nDstHeight, SalNumber nSrcLeft, SalNumber nSrcTop, SalNumber nSrcWidth, SalNumber nSrcHeight, SalNumber nInterpolationMode, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nHDC;
				int param2 = (int)nDstLeft;
				int param3 = (int)nDstTop;
				int param4 = (int)nDstWidth;
				int param5 = (int)nDstHeight;
				int param6 = (int)nSrcLeft;
				int param7 = (int)nSrcTop;
				int param8 = (int)nSrcWidth;
				int param9 = (int)nSrcHeight;
				int param10 = (int)nInterpolationMode;
				returnValue = _Interface.DisplayImageRectOnHDC(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nHWND"></param>
		/// <param name="nDstLeft"></param>
		/// <param name="nDstTop"></param>
		/// <param name="nDstWidth"></param>
		/// <param name="nDstHeight"></param>
		/// <param name="nSrcLeft"></param>
		/// <param name="nSrcTop"></param>
		/// <param name="nSrcWidth"></param>
		/// <param name="nSrcHeight"></param>
		/// <param name="nInterpolationMode">Important: this is one of the GdTwain2_InterpolationMode constants</param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean DisplayImageRectOnHwnd(SalNumber nHWND, SalNumber nDstLeft, SalNumber nDstTop, SalNumber nDstWidth, SalNumber nDstHeight, SalNumber nSrcLeft, SalNumber nSrcTop, SalNumber nSrcWidth, SalNumber nSrcHeight, SalNumber nInterpolationMode, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nHWND;
				int param2 = (int)nDstLeft;
				int param3 = (int)nDstTop;
				int param4 = (int)nDstWidth;
				int param5 = (int)nDstHeight;
				int param6 = (int)nSrcLeft;
				int param7 = (int)nSrcTop;
				int param8 = (int)nSrcWidth;
				int param9 = (int)nSrcHeight;
				int param10 = (int)nInterpolationMode;
				returnValue = _Interface.DisplayImageRectOnHwnd(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nAngle"></param>
		/// <param name="sText"></param>
		/// <param name="nDstLeft"></param>
		/// <param name="nDstTop"></param>
		/// <param name="nFontSize"></param>
		/// <param name="nFontStyle">Important: this is one of the GdTwain2_FontStyle constants</param>
		/// <param name="nColorARGB">Important: this is one of the GdTwain2_Colors constants</param>
		/// <param name="sFontName"></param>
		/// <param name="bAntiAlias"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean DrawRotatedText(SalNumber nAngle, SalString sText, SalNumber nDstLeft, SalNumber nDstTop, SalNumber nFontSize, SalNumber nFontStyle, SalNumber nColorARGB, SalString sFontName, SalBoolean bAntiAlias, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				float param1 = (float)nAngle;
				string param2 = (string)sText;
				int param3 = (int)nDstLeft;
				int param4 = (int)nDstTop;
				int param5 = (int)nFontSize;
				int param6 = (int)nFontStyle;
				int param7 = (int)nColorARGB;
				string param8 = (string)sFontName;
				bool param9 = (bool)bAntiAlias;
				returnValue = _Interface.DrawRotatedText(param1, param2, param3, param4, param5, param6, param7, param8, param9);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nAngle"></param>
		/// <param name="sText"></param>
		/// <param name="nDstLeft"></param>
		/// <param name="nDstTop"></param>
		/// <param name="nFontSize"></param>
		/// <param name="nFontStyle">Important: this is one of the GdTwain2_FontStyle constants</param>
		/// <param name="nColorARGB">Important: this is one of the GdTwain2_Colors constants</param>
		/// <param name="sFontName"></param>
		/// <param name="nBackColor">Important: this is one of the GdTwain2_Colors constants</param>
		/// <param name="bAntiAlias"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean DrawRotatedTextBackColor(SalNumber nAngle, SalString sText, SalNumber nDstLeft, SalNumber nDstTop, SalNumber nFontSize, SalNumber nFontStyle, SalNumber nColorARGB, SalString sFontName, SalNumber nBackColor, SalBoolean bAntiAlias, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				float param1 = (float)nAngle;
				string param2 = (string)sText;
				int param3 = (int)nDstLeft;
				int param4 = (int)nDstTop;
				int param5 = (int)nFontSize;
				int param6 = (int)nFontStyle;
				int param7 = (int)nColorARGB;
				string param8 = (string)sFontName;
				int param9 = (int)nBackColor;
				bool param10 = (bool)bAntiAlias;
				returnValue = _Interface.DrawRotatedTextBackColor(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sText"></param>
		/// <param name="nDstLeft"></param>
		/// <param name="nDstTop"></param>
		/// <param name="nFontSize"></param>
		/// <param name="nFontStyle">Important: this is one of the GdTwain2_FontStyle constants</param>
		/// <param name="nTextARGBColor">Important: this is one of the GdTwain2_Colors constants</param>
		/// <param name="sFontName"></param>
		/// <param name="bAntiAlias"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean DrawText(SalString sText, SalNumber nDstLeft, SalNumber nDstTop, SalNumber nFontSize, SalNumber nFontStyle, SalNumber nTextARGBColor, SalString sFontName, SalBoolean bAntiAlias, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sText;
				int param2 = (int)nDstLeft;
				int param3 = (int)nDstTop;
				int param4 = (int)nFontSize;
				int param5 = (int)nFontStyle;
				int param6 = (int)nTextARGBColor;
				string param7 = (string)sFontName;
				bool param8 = (bool)bAntiAlias;
				returnValue = _Interface.DrawText(param1, param2, param3, param4, param5, param6, param7, param8);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sText"></param>
		/// <param name="sFontName"></param>
		/// <param name="nFontSize"></param>
		/// <param name="nFontStyle">Important: this is one of the GdTwain2_FontStyle constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetTextHeight(SalString sText, SalString sFontName, SalNumber nFontSize, SalNumber nFontStyle, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sText;
				string param2 = (string)sFontName;
				int param3 = (int)nFontSize;
				int param4 = (int)nFontStyle;
				returnValue = _Interface.GetTextHeight(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sText"></param>
		/// <param name="sFontName"></param>
		/// <param name="nFontSize"></param>
		/// <param name="nFontStyle">Important: this is one of the GdTwain2_FontStyle constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetTextWidth(SalString sText, SalString sFontName, SalNumber nFontSize, SalNumber nFontStyle, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sText;
				string param2 = (string)sFontName;
				int param3 = (int)nFontSize;
				int param4 = (int)nFontStyle;
				returnValue = _Interface.GetTextWidth(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sText"></param>
		/// <param name="nDstLeft"></param>
		/// <param name="nDstTop"></param>
		/// <param name="nFontSize"></param>
		/// <param name="nFontStyle">Important: this is one of the GdTwain2_FontStyle constants</param>
		/// <param name="nTextARGBColor">Important: this is one of the GdTwain2_Colors constants</param>
		/// <param name="sFontName"></param>
		/// <param name="nBackColor">Important: this is one of the GdTwain2_Colors constants</param>
		/// <param name="bAntiAlias"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean DrawTextBackColor(SalString sText, SalNumber nDstLeft, SalNumber nDstTop, SalNumber nFontSize, SalNumber nFontStyle, SalNumber nTextARGBColor, SalString sFontName, SalNumber nBackColor, SalBoolean bAntiAlias, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sText;
				int param2 = (int)nDstLeft;
				int param3 = (int)nDstTop;
				int param4 = (int)nFontSize;
				int param5 = (int)nFontStyle;
				int param6 = (int)nTextARGBColor;
				string param7 = (string)sFontName;
				int param8 = (int)nBackColor;
				bool param9 = (bool)bAntiAlias;
				returnValue = _Interface.DrawTextBackColor(param1, param2, param3, param4, param5, param6, param7, param8, param9);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sText"></param>
		/// <param name="nLeft"></param>
		/// <param name="nTop"></param>
		/// <param name="nWidth"></param>
		/// <param name="nHeight"></param>
		/// <param name="nFontSize"></param>
		/// <param name="nAlignment"></param>
		/// <param name="nFontStyle">Important: this is one of the GdTwain2_FontStyle constants</param>
		/// <param name="nTextARGBColor">Important: this is one of the GdTwain2_Colors constants</param>
		/// <param name="sFontName"></param>
		/// <param name="bDrawTextBox"></param>
		/// <param name="bAntiAlias"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean DrawTextBox(SalString sText, SalNumber nLeft, SalNumber nTop, SalNumber nWidth, SalNumber nHeight, SalNumber nFontSize, SalNumber nAlignment, SalNumber nFontStyle, SalNumber nTextARGBColor, SalString sFontName, SalBoolean bDrawTextBox, SalBoolean bAntiAlias, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sText;
				int param2 = (int)nLeft;
				int param3 = (int)nTop;
				int param4 = (int)nWidth;
				int param5 = (int)nHeight;
				int param6 = (int)nFontSize;
				int param7 = (int)nAlignment;
				int param8 = (int)nFontStyle;
				int param9 = (int)nTextARGBColor;
				string param10 = (string)sFontName;
				bool param11 = (bool)bDrawTextBox;
				bool param12 = (bool)bAntiAlias;
				returnValue = _Interface.DrawTextBox(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sText"></param>
		/// <param name="nDstLeft"></param>
		/// <param name="nDstTop"></param>
		/// <param name="nStartColor">Important: this is one of the GdTwain2_Colors constants</param>
		/// <param name="nEndColor">Important: this is one of the GdTwain2_Colors constants</param>
		/// <param name="nFontSize"></param>
		/// <param name="nFontStyle">Important: this is one of the GdTwain2_FontStyle constants</param>
		/// <param name="sFontName"></param>
		/// <param name="bAntiAlias"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean DrawTextGradient(SalString sText, SalNumber nDstLeft, SalNumber nDstTop, SalNumber nStartColor, SalNumber nEndColor, SalNumber nFontSize, SalNumber nFontStyle, SalString sFontName, SalBoolean bAntiAlias, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sText;
				int param2 = (int)nDstLeft;
				int param3 = (int)nDstTop;
				int param4 = (int)nStartColor;
				int param5 = (int)nEndColor;
				int param6 = (int)nFontSize;
				int param7 = (int)nFontStyle;
				string param8 = (string)sFontName;
				bool param9 = (bool)bAntiAlias;
				returnValue = _Interface.DrawTextGradient(param1, param2, param3, param4, param5, param6, param7, param8, param9);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sText"></param>
		/// <param name="nDstLeft"></param>
		/// <param name="nDstTop"></param>
		/// <param name="sTextureFilePath"></param>
		/// <param name="nFontSize"></param>
		/// <param name="nFontStyle">Important: this is one of the GdTwain2_FontStyle constants</param>
		/// <param name="sFontName"></param>
		/// <param name="bAntiAlias"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean DrawTextTexture(SalString sText, SalNumber nDstLeft, SalNumber nDstTop, SalString sTextureFilePath, SalNumber nFontSize, SalNumber nFontStyle, SalString sFontName, SalBoolean bAntiAlias, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sText;
				int param2 = (int)nDstLeft;
				int param3 = (int)nDstTop;
				string param4 = (string)sTextureFilePath;
				int param5 = (int)nFontSize;
				int param6 = (int)nFontStyle;
				string param7 = (string)sFontName;
				bool param8 = (bool)bAntiAlias;
				returnValue = _Interface.DrawTextTexture(param1, param2, param3, param4, param5, param6, param7, param8);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sText"></param>
		/// <param name="nDstLeft"></param>
		/// <param name="nDstTop"></param>
		/// <param name="nImageID"></param>
		/// <param name="nFontSize"></param>
		/// <param name="nFontStyle">Important: this is one of the GdTwain2_FontStyle constants</param>
		/// <param name="sFontName"></param>
		/// <param name="bAntiAlias"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean DrawTextTextureFromGdPictureImage(SalString sText, SalNumber nDstLeft, SalNumber nDstTop, SalNumber nImageID, SalNumber nFontSize, SalNumber nFontStyle, SalString sFontName, SalBoolean bAntiAlias, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sText;
				int param2 = (int)nDstLeft;
				int param3 = (int)nDstTop;
				int param4 = (int)nImageID;
				int param5 = (int)nFontSize;
				int param6 = (int)nFontStyle;
				string param7 = (string)sFontName;
				bool param8 = (bool)bAntiAlias;
				returnValue = _Interface.DrawTextTextureFromGdPictureImage(param1, param2, param3, param4, param5, param6, param7, param8);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean FxSepia(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FxSepia();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean FxStretchContrast(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FxStretchContrast();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean FxNegative(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FxNegative();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nSoftenValue"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean FxSoften(SalNumber nSoftenValue, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nSoftenValue;
				returnValue = _Interface.FxSoften(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean FxDespeckle(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FxDespeckle();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean FxSmooth(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FxSmooth();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nUnitMode">Important: this is one of the GdTwain2_UnitMode constants</param>
		/// <returns></returns>
		public SalBoolean FontSetUnit(SalNumber nUnitMode)
		{
			#region Actions
			try
			{
				int param1 = (int)nUnitMode;
				_Interface.FontSetUnit(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_UnitMode constants</param>
		/// <returns></returns>
		public SalBoolean FontGetUnit(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontGetUnit();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean FontGetCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontGetCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nFontNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean FontGetName(SalNumber nFontNo, ref SalString returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nFontNo;
				returnValue = _Interface.FontGetName(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFontName"></param>
		/// <param name="nFontStyle">Important: this is one of the GdTwain2_FontStyle constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean FontIsStyleAvailable(SalString sFontName, SalNumber nFontStyle, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFontName;
				int param2 = (int)nFontStyle;
				returnValue = _Interface.FontIsStyleAvailable(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetWidth(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetWidth();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetHeight(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetHeight();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetHeightMM(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetHeightMM();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetWidthMM(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetWidthMM();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetImageFormat(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetImageFormat();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetPixelFormatString(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetPixelFormatString();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_PixelFormats constants</param>
		/// <returns></returns>
		public SalBoolean GetPixelFormat(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetPixelFormat();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetPixelDepth(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetPixelDepth();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean IsPixelFormatIndexed(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.IsPixelFormatIndexed();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean IsPixelFormatHasAlpha(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.IsPixelFormatHasAlpha();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetHorizontalResolution(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetHorizontalResolution();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetVerticalResolution(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetVerticalResolution();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nHorizontalresolution"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SetHorizontalResolution(SalNumber nHorizontalresolution, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				float param1 = (float)nHorizontalresolution;
				returnValue = _Interface.SetHorizontalResolution(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nVerticalresolution"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SetVerticalResolution(SalNumber nVerticalresolution, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				float param1 = (float)nVerticalresolution;
				returnValue = _Interface.SetVerticalResolution(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="nModeCompression">Important: this is one of the GdTwain2_TifCompression constants</param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean TiffSaveAsNativeMultiPage(SalString sFilePath, SalNumber nModeCompression, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				int param2 = (int)nModeCompression;
				returnValue = _Interface.TiffSaveAsNativeMultiPage(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean TiffCloseNativeMultiPage(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TiffCloseNativeMultiPage();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nImageID"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean TiffAddToNativeMultiPage(SalNumber nImageID, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nImageID;
				returnValue = _Interface.TiffAddToNativeMultiPage(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean ConvertTo1Bpp(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ConvertTo1Bpp();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean ConvertTo4Bpp(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ConvertTo4Bpp();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean ConvertTo8BppGrayScale(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ConvertTo8BppGrayScale();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean ConvertTo8Bpp(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ConvertTo8Bpp();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean ConvertTo16Bpp(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ConvertTo16Bpp();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean ConvertTo24BppRGB(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ConvertTo24BppRGB();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean ConvertTo32Bpp(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ConvertTo32Bpp();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean ConvertTo48Bpp(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ConvertTo48Bpp();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean ConvertTo64Bpp(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ConvertTo64Bpp();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nRotation">Important: this is one of the GdTwain2_RotateFlipType constants</param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean Rotate(SalNumber nRotation, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nRotation;
				returnValue = _Interface.Rotate(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nNewImageWidth"></param>
		/// <param name="nNewImageHeight"></param>
		/// <param name="nInterpolationMode">Important: this is one of the GdTwain2_InterpolationMode constants</param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean ResizeImage(SalNumber nNewImageWidth, SalNumber nNewImageHeight, SalNumber nInterpolationMode, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nNewImageWidth;
				int param2 = (int)nNewImageHeight;
				int param3 = (int)nInterpolationMode;
				returnValue = _Interface.ResizeImage(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nImageID"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean CloseImage(SalNumber nImageID, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nImageID;
				returnValue = _Interface.CloseImage(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean CloseNativeImage(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.CloseNativeImage();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveAsBmp(SalString sFilePath, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				returnValue = _Interface.SaveAsBmp(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveAsWBMP(SalString sFilePath, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				returnValue = _Interface.SaveAsWBMP(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveAsXPM(SalString sFilePath, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				returnValue = _Interface.SaveAsXPM(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveAsPNM(SalString sFilePath, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				returnValue = _Interface.SaveAsPNM(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="bTransparentColor"></param>
		/// <param name="nTransparentColor"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveAsICO(SalString sFilePath, SalBoolean bTransparentColor, SalNumber nTransparentColor, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				bool param2 = (bool)bTransparentColor;
				int param3 = (int)nTransparentColor;
				returnValue = _Interface.SaveAsICO(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="nCompression">Important: this is one of the GdTwain2_ExrCompression constants</param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveAsEXR(SalString sFilePath, SalNumber nCompression, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				int param2 = (int)nCompression;
				returnValue = _Interface.SaveAsEXR(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="sTitle"></param>
		/// <param name="sCreator"></param>
		/// <param name="sAuthor"></param>
		/// <param name="sProducer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean SaveAsPDF(SalString sFilePath, SalString sTitle, SalString sCreator, SalString sAuthor, SalString sProducer, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				string param2 = (string)sTitle;
				string param3 = (string)sCreator;
				string param4 = (string)sAuthor;
				string param5 = (string)sProducer;
				returnValue = _Interface.SaveAsPDF(param1, param2, param3, param4, param5);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="sTitle"></param>
		/// <param name="sAuthor"></param>
		/// <param name="sSubject"></param>
		/// <param name="sKeywords"></param>
		/// <param name="sCreator"></param>
		/// <param name="nPdfEncryption">Important: this is one of the GdTwain2_PdfEncryption constants</param>
		/// <param name="nPDFRight">Important: this is one of the GdTwain2_PdfRight constants</param>
		/// <param name="sUserpassWord"></param>
		/// <param name="sOwnerPassword"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean SaveAsPDFEx(SalString sFilePath, SalString sTitle, SalString sAuthor, SalString sSubject, SalString sKeywords, SalString sCreator, SalNumber nPdfEncryption, SalNumber nPDFRight, SalString sUserpassWord, SalString sOwnerPassword, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				string param2 = (string)sTitle;
				string param3 = (string)sAuthor;
				string param4 = (string)sSubject;
				string param5 = (string)sKeywords;
				string param6 = (string)sCreator;
				int param7 = (int)nPdfEncryption;
				int param8 = (int)nPDFRight;
				string param9 = (string)sUserpassWord;
				string param10 = (string)sOwnerPassword;
				returnValue = _Interface.SaveAsPDFEx(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="sTitle"></param>
		/// <param name="sCreator"></param>
		/// <param name="sAuthor"></param>
		/// <param name="sProducer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean SaveAsPDFA(SalString sFilePath, SalString sTitle, SalString sCreator, SalString sAuthor, SalString sProducer, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				string param2 = (string)sTitle;
				string param3 = (string)sCreator;
				string param4 = (string)sAuthor;
				string param5 = (string)sProducer;
				returnValue = _Interface.SaveAsPDFA(param1, param2, param3, param4, param5);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="sTitle"></param>
		/// <param name="sAuthor"></param>
		/// <param name="sSubject"></param>
		/// <param name="sKeywords"></param>
		/// <param name="sCreator"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean SaveAsPDFAEx(SalString sFilePath, SalString sTitle, SalString sAuthor, SalString sSubject, SalString sKeywords, SalString sCreator, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				string param2 = (string)sTitle;
				string param3 = (string)sAuthor;
				string param4 = (string)sSubject;
				string param5 = (string)sKeywords;
				string param6 = (string)sCreator;
				returnValue = _Interface.SaveAsPDFAEx(param1, param2, param3, param4, param5, param6);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveAsGIF(SalString sFilePath, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				returnValue = _Interface.SaveAsGIF(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveAsGIFi(SalString sFilePath, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				returnValue = _Interface.SaveAsGIFi(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveAsPNG(SalString sFilePath, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				returnValue = _Interface.SaveAsPNG(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="nQuality"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveAsJPEG(SalString sFilePath, SalNumber nQuality, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				int param2 = (int)nQuality;
				returnValue = _Interface.SaveAsJPEG(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="nDictionary">Important: this is one of the GdTwain2_TesseractDictionary constants</param>
		/// <param name="sDictionaryPath"></param>
		/// <param name="sCharWhiteList"></param>
		/// <param name="sTitle"></param>
		/// <param name="sCreator"></param>
		/// <param name="sAuthor"></param>
		/// <param name="sProducer"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean SaveAsPDFOCR(SalString sFilePath, SalNumber nDictionary, SalString sDictionaryPath, SalString sCharWhiteList, SalString sTitle, SalString sCreator, SalString sAuthor, SalString sProducer, ref SalString returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				int param2 = (int)nDictionary;
				string param3 = (string)sDictionaryPath;
				string param4 = (string)sCharWhiteList;
				string param5 = (string)sTitle;
				string param6 = (string)sCreator;
				string param7 = (string)sAuthor;
				string param8 = (string)sProducer;
				returnValue = _Interface.SaveAsPDFOCR(param1, param2, param3, param4, param5, param6, param7, param8);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="nDictionary">Important: this is one of the GdTwain2_TesseractDictionary constants</param>
		/// <param name="sDictionaryPath"></param>
		/// <param name="sCharWhiteList"></param>
		/// <param name="sTitle"></param>
		/// <param name="sAuthor"></param>
		/// <param name="sSubject"></param>
		/// <param name="sKeywords"></param>
		/// <param name="sCreator"></param>
		/// <param name="nPdfEncryption">Important: this is one of the GdTwain2_PdfEncryption constants</param>
		/// <param name="nPDFRight">Important: this is one of the GdTwain2_PdfRight constants</param>
		/// <param name="sUserpassWord"></param>
		/// <param name="sOwnerPassword"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean SaveAsPDFOCREx(SalString sFilePath, SalNumber nDictionary, SalString sDictionaryPath, SalString sCharWhiteList, SalString sTitle, SalString sAuthor, SalString sSubject, SalString sKeywords, SalString sCreator, SalNumber nPdfEncryption, SalNumber nPDFRight, SalString sUserpassWord, SalString sOwnerPassword, ref SalString returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				int param2 = (int)nDictionary;
				string param3 = (string)sDictionaryPath;
				string param4 = (string)sCharWhiteList;
				string param5 = (string)sTitle;
				string param6 = (string)sAuthor;
				string param7 = (string)sSubject;
				string param8 = (string)sKeywords;
				string param9 = (string)sCreator;
				int param10 = (int)nPdfEncryption;
				int param11 = (int)nPDFRight;
				string param12 = (string)sUserpassWord;
				string param13 = (string)sOwnerPassword;
				returnValue = _Interface.SaveAsPDFOCREx(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveAsTGA(SalString sFilePath, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				returnValue = _Interface.SaveAsTGA(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveAsPBM(SalString sFilePath, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				returnValue = _Interface.SaveAsPBM(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="nRate"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveAsJ2K(SalString sFilePath, SalNumber nRate, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				int param2 = (int)nRate;
				returnValue = _Interface.SaveAsJ2K(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="nRate"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveAsJP2(SalString sFilePath, SalNumber nRate, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				int param2 = (int)nRate;
				returnValue = _Interface.SaveAsJP2(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sImageFormat"></param>
		/// <param name="nEncoderParameter"></param>
		/// <param name="sHost"></param>
		/// <param name="sPath"></param>
		/// <param name="sLogin"></param>
		/// <param name="sPassword"></param>
		/// <param name="nFTPPort"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveToFTP(SalString sImageFormat, SalNumber nEncoderParameter, SalString sHost, SalString sPath, SalString sLogin, SalString sPassword, SalNumber nFTPPort, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sImageFormat;
				int param2 = (int)nEncoderParameter;
				string param3 = (string)sHost;
				string param4 = (string)sPath;
				string param5 = (string)sLogin;
				string param6 = (string)sPassword;
				int param7 = (int)nFTPPort;
				returnValue = _Interface.SaveToFTP(param1, param2, param3, param4, param5, param6, param7);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="nModeCompression">Important: this is one of the GdTwain2_TifCompression constants</param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveAsTIFF(SalString sFilePath, SalNumber nModeCompression, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				int param2 = (int)nModeCompression;
				returnValue = _Interface.SaveAsTIFF(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveAsTIFFjpg(SalString sFilePath, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				returnValue = _Interface.SaveAsTIFFjpg(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="nQuality"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveAsTIFFjpgEx(SalString sFilePath, SalNumber nQuality, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				int param2 = (int)nQuality;
				returnValue = _Interface.SaveAsTIFFjpgEx(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetHBitmap(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetHBitmap();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetHICON(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetHICON();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nHbitmap"></param>
		/// <returns></returns>
		public SalBoolean DeleteHBitmap(SalNumber nHbitmap)
		{
			#region Actions
			try
			{
				int param1 = (int)nHbitmap;
				_Interface.DeleteHBitmap(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nHICON"></param>
		/// <returns></returns>
		public SalBoolean DeleteHICON(SalNumber nHICON)
		{
			#region Actions
			try
			{
				int param1 = (int)nHICON;
				_Interface.DeleteHICON(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nImageID"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetGdPictureImageDC(SalNumber nImageID, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nImageID;
				returnValue = _Interface.GetGdPictureImageDC(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hdc"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean ReleaseGdPictureImageDC(SalNumber hdc, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hdc;
				returnValue = _Interface.ReleaseGdPictureImageDC(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetNativeImage(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetNativeImage();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetPicture(stdole_Picture returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetPicture();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="oPictureObject"></param>
		/// <returns></returns>
		public SalBoolean DeletePictureObject(stdole_Picture oPictureObject)
		{
			#region Actions
			try
			{
				stdole_Picture param1 = (stdole_Picture)oPictureObject;
				_Interface.DeletePictureObject(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetDib(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetDib();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nDib"></param>
		/// <returns></returns>
		public SalBoolean RemoveDib(SalNumber nDib)
		{
			#region Actions
			try
			{
				int param1 = (int)nDib;
				_Interface.RemoveDib(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetGdiplusImage(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetGdiplusImage();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nImageID"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetPictureFromGdPictureImage(SalNumber nImageID, stdole_Picture returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nImageID;
				returnValue = _Interface.GetPictureFromGdPictureImage(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="arBytes"></param>
		/// <param name="nBytesRead"></param>
		/// <param name="sImageFormat"></param>
		/// <param name="nEncoderParameter"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean SaveAsByteArray(SalSafeArray arBytes, ref SalNumber nBytesRead, SalString sImageFormat, SalNumber nEncoderParameter, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				object[] param1 = (object[])arBytes.Value;
				int param2 = (int)nBytesRead;
				string param3 = (string)sImageFormat;
				int param4 = (int)nEncoderParameter;
				returnValue = _Interface.SaveAsByteArray(param1, ref param2, param3, param4);
				nBytesRead = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sImageFormat"></param>
		/// <param name="nEncoderParameter"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean SaveAsString(SalString sImageFormat, SalNumber nEncoderParameter, ref SalString returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sImageFormat;
				int param2 = (int)nEncoderParameter;
				returnValue = _Interface.SaveAsString(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="sTitle"></param>
		/// <param name="sCreator"></param>
		/// <param name="sAuthor"></param>
		/// <param name="sProducer"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean TwainPdfStart(SalString sFilePath, SalString sTitle, SalString sCreator, SalString sAuthor, SalString sProducer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				string param2 = (string)sTitle;
				string param3 = (string)sCreator;
				string param4 = (string)sAuthor;
				string param5 = (string)sProducer;
				returnValue = _Interface.TwainPdfStart(param1, param2, param3, param4, param5);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="sTitle"></param>
		/// <param name="sAuthor"></param>
		/// <param name="sSubject"></param>
		/// <param name="sKeywords"></param>
		/// <param name="sCreator"></param>
		/// <param name="nPdfEncryption">Important: this is one of the GdTwain2_PdfEncryption constants</param>
		/// <param name="nPDFRight">Important: this is one of the GdTwain2_PdfRight constants</param>
		/// <param name="sUserpassWord"></param>
		/// <param name="sOwnerPassword"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean TwainPdfStartEx(SalString sFilePath, SalString sTitle, SalString sAuthor, SalString sSubject, SalString sKeywords, SalString sCreator, SalNumber nPdfEncryption, SalNumber nPDFRight, SalString sUserpassWord, SalString sOwnerPassword, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				string param2 = (string)sTitle;
				string param3 = (string)sAuthor;
				string param4 = (string)sSubject;
				string param5 = (string)sKeywords;
				string param6 = (string)sCreator;
				int param7 = (int)nPdfEncryption;
				int param8 = (int)nPDFRight;
				string param9 = (string)sUserpassWord;
				string param10 = (string)sOwnerPassword;
				returnValue = _Interface.TwainPdfStartEx(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="sTitle"></param>
		/// <param name="sCreator"></param>
		/// <param name="sAuthor"></param>
		/// <param name="sProducer"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean TwainPdfOCRStart(SalString sFilePath, SalString sTitle, SalString sCreator, SalString sAuthor, SalString sProducer, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				string param2 = (string)sTitle;
				string param3 = (string)sCreator;
				string param4 = (string)sAuthor;
				string param5 = (string)sProducer;
				returnValue = _Interface.TwainPdfOCRStart(param1, param2, param3, param4, param5);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="sTitle"></param>
		/// <param name="sAuthor"></param>
		/// <param name="sSubject"></param>
		/// <param name="sKeywords"></param>
		/// <param name="sCreator"></param>
		/// <param name="nPdfEncryption">Important: this is one of the GdTwain2_PdfEncryption constants</param>
		/// <param name="nPDFRight">Important: this is one of the GdTwain2_PdfRight constants</param>
		/// <param name="sUserpassWord"></param>
		/// <param name="sOwnerPassword"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean TwainPdfOCRStartEx(SalString sFilePath, SalString sTitle, SalString sAuthor, SalString sSubject, SalString sKeywords, SalString sCreator, SalNumber nPdfEncryption, SalNumber nPDFRight, SalString sUserpassWord, SalString sOwnerPassword, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				string param2 = (string)sTitle;
				string param3 = (string)sAuthor;
				string param4 = (string)sSubject;
				string param5 = (string)sKeywords;
				string param6 = (string)sCreator;
				int param7 = (int)nPdfEncryption;
				int param8 = (int)nPDFRight;
				string param9 = (string)sUserpassWord;
				string param10 = (string)sOwnerPassword;
				returnValue = _Interface.TwainPdfOCRStartEx(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nImageID"></param>
		/// <param name="nDictionary">Important: this is one of the GdTwain2_TesseractDictionary constants</param>
		/// <param name="sDictionaryPath"></param>
		/// <param name="sCharWhiteList"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainAddGdPictureImageToPdfOCR(SalNumber nImageID, SalNumber nDictionary, SalString sDictionaryPath, SalString sCharWhiteList, ref SalString returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nImageID;
				int param2 = (int)nDictionary;
				string param3 = (string)sDictionaryPath;
				string param4 = (string)sCharWhiteList;
				returnValue = _Interface.TwainAddGdPictureImageToPdfOCR(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean TwainPdfOCRStop(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainPdfOCRStop();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nImageID"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean TwainAddGdPictureImageToPdf(SalNumber nImageID, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nImageID;
				returnValue = _Interface.TwainAddGdPictureImageToPdf(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean TwainPdfStop(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainPdfStop();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableBarCodeTypeCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetAvailableBarCodeTypeCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nNumber"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_TwainBarCodeType constants</param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableBarCodeTypeNo(SalNumber nNumber, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nNumber;
				returnValue = _Interface.TwainGetAvailableBarCodeTypeNo(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainBarCodeGetCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainBarCodeGetCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nBarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainBarCodeGetValue(SalNumber nBarCodeNo, ref SalString returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nBarCodeNo;
				returnValue = _Interface.TwainBarCodeGetValue(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nBarCodeNo"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_TwainBarCodeType constants</param>
		/// <returns></returns>
		public SalBoolean TwainBarCodeGetType(SalNumber nBarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nBarCodeNo;
				returnValue = _Interface.TwainBarCodeGetType(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nBarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainBarCodeGetXPos(SalNumber nBarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nBarCodeNo;
				returnValue = _Interface.TwainBarCodeGetXPos(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nBarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainBarCodeGetYPos(SalNumber nBarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nBarCodeNo;
				returnValue = _Interface.TwainBarCodeGetYPos(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nBarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainBarCodeGetConfidence(SalNumber nBarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nBarCodeNo;
				returnValue = _Interface.TwainBarCodeGetConfidence(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nBarCodeNo"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_TwainBarCodeRotation constants</param>
		/// <returns></returns>
		public SalBoolean TwainBarCodeGetRotation(SalNumber nBarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nBarCodeNo;
				returnValue = _Interface.TwainBarCodeGetRotation(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hwnd"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainAcquireToGdPictureImage(SalNumber hwnd, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hwnd;
				returnValue = _Interface.TwainAcquireToGdPictureImage(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hwnd"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainAcquireToDib(SalNumber hwnd, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hwnd;
				returnValue = _Interface.TwainAcquireToDib(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sFilePath"></param>
		/// <param name="hwnd"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean TwainAcquireToFile(SalString sFilePath, SalNumber hwnd, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sFilePath;
				int param2 = (int)hwnd;
				returnValue = _Interface.TwainAcquireToFile(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sLogPath"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainLogStart(SalString sLogPath, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sLogPath;
				returnValue = _Interface.TwainLogStart(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean TwainLogStop()
		{
			#region Actions
			try
			{
				_Interface.TwainLogStop();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainCloseSource(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainCloseSource();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hwnd"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainCloseSourceManager(SalNumber hwnd, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hwnd;
				returnValue = _Interface.TwainCloseSourceManager(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bDisableAutoSourceClose"></param>
		/// <returns></returns>
		public SalBoolean TwainDisableAutoSourceClose(SalBoolean bDisableAutoSourceClose)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bDisableAutoSourceClose;
				_Interface.TwainDisableAutoSourceClose(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainDisableSource(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainDisableSource();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bDuplex"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainEnableDuplex(SalBoolean bDuplex, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bDuplex;
				returnValue = _Interface.TwainEnableDuplex(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nMajorNumVersion"></param>
		/// <param name="nMinorNumVersion"></param>
		/// <param name="nLanguageID">Important: this is one of the GdTwain2_TwainLanguage constants</param>
		/// <param name="nCountryID">Important: this is one of the GdTwain2_TwainCountry constants</param>
		/// <param name="sVersionInfo"></param>
		/// <param name="sCompanyName"></param>
		/// <param name="sProductFamily"></param>
		/// <param name="sProductName"></param>
		/// <returns></returns>
		public SalBoolean TwainSetApplicationInfo(SalNumber nMajorNumVersion, SalNumber nMinorNumVersion, SalNumber nLanguageID, SalNumber nCountryID, SalString sVersionInfo, SalString sCompanyName, SalString sProductFamily, SalString sProductName)
		{
			#region Actions
			try
			{
				int param1 = (int)nMajorNumVersion;
				int param2 = (int)nMinorNumVersion;
				int param3 = (int)nLanguageID;
				int param4 = (int)nCountryID;
				string param5 = (string)sVersionInfo;
				string param6 = (string)sCompanyName;
				string param7 = (string)sProductFamily;
				string param8 = (string)sProductName;
				_Interface.TwainSetApplicationInfo(param1, param2, param3, param4, param5, param6, param7, param8);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainUserClosedSource(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainUserClosedSource();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainLastXferFail(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainLastXferFail();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainEndAllXfers(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainEndAllXfers();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainEndXfer(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainEndXfer();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="arValues"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableImageFileFormat(SalSafeArray arValues, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				object[] param1 = (object[])arValues.Value;
				returnValue = _Interface.TwainGetAvailableImageFileFormat(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableImageFileFormatCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetAvailableImageFileFormatCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nNumber"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_TwainImageFileFormats constants</param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableImageFileFormatNo(SalNumber nNumber, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nNumber;
				returnValue = _Interface.TwainGetAvailableImageFileFormatNo(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nImageFileFormat">Important: this is one of the GdTwain2_TwainImageFileFormats constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetCurrentImageFileFormat(SalNumber nImageFileFormat, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nImageFileFormat;
				returnValue = _Interface.TwainSetCurrentImageFileFormat(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetCurrentImageFileFormat(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetCurrentImageFileFormat();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCompression">Important: this is one of the GdTwain2_TwainCompression constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetCurrentCompression(SalNumber nCompression, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCompression;
				returnValue = _Interface.TwainSetCurrentCompression(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetCurrentCompression(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetCurrentCompression();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="arValues"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableCompression(SalSafeArray arValues, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				object[] param1 = (object[])arValues.Value;
				returnValue = _Interface.TwainGetAvailableCompression(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableCompressionCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetAvailableCompressionCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nNumber"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_TwainCompression constants</param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableCompressionNo(SalNumber nNumber, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nNumber;
				returnValue = _Interface.TwainGetAvailableCompressionNo(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="arValues"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableBrightness(SalSafeArray arValues, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				object[] param1 = (object[])arValues.Value;
				returnValue = _Interface.TwainGetAvailableBrightness(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableBrightnessCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetAvailableBrightnessCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nNumber"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableBrightnessNo(SalNumber nNumber, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nNumber;
				returnValue = _Interface.TwainGetAvailableBrightnessNo(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="arValues"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableContrast(SalSafeArray arValues, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				object[] param1 = (object[])arValues.Value;
				returnValue = _Interface.TwainGetAvailableContrast(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableContrastCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetAvailableContrastCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nNumber"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableContrastNo(SalNumber nNumber, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nNumber;
				returnValue = _Interface.TwainGetAvailableContrastNo(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="arValues"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableBitDepths(SalSafeArray arValues, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				object[] param1 = (object[])arValues.Value;
				returnValue = _Interface.TwainGetAvailableBitDepths(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableBitDepthsCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetAvailableBitDepthsCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nNumber"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableBitDepthNo(SalNumber nNumber, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nNumber;
				returnValue = _Interface.TwainGetAvailableBitDepthNo(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="arValues"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailablePixelTypes(SalSafeArray arValues, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				object[] param1 = (object[])arValues.Value;
				returnValue = _Interface.TwainGetAvailablePixelTypes(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailablePixelTypesCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetAvailablePixelTypesCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nNumber"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_TwainPixelType constants</param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailablePixelTypeNo(SalNumber nNumber, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nNumber;
				returnValue = _Interface.TwainGetAvailablePixelTypeNo(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="arValues"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableXResolutions(SalSafeArray arValues, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				object[] param1 = (object[])arValues.Value;
				returnValue = _Interface.TwainGetAvailableXResolutions(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableXResolutionsCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetAvailableXResolutionsCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nNumber"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableXResolutionNo(SalNumber nNumber, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nNumber;
				returnValue = _Interface.TwainGetAvailableXResolutionNo(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="arValues"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableYResolutions(SalSafeArray arValues, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				object[] param1 = (object[])arValues.Value;
				returnValue = _Interface.TwainGetAvailableYResolutions(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableYResolutionsCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetAvailableYResolutionsCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nNumber"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableYResolutionNo(SalNumber nNumber, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nNumber;
				returnValue = _Interface.TwainGetAvailableYResolutionNo(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCap">Important: this is one of the GdTwain2_TwainCapabilities constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableCapValuesCount(SalNumber nCap, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCap;
				returnValue = _Interface.TwainGetAvailableCapValuesCount(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCap">Important: this is one of the GdTwain2_TwainCapabilities constants</param>
		/// <param name="arValues"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableCapValuesNumeric(SalNumber nCap, SalSafeArray arValues, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCap;
				object[] param2 = (object[])arValues.Value;
				returnValue = _Interface.TwainGetAvailableCapValuesNumeric(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCap">Important: this is one of the GdTwain2_TwainCapabilities constants</param>
		/// <param name="arValues"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableCapValuesString(SalNumber nCap, SalSafeArray arValues, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCap;
				object[] param2 = (object[])arValues.Value;
				returnValue = _Interface.TwainGetAvailableCapValuesString(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCap">Important: this is one of the GdTwain2_TwainCapabilities constants</param>
		/// <param name="nNumber"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableCapValueNoNumeric(SalNumber nCap, SalNumber nNumber, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCap;
				int param2 = (int)nNumber;
				returnValue = _Interface.TwainGetAvailableCapValueNoNumeric(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCap">Important: this is one of the GdTwain2_TwainCapabilities constants</param>
		/// <param name="nNumber"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailableCapValueNoString(SalNumber nCap, SalNumber nNumber, ref SalString returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCap;
				int param2 = (int)nNumber;
				returnValue = _Interface.TwainGetAvailableCapValueNoString(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCap">Important: this is one of the GdTwain2_TwainCapabilities constants</param>
		/// <param name="nCurrentValue"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetCapCurrentNumeric(SalNumber nCap, ref SalNumber nCurrentValue, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCap;
				int param2 = (int)nCurrentValue;
				returnValue = _Interface.TwainGetCapCurrentNumeric(param1, ref param2);
				nCurrentValue = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCap">Important: this is one of the GdTwain2_TwainCapabilities constants</param>
		/// <param name="nMinValue"></param>
		/// <param name="nMaxValue"></param>
		/// <param name="nStepValue"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetCapRangeNumeric(SalNumber nCap, ref SalNumber nMinValue, ref SalNumber nMaxValue, ref SalNumber nStepValue, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCap;
				int param2 = (int)nMinValue;
				int param3 = (int)nMaxValue;
				int param4 = (int)nStepValue;
				returnValue = _Interface.TwainGetCapRangeNumeric(param1, ref param2, ref param3, ref param4);
				nMinValue = param2;
				nMaxValue = param3;
				nStepValue = param4;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCap">Important: this is one of the GdTwain2_TwainCapabilities constants</param>
		/// <param name="sCurrentValue"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetCapCurrentString(SalNumber nCap, ref SalString sCurrentValue, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCap;
				string param2 = (string)sCurrentValue;
				returnValue = _Interface.TwainGetCapCurrentString(param1, ref param2);
				sCurrentValue = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainHasFeeder(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainHasFeeder();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainHasFlatBed(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainHasFlatBed();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsFeederSelected(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsFeederSelected();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsDeviceOnline(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsDeviceOnline();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bSelectFeeder"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSelectFeeder(SalBoolean bSelectFeeder, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bSelectFeeder;
				returnValue = _Interface.TwainSelectFeeder(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsAutoFeedOn(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsAutoFeedOn();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsFeederLoaded(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsFeederLoaded();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCap">Important: this is one of the GdTwain2_TwainCapabilities constants</param>
		/// <param name="nItemType">Important: this is one of the GdTwain2_TwainItemTypes constants</param>
		/// <param name="nNewValue"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetCapCurrentNumeric(SalNumber nCap, SalNumber nItemType, SalNumber nNewValue, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCap;
				int param2 = (int)nItemType;
				int param3 = (int)nNewValue;
				returnValue = _Interface.TwainSetCapCurrentNumeric(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCap">Important: this is one of the GdTwain2_TwainCapabilities constants</param>
		/// <param name="nItemType">Important: this is one of the GdTwain2_TwainItemTypes constants</param>
		/// <param name="sNewValue"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetCapCurrentString(SalNumber nCap, SalNumber nItemType, SalString sNewValue, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCap;
				int param2 = (int)nItemType;
				string param3 = (string)sNewValue;
				returnValue = _Interface.TwainSetCapCurrentString(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCap">Important: this is one of the GdTwain2_TwainCapabilities constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainResetCap(SalNumber nCap, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCap;
				returnValue = _Interface.TwainResetCap(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCap">Important: this is one of the GdTwain2_TwainCapabilities constants</param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_TwainItemTypes constants</param>
		/// <returns></returns>
		public SalBoolean TwainGetCapItemType(SalNumber nCap, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCap;
				returnValue = _Interface.TwainGetCapItemType(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetCurrentBitDepth(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetCurrentBitDepth();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetCurrentThreshold(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetCurrentThreshold();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nThreshold"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetCurrentThreshold(SalNumber nThreshold, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nThreshold;
				returnValue = _Interface.TwainSetCurrentThreshold(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainHasCameraPreviewUI(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainHasCameraPreviewUI();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetCurrentPlanarChunky(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetCurrentPlanarChunky();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPlanarChunky"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetCurrentPlanarChunky(SalNumber nPlanarChunky, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nPlanarChunky;
				returnValue = _Interface.TwainSetCurrentPlanarChunky(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetCurrentPixelFlavor(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetCurrentPixelFlavor();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPixelFlavor"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetCurrentPixelFlavor(SalNumber nPixelFlavor, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nPixelFlavor;
				returnValue = _Interface.TwainSetCurrentPixelFlavor(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetCurrentBrightness(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetCurrentBrightness();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetCurrentContrast(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetCurrentContrast();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_TwainPixelType constants</param>
		/// <returns></returns>
		public SalBoolean TwainGetCurrentPixelType(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetCurrentPixelType();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetCurrentResolution(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetCurrentResolution();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetCurrentSourceName(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetCurrentSourceName();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetDefaultSourceName(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetDefaultSourceName();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetDuplexMode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetDuplexMode();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetHideUI(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetHideUI();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_TwainConditionCode constants</param>
		/// <returns></returns>
		public SalBoolean TwainGetLastConditionCode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetLastConditionCode();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_TwainResultCode constants</param>
		/// <returns></returns>
		public SalBoolean TwainGetLastResultCode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetLastResultCode();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_TwainPaperSize constants</param>
		/// <returns></returns>
		public SalBoolean TwainGetPaperSize(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetPaperSize();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="arValues"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailablePaperSize(SalSafeArray arValues, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				object[] param1 = (object[])arValues.Value;
				returnValue = _Interface.TwainGetAvailablePaperSize(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailablePaperSizeCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetAvailablePaperSizeCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nNumber"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_TwainPaperSize constants</param>
		/// <returns></returns>
		public SalBoolean TwainGetAvailablePaperSizeNo(SalNumber nNumber, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nNumber;
				returnValue = _Interface.TwainGetAvailablePaperSizeNo(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetPhysicalHeight(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetPhysicalHeight();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetPhysicalWidth(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetPhysicalWidth();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetSourceCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetSourceCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nSourceNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetSourceName(SalNumber nSourceNo, ref SalString returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nSourceNo;
				returnValue = _Interface.TwainGetSourceName(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_TwainStatus constants</param>
		/// <returns></returns>
		public SalBoolean TwainGetState(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainGetState();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsAvailable(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsAvailable();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsDuplexEnabled(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsDuplexEnabled();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsFileTransferModeAvailable(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsFileTransferModeAvailable();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPixelType">Important: this is one of the GdTwain2_TwainPixelType constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsPixelTypeAvailable(SalNumber nPixelType, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nPixelType;
				returnValue = _Interface.TwainIsPixelTypeAvailable(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainOpenDefaultSource(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainOpenDefaultSource();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sSourceName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainOpenSource(SalString sSourceName, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sSourceName;
				returnValue = _Interface.TwainOpenSource(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainResetImageLayout(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainResetImageLayout();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hwnd"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSelectSource(SalNumber hwnd, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hwnd;
				returnValue = _Interface.TwainSelectSource(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bAutoBrightness"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetAutoBrightness(SalBoolean bAutoBrightness, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bAutoBrightness;
				returnValue = _Interface.TwainSetAutoBrightness(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bAutoFeed"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetAutoFeed(SalBoolean bAutoFeed, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bAutoFeed;
				returnValue = _Interface.TwainSetAutoFeed(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bAutoBorderDetect"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetAutomaticBorderDetection(SalBoolean bAutoBorderDetect, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bAutoBorderDetect;
				returnValue = _Interface.TwainSetAutomaticBorderDetection(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsAutomaticBorderDetectionAvailable(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsAutomaticBorderDetectionAvailable();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsAutomaticBorderDetectionEnabled(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsAutomaticBorderDetectionEnabled();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsBarcodeDetectionAvailable(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsBarcodeDetectionAvailable();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsBarcodeDetectionEnabled(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsBarcodeDetectionEnabled();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bBarcodeDetection"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetBarcodeDetection(SalBoolean bBarcodeDetection, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bBarcodeDetection;
				returnValue = _Interface.TwainSetBarcodeDetection(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bAutoDeskew"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetAutomaticDeskew(SalBoolean bAutoDeskew, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bAutoDeskew;
				returnValue = _Interface.TwainSetAutomaticDeskew(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsAutomaticDeskewAvailable(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsAutomaticDeskewAvailable();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsAutomaticDeskewEnabled(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsAutomaticDeskewEnabled();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsAutomaticDiscardBlankPagesAvailable(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsAutomaticDiscardBlankPagesAvailable();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsAutomaticDiscardBlankPagesEnabled(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsAutomaticDiscardBlankPagesEnabled();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bAutoDiscard"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetAutomaticDiscardBlankPages(SalBoolean bAutoDiscard, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bAutoDiscard;
				returnValue = _Interface.TwainSetAutomaticDiscardBlankPages(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bAutoRotate"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetAutomaticRotation(SalBoolean bAutoRotate, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bAutoRotate;
				returnValue = _Interface.TwainSetAutomaticRotation(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsAutomaticRotationAvailable(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsAutomaticRotationAvailable();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsAutomaticRotationEnabled(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsAutomaticRotationEnabled();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsAutoScanAvailable(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsAutoScanAvailable();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsAutoScanEnabled(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsAutoScanEnabled();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsAutoFeedAvailable(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsAutoFeedAvailable();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsAutoFeedEnabled(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsAutoFeedEnabled();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsAutoSizeAvailable(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsAutoSizeAvailable();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsAutoSizeEnabled(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsAutoSizeEnabled();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bAutoSize"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetAutoSize(SalBoolean bAutoSize, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bAutoSize;
				returnValue = _Interface.TwainSetAutoSize(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsAutoBrightnessAvailable(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsAutoBrightnessAvailable();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainIsAutoBrightnessEnabled(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainIsAutoBrightnessEnabled();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bAutoScan"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetAutoScan(SalBoolean bAutoScan, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bAutoScan;
				returnValue = _Interface.TwainSetAutoScan(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nBitDepth"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetCurrentBitDepth(SalNumber nBitDepth, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nBitDepth;
				returnValue = _Interface.TwainSetCurrentBitDepth(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nBrightnessValue"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetCurrentBrightness(SalNumber nBrightnessValue, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nBrightnessValue;
				returnValue = _Interface.TwainSetCurrentBrightness(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nContrastValue"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetCurrentContrast(SalNumber nContrastValue, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nContrastValue;
				returnValue = _Interface.TwainSetCurrentContrast(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPixelType">Important: this is one of the GdTwain2_TwainPixelType constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetCurrentPixelType(SalNumber nPixelType, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nPixelType;
				returnValue = _Interface.TwainSetCurrentPixelType(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nResolution"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetCurrentResolution(SalNumber nResolution, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nResolution;
				returnValue = _Interface.TwainSetCurrentResolution(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bDebugMode"></param>
		/// <returns></returns>
		public SalBoolean TwainSetDebugMode(SalBoolean bDebugMode)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bDebugMode;
				_Interface.TwainSetDebugMode(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sDSMPath"></param>
		/// <returns></returns>
		public SalBoolean TwainSetDSMPath(SalString sDSMPath)
		{
			#region Actions
			try
			{
				string param1 = (string)sDSMPath;
				_Interface.TwainSetDSMPath(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bShowErrors"></param>
		/// <returns></returns>
		public SalBoolean TwainSetErrorMessage(SalBoolean bShowErrors)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bShowErrors;
				_Interface.TwainSetErrorMessage(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nLeft"></param>
		/// <param name="nTop"></param>
		/// <param name="nRight"></param>
		/// <param name="nBottom"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetImageLayout(SalNumber nLeft, SalNumber nTop, SalNumber nRight, SalNumber nBottom, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				double param1 = (double)nLeft;
				double param2 = (double)nTop;
				double param3 = (double)nRight;
				double param4 = (double)nBottom;
				returnValue = _Interface.TwainSetImageLayout(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nLeft"></param>
		/// <param name="nTop"></param>
		/// <param name="nRight"></param>
		/// <param name="nBottom"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainGetImageLayout(ref SalNumber nLeft, ref SalNumber nTop, ref SalNumber nRight, ref SalNumber nBottom, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nLeft;
				int param2 = (int)nTop;
				int param3 = (int)nRight;
				int param4 = (int)nBottom;
				returnValue = _Interface.TwainGetImageLayout(ref param1, ref param2, ref param3, ref param4);
				nLeft = param1;
				nTop = param2;
				nRight = param3;
				nBottom = param4;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bHide"></param>
		/// <returns></returns>
		public SalBoolean TwainSetHideUI(SalBoolean bHide)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bHide;
				_Interface.TwainSetHideUI(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bShowIndicator"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetIndicators(SalBoolean bShowIndicator, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bShowIndicator;
				returnValue = _Interface.TwainSetIndicators(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bMultiTransfer"></param>
		/// <returns></returns>
		public SalBoolean TwainSetMultiTransfer(SalBoolean bMultiTransfer)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bMultiTransfer;
				_Interface.TwainSetMultiTransfer(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nSize">Important: this is one of the GdTwain2_TwainPaperSize constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetPaperSize(SalNumber nSize, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nSize;
				returnValue = _Interface.TwainSetPaperSize(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nXfers"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainSetXferCount(SalNumber nXfers, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nXfers;
				returnValue = _Interface.TwainSetXferCount(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hwnd"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainShowSetupDialogSource(SalNumber hwnd, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)hwnd;
				returnValue = _Interface.TwainShowSetupDialogSource(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TwainUnloadSourceManager(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TwainUnloadSourceManager();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ScanMode">Important: this is one of the GdTwain2_Barcode1DReaderScanMode constants</param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean Barcode1DReaderDoScan(SalNumber ScanMode, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)ScanMode;
				returnValue = _Interface.Barcode1DReaderDoScan(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Barcode1DReaderGetBarcodeCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Barcode1DReaderGetBarcodeCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_Barcode1DReaderType constants</param>
		/// <returns></returns>
		public SalBoolean Barcode1DReaderGetBarcodeType(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.Barcode1DReaderGetBarcodeType(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Barcode1DReaderGetBarcodeValue(SalNumber BarCodeNo, ref SalString returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.Barcode1DReaderGetBarcodeValue(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Barcode1DReaderGetBarcodeSkewAngle(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.Barcode1DReaderGetBarcodeSkewAngle(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Barcode1DReaderBarcodeHasChecksum(SalNumber BarCodeNo, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.Barcode1DReaderBarcodeHasChecksum(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Barcode1DReaderGetBarcodeX1(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.Barcode1DReaderGetBarcodeX1(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Barcode1DReaderGetBarcodeY1(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.Barcode1DReaderGetBarcodeY1(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Barcode1DReaderGetBarcodeX2(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.Barcode1DReaderGetBarcodeX2(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Barcode1DReaderGetBarcodeY2(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.Barcode1DReaderGetBarcodeY2(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Barcode1DReaderGetBarcodeX3(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.Barcode1DReaderGetBarcodeX3(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Barcode1DReaderGetBarcodeY3(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.Barcode1DReaderGetBarcodeY3(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Barcode1DReaderGetBarcodeX4(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.Barcode1DReaderGetBarcodeX4(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Barcode1DReaderGetBarcodeY4(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.Barcode1DReaderGetBarcodeY4(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean Barcode1DReaderClear()
		{
			#region Actions
			try
			{
				_Interface.Barcode1DReaderClear();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ScanMode">Important: this is one of the GdTwain2_BarcodeDataMatrixReaderScanMode constants</param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean BarcodeDataMatrixReaderDoScan(SalNumber ScanMode, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)ScanMode;
				returnValue = _Interface.BarcodeDataMatrixReaderDoScan(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean BarcodeDataMatrixReaderGetBarcodeCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.BarcodeDataMatrixReaderGetBarcodeCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean BarcodeDataMatrixReaderGetBarcodeValue(SalNumber BarCodeNo, ref SalString returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.BarcodeDataMatrixReaderGetBarcodeValue(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean BarcodeDataMatrixReaderGetBarcodeX1(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.BarcodeDataMatrixReaderGetBarcodeX1(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean BarcodeDataMatrixReaderGetBarcodeY1(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.BarcodeDataMatrixReaderGetBarcodeY1(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean BarcodeDataMatrixReaderGetBarcodeX2(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.BarcodeDataMatrixReaderGetBarcodeX2(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean BarcodeDataMatrixReaderGetBarcodeY2(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.BarcodeDataMatrixReaderGetBarcodeY2(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean BarcodeDataMatrixReaderGetBarcodeX3(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.BarcodeDataMatrixReaderGetBarcodeX3(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean BarcodeDataMatrixReaderGetBarcodeY3(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.BarcodeDataMatrixReaderGetBarcodeY3(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean BarcodeDataMatrixReaderGetBarcodeX4(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.BarcodeDataMatrixReaderGetBarcodeX4(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean BarcodeDataMatrixReaderGetBarcodeY4(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.BarcodeDataMatrixReaderGetBarcodeY4(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean BarcodeDataMatrixReaderGetBarcodeRows(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.BarcodeDataMatrixReaderGetBarcodeRows(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BarCodeNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean BarcodeDataMatrixReaderGetBarcodeColumns(SalNumber BarCodeNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BarCodeNo;
				returnValue = _Interface.BarcodeDataMatrixReaderGetBarcodeColumns(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean BarcodeDataMatrixReaderClear()
		{
			#region Actions
			try
			{
				_Interface.BarcodeDataMatrixReaderClear();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCharNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean OCRTesseractGetCharConfidence(SalNumber nCharNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCharNo;
				returnValue = _Interface.OCRTesseractGetCharConfidence(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCharNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean OCRTesseractGetCharSpaces(SalNumber nCharNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCharNo;
				returnValue = _Interface.OCRTesseractGetCharSpaces(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCharNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean OCRTesseractGetCharLine(SalNumber nCharNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCharNo;
				returnValue = _Interface.OCRTesseractGetCharLine(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCharNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean OCRTesseractGetCharCode(SalNumber nCharNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCharNo;
				returnValue = _Interface.OCRTesseractGetCharCode(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCharNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean OCRTesseractGetCharLeft(SalNumber nCharNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCharNo;
				returnValue = _Interface.OCRTesseractGetCharLeft(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCharNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean OCRTesseractGetCharRight(SalNumber nCharNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCharNo;
				returnValue = _Interface.OCRTesseractGetCharRight(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCharNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean OCRTesseractGetCharBottom(SalNumber nCharNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCharNo;
				returnValue = _Interface.OCRTesseractGetCharBottom(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nCharNo"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean OCRTesseractGetCharTop(SalNumber nCharNo, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nCharNo;
				returnValue = _Interface.OCRTesseractGetCharTop(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean OCRTesseractGetCharCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.OCRTesseractGetCharCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nDictionary">Important: this is one of the GdTwain2_TesseractDictionary constants</param>
		/// <param name="sDictionaryPath"></param>
		/// <param name="sCharWhiteList"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean OCRTesseractDoOCR(SalNumber nDictionary, SalString sDictionaryPath, SalString sCharWhiteList, ref SalString returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nDictionary;
				string param2 = (string)sDictionaryPath;
				string param3 = (string)sCharWhiteList;
				returnValue = _Interface.OCRTesseractDoOCR(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nDictionary">Important: this is one of the GdTwain2_TesseractDictionary constants</param>
		/// <param name="sDictionaryPath"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_RotateFlipType constants</param>
		/// <returns></returns>
		public SalBoolean OCRTesseractGetOrientation(SalNumber nDictionary, SalString sDictionaryPath, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nDictionary;
				string param2 = (string)sDictionaryPath;
				returnValue = _Interface.OCRTesseractGetOrientation(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nDictionary">Important: this is one of the GdTwain2_TesseractDictionary constants</param>
		/// <param name="sDictionaryPath"></param>
		/// <param name="nAccuracyLevel"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_RotateFlipType constants</param>
		/// <returns></returns>
		public SalBoolean OCRTesseractGetOrientationEx(SalNumber nDictionary, SalString sDictionaryPath, SalNumber nAccuracyLevel, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)nDictionary;
				string param2 = (string)sDictionaryPath;
				float param3 = (float)nAccuracyLevel;
				returnValue = _Interface.OCRTesseractGetOrientationEx(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean OCRTesseractClear()
		{
			#region Actions
			try
			{
				_Interface.OCRTesseractClear();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean ResetROI()
		{
			#region Actions
			try
			{
				_Interface.ResetROI();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bCanPrint"></param>
		/// <param name="bCanModify"></param>
		/// <param name="bCanCopy"></param>
		/// <param name="bCanAddNotes"></param>
		/// <param name="bCanFillFields"></param>
		/// <param name="bCanCopyAccess"></param>
		/// <param name="bCanAssemble"></param>
		/// <param name="bCanprintFull"></param>
		/// <param name="returnValue">Important: this is one of the GdTwain2_PdfRight constants</param>
		/// <returns></returns>
		public SalBoolean PdfCreateRights(SalBoolean bCanPrint, SalBoolean bCanModify, SalBoolean bCanCopy, SalBoolean bCanAddNotes, SalBoolean bCanFillFields, SalBoolean bCanCopyAccess, SalBoolean bCanAssemble, SalBoolean bCanprintFull, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bCanPrint;
				bool param2 = (bool)bCanModify;
				bool param3 = (bool)bCanCopy;
				bool param4 = (bool)bCanAddNotes;
				bool param5 = (bool)bCanFillFields;
				bool param6 = (bool)bCanCopyAccess;
				bool param7 = (bool)bCanAssemble;
				bool param8 = (bool)bCanprintFull;
				returnValue = _Interface.PdfCreateRights(param1, param2, param3, param4, param5, param6, param7, param8);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nLeft"></param>
		/// <param name="nTop"></param>
		/// <param name="nWidth"></param>
		/// <param name="nHeight"></param>
		/// <returns></returns>
		public SalBoolean SetROI(SalNumber nLeft, SalNumber nTop, SalNumber nWidth, SalNumber nHeight)
		{
			#region Actions
			try
			{
				int param1 = (int)nLeft;
				int param2 = (int)nTop;
				int param3 = (int)nWidth;
				int param4 = (int)nHeight;
				_Interface.SetROI(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sStringToEncode"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Encode64String(SalString sStringToEncode, ref SalString returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sStringToEncode;
				returnValue = _Interface.Encode64String(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sStringToDecode"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Decode64String(SalString sStringToDecode, ref SalString returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sStringToDecode;
				returnValue = _Interface.Decode64String(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetVersion(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetVersion();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nBuffersize"></param>
		/// <returns></returns>
		public SalBoolean SetHttpTransfertBufferSize(SalNumber nBuffersize)
		{
			#region Actions
			try
			{
				int param1 = (int)nBuffersize;
				_Interface.SetHttpTransfertBufferSize(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bPassiveMode"></param>
		/// <returns></returns>
		public SalBoolean SetFtpPassiveMode(SalBoolean bPassiveMode)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bPassiveMode;
				_Interface.SetFtpPassiveMode(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the GdTwain2_GdPictureStatus constants</param>
		/// <returns></returns>
		public SalBoolean GetStat(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetStat();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nConfidence"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean IsBlank(SalNumber nConfidence, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				float param1 = (float)nConfidence;
				returnValue = _Interface.IsBlank(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetDesktopHwnd(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetDesktopHwnd();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sKey"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean SetLicenseNumber(SalString sKey, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sKey;
				returnValue = _Interface.SetLicenseNumber(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sKey"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean SetLicenseNumberOCRTesseract(SalString sKey, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sKey;
				returnValue = _Interface.SetLicenseNumberOCRTesseract(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sKey"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean SetLicenseNumber1DBarcodeRecognition(SalString sKey, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)sKey;
				returnValue = _Interface.SetLicenseNumber1DBarcodeRecognition(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LockStat(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LockStat();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetLicenseMode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetLicenseMode();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// This is the real COM interface declaration.
		/// </summary>
		[Guid("D087A269-5AF5-4D6E-A694-2D55A3752DEA")]
		[InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch)]
		public interface COMInterface
		{
			int SetBrightness(int nBrightnessPct);
			int SetContrast(int nContrastPct);
			int SetGammaCorrection(int nGammaFactor);
			int SetSaturation(int nSaturationPct);
			int CopyRegionToClipboard(int nSrcLeft, int nSrcTop, int nWidth, int nHeight);
			int CopyToClipboard();
			void DeleteClipboardData();
			int ColorPaletteGet(object[] nARGBColorsArray, ref int nEntriesCount);
			int ColorPaletteGetColorsCount();
			int ColorPaletteSet(object[] nARGBColorsArray);
			void ColorGetRGBFromRGBValue(int nRGBValue, ref int nRed, ref int nGreen, ref int nBlue);
			void ColorGetRGBFromRGBValuel(int nRGBValue, ref int nRed, ref int nGreen, ref int nBlue);
			void ColorGetARGBFromARGBValue(int nARGBValue, ref int nAlpha, ref int nRed, ref int nGreen, ref int nBlue);
			void ColorGetARGBFromARGBValuel(int nARGBValue, ref int nAlpha, ref int nRed, ref int nGreen, ref int nBlue);
			int argb(int nAlpha, int nRed, int nGreen, int nBlue);
			int GetRGB(int nRed, int nGreen, int nBlue);
			int AutoDeskew();
			int CropWhiteBorders(int nConfidence, int nSkipLinesCount);
			int CropBlackBorders(int nConfidence, int nSkipLinesCount);
			int CropBorders();
			int CropBordersEX(int nConfidence, int nPixelReference);
			int Crop(int nSrcLeft, int nSrcTop, int nWidth, int nHeight);
			int CropTop(int nLines);
			int CropBottom(int nLines);
			int CropLeft(int nLines);
			int CropRight(int nLines);
			int DisplayImageOnHDC(int nHDC, int nDstLeft, int nDstTop, int nDstWidth, int nDstHeight, int nInterpolationMode);
			int DisplayImageOnHwnd(int nHWND, int nDstLeft, int nDstTop, int nDstWidth, int nDstHeight, int nInterpolationMode);
			int DisplayImageRectOnHDC(int nHDC, int nDstLeft, int nDstTop, int nDstWidth, int nDstHeight, int nSrcLeft, int nSrcTop, int nSrcWidth, int nSrcHeight, int nInterpolationMode);
			int DisplayImageRectOnHwnd(int nHWND, int nDstLeft, int nDstTop, int nDstWidth, int nDstHeight, int nSrcLeft, int nSrcTop, int nSrcWidth, int nSrcHeight, int nInterpolationMode);
			int DrawRotatedText(float nAngle, string sText, int nDstLeft, int nDstTop, int nFontSize, int nFontStyle, int nColorARGB, string sFontName, bool bAntiAlias);
			int DrawRotatedTextBackColor(float nAngle, string sText, int nDstLeft, int nDstTop, int nFontSize, int nFontStyle, int nColorARGB, string sFontName, int nBackColor, bool bAntiAlias);
			int DrawText(string sText, int nDstLeft, int nDstTop, int nFontSize, int nFontStyle, int nTextARGBColor, string sFontName, bool bAntiAlias);
			int GetTextHeight(string sText, string sFontName, int nFontSize, int nFontStyle);
			int GetTextWidth(string sText, string sFontName, int nFontSize, int nFontStyle);
			int DrawTextBackColor(string sText, int nDstLeft, int nDstTop, int nFontSize, int nFontStyle, int nTextARGBColor, string sFontName, int nBackColor, bool bAntiAlias);
			int DrawTextBox(string sText, int nLeft, int nTop, int nWidth, int nHeight, int nFontSize, int nAlignment, int nFontStyle, int nTextARGBColor, string sFontName, bool bDrawTextBox, bool bAntiAlias);
			int DrawTextGradient(string sText, int nDstLeft, int nDstTop, int nStartColor, int nEndColor, int nFontSize, int nFontStyle, string sFontName, bool bAntiAlias);
			int DrawTextTexture(string sText, int nDstLeft, int nDstTop, string sTextureFilePath, int nFontSize, int nFontStyle, string sFontName, bool bAntiAlias);
			int DrawTextTextureFromGdPictureImage(string sText, int nDstLeft, int nDstTop, int nImageID, int nFontSize, int nFontStyle, string sFontName, bool bAntiAlias);
			int FxSepia();
			int FxStretchContrast();
			int FxNegative();
			int FxSoften(int nSoftenValue);
			int FxDespeckle();
			int FxSmooth();
			void FontSetUnit(int nUnitMode);
			int FontGetUnit();
			int FontGetCount();
			string FontGetName(int nFontNo);
			bool FontIsStyleAvailable(string sFontName, int nFontStyle);
			int GetWidth();
			int GetHeight();
			int GetHeightMM();
			int GetWidthMM();
			string GetImageFormat();
			string GetPixelFormatString();
			int GetPixelFormat();
			int GetPixelDepth();
			bool IsPixelFormatIndexed();
			bool IsPixelFormatHasAlpha();
			int GetHorizontalResolution();
			int GetVerticalResolution();
			int SetHorizontalResolution(float nHorizontalresolution);
			int SetVerticalResolution(float nVerticalresolution);
			int TiffSaveAsNativeMultiPage(string sFilePath, int nModeCompression);
			int TiffCloseNativeMultiPage();
			int TiffAddToNativeMultiPage(int nImageID);
			int ConvertTo1Bpp();
			int ConvertTo4Bpp();
			int ConvertTo8BppGrayScale();
			int ConvertTo8Bpp();
			int ConvertTo16Bpp();
			int ConvertTo24BppRGB();
			int ConvertTo32Bpp();
			int ConvertTo48Bpp();
			int ConvertTo64Bpp();
			int Rotate(int nRotation);
			int ResizeImage(int nNewImageWidth, int nNewImageHeight, int nInterpolationMode);
			int CloseImage(int nImageID);
			int CloseNativeImage();
			int SaveAsBmp(string sFilePath);
			int SaveAsWBMP(string sFilePath);
			int SaveAsXPM(string sFilePath);
			int SaveAsPNM(string sFilePath);
			int SaveAsICO(string sFilePath, bool bTransparentColor, int nTransparentColor);
			int SaveAsEXR(string sFilePath, int nCompression);
			bool SaveAsPDF(string sFilePath, string sTitle, string sCreator, string sAuthor, string sProducer);
			bool SaveAsPDFEx(string sFilePath, string sTitle, string sAuthor, string sSubject, string sKeywords, string sCreator, int nPdfEncryption, int nPDFRight, string sUserpassWord, string sOwnerPassword);
			bool SaveAsPDFA(string sFilePath, string sTitle, string sCreator, string sAuthor, string sProducer);
			bool SaveAsPDFAEx(string sFilePath, string sTitle, string sAuthor, string sSubject, string sKeywords, string sCreator);
			int SaveAsGIF(string sFilePath);
			int SaveAsGIFi(string sFilePath);
			int SaveAsPNG(string sFilePath);
			int SaveAsJPEG(string sFilePath, int nQuality);
			string SaveAsPDFOCR(string sFilePath, int nDictionary, string sDictionaryPath, string sCharWhiteList, string sTitle, string sCreator, string sAuthor, string sProducer);
			string SaveAsPDFOCREx(string sFilePath, int nDictionary, string sDictionaryPath, string sCharWhiteList, string sTitle, string sAuthor, string sSubject, string sKeywords, string sCreator, int nPdfEncryption, int nPDFRight, string sUserpassWord, string sOwnerPassword);
			int SaveAsTGA(string sFilePath);
			int SaveAsPBM(string sFilePath);
			int SaveAsJ2K(string sFilePath, int nRate);
			int SaveAsJP2(string sFilePath, int nRate);
			int SaveToFTP(string sImageFormat, int nEncoderParameter, string sHost, string sPath, string sLogin, string sPassword, int nFTPPort);
			int SaveAsTIFF(string sFilePath, int nModeCompression);
			int SaveAsTIFFjpg(string sFilePath);
			int SaveAsTIFFjpgEx(string sFilePath, int nQuality);
			int GetHBitmap();
			int GetHICON();
			void DeleteHBitmap(int nHbitmap);
			void DeleteHICON(int nHICON);
			int GetGdPictureImageDC(int nImageID);
			int ReleaseGdPictureImageDC(int hdc);
			int GetNativeImage();
			stdole_Picture GetPicture();
			void DeletePictureObject(stdole_Picture oPictureObject);
			int GetDib();
			void RemoveDib(int nDib);
			int GetGdiplusImage();
			stdole_Picture GetPictureFromGdPictureImage(int nImageID);
			int SaveAsByteArray(object[] arBytes, ref int nBytesRead, string sImageFormat, int nEncoderParameter);
			string SaveAsString(string sImageFormat, int nEncoderParameter);
			int TwainPdfStart(string sFilePath, string sTitle, string sCreator, string sAuthor, string sProducer);
			int TwainPdfStartEx(string sFilePath, string sTitle, string sAuthor, string sSubject, string sKeywords, string sCreator, int nPdfEncryption, int nPDFRight, string sUserpassWord, string sOwnerPassword);
			int TwainPdfOCRStart(string sFilePath, string sTitle, string sCreator, string sAuthor, string sProducer);
			int TwainPdfOCRStartEx(string sFilePath, string sTitle, string sAuthor, string sSubject, string sKeywords, string sCreator, int nPdfEncryption, int nPDFRight, string sUserpassWord, string sOwnerPassword);
			string TwainAddGdPictureImageToPdfOCR(int nImageID, int nDictionary, string sDictionaryPath, string sCharWhiteList);
			int TwainPdfOCRStop();
			int TwainAddGdPictureImageToPdf(int nImageID);
			int TwainPdfStop();
			int TwainGetAvailableBarCodeTypeCount();
			int TwainGetAvailableBarCodeTypeNo(int nNumber);
			int TwainBarCodeGetCount();
			string TwainBarCodeGetValue(int nBarCodeNo);
			int TwainBarCodeGetType(int nBarCodeNo);
			int TwainBarCodeGetXPos(int nBarCodeNo);
			int TwainBarCodeGetYPos(int nBarCodeNo);
			int TwainBarCodeGetConfidence(int nBarCodeNo);
			int TwainBarCodeGetRotation(int nBarCodeNo);
			int TwainAcquireToGdPictureImage(int hwnd);
			int TwainAcquireToDib(int hwnd);
			int TwainAcquireToFile(string sFilePath, int hwnd);
			bool TwainLogStart(string sLogPath);
			void TwainLogStop();
			bool TwainCloseSource();
			bool TwainCloseSourceManager(int hwnd);
			void TwainDisableAutoSourceClose(bool bDisableAutoSourceClose);
			bool TwainDisableSource();
			bool TwainEnableDuplex(bool bDuplex);
			void TwainSetApplicationInfo(int nMajorNumVersion, int nMinorNumVersion, int nLanguageID, int nCountryID, string sVersionInfo, string sCompanyName, string sProductFamily, string sProductName);
			bool TwainUserClosedSource();
			bool TwainLastXferFail();
			bool TwainEndAllXfers();
			bool TwainEndXfer();
			int TwainGetAvailableImageFileFormat(object[] arValues);
			int TwainGetAvailableImageFileFormatCount();
			int TwainGetAvailableImageFileFormatNo(int nNumber);
			bool TwainSetCurrentImageFileFormat(int nImageFileFormat);
			int TwainGetCurrentImageFileFormat();
			bool TwainSetCurrentCompression(int nCompression);
			int TwainGetCurrentCompression();
			int TwainGetAvailableCompression(object[] arValues);
			int TwainGetAvailableCompressionCount();
			int TwainGetAvailableCompressionNo(int nNumber);
			int TwainGetAvailableBrightness(object[] arValues);
			int TwainGetAvailableBrightnessCount();
			int TwainGetAvailableBrightnessNo(int nNumber);
			int TwainGetAvailableContrast(object[] arValues);
			int TwainGetAvailableContrastCount();
			int TwainGetAvailableContrastNo(int nNumber);
			int TwainGetAvailableBitDepths(object[] arValues);
			int TwainGetAvailableBitDepthsCount();
			int TwainGetAvailableBitDepthNo(int nNumber);
			int TwainGetAvailablePixelTypes(object[] arValues);
			int TwainGetAvailablePixelTypesCount();
			int TwainGetAvailablePixelTypeNo(int nNumber);
			int TwainGetAvailableXResolutions(object[] arValues);
			int TwainGetAvailableXResolutionsCount();
			int TwainGetAvailableXResolutionNo(int nNumber);
			int TwainGetAvailableYResolutions(object[] arValues);
			int TwainGetAvailableYResolutionsCount();
			int TwainGetAvailableYResolutionNo(int nNumber);
			int TwainGetAvailableCapValuesCount(int nCap);
			int TwainGetAvailableCapValuesNumeric(int nCap, object[] arValues);
			int TwainGetAvailableCapValuesString(int nCap, object[] arValues);
			int TwainGetAvailableCapValueNoNumeric(int nCap, int nNumber);
			string TwainGetAvailableCapValueNoString(int nCap, int nNumber);
			bool TwainGetCapCurrentNumeric(int nCap, ref int nCurrentValue);
			bool TwainGetCapRangeNumeric(int nCap, ref int nMinValue, ref int nMaxValue, ref int nStepValue);
			bool TwainGetCapCurrentString(int nCap, ref string sCurrentValue);
			bool TwainHasFeeder();
			bool TwainHasFlatBed();
			bool TwainIsFeederSelected();
			bool TwainIsDeviceOnline();
			bool TwainSelectFeeder(bool bSelectFeeder);
			bool TwainIsAutoFeedOn();
			bool TwainIsFeederLoaded();
			bool TwainSetCapCurrentNumeric(int nCap, int nItemType, int nNewValue);
			bool TwainSetCapCurrentString(int nCap, int nItemType, string sNewValue);
			bool TwainResetCap(int nCap);
			int TwainGetCapItemType(int nCap);
			int TwainGetCurrentBitDepth();
			int TwainGetCurrentThreshold();
			bool TwainSetCurrentThreshold(int nThreshold);
			bool TwainHasCameraPreviewUI();
			int TwainGetCurrentPlanarChunky();
			bool TwainSetCurrentPlanarChunky(int nPlanarChunky);
			int TwainGetCurrentPixelFlavor();
			bool TwainSetCurrentPixelFlavor(int nPixelFlavor);
			int TwainGetCurrentBrightness();
			int TwainGetCurrentContrast();
			int TwainGetCurrentPixelType();
			int TwainGetCurrentResolution();
			string TwainGetCurrentSourceName();
			string TwainGetDefaultSourceName();
			int TwainGetDuplexMode();
			bool TwainGetHideUI();
			int TwainGetLastConditionCode();
			int TwainGetLastResultCode();
			int TwainGetPaperSize();
			int TwainGetAvailablePaperSize(object[] arValues);
			int TwainGetAvailablePaperSizeCount();
			int TwainGetAvailablePaperSizeNo(int nNumber);
			int TwainGetPhysicalHeight();
			int TwainGetPhysicalWidth();
			int TwainGetSourceCount();
			string TwainGetSourceName(int nSourceNo);
			int TwainGetState();
			bool TwainIsAvailable();
			bool TwainIsDuplexEnabled();
			bool TwainIsFileTransferModeAvailable();
			bool TwainIsPixelTypeAvailable(int nPixelType);
			bool TwainOpenDefaultSource();
			bool TwainOpenSource(string sSourceName);
			bool TwainResetImageLayout();
			bool TwainSelectSource(int hwnd);
			bool TwainSetAutoBrightness(bool bAutoBrightness);
			bool TwainSetAutoFeed(bool bAutoFeed);
			bool TwainSetAutomaticBorderDetection(bool bAutoBorderDetect);
			bool TwainIsAutomaticBorderDetectionAvailable();
			bool TwainIsAutomaticBorderDetectionEnabled();
			bool TwainIsBarcodeDetectionAvailable();
			bool TwainIsBarcodeDetectionEnabled();
			bool TwainSetBarcodeDetection(bool bBarcodeDetection);
			bool TwainSetAutomaticDeskew(bool bAutoDeskew);
			bool TwainIsAutomaticDeskewAvailable();
			bool TwainIsAutomaticDeskewEnabled();
			bool TwainIsAutomaticDiscardBlankPagesAvailable();
			bool TwainIsAutomaticDiscardBlankPagesEnabled();
			bool TwainSetAutomaticDiscardBlankPages(bool bAutoDiscard);
			bool TwainSetAutomaticRotation(bool bAutoRotate);
			bool TwainIsAutomaticRotationAvailable();
			bool TwainIsAutomaticRotationEnabled();
			bool TwainIsAutoScanAvailable();
			bool TwainIsAutoScanEnabled();
			bool TwainIsAutoFeedAvailable();
			bool TwainIsAutoFeedEnabled();
			bool TwainIsAutoSizeAvailable();
			bool TwainIsAutoSizeEnabled();
			bool TwainSetAutoSize(bool bAutoSize);
			bool TwainIsAutoBrightnessAvailable();
			bool TwainIsAutoBrightnessEnabled();
			bool TwainSetAutoScan(bool bAutoScan);
			bool TwainSetCurrentBitDepth(int nBitDepth);
			bool TwainSetCurrentBrightness(int nBrightnessValue);
			bool TwainSetCurrentContrast(int nContrastValue);
			bool TwainSetCurrentPixelType(int nPixelType);
			bool TwainSetCurrentResolution(int nResolution);
			void TwainSetDebugMode(bool bDebugMode);
			void TwainSetDSMPath(string sDSMPath);
			void TwainSetErrorMessage(bool bShowErrors);
			bool TwainSetImageLayout(double nLeft, double nTop, double nRight, double nBottom);
			bool TwainGetImageLayout(ref int nLeft, ref int nTop, ref int nRight, ref int nBottom);
			void TwainSetHideUI(bool bHide);
			bool TwainSetIndicators(bool bShowIndicator);
			void TwainSetMultiTransfer(bool bMultiTransfer);
			bool TwainSetPaperSize(int nSize);
			bool TwainSetXferCount(int nXfers);
			bool TwainShowSetupDialogSource(int hwnd);
			bool TwainUnloadSourceManager();
			int Barcode1DReaderDoScan(int ScanMode);
			int Barcode1DReaderGetBarcodeCount();
			int Barcode1DReaderGetBarcodeType(int BarCodeNo);
			string Barcode1DReaderGetBarcodeValue(int BarCodeNo);
			int Barcode1DReaderGetBarcodeSkewAngle(int BarCodeNo);
			bool Barcode1DReaderBarcodeHasChecksum(int BarCodeNo);
			int Barcode1DReaderGetBarcodeX1(int BarCodeNo);
			int Barcode1DReaderGetBarcodeY1(int BarCodeNo);
			int Barcode1DReaderGetBarcodeX2(int BarCodeNo);
			int Barcode1DReaderGetBarcodeY2(int BarCodeNo);
			int Barcode1DReaderGetBarcodeX3(int BarCodeNo);
			int Barcode1DReaderGetBarcodeY3(int BarCodeNo);
			int Barcode1DReaderGetBarcodeX4(int BarCodeNo);
			int Barcode1DReaderGetBarcodeY4(int BarCodeNo);
			void Barcode1DReaderClear();
			int BarcodeDataMatrixReaderDoScan(int ScanMode);
			int BarcodeDataMatrixReaderGetBarcodeCount();
			string BarcodeDataMatrixReaderGetBarcodeValue(int BarCodeNo);
			int BarcodeDataMatrixReaderGetBarcodeX1(int BarCodeNo);
			int BarcodeDataMatrixReaderGetBarcodeY1(int BarCodeNo);
			int BarcodeDataMatrixReaderGetBarcodeX2(int BarCodeNo);
			int BarcodeDataMatrixReaderGetBarcodeY2(int BarCodeNo);
			int BarcodeDataMatrixReaderGetBarcodeX3(int BarCodeNo);
			int BarcodeDataMatrixReaderGetBarcodeY3(int BarCodeNo);
			int BarcodeDataMatrixReaderGetBarcodeX4(int BarCodeNo);
			int BarcodeDataMatrixReaderGetBarcodeY4(int BarCodeNo);
			int BarcodeDataMatrixReaderGetBarcodeRows(int BarCodeNo);
			int BarcodeDataMatrixReaderGetBarcodeColumns(int BarCodeNo);
			void BarcodeDataMatrixReaderClear();
			int OCRTesseractGetCharConfidence(int nCharNo);
			int OCRTesseractGetCharSpaces(int nCharNo);
			int OCRTesseractGetCharLine(int nCharNo);
			int OCRTesseractGetCharCode(int nCharNo);
			int OCRTesseractGetCharLeft(int nCharNo);
			int OCRTesseractGetCharRight(int nCharNo);
			int OCRTesseractGetCharBottom(int nCharNo);
			int OCRTesseractGetCharTop(int nCharNo);
			int OCRTesseractGetCharCount();
			string OCRTesseractDoOCR(int nDictionary, string sDictionaryPath, string sCharWhiteList);
			int OCRTesseractGetOrientation(int nDictionary, string sDictionaryPath);
			int OCRTesseractGetOrientationEx(int nDictionary, string sDictionaryPath, float nAccuracyLevel);
			void OCRTesseractClear();
			void ResetROI();
			int PdfCreateRights(bool bCanPrint, bool bCanModify, bool bCanCopy, bool bCanAddNotes, bool bCanFillFields, bool bCanCopyAccess, bool bCanAssemble, bool bCanprintFull);
			void SetROI(int nLeft, int nTop, int nWidth, int nHeight);
			string Encode64String(string sStringToEncode);
			string Decode64String(string sStringToDecode);
			int GetVersion();
			void SetHttpTransfertBufferSize(int nBuffersize);
			void SetFtpPassiveMode(bool bPassiveMode);
			int GetStat();
			bool IsBlank(float nConfidence);
			int GetDesktopHwnd();
			bool SetLicenseNumber(string sKey);
			bool SetLicenseNumberOCRTesseract(string sKey);
			bool SetLicenseNumber1DBarcodeRecognition(string sKey);
			bool LockStat();
			int GetLicenseMode();
		}
	}
}
