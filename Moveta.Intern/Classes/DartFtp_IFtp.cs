// <ppj name="Moveta.Intern" date="1/29/2024 3:39:48 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using System.Runtime.InteropServices;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public class DartFtp_IFtp : SalObject
	{
		
		/// <summary>
		/// This is the real COM interface.
		/// </summary>
		internal COMInterface _Interface = null;
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public DartFtp_IFtp(){ }
		public DartFtp_IFtp(COMInterface obj) : this()
		{
			this._Interface = obj;
		}
		#endregion
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetAllocate(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Allocate;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetAllocate(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.Allocate = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetDirectory(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Directory;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetDirectory(SalString rhs)
		{
			#region Actions
			try
			{
				string param1 = (string)rhs;
				_Interface.Directory = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the DartFtp_FileStructureConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetFileStructure(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FileStructure;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the DartFtp_FileStructureConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetFileStructure(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.FileStructure = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetListing(DartFtp_IListEntries returnValue)
		{
			#region Actions
			try
			{
				returnValue.Value = _Interface.Listing;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetListing(DartFtp_IListEntries rhs)
		{
			#region Actions
			try
			{
				DartFtp_IListEntries.COMInterface param1 = (DartFtp_IListEntries.COMInterface)rhs._Interface;
				_Interface.Listing = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPassive(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Passive;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetPassive(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.Passive = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the DartFtp_StoreConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetStoreType(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.StoreType;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the DartFtp_StoreConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetStoreType(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.StoreType = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTimeOut(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TimeOut;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetTimeOut(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.TimeOut = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the DartFtp_TransferModeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetTransferMode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TransferMode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the DartFtp_TransferModeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetTransferMode(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.TransferMode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the DartFtp_TypeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetType(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Type;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the DartFtp_TypeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetType(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.Type = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetBlocked(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Blocked;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetLocalAddress(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LocalAddress;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetLocalPort(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LocalPort;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetRemoteAddress(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.RemoteAddress;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetRemotePort(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.RemotePort;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetRestart(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Restart;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the DartFtp_StateConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetState(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.State;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSystem(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.System;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean About()
		{
			#region Actions
			try
			{
				_Interface.About();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean Abort()
		{
			#region Actions
			try
			{
				_Interface.Abort();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean AbortCommand()
		{
			#region Actions
			try
			{
				_Interface.AbortCommand();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean ChangeDirectoryUp()
		{
			#region Actions
			try
			{
				_Interface.ChangeDirectoryUp();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FtpCommand"></param>
		/// <param name="Result"></param>
		/// <returns></returns>
		public SalBoolean Command(SalString FtpCommand, SalVariant Result)
		{
			#region Actions
			try
			{
				string param1 = (string)FtpCommand;
				object param2 = (object)Result.Value;
				_Interface.Command(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Result"></param>
		/// <param name="Send"></param>
		/// <param name="Receive"></param>
		/// <param name="SendPrompt"></param>
		/// <param name="ReceivePrompt"></param>
		/// <returns></returns>
		public SalBoolean Trace(SalVariant Result, SalBoolean Send, SalBoolean Receive, SalString SendPrompt, SalString ReceivePrompt)
		{
			#region Actions
			try
			{
				object param1 = (object)Result.Value;
				bool param2 = (bool)Send;
				bool param3 = (bool)Receive;
				string param4 = (string)SendPrompt;
				string param5 = (string)ReceivePrompt;
				_Interface.Trace(param1, param2, param3, param4, param5);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PathName"></param>
		/// <returns></returns>
		public SalBoolean Delete(SalString PathName)
		{
			#region Actions
			try
			{
				string param1 = (string)PathName;
				_Interface.Delete(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Result"></param>
		/// <param name="Command"></param>
		/// <returns></returns>
		public SalBoolean Help(SalVariant Result, SalString Command)
		{
			#region Actions
			try
			{
				object param1 = (object)Result.Value;
				string param2 = (string)Command;
				_Interface.Help(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PathName"></param>
		/// <returns></returns>
		public SalBoolean List(SalString PathName)
		{
			#region Actions
			try
			{
				string param1 = (string)PathName;
				_Interface.List(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="RemoteName"></param>
		/// <param name="User"></param>
		/// <param name="Password"></param>
		/// <param name="Account"></param>
		/// <param name="RemotePort"></param>
		/// <returns></returns>
		public SalBoolean Login(SalString RemoteName, SalString User, SalString Password, SalString Account, SalNumber RemotePort)
		{
			#region Actions
			try
			{
				string param1 = (string)RemoteName;
				string param2 = (string)User;
				string param3 = (string)Password;
				string param4 = (string)Account;
				int param5 = (int)RemotePort;
				_Interface.Login(param1, param2, param3, param4, param5);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean Logout()
		{
			#region Actions
			try
			{
				_Interface.Logout();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PathName"></param>
		/// <returns></returns>
		public SalBoolean MakeDirectory(SalString PathName)
		{
			#region Actions
			try
			{
				string param1 = (string)PathName;
				_Interface.MakeDirectory(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PathName"></param>
		/// <returns></returns>
		public SalBoolean NameList(SalString PathName)
		{
			#region Actions
			try
			{
				string param1 = (string)PathName;
				_Interface.NameList(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean NoOperation()
		{
			#region Actions
			try
			{
				_Interface.NoOperation();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PathName"></param>
		/// <returns></returns>
		public SalBoolean RemoveDirectory(SalString PathName)
		{
			#region Actions
			try
			{
				string param1 = (string)PathName;
				_Interface.RemoveDirectory(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FromFileName"></param>
		/// <param name="ToFileName"></param>
		/// <returns></returns>
		public SalBoolean Rename(SalString FromFileName, SalString ToFileName)
		{
			#region Actions
			try
			{
				string param1 = (string)FromFileName;
				string param2 = (string)ToFileName;
				_Interface.Rename(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="RemoteFileName"></param>
		/// <param name="Result"></param>
		/// <param name="Marker"></param>
		/// <param name="MarkerHigh"></param>
		/// <returns></returns>
		public SalBoolean Retrieve(SalString RemoteFileName, SalVariant Result, SalNumber Marker, SalNumber MarkerHigh)
		{
			#region Actions
			try
			{
				string param1 = (string)RemoteFileName;
				object param2 = (object)Result.Value;
				int param3 = (int)Marker;
				int param4 = (int)MarkerHigh;
				_Interface.Retrieve(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Modifier"></param>
		/// <param name="Result"></param>
		/// <returns></returns>
		public SalBoolean Site(SalString Modifier, SalVariant Result)
		{
			#region Actions
			try
			{
				string param1 = (string)Modifier;
				object param2 = (object)Result.Value;
				_Interface.Site(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Result"></param>
		/// <param name="PathName"></param>
		/// <returns></returns>
		public SalBoolean Status(SalVariant Result, SalString PathName)
		{
			#region Actions
			try
			{
				object param1 = (object)Result.Value;
				string param2 = (string)PathName;
				_Interface.Status(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="RemoteFileName"></param>
		/// <param name="Data"></param>
		/// <param name="Marker"></param>
		/// <param name="MarkerHigh"></param>
		/// <returns></returns>
		public SalBoolean Store(SalString RemoteFileName, SalVariant Data, SalNumber Marker, SalNumber MarkerHigh)
		{
			#region Actions
			try
			{
				string param1 = (string)RemoteFileName;
				object param2 = (object)Data.Value;
				int param3 = (int)Marker;
				int param4 = (int)MarkerHigh;
				_Interface.Store(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PathName"></param>
		/// <returns></returns>
		public SalBoolean StructureMount(SalString PathName)
		{
			#region Actions
			try
			{
				string param1 = (string)PathName;
				_Interface.StructureMount(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Url"></param>
		/// <param name="Result"></param>
		/// <param name="Marker"></param>
		/// <param name="MarkerHigh"></param>
		/// <returns></returns>
		public SalBoolean Get(SalString Url, SalVariant Result, SalNumber Marker, SalNumber MarkerHigh)
		{
			#region Actions
			try
			{
				string param1 = (string)Url;
				object param2 = (object)Result.Value;
				int param3 = (int)Marker;
				int param4 = (int)MarkerHigh;
				_Interface.Get(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Url"></param>
		/// <param name="Source"></param>
		/// <param name="Marker"></param>
		/// <param name="MarkerHigh"></param>
		/// <returns></returns>
		public SalBoolean Put(SalString Url, SalVariant Source, SalNumber Marker, SalNumber MarkerHigh)
		{
			#region Actions
			try
			{
				string param1 = (string)Url;
				object param2 = (object)Source.Value;
				int param3 = (int)Marker;
				int param4 = (int)MarkerHigh;
				_Interface.Put(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Source"></param>
		/// <param name="Destination"></param>
		/// <param name="FilesTransferred"></param>
		/// <param name="FileErrors"></param>
		/// <returns></returns>
		public SalBoolean MGet(SalString Source, SalString Destination, SalVariant FilesTransferred, SalVariant FileErrors)
		{
			#region Actions
			try
			{
				string param1 = (string)Source;
				string param2 = (string)Destination;
				object param3 = (object)FilesTransferred.Value;
				object param4 = (object)FileErrors.Value;
				_Interface.MGet(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Source"></param>
		/// <param name="Destination"></param>
		/// <param name="FilesTransferred"></param>
		/// <param name="FileErrors"></param>
		/// <returns></returns>
		public SalBoolean MPut(SalString Source, SalString Destination, SalVariant FilesTransferred, SalVariant FileErrors)
		{
			#region Actions
			try
			{
				string param1 = (string)Source;
				string param2 = (string)Destination;
				object param3 = (object)FilesTransferred.Value;
				object param4 = (object)FileErrors.Value;
				_Interface.MPut(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the DartFtp_FtpProxyTypeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetProxyType(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ProxyType;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the DartFtp_FtpProxyTypeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetProxyType(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.ProxyType = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetProxyHost(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ProxyHost;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetProxyHost(SalString rhs)
		{
			#region Actions
			try
			{
				string param1 = (string)rhs;
				_Interface.ProxyHost = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetProxyUsername(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ProxyUsername;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetProxyUsername(SalString rhs)
		{
			#region Actions
			try
			{
				string param1 = (string)rhs;
				_Interface.ProxyUsername = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetProxyPassword(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ProxyPassword;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetProxyPassword(SalString rhs)
		{
			#region Actions
			try
			{
				string param1 = (string)rhs;
				_Interface.ProxyPassword = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetProxyPort(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ProxyPort;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetProxyPort(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.ProxyPort = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetLocalDataPort(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LocalDataPort;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetLocalDataPort(SalString rhs)
		{
			#region Actions
			try
			{
				string param1 = (string)rhs;
				_Interface.LocalDataPort = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetUseIpSync(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.UseIpSync;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetUseIpSync(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.UseIpSync = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetUseControlAddressForPassive(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.UseControlAddressForPassive;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetUseControlAddressForPassive(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.UseControlAddressForPassive = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetOverwrite(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Overwrite;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetOverwrite(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.Overwrite = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSendBufferSize(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SendBufferSize;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetSendBufferSize(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.SendBufferSize = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetReceiveBufferSize(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ReceiveBufferSize;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetReceiveBufferSize(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.ReceiveBufferSize = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the DartFtp_AuthenticationTypeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetAuthentication(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Authentication;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the DartFtp_AuthenticationTypeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetAuthentication(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.Authentication = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetSecretKey(SalString rhs)
		{
			#region Actions
			try
			{
				string param1 = (string)rhs;
				_Interface.SecretKey = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetCertificate(DartFtp_ICertificate returnValue)
		{
			#region Actions
			try
			{
				returnValue.Value = _Interface.Certificate;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetCertificate(DartFtp_ICertificate rhs)
		{
			#region Actions
			try
			{
				DartFtp_ICertificate.COMInterface param1 = (DartFtp_ICertificate.COMInterface)rhs._Interface;
				_Interface.Certificate = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the DartFtp_ProtocolConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetProtocol(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Protocol;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the DartFtp_ProtocolConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetProtocol(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.Protocol = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the DartFtp_SecurityConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetSecurity(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Security;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the DartFtp_SecurityConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetSecurity(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.Security = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetUseSslShutdown(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.UseSslShutdown;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetUseSslShutdown(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.UseSslShutdown = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetIpV6(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.IpV6;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetIpV6(SalBoolean rhs)
		{
			#region Actions
			try
			{
				bool param1 = (bool)rhs;
				_Interface.IpV6 = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean ClearCertificate()
		{
			#region Actions
			try
			{
				_Interface.ClearCertificate();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}

		/// <summary>
		/// This is the real COM interface declaration.
		/// </summary>
		[ComImport]
		[Guid("39FDA06F-61BA-11D2-AD84-00105A17B608")]
		[InterfaceType(ComInterfaceType.InterfaceIsIDispatch)]
		public interface COMInterface
		{
			bool Allocate { get; set; }
			string Directory { get; set; }
			int FileStructure { get; set; }
			DartFtp_IListEntries.COMInterface Listing { get; set; }
			bool Passive { get; set; }
			int StoreType { get; set; }
			int TimeOut { get; set; }
			int TransferMode { get; set; }
			int Type { get; set; }
			bool Blocked { get; }
			string LocalAddress { get; }
			int LocalPort { get; }
			string RemoteAddress { get; }
			int RemotePort { get; }
			bool Restart { get; }
			int State { get; }
			string System { get; }
			void About();
			void Abort();
			void AbortCommand();
			void ChangeDirectoryUp();
			void Command(string FtpCommand, object Result);
			void Trace(object Result, bool Send, bool Receive, string SendPrompt, string ReceivePrompt);
			void Delete(string PathName);
			void Help(object Result, string Command);
			void List(string PathName);
			void Login(string RemoteName, string User, string Password, string Account, int RemotePort);
			void Logout();
			void MakeDirectory(string PathName);
			void NameList(string PathName);
			void NoOperation();
			void RemoveDirectory(string PathName);
			void Rename(string FromFileName, string ToFileName);
			void Retrieve(string RemoteFileName, object Result, int Marker, int MarkerHigh);
			void Site(string Modifier, object Result);
			void Status(object Result, string PathName);
			void Store(string RemoteFileName, object Data, int Marker, int MarkerHigh);
			void StructureMount(string PathName);
			void Get(string Url, object Result, int Marker, int MarkerHigh);
			void Put(string Url, object Source, int Marker, int MarkerHigh);
			void MGet(string Source, string Destination, object FilesTransferred, object FileErrors);
			void MPut(string Source, string Destination, object FilesTransferred, object FileErrors);
			int ProxyType { get; set; }
			string ProxyHost { get; set; }
			string ProxyUsername { get; set; }
			string ProxyPassword { get; set; }
			int ProxyPort { get; set; }
			string LocalDataPort { get; set; }
			bool UseIpSync { get; set; }
			bool UseControlAddressForPassive { get; set; }
			bool Overwrite { get; set; }
			int SendBufferSize { get; set; }
			int ReceiveBufferSize { get; set; }
			int Authentication { get; set; }
			string SecretKey { set; }
			DartFtp_ICertificate.COMInterface Certificate { get; set; }
			int Protocol { get; set; }
			int Security { get; set; }
			bool UseSslShutdown { get; set; }
			bool IpV6 { get; set; }
			void ClearCertificate();
		}
	}
}
