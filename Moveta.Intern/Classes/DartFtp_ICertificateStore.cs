// <ppj name="Moveta.Intern" date="1/29/2024 3:39:48 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using System.Runtime.InteropServices;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public class DartFtp_ICertificateStore : SalObject
	{
		
		/// <summary>
		/// This is the real COM interface.
		/// </summary>
		internal COMInterface _Interface = null;
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public DartFtp_ICertificateStore(){ }
		public DartFtp_ICertificateStore(COMInterface obj) : this()
		{
			this._Interface = obj;
		}
		#endregion
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetName(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Name;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetName(SalString rhs)
		{
			#region Actions
			try
			{
				string param1 = (string)rhs;
				_Interface.Name = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetCertificates(DartFtp_ICertificates returnValue)
		{
			#region Actions
			try
			{
				returnValue.Value = _Interface.Certificates;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the DartFtp_StoreLocationConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetLocation(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Location;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the DartFtp_StoreLocationConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetLocation(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.Location = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean Refresh()
		{
			#region Actions
			try
			{
				_Interface.Refresh();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Name"></param>
		/// <param name="Location">Important: this is one of the DartFtp_StoreLocationConstants constants</param>
		/// <param name="IssuedBy"></param>
		/// <param name="SerialNumber"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Find(SalString Name, SalNumber Location, SalString IssuedBy, SalString SerialNumber, DartFtp_ICertificate returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)Name;
				int param2 = (int)Location;
				string param3 = (string)IssuedBy;
				string param4 = (string)SerialNumber;
				returnValue.Value = _Interface.Find(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the DartFtp_KeyUsageConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetKeyUsageSelect(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.KeyUsageSelect = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Name"></param>
		/// <param name="Usage">Important: this is one of the DartFtp_KeyUsageConstants constants</param>
		/// <param name="CACertificate"></param>
		/// <param name="Lifetime"></param>
		/// <param name="UseSignatureKey"></param>
		/// <param name="Provider">Important: this is one of the DartFtp_ProviderConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean CreateCert(SalString Name, SalNumber Usage, DartFtp_ICertificate CACertificate, SalNumber Lifetime, SalBoolean UseSignatureKey, SalNumber Provider, DartFtp_ICertificate returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)Name;
				int param2 = (int)Usage;
				DartFtp_ICertificate.COMInterface param3 = (DartFtp_ICertificate.COMInterface)CACertificate._Interface;
				int param4 = (int)Lifetime;
				bool param5 = (bool)UseSignatureKey;
				int param6 = (int)Provider;
				returnValue.Value = _Interface.CreateCert(param1, param2, param3, param4, param5, param6);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Cert"></param>
		/// <returns></returns>
		public SalBoolean DeleteCert(DartFtp_ICertificate Cert)
		{
			#region Actions
			try
			{
				DartFtp_ICertificate.COMInterface param1 = (DartFtp_ICertificate.COMInterface)Cert._Interface;
				_Interface.DeleteCert(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="CertFileName"></param>
		/// <param name="Password"></param>
		/// <returns></returns>
		public SalBoolean Load(SalString CertFileName, SalString Password)
		{
			#region Actions
			try
			{
				string param1 = (string)CertFileName;
				string param2 = (string)Password;
				_Interface.Load(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// This is the real COM interface declaration.
		/// </summary>
		[Guid("93D50103-C927-11D3-912C-00105A17B608")]
		[InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch)]
		public interface COMInterface
		{
			string Name { get; set; }
			DartFtp_ICertificates.COMInterface Certificates { get; }
			int Location { get; set; }
			void Refresh();
			DartFtp_ICertificate.COMInterface Find(string Name, int Location, string IssuedBy, string SerialNumber);
			int KeyUsageSelect { set; }
			DartFtp_ICertificate.COMInterface CreateCert(string Name, int Usage, DartFtp_ICertificate.COMInterface CACertificate, int Lifetime, bool UseSignatureKey, int Provider);
			void DeleteCert(DartFtp_ICertificate.COMInterface Cert);
			void Load(string CertFileName, string Password);
		}
	}
}
