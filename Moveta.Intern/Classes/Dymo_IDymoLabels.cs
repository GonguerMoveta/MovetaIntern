// <ppj name="Moveta.Intern" date="1/29/2024 3:39:48 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using System.Runtime.InteropServices;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public class Dymo_IDymoLabels : SalObject
	{
		
		/// <summary>
		/// This is the real COM interface.
		/// </summary>
		internal COMInterface _Interface = null;
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public Dymo_IDymoLabels(){ }
		public Dymo_IDymoLabels(COMInterface obj) : this()
		{
			this._Interface = obj;
		}
		#endregion
		
		/// <summary>
		/// </summary>
		/// <param name="AddrIdx"></param>
		/// <param name="Address"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean SetAddress(SalNumber AddrIdx, SalString Address, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)AddrIdx;
				string param2 = (string)Address;
				returnValue = _Interface.SetAddress(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Field"></param>
		/// <param name="Text"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean SetField(SalString Field, SalString Text, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)Field;
				string param2 = (string)Text;
				returnValue = _Interface.SetField(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Index"></param>
		/// <param name="Position"></param>
		/// <returns></returns>
		public SalBoolean PostNet(SalNumber Index, SalString Position)
		{
			#region Actions
			try
			{
				int param1 = (int)Index;
				string param2 = (string)Position;
				_Interface.PostNet(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Field"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetText(SalString Field, ref SalString returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)Field;
				returnValue = _Interface.GetText(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bVariableOnly"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetObjectNames(SalBoolean bVariableOnly, ref SalString returnValue)
		{
			#region Actions
			try
			{
				bool param1 = (bool)bVariableOnly;
				returnValue = _Interface.GetObjectNames(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetAddressFieldCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.AddressFieldCount;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ObjectName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PasteFromClipboard(SalString ObjectName, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)ObjectName;
				returnValue = _Interface.PasteFromClipboard(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ObjectName"></param>
		/// <param name="FileName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean SetImageFile(SalString ObjectName, SalString FileName, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)ObjectName;
				string param2 = (string)FileName;
				returnValue = _Interface.SetImageFile(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// This is the real COM interface declaration.
		/// </summary>
		[Guid("00020400-0000-0000-C000-000000000046")]
		[InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch)]
		public interface COMInterface
		{
			bool SetAddress(int AddrIdx, string Address);
			bool SetField(string Field, string Text);
			void PostNet(int Index, string Position);
			string GetText(string Field);
			string GetObjectNames(bool bVariableOnly);
			int AddressFieldCount { get; }
			bool PasteFromClipboard(string ObjectName);
			bool SetImageFile(string ObjectName, string FileName);
		}
	}
}
