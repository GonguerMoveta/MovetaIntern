// <ppj name="Moveta.Intern" date="1/29/2024 3:39:48 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using System.Runtime.InteropServices;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public class Tx4oleLib__DTX4OLE : SalObject
	{
		
		/// <summary>
		/// This is the real COM interface.
		/// </summary>
		internal COMInterface _Interface = null;
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public Tx4oleLib__DTX4OLE(){ }
		public Tx4oleLib__DTX4OLE(COMInterface obj) : this()
		{
			this._Interface = obj;
		}
		#endregion
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean Refresh()
		{
			#region Actions
			try
			{
				_Interface.Refresh();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PageNumber"></param>
		/// <returns></returns>
		public SalBoolean PrintPage(SalNumber PageNumber)
		{
			#region Actions
			try
			{
				short param1 = (short)PageNumber;
				_Interface.PrintPage(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean ParagraphDialog(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ParagraphDialog();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean FontDialog(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontDialog();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TypeOfDialog"></param>
		/// <returns></returns>
		public SalBoolean FindReplace(SalNumber TypeOfDialog)
		{
			#region Actions
			try
			{
				short param1 = (short)TypeOfDialog;
				_Interface.FindReplace(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Undo(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Undo();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Redo(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Redo();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean VTSpellCheck(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.VTSpellCheck();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Action"></param>
		/// <returns></returns>
		public SalBoolean Clip(SalNumber Action)
		{
			#region Actions
			try
			{
				short param1 = (short)Action;
				_Interface.Clip(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FileName"></param>
		/// <param name="Extended"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean RTFImport(SalString FileName, SalVariant Extended, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)FileName;
				object param2 = (object)Extended.Value;
				returnValue = _Interface.RTFImport(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FileName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean RTFExport(SalString FileName, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)FileName;
				returnValue = _Interface.RTFExport(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FileName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TextImport(SalString FileName, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)FileName;
				returnValue = _Interface.TextImport(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FileName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TextExport(SalString FileName, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)FileName;
				returnValue = _Interface.TextExport(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldText"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean FieldInsert(SalString FieldText, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)FieldText;
				returnValue = _Interface.FieldInsert(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="DeleteTotal"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean FieldDelete(SalBoolean DeleteTotal, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				bool param1 = (bool)DeleteTotal;
				returnValue = _Interface.FieldDelete(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ObjectType"></param>
		/// <param name="FileName"></param>
		/// <param name="TextPos"></param>
		/// <param name="ScaleX"></param>
		/// <param name="ScaleY"></param>
		/// <param name="ImageDisplayMode"></param>
		/// <param name="ImageSaveMode"></param>
		/// <param name="KindOfObject"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean ObjectInsertAsChar(SalNumber ObjectType, SalString FileName, SalNumber TextPos, SalNumber ScaleX, SalNumber ScaleY, SalNumber ImageDisplayMode, SalNumber ImageSaveMode, SalVariant KindOfObject, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)ObjectType;
				string param2 = (string)FileName;
				int param3 = (int)TextPos;
				short param4 = (short)ScaleX;
				short param5 = (short)ScaleY;
				short param6 = (short)ImageDisplayMode;
				short param7 = (short)ImageSaveMode;
				object param8 = (object)KindOfObject.Value;
				returnValue = _Interface.ObjectInsertAsChar(param1, param2, param3, param4, param5, param6, param7, param8);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ObjectType"></param>
		/// <param name="FileName"></param>
		/// <param name="PosX"></param>
		/// <param name="PosY"></param>
		/// <param name="ScaleX"></param>
		/// <param name="ScaleY"></param>
		/// <param name="ImageDisplayMode"></param>
		/// <param name="ImageSaveMode"></param>
		/// <param name="SizeMode"></param>
		/// <param name="Textflow"></param>
		/// <param name="DistanceL"></param>
		/// <param name="DistanceT"></param>
		/// <param name="DistanceR"></param>
		/// <param name="DistanceB"></param>
		/// <param name="KindOfObject"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean ObjectInsertFixed(
					SalNumber ObjectType, 
					SalString FileName, 
					SalNumber PosX, 
					SalNumber PosY, 
					SalNumber ScaleX, 
					SalNumber ScaleY, 
					SalNumber ImageDisplayMode, 
					SalNumber ImageSaveMode, 
					SalNumber SizeMode, 
					SalNumber Textflow, 
					SalNumber DistanceL, 
					SalNumber DistanceT, 
					SalNumber DistanceR, 
					SalNumber DistanceB, 
					SalVariant KindOfObject, 
					ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)ObjectType;
				string param2 = (string)FileName;
				int param3 = (int)PosX;
				int param4 = (int)PosY;
				short param5 = (short)ScaleX;
				short param6 = (short)ScaleY;
				short param7 = (short)ImageDisplayMode;
				short param8 = (short)ImageSaveMode;
				short param9 = (short)SizeMode;
				short param10 = (short)Textflow;
				short param11 = (short)DistanceL;
				short param12 = (short)DistanceT;
				short param13 = (short)DistanceR;
				short param14 = (short)DistanceB;
				object param15 = (object)KindOfObject.Value;
				returnValue = _Interface.ObjectInsertFixed(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14, param15);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FileName"></param>
		/// <param name="Offset"></param>
		/// <param name="Format"></param>
		/// <param name="CurSelection"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Load(SalString FileName, SalVariant Offset, SalVariant Format, SalVariant CurSelection, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)FileName;
				object param2 = (object)Offset.Value;
				object param3 = (object)Format.Value;
				object param4 = (object)CurSelection.Value;
				returnValue = _Interface.Load(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FileName"></param>
		/// <param name="Offset"></param>
		/// <param name="Format"></param>
		/// <param name="CurSelection"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Save(SalString FileName, SalVariant Offset, SalVariant Format, SalVariant CurSelection, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)FileName;
				object param2 = (object)Offset.Value;
				object param3 = (object)Format.Value;
				object param4 = (object)CurSelection.Value;
				returnValue = _Interface.Save(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ObjectId"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean ObjectDelete(SalNumber ObjectId, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)ObjectId;
				returnValue = _Interface.ObjectDelete(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ObjectId"></param>
		/// <param name="ObjectGroup"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean ObjectNext(SalNumber ObjectId, SalNumber ObjectGroup, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)ObjectId;
				short param2 = (short)ObjectGroup;
				returnValue = _Interface.ObjectNext(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="index"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetObjectDistance(SalNumber index, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)index;
				returnValue = _Interface.ObjectDistance(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="index"></param>
		/// <param name="arg_2"></param>
		/// <returns></returns>
		public SalBoolean PropSetObjectDistance(SalNumber index, SalNumber arg_2)
		{
			#region Actions
			try
			{
				short param1 = (short)index;
				short param2 = (short)arg_2;
				_Interface.ObjectDistance(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean ViewNextHighlight(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ViewNextHighlight();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Rows"></param>
		/// <param name="Columns"></param>
		/// <param name="TextPos"></param>
		/// <param name="TableId"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TableInsert(SalNumber Rows, SalNumber Columns, SalNumber TextPos, SalVariant TableId, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)Rows;
				short param2 = (short)Columns;
				int param3 = (int)TextPos;
				object param4 = (object)TableId.Value;
				returnValue = _Interface.TableInsert(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TableDeleteLines(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TableDeleteLines();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Attribute">Important: this is one of the Tx4oleLib_LoadSaveAttributeConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetLoadSaveAttribute(SalNumber Attribute, SalVariant returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)Attribute;
				returnValue.Value = _Interface.LoadSaveAttribute(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Attribute">Important: this is one of the Tx4oleLib_LoadSaveAttributeConstants constants</param>
		/// <param name="arg_2"></param>
		/// <returns></returns>
		public SalBoolean PropSetLoadSaveAttribute(SalNumber Attribute, SalVariant arg_2)
		{
			#region Actions
			try
			{
				int param1 = (int)Attribute;
				object param2 = (object)arg_2.Value;
				_Interface.LoadSaveAttribute(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TableAttrDialog(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TableAttrDialog();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableId"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTableColumns(SalNumber TableId, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)TableId;
				returnValue = _Interface.TableColumns(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableId"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTableRows(SalNumber TableId, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)TableId;
				returnValue = _Interface.TableRows(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableId"></param>
		/// <param name="Row"></param>
		/// <param name="Column"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTableCellText(SalNumber TableId, SalNumber Row, SalNumber Column, ref SalString returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)TableId;
				short param2 = (short)Row;
				short param3 = (short)Column;
				returnValue = _Interface.TableCellText(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableId"></param>
		/// <param name="Row"></param>
		/// <param name="Column"></param>
		/// <param name="arg_4"></param>
		/// <returns></returns>
		public SalBoolean PropSetTableCellText(SalNumber TableId, SalNumber Row, SalNumber Column, SalString arg_4)
		{
			#region Actions
			try
			{
				short param1 = (short)TableId;
				short param2 = (short)Row;
				short param3 = (short)Column;
				string param4 = (string)arg_4;
				_Interface.TableCellText(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldId"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFieldEditAttr(SalNumber FieldId, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)FieldId;
				returnValue = _Interface.FieldEditAttr(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldId"></param>
		/// <param name="arg_2"></param>
		/// <returns></returns>
		public SalBoolean PropSetFieldEditAttr(SalNumber FieldId, SalNumber arg_2)
		{
			#region Actions
			try
			{
				short param1 = (short)FieldId;
				short param2 = (short)arg_2;
				_Interface.FieldEditAttr(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldId"></param>
		/// <param name="FieldGroup"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean FieldNext(SalNumber FieldId, SalNumber FieldGroup, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)FieldId;
				short param2 = (short)FieldGroup;
				returnValue = _Interface.FieldNext(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldId"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFieldData(SalNumber FieldId, SalVariant returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)FieldId;
				returnValue.Value = _Interface.FieldData(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldId"></param>
		/// <param name="arg_2"></param>
		/// <returns></returns>
		public SalBoolean PropSetFieldData(SalNumber FieldId, SalVariant arg_2)
		{
			#region Actions
			try
			{
				short param1 = (short)FieldId;
				object param2 = (object)arg_2.Value;
				_Interface.FieldData(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="DataBuffer"></param>
		/// <param name="Format"></param>
		/// <param name="CurSelection"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean LoadFromMemory(SalVariant DataBuffer, SalVariant Format, SalVariant CurSelection, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				object param1 = (object)DataBuffer.Value;
				object param2 = (object)Format.Value;
				object param3 = (object)CurSelection.Value;
				returnValue = _Interface.LoadFromMemory(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Format"></param>
		/// <param name="CurSelection"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean SaveToMemory(SalVariant Format, SalVariant CurSelection, SalVariant returnValue)
		{
			#region Actions
			try
			{
				object param1 = (object)Format.Value;
				object param2 = (object)CurSelection.Value;
				returnValue.Value = _Interface.SaveToMemory(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableId"></param>
		/// <param name="Row"></param>
		/// <param name="Column"></param>
		/// <param name="Attribute">Important: this is one of the Tx4oleLib_TableCellAttributeConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTableCellAttribute(SalNumber TableId, SalNumber Row, SalNumber Column, SalNumber Attribute, SalVariant returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)TableId;
				short param2 = (short)Row;
				short param3 = (short)Column;
				int param4 = (int)Attribute;
				returnValue.Value = _Interface.TableCellAttribute(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableId"></param>
		/// <param name="Row"></param>
		/// <param name="Column"></param>
		/// <param name="Attribute">Important: this is one of the Tx4oleLib_TableCellAttributeConstants constants</param>
		/// <param name="arg_5"></param>
		/// <returns></returns>
		public SalBoolean PropSetTableCellAttribute(SalNumber TableId, SalNumber Row, SalNumber Column, SalNumber Attribute, SalVariant arg_5)
		{
			#region Actions
			try
			{
				short param1 = (short)TableId;
				short param2 = (short)Row;
				short param3 = (short)Column;
				int param4 = (int)Attribute;
				object param5 = (object)arg_5.Value;
				_Interface.TableCellAttribute(param1, param2, param3, param4, param5);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FindWhat"></param>
		/// <param name="Start"></param>
		/// <param name="Options"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean Find(SalString FindWhat, SalVariant Start, SalVariant Options, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)FindWhat;
				object param2 = (object)Start.Value;
				object param3 = (object)Options.Value;
				returnValue = _Interface.Find(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="EnumerationNumber"></param>
		/// <param name="TableId"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TableNext(SalNumber EnumerationNumber, ref SalNumber TableId, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)EnumerationNumber;
				int param2 = (int)TableId;
				returnValue = _Interface.TableNext(param1, ref param2);
				TableId = param2;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableId"></param>
		/// <param name="Row"></param>
		/// <param name="Column"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTableCellStart(SalNumber TableId, SalNumber Row, SalNumber Column, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)TableId;
				short param2 = (short)Row;
				short param3 = (short)Column;
				returnValue = _Interface.TableCellStart(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableId"></param>
		/// <param name="Row"></param>
		/// <param name="Column"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTableCellLength(SalNumber TableId, SalNumber Row, SalNumber Column, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)TableId;
				short param2 = (short)Row;
				short param3 = (short)Column;
				returnValue = _Interface.TableCellLength(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="HeaderFooter">Important: this is one of the Tx4oleLib_HeaderFooterConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean HeaderFooterActivate(SalNumber HeaderFooter, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)HeaderFooter;
				returnValue = _Interface.HeaderFooterActivate(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="HeaderFooter">Important: this is one of the Tx4oleLib_HeaderFooterConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean HeaderFooterSelect(SalNumber HeaderFooter, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)HeaderFooter;
				returnValue = _Interface.HeaderFooterSelect(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="HeaderFooter">Important: this is one of the Tx4oleLib_HeaderFooterConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetHeaderFooterPosition(SalNumber HeaderFooter, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)HeaderFooter;
				returnValue = _Interface.HeaderFooterPosition(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="HeaderFooter">Important: this is one of the Tx4oleLib_HeaderFooterConstants constants</param>
		/// <param name="arg_2"></param>
		/// <returns></returns>
		public SalBoolean PropSetHeaderFooterPosition(SalNumber HeaderFooter, SalNumber arg_2)
		{
			#region Actions
			try
			{
				int param1 = (int)HeaderFooter;
				int param2 = (int)arg_2;
				_Interface.HeaderFooterPosition(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldId"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFieldTypeData(SalNumber FieldId, SalVariant returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)FieldId;
				returnValue.Value = _Interface.FieldTypeData(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldId"></param>
		/// <param name="arg_2"></param>
		/// <returns></returns>
		public SalBoolean PropSetFieldTypeData(SalNumber FieldId, SalVariant arg_2)
		{
			#region Actions
			try
			{
				short param1 = (short)FieldId;
				object param2 = (object)arg_2.Value;
				_Interface.FieldTypeData(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldType">Important: this is one of the Tx4oleLib_FieldTypeConstants constants</param>
		/// <param name="FieldIdOrName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean FieldGoto(SalNumber FieldType, SalVariant FieldIdOrName, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)FieldType;
				object param2 = (object)FieldIdOrName.Value;
				returnValue = _Interface.FieldGoto(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldId"></param>
		/// <param name="returnValue">Important: this is one of the Tx4oleLib_FieldTypeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetFieldType(SalNumber FieldId, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)FieldId;
				returnValue = _Interface.FieldType(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldId"></param>
		/// <param name="arg_2">Important: this is one of the Tx4oleLib_FieldTypeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetFieldType(SalNumber FieldId, SalNumber arg_2)
		{
			#region Actions
			try
			{
				short param1 = (short)FieldId;
				int param2 = (int)arg_2;
				_Interface.FieldType(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean ResetContents(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ResetContents();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="X"></param>
		/// <param name="Y"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean InputPosFromPoint(SalNumber X, SalNumber Y, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)X;
				int param2 = (int)Y;
				returnValue = _Interface.InputPosFromPoint(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="DocName"></param>
		/// <param name="FromPage"></param>
		/// <param name="ToPage"></param>
		/// <param name="Copies"></param>
		/// <returns></returns>
		public SalBoolean PrintDoc(SalString DocName, SalNumber FromPage, SalNumber ToPage, SalNumber Copies)
		{
			#region Actions
			try
			{
				string param1 = (string)DocName;
				short param2 = (short)FromPage;
				short param3 = (short)ToPage;
				short param4 = (short)Copies;
				_Interface.PrintDoc(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Attribute">Important: this is one of the Tx4oleLib_BulletConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetBulletAttribute(SalNumber Attribute, SalVariant returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)Attribute;
				returnValue.Value = _Interface.BulletAttribute(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Attribute">Important: this is one of the Tx4oleLib_BulletConstants constants</param>
		/// <param name="arg_2"></param>
		/// <returns></returns>
		public SalBoolean PropSetBulletAttribute(SalNumber Attribute, SalVariant arg_2)
		{
			#region Actions
			try
			{
				int param1 = (int)Attribute;
				object param2 = (object)arg_2.Value;
				_Interface.BulletAttribute(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Attribute">Important: this is one of the Tx4oleLib_NumberingConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetNumberingAttribute(SalNumber Attribute, SalVariant returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)Attribute;
				returnValue.Value = _Interface.NumberingAttribute(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Attribute">Important: this is one of the Tx4oleLib_NumberingConstants constants</param>
		/// <param name="arg_2"></param>
		/// <returns></returns>
		public SalBoolean PropSetNumberingAttribute(SalNumber Attribute, SalVariant arg_2)
		{
			#region Actions
			try
			{
				int param1 = (int)Attribute;
				object param2 = (object)arg_2.Value;
				_Interface.NumberingAttribute(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean ListAttrDialog(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ListAttrDialog();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="DataBuffer"></param>
		/// <param name="Format"></param>
		/// <param name="CurSelection"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean SaveToMemoryBuffer(SalVariant DataBuffer, SalVariant Format, SalVariant CurSelection, SalVariant returnValue)
		{
			#region Actions
			try
			{
				object param1 = (object)DataBuffer.Value;
				object param2 = (object)Format.Value;
				object param3 = (object)CurSelection.Value;
				returnValue.Value = _Interface.SaveToMemoryBuffer(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TableDeleteColumn(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TableDeleteColumn();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Position">Important: this is one of the Tx4oleLib_TableInsertConstants constants</param>
		/// <param name="Lines"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TableInsertLines(SalNumber Position, SalNumber Lines, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)Position;
				short param2 = (short)Lines;
				returnValue = _Interface.TableInsertLines(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Position">Important: this is one of the Tx4oleLib_TableInsertConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TableInsertColumn(SalNumber Position, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)Position;
				returnValue = _Interface.TableInsertColumn(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Line"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetBaseLinePos(SalNumber Line, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)Line;
				returnValue = _Interface.GetBaseLinePos(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Line"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetCharFromLine(SalNumber Line, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)Line;
				returnValue = _Interface.GetCharFromLine(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetLineCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.GetLineCount();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Char"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetLineFromChar(SalNumber Char, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)Char;
				returnValue = _Interface.GetLineFromChar(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="X"></param>
		/// <param name="Y"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetLineFromPoint(SalNumber X, SalNumber Y, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)X;
				int param2 = (int)Y;
				returnValue = _Interface.GetLineFromPoint(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Line"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetLineRect(SalNumber Line, SalVariant returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)Line;
				returnValue.Value = _Interface.GetLineRect(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean GetTextExtent(SalVariant returnValue)
		{
			#region Actions
			try
			{
				returnValue.Value = _Interface.GetTextExtent();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Caret"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetCaretWidth(SalNumber Caret, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)Caret;
				returnValue = _Interface.CaretWidth(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Caret"></param>
		/// <param name="arg_2"></param>
		/// <returns></returns>
		public SalBoolean PropSetCaretWidth(SalNumber Caret, SalNumber arg_2)
		{
			#region Actions
			try
			{
				short param1 = (short)Caret;
				short param2 = (short)arg_2;
				_Interface.CaretWidth(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TabDialog(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TabDialog();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean StyleDialog(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.StyleDialog();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ElementName"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean XMLElements(SalString ElementName, SalObject returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)ElementName;
				returnValue.Value = _Interface.XMLElements(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean EnableAutomationServer(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.EnableAutomationServer();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Position">Important: this is one of the Tx4oleLib_TableInsertConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TableSplit(SalNumber Position, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)Position;
				returnValue = _Interface.TableSplit(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableId"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTableNestedLevel(SalNumber TableId, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)TableId;
				returnValue = _Interface.TableNestedLevel(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableId"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TableGetOuter(SalNumber TableId, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)TableId;
				returnValue = _Interface.TableGetOuter(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableId"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TableGetOuterMost(SalNumber TableId, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)TableId;
				returnValue = _Interface.TableGetOuterMost(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean StartUndoAction()
		{
			#region Actions
			try
			{
				_Interface.StartUndoAction();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean EndUndoAction()
		{
			#region Actions
			try
			{
				_Interface.EndUndoAction();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ObjectType"></param>
		/// <param name="FileName"></param>
		/// <param name="TextPos"></param>
		/// <param name="Alignment"></param>
		/// <param name="PosX"></param>
		/// <param name="PosY"></param>
		/// <param name="ScaleX"></param>
		/// <param name="ScaleY"></param>
		/// <param name="Textflow"></param>
		/// <param name="DistanceL"></param>
		/// <param name="DistanceT"></param>
		/// <param name="DistanceR"></param>
		/// <param name="DistanceB"></param>
		/// <param name="KindOfObject"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean ObjectInsert(SalNumber ObjectType, SalString FileName, SalNumber TextPos, SalNumber Alignment, SalNumber PosX, SalNumber PosY, SalNumber ScaleX, SalNumber ScaleY, SalNumber Textflow, SalNumber DistanceL, SalNumber DistanceT, SalNumber DistanceR, SalNumber DistanceB, SalVariant KindOfObject, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)ObjectType;
				string param2 = (string)FileName;
				int param3 = (int)TextPos;
				short param4 = (short)Alignment;
				int param5 = (int)PosX;
				int param6 = (int)PosY;
				short param7 = (short)ScaleX;
				short param8 = (short)ScaleY;
				short param9 = (short)Textflow;
				short param10 = (short)DistanceL;
				short param11 = (short)DistanceT;
				short param12 = (short)DistanceR;
				short param13 = (short)DistanceB;
				object param14 = (object)KindOfObject.Value;
				returnValue = _Interface.ObjectInsert(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12, param13, param14);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TextPos"></param>
		/// <param name="Width"></param>
		/// <param name="Height"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TextFrameInsertAsChar(SalNumber TextPos, SalNumber Width, SalNumber Height, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)TextPos;
				short param2 = (short)Width;
				short param3 = (short)Height;
				returnValue = _Interface.TextFrameInsertAsChar(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PageNo"></param>
		/// <param name="PosX"></param>
		/// <param name="PosY"></param>
		/// <param name="Width"></param>
		/// <param name="Height"></param>
		/// <param name="Textflow"></param>
		/// <param name="DistL"></param>
		/// <param name="DistT"></param>
		/// <param name="DistR"></param>
		/// <param name="DistB"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TextFrameInsertFixed(SalNumber PageNo, SalNumber PosX, SalNumber PosY, SalNumber Width, SalNumber Height, SalNumber Textflow, SalNumber DistL, SalNumber DistT, SalNumber DistR, SalNumber DistB, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)PageNo;
				int param2 = (int)PosX;
				int param3 = (int)PosY;
				short param4 = (short)Width;
				short param5 = (short)Height;
				short param6 = (short)Textflow;
				short param7 = (short)DistL;
				short param8 = (short)DistT;
				short param9 = (short)DistR;
				short param10 = (short)DistB;
				returnValue = _Interface.TextFrameInsertFixed(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TextPos"></param>
		/// <param name="Alignment"></param>
		/// <param name="PosX"></param>
		/// <param name="PosY"></param>
		/// <param name="Width"></param>
		/// <param name="Height"></param>
		/// <param name="Textflow"></param>
		/// <param name="DistL"></param>
		/// <param name="DistT"></param>
		/// <param name="DistR"></param>
		/// <param name="DistB"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TextFrameInsert(SalNumber TextPos, SalNumber Alignment, SalNumber PosX, SalNumber PosY, SalNumber Width, SalNumber Height, SalNumber Textflow, SalNumber DistL, SalNumber DistT, SalNumber DistR, SalNumber DistB, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)TextPos;
				short param2 = (short)Alignment;
				int param3 = (int)PosX;
				int param4 = (int)PosY;
				short param5 = (short)Width;
				short param6 = (short)Height;
				short param7 = (short)Textflow;
				short param8 = (short)DistL;
				short param9 = (short)DistT;
				short param10 = (short)DistR;
				short param11 = (short)DistB;
				returnValue = _Interface.TextFrameInsert(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean ObjectAttrDialog(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ObjectAttrDialog();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TextFrameId"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean TextFrameSelect(SalNumber TextFrameId, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)TextFrameId;
				returnValue = _Interface.TextFrameSelect(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ObjectKind"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean ObjectGetSelected(SalNumber ObjectKind, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)ObjectKind;
				returnValue = _Interface.ObjectGetSelected(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="index"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTextFrameInternalMargin(SalNumber index, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)index;
				returnValue = _Interface.TextFrameInternalMargin(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="index"></param>
		/// <param name="arg_2"></param>
		/// <returns></returns>
		public SalBoolean PropSetTextFrameInternalMargin(SalNumber index, SalNumber arg_2)
		{
			#region Actions
			try
			{
				short param1 = (short)index;
				short param2 = (short)arg_2;
				_Interface.TextFrameInternalMargin(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FileName"></param>
		/// <param name="TextPos"></param>
		/// <param name="Alignment"></param>
		/// <param name="PosX"></param>
		/// <param name="PosY"></param>
		/// <param name="ScaleX"></param>
		/// <param name="ScaleY"></param>
		/// <param name="Textflow"></param>
		/// <param name="DistanceL"></param>
		/// <param name="DistanceT"></param>
		/// <param name="DistanceR"></param>
		/// <param name="DistanceB"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean ImageInsert(SalString FileName, SalNumber TextPos, SalNumber Alignment, SalNumber PosX, SalNumber PosY, SalNumber ScaleX, SalNumber ScaleY, SalNumber Textflow, SalNumber DistanceL, SalNumber DistanceT, SalNumber DistanceR, SalNumber DistanceB, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)FileName;
				int param2 = (int)TextPos;
				short param3 = (short)Alignment;
				int param4 = (int)PosX;
				int param5 = (int)PosY;
				short param6 = (short)ScaleX;
				short param7 = (short)ScaleY;
				short param8 = (short)Textflow;
				short param9 = (short)DistanceL;
				short param10 = (short)DistanceT;
				short param11 = (short)DistanceR;
				short param12 = (short)DistanceB;
				returnValue = _Interface.ImageInsert(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11, param12);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FileName"></param>
		/// <param name="TextPos"></param>
		/// <param name="ScaleX"></param>
		/// <param name="ScaleY"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean ImageInsertAsChar(SalString FileName, SalNumber TextPos, SalNumber ScaleX, SalNumber ScaleY, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)FileName;
				int param2 = (int)TextPos;
				short param3 = (short)ScaleX;
				short param4 = (short)ScaleY;
				returnValue = _Interface.ImageInsertAsChar(param1, param2, param3, param4);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FileName"></param>
		/// <param name="PageNo"></param>
		/// <param name="PosX"></param>
		/// <param name="PosY"></param>
		/// <param name="ScaleX"></param>
		/// <param name="ScaleY"></param>
		/// <param name="Textflow"></param>
		/// <param name="DistanceL"></param>
		/// <param name="DistanceT"></param>
		/// <param name="DistanceR"></param>
		/// <param name="DistanceB"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean ImageInsertFixed(SalString FileName, SalNumber PageNo, SalNumber PosX, SalNumber PosY, SalNumber ScaleX, SalNumber ScaleY, SalNumber Textflow, SalNumber DistanceL, SalNumber DistanceT, SalNumber DistanceR, SalNumber DistanceB, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)FileName;
				int param2 = (int)PageNo;
				int param3 = (int)PosX;
				int param4 = (int)PosY;
				short param5 = (short)ScaleX;
				short param6 = (short)ScaleY;
				short param7 = (short)Textflow;
				short param8 = (short)DistanceL;
				short param9 = (short)DistanceT;
				short param10 = (short)DistanceR;
				short param11 = (short)DistanceB;
				returnValue = _Interface.ImageInsertFixed(param1, param2, param3, param4, param5, param6, param7, param8, param9, param10, param11);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldInputPosition">Important: this is one of the Tx4oleLib_FieldInputPositionConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean FieldSetInputPos(SalNumber FieldInputPosition, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)FieldInputPosition;
				returnValue = _Interface.FieldSetInputPos(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BreakKind">Important: this is one of the Tx4oleLib_SectionBreakKindConstants constants</param>
		/// <param name="TextPos"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean SectionInsert(SalNumber BreakKind, SalNumber TextPos, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)BreakKind;
				int param2 = (int)TextPos;
				returnValue = _Interface.SectionInsert(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ActiveTab"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean SectionFormatDialog(SalNumber ActiveTab, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				short param1 = (short)ActiveTab;
				returnValue = _Interface.SectionFormatDialog(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="HeaderFooter">Important: this is one of the Tx4oleLib_HeaderFooterConstants constants</param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetHeaderFooterConnectedToPrevious(SalNumber HeaderFooter, ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				int param1 = (int)HeaderFooter;
				returnValue = _Interface.HeaderFooterConnectedToPrevious(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="HeaderFooter">Important: this is one of the Tx4oleLib_HeaderFooterConstants constants</param>
		/// <param name="arg_2"></param>
		/// <returns></returns>
		public SalBoolean PropSetHeaderFooterConnectedToPrevious(SalNumber HeaderFooter, SalBoolean arg_2)
		{
			#region Actions
			try
			{
				int param1 = (int)HeaderFooter;
				bool param2 = (bool)arg_2;
				_Interface.HeaderFooterConnectedToPrevious(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean AboutBox()
		{
			#region Actions
			try
			{
				_Interface.AboutBox();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Enabled"></param>
		/// <returns></returns>
		public SalBoolean PropSetEnabled(SalBoolean Enabled)
		{
			#region Actions
			try
			{
				bool param1 = (bool)Enabled;
				_Interface.Enabled = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetEnabled(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Enabled;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BackColor"></param>
		/// <returns></returns>
		public SalBoolean PropSetBackColor(SalNumber BackColor)
		{
			#region Actions
			try
			{
				uint param1 = (uint)BackColor;
				_Interface.BackColor = (int)param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetBackColor(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.BackColor;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ForeColor"></param>
		/// <returns></returns>
		public SalBoolean PropSetForeColor(SalNumber ForeColor)
		{
			#region Actions
			try
			{
				uint param1 = (uint)ForeColor;
				_Interface.ForeColor = (int)param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetForeColor(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ForeColor;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hWnd"></param>
		/// <returns></returns>
		public SalBoolean PropSethWnd(SalNumber hWnd)
		{
			#region Actions
			try
			{
				int param1 = (int)hWnd;
				_Interface.hWnd = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGethWnd(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.hWnd;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TabKey"></param>
		/// <returns></returns>
		public SalBoolean PropSetTabKey(SalBoolean TabKey)
		{
			#region Actions
			try
			{
				bool param1 = (bool)TabKey;
				_Interface.TabKey = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTabKey(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TabKey;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FormatSelection"></param>
		/// <returns></returns>
		public SalBoolean PropSetFormatSelection(SalBoolean FormatSelection)
		{
			#region Actions
			try
			{
				bool param1 = (bool)FormatSelection;
				_Interface.FormatSelection = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFormatSelection(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FormatSelection;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="VTSpellDictionary"></param>
		/// <returns></returns>
		public SalBoolean PropSetVTSpellDictionary(SalString VTSpellDictionary)
		{
			#region Actions
			try
			{
				string param1 = (string)VTSpellDictionary;
				_Interface.VTSpellDictionary = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetVTSpellDictionary(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.VTSpellDictionary;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BorderStyle"></param>
		/// <returns></returns>
		public SalBoolean PropSetBorderStyle(SalNumber BorderStyle)
		{
			#region Actions
			try
			{
				short param1 = (short)BorderStyle;
				_Interface.BorderStyle = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetBorderStyle(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.BorderStyle;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BackStyle"></param>
		/// <returns></returns>
		public SalBoolean PropSetBackStyle(SalNumber BackStyle)
		{
			#region Actions
			try
			{
				short param1 = (short)BackStyle;
				_Interface.BackStyle = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetBackStyle(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.BackStyle;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontBold"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontBold(SalNumber FontBold)
		{
			#region Actions
			try
			{
				short param1 = (short)FontBold;
				_Interface.FontBold = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontBold(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontBold;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontItalic"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontItalic(SalNumber FontItalic)
		{
			#region Actions
			try
			{
				short param1 = (short)FontItalic;
				_Interface.FontItalic = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontItalic(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontItalic;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontName"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontName(SalString FontName)
		{
			#region Actions
			try
			{
				string param1 = (string)FontName;
				_Interface.FontName = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontName(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontName;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontSize"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontSize(SalNumber FontSize)
		{
			#region Actions
			try
			{
				short param1 = (short)FontSize;
				_Interface.FontSize = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontSize(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontSize;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontStrikethru"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontStrikethru(SalNumber FontStrikethru)
		{
			#region Actions
			try
			{
				short param1 = (short)FontStrikethru;
				_Interface.FontStrikethru = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontStrikethru(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontStrikethru;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontUnderline"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontUnderline(SalNumber FontUnderline)
		{
			#region Actions
			try
			{
				short param1 = (short)FontUnderline;
				_Interface.FontUnderline = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontUnderline(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontUnderline;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PageWidth"></param>
		/// <returns></returns>
		public SalBoolean PropSetPageWidth(SalNumber PageWidth)
		{
			#region Actions
			try
			{
				int param1 = (int)PageWidth;
				_Interface.PageWidth = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPageWidth(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PageWidth;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PageHeight"></param>
		/// <returns></returns>
		public SalBoolean PropSetPageHeight(SalNumber PageHeight)
		{
			#region Actions
			try
			{
				int param1 = (int)PageHeight;
				_Interface.PageHeight = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPageHeight(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PageHeight;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ScrollBars"></param>
		/// <returns></returns>
		public SalBoolean PropSetScrollBars(SalNumber ScrollBars)
		{
			#region Actions
			try
			{
				short param1 = (short)ScrollBars;
				_Interface.ScrollBars = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetScrollBars(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ScrollBars;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Text"></param>
		/// <returns></returns>
		public SalBoolean PropSetText(SalString Text)
		{
			#region Actions
			try
			{
				string param1 = (string)Text;
				_Interface.Text = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetText(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Text;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Alignment"></param>
		/// <returns></returns>
		public SalBoolean PropSetAlignment(SalNumber Alignment)
		{
			#region Actions
			try
			{
				short param1 = (short)Alignment;
				_Interface.Alignment = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetAlignment(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Alignment;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FrameDistance"></param>
		/// <returns></returns>
		public SalBoolean PropSetFrameDistance(SalNumber FrameDistance)
		{
			#region Actions
			try
			{
				short param1 = (short)FrameDistance;
				_Interface.FrameDistance = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFrameDistance(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FrameDistance;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FrameLineWidth"></param>
		/// <returns></returns>
		public SalBoolean PropSetFrameLineWidth(SalNumber FrameLineWidth)
		{
			#region Actions
			try
			{
				short param1 = (short)FrameLineWidth;
				_Interface.FrameLineWidth = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFrameLineWidth(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FrameLineWidth;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FrameStyle"></param>
		/// <returns></returns>
		public SalBoolean PropSetFrameStyle(SalNumber FrameStyle)
		{
			#region Actions
			try
			{
				short param1 = (short)FrameStyle;
				_Interface.FrameStyle = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFrameStyle(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FrameStyle;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ScrollPosX"></param>
		/// <returns></returns>
		public SalBoolean PropSetScrollPosX(SalNumber ScrollPosX)
		{
			#region Actions
			try
			{
				int param1 = (int)ScrollPosX;
				_Interface.ScrollPosX = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetScrollPosX(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ScrollPosX;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ScrollPosY"></param>
		/// <returns></returns>
		public SalBoolean PropSetScrollPosY(SalNumber ScrollPosY)
		{
			#region Actions
			try
			{
				int param1 = (int)ScrollPosY;
				_Interface.ScrollPosY = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetScrollPosY(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ScrollPosY;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PageMarginL"></param>
		/// <returns></returns>
		public SalBoolean PropSetPageMarginL(SalNumber PageMarginL)
		{
			#region Actions
			try
			{
				int param1 = (int)PageMarginL;
				_Interface.PageMarginL = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPageMarginL(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PageMarginL;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PageMarginT"></param>
		/// <returns></returns>
		public SalBoolean PropSetPageMarginT(SalNumber PageMarginT)
		{
			#region Actions
			try
			{
				int param1 = (int)PageMarginT;
				_Interface.PageMarginT = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPageMarginT(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PageMarginT;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PageMarginR"></param>
		/// <returns></returns>
		public SalBoolean PropSetPageMarginR(SalNumber PageMarginR)
		{
			#region Actions
			try
			{
				int param1 = (int)PageMarginR;
				_Interface.PageMarginR = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPageMarginR(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PageMarginR;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PageMarginB"></param>
		/// <returns></returns>
		public SalBoolean PropSetPageMarginB(SalNumber PageMarginB)
		{
			#region Actions
			try
			{
				int param1 = (int)PageMarginB;
				_Interface.PageMarginB = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPageMarginB(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PageMarginB;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PrintDevice"></param>
		/// <returns></returns>
		public SalBoolean PropSetPrintDevice(SalNumber PrintDevice)
		{
			#region Actions
			try
			{
				int param1 = (int)PrintDevice;
				_Interface.PrintDevice = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPrintDevice(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PrintDevice;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ControlChars"></param>
		/// <returns></returns>
		public SalBoolean PropSetControlChars(SalBoolean ControlChars)
		{
			#region Actions
			try
			{
				bool param1 = (bool)ControlChars;
				_Interface.ControlChars = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetControlChars(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ControlChars;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="HideSelection"></param>
		/// <returns></returns>
		public SalBoolean PropSetHideSelection(SalBoolean HideSelection)
		{
			#region Actions
			try
			{
				bool param1 = (bool)HideSelection;
				_Interface.HideSelection = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetHideSelection(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.HideSelection;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="InsertionMode"></param>
		/// <returns></returns>
		public SalBoolean PropSetInsertionMode(SalBoolean InsertionMode)
		{
			#region Actions
			try
			{
				bool param1 = (bool)InsertionMode;
				_Interface.InsertionMode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetInsertionMode(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.InsertionMode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="SelLength"></param>
		/// <returns></returns>
		public SalBoolean PropSetSelLength(SalNumber SelLength)
		{
			#region Actions
			try
			{
				int param1 = (int)SelLength;
				_Interface.SelLength = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSelLength(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SelLength;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="SelStart"></param>
		/// <returns></returns>
		public SalBoolean PropSetSelStart(SalNumber SelStart)
		{
			#region Actions
			try
			{
				int param1 = (int)SelStart;
				_Interface.SelStart = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSelStart(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SelStart;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="SelText"></param>
		/// <returns></returns>
		public SalBoolean PropSetSelText(SalString SelText)
		{
			#region Actions
			try
			{
				string param1 = (string)SelText;
				_Interface.SelText = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSelText(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SelText;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ClipChildren"></param>
		/// <returns></returns>
		public SalBoolean PropSetClipChildren(SalBoolean ClipChildren)
		{
			#region Actions
			try
			{
				bool param1 = (bool)ClipChildren;
				_Interface.ClipChildren = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetClipChildren(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ClipChildren;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ClipSiblings"></param>
		/// <returns></returns>
		public SalBoolean PropSetClipSiblings(SalBoolean ClipSiblings)
		{
			#region Actions
			try
			{
				bool param1 = (bool)ClipSiblings;
				_Interface.ClipSiblings = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetClipSiblings(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ClipSiblings;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="SizeMode"></param>
		/// <returns></returns>
		public SalBoolean PropSetSizeMode(SalNumber SizeMode)
		{
			#region Actions
			try
			{
				short param1 = (short)SizeMode;
				_Interface.SizeMode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSizeMode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SizeMode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Language"></param>
		/// <returns></returns>
		public SalBoolean PropSetLanguage(SalNumber Language)
		{
			#region Actions
			try
			{
				short param1 = (short)Language;
				_Interface.Language = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetLanguage(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Language;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ViewMode"></param>
		/// <returns></returns>
		public SalBoolean PropSetViewMode(SalNumber ViewMode)
		{
			#region Actions
			try
			{
				short param1 = (short)ViewMode;
				_Interface.ViewMode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetViewMode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ViewMode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PrintOffset"></param>
		/// <returns></returns>
		public SalBoolean PropSetPrintOffset(SalBoolean PrintOffset)
		{
			#region Actions
			try
			{
				bool param1 = (bool)PrintOffset;
				_Interface.PrintOffset = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPrintOffset(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PrintOffset;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ZoomFactor"></param>
		/// <returns></returns>
		public SalBoolean PropSetZoomFactor(SalNumber ZoomFactor)
		{
			#region Actions
			try
			{
				short param1 = (short)ZoomFactor;
				_Interface.ZoomFactor = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetZoomFactor(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ZoomFactor;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldCurrent"></param>
		/// <returns></returns>
		public SalBoolean PropSetFieldCurrent(SalNumber FieldCurrent)
		{
			#region Actions
			try
			{
				short param1 = (short)FieldCurrent;
				_Interface.FieldCurrent = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFieldCurrent(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FieldCurrent;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldChangeable"></param>
		/// <returns></returns>
		public SalBoolean PropSetFieldChangeable(SalBoolean FieldChangeable)
		{
			#region Actions
			try
			{
				bool param1 = (bool)FieldChangeable;
				_Interface.FieldChangeable = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFieldChangeable(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FieldChangeable;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldDeleteable"></param>
		/// <returns></returns>
		public SalBoolean PropSetFieldDeleteable(SalBoolean FieldDeleteable)
		{
			#region Actions
			try
			{
				bool param1 = (bool)FieldDeleteable;
				_Interface.FieldDeleteable = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFieldDeleteable(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FieldDeleteable;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldText"></param>
		/// <returns></returns>
		public SalBoolean PropSetFieldText(SalString FieldText)
		{
			#region Actions
			try
			{
				string param1 = (string)FieldText;
				_Interface.FieldText = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFieldText(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FieldText;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TabCurrent"></param>
		/// <returns></returns>
		public SalBoolean PropSetTabCurrent(SalNumber TabCurrent)
		{
			#region Actions
			try
			{
				short param1 = (short)TabCurrent;
				_Interface.TabCurrent = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTabCurrent(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TabCurrent;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TabType"></param>
		/// <returns></returns>
		public SalBoolean PropSetTabType(SalNumber TabType)
		{
			#region Actions
			try
			{
				short param1 = (short)TabType;
				_Interface.TabType = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTabType(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TabType;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TabPos"></param>
		/// <returns></returns>
		public SalBoolean PropSetTabPos(SalNumber TabPos)
		{
			#region Actions
			try
			{
				int param1 = (int)TabPos;
				_Interface.TabPos = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTabPos(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TabPos;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="BaseLine"></param>
		/// <returns></returns>
		public SalBoolean PropSetBaseLine(SalNumber BaseLine)
		{
			#region Actions
			try
			{
				short param1 = (short)BaseLine;
				_Interface.BaseLine = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetBaseLine(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.BaseLine;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="LineSpacing"></param>
		/// <returns></returns>
		public SalBoolean PropSetLineSpacing(SalNumber LineSpacing)
		{
			#region Actions
			try
			{
				short param1 = (short)LineSpacing;
				_Interface.LineSpacing = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetLineSpacing(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LineSpacing;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PrintZoom"></param>
		/// <returns></returns>
		public SalBoolean PropSetPrintZoom(SalNumber PrintZoom)
		{
			#region Actions
			try
			{
				short param1 = (short)PrintZoom;
				_Interface.PrintZoom = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPrintZoom(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PrintZoom;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="RTFSelText"></param>
		/// <returns></returns>
		public SalBoolean PropSetRTFSelText(SalString RTFSelText)
		{
			#region Actions
			try
			{
				string param1 = (string)RTFSelText;
				_Interface.RTFSelText = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetRTFSelText(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.RTFSelText;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ImageFilters"></param>
		/// <returns></returns>
		public SalBoolean PropSetImageFilters(SalString ImageFilters)
		{
			#region Actions
			try
			{
				string param1 = (string)ImageFilters;
				_Interface.ImageFilters = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetImageFilters(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ImageFilters;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ImageFilename"></param>
		/// <returns></returns>
		public SalBoolean PropSetImageFilename(SalString ImageFilename)
		{
			#region Actions
			try
			{
				string param1 = (string)ImageFilename;
				_Interface.ImageFilename = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetImageFilename(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ImageFilename;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="LineSpacingT"></param>
		/// <returns></returns>
		public SalBoolean PropSetLineSpacingT(SalNumber LineSpacingT)
		{
			#region Actions
			try
			{
				short param1 = (short)LineSpacingT;
				_Interface.LineSpacingT = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetLineSpacingT(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LineSpacingT;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ObjectCurrent"></param>
		/// <returns></returns>
		public SalBoolean PropSetObjectCurrent(SalNumber ObjectCurrent)
		{
			#region Actions
			try
			{
				short param1 = (short)ObjectCurrent;
				_Interface.ObjectCurrent = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetObjectCurrent(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ObjectCurrent;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="StatusBarHandle"></param>
		/// <returns></returns>
		public SalBoolean PropSetStatusBarHandle(SalNumber StatusBarHandle)
		{
			#region Actions
			try
			{
				int param1 = (int)StatusBarHandle;
				_Interface.StatusBarHandle = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetStatusBarHandle(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.StatusBarHandle;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="RulerHandle"></param>
		/// <returns></returns>
		public SalBoolean PropSetRulerHandle(SalNumber RulerHandle)
		{
			#region Actions
			try
			{
				int param1 = (int)RulerHandle;
				_Interface.RulerHandle = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetRulerHandle(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.RulerHandle;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ButtonBarHandle"></param>
		/// <returns></returns>
		public SalBoolean PropSetButtonBarHandle(SalNumber ButtonBarHandle)
		{
			#region Actions
			try
			{
				int param1 = (int)ButtonBarHandle;
				_Interface.ButtonBarHandle = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetButtonBarHandle(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ButtonBarHandle;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ObjectScaleX"></param>
		/// <returns></returns>
		public SalBoolean PropSetObjectScaleX(SalNumber ObjectScaleX)
		{
			#region Actions
			try
			{
				short param1 = (short)ObjectScaleX;
				_Interface.ObjectScaleX = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetObjectScaleX(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ObjectScaleX;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ObjectScaleY"></param>
		/// <returns></returns>
		public SalBoolean PropSetObjectScaleY(SalNumber ObjectScaleY)
		{
			#region Actions
			try
			{
				short param1 = (short)ObjectScaleY;
				_Interface.ObjectScaleY = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetObjectScaleY(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ObjectScaleY;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ObjectTextflow"></param>
		/// <returns></returns>
		public SalBoolean PropSetObjectTextflow(SalNumber ObjectTextflow)
		{
			#region Actions
			try
			{
				short param1 = (short)ObjectTextflow;
				_Interface.ObjectTextflow = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetObjectTextflow(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ObjectTextflow;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ObjectSizeMode"></param>
		/// <returns></returns>
		public SalBoolean PropSetObjectSizeMode(SalNumber ObjectSizeMode)
		{
			#region Actions
			try
			{
				short param1 = (short)ObjectSizeMode;
				_Interface.ObjectSizeMode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetObjectSizeMode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ObjectSizeMode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ImageSaveMode"></param>
		/// <returns></returns>
		public SalBoolean PropSetImageSaveMode(SalNumber ImageSaveMode)
		{
			#region Actions
			try
			{
				short param1 = (short)ImageSaveMode;
				_Interface.ImageSaveMode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetImageSaveMode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ImageSaveMode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ImageDisplayMode"></param>
		/// <returns></returns>
		public SalBoolean PropSetImageDisplayMode(SalNumber ImageDisplayMode)
		{
			#region Actions
			try
			{
				short param1 = (short)ImageDisplayMode;
				_Interface.ImageDisplayMode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetImageDisplayMode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ImageDisplayMode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PrintColors"></param>
		/// <returns></returns>
		public SalBoolean PropSetPrintColors(SalBoolean PrintColors)
		{
			#region Actions
			try
			{
				bool param1 = (bool)PrintColors;
				_Interface.PrintColors = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPrintColors(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PrintColors;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="EditMode"></param>
		/// <returns></returns>
		public SalBoolean PropSetEditMode(SalNumber EditMode)
		{
			#region Actions
			try
			{
				short param1 = (short)EditMode;
				_Interface.EditMode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetEditMode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.EditMode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="MousePointer"></param>
		/// <returns></returns>
		public SalBoolean PropSetMousePointer(SalNumber MousePointer)
		{
			#region Actions
			try
			{
				short param1 = (short)MousePointer;
				_Interface.MousePointer = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetMousePointer(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.MousePointer;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="NextWindow"></param>
		/// <returns></returns>
		public SalBoolean PropSetNextWindow(SalNumber NextWindow)
		{
			#region Actions
			try
			{
				int param1 = (int)NextWindow;
				_Interface.NextWindow = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetNextWindow(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.NextWindow;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="CanUndo"></param>
		/// <returns></returns>
		public SalBoolean PropSetCanUndo(SalNumber CanUndo)
		{
			#region Actions
			try
			{
				short param1 = (short)CanUndo;
				_Interface.CanUndo = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetCanUndo(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.CanUndo;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="CanRedo"></param>
		/// <returns></returns>
		public SalBoolean PropSetCanRedo(SalNumber CanRedo)
		{
			#region Actions
			try
			{
				short param1 = (short)CanRedo;
				_Interface.CanRedo = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetCanRedo(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.CanRedo;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="CurrentPages"></param>
		/// <returns></returns>
		public SalBoolean PropSetCurrentPages(SalNumber CurrentPages)
		{
			#region Actions
			try
			{
				int param1 = (int)CurrentPages;
				_Interface.CurrentPages = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetCurrentPages(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.CurrentPages;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldPosX"></param>
		/// <returns></returns>
		public SalBoolean PropSetFieldPosX(SalNumber FieldPosX)
		{
			#region Actions
			try
			{
				int param1 = (int)FieldPosX;
				_Interface.FieldPosX = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFieldPosX(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FieldPosX;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldPosY"></param>
		/// <returns></returns>
		public SalBoolean PropSetFieldPosY(SalNumber FieldPosY)
		{
			#region Actions
			try
			{
				int param1 = (int)FieldPosY;
				_Interface.FieldPosY = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFieldPosY(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FieldPosY;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldStart"></param>
		/// <returns></returns>
		public SalBoolean PropSetFieldStart(SalNumber FieldStart)
		{
			#region Actions
			try
			{
				int param1 = (int)FieldStart;
				_Interface.FieldStart = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFieldStart(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FieldStart;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldEnd"></param>
		/// <returns></returns>
		public SalBoolean PropSetFieldEnd(SalNumber FieldEnd)
		{
			#region Actions
			try
			{
				int param1 = (int)FieldEnd;
				_Interface.FieldEnd = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFieldEnd(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FieldEnd;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="IndentL"></param>
		/// <returns></returns>
		public SalBoolean PropSetIndentL(SalNumber IndentL)
		{
			#region Actions
			try
			{
				short param1 = (short)IndentL;
				_Interface.IndentL = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetIndentL(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.IndentL;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="IndentR"></param>
		/// <returns></returns>
		public SalBoolean PropSetIndentR(SalNumber IndentR)
		{
			#region Actions
			try
			{
				short param1 = (short)IndentR;
				_Interface.IndentR = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetIndentR(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.IndentR;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="IndentFL"></param>
		/// <returns></returns>
		public SalBoolean PropSetIndentFL(SalNumber IndentFL)
		{
			#region Actions
			try
			{
				short param1 = (short)IndentFL;
				_Interface.IndentFL = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetIndentFL(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.IndentFL;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="IndentT"></param>
		/// <returns></returns>
		public SalBoolean PropSetIndentT(SalNumber IndentT)
		{
			#region Actions
			try
			{
				short param1 = (short)IndentT;
				_Interface.IndentT = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetIndentT(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.IndentT;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="IndentB"></param>
		/// <returns></returns>
		public SalBoolean PropSetIndentB(SalNumber IndentB)
		{
			#region Actions
			try
			{
				short param1 = (short)IndentB;
				_Interface.IndentB = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetIndentB(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.IndentB;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TextBkColor"></param>
		/// <returns></returns>
		public SalBoolean PropSetTextBkColor(SalNumber TextBkColor)
		{
			#region Actions
			try
			{
				uint param1 = (uint)TextBkColor;
				_Interface.TextBkColor = (int)param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTextBkColor(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TextBkColor;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="DataFormat"></param>
		/// <returns></returns>
		public SalBoolean PropSetDataFormat(SalNumber DataFormat)
		{
			#region Actions
			try
			{
				short param1 = (short)DataFormat;
				_Interface.DataFormat = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetDataFormat(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.DataFormat;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="DataText"></param>
		/// <returns></returns>
		public SalBoolean PropSetDataText(SalString DataText)
		{
			#region Actions
			try
			{
				string param1 = (string)DataText;
				_Interface.DataText = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetDataText(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.DataText;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ViewSection"></param>
		/// <returns></returns>
		public SalBoolean PropSetViewSection(SalNumber ViewSection)
		{
			#region Actions
			try
			{
				short param1 = (short)ViewSection;
				_Interface.ViewSection = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetViewSection(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ViewSection;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ViewImagePath"></param>
		/// <returns></returns>
		public SalBoolean PropSetViewImagePath(SalString ViewImagePath)
		{
			#region Actions
			try
			{
				string param1 = (string)ViewImagePath;
				_Interface.ViewImagePath = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetViewImagePath(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ViewImagePath;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="AutoExpand"></param>
		/// <returns></returns>
		public SalBoolean PropSetAutoExpand(SalBoolean AutoExpand)
		{
			#region Actions
			try
			{
				bool param1 = (bool)AutoExpand;
				_Interface.AutoExpand = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetAutoExpand(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.AutoExpand;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableCanInsert"></param>
		/// <returns></returns>
		public SalBoolean PropSetTableCanInsert(SalBoolean TableCanInsert)
		{
			#region Actions
			try
			{
				bool param1 = (bool)TableCanInsert;
				_Interface.TableCanInsert = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTableCanInsert(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TableCanInsert;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableCanDeleteLines"></param>
		/// <returns></returns>
		public SalBoolean PropSetTableCanDeleteLines(SalBoolean TableCanDeleteLines)
		{
			#region Actions
			try
			{
				bool param1 = (bool)TableCanDeleteLines;
				_Interface.TableCanDeleteLines = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTableCanDeleteLines(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TableCanDeleteLines;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="EnableHyperlinks"></param>
		/// <returns></returns>
		public SalBoolean PropSetEnableHyperlinks(SalBoolean EnableHyperlinks)
		{
			#region Actions
			try
			{
				bool param1 = (bool)EnableHyperlinks;
				_Interface.EnableHyperlinks = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetEnableHyperlinks(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.EnableHyperlinks;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableGridLines"></param>
		/// <returns></returns>
		public SalBoolean PropSetTableGridLines(SalBoolean TableGridLines)
		{
			#region Actions
			try
			{
				bool param1 = (bool)TableGridLines;
				_Interface.TableGridLines = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTableGridLines(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TableGridLines;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableCanChangeAttr"></param>
		/// <returns></returns>
		public SalBoolean PropSetTableCanChangeAttr(SalBoolean TableCanChangeAttr)
		{
			#region Actions
			try
			{
				bool param1 = (bool)TableCanChangeAttr;
				_Interface.TableCanChangeAttr = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTableCanChangeAttr(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TableCanChangeAttr;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableAtInputPos"></param>
		/// <returns></returns>
		public SalBoolean PropSetTableAtInputPos(SalNumber TableAtInputPos)
		{
			#region Actions
			try
			{
				short param1 = (short)TableAtInputPos;
				_Interface.TableAtInputPos = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTableAtInputPos(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TableAtInputPos;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableColAtInputPos"></param>
		/// <returns></returns>
		public SalBoolean PropSetTableColAtInputPos(SalNumber TableColAtInputPos)
		{
			#region Actions
			try
			{
				short param1 = (short)TableColAtInputPos;
				_Interface.TableColAtInputPos = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTableColAtInputPos(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TableColAtInputPos;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableRowAtInputPos"></param>
		/// <returns></returns>
		public SalBoolean PropSetTableRowAtInputPos(SalNumber TableRowAtInputPos)
		{
			#region Actions
			try
			{
				short param1 = (short)TableRowAtInputPos;
				_Interface.TableRowAtInputPos = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTableRowAtInputPos(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TableRowAtInputPos;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontUnderlineStyle"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontUnderlineStyle(SalNumber FontUnderlineStyle)
		{
			#region Actions
			try
			{
				short param1 = (short)FontUnderlineStyle;
				_Interface.FontUnderlineStyle = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontUnderlineStyle(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontUnderlineStyle;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="DataTextFormat"></param>
		/// <returns></returns>
		public SalBoolean PropSetDataTextFormat(SalNumber DataTextFormat)
		{
			#region Actions
			try
			{
				short param1 = (short)DataTextFormat;
				_Interface.DataTextFormat = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetDataTextFormat(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.DataTextFormat;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ResourceFile"></param>
		/// <returns></returns>
		public SalBoolean PropSetResourceFile(SalString ResourceFile)
		{
			#region Actions
			try
			{
				string param1 = (string)ResourceFile;
				_Interface.ResourceFile = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetResourceFile(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ResourceFile;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="CurrentInputPosition"></param>
		/// <returns></returns>
		public SalBoolean PropSetCurrentInputPosition(SalVariant CurrentInputPosition)
		{
			#region Actions
			try
			{
				object param1 = (object)CurrentInputPosition.Value;
				_Interface.CurrentInputPosition = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetCurrentInputPosition(SalVariant returnValue)
		{
			#region Actions
			try
			{
				returnValue.Value = _Interface.CurrentInputPosition;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="HeaderFooterStyle">Important: this is one of the Tx4oleLib_HeaderFooterStyleConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetHeaderFooterStyle(SalNumber HeaderFooterStyle)
		{
			#region Actions
			try
			{
				int param1 = (int)HeaderFooterStyle;
				_Interface.HeaderFooterStyle = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the Tx4oleLib_HeaderFooterStyleConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetHeaderFooterStyle(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.HeaderFooterStyle;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="HeaderFooter">Important: this is one of the Tx4oleLib_HeaderFooterConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetHeaderFooter(SalNumber HeaderFooter)
		{
			#region Actions
			try
			{
				int param1 = (int)HeaderFooter;
				_Interface.HeaderFooter = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the Tx4oleLib_HeaderFooterConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetHeaderFooter(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.HeaderFooter;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldAtInputPos"></param>
		/// <returns></returns>
		public SalBoolean PropSetFieldAtInputPos(SalNumber FieldAtInputPos)
		{
			#region Actions
			try
			{
				short param1 = (short)FieldAtInputPos;
				_Interface.FieldAtInputPos = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFieldAtInputPos(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FieldAtInputPos;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ObjectItem"></param>
		/// <returns></returns>
		public SalBoolean PropSetObjectItem(SalObject ObjectItem)
		{
			#region Actions
			try
			{
				object param1 = (object)ObjectItem.Value;
				_Interface.ObjectItem = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetObjectItem(SalObject returnValue)
		{
			#region Actions
			try
			{
				returnValue.Value = _Interface.ObjectItem;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="LockWindowUpdate"></param>
		/// <returns></returns>
		public SalBoolean PropSetLockWindowUpdate(SalBoolean LockWindowUpdate)
		{
			#region Actions
			try
			{
				bool param1 = (bool)LockWindowUpdate;
				_Interface.LockWindowUpdate = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetLockWindowUpdate(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.LockWindowUpdate;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="CanCopy"></param>
		/// <returns></returns>
		public SalBoolean PropSetCanCopy(SalBoolean CanCopy)
		{
			#region Actions
			try
			{
				bool param1 = (bool)CanCopy;
				_Interface.CanCopy = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetCanCopy(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.CanCopy;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="CanPaste"></param>
		/// <returns></returns>
		public SalBoolean PropSetCanPaste(SalBoolean CanPaste)
		{
			#region Actions
			try
			{
				bool param1 = (bool)CanPaste;
				_Interface.CanPaste = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetCanPaste(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.CanPaste;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ListType">Important: this is one of the Tx4oleLib_ListTypeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetListType(SalNumber ListType)
		{
			#region Actions
			try
			{
				int param1 = (int)ListType;
				_Interface.ListType = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the Tx4oleLib_ListTypeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetListType(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ListType;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableCanDeleteColumn"></param>
		/// <returns></returns>
		public SalBoolean PropSetTableCanDeleteColumn(SalBoolean TableCanDeleteColumn)
		{
			#region Actions
			try
			{
				bool param1 = (bool)TableCanDeleteColumn;
				_Interface.TableCanDeleteColumn = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTableCanDeleteColumn(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TableCanDeleteColumn;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableCanInsertColumn"></param>
		/// <returns></returns>
		public SalBoolean PropSetTableCanInsertColumn(SalBoolean TableCanInsertColumn)
		{
			#region Actions
			try
			{
				bool param1 = (bool)TableCanInsertColumn;
				_Interface.TableCanInsertColumn = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTableCanInsertColumn(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TableCanInsertColumn;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableCanInsertLines"></param>
		/// <returns></returns>
		public SalBoolean PropSetTableCanInsertLines(SalBoolean TableCanInsertLines)
		{
			#region Actions
			try
			{
				bool param1 = (bool)TableCanInsertLines;
				_Interface.TableCanInsertLines = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTableCanInsertLines(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TableCanInsertLines;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Device"></param>
		/// <returns></returns>
		public SalBoolean PropSetDevice(SalVariant Device)
		{
			#region Actions
			try
			{
				object param1 = (object)Device.Value;
				_Interface.Device = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetDevice(SalVariant returnValue)
		{
			#region Actions
			try
			{
				returnValue.Value = _Interface.Device;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="StyleCurrent"></param>
		/// <returns></returns>
		public SalBoolean PropSetStyleCurrent(SalString StyleCurrent)
		{
			#region Actions
			try
			{
				string param1 = (string)StyleCurrent;
				_Interface.StyleCurrent = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetStyleCurrent(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.StyleCurrent;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="WordWrapMode"></param>
		/// <returns></returns>
		public SalBoolean PropSetWordWrapMode(SalNumber WordWrapMode)
		{
			#region Actions
			try
			{
				short param1 = (short)WordWrapMode;
				_Interface.WordWrapMode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetWordWrapMode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.WordWrapMode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Styles"></param>
		/// <returns></returns>
		public SalBoolean PropSetStyles(SalObject Styles)
		{
			#region Actions
			try
			{
				object param1 = (object)Styles.Value;
				_Interface.Styles = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetStyles(SalObject returnValue)
		{
			#region Actions
			try
			{
				returnValue.Value = _Interface.Styles;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="XMLEditMode"></param>
		/// <returns></returns>
		public SalBoolean PropSetXMLEditMode(SalNumber XMLEditMode)
		{
			#region Actions
			try
			{
				short param1 = (short)XMLEditMode;
				_Interface.XMLEditMode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetXMLEditMode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.XMLEditMode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ImageExportFilters"></param>
		/// <returns></returns>
		public SalBoolean PropSetImageExportFilters(SalString ImageExportFilters)
		{
			#region Actions
			try
			{
				string param1 = (string)ImageExportFilters;
				_Interface.ImageExportFilters = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetImageExportFilters(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ImageExportFilters;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ImageExportFormat"></param>
		/// <returns></returns>
		public SalBoolean PropSetImageExportFormat(SalNumber ImageExportFormat)
		{
			#region Actions
			try
			{
				short param1 = (short)ImageExportFormat;
				_Interface.ImageExportFormat = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetImageExportFormat(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ImageExportFormat;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ImageExportFilename"></param>
		/// <returns></returns>
		public SalBoolean PropSetImageExportFilename(SalString ImageExportFilename)
		{
			#region Actions
			try
			{
				string param1 = (string)ImageExportFilename;
				_Interface.ImageExportFilename = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetImageExportFilename(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ImageExportFilename;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TableCanSplit"></param>
		/// <returns></returns>
		public SalBoolean PropSetTableCanSplit(SalBoolean TableCanSplit)
		{
			#region Actions
			try
			{
				bool param1 = (bool)TableCanSplit;
				_Interface.TableCanSplit = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTableCanSplit(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TableCanSplit;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ImageExportCompressionQuality"></param>
		/// <returns></returns>
		public SalBoolean PropSetImageExportCompressionQuality(SalNumber ImageExportCompressionQuality)
		{
			#region Actions
			try
			{
				short param1 = (short)ImageExportCompressionQuality;
				_Interface.ImageExportCompressionQuality = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetImageExportCompressionQuality(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ImageExportCompressionQuality;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ImageExportMaxResolution"></param>
		/// <returns></returns>
		public SalBoolean PropSetImageExportMaxResolution(SalNumber ImageExportMaxResolution)
		{
			#region Actions
			try
			{
				short param1 = (short)ImageExportMaxResolution;
				_Interface.ImageExportMaxResolution = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetImageExportMaxResolution(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ImageExportMaxResolution;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="AllowUndo"></param>
		/// <returns></returns>
		public SalBoolean PropSetAllowUndo(SalBoolean AllowUndo)
		{
			#region Actions
			try
			{
				bool param1 = (bool)AllowUndo;
				_Interface.AllowUndo = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetAllowUndo(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.AllowUndo;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TextFrameBackColor"></param>
		/// <returns></returns>
		public SalBoolean PropSetTextFrameBackColor(SalNumber TextFrameBackColor)
		{
			#region Actions
			try
			{
				uint param1 = (uint)TextFrameBackColor;
				_Interface.TextFrameBackColor = (int)param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTextFrameBackColor(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TextFrameBackColor;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TextFrameBorderWidth"></param>
		/// <returns></returns>
		public SalBoolean PropSetTextFrameBorderWidth(SalNumber TextFrameBorderWidth)
		{
			#region Actions
			try
			{
				short param1 = (short)TextFrameBorderWidth;
				_Interface.TextFrameBorderWidth = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTextFrameBorderWidth(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TextFrameBorderWidth;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ObjectWidth"></param>
		/// <returns></returns>
		public SalBoolean PropSetObjectWidth(SalNumber ObjectWidth)
		{
			#region Actions
			try
			{
				short param1 = (short)ObjectWidth;
				_Interface.ObjectWidth = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetObjectWidth(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ObjectWidth;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ObjectHeight"></param>
		/// <returns></returns>
		public SalBoolean PropSetObjectHeight(SalNumber ObjectHeight)
		{
			#region Actions
			try
			{
				short param1 = (short)ObjectHeight;
				_Interface.ObjectHeight = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetObjectHeight(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ObjectHeight;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="TextFrameMarkerLines"></param>
		/// <returns></returns>
		public SalBoolean PropSetTextFrameMarkerLines(SalBoolean TextFrameMarkerLines)
		{
			#region Actions
			try
			{
				bool param1 = (bool)TextFrameMarkerLines;
				_Interface.TextFrameMarkerLines = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetTextFrameMarkerLines(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TextFrameMarkerLines;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="HeaderFooterAtInputPos"></param>
		/// <returns></returns>
		public SalBoolean PropSetHeaderFooterAtInputPos(SalNumber HeaderFooterAtInputPos)
		{
			#region Actions
			try
			{
				short param1 = (short)HeaderFooterAtInputPos;
				_Interface.HeaderFooterAtInputPos = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetHeaderFooterAtInputPos(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.HeaderFooterAtInputPos;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="VerticalRulerHandle"></param>
		/// <returns></returns>
		public SalBoolean PropSetVerticalRulerHandle(SalNumber VerticalRulerHandle)
		{
			#region Actions
			try
			{
				int param1 = (int)VerticalRulerHandle;
				_Interface.VerticalRulerHandle = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetVerticalRulerHandle(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.VerticalRulerHandle;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="KeepLinesTogether"></param>
		/// <returns></returns>
		public SalBoolean PropSetKeepLinesTogether(SalBoolean KeepLinesTogether)
		{
			#region Actions
			try
			{
				bool param1 = (bool)KeepLinesTogether;
				_Interface.KeepLinesTogether = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetKeepLinesTogether(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.KeepLinesTogether;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="KeepWithNext"></param>
		/// <returns></returns>
		public SalBoolean PropSetKeepWithNext(SalBoolean KeepWithNext)
		{
			#region Actions
			try
			{
				bool param1 = (bool)KeepWithNext;
				_Interface.KeepWithNext = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetKeepWithNext(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.KeepWithNext;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PageBreakBefore"></param>
		/// <returns></returns>
		public SalBoolean PropSetPageBreakBefore(SalBoolean PageBreakBefore)
		{
			#region Actions
			try
			{
				bool param1 = (bool)PageBreakBefore;
				_Interface.PageBreakBefore = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPageBreakBefore(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PageBreakBefore;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="WidowOrphanLines"></param>
		/// <returns></returns>
		public SalBoolean PropSetWidowOrphanLines(SalNumber WidowOrphanLines)
		{
			#region Actions
			try
			{
				short param1 = (short)WidowOrphanLines;
				_Interface.WidowOrphanLines = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetWidowOrphanLines(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.WidowOrphanLines;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FieldLinkTargetMarkers"></param>
		/// <returns></returns>
		public SalBoolean PropSetFieldLinkTargetMarkers(SalBoolean FieldLinkTargetMarkers)
		{
			#region Actions
			try
			{
				bool param1 = (bool)FieldLinkTargetMarkers;
				_Interface.FieldLinkTargetMarkers = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFieldLinkTargetMarkers(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FieldLinkTargetMarkers;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="SectionCurrent"></param>
		/// <returns></returns>
		public SalBoolean PropSetSectionCurrent(SalNumber SectionCurrent)
		{
			#region Actions
			try
			{
				short param1 = (short)SectionCurrent;
				_Interface.SectionCurrent = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSectionCurrent(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SectionCurrent;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="SectionAtInputPos"></param>
		/// <returns></returns>
		public SalBoolean PropSetSectionAtInputPos(SalNumber SectionAtInputPos)
		{
			#region Actions
			try
			{
				short param1 = (short)SectionAtInputPos;
				_Interface.SectionAtInputPos = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSectionAtInputPos(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SectionAtInputPos;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="SectionCount"></param>
		/// <returns></returns>
		public SalBoolean PropSetSectionCount(SalNumber SectionCount)
		{
			#region Actions
			try
			{
				short param1 = (short)SectionCount;
				_Interface.SectionCount = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetSectionCount(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SectionCount;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="SectionBreakKind">Important: this is one of the Tx4oleLib_SectionBreakKindConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetSectionBreakKind(SalNumber SectionBreakKind)
		{
			#region Actions
			try
			{
				int param1 = (int)SectionBreakKind;
				_Interface.SectionBreakKind = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the Tx4oleLib_SectionBreakKindConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetSectionBreakKind(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.SectionBreakKind;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PageOrientation"></param>
		/// <returns></returns>
		public SalBoolean PropSetPageOrientation(SalNumber PageOrientation)
		{
			#region Actions
			try
			{
				short param1 = (short)PageOrientation;
				_Interface.PageOrientation = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPageOrientation(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PageOrientation;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="PageViewStyle">Important: this is one of the Tx4oleLib_PageViewStyles constants</param>
		/// <returns></returns>
		public SalBoolean PropSetPageViewStyle(SalNumber PageViewStyle)
		{
			#region Actions
			try
			{
				int param1 = (int)PageViewStyle;
				_Interface.PageViewStyle = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the Tx4oleLib_PageViewStyles constants</param>
		/// <returns></returns>
		public SalBoolean PropGetPageViewStyle(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PageViewStyle;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ColumnWidthsAndDistances"></param>
		/// <returns></returns>
		public SalBoolean PropSetColumnWidthsAndDistances(SalVariant ColumnWidthsAndDistances)
		{
			#region Actions
			try
			{
				object param1 = (object)ColumnWidthsAndDistances.Value;
				_Interface.ColumnWidthsAndDistances = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetColumnWidthsAndDistances(SalVariant returnValue)
		{
			#region Actions
			try
			{
				returnValue.Value = _Interface.ColumnWidthsAndDistances;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Columns"></param>
		/// <returns></returns>
		public SalBoolean PropSetColumns(SalNumber Columns)
		{
			#region Actions
			try
			{
				short param1 = (short)Columns;
				_Interface.Columns = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetColumns(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Columns;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ColumnDistance"></param>
		/// <returns></returns>
		public SalBoolean PropSetColumnDistance(SalNumber ColumnDistance)
		{
			#region Actions
			try
			{
				short param1 = (short)ColumnDistance;
				_Interface.ColumnDistance = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetColumnDistance(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ColumnDistance;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ColumnLineColor"></param>
		/// <returns></returns>
		public SalBoolean PropSetColumnLineColor(SalNumber ColumnLineColor)
		{
			#region Actions
			try
			{
				uint param1 = (uint)ColumnLineColor;
				_Interface.ColumnLineColor = (int)param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetColumnLineColor(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ColumnLineColor;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ColumnLineWidth"></param>
		/// <returns></returns>
		public SalBoolean PropSetColumnLineWidth(SalNumber ColumnLineWidth)
		{
			#region Actions
			try
			{
				short param1 = (short)ColumnLineWidth;
				_Interface.ColumnLineWidth = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetColumnLineWidth(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ColumnLineWidth;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="FontSettings"></param>
		/// <returns></returns>
		public SalBoolean PropSetFontSettings(SalNumber FontSettings)
		{
			#region Actions
			try
			{
				short param1 = (short)FontSettings;
				_Interface.FontSettings = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetFontSettings(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.FontSettings;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// This is the real COM interface declaration.
		/// </summary>
		[Guid("26BD9907-E7D0-11DD-AA41-0013D350667C")]
		[InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch)]
		public interface COMInterface
		{
			void Refresh();
			void PrintPage(short PageNumber);
			bool ParagraphDialog();
			bool FontDialog();
			void FindReplace(short TypeOfDialog);
			bool Undo();
			bool Redo();
			bool VTSpellCheck();
			void Clip(short Action);
			bool RTFImport(string FileName, object Extended);
			bool RTFExport(string FileName);
			bool TextImport(string FileName);
			bool TextExport(string FileName);
			bool FieldInsert(string FieldText);
			bool FieldDelete(bool DeleteTotal);
			int ObjectInsertAsChar(int ObjectType, string FileName, int TextPos, short ScaleX, short ScaleY, short ImageDisplayMode, short ImageSaveMode, object KindOfObject);
			int ObjectInsertFixed(int ObjectType, string FileName, int PosX, int PosY, short ScaleX, short ScaleY, short ImageDisplayMode, short ImageSaveMode, short SizeMode, short Textflow, short DistanceL, short DistanceT, short DistanceR, short DistanceB, object KindOfObject);
			int Load(string FileName, object Offset, object Format, object CurSelection);
			int Save(string FileName, object Offset, object Format, object CurSelection);
			bool ObjectDelete(short ObjectId);
			int ObjectNext(short ObjectId, short ObjectGroup);
			int ObjectDistance(short index);
			void ObjectDistance(short index, short arg_2);
			bool ViewNextHighlight();
			int TableInsert(short Rows, short Columns, int TextPos, object TableId);
			bool TableDeleteLines();
			object LoadSaveAttribute(int Attribute);
			void LoadSaveAttribute(int Attribute, object arg_2);
			bool TableAttrDialog();
			int TableColumns(short TableId);
			int TableRows(short TableId);
			string TableCellText(short TableId, short Row, short Column);
			void TableCellText(short TableId, short Row, short Column, string arg_4);
			int FieldEditAttr(short FieldId);
			void FieldEditAttr(short FieldId, short arg_2);
			int FieldNext(short FieldId, short FieldGroup);
			object FieldData(short FieldId);
			void FieldData(short FieldId, object arg_2);
			bool LoadFromMemory(object DataBuffer, object Format, object CurSelection);
			object SaveToMemory(object Format, object CurSelection);
			object TableCellAttribute(short TableId, short Row, short Column, int Attribute);
			void TableCellAttribute(short TableId, short Row, short Column, int Attribute, object arg_5);
			int Find(string FindWhat, object Start, object Options);
			int TableNext(short EnumerationNumber, ref int TableId);
			int TableCellStart(short TableId, short Row, short Column);
			int TableCellLength(short TableId, short Row, short Column);
			bool HeaderFooterActivate(int HeaderFooter);
			bool HeaderFooterSelect(int HeaderFooter);
			int HeaderFooterPosition(int HeaderFooter);
			void HeaderFooterPosition(int HeaderFooter, int arg_2);
			object FieldTypeData(short FieldId);
			void FieldTypeData(short FieldId, object arg_2);
			bool FieldGoto(int FieldType, object FieldIdOrName);
			int FieldType(short FieldId);
			void FieldType(short FieldId, int arg_2);
			bool ResetContents();
			int InputPosFromPoint(int X, int Y);
			void PrintDoc(string DocName, short FromPage, short ToPage, short Copies);
			object BulletAttribute(int Attribute);
			void BulletAttribute(int Attribute, object arg_2);
			object NumberingAttribute(int Attribute);
			void NumberingAttribute(int Attribute, object arg_2);
			bool ListAttrDialog();
			object SaveToMemoryBuffer(object DataBuffer, object Format, object CurSelection);
			bool TableDeleteColumn();
			bool TableInsertLines(int Position, short Lines);
			bool TableInsertColumn(int Position);
			int GetBaseLinePos(int Line);
			int GetCharFromLine(int Line);
			int GetLineCount();
			int GetLineFromChar(int Char);
			int GetLineFromPoint(int X, int Y);
			object GetLineRect(int Line);
			object GetTextExtent();
			int CaretWidth(short Caret);
			void CaretWidth(short Caret, short arg_2);
			bool TabDialog();
			bool StyleDialog();
			object XMLElements(string ElementName);
			bool EnableAutomationServer();
			bool TableSplit(int Position);
			int TableNestedLevel(short TableId);
			int TableGetOuter(short TableId);
			int TableGetOuterMost(short TableId);
			void StartUndoAction();
			void EndUndoAction();
			int ObjectInsert(int ObjectType, string FileName, int TextPos, short Alignment, int PosX, int PosY, short ScaleX, short ScaleY, short Textflow, short DistanceL, short DistanceT, short DistanceR, short DistanceB, object KindOfObject);
			int TextFrameInsertAsChar(int TextPos, short Width, short Height);
			int TextFrameInsertFixed(int PageNo, int PosX, int PosY, short Width, short Height, short Textflow, short DistL, short DistT, short DistR, short DistB);
			int TextFrameInsert(int TextPos, short Alignment, int PosX, int PosY, short Width, short Height, short Textflow, short DistL, short DistT, short DistR, short DistB);
			bool ObjectAttrDialog();
			bool TextFrameSelect(short TextFrameId);
			int ObjectGetSelected(short ObjectKind);
			int TextFrameInternalMargin(short index);
			void TextFrameInternalMargin(short index, short arg_2);
			int ImageInsert(string FileName, int TextPos, short Alignment, int PosX, int PosY, short ScaleX, short ScaleY, short Textflow, short DistanceL, short DistanceT, short DistanceR, short DistanceB);
			int ImageInsertAsChar(string FileName, int TextPos, short ScaleX, short ScaleY);
			int ImageInsertFixed(string FileName, int PageNo, int PosX, int PosY, short ScaleX, short ScaleY, short Textflow, short DistanceL, short DistanceT, short DistanceR, short DistanceB);
			bool FieldSetInputPos(int FieldInputPosition);
			bool SectionInsert(int BreakKind, int TextPos);
			bool SectionFormatDialog(short ActiveTab);
			bool HeaderFooterConnectedToPrevious(int HeaderFooter);
			void HeaderFooterConnectedToPrevious(int HeaderFooter, bool arg_2);
			void AboutBox();
			bool Enabled { get; set; }
			int BackColor { get; set; }
			int ForeColor { get; set; }
			int hWnd { get; set; }
			bool TabKey { get; set; }
			bool FormatSelection { get; set; }
			string VTSpellDictionary { get; set; }
			int BorderStyle { get; set; }
			int BackStyle { get; set; }
			int FontBold { get; set; }
			int FontItalic { get; set; }
			string FontName { get; set; }
			int FontSize { get; set; }
			int FontStrikethru { get; set; }
			int FontUnderline { get; set; }
			int PageWidth { get; set; }
			int PageHeight { get; set; }
			int ScrollBars { get; set; }
			string Text { get; set; }
			int Alignment { get; set; }
			int FrameDistance { get; set; }
			int FrameLineWidth { get; set; }
			int FrameStyle { get; set; }
			int ScrollPosX { get; set; }
			int ScrollPosY { get; set; }
			int PageMarginL { get; set; }
			int PageMarginT { get; set; }
			int PageMarginR { get; set; }
			int PageMarginB { get; set; }
			int PrintDevice { get; set; }
			bool ControlChars { get; set; }
			bool HideSelection { get; set; }
			bool InsertionMode { get; set; }
			int SelLength { get; set; }
			int SelStart { get; set; }
			string SelText { get; set; }
			bool ClipChildren { get; set; }
			bool ClipSiblings { get; set; }
			int SizeMode { get; set; }
			int Language { get; set; }
			int ViewMode { get; set; }
			bool PrintOffset { get; set; }
			int ZoomFactor { get; set; }
			int FieldCurrent { get; set; }
			bool FieldChangeable { get; set; }
			bool FieldDeleteable { get; set; }
			string FieldText { get; set; }
			int TabCurrent { get; set; }
			int TabType { get; set; }
			int TabPos { get; set; }
			int BaseLine { get; set; }
			int LineSpacing { get; set; }
			int PrintZoom { get; set; }
			string RTFSelText { get; set; }
			string ImageFilters { get; set; }
			string ImageFilename { get; set; }
			int LineSpacingT { get; set; }
			int ObjectCurrent { get; set; }
			int StatusBarHandle { get; set; }
			int RulerHandle { get; set; }
			int ButtonBarHandle { get; set; }
			int ObjectScaleX { get; set; }
			int ObjectScaleY { get; set; }
			int ObjectTextflow { get; set; }
			int ObjectSizeMode { get; set; }
			int ImageSaveMode { get; set; }
			int ImageDisplayMode { get; set; }
			bool PrintColors { get; set; }
			int EditMode { get; set; }
			int MousePointer { get; set; }
			int NextWindow { get; set; }
			int CanUndo { get; set; }
			int CanRedo { get; set; }
			int CurrentPages { get; set; }
			int FieldPosX { get; set; }
			int FieldPosY { get; set; }
			int FieldStart { get; set; }
			int FieldEnd { get; set; }
			int IndentL { get; set; }
			int IndentR { get; set; }
			int IndentFL { get; set; }
			int IndentT { get; set; }
			int IndentB { get; set; }
			int TextBkColor { get; set; }
			int DataFormat { get; set; }
			string DataText { get; set; }
			int ViewSection { get; set; }
			string ViewImagePath { get; set; }
			bool AutoExpand { get; set; }
			bool TableCanInsert { get; set; }
			bool TableCanDeleteLines { get; set; }
			bool EnableHyperlinks { get; set; }
			bool TableGridLines { get; set; }
			bool TableCanChangeAttr { get; set; }
			int TableAtInputPos { get; set; }
			int TableColAtInputPos { get; set; }
			int TableRowAtInputPos { get; set; }
			int FontUnderlineStyle { get; set; }
			int DataTextFormat { get; set; }
			string ResourceFile { get; set; }
			object CurrentInputPosition { get; set; }
			int HeaderFooterStyle { get; set; }
			int HeaderFooter { get; set; }
			int FieldAtInputPos { get; set; }
			object ObjectItem { get; set; }
			bool LockWindowUpdate { get; set; }
			bool CanCopy { get; set; }
			bool CanPaste { get; set; }
			int ListType { get; set; }
			bool TableCanDeleteColumn { get; set; }
			bool TableCanInsertColumn { get; set; }
			bool TableCanInsertLines { get; set; }
			object Device { get; set; }
			string StyleCurrent { get; set; }
			int WordWrapMode { get; set; }
			object Styles { get; set; }
			int XMLEditMode { get; set; }
			string ImageExportFilters { get; set; }
			int ImageExportFormat { get; set; }
			string ImageExportFilename { get; set; }
			bool TableCanSplit { get; set; }
			int ImageExportCompressionQuality { get; set; }
			int ImageExportMaxResolution { get; set; }
			bool AllowUndo { get; set; }
			int TextFrameBackColor { get; set; }
			int TextFrameBorderWidth { get; set; }
			int ObjectWidth { get; set; }
			int ObjectHeight { get; set; }
			bool TextFrameMarkerLines { get; set; }
			int HeaderFooterAtInputPos { get; set; }
			int VerticalRulerHandle { get; set; }
			bool KeepLinesTogether { get; set; }
			bool KeepWithNext { get; set; }
			bool PageBreakBefore { get; set; }
			int WidowOrphanLines { get; set; }
			bool FieldLinkTargetMarkers { get; set; }
			int SectionCurrent { get; set; }
			int SectionAtInputPos { get; set; }
			int SectionCount { get; set; }
			int SectionBreakKind { get; set; }
			int PageOrientation { get; set; }
			int PageViewStyle { get; set; }
			object ColumnWidthsAndDistances { get; set; }
			int Columns { get; set; }
			int ColumnDistance { get; set; }
			int ColumnLineColor { get; set; }
			int ColumnLineWidth { get; set; }
			int FontSettings { get; set; }
		}
	}
}
