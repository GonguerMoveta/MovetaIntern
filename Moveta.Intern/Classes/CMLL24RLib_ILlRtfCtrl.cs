// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using System.Runtime.InteropServices;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public class CMLL24RLib_ILlRtfCtrl : SalObject
	{
		
		/// <summary>
		/// This is the real COM interface.
		/// </summary>
		internal COMInterface _Interface = null;
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public CMLL24RLib_ILlRtfCtrl(){ }
		public CMLL24RLib_ILlRtfCtrl(COMInterface obj) : this()
		{
			this._Interface = obj;
		}
		#endregion
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the CMLL24RLib_LlTextModeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetTextMode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.TextMode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the CMLL24RLib_LlTextModeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetTextMode(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.TextMode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetParentComponent(SalObject returnValue)
		{
			#region Actions
			try
			{
				returnValue.Value = _Interface.ParentComponent;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetParentComponent(SalObject rhs)
		{
			#region Actions
			try
			{
				object param1 = (object)rhs.Value;
				_Interface.ParentComponent = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue">Important: this is one of the CMLL24RLib_LlContentModeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropGetContentMode(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ContentMode;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs">Important: this is one of the CMLL24RLib_LlContentModeConstants constants</param>
		/// <returns></returns>
		public SalBoolean PropSetContentMode(SalNumber rhs)
		{
			#region Actions
			try
			{
				int param1 = (int)rhs;
				_Interface.ContentMode = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetText(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Text;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="rhs"></param>
		/// <returns></returns>
		public SalBoolean PropSetText(SalString rhs)
		{
			#region Actions
			try
			{
				string param1 = (string)rhs;
				_Interface.Text = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetPrintState(ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.PrintState;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean CopyToClipboard()
		{
			#region Actions
			try
			{
				_Interface.CopyToClipboard();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ControlID"></param>
		/// <returns></returns>
		public SalBoolean ProhibitAction(SalNumber ControlID)
		{
			#region Actions
			try
			{
				int param1 = (int)ControlID;
				_Interface.ProhibitAction(param1);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hDC"></param>
		/// <param name="left"></param>
		/// <param name="top"></param>
		/// <param name="right"></param>
		/// <param name="bottom"></param>
		/// <param name="bRestart"></param>
		/// <returns></returns>
		public SalBoolean Display(SalNumber hDC, SalNumber left, SalNumber top, SalNumber right, SalNumber bottom, SalBoolean bRestart)
		{
			#region Actions
			try
			{
				int param1 = (int)hDC;
				int param2 = (int)left;
				int param3 = (int)top;
				int param4 = (int)right;
				int param5 = (int)bottom;
				bool param6 = (bool)bRestart;
				_Interface.Display(param1, param2, param3, param4, param5, param6);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// This is the real COM interface declaration.
		/// </summary>
		[Guid("6FD8B04E-E5FC-47B9-82CF-BEDBEA7C27BF")]
		[InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch)]
		public interface COMInterface
		{
			int TextMode { get; set; }
			object ParentComponent { get; set; }
			int ContentMode { get; set; }
			string Text { get; set; }
			int PrintState { get; }
			void CopyToClipboard();
			void ProhibitAction(int ControlID);
			void Display(int hDC, int left, int top, int right, int bottom, bool bRestart);
		}
	}
}
