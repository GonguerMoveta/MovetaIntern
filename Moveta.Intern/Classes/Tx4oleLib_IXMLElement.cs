// <ppj name="Moveta.Intern" date="1/29/2024 3:39:48 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using System.Runtime.InteropServices;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public class Tx4oleLib_IXMLElement : SalObject
	{
		
		/// <summary>
		/// This is the real COM interface.
		/// </summary>
		internal COMInterface _Interface = null;
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public Tx4oleLib_IXMLElement(){ }
		public Tx4oleLib_IXMLElement(COMInterface obj) : this()
		{
			this._Interface = obj;
		}
		#endregion
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean Select_()
		{
			#region Actions
			try
			{
				_Interface.Select_();
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="XMLElement"></param>
		/// <param name="before"></param>
		/// <param name="after"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean AddChild(SalObject XMLElement, SalVariant before, SalVariant after, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				object param1 = (object)XMLElement.Value;
				object param2 = (object)before.Value;
				object param3 = (object)after.Value;
				returnValue = _Interface.AddChild(param1, param2, param3);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ElementName"></param>
		/// <param name="index"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean RemoveChild(SalString ElementName, SalVariant index, ref SalNumber returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)ElementName;
				object param2 = (object)index.Value;
				returnValue = _Interface.RemoveChild(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ElementName"></param>
		/// <param name="index"></param>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean ChildItem(SalString ElementName, SalVariant index, SalObject returnValue)
		{
			#region Actions
			try
			{
				string param1 = (string)ElementName;
				object param2 = (object)index.Value;
				returnValue.Value = _Interface.ChildItem(param1, param2);
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="Text"></param>
		/// <returns></returns>
		public SalBoolean PropSetText(SalString Text)
		{
			#region Actions
			try
			{
				string param1 = (string)Text;
				_Interface.Text = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetText(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.Text;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="ElementName"></param>
		/// <returns></returns>
		public SalBoolean PropSetElementName(SalString ElementName)
		{
			#region Actions
			try
			{
				string param1 = (string)ElementName;
				_Interface.ElementName = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetElementName(ref SalString returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.ElementName;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="AutoText"></param>
		/// <returns></returns>
		public SalBoolean PropSetAutoText(SalBoolean AutoText)
		{
			#region Actions
			try
			{
				bool param1 = (bool)AutoText;
				_Interface.AutoText = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetAutoText(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.AutoText;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="AutoSelect"></param>
		/// <returns></returns>
		public SalBoolean PropSetAutoSelect(SalBoolean AutoSelect)
		{
			#region Actions
			try
			{
				bool param1 = (bool)AutoSelect;
				_Interface.AutoSelect = param1;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="returnValue"></param>
		/// <returns></returns>
		public SalBoolean PropGetAutoSelect(ref SalBoolean returnValue)
		{
			#region Actions
			try
			{
				returnValue = _Interface.AutoSelect;
				return true;
			}
			catch (COMException ex)
			{
				return HandleException(ex);
			}
			#endregion
		}
		
		/// <summary>
		/// This is the real COM interface declaration.
		/// </summary>
		[Guid("26BD9918-E7D0-11DD-AA41-0013D350667C")]
		[InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch)]
		public interface COMInterface
		{
			void Select_();
			int AddChild(object XMLElement, object before, object after);
			int RemoveChild(string ElementName, object index);
			object ChildItem(string ElementName, object index);
			string Text { get; set; }
			string ElementName { get; set; }
			bool AutoText { get; set; }
			bool AutoSelect { get; set; }
		}
	}
}
