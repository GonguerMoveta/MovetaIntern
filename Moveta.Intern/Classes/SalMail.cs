// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;
using Moveta.Intern.Classes;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public class SalMail : SalFunctionalClass
	{
		#region Fields
		public static SalString m_sServerAddress = "";
		public static SalNumber m_nPort = 0;
		public static SalBoolean m_bSsl = false;
		public static SalBoolean m_bSmtp = false;
		public static SalString m_sUsername = "";
		public static SalString m_sPassword = "";
		public static SalNumber m_nSmtpObjectAddress = 0;
		public static SalNumber m_nPop3ObjectAddress = 0;
		public static SalNumber m_nStartEnvelopeIndex = 0;
		public static SalNumber m_nStartMailIndex = 0;
		public static SalNumber POP3_ServerPort = 0;
		public static SalNumber SMTP_ServerPort = 0;
		public static SalBoolean m_bIsConnected = false;
		public static SalNumber m_nMailProtocol = 0;
		private MailService MSEmail;
		#endregion
		
		#region Constructors/Destructors
		public SalMail()
		{
			this.MSEmail = new MailService();
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber Initialize()
		{
			#region Actions
			SalMail.POP3_ServerPort = 110;
			SalMail.SMTP_ServerPort = 25;
			SalMail.m_bIsConnected = false;

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sServerAddress"></param>
		/// <param name="nPort"></param>
		/// <param name="bSSL"></param>
		/// <param name="bSend"></param>
		/// <returns></returns>
		public SalBoolean SetMailServer(SalString sServerAddress, SalNumber nPort, SalBoolean bSSL, SalBoolean bSend)
		{
			#region Actions
			SalMail.m_sServerAddress = sServerAddress;
			SalMail.m_nPort = nPort;
			SalMail.m_bSsl = bSSL;
			SalMail.m_bSmtp = bSend;

			return false;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="sUsername"></param>
		/// <param name="sPassword"></param>
		/// <returns></returns>
		public SalBoolean SetUser(SalString sUsername, SalString sPassword)
		{
			#region Actions
			SalMail.m_sUsername = sUsername;
			SalMail.m_sPassword = sPassword;

			return false;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber Connect()
		{
			#region Local Variables
			SalNumber nRet = 0;
			#endregion
			
			#region Actions
			nRet = 4;
			if (SalMail.m_bSmtp) 
			{
				nRet = this.MSEmail.smtpConnect(SalMail.m_sServerAddress, SalMail.m_nPort, SalMail.m_bSsl, ref SalMail.m_nSmtpObjectAddress);
			}
			else if (SalMail.m_nMailProtocol == Const.MAIL_PROTOCOL_IMAP) 
			{
				nRet = this.MSEmail.ImapConnect(SalMail.m_sServerAddress, SalMail.m_nPort, SalMail.m_sUsername, SalMail.m_sPassword, SalMail.m_bSsl);
			}
			else
			{
				nRet = Ext.Pop3Connect(SalMail.m_sServerAddress, SalMail.m_nPort, SalMail.m_sUsername, SalMail.m_sPassword, SalMail.m_bSsl, ref SalMail.m_nPop3ObjectAddress);
			}
			if (nRet == 0) 
			{
				SalMail.m_bIsConnected = true;
				SalMail.m_nStartMailIndex = 0;
			}
			return nRet;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber Disconnect()
		{
			#region Local Variables
			SalNumber nRet = 0;
			#endregion
			
			#region Actions
			nRet = 0;
			if (SalMail.m_bIsConnected) 
			{
				if (SalMail.m_bSmtp) 
				{
					nRet = this.MSEmail.smtpMailDisconnect(SalMail.m_bSmtp);
				}
				else
				{
					SalMail.m_nStartMailIndex = 0;
					nRet = Ext.MailDisconnectEx(SalMail.m_nPop3ObjectAddress);
				}
				if (nRet == 0) 
				{
					SalMail.m_bIsConnected = false;
					SalMail.m_nSmtpObjectAddress = 0;
					SalMail.m_nPop3ObjectAddress = 0;
				}
			}
			else
			{
				nRet = 1;
			}
			return nRet;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bFirst"></param>
		/// <param name="nCount"></param>
		/// <param name="sMessageIds"></param>
		/// <param name="sDatesReceived"></param>
		/// <param name="sSubjects"></param>
		/// <param name="sOriginators"></param>
		/// <returns></returns>
		public SalNumber GetEnvelopes(SalBoolean bFirst, SalNumber nCount, SalArray<SalNumber> sMessageIds, SalArray<SalString> sDatesReceived, SalArray<SalString> sSubjects, SalArray<SalString> sOriginators)
		{
			#region Local Variables
			SalNumber nReturn = 0;
			#endregion
			
			#region Actions
			if (SalMail.m_bIsConnected) 
			{
				if (bFirst) 
				{
					SalMail.m_nStartEnvelopeIndex = 0;
				}
				if (SalMail.m_nMailProtocol == Const.MAIL_PROTOCOL_IMAP) 
				{
					nReturn = this.MSEmail.ImapGetEnvelopes(SalMail.m_nStartEnvelopeIndex, nCount, sMessageIds, sDatesReceived, sSubjects, sOriginators);
				}
				else
				{
					nReturn = Ext.Pop3GetEnvelopes(SalMail.m_nPop3ObjectAddress, SalMail.m_nStartEnvelopeIndex, nCount, sMessageIds, sDatesReceived, sSubjects, sOriginators);
				}
				SalMail.m_nStartEnvelopeIndex = SalMail.m_nStartEnvelopeIndex + nCount;
				return nReturn;
			}
			else
			{
				return 1;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nFormatFlag"></param>
		/// <param name="nMailId"></param>
		/// <param name="sDateReceived"></param>
		/// <param name="sSubject"></param>
		/// <param name="sOriginator"></param>
		/// <param name="sRecipientsList"></param>
		/// <param name="sCarbonCopy"></param>
		/// <param name="sBody"></param>
		/// <param name="sAttachments"></param>
		/// <returns></returns>
		public SalNumber GetMail(SalNumber nFormatFlag, SalNumber nMailId, ref SalString sDateReceived, ref SalString sSubject, ref SalString sOriginator, ref SalString sRecipientsList, ref SalString sCarbonCopy, ref SalString sBody, ref SalString sAttachments)
		{
			#region Actions
			if (SalMail.m_bIsConnected) 
			{
				if (SalMail.m_nMailProtocol == Const.MAIL_PROTOCOL_IMAP) 
				{
					return this.MSEmail.ImapGetMail(nFormatFlag, nMailId, ref sDateReceived, ref sSubject, ref sOriginator, ref sRecipientsList, ref sCarbonCopy, ref sBody, ref sAttachments);
				}
				else
				{
					return Ext.Pop3GetMail(SalMail.m_nPop3ObjectAddress, nFormatFlag, nMailId, ref sDateReceived, ref sSubject, ref sOriginator, ref sRecipientsList, ref sCarbonCopy, ref sBody, ref sAttachments);
				}
			}
			else
			{
				return 1;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bFirst"></param>
		/// <param name="nFormatFlag"></param>
		/// <param name="nMailId"></param>
		/// <param name="sDateReceived"></param>
		/// <param name="sSubject"></param>
		/// <param name="sOriginator"></param>
		/// <param name="sRecipientsList"></param>
		/// <param name="sCCList"></param>
		/// <param name="sBody"></param>
		/// <param name="sAttachments"></param>
		/// <returns></returns>
		public SalNumber GetNextMail(SalBoolean bFirst, SalNumber nFormatFlag, ref SalNumber nMailId, ref SalString sDateReceived, ref SalString sSubject, ref SalString sOriginator, ref SalString sRecipientsList, ref SalString sCCList, ref SalString sBody, ref SalString sAttachments)
		{
			#region Local Variables
			SalNumber nRet = 0;
			#endregion
			
			#region Actions
			if (SalMail.m_bIsConnected) 
			{
				if (bFirst) 
				{
					SalMail.m_nStartMailIndex = 0;
				}
				nRet = Ext.Pop3GetNextMail(SalMail.m_nPop3ObjectAddress, SalMail.m_nStartMailIndex, nFormatFlag, ref nMailId, ref sDateReceived, ref sSubject, ref sOriginator, ref sRecipientsList, ref sCCList, ref sBody, ref sAttachments);
				if (SalMail.m_nMailProtocol == Const.MAIL_PROTOCOL_IMAP) 
				{
					return Ext.IMAPGetNextMail(SalMail.m_nStartMailIndex, nFormatFlag, ref nMailId, ref sDateReceived, ref sSubject, ref sOriginator, ref sRecipientsList, ref sCCList, ref sBody, ref sAttachments);
				}
				else
				{
					nRet = Ext.Pop3GetNextMail(SalMail.m_nPop3ObjectAddress, SalMail.m_nStartMailIndex, nFormatFlag, ref nMailId, ref sDateReceived, ref sSubject, ref sOriginator, ref sRecipientsList, ref sCCList, ref sBody, ref sAttachments);
				}
				if (nRet == 0) 
				{
					SalMail.m_nStartMailIndex = SalMail.m_nStartMailIndex + 1;
				}
				return nRet;
			}
			else
			{
				return 1;
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nMailIdentifier"></param>
		/// <returns></returns>
		public SalNumber DeleteMail(SalNumber nMailIdentifier)
		{
			#region Actions
			if (SalMail.m_bIsConnected) 
			{
				if (SalMail.m_nMailProtocol == Const.MAIL_PROTOCOL_IMAP) 
				{
					return Ext.IMAPDeleteMail(nMailIdentifier);
				}
				else
				{
					return Ext.Pop3DeleteMail(SalMail.m_nPop3ObjectAddress, nMailIdentifier);
				}
			}
			else
			{
				return 1;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nFormatFlag"></param>
		/// <param name="sSubject"></param>
		/// <param name="sOriginator"></param>
		/// <param name="sRecipientsList"></param>
		/// <param name="sCarbonCopy"></param>
		/// <param name="sBody"></param>
		/// <param name="sAttachments"></param>
		/// <param name="bReceiptRequested"></param>
		/// <param name="nFlag"></param>
		/// <returns></returns>
		public SalNumber SendMail(SalNumber nFormatFlag, SalString sSubject, SalString sOriginator, SalString sRecipientsList, SalString sCarbonCopy, SalString sBody, SalString sAttachments, SalBoolean bReceiptRequested, SalNumber nFlag, SalString strReciever, SalString Sender,SalString strUsername,SalString strPass)
		{
			strUsername = SalMail.m_sUsername;
			strPass = SalMail.m_sPassword;
			#region Actions
			if (SalMail.m_bIsConnected) 
			{
				return this.MSEmail.SmtpSendMail(SalMail.m_nSmtpObjectAddress, nFormatFlag, sSubject, sOriginator, sRecipientsList, sCarbonCopy, sBody, sAttachments, bReceiptRequested, nFlag, strReciever, Sender, strUsername, strPass);
			}
			else
			{
				return 1;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nProtocol"></param>
		/// <returns></returns>
		public SalBoolean SetMailProtocol(SalNumber nProtocol)
		{
			#region Actions
			SalMail.m_nMailProtocol = nProtocol;

			return false;
			#endregion
		}
		#endregion
	}
}
