// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// General window class for all common controls defined in COMMCTRL32.
	/// This is the base class.
	/// </summary>
	public class gwcCommonControlClass : SalGeneralWindow
	{
		#region Fields
		public SalWindowHandle iv_hWndSelf = SalWindowHandle.Null;
		public SalWindowHandle iv_hWndParent = SalWindowHandle.Null;
		public SalWindowHandle iv_hWndControl = SalWindowHandle.Null;
		public SalBoolean iv_bCreated = false;
		public SalNumber iv_nStyle = 0;
		public SalNumber iv_nStyleEx = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public gwcCommonControlClass()
		{
			// Attach WindowActions handler
			this.WindowActions += new PPJ.Runtime.Windows.WindowActionsEventHandler(this.gwcCommonControlClass_WindowActions);
		}
		
		/// <summary>
		/// Multiple Inheritance: Constructor.
		/// </summary>
		/// <param name="derived"></param>
		public gwcCommonControlClass(ISalWindow derived)
		{
			// Attach derived instance.
			this._derived = derived;
			// Attach WindowActions handler
			this.WindowActions += new PPJ.Runtime.Windows.WindowActionsEventHandler(this.gwcCommonControlClass_WindowActions);
			// Attach actions handler to derived instance.
			this._derived.AttachMessageActions(this);
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// gwcCommonControlClass WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gwcCommonControlClass_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.gwcCommonControlClass_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.gwcCommonControlClass_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gwcCommonControlClass_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.lb_lbfOn_SAM_Create(Sys.wParam, Sys.lParam);
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gwcCommonControlClass_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.lb_lbfOn_SAM_Destroy(Sys.wParam, Sys.lParam);
			#endregion
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// Returns TRUE if control is created otherwise FALSE
		/// </summary>
		/// <returns></returns>
		public SalNumber IsControlCreated()
		{
			#region Actions
			return iv_bCreated;
			#endregion
		}
		
		/// <summary>
		/// Returns the windows style
		/// </summary>
		/// <returns></returns>
		public SalNumber GetWindowStyle()
		{
			#region Actions
			return Ext.GetWindowLongA(getHandleControl(), Const.GWL_STYLE);
			#endregion
		}
		
		/// <summary>
		/// Set a windows style
		/// </summary>
		/// <param name="p_nStyle"></param>
		/// <returns></returns>
		public SalNumber SetWindowStyle(SalNumber p_nStyle)
		{
			#region Actions
			Ext.SetWindowLongA(getHandleControl(), Const.GWL_STYLE, (Ext.GetWindowLongA(getHandleControl(), Const.GWL_STYLE) & p_nStyle));

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Returns the windows extended style
		/// </summary>
		/// <returns></returns>
		public SalNumber GetWindowStyleEx()
		{
			#region Actions
			return Ext.GetWindowLongA(getHandleControl(), Const.GWL_EXSTYLE);
			#endregion
		}
		
		/// <summary>
		/// Set a windows extended style
		/// </summary>
		/// <param name="p_nStyle"></param>
		/// <returns></returns>
		public SalNumber SetWindowStyleEx(SalNumber p_nStyle)
		{
			#region Actions
			Ext.SetWindowLongA(getHandleControl(), Const.GWL_EXSTYLE, (Ext.GetWindowLongA(getHandleControl(), Const.GWL_EXSTYLE) & p_nStyle));

			return 0;
			#endregion
		}
		// //-- get and set functions for member vars --//
		/// <summary>
		/// Returns the parent window handle
		/// </summary>
		/// <returns></returns>
		public SalWindowHandle getHandleParent()
		{
			#region Actions
			return iv_hWndParent;
			#endregion
		}
		
		/// <summary>
		/// Returns the control window handle
		/// </summary>
		/// <returns></returns>
		public SalWindowHandle getHandleControl()
		{
			#region Actions
			return iv_hWndControl;
			#endregion
		}
		
		/// <summary>
		/// Returns the item window handle
		/// </summary>
		/// <returns></returns>
		public SalWindowHandle getHandleSelf()
		{
			#region Actions
			return iv_hWndSelf;
			#endregion
		}
		
		/// <summary>
		/// Set the iv_nStyle member.
		/// </summary>
		/// <param name="p_nArg"></param>
		/// <returns></returns>
		public SalNumber setStyle(SalNumber p_nArg)
		{
			#region Actions
			iv_nStyle = p_nArg;

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Get the iv_nStyle member.
		/// </summary>
		/// <returns></returns>
		public SalNumber getStyle()
		{
			#region Actions
			return iv_nStyle;
			#endregion
		}
		
		/// <summary>
		/// Set the iv_nStyleEx member.
		/// </summary>
		/// <param name="p_nArg"></param>
		/// <returns></returns>
		public SalNumber setStyleEx(SalNumber p_nArg)
		{
			#region Actions
			iv_nStyleEx = p_nArg;

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Get the iv_nStyleEx member.
		/// </summary>
		/// <returns></returns>
		public SalNumber getStyleEx()
		{
			#region Actions
			return iv_nStyleEx;
			#endregion
		}
		// //-- Latebound functions --//
		/// <summary>
		/// Initialize the members and create the control.
		/// </summary>
		/// <param name="p_nwParam"></param>
		/// <param name="p_nlParam"></param>
		/// <returns></returns>
		public SalNumber lbfOn_SAM_Create(SalNumber p_nwParam, SalNumber p_nlParam)
		{
			#region Actions
			// //-- init the members --//
			iv_hWndSelf = Sys.hWndItem;
			iv_hWndParent = Sys.hWndItem.GetParent();
			iv_bCreated = false;

			// //-- create the control --//
			// Call ..lbfCreateControl( 0, 0 )

			// //-- set its position --//
			// Call ..lbfResizeControl()

			// //-- hide the object custom control, because we don't use it --//
			// Call SalHideWindow( GetHandleSelf() )

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="p_nwParam"></param>
		/// <param name="p_nlParam"></param>
		/// <returns></returns>
		public SalNumber lbfOn_SAM_Destroy(SalNumber p_nwParam, SalNumber p_nlParam)
		{
			#region Actions
			iv_bCreated = false;
			iv_hWndSelf = SalWindowHandle.Null;
			iv_hWndParent = SalWindowHandle.Null;
			iv_hWndControl = SalWindowHandle.Null;

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="p_nStyle"></param>
		/// <param name="p_nStyleEx"></param>
		/// <returns></returns>
		public SalNumber lbfCreateControl(SalNumber p_nStyle, SalNumber p_nStyleEx)
		{
			#region Actions

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Positions the created control.
		/// </summary>
		/// <returns></returns>
		public SalBoolean lbfResizeControl()
		{
			#region Local Variables
			SalNumber nClientL = 0;
			SalNumber nClientT = 0;
			SalNumber nClientR = 0;
			SalNumber nClientB = 0;
			#endregion
			
			#region Actions

			if (!(iv_bCreated)) 
			{
				// //-- not created --//
				return false;
			}

			// //-- get the item location --//
			getHandleSelf().GetLocation(ref nClientL, ref nClientT);
			getHandleSelf().GetSize(ref nClientR, ref nClientB);

			// //-- also set the position of the control --//
			getHandleControl().SetLocation(nClientL, nClientT);
			getHandleControl().SetSize(nClientR, nClientB);


			return false;
			#endregion
		}
		
		/// <summary>
		/// Returns the window rectangle size for the hWndItem (not the control).
		/// </summary>
		/// <param name="p_RECT"></param>
		/// <returns></returns>
		public SalNumber lbfGetInitialObjectRect(fcStructRectangle p_RECT)
		{
			#region Local Variables
			SalNumber nLeft = 0;
			SalNumber nTop = 0;
			SalNumber nRight = 0;
			SalNumber nBottom = 0;
			#endregion
			
			#region Actions
			// //-- then window rectangle --//
			Ext.GetWindowRect(getHandleSelf(), ref nLeft, ref nTop, ref nRight, ref nBottom);
			Ext.ScreenToClient(getHandleParent(), ref nLeft, ref nTop);
			Ext.ScreenToClient(getHandleParent(), ref nRight, ref nBottom);

			p_RECT.iv_nLeft = nLeft;
			p_RECT.iv_nRight = nRight;
			p_RECT.iv_nTop = nTop;
			p_RECT.iv_nBottom = nBottom;

			return 0;
			#endregion
		}
		#endregion
		
		#region Late Bind Methods
		
		/// <summary>
		/// Virtual wrapper replacement for late-bound (..) calls.
		/// </summary>
		public virtual SalNumber lb_lbfOn_SAM_Create(SalNumber p_nwParam, SalNumber p_nlParam)
		{
			LateBind lateBind = (LateBind)this._derived;
			if (lateBind == null) 
			{
				return this.lbfOn_SAM_Create(p_nwParam, p_nlParam);
			}
			else
			{
				return lateBind.lb_lbfOn_SAM_Create(p_nwParam, p_nlParam);
			}
		}
		
		/// <summary>
		/// Virtual wrapper replacement for late-bound (..) calls.
		/// </summary>
		public virtual SalNumber lb_lbfOn_SAM_Destroy(SalNumber p_nwParam, SalNumber p_nlParam)
		{
			LateBind lateBind = (LateBind)this._derived;
			if (lateBind == null) 
			{
				return this.lbfOn_SAM_Destroy(p_nwParam, p_nlParam);
			}
			else
			{
				return lateBind.lb_lbfOn_SAM_Destroy(p_nwParam, p_nlParam);
			}
		}
		
		/// <summary>
		/// Virtual wrapper replacement for late-bound (..) calls.
		/// </summary>
		public virtual SalNumber lb_lbfGetInitialObjectRect(fcStructRectangle p_RECT)
		{
			LateBind lateBind = (LateBind)this._derived;
			if (lateBind == null) 
			{
				return this.lbfGetInitialObjectRect(p_RECT);
			}
			else
			{
				return lateBind.lb_lbfGetInitialObjectRect(p_RECT);
			}
		}
		
		/// <summary>
		/// Virtual wrapper replacement for late-bound (..) calls.
		/// </summary>
		public virtual SalNumber lb_lbfCreateControl(SalNumber p_nStyle, SalNumber p_nStyleEx)
		{
			LateBind lateBind = (LateBind)this._derived;
			if (lateBind == null) 
			{
				return this.lbfCreateControl(p_nStyle, p_nStyleEx);
			}
			else
			{
				return lateBind.lb_lbfCreateControl(p_nStyle, p_nStyleEx);
			}
		}
		#endregion
		
		#region Multiple Inheritance Late Bind Interface
		
		public interface LateBind
		{
			SalNumber lb_lbfOn_SAM_Create(SalNumber p_nwParam, SalNumber p_nlParam);
			SalNumber lb_lbfOn_SAM_Destroy(SalNumber p_nwParam, SalNumber p_nlParam);
			SalNumber lb_lbfGetInitialObjectRect(fcStructRectangle p_RECT);
			SalNumber lb_lbfCreateControl(SalNumber p_nStyle, SalNumber p_nStyleEx);
		}
		#endregion
	}
}
