// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// 06.11.06 Ä41
	/// </summary>
	public partial class frmSteuerExportA : SalFormWindow
	{
		#region Window Variables
		public SalFileHandle hFile = SalFileHandle.Null;
		public SalString strFile = "";
		public SalNumber nFileType = 0;
		public SalSqlHandle hSqlTR = SalSqlHandle.Null;
		public SalNumber nFetch = 0;
		public SalBoolean bOk = false;
		public SalString strDummy = "";
		public SalString strDiv = "";
		public SalNumber nIndex = 0;
		public SalNumber nLocalIndex = 0;
		public SalNumber nItemFlags = 0;
		public SalNumber nColor = 0;
		public SalString strKen = "";
		public SalDateTime dtErfDat = SalDateTime.Null;
		public SalString strSelect = "";
		public SalString strSelectNur = "";
		public SalNumber nArztNr = 0;
		public SalNumber nDiff = 0;
		public SalString strDir = "";
		public SalNumber nPorto = 0;
		public SalNumber nMwSt = 0;
		public SalNumber nNetto = 0;
		public SalNumber nBrutto = 0;
		public SalDateTime dtDatum = SalDateTime.Null;
		public SalString strRechNr = "";
		public SalString strText = "";
		public SalString strName1 = "";
		public SalString strName2 = "";
		public SalString strStr = "";
		public SalString strOrt = "";
		public SalString strLand = "";
		public SalString strUstId = "";
		public SalString strHVN = "";
		public SalString strHNN = "";
		public SalString strHStr = "";
		public SalString strHOrt = "";
		public SalString strHLand = "";
		public SalNumber nMwStProz = 0;
		public SalString strBuchText = "";
		public SalString strProgOrdner = "";
		public SalNumber nDummy = 0;
		public SalFileHandle hFileZ = SalFileHandle.Null;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmSteuerExportA()
		{
			// Assign global reference.
			App.frmSteuerExportA = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmSteuerExportA CreateWindow(Control owner)
		{
			frmSteuerExportA frm = new frmSteuerExportA();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmSteuerExportA FromHandle(SalWindowHandle handle)
		{
			return ((frmSteuerExportA)SalWindow.FromHandle(handle, typeof(frmSteuerExportA)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <param name="strFile"></param>
		/// <param name="strSelect"></param>
		/// <param name="strFelder"></param>
		/// <returns></returns>
		public SalBoolean PalMakeFile(SalString strFile, SalString strSelect, SalString strFelder)
		{
			#region Local Variables
			SqlLocals.PalMakeFileLocals locals = new SqlLocals.PalMakeFileLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.strFile = strFile;
				locals.strSelect = strSelect;
				locals.strFelder = strFelder;

				locals.bOk = true;
				if (hFile.Open(locals.strFile, Sys.OF_Exist)) 
				{
					hFile.Open(locals.strFile, Sys.OF_Delete);
					nFileType = Sys.OF_Create;
				}
				else
				{
					nFileType = Sys.OF_Create;
				}
				if (locals.bOk) 
				{
					this.SetStatusBarText("Erstelle " + locals.strFile);
					if (hFile.Open(locals.strFile, ((nFileType | Sys.OF_Write) | Sys.OF_Text))) 
					{
						hFile.PutString(locals.strFelder);
					}
					locals.bOk = true;
					Int.SqlHandleExec(hSqlTR, locals.strSelect, "Funktion: MakeFile", ref Var.nErr);
					nFetch = hSqlTR.FetchNext();
					while (nFetch != Sys.FETCH_EOF && locals.bOk) 
					{
						if (locals.strFile.Scan("Ausbuch") != -1) 
						{
							// If PalMakeFile( strFile,
							// 'SELECT   tkaarztnr, aname1, aname2, astr, aort, aland, austid,
							// hvn, hnn, hstr, hort, hland,
							// tkabeldat, @STRING(tkaarztnr,0) || \'/R\' || @STRING(tkarechnr,0), tkadmabr*-1, tkabuchtext
							// INTO :frmSteuerExportA.nArztNr, :frmSteuerExportA.strName1, :frmSteuerExportA.strName2, :frmSteuerExportA.strStr, :frmSteuerExportA.strOrt, :frmSteuerExportA.strLand, :frmSteuerExportA.strUstId,
							// :frmSteuerExportA.strHVN, :frmSteuerExportA.strHNN, :frmSteuerExportA.strHStr, :frmSteuerExportA.strHOrt, :frmSteuerExportA.strHLand,
							// :frmSteuerExportA.dtDatum, :frmSteuerExportA.strRechNr, :frmSteuerExportA.nBrutto, :frmSteuerExportA.strBuchText
							// FROM tka, a, h
							// WHERE tkaarztnr = aarztnr AND tkaarztnr=harztnr(+) and tkahalternr=hhalternr(+)
							// AND tkadruckdatum BETWEEN 2000-1-1 AND 2013-12-31
							// AND (tkadmabr < 0 OR tkabuchtext LIKE 'AusbRück%' OR tkasa=3) AND tkabuchtext NOT LIKE \'GEBV%\'',
							// 'Mitglied-Nr	Mitglied-Name1	Mitglied-Name2	Mitglied-Strasse	Mitglied-Ort	Mitglied-Land	Mitglied-UstID	Halter-Vorname	Halter-Nachname	Halter-Strasse	Halter-Land
							// Datum	RechNr	EUR-Ausbuch	Buchungstext')
							strText = nArztNr.ToString(0) + ((SalNumber)9).ToCharacter() + strName1 + ((SalNumber)9).ToCharacter() + strName2 + ((SalNumber)9).ToCharacter() + strStr + ((SalNumber)9).ToCharacter() + strOrt + ((SalNumber)9).ToCharacter() + strLand + 
							((SalNumber)9).ToCharacter() + strUstId + ((SalNumber)9).ToCharacter() + strHVN + ((SalNumber)9).ToCharacter() + strHNN + ((SalNumber)9).ToCharacter() + strHStr + ((SalNumber)9).ToCharacter() + strHOrt + ((SalNumber)9).ToCharacter() + 
							strHLand + ((SalNumber)9).ToCharacter() + Int.PalDateToStrDE(dtDatum) + ((SalNumber)9).ToCharacter() + strRechNr + ((SalNumber)9).ToCharacter() + Int.PalStrNum(nBrutto, 10, 2) + ((SalNumber)9).ToCharacter() + strBuchText;
						}
						else
						{
							strText = nArztNr.ToString(0) + ((SalNumber)9).ToCharacter() + strRechNr + ((SalNumber)9).ToCharacter() + strName1 + ((SalNumber)9).ToCharacter() + strName2 + ((SalNumber)9).ToCharacter() + strStr + ((SalNumber)9).ToCharacter() + strOrt + 
							((SalNumber)9).ToCharacter() + strLand + ((SalNumber)9).ToCharacter() + strUstId + ((SalNumber)9).ToCharacter() + Int.PalDateToStrDE(dtDatum) + ((SalNumber)9).ToCharacter() + Int.PalStrNum(nMwStProz, 5, 2) + ((SalNumber)9).ToCharacter() + 
							Int.PalStrNum(nPorto, 10, 2) + ((SalNumber)9).ToCharacter() + Int.PalStrNum(nMwSt, 10, 2) + ((SalNumber)9).ToCharacter() + Int.PalStrNum(nNetto, 10, 2) + ((SalNumber)9).ToCharacter() + Int.PalStrNum(nBrutto, 10, 2);
						}
						while (!(hFile.PutString(strText)) && locals.bOk) 
						{
							hFile.Close();
							if (Sys.IDCANCEL == Sal.MessageBox(@"Die Platte/Diskette ist voll.

Legen Sie bitte eine neue ein.", "Achtung", Sys.MB_OkCancel)) 
							{
								locals.bOk = false;
							}
							else
							{
								hFile.Open(locals.strFile, ((nFileType | Sys.OF_Write) | Sys.OF_Text));
							}
						}
						nFetch = hSqlTR.FetchNext();
					}
					hSqlTR.Commit();
					if (locals.bOk) 
					{
						hFile.Close();
					}
					else
					{
						Sal.MessageBox("Die Übertragung der Datei " + locals.strFile + @"
wurde abgebrochen.", "Achtung", Sys.MB_Ok);
					}
				}
				hFile.Close();
				return locals.bOk;
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmSteuerExportA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmSteuerExportA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmSteuerExportA_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmSteuerExportA_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmSteuerExportA_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlConnection(ref this.hSqlTR);
			this.dfvon.DateTime = new SalDateTime(1900, 1, 1);
			this.dfbis.DateTime = new SalDateTime(2100, 12, 31);
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmSteuerExportA_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlTR.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 05.07.11 Ä603
			App.frmRgSuchen.strDrive = Sal.FileGetDrive();
			Sal.FileSetDrive("C:");
			Sal.WaitCursor(false);
			dlgLaufwerk.ModalDialog(this, "Steuerprüfer", ref this.strDir);
			Sal.FileSetDrive(App.frmRgSuchen.strDrive);
			if (this.strDir == "") 
			{
				Sal.MessageBox("Bitte Ordner für die Exportdateien auswählen.", "Abbruch", (Sys.MB_Ok | Sys.MB_IconExclamation));
				e.Return = false;
				return;
			}
			else
			{
				if (!(this.hFile.Open(this.strDir + "\\TEST", ((Sys.OF_Create | Sys.OF_Text) | Sys.OF_Write)))) 
				{
					Sal.MessageBox(@"Im angegebenen Ordner
kann keine Datei erstellt werden !"".", "Achtung", Sys.MB_Ok);
				}
				else
				{
					Sal.WaitCursor(true);
					if (this.dfvon.DateTime == Sys.DATETIME_Null) 
					{
						this.dfvon.DateTime = new SalDateTime(1900, 1, 1);
					}
					if (this.dfbis.DateTime == Sys.DATETIME_Null) 
					{
						this.dfbis.DateTime = new SalDateTime(2199, 12, 31);
					}
					this.hFile.Close();

					this.bOk = false;
					// Rechnungen
					this.strFile = this.strDir + "\\moveta-Rechnungen.txt";
					if (this.PalMakeFile(this.strFile, @"SELECT   tkaarztnr, @STRING( @YEARNO( tkadruckdatum-15), 0) || '/' || @STRING(tkaarztnr, 0) || '/' || @STRING( @MONTH( tkadruckdatum-15), 0), aname1, aname2, astr, aort, aland, austid, tkadruckdatum, tkaprozmwst,
sum(tkadmporto), sum(tkatavst), sum(tksoll)-sum(tkatavst)-sum(tkadmporto), sum(tksoll)
INTO :frmSteuerExportA.nArztNr, :frmSteuerExportA.strRechNr, :frmSteuerExportA.strName1, :frmSteuerExportA.strName2, :frmSteuerExportA.strStr, :frmSteuerExportA.strOrt, :frmSteuerExportA.strLand, :frmSteuerExportA.strUstId,
:frmSteuerExportA.dtDatum, :frmSteuerExportA.nMwStProz, :frmSteuerExportA.nPorto, :frmSteuerExportA.nMwSt, :frmSteuerExportA.nNetto, :frmSteuerExportA.nBrutto
FROM tka, a
WHERE tkaarztnr = aarztnr
AND tkadruckdatum BETWEEN :frmSteuerExportA.dfvon AND :frmSteuerExportA.dfbis
AND tksoll<>0 AND tkabuchtext not like '+%' AND tkadeaktiv IS NULL  GROUP BY 1,2,3,4,5,6,7,8,9,10", @"MitgliedNr	RechNr	Name1	Name2	Strasse	Ort	Land	UstID	Datum	MwSt-Satz	EUR-Porto	EUR-MwSt	EUR-Netto	EUR-Brutto")) 
					{
					}
					// Rechnungsdetails
					// Set strFile = strDir || '\\Rechnungsdetails.txt'
					// If PalMakeFile( strFile,
					// 'SELECT  rkarztnr || @char(9) || rkhalternr || @char(9) || rkrechnr || @char(9) || rpla || @char(9) || rpmwst || @char(9) || rpdatum || @char(9) || rprechtext || @char(9) || rpdm || @char(9) || rptext
					// INTO :frmSteuerExport.strText
					// FROM rk,rp
					// WHERE rkarztnr=rparztnr and rkhalternr=rphalternr and rkrechnr=rprechnr
					// AND rkarztnr = :frmSteuerExport.dfNr AND rkrechdat BETWEEN :frmSteuerExport.dfvon AND :frmSteuerExport.dfbis AND rkrechnr < 999990 ORDER BY rkarztnr, rkrechnr',
					// 'ArztNr	HalterNr	RechNr	Typ	MwSt	Datum	Bezeichnung	Netto-EUR	Text')
					this.SetStatusBarText("Export abgeschlossen");
					Sal.WaitCursor(false);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbAusbuch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAusbuch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAusbuch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAusbuch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 05.07.11 Ä603
			App.frmRgSuchen.strDrive = Sal.FileGetDrive();
			Sal.FileSetDrive("C:");
			Sal.WaitCursor(false);
			dlgLaufwerk.ModalDialog(this, "Steuerprüfer", ref this.strDir);
			Sal.FileSetDrive(App.frmRgSuchen.strDrive);
			if (this.strDir == "") 
			{
				Sal.MessageBox("Bitte Ordner für die Exportdateien auswählen.", "Abbruch", (Sys.MB_Ok | Sys.MB_IconExclamation));
				e.Return = false;
				return;
			}
			else
			{
				if (!(this.hFile.Open(this.strDir + "\\TEST", ((Sys.OF_Create | Sys.OF_Text) | Sys.OF_Write)))) 
				{
					Sal.MessageBox(@"Im angegebenen Ordner
kann keine Datei erstellt werden !"".", "Achtung", Sys.MB_Ok);
				}
				else
				{
					Sal.WaitCursor(true);
					if (this.dfvon.DateTime == Sys.DATETIME_Null) 
					{
						this.dfvon.DateTime = new SalDateTime(1900, 1, 1);
					}
					if (this.dfbis.DateTime == Sys.DATETIME_Null) 
					{
						this.dfbis.DateTime = new SalDateTime(2199, 12, 31);
					}
					this.hFile.Close();

					this.strSelectNur = "";
					if (this.mlNur.Text != "") 
					{
						this.strSelectNur = " AND tkaarztnr IN (" + this.mlNur.Text + ") ";
					}

					this.bOk = false;
					// Rechnungen
					this.strFile = this.strDir + "\\moveta-Ausbuchungen.txt";
					if (this.PalMakeFile(this.strFile, @"SELECT   tkaarztnr, aname1, aname2, astr, aort, aland, austid,
hvn, hnn, hstr, hort, hland,
tkabeldat, @STRING(tkaarztnr,0) || '/R' || @STRING(tkarechnr,0), tkadmabr*-1, tkabuchtext
INTO :frmSteuerExportA.nArztNr, :frmSteuerExportA.strName1, :frmSteuerExportA.strName2, :frmSteuerExportA.strStr, :frmSteuerExportA.strOrt, :frmSteuerExportA.strLand, :frmSteuerExportA.strUstId,
:frmSteuerExportA.strHVN, :frmSteuerExportA.strHNN, :frmSteuerExportA.strHStr, :frmSteuerExportA.strHOrt, :frmSteuerExportA.strHLand,
:frmSteuerExportA.dtDatum, :frmSteuerExportA.strRechNr, :frmSteuerExportA.nBrutto, :frmSteuerExportA.strBuchText
FROM tka, a, h
WHERE tkaarztnr = aarztnr AND tkaarztnr=harztnr(+) and tkahalternr=hhalternr(+)
AND tkabeldat BETWEEN :frmSteuerExportA.dfvon AND :frmSteuerExportA.dfbis AND tkadeaktiv IS NULL AND hdeaktiv IS NULL
AND (tkadmabr < 0 OR tkabuchtext LIKE 'AusbRück%'  OR tkabuchtext LIKE 'Ausbuchung rück%' OR tkasa=3) AND tkabuchtext NOT LIKE 'GEBV%' AND tkabuchtext NOT LIKE 'Gebühren von%' " + this.strSelectNur + " ORDER BY tkaarztnr, tkahalternr, tkabeldat", 
@"Mitglied-Nr	Mitglied-Name1	Mitglied-Name2	Mitglied-Strasse	Mitglied-Ort	Mitglied-Land	Mitglied-UstID	Halter-Vorname	Halter-Nachname	Halter-Strasse	Halter-Ort" + @"	Halter-Land	Datum	RechNr	EUR-Ausbuch	Buchungstext")) 
					{
					}
					this.SetStatusBarText("Export abgeschlossen");
					Sal.WaitCursor(false);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.DestroyWindow();
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalMakeFileLocals
			{
				public SalBoolean bOk = false;
				public SalString strFile = "";
				public SalString strSelect = "";
				public SalString strFelder = "";
			}
		}
		#endregion
	}
}
