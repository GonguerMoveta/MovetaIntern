// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="nPArztNr"></param>
	public partial class frmInvent : SalQuickTabsForm
	{
		#region Window Parameters
		public SalNumber nPArztNr;
		#endregion
		
		#region Window Variables
		public SalSqlHandle hSqlIK = SalSqlHandle.Null;
		public SalSqlHandle hSqlIP = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalString strSelectP = "";
		public SalNumber nColor = 0;
		public SalNumber nRow = 0;
		public SalNumber nRowP = 0;
		public SalString strCode = "";
		public SalNumber nFetch = 0;
		public SalString strEti1 = "";
		public SalString strEti2 = "";
		public SalString strEti3 = "";
		public SalString strEti4 = "";
		public SalString strEti5 = "";
		public SalNumber nInventNr = 0;
		public SalNumber nPSumme = 0;
		public SalString strBrief = "";
		public SalString strWhere = "";
		public SalString strUnterOrdner = "";
		public SalBoolean bReturn = false;
		public SalString strDateiPfad = "";
		public SalString strDateiName = "";
		public SalString strFile = "";
		public SalString strScanTitel = "";
		public SalNumber nRet = 0;
		public SalArray<SalString> sFiles = new SalArray<SalString>();
		public SalBoolean bOk = false;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmInvent(SalNumber nPArztNr)
		{
			// Assign global reference.
			App.frmInvent = this;
			// Window Parameters initialization.
			this.nPArztNr = nPArztNr;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmInvent CreateWindow(Control owner, SalNumber nPArztNr)
		{
			frmInvent frm = new frmInvent(nPArztNr);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmInvent FromHandle(SalWindowHandle handle)
		{
			return ((frmInvent)SalWindow.FromHandle(handle, typeof(frmInvent)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalNewRow()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (PalSave()) 
				{
				}
				tblIVp.ResetTable();
				tblIVk.Populate(hSqlIK, strSelect, Sys.TBL_FillAll);
				nRow = tblIVk.InsertRow(Sys.TBL_MaxRow);
				tblIVk.colBearbeiter.Text = Var.strBNUser;
				tblIVk.colArztNr.Number = nPArztNr;
				tblIVk.colDatum.DateTime = SalDateTime.Current;
				tblIVk.SetFocusCell(nRow, tblIVk.colRechTyp, 0, -1);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalNewRowP()
		{
			#region Actions
			using (new SalContext(this))
			{
				PalSaveP();
				if (tblIVp.Populate(hSqlIP, strSelectP, Sys.TBL_FillAll)) 
				{
				}
				nRowP = tblIVp.InsertRow(Sys.TBL_MaxRow);
				tblIVp.colNr.Number = this.tblIVk.colNr.Number;
				tblIVp.colArztNr.Number = this.tblIVk.colArztNr.Number;
				tblIVp.colMenge.Number = 1;
				tblIVp.colPck.Text = "Stck.";
				tblIVp.SetFocusCell(nRowP, tblIVp.colCode, 0, -1);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalSave()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.WaitCursor(true);
				PalSaveP();
				// Call SqlConnection( hSqlLogBugUpd)
				tblIVk.KillCellEdit();
				if (tblIVk.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblIVk.FindNextRow(ref nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblIVk.SetFocusRow(nRow);

						if (this.tblIVk.colRechErst.Text == "") 
						{
							if (Sys.IDYES == Sal.MessageBox(@"Keinen Rechnungsersteller eingegeben.

Dennoch übernehmen?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
							{
								this.tblIVk.colRechErst.Text = "N/A";
							}
						}
						if (this.tblIVk.colRechErst.Text != "") 
						{
							if (this.tblIVk.colNr.Number == Sys.NUMBER_Null) 
							{
								Int.SqlImmedSel("SELECT MAX(iknr) INTO :frmInvent.tblIVk.colNr FROM ik");
								this.tblIVk.colNr.Number = this.tblIVk.colNr.Number + 1;
							}
							Int.SqlIstDa("FROM ik WHERE iknr = :frmInvent.tblIVk.colNr", ref Var.bExists);
							if (Var.bExists) 
							{
								Int.SqlImmed("DELETE FROM ik WHERE iknr = :frmInvent.tblIVk.colNr");
								Var.bExists = false;
							}
							if (!(Var.bExists)) 
							{
								Int.SqlImmed(@"INSERT INTO ik
( iknr, ikdatum, ikbearbeiter, ikarztnr, iktyp, ikrechdat, ikrechnr, ikkdnr, ikhaendler, ikdm )
VALUES(:frmInvent.tblIVk.colNr, :frmInvent.tblIVk.colDatum, :frmInvent.tblIVk.colBearbeiter, :frmInvent.tblIVk.colArztNr, :frmInvent.tblIVk.colRechTyp,
:frmInvent.tblIVk.colRechDat, :frmInvent.tblIVk.colRechNr, :frmInvent.tblIVk.colKundNr, :frmInvent.tblIVk.colRechErst, :frmInvent.tblIVk.colDM )");
							}
						}
						tblIVk.SetRowFlags(nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
				}
				Sal.WaitCursor(false);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalSaveP()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.WaitCursor(true);
				// Call SqlConnection( hSqlLogBugUpd)
				if (this.tblIVk.colNr.Number == Sys.NUMBER_Null) 
				{
					Int.SqlImmedSel("SELECT MAX(iknr) INTO :frmInvent.tblIVk.colNr FROM ik");
					this.tblIVk.colNr.Number = this.tblIVk.colNr.Number + 1;
				}
				tblIVp.KillCellEdit();
				if (tblIVp.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					nRowP = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblIVp.FindNextRow(ref nRowP, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblIVp.SetFocusRow(nRowP);

						if (this.tblIVp.colMenge.Number == Sys.NUMBER_Null) 
						{
							if (Sys.IDYES == Sal.MessageBox(@"Keine Menge eingegeben.

Dennoch übernehmen?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
							{
								this.tblIVp.colMenge.Number = 0;
							}
						}
						if (this.tblIVp.colMenge.Number != Sys.NUMBER_Null) 
						{
							if (this.tblIVp.colNr.Number == Sys.NUMBER_Null) 
							{
								this.tblIVp.colNr.Number = this.tblIVk.colNr.Number;
							}
							if (this.tblIVp.colPos.Number == Sys.NUMBER_Null) 
							{
								Int.SqlImmedSel("SELECT MAX(ippos) INTO :frmInvent.tblIVp.colPos FROM ip WHERE ipnr = :frmInvent.tblIVp.colNr");
								this.tblIVp.colPos.Number = this.tblIVp.colPos.Number + 1;
							}
							Int.SqlIstDa("FROM ip WHERE ipnr = :frmInvent.tblIVp.colNr AND ippos = :frmInvent.tblIVp.colPos", ref Var.bExists);
							if (Var.bExists) 
							{
								Int.SqlImmed("DELETE FROM ip WHERE ipnr = :frmInvent.tblIVp.colNr AND ippos = :frmInvent.tblIVp.colPos");
								Var.bExists = false;
							}
							if (!(Var.bExists)) 
							{
								Int.SqlImmed(@"INSERT INTO ip
(ipnr, ipcode, ipmenge, ippck, ipdm, ipinvnr, iparztnr, ipseriennr, ipbez, ippos )
VALUES(:frmInvent.tblIVp.colNr, :frmInvent.tblIVp.colCode, :frmInvent.tblIVp.colMenge, :frmInvent.tblIVp.colPck, :frmInvent.tblIVp.colDM, :frmInvent.tblIVp.colInvNr,
:frmInvent.tblIVp.colArztNr, :frmInvent.tblIVp.colSerienNr, :frmInvent.tblIVp.colBez, :frmInvent.tblIVp.colPos)");
							}
						}
						tblIVp.SetRowFlags(nRowP, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
				}
				Sal.WaitCursor(false);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// wählt Datei
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalBildWahl()
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(20);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				// Set strArExtensions[0] = 'Bitmapdateien - *.bmp'
				// Set strArExtensions[1] = '*.bmp'
				// Set strArExtensions[2] = 'Icondateien - *.ico'
				// Set strArExtensions[3] = '*.ico'
				// Set strArExtensions[4] = 'Jpeg-Dateien - *.jpg'
				// Set strArExtensions[5] = '*.jpg'
				// Set strArExtensions[6] = 'Gif-Dateien - *.gif'
				// Set strArExtensions[7] = '*.gif'
				// Set strArExtensions[8] = 'Meta-Dateien - *.wmf'
				// Set strArExtensions[9] = '*.wmf'
				// Set strArExtensions[10] = 'Png-Dateien - *.png'
				// Set strArExtensions[11] = '*.png'
				// Set strArExtensions[12] = 'Pcx-Dateien - *.pcx'
				// Set strArExtensions[13] = '*.pcx'
				// Set strArExtensions[14] = 'Tiff-Dateien - *.tif'
				// Set strArExtensions[15] = '*.tif'
				// Set strArExtensions[16] = 'Tga-Dateien - *.tga'
				// Set strArExtensions[17] = '*.tga'
				// Set strArExtensions[18] = 'alle Dateien - *.*'
				// Set strArExtensions[19] = '*.*'
				strArExtensions[0] = "alle Dateien - *.*";
				strArExtensions[1] = "*.*";
				strDateiPfad = "";
				xOK = Sal.DlgOpenFile(this, "Datei wählen", strArExtensions, 2, ref nIndex, ref strDateiName, ref strDateiPfad);
				if (xOK) 
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmInvent WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmInvent_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmInvent_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmInvent_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmInvent_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			//FC:FINAL: axShell Init
			axShell_OnSAM_Create();
            //
            Int.SqlConnection(ref this.hSqlIK);
			if (this.tblIVk.colRechErst.ClearList()) 
			{
				if (this.hSqlIK.PrepareAndExecute("SELECT iacode INTO :frmInvent.strCode FROM ia order by iacode")) 
				{
					while (this.hSqlIK.FetchNext(ref this.nFetch)) 
					{
						this.tblIVk.colRechErst.AddListItem(this.strCode);
					}
					this.hSqlIK.Commit();
				}
			}
			// 22.06.09 OTÄ129
			if (this.nPArztNr > 0) 
			{
				this.strWhere = "= :frmInvent.nPArztNr";
			}
			else
			{
				this.strWhere = " IS NOT NULL";
				this.pbNeu.DisableWindow();
			}

			this.strSelect = @"SELECT iknr, ikdatum, ikbearbeiter, ikarztnr, iktyp, ikrechdat, ikrechnr, ikkdnr, ikhaendler, ikdm
INTO :frmInvent.tblIVk.colNr, :frmInvent.tblIVk.colDatum, :frmInvent.tblIVk.colBearbeiter, :frmInvent.tblIVk.colArztNr, :frmInvent.tblIVk.colRechTyp,
:frmInvent.tblIVk.colRechDat, :frmInvent.tblIVk.colRechNr, :frmInvent.tblIVk.colKundNr, :frmInvent.tblIVk.colRechErst, :frmInvent.tblIVk.colDM
FROM ik WHERE ikarztnr " + this.strWhere + " ORDER BY ikdatum DESC";
			this.tblIVk.Populate(this.hSqlIK, this.strSelect, Sys.TBL_FillAll);
			this.tblIVk.SetContextMenu("frmInventtblIVkRightClick", 0);
			this.strSelectP = @"SELECT ipnr, ipcode, ipmenge, ippck, ipdm, ipinvnr, iparztnr, ipseriennr, ipbez, ippos
INTO :frmInvent.tblIVp.colNr, :frmInvent.tblIVp.colCode, :frmInvent.tblIVp.colMenge, :frmInvent.tblIVp.colPck, :frmInvent.tblIVp.colDM, :frmInvent.tblIVp.colInvNr,
:frmInvent.tblIVp.colArztNr, :frmInvent.tblIVp.colSerienNr, :frmInvent.tblIVp.colBez, :frmInvent.tblIVp.colPos
FROM ip WHERE iparztnr " + this.strWhere + " AND ipnr = :frmInvent.tblIVk.colNr ORDER BY ippos";
			Int.SqlConnection(ref this.hSqlIP);
			this.tblIVp.SetContextMenu("frmInventtblIVpRightClick", 0);
			// Archiv
			if (Var.strPfadArchiv == "") 
			{
				this.axShell.Enabled = false;
			}
			else
			{
				Sal.WaitCursor(true);
				this.axShell.Enabled = true;
				// 20.04.09 OTÄ153
				this.strUnterOrdner = "A" + Int.PalStrNullen(this.nPArztNr.ToString(0), 4);
				Int.PalExplorer(this.strUnterOrdner, false);
				this.strUnterOrdner = "A" + Int.PalStrNullen(this.nPArztNr.ToString(0), 4) + "\\EDV";
				Int.PalExplorer(this.strUnterOrdner, false);
				this.axShell.Path = Var.strPfadArchiv + Sql.Database + "\\" + this.strUnterOrdner;
                if (axShell.IsEmpty()) 
				{
					Sal.MessageBox("Der Ordner " + Var.strPfadArchiv + Sql.Database + "\\" + this.strUnterOrdner + " kann nicht angezeigt werden.", "Fehler im Archiv", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
			}

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmInvent_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlIP.Disconnect();
			this.hSqlIK.Disconnect();
			this.PalSave();
			#endregion
		}
		
		/// <summary>
		/// cmbDAStyle WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbDAStyle_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cmbDAStyle_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbDAStyle_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			//this.axShell.PropGetViewStyle(ref this.nRet);
			if (this.cmbDAStyle.Text == "Kacheln") 
			{
				this.axShell.ViewState = Jam.Shell.ViewState.Thumbnails;
				this.axShell.Thumbnails = true;
			}
			else if (this.cmbDAStyle.Text == "Symbole") 
			{
				this.axShell.ViewState = Jam.Shell.ViewState.LargeIcons;
			}
			else if (this.cmbDAStyle.Text == "Liste") 
			{
				this.axShell.ViewState = Jam.Shell.ViewState.List;
			}
			else if (this.cmbDAStyle.Text == "Details") 
			{
				this.axShell.ViewState = Jam.Shell.ViewState.Details;
			}
			//else
			//{
			//	this.axShell.PropSetViewStyle(Int.PalValNum(this.cmbDAStyle.Text));
			//}
			#endregion
		}
		
		/// <summary>
		/// obSize96 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obSize96_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.obSize96_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obSize96_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			//this.axShell.PropSetThumbnailWidth(96);
			//this.axShell.PropSetThumbnailHeight(96);
			//this.axShell.PropSetThumbnails(true);
			this.axShell.ThumbnailSize = new Size(96, 96);
			this.axShell.ViewState = Jam.Shell.ViewState.Thumbnails;
			this.axShell.Thumbnails = true;
            #endregion
        }
		
		/// <summary>
		/// obSize128 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obSize128_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.obSize128_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obSize128_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
            //this.axShell.PropSetThumbnailWidth(128);
            //this.axShell.PropSetThumbnailHeight(128);
            //this.axShell.PropSetThumbnails(true);
            this.axShell.ThumbnailSize = new Size(128, 128);
            this.axShell.ViewState = Jam.Shell.ViewState.Thumbnails;
            this.axShell.Thumbnails = true;
            #endregion
        }
		
		/// <summary>
		/// obSize256 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obSize256_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.obSize256_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obSize256_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
            //this.axShell.PropSetThumbnailWidth(256);
            //this.axShell.PropSetThumbnailHeight(256);
            //this.axShell.PropSetThumbnails(true);
            this.axShell.ThumbnailSize = new Size(256, 256);
            this.axShell.ViewState = Jam.Shell.ViewState.Thumbnails;
            this.axShell.Thumbnails = true;
            #endregion
        }
				
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void axShell_OnSAM_Create()
		{
			#region Actions
			//FC:FINAL: axShell
			this.axShell.ShellContextMenu = true;
			this.axShell.AutomaticRefresh = true;
            this.axShell.MultiSelect = true;
            //this.axShell.ShowColumnHeaders = true;
			this.axShell.ShowOverlayIcons = false;
            this.axShell.ShowFolders = true;
            //this.axShell.ShowParentFolder = true;
            this.axShell.CopyMode = DragDropEffects.Copy;
            this.axShell.Thumbnails = true;
            //this.axShell.NoFillOnStartup = true;
			this.axShell.ViewState = Jam.Shell.ViewState.Details;
            this.axShell.ShowErrorMessages = true;
            #endregion
        }
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void axShell_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 13.05.09
			Int.PalSetProfileStringR("Vorgabe", "DateiArchiv.Style", this.cmbDAStyle.Text, "Pegasus");
			#endregion
		}
		
		/// <summary>
		/// pbDAWahl WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAWahl_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDAWahl_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDAWahl_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAWahl_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call PalSetDefDir()
			if (Var.strPfadArchiv == "") 
			{
				Sal.MessageBox("Bitte richten Sie zunächst Ihr Dateiarchiv ein.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				if (this.PalBildWahl()) 
				{
					Sal.WaitCursor(true);
					this.strFile = Int.PalDateToStrJJJJMMTThhmmss(SalDateTime.Current) + ".jpg";
					Var.strDummy = this.axShell.Path;
					Sal.FileCopy(this.strDateiPfad, Var.strDummy + Var.strBNZei + "-" + this.strDateiName, true);
					Sal.WaitCursor(false);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAWahl_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbDAWahl, "Datei öffnen");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbDAGeraet WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAGeraet_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDAGeraet_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDAGeraet_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAGeraet_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// If Not SalLoadApp( 'TWAINCom.exe', '-t' )
			// Call SalMessageBox('Scanprogramm wurde nicht gefunden.','Fehler',MB_Ok)
			// 15.07.10
			// Call PalSetDefDir()
			if (Var.strPfadArchiv == "") 
			{
				Sal.MessageBox("Bitte richten Sie zunächst Ihr Dateiarchiv ein.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				this.bOk = axTwain.TwainSelectSource(0);                
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAGeraet_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbDAGeraet, "Scanner wählen");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbDAScan WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAScan_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDAScan_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDAScan_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAScan_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// If Not SalLoadApp( 'TWAINCom.exe', '~scan.bmp -o')
			// Call SalMessageBox('Scanprogramm wurde nicht gefunden.','Fehler',MB_Ok)
			// Else
			// If IDYES = SalMessageBox('Wurde der Scanvorgang korrekt beendet?', '', MB_YesNo|MB_IconQuestion)
			// Call SalWaitCursor(TRUE)
			// Set strFile = PalDateToStrJJJJMMTThhmmss(SalDateCurrent()) || '.jpg'
			// Call SalFileCopy( '~scan.bmp', strPfadArchiv || strDB || '\\' || dfKKenn || '\\' || strFile, TRUE )
			// Call SalWaitCursor( FALSE )
			// 15.07.10
			// Call PalSetDefDir()
			if (Var.strPfadArchiv == "") 
			{
				Sal.MessageBox("Bitte richten Sie zunächst Ihr Dateiarchiv ein.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				this.strScanTitel = "";
				if (1 == dlgEinString1.ModalDialog(this, "Bitte geben Sie einen Titel für den Scan ein:", "", "", "", "", ref this.strScanTitel, 50, "Scan")) 
				{
				}
				this.bOk = this.axTwain.TwainOpenDefaultSource(0);
                this.bOk = this.axTwain.TwainSetAutoFeed(true);
				this.bOk = this.axTwain.TwainSetAutoScan(true);
				this.strFile = Var.strBNZei + "-" + this.strScanTitel + Int.PalDateToStrJJJJMMTThhmmss(SalDateTime.Current) + ".pdf";
				Sal.GetProfileString("License", "Name", "Demo", ref Var.strDummy, "Pegasus");
				//FC:TODO: this.axTwain.TwainPdfStart(Var.strPfadArchiv + Sql.Database + "\\" + this.strUnterOrdner + "\\" + this.strFile, this.strScanTitel, "moveta v" + Var.strProgVer, Var.strBNUser, "moveta", ref this.nRet);
				this.nRet = 0;
				 this.nRet = this.axTwain.TwainAcquireToGdPictureImage(0);
				while (this.nRet != 0) 
				{
					SalNumber temp1 = this.bOk;
					//FC:TODO: this.axTwain.TwainAddGdPictureImageToPdf(this.nRet, ref temp1);
					this.bOk = temp1;
					this.nRet = this.axTwain.TwainAcquireToGdPictureImage(0);
				}
				//FC:TODO: this.axTwain.TwainPdfStop(ref this.nRet);
				this.bOk = this.axTwain.TwainCloseSource();
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAScan_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbDAScan, "Bild von Twain-kompatiblem Gerät einscannen");
			return;
			#endregion
		}
		
		/// <summary>
		/// tblIVk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblIVk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_EndCellTab:
					this.tblIVk_OnSAM_EndCellTab(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.tblIVk_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblIVk_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_RowSetContext:
					this.tblIVk_OnSAM_RowSetContext(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_EndCellTab event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblIVk_OnSAM_EndCellTab(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow();
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblIVk_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow();
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblIVk_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalSaveP();
			this.tblIVp.ResetTable();
			this.tblIVp.Populate(this.hSqlIP, this.strSelectP, Sys.TBL_FillAll);
			#endregion
		}
		
		/// <summary>
		/// SAM_RowSetContext event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblIVk_OnSAM_RowSetContext(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalSaveP();
			this.tblIVp.ResetTable();
			this.tblIVp.Populate(this.hSqlIP, this.strSelectP, Sys.TBL_FillAll);
			#endregion
		}
		
		/// <summary>
		/// pbNeu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeu_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbNeu_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeu_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow();
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow();
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeu, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbLoe WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoe_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoe_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbLoe_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoe_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblIVk.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				this.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblIVk.FindNextRow(ref this.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblIVk.SetFocusRow(this.nRow);
					Int.SqlImmed("DELETE FROM ik WHERE iknr = :frmInvent.tblIVk.colNr");
					Int.SqlImmed("DELETE FROM ip WHERE ipnr = :frmInvent.tblIVk.colNr");
				}
				this.PalSave();
				this.tblIVk.ResetTable();
				this.tblIVk.Populate(this.hSqlIK, this.strSelect, Sys.TBL_FillAll);
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoe_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbLoe, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbSum WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSum_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSum_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbSum_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSum_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nPSumme = 0;
			if (this.tblIVk.AnyRows(Sys.ROW_Selected, 0)) 
			{
				this.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblIVk.FindNextRow(ref this.nRow, Sys.ROW_Selected, 0))) 
					{
						break;
					}
					this.tblIVk.SetFocusRow(this.nRow);
					this.nPSumme = this.nPSumme + this.tblIVk.colDM.Number;
				}
				Sal.MessageBox("Die Summe der markierten Rechnungen beträgt € " + Int.PalStrNum(this.nPSumme, 8, 2), "Summe", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSum_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbSum, "Summe der markierten Zeilen anzeigen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// tblIVp WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblIVp_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_EndCellTab:
					this.tblIVp_OnSAM_EndCellTab(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.tblIVp_OnWM_KEYUP(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_EndCellTab event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblIVp_OnSAM_EndCellTab(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRowP();
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblIVp_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRowP();
			}
			#endregion
		}
		
		/// <summary>
		/// pbPNeu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPNeu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbPNeu_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbPNeu_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbPNeu_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPNeu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRowP();
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPNeu_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRowP();
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPNeu_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbPNeu, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbPLoe WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPLoe_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbPLoe_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbPLoe_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPLoe_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblIVp.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				this.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblIVp.FindNextRow(ref this.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblIVp.SetFocusRow(this.nRow);
					Int.SqlImmed("DELETE FROM ip WHERE ippos = :frmInvent.tblIVp.colPos AND ipnr = :frmInvent.tblIVp.colNr");
				}
				this.PalSaveP();
				this.tblIVp.ResetTable();
				this.tblIVp.Populate(this.hSqlIP, this.strSelectP, Sys.TBL_FillAll);
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPLoe_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbPLoe, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// dfSuchenInvNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSuchenInvNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfSuchenInvNr_OnSAM_Validate(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.dfSuchenInvNr_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSuchenInvNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 22.06.09 OTÄ129
			Sal.WaitCursor(true);
			if (this.dfSuchenInvNr.IsEmpty()) 
			{
				this.tblIVk.Populate(this.hSqlIK, this.strSelect, Sys.TBL_FillAll);
			}
			else
			{
				this.tblIVk.Populate(this.hSqlIK, @"SELECT iknr, ikdatum, ikbearbeiter, ikarztnr, iktyp, ikrechdat, ikrechnr, ikkdnr, ikhaendler, ikdm
INTO :frmInvent.tblIVk.colNr, :frmInvent.tblIVk.colDatum, :frmInvent.tblIVk.colBearbeiter, :frmInvent.tblIVk.colArztNr, :frmInvent.tblIVk.colRechTyp,
:frmInvent.tblIVk.colRechDat, :frmInvent.tblIVk.colRechNr, :frmInvent.tblIVk.colKundNr, :frmInvent.tblIVk.colRechErst, :frmInvent.tblIVk.colDM
FROM ik WHERE iknr IN
(SELECT ipnr FROM ip WHERE ipinvnr = :frmInvent.dfSuchenInvNr) ORDER BY ikdatum DESC", Sys.TBL_FillAll);
			}
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSuchenInvNr_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.dfSuchenInvNr, "Inventarnummer suchen");
			return;
			#endregion
		}
		#endregion
		
		#region tblIVk
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblIVkTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmInvent _frmInvent = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblIVkTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmInvent frmInvent
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmInvent == null) 
					{
						_frmInvent = (frmInvent)this.FindForm();
					}
					return _frmInvent;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblIVkTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblIVkTableWindow)SalWindow.FromHandle(handle, typeof(tblIVkTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colRechTyp WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRechTyp_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Create:
						this.colRechTyp_OnSAM_Create(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Create event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRechTyp_OnSAM_Create(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				// 26.03.13 F1615
				this.colRechTyp.AddListItem("Austausch");
				this.colRechTyp.AddListItem("Wartung");
				this.colRechTyp.AddListItem("Installation");
				this.colRechTyp.AddListItem("Erstgerät");
				#endregion
			}
			
			/// <summary>
			/// colRechErst WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRechErst_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colRechErst_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRechErst_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (Int.SqlImmedSel("SELECT iakdnr INTO :frmInvent.tblIVk.colKundNr FROM ia WHERE iacode = :frmInvent.tblIVk.colRechErst")) 
				{
				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblIVp
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblIVpTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmInvent _frmInvent = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblIVpTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmInvent frmInvent
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmInvent == null) 
					{
						_frmInvent = (frmInvent)this.FindForm();
					}
					return _frmInvent;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblIVpTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblIVpTableWindow)SalWindow.FromHandle(handle, typeof(tblIVpTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
