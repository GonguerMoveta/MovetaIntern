// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="strParent"></param>
	public partial class frmAbrBearb : SalFormWindow
	{
		#region Window Parameters
		public SalString strParent;
		#endregion
		
		#region Window Variables
		public SalSqlHandle hSqlAbrBearb = SalSqlHandle.Null;
		public SalSqlHandle hSqlAbrPosi = SalSqlHandle.Null;
		public SalSqlHandle hSqlUpdBearb = SalSqlHandle.Null;
		public SalSqlHandle hSqlUpdPosi = SalSqlHandle.Null;
		public SalSqlHandle hSqlZettel = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalString strSelectPosi = "";
		public SalNumber nArztNr2 = 0;
		public SalString strRabattText = "";
		public SalNumber nRabatt = 0;
		public SalDateTime dtRabatt = SalDateTime.Null;
		public SalString strLA = "";
		public SalString strKuerzel = "";
		public SalString mlExpress = "";
		public SalString strDummy = "";
		public SalDateTime dtNeu = SalDateTime.Null;
		public SalNumber nAnzFehler = 0;
		public SalArray<SalString> saDirs = new SalArray<SalString>();
		public SalArray<SalString> saFiles = new SalArray<SalString>();
		public SalArray<SalNumber> naSize = new SalArray<SalNumber>();
		public SalArray<SalDateTime> dtaDate = new SalArray<SalDateTime>();
		public SalArray<SalNumber> naAttributes = new SalArray<SalNumber>();
		public SalArray<SalString> saFiles1 = new SalArray<SalString>();
		public SalArray<SalNumber> naSize1 = new SalArray<SalNumber>();
		public SalArray<SalDateTime> dtaDate1 = new SalArray<SalDateTime>();
		public SalArray<SalNumber> naAttributes1 = new SalArray<SalNumber>();
		public SalNumber nCount = 0;
		public SalNumber nCountF = 0;
		public SalNumber nNrF = 0;
		public SalString strDir = "";
		public SalNumber nPRechNr = 0;
		public SalNumber nDummy = 0;
		public SalDateTime dtMaxZeiDat = SalDateTime.Null;
		public SalNumber nPosOffset = 0;
		public SalNumber nBEZRabatt = 0;
		public SalNumber nMwStRabatt = 0;
		public SalString strGrund = "";
		public SalString mlAdresse = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmAbrBearb(SalString strParent)
		{
			// Assign global reference.
			App.frmAbrBearb = this;
			// Window Parameters initialization.
			this.strParent = strParent;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmAbrBearb CreateWindow(Control owner, SalString strParent)
		{
			frmAbrBearb frm = new frmAbrBearb(strParent);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmAbrBearb FromHandle(SalWindowHandle handle)
		{
			return ((frmAbrBearb)SalWindow.FromHandle(handle, typeof(frmAbrBearb)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalSavePosi()
		{
			#region Actions
			using (new SalContext(this))
			{
				// ----------------------------------------------UPDATEN-------------------------------------------------------------------------------
				tblAbrPosi.KillCellEdit();
				if (tblAbrPosi.AnyRows(Sys.ROW_Edited, 0)) 
				{
					// 22.01.04
					if (tblAbrPosi.colnMwSt.Number == Sys.NUMBER_Null) 
					{
						// 20.11.14
						// Set tblAbrPosi.colnMwSt = 0
						tblAbrPosi.colnMwSt.Number = Var.nMwStVoll;
					}

					// kein verändern/Löschen nach Rechnungsdruck		11.05.06 lt. H.Sasse nach Gespr. mit H.Plate rausnehmen	30.08.11 Ä606 wieder aktiviert
					Int.SqlImmedSel(@"SELECT leprechnr INTO :frmAbrBearb.nPRechNr FROM lep
WHERE LEP.ROWID = :frmAbrBearb.tblAbrPosi.colsROWID");
					if (this.nPRechNr != 0 && this.nPRechNr != SalNumber.Null) 
					{
						Sal.MessageBox("Änderung / Löschung nicht erlaubt, da bereits abgerechnet (R " + this.nPRechNr.ToString(0) + ")", "Fehler", (Sys.MB_Ok | Sys.MB_IconStop));
						tblAbrPosi.SetFlagsAnyRows(Sys.ROW_Edited, false, Sys.ROW_Edited, 0);
					}
					else
					{
						// 21.08.06 DATEV #44 und Ä16
						// 03.11.14 Ä1067 + ReverseVersion
						Int.SqlImmedSel(@"SELECT LEPLA || '|' ||
		LEPDATUM || '|' ||
		LEPRECHTEXT || '|' ||
		LEPMWST || '|' ||
		LEPDM || '|' ||
		LEPTEXT || '|' ||
		LEPREVERSEVERSION
FROM lep INTO :frmAbrBearb.strDummy
WHERE LEP.ROWID = :frmAbrBearb.tblAbrPosi.colsROWID");
						Int.PalLog("AbrBearb:" + Sal.NumberToStrX(tblAbrHalter.colnArztNr.Number, 0) + "/H" + Sal.NumberToStrX(tblAbrHalter.colnHalterNr.Number, 0) + " " + strDummy + " > " + this.tblAbrPosi.colsLA.Text + "|" + Int.SalDateToStrX(this.tblAbrPosi.coldtDatum.DateTime) + 
							"|" + this.tblAbrPosi.colsRechText.Text + "|" + this.tblAbrPosi.colnMwSt.Number.ToString(2) + "|" + this.tblAbrPosi.colnDM.Number.ToString(2) + "|" + this.tblAbrPosi.colnText.Number.ToString(0) + "|" + this.tblAbrPosi.colnReverseVersion.Number.ToString(
								0));
						// TB #7: hSqlUpdPosi statt hSqlAbrPosi
						// 19.02.07 F127
						// 03.11.14 Ä1067 + ReverseVersion
						if (hSqlUpdPosi.Prepare(@"
UPDATE LEP SET 	LEPLA = :frmAbrBearb.tblAbrPosi.colsLA,
		LEPDATUM = :frmAbrBearb.tblAbrPosi.coldtDatum,
		LEPRECHTEXT = :frmAbrBearb.tblAbrPosi.colsRechText,
		LEPMWST = :frmAbrBearb.tblAbrPosi.colnMwSt,
		LEPDM = :frmAbrBearb.tblAbrPosi.colnDM,
		LEPTEXT = :frmAbrBearb.tblAbrPosi.colnText,
		LEPZEIDAT = :frmAbrBearb.tblAbrPosi.coldtZeiDat,
		LEPREVERSEVERSION = :frmAbrBearb.tblAbrPosi.colnReverseVersion,
		LEPRABATT = :frmAbrBearb.tblAbrPosi.colnRabatt
		WHERE LEP.ROWID = :frmAbrBearb.tblAbrPosi.colsROWID")) 
						{
							if (!(tblAbrPosi.DoUpdates(hSqlUpdPosi, true))) 
							{
								Sal.MessageBox("Fehler", "", Sys.MB_Ok);
							}
							// 05.12.14
							tblAbrPosi.ResetTable();

							tblAbrPosi.Populate(hSqlAbrPosi, strSelectPosi, Sys.TBL_FillAll);
						}
						Int.SqlImmedX("COMMIT");
					}
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPSelect"></param>
		/// <returns></returns>
		public SalNumber PalPopulate(SalString strPSelect)
		{
			#region Local Variables
			SqlLocals.PalPopulateLocals locals = new SqlLocals.PalPopulateLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.strPSelect = strPSelect;

				// 04.04.08
				nAnzFehler = 0;
				dfFehler.Text = "Keine fehlerhaften Rechnungen gefunden";
				Sal.ColorSet(dfFehler, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);

				// 09.04.08
				// If SqlDisconnect(hSqlAbrBearb)
				// If SqlConnection(hSqlAbrBearb) = IDOK
				// 05.12.14
				tblAbrHalter.ResetTable();


				locals.strPSelect = locals.strPSelect + @"
ORDER BY lenn, levn,leposnr";
				// 30.09.21 TBL_FillAll -> TBL_FillNormal
				if (tblAbrHalter.Populate(hSqlAbrBearb, locals.strPSelect, Sys.TBL_FillAll)) 
				{
					// 30.04.12 Ä384 lepdatum, lepzeidat -> lepzeidat
					// 03.11.14 Ä1067 + ReverseVersion
					strSelectPosi = @"SELECT lepla,lepdatum,leprechtext,lepmwst,lepdm,leptext, lepzeidat,ROWID, lepreverseversion, leprabatt, lepformat
INTO :frmAbrBearb.tblAbrPosi.colsLA,:frmAbrBearb.tblAbrPosi.coldtDatum,:frmAbrBearb.tblAbrPosi.colsRechText,
:frmAbrBearb.tblAbrPosi.colnMwSt,:frmAbrBearb.tblAbrPosi.colnDM,:frmAbrBearb.tblAbrPosi.colnText, :frmAbrBearb.tblAbrPosi.coldtZeiDat ,:frmAbrBearb.tblAbrPosi.colsROWID,
:frmAbrBearb.tblAbrPosi.colnReverseVersion, :frmAbrBearb.tblAbrPosi.colnRabatt,:frmAbrBearb.tblAbrPosi.colnFormat
FROM lep
WHERE leparztnr=:frmAbrBearb.tblAbrHalter.colnArztNr
AND lepbearbeiter=:frmAbrBearb.tblAbrHalter.colsBearbeiter
AND lebearbdatum=:frmAbrBearb.tblAbrHalter.coldtBearbDatum
AND lephalternr=:frmAbrBearb.tblAbrHalter.colnHalterNr
AND lepposnr=:frmAbrBearb.tblAbrHalter.colnPosNr
ORDER BY lepzeidat";
					tblAbrPosi.SetFocusCell(0, tblAbrPosi.colsLA, 0, -1);
					tblAbrHalter.SetFocusCell(0, tblAbrHalter.colnArztNr, 0, -1);
					// 05.12.14
					tblAbrPosi.ResetTable();

					if (tblAbrPosi.Populate(hSqlAbrPosi, strSelectPosi, Sys.TBL_FillAll)) 
					{
					}
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalSave()
		{
			#region Actions
			using (new SalContext(this))
			{
				// ----------------------------------------------UPDATEN-------------------------------------------------------------------------------
				if (tblAbrHalter.AnyRows(Sys.ROW_Edited, 0)) 
				{
					// kein verändern/Löschen nach Rechnungsdruck		11.05.06 lt. H.Sasse nach Gespr. mit H.Plate rausnehmen	30.08.11 Ä606 wieder aktiviert
					Int.SqlImmedSel("SELECT lerechnr INTO :frmAbrBearb.nPRechNr FROM le WHERE LE.ROWID = :frmAbrBearb.tblAbrHalter.colsROWID");
					if (this.nPRechNr != 0 && this.nPRechNr != SalNumber.Null) 
					{
						Sal.MessageBox("Änderung / Löschung nicht erlaubt, da bereits abgerechnet (R " + this.nPRechNr.ToString(0) + ")", "Fehler", (Sys.MB_Ok | Sys.MB_IconStop));
					}
					else
					{
						// 01.08.23 Ä2107 +Vversicherung
						// TB #7: hSqlUpdBearb statt hSqlAbrBearb
						hSqlUpdBearb.Prepare(@"
UPDATE LE SET 	LETI = :frmAbrBearb.tblAbrHalter.colsTi,
		LEVN = :frmAbrBearb.tblAbrHalter.colsVN,
		LENN = :frmAbrBearb.tblAbrHalter.colsNN,
		LENAME2 = :frmAbrBearb.tblAbrHalter.colsName2,
		LESTR = :frmAbrBearb.tblAbrHalter.colsStr,
		LEORT = :frmAbrBearb.tblAbrHalter.colsLand || ' ' || :frmAbrBearb.tblAbrHalter.colsOrt,
		LEREVERSE = :frmAbrBearb.tblAbrHalter.colnReverse,
		LEVECODE = :frmAbrBearb.tblAbrHalter.colVersicherung,
		LEVEVSNR = :frmAbrBearb.tblAbrHalter.colVSNr
WHERE LE.ROWID = :frmAbrBearb.tblAbrHalter.colsROWID");
						tblAbrHalter.DoUpdates(hSqlUpdBearb, true);
						Int.SqlImmedX("COMMIT");
						// 04.04.08
						nAnzFehler = 0;
						dfFehler.Text = "Keine fehlerhaften Rechnungen gefunden";
						Sal.ColorSet(dfFehler, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
						// 05.12.14
						tblAbrHalter.ResetTable();


						tblAbrHalter.Populate(hSqlAbrBearb, strSelect, Sys.TBL_FillNormal);
					}
				}
				if (tblAbrPosi.AnyRows(Sys.ROW_Edited, 0)) 
				{
					// kein verändern/Löschen nach Rechnungsdruck		11.05.06 lt. H.Sasse nach Gespr. mit H.Plate rausnehmen	30.08.11 Ä606 wieder aktiviert
					Int.SqlImmedSel("SELECT leprechnr INTO :frmAbrBearb.nPRechNr FROM lep WHERE LEP.ROWID = :frmAbrBearb.tblAbrPosi.colsROWID");
					if (this.nPRechNr != 0 && this.nPRechNr != SalNumber.Null) 
					{
						Sal.MessageBox("Änderung / Löschung nicht erlaubt, da bereits abgerechnet (R " + this.nPRechNr.ToString(0) + ")", "Fehler", (Sys.MB_Ok | Sys.MB_IconStop));
					}
					else
					{
						// TB #7: hSqlUpdPosi statt hSqlAbrPosi
						// 03.11.14 Ä1067 + ReverseVersion
						hSqlUpdPosi.Prepare(@"
UPDATE LEP SET 	LEPLA = :frmAbrBearb.tblAbrPosi.colsLA,
		LEPDATUM = :frmAbrBearb.tblAbrPosi.coldtDatum,
		LEPRECHTEXT = :frmAbrBearb.tblAbrPosi.colsRechText,
		LEPMWST = :frmAbrBearb.tblAbrPosi.colnMwSt,
		LEPDM = :frmAbrBearb.tblAbrPosi.colnDM,
		LEPTEXT = :frmAbrBearb.tblAbrPosi.colnText,
		LEPREVERSEVERSION = :frmAbrBearb.tblAbrPosi.colnReverseVersion,
		LEPRABATT = :frmAbrBearb.tblAbrPosi.colnRabatt
WHERE LEP.ROWID = :frmAbrBearb.tblAbrPosi.colsROWID");
						tblAbrPosi.DoUpdates(hSqlUpdPosi, true);
						Int.SqlImmedX("COMMIT");
						// 05.12.14
						tblAbrPosi.ResetTable();

						tblAbrPosi.Populate(hSqlAbrPosi, strSelectPosi, Sys.TBL_FillAll);
					}
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmAbrBearb WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAbrBearb_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmAbrBearb_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_CreateComplete:
					this.frmAbrBearb_OnSAM_CreateComplete(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmAbrBearb_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAbrBearb_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 26.02.16
			Int.PalPrepareMTbl(this.tblAbrHalter, 0xbfffbf);
			Int.PalPrepareMTbl(this.tblAbrPosi, 0xbfffbf);

			if (Int.SqlConnection(ref this.hSqlZettel)) 
			{
			}
			// 06.01.14 Ä1005 RO
			Int.SqlConnection(ref this.hSqlAbrBearb);
			Int.SqlConnection(ref this.hSqlUpdBearb);
			// Call SalTblPopulate( tblAbrHalter,hSqlAbrBearb,strSelect,TBL_FillAll )
			// 06.01.14 Ä1005 RO
			Int.SqlConnection(ref this.hSqlAbrPosi);
			Int.SqlConnection(ref this.hSqlUpdPosi);
			if (this.strParent == "frmDiskAbr") 
			{
				// 16.02.16 von oben
				Int.SqlImmedSel(@"SELECT ANR2 INTO :frmAbrBearb.nArztNr2
FROM A WHERE AARZTNR = :frmDiskAbr.nArztNr");

				App.frmMain.SetStatusBarText("Datei OK");
				// 01.08.23 Ä2107 +Vversicherung
				this.strSelect = @"SELECT learztnr,lehalternr,leti, levn, lenn,lename2,lestr,leort, lebarcode,
lebearbeiter,le.lebearbdatum,leposnr,lerechnr, le.ROWID, lereverse, levecode, levevsnr
INTO :frmAbrBearb.tblAbrHalter.colnArztNr,:frmAbrBearb.tblAbrHalter.colnHalterNr,
:frmAbrBearb.tblAbrHalter.colsTi, :frmAbrBearb.tblAbrHalter.colsVN, :frmAbrBearb.tblAbrHalter.colsNN,
:frmAbrBearb.tblAbrHalter.colsName2,:frmAbrBearb.tblAbrHalter.colsStr,:frmAbrBearb.tblAbrHalter.colsOrt,:frmAbrBearb.tblAbrHalter.colsBC,
:frmAbrBearb.tblAbrHalter.colsBearbeiter,:frmAbrBearb.tblAbrHalter.coldtBearbDatum,
:frmAbrBearb.tblAbrHalter.colnPosNr,:frmAbrBearb.tblAbrHalter.colnRechNr,:frmAbrBearb.tblAbrHalter.colsROWID,:frmAbrBearb.tblAbrHalter.colnReverse,
:frmAbrBearb.tblAbrHalter.colVersicherung, :frmAbrBearb.tblAbrHalter.colVSNr
FROM le
WHERE learztnr=:frmDiskAbr.nArztNr
AND le.lebearbeiter=:frmDiskAbr.strBearbeiter
AND le.lebearbdatum=:frmDiskAbr.dtBearbDatum ";
				// 09.09.13 Ä969
				// 13.05.14 (zhalternr IS NULL OR zhalternr = 0) -> zhalternr = 0
				this.tblAZettel.Populate(this.hSqlZettel, @"SELECT ROWID, zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
INTO :frmAbrBearb.tblAZettel.colROWID, :frmAbrBearb.tblAZettel.colsVon, :frmAbrBearb.tblAZettel.colsAn,
:frmAbrBearb.tblAZettel.colnRechNr, :frmAbrBearb.tblAZettel.collsBemerk,
:frmAbrBearb.tblAZettel.coldtDatum, :frmAbrBearb.tblAZettel.colsErl
WHERE zarztnr = :frmDiskAbr.nArztNr  AND zhalternr = 0
AND zart='RA' AND zdeaktiv IS NULL  ORDER BY zdatum DESC", Sys.TBL_FillAll);
			}
			else if (this.strParent == "frmManAbr") 
			{
				// 16.02.16 von oben
				Int.SqlImmedSel(@"SELECT ANR2 INTO :frmAbrBearb.nArztNr2
FROM A WHERE AARZTNR = :frmManAbr.nArztNr");

				// 01.08.23 Ä2107 +Vversicherung
				this.strSelect = @"SELECT learztnr,lehalternr,leti, levn, lenn,lename2,lestr,leort, lebarcode,
lebearbeiter,lebearbdatum,leposnr,lerechnr,ROWID, lereverse, levecode, levevsnr
INTO :frmAbrBearb.tblAbrHalter.colnArztNr,:frmAbrBearb.tblAbrHalter.colnHalterNr,
:frmAbrBearb.tblAbrHalter.colsTi, :frmAbrBearb.tblAbrHalter.colsVN, :frmAbrBearb.tblAbrHalter.colsNN,
:frmAbrBearb.tblAbrHalter.colsName2,:frmAbrBearb.tblAbrHalter.colsStr,:frmAbrBearb.tblAbrHalter.colsOrt, :frmAbrBearb.tblAbrHalter.colsBC,
:frmAbrBearb.tblAbrHalter.colsBearbeiter,:frmAbrBearb.tblAbrHalter.coldtBearbDatum,
:frmAbrBearb.tblAbrHalter.colnPosNr,:frmAbrBearb.tblAbrHalter.colnRechNr,:frmAbrBearb.tblAbrHalter.colsROWID,:frmAbrBearb.tblAbrHalter.colnReverse,
:frmAbrBearb.tblAbrHalter.colVersicherung, :frmAbrBearb.tblAbrHalter.colVSNr
FROM le
WHERE learztnr=:frmManAbr.nArztNr
AND le.lebearbeiter=:frmManAbr.strBearbeiter
AND le.lebearbdatum=:frmManAbr.dtBearbDatum ";
				// 09.09.13 Ä969
				// 13.05.14 (zhalternr IS NULL OR zhalternr = 0) -> zhalternr = 0
				this.tblAZettel.Populate(this.hSqlZettel, @"SELECT ROWID, zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
INTO :frmAbrBearb.tblAZettel.colROWID, :frmAbrBearb.tblAZettel.colsVon, :frmAbrBearb.tblAZettel.colsAn,
:frmAbrBearb.tblAZettel.colnRechNr, :frmAbrBearb.tblAZettel.collsBemerk,
:frmAbrBearb.tblAZettel.coldtDatum, :frmAbrBearb.tblAZettel.colsErl
WHERE zarztnr = :frmManAbr.nArztNr  AND zhalternr = 0
AND zart='RA' AND zdeaktiv IS NULL  ORDER BY zdatum DESC", Sys.TBL_FillAll);
			}
			// Call SalTblSetFocusCell( tblAbrPosi, 0, tblAbrPosi.colsLA, 0, -1 )
			// Call SalTblSetFocusCell( tblAbrHalter, 0, tblAbrHalter.colnArztNr, 0, -1 )
			// Call SalTblPopulate( tblAbrPosi,hSqlAbrPosi,strSelectPosi,TBL_FillAll )
			this.PalPopulate(this.strSelect);
			// 13.03.01
			this.dfSRabatt.Text = "Züchterrabatt";
			// 19.04.02
			this.tblAbrHalter.SetContextMenu("frmAbrBearbRightClick", 0);
			// 04.04.08
			this.tblAbrPosi.SetContextMenu("frmAbrBearbPosiRightClick", 0);
			// 01.10.13
			this.tblAZettel.SetContextMenu("frmAbrBearbtblAZettel", 0);
			this.tblHZettel.SetContextMenu("frmAbrBearbtblHZettel", 0);

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAbrBearb_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 01.08.23 Ä2107
			this.tblAbrHalter.colVersicherung.PopulateList(this.hSqlAbrBearb, "SELECT vecode FROM ve order by vecode");
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAbrBearb_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 14.03.19 Ä1829
			// If strParent='frmDiskAbr'
			// Call frmDiskAbr.PalHoleTabelle(  )
			// 19.03.10
			this.PalSave();
			// ----------------------------------------------UPDATEN-------------------------------------------------------------------------------
			this.PalSavePosi();
			this.tblAbrHalter.KillCellEdit();
			this.tblAbrPosi.KillCellEdit();
			this.hSqlAbrBearb.Disconnect();
			this.hSqlAbrPosi.Disconnect();
			this.hSqlUpdBearb.Disconnect();
			this.hSqlUpdPosi.Disconnect();
			this.hSqlZettel.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// tblAbrHalter WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAbrHalter_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblAbrHalter_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblAbrHalter_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_Click:
					this.tblAbrHalter_OnSAM_Click(sender, e);
					break;
				
				// On SAM_Click
				
				// Call SalWaitCursor( TRUE )
				
				// 15.07.11
				
				// Call PalSavePosi()
				
				// Call SalTblPopulate( tblAbrPosi,hSqlAbrPosi,strSelectPosi,TBL_FillAll )
				
				// 10.04.08 Beilage anzeigen
				
				// If frmAbrBearb.tblAbrHalter.colsBC != ''
				
				// ! Init
				
				// ! 15.01.03
				
				// Set nNrF=0
				
				// While nNrF<=10
				
				// Set saDirs[nNrF]=''
				
				// Set saFiles[nNrF]=''
				
				// Set naSize[nNrF]=NUMBER_Null
				
				// Set dtaDate[nNrF]=DATETIME_Null
				
				// Set naAttributes[nNrF]=NUMBER_Null
				
				// Set nNrF = nNrF + 1
				
				// !
				
				// Set strDir = '\\\\TVNARCHIVSERVER\\BRE\\BRE'
				
				// Set nCountF = VisDosEnumFileInfo(strDir || '\\' || frmAbrBearb.tblAbrHalter.colsBC || '*.PDF' , FA_Standard,
				
				// saFiles, naSize, dtaDate, naAttributes)
				
				// Set nNrF = 0
				
				// While nNrF<=nCountF-1
				
				// 25.01.10OTF373
				
				// If bfrmPDFAnzeige
				
				// If SalDestroyWindow(frmPDFAnzeige)
				
				// Call SalCreateWindow(frmPDFAnzeige, hWndForm, strDir || '\\' || saFiles[nNrF])
				
				// Call SalMessageBox( '.' || strDir || '\\' || saFiles[nNrF] || '.', 'open', MB_Ok|MB_IconAsterisk )
				
				// Call ShellExecuteA( hWndNULL, 'open', strDir || '\\' || saFiles[nNrF], '', '', 1 )
				
				// Set nNrF = nCountF
				
				// 05.05.14 F1986
				
				// Call SqlImmedSel('SELECT ANR2 INTO :frmAbrBearb.nArztNr2
				
				// FROM A WHERE AARZTNR = :frmAbrBearb.tblAbrHalter.colnArztNr')
				
				// 09.09.13 Ä969 zarztnr = :frmAbrBearb.tblAbrHalter.colnArztNr -> ' || PalArztNr('z', frmAbrBearb.tblAbrHalter.colnArztNr, nArztNr2) || '
				
				// 13.06.14 zhalternr<>0 and zhalternr IS NOT NULL -->> zhalternr > 0
				
				// Call SqlIstDa('FROM Z WHERE ' || PalArztNr('z', frmAbrBearb.tblAbrHalter.colnArztNr, nArztNr2) || ' AND zhalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr
				
				// AND zart=\'RA\' AND zhalternr > 0', bExists)
				
				// If bExists
				
				// Call SalMessageBeep(0)
				
				// 13.06.14 zhalternr<>0 and zhalternr IS NOT NULL -->> zhalternr > 0
				
				// Call SalTblPopulate( tblHZettel,hSqlZettel,
				
				// 'SELECT ROWID, zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
				
				// INTO :frmAbrBearb.tblHZettel.colROWID, :frmAbrBearb.tblHZettel.colsVon, :frmAbrBearb.tblHZettel.colsAn,
				
				// :frmAbrBearb.tblHZettel.colnRechNr, :frmAbrBearb.tblHZettel.collsBemerk,
				
				// :frmAbrBearb.tblHZettel.coldtDatum, :frmAbrBearb.tblHZettel.colsErl
				
				// WHERE ' || PalArztNr('z', frmAbrBearb.tblAbrHalter.colnArztNr, nArztNr2) || '  AND zhalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr
				
				// AND zart=\'RA\' AND zhalternr>0 ORDER BY zdatum DESC',TBL_FillAll )
				
				// Call SalColorSet(tblHZettel,COLOR_IndexWindow,COLOR_Yellow)
				
				// Else
				
				// Call SalColorSet(tblHZettel,COLOR_IndexWindow,COLOR_3DFace)
				
				// Call SalTblReset(tblHZettel)
				
				// Call SalWaitCursor( FALSE )
				
				// On SAM_KillFocus
				
				// Call PalSave(  )
				
				case Sys.SAM_FetchRowDone:
					this.tblAbrHalter_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_CreateComplete:
					this.tblAbrHalter_OnSAM_CreateComplete(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAbrHalter_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblAbrHalter, 0xbfffbf);
			// If not MTblSubClass( hWndItem)
			// Call SalMessageBeep( 0 )
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAbrHalter_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			// 15.07.11
			this.PalSavePosi();

			this.tblAbrPosi.ResetTable();
			this.tblAbrPosi.Populate(this.hSqlAbrPosi, this.strSelectPosi, Sys.TBL_FillAll);
			// 10.04.08 Beilage anzeigen
			if (this.tblAbrHalter.colsBC.Text != "") 
			{
				// ! Init
				// ! 15.01.03
				this.nNrF = 0;
				while (this.nNrF <= 10) 
				{
					this.saDirs[this.nNrF] = "";
					this.saFiles[this.nNrF] = "";
					this.naSize[this.nNrF] = SalNumber.Null;
					this.dtaDate[this.nNrF] = SalDateTime.Null;
					this.naAttributes[this.nNrF] = SalNumber.Null;
					this.nNrF = this.nNrF + 1;
				}
				// !
				// 13.07.15 E-Mail Daerr 06.07.15
				// Set strDir = '\\\\TVNARCHIVSERVER\\BRE\\BRE'
				this.strDir = "\\\\archiv01\\noviplan.net.doc\\PrintMachineBeilagen";
				// \\archivserver\noviplan.net.doc\PrintMachineBeilagen\
				this.nCountF = Vis.DosEnumFileInfo(this.strDir + "\\" + this.tblAbrHalter.colsBC.Text + "*.PDF", Sys.FA_Standard, this.saFiles, this.naSize, this.dtaDate, this.naAttributes);
				// Call SalMessageBox( SalNumberToStrX( nCountF, 0 ) || ' in Ordner .' || strDir || '\\' || frmAbrBearb.tblAbrHalter.colsBC || '*.PDF. gefunden.', 'Suche Dateien', MB_Ok )
				this.nNrF = 0;
				while (this.nNrF <= this.nCountF - 1) 
				{
					// 25.01.10OTF373
					// If bfrmPDFAnzeige
					// If SalDestroyWindow(frmPDFAnzeige)
					// Call SalCreateWindow(frmPDFAnzeige, hWndForm, strDir || '\\' || saFiles[nNrF])
					// Call SalMessageBox( '.' || strDir || '\\' || saFiles[nNrF] || '.', 'open', MB_Ok|MB_IconAsterisk )
					Ext.ShellExecuteA(SalWindowHandle.Null, "open", this.strDir + "\\" + this.saFiles[this.nNrF], "", "", 1);

					this.nNrF = this.nCountF;
				}

			}
			// 05.05.14 F1986
			Int.SqlImmedSel(@"SELECT ANR2 INTO :frmAbrBearb.nArztNr2
FROM A WHERE AARZTNR = :frmAbrBearb.tblAbrHalter.colnArztNr");
			// 30.09.21 F4315
			if (this.tblAbrHalter.colnArztNr.Number != 0) 
			{
				// 09.09.13 Ä969 zarztnr = :frmAbrBearb.tblAbrHalter.colnArztNr -> ' || PalArztNr('z', frmAbrBearb.tblAbrHalter.colnArztNr, nArztNr2) || '
				// 13.06.14 zhalternr<>0 and zhalternr IS NOT NULL -->> zhalternr > 0
				Int.SqlIstDa("FROM Z WHERE " + Int.PalArztNr("z", this.tblAbrHalter.colnArztNr.Number, this.nArztNr2) + @" AND zhalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr
AND zart='RA' AND zdeaktiv IS NULL AND zhalternr > 0", ref Var.bExists);
			}
			else
			{
				Var.bExists = false;
			}

			if (Var.bExists) 
			{
				Sal.MessageBeep(0);
				// 13.06.14 zhalternr<>0 and zhalternr IS NOT NULL -->> zhalternr > 0
				this.tblHZettel.Populate(this.hSqlZettel, @"SELECT ROWID, zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
INTO :frmAbrBearb.tblHZettel.colROWID, :frmAbrBearb.tblHZettel.colsVon, :frmAbrBearb.tblHZettel.colsAn,
:frmAbrBearb.tblHZettel.colnRechNr, :frmAbrBearb.tblHZettel.collsBemerk,
:frmAbrBearb.tblHZettel.coldtDatum, :frmAbrBearb.tblHZettel.colsErl
WHERE " + Int.PalArztNr("z", this.tblAbrHalter.colnArztNr.Number, this.nArztNr2) + @"  AND zhalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr
AND zart='RA' AND zhalternr > 0 AND zdeaktiv IS NULL ORDER BY zdatum DESC", Sys.TBL_FillAll);
				this.tblHZettel.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Yellow);
			}
			else
			{
				this.tblHZettel.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				this.tblHZettel.ResetTable();
			}

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAbrHalter_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			// 15.07.11
			this.PalSavePosi();

			this.tblAbrPosi.ResetTable();
			this.tblAbrPosi.Populate(this.hSqlAbrPosi, this.strSelectPosi, Sys.TBL_FillAll);
			// 10.04.08 Beilage anzeigen
			if (this.tblAbrHalter.colsBC.Text != "") 
			{
				// ! Init
				// ! 15.01.03
				this.nNrF = 0;
				while (this.nNrF <= 10) 
				{
					this.saDirs[this.nNrF] = "";
					this.saFiles[this.nNrF] = "";
					this.naSize[this.nNrF] = SalNumber.Null;
					this.dtaDate[this.nNrF] = SalDateTime.Null;
					this.naAttributes[this.nNrF] = SalNumber.Null;
					this.nNrF = this.nNrF + 1;
				}
				// !
				// 13.07.15 E-Mail Daerr 06.07.15
				// Set strDir = '\\\\TVNARCHIVSERVER\\BRE\\BRE'
				this.strDir = "\\\\archiv01\\noviplan.net.doc\\PrintMachineBeilagen";
				// \\archivserver\noviplan.net.doc\PrintMachineBeilagen\
				this.nCountF = Vis.DosEnumFileInfo(this.strDir + "\\" + this.tblAbrHalter.colsBC.Text + "*.PDF", Sys.FA_Standard, this.saFiles, this.naSize, this.dtaDate, this.naAttributes);
				// Call SalMessageBox( SalNumberToStrX( nCountF, 0 ) || ' in Ordner .' || strDir || '\\' || frmAbrBearb.tblAbrHalter.colsBC || '*.PDF. gefunden.', 'Suche Dateien', MB_Ok )
				this.nNrF = 0;
				while (this.nNrF <= this.nCountF - 1) 
				{
					// 25.01.10OTF373
					// If bfrmPDFAnzeige
					// If SalDestroyWindow(frmPDFAnzeige)
					// Call SalCreateWindow(frmPDFAnzeige, hWndForm, strDir || '\\' || saFiles[nNrF])
					// Call SalMessageBox( '.' || strDir || '\\' || saFiles[nNrF] || '.', 'open', MB_Ok|MB_IconAsterisk )
					Ext.ShellExecuteA(SalWindowHandle.Null, "open", this.strDir + "\\" + this.saFiles[this.nNrF], "", "", 1);

					this.nNrF = this.nCountF;
				}

			}
			// 05.05.14 F1986
			Int.SqlImmedSel(@"SELECT ANR2 INTO :frmAbrBearb.nArztNr2
FROM A WHERE AARZTNR = :frmAbrBearb.tblAbrHalter.colnArztNr");
			// 30.09.21 F4315
			if (this.tblAbrHalter.colnHalterNr.Number != 0) 
			{
				// 09.09.13 Ä969 zarztnr = :frmAbrBearb.tblAbrHalter.colnArztNr -> ' || PalArztNr('z', frmAbrBearb.tblAbrHalter.colnArztNr, nArztNr2) || '
				// 13.06.14 zhalternr<>0 and zhalternr IS NOT NULL -->> zhalternr > 0
				Int.SqlIstDa("FROM Z WHERE " + Int.PalArztNr("z", this.tblAbrHalter.colnArztNr.Number, this.nArztNr2) + @" AND zhalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr
AND zart='RA' AND zhalternr > 0 AND zdeaktiv IS NULL", ref Var.bExists);
			}
			else
			{
				Var.bExists = false;
			}

			if (Var.bExists) 
			{
				Sal.MessageBeep(0);
				// 13.06.14 zhalternr<>0 and zhalternr IS NOT NULL -->> zhalternr > 0
				this.tblHZettel.Populate(this.hSqlZettel, @"SELECT ROWID, zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
INTO :frmAbrBearb.tblHZettel.colROWID, :frmAbrBearb.tblHZettel.colsVon, :frmAbrBearb.tblHZettel.colsAn,
:frmAbrBearb.tblHZettel.colnRechNr, :frmAbrBearb.tblHZettel.collsBemerk,
:frmAbrBearb.tblHZettel.coldtDatum, :frmAbrBearb.tblHZettel.colsErl
WHERE " + Int.PalArztNr("z", this.tblAbrHalter.colnArztNr.Number, this.nArztNr2) + @"  AND zhalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr
AND zart='RA' AND zhalternr > 0 AND zdeaktiv IS NULL ORDER BY zdatum DESC", Sys.TBL_FillAll);
				this.tblHZettel.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Yellow);
			}
			else
			{
				this.tblHZettel.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				this.tblHZettel.ResetTable();
			}

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAbrHalter_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;

			// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
			SalString temp1 = this.tblAbrHalter.colsOrt.Text;
			this.tblAbrHalter.colsLand.Text = Int.PalGetLand(ref temp1);
			this.tblAbrHalter.colsOrt.Text = temp1;

			// 04.04.08
			Int.SqlImmedSel(@"SELECT sum(lepdm + @ROUND(lepdm * lepmwst / 100,2)) FROM lep INTO :frmAbrBearb.tblAbrHalter.colnBrutto
WHERE lepbearbeiter = :frmAbrBearb.tblAbrHalter.colsBearbeiter AND lebearbdatum = :frmAbrBearb.tblAbrHalter.coldtBearbDatum AND lepposnr =
:frmAbrBearb.tblAbrHalter.colnPosNr AND leparztnr = :frmAbrBearb.tblAbrHalter.colnArztNr AND lephalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr");
			if (this.tblAbrHalter.colsStr.Text == "" || this.tblAbrHalter.colsOrt.Text == "" || this.tblAbrHalter.colnBrutto.Number == 0 || this.tblAbrHalter.colnBrutto.Number == Sys.NUMBER_Null || this.tblAbrHalter.colsLand.Text == "--") 
			{
				XSal.TblSetRowBackColor(this.tblAbrHalter, Sys.lParam, 0xffcfff);
				this.nAnzFehler = this.nAnzFehler + 1;
				this.dfFehler.Text = "Es wurden Rechnungen mit € 0,00 oder ohne Straße, Ort oder Land gefunden !";
				this.dfFehler.SetWindowColor(Sys.COLOR_IndexWindow, 0xffcfff);
			}
			else if (this.tblAbrHalter.colnBrutto.Number < 0) 
			{
				XSal.TblSetRowBackColor(this.tblAbrHalter, Sys.lParam, 0xffffcf);
				this.dfFehler.SetWindowColor(Sys.COLOR_IndexWindow, 0xffffcf);
			}
			else
			{
				Int.SqlIstDa(@"FROM lep
WHERE lepbearbeiter = :frmAbrBearb.tblAbrHalter.colsBearbeiter AND lebearbdatum = :frmAbrBearb.tblAbrHalter.coldtBearbDatum AND lepposnr =
:frmAbrBearb.tblAbrHalter.colnPosNr AND leparztnr = :frmAbrBearb.tblAbrHalter.colnArztNr AND lephalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr
AND lepmwst=0 AND lepreverseversion=0 AND leptext=0 AND lepdm>0", ref Var.bExists);
				if (Var.bExists) 
				{
					XSal.TblSetRowBackColor(this.tblAbrHalter, Sys.lParam, 0xcfffff);
					this.nAnzFehler = this.nAnzFehler + 1;
					this.dfFehler.Text = "Es wurden Rechnungen mit 0% MwSt. gefunden, ohne daß Informationen über den Grund vorliegen !";
					this.dfFehler.SetWindowColor(Sys.COLOR_IndexWindow, 0xcfffff);
				}
			}
			// 11.06.08
			// 16.02.16 nach unten
			// Call SqlImmedSel('SELECT ANR2 INTO :frmAbrBearb.nArztNr2
			// FROM A WHERE AARZTNR = :frmAbrBearb.tblAbrHalter.colnArztNr')
			if (this.tblAbrHalter.colsBC.Text == "") 
			{
				Int.SqlImmedSel(@"SELECT lebarcode INTO :frmAbrBearb.tblAbrHalter.colsBC
FROM le
WHERE learztnr=:frmAbrBearb.nArztNr2
AND lehalternr=:frmAbrBearb.tblAbrHalter.colnHalterNr
AND lebearbeiter=:frmAbrBearb.tblAbrHalter.colsBearbeiter
AND lebearbdatum=:frmAbrBearb.tblAbrHalter.coldtBearbDatum
AND leposnr=:frmAbrBearb.tblAbrHalter.colnPosNr");
			}
			// 27.08.18 Ä1769
			if (Vis.DosExist(Var.strPfadArchiv + Sql.Database + "-Rechnungen\\" + "A" + Int.PalStrNullen(this.tblAbrHalter.colnArztNr.Number.ToString(0), 4) + "\\" + "R" + Int.PalStrNullen(this.tblAbrHalter.colnRechNr.Number.ToString(0), 6) + "\\" + 
				this.tblAbrHalter.colsBC.Text + ".pdf")) 
			{
				this.tblAbrHalter.colsBCStatus.Text = "Spezifi angefügt";
				MT.MTbl.SetCellBackColor(this.tblAbrHalter.colsBCStatus, Sys.lParam, Sal.ColorFromRGB(0, 255, 0), MT.MTbl.MTSC_REDRAW);
			}
			else
			{
				if (Vis.DosExist("\\\\archiv01\\noviplan.net.doc\\PrintMachineBeilagen\\" + this.tblAbrHalter.colsBC.Text + "*.pdf")) 
				{
					this.tblAbrHalter.colsBCStatus.Text = "Spezifi noch nicht angefügt";
					MT.MTbl.SetCellBackColor(this.tblAbrHalter.colsBCStatus, Sys.lParam, Sal.ColorFromRGB(255, 255, 0), MT.MTbl.MTSC_REDRAW);
				}
				else
				{
					this.tblAbrHalter.colsBCStatus.Text = "Spezifi fehlt";
					MT.MTbl.SetCellBackColor(this.tblAbrHalter.colsBCStatus, Sys.lParam, Sal.ColorFromRGB(255, 0, 0), MT.MTbl.MTSC_REDRAW);
				}
			}
			// 12.09.13
			// AND zart=\'RA\' AND zhalternr<>0 and zhalternr IS NOT NULL
			// 13.06.14 zhalternr<>0 and zhalternr IS NOT NULL -->> zhalternr > 0
			Int.SqlIstDa("FROM z WHERE " + Int.PalArztNr("z", this.tblAbrHalter.colnArztNr.Number, this.nArztNr2) + @" AND zhalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr AND zart='RA'
AND zhalternr>0 AND zdeaktiv IS NULL", ref Var.bExists);
			if (Var.bExists) 
			{
				// Call VisTblSetRowColor( tblAbrHalter, lParam, COLOR_Chartreuse )
				MT.MTbl.SetRowBackColor(this.tblAbrHalter, Sys.lParam, Sys.COLOR_Yellow, MT.MTbl.MTSC_REDRAW);
			}
			// 26.11.18 Ä1805 + lebezabzug
			// 23.09.22 Ä2042 + , hpmemail, hepostaenddat
			if (this.tblAbrHalter.colnHalterNr.Number != 0 && this.tblAbrHalter.colnHalterNr.Number != Sys.NUMBER_Null) 
			{
				Int.SqlImmedSel(@"SELECT hbezabzug, hpmemail, hepostaenddat INTO :frmAbrBearb.nBEZRabatt, :frmAbrBearb.tblAbrHalter.colsePostMail, :frmAbrBearb.tblAbrHalter.coldtePostMailDat
FROM h
WHERE harztnr = :frmAbrBearb.tblAbrHalter.colnArztNr AND hhalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr AND hdeaktiv IS NULL");
			}

			this.tblAbrHalter.colnBEZAbzug.Number = this.nBEZRabatt;
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAbrHalter_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			#endregion
		}
		
		/// <summary>
		/// dfNeueHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNeueHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfNeueHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNeueHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// ----------------------------------------------UPDATEN-------------------------------------------------------------------------------
			if (!(this.dfNeueHalterNr.IsEmpty())) 
			{
				if (this.tblAbrHalter.AnyRows(Sys.ROW_Selected, 0)) 
				{
					// kein verändern/Löschen nach Rechnungsdruck		11.05.06 lt. H.Sasse nach Gespr. mit H.Plate rausnehmen	30.08.11 Ä606 wieder aktiviert
					Int.SqlImmedSel(@"SELECT lerechnr INTO :frmAbrBearb.nPRechNr FROM le
WHERE learztnr=:frmAbrBearb.tblAbrHalter.colnArztNr
AND lehalternr=:frmAbrBearb.tblAbrHalter.colnHalterNr
AND lebearbeiter=:frmAbrBearb.tblAbrHalter.colsBearbeiter
AND lebearbdatum=:frmAbrBearb.tblAbrHalter.coldtBearbDatum
AND leposnr=:frmAbrBearb.tblAbrHalter.colnPosNr");
					if (this.nPRechNr != 0 && this.nPRechNr != SalNumber.Null) 
					{
						Sal.MessageBox("Änderung / Löschung nicht erlaubt, da bereits abgerechnet (R " + this.nPRechNr.ToString(0) + ")", "Fehler", (Sys.MB_Ok | Sys.MB_IconStop));
					}
					else
					{
						Int.SqlImmedSel(@"SELECT ANR2 INTO :frmAbrBearb.nArztNr2
FROM A WHERE AARZTNR = :frmAbrBearb.tblAbrHalter.colnArztNr");
						Int.SqlImmedX(@"
UPDATE LEP SET 	LEPHALTERNR = :frmAbrBearb.dfNeueHalterNr
WHERE leparztnr=:frmAbrBearb.tblAbrHalter.colnArztNr
AND lephalternr=:frmAbrBearb.tblAbrHalter.colnHalterNr
AND lepbearbeiter=:frmAbrBearb.tblAbrHalter.colsBearbeiter
AND lebearbdatum=:frmAbrBearb.tblAbrHalter.coldtBearbDatum
AND lepposnr=:frmAbrBearb.tblAbrHalter.colnPosNr");
						SalWindowHandle temp1 = SalWindowHandle.Null;
						this.tblAbrHalter.QueryFocusCell(ref Var.nRow, ref temp1);
						// 27.11.14 +
						// leti = :frmMain.strTHTi,
						// levn = :frmMain.strTHVN,
						// lenn = :frmMain.strTHNN,
						// lestr = :frmMain.strTHStr,
						// leort = :frmMain.strTHOrt,
						// leland = :frmMain.strTHLand
						Int.SqlImmedX(@"
UPDATE LE SET LEHALTERNR = :frmAbrBearb.dfNeueHalterNr
WHERE learztnr=:frmAbrBearb.tblAbrHalter.colnArztNr
AND lehalternr=:frmAbrBearb.tblAbrHalter.colnHalterNr
AND lebearbeiter=:frmAbrBearb.tblAbrHalter.colsBearbeiter
AND lebearbdatum=:frmAbrBearb.tblAbrHalter.coldtBearbDatum
AND leposnr=:frmAbrBearb.tblAbrHalter.colnPosNr");
						this.strKuerzel = App.frmMain.strUser.Left(2);
						// 07.03.03 Halternr 5-st. statt 4-st.
						// 17.03.03 dfNeuerHalter statt unter alter Nr (colnHalterNr)
						this.mlExpress = @"***** automatischer Eintrag *****
Halternr von  " + Int.PalStrNum(this.tblAbrHalter.colnArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.tblAbrHalter.colnHalterNr.Number, 5, 0) + " alte Rg.Nr. " + Int.PalStrNum(this.dfAlteRechNr.Number, 6, 0) + @"
in " + Int.PalStrNum(this.tblAbrHalter.colnArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfNeueHalterNr.Number, 5, 0) + @"
bei Programm <Abrechnung bearbeiten> geändert.";
						Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
 VALUES (:strBNZei, '*', :frmAbrBearb.tblAbrHalter.colnArztNr, :frmAbrBearb.dfNeueHalterNr, 0,
:frmAbrBearb.mlExpress , SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
						if (this.nArztNr2 != 0) 
						{
							Int.SqlImmedX(@"
UPDATE LEP SET 	LEPHALTERNR = :frmAbrBearb.dfNeueHalterNr
WHERE leparztnr=:frmAbrBearb.nArztNr2
AND lephalternr=:frmAbrBearb.tblAbrHalter.colnHalterNr
AND lepbearbeiter=:frmAbrBearb.tblAbrHalter.colsBearbeiter
AND lebearbdatum=:frmAbrBearb.tblAbrHalter.coldtBearbDatum
AND lepposnr=:frmAbrBearb.tblAbrHalter.colnPosNr");
							Int.SqlImmedX(@"
UPDATE LE SET LEHALTERNR = :frmAbrBearb.dfNeueHalterNr
WHERE learztnr=:frmAbrBearb.nArztNr2
AND lehalternr=:frmAbrBearb.tblAbrHalter.colnHalterNr
AND lebearbeiter=:frmAbrBearb.tblAbrHalter.colsBearbeiter
AND lebearbdatum=:frmAbrBearb.tblAbrHalter.coldtBearbDatum
AND leposnr=:frmAbrBearb.tblAbrHalter.colnPosNr");
							// Set mlExpress = '***** automatischer Eintrag *****
							// Halternr von  ' ||  PalStrNum(frmAbrBearb.nArztNr2,4,0) || '/' ||  PalStrNum(frmAbrBearb.tblAbrHalter.colnHalterNr,4,0) || '
							// in ' ||  PalStrNum(frmAbrBearb.nArztNr2,4,0) || '/' ||  PalStrNum(frmAbrBearb.dfNeueHalterNr,4,0) || '
							// bei Programm <Abrechnung bearbeiten> geändert.'
							// Call SqlImmed('
							// INSERT INTO Z VALUES (:frmAbrBearb.strKuerzel, \'*\', :frmAbrBearb.nArztNr2, :frmAbrBearb.dfNeueHalterNr, 0,
							// :frmAbrBearb.mlExpress , SYSDATE, NULL, \'J\', \'TN\', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)')
						}
						Int.SqlImmedX("COMMIT");
					}
					// Call SalTblReset(tblAbrHalter)
					// 04.04.08
					this.nAnzFehler = 0;
					this.dfFehler.Text = "Keine fehlerhaften Rechnungen gefunden";
					this.dfFehler.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
					// 05.12.14
					this.tblAbrHalter.ResetTable();

					this.tblAbrHalter.Populate(this.hSqlAbrBearb, this.strSelect, Sys.TBL_FillAll);
					this.tblAbrHalter.SetFocusRow(Var.nRow);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfSuche WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSuche_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfSuche_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSuche_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalPopulate(this.strSelect + " AND (@soundex(lenn) = @soundex( :frmAbrBearb.dfSuche) )");
			this.cbAlle.Checked = false;
			#endregion
		}
		
		/// <summary>
		/// cbAlle WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbAlle_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbAlle_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbAlle_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalPopulate(this.strSelect);
			this.cbAlle.Checked = true;
			#endregion
		}
		
		/// <summary>
		/// dfRabatt WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRabatt_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRabatt_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRabatt_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(this.dfRabatt.IsEmpty())) 
			{
				// 09.05.17 F2909
				this.dtMaxZeiDat = new SalDateTime(1900, 1, 1);

				// kein verändern/Löschen nach Rechnungsdruck		11.05.06 lt. H.Sasse nach Gespr. mit H.Plate rausnehmen	30.08.11 Ä606 wieder aktiviert
				Int.SqlImmedSel(@"SELECT lerechnr INTO :frmAbrBearb.nPRechNr FROM le
WHERE learztnr=:frmAbrBearb.tblAbrHalter.colnArztNr
AND lehalternr=:frmAbrBearb.tblAbrHalter.colnHalterNr
AND lebearbeiter=:frmAbrBearb.tblAbrHalter.colsBearbeiter
AND lebearbdatum=:frmAbrBearb.tblAbrHalter.coldtBearbDatum
AND leposnr=:frmAbrBearb.tblAbrHalter.colnPosNr");
				if (this.nPRechNr != 0 && this.nPRechNr != SalNumber.Null) 
				{
					Sal.MessageBox("Änderung / Löschung nicht erlaubt, da bereits abgerechnet (R " + this.nPRechNr.ToString(0) + ")", "Fehler", (Sys.MB_Ok | Sys.MB_IconStop));
				}
				else
				{
					// ----------------------------------------------UPDATEN-------------------------------------------------------------------------------
					if (this.dfSRabatt.Text == "") 
					{
						Sal.MessageBox("Bitte erst Rabatt-Text eingeben !", "Achtung", Sys.MB_Ok);
					}
					else
					{
						this.nRabatt = 0;
						if (this.tblAbrPosi.AnyRows(Sys.ROW_Selected, 0)) 
						{
							this.strLA = "";
							Var.nRow = Sys.TBL_MinRow;
							while (true)
							{
								if (!(this.tblAbrPosi.FindNextRow(ref Var.nRow, Sys.ROW_Selected, 0))) 
								{
									break;
								}
								this.tblAbrPosi.SetFocusRow(Var.nRow);
								this.nRabatt = this.nRabatt + this.tblAbrPosi.colnDM.Number;
								if (((SalString)this.tblAbrPosi.colsLA.Text) > this.strLA) 
								{
									this.strLA = this.tblAbrPosi.colsLA.Text;
								}
								// 09.05.17 F2909
								if (this.tblAbrPosi.coldtZeiDat.DateTime > this.dtMaxZeiDat) 
								{
									this.dtMaxZeiDat = this.tblAbrPosi.coldtZeiDat.DateTime;
								}

								this.tblAbrPosi.SetRowFlags(Var.nRow, Sys.ROW_Selected, false);
							}
						}
						else if (this.tblAbrHalter.AnyRows(Sys.ROW_Selected, 0)) 
						{
							Int.SqlImmedSel(@"SELECT ANR2 INTO :frmAbrBearb.nArztNr2
FROM A WHERE AARZTNR = :frmAbrBearb.tblAbrHalter.colnArztNr");
							// 07.04.99 	, :frmAbrBearb.strLA
							// 09.05.17 F2909 + lepzeidat
							// 09.07.20 Ä1892 + , MAX(lepdatum)
							Int.SqlImmedSel(@" SELECT sum(lepdm), max(lepla), max(lepzeidat) , MAX(lepdatum)
INTO :frmAbrBearb.nRabatt, :frmAbrBearb.strLA, :frmAbrBearb.dtMaxZeiDat, :frmAbrBearb.dtRabatt
FROM lep
WHERE leparztnr=:frmAbrBearb.tblAbrHalter.colnArztNr
AND lepbearbeiter=:frmAbrBearb.tblAbrHalter.colsBearbeiter
AND lebearbdatum=:frmAbrBearb.tblAbrHalter.coldtBearbDatum
AND lephalternr=:frmAbrBearb.tblAbrHalter.colnHalterNr
AND lepposnr=:frmAbrBearb.tblAbrHalter.colnPosNr");
						}
						// 09.05.17 F2909
						this.dtMaxZeiDat = this.dtMaxZeiDat + 1;

						this.strRabattText = ("abzgl. " + Int.PalStrNum(this.dfRabatt.Number, 4, 1) + " % " + this.dfSRabatt.Text).Left(70);
						this.nRabatt = (this.nRabatt * this.dfRabatt.Number / 100) * -1;
						// 09.07.20 Ä1892
						// Set dtRabatt = SalDateCurrent()
						if (this.dtRabatt >= new SalDateTime(2020, 7, 1) && this.dtRabatt <= new SalDateTime(2020, 12, 31)) 
						{
							this.nMwStRabatt = 16;
						}
						else
						{
							this.nMwStRabatt = 19;
						}

						// 09.05.17 F2909 SYSDATETIME -> :frmAbrBearb.dtMaxZeiDat
						Int.SqlImmedX(@"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:frmAbrBearb.tblAbrHalter.colsBearbeiter,:frmAbrBearb.tblAbrHalter.colnArztNr,
:frmAbrBearb.tblAbrHalter.colnHalterNr, :frmAbrBearb.tblAbrHalter.colnRechNr,
:frmAbrBearb.tblAbrHalter.colnPosNr,
:frmAbrBearb.strLA,:frmAbrBearb.nMwStRabatt, :frmAbrBearb.strRabattText, :frmAbrBearb.dtRabatt ,:frmAbrBearb.nRabatt,
0,:frmAbrBearb.tblAbrHalter.coldtBearbDatum, :frmAbrBearb.dtMaxZeiDat)");
						if (this.nArztNr2 != 0) 
						{
							Sal.MessageBox("Für Arzt " + Int.PalStrNum(this.nArztNr2, 4, 0) + @" bitte
Rabatt extra eingeben.", "Achtung", (Sys.MB_Ok | Sys.MB_IconHand));
							// XXXXX
							// Call SqlImmedSel(' SELECT sum(lepdm)
							// INTO :frmAbrBearb.nRabatt
							// FROM lep
							// WHERE leparztnr=:frmAbrBearb.nArztNr2
							// AND lepbearbeiter=:frmAbrBearb.tblAbrHalter.colsBearbeiter
							// AND lebearbdatum=:frmAbrBearb.tblAbrHalter.coldtBearbDatum
							// AND lephalternr=:frmAbrBearb.tblAbrHalter.colnHalterNr
							// AND lepposnr=:frmAbrBearb.tblAbrHalter.colnPosNr')
							// Set nRabatt = (nRabatt * dfRabatt / 100) * -1
							// Call SqlImmedX('INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
							// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
							// LEBEARBDATUM, LEPZEIDAT)
							// VALUES (:frmAbrBearb.tblAbrHalter.colsBearbeiter,:frmAbrBearb.nArztNr2,
							// :frmAbrBearb.tblAbrHalter.colnHalterNr, :frmAbrBearb.tblAbrHalter.colnRechNr,
							// :frmAbrBearb.tblAbrHalter.colnPosNr,
							// :strA,:nMwStVoll,:frmAbrBearb.strRabattText, :frmAbrBearb.dtRabatt ,:frmAbrBearb.nRabatt,
							// 0,:frmAbrBearb.tblAbrHalter.coldtBearbDatum, SYSDATETIME )')
						}
						Int.SqlImmedX("COMMIT");
						this.tblAbrPosi.ResetTable();
						this.tblAbrPosi.Populate(this.hSqlAbrPosi, this.strSelectPosi, Sys.TBL_FillAll);
						Sal.MessageBox("Es wurde eine Position " + this.strRabattText + " mit €" + Int.PalStrNum(this.nRabatt, 8, 2) + " hinzugefügt.", "Ok", (Sys.MB_Ok | Sys.MB_IconAsterisk));
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfBruttoDM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBruttoDM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfBruttoDM_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBruttoDM_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// kein verändern/Löschen nach Rechnungsdruck		11.05.06 lt. H.Sasse nach Gespr. mit H.Plate rausnehmen	30.08.11 Ä606 wieder aktiviert
			Int.SqlImmedSel(@"SELECT lerechnr INTO :frmAbrBearb.nPRechNr FROM le
WHERE learztnr=:frmAbrBearb.tblAbrHalter.colnArztNr
AND lehalternr=:frmAbrBearb.tblAbrHalter.colnHalterNr
AND lebearbeiter=:frmAbrBearb.tblAbrHalter.colsBearbeiter
AND lebearbdatum=:frmAbrBearb.tblAbrHalter.coldtBearbDatum
AND leposnr=:frmAbrBearb.tblAbrHalter.colnPosNr");
			if (this.nPRechNr != 0 && this.nPRechNr != SalNumber.Null) 
			{
				Sal.MessageBox("Änderung / Löschung nicht erlaubt, da bereits abgerechnet (R " + this.nPRechNr.ToString(0) + ")", "Fehler", (Sys.MB_Ok | Sys.MB_IconStop));
			}
			else
			{
				// ----------------------------------------------UPDATEN-------------------------------------------------------------------------------
				if (!(this.dfBruttoDM.IsEmpty())) 
				{
					if (this.tblAbrHalter.AnyRows(Sys.ROW_Selected, 0)) 
					{
						this.strRabattText = "abzgl. Rabatt";
						Int.SqlImmedSel(@"SELECT ANR2 INTO :frmAbrBearb.nArztNr2
FROM A WHERE AARZTNR = :frmAbrBearb.tblAbrHalter.colnArztNr");
						if (this.nArztNr2 == SalNumber.Null || this.nArztNr2 == 0) 
						{
							this.nArztNr2 = this.tblAbrHalter.colnArztNr.Number;
						}
						// 09.07.20 Ä1892 + , MAX(lepdatum)
						Int.SqlImmedSel(@" SELECT sum(lepdm+@round(lepdm*lepmwst/100,2)), max(lepla), MAX(lepdatum)
INTO :frmAbrBearb.nRabatt, :frmAbrBearb.strLA, :frmAbrBearb.dtRabatt
FROM lep
WHERE leparztnr IN (:frmAbrBearb.tblAbrHalter.colnArztNr,:frmAbrBearb.nArztNr2)
AND lepbearbeiter=:frmAbrBearb.tblAbrHalter.colsBearbeiter
AND lebearbdatum=:frmAbrBearb.tblAbrHalter.coldtBearbDatum
AND lephalternr=:frmAbrBearb.tblAbrHalter.colnHalterNr
AND lepposnr=:frmAbrBearb.tblAbrHalter.colnPosNr");
						if (this.strLA != "L" && this.strLA != "A") 
						{
							this.strLA = "L";
						}
						this.nRabatt = this.dfBruttoDM.Number - this.nRabatt;
						this.nRabatt = this.nRabatt * 100 / (100 + Var.nMwStVoll);
						// 09.07.20 Ä1892
						// Set dtRabatt = SalDateCurrent()
						if (this.dtRabatt >= new SalDateTime(2020, 7, 1) && this.dtRabatt <= new SalDateTime(2020, 12, 31)) 
						{
							this.nMwStRabatt = 16;
						}
						else
						{
							this.nMwStRabatt = 19;
						}

						Int.SqlImmedX(@"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:frmAbrBearb.tblAbrHalter.colsBearbeiter,:frmAbrBearb.tblAbrHalter.colnArztNr,
:frmAbrBearb.tblAbrHalter.colnHalterNr, :frmAbrBearb.tblAbrHalter.colnRechNr,
:frmAbrBearb.tblAbrHalter.colnPosNr,
:frmAbrBearb.strLA,:frmAbrBearb.nMwStRabatt,:frmAbrBearb.strRabattText, :frmAbrBearb.dtRabatt ,:frmAbrBearb.nRabatt,
0,:frmAbrBearb.tblAbrHalter.coldtBearbDatum, SYSDATETIME)");
						Int.SqlImmedX("COMMIT");
						// 05.12.14
						this.tblAbrPosi.ResetTable();

						this.tblAbrPosi.Populate(this.hSqlAbrPosi, this.strSelectPosi, Sys.TBL_FillAll);
					}
				}
			}
			// 28.10.20
			this.dfBruttoDM.Number = Sys.NUMBER_Null;
			#endregion
		}
		
		/// <summary>
		/// tblAbrPosi WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAbrPosi_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblAbrPosi_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_RowValidate:
					this.tblAbrPosi_OnSAM_RowValidate(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblAbrPosi_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblAbrPosi_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAbrPosi_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblAbrPosi, 0xbfffbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_RowValidate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAbrPosi_OnSAM_RowValidate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// ----------------------------------------------UPDATEN-------------------------------------------------------------------------------
			this.PalSavePosi();
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAbrPosi_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 09.09.13 Ä969
			// 13.05.14 (zhalternr IS NULL OR zhalternr = 0) -> zhalternr = 0
			// 05.12.14
			this.tblAZettel.ResetTable();

			this.tblAZettel.Populate(this.hSqlAbrPosi, @"SELECT ROWID, zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
INTO :frmAbrBearb.tblAZettel.colROWID, :frmAbrBearb.tblAZettel.colsVon, :frmAbrBearb.tblAZettel.colsAn,
:frmAbrBearb.tblAZettel.colnRechNr, :frmAbrBearb.tblAZettel.collsBemerk,
:frmAbrBearb.tblAZettel.coldtDatum, :frmAbrBearb.tblAZettel.colsErl
WHERE zarztnr = :frmAbrBearb.tblAbrHalter.colnArztNr  AND zhalternr = 0 AND zdeaktiv IS NULL
AND zart='RA' ORDER BY zdatum DESC", Sys.TBL_FillAll);
			// 30.09.21 F4315
			if (this.tblAbrHalter.colnHalterNr.Number != 0) 
			{
				Int.SqlIstDa(@"FROM Z WHERE zarztnr = :frmAbrBearb.tblAbrHalter.colnArztNr  AND zhalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr
AND zart='RA' AND zdeaktiv IS NULL", ref Var.bExists);
			}
			else
			{
				Var.bExists = false;
			}

			if (Var.bExists) 
			{
				Sal.MessageBeep(0);
				// 05.12.14
				this.tblHZettel.ResetTable();

				this.tblHZettel.Populate(this.hSqlAbrPosi, @"SELECT ROWID, zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
INTO :frmAbrBearb.tblHZettel.colROWID, :frmAbrBearb.tblHZettel.colsVon, :frmAbrBearb.tblHZettel.colsAn,
:frmAbrBearb.tblHZettel.colnRechNr, :frmAbrBearb.tblHZettel.collsBemerk,
:frmAbrBearb.tblHZettel.coldtDatum, :frmAbrBearb.tblHZettel.colsErl
WHERE zarztnr = :frmAbrBearb.tblAbrHalter.colnArztNr  AND zhalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr
AND zart='RA' AND zdeaktiv IS NULL ORDER BY zdatum DESC", Sys.TBL_FillAll);
				this.tblHZettel.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Yellow);
			}
			else
			{
				this.tblHZettel.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				this.tblHZettel.ResetTable();
			}

			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAbrPosi_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 12.12.14
			if (this.tblAbrPosi.colnText.Number == Sys.NUMBER_Null) 
			{
				this.tblAbrPosi.colnText.Number = 0;
			}
			// 12.10.20 Ä1903 +lpformat - -> 1
			if (this.tblAbrPosi.colnFormat.Number == Sys.NUMBER_Null) 
			{
				this.tblAbrPosi.colnFormat.Number = 0;
			}
			if (this.tblAbrPosi.colnFormat.Number == 1) 
			{
				MT.MTbl.SetRowFont(this.tblAbrPosi, Sys.lParam, MT.MTbl.MTBL_FONT_UNDEF_NAME, MT.MTbl.MTBL_FONT_UNDEF_SIZE, Sys.FONT_EnhBold, MT.MTbl.MTSF_REDRAW);
			}

			if (this.tblAbrPosi.colnMwSt.Number == 0 && this.tblAbrPosi.colnReverseVersion.Number == 0 && this.tblAbrPosi.colnText.Number == 0 && this.tblAbrPosi.colnDM.Number > 0) 
			{
				XSal.TblSetRowBackColor(this.tblAbrPosi, Sys.lParam, 0xcfffff);
			}
			// Else ! 05.12.14
			// Call XSalTblSetRowBackColor( tblAbrPosi, lParam, 0xFFFFFF )
			if (this.tblAbrPosi.colnReverseVersion.Number == 0) 
			{
				this.tblAbrPosi.colnReverseVersion.Number = Sys.NUMBER_Null;
			}
			#endregion
		}
		
		/// <summary>
		/// dfLA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfLA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_SetFocus:
					this.dfLA_OnSAM_SetFocus(sender, e);
					break;
				
				case Sys.SAM_KillFocus:
					this.dfLA_OnSAM_KillFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_SetFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfLA_OnSAM_SetFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfLA.Text = Var.strL;
			this.dfMwSt.Number = Var.nMwStVoll;
			#endregion
		}
		
		/// <summary>
		/// SAM_KillFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfLA_OnSAM_KillFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfLA.Text != "L" && this.dfLA.Text != "A" && this.dfLA.Text != "T") 
			{
				Sal.MessageBox(@"Nur L, A und T
ist erlaubt.", "ungültig", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.dfLA.Text = "L";
				this.dfLA.SetFocus();
			}
			#endregion
		}
		
		/// <summary>
		/// dfDatum WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDatum_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfDatum_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDatum_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfDatum.DateTime > SalDateTime.Current) 
			{
				Sal.MessageBeep(0);
				Sal.MessageBox(@"Dieses Datum
liegt in der
Zukunft !", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.dfDatum.SetFocus();
			}
			// 11.06.20 Ä1892
			if (Int.PalGetArztLand(this.tblAbrHalter.colnArztNr.Number) == "DE") 
			{
				if (this.dfDatum.DateTime >= new SalDateTime(2020, 7, 1) && this.dfDatum.DateTime <= new SalDateTime(2020, 12, 31)) 
				{
					this.dfMwSt.Number = 16;
				}
				else
				{
					this.dfMwSt.Number = 19;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfSortDatum WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSortDatum_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfSortDatum_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSortDatum_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfDatum.DateTime > SalDateTime.Current) 
			{
				Sal.MessageBeep(0);
				Sal.MessageBox(@"Dieses Datum
liegt in der
Zukunft !", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.dfDatum.SetFocus();
			}
			#endregion
		}
		
		/// <summary>
		/// dfRechText WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechText_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_KillFocus: // 10.04.08
					this.dfRechText_OnSAM_KillFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_KillFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechText_OnSAM_KillFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfRechText.IsEmpty()) 
			{
				if (this.dfLA.Text == "A") 
				{
					this.dfRechText.Text = "Abgegebene Arznei(en) siehe Anlage";
				}
				else
				{
					this.dfRechText.Text = "Erbrachte Leistung(en) siehe Anlage";
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfMwSt WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMwSt_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfMwSt_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMwSt_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(Int.PalMwStOk(this.dfMwSt.Number))) 
			{
				this.dfMwSt.Number = Var.nMwStVoll;
			}
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// kein verändern/Löschen nach Rechnungsdruck		11.05.06 lt. H.Sasse nach Gespr. mit H.Plate rausnehmen	30.08.11 Ä606 wieder aktiviert
			Int.SqlImmedSel(@"SELECT lerechnr INTO :frmAbrBearb.nPRechNr FROM le
WHERE learztnr=:frmAbrBearb.tblAbrHalter.colnArztNr
AND lehalternr=:frmAbrBearb.tblAbrHalter.colnHalterNr
AND lebearbeiter=:frmAbrBearb.tblAbrHalter.colsBearbeiter
AND lebearbdatum=:frmAbrBearb.tblAbrHalter.coldtBearbDatum
AND leposnr=:frmAbrBearb.tblAbrHalter.colnPosNr");
			if (this.nPRechNr != 0 && this.nPRechNr != SalNumber.Null) 
			{
				Sal.MessageBox("Hinzufügen nicht erlaubt, da bereits abgerechnet (R " + this.nPRechNr.ToString(0) + ")", "Fehler", (Sys.MB_Ok | Sys.MB_IconStop));
			}
			else
			{
				// 15.10.13 Ä978 + 979
				if (((bool)this.tblAbrHalter.colnReverse.Number) && this.dfDatum.DateTime >= new SalDateTime(2010, 1, 1) && this.dfLA.Text == "A" && this.dfMwSt.Number == 0) 
				{
					this.nDummy = Sal.MessageBox("Handelt es sich um eine Lieferung, und zwar in eines der Länder, die am Charge Reverse-Verfahren teilnehmen (z.B.EU, Schweiz oder USA)?", "Lieferung ?", (Sys.MB_YesNoCancel | Sys.MB_IconQuestion));
					if (this.nDummy == Sys.IDNO) 
					{
						this.dfMwSt.Number = Var.nMwStVoll;
					}
					else if (this.nDummy == Sys.IDCANCEL) 
					{
						e.Return = false;
						return;
					}
				}
				else if (this.dfMwSt.Number == 0 && !(this.tblAbrHalter.colnReverse.Number) && this.dfDM.Number > 0) 
				{
					this.nDummy = Sal.MessageBox(@"Der Kunde nimmt nicht am Charge Reverse-Verfahren teil.
Daher darf auf die MwSt nicht verzichtet werden.

Möchten Sie wirklich fortfahren ?", "Ok ?", (Sys.MB_YesNo | Sys.MB_IconQuestion));
					if (this.nDummy == Sys.IDNO) 
					{
						e.Return = false;
						return;
					}
				}
				// 04.04.12 F1268 SYSDATETIME --> :frmAbrBearb.dfSortDatum
				Int.SqlImmedX(@"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
LEPPOSNR, LEPRECHNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:frmAbrBearb.tblAbrHalter.colsBearbeiter,:frmAbrBearb.tblAbrHalter.colnArztNr,
:frmAbrBearb.tblAbrHalter.colnHalterNr,
:frmAbrBearb.tblAbrHalter.colnPosNr, :frmAbrBearb.tblAbrHalter.colnRechNr,
:frmAbrBearb.dfLA,:frmAbrBearb.dfMwSt, :frmAbrBearb.dfRechText,
:frmAbrBearb.dfDatum,:frmAbrBearb.dfDM,0,
:frmAbrBearb.tblAbrHalter.coldtBearbDatum, :frmAbrBearb.dfSortDatum)");
				Sal.MessageBeep(0);
				Sal.WaitCursor(true);
				// 05.12.14
				this.tblAbrPosi.ResetTable();

				this.tblAbrPosi.Populate(this.hSqlAbrPosi, this.strSelectPosi, Sys.TBL_FillAll);
				Sal.WaitCursor(false);
				this.dfRechText.Clear();
				this.dfDM.Clear();
			}
			#endregion
		}
		
		/// <summary>
		/// pbAkt WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAkt_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAkt_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAkt_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalPopulate(this.strSelect);
			#endregion
		}
		
		/// <summary>
		/// tblHZettel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHZettel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// On SAM_FetchRowDone
				
				// 18.09.02
				
				// If bPFarbe
				
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xBFFFFF )
				
				// Set bPFarbe = FALSE
				
				// Else
				
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xEFFFFF )
				
				// Set bPFarbe = TRUE
				
				case Sys.SAM_Create:
					this.tblHZettel_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_CreateComplete:
					this.tblHZettel_OnSAM_CreateComplete(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHZettel_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblHZettel, 0xbfffff);
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHZettel_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			#endregion
		}
		
		/// <summary>
		/// tblAZettel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAZettel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// On SAM_FetchRowDone
				
				// 18.09.02
				
				// If bPFarbe
				
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xFFBFBF )
				
				// Set bPFarbe = FALSE
				
				// Else
				
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xFFEFEF )
				
				// Set bPFarbe = TRUE
				
				case Sys.SAM_Create:
					this.tblAZettel_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_CreateComplete:
					this.tblAZettel_OnSAM_CreateComplete(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAZettel_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblAZettel, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAZettel_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblAbrHalter
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblAbrHalterTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmAbrBearb _frmAbrBearb = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblAbrHalterTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmAbrBearb frmAbrBearb
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmAbrBearb == null) 
					{
						_frmAbrBearb = (frmAbrBearb)this.FindForm();
					}
					return _frmAbrBearb;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblAbrHalterTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblAbrHalterTableWindow)SalWindow.FromHandle(handle, typeof(tblAbrHalterTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colVersicherung WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colVersicherung_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colVersicherung_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colVersicherung_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				Int.SqlImmedSel("SELECT hvevsnr INTO :frmAbrBearb.tblAbrHalter.colVSNr FROM h WHERE harztnr = :frmAbrBearb.tblAbrHalter.colnArztNr AND hhalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr");
				#endregion
			}
			
			/// <summary>
			/// colsePostMail WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colsePostMail_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colsePostMail_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colsePostMail_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				// 23.09.22 Ä2042 + , hpmemail, hepostaenddat
				if (this.colnHalterNr.Number != 0 && this.colnHalterNr.Number != Sys.NUMBER_Null) 
				{
					this.coldtePostMailDat.DateTime = SalDateTime.Current;
					Int.PalLogTyp(Int.PalStrNum0(this.colnArztNr.Number, 4, 0) + "/H" + Int.PalStrNum0(this.colnHalterNr.Number, 5, 0) + ": bei Moveta geändert: " + this.colsePostMail.Text, 1);

					Int.PalGetRecordInArray("HALTER", "WHERE harztnr = :frmAbrBearb.tblAbrHalter.colnArztNr AND hhalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr", "", Var.strLLFeld);
					Int.SqlImmedX(@"UPDATE h
SET hpmemail = :frmAbrBearb.tblAbrHalter.colsePostMail,
hepostaenddat = SYSDATETIME
WHERE harztnr = :frmAbrBearb.tblAbrHalter.colnArztNr AND hhalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr");
					Int.PalGetRecordInArray("HALTER", "WHERE harztnr = :frmAbrBearb.tblAbrHalter.colnArztNr AND hhalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr", "2", Var.strLLFeld);
					Var.lsLog = Int.PalCompareRecordsInArray();
					this.frmAbrBearb.strGrund = "";
					// Set strHerkunft = ''
					if (Var.lsLog != "") 
					{
						while (this.frmAbrBearb.strGrund == "") 
						{

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalString temp1 = this.frmAbrBearb.strGrund;
							dlgText.ModalDialog(this, "Was ist der Grund für die Halterstamm-Änderung ? :", "frmHalter", 100, ref temp1);
							this.frmAbrBearb.strGrund = temp1;

						}
						this.frmAbrBearb.mlAdresse = "***** Halter geändert wg.: " + this.frmAbrBearb.strGrund + @"

" + Var.lsLog;

						Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmAbrBearb.tblAbrHalter.colnArztNr, :frmAbrBearb.tblAbrHalter.colnHalterNr, 0,
:frmAbrBearb.mlAdresse , SYSDATE, NULL, 'J', 'HS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,1, SYSDATETIME)");
					}
				}
				else
				{
					Sal.MessageBox("Für eine leere Halter-Nr. kann keine Änderung erfolgen.", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblAbrPosi
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblAbrPosiTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmAbrBearb _frmAbrBearb = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblAbrPosiTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmAbrBearb frmAbrBearb
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmAbrBearb == null) 
					{
						_frmAbrBearb = (frmAbrBearb)this.FindForm();
					}
					return _frmAbrBearb;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblAbrPosiTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblAbrPosiTableWindow)SalWindow.FromHandle(handle, typeof(tblAbrPosiTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// coldtDatum WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void coldtDatum_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.coldtDatum_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void coldtDatum_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				// 29.06.20 Ä1892
				if (Int.PalGetArztLand(this.frmAbrBearb.tblAbrHalter.colnArztNr.Number) == "DE") 
				{
					if (this.coldtDatum.DateTime >= new SalDateTime(2020, 7, 1) && this.coldtDatum.DateTime <= new SalDateTime(2020, 12, 31)) 
					{
						if (this.colnMwSt.Number == 19) 
						{
							this.colnMwSt.Number = 16;
						}
					}
					else
					{
						if (this.colnMwSt.Number == 16) 
						{
							this.colnMwSt.Number = 19;
						}
					}
				}
				#endregion
			}
			
			/// <summary>
			/// colnMwSt WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnMwSt_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colnMwSt_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnMwSt_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(Int.PalMwStOk(this.colnMwSt.Number))) 
				{
					this.colnMwSt.Number = Var.nMwStVoll;
				}
				#endregion
			}
			
			/// <summary>
			/// colnReverseVersion WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnReverseVersion_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colnReverseVersion_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnReverseVersion_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (this.colsLA.Text == "L" && this.colnReverseVersion.Number > 1 && this.colnReverseVersion.Number < 4) 
				{
					Sal.MessageBox("Für Leistungen bitte nur 0 (Standard) 1,4 oder 5 (ohne MwSt.) verwenden.", "Fehleingabe", Sys.MB_Ok);
					Sal.TblSetRowFlags(this.colnReverseVersion, Sys.lParam, Sys.ROW_Edited, false);
					e.Return = false;
					return;
				}
				else if (this.colsLA.Text == "A" && (this.colnReverseVersion.Number == 1 || this.colnReverseVersion.Number == 4)) 
				{
					Sal.MessageBox(@"Für Abgabearzneien bitte nur

0 (Standard),
2 (Gelangensbestätigung oder Versandpapiere liegen vor),
3 (Ausfuhrpapiere liegen vor) oder
5 (sonstiger Grund) verwenden.", "Fehleingabe", Sys.MB_Ok);
					Sal.TblSetRowFlags(this.colnReverseVersion, Sys.lParam, Sys.ROW_Edited, false);
					e.Return = false;
					return;
				}
				else if (this.colnReverseVersion.Number == 0) 
				{
					this.colnMwSt.Number = Int.PalCheckAuslMwStTA(this.frmAbrBearb.tblAbrHalter.colnArztNr.Number);
				}
				else
				{
					this.colnMwSt.Number = 0;
				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblHZettel
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblHZettelTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmAbrBearb _frmAbrBearb = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblHZettelTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmAbrBearb frmAbrBearb
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmAbrBearb == null) 
					{
						_frmAbrBearb = (frmAbrBearb)this.FindForm();
					}
					return _frmAbrBearb;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblHZettelTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblHZettelTableWindow)SalWindow.FromHandle(handle, typeof(tblHZettelTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblAZettel
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblAZettelTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmAbrBearb _frmAbrBearb = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblAZettelTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmAbrBearb frmAbrBearb
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmAbrBearb == null) 
					{
						_frmAbrBearb = (frmAbrBearb)this.FindForm();
					}
					return _frmAbrBearb;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblAZettelTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblAZettelTableWindow)SalWindow.FromHandle(handle, typeof(tblAZettelTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalPopulateLocals
			{
				public SalString strPSelect = "";
			}
		}
		#endregion
	}
}
