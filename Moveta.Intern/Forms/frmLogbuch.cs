// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmLogbuch : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlLB = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalString strText = "";
		public MTblPrintParams PrintParams = new MTblPrintParams();
		public SalString strDevice = "";
		public SalNumber nResult = 0;
		public SalNumber nAnz = 0;
		public SalNumber nOff = 0;
		public SalArray<SalString> strPrinters = new SalArray<SalString>();
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmLogbuch()
		{
			// Assign global reference.
			App.frmLogbuch = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmLogbuch CreateWindow(Control owner)
		{
			frmLogbuch frm = new frmLogbuch();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmLogbuch FromHandle(SalWindowHandle handle)
		{
			return ((frmLogbuch)SalWindow.FromHandle(handle, typeof(frmLogbuch)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmLogbuch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmLogbuch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// On SAM_Activate
				
				// Call SalSetFocus(dfArztNr)
				
				case Sys.SAM_Create:
					this.frmLogbuch_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmLogbuch_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmLogbuch_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlConnection(ref this.hSqlLB);
			this.dfDatVon.Value = new SalDateTime(1900, 1, 1);
			this.dfDatBis.Value = new SalDateTime(2099, 12, 31);
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmLogbuch_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlLB.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.strSelect = @"SELECT logname, logdate, logtext FROM log
INTO :frmLogbuch.tblLogbuch.colName, :frmLogbuch.tblLogbuch.colDatum, :frmLogbuch.tblLogbuch.colText
WHERE logdate BETWEEN :frmLogbuch.dfDatVon.Value AND :frmLogbuch.dfDatBis.Value ";
			// If SalIsNull(dfArztNr)
			// Else If Not SalIsNull(dfHalterNr)
			// Set dfRechNr = NUMBER_Null
			// Set strSelect = 'SELECT logname, logdate, logtext FROM log
			// INTO :frmLogbuch.tblLogbuch.colName, :frmLogbuch.tblLogbuch.colDatum, :frmLogbuch.tblLogbuch.colText
			// WHERE (logtext LIKE \'%' || PalStrNum(dfArztNr, 4, 0) || '/' || PalStrNum(dfHalterNr, 5,0) || '\')
			// OR (logtext LIKE \'%' || PalStrNum(dfArztNr, 4, 0) || '/H' || PalStrNum(dfHalterNr, 5,0) || '\')'
			// Else If Not SalIsNull(dfRechNr)
			// Set strSelect = 'SELECT logname, logdate, logtext FROM log
			// INTO :frmLogbuch.tblLogbuch.colName, :frmLogbuch.tblLogbuch.colDatum, :frmLogbuch.tblLogbuch.colText
			// WHERE (logtext LIKE \'%' || PalStrNum(dfArztNr, 4, 0) || '/' || PalStrNum(dfRechNr, 6,0) || '\')
			// OR (logtext LIKE \'%' || PalStrNum(dfArztNr, 4, 0) || '/R' || PalStrNum(dfRechNr, 6,0) || '\')'
			// Else
			// Set strSelect = 'SELECT logname, logdate, logtext FROM log
			// INTO :frmLogbuch.tblLogbuch.colName, :frmLogbuch.tblLogbuch.colDatum, :frmLogbuch.tblLogbuch.colText
			// WHERE logtext LIKE \'%' || PalStrNum(dfArztNr, 4, 0) || '\''
			// 08.09.99
			if (!(this.dfText.IsEmpty())) 
			{
				this.strText = "%" + this.dfText.Text + "%";
				this.strSelect = this.strSelect + "AND logtext like :frmLogbuch.strText";
			}
			this.strSelect = this.strSelect + @"
ORDER BY logdate DESC";
			Sal.WaitCursor(true);
			this.tblLogbuch.Populate(this.hSqlLB, this.strSelect, Sys.TBL_FillNormal);
			Sal.WaitCursor(false);
			this.SetStatusBarText("");
			#endregion
		}
		
		/// <summary>
		/// tblLogbuch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblLogbuch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblLogbuch_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblLogbuch_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblLogbuch, 0xffffd8);
			#endregion
		}
		
		/// <summary>
		/// pbDrucken WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.pbDrucken_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Click:
					this.pbDrucken_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nAnz = MT.MTbl.PrintGetPrinterNames(this.strPrinters);
			this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			this.nOff = -1;
			this.nResult = 0;
			while (this.nResult < this.nAnz) 
			{
				this.lbPrinters.AddListItem(this.strPrinters[this.nResult]);
				if (this.strPrinters[this.nResult] == this.strDevice) 
				{
					this.nOff = this.nResult;
				}
				this.nResult = this.nResult + 1;
			}
			if (this.nOff >= 0) 
			{
				this.lbPrinters.SetListSelectedIndex(this.nOff);
			}

			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Set nErr = 1
			// Set strReportName = 'ABSCHVOR'
			// Set hWndReport = SalReportTableView(tblAbschVor,hWndNULL,'ABSCHVOR.QRP',nErr)
			this.PrintParams.Init();
			this.PrintParams.DocName = "Abschlagsvorschlag";
			this.PrintParams.Orientation = MT.MTbl.MTP_OR_LANDSCAPE;
			this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			this.nResult = this.lbPrinters.GetListSelectedIndex();
			if (this.nResult == Sys.LB_Err) 
			{
				this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			}
			else
			{
				this.strDevice = this.lbPrinters.GetListItemText(this.nResult);
			}
			this.PrintParams.PrinterName = this.strDevice;
			// 07.11.13 F1760
			this.PrintParams.Language = MT.MTbl.MTP_LNG_GERMAN;

			MT.MTbl.Print(this.tblLogbuch, this.PrintParams);

			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblLogbuch
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblLogbuchTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmLogbuch _frmLogbuch = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblLogbuchTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmLogbuch frmLogbuch
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmLogbuch == null) 
					{
						_frmLogbuch = (frmLogbuch)this.FindForm();
					}
					return _frmLogbuch;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblLogbuchTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblLogbuchTableWindow)SalWindow.FromHandle(handle, typeof(tblLogbuchTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
