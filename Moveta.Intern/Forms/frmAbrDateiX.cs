// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;
using Jam.Shell;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmAbrDateiX : SalFormWindow
	{
		#region Window Variables
		public SalString strOrdner = "";
		public SalString strSelectionPath = "";
		public SalFileHandle hFileZ = SalFileHandle.Null;
		public SalFileHandle hFileQ = SalFileHandle.Null;
		public SalBoolean bErsteDatei = false;
		public SalString strRead = "";
		public SalNumber nCount = 0;
		public SalNumber nFehler = 0;
		public SalNumber nAktuell = 0;
		public SalString strDateiQ = "";
		public SalString strDateiZ = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmAbrDateiX()
		{
			// Assign global reference.
			App.frmAbrDateiX = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmAbrDateiX CreateWindow(Control owner)
		{
			frmAbrDateiX frm = new frmAbrDateiX();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmAbrDateiX FromHandle(SalWindowHandle handle)
		{
			return ((frmAbrDateiX)SalWindow.FromHandle(handle, typeof(frmAbrDateiX)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmAbrDateiX WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAbrDateiX_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmAbrDateiX_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAbrDateiX_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.strOrdner = "K:";
            //FC:FINAL: axTree 
            this.axTree.AutomaticRefresh = true;
            this.axTree.Enabled = true;
            this.axTree.RootedAt = Jam.Shell.ShellFolder.Desktop;
			//this.axTree.SpecialFolder = Jam.Shell.ShellFolder.SendTo;
			this.axTree.ShowRecycleBin = true;;
            this.axTree.HotTracking = true;
            // 07.06.10 OTÄ366
            this.axTree.SelectedPath = this.strOrdner;
            #endregion
        }
		
		/// <summary>
		/// axTree WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void axTree_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.axTree_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void axTree_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			//FC:FINAL: moved to SAM_Create of form
			//this.axTree.PropSetAutomaticRefresh(true);
			//this.axTree.PropSetEnabled(true);
			//this.axTree.PropSetRootedAt(3);
			//this.axTree.PropSetSpecialFolder(9);
			//this.axTree.PropSetShowButtons(true);
			//this.axTree.PropSetShowRecycleBin(false);
			//this.axTree.PropSetHotTrack(true);
			//// 07.06.10 OTÄ366
			//this.axTree.PropSetSelectedFolder(this.strOrdner);
			//// Call axTree.PropSetSelectedFolder( 'C:' )
			#endregion
		}

		//FC:FINAL:
		private void AxTree_FolderUpdated(object sender, UpdateFolderEventArgs e)
		{
			this.strOrdner = axTree.SelectedPath;

			this.strOrdner = e.Node.FullPath;
			this.dfOrdner.Text = this.strOrdner;
			this.strSelectionPath = this.strOrdner;
			
			if(!Sal.ListFiles(lbDateien, dfOrdner, ref this.strSelectionPath, Sys.FA_Standard))
            {
				Sal.MessageBeep(0);
            }
			else
            {
				nCount = Sal.ListQueryCount(lbDateien);
				strDateiQ = Sal.ListQueryTextX(lbDateien, nAktuell);
				if(dfArztNr.Number == SalNumber.Null && Int.PalValNum(Sal.StrMidX(strDateiQ, 1,4) ) > 0)
                {
					dfArztNr.Number = Int.PalValNum(Sal.StrMidX(strDateiQ, 1, 4));
				}
			}
		}

		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.bErsteDatei = true;
			this.nCount = this.lbDateien.GetListItemsCount();
			if (this.nCount > 0) 
			{
				this.nAktuell = 0;
				this.nFehler = 0;
				this.hFileZ.Open(Const.PATH_ABR + "D" + Int.PalStrNum0(this.dfArztNr.Number, 4, 0) + "X" + Int.PalDateToStrJJJJMMTThhmmss(SalDateTime.Current) + ".ABR", (Sys.OF_Text | Sys.OF_Write));
				while (this.nAktuell < this.nCount) 
				{
					this.strDateiQ = this.lbDateien.GetListItemText(this.nAktuell);

					if (!(this.hFileQ.Open(this.strOrdner + "\\" + this.strDateiQ, Sys.OF_Read))) 
					{
						Sal.MessageBox("Datei " + this.strOrdner + "\\" + this.strDateiQ + " kann nicht gelesen werden.", "Lesefehler", (Sys.MB_Ok | Sys.MB_IconStop));
						this.nFehler = this.nFehler + 1;
					}
					else
					{
						while (this.hFileQ.GetString(ref this.strRead, 5000)) 
						{
							if (this.strRead.Left(2) == "KO" || this.strRead.Left(2) == "PO" || (this.bErsteDatei && (this.strRead.Left(2) == "HD" || this.strRead.Left(2) == "NO"))) 
							{
								this.hFileZ.PutString(this.strRead);
							}
						}
						this.hFileQ.Close();
					}
					if (this.bErsteDatei) 
					{
						this.bErsteDatei = false;
					}
					this.nAktuell = this.nAktuell + 1;
				}
				this.hFileZ.PutString("EE");
				this.hFileZ.Close();
				Sal.MessageBox("Es wurden " + (this.nCount - this.nFehler).ToString(0) + " Dateien verarbeitet.", "Verarbeitung abgeschlossen", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			}
			else
			{
				Sal.MessageBox("Es wurden keine Dateien gefunden.", "Keine Dateien vorhanden", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			}
			#endregion
		}
		#endregion
	}
}
