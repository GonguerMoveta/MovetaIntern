// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// RechnungsPositionen
	/// </summary>
	/// <param name="nArztNr"></param>
	/// <param name="nHalterNr"></param>
	/// <param name="nRechNr"></param>
	public partial class frmRechPos : SalFormWindow
	{
		#region Window Parameters
		public SalNumber nArztNr;
		public SalNumber nHalterNr;
		public SalNumber nRechNr;
		#endregion
		
		#region Window Variables
		public SalNumber nJob = 0;
		public SalSqlHandle hSqlRp = SalSqlHandle.Null;
		public SalSqlHandle hSqlRk = SalSqlHandle.Null;
		public SalSqlHandle hSqlDisk = SalSqlHandle.Null;
		public SalSqlHandle hSqlLe = SalSqlHandle.Null;
		public SalSqlHandle hSqlUpdateRP = SalSqlHandle.Null;
		public SalNumber nFetchRp = 0;
		public SalNumber nFetchLe = 0;
		public SalString strSelect = "";
		public SalBoolean bZettel = false;
		public SalNumber nSeite = 0;
		public SalNumber nZeile = 0;
		public SalNumber nRpZeile = 0;
		public SalDateTime dtRechDat = SalDateTime.Null;
		public SalDateTime dtFaellDat = SalDateTime.Null;
		public SalString strDrucker = "";
		public SalString strLogo = "";
		public SalNumber nErr = 0;
		public SalNumber nFetch = 0;
		public SalNumber nStatus = 0;
		public SalWindowHandle hWndReport = SalWindowHandle.Null;
		public SalString strReportName = "";
		public SalNumber nArztNrX = 0;
		public SalString strTAN1 = "";
		public SalString strTAN2 = "";
		public SalString strTAStr = "";
		public SalString strTAOrt = "";
		public SalNumber nHalterNrX = 0;
		public SalString strTHAnr = "";
		public SalString strTHN1 = "";
		public SalString strTHN2 = "";
		public SalString strTHStr = "";
		public SalString strTHOrt = "";
		public SalString strTHLand = "";
		public SalNumber nRechNrX = 0;
		public SalDateTime dtDatum = SalDateTime.Null;
		public SalString strLA = "";
		public SalNumber nMwSt = 0;
		public SalString strText = "";
		public SalNumber nDM = 0;
		public SalNumber nText = 0;
		public SalString strRT1 = "";
		public SalString strRT2 = "";
		public SalString strMZF = "";
		public SalNumber nBrutto = 0;
		public SalDateTime dtAktZeit = SalDateTime.Null;
		public SalDateTime dtPosZeit = SalDateTime.Null;
		public SalString strBearbDatum = "";
		public SalSqlHandle hSqlRechPos = SalSqlHandle.Null;
		public SalNumber nFetchRechPos = 0;
		public SalString strBruttoLA = "";
		public SalNumber nBruttoMwSt = 0;
		public SalNumber nBruttoDM = 0;
		public SalNumber nUeber = 0;
		public SalNumber nCount = 0;
		public SalNumber nError = 0;
		public SalNumber nFileSize = 0;
		public SalNumber nFileSize0 = 0;
		public SalNumber nDMRest = 0;
		public SalNumber nMS = 0;
		public SalString strNBTi = "";
		public SalString strNBVN = "";
		public SalString strNBNN = "";
		public SalString strNBName2 = "";
		public SalString strNBStr = "";
		public SalString strNBOrt = "";
		public SalString strNB2Ti = "";
		public SalString strNB2VN = "";
		public SalString strNB2NN = "";
		public SalString strNB2Name2 = "";
		public SalString strNB2Str = "";
		public SalString strNB2Ort = "";
		public SalNumber nNBRechNr = 0;
		public SalNumber nRechNr1 = 0;
		public SalNumber nRechNrLe = 0;
		public SalNumber nKZPraxArt = 0;
		public SalNumber nBuchLeis = 0;
		public SalNumber nBuchArzn = 0;
		public SalNumber nBuchMahn = 0;
		public SalNumber nBuchZins = 0;
		public SalString strKuerzel = "";
		public SalString lsText = "";
		public SalNumber nRestGuthaben = 0;
		public SalNumber nBuchDM = 0;
		public SalNumber nBuchDMHF = 0;
		public SalNumber nBuchDMRest = 0;
		public SalNumber nDMLeis = 0;
		public SalNumber nDMArzn = 0;
		public SalNumber nDMMahn = 0;
		public SalNumber nDMZins = 0;
		public SalNumber nProzNr = 0;
		public SalNumber nDiverse = 0;
		public SalNumber nPosNr = 0;
		public SalString strBuchText = "";
		public SalNumber nFlagsOn = 0;
		public SalDateTime dtZeiDat = SalDateTime.Null;
		public SalNumber nRkMwSt = 0;
		public SalNumber nOPFaellTg = 0;
		public SalNumber nFaellTg = 0;
		public SalDateTime dtRkFaellDat = SalDateTime.Null;
		public SalDateTime dtRkRechDat = SalDateTime.Null;
		public SalDateTime dtRkErstLeistDat = SalDateTime.Null;
		public SalDateTime dtRkVerjaehr = SalDateTime.Null;
		public SalNumber nZaLeis = 0;
		public SalNumber nZaArzn = 0;
		public SalNumber nZaMahn = 0;
		public SalNumber nZaZins = 0;
		public SalNumber nMwPorto = 0;
		public SalNumber nBruPorto = 0;
		public SalString strLLQuery = "";
		public SalDateTime dtSperrdatum = SalDateTime.Null;
		public SalNumber nDMAusbuch = 0;
		public SalNumber nTAReverse = 0;
		public SalNumber nTHReverse = 0;
		public SalString strBEZBLZ = "";
		public SalString strBEZKonto = "";
		public SalString strBEZIBAN = "";
		public SalString strBEZBIC = "";
		public SalDateTime dtBEZSignDat = SalDateTime.Null;
		public SalNumber nBruttoZahl = 0;
		public SalString lsROWIDs = "";
		public SalNumber nRP1MwSt = 0;
		public SalDateTime dtBuchDat = SalDateTime.Null;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmRechPos(SalNumber nArztNr, SalNumber nHalterNr, SalNumber nRechNr)
		{
			// Assign global reference.
			App.frmRechPos = this;
			// Window Parameters initialization.
			this.nArztNr = nArztNr;
			this.nHalterNr = nHalterNr;
			this.nRechNr = nRechNr;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmRechPos CreateWindow(Control owner, SalNumber nArztNr, SalNumber nHalterNr, SalNumber nRechNr)
		{
			frmRechPos frm = new frmRechPos(nArztNr, nHalterNr, nRechNr);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmRechPos FromHandle(SalWindowHandle handle)
		{
			return ((frmRechPos)SalWindow.FromHandle(handle, typeof(frmRechPos)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <param name="nPArzt"></param>
		/// <param name="nPHalter"></param>
		/// <param name="nPRech"></param>
		/// <param name="strPLA"></param>
		/// <returns></returns>
		public SalNumber BerechneBrutto(SalNumber nPArzt, SalNumber nPHalter, SalNumber nPRech, SalString strPLA)
		{
			#region Local Variables
			SqlLocals.BerechneBruttoLocals locals = new SqlLocals.BerechneBruttoLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.nPArzt = nPArzt;
				locals.nPHalter = nPHalter;
				locals.nPRech = nPRech;
				locals.strPLA = strPLA;

				locals.nPBrutto = 0;
				Int.SqlConnection(ref locals.hSqlBrutto);

				if (locals.strPLA == "L") 
				{
					Int.SqlHandleExec(locals.hSqlBrutto, @"SELECT rpla, rpmwst, sum(rpdm)
FROM rp
WHERE rparztnr = " + locals.nPArzt.ToString(0) + @"
AND rphalternr = " + locals.nPHalter.ToString(0) + @"
AND rprechnr = " + locals.nPRech.ToString(0) + @"
AND rpla <> 'A'
GROUP BY 1,2
INTO :frmRechPos.strBruttoLA, :frmRechPos.nBruttoMwSt, :frmRechPos.nBruttoDM", "BruttoDM errechnen bei RechKopieDruck", ref nErr);
				}
				else
				{
					Int.SqlHandleExec(locals.hSqlBrutto, @"SELECT rpla, rpmwst, sum(rpdm)
FROM rp
WHERE rparztnr = " + locals.nPArzt.ToString(0) + @"
AND rphalternr = " + locals.nPHalter.ToString(0) + @"
AND rprechnr = " + locals.nPRech.ToString(0) + @"
AND rpla = 'A'
GROUP BY 1,2
INTO :frmRechPos.strBruttoLA, :frmRechPos.nBruttoMwSt, :frmRechPos.nBruttoDM", "BruttoDM errechnen bei RechKopieDruck", ref nErr);
				}
				locals.nFetchBrutto = locals.hSqlBrutto.FetchNext();
				while (locals.nFetchBrutto != Sys.FETCH_EOF) 
				{
					locals.nPBrutto = locals.nPBrutto + nBruttoDM + (nBruttoDM * nBruttoMwSt).Round() / 100.00m;
					locals.nFetchBrutto = locals.hSqlBrutto.FetchNext();
				}
				locals.hSqlBrutto.Commit();
				locals.hSqlBrutto.Disconnect();
				if (locals.nPBrutto == SalNumber.Null) 
				{
					locals.nPBrutto = 0;
				}
				return locals.nPBrutto;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnProzMwSt"></param>
		/// <param name="pnDiverse"></param>
		/// <param name="pnRP1MwSt"></param>
		/// <returns></returns>
		public SalNumber UpdateRechPosition(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnRechNr, SalNumber pnProzMwSt, SalNumber pnDiverse, SalNumber pnRP1MwSt)
		{
			#region Local Variables
			SqlLocals.UpdateRechPositionLocals locals = new SqlLocals.UpdateRechPositionLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnRechNr = pnRechNr;
				locals.pnProzMwSt = pnProzMwSt;
				locals.pnDiverse = pnDiverse;
				locals.pnRP1MwSt = pnRP1MwSt;

				// 02.12.14 Ä1104
				locals.pnSelect = @"SELECT ROWID, rpdmzahl
FROM RP
INTO :strROWIDLocal, :nZahl
WHERE rparztnr = :pnArztNr
AND rprechnr = :pnRechNr
AND rpmwst = :pnProzMwSt";

				if (locals.phSql.PrepareAndExecute(locals.pnSelect)) 
				{
					if (locals.phSql.FetchNext(ref locals.nInd)) 
					{
						if (locals.nZahl == SalNumber.Null) 
						{
							locals.nZahl = 0;
						}
						locals.pnDiverse = locals.nZahl + locals.pnDiverse - locals.pnRP1MwSt;
						if (locals.phSql.PrepareAndExecute(@"
UPDATE RP SET
rpdmzahl = :pnDiverse
WHERE ROWID = :strROWIDLocal")) 
						{
							locals.phSql.Commit();
						}
					}
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPArzt"></param>
		/// <param name="nPHalter"></param>
		/// <param name="nPRech"></param>
		/// <param name="bPPorto"></param>
		/// <returns></returns>
		public SalNumber BucheTKMwSt(SalNumber nPArzt, SalNumber nPHalter, SalNumber nPRech, SalBoolean bPPorto)
		{
			#region Local Variables
			SqlLocals.BucheTKMwStLocals locals = new SqlLocals.BucheTKMwStLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.nPArzt = nPArzt;
				locals.nPHalter = nPHalter;
				locals.nPRech = nPRech;
				locals.bPPorto = bPPorto;

				locals.nPBrutto = 0;
				Int.SqlConnection(ref locals.hSqlBrutto);
				if (locals.bPPorto) 
				{
					this.nDiverse = this.nBruPorto;
				}
				else
				{
					this.nDiverse = 0;
				}
				this.nBuchDM = this.nBuchLeis + this.nBuchArzn;
                // 21.04.24 ###
                this.nBuchDMRest = nBuchMahn + nBuchZins;
                // 06.03.23 Ä2086
                dtBuchDat = SalDateTime.Current;
				Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
				if (dtBuchDat < Var.dtINIMinBuchDat) 
				{
					dtBuchDat = Var.dtINIMinBuchDat;
				}

				// 04.11.22 Ä2015 + tkdmmahn
				if (this.nDiverse != 0 || this.nBuchDMRest != 0) 
				{
					this.nBuchDMRest = this.nBuchDMRest * -1;
					Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkreverse, tkdmmahn)
VALUES (:frmRechPos.dfArztNr, 3, 0, :frmRechPos.strBuchText, :frmRechPos.dfHalterNr, :frmRechPos.dfRechNr, NULL, :frmRechPos.dtBuchDat, 0, :frmRechPos.nBruPorto,
0 , :frmRechPos.nMwPorto, 0, 0,0, 0,:nCheckMwSt, 0, 0,
0, :frmRechPos.nDiverse, 0, 0, :frmRechPos.nBuchDMRest)");
					this.nBuchDMRest = this.nBuchDMRest * -1;
				}

				if (rbKomplett.Checked || rbTeil.Checked) 
				{
					if (rbKomplett.Checked) 
					{
						Int.SqlHandleExec(locals.hSqlBrutto, @"SELECT rpmwst, sum(rpdm)
FROM rp
WHERE rparztnr = " + locals.nPArzt.ToString(0) + @"
AND rphalternr = " + locals.nPHalter.ToString(0) + @"
AND rprechnr = " + locals.nPRech.ToString(0) + @"
GROUP BY 1
INTO :frmRechPos.nBruttoMwSt, :frmRechPos.nBruttoDM", "BucheTKMwSt bei RechKopieDruck", ref nErr);
					}
					else if (rbTeil.Checked) 
					{
						nBuchLeis = 0;
						nBuchArzn = 0;
						nBuchMahn = 0;
						nBuchZins = 0;
						// 24.03.15 F2317
						lsROWIDs = "";

						nZeile = Sys.TBL_MinRow;
						nFlagsOn = Sys.ROW_Selected;
						while (tblRechPos.FindNextRow(ref nZeile, nFlagsOn, 0)) 
						{
							tblRechPos.SetFocusRow(nZeile);
							if (tblRechPos.colsLA.Text == "A") 
							{
								nBuchArzn = nBuchArzn + tblRechPos.colnDM.Number + ((tblRechPos.colnDM.Number * tblRechPos.colnMwSt.Number).Round() / 100);
							}
							else
							{
								nBuchLeis = nBuchLeis + tblRechPos.colnDM.Number + ((tblRechPos.colnDM.Number * tblRechPos.colnMwSt.Number).Round() / 100);
							}
							// 24.03.15 F2317
							lsROWIDs = lsROWIDs + ",\'" + tblRechPos.colsROWID.Text + "\'";
						}
						if (lsROWIDs.Left(1) == ",") 
						{
							lsROWIDs = lsROWIDs.Mid(1, 32767);
						}

						Int.SqlHandleExec(locals.hSqlBrutto, @"SELECT rpmwst, sum(rpdm)
FROM rp
WHERE rparztnr = " + locals.nPArzt.ToString(0) + @"
AND rphalternr = " + locals.nPHalter.ToString(0) + @"
AND rprechnr = " + locals.nPRech.ToString(0) + @"
AND ROWID IN (" + lsROWIDs + @")
GROUP BY 1
INTO :frmRechPos.nBruttoMwSt, :frmRechPos.nBruttoDM", "BucheTKMwSt bei RechKopieDruck", ref nErr);
					}
					locals.nFetchBrutto = locals.hSqlBrutto.FetchNext();
					while (locals.nFetchBrutto != Sys.FETCH_EOF) 
					{
						locals.nPMwSt = (nBruttoDM * nBruttoMwSt * -1).Round() / 100;
						locals.nPMwSt = locals.nPMwSt * -1;
						locals.nPBrutto = nBruttoDM + locals.nPMwSt;
						if (locals.nPBrutto != 0)  // 25.02.15
						{
							this.nBuchDM = locals.nPBrutto;
							if (locals.nPBrutto > nBuchDM) 
							{
								locals.nPBrutto = nBuchDM;
							}

							// 17.03.15 F2317 und F2318 (nRechNr -> dfRechNr)
							// Call SqlImmedX('INSERT INTO TK
							// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
							// tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
							// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkreverse)
							// VALUES (:frmRechPos.dfArztNr, 3 , 0, :frmRechPos.strBuchText, :frmRechPos.dfHalterNr, :frmRechPos.nRechNr, NULL, SYSDATE, 0, :frmRechPos.nDiverse,
							// 0 , 0, 0, 0,0, 0,' || SalNumberToStrX( nBruttoMwSt,0) || ', 0, 0,
							// :frmRechPos.nBuchDM, :frmRechPos.nDiverse, 0, :frmRechPos.nTAReverse)')
							Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkreverse)
VALUES (:frmRechPos.dfArztNr, 3, 0, :frmRechPos.strBuchText, :frmRechPos.dfHalterNr, :frmRechPos.dfRechNr, NULL, :frmRechPos.dtBuchDat, 0, 0,
0 , 0, 0, 0,0, 0," + nBruttoMwSt.ToString(0) + ", 0, 0, " + Int.PalStrNumDecPoint(locals.nPBrutto * -1, 12, 2) + ", 0, 0, 0)");
							// Call SqlImmedX('INSERT INTO TK
							// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
							// tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
							// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkreverse)
							// VALUES (:frmRechPos.dfNB2ArztNr, 0, 0, :frmRechPos.strBuchText,
							// :frmRechPos.dfNB2HalterNr, :frmRechPos.nRechNr, NULL,
							// SYSDATE, 0, :frmRechPos.nBruPorto, 0, :frmRechPos.nMwPorto,0,
							// 0,0, 0,:nCheckMwSt, 0, 0, ' || SalNumberToStrX( nPBrutto * -1,0) || ', :frmRechPos.nBruPorto, 0, :frmRechPos.nTAReverse)')
							this.nBuchDM = this.nBuchDM - locals.nPBrutto;
							this.nDiverse = 0;
							// 24.03.15 F2317
							nRP1MwSt = (locals.nPBrutto * nBruttoMwSt * 100 / (100 + nBruttoMwSt)).Round() / 100;
							UpdateRechPosition(hSqlUpdateRP, dfArztNr.Number, dfRechNr.Number, nBruttoMwSt, locals.nPBrutto, nRP1MwSt);
						}
						// Call SqlImmedX('INSERT INTO TK
						// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
						// tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
						// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkreverse)
						// VALUES (:frmRechPos.dfArztNr, 3, 0, :frmRechPos.strBuchText,
						// :frmRechPos.dfHalterNr, :frmRechPos.nRechNr, NULL,
						// SYSDATE, 0, :frmRechPos.nBruPorto,0 , :frmRechPos.nMwPorto, 0,
						// 0,0, 0,:nCheckMwSt, 0, 0, :frmRechPos.nBuchDM, :frmRechPos.nBruPorto, 0, :frmRechPos.nTAReverse)')
						locals.nFetchBrutto = locals.hSqlBrutto.FetchNext();
					}
					locals.hSqlBrutto.Commit();
				}
				else
				{
					locals.nPBrutto = this.nBuchDM;
					// Call SqlImmedX('INSERT INTO TK
					// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
					// tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
					// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkreverse)
					// VALUES (:frmRechPos.dfArztNr, 3, 0, :frmRechPos.strBuchText, :frmRechPos.dfHalterNr, :frmRechPos.dfRechNr, NULL, SYSDATE, 0, 0,
					// 0 , 0, 0, 0,0, 0,' || SalNumberToStrX( nBruttoMwSt,0) || ', 0, 0, ' || PalStrNumDecPoint( nPBrutto * -1,12,2) || ', 0, 0, 0)')
					Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkreverse)
VALUES (:frmRechPos.dfArztNr, 3, 0, :frmRechPos.strBuchText, :frmRechPos.dfHalterNr, :frmRechPos.dfRechNr, NULL, :frmRechPos.dtBuchDat, 0, 0,
0 , 0, 0, 0,0, 0," + this.dfMwSt.Number.ToString(0) + ", 0, 0, " + Int.PalStrNumDecPoint(locals.nPBrutto * -1, 12, 2) + ", 0, 0, 0)");
					// 24.03.15 F2317
					nRP1MwSt = (locals.nPBrutto * this.dfMwSt.Number * 100 / (100 + this.dfMwSt.Number)).Round() / 100;
					UpdateRechPosition(hSqlUpdateRP, dfArztNr.Number, dfRechNr.Number, this.dfMwSt.Number, locals.nPBrutto, nRP1MwSt);
				}
				locals.hSqlBrutto.Disconnect();
				if (locals.nPBrutto == SalNumber.Null) 
				{
					locals.nPBrutto = 0;
				}
				return locals.nPBrutto;
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmRechPos WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRechPos_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmRechPos_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmRechPos_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRechPos_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(Int.PalFormFrei("Übergaben"))) 
			{
				this.pbOk.DisableWindow();
				this.pbOk.SetText("Übergabe von Buchhaltung gesperrt!");
			}
			Sal.FileSetCurrentDirectory(Var.strTVNPath);
			this.dfArztNr.Number = this.nArztNr;
			this.dfHalterNr.Number = this.nHalterNr;
			this.dfRechNr.Number = this.nRechNr;
			this.dfNBArztNr.Number = this.nArztNr;
			this.dfNBHalterNr.Number = this.nHalterNr;
			this.dfNB2ArztNr.Number = this.nArztNr;
			this.dfMwSt.Number = Var.nMwStVoll;
			this.cbNBKeine.Checked = true;
			Int.SqlImmedSel(@"SELECT aname1, akzpraxart into :frmRechPos.dfArztName, :frmRechPos.nKZPraxArt
from A where aarztnr=:frmRechPos.nArztNr");
			this.dfNBArztName.Text = this.dfArztName.Text;
			this.dfNB2ArztName.Text = this.dfArztName.Text;
			Int.SqlImmedSel(@"SELECT hti, hvn, hnn,hname2,hstr,hland || ' ' || hort, hsperrdatum, hland into :frmRechPos.dfHalterTi, :frmRechPos.dfHalterVN, :frmRechPos.dfHalterNN, :frmRechPos.dfHalterName2,
:frmRechPos.dfHalterStr, :frmRechPos.dfHalterOrt, :frmRechPos.dtSperrdatum, :frmRechPos.strTHLand
from H where harztnr=:frmRechPos.nArztNr and hhalternr=:frmRechPos.nHalterNr AND hdeaktiv IS NULL");
			// 02.12.08 Ä337
			if (this.dtSperrdatum != SalDateTime.Null) 
			{
				Sal.MessageBox("Der Postausgang an den Halter ist gesperrt seit " + Int.PalDateToStrJJJJMMTT(this.dtSperrdatum).Mid(6, 2) + "." + Int.PalDateToStrJJJJMMTT(this.dtSperrdatum).Mid(4, 2) + "." + Int.PalDateToStrJJJJMMTT(this.dtSperrdatum).Mid(
						0, 4), "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			// 29.03.10 OTÄ135 02.02.11 OTÄ538 + AND (rzaktivdat IS NOT NULL or (rzerfdat>= SYSDATE - 14 DAYS))
			Int.SqlIstDa(@"FROM rz, rzp WHERE rznr=rzpnr AND rzkuenddat IS NULL AND (rzaktivdat IS NOT NULL or (rzerfdat>= SYSDATE - 14 DAYS)) AND rzparztnr=:frmRechPos.nArztNr and rzphalternr=:frmRechPos.nHalterNr and
rzprechnr=:frmRechPos.nRechNr AND rzdeaktiv IS NULL", ref Var.bExists);
			if (Var.bExists) 
			{
				this.pbOk.DisableWindow();
			}

			Int.SqlImmedSel(@"SELECT rkrechdat, (rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins), rkmahnstufe
into :frmRechPos.dfRechDat, :frmRechPos.nDMRest, :frmRechPos.nMS
from rk where rkarztnr=:frmRechPos.nArztNr and rkhalternr=:frmRechPos.nHalterNr and rkrechnr=:frmRechPos.nRechNr AND rkdeaktiv IS NULL");
			// If nDMRest=0
			// Call SalDisableWindow(pbOk)
			// 16.12.05
			this.nBuchDM = 0;
			Int.SqlImmedSel("SELECT sum(zadm) FROM za INTO :frmRechPos.nBuchDM WHERE zakz>3 AND zaarztnr = :frmRechPos.nArztNr AND zarechnr = :frmRechPos.nRechNr AND zadeaktiv IS NULL");
			if (this.nBuchDM != 0 && this.nBuchDM != SalNumber.Null) 
			{
				this.dfInfo.Text = "Es wurden bereits € " + this.nBuchDM.ToString(2) + " storniert!";
			}
			// 19.03.08
			this.cbA4.Checked = true;
			// 21.11.16 Ä1445
			// Set cbUeberw = TRUE
			this.cbUeberw.Checked = false;

			this.cbBlanco.Checked = true;

			Int.SqlConnection(ref this.hSqlRp);
			// 03.11.14 Ä1067 + ReverseVersion
			// 06.02.18 Ä1698 + rprabatt
			// 12.10.20 Ä1903 + rpformat
			this.strSelect = @"SELECT rpla, rpmwst, rprechtext, rpdatum, rpdm, rpdmzahl, rptext, rpzeidat, ROWID, rpreverseversion, rprabatt, rpformat FROM RP
INTO :tblRechPos.colsLA, :tblRechPos.colnMwSt, :tblRechPos.colsRechText,
:tblRechPos.coldtDatum, :tblRechPos.colnDM, :tblRechPos.colnDMZahl,
:tblRechPos.colnText, :tblRechPos.coldtPosZeit, :tblRechPos.colsROWID, :tblRechPos.colnReverseVersion,
:tblRechPos.colnRabatt, :tblRechPos.colnFormat WHERE ";
			this.strSelect = this.strSelect + "rparztnr = :nArztNr ";
			this.strSelect = this.strSelect + "AND rphalternr = :nHalterNr ";
			this.strSelect = this.strSelect + "AND rprechnr = :nRechNr ORDER BY rpzeidat";
			this.tblRechPos.Populate(this.hSqlRp, this.strSelect, Sys.TBL_FillAll);
			// 02.07.09 OTÄ270
			this.cbPorto.Checked = true;
			// 20.07.10
			App.frmMain.nRepBeilage = 0;
			// 24.03.15 F2317
			this.hSqlUpdateRP.Connect();
			this.hSqlUpdateRP.SetParameter(Sys.DBP_PRESERVE, 1, "");

			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRechPos_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlRp.Disconnect();
			// 24.03.15 F2317
			this.hSqlUpdateRP.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// pbDrucken WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDrucken_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalDisableWindow(pbDrucken)
			this.strLLQuery = "(rkarztnr = " + this.dfArztNr.Number.ToString(0) + " AND rkrechnr = " + this.dfRechNr.Number.ToString(0) + " ) ";
			// Set strLLQuery = '(rkarztnr = ' || SalNumberToStrX(dfArztNr,0) || ' AND rkhalternr = ' || SalNumberToStrX(dfHalterNr, 0) || ' AND rkrechdat>=2006-01-01) '
			// 25.06.10 OTÄ134
			App.frmMain.bRepKopie = true;
			// 14.06.07 LL-Druck
			// 09.05.17 Ä1544
			if (this.dfRechDat.DateTime <= new SalDateTime(2017, 4, 25)) 
			{
				Var.strDummy1 = "Rechnung A4 tvn.lst";
			}
			else
			{
				Var.strDummy1 = "Rechnung A4.lst";
			}
			// LL
			if (this.cbA4.Checked) 
			{
				if (1 == dlgLlDruck.ModalDialog(App.frmMain, Var.strDummy1, "RK")) 
				{
					if (this.cbUeberw.Checked) 
					{
						if (this.strTHLand == "AT") 
						{
							// 12.08.10 OTÄ420
							// Call SalModalDialog( dlgLlDruck, frmMain, 'Überweisung AT.lst', 'RK' )
						}
						else
						{
							dlgLlDruck.ModalDialog(App.frmMain, "Überweisung A4.lst", "RK");
						}
					}
				}
			}
			else
			{
				if (1 == dlgLlDruck.ModalDialog(App.frmMain, "Rechnungen.lst", "RK")) 
				{
				}
			}
			// Call SalModalDialog( dlgLlDruck, frmMain, 'Rechnungen.lst', 'RK' )
			#endregion
		}
		
		/// <summary>
		/// pbRA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRA_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRA_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(this.tblRechPos.AnyRows(Sys.ROW_Selected, 0))) 
			{
				Sal.MessageBox(@"Bitte markieren Sie zuerst
die Zeilen, die in die RA
übergeben werden sollen.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				this.dtRechDat = SalDateTime.Current;
				Int.SqlImmed(@"INSERT INTO le
(lebearbeiter, learztnr, lehalternr, leposnr, leti, levn, lenn, lename2, lestr, leort, lebearbdatum, lemandisk)
VALUES(:strBNUser, :frmRechPos.dfArztNr,  :frmRechPos.dfHalterNr,  1,
:frmRechPos.dfHalterTi, :frmRechPos.dfHalterVN, :frmRechPos.dfHalterNN,  :frmRechPos.dfHalterName2,  :frmRechPos.dfHalterStr,  :frmRechPos.dfHalterOrt,
:frmRechPos.dtRechDat, :strMan)");
				this.nZeile = Sys.TBL_MinRow;
				while (this.tblRechPos.FindNextRow(ref this.nZeile, Sys.ROW_Selected, 0)) 
				{
					this.tblRechPos.SetFocusRow(this.nZeile);
					if (this.tblRechPos.coldtPosZeit.DateTime == Sys.DATETIME_Null) 
					{
						this.tblRechPos.coldtPosZeit.DateTime = SalDateTime.Current;
					}
					// 06.02.18 Ä1698 + rprabatt
					Int.SqlImmed(@"INSERT INTO lep
(lepbearbeiter, leparztnr, lephalternr, lepposnr, lepla, lepmwst, leprechtext, lepdatum, lepdm, leptext,
lebearbdatum, LEPZEIDAT, leprabatt)
VALUES(:strBNUser, :frmRechPos.dfArztNr,  :frmRechPos.dfHalterNr,  1,
:frmRechPos.tblRechPos.colsLA, :frmRechPos.tblRechPos.colnMwSt,
:frmRechPos.tblRechPos.colsRechText, :frmRechPos.tblRechPos.coldtDatum,
:frmRechPos.tblRechPos.colnDM, :frmRechPos.tblRechPos.colnText,
:frmRechPos.dtRechDat, :frmRechPos.tblRechPos.coldtPosZeit, :frmRechPos.tblRechPos.colnRabatt)");
				}
			}
			#endregion
		}
		
		/// <summary>
		/// tblRechPos WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblRechPos_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblRechPos_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblRechPos_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblRechPos_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblRechPos, 0xbfffbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblRechPos_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 18.09.02
			// If bPFarbe
			// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xBFFFBF )
			// Set bPFarbe = FALSE
			// Else
			// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xEFFFEF )
			// Set bPFarbe = TRUE
			// 12.10.20 Ä1903 +lpformat - -> 1
			if (this.tblRechPos.colnFormat.Number == Sys.NUMBER_Null) 
			{
				this.tblRechPos.colnFormat.Number = 0;
			}
			if (this.tblRechPos.colnFormat.Number == 1) 
			{
				MT.MTbl.SetRowFont(this.tblRechPos, Sys.lParam, MT.MTbl.MTBL_FONT_UNDEF_NAME, MT.MTbl.MTBL_FONT_UNDEF_SIZE, Sys.FONT_EnhBold, MT.MTbl.MTSF_REDRAW);
			}

			#endregion
		}
		
		/// <summary>
		/// dfEuro WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfEuro_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfEuro_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfEuro_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.rbEuro.Checked = true;
			#endregion
		}
		
		/// <summary>
		/// cbNBKeine WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbNBKeine_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbNBKeine_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbNBKeine_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.cbNBKeine.Checked) 
			{
				this.cbNBja.Checked = false;
				this.cbNB2.Checked = false;
			}
			#endregion
		}
		
		/// <summary>
		/// cbNBja WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbNBja_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbNBja_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbNBja_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.cbNBja.Checked) 
			{
				this.cbNBKeine.Checked = false;
			}
			if (!(this.cbNBja.Checked) && !(this.cbNB2.Checked)) 
			{
				this.cbNBKeine.Checked = true;
			}
			#endregion
		}
		
		/// <summary>
		/// dfNBArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNBArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfNBArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNBArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT aname1 || ' ' || aname2
INTO :frmRechPos.dfNBArztName
from A where aarztnr=:frmRechPos.dfNBArztNr");
			#endregion
		}
		
		/// <summary>
		/// dfNBHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNBHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfNBHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNBHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 18.09.06 F60
			this.dfNBHalterName.Text = "";
			Int.SqlImmedSel(@"SELECT hvn || ' ' || hnn || ', ' || hland || ' ' || hort, hsperrdatum
into :frmRechPos.dfNBHalterName, :frmRechPos.dtSperrdatum
from H where hhalternr=:frmRechPos.dfNBHalterNr and harztnr=:frmRechPos.dfNBArztNr AND hdeaktiv IS NULL");
			if (this.dfNBHalterName.Text == "") 
			{
				Sal.MessageBox("Der Halter ist nicht vorhanden.", "Fehler", (Sys.MB_Ok | Sys.MB_IconStop));
				this.dfNBHalterNr.Number = Sys.NUMBER_Null;
			}
			else
			{
				// 02.12.08 Ä337
				if (this.dtSperrdatum != SalDateTime.Null) 
				{
					Sal.MessageBox("Der Postausgang an den Halter ist gesperrt seit " + Int.PalDateToStrJJJJMMTT(this.dtSperrdatum).Mid(6, 2) + "." + Int.PalDateToStrJJJJMMTT(this.dtSperrdatum).Mid(4, 2) + "." + Int.PalDateToStrJJJJMMTT(this.dtSperrdatum).Mid(
							0, 4), "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfNBArztName WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNBArztName_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfNBArztName_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNBArztName_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			tblArzt.CreateWindow(this, "frmRechPos", this.dfNBArztName.Text);
			#endregion
		}
		
		/// <summary>
		/// dfNBHalterName WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNBHalterName_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfNBHalterName_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNBHalterName_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(this.dfNBHalterName.IsEmpty())) 
			{
				Sal.WaitCursor(true);
				tblHalter.CreateWindow(this, "frmRechPos", this.dfNBArztNr.Number, 0, this.dfNBHalterName.Text, "", "", "", "");
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeuHalter WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuHalter_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeuHalter_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuHalter_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmHalter.CreateWindow(this, "frmRechPos", this.dfArztNr.Number, 0);
			#endregion
		}
		
		/// <summary>
		/// cbNB2 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbNB2_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbNB2_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbNB2_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.cbNB2.Checked) 
			{
				this.cbNBKeine.Checked = false;
			}
			if (!(this.cbNBja.Checked) && !(this.cbNB2.Checked)) 
			{
				this.cbNBKeine.Checked = true;
			}
			#endregion
		}
		
		/// <summary>
		/// dfNB2ArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNB2ArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfNB2ArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNB2ArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT aname1 || ' ' || aname2
INTO :frmRechPos.dfNB2ArztName
from A where aarztnr=:frmRechPos.dfNB2ArztNr");
			#endregion
		}
		
		/// <summary>
		/// dfNB2HalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNB2HalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfNB2HalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNB2HalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 18.09.06 F60
			this.dfNB2HalterName.Text = "";
			Int.SqlImmedSel(@"SELECT hvn || ' ' || hnn || ', ' || hland || ' ' || hort, hsperrdatum
into :frmRechPos.dfNB2HalterName, :frmRechPos.dtSperrdatum
from H where hhalternr=:frmRechPos.dfNB2HalterNr and harztnr=:frmRechPos.dfNB2ArztNr AND hdeaktiv IS NULL");
			if (this.dfNB2HalterName.Text == "") 
			{
				Sal.MessageBox("Der Halter ist nicht vorhanden.", "Fehler", (Sys.MB_Ok | Sys.MB_IconStop));
				this.dfNB2HalterNr.Number = Sys.NUMBER_Null;
			}
			else
			{
				// 02.12.08 Ä337
				if (this.dtSperrdatum != SalDateTime.Null) 
				{
					Sal.MessageBox("Der Postausgang an den Halter ist gesperrt seit " + Int.PalDateToStrJJJJMMTT(this.dtSperrdatum).Mid(6, 2) + "." + Int.PalDateToStrJJJJMMTT(this.dtSperrdatum).Mid(4, 2) + "." + Int.PalDateToStrJJJJMMTT(this.dtSperrdatum).Mid(
							0, 4), "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfNB2ArztName WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNB2ArztName_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfNB2ArztName_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNB2ArztName_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			tblArzt.CreateWindow(this, "frmRechPos2", this.dfNB2ArztName.Text);
			#endregion
		}
		
		/// <summary>
		/// dfNB2HalterName WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNB2HalterName_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfNB2HalterName_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNB2HalterName_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(this.dfNB2HalterName.IsEmpty())) 
			{
				Sal.WaitCursor(true);
				tblHalter.CreateWindow(this, "frmRechPos2", this.dfNB2ArztNr.Number, 0, this.dfNB2HalterName.Text, "", "", "", "");
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeuHalter2 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuHalter2_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeuHalter2_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuHalter2_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmHalter.CreateWindow(this, "frmRechPos2", this.dfArztNr.Number, 0);
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// If rbKomplett
			// Call SalTblSetFlagsAnyRows( tblRechPos, ROW_Selected, TRUE, 0, 0)
			// 25.06.10 OTÄ134
			App.frmMain.bRepKopie = false;
			// 06.03.23 Ä2086
			this.dtBuchDat = SalDateTime.Current;
			Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
			if (this.dtBuchDat < Var.dtINIMinBuchDat) 
			{
				this.dtBuchDat = Var.dtINIMinBuchDat;
			}


			this.strLLQuery = "";

			this.nZeile = Sys.TBL_MinRow;
			if (!(this.tblRechPos.AnyRows(Sys.ROW_Selected, 0)) && this.rbTeil.Checked) 
			{
				Sal.MessageBox(@"Bitte markieren Sie zuerst
die zu stornierenden Zeilen.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else if (this.cbNBja.Checked && !(this.dfNBArztNr.Number > 0 && this.dfNBHalterNr.Number >= 0)) 
			{
				Sal.MessageBox("Welcher Halter soll die neue Rechnung für MARKIERTE Positionen bekommen?!", "Fehlende Halterangabe", Sys.MB_Ok);
			}
			else if (this.cbNB2.Checked && !(this.dfNB2ArztNr.Number > 0 && this.dfNB2HalterNr.Number >= 0)) 
			{
				Sal.MessageBox("Welcher Halter soll die neue Rechnung für UNMARKIERTE Positionen bekommen?!", "Fehlende Halterangabe", Sys.MB_Ok);
			}
			else if ((this.dfEuro.Number == 0 || this.dfEuro.Number == Sys.NUMBER_Null) && this.rbEuro.Checked) 
			{
				Sal.MessageBox(@"Ungültiger
€-Betrag !", "Falscher Betrag", Sys.MB_Ok);
			}
			else if (this.dfRechNr.Number >= 999990) 
			{
				Sal.MessageBox("MB-Sammler können hier nicht storniert werden!", "MB-Sammler", Sys.MB_Ok);
			}
			else if (this.nMS >= 9) 
			{
				Sal.MessageBox("MS 9 kann hier nicht storniert werden.", "MS 9", Sys.MB_Ok);
			}
			else if (this.cbNBja.Checked && !(this.tblRechPos.FindNextRow(ref this.nZeile, Sys.ROW_Selected, 0))) 
			{
				Sal.MessageBox("Es wurden keine Positionen markiert!", "Markierung fehlt", Sys.MB_Ok);
			}
			else
			{
				this.lsText = "Wollen Sie wirklich ";
				if (this.rbKomplett.Checked) 
				{
					this.lsText = this.lsText + "die ganze Rechnung stornieren ";
				}
				if (this.rbTeil.Checked) 
				{
					this.lsText = this.lsText + "die markierten Positionen stornieren ";
				}
				if (this.rbEuro.Checked) 
				{
					this.lsText = this.lsText + "€ " + Int.PalStrNum(this.dfEuro.Number, 8, 2) + " stornieren ";
				}
				if (this.cbNBKeine.Checked) 
				{
					this.lsText = this.lsText + ", ohne etwas neuzuberechnen";
				}
				if (this.cbNBja.Checked) 
				{
					this.lsText = this.lsText + " und die markierten Positionen an " + Int.PalStrNum(this.dfNBArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfNBHalterNr.Number, 5, 0) + " neuberechnen";
				}
				if (this.cbNB2.Checked) 
				{
					this.lsText = this.lsText + ", sowie die NICHT markierten Positionen an " + Int.PalStrNum(this.dfNB2ArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfNB2HalterNr.Number, 5, 0) + " neuberechnen";
				}
				// 08.12.20 PalMessageBox -> SalMessageBox
				if (Sys.IDYES == Sal.MessageBox(this.lsText, "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					Sal.WaitCursor(true);
					// 02.07.09 OTÄ270 if cbPorto
					if (this.cbPorto.Checked) 
					{
						// 03.05.10 OTÄ420
						Var.nCheckMwSt = Int.PalCheckAuslMwSt(this.dfArztNr.Number);
						// 18.04.11 Ä563
						if (Var.nCheckMwSt == 0) 
						{
							this.nTAReverse = 1;
						}
						else
						{
							this.nTAReverse = 0;
						}

						this.nMwPorto = (Var.nPorto1 * Var.nCheckMwSt).Round() / 100;
						this.nBruPorto = Var.nPorto1 + this.nMwPorto;
					}
					else
					{
						this.nMwPorto = 0;
						this.nBruPorto = 0;
					}
					// 03.11.14 Ä1067 + ReverseVersion

					// G U T S C H R I F T

					this.dtRechDat = SalDateTime.Current;
					this.dtAktZeit = this.dtRechDat;
					Int.SqlImmedSel(@"SELECT max(rkrechnr) INTO :frmRechPos.nRechNr
FROM RK WHERE rkarztnr=:frmRechPos.dfArztNr AND rkrechnr <999990");
					Int.SqlImmedSel(@"SELECT max(lerechnr) INTO :frmRechPos.nRechNrLe
FROM LE WHERE learztnr=:frmRechPos.dfArztNr");
					if (this.nRechNrLe > this.nRechNr) 
					{
						this.nRechNr = this.nRechNrLe;
					}
					this.nRechNr = this.nRechNr + 1;
					// 08.10.21 Ä1961
					App.frmMain.strMahnMZF = "11" + Int.PalNullen(this.dfArztNr.Number, 4) + Int.PalNullen(this.dfRechNr.Number, 6);
					App.frmMain.strMahnMZF = App.frmMain.strMahnMZF + Int.PalPruefZiffer(App.frmMain.strMahnMZF);
					App.frmMain.strMahnMZF = App.frmMain.strMahnMZF.Left(2) + "." + App.frmMain.strMahnMZF.Mid(2, 4) + "." + App.frmMain.strMahnMZF.Mid(6, 6) + "." + App.frmMain.strMahnMZF.Mid(12, 255);


					if (this.rbKomplett.Checked) 
					{
						// 08.10.21 Ä1961
						// Set strText = 'Stornierung der Rechnung ' || PalStrNum(dfArztNr,4,0) || '/R' || PalStrNum(dfRechNr,6,0)
						this.strText = "Stornierung der Rechnung " + App.frmMain.strMahnMZF;
					}
					else
					{
						this.strText = "Stornierung eines Teilbetrages aus Rechnung " + App.frmMain.strMahnMZF;
					}
					if (this.nKZPraxArt > 1)  // Apotheke
					{
						this.strLA = Var.strA;
					}
					else
					{
						this.strLA = Var.strL;
					}
					if (this.rbEuro.Checked) 
					{
						this.nBuchDM = (this.dfEuro.Number * 10000 / (this.dfMwSt.Number + 100)).Round() / 100;
						Int.SqlImmed(@"INSERT INTO RP (rparztnr, rphalternr, rprechnr, rpla, rpmwst, rprechtext, rpdatum, rpdm, rptext, rpzeidat)
VALUES(:frmRechPos.dfArztNr,  :frmRechPos.dfHalterNr, :frmRechPos.nRechNr,
:frmRechPos.strLA, :frmRechPos.dfMwSt,
:frmRechPos.strText, :frmRechPos.dtRechDat,
:frmRechPos.nBuchDM, 0,
:frmRechPos.dtRechDat)");
						if (this.strLA == Var.strL) 
						{
							this.nBuchLeis = this.nBuchLeis + this.nBuchDM + (this.nBuchDM * this.dfMwSt.Number).Round() / 100.00m;
						}
						else
						{
							this.nBuchArzn = this.nBuchArzn + this.nBuchDM + (this.nBuchDM * this.dfMwSt.Number).Round() / 100.00m;
						}
					}
					else
					{
						Int.SqlImmed(@"INSERT INTO RP (rparztnr, rphalternr, rprechnr, rpla, rpmwst, rprechtext, rpdatum, rpdm, rptext, rpzeidat)
VALUES(:frmRechPos.dfArztNr,  :frmRechPos.dfHalterNr, :frmRechPos.nRechNr,
:frmRechPos.strLA, :frmRechPos.dfMwSt,
:frmRechPos.strText, :frmRechPos.dtRechDat,
0, 1, :frmRechPos.dtRechDat)");
						this.nZeile = Sys.TBL_MinRow;
						if (this.rbKomplett.Checked) 
						{
							this.nFlagsOn = 0;
						}
						else
						{
							this.nFlagsOn = Sys.ROW_Selected;
						}
						while (this.tblRechPos.FindNextRow(ref this.nZeile, this.nFlagsOn, 0)) 
						{
							this.tblRechPos.SetFocusRow(this.nZeile);
							if (this.tblRechPos.coldtPosZeit.DateTime == Sys.DATETIME_Null) 
							{
								this.tblRechPos.coldtPosZeit.DateTime = SalDateTime.Current;
							}
							// 06.02.18 Ä1698 + rprabatt
							Int.SqlImmed(@"INSERT INTO RP (rparztnr, rphalternr, rprechnr, rpla, rpmwst, rprechtext, rpdatum, rpdm, rptext, rpzeidat, rpreverseversion, rprabatt)
VALUES(:frmRechPos.dfArztNr,  :frmRechPos.dfHalterNr, :frmRechPos.nRechNr,
:frmRechPos.tblRechPos.colsLA, :frmRechPos.tblRechPos.colnMwSt,
:frmRechPos.tblRechPos.colsRechText, :frmRechPos.tblRechPos.coldtDatum,
:frmRechPos.tblRechPos.colnDM, :frmRechPos.tblRechPos.colnText, :frmRechPos.tblRechPos.coldtPosZeit, :frmRechPos.tblRechPos.colnReverseVersion,
:frmRechPos.tblRechPos.colnRabatt)");
						}
					}
					this.strText = "Der gutgeschriebene Betrag wird verrechnet bzw. erstattet.";
					this.dtZeiDat = this.dtRechDat + 1;
					Int.SqlImmed(@"INSERT INTO RP (rparztnr, rphalternr, rprechnr, rpla, rpmwst, rprechtext, rpdatum, rpdm, rptext, rpzeidat)
VALUES(:frmRechPos.dfArztNr,  :frmRechPos.dfHalterNr, :frmRechPos.nRechNr,
:frmRechPos.strLA, :frmRechPos.dfMwSt,
:frmRechPos.strText, :frmRechPos.dtRechDat,
0, 1,
:frmRechPos.dtZeiDat)");
					Int.SqlImmed("UPDATE rp SET rpdm = rpdm * -1 WHERE rparztnr = :frmRechPos.dfArztNr AND rprechnr = :frmRechPos.nRechNr");

					Int.SqlImmed("UPDATE rp SET rpmwst= :nMwStVoll WHERE rpmwst=0 AND rptext=1 AND rparztnr = :frmRechPos.dfArztNr AND rprechnr = :frmRechPos.nRechNr");

					this.nBuchLeis = this.BerechneBrutto(this.dfArztNr.Number, this.dfHalterNr.Number, this.nRechNr, "L");
					this.nBuchArzn = this.BerechneBrutto(this.dfArztNr.Number, this.dfHalterNr.Number, this.nRechNr, "A");

					this.nOPFaellTg = -1;
					this.nFaellTg = 14; // Vorgabe
					// 05.05.11 Ä572 + Land
					Int.SqlImmedSel(@"SELECT hfaelltg, hland
INTO :frmRechPos.nOPFaellTg, :frmRechPos.strTHLand
FROM H WHERE HARZTNR = :frmRechPos.dfArztNr AND HHALTERNR = :frmRechPos.dfHalterNr");
					if (this.nOPFaellTg == -1 || this.nOPFaellTg == SalNumber.Null) 
					{
						Int.SqlImmedSel(@"SELECT afaelltg
INTO :frmRechPos.nOPFaellTg
FROM A WHERE AARZTNR = :frmRechPos.dfArztNr");
						if (this.nOPFaellTg == -1 || this.nOPFaellTg == SalNumber.Null) 
						{
							this.nOPFaellTg = this.nFaellTg;
						}
					}
					this.nFaellTg = this.nOPFaellTg;

					this.dtRkFaellDat = this.dtRechDat + this.nFaellTg;
					// 12.12.97  	Verjährung auf erstes Leistungsdatum
					this.dtRkErstLeistDat = this.dtRechDat;
					Int.SqlImmedSel(@"SELECT min(rpdatum)
INTO :frmRechPos.dtRkErstLeistDat
FROM rp WHERE rparztnr=:frmRechPos.dfArztNr
AND rprechnr = :frmRechPos.nRechNr
AND rpdatum is not null");
					// 27.09.05 Verjährung auf 3 jahre gesetzt.
					// 05.05.11 Ä572 + AT
					if (this.strTHLand == "AT") 
					{
						this.dtRkVerjaehr = new SalDateTime(this.dtRkErstLeistDat.Year() + 3, this.dtRkErstLeistDat.Month(), this.dtRkErstLeistDat.Day(), 0, 0, 0);
					}
					else
					{
						if (this.dtRkErstLeistDat < new SalDateTime(2001, 1, 1)) 
						{
							this.dtRkVerjaehr = new SalDateTime(this.dtRkErstLeistDat.Year() + 2, 12, 31, 0, 0, 0);
						}
						else
						{
							this.dtRkVerjaehr = new SalDateTime(this.dtRkErstLeistDat.Year() + 3, 12, 31, 0, 0, 0);
						}
					}
					// 16.07.19 Ä1854
					if (this.cbNBKeine.Checked) 
					{
						this.strBuchText = "Gutschrift";
					}
					else
					{
						this.strBuchText = "Gutschrift mit NeuB";
					}

					if (Int.SqlImmedX(@"INSERT INTO RK (RKARZTNR, RKHALTERNR, RKRECHNR,
RKBUCHTEXT, RKRECHDAT, RKFAELLDAT, RKDMLEIS, RKDMARZN,  RKDMMAHN, RKDMZINS, RKMBDMOPL,
RKVERJAEHR,RKZALEIS,RKZAARZN,RKZAMAHN, RKZAZINS, RKMBZAOPL, RKKZZAHL,RKKZ, RKMAHNSTUFE)
VALUES(:frmRechPos.dfArztNr, :frmRechPos.dfHalterNr, :frmRechPos.nRechNr,
:frmRechPos.strBuchText, SYSDATE, :frmRechPos.dtRkFaellDat, :frmRechPos.nBuchLeis, :frmRechPos.nBuchArzn,0,0,0,
:frmRechPos.dtRkVerjaehr, :frmRechPos.nBuchLeis, :frmRechPos.nBuchArzn,0,0,0,4,0,0)")) 
					{
					}
					// 08.05.09
					// Set frmMain.dtHBBuchDat = SalDateCurrent()
					// Set nBuchLeis = nBuchLeis * -1
					// Set nBuchArzn = nBuchArzn * -1
					// If nBuchLeis != 0
					// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
					// VALUES(:frmRechPos.dfArztNr, :frmRechPos.dfHalterNr, :frmRechPos.nRechNr, SYSDATE, \'RGLe\', :frmMain.dtHBBuchDat, :frmRechPos.nBuchLeis, 16420, NULL, \'Gutschrift\')')
					// If nBuchArzn != 0
					// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
					// VALUES(:frmRechPos.dfArztNr, :frmRechPos.dfHalterNr, :frmRechPos.nRechNr, SYSDATE, \'RGAr\', :frmMain.dtHBBuchDat, :frmRechPos.nBuchArzn, 16420, NULL, \'Gutschrift\')')

					this.strLLQuery = this.strLLQuery + " OR (rkarztnr =  " + this.dfArztNr.Number.ToString(0) + " AND rkrechnr = " + this.nRechNr.ToString(0) + ") ";
					// 04.12.17 Ä1433
					Int.PalCheckELobBez(this.dfArztNr.Number, this.dfHalterNr.Number);

					// A U S B U C H E N

					if (this.nMS > 6) 
					{
						Sal.MessageBox(" MS " + this.nMS.ToString(0) + "!!!!", "", Sys.MB_Ok);
					}
					this.nBuchDM = 0.00m;
					// Set nAusbuchDM = 0.00
					this.SetStatusBarText("Rech-Nr.: " + this.dfArztNr.Number.ToString(0) + "/" + this.dfHalterNr.Number.ToString(0) + "/" + this.dfRechNr.Number.ToString(0));
					Int.SqlImmedSel(@"SELECT rkdmleis, rkdmarzn, rkdmmahn, rkdmzins, rkzaleis,rkzaarzn,rkzamahn, rkzazins
INTO :frmRechPos.nDMLeis, :frmRechPos.nDMArzn, :frmRechPos.nDMMahn, :frmRechPos.nDMZins, :frmRechPos.nZaLeis, :frmRechPos.nZaArzn,
:frmRechPos.nZaMahn, :frmRechPos.nZaZins
FROM RK
WHERE  rkarztnr = :frmRechPos.dfArztNr
AND rkhalternr = :frmRechPos.dfHalterNr
AND rkrechnr = :frmRechPos.dfRechNr");
					if (this.rbKomplett.Checked) 
					{
						this.nBuchLeis = this.nDMLeis;
						this.nBuchArzn = this.nDMArzn;
						this.nBuchMahn = this.nDMMahn;
						this.nBuchZins = this.nDMZins;
					}
					else if (this.rbTeil.Checked) 
					{
						this.nBuchLeis = 0;
						this.nBuchArzn = 0;
						this.nBuchMahn = 0;
						this.nBuchZins = 0;
						this.nZeile = Sys.TBL_MinRow;
						this.nFlagsOn = Sys.ROW_Selected;
						while (this.tblRechPos.FindNextRow(ref this.nZeile, this.nFlagsOn, 0)) 
						{
							this.tblRechPos.SetFocusRow(this.nZeile);
							if (this.tblRechPos.colsLA.Text == "A") 
							{
								this.nBuchArzn = this.nBuchArzn + this.tblRechPos.colnDM.Number + ((this.tblRechPos.colnDM.Number * this.tblRechPos.colnMwSt.Number).Round() / 100);
							}
							else
							{
								this.nBuchLeis = this.nBuchLeis + this.tblRechPos.colnDM.Number + ((this.tblRechPos.colnDM.Number * this.tblRechPos.colnMwSt.Number).Round() / 100);
							}
						}
					}
					else
					{
						if (this.nKZPraxArt > 1)  // Apotheke
						{
							this.nBuchLeis = 0;
							this.nBuchArzn = this.dfEuro.Number;
						}
						else
						{
							this.nBuchLeis = this.dfEuro.Number;
							this.nBuchArzn = 0;
						}
						// 08.10.19 F4539
						this.nBuchMahn = 0;
						this.nBuchZins = 0;
					}
					// Guthaben?
					// Set nBuchDM = nDMLeis + nDMArzn + nDMMahn + nDMZins - nZaLeis - nZaArzn - nZaMahn - nZaZins - nBuchLeis - nBuchArzn - nBuchMahn - nBuchZins
					// If nBuchDM < 0
					// Set strKuerzel = SalStrLeftX( frmMain.strUser, 2)
					// Set lsText = '***Gutschrift***
					// 
					// Bitte erstatten Sie diesem Halter €' || PalStrNum(nBuchDM*-1,8,2) || '.
					// 
					// Hinweis: Bitte überprüfen Sie vor Zahlung, ob es sich wirklich um ein Guthaben aus Zahlungen handelt.'
					// Call SqlImmed('
					// INSERT INTO Z VALUES (:frmRechPos.strKuerzel, \'KE\', :frmRechPos.dfArztNr, :frmRechPos.dfHalterNr, :frmRechPos.dfRechNr,
					// :frmRechPos.lsText , SYSDATE, NULL, \'N\', \'TN\', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)')
					this.nBuchDM = this.nBuchLeis + this.nBuchArzn + this.nBuchMahn + this.nBuchZins;

					// 20.01.05
					this.nProzNr = 0;
					Int.SqlImmedSel("SELECT prdnr INTO :frmRechPos.nProzNr FROM prd WHERE prdarztnr = :frmRechPos.dfArztNr AND prdrechnr = :frmRechPos.dfRechNr");

					this.strBuchText = "Storno " + Var.strBNZei;
					// Set nKZZahl = 4
					this.strBuchText = this.strBuchText.Left(20);
					this.nDiverse = this.nBuchDM;
					// 24.02.11 OTÄ528
					this.nDMAusbuch = 0;
					Int.SqlImmedSel(@"SELECT sum(zadm) INTO :frmRechPos.nDMAusbuch FROM za
WHERE zaarztnr = :frmRechPos.dfArztNr
AND zahalternr = :frmRechPos.dfHalterNr
AND zarechnr = :frmRechPos.dfRechNr
AND zakz > 3");
					if (this.nDMAusbuch == SalNumber.Null) 
					{
						this.nDMAusbuch = 0;
					}
					// 28.04.22 F4889
					if (!(this.rbEuro.Checked)) 
					{
						// 08.03.11 F852
						this.nBuchDM = this.nBuchDM - this.nDMAusbuch;
						// 05.11.19 F4540 + zadmhf, zadmrest
						if (this.cbNBKeine.Checked) 
						{
							this.nBuchDMHF = this.nBuchLeis + this.nBuchArzn;
							this.nBuchDMRest = this.nBuchMahn + this.nBuchZins;
						}
						else
						{
							this.nBuchDMHF = SalNumber.Null;
							this.nBuchDMRest = SalNumber.Null;
						}
					}

					// 26.03.19 Ä1844 + , zaerfdat
					this.SetStatusBarText("Sachkonten-Buchungen");
					// 05.11.19 F4540 + zadmhf, zadmrest
					Int.SqlImmedX(@"INSERT INTO ZA
(zaarztnr,zahalternr,zarechnr,zakz,zabuchdat,zabelegnr,zadm, zaproznr, zabuchtext, zaerfdat, zadmhf, zadmrest)
VALUES (:frmRechPos.dfArztNr,
:frmRechPos.dfHalterNr,
:frmRechPos.dfRechNr,
4,
SYSDATE,
NULL,
:frmRechPos.nBuchDM,
:frmRechPos.nProzNr, :frmRechPos.strBuchText, SYSDATETIME,
:frmRechPos.nBuchDMHF, :frmRechPos.nBuchDMRest )");
					// 28.05.21 Ä1962
					// Set strBuchText = 'Stor' || PalStrNum(dfArztNr,4,0)  || '/'
					// || PalStrNum(dfHalterNr,5,0)|| '/' || PalStrNum(dfRechNr,5,0)
					this.strBuchText = "storno " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0) + "/" + Int.PalStrNum(this.dfRechNr.Number, 5, 0);

					// Set nBuchDM = nBuchDM * -1
					this.SetStatusBarText("TA-Buchungen");
					// 19.09.05
					// Call SqlImmedX('INSERT INTO TK
					// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
					// tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
					// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben)
					// VALUES (:frmRechPos.dfArztNr, 0, 0, :frmRechPos.strBuchText,
					// :frmRechPos.dfHalterNr, :frmRechPos.nRechNr, NULL,
					// SYSDATE, 0,0,0 , 0,0,
					// 0,0, 0,0, 0, :nPorto1, :frmRechPos.nBuchDM, :nPorto1, 0)')
					// 20.12.07 F318 tksa von 0 in 3 geändert
					// 27.11.14 2193
					this.BucheTKMwSt(this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRechNr.Number, this.cbPorto.Checked);
					// Call SqlImmedX('INSERT INTO TK
					// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
					// tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
					// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkreverse)
					// VALUES (:frmRechPos.dfArztNr, 3, 0, :frmRechPos.strBuchText,
					// :frmRechPos.dfHalterNr, :frmRechPos.nRechNr, NULL,
					// SYSDATE, 0, :frmRechPos.nBruPorto,0 , :frmRechPos.nMwPorto, 0,
					// 0,0, 0,:nCheckMwSt, 0, 0, :frmRechPos.nBuchDM, :frmRechPos.nBruPorto, 0, :frmRechPos.nTAReverse)')
					// Set nBuchDM = nBuchDM * -1
					// -----------------------------
					// 03.04.23 Ä2086
					this.dtBuchDat = SalDateTime.Current;
					Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
					if (this.dtBuchDat < Var.dtINIMinBuchDat) 
					{
						this.dtBuchDat = Var.dtINIMinBuchDat;
					}

					// 06.01.99	26.05.00 (nZahlZins+nZahlMahn)
					this.nDiverse = this.nBuchZins + this.nBuchMahn;
					if (this.nDiverse != 0) 
					{
						Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16410, 16000, :frmRechPos.dfArztNr,
:frmRechPos.dtBuchDat,
:frmRechPos.strBuchText,
:frmRechPos.nDiverse, 5)");
					}
					this.nDiverse = this.nBuchLeis + this.nBuchArzn;
					Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16420, 16000, :frmRechPos.dfArztNr, :frmRechPos.dtBuchDat, :frmRechPos.strBuchText, :frmRechPos.nDiverse, 5)");
					// 02.07.09 OTÄ270 if cbPorto
					if (this.cbPorto.Checked) 
					{
						// 14.04.14 Ä1046
						if (Int.PalCheckAuslTA(this.dfArztNr.Number) == "EU") 
						{
							App.frmMain.nErloeskonto = 81710;
						}
						else
						{
							App.frmMain.nErloeskonto = 81700;
							// 30.06.20 Ä1892
							if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
							{
								App.frmMain.nErloeskonto = Int.PalKontenMwStSenkung(App.frmMain.nErloeskonto);
							}
						}
						this.strBuchText = "Porto";
						// 12.05.23 SYSDATE -> :frmRechPos.dtBuchDat
						Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16100, :frmMain.nErloeskonto, :frmRechPos.dfArztNr, :frmRechPos.dtBuchDat, :frmRechPos.strBuchText, :nPorto1, 5)");
						this.strBuchText = "MwSt";
						// 30.06.20 Ä1892
						Var.nMwStSenkung = 17760;
						if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
						{
							Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
						}

						// 08.06.23 SYSDATE -> :frmRechPos.dtBuchDat
						Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16100, :nMwStSenkung, :frmRechPos.dfArztNr, :frmRechPos.dtBuchDat, :frmRechPos.strBuchText, :frmRechPos.nMwPorto, 5)");
					}

					this.SetStatusBarText("Rechnungs-Datei");
					Int.SqlImmedX(@"UPDATE RK SET
rkteilzdat = :frmRechPos.dtBuchDat,
rkzaleis = rkzaleis + :frmRechPos.nBuchLeis,
rkzaarzn = rkzaarzn + :frmRechPos.nBuchArzn,
rkzamahn = rkzamahn + :frmRechPos.nBuchMahn,
rkzazins = rkzazins + :frmRechPos.nBuchZins
WHERE rkarztnr = :frmRechPos.dfArztNr
AND rkhalternr = :frmRechPos.dfHalterNr
AND rkrechnr = :frmRechPos.dfRechNr");
					// 08.05.09
					// Set frmMain.dtHBBuchDat = SalDateCurrent()
					// Set nBuchMahn = nBuchMahn * -1
					// Set nBuchZins = nBuchZins * -1
					// If nBuchMahn != 0
					// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
					// VALUES(:frmRechPos.dfArztNr, :frmRechPos.dfHalterNr, :frmRechPos.dfRechNr, SYSDATE, \'RGMa\', :frmMain.dtHBBuchDat, :frmRechPos.nBuchMahn, 16420, NULL, \'ausgebucht\')')
					// If nBuchZins != 0
					// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
					// VALUES(:frmRechPos.dfArztNr, :frmRechPos.dfHalterNr, :frmRechPos.dfRechNr, SYSDATE, \'RGZi\', :frmMain.dtHBBuchDat, :frmRechPos.nBuchZins, 16420, NULL, \'ausgebucht\')')
					// Set nBuchLeis = nBuchLeis * -1
					// Set nBuchArzn = nBuchArzn * -1
					// Set nBuchMahn = nBuchMahn * -1
					// Set nBuchZins = nBuchZins * -1

					Int.SqlImmedSel(@"SELECT (rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins) INTO :frmRechPos.nRestGuthaben
FROM rk
WHERE rkarztnr = :frmRechPos.dfArztNr
AND rkhalternr = :frmRechPos.dfHalterNr
AND rkrechnr = :frmRechPos.dfRechNr");
					if (this.nRestGuthaben <= 0) 
					{
						// 31.01.11 OTÄ528	24.02.11 nach oben verschoben
						// Call SqlImmedSel( 'SELECT sum(zadm) INTO :frmRechPos.nDMAusbuch FROM za
						// WHERE zaarztnr = :frmRechPos.dfArztNr
						// AND zahalternr = :frmRechPos.dfHalterNr
						// AND zarechnr = :frmRechPos.dfRechNr
						// AND zakz > 3')
						this.nRestGuthaben = this.nRestGuthaben + this.nDMAusbuch;

						Int.SqlImmedX(@"UPDATE RK SET rkkzzahl = 4,
rkzaleis = rkdmleis,
rkzaarzn = rkdmarzn,
rkzamahn = rkdmmahn,
rkzazins = rkdmzins,
rkmbzaopl = rkmbdmopl
WHERE rkarztnr = :frmRechPos.dfArztNr
AND rkhalternr = :frmRechPos.dfHalterNr
AND rkrechnr = :frmRechPos.dfRechNr");
						if (this.nRestGuthaben < 0) 
						{
							this.strKuerzel = App.frmMain.strUser.Left(2);
							this.lsText = @"***Gutschrift***

Dieser Halter hat ein Guthaben von €" + Int.PalStrNum(this.nRestGuthaben * -1, 8, 2) + @".

Bitte mit OPs verbuchen oder erstatten.";
							// 13.05.14 F2027
							this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

							// 09.05.16 Ä1367 AN -> HE
							Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, 'HE', :frmRechPos.dfArztNr, :frmRechPos.dfHalterNr, :frmRechPos.dfRechNr,
:frmRechPos.lsText , SYSDATE, NULL, 'N', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,1, SYSDATETIME)");
						}
						// 23.04.12 Ä734
						Int.SqlIstDa(@"FROM bezs
WHERE bezsarztnr = :frmRechPos.dfArztNr
AND bezshalternr = :frmRechPos.dfHalterNr
AND bezsrechnr = :frmRechPos.dfRechNr", ref Var.bExists);
						if (Var.bExists) 
						{
							Int.SqlImmed(@"UPDATE bezs SET bezserldat = SYSDATETIME
WHERE bezsarztnr = :frmRechPos.dfArztNr
AND bezshalternr = :frmRechPos.dfHalterNr
AND bezsrechnr = :frmRechPos.dfRechNr");
							Int.PalLog("RgKopie Storno BEZErl.");
						}
					}


					// N E U E    R E C H N U N G 1
					this.dtRechDat = SalDateTime.Current;
					this.dtAktZeit = this.dtRechDat;
					if (this.cbNBja.Checked) 
					{
						this.dtRechDat = SalDateTime.Current;
						Int.SqlImmedSel(@"SELECT max(rkrechnr) INTO :frmRechPos.nRechNr
FROM RK WHERE rkarztnr=:frmRechPos.dfNBArztNr AND rkrechnr <999990");
						Int.SqlImmedSel(@"SELECT max(lerechnr) INTO :frmRechPos.nRechNrLe
FROM LE WHERE learztnr=:frmRechPos.dfNBArztNr");
						if (this.nRechNrLe > this.nRechNr) 
						{
							this.nRechNr = this.nRechNrLe;
						}
						this.nRechNr = this.nRechNr + 1;
						// Set dtAktZeit = SalDateCurrent()
						this.nZeile = Sys.TBL_MinRow;
						while (this.tblRechPos.FindNextRow(ref this.nZeile, Sys.ROW_Selected, 0)) 
						{
							this.tblRechPos.SetFocusRow(this.nZeile);
							// If rbNBja
							if (this.tblRechPos.coldtPosZeit.DateTime == Sys.DATETIME_Null) 
							{
								this.tblRechPos.coldtPosZeit.DateTime = SalDateTime.Current;
							}
							// 06.02.18 Ä1698 + rprabatt
							Int.SqlImmed(@"INSERT INTO rp
(rparztnr, rphalternr, rprechnr, rpla, rpmwst, rprechtext, rpdatum, rpdm, rptext, RPZEIDAT, rpreverseversion, rprabatt)
VALUES(:frmRechPos.dfNBArztNr,  :frmRechPos.dfNBHalterNr,  :frmRechPos.nRechNr,
:frmRechPos.tblRechPos.colsLA, :frmRechPos.tblRechPos.colnMwSt,
:frmRechPos.tblRechPos.colsRechText, :frmRechPos.tblRechPos.coldtDatum,
:frmRechPos.tblRechPos.colnDM, :frmRechPos.tblRechPos.colnText, :frmRechPos.tblRechPos.coldtPosZeit, :frmRechPos.tblRechPos.colnReverseVersion,
:frmRechPos.tblRechPos.colnRabatt)");
						}

						this.nOPFaellTg = -1;
						this.nFaellTg = 14; // Vorgabe
						// 05.05.11 Ä572 + Land / 05.12.12 F1465 + hreverse
						Int.SqlImmedSel(@"SELECT hfaelltg, hland, hreverse
INTO :frmRechPos.nOPFaellTg, :frmRechPos.strTHLand, :frmRechPos.nTHReverse
FROM H WHERE HARZTNR = :frmRechPos.dfNBArztNr AND HHALTERNR = :frmRechPos.dfNBHalterNr");
						if (this.nOPFaellTg == -1 || this.nOPFaellTg == SalNumber.Null) 
						{
							Int.SqlImmedSel(@"SELECT afaelltg
INTO :frmRechPos.nOPFaellTg
FROM A WHERE AARZTNR = :frmRechPos.dfNBArztNr");
							if (this.nOPFaellTg == -1 || this.nOPFaellTg == SalNumber.Null) 
							{
								this.nOPFaellTg = this.nFaellTg;
							}
						}
						this.nFaellTg = this.nOPFaellTg;

						this.dtRkFaellDat = this.dtRechDat + this.nFaellTg;
						// 12.12.97  	Verjährung auf erstes Leistungsdatum
						this.dtRkErstLeistDat = this.dtRechDat;
						Int.SqlImmedSel(@"SELECT min(rpdatum)
INTO :frmRechPos.dtRkErstLeistDat
FROM rp WHERE rparztnr=:frmRechPos.dfNBArztNr
AND rprechnr = :frmRechPos.nRechNr
AND rpdatum is not null");
						// 27.09.05 Verjährung auf 3 jahre gesetzt.
						// 05.05.11 Ä572 + AT
						if (this.strTHLand == "AT") 
						{
							this.dtRkVerjaehr = new SalDateTime(this.dtRkErstLeistDat.Year() + 3, this.dtRkErstLeistDat.Month(), this.dtRkErstLeistDat.Day(), 0, 0, 0);
						}
						else
						{
							if (this.dtRkErstLeistDat < new SalDateTime(2001, 1, 1)) 
							{
								this.dtRkVerjaehr = new SalDateTime(this.dtRkErstLeistDat.Year() + 2, 12, 31, 0, 0, 0);
							}
							else
							{
								this.dtRkVerjaehr = new SalDateTime(this.dtRkErstLeistDat.Year() + 3, 12, 31, 0, 0, 0);
							}
						}

						// Call Ausdruck( frmRechPos.dfNBArztNr, nRechNr, nRechNr, dfExempl, strDrucker )
						this.strLLQuery = this.strLLQuery + " OR (rkarztnr =  " + this.dfNBArztNr.Number.ToString(0) + " AND rkrechnr = " + this.nRechNr.ToString(0) + ") ";


						this.nBuchLeis = this.BerechneBrutto(this.dfNBArztNr.Number, this.dfNBHalterNr.Number, this.nRechNr, "L");
						this.nBuchArzn = this.BerechneBrutto(this.dfNBArztNr.Number, this.dfNBHalterNr.Number, this.nRechNr, "A");

						// Set dtRkVerjaehr = SalDateConstruct(SalDateYear(dtRkErstLeistDat)+2,12,31,0,0,0)
						// 05.12.12 F1465 + RKREVERSE
						if (Int.SqlImmedX(@"INSERT INTO RK (RKARZTNR, RKHALTERNR, RKRECHNR,
RKBUCHTEXT, RKRECHDAT, RKFAELLDAT, RKDMLEIS, RKDMARZN,  RKDMMAHN, RKDMZINS, RKMBDMOPL,
RKVERJAEHR,RKZALEIS,RKZAARZN,RKZAMAHN, RKZAZINS, RKMBZAOPL, RKKZZAHL,RKKZ, RKMAHNSTUFE, RKREVERSE)
VALUES(:frmRechPos.dfNBArztNr, :frmRechPos.dfNBHalterNr, :frmRechPos.nRechNr,
'Rechnung', SYSDATE, :frmRechPos.dtRkFaellDat, :frmRechPos.nBuchLeis, :frmRechPos.nBuchArzn,0,0,0,
:frmRechPos.dtRkVerjaehr,0, 0,0,0,0,0,0,0, :frmRechPos.nTHReverse)")) 
						{
							// 28.05.21 Ä1962
							// Set strBuchText = 'NeuB' || PalStrNum(dfNBArztNr,4,0)  || '/'
							// || PalStrNum(dfNBHalterNr,5,0)|| '/' || PalStrNum(nRechNr,5,0)
							this.strBuchText = "Neue Berechnung " + Int.PalStrNum(this.dfNBArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfNBHalterNr.Number, 5, 0) + "/" + Int.PalStrNum(this.nRechNr, 5, 0);

							this.nBuchDM = this.nBuchLeis + this.nBuchArzn;
							// 06.03.23 Ä2086
							this.dtBuchDat = SalDateTime.Current;
							Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
							if (this.dtBuchDat < Var.dtINIMinBuchDat) 
							{
								this.dtBuchDat = Var.dtINIMinBuchDat;
							}

							this.SetStatusBarText("TA-Buchungen");
							// 20.11.23 Ä2144 + tkkontcode
							Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkreverse, tkkontocode)
VALUES (:frmRechPos.dfNBArztNr, 0, 0, :frmRechPos.strBuchText,
:frmRechPos.dfNBHalterNr, :frmRechPos.nRechNr, NULL,
:frmRechPos.dtBuchDat, 0, :frmRechPos.nBruPorto, 0, :frmRechPos.nMwPorto, 0,
0,0, 0,:nCheckMwSt, 0,  0, :frmRechPos.nBuchDM, :frmRechPos.nBruPorto, 0, :frmRechPos.nTAReverse, 'RechPos-')");
							// 08.05.09
							// Set frmMain.dtHBBuchDat = SalDateCurrent()
							// If nBuchLeis != 0
							// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
							// VALUES(:frmRechPos.dfNBArztNr, :frmRechPos.dfNBHalterNr, :frmRechPos.nRechNr, SYSDATE, \'RGLe\', :frmMain.dtHBBuchDat, :frmRechPos.nBuchLeis, 16420, NULL, :frmRechPos.strBuchText)')
							// If nBuchArzn != 0
							// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
							// VALUES(:frmRechPos.dfNBArztNr, :frmRechPos.dfNBHalterNr, :frmRechPos.nRechNr, SYSDATE, \'RGAr\', :frmMain.dtHBBuchDat, :frmRechPos.nBuchArzn, 16420, NULL, :frmRechPos.strBuchText)')

							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16000, 16400, :frmRechPos.dfNBArztNr, :frmRechPos.dtBuchDat, :frmRechPos.strBuchText,
:frmRechPos.nBuchDM, 5)");
							// 02.07.09 OTÄ270 if cbPorto
							if (this.cbPorto.Checked) 
							{
								// 14.04.14 Ä1046
								if (Int.PalCheckAuslTA(this.dfArztNr.Number) == "EU") 
								{
									App.frmMain.nErloeskonto = 81710;
								}
								else
								{
									App.frmMain.nErloeskonto = 81700;
									// 30.06.20 Ä1892
									if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
									{
										App.frmMain.nErloeskonto = Int.PalKontenMwStSenkung(App.frmMain.nErloeskonto);
									}
								}
								this.strBuchText = "Porto";
								Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16100, :frmMain.nErloeskonto, :frmRechPos.dfNBArztNr, :frmRechPos.dtBuchDat, :frmRechPos.strBuchText,
:nPorto1, 5)");
								this.strBuchText = "MwSt";
								// 30.06.20 Ä1892
								Var.nMwStSenkung = 17760;
								if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
								{
									Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
								}

								Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16100, :nMwStSenkung, :frmRechPos.dfArztNr, :frmRechPos.dtBuchDat, :frmRechPos.strBuchText, :frmRechPos.nMwPorto, 5)");
							}
							// 23.04.12 Ä734
							Int.SqlImmedSel(@"SELECT hbankeinzug, hbezblz, hbezkonto, hbeziban, hbezbic, hbezsigndat
INTO :frmRechPos.nDiverse, :frmRechPos.strBEZBLZ, :frmRechPos.strBEZKonto, :frmRechPos.strBEZIBAN, :frmRechPos.strBEZBIC, :frmRechPos.dtBEZSignDat
FROM H WHERE HARZTNR = :frmRechPos.dfNBArztNr AND HHALTERNR = :frmRechPos.dfNBHalterNr");
							if (this.nDiverse == 1 && this.dtBEZSignDat != SalDateTime.Null) 
							{
								// 20.01.14
								// If strBEZBLZ = ''
								// If 1 = SalModalDialog(dlgEinString1, hWndForm, 'Die BLZ fehlt. Bitte geben Sie sie hier ein:',
								// '', '','','', strBEZBLZ, 8, '')
								// If strBEZKonto = ''
								// If 1 = SalModalDialog(dlgEinString1, hWndForm, 'Das Konto fehlt. Bitte geben Sie es hier ein:',
								// '', '','','', strBEZKonto, 8, '')
								if (this.strBEZIBAN == "") 
								{
									if (1 == dlgEinString1.ModalDialog(this, "Die IBAN fehlt. Bitte geben Sie sie hier ein:", "", "", "", "", ref this.strBEZIBAN, 8, "")) 
									{
									}
								}
								if (this.strBEZBIC == "") 
								{
									if (1 == dlgEinString1.ModalDialog(this, "Die BIC fehlt. Bitte geben Sie sie hier ein:", "", "", "", "", ref this.strBEZBIC, 8, "")) 
									{
									}
								}
								Int.SqlIstDa(@"FROM bezs WHERE bezsarztnr = :frmRechPos.dfNBArztNr  AND bezshalternr = :frmRechPos.dfNBHalterNr
AND bezsrechnr IS NULL", ref Var.bExists); // 21.02.18 F3090 weg:  AND bezserldat IS NULL
								if (!(Var.bExists)) 
								{
									Int.SqlImmed(@"INSERT INTO bezs (bezsarztnr, bezshalternr, bezsrechnr, bezserfdat, bezsblz, bezskonto, bezsabdatum, bezstag, bezsiban, bezsbic, bezssigndat)
VALUES(:frmRechPos.dfNBArztNr, :frmRechPos.dfNBHalterNr, :frmRechPos.nRechNr,
SYSDATETIME, :frmRechPos.strBEZBLZ, :frmRechPos.strBEZKonto, NULL, 1, :frmRechPos.strBEZIBAN, :frmRechPos.strBEZBIC, :frmRechPos.dtBEZSignDat)");
									Int.PalLog("RechPos BEZEintrag");
								}
							}
						}
					}
					this.lsText = "***Neuberechnung durch " + Var.strBNUser + " nach Storno von " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0) + "/R" + Int.PalStrNum(this.dfRechNr.Number, 6, 0) + @"

Grund:
" + this.mlGrund.Text;
					if (this.cbNBja.Checked) 
					{
						this.strKuerzel = App.frmMain.strUser.Left(2);
						// 13.05.14 F2027
						this.dfNBHalterNr.Number = Int.PalCheckNULL(this.dfNBHalterNr.Number);

						Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmRechPos.dfNBArztNr, :frmRechPos.dfNBHalterNr, :frmRechPos.nRechNr,
:frmRechPos.lsText , SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,1, SYSDATETIME)");
					}
					// N E U E    R E C H N U N G 2
					// If cbKomplett
					// Call SalTblSetFlagsAnyRows(tblRechPos, ROW_Selected, TRUE, 0, 0)
					this.dtRechDat = SalDateTime.Current;
					this.dtAktZeit = this.dtRechDat;
					if (this.cbNB2.Checked) 
					{
						this.dtRechDat = SalDateTime.Current;
						Int.SqlImmedSel(@"SELECT max(rkrechnr) INTO :frmRechPos.nRechNr
FROM RK WHERE rkarztnr=:frmRechPos.dfNB2ArztNr AND rkrechnr <999990");
						Int.SqlImmedSel(@"SELECT max(lerechnr) INTO :frmRechPos.nRechNrLe
FROM LE WHERE learztnr=:frmRechPos.dfNB2ArztNr");
						if (this.nRechNrLe > this.nRechNr) 
						{
							this.nRechNr = this.nRechNrLe;
						}
						this.nRechNr = this.nRechNr + 1;
						// Set dtAktZeit = SalDateCurrent()
						this.nZeile = Sys.TBL_MinRow;
						while (this.tblRechPos.FindNextRow(ref this.nZeile, 0, Sys.ROW_Selected)) 
						{
							this.tblRechPos.SetFocusRow(this.nZeile);
							// If rbNBja
							if (this.tblRechPos.coldtPosZeit.DateTime == Sys.DATETIME_Null) 
							{
								this.tblRechPos.coldtPosZeit.DateTime = SalDateTime.Current;
							}
							// 06.02.18 Ä1698 + rprabatt
							Int.SqlImmed(@"INSERT INTO rp
(rparztnr, rphalternr, rprechnr, rpla, rpmwst, rprechtext, rpdatum, rpdm, rptext, RPZEIDAT, rpreverseversion, rprabatt)
VALUES(:frmRechPos.dfNB2ArztNr,  :frmRechPos.dfNB2HalterNr,  :frmRechPos.nRechNr,
:frmRechPos.tblRechPos.colsLA, :frmRechPos.tblRechPos.colnMwSt,
:frmRechPos.tblRechPos.colsRechText, :frmRechPos.tblRechPos.coldtDatum,
:frmRechPos.tblRechPos.colnDM, :frmRechPos.tblRechPos.colnText, :frmRechPos.tblRechPos.coldtPosZeit, :frmRechPos.tblRechPos.colnReverseVersion,
:frmRechPos.tblRechPos.colnRabatt)");
						}

						this.strLLQuery = this.strLLQuery + " OR (rkarztnr =  " + this.dfNB2ArztNr.Number.ToString(0) + " AND rkrechnr = " + this.nRechNr.ToString(0) + ") ";

						this.nOPFaellTg = -1;
						this.nFaellTg = 14; // Vorgabe
						// 05.05.11 Ä572 + Land / 05.12.12 F1465 + hreverse
						Int.SqlImmedSel(@"SELECT hfaelltg, hland, hreverse
INTO :frmRechPos.nOPFaellTg, :frmRechPos.strTHLand, :frmRechPos.nTHReverse
FROM H WHERE HARZTNR = :frmRechPos.dfNB2ArztNr AND HHALTERNR = :frmRechPos.dfNB2HalterNr");
						if (this.nOPFaellTg == -1 || this.nOPFaellTg == SalNumber.Null) 
						{
							Int.SqlImmedSel(@"SELECT afaelltg
INTO :frmRechPos.nOPFaellTg
FROM A WHERE AARZTNR = :frmRechPos.dfNB2ArztNr");
							if (this.nOPFaellTg == -1 || this.nOPFaellTg == SalNumber.Null) 
							{
								this.nOPFaellTg = this.nFaellTg;
							}
						}
						this.nFaellTg = this.nOPFaellTg;

						this.dtRkFaellDat = this.dtRechDat + this.nFaellTg;
						// 12.12.97  	Verjährung auf erstes Leistungsdatum
						this.dtRkErstLeistDat = this.dtRechDat;
						Int.SqlImmedSel(@"SELECT min(rpdatum)
INTO :frmRechPos.dtRkErstLeistDat
FROM rp
WHERE rparztnr=:frmRechPos.dfNB2ArztNr
AND rprechnr = :frmRechPos.nRechNr
AND rpdatum is not null");
						// 27.09.05 Verjährung auf 3 jahre gesetzt.
						// 05.05.11 Ä572 + AT
						if (this.strTHLand == "AT") 
						{
							this.dtRkVerjaehr = new SalDateTime(this.dtRkErstLeistDat.Year() + 3, this.dtRkErstLeistDat.Month(), this.dtRkErstLeistDat.Day(), 0, 0, 0);
						}
						else
						{
							if (this.dtRkErstLeistDat < new SalDateTime(2001, 1, 1)) 
							{
								this.dtRkVerjaehr = new SalDateTime(this.dtRkErstLeistDat.Year() + 2, 12, 31, 0, 0, 0);
							}
							else
							{
								this.dtRkVerjaehr = new SalDateTime(this.dtRkErstLeistDat.Year() + 3, 12, 31, 0, 0, 0);
							}
						}


						this.nBuchLeis = this.BerechneBrutto(this.dfNB2ArztNr.Number, this.dfNB2HalterNr.Number, this.nRechNr, "L");
						this.nBuchArzn = this.BerechneBrutto(this.dfNB2ArztNr.Number, this.dfNB2HalterNr.Number, this.nRechNr, "A");
						// Set dtRkVerjaehr = SalDateConstruct(SalDateYear(dtRkErstLeistDat)+2,12,31,0,0,0)
						// 05.12.12 F1465 + RKREVERSE
						if (Int.SqlImmedX(@"INSERT INTO RK (RKARZTNR, RKHALTERNR, RKRECHNR,
RKBUCHTEXT, RKRECHDAT, RKFAELLDAT, RKDMLEIS, RKDMARZN,  RKDMMAHN, RKDMZINS, RKMBDMOPL,
RKVERJAEHR,RKZALEIS,RKZAARZN,RKZAMAHN, RKZAZINS, RKMBZAOPL, RKKZZAHL,RKKZ, RKMAHNSTUFE, RKREVERSE)
VALUES(:frmRechPos.dfNB2ArztNr, :frmRechPos.dfNB2HalterNr, :frmRechPos.nRechNr,
'Rechnung', SYSDATE, :frmRechPos.dtRkFaellDat, :frmRechPos.nBuchLeis, :frmRechPos.nBuchArzn,0,0,0,
:frmRechPos.dtRkVerjaehr,0, 0,0,0,0,0,0,0, :frmRechPos.nTHReverse)")) 
						{
							// 28.05.21 Ä1962
							// Set strBuchText = 'NeuB' || PalStrNum(dfNB2ArztNr,4,0)  || '/'
							// || PalStrNum(dfNB2HalterNr,5,0)|| '/' || PalStrNum(nRechNr,5,0)
							this.strBuchText = "Neue Berechnung " + Int.PalStrNum(this.dfNB2ArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfNB2HalterNr.Number, 5, 0) + "/" + Int.PalStrNum(this.nRechNr, 5, 0);

							// 06.03.23 Ä2086
							this.dtBuchDat = SalDateTime.Current;
							Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
							if (this.dtBuchDat < Var.dtINIMinBuchDat) 
							{
								this.dtBuchDat = Var.dtINIMinBuchDat;
							}

							this.nBuchDM = this.nBuchLeis + this.nBuchArzn;
							this.SetStatusBarText("TA-Buchungen");
							// 20.11.23 Ä2144 + tkkontcode
							Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkreverse, tkkontocode)
VALUES (:frmRechPos.dfNB2ArztNr, 0, 0, :frmRechPos.strBuchText,
:frmRechPos.dfNB2HalterNr, :frmRechPos.nRechNr, NULL,
:frmRechPos.dtBuchDat, 0, :frmRechPos.nBruPorto, 0, :frmRechPos.nMwPorto,0,
0,0, 0,:nCheckMwSt, 0, 0, :frmRechPos.nBuchDM, :frmRechPos.nBruPorto, 0, :frmRechPos.nTAReverse,'RechPos-')");
							// 08.05.09
							// Set frmMain.dtHBBuchDat = SalDateCurrent()
							// If nBuchLeis != 0
							// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
							// VALUES(:frmRechPos.dfNB2ArztNr, :frmRechPos.dfNB2HalterNr, :frmRechPos.nRechNr, SYSDATE, \'RGLe\', :frmMain.dtHBBuchDat, :frmRechPos.nBuchLeis, 16420, NULL, :frmRechPos.strBuchText)')
							// If nBuchArzn != 0
							// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
							// VALUES(:frmRechPos.dfNB2ArztNr, :frmRechPos.dfNB2HalterNr, :frmRechPos.nRechNr, SYSDATE, \'RGAr\', :frmMain.dtHBBuchDat, :frmRechPos.nBuchArzn, 16420, NULL, :frmRechPos.strBuchText)')

							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16000, 16400, :frmRechPos.dfNB2ArztNr, :frmRechPos.dtBuchDat, :frmRechPos.strBuchText,
:frmRechPos.nBuchDM, 5)");
							// 02.07.09 OTÄ270 if cbPorto
							if (this.cbPorto.Checked) 
							{
								// 14.04.14 Ä1046
								if (Int.PalCheckAuslTA(this.dfNB2ArztNr.Number) == "EU") 
								{
									App.frmMain.nErloeskonto = 81710;
								}
								else
								{
									App.frmMain.nErloeskonto = 81700;
									// 30.06.20 Ä1892
									if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
									{
										App.frmMain.nErloeskonto = Int.PalKontenMwStSenkung(App.frmMain.nErloeskonto);
									}
								}

								this.strBuchText = "Porto";
								Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16100, :frmMain.nErloeskonto, :frmRechPos.dfNB2ArztNr, :frmRechPos.dtBuchDat, :frmRechPos.strBuchText,
:nPorto1, 5)");
								this.strBuchText = "MwSt";
								// 30.06.20 Ä1892
								Var.nMwStSenkung = 17760;
								if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
								{
									Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
								}

								Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16100, :nMwStSenkung, :frmRechPos.dfArztNr, :frmRechPos.dtBuchDat, :frmRechPos.strBuchText, :frmRechPos.nMwPorto, 5)");
							}
							// 23.04.12 Ä734
							Int.SqlImmedSel(@"SELECT hbankeinzug, hbezblz, hbezkonto, hbeziban, hbezbic, hbezsigndat
INTO :frmRechPos.nDiverse, :frmRechPos.strBEZBLZ, :frmRechPos.strBEZKonto, :frmRechPos.strBEZIBAN, :frmRechPos.strBEZBIC, :frmRechPos.dtBEZSignDat
FROM H WHERE HARZTNR = :frmRechPos.dfNB2ArztNr AND HHALTERNR = :frmRechPos.dfNB2HalterNr AND hdeaktiv IS NULL");
							if (this.nDiverse == 1 && this.dtBEZSignDat != SalDateTime.Null) 
							{
								// 20.01.14
								// If strBEZBLZ = ''
								// If 1 = SalModalDialog(dlgEinString1, hWndForm, 'Die BLZ fehlt. Bitte geben Sie sie hier ein:',
								// '', '','','', strBEZBLZ, 8, '')
								// If strBEZKonto = ''
								// If 1 = SalModalDialog(dlgEinString1, hWndForm, 'Das Konto fehlt. Bitte geben Sie es hier ein:',
								// '', '','','', strBEZKonto, 8, '')
								if (this.strBEZIBAN == "") 
								{
									if (1 == dlgEinString1.ModalDialog(this, "Die IBAN fehlt. Bitte geben Sie sie hier ein:", "", "", "", "", ref this.strBEZIBAN, 8, "")) 
									{
									}
								}
								if (this.strBEZBIC == "") 
								{
									if (1 == dlgEinString1.ModalDialog(this, "Die BIC fehlt. Bitte geben Sie sie hier ein:", "", "", "", "", ref this.strBEZBIC, 8, "")) 
									{
									}
								}
								Int.SqlIstDa(@"FROM bezs WHERE bezsarztnr = :frmRechPos.dfNB2ArztNr  AND bezshalternr = :frmRechPos.dfNB2HalterNr
AND bezsrechnr IS NULL", ref Var.bExists); // 21.02.18 F3090 weg:  AND bezserldat IS NULL
								if (!(Var.bExists)) 
								{
									Int.SqlImmed(@"INSERT INTO bezs (bezsarztnr, bezshalternr, bezsrechnr, bezserfdat, bezsblz, bezskonto, bezsabdatum, bezstag, bezsiban, bezsbic, bezssigndat)
VALUES(:frmRechPos.dfNB2ArztNr, :frmRechPos.dfNB2HalterNr, :frmRechPos.nRechNr,
SYSDATETIME, :frmRechPos.strBEZBLZ, :frmRechPos.strBEZKonto, NULL, 1, :frmRechPos.strBEZIBAN, :frmRechPos.strBEZBIC, :frmRechPos.dtBEZSignDat)");
								}
							}
						}
					}


					this.strKuerzel = Var.strBNZei;
					this.lsText = "***Rechnung storniert durch " + Var.strBNUser + @"

Grund:
" + this.mlGrund.Text;
					if (this.rbKomplett.Checked) 
					{
						this.lsText = this.lsText + @"

Komplettrechnung";
					}
					else if (this.rbTeil.Checked) 
					{
						this.lsText = this.lsText + @"

Teilrechnung";
					}
					else if (this.rbEuro.Checked) 
					{
						this.lsText = this.lsText + @"

€ " + Int.PalStrNum(this.dfEuro.Number, 8, 2);
					}
					if (this.cbNBKeine.Checked) 
					{
						this.lsText = this.lsText + " ohne Neuberechnung";
					}
					if (this.cbNBja.Checked) 
					{
						this.lsText = this.lsText + " mit Neuberechnung an " + Int.PalStrNum(this.dfNBArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfNBHalterNr.Number, 5, 0);
					}
					if (this.cbNB2.Checked) 
					{
						this.lsText = this.lsText + " mit Neuberechnung an " + Int.PalStrNum(this.dfNB2ArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfNB2HalterNr.Number, 5, 0);
					}
					// 13.05.14 F2027
					this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

					Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmRechPos.dfArztNr, :frmRechPos.dfHalterNr, :frmRechPos.dfRechNr,
:frmRechPos.lsText , SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");

					this.lsText = "***Neuberechnung durch " + Var.strBNUser + " nach Storno von " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0) + "/R" + Int.PalStrNum(this.dfRechNr.Number, 6, 0) + @"

Grund:
" + this.mlGrund.Text;
					if (this.cbNB2.Checked) 
					{
						// 13.05.14 F2027
						this.dfNB2HalterNr.Number = Int.PalCheckNULL(this.dfNB2HalterNr.Number);

						Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmRechPos.dfNB2ArztNr, :frmRechPos.dfNB2HalterNr, :frmRechPos.nRechNr,
:frmRechPos.lsText , SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,1, SYSDATETIME)");
					}
					this.SetStatusBarText("Stornierung durchgeführt");
					// LL
					if (this.strLLQuery != "") 
					{
						this.strLLQuery = " (" + this.strLLQuery.Mid(4, 4096) + ")";
						// 19.03.08
						if (this.cbA4.Checked) 
						{
							if (1 == dlgLlDruck.ModalDialog(App.frmMain, "Rechnung A4.lst", "RK2")) 
							{
								if (this.cbUeberw.Checked)  // 25.06.08
								{
									dlgLlDruck.ModalDialog(App.frmMain, "Überweisung A4.lst", "RK2");
								}
							}
						}
						else
						{
							if (1 == dlgLlDruck.ModalDialog(App.frmMain, "Rechnungen.lst", "RK2")) 
							{
							}
						}
						// Call SalModalDialog( dlgLlDruck, frmMain, 'Rechnungen.lst', 'RK' )
					}

					Sal.MessageBeep(0);
					// 04.04.08
					this.pbOk.DisableWindow();

					Sal.WaitCursor(false);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblRechPos
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblRechPosTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmRechPos _frmRechPos = null;
			
			
			#region Window Variables
			public SalBoolean bPFarbe = false;
			#endregion
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblRechPosTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmRechPos frmRechPos
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmRechPos == null) 
					{
						_frmRechPos = (frmRechPos)this.FindForm();
					}
					return _frmRechPos;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblRechPosTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblRechPosTableWindow)SalWindow.FromHandle(handle, typeof(tblRechPosTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class BerechneBruttoLocals
			{
				public SalSqlHandle hSqlBrutto = SalSqlHandle.Null;
				public SalNumber nFetchBrutto = 0;
				public SalNumber nPBrutto = 0;
				public SalNumber nPArzt = 0;
				public SalNumber nPHalter = 0;
				public SalNumber nPRech = 0;
				public SalString strPLA = "";
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class UpdateRechPositionLocals
			{
				public SalString strROWIDLocal = "";
				public SalNumber nInd = 0;
				public SalString pnSelect = "";
				public SalNumber nZahl = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnProzMwSt = 0;
				public SalNumber pnDiverse = 0;
				public SalNumber pnRP1MwSt = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class BucheTKMwStLocals
			{
				public SalSqlHandle hSqlBrutto = SalSqlHandle.Null;
				public SalNumber nFetchBrutto = 0;
				public SalNumber nPBrutto = 0;
				public SalNumber nPMwSt = 0;
				public SalNumber nPArzt = 0;
				public SalNumber nPHalter = 0;
				public SalNumber nPRech = 0;
				public SalBoolean bPPorto = false;
			}
		}
		#endregion
	}
}
