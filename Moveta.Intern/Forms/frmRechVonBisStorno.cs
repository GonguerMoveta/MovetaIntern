// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// 08.12.20 Ã„1897
	/// </summary>
	public partial class frmRechVonBisStorno : SalFormWindow
	{
		#region Window Variables
		public SalNumber nPCount = 0;
		public SalSqlHandle hSqlStorno = SalSqlHandle.Null;
		public SalNumber nFetchStorno = 0;
		public SalNumber nPArztNr = 0;
		public SalNumber nPHalterNr = 0;
		public SalNumber nPRechNr = 0;
		public SalString strRechList = "";
		public SalNumber nJob = 0;
		public SalSqlHandle hSqlRp = SalSqlHandle.Null;
		public SalSqlHandle hSqlRk = SalSqlHandle.Null;
		public SalSqlHandle hSqlDisk = SalSqlHandle.Null;
		public SalSqlHandle hSqlLe = SalSqlHandle.Null;
		public SalSqlHandle hSqlUpdateRP = SalSqlHandle.Null;
		public SalNumber nFetchRp = 0;
		public SalNumber nFetchLe = 0;
		public SalString strSelect = "";
		public SalBoolean bZettel = false;
		public SalNumber nSeite = 0;
		public SalNumber nZeile = 0;
		public SalNumber nRpZeile = 0;
		public SalDateTime dtRechDat = SalDateTime.Null;
		public SalDateTime dtFaellDat = SalDateTime.Null;
		public SalString strDrucker = "";
		public SalString strLogo = "";
		public SalNumber nErr = 0;
		public SalNumber nFetch = 0;
		public SalNumber nStatus = 0;
		public SalWindowHandle hWndReport = SalWindowHandle.Null;
		public SalString strReportName = "";
		public SalNumber nArztNrX = 0;
		public SalString strTAN1 = "";
		public SalString strTAN2 = "";
		public SalString strTAStr = "";
		public SalString strTAOrt = "";
		public SalNumber nHalterNrX = 0;
		public SalString strTHAnr = "";
		public SalString strTHN1 = "";
		public SalString strTHN2 = "";
		public SalString strTHStr = "";
		public SalString strTHOrt = "";
		public SalString strTHLand = "";
		public SalNumber nRechNrX = 0;
		public SalNumber nRechNr = 0;
		public SalDateTime dtDatum = SalDateTime.Null;
		public SalString strLA = "";
		public SalNumber nMwSt = 0;
		public SalString strText = "";
		public SalNumber nDM = 0;
		public SalNumber nText = 0;
		public SalString strRT1 = "";
		public SalString strRT2 = "";
		public SalString strMZF = "";
		public SalNumber nBrutto = 0;
		public SalDateTime dtAktZeit = SalDateTime.Null;
		public SalDateTime dtPosZeit = SalDateTime.Null;
		public SalString strBearbDatum = "";
		public SalSqlHandle hSqlRechPos = SalSqlHandle.Null;
		public SalNumber nFetchRechPos = 0;
		public SalString strBruttoLA = "";
		public SalNumber nBruttoMwSt = 0;
		public SalNumber nBruttoDM = 0;
		public SalNumber nUeber = 0;
		public SalNumber nCount = 0;
		public SalNumber nError = 0;
		public SalNumber nFileSize = 0;
		public SalNumber nFileSize0 = 0;
		public SalNumber nDMRest = 0;
		public SalNumber nMS = 0;
		public SalString strNBTi = "";
		public SalString strNBVN = "";
		public SalString strNBNN = "";
		public SalString strNBName2 = "";
		public SalString strNBStr = "";
		public SalString strNBOrt = "";
		public SalString strNB2Ti = "";
		public SalString strNB2VN = "";
		public SalString strNB2NN = "";
		public SalString strNB2Name2 = "";
		public SalString strNB2Str = "";
		public SalString strNB2Ort = "";
		public SalNumber nNBRechNr = 0;
		public SalNumber nRechNr1 = 0;
		public SalNumber nRechNrLe = 0;
		public SalNumber nKZPraxArt = 0;
		public SalNumber nBuchLeis = 0;
		public SalNumber nBuchArzn = 0;
		public SalNumber nBuchMahn = 0;
		public SalNumber nBuchZins = 0;
		public SalString strKuerzel = "";
		public SalString lsText = "";
		public SalNumber nRestGuthaben = 0;
		public SalNumber nBuchDM = 0;
		public SalNumber nBuchDMHF = 0;
		public SalNumber nBuchDMRest = 0;
		public SalNumber nDMLeis = 0;
		public SalNumber nDMArzn = 0;
		public SalNumber nDMMahn = 0;
		public SalNumber nDMZins = 0;
		public SalNumber nProzNr = 0;
		public SalNumber nDiverse = 0;
		public SalNumber nPosNr = 0;
		public SalString strBuchText = "";
		public SalNumber nFlagsOn = 0;
		public SalDateTime dtZeiDat = SalDateTime.Null;
		public SalNumber nRkMwSt = 0;
		public SalNumber nOPFaellTg = 0;
		public SalNumber nFaellTg = 0;
		public SalDateTime dtRkFaellDat = SalDateTime.Null;
		public SalDateTime dtRkRechDat = SalDateTime.Null;
		public SalDateTime dtRkErstLeistDat = SalDateTime.Null;
		public SalDateTime dtRkVerjaehr = SalDateTime.Null;
		public SalNumber nZaLeis = 0;
		public SalNumber nZaArzn = 0;
		public SalNumber nZaMahn = 0;
		public SalNumber nZaZins = 0;
		public SalNumber nMwPorto = 0;
		public SalNumber nBruPorto = 0;
		public SalString strLLQuery = "";
		public SalDateTime dtSperrdatum = SalDateTime.Null;
		public SalNumber nDMAusbuch = 0;
		public SalNumber nTAReverse = 0;
		public SalNumber nTHReverse = 0;
		public SalString strBEZBLZ = "";
		public SalString strBEZKonto = "";
		public SalString strBEZIBAN = "";
		public SalString strBEZBIC = "";
		public SalDateTime dtBEZSignDat = SalDateTime.Null;
		public SalNumber nBruttoZahl = 0;
		public SalString lsROWIDs = "";
		public SalNumber nRP1MwSt = 0;
		public SalDateTime dtBuchDat = SalDateTime.Null;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmRechVonBisStorno()
		{
			// Assign global reference.
			App.frmRechVonBisStorno = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmRechVonBisStorno CreateWindow(Control owner)
		{
			frmRechVonBisStorno frm = new frmRechVonBisStorno();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmRechVonBisStorno FromHandle(SalWindowHandle handle)
		{
			return ((frmRechVonBisStorno)SalWindow.FromHandle(handle, typeof(frmRechVonBisStorno)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <param name="nPArzt"></param>
		/// <param name="nPHalter"></param>
		/// <param name="nPRech"></param>
		/// <param name="strPLA"></param>
		/// <returns></returns>
		public SalNumber BerechneBrutto(SalNumber nPArzt, SalNumber nPHalter, SalNumber nPRech, SalString strPLA)
		{
			#region Local Variables
			SqlLocals.BerechneBruttoLocals locals = new SqlLocals.BerechneBruttoLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.nPArzt = nPArzt;
				locals.nPHalter = nPHalter;
				locals.nPRech = nPRech;
				locals.strPLA = strPLA;

				locals.nPBrutto = 0;
				Int.SqlConnection(ref locals.hSqlBrutto);

				if (locals.strPLA == "L") 
				{
					Int.SqlHandleExec(locals.hSqlBrutto, @"SELECT rpla, rpmwst, sum(rpdm)
FROM rp
WHERE rparztnr = " + locals.nPArzt.ToString(0) + @"
AND rphalternr = " + locals.nPHalter.ToString(0) + @"
AND rprechnr = " + locals.nPRech.ToString(0) + @"
AND rpla <> 'A'
GROUP BY 1,2
INTO :frmRechVonBisStorno.strBruttoLA, :frmRechVonBisStorno.nBruttoMwSt, :frmRechVonBisStorno.nBruttoDM", "BruttoDM errechnen bei RechKopieDruck", ref nErr);
				}
				else
				{
					Int.SqlHandleExec(locals.hSqlBrutto, @"SELECT rpla, rpmwst, sum(rpdm)
FROM rp
WHERE rparztnr = " + locals.nPArzt.ToString(0) + @"
AND rphalternr = " + locals.nPHalter.ToString(0) + @"
AND rprechnr = " + locals.nPRech.ToString(0) + @"
AND rpla = 'A'
GROUP BY 1,2
INTO :frmRechVonBisStorno.strBruttoLA, :frmRechVonBisStorno.nBruttoMwSt, :frmRechVonBisStorno.nBruttoDM", "BruttoDM errechnen bei RechKopieDruck", ref nErr);
				}
				locals.nFetchBrutto = locals.hSqlBrutto.FetchNext();
				while (locals.nFetchBrutto != Sys.FETCH_EOF) 
				{
					locals.nPBrutto = locals.nPBrutto + nBruttoDM + (nBruttoDM * nBruttoMwSt).Round() / 100.00m;
					locals.nFetchBrutto = locals.hSqlBrutto.FetchNext();
				}
				locals.hSqlBrutto.Commit();
				locals.hSqlBrutto.Disconnect();
				if (locals.nPBrutto == SalNumber.Null) 
				{
					locals.nPBrutto = 0;
				}
				return locals.nPBrutto;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnProzMwSt"></param>
		/// <param name="pnDiverse"></param>
		/// <param name="pnRP1MwSt"></param>
		/// <returns></returns>
		public SalNumber UpdateRechPosition(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnRechNr, SalNumber pnProzMwSt, SalNumber pnDiverse, SalNumber pnRP1MwSt)
		{
			#region Local Variables
			SqlLocals.UpdateRechPositionLocals locals = new SqlLocals.UpdateRechPositionLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnRechNr = pnRechNr;
				locals.pnProzMwSt = pnProzMwSt;
				locals.pnDiverse = pnDiverse;
				locals.pnRP1MwSt = pnRP1MwSt;

				// 02.12.14 Ã„1104
				locals.pnSelect = @"SELECT ROWID, rpdmzahl
FROM RP
INTO :strROWIDLocal, :nZahl
WHERE rparztnr = :pnArztNr
AND rprechnr = :pnRechNr
AND rpmwst = :pnProzMwSt";

				if (locals.phSql.PrepareAndExecute(locals.pnSelect)) 
				{
					if (locals.phSql.FetchNext(ref locals.nInd)) 
					{
						if (locals.nZahl == SalNumber.Null) 
						{
							locals.nZahl = 0;
						}
						locals.pnDiverse = locals.nZahl + locals.pnDiverse - locals.pnRP1MwSt;
						if (locals.phSql.PrepareAndExecute(@"
UPDATE RP SET
rpdmzahl = :pnDiverse
WHERE ROWID = :strROWIDLocal")) 
						{
							locals.phSql.Commit();
						}
					}
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPArzt"></param>
		/// <param name="nPHalter"></param>
		/// <param name="nPRech"></param>
		/// <param name="bPPorto"></param>
		/// <returns></returns>
		public SalNumber BucheTKMwSt(SalNumber nPArzt, SalNumber nPHalter, SalNumber nPRech, SalBoolean bPPorto)
		{
			#region Local Variables
			SqlLocals.BucheTKMwStLocals locals = new SqlLocals.BucheTKMwStLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.nPArzt = nPArzt;
				locals.nPHalter = nPHalter;
				locals.nPRech = nPRech;
				locals.bPPorto = bPPorto;

				locals.nPBrutto = 0;
				// 06.03.23 Ã„2086
				dtBuchDat = SalDateTime.Current;
				Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
				if (dtBuchDat < Var.dtINIMinBuchDat) 
				{
					dtBuchDat = Var.dtINIMinBuchDat;
				}

				Int.SqlConnection(ref locals.hSqlBrutto);
				if (locals.bPPorto) 
				{
					this.nDiverse = this.nBruPorto;
				}
				else
				{
					this.nDiverse = 0;
				}
				this.nBuchDM = this.nBuchLeis + this.nBuchArzn;
				if (this.nDiverse != 0) 
				{
					Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkreverse)
VALUES (:frmRechVonBisStorno.nPArztNr, 3, 0, :frmRechVonBisStorno.strBuchText, :frmRechVonBisStorno.nPHalterNr, :frmRechVonBisStorno.nPRechNr, NULL, :frmRechVonBisStorno.dtBuchDat,
0, :frmRechVonBisStorno.nBruPorto,
0 , :frmRechVonBisStorno.nMwPorto, 0, 0,0, 0,:nCheckMwSt, 0, 0,
0, :frmRechVonBisStorno.nDiverse, 0, 0)");
				}

				Int.SqlHandleExec(locals.hSqlBrutto, @"SELECT rpmwst, sum(rpdm)
FROM rp
WHERE rparztnr = " + locals.nPArzt.ToString(0) + @"
AND rphalternr = " + locals.nPHalter.ToString(0) + @"
AND rprechnr = " + locals.nPRech.ToString(0) + @"
GROUP BY 1
INTO :frmRechVonBisStorno.nBruttoMwSt, :frmRechVonBisStorno.nBruttoDM", "BucheTKMwSt bei RechKopieDruck", ref nErr);
				locals.nFetchBrutto = locals.hSqlBrutto.FetchNext();
				while (locals.nFetchBrutto != Sys.FETCH_EOF) 
				{
					locals.nPMwSt = (nBruttoDM * nBruttoMwSt * -1).Round() / 100;
					locals.nPMwSt = locals.nPMwSt * -1;
					locals.nPBrutto = nBruttoDM + locals.nPMwSt;
					if (locals.nPBrutto != 0)  // 25.02.15
					{
						this.nBuchDM = locals.nPBrutto;
						if (locals.nPBrutto > nBuchDM) 
						{
							locals.nPBrutto = nBuchDM;
						}

						// 17.03.15 F2317 und F2318 (nRechNr -> dfRechNr)
						// Call SqlImmedX('INSERT INTO TK
						// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
						// tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
						// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkreverse)
						// VALUES (:frmRechPos.dfArztNr, 3 , 0, :frmRechPos.strBuchText, :frmRechPos.dfHalterNr, :frmRechPos.nRechNr, NULL, SYSDATE, 0, :frmRechPos.nDiverse,
						// 0 , 0, 0, 0,0, 0,' || SalNumberToStrX( nBruttoMwSt,0) || ', 0, 0,
						// :frmRechPos.nBuchDM, :frmRechPos.nDiverse, 0, :frmRechPos.nTAReverse)')
						Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkreverse)
VALUES (:frmRechVonBisStorno.nPArztNr, 3, 0, :frmRechVonBisStorno.strBuchText, :frmRechVonBisStorno.nPHalterNr, :frmRechVonBisStorno.nPRechNr, NULL,
:frmRechVonBisStorno.dtBuchDat, 0, 0,
0 , 0, 0, 0,0, 0," + nBruttoMwSt.ToString(0) + ", 0, 0, " + Int.PalStrNumDecPoint(locals.nPBrutto * -1, 12, 2) + ", 0, 0, 0)");
						// Call SqlImmedX('INSERT INTO TK
						// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
						// tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
						// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkreverse)
						// VALUES (:frmRechPos.dfNB2ArztNr, 0, 0, :frmRechPos.strBuchText,
						// :frmRechPos.dfNB2HalterNr, :frmRechPos.nRechNr, NULL,
						// SYSDATE, 0, :frmRechPos.nBruPorto, 0, :frmRechPos.nMwPorto,0,
						// 0,0, 0,:nCheckMwSt, 0, 0, ' || SalNumberToStrX( nPBrutto * -1,0) || ', :frmRechPos.nBruPorto, 0, :frmRechPos.nTAReverse)')
						this.nBuchDM = this.nBuchDM - locals.nPBrutto;
						this.nDiverse = 0;
						// 24.03.15 F2317
						nRP1MwSt = (locals.nPBrutto * nBruttoMwSt * 100 / (100 + nBruttoMwSt)).Round() / 100;
						UpdateRechPosition(hSqlUpdateRP, nPArztNr, nPRechNr, nBruttoMwSt, locals.nPBrutto, nRP1MwSt);
					}
					// Call SqlImmedX('INSERT INTO TK
					// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
					// tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
					// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkreverse)
					// VALUES (:frmRechPos.dfArztNr, 3, 0, :frmRechPos.strBuchText,
					// :frmRechPos.dfHalterNr, :frmRechPos.nRechNr, NULL,
					// SYSDATE, 0, :frmRechPos.nBruPorto,0 , :frmRechPos.nMwPorto, 0,
					// 0,0, 0,:nCheckMwSt, 0, 0, :frmRechPos.nBuchDM, :frmRechPos.nBruPorto, 0, :frmRechPos.nTAReverse)')
					locals.nFetchBrutto = locals.hSqlBrutto.FetchNext();
				}
				locals.hSqlBrutto.Commit();
				locals.hSqlBrutto.Disconnect();
				if (locals.nPBrutto == SalNumber.Null) 
				{
					locals.nPBrutto = 0;
				}
				return locals.nPBrutto;
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmRechVonBisStorno WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRechVonBisStorno_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmRechVonBisStorno_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRechVonBisStorno_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nPHaltervon.Number = 1;
			this.nPHalterbis.Number = 99999;
			this.nPRechvon.Number = 1;
			this.nPRechbis.Number = 999989;
			this.nPRechDatvon.DateTime = SalDateTime.Current;
			this.nPRechDatbis.DateTime = SalDateTime.Current;
			this.cbPorto.Checked = true;
			#endregion
		}
		
		/// <summary>
		/// nPRechvon WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void nPRechvon_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.nPRechvon_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void nPRechvon_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.nPRechvon.Number >= 999990) 
			{
				this.nPRechvon.Number = 999989;
			}
			#endregion
		}
		
		/// <summary>
		/// nPRechbis WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void nPRechbis_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.nPRechbis_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void nPRechbis_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.nPRechbis.Number >= 999990) 
			{
				this.nPRechbis.Number = 999989;
			}
			#endregion
		}
		
		/// <summary>
		/// pbStorno WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbStorno_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbStorno_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbStorno_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.strLLQuery = "(";
			if (this.nPArzt.Number != 0 && this.nPArzt.Number != Sys.NUMBER_Null) 
			{
				this.strLLQuery = this.strLLQuery + "rkarztnr = " + this.nPArzt.Number.ToString(0) + " AND ";
			}
			this.strLLQuery = this.strLLQuery + "rkhalternr BETWEEN " + this.nPHaltervon.Number.ToString(0) + " AND " + this.nPHalterbis.Number.ToString(0) + "  AND rkrechnr BETWEEN " + this.nPRechvon.Number.ToString(0) + " AND " + this.nPRechbis.Number.ToString(
				0) + " AND rkrechdat BETWEEN " + Int.PalDateToStr(this.nPRechDatvon.DateTime) + " AND " + Int.PalDateToStr(this.nPRechDatbis.DateTime);
			this.strLLQuery = this.strLLQuery + " ) ";
			// 06.03.23 Ã„2086
			this.dtBuchDat = SalDateTime.Current;
			Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
			if (this.dtBuchDat < Var.dtINIMinBuchDat) 
			{
				this.dtBuchDat = Var.dtINIMinBuchDat;
			}

			// 09.05.17 Ã„1544
			Int.SqlImmedSel("SELECT COUNT(*) INTO :frmRechVonBisStorno.nPCount FROM rk WHERE " + this.strLLQuery);
			if (this.nPCount == 0) 
			{
				Sal.MessageBox("Es sind keine passenden Rechnungen gefunden worden.", "Anzahl = 0", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			}
			else
			{
				if (Sys.IDYES == Sal.MessageBox("Sollen " + this.nPCount.ToString(0) + " Rechnungen storniert werden?", "Storno?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					Int.SqlImmedSel(@"SELECT akzpraxart into :frmRechVonBisStorno.nKZPraxArt
from A where aarztnr=:frmRechVonBisStorno.nPArztNr");
					Int.SqlConnection(ref this.hSqlStorno);
					this.hSqlUpdateRP.Connect();
					this.hSqlUpdateRP.SetParameter(Sys.DBP_PRESERVE, 1, "");
					this.strRechList = "";
					Int.SqlHandleExec(this.hSqlStorno, @"SELECT rkarztnr, rkhalternr, rkrechnr
INTO :frmRechVonBisStorno.nPArztNr, :frmRechVonBisStorno.nPHalterNr, :frmRechVonBisStorno.nPRechNr
FROM rk WHERE " + this.strLLQuery, "Rechnungen holen fÃ¼r Massenstorno", ref this.nErr);
					this.nFetchStorno = this.hSqlStorno.FetchNext();
					this.strLLQuery = "";
					while (this.nFetchStorno != Sys.FETCH_EOF) 
					{
						Sal.WaitCursor(true);
						if (this.cbPorto.Checked) 
						{
							// 03.05.10 OTÃ„420
							Var.nCheckMwSt = Int.PalCheckAuslMwSt(this.nPArztNr);
							// 18.04.11 Ã„563
							if (Var.nCheckMwSt == 0) 
							{
								this.nTAReverse = 1;
							}
							else
							{
								this.nTAReverse = 0;
							}

							this.nMwPorto = (Var.nPorto1 * Var.nCheckMwSt).Round() / 100;
							this.nBruPorto = Var.nPorto1 + this.nMwPorto;
						}
						else
						{
							this.nMwPorto = 0;
							this.nBruPorto = 0;
						}
						// 03.11.14 Ã„1067 + ReverseVersion

						// G U T S C H R I F T

						this.dtRechDat = SalDateTime.Current;
						this.dtAktZeit = this.dtRechDat;
						Int.SqlImmedSel(@"SELECT max(rkrechnr) INTO :frmRechVonBisStorno.nRechNr
FROM RK WHERE rkarztnr=:frmRechVonBisStorno.nPArztNr AND rkrechnr <999990");
						Int.SqlImmedSel(@"SELECT max(lerechnr) INTO :frmRechVonBisStorno.nRechNrLe
FROM LE WHERE learztnr=:frmRechVonBisStorno.nPArztNr");
						if (this.nRechNrLe > this.nRechNr) 
						{
							this.nRechNr = this.nRechNrLe;
						}
						this.nRechNr = this.nRechNr + 1;

						this.strText = "Stornierung der Rechnung " + Int.PalStrNum(this.nPArztNr, 4, 0) + "/R" + Int.PalStrNum(this.nPRechNr, 6, 0);
						if (this.nKZPraxArt > 1)  // Apotheke
						{
							this.strLA = Var.strA;
						}
						else
						{
							this.strLA = Var.strL;
						}
						Int.SqlImmed(@"INSERT INTO RP (rparztnr, rphalternr, rprechnr, rpla, rpmwst, rprechtext, rpdatum, rpdm, rptext, rpzeidat)
VALUES(:frmRechVonBisStorno.nPArztNr,  :frmRechVonBisStorno.nPHalterNr, :frmRechVonBisStorno.nRechNr,
:frmRechVonBisStorno.strLA, :nMwStVoll,
:frmRechVonBisStorno.strText, :frmRechVonBisStorno.dtRechDat,
0, 1, :frmRechVonBisStorno.dtRechDat)");
						Int.SqlImmed(@"INSERT INTO RP (rparztnr, rphalternr, rprechnr, rpla, rpmwst, rprechtext, rpdatum, rpdm, rptext, rpzeidat, rpreverseversion, rprabatt)
SELECT rparztnr, rphalternr, " + this.nRechNr.ToString(0) + @", rpla, rpmwst, rprechtext, rpdatum, rpdm, rptext, rpzeidat, rpreverseversion, rprabatt
FROM rp
WHERE rparztnr = :frmRechVonBisStorno.nPArztNr AND rprechnr = :frmRechVonBisStorno.nPRechNr");
						this.strText = "Der gutgeschriebene Betrag wird verrechnet bzw. erstattet.";
						this.dtZeiDat = this.dtRechDat + 1;
						Int.SqlImmed(@"INSERT INTO RP (rparztnr, rphalternr, rprechnr, rpla, rpmwst, rprechtext, rpdatum, rpdm, rptext, rpzeidat)
VALUES(:frmRechVonBisStorno.nPArztNr,  :frmRechVonBisStorno.nPHalterNr, :frmRechVonBisStorno.nRechNr,
:frmRechVonBisStorno.strLA, :nMwStVoll,
:frmRechVonBisStorno.strText, :frmRechVonBisStorno.dtRechDat,
0, 1,
:frmRechVonBisStorno.dtZeiDat)");
						Int.SqlImmed("UPDATE rp SET rpdm = rpdm * -1 WHERE rparztnr = :frmRechVonBisStorno.nPArztNr AND rprechnr = :frmRechVonBisStorno.nRechNr");

						Int.SqlImmed("UPDATE rp SET rpmwst= :nMwStVoll WHERE rpmwst=0 AND rptext=1 AND rparztnr = :frmRechVonBisStorno.nPArztNr AND rprechnr = :frmRechVonBisStorno.nRechNr");

						this.nBuchLeis = this.BerechneBrutto(this.nPArztNr, this.nPHalterNr, this.nRechNr, "L");
						this.nBuchArzn = this.BerechneBrutto(this.nPArztNr, this.nPHalterNr, this.nRechNr, "A");

						this.nOPFaellTg = -1;
						this.nFaellTg = 14; // Vorgabe
						// 05.05.11 Ã„572 + Land
						Int.SqlImmedSel(@"SELECT hfaelltg, hland
INTO :frmRechVonBisStorno.nOPFaellTg, :frmRechVonBisStorno.strTHLand
FROM H WHERE HARZTNR = :frmRechVonBisStorno.nPArztNr AND HHALTERNR = :frmRechVonBisStorno.nPHalterNr");
						if (this.nOPFaellTg == -1 || this.nOPFaellTg == SalNumber.Null) 
						{
							Int.SqlImmedSel(@"SELECT afaelltg
INTO :frmRechVonBisStorno.nOPFaellTg
FROM A WHERE AARZTNR = :frmRechVonBisStorno.nPArztNr");
							if (this.nOPFaellTg == -1 || this.nOPFaellTg == SalNumber.Null) 
							{
								this.nOPFaellTg = this.nFaellTg;
							}
						}
						this.nFaellTg = this.nOPFaellTg;

						this.dtRkFaellDat = this.dtRechDat + this.nFaellTg;
						// 12.12.97  	VerjÃ¤hrung auf erstes Leistungsdatum
						this.dtRkErstLeistDat = this.dtRechDat;
						Int.SqlImmedSel(@"SELECT min(rpdatum)
INTO :frmRechVonBisStorno.dtRkErstLeistDat
FROM rp WHERE rparztnr=:frmRechVonBisStorno.nPArztNr
AND rprechnr = :frmRechVonBisStorno.nRechNr
AND rpdatum is not null");
						// 27.09.05 VerjÃ¤hrung auf 3 jahre gesetzt.
						// 05.05.11 Ã„572 + AT
						if (this.strTHLand == "AT") 
						{
							this.dtRkVerjaehr = new SalDateTime(this.dtRkErstLeistDat.Year() + 3, this.dtRkErstLeistDat.Month(), this.dtRkErstLeistDat.Day(), 0, 0, 0);
						}
						else
						{
							if (this.dtRkErstLeistDat < new SalDateTime(2001, 1, 1)) 
							{
								this.dtRkVerjaehr = new SalDateTime(this.dtRkErstLeistDat.Year() + 2, 12, 31, 0, 0, 0);
							}
							else
							{
								this.dtRkVerjaehr = new SalDateTime(this.dtRkErstLeistDat.Year() + 3, 12, 31, 0, 0, 0);
							}
						}
						// 16.07.19 Ã„1854
						this.strBuchText = "Gutschrift";

						if (Int.SqlImmedX(@"INSERT INTO RK (RKARZTNR, RKHALTERNR, RKRECHNR,
RKBUCHTEXT, RKRECHDAT, RKFAELLDAT, RKDMLEIS, RKDMARZN,  RKDMMAHN, RKDMZINS, RKMBDMOPL,
RKVERJAEHR,RKZALEIS,RKZAARZN,RKZAMAHN, RKZAZINS, RKMBZAOPL, RKKZZAHL,RKKZ, RKMAHNSTUFE)
VALUES(:frmRechVonBisStorno.nPArztNr, :frmRechVonBisStorno.nPHalterNr, :frmRechVonBisStorno.nRechNr,
:frmRechVonBisStorno.strBuchText, SYSDATE, :frmRechVonBisStorno.dtRkFaellDat, :frmRechVonBisStorno.nBuchLeis, :frmRechVonBisStorno.nBuchArzn,0,0,0,
:frmRechVonBisStorno.dtRkVerjaehr, :frmRechVonBisStorno.nBuchLeis, :frmRechVonBisStorno.nBuchArzn,0,0,0,4,0,0)")) 
						{
						}

						if (this.strLLQuery != "") 
						{
							this.strLLQuery = this.strLLQuery + " , ";
						}
						this.strLLQuery = this.strLLQuery + this.nRechNr.ToString(0);
						// 04.12.17 Ã„1433
						Int.PalCheckELobBez(this.nPArztNr, this.nPHalterNr);

						// A U S B U C H E N

						if (this.nMS > 6) 
						{
							Sal.MessageBox(" MS " + this.nMS.ToString(0) + "!!!!", "", Sys.MB_Ok);
						}
						this.nBuchDM = 0.00m;
						// Set nAusbuchDM = 0.00
						this.SetStatusBarText("Rech-Nr.: " + this.nPArztNr.ToString(0) + "/" + this.nPHalterNr.ToString(0) + "/" + this.nPRechNr.ToString(0));
						Int.SqlImmedSel(@"SELECT rkdmleis, rkdmarzn, rkdmmahn, rkdmzins, rkzaleis,rkzaarzn,rkzamahn, rkzazins
INTO :frmRechVonBisStorno.nDMLeis, :frmRechVonBisStorno.nDMArzn, :frmRechVonBisStorno.nDMMahn, :frmRechVonBisStorno.nDMZins, :frmRechVonBisStorno.nZaLeis, :frmRechVonBisStorno.nZaArzn,
:frmRechVonBisStorno.nZaMahn, :frmRechVonBisStorno.nZaZins
FROM RK
WHERE  rkarztnr = :frmRechVonBisStorno.nPArztNr
AND rkhalternr = :frmRechVonBisStorno.nPHalterNr
AND rkrechnr = :frmRechVonBisStorno.nPRechNr");
						this.nBuchLeis = this.nDMLeis;
						this.nBuchArzn = this.nDMArzn;
						this.nBuchMahn = this.nDMMahn;
						this.nBuchZins = this.nDMZins;
						// Guthaben?
						this.nBuchDM = this.nBuchLeis + this.nBuchArzn + this.nBuchMahn + this.nBuchZins;

						// 20.01.05
						this.nProzNr = 0;
						Int.SqlImmedSel("SELECT prdnr INTO :frmRechVonBisStorno.nProzNr FROM prd WHERE prdarztnr = :frmRechVonBisStorno.nPArztNr AND prdrechnr = :frmRechVonBisStorno.nPRechNr");

						this.strBuchText = "Storno " + Var.strBNZei;
						// Set nKZZahl = 4
						this.strBuchText = this.strBuchText.Left(20);
						this.nDiverse = this.nBuchDM;
						// 24.02.11 OTÃ„528
						this.nDMAusbuch = 0;
						Int.SqlImmedSel(@"SELECT sum(zadm) INTO :frmRechVonBisStorno.nDMAusbuch FROM za
WHERE zaarztnr = :frmRechVonBisStorno.nPArztNr
AND zahalternr = :frmRechVonBisStorno.nPHalterNr
AND zarechnr = :frmRechVonBisStorno.nPRechNr
AND zakz > 3");
						if (this.nDMAusbuch == SalNumber.Null) 
						{
							this.nDMAusbuch = 0;
						}
						// 08.03.11 F852
						this.nBuchDM = this.nBuchDM - this.nDMAusbuch;
						// 05.11.19 F4540 + zadmhf, zadmrest
						this.nBuchDMHF = this.nBuchLeis + this.nBuchArzn;
						this.nBuchDMRest = this.nBuchMahn + this.nBuchZins;

						// 26.03.19 Ã„1844 + , zaerfdat
						// Call SalStatusSetText(hWndForm,'Sachkonten-Buchungen')
						// 05.11.19 F4540 + zadmhf, zadmrest
						Int.SqlImmedX(@"INSERT INTO ZA
(zaarztnr,zahalternr,zarechnr,zakz,zabuchdat,zabelegnr,zadm, zaproznr, zabuchtext, zaerfdat, zadmhf, zadmrest)
VALUES (:frmRechVonBisStorno.nPArztNr,
:frmRechVonBisStorno.nPHalterNr,
:frmRechVonBisStorno.nPRechNr,
4,
SYSDATE,
NULL,
:frmRechVonBisStorno.nBuchDM,
:frmRechVonBisStorno.nProzNr, :frmRechVonBisStorno.strBuchText, SYSDATETIME,
:frmRechVonBisStorno.nBuchDMHF, :frmRechVonBisStorno.nBuchDMRest )");
						// 28.05.21 Ã„1962
						// Set strBuchText = 'Stor' || PalStrNum(nPArztNr,4,0)  || '/'
						// || PalStrNum(nPHalterNr,5,0)|| '/' || PalStrNum(nPRechNr,5,0)
						this.strBuchText = "storno " + Int.PalStrNum(this.nPArztNr, 4, 0) + "/" + Int.PalStrNum(this.nPHalterNr, 5, 0) + "/" + Int.PalStrNum(this.nPRechNr, 5, 0);

						// Set nBuchDM = nBuchDM * -1
						// Call SalStatusSetText(hWndForm,'TA-Buchungen')
						// 19.09.05
						// Call SqlImmedX('INSERT INTO TK
						// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
						// tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
						// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben)
						// VALUES (:frmRechPos.dfArztNr, 0, 0, :frmRechPos.strBuchText,
						// :frmRechPos.dfHalterNr, :frmRechPos.nRechNr, NULL,
						// SYSDATE, 0,0,0 , 0,0,
						// 0,0, 0,0, 0, :nPorto1, :frmRechPos.nBuchDM, :nPorto1, 0)')
						// 20.12.07 F318 tksa von 0 in 3 geÃ¤ndert
						// 27.11.14 2193
						this.BucheTKMwSt(this.nPArztNr, this.nPHalterNr, this.nPRechNr, this.cbPorto.Checked);
						// Call SqlImmedX('INSERT INTO TK
						// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
						// tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
						// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkreverse)
						// VALUES (:frmRechPos.dfArztNr, 3, 0, :frmRechPos.strBuchText,
						// :frmRechPos.dfHalterNr, :frmRechPos.nRechNr, NULL,
						// SYSDATE, 0, :frmRechPos.nBruPorto,0 , :frmRechPos.nMwPorto, 0,
						// 0,0, 0,:nCheckMwSt, 0, 0, :frmRechPos.nBuchDM, :frmRechPos.nBruPorto, 0, :frmRechPos.nTAReverse)')
						// Set nBuchDM = nBuchDM * -1
						// -----------------------------
						// 06.01.99	26.05.00 (nZahlZins+nZahlMahn)
						this.nDiverse = this.nBuchZins + this.nBuchMahn;
						if (this.nDiverse != 0) 
						{
							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16410, 16000, :frmRechVonBisStorno.nPArztNr,
:frmRechVonBisStorno.dtBuchDat,
:frmRechVonBisStorno.strBuchText,
:frmRechVonBisStorno.nDiverse, 5)");
						}
						this.nDiverse = this.nBuchLeis + this.nBuchArzn;
						Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16420, 16000, :frmRechVonBisStorno.nPArztNr, :frmRechVonBisStorno.dtBuchDat, :frmRechVonBisStorno.strBuchText, :frmRechVonBisStorno.nDiverse, 5)");
						// 02.07.09 OTÃ„270 if cbPorto
						if (this.cbPorto.Checked) 
						{
							// 14.04.14 Ã„1046
							if (Int.PalCheckAuslTA(this.nPArztNr) == "EU") 
							{
								App.frmMain.nErloeskonto = 81710;
							}
							else
							{
								App.frmMain.nErloeskonto = 81700;
								// 30.06.20 Ã„1892
								if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
								{
									App.frmMain.nErloeskonto = Int.PalKontenMwStSenkung(App.frmMain.nErloeskonto);
								}
							}
							this.strBuchText = "Porto";
							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16100, :frmMain.nErloeskonto, :frmRechVonBisStorno.nPArztNr, :frmRechVonBisStorno.dtBuchDat, :frmRechVonBisStorno.strBuchText, :nPorto1, 5)");
							this.strBuchText = "MwSt";
							// 30.06.20 Ã„1892
							Var.nMwStSenkung = 17760;
							if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
							{
								Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
							}

							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16100, :nMwStSenkung, :frmRechVonBisStorno.nPArztNr, :frmRechVonBisStorno.dtBuchDat, :frmRechVonBisStorno.strBuchText, :frmRechVonBisStorno.nMwPorto, 5)");
						}

						// Call SalStatusSetText(hWndForm,'Rechnungs-Datei')
						Int.SqlImmedX(@"UPDATE RK SET
rkteilzdat = SYSDATE,
rkzaleis = rkzaleis + :frmRechVonBisStorno.nBuchLeis,
rkzaarzn = rkzaarzn + :frmRechVonBisStorno.nBuchArzn,
rkzamahn = rkzamahn + :frmRechVonBisStorno.nBuchMahn,
rkzazins = rkzazins + :frmRechVonBisStorno.nBuchZins
WHERE rkarztnr = :frmRechVonBisStorno.nPArztNr
AND rkhalternr = :frmRechVonBisStorno.nPHalterNr
AND rkrechnr = :frmRechVonBisStorno.nPRechNr");

						Int.SqlImmedSel(@"SELECT (rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins) INTO :frmRechVonBisStorno.nRestGuthaben
FROM rk
WHERE rkarztnr = :frmRechVonBisStorno.nPArztNr
AND rkhalternr = :frmRechVonBisStorno.nPHalterNr
AND rkrechnr = :frmRechVonBisStorno.nPRechNr");
						if (this.nRestGuthaben <= 0) 
						{
							// 31.01.11 OTÃ„528	24.02.11 nach oben verschoben
							// Call SqlImmedSel( 'SELECT sum(zadm) INTO :frmRechPos.nDMAusbuch FROM za
							// WHERE zaarztnr = :frmRechPos.dfArztNr
							// AND zahalternr = :frmRechPos.dfHalterNr
							// AND zarechnr = :frmRechPos.dfRechNr
							// AND zakz > 3')
							this.nRestGuthaben = this.nRestGuthaben + this.nDMAusbuch;

							Int.SqlImmedX(@"UPDATE RK SET rkkzzahl = 4,
rkzaleis = rkdmleis,
rkzaarzn = rkdmarzn,
rkzamahn = rkdmmahn,
rkzazins = rkdmzins,
rkmbzaopl = rkmbdmopl
WHERE rkarztnr = :frmRechVonBisStorno.nPArztNr
AND rkhalternr = :frmRechVonBisStorno.nPHalterNr
AND rkrechnr = :frmRechVonBisStorno.nPRechNr");
							if (this.nRestGuthaben < 0) 
							{
								this.strKuerzel = App.frmMain.strUser.Left(2);
								this.lsText = @"***Gutschrift***

Dieser Halter hat ein Guthaben von â‚¬" + Int.PalStrNum(this.nRestGuthaben * -1, 8, 2) + @".

Bitte mit OPs verbuchen oder erstatten.";
								// 13.05.14 F2027
								this.nPHalterNr = Int.PalCheckNULL(this.nPHalterNr);

								// 09.05.16 Ã„1367 AN -> HE
								Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, 'HE', :frmRechVonBisStorno.nPArztNr, :frmRechVonBisStorno.nPHalterNr, :frmRechVonBisStorno.nPRechNr,
:frmRechVonBisStorno.lsText , SYSDATE, NULL, 'N', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,1, SYSDATETIME)");
							}
							// 23.04.12 Ã„734
							Int.SqlIstDa(@"FROM bezs
WHERE bezsarztnr = :frmRechVonBisStorno.nPArztNr
AND bezshalternr = :frmRechVonBisStorno.nPHalterNr
AND bezsrechnr = :frmRechVonBisStorno.nPRechNr", ref Var.bExists);
							if (Var.bExists) 
							{
								Int.SqlImmed(@"UPDATE bezs SET bezserldat = SYSDATETIME
WHERE bezsarztnr = :frmRechVonBisStorno.nPArztNr
AND bezshalternr = :frmRechVonBisStorno.nPHalterNr
AND bezsrechnr = :frmRechVonBisStorno.nPRechNr");
								Int.PalLog("RgKopie Storno BEZErl.");
							}
						}

						this.strKuerzel = Var.strBNZei;
						this.lsText = "***Rechnung storniert durch " + Var.strBNUser + @"

Grund: " + this.dfGrund.Text + @"
Sammelstornierung";
						this.lsText = this.lsText + @"

Komplettrechnung";
						this.lsText = this.lsText + " ohne Neuberechnung";
						// 13.05.14 F2027
						this.nPHalterNr = Int.PalCheckNULL(this.nPHalterNr);

						Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmRechVonBisStorno.nPArztNr, :frmRechVonBisStorno.nPHalterNr, :frmRechVonBisStorno.nPRechNr,
:frmRechVonBisStorno.lsText , SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");

						this.nFetchStorno = this.hSqlStorno.FetchNext();
					}
					this.hSqlStorno.Commit();
					this.hSqlStorno.Disconnect();
					this.hSqlUpdateRP.Disconnect();
					this.pbStorno.DisableWindow();
					Sal.WaitCursor(false);
					this.SetStatusBarText("Stornierungen durchgefÃ¼hrt");

					// LL
					if (this.strLLQuery != "") 
					{
						this.strLLQuery = " rkarztnr = :frmRechVonBisStorno.nPArzt AND rkrechnr IN (" + this.strLLQuery + ")";
						// 19.03.08
						if (1 == dlgLlDruck.ModalDialog(App.frmMain, "Rechnung A4.lst", "RS")) 
						{
						}
					}

				}
			}
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class BerechneBruttoLocals
			{
				public SalSqlHandle hSqlBrutto = SalSqlHandle.Null;
				public SalNumber nFetchBrutto = 0;
				public SalNumber nPBrutto = 0;
				public SalNumber nPArzt = 0;
				public SalNumber nPHalter = 0;
				public SalNumber nPRech = 0;
				public SalString strPLA = "";
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class UpdateRechPositionLocals
			{
				public SalString strROWIDLocal = "";
				public SalNumber nInd = 0;
				public SalString pnSelect = "";
				public SalNumber nZahl = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnProzMwSt = 0;
				public SalNumber pnDiverse = 0;
				public SalNumber pnRP1MwSt = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class BucheTKMwStLocals
			{
				public SalSqlHandle hSqlBrutto = SalSqlHandle.Null;
				public SalNumber nFetchBrutto = 0;
				public SalNumber nPBrutto = 0;
				public SalNumber nPMwSt = 0;
				public SalNumber nPArzt = 0;
				public SalNumber nPHalter = 0;
				public SalNumber nPRech = 0;
				public SalBoolean bPPorto = false;
			}
		}
		#endregion
	}
}
