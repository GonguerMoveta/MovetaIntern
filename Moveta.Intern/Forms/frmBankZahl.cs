// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmBankZahl : SalFormWindow
	{
		#region Window Variables
		public SalString strLine = "";
		public SalSqlHandle hSqlBankZahl = SalSqlHandle.Null;
		public SalSqlHandle hSqlRePo = SalSqlHandle.Null;
		public SalString strBLZ = "";
		public SalString strKonto = "";
		public SalNumber nA1 = 0;
		public SalNumber nA2 = 0;
		public SalNumber nA3 = 0;
		public SalNumber nA4 = 0;
		public SalNumber nA5 = 0;
		public SalNumber nA6 = 0;
		public SalNumber nR1 = 0;
		public SalNumber nR2 = 0;
		public SalNumber nR3 = 0;
		public SalNumber nR4 = 0;
		public SalNumber nR5 = 0;
		public SalNumber nR6 = 0;
		public SalNumber nH = 0;
		public SalBoolean bRechAb = false;
		public SalString strVZ1 = "";
		public SalString strVZ2 = "";
		public SalString strVZ3 = "";
		public SalString strVZ4 = "";
		public SalString strVZ5 = "";
		public SalString strVZ6 = "";
		public SalDateTime dtBuchDat = SalDateTime.Null;
		public SalNumber nDMHB = 0;
		public SalString strBuchText = "";
		public SalNumber nBuchDM = 0;
		public SalNumber nRetHB = 0;
		public SalString lsVWZ = "";
		public SalNumber nDMRg = 0;
		public SalNumber nRZRate = 0;
		public SalString strVWZ11 = "";
		public SalBoolean bVWZ11 = false;
		public SalBoolean bVWZ22 = false;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmBankZahl()
		{
			// Assign global reference.
			App.frmBankZahl = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmBankZahl CreateWindow(Control owner)
		{
			frmBankZahl frm = new frmBankZahl();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmBankZahl FromHandle(SalWindowHandle handle)
		{
			return ((frmBankZahl)SalWindow.FromHandle(handle, typeof(frmBankZahl)));
		}
		#endregion
		
		#region Methods
		// Function: PalBankDiskEinlesen
		// Description: liest Bank-Disk ein
		// Returns
		// Boolean:
		// Parameters
		// Static Variables
		// Local variables
		// String: strArExtensions[4]
		// Number: nIndex
		// Boolean: xOK
		// Actions
		// Set strArExtensions[0] = 'Bankdateien - DTAUS*.TXT'
		// Set strArExtensions[1] = 'DTAUS*.TXT'
		// Set strArExtensions[2] = 'alle Dateien - *.*'
		// Set strArExtensions[3] = '*.*'
		// Set xOK = SalDlgOpenFile(hWndForm,'Bankdatei öffnen',
		// strArExtensions,4,nIndex,strDateiName,strDateiPfad)
		// If xOK
		// Return TRUE
		// Else
		// Return FALSE
		// Function: PalByte128
		// Description: lies 128 Byte und return String
		// Returns
		// String:
		// Parameters
		// Static Variables
		// Local variables
		// Number: nDispl
		// Number: nByte
		// String: strReturn
		// Actions
		// Set nDispl = 0
		// Set strReturn = ''
		// Loop
		// Set nDispl = nDispl + 1
		// Set nByte = SalFileGetChar(hFile)
		// If nByte = -1
		// Set strReturn = '-1'
		// Break
		// Set strReturn = strReturn || SalNumberToChar( nByte )
		// If nDispl = 128
		// Break
		// Return strReturn
		/// <summary>
		/// </summary>
		/// <param name="von"></param>
		/// <param name="laenge"></param>
		/// <returns></returns>
		public SalString x(SalNumber von, SalNumber laenge)
		{
			#region Actions
			using (new SalContext(this))
			{
				return strLine.Mid(von - 1, laenge);
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="von"></param>
		/// <param name="laenge"></param>
		/// <returns></returns>
		public SalNumber n(SalNumber von, SalNumber laenge)
		{
			#region Actions
			using (new SalContext(this))
			{
				return Int.PalValNum(x(von, laenge));
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber OnCreate()
		{
			#region Actions
			using (new SalContext(this))
			{
				dfBuchDat.Value = SalDateTime.Current;
				bRechAb = false;
				pbZahlOk.DisableWindow();
				hSqlBankZahl.Connect();
				hSqlRePo.Connect();
				hSqlRePo.SetParameter(Sys.DBP_PRESERVE, 1, "");
				hSqlBankZahl.SetParameter(Sys.DBP_PRESERVE, 1, "");
				// 26.10.15 F2447
				// If SalFileCopy( 'F:\\SFIRM32\\TRANSFER\\16_TVN.TXT', 'F:\\SFIRM32\\TRANSFER\\16_TVNALT.TXT', TRUE)
				if (Sal.FileCopy(Const.PATH_SFIRM_TRANSFER + "16_TVN.TXT", Const.PATH_SFIRM_TRANSFER + "SAFE\\16_TVN" + Int.PalDateToStrJJJJMMTThhmmss(SalDateTime.Current) + ".TXT", true)) 
				{
				}

				if (Var.hFile.Open(Const.PATH_SFIRM_TRANSFER + "16_TVN.TXT", Sys.OF_Exist)) 
				{

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalDateTime temp1 = dfStand.DateTime;
					Sal.FileGetDateTime(Const.PATH_SFIRM_TRANSFER + "16_TVN.TXT", ref temp1);
					dfStand.DateTime = temp1;

					Var.hFile.Open(Const.PATH_SFIRM_TRANSFER + "16_TVN.TXT", Sys.OF_Read);
					while (Var.hFile.GetString(ref strLine, 1000) == true) 
					{
						dfUmsaetze.Number = dfUmsaetze.Number + 1;
					}
					Var.hFile.Close();
					pbZahlOk.EnableWindow();
				}
				else
				{
					Sal.MessageBox("Bankdatei nicht vorhanden !", "Achtung", (Sys.MB_Ok | Sys.MB_IconHand));
					this.DestroyWindow();
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber OnDestroy()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.FileSetDrive(Const.PATH_DRIVE);
				if (hSqlBankZahl) 
				{
					hSqlBankZahl.Disconnect();
				}
				if (hSqlRePo) 
				{
					hSqlRePo.Disconnect();
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber BankClearing()
		{
			#region Local Variables
			SqlLocals.BankClearingLocals locals = new SqlLocals.BankClearingLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				Sal.WaitCursor(true);
				locals.dtDatum = SalDateTime.Current;
				locals.hSqlBC.Connect();
				pbZahlOk.DisableWindow();
				this.SetStatusBarText("Altes Protokoll wird gelöscht");
				if (locals.hSqlBC.PrepareAndExecute("DELETE FROM bc")) 
				{
					locals.hSqlBC.Commit();
				}

				Var.hFile.Open(Const.PATH_SFIRM_TRANSFER + "16_TVN.TXT", Sys.OF_Read);
				while (Var.hFile.GetString(ref strLine, 1000)) 
				{
					// Set strLine = PalDosToWin(strLine)
					// Datum nur für BC-Prot, da Bank-Buch-Datum für Nachfragen benötigt wird
					locals.nRZNr = 0;
					locals.dtBankProto = new SalDateTime(n(41, 4), n(45, 2), n(47, 2), 0, 0, 0);
					locals.nZeile = locals.nZeile + 1;
					locals.nArztNr = 0;
					locals.nHalterNr = 0;
					locals.nRechNr = 0;
					locals.nBuchDM = 0;
					locals.nRestL = 0;
					locals.nRestA = 0;
					locals.nRestM = 0;
					locals.nRestZ = 0;
					locals.nZahlDM = n(68, 18);
					// Set dtDatum = SalStrToDate( x(41,2) || '.' || x(44,2) || '.' || x(47,2) )
					// Set dtDatum = SalDateCurrent()
					// 06.11.13 Ä903
					// If x(86,5)='EREF+'
					// If x(214,5) = 'SVWZ+'
					// Set strDummy = strVZ2
					// Set strVZ2 = strVZ1
					// Else
					// Set strDummy = strVZ2
					// Set strVZ2 = strVZ1
					// Set strVZ1 = strDummy
					// If x(86,5)='SVWZ+'
					// Set strLine = SalStrLeftX(strLine, 85) || SalStrMidX(strLine, 90, 22) || '     ' || SalStrMidX(strLine,112,4096)
					// If x(167,5)='SVWZ+'
					// Set strLine = SalStrLeftX(strLine, 166) || SalStrMidX(strLine, 171, 22) || '     ' || SalStrMidX(strLine,193,4096)

					locals.dtDatum = dfBuchDat.Value;
					// 06.03.23 Ä2086
					Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
					if (locals.dtDatum < Var.dtINIMinBuchDat) 
					{
						locals.dtDatum = Var.dtINIMinBuchDat;
					}

					locals.nAuszug = n(37, 4);
					// If nAuszug>70
					locals.strRef = x(49, 16);
					locals.nTextSchl = n(65, 3);
					strVZ1 = x(86, 27);
					strVZ2 = x(167, 27);
					locals.strAuftr1 = x(113, 27);
					locals.strAuftr2 = x(140, 27);
					// 16.08.18 F3112
					// Set strKonto = x(194,10)
					// Set strBLZ = x(206,8)
					strKonto = x(330, 30);
					strBLZ = x(371, 11);
					// 14.06.11 Ä590
					strVZ3 = x(214, 27);
					strVZ4 = x(241, 27);
					// 18.06.15 Ä1215
					strVZ5 = x(268, 27);
					strVZ6 = x(295, 27);
					// 13.11.17 F3045
					lsVWZ = strVZ1 + " " + strVZ2 + " " + strVZ3 + " " + strVZ4 + " " + strVZ5 + " " + strVZ6;
					// 08.11.13
					PalPruefeEREFSVWZ();
					locals.nArztNr = 0;
					// Call SalMessageBox( '.' || strVZ1 || '.
					// .' || strVZ2 || '.
					// .' || strVZ3 || '.
					// .' || strVZ4 || '.', 'A' || PalStrNum( nArztNr, 4, 0 ) || 'H' || PalStrNum( nHalterNr, 5, 0 ) || 'R' || PalStrNum( nRechNr, 6, 0 ), MB_Ok )
					// 15.02.16 Ä1343
					locals.bRaZa = false;
					locals.hSqlRZ.Connect();
					locals.hSqlRZ.SetParameter(Sys.DBP_PRESERVE, 1, "");

					if (x(13, 7) == "7006573") 
					{
						locals.strBankKonto = "12000";
					}
					else if (x(10, 10) == "1003239800") 
					{
						locals.strBankKonto = "12400";
					}
					// Else If x(21,10) = '0076968305'
					// Set strBankKonto = '11000'
					else
					{
						locals.strErgebnis = "nicht gebucht / falsches Bankkonto";
					}
					if (locals.strBankKonto.Left(1) == "1") 
					{
						// If SalStrScan( strVZ1, '1105620260527' ) != -1
						// Call SalMessageBeep( 0 )
						// 22.06.09 OTÄ260
						locals.bVirtKonto = false;
						locals.bReadOk = false;
						// If x(86,14)='BZUE-NR.      '
						// Set strLine = SalStrLeftX(strLine, 85) || SalStrMidX(strLine, 99, 13) || '              ' || SalStrMidX(strLine,112,4096)
						// If x(167,14)='BZUE-NR.      '
						// Set strLine = SalStrLeftX(strLine, 166) || SalStrMidX(strLine, 180, 13) || '              ' || SalStrMidX(strLine,193,4096)
						// Set strLine = SalStrLeftX(strLine, 85) || SalStrMidX(strLine, 180, 13) || '              ' || SalStrMidX(strLine,112,4096)
						// 05.10.09 OTÄ313
						if (strVZ3.Left(5) == "UKTO/") 
						{
							// 26.10.09
							// Set nByteDisp = 81

							locals.nVirtKonto = Int.PalValNum(strVZ3.Mid(5, 9));
							if (strVZ3.Mid(14, 1) == Int.PalPruefZifferB1(locals.nVirtKonto.ToString(0), 9)) 
							{
								locals.hSqlBC.PrepareAndExecute("SELECT harztnr, hhalternr INTO :nArztNr, :nHalterNr FROM h WHERE hvirtkonto = :nVirtKonto AND hdeaktiv IS NULL");
								locals.nFetchBC = locals.hSqlBC.FetchNext();
								if (locals.nHalterNr != 0) 
								{
									locals.bVirtKonto = true;
									// 17.02.16 F2858
									locals.hSqlBC.PrepareAndExecute("SELECT anr2 INTO :nVirtArztNr2 FROM a WHERE aarztnr = :nArztNr");
									locals.nFetchBC = locals.hSqlBC.FetchNext();
									if (locals.nVirtArztNr2 == 0 || locals.nVirtArztNr2 == SalNumber.Null) 
									{
										locals.nVirtArztNr2 = locals.nArztNr;
									}
									// 07.01.13 F1478
									locals.nVirtArztNr = locals.nArztNr;
									locals.nVirtHalterNr = locals.nHalterNr;

									// If SalStrLeftX(strVZ2,2) = '11'		! neues MZF
									// Set nRechNr = n(173,6)
								}
							}
							// 06.11.13
							// Set strDummy = strVZ2
							// Set strVZ2 = strVZ1
							// Set strVZ1 = strDummy
						}
						// Else
						// 26.10.09
						// Set nByteDisp = 0
						if (locals.bVirtKonto) 
						{
							locals.bReadOk = true;
						}
						// If Not PalNurZiffern(SalStrLeftX( strVZ1,12))
						// Set strErgebnis = 'nicht gebucht / ungültige MZF-Nr.'
						// 02.05.17
						// PalDelZeichen( strPLine, '.' )
						// 24.02.16 F2858
						if (Int.PalDelBlank(strVZ6) == "") 
						{
							strVZ6 = strVZ1;
						}
						else if (Int.PalDelBlank(strVZ5) == "") 
						{
							strVZ5 = strVZ1;
						}
						else if (Int.PalDelBlank(strVZ4) == "") 
						{
							strVZ4 = strVZ1;
						}
						else if (Int.PalDelBlank(strVZ3) == "") 
						{
							strVZ3 = strVZ1;
						}
						else if (Int.PalDelBlank(strVZ2) == "") 
						{
							strVZ2 = strVZ1;
						}
						// 05.11.18 F3234
						bVWZ11 = false;
						// 06.11.18 Ä1806
						bVWZ22 = false;
						if (strVZ1.Left(3) == "22." && strVZ1.Mid(7, 1) == "." && strVZ1.Mid(16, 1) == ".") 
						{
							bVWZ22 = true;
						}
						else if (strVZ1.Left(2) == "22" && Int.PalDelZeichen(strVZ1, ".").Length == 15) 
						{
							bVWZ22 = true;
						}

						if (strVZ1.Left(2) == "97")  // 30.03.10 RaZa
						{
							// 15.02.16 Ä1343
							locals.nRZBuchDM = 0;
							locals.nRZNr = Int.PalValNum(Int.PalDelZeichen(strVZ1, ".").Mid(2, 6));
							locals.nArztNr = Int.PalValNum(Int.PalDelZeichen(strVZ1, ".").Mid(8, 4));
							locals.nHalterNr = Int.PalValNum(Int.PalDelZeichen(strVZ1, ".").Mid(12, 5));
							// 17.08.18 F3188
							Int.SqlImmedSel("SELECT sum(hbdm) INTO :frmBankZahl.nDMHB FROM hb WHERE hbrznr = " + locals.nRZNr.ToString(0));
							Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)
INTO :frmBankZahl.nDMRg
FROM rk,rzp
WHERE rzpnr = " + locals.nRZNr.ToString(0) + @" AND rkdeaktiv IS NULL AND rzparztnr=rkarztnr AND rzprechnr=rkrechnr AND rzphalternr=rkhalternr AND
rkkzzahl not in (2,3,4,5) AND (rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)<>0");
							Int.SqlImmedSel("SELECT rzrate INTO :frmBankZahl.nRZRate FROM rz WHERE rznr = " + locals.nRZNr.ToString(0) + " AND rzdeaktiv IS NULL"); // 06.09.18 F3188
							locals.bRZMS9 = PalCheckRZMS9(locals.nRZNr);
							if (locals.bRZMS9)  // 01.04.19 F4484
							{
								locals.strErgebnis = "nicht gebucht / RZ enthält MB";
							}
							else if (locals.nZahlDM < (nDMRg + nDMHB) && locals.nZahlDM < nRZRate)  // 06.09.18 F3188 + and nZahlDM < nRZRate
							{
								locals.strErgebnis = "nicht gebucht / RZ Betrag zu klein";
							}
							else
							{

								locals.hSqlRZ.PrepareAndExecute(@"SELECT rkarztnr, rkhalternr, rkrechnr
INTO :nArztNr, :nHalterNr, :nRechNr FROM rk,rzp
WHERE rkarztnr = :nArztNr AND rkhalternr = :nHalterNr
AND rzpnr = :nRZNr AND rzparztnr=rkarztnr AND rzprechnr=rkrechnr AND rzphalternr=rkhalternr AND
rkkzzahl not in (2,3,4,5) AND
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)<>0 AND rkdeaktiv IS NULL
ORDER BY rkrechdat");
								if (locals.hSqlRZ.FetchNext(ref locals.nFetchRZ)) 
								{
									// Set bRZMS9 = PalCheckRZMS9( nRZNr )
									// 06.04.10 OTÄ135
									// If not bRZMS9
									// 23.02.15 F2292 dfRZNr -> cmbRZNr
									if (locals.strBankKonto == "12000")  // 14.03.16 F2655
									{
										nRetHB = PalCheckHaBu(locals.nRZNr, locals.nArztNr, locals.nHalterNr, locals.nZahlDM, locals.strBankKonto, locals.nAuszug + 1000, locals.dtDatum);
									}
									else
									{
										nRetHB = PalCheckHaBu(locals.nRZNr, locals.nArztNr, locals.nHalterNr, locals.nZahlDM, locals.strBankKonto, locals.nAuszug, locals.dtDatum);
									}
									if (nRetHB != 0) 
									{
										locals.nZahlDM = locals.nZahlDM - nRetHB;
										// 14.03.16 F2654
										locals.strErgebnis = "RZ gebucht";
										if (strVZ1.Length > 100) 
										{
											strVZ1 = strVZ1.Left(100);
										}
										// 25.04.17
										if (strVZ2.Length > 100) 
										{
											strVZ2 = strVZ2.Left(100);
										}
										if (strVZ3.Length > 100) 
										{
											strVZ3 = strVZ3.Left(100);
										}
										if (strVZ4.Length > 100) 
										{
											strVZ4 = strVZ4.Left(100);
										}
										if (strVZ5.Length > 100) 
										{
											strVZ5 = strVZ5.Left(100);
										}
										if (strVZ6.Length > 100) 
										{
											strVZ6 = strVZ6.Left(100);
										}

										// 13.11.17 F3045 + bcvwz
										if (locals.hSqlBC.PrepareAndExecute(@"
INSERT INTO BC
( bcarztnr, bchalternr, bcrechnr, bczahldm, bcbuchdm, bcbuchdat,
bcrestl, bcresta, bcrestm, bcrestz, bckonto, bcergebnis,
bcauszug, bcref, bctextschl, bcvz1, bcvz2, bcauftr1, bcauftr2, bcvz3, bcvz4, bcvz5, bcvz6, bcrznr, bcvwz )
VALUES
( :nArztNr, :nHalterNr, :nRechNr, :nRetHB, :nRetHB, :dtBankProto,
:nRestL, :nRestA, :nRestM, :nRestZ, :strBankKonto, :strErgebnis,
:nAuszug, :strRef, :nTextSchl, :strVZ1, :strVZ2, :strAuftr1, :strAuftr2, :strVZ3, :strVZ4, :strVZ5, :strVZ6, :nRZNr, :lsVWZ )")) 
										{
											locals.hSqlBC.Commit();
										}
									}
									while (locals.nFetchRZ != Sys.FETCH_EOF) 
									{
										if (locals.nZahlDM < 0) 
										{
											locals.strErgebnis = "nicht gebucht / negativer Betrag";
										}
										else if (locals.nZahlDM == 0)  // 15.03.16 F2657
										{
										}
										else
										{

											strVZ1 = strVZ1.Trim();
											strVZ2 = strVZ2.Trim();
											strVZ3 = strVZ3.Trim();
											strVZ4 = strVZ4.Trim();
											// 18.06.15 Ä1215
											strVZ5 = strVZ5.Trim();
											strVZ6 = strVZ6.Trim();

											// 10.07.18 F3178 'A' -> 'M'
											if (locals.strBankKonto == "12000") 
											{
												// 01.03.19 F3542 + , TRUE
												locals.strErgebnis = ZahlungBuchen("M", locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.nZahlDM, locals.dtDatum, locals.strBankKonto, locals.nAuszug + 1000, ref locals.nBuchDM, ref locals.nRestL, ref locals.nRestA, ref locals.nRestM, ref 
													locals.nRestZ, locals.nRZNr, true);
											}
											else
											{
												// 01.03.19 F3542 + , TRUE
												locals.strErgebnis = ZahlungBuchen("M", locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.nZahlDM, locals.dtDatum, locals.strBankKonto, locals.nAuszug, ref locals.nBuchDM, ref locals.nRestL, ref locals.nRestA, ref locals.nRestM, ref 
													locals.nRestZ, locals.nRZNr, true);
											}
											locals.nZahlDM = locals.nZahlDM - locals.nBuchDM;
											locals.nRZBuchDM = locals.nRZBuchDM + locals.nBuchDM;

										}
										// If GetZettel( hSqlBankZahl, nArztNr, nHalterNr, nRechNr )
										// Set strErgebnis = strErgebnis || ' Z'
										// If strBLZ != '' And strBLZ != '        '
										// 28.02.01
										// Set strBLZ = SalStrTrimX(strBLZ)
										// Set strKonto = SalStrTrimX(strKonto)
										// Call UpdateHalter( hSqlBankZahl, nArztNr, nHalterNr, strBLZ, strKonto )

										locals.nFetchRZ = locals.hSqlRZ.FetchNext();
									}
									if (locals.nRZBuchDM != 0) 
									{
										locals.strErgebnis = "RZ gebucht";
									}
									else
									{
										locals.strErgebnis = "nicht gebucht / kein OP gefunden";
									}
									locals.strErgebnis = locals.strErgebnis.Left(38);
									locals.nBuchDM = locals.nRZBuchDM;
									locals.nZahlDM = locals.nZahlDM + locals.nBuchDM;
								}
								else
								{
									locals.strErgebnis = "nicht gebucht / RZ nicht gefunden";
									Int.PalLog("BC:" + x(86 + locals.nByteDisp, 20));
								}
							}
						}
						else if (bVWZ22)  // 06.11.18 Ä1806 + manr
						{
							// 21.12.16 F2810
							strVZ1 = Int.PalDelBlank(strVZ1);
							// 05.11.18 F3234 aus PalEREFSVWZ
							strVZ1 = Int.PalDelZeichen(strVZ1, ".");
							strVZ2 = Int.PalDelZeichen(strVZ2, ".");
							strVZ3 = Int.PalDelZeichen(strVZ3, ".");
							strVZ4 = Int.PalDelZeichen(strVZ4, ".");
							strVZ5 = Int.PalDelZeichen(strVZ5, ".");
							strVZ6 = Int.PalDelZeichen(strVZ6, ".");

							locals.nArztNr = Int.PalValNum(strVZ1.Mid(2, 4));
							locals.nMahnNr = Int.PalValNum(strVZ1.Mid(6, 8));

							locals.hSqlBC.PrepareAndExecute(@"SELECT marechnr INTO :nRechNr FROM ma
WHERE maarztnr = :nArztNr AND manr = :nMahnNr AND madeaktiv IS NULL");
							locals.nFetchBC = locals.hSqlBC.FetchNext();
							locals.hSqlBC.PrepareAndExecute(@"SELECT rkhalternr INTO :nHalterNr FROM rk
WHERE rkarztnr = :nArztNr AND rkrechnr = :nRechNr AND rkdeaktiv IS NULL");
							locals.nFetchBC = locals.hSqlBC.FetchNext();
							// 15.11.18 Ä1806
							locals.hSqlRZ.PrepareAndExecute(@"SELECT SUM(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)
INTO :nDummyHaben FROM rk,ma
WHERE rkarztnr = :nArztNr AND manr = :nMahnNr AND maarztnr=rkarztnr AND marechnr=rkrechnr
AND rkkzzahl < 2 AND (rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)<>0
AND rkdeaktiv IS NULL AND madeaktiv IS NULL");
							locals.nFetchRZ = locals.hSqlRZ.FetchNext();
							if (Var.nDummyHaben != locals.nZahlDM) 
							{
								locals.strErgebnis = "nicht gebucht / Betrag passt nicht";
								Int.PalLog("BC:" + x(86 + locals.nByteDisp, 20));
							}
							else
							{

								locals.hSqlRZ.PrepareAndExecute(@"SELECT rkarztnr, rkhalternr, rkrechnr
INTO :nArztNr, :nHalterNr, :nRechNr FROM rk,ma
WHERE rkarztnr = :nArztNr AND manr = :nMahnNr AND maarztnr=rkarztnr AND marechnr=rkrechnr
AND rkkzzahl not in (2,3,4,5) AND (rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)<>0
AND rkdeaktiv IS NULL AND madeaktiv IS NULL
ORDER BY rkrechdat");
								if (locals.hSqlRZ.FetchNext(ref locals.nFetchRZ)) 
								{
									locals.nRZBuchDM = 0;
									while (locals.nFetchRZ != Sys.FETCH_EOF) 
									{
										if (locals.nZahlDM < 0) 
										{
											locals.strErgebnis = "nicht gebucht / negativer Betrag";
										}
										else if (locals.nZahlDM == 0)  // 15.03.16 F2657
										{
										}
										else
										{

											strVZ1 = strVZ1.Trim();
											strVZ2 = strVZ2.Trim();
											strVZ3 = strVZ3.Trim();
											strVZ4 = strVZ4.Trim();
											// 18.06.15 Ä1215
											strVZ5 = strVZ5.Trim();
											strVZ6 = strVZ6.Trim();

											// 10.07.18 F3178 'A' -> 'M'
											if (locals.strBankKonto == "12000") 
											{
												// 01.03.19 F3542 + , FALSE
												locals.strErgebnis = ZahlungBuchen("M", locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.nZahlDM, locals.dtDatum, locals.strBankKonto, locals.nAuszug + 1000, ref locals.nBuchDM, ref locals.nRestL, ref locals.nRestA, ref locals.nRestM, ref 
													locals.nRestZ, 0, false);
											}
											else
											{
												// 01.03.19 F3542 + , FALSE
												locals.strErgebnis = ZahlungBuchen("M", locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.nZahlDM, locals.dtDatum, locals.strBankKonto, locals.nAuszug, ref locals.nBuchDM, ref locals.nRestL, ref locals.nRestA, ref locals.nRestM, ref 
													locals.nRestZ, 0, false);
											}
											locals.nZahlDM = locals.nZahlDM - locals.nBuchDM;
											locals.nRZBuchDM = locals.nRZBuchDM + locals.nBuchDM;

										}
										// If GetZettel( hSqlBankZahl, nArztNr, nHalterNr, nRechNr )
										// Set strErgebnis = strErgebnis || ' Z'
										// If strBLZ != '' And strBLZ != '        '
										// 28.02.01
										// Set strBLZ = SalStrTrimX(strBLZ)
										// Set strKonto = SalStrTrimX(strKonto)
										// Call UpdateHalter( hSqlBankZahl, nArztNr, nHalterNr, strBLZ, strKonto )

										locals.nFetchRZ = locals.hSqlRZ.FetchNext();
									}
									locals.nBuchDM = locals.nRZBuchDM;
									locals.nZahlDM = locals.nZahlDM + locals.nBuchDM;
									locals.strErgebnis = locals.strErgebnis.Left(38);
									if (locals.nRZBuchDM != 0) 
									{
										locals.strErgebnis = "Mahnung gebucht";
									}
									else
									{
										locals.strErgebnis = "Mahnung nicht gebucht / kein OP gefunden";
									}
									locals.strErgebnis = locals.strErgebnis.Left(38);
								}
								else
								{
									locals.strErgebnis = "nicht gebucht / Mahng. nicht gefunden";
									Int.PalLog("BC:" + x(86 + locals.nByteDisp, 20));
								}
							}
						}
						else
						{
							// 17.02.16 F2858
							if (strVZ1.Left(2) == "PR") 
							{
								Var.bExists = true;
							}
							else
							{
								Var.bExists = false;
							}

							strVZ1 = Int.PalDelNonNum(strVZ1, true);

							// If SalStrScan( strVZ1, 'PITU' ) != -1
							// Call SalMessageBeep( 0 )
							if (strVZ1.Left(3) == "11." && strVZ1.Mid(7, 1) == "." && strVZ1.Mid(14, 1) == ".") 
							{
								bVWZ11 = true;
							}
							else if (strVZ1.Left(2) == "11" && Int.PalDelZeichen(strVZ1, ".").Length == 13) 
							{
								bVWZ11 = true;
							}
							// 06.11.18 Ä1806

							if (Var.bExists) 
							{
								strVZ1 = "PR" + strVZ1;
							}

							if (strVZ1.Left(3) == "99.")  // altes MZF OCRA-Zeile
							{
								// Set nArztNr = n(88 + nByteDisp,4)
								// Set nRechNr = n(92 + nByteDisp,6)
								// Set nHalterNr = 0
								locals.strErgebnis = "nicht gebucht / MZF ungültig";
								Int.PalLog("BC:" + x(86 + locals.nByteDisp, 20));
							}
							// 08.11.13 x(86 + nByteDisp,2) -->> SalStrLeftX( strVZ1, 2 )
							else if (strVZ1.Left(3) == "77.")  // altes MZF Klarschriftlesung
							{
								// Set nArztNr = n(88 + nByteDisp,4)
								// Set nHalterNr = n(92 + nByteDisp,5)
								// Set nRechNr = n(97 + nByteDisp,6)
								locals.strErgebnis = "nicht gebucht / MZF ungültig";
								Int.PalLog("BC:" + x(86 + locals.nByteDisp, 20));
							}
							else if (bVWZ11)  // neues MZF	21.12.16 F2810 + 	And SalStrLength( PalDelBlank( strVZ1 ) ) >= 13	! 05.11.18 F3234 bVWZ11
							{
								// 08.11.13
								// Set nArztNr = n(88 + nByteDisp,4)
								// Set nRechNr = n(92 + nByteDisp,6)
								// 21.12.16 F2810
								strVZ1 = Int.PalDelBlank(strVZ1);
								// 05.11.18 F3234 aus PalEREFSVWZ
								strVZ1 = Int.PalDelZeichen(strVZ1, ".");
								strVZ2 = Int.PalDelZeichen(strVZ2, ".");
								strVZ3 = Int.PalDelZeichen(strVZ3, ".");
								strVZ4 = Int.PalDelZeichen(strVZ4, ".");
								strVZ5 = Int.PalDelZeichen(strVZ5, ".");
								strVZ6 = Int.PalDelZeichen(strVZ6, ".");

								locals.nArztNr = Int.PalValNum(strVZ1.Mid(2, 4));
								locals.nRechNr = Int.PalValNum(strVZ1.Mid(6, 6));

								// If x(100 + nByteDisp,1)='H'
								// Set nHalterNr = n(101 + nByteDisp,5)
								if (strVZ1.Mid(18, 1) == "H") 
								{
									locals.nHalterNr = Int.PalValNum(strVZ1.Mid(19, 5));
								}
								else
								{
									// 28.02.01 da bei Überw. ohne Halterangabe bisher der Update nicht möglich war.
									locals.hSqlBC.PrepareAndExecute(@"SELECT rkhalternr INTO :nHalterNr FROM rk
WHERE rkarztnr = :nArztNr AND rkrechnr = :nRechNr AND rkdeaktiv IS NULL");
									locals.nFetchBC = locals.hSqlBC.FetchNext();

								}
								// Call PalLog( 'BC A' || PalStrNum0( nArztNr, 4, 0 ) || 'H' || PalStrNum( nHalterNr, 5, 0 ) || 'R' || PalStrNum( nRechNr, 6, 0 ))
							}
							else
							{
								// 08.11.13
								// If SalStrMidX( strVZ1, 3, 2 ) = '/H'
								// Set nArztNr = n(86,3)
								// Set nHalterNr = n(89,4)
								// Set nRechNr = n(93,6)
								// Else If SalStrMidX( strVZ1, 3, 2 ) = '/R'
								// Set nArztNr = n(86,3)
								// Set nHalterNr = 0
								// Set nRechNr = n(93,6)
								// Call SqlPrepareAndExecute( hSqlBC, 'SELECT rkhalternr INTO :nHalterNr FROM rk
								// WHERE rkarztnr = :nArztNr AND rkrechnr = :nRechNr')
								// Call SqlFetchNext( hSqlBC, nFetchBC )
								// If SalStrScan( strVZ1, 'MANFRED' ) != -1 or SalStrScan( strVZ2, 'MANFRED' ) != -1
								// Call SalMessageBeep( 0 )

								locals.nArztNr = 0;
								locals.nHalterNr = 0;
								locals.nRechNr = 0;
								PalGetAHR(strVZ1, ref locals.nArztNr, ref locals.nHalterNr, ref locals.nRechNr);
								PalGetAHR(strVZ2, ref locals.nArztNr, ref locals.nHalterNr, ref locals.nRechNr);
								if (locals.nArztNr > 9999) 
								{
									locals.nArztNr = 0;
								}
								if (locals.nHalterNr == 0 && locals.nArztNr != 0 && locals.nRechNr != 0) 
								{
									locals.hSqlBC.PrepareAndExecute(@"SELECT rkhalternr INTO :nHalterNr FROM rk
WHERE rkarztnr = :nArztNr AND rkrechnr = :nRechNr AND rkdeaktiv IS NULL");
									locals.nFetchBC = locals.hSqlBC.FetchNext();
								}
							}
							locals.bReadOk = true;
							// 07.01.13 F1478
							if (locals.bVirtKonto && locals.nHalterNr != 0) 
							{
								// 17.02.16 F2585 nArztNr != nVirtArztNr -> (nArztNr != nVirtArztNr And nArztNr != nVirtArztNr2)
								if ((locals.nArztNr != locals.nVirtArztNr && locals.nArztNr != locals.nVirtArztNr2) || locals.nHalterNr != locals.nVirtHalterNr) 
								{
									locals.strErgebnis = "nicht gebucht / VirtKonto-MZF Konflikt";
									Int.PalLog("BC:" + x(86 + locals.nByteDisp, 20));
									locals.bReadOk = false;
								}
							}


							strVZ1 = strVZ1.Trim();
							strVZ2 = strVZ2.Trim();
							strVZ3 = strVZ3.Trim();
							strVZ4 = strVZ4.Trim();
							// 18.06.15 Ä1215
							strVZ5 = strVZ5.Trim();
							strVZ6 = strVZ6.Trim();

							if (locals.nRechNr == 0) 
							{
								locals.bReadOk = false;
								locals.strErgebnis = "nicht gebucht";
							}
							if (locals.bReadOk) 
							{
								if (locals.nZahlDM < 0) 
								{
									locals.strErgebnis = "nicht gebucht / negativer Betrag";
								}
								else
								{
									// 19.11.13
									// Set strErgebnis = ZahlungBuchen( 'A', nArztNr, nHalterNr, nRechNr, nZahlDM, dtDatum , strBankKonto, nAuszug+1000, nBuchDM,nRestL, nRestA, nRestM, nRestZ )
									if (locals.strBankKonto == "12000") 
									{
										// 01.03.19 F3542 + , FALSE
										locals.strErgebnis = ZahlungBuchen("A", locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.nZahlDM, locals.dtDatum, locals.strBankKonto, locals.nAuszug + 1000, ref locals.nBuchDM, ref locals.nRestL, ref locals.nRestA, ref locals.nRestM, ref 
											locals.nRestZ, 0, false);
									}
									else
									{
										// 01.03.19 F3542 + , FALSE
										locals.strErgebnis = ZahlungBuchen("A", locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.nZahlDM, locals.dtDatum, locals.strBankKonto, locals.nAuszug, ref locals.nBuchDM, ref locals.nRestL, ref locals.nRestA, ref locals.nRestM, ref 
											locals.nRestZ, 0, false);
									}
								}
								locals.strErgebnis = locals.strErgebnis.Left(38);
								if (GetZettel(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr)) 
								{
									locals.strErgebnis = locals.strErgebnis + " Z";
								}
								// 04.09.18 F3234 + and nBuchDM > 0
								if (strBLZ != "" && strBLZ != "        " && locals.nBuchDM > 0) 
								{
									// 28.02.01
									strBLZ = strBLZ.Trim();
									strKonto = strKonto.Trim();

									// Task: UpdateHalter
									// Inserted: 2018-09-04-10.32
									UpdateHalter(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, strBLZ, strKonto);
								}
							}

						}
					}
					else
					{
						locals.strErgebnis = "ungültiges Bankkonto";
					}

					if (locals.nBuchDM == 0 && locals.strErgebnis.Left(7) == "gebucht") 
					{
						locals.strErgebnis = "nicht gebucht";
					}
					if (locals.nBuchDM == 0 && locals.strErgebnis == "") 
					{
						locals.strErgebnis = "nicht gebucht";
					}
					if (strVZ1.Length > 100) 
					{
						strVZ1 = strVZ1.Left(100);
					}
					// 25.04.17
					if (strVZ2.Length > 100) 
					{
						strVZ2 = strVZ2.Left(100);
					}
					if (strVZ3.Length > 100) 
					{
						strVZ3 = strVZ3.Left(100);
					}
					if (strVZ4.Length > 100) 
					{
						strVZ4 = strVZ4.Left(100);
					}
					if (strVZ5.Length > 100) 
					{
						strVZ5 = strVZ5.Left(100);
					}
					if (strVZ6.Length > 100) 
					{
						strVZ6 = strVZ6.Left(100);
					}

					// 10.07.18 F3177
					if (locals.strErgebnis == "RZ gebucht") 
					{
						locals.nRechNr = 0;
					}
					// 13.11.17 F3045 + bcvwz
					if (locals.hSqlBC.PrepareAndExecute(@"
INSERT INTO BC
( bcarztnr, bchalternr, bcrechnr, bczahldm, bcbuchdm, bcbuchdat,
bcrestl, bcresta, bcrestm, bcrestz, bckonto, bcergebnis,
bcauszug, bcref, bctextschl, bcvz1, bcvz2, bcauftr1, bcauftr2, bcvz3, bcvz4, bcvz5, bcvz6, bcrznr, bcvwz )
VALUES
( :nArztNr, :nHalterNr, :nRechNr, :nZahlDM, :nBuchDM, :dtBankProto,
:nRestL, :nRestA, :nRestM, :nRestZ, :strBankKonto, :strErgebnis,
:nAuszug, :strRef, :nTextSchl, :strVZ1, :strVZ2, :strAuftr1, :strAuftr2, :strVZ3, :strVZ4, :strVZ5, :strVZ6, :nRZNr, :lsVWZ )")) 
					{
						locals.hSqlBC.Commit();
					}
					// 15.02.16 Ä1343
					locals.hSqlRZ.Disconnect();
					this.SetStatusBarText(locals.strErgebnis);
				}
				this.SetStatusBarText("Buchungen fertig eingelesen");
				pbZahlOk.EnableWindow();
				Var.hFile.Close();
				if (locals.hSqlBC) 
				{
					locals.hSqlBC.Disconnect();
				}

				Sal.WaitCursor(false);
				// Call SalFileSetCurrentDirectory( 'C:\\MATHIAS\\TVN\\TEMP' )
				if (locals.nZeile == dfUmsaetze.Number) 
				{
					Sal.MessageBox("Es wurden alle " + Int.PalStrNum(locals.nZeile, 5, 0) + @" Umsätze gebucht
Datei wird gelöscht", "OK", (Sys.MB_Ok | Sys.MB_IconAsterisk));
					Var.hFile.Open(Const.PATH_SFIRM_TRANSFER + "16_TVN.TXT", Sys.OF_Delete);
				}
				else
				{
					Sal.MessageBox("Es wurden " + Int.PalStrNum(locals.nZeile, 5, 0) + @" Umsätze gebucht
Es sollten aber " + Int.PalStrNum(dfUmsaetze.Number, 5, 0) + @" Umsätze gebucht werden.
Datei wird NICHT gelöscht
Bitte H.Keuer benachrichtigen", "Achtung", (Sys.MB_Ok | Sys.MB_IconHand));
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <returns></returns>
		public SalBoolean GetZettel(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr)
		{
			#region Local Variables
			SqlLocals.GetZettelLocals locals = new SqlLocals.GetZettelLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;

				if (locals.phSql.PrepareAndExecute(@"
SELECT anr2, akzpraxart
FROM a
WHERE aarztnr = :pnArztNr
INTO :nArztNr2, :nKZPraxArt")) 
				{
					locals.nInd = locals.phSql.FetchNext();
				}
				if (locals.nKZPraxArt == 0) 
				{
					locals.nArztNr2 = locals.pnArztNr;
				}
				if (locals.pnHalterNr == 0) 
				{
					// 21.12.05 #10 +  AND zanzeige<>1
					// 16.02.16 Ä1346 "not in (\'HS\', \'ZM\')" -> = \'TN\'
					Sql.Exists(@"
SELECT * FROM z
WHERE zarztnr IN ( :pnArztNr, :nArztNr2 )
AND zrechnr = :pnRechNr
AND zart = 'TN' AND zanzeige<>1 AND zdeaktiv IS NULL", ref locals.bExists);
				}
				else
				{
					// 20.03.06 #10 +  AND zanzeige<>1
					// 16.02.16 Ä1346 "not in (\'HS\', \'ZM\')" -> = \'TN\'
					Sql.Exists(@"
SELECT * FROM z
WHERE zarztnr IN ( :pnArztNr, :nArztNr2 )
AND zhalternr = :pnHalterNr
AND zrechnr = :pnRechNr
AND zart = 'TN' AND zanzeige<>1 AND zdeaktiv IS NULL", ref locals.bExists);
				}
				return locals.bExists;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="nDMLeis"></param>
		/// <param name="nDMArzn"></param>
		/// <param name="nDMMahn"></param>
		/// <param name="nDMZins"></param>
		/// <param name="nZaLeis"></param>
		/// <param name="nZaArzn"></param>
		/// <param name="nZaMahn"></param>
		/// <param name="nZaZins"></param>
		/// <param name="nRestDM"></param>
		/// <param name="nMahnstufe"></param>
		/// <param name="dtVerjDat"></param>
		/// <returns></returns>
		public SalBoolean GetRechnung(SalSqlHandle phSql, SalNumber pnArztNr, ref SalNumber pnHalterNr, SalNumber pnRechNr, ref SalNumber nDMLeis, ref SalNumber nDMArzn, ref SalNumber nDMMahn, ref SalNumber nDMZins, ref SalNumber nZaLeis, ref SalNumber nZaArzn, ref SalNumber nZaMahn, ref SalNumber nZaZins, ref SalNumber nRestDM, ref SalNumber nMahnstufe, ref SalDateTime dtVerjDat)
		{
			#region Local Variables
			SqlLocals.GetRechnungLocals locals = new SqlLocals.GetRechnungLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnHalterNr = pnHalterNr;
					locals.pnRechNr = pnRechNr;
					locals.nDMLeis = nDMLeis;
					locals.nDMArzn = nDMArzn;
					locals.nDMMahn = nDMMahn;
					locals.nDMZins = nDMZins;
					locals.nZaLeis = nZaLeis;
					locals.nZaArzn = nZaArzn;
					locals.nZaMahn = nZaMahn;
					locals.nZaZins = nZaZins;
					locals.nRestDM = nRestDM;
					locals.nMahnstufe = nMahnstufe;
					locals.dtVerjDat = dtVerjDat;

					if (locals.pnHalterNr != 0) 
					{
						locals.phSql.PrepareAndExecute(@"
SELECT rkdmleis, rkdmarzn, rkdmmahn + rkmbdmopl, rkdmzins,
rkzaleis, rkzaarzn, rkzamahn + rkmbzaopl , rkzazins,
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins), rkmahnstufe, rkverjaehr
FROM RK
INTO :nDMLeis, :nDMArzn, :nDMMahn, :nDMZins,
:nZaLeis, :nZaArzn, :nZaMahn, :nZaZins,
:nRestDM, :nMahnstufe, :dtVerjDat
WHERE rkarztnr = :pnArztNr
AND rkhalternr = :pnHalterNr
AND rkrechnr = :pnRechNr AND rkdeaktiv IS NULL");
					}
					else
					{
						locals.phSql.PrepareAndExecute(@"
SELECT rkdmleis, rkdmarzn, rkdmmahn + rkmbdmopl, rkdmzins,
rkzaleis, rkzaarzn, rkzamahn + rkmbzaopl , rkzazins, rkhalternr,
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins), rkmahnstufe, rkverjaehr
FROM RK
INTO :nDMLeis, :nDMArzn, :nDMMahn, :nDMZins,
:nZaLeis, :nZaArzn, :nZaMahn, :nZaZins, :pnHalterNr,
:nRestDM, :nMahnstufe, :dtVerjDat
WHERE rkarztnr = :pnArztNr
AND rkrechnr = :pnRechNr AND rkdeaktiv IS NULL");
					}
					if (locals.phSql.FetchNext(ref locals.nInd)) 
					{
						locals.bExists = true;
					}
					return locals.bExists;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnHalterNr = locals.pnHalterNr;
					nDMLeis = locals.nDMLeis;
					nDMArzn = locals.nDMArzn;
					nDMMahn = locals.nDMMahn;
					nDMZins = locals.nDMZins;
					nZaLeis = locals.nZaLeis;
					nZaArzn = locals.nZaArzn;
					nZaMahn = locals.nZaMahn;
					nZaZins = locals.nZaZins;
					nRestDM = locals.nRestDM;
					nMahnstufe = locals.nMahnstufe;
					dtVerjDat = locals.dtVerjDat;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnRZNr"></param>
		/// <returns></returns>
		public SalBoolean GetRaZa(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, ref SalNumber pnRZNr)
		{
			#region Local Variables
			SqlLocals.GetRaZaLocals locals = new SqlLocals.GetRaZaLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnHalterNr = pnHalterNr;
					locals.pnRechNr = pnRechNr;
					locals.pnRZNr = pnRZNr;

					App.frmMain.nRZNr = 0;
					if (locals.pnHalterNr != 0) 
					{
						locals.phSql.PrepareAndExecute(@"
SELECT rznr
FROM rz, rzp
INTO :pnRZNr
WHERE rzparztnr = :pnArztNr
AND rzphalternr = :pnHalterNr
AND rzprechnr = :pnRechNr
AND rznr=rzpnr AND rzkuenddat IS NULL AND rzaktivdat IS NOT NULL AND rzdeaktiv IS NULL");
					}
					else
					{
						locals.phSql.PrepareAndExecute(@"
SELECT rznr
FROM rz, rzp
INTO :pnRZNr
WHERE rzparztnr = :pnArztNr
AND rzprechnr = :pnRechNr
AND rznr=rzpnr AND rzkuenddat IS NULL AND rzaktivdat IS NOT NULL AND rzdeaktiv IS NULL");
					}
					if (locals.phSql.FetchNext(ref locals.nInd)) 
					{
						Var.bExists = true;
					}
					else
					{
						Var.bExists = false;
					}
					return Var.bExists;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnRZNr = locals.pnRZNr;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRestDM"></param>
		/// <returns></returns>
		public SalBoolean GetGesamtOP(SalSqlHandle phSql, SalNumber pnArztNr, ref SalNumber pnHalterNr, ref SalNumber pnRestDM)
		{
			#region Local Variables
			SqlLocals.GetGesamtOPLocals locals = new SqlLocals.GetGesamtOPLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnHalterNr = pnHalterNr;
					locals.pnRestDM = pnRestDM;

					locals.phSql.PrepareAndExecute("SELECT ANR2 INTO :nArzt2 FROM A WHERE AARZTNR = :pnArztNr");
					// 30.10.06 F72
					locals.nInd = locals.phSql.FetchNext();

					if (locals.nArzt2 == 0) 
					{
						locals.nArzt2 = locals.pnArztNr;
					}
					locals.phSql.PrepareAndExecute(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
from rk into :pnRestDM where rkhalternr=:pnHalterNr
and rkarztnr in ( :pnArztNr, :nArzt2)
and rkkzzahl <2 AND rkdeaktiv IS NULL");
					if (locals.phSql.FetchNext(ref locals.nInd)) 
					{
						locals.bExists = true;
					}
					return locals.bExists;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnHalterNr = locals.pnHalterNr;
					pnRestDM = locals.pnRestDM;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnMGAusbuchen"></param>
		/// <param name="pnKleinBetrag"></param>
		/// <returns></returns>
		public SalNumber GetAusbuchen(SalSqlHandle phSql, SalNumber pnArztNr, ref SalNumber pnMGAusbuchen, ref SalNumber pnKleinBetrag)
		{
			#region Local Variables
			SqlLocals.GetAusbuchenLocals locals = new SqlLocals.GetAusbuchenLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnMGAusbuchen = pnMGAusbuchen;
					locals.pnKleinBetrag = pnKleinBetrag;

					if (locals.phSql.PrepareAndExecute(@"
SELECT amgausbuchen, akleinbetrag
FROM A
INTO :pnMGAusbuchen, :pnKleinBetrag
WHERE AARZTNR = :pnArztNr")) 
					{
						locals.nInd = locals.phSql.FetchNext();
					}

					return 0;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnMGAusbuchen = locals.pnMGAusbuchen;
					pnKleinBetrag = locals.pnKleinBetrag;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnSkonto"></param>
		/// <returns></returns>
		public SalNumber GetHalterAusbuchen(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, ref SalNumber pnSkonto)
		{
			#region Local Variables
			SqlLocals.GetHalterAusbuchenLocals locals = new SqlLocals.GetHalterAusbuchenLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnHalterNr = pnHalterNr;
					locals.pnSkonto = pnSkonto;

					if (locals.phSql.PrepareAndExecute(@"
SELECT hskonto
FROM H
INTO :pnSkonto
WHERE HARZTNR = :pnArztNr
AND HHALTERNR = :pnHalterNr")) 
					{
						locals.nInd = locals.phSql.FetchNext();
					}

					return 0;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnSkonto = locals.pnSkonto;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnTVSMahnGeb"></param>
		/// <param name="pnTVSMahnDM1"></param>
		/// <param name="pnTVSMahnDM2"></param>
		/// <param name="pnTVSMahnDM3"></param>
		/// <returns></returns>
		public SalNumber GetMahngeb(SalSqlHandle phSql, SalNumber pnArztNr, ref SalNumber pnTVSMahnGeb, ref SalNumber pnTVSMahnDM1, ref SalNumber pnTVSMahnDM2, ref SalNumber pnTVSMahnDM3)
		{
			#region Local Variables
			SqlLocals.GetMahngebLocals locals = new SqlLocals.GetMahngebLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnTVSMahnGeb = pnTVSMahnGeb;
					locals.pnTVSMahnDM1 = pnTVSMahnDM1;
					locals.pnTVSMahnDM2 = pnTVSMahnDM2;
					locals.pnTVSMahnDM3 = pnTVSMahnDM3;

					if (locals.phSql.PrepareAndExecute(@"
SELECT mgdmtvs, mgdm1, mgdm2, mgdm3
FROM MG
INTO :pnTVSMahnGeb, :pnTVSMahnDM1, :pnTVSMahnDM2, :pnTVSMahnDM3
WHERE MGARZTNR = :pnArztNr")) 
					{
						if (!(locals.phSql.FetchNext(ref locals.nInd))) 
						{
							// 15.11.23 F5031 +, :pnTVSMahnDM1, :pnTVSMahnDM2, :pnTVSMahnDM3
							if (locals.phSql.PrepareAndExecute(@"
SELECT mgdmtvs, mgdm1, mgdm2, mgdm3
FROM MG
INTO :pnTVSMahnGeb, :pnTVSMahnDM1, :pnTVSMahnDM2, :pnTVSMahnDM3
WHERE MGARZTNR = 0")) 
							{
								locals.nInd = locals.phSql.FetchNext();
							}
						}
					}

					return 0;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnTVSMahnGeb = locals.pnTVSMahnGeb;
					pnTVSMahnDM1 = locals.pnTVSMahnDM1;
					pnTVSMahnDM2 = locals.pnTVSMahnDM2;
					pnTVSMahnDM3 = locals.pnTVSMahnDM3;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnKZMwSt"></param>
		/// <returns></returns>
		public SalNumber GetMehrwertsteuer(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, ref SalNumber pnKZMwSt)
		{
			#region Local Variables
			SqlLocals.GetMehrwertsteuerLocals locals = new SqlLocals.GetMehrwertsteuerLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnHalterNr = pnHalterNr;
					locals.pnRechNr = pnRechNr;
					locals.pnKZMwSt = pnKZMwSt;

					if (locals.phSql.PrepareAndExecute(@"
SELECT rkkzmwst
FROM RK
INTO :pnKZMwSt
WHERE rkarztnr = :pnArztNr
AND rkhalternr = :pnHalterNr
AND rkrechnr = :pnRechNr")) 
					{
						locals.nInd = locals.phSql.FetchNext();
					}

					return 0;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnKZMwSt = locals.pnKZMwSt;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnRestL"></param>
		/// <param name="pnRestA"></param>
		/// <param name="pnRestM"></param>
		/// <param name="pnRestZ"></param>
		/// <returns></returns>
		public SalNumber GetRest(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnRechNr, ref SalNumber pnRestL, ref SalNumber pnRestA, ref SalNumber pnRestM, ref SalNumber pnRestZ)
		{
			#region Local Variables
			SqlLocals.GetRestLocals locals = new SqlLocals.GetRestLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnRechNr = pnRechNr;
				locals.pnRestL = pnRestL;
				locals.pnRestA = pnRestA;
				locals.pnRestM = pnRestM;
				locals.pnRestZ = pnRestZ;

				if (locals.phSql.PrepareAndExecute(@"
SELECT (rkdmleis-rkzaleis), (rkdmarzn-rkzaarzn), (rkdmmahn-rkzamahn), (rkdmzins-rkzazins)
FROM RK
INTO :pnRestL, :pnRestA, :pnRestM, :pnRestZ
WHERE  rkarztnr = :pnArztNr
AND rkrechnr = :pnRechNr AND rkdeaktiv IS NULL")) 
				{
					locals.nInd = locals.phSql.FetchNext();
                    //FC:FINAL:#60 Assign back receive parameters.
                    pnRestL = locals.pnRestL;
                    pnRestA = locals.pnRestA;
                    pnRestM = locals.pnRestM;
                    pnRestZ = locals.pnRestZ;
                }

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnProzNr"></param>
		/// <returns></returns>
		public SalNumber GetProzNr(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, ref SalNumber pnProzNr)
		{
			#region Local Variables
			SqlLocals.GetProzNrLocals locals = new SqlLocals.GetProzNrLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnHalterNr = pnHalterNr;
					locals.pnRechNr = pnRechNr;
					locals.pnProzNr = pnProzNr;

					if (locals.pnRechNr >= 999990)  // 07.01.99
					{
						// If SqlPrepareAndExecute( phSql, '
						// SELECT prdnr
						// FROM prd
						// INTO :pnProzNr
						// WHERE prdarztnr = :pnArztNr AND prdhalternr = :pnHalterNr AND prdrechnr = :pnRechNr')
						// Call SqlFetchNext( phSql, nInd )
					}
					else
					{
						// 24.11.11 F1079
						// If SqlPrepareAndExecute( phSql, '
						// SELECT prdnr
						// FROM prd
						// INTO :pnProzNr
						// WHERE prdarztnr = :pnArztNr AND prdrechnr = :pnRechNr')
						// Call SqlFetchNext( phSql, nInd )
						if (locals.phSql.PrepareAndExecute(@"
SELECT prdnr
FROM prd
INTO :pnProzNr
WHERE prdarztnr = :pnArztNr AND prdrechnr = :pnRechNr  AND prdnr NOT IN (SELECT mbnr FROM mb)")) 
						{
							locals.nInd = locals.phSql.FetchNext();
						}
					}

					return 0;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnProzNr = locals.pnProzNr;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnProzNr"></param>
		/// <param name="pnDMOP"></param>
		/// <returns></returns>
		public SalNumber GetProzOP(SalSqlHandle phSql, SalNumber pnProzNr, ref SalNumber pnDMOP)
		{
			#region Local Variables
			SqlLocals.GetProzOPLocals locals = new SqlLocals.GetProzOPLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnProzNr = pnProzNr;
					locals.pnDMOP = pnDMOP;

					// If SqlPrepareAndExecute( phSql, '
					// SELECT prhalternr, pra1, prr1, pra2, prr2, pra3, prr3, pra4, prr4, pra5, prr5, pra6, prr6
					// FROM pr
					// INTO :frmBankZahl.nH, :frmBankZahl.nA1, :frmBankZahl.nR1,
					// :frmBankZahl.nA2, :frmBankZahl.nR2,
					// :frmBankZahl.nA3, :frmBankZahl.nR3,
					// :frmBankZahl.nA4, :frmBankZahl.nR4,
					// :frmBankZahl.nA5, :frmBankZahl.nR5,
					// :frmBankZahl.nA6, :frmBankZahl.nR6
					// WHERE prnr = :pnProzNr')
					// Call SqlFetchNext( phSql, nInd )
					// Set strpSelect = 'SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
					// INTO :pnDMOP
					// FROM pr,rk
					// WHERE rkhalternr = :frmBankZahl.nH AND rkkzzahl<2 and  prnr=:pnProzNr and  ('
					// If nR1 != NUMBER_Null
					// Set strpSelect = strpSelect || '(pra1 = :frmBankZahl.nA1 AND prr1 = :frmBankZahl.nR1) OR '
					// If nR2 != NUMBER_Null
					// Set strpSelect = strpSelect || '(pra2 = :frmBankZahl.nA2 AND prr2 = :frmBankZahl.nR2) OR '
					// If nR3 != NUMBER_Null
					// Set strpSelect = strpSelect || '(pra3 = :frmBankZahl.nA3 AND prr3 = :frmBankZahl.nR3) OR '
					// If nR4 != NUMBER_Null
					// Set strpSelect = strpSelect || '(pra4 = :frmBankZahl.nA4 AND prr4 = :frmBankZahl.nR4) OR '
					// If nR5 != NUMBER_Null
					// Set strpSelect = strpSelect || '(pra5 = :frmBankZahl.nA5 AND prr5 = :frmBankZahl.nR5) OR '
					// If nR6 != NUMBER_Null
					// Set strpSelect = strpSelect || '(pra6 = :frmBankZahl.nA6 AND prr6 = :frmBankZahl.nR6) OR '
					// Set strpSelect = SalStrLeftX(strpSelect, SalStrLength(strpSelect)-3) || ')'
					// 12.03.02
					locals.strpSelect = @"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
INTO :pnDMOP
FROM prd, rk
WHERE prdarztnr=rkarztnr AND prdhalternr=rkhalternr AND prdrechnr=rkrechnr AND rkkzzahl<2 AND  prdnr=:pnProzNr AND rkdeaktiv IS NULL";
					if (locals.phSql.PrepareAndExecute(locals.strpSelect)) 
					{
						locals.nInd = locals.phSql.FetchNext();
					}

					return 0;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnDMOP = locals.pnDMOP;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnProzNr"></param>
		/// <returns></returns>
		public SalNumber UpdateProzBez(SalSqlHandle phSql, SalNumber pnProzNr)
		{
			#region Local Variables
			SqlLocals.UpdateProzBezLocals locals = new SqlLocals.UpdateProzBezLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnProzNr = pnProzNr;

				locals.pdtDatum = SalDateTime.Current;
				if (locals.phSql.PrepareAndExecute(@"
UPDATE pr SET
prbezahlt = :pdtDatum
WHERE prnr = :pnProzNr")) 
				{
					locals.phSql.Commit();
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnZahlDM"></param>
		/// <returns></returns>
		public SalNumber CheckRechAb(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, SalNumber pnZahlDM)
		{
			#region Local Variables
			SqlLocals.CheckRechAbLocals locals = new SqlLocals.CheckRechAbLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;
				locals.pnZahlDM = pnZahlDM;

				if (locals.pnZahlDM > 0) 
				{
					Sql.Exists(@"
SELECT *
FROM ra
WHERE raarztnr = :pnArztNr AND rahalternr = :pnHalterNr AND rarechnr = :pnRechNr", ref locals.bExists);
					if (locals.bExists) 
					{
						if (locals.phSql.PrepareAndExecute(@"
SELECT hti, hvn, hnn, hname2, hstr, hort, hland
FROM h
INTO :pstrTHTi, :pstrTHVN, :pstrTHNN, :pstrTHN2, :pstrTHStr, :pstrTHOrt, :pstrTHLand
WHERE harztnr = :pnArztNr
AND hhalternr = :pnHalterNr AND hdeaktiv IS NULL")) 
						{
							locals.nInd = locals.phSql.FetchNext();
						}
						// 10.04.06 Ländercodes
						locals.pstrTHLand = Int.PalPruefeLC(locals.pstrTHLand, 0);

						// 06.08.08
						if (Var.bfrmBriefVari) 
						{
							while (!(App.frmBriefVari.DestroyWindow())) 
							{
							}
						}

						frmBriefVari.CreateWindow(this, locals.pnArztNr, locals.pnHalterNr, locals.pnRechNr, "R", @"Sehr geehrte Damen und Herren,

heute wurde bei uns für die Rechnung " + locals.pnArztNr.ToString(0) + "/R" + locals.pnRechNr.ToString(0) + @"
eine Zahlung in Höhe von EUR " + locals.pnZahlDM.ToString(2) + @" gebucht.

Der Schuldner ist :

" + locals.pstrTHTi + locals.pstrTHVN + " " + locals.pstrTHNN + @"
" + locals.pstrTHN2 + @"
" + locals.pstrTHStr + @"
" + locals.pstrTHOrt + @"
" + locals.pstrTHLand + @"


Wir bitten um Beachtung !", new SalDateTime(1900, 1, 1), "", "", "", "", "", false);
						Sal.MessageBox("Ok wenn gedruckt", "Druck Ok?", Sys.MB_Ok);
					}
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnZahlDM"></param>
		/// <returns></returns>
		public SalNumber BriefMS7(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, SalNumber pnZahlDM)
		{
			#region Local Variables
			SqlLocals.BriefMS7Locals locals = new SqlLocals.BriefMS7Locals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;
				locals.pnZahlDM = pnZahlDM;

				if (locals.pnZahlDM > 0)  // 23.02.16
				{
					if (locals.phSql.PrepareAndExecute(@"
SELECT hti, hvn, hnn, hname2, hstr, hort, hland
FROM h
INTO :pstrTHTi, :pstrTHVN, :pstrTHNN, :pstrTHN2, :pstrTHStr, :pstrTHOrt, :pstrTHLand
WHERE harztnr = :pnArztNr
AND hhalternr = :pnHalterNr")) 
					{
						locals.nInd = locals.phSql.FetchNext();
					}
					// 10.04.06 Ländercodes
					locals.pstrTHLand = Int.PalPruefeLC(locals.pstrTHLand, 0);

					// 06.08.08
					if (Var.bfrmBriefVari) 
					{
						while (!(App.frmBriefVari.DestroyWindow())) 
						{
						}
					}

					frmBriefVari.CreateWindow(this, locals.pnArztNr, locals.pnHalterNr, locals.pnRechNr, "A", @"Sehr geehrte Damen und Herren,

heute wurde bei uns für die Rechnung " + locals.pnArztNr.ToString(0) + "/R" + locals.pnRechNr.ToString(0) + @"
eine Zahlung in Höhe von EUR " + locals.pnZahlDM.ToString(2) + @" gebucht.

Der Schuldner ist :

" + locals.pstrTHTi + locals.pstrTHVN + " " + locals.pstrTHNN + @"
" + locals.pstrTHN2 + @"
" + locals.pstrTHStr + @"
" + locals.pstrTHOrt + @"
" + locals.pstrTHLand + @"


Wir bitten um Beachtung !", new SalDateTime(1900, 1, 1), "", "", "", "", "", false);
					Sal.MessageBox("Ok wenn gedruckt", "Druck Ok?", Sys.MB_Ok);
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnMahnAnz"></param>
		/// <returns></returns>
		public SalNumber GetMahnAnz(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnRechNr, ref SalNumber pnMahnAnz)
		{
			#region Local Variables
			SqlLocals.GetMahnAnzLocals locals = new SqlLocals.GetMahnAnzLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnRechNr = pnRechNr;
					locals.pnMahnAnz = pnMahnAnz;

					if (locals.phSql.PrepareAndExecute(@"
SELECT COUNT(*)
FROM ma
INTO :pnMahnAnz
WHERE MAARZTNR = :pnArztNr
AND MARECHNR = :pnRechNr")) 
					{
						locals.nInd = locals.phSql.FetchNext();
					}

					return 0;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnMahnAnz = locals.pnMahnAnz;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnFertig"></param>
		/// <param name="pstrBankKonto"></param>
		/// <param name="pnHaben"></param>
		/// <param name="pnBelNr"></param>
		/// <param name="pdtBelDat"></param>
		/// <param name="pstrBuchText"></param>
		/// <param name="pnDiverse"></param>
		/// <param name="pnTyp"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <returns></returns>
		public SalNumber InsertFiBu(SalSqlHandle phSql, SalNumber pnFertig, SalString pstrBankKonto, SalNumber pnHaben, SalNumber pnBelNr, SalDateTime pdtBelDat, SalString pstrBuchText, SalNumber pnDiverse, SalNumber pnTyp, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr)
		{
			#region Local Variables
			SqlLocals.InsertFiBuLocals locals = new SqlLocals.InsertFiBuLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnFertig = pnFertig;
				locals.pstrBankKonto = pstrBankKonto;
				locals.pnHaben = pnHaben;
				locals.pnBelNr = pnBelNr;
				locals.pdtBelDat = pdtBelDat;
				locals.pstrBuchText = pstrBuchText;
				locals.pnDiverse = pnDiverse;
				locals.pnTyp = pnTyp;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;

				if (locals.phSql.PrepareAndExecute(@"
INSERT INTO FI
( fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiarztnr, fihalternr, firechnr )
VALUES
( :pnFertig, :pstrBankKonto, :pnHaben, :pnBelNr, :pdtBelDat, :pstrBuchText, :pnDiverse, :pnTyp, :pnArztNr, :pnHalterNr, :pnRechNr )")) 
				{
					locals.phSql.Commit();
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnProzNr"></param>
		/// <param name="pnKZZahl"></param>
		/// <param name="pnBelNr"></param>
		/// <param name="pnBuchDM"></param>
		/// <param name="pdtBuchDat"></param>
		/// <param name="pnRZNr"></param>
		/// <returns></returns>
		public SalNumber InsertZahlung(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, SalNumber pnProzNr, SalNumber pnKZZahl, SalNumber pnBelNr, SalNumber pnBuchDM, SalDateTime pdtBuchDat, SalNumber pnRZNr)
		{
			#region Local Variables
			SqlLocals.InsertZahlungLocals locals = new SqlLocals.InsertZahlungLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;
				locals.pnProzNr = pnProzNr;
				locals.pnKZZahl = pnKZZahl;
				locals.pnBelNr = pnBelNr;
				locals.pnBuchDM = pnBuchDM;
				locals.pdtBuchDat = pdtBuchDat;
				locals.pnRZNr = pnRZNr;

				// 13.05.14 F2027
				locals.pnHalterNr = Int.PalCheckNULL(locals.pnHalterNr);

				// 26.03.19 Ä1844 + , zaerfdat
				if (locals.phSql.PrepareAndExecute(@"
INSERT INTO ZA
( zaarztnr, zahalternr, zarechnr, zakz, zabuchdat, zabelegnr, zadm, zaproznr, zarznr, zaerfdat )
VALUES
( :pnArztNr, :pnHalterNr, :pnRechNr, :pnKZZahl, :pdtBuchDat, :pnBelNr, :pnBuchDM, :pnProzNr, :pnRZNr, SYSDATETIME )")) 
				{
					locals.phSql.Commit();
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pstrBuchText"></param>
		/// <param name="pnBelNr"></param>
		/// <param name="pdtBuchDat"></param>
		/// <param name="pnZahlLeis"></param>
		/// <param name="pnZahlArzn"></param>
		/// <param name="pnZahlMahn"></param>
		/// <param name="pnZahlZins"></param>
		/// <param name="pnRPMwSt"></param>
		/// <param name="pnMwSatz"></param>
		/// <param name="pnKZZahl"></param>
		/// <param name="pnDummyHaben"></param>
		/// <param name="pnReverseVersion"></param>
		/// <param name="pnDMMahn">22.08.22 Ä2015</param>
		/// <param name="pnDMRech">22.08.22 Ä2015</param>
		/// <param name="pstrKontoCode">14.11.23 Ä2144 +Kontierung</param>
		/// <returns></returns>
		public SalNumber InsertKonto(
					SalSqlHandle phSql, 
					SalNumber pnArztNr, 
					SalNumber pnHalterNr, 
					SalNumber pnRechNr, 
					SalString pstrBuchText, 
					SalNumber pnBelNr, 
					SalDateTime pdtBuchDat, 
					SalNumber pnZahlLeis, 
					SalNumber pnZahlArzn, 
					SalNumber pnZahlMahn, 
					SalNumber pnZahlZins, 
					SalNumber pnRPMwSt, 
					SalNumber pnMwSatz, 
					SalNumber pnKZZahl, 
					SalNumber pnDummyHaben, 
					SalNumber pnReverseVersion, 
					SalNumber pnDMMahn, 
					SalNumber pnDMRech, 
					SalString pstrKontoCode)
		{
			#region Local Variables
			SqlLocals.InsertKontoLocals locals = new SqlLocals.InsertKontoLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;
				locals.pstrBuchText = pstrBuchText;
				locals.pnBelNr = pnBelNr;
				locals.pdtBuchDat = pdtBuchDat;
				locals.pnZahlLeis = pnZahlLeis;
				locals.pnZahlArzn = pnZahlArzn;
				locals.pnZahlMahn = pnZahlMahn;
				locals.pnZahlZins = pnZahlZins;
				locals.pnRPMwSt = pnRPMwSt;
				locals.pnMwSatz = pnMwSatz;
				locals.pnKZZahl = pnKZZahl;
				locals.pnDummyHaben = pnDummyHaben;
				locals.pnReverseVersion = pnReverseVersion;
				locals.pnDMMahn = pnDMMahn;
				locals.pnDMRech = pnDMRech;
				locals.pstrKontoCode = pstrKontoCode;

				// 22.02.07 F132
				if (locals.pnDummyHaben != 0 || locals.pnDMMahn != 0 || locals.pnDMRech != 0) 
				{
					// 14.11.23 Ä2144 +Kontierung
					if (locals.phSql.PrepareAndExecute(@"
INSERT INTO TK
( tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tkdmmahn, tksoll, tkhaben, tkreverseversion, tkkontocode )
VALUES
( :pnArztNr, 1, 0, :pstrBuchText, :pnHalterNr, :pnRechNr, :pnBelNr, :pdtBuchDat,
0, 0, 1, 0, :pnZahlLeis, :pnZahlArzn, :pnZahlMahn, :pnZahlZins,
:pnRPMwSt, :pnMwSatz, :pnKZZahl, 0, :pnDMRech, :pnDMMahn, 0, :pnDummyHaben, :pnReverseVersion, :pstrKontoCode )")) 
					{
						locals.phSql.Commit();
					}
				}

				return 0;
			}
			#endregion
		}
		// Function: RatenZahlung
		// Description:
		// Returns
		// Parameters
		// Sql Handle: phSql
		// Number: pnArztNr
		// Number: pnHalterNr
		// Number: pnBuchDM
		// Static Variables
		// Local variables
		// Boolean: bExists
		// Date/Time: dtRatDat
		// Number: nRatMtl
		// Number: nIndRat
		// Number: nRestDM
		// Number: nArztNr2
		// Actions
		// 14.02.01
		// Call SqlExists( '
		// SELECT *
		// FROM r
		// WHERE rarztnr = :pnArztNr
		// AND rhalternr = :pnHalterNr', bExists )
		// If Not bExists
		// If SqlPrepareAndExecute( phSql, '
		// SELECT anr2
		// FROM a
		// WHERE aarztnr = :pnArztNr
		// INTO :nArztNr2')
		// Call SqlFetchNext( phSql, nIndRat )
		// Call SqlExists( '
		// SELECT *
		// FROM r
		// WHERE rarztnr = :nArztNr2
		// AND rhalternr = :pnHalterNr', bExists )
		// If bExists
		// Set pnArztNr = nArztNr2
		// If bExists
		// If GetGesamtOP( hSqlBankZahl, pnArztNr, pnHalterNr, nRestDM)
		// If nRestDM > pnBuchDM
		// If SqlPrepareAndExecute(phSql, '
		// SELECT rmtl INTO :nRatMtl FROM R
		// WHERE rarztnr = :pnArztNr
		// AND rhalternr = :pnHalterNr' )
		// Call SqlFetchNext( phSql, nIndRat )
		// Set dtRatDat = SalDateCurrent() + nRatMtl*30
		// If SqlPrepareAndExecute( phSql, '
		// UPDATE r SET
		// r1 = :dtRatDat
		// WHERE  rarztnr = :pnArztNr
		// AND rhalternr = :pnHalterNr' )
		// Call SqlCommit( phSql )
		// Else
		// Call PalLog('RaZa autom. gekündigt: Ha.'
		// || PalStrNum(pnArztNr, 4, 0) || '/' || PalStrNum(pnHalterNr, 5,0))
		// If SqlPrepareAndExecute( phSql, '
		// DELETE FROM r
		// WHERE  rarztnr = :pnArztNr
		// AND rhalternr = :pnHalterNr' )
		// Call SqlCommit( phSql )
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnKZZahl"></param>
		/// <param name="pnZaLeis"></param>
		/// <param name="pnZaArzn"></param>
		/// <param name="pnZaMahn"></param>
		/// <param name="pnZaZins"></param>
		/// <param name="pnMahnstufe"></param>
		/// <param name="pdtTeilzDat"></param>
		/// <param name="pdtVerjDat"></param>
		/// <returns></returns>
		public SalNumber UpdateRechnung(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, SalNumber pnKZZahl, SalNumber pnZaLeis, SalNumber pnZaArzn, SalNumber pnZaMahn, SalNumber pnZaZins, SalNumber pnMahnstufe, SalDateTime pdtTeilzDat, SalDateTime pdtVerjDat)
		{
			#region Local Variables
			SqlLocals.UpdateRechnungLocals locals = new SqlLocals.UpdateRechnungLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;
				locals.pnKZZahl = pnKZZahl;
				locals.pnZaLeis = pnZaLeis;
				locals.pnZaArzn = pnZaArzn;
				locals.pnZaMahn = pnZaMahn;
				locals.pnZaZins = pnZaZins;
				locals.pnMahnstufe = pnMahnstufe;
				locals.pdtTeilzDat = pdtTeilzDat;
				locals.pdtVerjDat = pdtVerjDat;

				if (locals.pnRechNr >= 999990) 
				{
					if (locals.phSql.PrepareAndExecute(@"
UPDATE RK SET
rkkzzahl = :pnKZZahl,
rkzaleis = :pnZaLeis,
rkzaarzn = :pnZaArzn,
rkmbzaopl = :pnZaMahn,
rkzazins = :pnZaZins,
rkteilzdat = :pdtTeilzDat
WHERE rkarztnr = :pnArztNr
AND rkhalternr = :pnHalterNr
AND rkrechnr = :pnRechNr")) 
					{
						locals.phSql.Commit();
					}
				}
				else
				{
					locals.pdtDatum = new SalDateTime(locals.pdtTeilzDat.Year() + 2, locals.pdtTeilzDat.Month(), locals.pdtTeilzDat.Day(), 0, 0, 0);
					if (locals.pdtDatum > locals.pdtVerjDat) 
					{
						locals.pdtVerjDat = locals.pdtDatum;
					}
					if (locals.phSql.PrepareAndExecute(@"
UPDATE RK SET
rkkzzahl = :pnKZZahl,
rkzaleis = :pnZaLeis,
rkzaarzn = :pnZaArzn,
rkzamahn = :pnZaMahn,
rkzazins = :pnZaZins,
rkteilzdat = :pdtTeilzDat,
rkmahnstufe = :pnMahnstufe,
rkverjaehr = :pdtVerjDat
WHERE rkarztnr = :pnArztNr
AND rkhalternr = :pnHalterNr
AND rkrechnr = :pnRechNr")) 
					{
						locals.phSql.Commit();
					}
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnProzMwSt"></param>
		/// <param name="pnDiverse"></param>
		/// <param name="pnRP1MwSt"></param>
		/// <param name="pstrLA"></param>
		/// <param name="pnReverseVersion"></param>
		/// <param name="pnRPZahl"></param>
		/// <returns></returns>
		public SalNumber UpdateRechPosition(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnRechNr, SalNumber pnProzMwSt, SalNumber pnDiverse, SalNumber pnRP1MwSt, SalString pstrLA, SalNumber pnReverseVersion, SalNumber pnRPZahl)
		{
			#region Local Variables
			SqlLocals.UpdateRechPositionLocals locals = new SqlLocals.UpdateRechPositionLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnRechNr = pnRechNr;
				locals.pnProzMwSt = pnProzMwSt;
				locals.pnDiverse = pnDiverse;
				locals.pnRP1MwSt = pnRP1MwSt;
				locals.pstrLA = pstrLA;
				locals.pnReverseVersion = pnReverseVersion;
				locals.pnRPZahl = pnRPZahl;

				// 02.12.14 Ä1104
				if (locals.pnReverseVersion == SalNumber.Null) 
				{
					locals.pnSelect = @"SELECT ROWID
FROM RP
INTO :strROWIDLocal
WHERE rparztnr = :pnArztNr
AND rprechnr = :pnRechNr
AND rpmwst = :pnProzMwSt
AND rpla = :pstrLA
AND rpreverseversion IS NULL";
				}
				else
				{
					locals.pnSelect = @"SELECT ROWID
FROM RP
INTO :strROWIDLocal
WHERE rparztnr = :pnArztNr
AND rprechnr = :pnRechNr
AND rpmwst = :pnProzMwSt
AND rpla = :pstrLA
AND rpreverseversion = :pnReverseVersion";
				}

				if (locals.phSql.PrepareAndExecute(locals.pnSelect)) 
				{
					if (locals.phSql.FetchNext(ref locals.nInd)) 
					{
						// 02.12.14 Ä1104 fehler gefunden: rpdmzahl = ( :pnDiverse - :pnRP1MwSt ) -> rpdmzahl = rpdmzahl + ( :pnDiverse - :pnRP1MwSt )
						locals.pnDiverse = locals.pnRPZahl + (locals.pnDiverse - locals.pnRP1MwSt);
						if (locals.phSql.PrepareAndExecute(@"
UPDATE RP SET
rpdmzahl = :pnDiverse
WHERE ROWID = :strROWIDLocal")) 
						{
							locals.phSql.Commit();
						}
					}
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pstrBLZ"></param>
		/// <param name="pstrKonto"></param>
		/// <returns></returns>
		public SalNumber UpdateHalter(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalString pstrBLZ, SalString pstrKonto)
		{
			#region Local Variables
			SqlLocals.UpdateHalterLocals locals = new SqlLocals.UpdateHalterLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pstrBLZ = pstrBLZ;
				locals.pstrKonto = pstrKonto;

				// 23.01.17 Ä1478
				if (locals.phSql.PrepareAndExecute(@"
UPDATE H SET
hbic = :pstrBLZ,
hiban = :pstrKonto
WHERE harztnr = :pnArztNr
AND hhalternr = :pnHalterNr")) 
				{
					locals.phSql.Commit();
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// buchen einer Zahlung
		/// </summary>
		/// <param name="strMA">Buchung: M=manuell A=automatisch</param>
		/// <param name="nArztNr"></param>
		/// <param name="nHalterNr"></param>
		/// <param name="nRechNr"></param>
		/// <param name="nZahlDMX"></param>
		/// <param name="dtBuchDatX"></param>
		/// <param name="strBankKontoX"></param>
		/// <param name="nBelNrX"></param>
		/// <param name="nBuchungsDM"></param>
		/// <param name="nRestLX"></param>
		/// <param name="nRestAX"></param>
		/// <param name="nRestMX"></param>
		/// <param name="nRestZX"></param>
		/// <param name="nRZNrX"></param>
		/// <param name="bRZ"></param>
		/// <returns></returns>
		public SalString ZahlungBuchen(SalString strMA, SalNumber nArztNr, SalNumber nHalterNr, SalNumber nRechNr, SalNumber nZahlDMX, SalDateTime dtBuchDatX, SalString strBankKontoX, SalNumber nBelNrX, ref SalNumber nBuchungsDM, ref SalNumber nRestLX, ref SalNumber nRestAX, ref SalNumber nRestMX, ref SalNumber nRestZX, SalNumber nRZNrX, SalBoolean bRZ)
		{
			#region Local Variables
			SqlLocals.ZahlungBuchenLocals locals = new SqlLocals.ZahlungBuchenLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.strMA = strMA;
					locals.nArztNr = nArztNr;
					locals.nHalterNr = nHalterNr;
					locals.nRechNr = nRechNr;
					locals.nZahlDMX = nZahlDMX;
					locals.dtBuchDatX = dtBuchDatX;
					locals.strBankKontoX = strBankKontoX;
					locals.nBelNrX = nBelNrX;
					locals.nBuchungsDM = nBuchungsDM;
					locals.nRestLX = nRestLX;
					locals.nRestAX = nRestAX;
					locals.nRestMX = nRestMX;
					locals.nRestZX = nRestZX;
					locals.nRZNrX = nRZNrX;
					locals.bRZ = bRZ;

					// Fr.Gaus - Nach Rückspr. mit H.Sasse und der BH MG-Ausb.=Ja auch Zinsen mit ausbuchen.
					locals.nBuchungsDM = 0;
					this.SetStatusBarText("Rech-Nr.: " + locals.nArztNr.ToString(0) + "/" + locals.nHalterNr.ToString(0) + "/" + locals.nRechNr.ToString(0));
					// 23.11.07 Fehlabrechnung 448 vom 12.10.07
					if (locals.nArztNr == 448 && (locals.nRechNr >= 8456 && locals.nRechNr <= 8485)) 
					{
						locals.strReturn = "nicht gebucht / 448-Fehler";
						return locals.strReturn;
					}

					if (locals.nZahlDMX < 0) 
					{
						locals.strReturn = "nicht gebucht / Minusbetrag";
						return locals.strReturn;
					}
					// Hole Rechnung
					if (!(GetRechnung(hSqlBankZahl, locals.nArztNr, ref locals.nHalterNr, locals.nRechNr, ref locals.nDMLeis, ref locals.nDMArzn, ref locals.nDMMahn, ref locals.nDMZins, ref locals.nZaLeis, ref locals.nZaArzn, ref locals.nZaMahn, ref locals.nZaZins, ref 
						locals.nRestDM, ref locals.nMahnstufe, ref locals.dtVerjDat))) 
					{
						locals.strReturn = "nicht gebucht / Rechnung nicht vorhanden";
						return locals.strReturn;
					}
					// 23.03.01
					// 01.03.19 F3542 +  and Not bRZ
					if ((locals.nRechNr >= 999990 || locals.nMahnstufe == 9) && !(locals.bRZ)) 
					{
						locals.strReturn = "nicht gebucht / MB";
						return locals.strReturn;
					}
					// Hole ProzNr		10.12.98
					locals.nProzNr = SalNumber.Null;
					GetProzNr(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, ref locals.nProzNr);
					// Hole MGAusbuchen + Kl.Betrag
					if (locals.nRechNr >= 999990 || locals.nMahnstufe == 9) 
					{
						locals.nMGAusbuchen = 0;
						locals.nKleinBetrag = 0;
						locals.nSkonto = 0;
					}
					else
					{
						GetAusbuchen(hSqlBankZahl, locals.nArztNr, ref locals.nMGAusbuchen, ref locals.nKleinBetrag);
						GetHalterAusbuchen(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, ref locals.nSkonto);
					}
					// Hole TVS-Mahngeb.
					if (locals.nRechNr >= 999990) 
					{
						locals.nTVSMahnGeb = 0;
					}
					else
					{
						GetMahngeb(hSqlBankZahl, locals.nArztNr, ref locals.nTVSMahnGeb, ref locals.nTVSDM1, ref locals.nTVSDM2, ref locals.nTVSDM3);
					}
					// 31.07.23 F5031
					locals.nTVSMahnGebjeMg = locals.nTVSMahnGeb;
					// 15.05.00
					GetMahnAnz(hSqlBankZahl, locals.nArztNr, locals.nRechNr, ref locals.nMahnAnz);
					locals.nTVSMahnGeb = locals.nTVSMahnGeb * locals.nMahnAnz;
					// If nMahnstufe > 3
					// Set nTVSMahnGeb = nTVSMahnGeb * 3
					// Else
					// Set nTVSMahnGeb = nTVSMahnGeb * nMahnstufe

					// Sonderfall 11/94
					locals.bSonder = false;
					// If nMahnstufe>0 and nMahnstufe<4 and nDMMahn<(nMahnstufe*4)
					// Set bSonder = TRUE
					// Set nDMMahn = nDMMahn + 4
					// Call SqlImmedX('UPDATE rk SET rkdmmahn = rkdmmahn + 4
					// WHERE rkarztnr = ' || SalNumberToStrX(nArzt,0) || '
					// AND rkhalternr = ' || SalNumberToStrX(nHalter,0) || '
					// AND rkrechnr = ' || SalNumberToStrX(nRech,0))
					// Wenn MG bereits bezahlt sind, nTVSMahnGeb = 0
					if (locals.nDMMahn - locals.nZaMahn <= 0) 
					{
						locals.nTVSMahnGeb = 0;
					}

					locals.nBuchDM = 0.00m;
					locals.nAusbuchDM = 0.00m;
					locals.nKZZahl = 0;
					// 31.07.23 F5031
					// If nTVSMahnGeb > 0
					// Set nMahnstufeDummy = nMahnstufe
					// Set nRestDMDummy = nRestDM + nZaMahn
					// If nMahnstufeDummy > 3
					// Set nMahnstufeDummy = 3
					// If nMahnstufeDummy = 3 and nRestDMDummy >= nTVSDM3
					// Set nMahnAnz = nMahnAnz - 1
					// Set nTVSMahnGeb = nTVSMahnGeb - nTVSMahnGebjeMg
					// Set nMahnstufeDummy = nMahnstufeDummy - 1
					// Set nRestDMDummy = nRestDMDummy - nTVSMahnGebjeMg
					// If nMahnstufeDummy = 2 and nRestDMDummy >= nTVSDM2
					// Set nMahnAnz = nMahnAnz - 1
					// Set nTVSMahnGeb = nTVSMahnGeb - nTVSMahnGebjeMg
					// Set nMahnstufeDummy = nMahnstufeDummy - 1
					// Set nRestDMDummy = nRestDMDummy - nTVSMahnGebjeMg
					// If nMahnstufeDummy = 1 and nRestDMDummy >= nTVSDM1
					// Set nMahnAnz = nMahnAnz - 1
					// Set nTVSMahnGeb = nTVSMahnGeb - nTVSMahnGebjeMg
					// Set nMahnstufeDummy = nMahnstufeDummy - 1
					// Set nRestDMDummy = nRestDMDummy - nTVSMahnGebjeMg
					// 28.09.23 F5031
					// Set nTVSMahnGeb = 0
					// Set nZahDMDummy = nZaMahn
					// If nZahDMDummy >= nTVSDM1 and nTVSDM1 > 0
					// Set nTVSMahnGeb = nTVSMahnGeb + nTVSMahnGebjeMg
					// Set nZahDMDummy = nZahDMDummy - nTVSDM1
					// If nZahDMDummy >= nTVSDM2 and nTVSDM2 > 0
					// Set nTVSMahnGeb = nTVSMahnGeb + nTVSMahnGebjeMg
					// Set nZahDMDummy = nZahDMDummy - nTVSDM2
					// If nZahDMDummy >= nTVSDM3 and nTVSDM3 > 0
					// Set nTVSMahnGeb = nTVSMahnGeb + nTVSMahnGebjeMg
					// Set nZahDMDummy = nZahDMDummy - nTVSDM3
					// 0=offen   1=TZ    2=VZ   3=VZ / MG ausgb.
					if (locals.nZahlDMX < locals.nRestDM) 
					{
						locals.nBuchDM = locals.nZahlDMX;
						locals.nRestDM = locals.nRestDM - locals.nZahlDMX;
						locals.nKZZahl = 1;
						if (locals.nRestDM <= locals.nDMMahn + locals.nDMZins + locals.nKleinBetrag + ((locals.nDMLeis + locals.nDMArzn) * locals.nSkonto / 100)) 
						{
							if (locals.nMGAusbuchen == 1 || locals.nDMMahn == 0.00m) 
							{
								// 14.10.22 Ä2015
								// Set nAusbuchDM = nDMMahn + nDMZins + nKleinBetrag + ((nDMLeis+nDMArzn) * nSkonto / 100)
								// Set nAusbuchDM = nDMMahn + nKleinBetrag + ((nDMLeis+nDMArzn) * nSkonto / 100)
								locals.nAusbuchDM = locals.nDMMahn + locals.nDMZins;

								if (locals.nRestDM - locals.nAusbuchDM < 0.00m) 
								{
									locals.nAusbuchDM = locals.nRestDM;
								}
								locals.nRestDM = locals.nRestDM - locals.nAusbuchDM;
								// 14.10.22 Ä2015
								locals.nAusbuchMahn = locals.nAusbuchDM;
								locals.nAusbuchRech = locals.nKleinBetrag + ((locals.nDMLeis + locals.nDMArzn) * locals.nSkonto / 100);
								if (locals.nRestDM - locals.nAusbuchRech < 0.00m) 
								{
									locals.nAusbuchRech = locals.nRestDM;
								}
								locals.nAusbuchDM = locals.nAusbuchRech + locals.nAusbuchMahn;
								locals.nAusbuchMahn = locals.nAusbuchMahn * -1;
								// Set nAusbuchRech = nAusbuchRech * -1

								locals.nKZZahl = 3;
							}
						}
						locals.nZahlDMX = 0.00m;
					}
					else if (locals.nZahlDMX == locals.nRestDM) 
					{
						locals.nBuchDM = locals.nZahlDMX;
						locals.nRestDM = 0.00m;
						locals.nKZZahl = 2;
						locals.nZahlDMX = 0.00m;
					}
					else if (locals.nZahlDMX > locals.nRestDM) 
					{
						if (locals.strMA == "M") 
						{
							locals.nBuchDM = locals.nRestDM;
							locals.nRestDM = 0.00m;
							locals.nZahlDMX = locals.nZahlDMX - locals.nBuchDM;
							locals.nKZZahl = 2;
						}
						else
						{
							locals.strReturn = "nicht gebucht / Überzahlung";
							return locals.strReturn;
						}
					}
					// 15.02.16 Ä1343
					if (locals.nRZNrX != 0) 
					{
						locals.nRZNr = locals.nRZNrX;
					}
					else
					{
						// 29.03.10 OTÄ135
						if (GetRaZa(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, ref locals.nRZNr)) 
						{
							locals.strReturn = "nicht gebucht / Ratenzahler";
							return locals.strReturn;
						}
					}

					Sal.WaitCursor(true);
					if (locals.nKZZahl == 1) 
					{
						// 11.06.21 Ä1962
						// Set strBuchText = 'TZ' || PalStrNum( nArztNr, 4, 0 ) || '/' || PalStrNum( nHalterNr, 5, 0 ) || '/' || PalStrNum( nRechNr, 6, 0 )
						locals.strBuchText = "Teilzahlung " + Int.PalStrNum(locals.nArztNr, 4, 0) + "/" + Int.PalStrNum(locals.nHalterNr, 5, 0) + "/" + Int.PalStrNum(locals.nRechNr, 6, 0);

						locals.strReturn = "gebucht / TZ";
					}
					else if (locals.nKZZahl == 2) 
					{
						locals.strBuchText = "Vollzahlung " + Int.PalStrNum(locals.nArztNr, 4, 0) + "/" + Int.PalStrNum(locals.nHalterNr, 5, 0) + "/" + Int.PalStrNum(locals.nRechNr, 6, 0);
						locals.strReturn = "gebucht / VZ";
					}
					else if (locals.nKZZahl == 3) 
					{
						locals.strBuchText = "Vollzahlung/Mahngeb. ausgebucht" + Int.PalStrNum(locals.nArztNr, 4, 0) + "/" + Int.PalStrNum(locals.nRechNr, 6, 0);
						locals.strReturn = "gebucht / VZ MG+Kl.betr. ausgebucht";
					}
					locals.nBuchungsDM = locals.nBuchDM;
					if (locals.nDMMahn > locals.nTVSMahnGeb && locals.nRechNr < 999990) 
					{
						locals.nTVSMahnDM = (locals.nZaLeis + locals.nZaArzn + locals.nZaMahn + locals.nBuchDM) - (locals.nDMLeis + locals.nDMArzn) - (locals.nDMMahn - locals.nTVSMahnGeb);
						if (locals.nTVSMahnDM < 0)  // 12.12.22 F4949
						{
							locals.nTVSMahnDM = locals.nTVSMahnDM * -1;
						}
					}
					else if (locals.nRechNr >= 999990)  // 07.01.99
					{
						// Set nTVSMahnDM = (nZaLeis+nZaArzn+nZaMahn+nZaZins+nBuchDM)-(nDMLeis+nDMArzn+nDMZins)
					}
					else
					{
						locals.nTVSMahnDM = 0.00m;
					}
					// wg. Zinsen
					if (locals.nRechNr < 999990 && locals.nTVSMahnDM > locals.nTVSMahnGeb) 
					{
						locals.nTVSMahnDM = locals.nTVSMahnGeb;
					}

					if (locals.nTVSMahnDM < 0.00m) 
					{
						locals.nTVSMahnDM = 0.00m;
					}
					if (locals.nTVSMahnDM > locals.nBuchDM) 
					{
						locals.nTVSMahnDM = locals.nBuchDM;
					}
					// 24.08.06 F33 auskommentiert:
					// Call SalStatusSetText(hWndForm,'Sachkonten-Buchungen')
					// If nTVSMahnDM > 0.00
					// If nRechNr >= 999990			!07.01.99 siehe unten
					// Set strBuchTextDummy = 'MBc' || PalStrNum( nArztNr, 4, 0 ) || '/' || PalStrNum( nHalterNr, 5, 0 ) || '/' || PalStrNum( nRechNr, 6, 0 )
					// Set nDiverse =nTVSMahnDM
					// Call InsertFiBu( hSqlBankZahl, 0, strBankKontoX, 16510, nBelNrX, dtBuchDatX, strBuchTextDummy, nDiverse, 3, nArztNr, nHalterNr, nRechNr )
					// Else
					// Set strBuchTextDummy = 'MG TVS' || PalStrNum( nArztNr, 4, 0 ) || '/' || PalStrNum( nRechNr, 6, 0 )
					// Set nDiverse = SalNumberRound(nTVSMahnDM*10000/(100 + nMwStVoll)) / 100
					// If InsertFiBu( hSqlBankZahl, 0, strBankKontoX, 80110, nBelNrX, dtBuchDatX, strBuchTextDummy, nDiverse, 3, NUMBER_Null, NUMBER_Null, NUMBER_Null )
					// Set nDiverse = nTVSMahnDM - nDiverse
					// If InsertFiBu( hSqlBankZahl, 0, strBankKontoX, 18300, nBelNrX, dtBuchDatX, strBuchTextDummy, nDiverse, 3, NUMBER_Null, NUMBER_Null, NUMBER_Null )

					this.SetStatusBarText("Zahlungs-Datei");
					InsertZahlung(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.nProzNr, locals.nKZZahl, locals.nBelNrX, locals.nBuchDM, locals.dtBuchDatX, locals.nRZNr);
					// Call RatenZahlung( hSqlBankZahl, nArztNr, nHalterNr, nBuchDM )
					// ----ZA LEIS-----
					locals.nDiverse = locals.nDMLeis - locals.nZaLeis;
					if ((locals.nDMArzn - locals.nZaArzn) < 0)  // 11.11.98
					{
						if (locals.nDiverse > locals.nBuchDM - (locals.nDMArzn - locals.nZaArzn)) 
						{
							locals.nDiverse = locals.nBuchDM - (locals.nDMArzn - locals.nZaArzn);
						}
					}
					else
					{
						if (locals.nDiverse > locals.nBuchDM) 
						{
							locals.nDiverse = locals.nBuchDM;
						}
					}
					if (locals.nDiverse != 0)  // 20.10.98 von > auf !=
					{
						locals.nZahlLeis = locals.nDiverse;
						locals.nZaLeis = locals.nZaLeis + locals.nDiverse;
						locals.nBuchDM = locals.nBuchDM - locals.nDiverse;
					}
					// ----ZA ARZN-----
					locals.nDiverse = locals.nDMArzn - locals.nZaArzn;
					if (locals.nDiverse > locals.nBuchDM) 
					{
						locals.nDiverse = locals.nBuchDM;
					}
					if (locals.nDiverse != 0)  // 20.10.98 von > auf !=
					{
						locals.nZahlArzn = locals.nDiverse;
						locals.nZaArzn = locals.nZaArzn + locals.nDiverse;
						locals.nBuchDM = locals.nBuchDM - locals.nDiverse;
					}
					// ----ZA MAHN-----
					locals.nDiverse = locals.nDMMahn - locals.nZaMahn;
					if (locals.nDiverse > locals.nBuchDM) 
					{
						locals.nDiverse = locals.nBuchDM;
					}
					if (locals.nDiverse > 0) 
					{
						locals.nZahlMahn = locals.nDiverse;
						locals.nZaMahn = locals.nZaMahn + locals.nDiverse;
						locals.nBuchDM = locals.nBuchDM - locals.nDiverse;
					}
					// ----ZA ZINS-----
					locals.nDiverse = locals.nDMZins - locals.nZaZins;
					if (locals.nDiverse > locals.nBuchDM) 
					{
						locals.nDiverse = locals.nBuchDM;
					}
					if (locals.nDiverse > 0) 
					{
						locals.nZahlZins = locals.nDiverse;
						locals.nZaZins = locals.nZaZins + locals.nDiverse;
						locals.nBuchDM = locals.nBuchDM - locals.nDiverse;
					}
					// 28.09.23 F5031
					locals.nMahnDummy = locals.nZahlMahn;
					locals.nTVSMahnGeb = 0;
					// 15.11.23 F5031 + and nTVSDM1,2,3 != 0
					if (locals.nMahnDummy >= locals.nTVSDM1 && locals.nTVSDM1 != 0) 
					{
						locals.nTVSMahnGeb = locals.nTVSMahnGeb + locals.nTVSMahnGebjeMg;
						locals.nMahnDummy = locals.nMahnDummy - locals.nTVSDM1;
					}
					if (locals.nMahnDummy >= locals.nTVSDM2 && locals.nTVSDM2 != 0) 
					{
						locals.nTVSMahnGeb = locals.nTVSMahnGeb + locals.nTVSMahnGebjeMg;
						locals.nMahnDummy = locals.nMahnDummy - locals.nTVSDM2;
					}
					if (locals.nMahnDummy >= locals.nTVSDM3 && locals.nTVSDM3 != 0) 
					{
						locals.nTVSMahnGeb = locals.nTVSMahnGeb + locals.nTVSMahnGebjeMg;
						locals.nMahnDummy = locals.nMahnDummy - locals.nTVSDM3;
					}
					locals.nTVSMahnDM = locals.nTVSMahnGeb;
					// 24.08.06 F33
					if ((locals.nZahlMahn - locals.nTVSMahnDM) < 0) 
					{
						locals.nTVSMahnDM = locals.nTVSMahnDM + (locals.nZahlMahn - locals.nTVSMahnDM);
					}
					// 24.08.06 F33 hierher verschoben von oben
					this.SetStatusBarText("Sachkonten-Buchungen");
					if (locals.nTVSMahnDM > 0.00m) 
					{
						if (locals.nRechNr >= 999990)  // 07.01.99 siehe unten
						{
							// Set strBuchTextDummy = 'MBc' || PalStrNum( nArztNr, 4, 0 ) || '/' || PalStrNum( nHalterNr, 5, 0 ) || '/' || PalStrNum( nRechNr, 6, 0 )
							// Set nDiverse =nTVSMahnDM
							// Call InsertFiBu( hSqlBankZahl, 0, strBankKontoX, 16510, nBelNrX, dtBuchDatX, strBuchTextDummy, nDiverse, 3, nArztNr, nHalterNr, nRechNr )
						}
						else
						{
							// 03.05.10 OTÄ420
							Var.nCheckMwSt = Int.PalCheckAuslMwSt(locals.nArztNr);
							// 14.04.14 Ä1046
							if (Int.PalCheckAuslTA(locals.nArztNr) == "EU") 
							{
								App.frmMain.nErloeskonto = 80120;
							}
							else
							{
								App.frmMain.nErloeskonto = 80110;
								// 30.06.20 Ä1892
								if (locals.dtBuchDatX >= new SalDateTime(2020, 7, 1) && locals.dtBuchDatX <= new SalDateTime(2020, 12, 31)) 
								{
									App.frmMain.nErloeskonto = Int.PalKontenMwStSenkung(App.frmMain.nErloeskonto);
								}
							}

							locals.strBuchTextDummy = "Mahngebühr Moveta" + Int.PalStrNum(locals.nArztNr, 4, 0) + "/" + Int.PalStrNum(locals.nRechNr, 6, 0);
							locals.nDiverse = (locals.nTVSMahnDM * 10000 / (100 + Var.nCheckMwSt)).Round() / 100;
							if (InsertFiBu(hSqlBankZahl, 0, locals.strBankKontoX, App.frmMain.nErloeskonto, locals.nBelNrX, locals.dtBuchDatX, locals.strBuchTextDummy, locals.nDiverse, 3, SalNumber.Null, SalNumber.Null, SalNumber.Null)) 
							{
							}
							locals.nDiverse = locals.nTVSMahnDM - locals.nDiverse;
							// 30.06.20 Ä1892
							Var.nMwStSenkung = 17760;
							if (locals.dtBuchDatX >= new SalDateTime(2020, 7, 1) && locals.dtBuchDatX <= new SalDateTime(2020, 12, 31)) 
							{
								Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
							}

							if (InsertFiBu(hSqlBankZahl, 0, locals.strBankKontoX, Var.nMwStSenkung, locals.nBelNrX, locals.dtBuchDatX, locals.strBuchTextDummy, locals.nDiverse, 3, SalNumber.Null, SalNumber.Null, SalNumber.Null)) 
							{
							}
						}
					}
					// -----------------------------
					if (locals.nRechNr >= 999990) 
					{
						locals.nDiverse = locals.nZahlLeis + locals.nZahlArzn + locals.nZahlZins;
					}
					else
					{
						locals.nDiverse = (locals.nZahlLeis + locals.nZahlArzn + locals.nZahlMahn + locals.nZahlZins) - locals.nTVSMahnDM;
					}
					if (InsertFiBu(hSqlBankZahl, 0, locals.strBankKontoX, 16000, locals.nBelNrX, locals.dtBuchDatX, locals.strBuchText, locals.nDiverse, 3, locals.nArztNr, locals.nHalterNr, locals.nRechNr)) 
					{
					}
					if (locals.nAusbuchDM > 0.00m) 
					{
						locals.strBuchTextDummy = "Mahngeb./Kleinbetrag ausgeb. " + Int.PalStrNum(locals.nArztNr, 4, 0) + "/" + Int.PalStrNum(locals.nRechNr, 6, 0);
						if (InsertFiBu(hSqlBankZahl, 0, ((SalNumber)16410).ToString(0), 16000, locals.nBelNrX, locals.dtBuchDatX, locals.strBuchTextDummy, locals.nAusbuchDM, 3, SalNumber.Null, SalNumber.Null, SalNumber.Null)) 
						{
						}
						// Call InsertKonto( hSqlBankZahl, nArztNr, nHalterNr, nRechNr, strBuchTextDummy, nBelNrX,
						// dtBuchDatX, 0, 0, 0, 0, nRPMwSt, 0, 0, 0, 0, 0, nAusbuchRech )

						if (hSqlRePo.PrepareAndExecute(@"
SELECT rpreverseversion, rpmwst, rpla, sum(rpdm), sum(rpdmzahl)
FROM RP
INTO :frmMain.nReverseVersion, :nProzMwSt, :strLA, :nRPDM, :nRPZahl
WHERE rparztnr = :nArztNr
AND rprechnr = :nRechNr
AND rpmwst IS NOT NULL
AND rpla IS NOT NULL
GROUP BY 1,2,3
ORDER BY rpmwst desc, rpla desc")) 
						{
							while (hSqlRePo.FetchNext(ref locals.nFetchRP)) 
							{
								locals.nDiverse = ((locals.nRPDM - locals.nRPZahl) * 100 + (locals.nRPDM - locals.nRPZahl) * locals.nProzMwSt).Round() / 100;
								// Set strBuchTextDummy = strBuchText || PalStrNum(nProzMwSt,2,0) || '%'
								// Set strBuchTextDummy = SalStrLeftX( strBuchTextDummy, 50)
								// Set strBuchText = SalStrLeftX( strBuchText, 50)
								if (locals.nAusbuchRech != 0.00m) 
								{
									if (locals.nDiverse.Abs() > locals.nAusbuchRech.Abs())  // 20.10.98
									{
										locals.nDiverse = locals.nAusbuchRech;
									}
									locals.nAusbuchRech = locals.nAusbuchRech - locals.nDiverse;
									// Set nZahlLeis = nZahlLeis + nZahlMahn
									// 30.04.04 +nZahlMahn rausgenommen, da falsch lt.H.Sasse und Buchhaltung
									locals.nRPMwSt = (locals.nDiverse * locals.nProzMwSt * 100 / (100 + locals.nProzMwSt)).Round() / 100;
									locals.nRP1MwSt = (locals.nDiverse * locals.nProzMwSt * 100 / (100 + locals.nProzMwSt)).Round() / 100;
									Var.nDummyHaben = locals.nDiverse * -1;
									// Call InsertKonto( hSqlBankZahl, nArztNr, nHalterNr, nRechNr, strBuchText, nBelNrX,
									// dtBuchDatX, nDiverse, 0, nZahlMahn, nZahlZins, nRPMwSt, nProzMwSt, nKZZahl, nDummyHaben, frmMain.nReverseVersion, 0, 0 )
									// 14.11.23 Ä2144 +Kontierung
									InsertKonto(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.strBuchTextDummy, locals.nBelNrX, locals.dtBuchDatX, 0, 0, 0, 0, 0, locals.nProzMwSt, 0, 0, 0, 0, Var.nDummyHaben, "Zahlg-nichtbezMG");
									UpdateRechPosition(hSqlBankZahl, locals.nArztNr, locals.nRechNr, locals.nProzMwSt, locals.nDiverse, locals.nRP1MwSt, locals.strLA, App.frmMain.nReverseVersion, locals.nRPZahl);
								}
							}
							hSqlBankZahl.Commit();
						}
						if (locals.nAusbuchRech != 0) 
						{
							Var.nDummyHaben = locals.nDiverse * -1;
							// 14.11.23 Ä2144 +Kontierung
							InsertKonto(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.strBuchTextDummy, locals.nBelNrX, locals.dtBuchDatX, 0, 0, 0, 0, 0, Var.nMwStVoll, 0, 0, 0, 0, Var.nDummyHaben, "Zahlg-Rg");
						}

						// 05.12.22 F4949
						if (locals.nRechNr >= 999990) 
						{
							locals.nTVSMahnGebAusbuch = 0;
						}
						else
						{
							GetMahngeb(hSqlBankZahl, locals.nArztNr, ref locals.nTVSMahnGebAusbuch, ref locals.nTVSDM1, ref locals.nTVSDM2, ref locals.nTVSDM3);
						}
						GetMahnAnz(hSqlBankZahl, locals.nArztNr, locals.nRechNr, ref locals.nMahnAnz);
						locals.nTVSMahnGebAusbuch = locals.nTVSMahnGebAusbuch * locals.nMahnAnz;
						if (locals.nAusbuchMahn > locals.nTVSMahnGebAusbuch) 
						{
							locals.nAusbuchMahn = locals.nTVSMahnGebAusbuch;
						}

						locals.nRPMwSt = 0;
						// 14.11.23 Ä2144 +Kontierung
						InsertKonto(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.strBuchTextDummy, locals.nBelNrX, locals.dtBuchDatX, 0, 0, 0, 0, locals.nRPMwSt, 0, 0, 0, 0, locals.nAusbuchMahn, 0, "Zahlg-Rg");
					}

					locals.dtTeilzDat = locals.dtBuchDatX;
					// UPDATE rk   11.9.00 auf Wunsch von H. sasse kommentiert, da Dr. henn sich beschwert hat
					// If nMahnstufe <= 5 And nKZZahl = 1
					// Set nMahnstufe = 0
					this.SetStatusBarText("Rechnungs-Datei");
					UpdateRechnung(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.nKZZahl, locals.nZaLeis, locals.nZaArzn, locals.nZaMahn, locals.nZaZins, locals.nMahnstufe, locals.dtTeilzDat, locals.dtVerjDat);
					// "If nRechNr >= 999990" TB #1
					if (locals.nRechNr >= 999990) 
					{
						Var.bExists = true;
						// 07.01.99
						locals.strBuchTextDummy = "MBc" + Int.PalStrNum(locals.nArztNr, 4, 0) + "/" + Int.PalStrNum(locals.nHalterNr, 5, 0) + "/" + Int.PalStrNum(locals.nRechNr, 6, 0);
						locals.nDiverse = locals.nZahlMahn;
						if (InsertFiBu(hSqlBankZahl, 0, locals.strBankKontoX, 16510, locals.nBelNrX, locals.dtBuchDatX, locals.strBuchTextDummy, locals.nDiverse, 3, locals.nArztNr, locals.nHalterNr, locals.nRechNr)) 
						{
						}

					}
					else
					{
						Sql.Exists(@"SELECT *
FROM rk
WHERE rkarztnr = :nArztNr
AND rkhalternr = :nHalterNr
AND rkrechnr = :nRechNr
AND rkkzmwst IS NOT NULL AND rkdeaktiv IS NULL", ref Var.bExists);
					}

					locals.nZahlMahn = locals.nZahlMahn - locals.nTVSMahnDM;
					// 02.07.20
					locals.nProzMwSt = Var.nMwStVoll;

					if (Var.bExists) 
					{
						// Set nZahlLeis = nZahlLeis + nZahlMahn  Set nRPMwSt
						if (locals.nRechNr >= 999990) 
						{
							locals.nZahlMahn = 0;
							locals.nKZMwSt = locals.nRechNr - 999989;
							locals.strBuchTextDummy = locals.strBuchText;
							locals.nRPMwSt = (locals.nZahlLeis * Var.nMwSatz[locals.nKZMwSt] * 100 / (100 + Var.nMwSatz[locals.nKZMwSt])).Round() / 100;
							if (locals.nRPMwSt == 0)  // Falls nur MwSt-freie B-Beträge
							{
								locals.nKZMwSt = 0;
							}
						}
						else
						{
							GetMehrwertsteuer(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, ref locals.nKZMwSt);
							locals.strBuchTextDummy = locals.strBuchText + Int.PalStrNum(Var.nMwSatz[locals.nKZMwSt], 2, 0) + "%";
							// 30.04.04 +nZahlMahn rausgenommen, da falsch lt.H.Sasse und Buchhaltung
							locals.nRPMwSt = ((locals.nZahlLeis + locals.nZahlArzn) * Var.nMwSatz[locals.nKZMwSt] * 100 / (100 + Var.nMwSatz[locals.nKZMwSt])).Round() / 100;
						}
						locals.strBuchTextDummy = locals.strBuchTextDummy.Left(50);
						locals.strBuchText = locals.strBuchText.Left(50);
						Var.nDummyHaben = locals.nZahlLeis + locals.nZahlArzn + locals.nZahlMahn + locals.nZahlZins;
						// 14.11.23 Ä2144 +Kontierung
						InsertKonto(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.strBuchText, locals.nBelNrX, locals.dtBuchDatX, locals.nZahlLeis, locals.nZahlArzn, locals.nZahlMahn, locals.nZahlZins, locals.nRPMwSt, Var.nMwSatz[locals.nKZMwSt], 
							locals.nKZZahl, Var.nDummyHaben, 0, 0, 0, "Zahlg-Rg");
					}
					else
					{
						// Call SalStatusSetText(hWndForm,'neue Rechnung !')
						if (locals.nZahlLeis == 0 && locals.nZahlArzn == 0) 
						{
							locals.strBuchText = locals.strBuchText.Left(50);
							// 30.09.99 nProzMwst -> nMwStVoll
							// 30.04.04 rausgenommen, da falsch lt.H.Sasse und Buchhaltung
							// Set nRPMwSt = SalNumberRound(nZahlMahn * nMwStVoll * 100 / (100 + nMwStVoll)) /100
							locals.nRPMwSt = 0;
							// 14.11.23 Ä2144 +Kontierung
							InsertKonto(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.strBuchText, locals.nBelNrX, locals.dtBuchDatX, 0, 0, locals.nZahlMahn, locals.nZahlZins, locals.nRPMwSt, Var.nMwStVoll, locals.nKZZahl, locals.nZahlMahn + 
								locals.nZahlZins, 0, 0, 0, "Zahlg-Rg");
						}
						else
						{
							// 02.12.14 Ä1104 + reverseversion
							if (hSqlRePo.PrepareAndExecute(@"
SELECT rpreverseversion, rpmwst, rpla, sum(rpdm), sum(rpdmzahl)
FROM RP
INTO :frmMain.nReverseVersion, :nProzMwSt, :strLA, :nRPDM, :nRPZahl
WHERE rparztnr = :nArztNr
AND rprechnr = :nRechNr
AND rpmwst IS NOT NULL
AND rpla IS NOT NULL
GROUP BY 1,2,3
ORDER BY rpmwst desc, rpla desc")) 
							{
								while (hSqlRePo.FetchNext(ref locals.nFetchRP)) 
								{
									locals.nDiverse = ((locals.nRPDM - locals.nRPZahl) * 100 + (locals.nRPDM - locals.nRPZahl) * locals.nProzMwSt).Round() / 100;
									locals.strBuchTextDummy = locals.strBuchText + Int.PalStrNum(locals.nProzMwSt, 2, 0) + "%";
									locals.strBuchTextDummy = locals.strBuchTextDummy.Left(50);
									locals.strBuchText = locals.strBuchText.Left(50);
									// nRPMwSt = MwSt für HF + MG
									// nRP1MwSt = MwSt für HF
									if (locals.strLA == Var.strL) 
									{
										if (locals.nZahlLeis != 0.00m) 
										{
											if (locals.nDiverse.Abs() > locals.nZahlLeis.Abs())  // 20.10.98
											{
												locals.nDiverse = locals.nZahlLeis;
											}
											locals.nZahlLeis = locals.nZahlLeis - locals.nDiverse;
											// Set nZahlLeis = nZahlLeis + nZahlMahn
											// 30.04.04 +nZahlMahn rausgenommen, da falsch lt.H.Sasse und Buchhaltung
											locals.nRPMwSt = (locals.nDiverse * locals.nProzMwSt * 100 / (100 + locals.nProzMwSt)).Round() / 100;
											locals.nRP1MwSt = (locals.nDiverse * locals.nProzMwSt * 100 / (100 + locals.nProzMwSt)).Round() / 100;
											Var.nDummyHaben = locals.nDiverse + locals.nZahlMahn + locals.nZahlZins;
											// 14.11.23 Ä2144 +Kontierung
											InsertKonto(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.strBuchText, locals.nBelNrX, locals.dtBuchDatX, locals.nDiverse, 0, locals.nZahlMahn, locals.nZahlZins, locals.nRPMwSt, locals.nProzMwSt, locals.nKZZahl, 
												Var.nDummyHaben, App.frmMain.nReverseVersion, 0, 0, "Zahlg-Rg");
											locals.nZahlMahn = 0;
											locals.nZahlZins = 0;
											UpdateRechPosition(hSqlBankZahl, locals.nArztNr, locals.nRechNr, locals.nProzMwSt, locals.nDiverse, locals.nRP1MwSt, locals.strLA, App.frmMain.nReverseVersion, locals.nRPZahl);
										}
									}
									else if (locals.strLA == Var.strA) 
									{
										if (locals.nZahlArzn != 0.00m) 
										{
											if (locals.nDiverse.Abs() > locals.nZahlArzn.Abs())  // 20.10.98
											{
												locals.nDiverse = locals.nZahlArzn;
											}
											locals.nZahlArzn = locals.nZahlArzn - locals.nDiverse;
											// 30.04.04 +nZahlMahn rausgenommen, da falsch lt.H.Sasse und Buchhaltung
											locals.nRPMwSt = (locals.nDiverse * locals.nProzMwSt * 100 / (100 + locals.nProzMwSt)).Round() / 100;
											locals.nRP1MwSt = (locals.nDiverse * locals.nProzMwSt * 100 / (100 + locals.nProzMwSt)).Round() / 100;
											Var.nDummyHaben = locals.nDiverse + locals.nZahlMahn + locals.nZahlZins;
											// 14.11.23 Ä2144 +Kontierung
											InsertKonto(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.strBuchText, locals.nBelNrX, locals.dtBuchDatX, 0, locals.nDiverse, locals.nZahlMahn, locals.nZahlZins, locals.nRPMwSt, locals.nProzMwSt, locals.nKZZahl, 
												Var.nDummyHaben, App.frmMain.nReverseVersion, 0, 0, "Zahlg-Rg");
											locals.nZahlMahn = 0;
											locals.nZahlZins = 0;
											UpdateRechPosition(hSqlBankZahl, locals.nArztNr, locals.nRechNr, locals.nProzMwSt, locals.nDiverse, locals.nRP1MwSt, locals.strLA, App.frmMain.nReverseVersion, locals.nRPZahl);
										}
									}
								}
								hSqlBankZahl.Commit();
							}
							// 02.07.20
							if (locals.nProzMwSt == SalNumber.Null) 
							{
								locals.nProzMwSt = Var.nMwStVoll;
							}
							// 04.11.98
							if (locals.nZahlLeis != 0) 
							{
								locals.strBuchText = locals.strBuchText.Left(50);
								// 02.12.14 Ä1104 + reverseversion
								locals.nMwStVorgabe = Int.PalCheckAuslMwStTA(locals.nArztNr);
								// 02.07.20 nMwStVoll -> nProzMwSt
								if (locals.nMwStVorgabe == Var.nMwStVoll && locals.nProzMwSt != Var.nMwStVoll) 
								{
									locals.nMwStVorgabe = locals.nProzMwSt;
								}

								locals.nRPMwSt = (locals.nZahlLeis * locals.nMwStVorgabe * 100 / (100 + Var.nMwStVoll)).Round() / 100;
								// 14.11.23 Ä2144 +Kontierung
								InsertKonto(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.strBuchText, locals.nBelNrX, locals.dtBuchDatX, locals.nZahlLeis, 0, locals.nZahlMahn, locals.nZahlZins, locals.nRPMwSt, locals.nMwStVorgabe, locals.nKZZahl, 
									locals.nZahlLeis + locals.nZahlMahn + locals.nZahlZins, 0, 0, 0, "Zahlg-Rg");
								locals.nZahlMahn = 0;
								locals.nZahlZins = 0;
							}
							if (locals.nZahlArzn != 0) 
							{
								locals.strBuchText = locals.strBuchText.Left(50);
								// 02.12.14 Ä1104 + reverseversion
								locals.nMwStVorgabe = Int.PalCheckAuslMwStTA(locals.nArztNr);

								locals.nRPMwSt = (locals.nZahlArzn * locals.nMwStVorgabe * 100 / (100 + Var.nMwStVoll)).Round() / 100;
								// 14.11.23 Ä2144 +Kontierung
								InsertKonto(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.strBuchText, locals.nBelNrX, locals.dtBuchDatX, 0, locals.nZahlArzn, locals.nZahlMahn, locals.nZahlZins, locals.nRPMwSt, locals.nMwStVorgabe, locals.nKZZahl, 
									locals.nZahlArzn + locals.nZahlMahn + locals.nZahlZins, 0, 0, 0, "Zahlg-Rg");
							}
						}
					}
					this.SetStatusBarText("Hole Rest-OP");
                    //FC:FINAL:#60 Assign receive parameters.
                    GetRest(hSqlBankZahl, locals.nArztNr, locals.nRechNr, ref locals.nRestLX, ref locals.nRestAX, ref locals.nRestMX, ref locals.nRestZX);
					// 07.11.00
					if (locals.nProzNr != SalNumber.Null) 
					{
						// 07.12.00 rausgenommen
						// Call GetProzOP(hSqlBankZahl, nProzNr, nProzOP)
						// If nProzOP = 0
						// Call UpdateProzBez( hSqlBankZahl, nProzNr )

						UpdateProzBez(hSqlBankZahl, locals.nProzNr);
					}

					// 14.10.02
					if (CheckRechAb(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.nBuchungsDM)) 
					{
					}
					// 04.12.17 Ä1433
					Int.PalCheckELobBez(locals.nArztNr, locals.nHalterNr);

					if (locals.nMahnstufe > 6) 
					{
						locals.strReturn = locals.strReturn + " MS " + locals.nMahnstufe.ToString(0) + "!!!!";
						// 19.06.12 Ä755
						if (locals.nMahnstufe == 7) 
						{
							if (BriefMS7(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.nBuchungsDM)) 
							{
							}
						}
					}
					if (locals.bSonder == true) 
					{
						locals.strReturn = locals.strReturn + " / MG Halter erhöht !";
					}
					return locals.strReturn;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					nBuchungsDM = locals.nBuchungsDM;
					nRestLX = locals.nRestLX;
					nRestAX = locals.nRestAX;
					nRestMX = locals.nRestMX;
					nRestZX = locals.nRestZX;

				}
			}
			#endregion
		}
		// 08.11.13
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalPruefeEREFSVWZ()
		{
			#region Actions
			using (new SalContext(this))
			{
				// 28.04.17
				// Set strVZ1 = PalDelZeichen( strVZ1, '.' )
				// Set strVZ2 = PalDelZeichen( strVZ2, '.' )
				// Set strVZ3 = PalDelZeichen( strVZ3, '.' )
				// Set strVZ4 = PalDelZeichen( strVZ4, '.' )
				// Set strVZ5 = PalDelZeichen( strVZ5, '.' )
				// Set strVZ6 = PalDelZeichen( strVZ6, '.' )
				// 16.02.16 F2447
				if (strVZ2.Left(1) <= "9" && strVZ2.Trim() != "") 
				{
					strVZ1 = strVZ1 + strVZ2;
					strVZ2 = "";
				}
				if (strVZ4.Left(1) <= "9" && strVZ4.Trim() != "") 
				{
					strVZ3 = strVZ3 + strVZ4;
					strVZ4 = "";
				}
				if (strVZ6.Left(1) <= "9" && strVZ6.Trim() != "") 
				{
					strVZ5 = strVZ5 + strVZ6;
					strVZ6 = "";
				}
				if (strVZ5.Left(1) <= "9" && strVZ5.Trim() != "") 
				{
					strVZ4 = strVZ4 + strVZ5;
					strVZ5 = "";
				}
				// 19.02.16 F2447
				if (strVZ2 == "" && Int.PalValNum(strVZ3) > 0) 
				{
					strVZ1 = strVZ1 + strVZ3;
					strVZ3 = "";
				}
				// 08.11.13 Ä903
				if (strVZ1.Left(5) == "EREF+") 
				{
					PalTausche(1, 4);
				}
				else if (strVZ2.Left(5) == "EREF+") 
				{
					PalTausche(2, 4);
				}
				else if (strVZ3.Left(5) == "EREF+") 
				{
					PalTausche(3, 4);
				}

				if (strVZ1.Left(5) == "UKTO/") 
				{
					PalTausche(1, 3);
				}
				else if (strVZ3.Left(5) == "UKTO/") 
				{
					PalTausche(3, 3);
				}
				else if (strVZ4.Left(5) == "UKTO/") 
				{
					PalTausche(4, 3);
				}

				if (strVZ2.Left(5) == "SVWZ+") 
				{
					// 23.05.17
					strVZ2 = strVZ2 + strVZ3;

					PalTausche(2, 1);
				}
				else if (strVZ3.Left(5) == "SVWZ+") 
				{
					// 23.05.17
					strVZ3 = strVZ3 + strVZ4;

					PalTausche(3, 1);
				}
				else if (strVZ4.Left(5) == "SVWZ+") 
				{
					PalTausche(4, 1);
				}

				if (strVZ1.Left(14) == "BZUE-NR.      ") 
				{
					strVZ1 = strVZ1.Mid(14, 32000);
				}
				if (strVZ2.Left(14) == "BZUE-NR.      ") 
				{
					strVZ2 = strVZ2.Mid(14, 32000);
				}

				if (strVZ2.Left(3) == "11." && (strVZ1.Left(2) != "" || strVZ1 == "")) 
				{
					PalTausche(2, 1);
				}
				// 03.07.15 Ä2447 +  and strBankKonto != '12400'
				// Task:
				// Inserted: 2015-07-03-13.01
				// strBankKonto is defined by more than one form, dialog, or table window. Must qualify the reference.
				// If SalStrLeftX( strVZ1, 5 ) = 'SVWZ+'
				// Set strVZ1 = SalStrMidX( strVZ1, 5, 32000) || strVZ2
				// 08.07.15 F2449
				// 09.07.15 If / Else
				if (x(13, 7) == "7006573") 
				{
					if (strVZ1.Left(5) == "SVWZ+") 
					{
						// 24.02.16
						// If strVZ2 = ''
						// Set strVZ2 =

						strVZ1 = strVZ1.Mid(5, 32000) + strVZ2;
					}
				}
				else
				{
					if (strVZ1.Left(5) == "SVWZ+") 
					{
						strVZ1 = strVZ1.Mid(5, 32000);
					}
				}

				// Set strVZ1 = PalStrReplace( strVZ1, ' ', '   ')
				// Set strVZ2 = PalStrReplace( strVZ2, ' ', '   ')
				// Set strVZ3 = PalStrReplace( strVZ3, ' ', '   ')
				// Set strVZ4 = PalStrReplace( strVZ4, ' ', '   ')
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nA"></param>
		/// <param name="nB"></param>
		/// <returns></returns>
		public SalNumber PalTausche(SalNumber nA, SalNumber nB)
		{
			#region Local Variables
			SalString strPDummy = "";
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				if (nA == 1) 
				{
					strPDummy = strVZ1;
					if (nB == 2) 
					{
						strVZ1 = strVZ2;
						strVZ2 = strPDummy;
					}
					else if (nB == 3) 
					{
						strVZ1 = strVZ3;
						strVZ3 = strPDummy;
					}
					else if (nB == 4) 
					{
						strVZ1 = strVZ4;
						strVZ4 = strPDummy;
					}
				}
				else if (nA == 2) 
				{
					strPDummy = strVZ2;
					if (nB == 1) 
					{
						strVZ2 = strVZ1;
						strVZ1 = strPDummy;
					}
					else if (nB == 3) 
					{
						strVZ2 = strVZ3;
						strVZ3 = strPDummy;
					}
					else if (nB == 4) 
					{
						strVZ2 = strVZ4;
						strVZ4 = strPDummy;
					}
				}
				else if (nA == 3) 
				{
					strPDummy = strVZ3;
					if (nB == 1) 
					{
						strVZ3 = strVZ1;
						strVZ1 = strPDummy;
					}
					else if (nB == 2) 
					{
						strVZ3 = strVZ2;
						strVZ3 = strPDummy;
					}
					else if (nB == 4) 
					{
						strVZ3 = strVZ4;
						strVZ4 = strPDummy;
					}
				}
				else if (nA == 4) 
				{
					strPDummy = strVZ4;
					if (nB == 1) 
					{
						strVZ4 = strVZ1;
						strVZ1 = strPDummy;
					}
					else if (nB == 2) 
					{
						strVZ4 = strVZ2;
						strVZ2 = strPDummy;
					}
					else if (nB == 3) 
					{
						strVZ4 = strVZ3;
						strVZ3 = strPDummy;
					}
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPLine"></param>
		/// <param name="nPA"></param>
		/// <param name="nPH"></param>
		/// <param name="nPR"></param>
		/// <returns></returns>
		public SalNumber PalGetAHR(SalString strPLine, ref SalNumber nPA, ref SalNumber nPH, ref SalNumber nPR)
		{
			#region Local Variables
			SalNumber nPByte = 0;
			SalNumber nPCount = 0;
			SalNumber nPLen = 0;
			SalString strPTeil = "";
			SalString strPTeil2 = "";
			SalString strPTeilNach = "";
			SalNumber nTLen = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				nPCount = 0;
				// 02.05.17
				// Set strPLine = PalDelZeichen( strPLine, '.' )

				strPLine = strPLine.Trim();
				nPLen = strPLine.Length;
				while (nPCount < nPLen) 
				{
					strPTeil = strPLine.Mid(nPCount, 1);
					strPTeil2 = strPLine.Mid(nPCount - 1, 1);
					// 17.02.16 F2858
					strPTeilNach = strPLine.Mid(nPCount + 1, 1);

					if (strPTeil != "0" && strPTeil != "1" && strPTeil != "2" && strPTeil != "3" && strPTeil != "4" && strPTeil != "5" && strPTeil != "6" && strPTeil != "7" && strPTeil != "8" && strPTeil != "9" && strPTeil != "/" && strPTeil != "H" && strPTeil != 
					"R") 
					{
						strPLine = strPLine.Left(nPCount) + " " + strPLine.Mid(nPCount + 1, 32000);
					}
					if ((strPTeil == "H" || strPTeil == "R") && strPTeil2 != "/") 
					{
						// 17.02.16 F2858
						if (((strPTeil2 >= "0" && strPTeil2 <= "9") || strPTeil2 == " ") && (strPTeilNach >= "0" && strPTeilNach <= "9")) 
						{
							strPLine = strPLine.Left(nPCount) + "/" + strPLine.Mid(nPCount, 32000);
						}

						else
						{
							strPLine = strPLine.Left(nPCount) + " " + strPLine.Mid(nPCount + 1, 32000);
						}
					}
					nPCount = nPCount + 1;
				}

				nPByte = strPLine.Scan("/H");
				if (nPByte != -1) 
				{

					// If SalStrMidX( strPLine, nPByte+2, 1 ) = ' '
					// Set strPLine = SalStrLeftX( strPLine, nPByte+2 ) || '0' || SalStrMidX( strPLine, nPByte+3, 32000 )
					// If SalStrMidX( strPLine, nPByte+3, 1 ) = ' '
					// Set strPLine = SalStrLeftX( strPLine, nPByte+3 ) || '0' || SalStrMidX( strPLine, nPByte+4, 32000 )
					// If SalStrMidX( strPLine, nPByte+4, 1 ) = ' '
					// Set strPLine = SalStrLeftX( strPLine, nPByte+4 ) || '0' || SalStrMidX( strPLine, nPByte+5, 32000 )

					if (Int.PalValNum(strPLine.Mid(nPByte + 2, 1)) > 0 && strPLine.Mid(nPByte + 3, 1) == " ") 
					{
						nTLen = 1;
					}
					else if (Int.PalValNum(strPLine.Mid(nPByte + 2, 2)) > 0 && strPLine.Mid(nPByte + 4, 1) == " ") 
					{
						nTLen = 2;
					}
					else if (Int.PalValNum(strPLine.Mid(nPByte + 2, 3)) > 0 && strPLine.Mid(nPByte + 5, 1) == " ") 
					{
						nTLen = 3;
					}
					else if (Int.PalValNum(strPLine.Mid(nPByte + 2, 4)) > 0 && strPLine.Mid(nPByte + 6, 1) == " ") 
					{
						nTLen = 4;
					}
					else
					{
						nTLen = 5;
					}

					strPTeil = strPLine.Mid(nPByte + 2, nTLen);
					if (Int.PalValNum(strPTeil) > 0) 
					{
						nPH = Int.PalValNum(strPTeil);
					}
					strPTeil = strPLine.Mid(0, nPByte);
					if (Int.PalValNum(strPTeil) > 0) 
					{
						nPA = Int.PalValNum(strPTeil);
					}
				}

				nPByte = strPLine.Scan("/R");
				if (nPByte != -1) 
				{
					// If SalStrMidX( strPLine, nPByte+2, 1 ) = ' '
					// Set strPLine = SalStrLeftX( strPLine, nPByte+2 ) || '0' || SalStrMidX( strPLine, nPByte+3, 32000 )
					// If SalStrMidX( strPLine, nPByte+3, 1 ) = ' '
					// Set strPLine = SalStrLeftX( strPLine, nPByte+3 ) || '0' || SalStrMidX( strPLine, nPByte+4, 32000 )
					// If SalStrMidX( strPLine, nPByte+4, 1 ) = ' '
					// Set strPLine = SalStrLeftX( strPLine, nPByte+4 ) || '0' || SalStrMidX( strPLine, nPByte+5, 32000 )

					if (Int.PalValNum(strPLine.Mid(nPByte + 2, 1)) > 0 && strPLine.Mid(nPByte + 3, 1) == " ") 
					{
						nTLen = 1;
					}
					else if (Int.PalValNum(strPLine.Mid(nPByte + 2, 2)) > 0 && strPLine.Mid(nPByte + 4, 1) == " ") 
					{
						nTLen = 2;
					}
					else if (Int.PalValNum(strPLine.Mid(nPByte + 2, 3)) > 0 && strPLine.Mid(nPByte + 5, 1) == " ") 
					{
						nTLen = 3;
					}
					else if (Int.PalValNum(strPLine.Mid(nPByte + 2, 4)) > 0 && strPLine.Mid(nPByte + 6, 1) == " ") 
					{
						nTLen = 4;
					}
					else if (Int.PalValNum(strPLine.Mid(nPByte + 2, 5)) > 0 && strPLine.Mid(nPByte + 7, 1) == " ") 
					{
						nTLen = 5;
					}
					else
					{
						nTLen = 6;
					}

					strPTeil = strPLine.Mid(nPByte + 2, nTLen);
					if (Int.PalValNum(strPTeil) > 0) 
					{
						nPR = Int.PalValNum(strPTeil);
					}

					nTLen = 0;
					if (strPLine.Mid(nPByte - 2, 1) == " ") 
					{
						nTLen = nPByte - 2;
					}
					else if (strPLine.Mid(nPByte - 3, 1) == " ") 
					{
						nTLen = nPByte - 3;
					}
					else if (strPLine.Mid(nPByte - 4, 1) == " ") 
					{
						nTLen = nPByte - 4;
					}
					else if (strPLine.Mid(nPByte - 5, 1) == " ") 
					{
						nTLen = nPByte - 4;
					}
					strPTeil = strPLine.Mid(nTLen, nPByte - nTLen);
					if (Int.PalValNum(strPTeil) > 0) 
					{
						nPA = Int.PalValNum(strPTeil);
					}
				}

			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPRZNr"></param>
		/// <param name="nRZArztNr"></param>
		/// <param name="nRZHalterNr"></param>
		/// <param name="nPZahlDM"></param>
		/// <param name="strBankkonto"></param>
		/// <param name="nAuszug"></param>
		/// <param name="dtDatum"></param>
		/// <returns></returns>
		public SalNumber PalCheckHaBu(SalNumber nPRZNr, SalNumber nRZArztNr, SalNumber nRZHalterNr, SalNumber nPZahlDM, SalString strBankkonto, SalNumber nAuszug, SalDateTime dtDatum)
		{
			#region Local Variables
			SalNumber nSumHB = 0;
			SalString strPSelect = "";
			SalNumber nRZZahlKZ = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				nSumHB = 0;
				this.dtBuchDat = dtDatum;
				// 21.12.10
				Int.SqlImmedSel("SELECT sum(hbdm) INTO :frmBankZahl.nDMHB FROM hb WHERE hbrznr =" + nPRZNr.ToString(0));
				// 12.01.11 F829 +  or nDMHB > 0
				if (nDMHB == SalNumber.Null || nDMHB > 0) 
				{
					nDMHB = 0;
				}
				else if ((nDMHB * -1) > nPZahlDM) 
				{
					nDMHB = nPZahlDM * -1;
					nRZZahlKZ = 1;
				}
				else
				{
					nRZZahlKZ = 2;
				}
				if (nDMHB != 0) 
				{
					// 28.05.21 Ä1962
					// Set frmBankZahl.strBuchText = 'Halterko.'  || PalStrNum( nRZArztNr, 4, 0 ) || '/' || PalStrNum( nRZHalterNr, 5, 0 )
					this.strBuchText = "Halterkonto " + Int.PalStrNum(nRZArztNr, 4, 0) + "/" + Int.PalStrNum(nRZHalterNr, 5, 0);
					// TVN
					// Set nBankKonto = PalValNum(strBankKonto)
					nDMHB = nDMHB * -1;
					this.nBuchDM = (nDMHB * 100m / 2).Round() / 100;
					Int.SqlImmed(@"
INSERT INTO FI
( fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiarztnr, fihalternr, firechnr )
VALUES
( 0, " + strBankkonto + " , 16000, " + nAuszug.ToString(0) + " , :frmBankZahl.dtBuchDat , :frmBankZahl.strBuchText , :frmBankZahl.nBuchDM , 9, " + nRZArztNr.ToString(0) + " , " + nRZHalterNr.ToString(0) + " , NULL )");
					Int.SqlImmed(@"
INSERT INTO TK
( tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben )
VALUES
( " + nRZArztNr.ToString(0) + " , 1, 0, :frmBankZahl.strBuchText, " + nRZHalterNr.ToString(0) + " , NULL, " + nAuszug.ToString(0) + @" , :frmBankZahl.dtBuchDat ,
0, 0, 1, 0, 0, 0, 0, :frmBankZahl.nBuchDM ,
0, 0, 2, 0, 0, 0, :frmBankZahl.nBuchDM )");
					// TA
					// TVN
					// 14.04.14 Ä1046
					if (Int.PalCheckAuslTA(nRZArztNr) == "EU") 
					{
						App.frmMain.nErloeskonto = 81360;
					}
					else
					{
						App.frmMain.nErloeskonto = 81310;
					}

					this.nBuchDM = nDMHB - this.nBuchDM;
					Int.SqlImmed(@"
INSERT INTO FI
( fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiarztnr, fihalternr, firechnr )
VALUES
( 0, " + strBankkonto + " , :frmMain.nErloeskonto, " + nAuszug.ToString(0) + " , :frmBankZahl.dtBuchDat , :frmBankZahl.strBuchText , :frmBankZahl.nBuchDM , 9, " + nRZArztNr.ToString(0) + "  , " + nRZHalterNr.ToString(0) + "  , NULL )");

					// 13.05.14 F2027
					nRZHalterNr = Int.PalCheckNULL(nRZHalterNr);

					// 26.03.19 Ä1844 + , zaerfdat
					Int.SqlImmed(@"
INSERT INTO ZA
( zaarztnr, zahalternr, zarechnr, zakz, zabuchdat, zabelegnr, zadm, zabuchtext, zarznr, zaerfdat )
VALUES
( " + nRZArztNr.ToString(0) + ", " + nRZHalterNr.ToString(0) + ", 0, " + nRZZahlKZ.ToString(0) + ", :frmBankZahl.dtBuchDat, " + nAuszug.ToString(0) + @", :frmBankZahl.nDMHB,
'Halterkonto', " + nPRZNr.ToString(0) + ", SYSDATETIME )");
					Int.SqlImmed(@"INSERT INTO hb (hbarztnr, hbhalternr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext, hbrznr)
VALUES(" + nRZArztNr.ToString(0) + ", " + nRZHalterNr.ToString(0) + @", :frmBankZahl.dtBuchDat, 'ZiZa', SYSDATETIME, :frmBankZahl.nDMHB,
" + strBankkonto + ", :frmMain.nErloeskonto, :frmBankZahl.strBuchText, " + nPRZNr.ToString(0) + ")");
					nSumHB = nSumHB + nDMHB;
					// Call SqlImmed('UPDATE rz SET rzltztzinsdat = SYSDATE WHERE rznr = :frmRaZa.nRZNr')
				}

				return nSumHB;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPRZNr"></param>
		/// <returns></returns>
		public SalBoolean PalCheckRZMS9(SalNumber nPRZNr)
		{
			#region Local Variables
			SalBoolean bPExists = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				// Set strPSelect = 'SELECT hbrznr, min(rzarztnr) INTO :frmZahlHalter.nRZNr, :frmZahlHalter.nRZArztNr
				// FROM hb, rz, rzp
				// WHERE hbrznr=rznr AND rznr=rzpnr
				// AND ' || PalArztNr('rzp', dfArztNr, nArztNr2) || '
				// AND rzphalternr = :frmZahlHalter.dfHalterNr
				// AND rzaktivdat IS NOT NULL'
				bPExists = false;
				if (nPRZNr != SalNumber.Null) 
				{
					// 12.09.11 Ä643
					// Call SqlIstDa( 'FROM rzp, rk
					// WHERE rzpnr = ' || SalNumberToStrX( nPRZNr, 0 ) || '
					// AND rzparztnr = rkarztnr AND rzphalternr = rkhalternr
					// AND rzprechnr = rkrechnr
					// AND rkmahnstufe = 9', bPExists )
					// 16.07.12 F1361 rkrechnr >= 99990  --->> rkrechnr >= 999990
					Int.SqlIstDa(@"FROM rzp, rk
WHERE rzpnr = " + nPRZNr.ToString(0) + @"
AND rzparztnr = rkarztnr AND rzphalternr = rkhalternr
AND rzprechnr = rkrechnr
AND (rkmahnstufe = 9 OR rkrechnr >= 999990) AND rkdeaktiv IS NULL", ref bPExists);
				}
				return bPExists;
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmBankZahl WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBankZahl_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmBankZahl_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmBankZahl_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBankZahl_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.OnCreate();
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBankZahl_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.OnDestroy();
			#endregion
		}
		
		/// <summary>
		/// pbZahlOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZahlOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbZahlOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZahlOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sal.MessageBox(@"Das alte
Bank-Clearing-Protokoll
wird gelöscht!
Weiter ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconExclamation)) == Sys.IDYES) 
			{
				this.BankClearing();
			}
			this.SendMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.DestroyWindow();
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class BankClearingLocals
			{
				public SalNumber nZeile = 0;
				public SalNumber nArztNr = 0;
				public SalNumber nHalterNr = 0;
				// 07.01.13 F1478
				public SalNumber nVirtArztNr = 0;
				public SalNumber nVirtArztNr2 = 0;
				public SalNumber nVirtHalterNr = 0;
				public SalNumber nRechNr = 0;
				public SalNumber nProzNr = 0;
				public SalNumber nBuchDM = 0;
				public SalNumber nRestL = 0;
				public SalNumber nRestA = 0;
				public SalNumber nRestM = 0;
				public SalNumber nRestZ = 0;
				public SalNumber nZahlDM = 0;
				public SalNumber nAuszug = 0;
				public SalNumber nTextSchl = 0;
				public SalString strRef = "";
				public SalString strAuftr1 = "";
				public SalString strAuftr2 = "";
				public SalString strErgebnis = "";
				public SalDateTime dtBankProto = SalDateTime.Null;
				public SalDateTime dtDatum = SalDateTime.Null;
				public SalSqlHandle hSqlBC = SalSqlHandle.Null;
				public SalSqlHandle hSqlRZ = SalSqlHandle.Null;
				public SalNumber nFetchBC = 0;
				public SalNumber nFetchRZ = 0;
				public SalString strBankKonto = "";
				// 05.10.09 OTÄ313
				public SalNumber nVirtKonto = 0;
				public SalBoolean bVirtKonto = false;
				public SalBoolean bReadOk = false;
				public SalNumber nByteDisp = 0;
				// 15.02.16 Ä1343
				public SalBoolean bRaZa = false;
				public SalNumber nRZNr = 0;
				public SalNumber nRZBuchDM = 0;
				public SalBoolean bRZMS9 = false;
				// 06.11.18 Ä1806
				public SalNumber nMahnNr = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetZettelLocals
			{
				public SalNumber nKZPraxArt = 0;
				public SalNumber nArztNr2 = 0;
				public SalNumber nInd = 0;
				public SalBoolean bExists = false;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetRechnungLocals
			{
				public SalBoolean bExists = false;
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber nDMLeis = 0;
				public SalNumber nDMArzn = 0;
				public SalNumber nDMMahn = 0;
				public SalNumber nDMZins = 0;
				public SalNumber nZaLeis = 0;
				public SalNumber nZaArzn = 0;
				public SalNumber nZaMahn = 0;
				public SalNumber nZaZins = 0;
				public SalNumber nRestDM = 0;
				public SalNumber nMahnstufe = 0;
				public SalDateTime dtVerjDat = SalDateTime.Null;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetRaZaLocals
			{
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnRZNr = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetGesamtOPLocals
			{
				public SalBoolean bExists = false;
				public SalNumber nInd = 0;
				public SalNumber nArzt2 = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRestDM = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetAusbuchenLocals
			{
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnMGAusbuchen = 0;
				public SalNumber pnKleinBetrag = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetHalterAusbuchenLocals
			{
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnSkonto = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetMahngebLocals
			{
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnTVSMahnGeb = 0;
				public SalNumber pnTVSMahnDM1 = 0;
				public SalNumber pnTVSMahnDM2 = 0;
				public SalNumber pnTVSMahnDM3 = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetMehrwertsteuerLocals
			{
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnKZMwSt = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetRestLocals
			{
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnRestL = 0;
				public SalNumber pnRestA = 0;
				public SalNumber pnRestM = 0;
				public SalNumber pnRestZ = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetProzNrLocals
			{
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnProzNr = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetProzOPLocals
			{
				public SalNumber nInd = 0;
				public SalString strpSelect = "";
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnProzNr = 0;
				public SalNumber pnDMOP = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class UpdateProzBezLocals
			{
				public SalDateTime pdtDatum = SalDateTime.Null;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnProzNr = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class CheckRechAbLocals
			{
				public SalBoolean bExists = false;
				public SalNumber nInd = 0;
				public SalString pstrTHTi = "";
				public SalString pstrTHVN = "";
				public SalString pstrTHNN = "";
				public SalString pstrTHN2 = "";
				public SalString pstrTHStr = "";
				public SalString pstrTHOrt = "";
				public SalString pstrTHLand = "";
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnZahlDM = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class BriefMS7Locals
			{
				public SalBoolean bExists = false;
				public SalNumber nInd = 0;
				public SalString pstrTHTi = "";
				public SalString pstrTHVN = "";
				public SalString pstrTHNN = "";
				public SalString pstrTHN2 = "";
				public SalString pstrTHStr = "";
				public SalString pstrTHOrt = "";
				public SalString pstrTHLand = "";
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnZahlDM = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetMahnAnzLocals
			{
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnMahnAnz = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class InsertFiBuLocals
			{
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnFertig = 0;
				public SalString pstrBankKonto = "";
				public SalNumber pnHaben = 0;
				public SalNumber pnBelNr = 0;
				public SalDateTime pdtBelDat = SalDateTime.Null;
				public SalString pstrBuchText = "";
				public SalNumber pnDiverse = 0;
				public SalNumber pnTyp = 0;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class InsertZahlungLocals
			{
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnProzNr = 0;
				public SalNumber pnKZZahl = 0;
				public SalNumber pnBelNr = 0;
				public SalNumber pnBuchDM = 0;
				public SalDateTime pdtBuchDat = SalDateTime.Null;
				public SalNumber pnRZNr = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class InsertKontoLocals
			{
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalString pstrBuchText = "";
				public SalNumber pnBelNr = 0;
				public SalDateTime pdtBuchDat = SalDateTime.Null;
				public SalNumber pnZahlLeis = 0;
				public SalNumber pnZahlArzn = 0;
				public SalNumber pnZahlMahn = 0;
				public SalNumber pnZahlZins = 0;
				public SalNumber pnRPMwSt = 0;
				public SalNumber pnMwSatz = 0;
				public SalNumber pnKZZahl = 0;
				public SalNumber pnDummyHaben = 0;
				public SalNumber pnReverseVersion = 0;
				// 22.08.22 Ä2015
				public SalNumber pnDMMahn = 0; // 22.08.22 Ä2015
				// 22.08.22 Ä2015
				public SalNumber pnDMRech = 0; // 22.08.22 Ä2015
				// 14.11.23 Ä2144 +Kontierung
				public SalString pstrKontoCode = ""; // 14.11.23 Ä2144 +Kontierung
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class UpdateRechnungLocals
			{
				public SalDateTime pdtDatum = SalDateTime.Null;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnKZZahl = 0;
				public SalNumber pnZaLeis = 0;
				public SalNumber pnZaArzn = 0;
				public SalNumber pnZaMahn = 0;
				public SalNumber pnZaZins = 0;
				public SalNumber pnMahnstufe = 0;
				public SalDateTime pdtTeilzDat = SalDateTime.Null;
				public SalDateTime pdtVerjDat = SalDateTime.Null;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class UpdateRechPositionLocals
			{
				public SalString strROWIDLocal = "";
				public SalNumber nInd = 0;
				public SalString pnSelect = "";
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnProzMwSt = 0;
				public SalNumber pnDiverse = 0;
				public SalNumber pnRP1MwSt = 0;
				public SalString pstrLA = "";
				public SalNumber pnReverseVersion = 0;
				public SalNumber pnRPZahl = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class UpdateHalterLocals
			{
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalString pstrBLZ = "";
				public SalString pstrKonto = "";
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class ZahlungBuchenLocals
			{
				public SalBoolean bSonder = false;
				public SalNumber nBuchDM = 0;
				public SalNumber nAusbuchDM = 0;
				public SalNumber nAusbuchRech = 0; // 14.10.22 Ä2015
				public SalNumber nAusbuchMahn = 0; // 14.10.22 Ä2015
				public SalNumber nKZZahl = 0;
				public SalNumber nDMLeis = 0;
				public SalNumber nDMArzn = 0;
				public SalNumber nDMMahn = 0;
				public SalNumber nDMZins = 0;
				public SalNumber nZaLeis = 0;
				public SalNumber nZaArzn = 0;
				public SalNumber nZaMahn = 0;
				public SalNumber nZaZins = 0;
				public SalNumber nRestDM = 0;
				public SalNumber nMahnstufe = 0;
				public SalDateTime dtVerjDat = SalDateTime.Null;
				public SalNumber nMGAusbuchen = 0;
				public SalNumber nKleinBetrag = 0;
				public SalNumber nSkonto = 0;
				public SalNumber nTVSMahnGeb = 0;
				public SalNumber nTVSMahnDM = 0;
				public SalNumber nMahnAnz = 0;
				public SalNumber nDiverse = 0;
				public SalNumber nRP1MwSt = 0;
				public SalString strReturn = "";
				public SalString strBuchText = "";
				public SalString strBuchTextDummy = "";
				public SalString strLA = "";
				public SalDateTime dtTeilzDat = SalDateTime.Null;
				public SalNumber nZahlDM = 0;
				public SalDateTime dtBuchDat = SalDateTime.Null;
				public SalString strBankKonto = "";
				public SalNumber nBelNr = 0;
				public SalNumber nKZMwSt = 0;
				public SalNumber nProzMwSt = 0;
				public SalNumber nZahlLeis = 0;
				public SalNumber nZahlArzn = 0;
				public SalNumber nZahlMahn = 0;
				public SalNumber nZahlZins = 0;
				public SalNumber nFetchRP = 0;
				public SalNumber nRPDM = 0;
				public SalNumber nRPZahl = 0;
				public SalNumber nRPMwSt = 0;
				public SalString strROWID = "";
				public SalString strPalZahlROWID = ""; // nur für PalZahlung !
				public SalNumber nRestL = 0;
				public SalNumber nRestA = 0;
				public SalNumber nRestM = 0;
				public SalNumber nRestZ = 0;
				// Date/Time: dtRatDat
				// Number: nRatMtl
				public SalNumber nProzNr = 0;
				public SalNumber nProzOP = 0;
				public SalNumber nRZNr = 0;
				// 02.12.14 Ä1104 + reverseversion
				public SalNumber nMwStVorgabe = 0;
				// 05.12.22 F4949
				public SalNumber nTVSMahnGebAusbuch = 0;
				public SalNumber nTVSMahnDMAusbuch = 0;
				// 31.07.23 F5031
				public SalNumber nRestDMDummy = 0;
				public SalNumber nZahDMDummy = 0;
				public SalNumber nMahnstufeDummy = 0;
				public SalNumber nTVSMahnGebjeMg = 0;
				public SalNumber nMahnDummy = 0;
				public SalNumber nTVSDM1 = 0;
				public SalNumber nTVSDM2 = 0;
				public SalNumber nTVSDM3 = 0;
				// Buchung: M=manuell A=automatisch
				public SalString strMA = ""; // Buchung: M=manuell A=automatisch
				public SalNumber nArztNr = 0;
				public SalNumber nHalterNr = 0;
				public SalNumber nRechNr = 0;
				public SalNumber nZahlDMX = 0;
				public SalDateTime dtBuchDatX = SalDateTime.Null;
				public SalString strBankKontoX = "";
				public SalNumber nBelNrX = 0;
				public SalNumber nBuchungsDM = 0;
				public SalNumber nRestLX = 0;
				public SalNumber nRestAX = 0;
				public SalNumber nRestMX = 0;
				public SalNumber nRestZX = 0;
				public SalNumber nRZNrX = 0;
				public SalBoolean bRZ = false;
			}
		}
		#endregion
	}
}
