// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;
using Dart.Ftp;
using static System.Net.WebRequestMethods;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class dlgMahnVor : SalDialogBox
	{
		#region Window Variables
		public SalSqlHandle hSqlMahn = SalSqlHandle.Null;
		public SalSqlHandle hSqlMahn2 = SalSqlHandle.Null;
		public SalNumber nFetch = 0;
		public SalNumber nFetch2 = 0;
		public SalString strSelect = "";
		public SalDateTime dtBasisDat = SalDateTime.Null;
		public SalBoolean bOK = false;
		public SalNumber nMVArztNr = 0;
		public SalNumber nMVArztNr2 = 0;
		public SalNumber nMVArztNrX = 0;
		public SalNumber nMVKZPraxArt = 0;
		public SalNumber nMVHalterNr = 0;
		public SalNumber nMVRechNr = 0;
		public SalNumber nMVRechNrMax = 0;
		public SalString strMVName = "";
		public SalDateTime dtMVRechDat = SalDateTime.Null;
		public SalDateTime dtMVRatDat = SalDateTime.Null;
		public SalDateTime dtMVRaZaMaDat = SalDateTime.Null;
		public SalNumber nMVRatMonate = 0;
		public SalNumber nMVMI = 0;
		public SalNumber nMVMIalt = 0;
		public SalDateTime dtMVMahnDat = SalDateTime.Null;
		public SalNumber nMVMahnLeer = 0;
		public SalDateTime dtMVTeilzDat = SalDateTime.Null;
		public SalDateTime dtMVTeilzDat2 = SalDateTime.Null;
		public SalNumber nMVTeilzLeer = 0;
		public SalNumber nMVTeilzLeer2 = 0;
		public SalNumber nMVMS = 0;
		public SalNumber nMVDMRest = 0;
		public SalNumber nMVDMMahn = 0;
		public SalNumber nMVDMZins = 0;
		public SalArray<SalNumber> nMI = new SalArray<SalNumber>("1:12");
		public SalNumber nMG = 0;
		public SalNumber nDiverse = 0;
		public SalNumber nFaellTg = 0;
		public SalNumber nCount = 0;
		public SalBoolean bDa = false;
		public SalNumber nMVDMMahnZins = 0;
		public SalDateTime dtMVMahnSperrBis = SalDateTime.Null;
		public SalDateTime dtZIRechDat = SalDateTime.Null;
		public SalDateTime dtZIZahlDat = SalDateTime.Null;
		public SalNumber nZITage = 0;
		public SalNumber nZIRechGes = 0;
		public SalNumber nZinsen = 0;
		public SalArray<SalNumber> nZIProz = new SalArray<SalNumber>("1:3");
		public SalNumber nZaDM = 0;
		public SalNumber nMVHF = 0;
		public SalString strOrdner = "";
		public SalString strGUIDAlt = "";
		public SalBoolean bFTPOk = false;
		public SalString strTemp = "";
		public SalVariant vData = new SalVariant();
		public SalBoolean bPFTPOk = false;
		public Dart.Ftp.Ftp axFTP = new Dart.Ftp.Ftp();
		public Listing objFTPList;
		public ListEntry objFTPEntry;
		public SalNumber nPCount = 0;
		public SalString strName = "";
		public SalString strDirectory = "";
		public SalDateTime dtDate = SalDateTime.Null;
		public SalString strDate = "";
		public SalNumber nSize = 0;
		public SalFileHandle hDisk = SalFileHandle.Null;
		public SalString strLine = "";
		public SalString strCN = "";
		public SalString strGUID = "";
		public SalString strPraxis = "";
		public SalNumber nArztNr = 0;
		public SalString strProgVer = "";
		public SalNumber nZahlErinn = 0;
		public SalNumber nZEFrist = 0;
		public SalString lsZEText = "";
		public SalBoolean bZahlErinn = false;
		public SalDateTime dtZEDatum = SalDateTime.Null;
		public SalNumber nMahnNr = 0;
		public SalNumber nMVArztAlt = 0;
		public SalNumber nMVHalterAlt = 0;
		public SalString strMVMOId = "";
		public SalString strMVMOIdAlt = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public dlgMahnVor()
		{
			// Assign global reference.
			App.dlgMahnVor = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();

            //FC:FINAL: axFTP
            this.axFTP.Progress += AxFTP_Progress; ;
            this.axFTP.Error += AxFTP_Error;
		}

        private void AxFTP_Error(object sender, ErrorEventArgs e)
        {
			Int.PalLog(e.GetException().Message);
        }

        private void AxFTP_Progress(object sender, ProgressEventArgs e)
        {
            //throw new NotImplementedException();
        }
        #endregion

        #region System Methods/Properties

        /// <summary>
        /// Shows the modal dialog.
        /// </summary>
        /// <param name="owner"></param>
        /// <returns></returns>
        public static SalNumber ModalDialog(Control owner)
		{
			dlgMahnVor dlg = new dlgMahnVor();
			SalNumber ret = dlg.ShowDialog(owner);
			return ret;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static dlgMahnVor FromHandle(SalWindowHandle handle)
		{
			return ((dlgMahnVor)SalWindow.FromHandle(handle, typeof(dlgMahnVor)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <param name="strDateiname"></param>
		/// <param name="strZielDatei"></param>
		/// <param name="strPGUID"></param>
		/// <returns></returns>
		public SalBoolean PalAbrUpload(SalString strDateiname, SalString strZielDatei, SalString strPGUID)
		{
			#region Local Variables
			SalBoolean bPOk = false;
			SalVariant vData = new SalVariant();
			SalNumber nSichFileSize = 0;
			SalString strFTPOrdner = "";
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				nSichFileSize = Vis.FileGetSize(strDateiname);
				if (nSichFileSize == 0) 
				{
					nSichFileSize = 1;
				}

				if (Sql.Database == "TVN1") 
				{
					strFTPOrdner = "Praxisinfos";
				}
				else
				{
					strFTPOrdner = "Praxisinfos2";
				}

				// Set dfSichText2 = 'Datei ' || strDateiname || ' wird auf TVN-Server hochgeladen'
				Sal.WaitCursor(true);
				axFTP.Timeout = 60000;
				// 22.12.09
				//axFTP.PropSetPassive(true);
				//axFTP.MakeDirectory("/" + strFTPOrdner + "/" + strPGUID + "/");
                try
				{
                    axFTP.CreateDirectory("/" + strFTPOrdner + "/" + strPGUID + "/");
                }
				catch { }				
				axFTP.SetDirectory("/" + strFTPOrdner + "/" + strPGUID + "/");

                vData.SetString(strDateiname);
				//bPOk = axFTP.Store("/" + strFTPOrdner + "/" + strPGUID + "/" + strZielDatei, vData, 0, 0);
				axFTP.Put(strDateiname, "/" + strFTPOrdner + "/" + strPGUID + "/" + strZielDatei, Synchronize.Off);
				Sal.WaitCursor(false);
				return true;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strDateiname"></param>
		/// <param name="strZielDatei"></param>
		/// <returns></returns>
		public SalBoolean PalBIUpload(SalString strDateiname, SalString strZielDatei)
		{
			#region Local Variables
			SalBoolean bPOk = false;
			SalVariant vData = new SalVariant();
			SalNumber nSichFileSize = 0;
			SalString strFTPOrdner = "";
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				nSichFileSize = Vis.FileGetSize(strDateiname);
				if (nSichFileSize == 0) 
				{
					nSichFileSize = 1;
				}

				if (Sql.Database == "TVN1") 
				{
					strFTPOrdner = "Behandlungs-IDs";
				}
				else
				{
					strFTPOrdner = "Behandlungs-IDs2";
				}

				// Set dfSichText2 = 'Datei ' || strDateiname || ' wird auf TVN-Server hochgeladen'
				Sal.WaitCursor(true);
				axFTP.Timeout = 60000;
				// 22.12.09
				//axFTP.PropSetPassive(true);
				//axFTP.MakeDirectory("/" + strFTPOrdner + "/");
				try
				{
                    axFTP.CreateDirectory("/" + strFTPOrdner + "/");
                }
				catch { }

                axFTP.SetDirectory("/" + strFTPOrdner + "/");

                vData.SetString(strDateiname);
				//bPOk = axFTP.Store("/" + strFTPOrdner + "/" + strZielDatei, vData, 0, 0);
				axFTP.Put(strDateiname, "/" + strFTPOrdner + "/" + strZielDatei, Synchronize.Off);
                Sal.WaitCursor(false);
				return true;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalPNCheck()
		{
			#region Local Variables
			SalArray<SalString> strArrToken = new SalArray<SalString>();
			SalBoolean bPOk = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				// 21.01.16 Ã„1322
				// Call SalTblReset( tblFTP )
				Sal.WaitCursor(true);


                //bPFTPOk = axFTP.Login("ftp.tvn-elze.de", "TVNUser", "91L3bg6Q", "", 21);
                this.axFTP.Connect("ftp.tvn-elze.de");
                this.axFTP.Authenticate("TVNUser", "91L3bg6Q");
                if (this.axFTP.Connected) 
				{
					axFTP.Timeout = 60000;
                    // 22.12.09
                    // 07.12.12
                    // Call axFTP.PropSetPassive( FALSE )
                    //axFTP.PropSetPassive(true);

                    // Call axFTP.PropSetDirectory( String )
                    //axFTP.List("/Nutzungsdaten");                    
                    //axFTP.PropGetListing(objFTPList);
                    objFTPList = axFTP.List("/Nutzungsdaten", "", ListType.Full);
                    //objFTPList.PropGetCount(ref nPCount);
                    nPCount = objFTPList.Count;
					// 27.09.23
					if (nPCount >= 32000) 
					{
						nPCount = 32000;
					}

					while (nPCount > 0) 
					{
                        objFTPEntry = objFTPList[nPCount - 1];
						//vData.SetNumber(nPCount, Sys.VT_I2);
						//objFTPList.Item(vData, objFTPEntry);
						//objFTPEntry.PropGetName(ref strName);
						//objFTPEntry.PropGetDirectory(ref strDirectory);
						//objFTPEntry.PropGetTimeStamp(ref strDate);
						//objFTPEntry.PropGetSize(ref nSize);
						strName = objFTPEntry.Name;
                        strDirectory = objFTPEntry.DirectoryName;
                        strDate = objFTPEntry.TimeStamp;
                        nSize = objFTPEntry.Length;

                        // Call SalTblInsertRow( tblFTP, TBL_MaxRow )
                        // Set tblFTP.colDatum = strDate
                        // Set tblFTP.colGroesse = nSize / 1024
                        // Set tblFTP.colName = strName

                        if (strName != "." && strName != "..") 
						{
							strTemp = Vis.DosGetEnvString("TEMP");
							vData.SetString(strTemp + "\\" + this.strName);
							//bPFTPOk = axFTP.Retrieve("/Nutzungsdaten/" + this.strName, vData, 0, 0);
                            this.axFTP.Get("/Nutzungsdaten/" + this.strName, strTemp.ToString() + "\\" + this.strName.ToString(), Synchronize.Off);
                            if (strName.Scan("#") != -1) 
							{
								hDisk.Open(strTemp + "\\" + this.strName, Sys.OF_Read);
								while (hDisk.GetString(ref strLine, 2048)) 
								{
									if (strLine.Tokenize("", ((SalNumber)9).ToCharacter(), strArrToken) > 0) 
									{
										strCN = strArrToken[0];
										strPraxis = strArrToken[1];
										nArztNr = Int.PalValNum(strArrToken[2]);
										strProgVer = strArrToken[3];
										strGUID = strName.Left(strName.Scan("#"));
										Int.SqlIstDa("FROM pn WHERE pnguid = :dlgMahnVor.strGUID AND pncomputername = :dlgMahnVor.strCN", ref bPOk);
										if (bPOk) 
										{
											Int.SqlImmed("UPDATE pn SET pnpraxis = :dlgMahnVor.strPraxis, pnarztnr = :dlgMahnVor.nArztNr, pnprogver = :dlgMahnVor.strProgVer, pnletztdat = SYSDATETIME WHERE pnguid = :dlgMahnVor.strGUID AND pncomputername = :dlgMahnVor.strCN");
										}
										else
										{
											Int.SqlImmed(@"INSERT INTO pn (pnguid, pncomputername, pnpraxis, pnarztnr, pnprogver, pnletztdat)
VALUES( :dlgMahnVor.strGUID, :dlgMahnVor.strCN, :dlgMahnVor.strPraxis, :dlgMahnVor.nArztNr, :dlgMahnVor.strProgVer, SYSDATETIME )");
										}
										// Call SqlImmed( 'INSERT INTO pnd (pnddatum, pndguid, pndcomputername, pndpraxis, pndarztnr, pndprogver)
										// VALUES( SYSDATE, :dlgMahnVor.strGUID, :dlgMahnVor.strCN, :dlgMahnVor.strPraxis, :dlgMahnVor.nArztNr, :dlgMahnVor.strProgVer)' )
									}
								}
								hDisk.Close();
								axFTP.Delete("/Nutzungsdaten/" + this.strName);
							}
						}

						nPCount = nPCount - 1;
					}

					//axFTP.Logout();
					axFTP.Close();
				}
				else
				{
					// Set dfSichText2 = 'Keine Internetverbindung zum Server ftp.moveta.de'
				}

				this.SetStatusBarText("");
				Sal.WaitCursor(false);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalBI()
		{
			#region Actions
			using (new SalContext(this))
			{
				// 26.07.22 Ã„2030
				strOrdner = Const.PATH_ALLGEMEIN;

                //bFTPOk = axFTP.Login("www.tvn-elze.de", "FTPPeg", "ftp", "", 21);
                this.axFTP.Connect("www.tvn-elze.de");
                this.axFTP.Authenticate("FTPPeg", "ftp");
                if (!(this.axFTP.Connected)) 
				{
					if (Sys.IDOK == Sal.MessageBox(@"Es konnte keine Verbindung zum moveta-Server hergestellt werden.

Bitte Ã¼berprÃ¼fen Sie Ihre Internet-Verbindung.", "Problem", (Sys.MB_Ok | Sys.MB_IconAsterisk))) 
					{
					}
					// Set rbLw = TRUE
				}
				else
				{

					strMVMOIdAlt = "";
					this.SetStatusBarText("Lade Behandlungs-IDs hoch");
					Int.SqlConnection(ref hSqlMahn2);
					strSelect = @"SELECT  biid, biarztnr, birechnr, akzpraxart
INTO :dlgMahnVor.strMVMOId, :dlgMahnVor.nMVArztNr, :dlgMahnVor.nMVRechNr, :dlgMahnVor.nMVKZPraxArt
FROM bi, a
WHERE biuebdat IS NULL
AND biarztnr=aarztnr
ORDER BY  biid, akzpraxart";
					Int.SqlPrepar(hSqlMahn2, "UPDATE bi SET biuebdat=SYSDATETIME WHERE biid = :dlgMahnVor.strMVMOId AND biarztnr = :dlgMahnVor.nMVArztNr AND birechnr = :dlgMahnVor.nMVRechNr");
					Sal.WaitCursor(true);
					Int.SqlHandleExec(hSqlMahn, strSelect, "Behandlungs-Id im Internet erstellen", ref Var.nErr);
					nFetch = hSqlMahn.FetchNext();
					while (nFetch != Sys.FETCH_EOF) 
					{
						if (strMVMOId != strMVMOIdAlt) 
						{
							if (strMVMOIdAlt != "") 
							{
								Var.hFile.Close();
								// Call PalLog( 'op' || PalNullen( nMVArztNrX, 4) || '.TVN' )
								if (!(PalBIUpload(strOrdner + "bitemp.TVN", strMVMOIdAlt + ".TVN"))) 
								{
									Sal.MessageBox("Datei kann nicht hochgeladen werden !", "Fehler !!", (Sys.MB_Ok | Sys.MB_IconAsterisk));
									break;
								}
								else
								{
								}
								// Call PalLog( 'op' || PalNullen( nMVArztNrX, 4) || '.TVN UP!' )
							}
							bOK = Var.hFile.Open(strOrdner + "bitemp.TVN", Sys.OF_Delete);
							bOK = Var.hFile.Open(strOrdner + "bitemp.TVN", (Sys.OF_Create | Sys.OF_Write));
							if (bOK) 
							{
							}
							else
							{
								Sal.MessageBox("Datei kann nicht erstellt werden !", "Fehler !!", (Sys.MB_Ok | Sys.MB_IconAsterisk));
								break;
							}
							strMVMOIdAlt = strMVMOId;
							nMVArztNrX = nMVArztNr;
						}
						if (nMVKZPraxArt == 0) 
						{
							Var.hFile.PutString("L" + Int.PalNullen(nMVArztNr, 4) + Int.PalNullen(nMVRechNr, 6));
							Var.hFile.PutString("A" + Int.PalNullen(nMVArztNr, 4) + Int.PalNullen(nMVRechNr, 6));
						}
						else if (nMVKZPraxArt == 1) 
						{
							Var.hFile.PutString("L" + Int.PalNullen(nMVArztNr, 4) + Int.PalNullen(nMVRechNr, 6));
						}
						else
						{
							Var.hFile.PutString("A" + Int.PalNullen(nMVArztNr, 4) + Int.PalNullen(nMVRechNr, 6));
						}
					}
					hSqlMahn.Commit();
					hSqlMahn2.Disconnect();
					Var.hFile.Close();
					if (strMVMOIdAlt != "") 
					{
						if (!(PalBIUpload(strOrdner + "bitemp.TVN", strMVMOIdAlt + ".TVN"))) 
						{
						}
					}
					bOK = Var.hFile.Open(strOrdner + "bitemp.TVN", Sys.OF_Delete);
					axFTP.Close();
					Sal.WaitCursor(false);
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// dlgMahnVor WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgMahnVor_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.dlgMahnVor_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgMahnVor_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfMahnDat.Value = SalDateTime.Current;
			this.dfZahlEing.DateTime = SalDateTime.Current;
			this.dfNicht.Text = "0";
			this.dfZusatz.Text = "0";
			// 19.07.21
			this.rbFO0.Checked = true;
			#endregion
		}
		
		/// <summary>
		/// pkOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pkOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pkOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pkOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 09.02.16 von frmAbrFTP
			if (Sql.Database == "TVN1") 
			{
				this.PalPNCheck();
			}

			if (this.dfMahnDat.Value > SalDateTime.Current) 
			{
				if (Sys.IDNO == Sal.MessageBox(@"Das gewÃ¤hlte Mahndatum
liegt in der Zukunft !

Trotzdem OK ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					this.EndDialog(0);
				}
			}
			Sal.WaitCursor(true);
			this.nMVMIalt = 9999;
			if (this.dfvon.IsEmpty()) 
			{
				this.dfvon.Number = 1;
			}
			if (this.dfbis.IsEmpty()) 
			{
				this.dfbis.Number = 9999;
			}
			// 13.09.16 F2762
			if (this.dfNicht.Text == "") 
			{
				this.dfNicht.Text = "0";
			}
			if (this.dfZusatz.Text == "") 
			{
				this.dfZusatz.Text = "0";
			}

			Int.SqlImmedSel("SELECT count(*) FROM mv INTO :dlgMahnVor.nCount");
			if (this.nCount > 0) 
			{
				// Call SalStatusSetText(hWndForm,'Alter Mahnvorschlag wird gelÃ¶scht')
				// 18.01.05 auf Anweisung von H.Sasse kann ein MV hier nicht mehr Ã¼berschrieben werden.
				// Call SqlImmedX('DELETE FROM MD WHERE mddatum IN (SELECT DISTINCT mvmahndat FROM MV)')
				// Call SqlImmedX('DELETE FROM mv')
				Sal.MessageBox(@"Es ist noch ein alter Mahnvorschlag vorhanden!

Die Mahnvorschlagserstellung wird abgebrochen.", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				this.SetStatusBarText("Neuer Mahnvorschlag wird erstellt -  Bitte warten ...");
				this.bOK = Int.SqlConnection(ref this.hSqlMahn);
				if (this.cbAuftrKart.Checked) 
				{
					// 02.04.07 Ã„102
					// Set strSelect = 'select rkarztnr,rkhalternr,rkrechnr,hti || hvn || \' \' || hnn, hfaelltg,
					// rkrechdat,minr, rkmahnltzt, @isna(rkmahnltzt), rkteilzdat, @isna(rkteilzdat),
					// rkmahnstufe, (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn), (rkdmmahn-rkzamahn), (rkdmzins-rkzazins)
					// INTO :dlgMahnVor.nMVArztNr, :dlgMahnVor.nMVHalterNr, :dlgMahnVor.nMVRechNr, :dlgMahnVor.strMVName, :dlgMahnVor.nFaellTg,
					// :dlgMahnVor.dtMVRechDat, :dlgMahnVor.nMVMI, :dlgMahnVor.dtMVMahnDat, :dlgMahnVor.nMVMahnLeer, :dlgMahnVor.dtMVTeilzDat, :dlgMahnVor.nMVTeilzLeer,
					// :dlgMahnVor.nMVMS, :dlgMahnVor.nMVDMRest, :dlgMahnVor.nMVDMMahn, :dlgMahnVor.nMVDMZins
					// from rk,h,mi
					// WHERE rkarztnr BETWEEN :dlgMahnVor.dfvon and :dlgMahnVor.dfbis
					// and rkarztnr NOT IN (' || dfNicht || ')
					// and rkrechnr < 999990
					// and rkmahnstufe<4 and rkkzzahl<2 and (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn)>0
					// and (rkmahnsperr=0 Or rkmahnsperr IS NULL)
					// and rkarztnr=harztnr and rkhalternr=hhalternr and hmahnint=minr
					// ORDER BY rkarztnr,rkhalternr'
					// 17.08.10 OTÃ„457 + MahnSperrBis
					// 27.06.14 F2081
					// Set strSelect = 'select rkarztnr,rkhalternr,rkrechnr,hti || hvn || \' \' || hnn, hfaelltg,
					// rkrechdat,minr, rkmahnltzt, @isna(rkmahnltzt), rkteilzdat, @isna(rkteilzdat),
					// rkmahnstufe, (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn), (rkdmmahn-rkzamahn), (rkdmzins-rkzazins), rkmahnsperrbis
					// INTO :dlgMahnVor.nMVArztNr, :dlgMahnVor.nMVHalterNr, :dlgMahnVor.nMVRechNr, :dlgMahnVor.strMVName, :dlgMahnVor.nFaellTg,
					// :dlgMahnVor.dtMVRechDat, :dlgMahnVor.nMVMI, :dlgMahnVor.dtMVMahnDat, :dlgMahnVor.nMVMahnLeer, :dlgMahnVor.dtMVTeilzDat, :dlgMahnVor.nMVTeilzLeer,
					// :dlgMahnVor.nMVMS, :dlgMahnVor.nMVDMRest, :dlgMahnVor.nMVDMMahn, :dlgMahnVor.nMVDMZins, :dlgMahnVor.dtMVMahnSperrBis
					// from rk,h,mi
					// WHERE ((rkarztnr BETWEEN :dlgMahnVor.dfvon and :dlgMahnVor.dfbis
					// and rkarztnr NOT IN (' || dfNicht || ') )
					// OR rkarztnr IN (' || dfZusatz || ') )
					// and rkrechnr < 999990
					// and rkmahnstufe<4 and rkkzzahl<2 and (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn)>0
					// and (rkmahnsperr=0 Or rkmahnsperr IS NULL)
					// and rkarztnr=harztnr and rkhalternr=hhalternr and hmahnint=minr
					// and hsperrdatum IS NULL
					// ORDER BY rkarztnr,rkhalternr'
					this.strSelect = @"select rkarztnr,rkhalternr,rkrechnr,hti || hvn || ' ' || hnn, hfaelltg,
rkrechdat,minr, rkmahnltzt, @isna(rkmahnltzt), rkteilzdat, @isna(rkteilzdat),
rkmahnstufe, (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn), (rkdmmahn-rkzamahn), (rkdmzins-rkzazins), rkmahnsperrbis
INTO :dlgMahnVor.nMVArztNr, :dlgMahnVor.nMVHalterNr, :dlgMahnVor.nMVRechNr, :dlgMahnVor.strMVName, :dlgMahnVor.nFaellTg,
:dlgMahnVor.dtMVRechDat, :dlgMahnVor.nMVMI, :dlgMahnVor.dtMVMahnDat, :dlgMahnVor.nMVMahnLeer, :dlgMahnVor.dtMVTeilzDat, :dlgMahnVor.nMVTeilzLeer,
:dlgMahnVor.nMVMS, :dlgMahnVor.nMVDMRest, :dlgMahnVor.nMVDMMahn, :dlgMahnVor.nMVDMZins, :dlgMahnVor.dtMVMahnSperrBis
from rk,h,mi";
					this.strSelect = this.strSelect + @"
WHERE ((rkarztnr BETWEEN :dlgMahnVor.dfvon and :dlgMahnVor.dfbis ";
					// 13.09.16 F2762 +  and dfNicht != ''
					if (this.dfNicht.Text != "0" && this.dfNicht.Text != "") 
					{
						this.strSelect = this.strSelect + @"
and rkarztnr NOT IN (" + this.dfNicht.Text + ") ";
					}
					this.strSelect = this.strSelect + ") ";
					// 13.09.16 F2762 +  and dfZusatz != ''
					if (this.dfZusatz.Text != "0" && this.dfZusatz.Text != "") 
					{
						this.strSelect = this.strSelect + @"
OR rkarztnr IN (" + this.dfZusatz.Text + ") ";
					}
					this.strSelect = this.strSelect + ") ";
					// 19.07.21
					if (this.rbFOnur.Checked) 
					{
						this.strSelect = this.strSelect + " AND (@LEFT(hort,2) IN (\'40\',\'41\', \'42\', \'44\', \'45\', \'50\', \'51\', \'52\', \'53\', \'54\', \'58\' ) AND hland = \'DE\') ";
					}
					else if (this.rbFOohne.Checked) 
					{
						this.strSelect = this.strSelect + " AND (@LEFT(hort,2) NOT IN (\'40\',\'41\', \'42\', \'44\', \'45\', \'50\', \'51\', \'52\', \'53\', \'54\', \'58\' ) OR hland <> \'DE\') ";
					}
					else
					{
					}
					// 17.01.18 Ã„1684 raus: and (rkmahnsperr=0 Or rkmahnsperr IS NULL)
					this.strSelect = this.strSelect + @"
and rkrechnr < 999990
and rkmahnstufe<4 and rkkzzahl<2 and (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn)>0
and rkarztnr=harztnr and rkhalternr=hhalternr and hmahnint=minr
and hsperrdatum IS NULL AND rkdeaktiv IS NULL AND hdeaktiv IS NULL
ORDER BY rkarztnr,rkhalternr";

				}
				// Else If cbRaten
				// 14.02.01 von rk auf za umgestellt.
				// 27.06.14 F2081
				// Set strSelect = 'SELECT rarztnr,rhalternr,hti || hvn || \' \' || hnn, r1, rmtl, akzpraxart, anr2,  max(zabuchdat), min(@isna(zabuchdat))
				// INTO :dlgMahnVor.nMVArztNr, :dlgMahnVor.nMVHalterNr, :dlgMahnVor.strMVName,
				// :dlgMahnVor.dtMVRatDat, :dlgMahnVor.nMVRatMonate, :dlgMahnVor.nMVKZPraxArt, :dlgMahnVor.nMVArztNr2,
				// :dlgMahnVor.dtMVTeilzDat, :dlgMahnVor.nMVTeilzLeer
				// from r, za, h, a
				// WHERE ((rarztnr BETWEEN :dlgMahnVor.dfvon and :dlgMahnVor.dfbis
				// and rarztnr NOT IN (' || dfNicht || ') )
				// OR rarztnr IN (' || dfZusatz || ') )
				// and akzpraxart<>2
				// and zakz(+)<4
				// and rarztnr=aarztnr and rarztnr=zaarztnr(+) and rhalternr=zahalternr(+)
				// and zaarztnr(+)=harztnr and zahalternr(+)=hhalternr  and (zaarztnr(+)=aarztnr or zaarztnr(+)=anr2)
				// and hsperrdatum IS NULL
				// GROUP BY 1,2,3,4,5,6,7'
				// Set strSelect = 'SELECT rarztnr,rhalternr,hti || hvn || \' \' || hnn, r1, rmtl, akzpraxart, anr2,  max(zabuchdat), min(@isna(zabuchdat))
				// INTO :dlgMahnVor.nMVArztNr, :dlgMahnVor.nMVHalterNr, :dlgMahnVor.strMVName,
				// :dlgMahnVor.dtMVRatDat, :dlgMahnVor.nMVRatMonate, :dlgMahnVor.nMVKZPraxArt, :dlgMahnVor.nMVArztNr2,
				// :dlgMahnVor.dtMVTeilzDat, :dlgMahnVor.nMVTeilzLeer
				// from r, za, h, a '
				// Set strSelect = strSelect || '
				// WHERE ((rkarztnr BETWEEN :dlgMahnVor.dfvon and :dlgMahnVor.dfbis '
				// If dfNicht != '0'
				// Set strSelect = strSelect || '
				// and rkarztnr NOT IN (' || dfNicht || ') '
				// Set strSelect = strSelect || ') '
				// If dfZusatz != '0'
				// Set strSelect = strSelect || '
				// OR rkarztnr IN (' || dfZusatz || ') '
				// Set strSelect = strSelect || ') '
				// Set strSelect = strSelect || '
				// and akzpraxart<>2
				// and zakz(+)<4
				// and rarztnr=aarztnr and rarztnr=zaarztnr(+) and rhalternr=zahalternr(+)
				// and zaarztnr(+)=harztnr and zahalternr(+)=hhalternr  and (zaarztnr(+)=aarztnr or zaarztnr(+)=anr2)
				// and hsperrdatum IS NULL
				// GROUP BY 1,2,3,4,5,6,7'
				else
				{
					// 20.08.12 Ã„809
					// 06.12.12 In Temp-Ordner nur leere Dateien
					// Set strOrdner = VisDosGetEnvString( 'TEMP' ) || '\\'
					this.strOrdner = Const.PATH_ALLGEMEIN;

					this.strGUIDAlt = "";
                    //this.bFTPOk = this.axFTP.Login("www.tvn-elze.de", "FTPPeg", "ftp", "", 21);
                    this.axFTP.Connect("www.tvn-elze.de");
                    this.axFTP.Authenticate("FTPPeg", "ftp");
                    if (!(this.axFTP.Connected)) 
					{
						if (Sys.IDOK == Sal.MessageBox(@"Es konnte keine Verbindung zum moveta-Server hergestellt werden.

Bitte Ã¼berprÃ¼fen Sie Ihre Internet-Verbindung.", "Problem", (Sys.MB_Ok | Sys.MB_IconAsterisk))) 
						{
						}
						// Set rbLw = TRUE
					}
					else
					{

						this.SetStatusBarText("Erstelle OP-Dateien");
						// 11.05.15 F2406
						// Set strSelect = 'SELECT  dbguid, rkhalternr, MIN(rkarztnr), sum(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins), max(rkmahnstufe)
						// INTO :dlgMahnVor.strGUID, :dlgMahnVor.nMVHalterNr,  :dlgMahnVor.nMVArztNr, :dlgMahnVor.nMVDMRest, :dlgMahnVor.nMVMS
						// FROM rk, db, a
						// WHERE ((rkarztnr BETWEEN ' || SalNumberToStrX(dfvon,0) || ' and ' || SalNumberToStrX(dfbis,0) || '
						// and rkarztnr NOT IN (' || dfNicht || ') )
						// OR rkarztnr IN (' || dfZusatz || ') )
						// AND rkkzzahl<2 AND dbguid IS NOT NULL  AND (rkarztnr=aarztnr or rkarztnr=anr2) and dbarztnr=aarztnr
						// GROUP BY 1,2'
						Int.SqlConnection(ref this.hSqlMahn2);
						this.strSelect = @"SELECT  dbguid, dbarztnr INTO :dlgMahnVor.strGUID,  :dlgMahnVor.nMVArztNr FROM db
WHERE ((dbarztnr BETWEEN " + this.dfvon.Number.ToString(0) + " and " + this.dfbis.Number.ToString(0) + " and dbarztnr NOT IN (" + this.dfNicht.Text + ") ) OR dbarztnr IN (" + this.dfZusatz.Text + @") ) AND dbguid IS NOT NULL AND @LEFT(dbguid,1) <>' '
ORDER BY  dbarztnr";
						Int.SqlPrepar(this.hSqlMahn2, @"SELECT rkhalternr, sum(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins), max(rkmahnstufe)
INTO :dlgMahnVor.nMVHalterNr, :dlgMahnVor.nMVDMRest, :dlgMahnVor.nMVMS
FROM rk, a
WHERE rkkzzahl<2 AND rkdeaktiv IS NULL AND (rkarztnr=aarztnr or rkarztnr=anr2) AND aarztnr = :dlgMahnVor.nMVArztNr
GROUP BY 1");
						Sal.WaitCursor(true);
						Int.SqlHandleExec(this.hSqlMahn, this.strSelect, "OP-Datei im Internet erstellen", ref Var.nErr);
						this.nFetch = this.hSqlMahn.FetchNext();
						while (this.nFetch != Sys.FETCH_EOF) 
						{
							if (this.strGUID != this.strGUIDAlt) 
							{
								if (this.strGUIDAlt != "") 
								{
									Var.hFile.Close();
									Int.PalLog("op" + Int.PalNullen(this.nMVArztNrX, 4) + ".TVN");
									if (!(this.PalAbrUpload(this.strOrdner + "optemp.TVN", "op" + Int.PalNullen(this.nMVArztNrX, 4) + ".TVN", this.strGUIDAlt))) 
									{
										Sal.MessageBox("Datei kann nicht hochgeladen werden !", "Fehler !!", (Sys.MB_Ok | Sys.MB_IconAsterisk));
										break;
									}
									Int.PalLog("op" + Int.PalNullen(this.nMVArztNrX, 4) + ".TVN UP!");
								}
								this.bOK = Var.hFile.Open(this.strOrdner + "optemp.TVN", Sys.OF_Delete);
								this.bOK = Var.hFile.Open(this.strOrdner + "optemp.TVN", (Sys.OF_Create | Sys.OF_Write));
								if (this.bOK) 
								{
								}
								else
								{
									Sal.MessageBox("Datei kann nicht erstellt werden !", "Fehler !!", (Sys.MB_Ok | Sys.MB_IconAsterisk));
									break;
								}
								this.strGUIDAlt = this.strGUID;
								this.nMVArztNrX = this.nMVArztNr;
							}
							Int.SqlExecut(this.hSqlMahn2, @"SELECT rkhalternr, sum(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins), max(rkmahnstufe)
INTO :dlgMahnVor.nMVHalterNr, :dlgMahnVor.nMVDMRest, :dlgMahnVor.nMVMS
FROM rk, a
WHERE rkkzzahl<2 AND rkdeaktiv IS NULL AND (rkarztnr=aarztnr or rkarztnr=anr2) AND aarztnr = :dlgMahnVor.nMVArztNr
GROUP BY 1");
							this.nFetch2 = this.hSqlMahn2.FetchNext();
							while (this.nFetch2 != Sys.FETCH_EOF) 
							{
								Var.hFile.PutString(Int.PalNullen(this.nMVHalterNr, 5) + " " + Int.PalStrNumDecPoint(this.nMVDMRest, 10, 2) + " " + Int.PalStrNumDecPoint(this.nMVMS, 2, 0));
								this.SetStatusBarText("OP -> Internet: " + this.nMVArztNr.ToString(0) + "/H" + this.nMVHalterNr.ToString(0));
								this.nFetch2 = this.hSqlMahn2.FetchNext();
							}
							this.nFetch = this.hSqlMahn.FetchNext();
						}
						this.hSqlMahn.Commit();
						this.hSqlMahn2.Disconnect();
						Var.hFile.Close();
						if (this.strGUIDAlt != "") 
						{
							if (!(this.PalAbrUpload(this.strOrdner + "optemp.TVN", "op" + Int.PalNullen(this.nMVArztNrX, 4) + ".TVN", this.strGUIDAlt))) 
							{
							}
						}
						this.bOK = Var.hFile.Open(this.strOrdner + "optemp.TVN", Sys.OF_Delete);
						this.axFTP.Close();
						Sal.WaitCursor(false);
					}

					// Set strSelect = 'select rkarztnr,rkhalternr,rkrechnr,hname1, hfaelltg, akzpraxart, anr2,
					// rkrechdat,minr, rkmahnltzt, @isna(rkmahnltzt), rkteilzdat, @isna(rkteilzdat),
					// rkmahnstufe, (rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn)
					// INTO :dlgMahnVor.nMVArztNr, :dlgMahnVor.nMVHalterNr, :dlgMahnVor.nMVRechNr, :dlgMahnVor.strMVName, :dlgMahnVor.nFaellTg, :dlgMahnVor.nMVKZPraxArt, :dlgMahnVor.nMVArztNr2,
					// :dlgMahnVor.dtMVRechDat, :dlgMahnVor.nMVMI, :dlgMahnVor.dtMVMahnDat, :dlgMahnVor.nMVMahnLeer, :dlgMahnVor.dtMVTeilzDat, :dlgMahnVor.nMVTeilzLeer,
					// :dlgMahnVor.nMVMS, :dlgMahnVor.nMVDMRest
					// from rk,h,mi,a
					// WHERE rkarztnr BETWEEN :dlgMahnVor.dfvon and :dlgMahnVor.dfbis
					// and rkarztnr NOT IN (' || dfNicht || ')
					// and rkrechnr<999990
					// and (rkmahnstufe<3 Or rkmahnstufe is null) and rkkzzahl<2
					// and (rkmahnsperr=0 Or rkmahnsperr is NULL)
					// and (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn)>akleinbetrag
					// and rkarztnr=harztnr and rkhalternr=hhalternr and hmahnint=minr
					// and rkarztnr=aarztnr
					// ORDER BY rkarztnr,rkhalternr'
					// 30.09.08 F410 MK + and rkfaelldat < :dlgMahnVor.dfMahnDat
					// 17.08.10 OTÃ„457 + MahnSperrBis
					// 27.06.14 F2081
					// Set strSelect = 'select rkarztnr,rkhalternr,rkrechnr, akzpraxart, anr2,
					// rkrechdat, rkmahnltzt, @isna(rkmahnltzt), rkteilzdat, @isna(rkteilzdat),
					// rkmahnstufe, (rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn), (rkdmmahn-rkzamahn), rkmahnsperrbis,
					// rkfaelldat, (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn), (rkdmleis+rkdmarzn)
					// INTO :dlgMahnVor.nMVArztNr, :dlgMahnVor.nMVHalterNr, :dlgMahnVor.nMVRechNr, :dlgMahnVor.nMVKZPraxArt, :dlgMahnVor.nMVArztNr2,
					// :dlgMahnVor.dtMVRechDat, :dlgMahnVor.dtMVMahnDat, :dlgMahnVor.nMVMahnLeer, :dlgMahnVor.dtMVTeilzDat, :dlgMahnVor.nMVTeilzLeer,
					// :dlgMahnVor.nMVMS, :dlgMahnVor.nMVDMRest, :dlgMahnVor.nMVDMMahnZins, :dlgMahnVor.dtMVMahnSperrBis,
					// :dlgMahnVor.dtZIRechDat, :dlgMahnVor.nZIRechGes, :dlgMahnVor.nMVHF
					// from rk,h,a
					// WHERE ((rkarztnr BETWEEN ' || SalNumberToStrX(dfvon,0) || ' and ' || SalNumberToStrX(dfbis,0) || '
					// and rkarztnr NOT IN (' || dfNicht || ') )
					// OR rkarztnr IN (' || dfZusatz || ') )
					// and rkrechnr < 999990
					// and (rkmahnstufe<3 Or rkmahnstufe is null) and rkkzzahl<2
					// and (rkmahnsperr=0 Or rkmahnsperr is NULL)
					// and (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn)>akleinbetrag
					// and hsperrdatum IS NULL
					// and rkfaelldat < :dlgMahnVor.dfMahnDat
					// and rkarztnr=aarztnr
					// and rkarztnr=harztnr and rkhalternr=hhalternr
					// ORDER BY rkarztnr,rkhalternr'
					// 17.02.17 Ã„1504 + Zahlungserinnerungen
					this.strSelect = @"select rkarztnr,rkhalternr,rkrechnr, akzpraxart, anr2, azahlerinn, azefrist, azetext,
rkrechdat, rkmahnltzt, @isna(rkmahnltzt), rkteilzdat, @isna(rkteilzdat),
rkmahnstufe, (rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn), (rkdmmahn-rkzamahn), rkmahnsperrbis,
rkfaelldat, (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn), (rkdmleis+rkdmarzn)
INTO :dlgMahnVor.nMVArztNr, :dlgMahnVor.nMVHalterNr, :dlgMahnVor.nMVRechNr, :dlgMahnVor.nMVKZPraxArt, :dlgMahnVor.nMVArztNr2,
:dlgMahnVor.nZahlErinn, :dlgMahnVor.nZEFrist, :dlgMahnVor.lsZEText,
:dlgMahnVor.dtMVRechDat, :dlgMahnVor.dtMVMahnDat, :dlgMahnVor.nMVMahnLeer, :dlgMahnVor.dtMVTeilzDat, :dlgMahnVor.nMVTeilzLeer,
:dlgMahnVor.nMVMS, :dlgMahnVor.nMVDMRest, :dlgMahnVor.nMVDMMahnZins, :dlgMahnVor.dtMVMahnSperrBis,
:dlgMahnVor.dtZIRechDat, :dlgMahnVor.nZIRechGes, :dlgMahnVor.nMVHF
from rk,h,a
WHERE ((rkarztnr BETWEEN " + this.dfvon.Number.ToString(0) + " and " + this.dfbis.Number.ToString(0) + "";
					if (this.dfNicht.Text != "0") 
					{
						this.strSelect = this.strSelect + @"
and rkarztnr NOT IN (" + this.dfNicht.Text + ") ";
					}
					this.strSelect = this.strSelect + ") ";
					if (this.dfZusatz.Text != "0") 
					{
						this.strSelect = this.strSelect + @"
OR rkarztnr IN (" + this.dfZusatz.Text + ") ";
					}
					this.strSelect = this.strSelect + ") ";
					// 19.07.21
					if (this.rbFOnur.Checked) 
					{
						this.strSelect = this.strSelect + " AND (@LEFT(hort,2) IN (\'40\',\'41\', \'42\', \'44\', \'45\', \'50\', \'51\', \'52\', \'53\', \'54\', \'58\' ) AND hland = \'DE\') ";
					}
					else if (this.rbFOohne.Checked) 
					{
						this.strSelect = this.strSelect + " AND (@LEFT(hort,2) NOT IN (\'40\',\'41\', \'42\', \'44\', \'45\', \'50\', \'51\', \'52\', \'53\', \'54\', \'58\'  ) OR hland <> \'DE\') ";
					}
					else
					{
					}
					// 17.01.18 Ã„1684 raus: and (rkmahnsperr=0 Or rkmahnsperr IS NULL)
					this.strSelect = this.strSelect + @"and rkrechnr < 999990
and (rkmahnstufe<3 Or rkmahnstufe is null) and rkkzzahl<2
and (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn)>akleinbetrag
and hsperrdatum IS NULL AND rkdeaktiv IS NULL AND hdeaktiv IS NULL
and rkfaelldat < :dlgMahnVor.dfMahnDat.Value
and rkarztnr=aarztnr
and rkarztnr=harztnr and rkhalternr=hhalternr
ORDER BY rkarztnr,rkhalternr";
				}
				this.bOK = Int.SqlHandleExec(this.hSqlMahn, this.strSelect, "Erstellen Mahnvorschlag", ref Var.nErr) == Sys.IDOK;
				Sal.WaitCursor(true);
				if (this.bOK) 
				{
					// 06.11.18 Ã„1806 + mvnr
					this.nMVArztAlt = 0;
					this.nMVHalterAlt = 0;

					this.nFetch = this.hSqlMahn.FetchNext();
					this.nCount = 0;
					while (this.nFetch != Sys.FETCH_EOF) 
					{
						this.SetStatusBarText("Arzt-Nr.: " + this.nMVArztNr.ToString(0));
						// If cbRaten
						// Set dtBasisDat = dtMVRatDat
						// 02.02.01		L + A
						// If nMVArztNr2 != 0 And nMVArztNr2 != NUMBER_Null And nMVArztNr2 != nMVArztNr
						// Call SqlImmedSel('SELECT max(rkteilzdat), min(@isna(rkteilzdat))  INTO :dlgMahnVor.dtMVTeilzDat2, :dlgMahnVor.nMVTeilzLeer2
						// FROM rk WHERE rkarztnr = :dlgMahnVor.nMVArztNr2 AND rkhalternr = :dlgMahnVor.nMVHalterNr')
						// If nMVTeilzLeer2 = 0
						// If dtMVTeilzDat2 > dtMVTeilzDat Or dtMVTeilzDat = DATETIME_Null
						// Set dtMVTeilzDat = dtMVTeilzDat2
						// Set nMVTeilzLeer = 0
						// 14.12.00
						// If nMVTeilzLeer = 0
						// If dtMVRatDat < dtMVTeilzDat
						// Set dtBasisDat = dtMVTeilzDat
						// If nMVKZPraxArt = 0
						// Set nMVArztNr2 = nMVArztNr
						// Set strMVName = SalStrLeftX(strMVName,20)
						// 19.04.02  nicht RaZa-Mahnen, wenn RaZa-Mahnung in den letzten 21 Tagen gewesen.
						// Set dtMVRaZaMaDat = DATETIME_Null
						// Call SqlImmedSel('SELECT max(akdatum) INTO :dlgMahnVor.dtMVRaZaMaDat FROM ak
						// WHERE aktyp = \'MG\' and aktypdetail LIKE \'Rat%\'
						// AND akhalternr=:dlgMahnVor.nMVHalterNr
						// and ' || PalArztNr('ak', nMVArztNr, nMVArztNr2))
						// If dtMVRaZaMaDat = DATETIME_Null Or dtMVRaZaMaDat < dfMahnDat-21
						// 15.11.99 lt. H. Sasse und Fr. Seil von 21 auf 5 Tage geÃ¤ndert.
						// 23.11.15 Ã„1286 + mvzahleing
						// If dfMahnDat > dtBasisDat + 5 and dfZahlEing > dtBasisDat + 5
						// 25.10.00 nMVArztNr -> nMVArztNrX, da falsche Arztnr bei L+A in MV gekommen ist.
						// 18.06.09 OTÃ„247 and rkmahnstufe<4
						// Call SqlImmedSel('SELECT min(rkrechdat), min(rkrechnr), max(rkrechnr), sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
						// from rk into  :dlgMahnVor.dtMVRechDat, :dlgMahnVor.nMVRechNr, :dlgMahnVor.nMVRechNrMax, :dlgMahnVor.nMVDMRest
						// WHERE rkhalternr=:dlgMahnVor.nMVHalterNr
						// and ' || PalArztNr('rk', nMVArztNr, nMVArztNr2) || '
						// and (rkmahnsperr=0 Or rkmahnsperr is NULL)
						// and rkkzzahl <2 and rkmahnstufe<4')
						// 10.12.04
						// If dfMahnDat > dtMVRechDat + 28
						// 23.11.00
						// Call SqlImmedSel('SELECT rkarztnr
						// from rk into  :dlgMahnVor.nMVArztNrX
						// WHERE rkhalternr=:dlgMahnVor.nMVHalterNr
						// and rkrechnr = :dlgMahnVor.nMVRechNr
						// and ' || PalArztNr('rk', nMVArztNr, nMVArztNr2) )
						// If nMVDMRest != NUMBER_Null AND nMVDMRest != 0
						// 16.02.00
						// 17.06.08 A249 + If nMVRechNr >= 999990
						// If nMVRechNrMax >= 999990
						// Set nMG = 0
						// Else
						// Call SqlIstDa(' FROM mg WHERE mgarztnr = :dlgMahnVor.nMVArztNrX',bExists)
						// If bExists
						// Call SqlImmedSel('SELECT mgdm1  INTO
						// :dlgMahnVor.nMG
						// FROM  mg WHERE mgarztnr = :dlgMahnVor.nMVArztNrX')
						// Else
						// Call SqlImmedSel('SELECT mgdm1  INTO
						// :dlgMahnVor.nMG
						// FROM  mg WHERE mgarztnr = 0')
						// 23.11.15 Ã„1286 + mvzahleing
						// Call SqlImmedX('INSERT INTO MV
						// (mvarztnr, mvhalternr, mvrechnr, mvdmrest, mvname, mvdmmahngeb, mvmahndat, mvzahleing)
						// VALUES( :dlgMahnVor.nMVArztNrX, :dlgMahnVor.nMVHalterNr, :dlgMahnVor.nMVRechNr,
						// :dlgMahnVor.nMVDMRest, :dlgMahnVor.strMVName, :dlgMahnVor.nMG, :dlgMahnVor.dfMahnDat, :dlgMahnVor.dfZahlEing )')
						// 06.11.18 Ã„1806 +  And (nMVArztNr != nMVArztAlt or nMVHalterNr != nMVHalterAlt)
						if (!(this.cbAuftrKart.Checked) && (this.nMVArztNr != this.nMVArztAlt || this.nMVHalterNr != this.nMVHalterAlt)) 
						{
							Int.SqlImmedSel(@"select hti || hvn || ' ' || hnn, hfaelltg, minr, HPROZ1,HPROZ2,HPROZ3
INTO :dlgMahnVor.strMVName, :dlgMahnVor.nFaellTg, :dlgMahnVor.nMVMI,
:dlgMahnVor.nZIProz[1], :dlgMahnVor.nZIProz[2], :dlgMahnVor.nZIProz[3]
from h,mi
WHERE harztnr = :dlgMahnVor.nMVArztNr
and hhalternr = :dlgMahnVor.nMVHalterNr AND hdeaktiv IS NULL
and hmahnint=minr");
						}
						// 15.04.10 OTÃ„135 25.06.10 OTÃ„434 + rzerfdat > SYSDATE - 14 DAYS
						// 29.10.10 OTF782 rzkuenddat IS NULL -->> (rzkuenddat IS NULL OR rzkuenddat > SYSDATE - 14 DAYS)
						Int.SqlIstDa(@"FROM rz, rzp WHERE rznr=rzpnr AND rzdeaktiv IS NULL AND (rzaktivdat IS NOT NULL or rzerfdat > SYSDATE - 14 DAYS) AND (rzkuenddat IS NULL OR rzkuenddat > SYSDATE - 14 DAYS) AND rzparztnr = :dlgMahnVor.nMVArztNr AND
rzphalternr
= :dlgMahnVor.nMVHalterNr AND
rzprechnr =
:dlgMahnVor.nMVRechNr", ref this.bDa);

						if (this.bDa) 
						{
							// Call SalMessageBox('','', MB_Ok)
						}
						else
						{
							// 27.04.12 Ã„733
							Int.SqlIstDa("FROM bezs WHERE " + Int.PalArztNr("bezs", this.nMVArztNr, this.nMVArztNr2) + " AND bezshalternr = :dlgMahnVor.nMVHalterNr AND bezsrechnr IS NULL", ref this.bDa);

							if (this.bDa) 
							{
								Int.PalLog("kein MV da Iben " + Int.PalStrNum(this.nMVArztNr, 4, 0));
							}
							else
							{
								this.dtBasisDat = this.dtMVRechDat;
								if (this.nMVKZPraxArt == 0) 
								{
									this.nMVArztNr2 = this.nMVArztNr;
								}
								this.strMVName = this.strMVName.Left(20);
								if (this.nMVMahnLeer == 0) 
								{
									this.dtBasisDat = this.dtMVMahnDat;
								}
								if (this.nMVTeilzLeer == 0) 
								{
									// 19.06.12 Ã„763
									// If dtMVMahnDat < dtMVTeilzDat
									// Set dtBasisDat = dtMVTeilzDat
									this.dtMVTeilzDat2 = SalDateTime.Current - 31;
									Int.SqlImmedSel(@"SELECT sum(zadm) INTO :dlgMahnVor.nZaDM FROM za
WHERE zaarztnr = :dlgMahnVor.nMVArztNr AND zahalternr = :dlgMahnVor.nMVHalterNr AND zarechnr = :dlgMahnVor.nMVRechNr
AND zabuchdat >= :dlgMahnVor.dtMVTeilzDat2 AND zakz<=3 AND zadeaktiv IS NULL");
									if (this.nZaDM != SalNumber.Null && this.nZaDM < (this.nMVHF / 2)) 
									{
										// 17.09.12 F1408 auskommentiert
										// Call PalLog( 'MV aufgen. wg 1/2 Zg.:' || PalStrNum( nMVArztNr, 4, 0 ) || '/H' || PalStrNum( nMVHalterNr, 5, 0 ) )
									}
									else
									{
										if (this.dtMVMahnDat < this.dtMVTeilzDat) 
										{
											this.dtBasisDat = this.dtMVTeilzDat;
										}
									}

								}
								// 17.08.10 OTÃ„457 + MahnSperrBis
								if (this.dtMVMahnSperrBis == SalDateTime.Null) 
								{
									this.dtMVMahnSperrBis = this.dtBasisDat;
								}
								// 17.02.17 Ã„1504 + Zahlungserinnerungen
								this.bZahlErinn = false;
								if (this.nZahlErinn == 1) 
								{
									Int.SqlIstDa("FROM ma WHERE maarztnr = :dlgMahnVor.nMVArztNr AND marechnr = :dlgMahnVor.nMVRechNr AND mams=0 AND madeaktiv IS NULL", ref this.bZahlErinn);
									if (this.bZahlErinn) 
									{
										this.nZahlErinn = 0;
										Int.SqlImmedSel(@"SELECT madatum INTO :dlgMahnVor.dtZEDatum
FROM ma WHERE maarztnr = :dlgMahnVor.nMVArztNr AND marechnr = :dlgMahnVor.nMVRechNr AND mams=0");
										this.dtBasisDat = this.dtZEDatum;
									}
								}
								if (this.nZahlErinn == 1 && this.nMVMS == 0) 
								{
									if (this.dfMahnDat.Value > this.dtBasisDat + this.nZEFrist && this.dfMahnDat.Value > this.dtMVRechDat + this.nFaellTg && this.dfMahnDat.Value > this.dtMVMahnSperrBis && this.dfZahlEing.DateTime > this.dtBasisDat + this.nZEFrist && this.dfZahlEing.DateTime > 
									this.dtMVRechDat + this.nFaellTg && this.dfZahlEing.DateTime > this.dtMVMahnSperrBis) 
									{
										this.nDiverse = 0;

										// 23.11.15 Ã„1286 + mvzahleing
										// 06.11.18 Ã„1806 + mvnr
										if (!(this.cbAuftrKart.Checked) && (this.nMVArztNr != this.nMVArztAlt || this.nMVHalterNr != this.nMVHalterAlt)) 
										{
											this.nMahnNr = Int.PalGetNewMahnNr();
											this.nMVArztAlt = this.nMVArztNr;
											this.nMVHalterAlt = this.nMVHalterNr;
										}
										Int.SqlImmedX(@"INSERT INTO MV
(mvarztnr, mvhalternr, mvrechnr, mvrechdat, mvms, mvdmrest, mvname, mvdmmahngeb, mvdmzins, mvzahleing, mvnr)
VALUES( :dlgMahnVor.nMVArztNr, :dlgMahnVor.nMVHalterNr,
:dlgMahnVor.nMVRechNr, :dlgMahnVor.dtMVRechDat, :dlgMahnVor.nDiverse,
:dlgMahnVor.nMVDMRest, :dlgMahnVor.strMVName, 0, 0, :dlgMahnVor.dfZahlEing, :dlgMahnVor.nMahnNr)");
										// 04.08.10 OTÃ„444
										if ((this.nMVDMRest - this.nMVDMMahnZins) < 5) 
										{
											this.nCount = this.nCount + 1;
										}
									}
								}
								else
								{

									if (this.nMVMI != this.nMVMIalt) 
									{
										Int.SqlImmedSel(@"SELECT mitg1, mitg2, mitg3, mitg4
INTO :dlgMahnVor.nMI[1], :dlgMahnVor.nMI[2], :dlgMahnVor.nMI[3], :dlgMahnVor.nMI[4]
FROM MI WHERE minr = :dlgMahnVor.nMVMI");
									}
									this.nMVMIalt = this.nMVMI;
									// ErhÃ¶he die Mahnstufe, wenn Tage = 0 / um max. 3 Mahnungen
									if (this.nMI[this.nMVMS + 1] == 0) 
									{
										this.nMVMS = this.nMVMS + 1;
									}
									if (this.nMI[this.nMVMS + 1] == 0) 
									{
										this.nMVMS = this.nMVMS + 1;
									}
									if (this.nMI[this.nMVMS + 1] == 0) 
									{
										this.nMVMS = this.nMVMS + 1;
									}

									if (this.nMVMS > 3) 
									{
										this.nMVMS = 3;
									}
									// 02.12.08 F430 dfMahnDat > dtBasisDat + nFaellTg ---> dfMahnDat > dtMVRechDat + nFaellTg
									// 17.08.10 OTÃ„457  And dfMahnDat>dtMVMahnSperrBis
									// 23.11.15 Ã„1286 + mvzahleing
									if (this.dfMahnDat.Value > this.dtBasisDat + this.nMI[this.nMVMS + 1] && this.dfMahnDat.Value > this.dtMVRechDat + this.nFaellTg && this.dfMahnDat.Value > this.dtMVMahnSperrBis && this.dfZahlEing.DateTime > this.dtBasisDat + this.nMI[this.nMVMS + 1] && 
									this.dfZahlEing.DateTime > this.dtMVRechDat + this.nFaellTg && this.dfZahlEing.DateTime > this.dtMVMahnSperrBis) 
									{
										this.nDiverse = this.nMVMS + 1;
										if (this.cbAuftrKart.Checked && this.nDiverse == 4) 
										{
											// 23.11.15 Ã„1286 + mvzahleing
											Int.SqlImmedX(@"INSERT INTO MV
(mvarztnr, mvhalternr, mvrechnr, mvrechdat, mvms, mvdmrest, mvname, mvdmmahngeb, mvdmzins, mvzahleing)
VALUES( :dlgMahnVor.nMVArztNr, :dlgMahnVor.nMVHalterNr,
:dlgMahnVor.nMVRechNr, :dlgMahnVor.dtMVRechDat, :dlgMahnVor.nDiverse,
:dlgMahnVor.nMVDMRest, :dlgMahnVor.strMVName,
:dlgMahnVor.nMVDMMahn, :dlgMahnVor.nMVDMZins, :dlgMahnVor.dfZahlEing)");
										}
										if (!(this.cbAuftrKart.Checked) && this.nDiverse < 4) 
										{
											// RatenZahler ? raus: 01.02.16 Ã„1330
											// Call SqlIstDa('from R where
											// ' || PalArztNr('r', nMVArztNr, nMVArztNr2) || '
											// AND rhalternr = :dlgMahnVor.nMVHalterNr', bOK)
											// If Not bOK
											// Else
											// Call PalLog( 'nicht in MV, da alter RZ:' || PalStrNum( nMVArztNr, 4, 0 ) || '/H' || PalStrNum( nMVHalterNr, 5, 0 ) )
											// nein
											// 04.04.11 F889
											// Call SqlImmedSel('SELECT rkfaelldat, (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn)
											// INTO :frmSpeMa.dtZIRechDat, :frmSpeMa.nZIRechGes
											// FROM rk WHERE rkarztnr = :nArzt AND rkrechnr = :frmSpeMa.nRechNr')
											this.dtZIZahlDat = this.dfMahnDat.Value;
											this.nZITage = this.dtZIZahlDat - this.dtZIRechDat;
											this.nZinsen = (this.nZIRechGes * (this.nZITage / 360) * this.nZIProz[this.nMVMS + 1]).Round() / 100;
											// If nZinsen > 0
											// Call SalStatusSetText( hWndForm, 'Zinsen' )
											Int.SqlIstDa(" FROM mg WHERE mgarztnr = :dlgMahnVor.nMVArztNr", ref Var.bExists);
											if (Var.bExists) 
											{
												// 24.01.11 F1058
												// Call SqlImmedSel('SELECT mgdm1  INTO
												// :dlgMahnVor.nMG
												// FROM  mg WHERE mgarztnr = :dlgMahnVor.nMVArztNr')
												Int.SqlImmedSel("SELECT mgdm" + this.nDiverse.ToString(0) + @"  INTO
:dlgMahnVor.nMG
FROM  mg WHERE mgarztnr = :dlgMahnVor.nMVArztNr");
											}
											else
											{
												// 24.01.11 F1058
												// Call SqlImmedSel('SELECT mgdm1  INTO
												// :dlgMahnVor.nMG
												// FROM  mg WHERE mgarztnr = 0')
												Int.SqlImmedSel("SELECT mgdm" + this.nDiverse.ToString(0) + @"  INTO
:dlgMahnVor.nMG
FROM  mg WHERE mgarztnr = 0");
											}

											// 23.11.15 Ã„1286 + mvzahleing
											// 06.11.18 Ã„1806 + mvnr
											if (this.nMVArztNr != this.nMVArztAlt || this.nMVHalterNr != this.nMVHalterAlt) 
											{
												this.nMahnNr = Int.PalGetNewMahnNr();
												this.nMVArztAlt = this.nMVArztNr;
												this.nMVHalterAlt = this.nMVHalterNr;
											}
											Int.SqlImmedX(@"INSERT INTO MV
(mvarztnr, mvhalternr, mvrechnr, mvrechdat, mvms, mvdmrest, mvname, mvdmmahngeb, mvdmzins, mvzahleing, mvnr)
VALUES( :dlgMahnVor.nMVArztNr, :dlgMahnVor.nMVHalterNr,
:dlgMahnVor.nMVRechNr, :dlgMahnVor.dtMVRechDat, :dlgMahnVor.nDiverse,
:dlgMahnVor.nMVDMRest, :dlgMahnVor.strMVName, :dlgMahnVor.nMG, :dlgMahnVor.nZinsen, :dlgMahnVor.dfZahlEing, :dlgMahnVor.nMahnNr)");
											// 04.08.10 OTÃ„444
											if ((this.nMVDMRest - this.nMVDMMahnZins) < 5) 
											{
												this.nCount = this.nCount + 1;
											}
										}
									}
								}
							}
						}
						this.nFetch = this.hSqlMahn.FetchNext();
					}
					// 04.08.10 OTÃ„444
					if (this.nCount > 0) 
					{
						Sal.MessageBox(this.nCount.ToString(0) + " Halter hatten Forderungen unter â‚¬ 5,00 (ohne MahngebÃ¼hren)", "Information", (Sys.MB_Ok | Sys.MB_IconAsterisk));
					}
				}
				this.hSqlMahn.Commit();
				this.hSqlMahn.Disconnect();
			}
			// Call SalWaitCursor(FALSE)
			// Call SalStatusSetText(hWndForm,' ')
			// Call SalMessageBox( 'Mahnvorschlag wurde erstellt','Ok', MB_Ok)
			this.EndDialog(0);
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.DestroyWindow();
			#endregion
		}
		#endregion
	}
}
