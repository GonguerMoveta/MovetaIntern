// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// Erinnerungsliste
	/// </summary>
	/// <param name="nArztNr"></param>
	/// <param name="nHalterNr"></param>
	/// <param name="nRechNr"></param>
	public partial class frmEL : SalFormWindow
	{
		#region Window Parameters
		public SalNumber nArztNr;
		public SalNumber nHalterNr;
		public SalNumber nRechNr;
		#endregion
		
		#region Window Variables
		public SalSqlHandle hSqlEL = SalSqlHandle.Null;
		public SalSqlHandle hSqlELUpd = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalString strN = "";
		public SalBoolean bEL = false;
		public SalString strUser = "";
		public SalString strErledigt = "";
		public SalNumber nArztNr2 = 0;
		public SalBoolean bELAend = false;
		public SalNumber nELOP = 0;
		public SalDateTime dtErlDatum = SalDateTime.Null;
		public SalString strAbtlg = "";
		public MTblPrintParams PrintParams = new MTblPrintParams();
		public SalString strDevice = "";
		public SalNumber nResult = 0;
		public SalNumber nAnz = 0;
		public SalNumber nOff = 0;
		public SalArray<SalString> strPrinters = new SalArray<SalString>();
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmEL(SalNumber nArztNr, SalNumber nHalterNr, SalNumber nRechNr)
		{
			// Assign global reference.
			App.frmEL = this;
			// Window Parameters initialization.
			this.nArztNr = nArztNr;
			this.nHalterNr = nHalterNr;
			this.nRechNr = nRechNr;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmEL CreateWindow(Control owner, SalNumber nArztNr, SalNumber nHalterNr, SalNumber nRechNr)
		{
			frmEL frm = new frmEL(nArztNr, nHalterNr, nRechNr);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmEL FromHandle(SalWindowHandle handle)
		{
			return ((frmEL)SalWindow.FromHandle(handle, typeof(frmEL)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmEL WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmEL_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmEL_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmEL_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmEL_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.DisableWindow(App.frmMain.pbEL);
			// 24.11.99
			if (this.nArztNr == SalNumber.Null) 
			{
				this.nArztNr = 0;
			}
			Int.SqlImmedSel("SELECT ANR2 INTO :frmEL.nArztNr2 FROM A WHERE AARZTNR = :frmEL.nArztNr");
			if (this.nArztNr2 == SalNumber.Null || this.nArztNr2 == 0) 
			{
				this.nArztNr2 = this.nArztNr;
			}
			if (this.nHalterNr == SalNumber.Null) 
			{
				this.nHalterNr = 0;
			}
			if (this.nRechNr == SalNumber.Null) 
			{
				this.nRechNr = 0;
			}

			Int.SqlConnection(ref this.hSqlEL);
			Int.SqlConnection(ref this.hSqlELUpd);
			this.strUser = Var.strBNZei;
			// Set strUser = SalStrLeftX(strUser, 2)
			this.strN = "N";
			// 04.02.00 elzeichen = :strUser AND  rausgenommen
			this.strSelect = @"SELECT elzeichen, elarztnr, elhalternr, elrechnr, eltext,
	eldatum, elabtlg, elerledigt, elerldatum, ROWID FROM el
INTO :tblEL.colsVon, :tblEL.colnArztNr, :tblEL.colnHalterNr,
:tblEL.colnRechNr, :tblEL.colsBemerk, :tblEL.coldtDatum,
:tblEL.colsAbtlg, :tblEL.colsErl, :tblEL.coldtErlDatum, :tblEL.colsROWID
WHERE elerledigt = 'N'";
			if (this.nArztNr > 0) 
			{
				if (Sys.IDYES == Sal.MessageBox("Liste nur für " + Int.PalStrNum(this.nArztNr, 4, 0) + "/" + Int.PalStrNum(this.nHalterNr, 5, 0) + "/" + Int.PalStrNum(this.nRechNr, 6, 0) + " anzeigen ?", "?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					this.strSelect = this.strSelect + " AND " + Int.PalArztNr("el", this.nArztNr, this.nArztNr2);
					if (this.nHalterNr > 0) 
					{
						this.strSelect = this.strSelect + " AND elhalternr = :frmEL.nHalterNr";
					}
					if (this.nRechNr > 0) 
					{
						this.strSelect = this.strSelect + " AND elrechnr = :frmEL.nRechNr";
					}
				}
			}
			this.strSelect = this.strSelect + " order by elarztnr, elhalternr, elrechnr";
			this.tblEL.Populate(this.hSqlEL, this.strSelect, Sys.TBL_FillAll);
			this.dfVon.Clear();
			this.dfArztNr.Clear();
			this.dfHalterNr.Clear();
			this.dfRechNr.Clear();
			this.dfText.Clear();
			this.dfROWID.Clear();
			this.dfVon.Text = Var.strBNZei;
			this.dfArztNr.Number = this.nArztNr;
			this.dfHalterNr.Number = this.nHalterNr;
			this.dfRechNr.Number = this.nRechNr;
			this.dfDatum.Value = SalDateTime.Current;
			this.cbErledigt.Checked = false;
			Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn,hland || ' ' || hort,hname2,hstr
into :frmEL.dfSHalterName, :frmEL.dfSHalterOrt, :frmEL.dfSHalterName2, :frmEL.dfSHalterStr
from H where hhalternr=:frmEL.dfHalterNr and harztnr=:frmEL.dfArztNr AND hdeaktiv IS NULL");
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmEL_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlEL.Disconnect();
			this.hSqlELUpd.Disconnect();
			Sal.EnableWindow(App.frmMain.pbEL);
			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn,hland || ' ' || hort,hname2,hstr
into :frmEL.dfSHalterName, :frmEL.dfSHalterOrt, :frmEL.dfSHalterName2, :frmEL.dfSHalterStr
from H where hhalternr=:frmEL.dfHalterNr and harztnr=:frmEL.dfArztNr AND hdeaktiv IS NULL");
			#endregion
		}
		
		/// <summary>
		/// cbnurZei WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbnurZei_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbnurZei_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbnurZei_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			if (this.cbnurZei.Checked) 
			{
				this.strSelect = @"SELECT elzeichen, elarztnr, elhalternr, elrechnr, eltext,
	eldatum, elabtlg, elerledigt, elerldatum, ROWID FROM el
INTO :tblEL.colsVon, :tblEL.colnArztNr, :tblEL.colnHalterNr,
:tblEL.colnRechNr, :tblEL.colsBemerk, :tblEL.coldtDatum,
:tblEL.colsAbtlg, :tblEL.colsErl, :tblEL.coldtErlDatum, :tblEL.colsROWID
WHERE elzeichen = :dfVon and elerledigt = 'N'";
				if (this.nArztNr > 0) 
				{
					if (Sys.IDYES == Sal.MessageBox("Liste nur für " + Int.PalStrNum(this.nArztNr, 4, 0) + "/" + Int.PalStrNum(this.nHalterNr, 5, 0) + "/" + Int.PalStrNum(this.nRechNr, 6, 0) + " anzeigen ?", "?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
					{
						this.strSelect = this.strSelect + " AND " + Int.PalArztNr("el", this.nArztNr, this.nArztNr2);
						if (this.nHalterNr > 0) 
						{
							this.strSelect = this.strSelect + " AND elhalternr = :frmEL.nHalterNr";
						}
						if (this.nRechNr > 0) 
						{
							this.strSelect = this.strSelect + " AND elrechnr = :frmEL.nRechNr";
						}
					}
				}
				this.strSelect = this.strSelect + " order by elarztnr, elhalternr, elrechnr";
				this.tblEL.Populate(this.hSqlEL, this.strSelect, Sys.TBL_FillAll);
			}
			else
			{
				this.strSelect = @"SELECT elzeichen, elarztnr, elhalternr, elrechnr, eltext,
	eldatum, elabtlg, elerledigt, elerldatum, ROWID FROM el
INTO :tblEL.colsVon, :tblEL.colnArztNr, :tblEL.colnHalterNr,
:tblEL.colnRechNr, :tblEL.colsBemerk, :tblEL.coldtDatum,
:tblEL.colsAbtlg, :tblEL.colsErl, :tblEL.coldtErlDatum, :tblEL.colsROWID
WHERE elerledigt = 'N'";
				if (this.nArztNr > 0) 
				{
					if (Sys.IDYES == Sal.MessageBox("Liste nur für " + Int.PalStrNum(this.nArztNr, 4, 0) + "/" + Int.PalStrNum(this.nHalterNr, 5, 0) + "/" + Int.PalStrNum(this.nRechNr, 6, 0) + " anzeigen ?", "?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
					{
						this.strSelect = this.strSelect + " AND " + Int.PalArztNr("el", this.nArztNr, this.nArztNr2);
						if (this.nHalterNr > 0) 
						{
							this.strSelect = this.strSelect + " AND elhalternr = :frmEL.nHalterNr";
						}
						if (this.nRechNr > 0) 
						{
							this.strSelect = this.strSelect + " AND elrechnr = :frmEL.nRechNr";
						}
					}
				}
				this.strSelect = this.strSelect + " order by elarztnr, elhalternr, elrechnr";
				this.tblEL.Populate(this.hSqlEL, this.strSelect, Sys.TBL_FillAll);
			}
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// pbNeu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeu_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfVon.Clear();
			this.dfArztNr.Clear();
			this.dfHalterNr.Clear();
			this.dfRechNr.Clear();
			this.dfText.Clear();
			this.dfROWID.Clear();
			this.dfVon.Text = Var.strBNZei;
			this.dfArztNr.Number = this.nArztNr;
			this.dfHalterNr.Number = this.nHalterNr;
			this.dfRechNr.Number = this.nRechNr;
			this.dfDatum.Value = SalDateTime.Current;
			this.cbErledigt.Checked = false;
			#endregion
		}
		
		/// <summary>
		/// pbSpeichern WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSpeichern_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// On SAM_Click
				
				// If cbErledigt = TRUE
				
				// Set strErledigt='J'
				
				// 25.11.99
				
				// #26 nicht nur bei RA fragen
				
				// If strAbtlg = 'RA'
				
				// 15.03.01 plus ", rkteilzdat = SYSDATE" (Eilers)
				
				// If IDYES = SalMessageBox('Soll für ' ||
				
				// PalStrNum(dfArztNr, 4, 0) || '/' || PalStrNum( dfRechNr, 6,0) || '
				
				// Mahnsperre auf 0  und Teilzahlungsdatum auf
				
				// heute gesetzt werden ?','?', MB_YesNo|MB_IconQuestion)
				
				// If dfRechNr != NUMBER_Null And dfRechNr != 0
				
				// Call SqlImmedX('UPDATE RK SET
				
				// rkmahnsperr = 0, rkteilzdat = SYSDATE
				
				// WHERE rkarztnr  = :frmEL.dfArztNr AND rkrechnr  = :frmEL.dfRechNr')
				
				// Call PalLog('Mahnsperre 0 (EL): Rg.' || PalStrNum(dfArztNr, 4, 0) || '/' || PalStrNum( dfRechNr, 6,0))
				
				// Call SalMessageBox('Info geändert für Rg. ' || PalStrNum(dfArztNr,4,0) || '/' || PalStrNum(dfRechNr,6,0) ,'',MB_Ok)
				
				// Else
				
				// Call SalMessageBox('Rechnungsnr. fehlt für Infoänderung !' ,'Achtung',MB_Ok)
				
				// Else
				
				// Set strErledigt='N'
				
				// If SalIsNull(dfROWID)
				
				// Call SqlImmedX('
				
				// INSERT INTO el (elzeichen, elarztnr, elhalternr, elrechnr, eltext,
				
				// 	eldatum, elabtlg, elerledigt)
				
				// VALUES (:frmEL.dfVon, :frmEL.dfArztNr, :frmEL.dfHalterNr, :frmEL.dfRechNr, :frmEL.dfText,
				
				// :frmEL.dfDatum, NULL, :frmEL.strErledigt)')
				
				// Call SqlImmedX('COMMIT')
				
				// Else
				
				// Call SqlImmedX('
				
				// UPDATE el SET 	ELZEICHEN = :frmEL.dfVon,
				
				// 		ELARZTNR = :frmEL.dfArztNr,
				
				// 		ELHALTERNR = :frmEL.dfHalterNr,
				
				// 		ELRECHNR = :frmEL.dfRechNr,
				
				// 		ELTEXT = :frmEL.dfText,
				
				// 		ELDATUM = :frmEL.dfDatum,
				
				// 		ELERLEDIGT = :frmEL.strErledigt,
				
				// 		ELERLDATUM = :frmEL.dtErlDatum
				
				// WHERE ROWID = :frmEL.dfROWID')
				
				// Call SqlImmedX('COMMIT')
				
				// Call SalTblPopulate( tblEL,hSqlEL,strSelect,TBL_FillAll )
				
				// Call SalClearField(dfVon)
				
				// Call SalClearField(dfArztNr)
				
				// Call SalClearField(dfHalterNr)
				
				// Call SalClearField(dfRechNr)
				
				// Call SalClearField(dfText)
				
				// Call SalClearField(dfROWID)
				
				// Set dfVon = strBNZei
				
				// Set dfArztNr = nArztNr
				
				// Set dfHalterNr = nHalterNr
				
				// Set dfRechNr = nRechNr
				
				// Set dfDatum=SalDateCurrent()
				
				case Sys.SAM_Click:
					this.pbSpeichern_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSpeichern_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.cbErledigt.Checked == true) 
			{
				this.strErledigt = "J";
				// 25.11.99
				// #26 nicht nur bei RA fragen
				// If strAbtlg = 'RA'
				// 15.03.01 plus ", rkteilzdat = SYSDATE" (Eilers)
				// 02.05.11 Ä549
				// If IDYES = SalMessageBox('Soll für ' ||
				// PalStrNum(dfArztNr, 4, 0) || '/' || PalStrNum( dfRechNr, 6,0) || '
				// Mahnsperre auf 0 gesetzt werden ?
				// Gemahnt wird frühestens in 14 Tagen.','?', MB_YesNo|MB_IconQuestion)
				// If dfRechNr != NUMBER_Null And dfRechNr != 0
				// 17.08.10 OTÄ457 rkteilzdat = SYSDATE  -->> rkmahnsperrbis = SYSDATE + 14 DAYS
				// Call SqlImmedX('UPDATE RK SET
				// rkmahnsperr = 0, rkmahnsperrbis = SYSDATE + 14 DAYS
				// WHERE rkarztnr  = :frmEL.dfArztNr AND rkrechnr  = :frmEL.dfRechNr')
				// Call PalLog('Mahnsperre 0 (EL): Rg.' || PalStrNum(dfArztNr, 4, 0) || '/' || PalStrNum( dfRechNr, 6,0))
				// Call SalMessageBox('Info geändert für Rg. ' || PalStrNum(dfArztNr,4,0) || '/' || PalStrNum(dfRechNr,6,0) ,'',MB_Ok)
				// Else
				// Call SalMessageBox('Rechnungsnr. fehlt für Infoänderung !' ,'Achtung',MB_Ok)
				// 25.08.14 Ä1092 auch ArztNr2
				Int.SqlImmedSel("SELECT ANR2 INTO :frmEL.nArztNr2 FROM A WHERE AARZTNR = :frmEL.nArztNr");
				if (this.nArztNr2 == SalNumber.Null || this.nArztNr2 == 0) 
				{
					this.nArztNr2 = this.nArztNr;
				}
				// 17.01.18 Ä1684 rkmahnsperr = 0, raus
				// 03.04.23 Ä2093 14 -> 21
				Int.SqlImmedX(@"UPDATE RK SET
rkmahnsperrbis = SYSDATE + 21 DAYS
WHERE " + Int.PalArztNr("rk", this.dfArztNr.Number, this.nArztNr2) + " AND rkhalternr  = :frmEL.dfHalterNr AND rkkzzahl<2");

				Int.PalLog("rkmahnsperrbis (EL): H" + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0));
				Sal.MessageBox("21 Tage keine Mahnung für alle offenen Rechnungen des Halters" + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0), "Info", Sys.MB_Ok);

			}
			else
			{
				this.strErledigt = "N";
			}
			if (this.dfROWID.IsEmpty()) 
			{
				Int.SqlImmedX(@"
INSERT INTO el (elzeichen, elarztnr, elhalternr, elrechnr, eltext,
	eldatum, elabtlg, elerledigt)
VALUES (:frmEL.dfVon, :frmEL.dfArztNr, :frmEL.dfHalterNr, :frmEL.dfRechNr, :frmEL.dfText,
:frmEL.dfDatum.Value, NULL, :frmEL.strErledigt)");
				Int.SqlImmedX("COMMIT");
			}
			else
			{
				Int.SqlImmedX(@"
UPDATE el SET 	ELZEICHEN = :frmEL.dfVon,
		ELARZTNR = :frmEL.dfArztNr,
		ELHALTERNR = :frmEL.dfHalterNr,
		ELRECHNR = :frmEL.dfRechNr,
		ELTEXT = :frmEL.dfText,
		ELDATUM = :frmEL.dfDatum.Value,
		ELERLEDIGT = :frmEL.strErledigt,
		ELERLDATUM = :frmEL.dtErlDatum
WHERE ROWID = :frmEL.dfROWID");
				Int.SqlImmedX("COMMIT");
			}
			// 03.12.14
			this.tblEL.ResetTable();

			this.tblEL.Populate(this.hSqlEL, this.strSelect, Sys.TBL_FillAll);
			this.dfVon.Clear();
			this.dfArztNr.Clear();
			this.dfHalterNr.Clear();
			this.dfRechNr.Clear();
			this.dfText.Clear();
			this.dfROWID.Clear();
			this.dfVon.Text = Var.strBNZei;
			this.dfArztNr.Number = this.nArztNr;
			this.dfHalterNr.Number = this.nHalterNr;
			this.dfRechNr.Number = this.nRechNr;
			this.dfDatum.Value = SalDateTime.Current;
			#endregion
		}
		
		/// <summary>
		/// tblEL WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblEL_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblEL_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Click:
					this.tblEL_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblEL_OnSAM_RowHeaderClick(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblEL_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 25.06.13
			// Call MTblSubClass( hWndItem )
			// Call MTblSetAltRowBackColors( hWndItem, FALSE, COLOR_White, 0xFFFFA8 )
			Int.PalPrepareMTbl(this.tblEL, 0xffffa8);

			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblEL_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			Int.SqlImmedSel(@"SELECT elzeichen, elabtlg, elarztnr, elhalternr, elrechnr, eltext,
		eldatum, elerledigt, ROWID FROM el
		INTO :frmEL.dfVon, :frmEL.strAbtlg, :frmEL.dfArztNr, :frmEL.dfHalterNr, :frmEL.dfRechNr, :frmEL.dfText,
		:frmEL.dfDatum.Value, :frmEL.strErledigt, :frmEL.dfROWID
		WHERE ROWID = :frmEL.tblEL.colsROWID");

			Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn,hland || ' ' || hort,hname2,hstr
into :frmEL.dfSHalterName, :frmEL.dfSHalterOrt, :frmEL.dfSHalterName2, :frmEL.dfSHalterStr
from H where hhalternr=:frmEL.dfHalterNr and harztnr=:frmEL.dfArztNr AND hdeaktiv IS NULL");
			this.cbErledigt.Checked = this.strErledigt == "J";

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblEL_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			Int.SqlImmedSel(@"SELECT elzeichen, elabtlg, elarztnr, elhalternr, elrechnr, eltext,
		eldatum, elerledigt, ROWID FROM el
		INTO :frmEL.dfVon, :frmEL.strAbtlg, :frmEL.dfArztNr, :frmEL.dfHalterNr, :frmEL.dfRechNr, :frmEL.dfText,
		:frmEL.dfDatum.Value, :frmEL.strErledigt, :frmEL.dfROWID
		WHERE ROWID = :frmEL.tblEL.colsROWID");

			Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn,hland || ' ' || hort,hname2,hstr
into :frmEL.dfSHalterName, :frmEL.dfSHalterOrt, :frmEL.dfSHalterName2, :frmEL.dfSHalterStr
from H where hhalternr=:frmEL.dfHalterNr and harztnr=:frmEL.dfArztNr AND hdeaktiv IS NULL");
			this.cbErledigt.Checked = this.strErledigt == "J";

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// cbErledigt WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbErledigt_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbErledigt_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbErledigt_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.cbErledigt.Checked == true) 
			{
				this.strErledigt = "J";
				this.dtErlDatum = SalDateTime.Current;
			}
			else
			{
				this.strErledigt = "N";
			}
			#endregion
		}
		
		/// <summary>
		/// pbSuchen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSuchen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSuchen_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSuchen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// If Not SalIsWindowEnabled( frmMain.pbSuchen )
			// If SalDestroyWindow(frmRgSuchen)
			// Call SalCreateWindow(frmRgSuchen,hWndForm, dfArztNr, dfHalterNr, dfRechNr)
			App.frmRgSuchen.PalFuelle(this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRechNr.Number);
			#endregion
		}
		
		/// <summary>
		/// pbDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDruck_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDruck_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PrintParams.Init();
			this.PrintParams.DocName = "Erinnerungsliste";
			this.PrintParams.Orientation = MT.MTbl.MTP_OR_PORTRAIT;
			// Set strDevice = MTblPrintGetDefPrinterName(  )
			this.nResult = this.lbPrinters.GetListSelectedIndex();
			if (this.nResult == Sys.LB_Err) 
			{
				this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			}
			else
			{
				this.strDevice = this.lbPrinters.GetListItemText(this.nResult);
			}
			this.PrintParams.PrinterName = this.strDevice;
			// 07.11.13 F1760
			this.PrintParams.Language = MT.MTbl.MTP_LNG_GERMAN;

			MT.MTbl.Print(this.tblEL, this.PrintParams);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nAnz = MT.MTbl.PrintGetPrinterNames(this.strPrinters);
			this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			this.nOff = -1;
			this.nResult = 0;
			while (this.nResult < this.nAnz) 
			{
				this.lbPrinters.AddListItem(this.strPrinters[this.nResult]);
				if (this.strPrinters[this.nResult] == this.strDevice) 
				{
					this.nOff = this.nResult;
				}
				this.nResult = this.nResult + 1;
			}
			if (this.nOff >= 0) 
			{
				this.lbPrinters.SetListSelectedIndex(this.nOff);
			}

			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblEL
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblELTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmEL _frmEL = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblELTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmEL frmEL
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmEL == null) 
					{
						_frmEL = (frmEL)this.FindForm();
					}
					return _frmEL;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblELTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblELTableWindow)SalWindow.FromHandle(handle, typeof(tblELTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
