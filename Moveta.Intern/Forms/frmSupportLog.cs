// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="dtPStart"></param>
	/// <param name="nPArztNr"></param>
	/// <param name="strPPerson"></param>
	/// <param name="nNeu"></param>
	public partial class frmSupportLog : SalFormWindow
	{
		#region Window Parameters
		public SalDateTime dtPStart;
		public SalNumber nPArztNr;
		public SalString strPPerson;
		public SalNumber nNeu;
		#endregion
		
		#region Window Variables
		public SalSqlHandle hSqlSL = SalSqlHandle.Null;
		public SalBoolean bOk = false;
		public SalNumber nPicDoc = 0;
		public SalNumber nRet = 0;
		public SalString strUnterOrdner = "";
		public SalString strFile = "";
		public SalString strScanTitel = "";
		public MTblPrintParams PrintParams = new MTblPrintParams();
		public SalString strDevice = "";
		public SalNumber nResult = 0;
		public SalNumber nAnz = 0;
		public SalNumber nOff = 0;
		public SalArray<SalString> strPrinters = new SalArray<SalString>();
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmSupportLog(SalDateTime dtPStart, SalNumber nPArztNr, SalString strPPerson, SalNumber nNeu)
		{
			// Assign global reference.
			App.frmSupportLog = this;
			// Window Parameters initialization.
			this.dtPStart = dtPStart;
			this.nPArztNr = nPArztNr;
			this.strPPerson = strPPerson;
			this.nNeu = nNeu;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmSupportLog CreateWindow(Control owner, SalDateTime dtPStart, SalNumber nPArztNr, SalString strPPerson, SalNumber nNeu)
		{
			frmSupportLog frm = new frmSupportLog(dtPStart, nPArztNr, strPPerson, nNeu);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmSupportLog FromHandle(SalWindowHandle handle)
		{
			return ((frmSupportLog)SalWindow.FromHandle(handle, typeof(frmSupportLog)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalResizeForm()
		{
			#region Local Variables
			SalNumber nPWidth = 0;
			SalNumber nPHeight = 0;
			SalNumber nVWidth = 0;
			SalNumber nVHeight = 0;
			SalNumber nFWidth = 0;
			SalNumber nFHeight = 0;
			SalNumber nX = 0;
			SalNumber nY = 0;
			SalNumber nX1 = 0;
			SalNumber nY1 = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				this.GetSize(ref nPWidth, ref nPHeight);
				// Call SalGetWindowSize( gridSL, nX1, nX1 )
				gridSL.GetLocation(ref nX, ref nY);

				nFWidth = nPWidth - 0.75m;
				nFHeight = nPHeight - nY - 0.2m;
				gridSL.SetSize(nFWidth - 0.25m, nFHeight - 0.5m);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalPopulate()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (gridSL.Populate(hSqlSL, @"SELECT slzei, sltext, slprodukt, slstart, sldauer, slperson, slabschluss, @ISNA(slscan)
INTO :frmSupportLog.gridSL.colBenutzer, :frmSupportLog.gridSL.colBemerk, :frmSupportLog.gridSL.colProdukt, :frmSupportLog.gridSL.colStart,
:frmSupportLog.gridSL.colDauer, :frmSupportLog.gridSL.colPerson, :frmSupportLog.gridSL.colAbschDat, :frmSupportLog.gridSL.colScan
FROM sl WHERE slarztnr = :frmSupportLog.dfArztNr ORDER BY slstart DESC", Sys.TBL_FillAllBackground)) 
				{
				}
				MT.MTbl.AutoSizeRows(gridSL, Const.MTASR_ALLROWS);
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmSupportLog WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmSupportLog_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmSupportLog_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_CreateComplete:
					this.frmSupportLog_OnSAM_CreateComplete(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmSupportLog_OnSAM_Close(sender, e);
					break;
				
				case Const.WM_SIZE:
					this.frmSupportLog_OnWM_SIZE(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmSupportLog_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.bfrmSupportLog = true;
			Int.PalGetSize(this, true);

			// If nNeu = 0
			// Call SalHideWindow( bkgd3 )
			// Call SalHideWindow( cmbName )
			// Call SalHideWindow( bkgd7 )
			// Call SalHideWindow( cmbProdukt )
			// Call SalHideWindow( bkgd8 )
			// Call SalHideWindow( dfDauer )
			// Call SalHideWindow( bkgd6 )
			// Call SalHideWindow( pbOk )
			// Call SalHideWindow( mlBemerk )

			this.cmbName.Text = this.strPPerson;
			this.dfArztNr.Number = this.nPArztNr;
			this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0);
			this.cmbProdukt.Text = "Pegasus 3";
			// Set dfDauer = (SalDateCurrent(  ) - dtPStart) * 24
			Int.SqlConnection(ref this.hSqlSL);
			this.PalPopulate();
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmSupportLog_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalContextMenuSetPopup( gridSL, 'frmSupportLogRightClick', 0)
			this.nPicDoc = MT.MImg.LoadFromFile(Var.strTVNPath + "\\bmp\\16\\document.bmp", MT.MImg.MIMG_TYPE_BMP, 0);
			Int.PalTblSetRowPicture(this.gridSL, Vis.ROW_UserFlag2, this.nPicDoc);
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmSupportLog_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalSetSize(this);
			this.hSqlSL.Disconnect();
			Var.bfrmSupportLog = false;
			#endregion
		}
		
		/// <summary>
		/// WM_SIZE event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmSupportLog_OnWM_SIZE(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalResizeForm();
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 04.12.17 Ã„1392
			this.cmbName.PopulateList(this.hSqlSL, "SELECT aaname FROM aa WHERE aaarztnr= :frmSupportLog.dfArztNr ORDER BY aaname");

			Int.SqlImmedSel("SELECT aname1 || \', \' || aort INTO :frmSupportLog.dfPraxis FROM a WHERE aarztnr = :frmSupportLog.dfArztNr");
			this.cmbName.SetFocus();
			this.PalPopulate();
			#endregion
		}
		
		/// <summary>
		/// mlBemerk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void mlBemerk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_KillFocus:
					this.mlBemerk_OnSAM_KillFocus(sender, e);
					break;
				
				case Sys.SAM_SetFocus:
					this.mlBemerk_OnSAM_SetFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_KillFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void mlBemerk_OnSAM_KillFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.MapEnterToTab(true);
			#endregion
		}
		
		/// <summary>
		/// SAM_SetFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void mlBemerk_OnSAM_SetFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.MapEnterToTab(false);
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.mlBemerk.Text == "") 
			{
				Sal.MessageBox("Es muÃŸ eine TÃ¤tigkeit angegeben werden.", "Daten fehlen", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			// Else If cmbName = ''
			// Call SalMessageBox( 'Es muÃŸ der Name der Kontaktperson angegeben werden.', 'Daten fehlen', MB_Ok|MB_IconExclamation )
			else if (this.cmbProdukt.Text == "") 
			{
				Sal.MessageBox("WÃ¤hlen Sie bitte das betroffene Produkt aus.", "Daten fehlen", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			// Else If dfDauer = NUMBER_Null
			// Call SalMessageBox( 'Geben Sie bitte die Dauer ein.', 'Daten fehlen', MB_Ok|MB_IconExclamation )
			else
			{
				// 29.07.16 Ã„1403 Level von 1 auf 2 gesetzt
				Int.SqlImmed(@"INSERT INTO sl (slerfdat, slstart, slzei, slarztnr, slperson, sltext, slprodukt, sldauer, slabschluss)
VALUES ( SYSDATETIME, :frmSupportLog.dtPStart, :strBNZei, :frmSupportLog.dfArztNr, :frmSupportLog.cmbName, :frmSupportLog.mlBemerk,
:frmSupportLog.cmbProdukt, :frmSupportLog.dfDauer, SYSDATETIME )");
				this.dfPraxis.Text = "";
				this.dfArztNr.Number = Sys.NUMBER_Null;
				this.cmbName.Text = "";
				this.PostMessage(Sys.SAM_Close, 0, 0);
			}
			#endregion
		}
		
		/// <summary>
		/// gridSL WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gridSL_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.gridSL_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.gridSL_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_FetchDone:
					this.gridSL_OnSAM_FetchDone(sender, e);
					break;
				
				// On MTM_MouseEnterItem
				
				// Call MTblGetItem( gridSL, lParam, objItem )
				
				// If objItem.Type = MTBL_ITEM_ROW
				
				// Call MTblSetHighlighted( objItem, TRUE )
				
				// On MTM_MouseLeaveItem
				
				// Call MTblGetItem( gridSL, lParam, objItem )
				
				// If objItem.Type = MTBL_ITEM_ROW
				
				// Call MTblSetHighlighted( objItem, FALSE )
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gridSL_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.gridSL, 0);
			MT.MTbl.DefineColLines(this.gridSL, MT.MTbl.MTLS_DOT, MT.MTbl.MTBL_COLOR_UNDEF);
			MT.MTbl.DefineRowLines(this.gridSL, MT.MTbl.MTLS_INVISIBLE, MT.MTbl.MTBL_COLOR_UNDEF);
			// 06.10.15
			MT.MTbl.SetFlags(this.gridSL, MT.MTbl.MTBL_FLAG_COLOR_ENTIRE_ROW, true);
			MT.MTbl.SetFlags(this.gridSL, MT.MTbl.MTBL_FLAG_VARIABLE_ROW_HEIGHT, true);
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gridSL_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.gridSL.colScan.Number == 0) 
			{
				this.gridSL.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag2, true);
			}
			else
			{
				this.gridSL.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag2, false);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gridSL_OnSAM_FetchDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 14.07.17
			MT.MTbl.AutoSizeRows(this, Const.MTASR_ALLROWS);

			#endregion
		}
		
		/// <summary>
		/// pbReferesh WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbReferesh_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbReferesh_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbReferesh_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalPopulate();
			#endregion
		}
		
		/// <summary>
		/// pbDrucken WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.pbDrucken_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Click:
					this.pbDrucken_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nAnz = MT.MTbl.PrintGetPrinterNames(this.strPrinters);
			this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			this.nOff = -1;
			this.nResult = 0;
			while (this.nResult < this.nAnz) 
			{
				this.lbPrinters.AddListItem(this.strPrinters[this.nResult]);
				if (this.strPrinters[this.nResult] == this.strDevice) 
				{
					this.nOff = this.nResult;
				}
				this.nResult = this.nResult + 1;
			}
			if (this.nOff >= 0) 
			{
				this.lbPrinters.SetListSelectedIndex(this.nOff);
			}

			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Set nErr = 1
			// Set strReportName = 'ABSCHVOR'
			// Set hWndReport = SalReportTableView(tblAbschVor,hWndNULL,'ABSCHVOR.QRP',nErr)
			this.PrintParams.Init();
			this.PrintParams.DocName = "Support-Log fÃ¼r " + this.dfArztNr.Number.ToString(0) + " " + this.dfPraxis.Text;
			this.PrintParams.Orientation = MT.MTbl.MTP_OR_LANDSCAPE;
			this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			this.nResult = this.lbPrinters.GetListSelectedIndex();
			if (this.nResult == Sys.LB_Err) 
			{
				this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			}
			else
			{
				this.strDevice = this.lbPrinters.GetListItemText(this.nResult);
			}
			this.PrintParams.PrinterName = this.strDevice;
			// 07.11.13 F1760
			this.PrintParams.Language = MT.MTbl.MTP_LNG_GERMAN;

			MT.MTbl.Print(this.gridSL, this.PrintParams);

			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region gridSL
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class gridSLTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmSupportLog _frmSupportLog = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public gridSLTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmSupportLog frmSupportLog
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmSupportLog == null) 
					{
						_frmSupportLog = (frmSupportLog)this.FindForm();
					}
					return _frmSupportLog;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static gridSLTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((gridSLTableWindow)SalWindow.FromHandle(handle, typeof(gridSLTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colStart WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colStart_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colStart_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colStart_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmSupportLog.PalPopulate();
				#endregion
			}
			
			/// <summary>
			/// colAbschDat WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colAbschDat_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colAbschDat_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colAbschDat_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmSupportLog.PalPopulate();
				#endregion
			}
			#endregion
		}
		#endregion
	}
}
