// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class dlgdivDruck : SalDialogBox
	{
		#region Window Variables
		public SalSqlHandle hSqlDruck = SalSqlHandle.Null;
		public SalSqlHandle hSqlDruck2 = SalSqlHandle.Null;
		public SalNumber nFetchDruck = 0;
		public SalNumber nFetchDruck2 = 0;
		public SalDateTime dtDATEVDat = SalDateTime.Null;
		public SalString strDATEVMail = "";
		public SalString strDATEVBeraternr = "";
		public SalString strDATEVMandantennr = "";
		public SalString strDATEVCode = "";
		public SalString strOrdner = "";
		public SalNumber n5stellig = 0;
		public SalNumber nForderung = 0;
		public SalNumber nGeg0 = 0;
		public SalNumber nGeg5 = 0;
		public SalNumber nGeg7 = 0;
		public SalNumber nGeg16 = 0;
		public SalNumber nGeg19 = 0;
		public SalString strSKR = "";
		public SalNumber nGegKonto = 0;
		public SalString lsBody = "";
		public SalString strError = "";
		public SalString strVermerk = "";
		public SalNumber nArztNr = 0;
		public SalNumber nHalterNr = 0;
		public SalNumber nRechNr = 0;
		public SalString strBuchtext = "";
		public SalDateTime dtRechDat = SalDateTime.Null;
		public SalNumber nHF = 0;
		public SalNumber nDM = 0;
		public SalNumber nMwSt = 0;
		public SalDateTime dtMin = SalDateTime.Null;
		public SalDateTime dtMax = SalDateTime.Null;
		public SalFileHandle hFile = SalFileHandle.Null;
		public SalString strFile = "";
		public SalNumber nFileType = 0;
		public SalSqlHandle hSqlTR = SalSqlHandle.Null;
		public SalNumber nFetch = 0;
		public SalBoolean bOk = false;
		public SalString strText = "";
		public SalString strText2 = "";
		public SalString strText3 = "";
		public SalString strDiv = "";
		public SalNumber nColor = 0;
		public SalString strKen = "";
		public SalDateTime dtErfDat = SalDateTime.Null;
		public SalString strSelect = "";
		public SalNumber nDummy = 0;
		public SalNumber nDatevNr = 0;
		public SalNumber nKasseDummy = 0;
		public SalString strSH = "";
		public SalString strBuchSchl = "";
		public SalDateTime dtKBDat = SalDateTime.Null;
		public SalString strKBTyp = "";
		public SalString strKBText = "";
		public SalNumber nKBEin = 0;
		public SalNumber nKBAus = 0;
		public SalString strKBSB = "";
		public SalNumber nKBMwSt = 0;
		public SalNumber nKBGegKto = 0;
		public SalNumber nKasse = 0;
		public SalString strROWID = "";
		public SalString strGrund = "";
		public SalString strDummy = "";
		public SalString strHeader = "";
		public SalNumber nAutoBelNr = 0;
		public SalString strArt = "";
		public SalNumber nJahr = 0;
		public SalNumber nMandant = 0;
		public SalNumber nNr = 0;
		public SalDateTime dtLeistDat = SalDateTime.Null;
		public SalString strPZei = "";
		public SalString strName1 = "";
		public SalString strName2 = "";
		public SalNumber nBilanzierer = 0;
		public SalNumber nZaLeis = 0;
		public SalNumber nZaArzn = 0;
		public SalNumber nZaMahn = 0;
		public SalNumber nZaZins = 0;
		public SalNumber nPorto = 0;
		public SalNumber nAbr = 0;
		public SalNumber nSoll = 0;
		public SalNumber nHaben = 0;
		public SalNumber nTKRechDM = 0;
		public SalNumber nTKKZHaben = 0;
		public SalNumber nTKTaVSt = 0;
		public SalNumber nTKDMZaLeis = 0;
		public SalNumber nTKDMZaArzn = 0;
		public SalNumber nTKDMZaMahn = 0;
		public SalNumber nTKDMZaMwSt = 0;
		public SalNumber nTKKzZahl = 0;
		public SalNumber nTKDMPorto = 0;
		public SalNumber nTKDMAbr = 0;
		public SalNumber nTKDMZaZins = 0;
		public SalNumber nTKSoll = 0;
		public SalNumber nTKHaben = 0;
		public SalNumber nTKDMMahn = 0;
		public SalString strTKKontoCode = "";
		public SalNumber nKOSoll = 0;
		public SalNumber nKOHaben = 0;
		public SalSqlHandle hSqlLeist = SalSqlHandle.Null;
		public SalNumber nFetchLeist = 0;
		public SalString strQuelle = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public dlgdivDruck()
		{
			// Assign global reference.
			App.dlgdivDruck = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the modal dialog.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static SalNumber ModalDialog(Control owner)
		{
			dlgdivDruck dlg = new dlgdivDruck();
			SalNumber ret = dlg.ShowDialog(owner);
			return ret;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static dlgdivDruck FromHandle(SalWindowHandle handle)
		{
			return ((dlgdivDruck)SalWindow.FromHandle(handle, typeof(dlgdivDruck)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalFillKontoauszug()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (Sal.IsNull(dfvon)) 
				{
					dfvon.Number = 1;
				}
				if (Sal.IsNull(dfbis)) 
				{
					if (dfvon.Number == 1) 
					{
						dfbis.Number = 9999;
					}
					else
					{
						dfbis.Number = dfvon.Number;
					}
				}
				Int.SqlConnection(ref hSqlDruck);
				// 30.06.05 +
				// AND (vovorsoll<>0 OR vovorhaben<>0 OR vovorhaben<>0 OR vovorrech<>0)
				// 28.09.06 Ä33 rausgenommen: AND (vovorsoll<>0 or vovorhaben<>0 or vovormwst<>0 or vovorvst<>0 or voop<>0 or vovorrech<>0)
				Sal.ListPopulate(cmbKontoDruck, hSqlDruck, @"SELECT DISTINCT vodatum FROM vo
WHERE voarztnr BETWEEN :dlgdivDruck.dfvon AND :dlgdivDruck.dfbis AND vodeaktiv IS NULL
ORDER BY vodatum DESC");

				hSqlDruck.Disconnect();
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalFillDATEV()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (Sal.IsNull(dfvon)) 
				{
					dfvon.Number = 1;
				}
				if (Sal.IsNull(dfbis)) 
				{
					if (dfvon.Number == 1) 
					{
						dfbis.Number = 9999;
					}
					else
					{
						dfbis.Number = dfvon.Number;
					}
				}
				Int.SqlConnection(ref hSqlDruck);
                // 29.03.21 Ä1952 + DATEV-Export
                // 05.03.24 ### +
                // AND rkarztnr BETWEEN :dlgdivDruck.dfvon AND :dlgdivDruck.dfbis
                Sal.ListPopulate(cmbDATEValt, hSqlDruck, @"SELECT DISTINCT rkdatevdate FROM rk
WHERE rkdatevdate IS NOT NULL AND rkrechdat>='2021-04-01'
AND rkarztnr BETWEEN :dlgdivDruck.dfvon.Value AND :dlgdivDruck.dfbis.Value
ORDER BY rkdatevdate DESC");

                hSqlDruck.Disconnect();
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="bNeu"></param>
		/// <param name="strName"></param>
		/// <returns></returns>
		public SalBoolean PalMakeFileDATEVAR(SalNumber nArztNr, SalBoolean bNeu, SalString strName)
		{
			#region Local Variables
			SqlLocals.PalMakeFileDATEVARLocals locals = new SqlLocals.PalMakeFileDATEVARLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.nArztNr = nArztNr;
				locals.bNeu = bNeu;
				locals.strName = strName;

				strHeader = "Umsatz (ohne Soll/Haben-Kz);Soll/Haben-Kennzeichen;WKZ Umsatz;Kurs;Basis-Umsatz;WKZ Basis-Umsatz;Konto;Gegenkonto (ohne BU-Schlüssel);BU-Schlüssel;Belegdatum;Belegfeld 1;Belegfeld ";
				strHeader = strHeader + "2;Skonto;Buchungstext;Postensperre;Diverse ";
				strHeader = strHeader + "Adressnummer;Geschäftspartnerbank;Sachverhalt;Zinssperre;Beleglink;Beleginfo - Art 1;Beleginfo - Inhalt 1;Beleginfo - Art 2;Beleginfo - Inhalt 2;Beleginfo - Art 3;Beleginfo - Inhalt 3;Beleginfo - Art ";
				strHeader = strHeader + "4;Beleginfo - Inhalt 4;Beleginfo - ";
				strHeader = strHeader + "Art 5;Beleginfo - Inhalt 5;Beleginfo - Art 6;Beleginfo - Inhalt 6;Beleginfo - Art 7;Beleginfo - Inhalt 7;Beleginfo - Art 8;Beleginfo - Inhalt 8;KOST1 - Kostenstelle;KOST2 - Kostenstelle;Kost-Menge";
				strHeader = strHeader + ";EU-Land u. UStID;EU-Steuersatz;Abw. ";
				strHeader = strHeader + "Versteuerungsart;Sachverhalt L+L;Funktionsergänzung L+L;BU 49 Hauptfunktionstyp;BU 49 Hauptfunktionsnummer;BU 49 Funktionsergänzung;Zusatzinformation - Art 1;Zusatzinformation- Inhalt 1;Zusatzinformation - ";
				strHeader = strHeader + "Art 2;Zusatzinformation- ";
				strHeader = strHeader + "Inhalt 2;Zusatzinformation - Art 3;Zusatzinformation- Inhalt 3;Zusatzinformation - Art 4;Zusatzinformation- Inhalt 4;Zusatzinformation - Art 5;Zusatzinformation- Inhalt 5;Zusatzinformation - Art ";
				strHeader = strHeader + "6;Zusatzinformation- Inhalt ";
				strHeader = strHeader + "6;Zusatzinformation - Art 7;Zusatzinformation- Inhalt 7;Zusatzinformation - Art 8;Zusatzinformation- Inhalt 8;Zusatzinformation - Art 9;Zusatzinformation- Inhalt 9;Zusatzinformation - Art ";
				strHeader = strHeader + "10;Zusatzinformation- Inhalt ";
				strHeader = strHeader + "10;Zusatzinformation - Art 11;Zusatzinformation- Inhalt 11;Zusatzinformation - Art 12;Zusatzinformation- Inhalt 12;Zusatzinformation - Art 13;Zusatzinformation- Inhalt 13;Zusatzinformation - Art ";
				strHeader = strHeader + "14;Zusatzinformation- Inhalt ";
				strHeader = strHeader + "14;Zusatzinformation - Art 15;Zusatzinformation- Inhalt 15;Zusatzinformation - Art 16;Zusatzinformation- Inhalt 16;Zusatzinformation - Art 17;Zusatzinformation- Inhalt 17;Zusatzinformation - Art ";
				strHeader = strHeader + "18;Zusatzinformation- Inhalt ";
				strHeader = strHeader + "18;Zusatzinformation - Art 19;Zusatzinformation- Inhalt 19;Zusatzinformation - Art 20;Zusatzinformation- Inhalt 20;Stück;Gewicht;Zahlweise;Forderungsart;Veranlagungsjahr;Zugeordnete ";
				strHeader = strHeader + "Fälligkeit;Skontotyp;Auftragsnummer;Buchungstyp;Ust-";
				strHeader = strHeader + "Schlüssel (Anzahlungen);EU-Land (Anzahlungen);Sachverhalt L+L (Anzahlungen);EU-Steuersatz (Anzahlungen);Erlöskonto (Anzahlungen);Herkunft-Kz;Leerfeld;KOST-";
				strHeader = strHeader + "Datum;Mandatsreferenz;Skontosperre;Gesellschaftername;Beteiligtennummer;Identifikationsnummer;Zeichnernummer;Postensperre bis;Bezeichnung SoBil-Sachverhalt;Kennzeichen SoBil-";
				strHeader = strHeader + "Buchung;Festschreibung;Leistungsdatum;Datum ";
				strHeader = strHeader + "Zuord.Steuerperiode;Fälligkeit;Generalumkehr (GU);Steuersatz;Land";
				// 18.11.21 Ä1995
				Int.SqlConnection(ref hSqlLeist);
				Int.SqlPrepar(hSqlLeist, "SELECT MIN(rpdatum) INTO :dlgdivDruck.dtLeistDat FROM rp WHERE rparztnr = :dlgdivDruck.nArztNr AND rphalternr = :dlgdivDruck.nHalterNr AND rprechnr = :dlgdivDruck.nRechNr");

				Int.SqlImmedSel(@"SELECT ds5stellig, dsforderung, dsgeg0, dsgeg5, dsgeg7, dsgeg16, dsgeg19, dsskr
INTO :dlgdivDruck.n5stellig, :dlgdivDruck.nForderung, :dlgdivDruck.nGeg0, :dlgdivDruck.nGeg5, :dlgdivDruck.nGeg7, :dlgdivDruck.nGeg16, :dlgdivDruck.nGeg19, :dlgdivDruck.strSKR
FROM ds
WHERE dscode = :dlgdivDruck.strDATEVCode");
				// !
				// 15.05.19 E-Mailo Frau Hähnel vom 6.5.19
				strFile = Const.PATH_DATEV + Sql.Database + "\\ EXTF_Buchungsstapel_Mitglied_" + locals.nArztNr.ToString(0) + "_" + locals.strName + "_Ausgangsrechnungen_" + Int.PalDateToStrJJJJMMTThhmmsst(dtDATEVDat) + ".csv";

				strSelect = @"SELECT rkarztnr, rkhalternr, rkrechnr, rkbuchtext, rkrechdat, rpmwst, SUM( rpdm )
INTO :dlgdivDruck.nArztNr, :dlgdivDruck.nHalterNr, :dlgdivDruck.nRechNr, :dlgdivDruck.strBuchtext, :dlgdivDruck.dtRechDat, :dlgdivDruck.nMwSt, :dlgdivDruck.nDM
FROM rk, rp
WHERE rkarztnr = " + locals.nArztNr.ToString(0) + @" AND rkarztnr=rparztnr AND rkhalternr=rphalternr AND rkrechnr=rprechnr AND rkdatevdate = :dlgdivDruck.dtDATEVDat AND rkrechnr < 999990
AND rkrechdat BETWEEN :dlgdivDruck.dfDvon.Value AND :dlgdivDruck.dfDbis.Value
GROUP BY 1,2,3,4,5,6";
				strText = "";
				bOk = true;
				if (hFile.Open(strFile, Sys.OF_Exist)) 
				{
					hFile.Open(strFile, Sys.OF_Delete);
					nFileType = Sys.OF_Create;
				}
				else
				{
					nFileType = Sys.OF_Create;
				}

				Int.SqlIstDa(@"FROM rk
WHERE rkarztnr = " + locals.nArztNr.ToString(0) + @" AND rkdatevdate = :dlgdivDruck.dtDATEVDat AND rkrechnr < 999990
AND rkrechdat BETWEEN :dlgdivDruck.dfDvon.Value AND :dlgdivDruck.dfDbis.Value ", ref bOk);
				this.SetStatusBarText("Erstelle " + strFile);
				if (bOk) 
				{
					Int.SqlImmedSel(@"SELECT MIN(rpdatum), MAX( rpdatum ) INTO :dlgdivDruck.dtMin, :dlgdivDruck.dtMax FROM rk, rp
WHERE rkarztnr = " + locals.nArztNr.ToString(0) + @" AND rkarztnr=rparztnr AND rkhalternr=rphalternr AND rkrechnr=rprechnr AND rkdatevdate = :dlgdivDruck.dtDATEVDat AND rkrechnr < 999990
AND rkrechdat BETWEEN :dlgdivDruck.dfDvon.Value AND :dlgdivDruck.dfDbis.Value ");
					bOk = hFile.Open(strFile, ((nFileType | Sys.OF_Write) | Sys.OF_Text));
					if (bOk) 
					{
						// 29.01.18 Ä1683
						hFile.PutString("\"EXTF\";510;21;\"Buchungsstapel\";9;" + Int.PalDateToStrJJJJMMTThhmmsst(SalDateTime.Current) + "00;;\"PE\";\"\";\"\";" + strDATEVBeraternr + ";" + strDATEVMandantennr + ";" + Int.PalDateToStrJJJJMMTT(dtDATEVDat.YearBegin()) + 
							";4;" + Int.PalDateToStrJJJJMMTT(dtMin) + ";" + Int.PalDateToStrJJJJMMTT(dtMax) + ";\"Ausgangsrechnungen\";\"" + Var.strBNZei + "\";1;0;1;\"EUR\";;\"\";;;\"" + strSKR + "\";;;\"\";\"Moveta\"");

						hFile.PutString(strHeader);
						bOk = true;
						Int.SqlConnection(ref hSqlTR);
						Int.SqlHandleExec(hSqlTR, strSelect, "Funktion: MakeFile", ref Var.nCount);
						nFetch = hSqlTR.FetchNext();
						while (nFetch != Sys.FETCH_EOF && bOk) 
						{
							if (nDM < 0) 
							{

								strSH = "H";
								strBuchSchl = "";
								nDM = nDM * -1;
							}
							else
							{

								strSH = "S";
								strBuchSchl = "";
							}
							// 04.12.23 Ä2123
							strBuchSchl = PalGetSteuerSchl(nMwSt).ToString(0);
							// 05.05.21 Ä1952
							nDM = nDM + ((nDM * nMwSt).Round() / 100);

							if (nMwSt == 0) 
							{
								nGegKonto = nGeg0;
							}
							else if (nMwSt == 5) 
							{
								nGegKonto = nGeg5;
							}
							else if (nMwSt == 7) 
							{
								nGegKonto = nGeg7;
							}
							else if (nMwSt == 16) 
							{
								nGegKonto = nGeg16;
							}
							else
							{
								nGegKonto = nGeg19;
							}
							// 18.11.21 Ä1995
							dtLeistDat = SalDateTime.Null;
							Int.SqlExecut(hSqlLeist, "erstes Leistungsdatum holen für" + locals.nArztNr.ToString(0) + " : " + Int.PalDateToStrTTMMJJJJhhmmss(dtRechDat).Left(10) + "- " + strBuchtext);
							nFetchLeist = hSqlLeist.FetchNext();
							if (dtLeistDat == SalDateTime.Null) 
							{
								dtLeistDat = dtRechDat;
							}

							// Set strBuchtext = strBuchtext || ' ' || SalNumberToStrX( nArztNr, 0 ) || '/R' || SalNumberToStrX( nRechNr, 0 )
							strText = nDM.ToString(2) + ";\"" + strSH + "\";\"\";;;\"\";" + nForderung.ToString(0) + ";" + nGegKonto.ToString(0) + ";\"" + strBuchSchl + "\";" + Int.PalDateToStrTTMMJJ(dtRechDat).Left(4) + ";\"" + nRechNr.ToString(0) + "\";\"\";;\"" + 
							strBuchtext + "\";0;\"\";;;" + ((SalString)";\"\"").Repeat(19) + ";;\"\";;\"\";;;;;" + ((SalString)";\"\"").Repeat(40) + ";;;;\"\";;;;\"\";\"\";;\"\";;;;\"\";\"\";;\"\";;\"\";;\"\";\"\";;\"\";;;" + Int.PalDateToStrDatevTTMMJJJJ(dtLeistDat) + 
							";;;\"\";;\"\"";

							this.SetStatusBarText("DATEV Rechnungen: Mitglied " + locals.nArztNr.ToString(0) + " : " + Int.PalDateToStrTTMMJJJJhhmmss(dtRechDat).Left(10) + "- " + strBuchtext);
							while (!(hFile.PutString(strText)) && bOk) 
							{
								// Call SalFileClose(hFile)	! 15.05.119 auskommentiert
								if (Sys.IDNO == Sal.MessageBox("Schreibfehler. Erneut versuchen?", "Achtung", Sys.MB_YesNo)) 
								{
									bOk = false;
								}
								// Else
								// Call SalFileOpen( hFile, dfLocalDir, OF_Write|OF_Text )
							}
							strKBText = "";
							nFetch = hSqlTR.FetchNext();
						}
						hSqlTR.Commit();
						if (bOk) 
						{
							hFile.Close();

							Int.PalMailInit();
							lsBody = @"Sehr geehrte Damen und Herren,

anbei erhalten Sie das Moveta-Rechnungsausgangsbuch im DATEV-EXTF-Format für die Zeit vom " + Int.PalDateToStrDE(dtMin) + " bis zum " + Int.PalDateToStrDE(dtMax) + @".

Mit freundlichen Grüßen,

" + Var.strBNName + @"
moveta r.V.k.V.

Danziger Straße 1
31008 Elze
Telefon (0 50 68) 93 07-" + Var.strBNTel + @"
Telefax (0 50 68) 93 07-80
E-mail " + Var.strBNEMail + @"
Web www.moveta.de

Sparkasse Hildesheim · IBAN: DE13 2595 0130 0007 0065 73 · BIC: NOLADE21HIK";
							if (0 == Int.SendeMail(Const.MAIL_FORMAT_PLAIN_TEXT, "Ihre DATEV-Datei für Ihre(n) Steuerberater(in)", Var.strBNEMail, strDATEVMail, lsBody, strFile, Const.MAIL_PRIORITY_NORMAL, ref strError, "", Var.strBNName))
							{
								strVermerk = "DATEV-Export an " + strDATEVMail;
								Int.SqlImmed(@"INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :strBNZei, :dlgdivDruck.nArztNr, 0, 0,
:dlgdivDruck.strVermerk , SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
							}
							else
							{
								Sal.WaitCursor(false);
								Sal.MessageBox("Die E-Mail für Mitglied " + locals.nArztNr.ToString(0) + " an " + strDATEVMail + " konnte nicht versandt werden.", "Fehler: " + strError, Sys.MB_Ok);
							}
							Int.PalMailClose();
						}
						else
						{
							Sal.MessageBox("Die Übertragung der Datei " + strFile + @"
wurde abgebrochen.", "Achtung", Sys.MB_Ok);
						}
						hSqlTR.Disconnect();
						// 18.11.21 Ä1995
						hSqlLeist.Disconnect();
					}
				}
				return bOk;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="bNeu"></param>
		/// <param name="strName"></param>
		/// <returns></returns>
		public SalBoolean PalMakeFileDATEVKA(SalNumber nArztNr, SalBoolean bNeu, SalString strName)
		{
			#region Local Variables
			SqlLocals.PalMakeFileDATEVKALocals locals = new SqlLocals.PalMakeFileDATEVKALocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.nArztNr = nArztNr;
				locals.bNeu = bNeu;
				locals.strName = strName;

				strHeader = "Umsatz (ohne Soll/Haben-Kz);Soll/Haben-Kennzeichen;WKZ Umsatz;Kurs;Basis-Umsatz;WKZ Basis-Umsatz;Konto;Gegenkonto (ohne BU-Schlüssel);BU-Schlüssel;Belegdatum;Belegfeld 1;Belegfeld ";
				strHeader = strHeader + "2;Skonto;Buchungstext;Postensperre;Diverse ";
				strHeader = strHeader + "Adressnummer;Geschäftspartnerbank;Sachverhalt;Zinssperre;Beleglink;Beleginfo - Art 1;Beleginfo - Inhalt 1;Beleginfo - Art 2;Beleginfo - Inhalt 2;Beleginfo - Art 3;Beleginfo - Inhalt 3;Beleginfo - Art ";
				strHeader = strHeader + "4;Beleginfo - Inhalt 4;Beleginfo - ";
				strHeader = strHeader + "Art 5;Beleginfo - Inhalt 5;Beleginfo - Art 6;Beleginfo - Inhalt 6;Beleginfo - Art 7;Beleginfo - Inhalt 7;Beleginfo - Art 8;Beleginfo - Inhalt 8;KOST1 - Kostenstelle;KOST2 - Kostenstelle;Kost-Menge";
				strHeader = strHeader + ";EU-Land u. UStID;EU-Steuersatz;Abw. ";
				strHeader = strHeader + "Versteuerungsart;Sachverhalt L+L;Funktionsergänzung L+L;BU 49 Hauptfunktionstyp;BU 49 Hauptfunktionsnummer;BU 49 Funktionsergänzung;Zusatzinformation - Art 1;Zusatzinformation- Inhalt 1;Zusatzinformation - ";
				strHeader = strHeader + "Art 2;Zusatzinformation- ";
				strHeader = strHeader + "Inhalt 2;Zusatzinformation - Art 3;Zusatzinformation- Inhalt 3;Zusatzinformation - Art 4;Zusatzinformation- Inhalt 4;Zusatzinformation - Art 5;Zusatzinformation- Inhalt 5;Zusatzinformation - Art ";
				strHeader = strHeader + "6;Zusatzinformation- Inhalt ";
				strHeader = strHeader + "6;Zusatzinformation - Art 7;Zusatzinformation- Inhalt 7;Zusatzinformation - Art 8;Zusatzinformation- Inhalt 8;Zusatzinformation - Art 9;Zusatzinformation- Inhalt 9;Zusatzinformation - Art ";
				strHeader = strHeader + "10;Zusatzinformation- Inhalt ";
				strHeader = strHeader + "10;Zusatzinformation - Art 11;Zusatzinformation- Inhalt 11;Zusatzinformation - Art 12;Zusatzinformation- Inhalt 12;Zusatzinformation - Art 13;Zusatzinformation- Inhalt 13;Zusatzinformation - Art ";
				strHeader = strHeader + "14;Zusatzinformation- Inhalt ";
				strHeader = strHeader + "14;Zusatzinformation - Art 15;Zusatzinformation- Inhalt 15;Zusatzinformation - Art 16;Zusatzinformation- Inhalt 16;Zusatzinformation - Art 17;Zusatzinformation- Inhalt 17;Zusatzinformation - Art ";
				strHeader = strHeader + "18;Zusatzinformation- Inhalt ";
				strHeader = strHeader + "18;Zusatzinformation - Art 19;Zusatzinformation- Inhalt 19;Zusatzinformation - Art 20;Zusatzinformation- Inhalt 20;Stück;Gewicht;Zahlweise;Forderungsart;Veranlagungsjahr;Zugeordnete ";
				strHeader = strHeader + "Fälligkeit;Skontotyp;Auftragsnummer;Buchungstyp;Ust-";
				strHeader = strHeader + "Schlüssel (Anzahlungen);EU-Land (Anzahlungen);Sachverhalt L+L (Anzahlungen);EU-Steuersatz (Anzahlungen);Erlöskonto (Anzahlungen);Herkunft-Kz;Leerfeld;KOST-";
				strHeader = strHeader + "Datum;Mandatsreferenz;Skontosperre;Gesellschaftername;Beteiligtennummer;Identifikationsnummer;Zeichnernummer;Postensperre bis;Bezeichnung SoBil-Sachverhalt;Kennzeichen SoBil-";
				strHeader = strHeader + "Buchung;Festschreibung;Leistungsdatum;Datum ";
				strHeader = strHeader + "Zuord.Steuerperiode;Fälligkeit;Generalumkehr (GU);Steuersatz;Land";
				// 08.01.24
				if (locals.bNeu) 
				{
					strQuelle = "tk";
				}
				else
				{
					strQuelle = "tka";
				}
				// 18.11.21 Ä1995
				Int.SqlConnection(ref hSqlLeist);
				Int.SqlPrepar(hSqlLeist, @"SELECT kosoll, kohaben
INTO :dlgdivDruck.nKOSoll, :dlgdivDruck.nKOHaben
FROM ko
WHERE kocode = :dlgdivDruck.strTKKontoCode AND kobilanzierer = :dlgdivDruck.nBilanzierer AND kokontenrahmen = :dlgdivDruck.strDATEVCode");

				// Call SqlImmedSel( 'SELECT ds5stellig, dsforderung, dsgeg0, dsgeg5, dsgeg7, dsgeg16, dsgeg19, dsskr
				// INTO :dlgdivDruck.n5stellig, :dlgdivDruck.nForderung, :dlgdivDruck.nGeg0, :dlgdivDruck.nGeg5, :dlgdivDruck.nGeg7, :dlgdivDruck.nGeg16, :dlgdivDruck.nGeg19, :dlgdivDruck.strSKR
				// FROM ds
				// WHERE dscode = :dlgdivDruck.strDATEVCode' )
				// !
				// 15.05.19 E-Mailo Frau Hähnel vom 6.5.19
				strFile = Const.PATH_DATEV + Sql.Database + "\\ EXTF_Buchungsstapel_Mitglied_" + locals.nArztNr.ToString(0) + "_" + locals.strName + "_Kontoauszug_" + Int.PalDateToStrJJJJMMTThhmmsst(dtDATEVDat) + ".csv";

				if (locals.bNeu) 
				{
					strSelect = @"SELECT tkarztnr, tkhalternr, tkrechnr, tkbuchtext, tkbeldat, tkprozmwst, tkrechdm, tkkzhaben, tktavst,
tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzamwst, tkkzzahl, tkdmporto, tkdmabr, tkdmzazins, tksoll, tkhaben, tkdmmahn, tkkontocode
INTO :dlgdivDruck.nArztNr, :dlgdivDruck.nHalterNr, :dlgdivDruck.nRechNr, :dlgdivDruck.strBuchtext, :dlgdivDruck.dtRechDat, :dlgdivDruck.nMwSt,
:dlgdivDruck.nTKRechDM, :dlgdivDruck.nTKKZHaben, :dlgdivDruck.nTKTaVSt,
:dlgdivDruck.nTKDMZaLeis, :dlgdivDruck.nTKDMZaArzn, :dlgdivDruck.nTKDMZaMahn, :dlgdivDruck.nTKDMZaMwSt, :dlgdivDruck.nTKKzZahl,
:dlgdivDruck.nTKDMPorto, :dlgdivDruck.nTKDMAbr, :dlgdivDruck.nTKDMZaZins, :dlgdivDruck.nTKSoll, :dlgdivDruck.nTKHaben, :dlgdivDruck.nTKDMMahn, :dlgdivDruck.strTKKontoCode
FROM tk
WHERE tkarztnr = " + locals.nArztNr.ToString(0) + @"
ORDER BY tkbeldat";
				}
				else
				{
					strSelect = @"SELECT tkaarztnr, tkahalternr, tkarechnr, tkabuchtext, tkabeldat, tkaprozmwst, tkarechdm, tkakzhaben, tkatavst,
tkadmzaleis, tkadmzaarzn, tkadmzamahn, tkadmzamwst, tkakzzahl, tkadmporto, tkadmabr, tkadmzazins, tksoll, tkhaben, tkadmmahn, tkakontocode
INTO :dlgdivDruck.nArztNr, :dlgdivDruck.nHalterNr, :dlgdivDruck.nRechNr, :dlgdivDruck.strBuchtext, :dlgdivDruck.dtRechDat, :dlgdivDruck.nMwSt,
:dlgdivDruck.nTKRechDM, :dlgdivDruck.nTKKZHaben, :dlgdivDruck.nTKTaVSt,
:dlgdivDruck.nTKDMZaLeis, :dlgdivDruck.nTKDMZaArzn, :dlgdivDruck.nTKDMZaMahn, :dlgdivDruck.nTKDMZaMwSt, :dlgdivDruck.nTKKzZahl,
:dlgdivDruck.nTKDMPorto, :dlgdivDruck.nTKDMAbr, :dlgdivDruck.nTKDMZaZins, :dlgdivDruck.nTKSoll, :dlgdivDruck.nTKHaben, :dlgdivDruck.nTKDMMahn, :dlgdivDruck.strTKKontoCode
FROM tka
WHERE tkaarztnr = " + locals.nArztNr.ToString(0) + @" AND tkadruckdatum = :dlgdivDruck.cmbKontoDruck
ORDER BY tkabeldat";
				}
				strText = "";
				bOk = true;
				if (hFile.Open(strFile, Sys.OF_Exist)) 
				{
					hFile.Open(strFile, Sys.OF_Delete);
					nFileType = Sys.OF_Create;
				}
				else
				{
					nFileType = Sys.OF_Create;
				}

				// Call SqlIstDa( 'FROM rk
				// WHERE rkarztnr = ' || SalNumberToStrX( nArztNr, 0 ) || ' AND rkdatevdate = :dlgdivDruck.dtDATEVDat AND rkrechnr < 999990
				// AND rkrechdat BETWEEN :dlgdivDruck.dfDvon AND :dlgdivDruck.dfDbis ', bOk )
				this.SetStatusBarText("Erstelle " + strFile);
				if (locals.bNeu) 
				{
					Int.SqlImmedSel(@"SELECT MIN(tkbeldat), MAX( tkbeldat ) INTO :dlgdivDruck.dtMin, :dlgdivDruck.dtMax FROM tk
WHERE tkarztnr = " + locals.nArztNr.ToString(0));
				}
				else
				{
					Int.SqlImmedSel(@"SELECT MIN(tkabeldat), MAX( tkabeldat ) INTO :dlgdivDruck.dtMin, :dlgdivDruck.dtMax FROM tka
WHERE tkaarztnr = " + locals.nArztNr.ToString(0) + " AND tkadruckdatum = :dlgdivDruck.cmbKontoDruck ");
				}
				bOk = hFile.Open(strFile, ((nFileType | Sys.OF_Write) | Sys.OF_Text));
				if (bOk) 
				{
					// 29.01.18 Ä1683
					hFile.PutString("\"EXTF\";510;21;\"Buchungsstapel\";9;" + Int.PalDateToStrJJJJMMTThhmmsst(SalDateTime.Current) + "00;;\"PE\";\"\";\"\";" + strDATEVBeraternr + ";" + strDATEVMandantennr + ";" + Int.PalDateToStrJJJJMMTT(dtDATEVDat.YearBegin()) + 
						";4;" + Int.PalDateToStrJJJJMMTT(dtMin) + ";" + Int.PalDateToStrJJJJMMTT(dtMax) + ";\"Kontoauszug\";\"" + Var.strBNZei + "\";1;0;1;\"EUR\";;\"\";;;\"" + strSKR + "\";;;\"\";\"Moveta\"");

					hFile.PutString(strHeader);
					bOk = true;
					Int.SqlConnection(ref hSqlTR);
					Int.SqlHandleExec(hSqlTR, strSelect, "Funktion: MakeFile", ref Var.nCount);
					nFetch = hSqlTR.FetchNext();
					while (nFetch != Sys.FETCH_EOF && bOk) 
					{
						nDM = 0;
						if (nTKHaben > 0) 
						{

							strSH = "H";
							strBuchSchl = "";
							nDM = nTKHaben;
						}
						else
						{

							strSH = "S";
							strBuchSchl = "";
							nDM = nTKSoll;
						}
						if (strTKKontoCode.Right(1) == "-") 
						{
							if (strTKKontoCode == "RgErst-" || strTKKontoCode == "RechAusb-Rg") 
							{
								strTKKontoCode = "RgErst-FordMitgl";
								nDM = nTKDMAbr;
								strSH = "S";
								PalWriteFileKA();

								strTKKontoCode = "RgErst-Geb";
								nDM = nTKRechDM;
								strSH = "S";
								PalWriteFileKA();

								strTKKontoCode = "RgErst-USt";
								nDM = nTKTaVSt;
								strSH = "S";
								PalWriteFileKA();

								strTKKontoCode = "RgErst-Porto";
								nDM = nTKDMPorto;
								strSH = "S";
								PalWriteFileKA();

							}
							else if (strTKKontoCode == "Mahnung-") 
							{
								strTKKontoCode = "Mahnung-Mahngebühr";
								nDM = nTKSoll - nTKTaVSt;
								strSH = "S";
								PalWriteFileKA();

								strTKKontoCode = "Mahnung-USt";
								nDM = nTKTaVSt;
								strSH = "S";
								PalWriteFileKA();

							}
							else if (strTKKontoCode == "BA.MB-") 
							{
								strTKKontoCode = "BA.MB-Betrag";
								nDM = nTKSoll - nTKTaVSt;
								strSH = "S";
								PalWriteFileKA();

								strTKKontoCode = "BA.MB-USt";
								nDM = nTKTaVSt;
								strSH = "S";
								PalWriteFileKA();

							}
							else if (strTKKontoCode == "RechAusbMBcExtrageb-") 
							{
								strTKKontoCode = "RechAusbMBcExtrageb-Geb";
								nDM = nTKSoll - nTKTaVSt;
								strSH = "S";
								PalWriteFileKA();

								strTKKontoCode = "RechAusbMBcExtrageb-USt";
								nDM = nTKTaVSt;
								strSH = "S";
								PalWriteFileKA();

							}
							else if (strTKKontoCode == "RechPos-") 
							{
								strTKKontoCode = "RechPos-USt";
								nDM = nTKTaVSt;
								strSH = "S";
								PalWriteFileKA();

								strTKKontoCode = "RechPos-Porto";
								nDM = nTKSoll - nTKTaVSt;
								strSH = "S";
								PalWriteFileKA();

							}
							else if (strTKKontoCode == "Abschlag-") 
							{
								nTKTaVSt = (nTKSoll * 10000 / (100 + nMwSt)).Round() / 100;
								strTKKontoCode = "Abschlag-Zins";
								nDM = nTKSoll - nTKTaVSt;
								strSH = "S";
								PalWriteFileKA();

								strTKKontoCode = "Abschlag-USt";
								nDM = nTKTaVSt;
								strSH = "S";
								PalWriteFileKA();

							}
                            else
                            {
                                PalWriteFileKA();
                            }
                        }
						else
						{
							// Set strText = SalNumberToStrX( nDM, 2 ) || ';"' || strSH || '";"";;;"";' || SalNumberToStrX( nSoll, 0 ) || ';' || SalNumberToStrX( nHaben, 0 )
							//  || ';"' || strBuchSchl || '";' || SalStrLeftX( PalDateToStrTTMMJJ( dtRechDat ), 4) || ';"' || SalNumberToStrX( nRechNr, 0 ) || '";"";;"' || strBuchtext || '";0;"";;;'
							//  || SalStrRepeatX( ';""', 19 ) || ';;"";;"";;;;;'  || SalStrRepeatX( ';""', 40 ) || ';;;;"";;;;"";"";;"";;;;"";"";;"";;"";;"";"";;"";;;;;;"";;""'
							PalWriteFileKA();
						}
						nFetch = hSqlTR.FetchNext();
					}
					hSqlTR.Commit();
					if (bOk) 
					{
						hFile.Close();

						Int.PalMailInit();
						lsBody = @"Sehr geehrte Damen und Herren,

anbei erhalten Sie den Moveta-Kontoauszug im DATEV-EXTF-Format für die Zeit vom " + Int.PalDateToStrDE(dtMin) + " bis zum " + Int.PalDateToStrDE(dtMax) + @".
Bitte beachten Sie, dass der Export des Kontoauszuges sich noch im Testbetrieb befindet.
Daher fehlen bei einigen Buchungen eventuell noch Soll- und Habenkonto.

Bitte beachten Sie ferner, dass die Buchungen nur als Vorschläge unsererseits zu verstehen sind.
Verantwortlich für die tatsächlich korrekten Buchungen sind die Steuerberater(innen) sowie die Inhaber der Praxis.

Mit freundlichen Grüßen,

" + Var.strBNName + @"
moveta r.V.k.V.

Danziger Straße 1
31008 Elze
Telefon (0 50 68) 93 07-" + Var.strBNTel + @"
Telefax (0 50 68) 93 07-80
E-mail " + Var.strBNEMail + @"
Web www.moveta.de

Sparkasse Hildesheim · IBAN: DE13 2595 0130 0007 0065 73 · BIC: NOLADE21HIK";
						if (0 == Int.SendeMail(Const.MAIL_FORMAT_PLAIN_TEXT, "Ihre DATEV-Datei für Ihre(n) Steuerberater(in)", Var.strBNEMail, strDATEVMail, lsBody, strFile, Const.MAIL_PRIORITY_NORMAL, ref strError, "", Var.strBNName))
						{
							strVermerk = "DATEV-Export an " + strDATEVMail;
							Int.SqlImmed(@"INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :strBNZei, :dlgdivDruck.nArztNr, 0, 0,
:dlgdivDruck.strVermerk , SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
						}
						else
						{
							Sal.WaitCursor(false);
							Sal.MessageBox("Die E-Mail für Mitglied " + locals.nArztNr.ToString(0) + " an " + strDATEVMail + " konnte nicht versandt werden.", "Fehler: " + strError, Sys.MB_Ok);
						}
						Int.PalMailClose();
					}
					else
					{
						Sal.MessageBox("Die Übertragung der Datei " + strFile + @"
wurde abgebrochen.", "Achtung", Sys.MB_Ok);
					}
					hSqlTR.Disconnect();
					// 18.11.21 Ä1995
					hSqlLeist.Disconnect();
				}
				return bOk;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalGetNextDatevNr()
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlImmedSel("SELECT max(kdatevnr) INTO :dlgdivDruck.nDummy FROM k");
				if (this.nDummy == SalNumber.Null) 
				{
					this.nDummy = 9999;
				}
				this.nDummy = this.nDummy + 1;
				if (this.nDummy > 69999) 
				{
					this.nDummy = SalNumber.Null;
				}
				return this.nDummy;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bNeu"></param>
		/// <param name="dtAltDat"></param>
		/// <param name="strTabelle"></param>
		/// <returns></returns>
		public SalNumber PalDATEVExport(SalBoolean bNeu, SalDateTime dtAltDat, SalString strTabelle)
		{
			#region Local Variables
			SqlLocals.PalDATEVExportLocals locals = new SqlLocals.PalDATEVExportLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.bNeu = bNeu;
				locals.dtAltDat = dtAltDat;
				locals.strTabelle = strTabelle;

				Int.SqlConnection(ref hSqlDruck);
				// Call SqlConnection( hSqlDruck2 )
				if (locals.bNeu) 
				{
					dtDATEVDat = SalDateTime.Current;
				}
				else
				{
					dtDATEVDat = locals.dtAltDat;
				}

				// 01.04.22 + Mail JA Name aufnehmen:
				// 19.12.23 Ä2144 +, abilanzierer
				locals.strPSelect = @"SELECT aarztnr, adatevmail, adatevberaternr, adatevmandantennr, adatevcode, aname1, aname2, abilanzierer
INTO :dlgdivDruck.nArztNr, :dlgdivDruck.strDATEVMail, :dlgdivDruck.strDATEVBeraternr, :dlgdivDruck.strDATEVMandantennr, :dlgdivDruck.strDATEVCode, :dlgdivDruck.strName1, :dlgdivDruck.strName2, :dlgdivDruck.nBilanzierer
FROM a
WHERE aarztnr BETWEEN :dlgdivDruck.dfvon AND :dlgdivDruck.dfbis AND adatevmail IS NOT NULL ORDER BY aarztnr";
				hSqlDruck.PrepareAndExecute(locals.strPSelect);
				nFetchDruck = hSqlDruck.FetchNext();
				while (nFetchDruck != Sys.FETCH_EOF) 
				{
					this.SetStatusBarText("DATEV-Export: Arzt " + nArztNr.ToString(0));
					if (locals.bNeu) 
					{
						if (Int.SqlImmed(@"UPDATE rk SET rkdatevdate = :dlgdivDruck.dtDATEVDat WHERE rkarztnr = :dlgdivDruck.nArztNr AND rkrechnr < 999990 AND rkrechdat>=2021-05-01 AND rkdatevdate IS NULL
AND rkrechdat BETWEEN :dlgdivDruck.dfDvon.Value AND :dlgdivDruck.dfDbis.Value")) 
						{
						}
					}

					// 01.04.22
					strName1 = Int.PalStringToFileName(strName1);
					strName2 = Int.PalStringToFileName(strName2);
					if (strName2 != "") 
					{
						strName1 = strName1 + " - " + strName2;
					}

					if (locals.strTabelle == "AR") 
					{
						PalMakeFileDATEVAR(nArztNr, locals.bNeu, strName1);
					}
					else if (locals.strTabelle == "KA") 
					{
						PalMakeFileDATEVKA(nArztNr, locals.bNeu, strName1);
					}

					nFetchDruck = hSqlDruck.FetchNext();
				}
				// 18.02.14
				hSqlDruck.Commit();
				// Call SqlCommit( hSqlDruck2 )
				hSqlDruck.Disconnect();
				// Call SqlDisconnect( hSqlDruck2 )
				Sal.MessageBox("Der DATEV-Export ist abgeschlossen.", "DATEV-Export", (Sys.MB_Ok | Sys.MB_IconAsterisk));

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPMwSt"></param>
		/// <returns></returns>
		public SalNumber PalGetSteuerSchl(SalNumber nPMwSt)
		{
			#region Local Variables
			SalNumber nPSchl = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				nPSchl = 0;
				if (nPMwSt == 0) 
				{
					nPSchl = 1;
				}
				else if (nPMwSt == 7) 
				{
					nPSchl = 2;
				}
				else if (nPMwSt == 19) 
				{
					nPSchl = 3;
				}
				else if (nPMwSt == 16) 
				{
					nPSchl = 5;
				}
				else
				{
					nPSchl = 49;
				}
				return nPSchl;
			}
			#endregion
		}
		// Function: PalMakeFileDATEV
		// Description:
		// Returns
		// Boolean:
		// Parameters
		// Number: nArztNr
		// Boolean: bNeu
		// String: strName
		// Static Variables
		// Local variables
		// Boolean: bOk
		// String: strHeader
		// String: strFile
		// 18.11.21 Ä1995
		// Sql Handle: hSqlLeist
		// Number: nFetchLeist
		// Actions
		// Set strHeader = 'Umsatz (ohne Soll/Haben-Kz);Soll/Haben-Kennzeichen;WKZ Umsatz;Kurs;Basis-Umsatz;WKZ Basis-Umsatz;Konto;Gegenkonto (ohne BU-Schlüssel);BU-Schlüssel;Belegdatum;Belegfeld 1;Belegfeld '
		// Set strHeader = strHeader || '2;Skonto;Buchungstext;Postensperre;Diverse '
		// Set strHeader = strHeader || 'Adressnummer;Geschäftspartnerbank;Sachverhalt;Zinssperre;Beleglink;Beleginfo - Art 1;Beleginfo - Inhalt 1;Beleginfo - Art 2;Beleginfo - Inhalt 2;Beleginfo - Art 3;Beleginfo - Inhalt 3;Beleginfo - Art '
		// Set strHeader = strHeader || '4;Beleginfo - Inhalt 4;Beleginfo - '
		// Set strHeader = strHeader || 'Art 5;Beleginfo - Inhalt 5;Beleginfo - Art 6;Beleginfo - Inhalt 6;Beleginfo - Art 7;Beleginfo - Inhalt 7;Beleginfo - Art 8;Beleginfo - Inhalt 8;KOST1 - Kostenstelle;KOST2 - Kostenstelle;Kost-Menge'
		// Set strHeader = strHeader || ';EU-Land u. UStID;EU-Steuersatz;Abw. '
		// Set strHeader = strHeader || 'Versteuerungsart;Sachverhalt L+L;Funktionsergänzung L+L;BU 49 Hauptfunktionstyp;BU 49 Hauptfunktionsnummer;BU 49 Funktionsergänzung;Zusatzinformation - Art 1;Zusatzinformation- Inhalt 1;Zusatzinformation - '
		// Set strHeader = strHeader || 'Art 2;Zusatzinformation- '
		// Set strHeader = strHeader || 'Inhalt 2;Zusatzinformation - Art 3;Zusatzinformation- Inhalt 3;Zusatzinformation - Art 4;Zusatzinformation- Inhalt 4;Zusatzinformation - Art 5;Zusatzinformation- Inhalt 5;Zusatzinformation - Art '
		// Set strHeader = strHeader || '6;Zusatzinformation- Inhalt '
		// Set strHeader = strHeader || '6;Zusatzinformation - Art 7;Zusatzinformation- Inhalt 7;Zusatzinformation - Art 8;Zusatzinformation- Inhalt 8;Zusatzinformation - Art 9;Zusatzinformation- Inhalt 9;Zusatzinformation - Art '
		// Set strHeader = strHeader || '10;Zusatzinformation- Inhalt '
		// Set strHeader = strHeader || '10;Zusatzinformation - Art 11;Zusatzinformation- Inhalt 11;Zusatzinformation - Art 12;Zusatzinformation- Inhalt 12;Zusatzinformation - Art 13;Zusatzinformation- Inhalt 13;Zusatzinformation - Art '
		// Set strHeader = strHeader || '14;Zusatzinformation- Inhalt '
		// Set strHeader = strHeader || '14;Zusatzinformation - Art 15;Zusatzinformation- Inhalt 15;Zusatzinformation - Art 16;Zusatzinformation- Inhalt 16;Zusatzinformation - Art 17;Zusatzinformation- Inhalt 17;Zusatzinformation - Art '
		// Set strHeader = strHeader || '18;Zusatzinformation- Inhalt '
		// Set strHeader = strHeader || '18;Zusatzinformation - Art 19;Zusatzinformation- Inhalt 19;Zusatzinformation - Art 20;Zusatzinformation- Inhalt 20;Stück;Gewicht;Zahlweise;Forderungsart;Veranlagungsjahr;Zugeordnete '
		// Set strHeader = strHeader || 'Fälligkeit;Skontotyp;Auftragsnummer;Buchungstyp;Ust-'
		// Set strHeader = strHeader || 'Schlüssel (Anzahlungen);EU-Land (Anzahlungen);Sachverhalt L+L (Anzahlungen);EU-Steuersatz (Anzahlungen);Erlöskonto (Anzahlungen);Herkunft-Kz;Leerfeld;KOST-'
		// Set strHeader = strHeader || 'Datum;Mandatsreferenz;Skontosperre;Gesellschaftername;Beteiligtennummer;Identifikationsnummer;Zeichnernummer;Postensperre bis;Bezeichnung SoBil-Sachverhalt;Kennzeichen SoBil-'
		// Set strHeader = strHeader || 'Buchung;Festschreibung;Leistungsdatum;Datum '
		// Set strHeader = strHeader || 'Zuord.Steuerperiode;Fälligkeit;Generalumkehr (GU);Steuersatz;Land'
		// 18.11.21 Ä1995
		// Call SqlConnection( hSqlLeist )
		// Call SqlPrepar( hSqlLeist, 'SELECT MIN(rpdatum) INTO :dlgdivDruck.dtLeistDat FROM rp WHERE rparztnr = :dlgdivDruck.nArztNr AND rphalternr = :dlgdivDruck.nHalterNr AND rprechnr = :dlgdivDruck.nRechNr' )
		// Call SqlImmedSel( 'SELECT ds5stellig, dsforderung, dsgeg0, dsgeg5, dsgeg7, dsgeg16, dsgeg19, dsskr
		// INTO :dlgdivDruck.n5stellig, :dlgdivDruck.nForderung, :dlgdivDruck.nGeg0, :dlgdivDruck.nGeg5, :dlgdivDruck.nGeg7, :dlgdivDruck.nGeg16, :dlgdivDruck.nGeg19, :dlgdivDruck.strSKR
		// FROM ds
		// WHERE dscode = :dlgdivDruck.strDATEVCode' )
		// !
		// 15.05.19 E-Mailo Frau Hähnel vom 6.5.19
		// Set strFile = Const.PATH_DATEV || SqlDatabase || '\\ EXTF_Buchungsstapel_Mitglied_' || SalNumberToStrX( nArztNr, 0 ) || '_' || strName|| '_Kontoauszug_' || PalDateToStrJJJJMMTThhmmsst( dtDATEVDat ) || '.csv'
		// If bNeu
		// Set strSelect = 'SELECT tkarztnr, tkhalternr, tkrechnr, tkbuchtext, tkbeldat, tkprozmwst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmporto, tkdmabr, tkdmzazins, tksoll, tkhaben
		// INTO :dlgdivDruck.nArztNr, :dlgdivDruck.nHalterNr, :dlgdivDruck.nRechNr, :dlgdivDruck.strBuchtext, :dlgdivDruck.dtRechDat, :dlgdivDruck.nMwSt,
		// :dlgdivDruck.nZaLeis, :dlgdivDruck.nZaArzn, :dlgdivDruck.nZaMahn, :dlgdivDruck.nPorto, :dlgdivDruck.nAbr, :dlgdivDruck.nZaZins, :dlgdivDruck.nSoll, :dlgdivDruck.nHaben
		// FROM tk
		// WHERE tkarztnr = ' || SalNumberToStrX( nArztNr, 0 ) || '
		// ORDER BY tkbeldat'
		// Else
		// Set strSelect = 'SELECT tkaarztnr, tkahalternr, tkarechnr, tkabuchtext, tkabeldat, tkaprozmwst, tkadmzaleis, tkadmzaarzn, tkadmzamahn, tkadmporto, tkadmabr, tkadmzazins, tkasoll, tkahaben
		// INTO :dlgdivDruck.nArztNr, :dlgdivDruck.nHalterNr, :dlgdivDruck.nRechNr, :dlgdivDruck.strBuchtext, :dlgdivDruck.dtRechDat, :dlgdivDruck.nMwSt,
		// :dlgdivDruck.nZaLeis, :dlgdivDruck.nZaArzn, :dlgdivDruck.nZaMahn, :dlgdivDruck.nPorto, :dlgdivDruck.nAbr, :dlgdivDruck.nZaZins, :dlgdivDruck.nSoll, :dlgdivDruck.nHaben
		// FROM tka
		// WHERE tkaarztnr = ' || SalNumberToStrX( nArztNr, 0 ) || ' AND tkadruckdatum = :dlgdivDruck.dtDATEVDat
		// ORDER BY tkabeldat'
		// Set strText = ''
		// Set bOk = TRUE
		// If SalFileOpen( hFile, strFile, OF_Exist )
		// Call SalFileOpen( hFile, strFile, OF_Delete )
		// Set nFileType = OF_Create
		// Else
		// Set nFileType = OF_Create
		// If bNeu
		// Call SqlIstDa( 'FROM tk
		// WHERE tkarztnr = ' || SalNumberToStrX( nArztNr, 0 ) || '
		// ORDER BY tkbeldat', bOk )
		// Else
		// Call SqlIstDa( 'FROM tka
		// WHERE tkaarztnr = ' || SalNumberToStrX( nArztNr, 0 ) || ' AND tkadruckdatum = :dlgdivDruck.dtDATEVDat
		// ORDER BY tkabeldat', bOk )
		// Call SalStatusSetText( hWndForm, 'Erstelle ' || strFile )
		// If bOk
		// Call SqlImmedSel( 'SELECT MIN(rpdatum), MAX( rpdatum ) INTO :dlgdivDruck.dtMin, :dlgdivDruck.dtMax FROM rk, rp
		// WHERE rkarztnr = ' || SalNumberToStrX( nArztNr, 0 ) || ' AND rkarztnr=rparztnr AND rkhalternr=rphalternr AND rkrechnr=rprechnr AND rkdatevdate = :dlgdivDruck.dtDATEVDat AND rkrechnr < 999990
		// AND rkrechdat BETWEEN :dlgdivDruck.dfDvon AND :dlgdivDruck.dfDbis ')
		// Set bOk = SalFileOpen( hFile, strFile, nFileType|OF_Write|OF_Text )
		// If bOk
		// 29.01.18 Ä1683
		// Call SalFilePutStr(hFile, '"EXTF";510;21;"Buchungsstapel";9;' || PalDateToStrJJJJMMTThhmmsst( SalDateCurrent(  ) ) || '00;;"PE";"";"";'
		//  || strDATEVBeraternr || ';' || strDATEVMandantennr || ';' || PalDateToStrJJJJMMTT( SalDateYearBegin( dtDATEVDat) ) || ';4;'
		//  || PalDateToStrJJJJMMTT( dtMin ) || ';' || PalDateToStrJJJJMMTT( dtMax) || ';"Kontoauszug";"' || strBNZei || '";1;0;1;"EUR";;"";;;"' || strSKR || '";;;"";"Moveta"')
		// Call SalFilePutStr(hFile, strHeader)
		// Set bOk = TRUE
		// Call SqlConnection( hSqlTR )
		// Call SqlHandleExec(hSqlTR, strSelect, 'Funktion: MakeFile', nCount)
		// Call SqlFetchNext(hSqlTR,nFetch)
		// While nFetch != FETCH_EOF And bOk
		// If nDM < 0
		// Set strSH = 'H'
		// Set strBuchSchl = ''
		// Set nDM = nDM * -1
		// Else
		// Set strSH = 'S'
		// Set strBuchSchl = ''
		// 04.12.23 Ä2123
		// Set strBuchSchl = SalNumberToStrX( PalGetSteuerSchl( nMwSt ), 0 )
		// 05.05.21 Ä1952
		// Set nDM =  nDM + (SalNumberRound( nDM * nMwSt ) / 100)
		// If nMwSt = 0
		// Set nGegKonto = nGeg0
		// Else If nMwSt= 5
		// Set nGegKonto = nGeg5
		// Else If nMwSt = 7
		// Set nGegKonto = nGeg7
		// Else If nMwSt = 16
		// Set nGegKonto = nGeg16
		// Else
		// Set nGegKonto = nGeg19
		// 18.11.21 Ä1995
		// Set dtLeistDat = DATETIME_Null
		// Call SqlExecut( hSqlLeist, 'erstes Leistungsdatum holen für' || SalNumberToStrX( nArztNr, 0 ) || ' : ' || SalStrLeftX(PalDateToStrTTMMJJJJhhmmss(dtRechDat),10) || '- ' || strBuchtext )
		// Call SqlFetchNext( hSqlLeist, nFetchLeist )
		// If dtLeistDat = DATETIME_Null
		// Set dtLeistDat = dtRechDat
		// Set strBuchtext = strBuchtext || ' ' || SalNumberToStrX( nArztNr, 0 ) || '/R' || SalNumberToStrX( nRechNr, 0 )
		// Set strText = SalNumberToStrX( nDM, 2 ) || ';"' || strSH || '";"";;;"";' || SalNumberToStrX( nForderung, 0 ) || ';' || SalNumberToStrX( nGegKonto, 0 )
		//  || ';"' || strBuchSchl || '";' || SalStrLeftX( PalDateToStrTTMMJJ( dtRechDat ), 4) || ';"' || SalNumberToStrX( nRechNr, 0 ) || '";"";;"' || strBuchtext || '";0;"";;;'
		//  || SalStrRepeatX( ';""', 19 ) || ';;"";;"";;;;;'  || SalStrRepeatX( ';""', 40 ) || ';;;;"";;;;"";"";;"";;;;"";"";;"";;"";;"";"";;"";;;' || PalDateToStrDatevTTMMJJJJ( dtLeistDat ) || ';;;"";;""'
		// Call SalStatusSetText( hWndForm, 'DATEV: Mitglied ' || SalNumberToStrX( nArztNr, 0 ) || ' : ' || SalStrLeftX(PalDateToStrTTMMJJJJhhmmss(dtRechDat),10) || '- ' || strBuchtext)
		// While Not SalFilePutStr(hFile, strText) And bOk
		// Call SalFileClose(hFile)	! 15.05.119 auskommentiert
		// If IDNO = SalMessageBox('Schreibfehler. Erneut versuchen?','Achtung',MB_YesNo)
		// Set bOk = FALSE
		// Else
		// Call SalFileOpen( hFile, dfLocalDir, OF_Write|OF_Text )
		// Set strKBText = ''
		// Call SqlFetchNext(hSqlTR, nFetch)
		// Call SqlCommit( hSqlTR )
		// If bOk
		// Call SalFileClose(hFile)
		// Call PalMailInit(  )
		// Set lsBody = 'Sehr geehrte Damen und Herren,
		// 
		// anbei erhalten Sie das Moveta-Rechnungsausgangsbuch im DATEV-EXTF-Format für die Zeit vom ' || PalDateToStrDE( dtMin ) || ' bis zum ' || PalDateToStrDE( dtMax ) || '.
		// 
		// Mit freundlichen Grüßen,
		// 
		// ' || strBNName || '
		// moveta r.V.k.V.
		// 
		// Danziger Straße 1
		// 31008 Elze
		// Telefon (0 50 68) 93 07-' || strBNTel || '
		// Telefax (0 50 68) 93 07-80
		// E-mail ' || strBNEMail || '
		// Web www.moveta.de
		// 
		// Sparkasse Hildesheim · IBAN: DE13 2595 0130 0007 0065 73 · BIC: NOLADE21HIK'
		// If 0 = SendeMail( MAIL_FORMAT_PLAIN_TEXT, 'Ihre DATEV-Datei für Ihre(n) Steuerberater(in)', strBNEMail, strDATEVMail, lsBody, strFile, MAIL_PRIORITY_NORMAL, strError )
		// Set strVermerk = 'DATEV-Export an ' || strDATEVMail
		// Call SqlImmed('INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
		// VALUES (:strBNZei, :strBNZei, :dlgdivDruck.nArztNr, 0, 0,
		// :dlgdivDruck.strVermerk , SYSDATE, NULL, \'J\', \'TN\', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)')
		// Else
		// Call SalWaitCursor( FALSE )
		// Call SalMessageBox('Die E-Mail für Mitglied ' || SalNumberToStrX( nArztNr, 0 ) || ' an ' || strDATEVMail || ' konnte nicht versandt werden.', 'Fehler: ' || strError, MB_Ok)
		// Call PalMailClose(  )
		// Else
		// Call SalMessageBox('Die Übertragung der Datei ' || strFile || '
		// wurde abgebrochen.','Achtung',MB_Ok)
		// Call SqlDisconnect( hSqlTR )
		// 18.11.21 Ä1995
		// Call SqlDisconnect( hSqlLeist )
		// Return bOk
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalWriteFileKA()
		{
			#region Actions
			using (new SalContext(this))
			{
                nTKSoll = 0;
                nTKHaben = 0;

                // Call SqlPrepar( hSqlLeist, 'SELECT kosoll, kohaben
                // INTO :dlgdivDruck.nKOSoll, :dlgdivDruck.nKOHaben
                // FROM ko
                // WHERE kocode = :dlgdivDruck.strTKKontoCode AND kobilanzierer = :dlgdivDruck.nBilanzierer AND kokontenrahmen = :dlgdivDruck.strDATEVCode' )
                Int.SqlExecut(hSqlLeist, "Kontierung holen für" + strTKKontoCode);
                nFetchLeist = hSqlLeist.FetchNext();
                // 04.12.23 Ä2123
                strBuchSchl = PalGetSteuerSchl(nMwSt).ToString(0);

                strText = nDM.ToString(2) + ";\"" + strSH + "\";\"\";;;\"\";" + nKOSoll.ToString(0) + ";" + nKOHaben.ToString(0) + ";\"" + strBuchSchl + "\";" + Int.PalDateToStrTTMMJJ(dtRechDat).Left(4) + ";\"" + nRechNr.ToString(0) + "\";\"\";;\"" + strBuchtext +
                "\";0;\"\";;;" + ((SalString)";\"\"").Repeat(19) + ";;\"\";;\"\";;;;;" + ((SalString)";\"\"").Repeat(40) + ";;;;\"\";;;;\"\";\"\";;\"\";;;;\"\";\"\";;\"\";;\"\";;\"\";\"\";;\"\";;;;;;\"\";;\"\"";

                this.SetStatusBarText("DATEV Kontoauszug: Mitglied " + nArztNr.ToString(0) + " : " + Int.PalDateToStrTTMMJJJJhhmmss(dtRechDat).Left(10) + "- " + strBuchtext);
                while (!(hFile.PutString(strText)) && bOk)
                {
                    // Call SalFileClose(hFile)	! 15.05.119 auskommentiert
                    if (Sys.IDNO == Sal.MessageBox("Schreibfehler. Erneut versuchen?", "Achtung", Sys.MB_YesNo))
                    {
                        bOk = false;
                    }
                    // Else
                    // Call SalFileOpen( hFile, dfLocalDir, OF_Write|OF_Text )
                }
            }

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// dlgdivDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgdivDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.dlgdivDruck_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.dlgdivDruck_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgdivDruck_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfZins.Number = 8;
			this.dfTVZins.Number = 0.5m;
			this.dfMitarb.Text = Var.strBNZei;
			// 14.03.22 Ä1910
			Int.SqlConnection(ref this.hSqlDruck);
			if (this.cmbELMitarb.ClearList()) 
			{
				if (this.hSqlDruck.PrepareAndExecute("SELECT bnzei INTO :dlgdivDruck.strPZei FROM bn order by bnzei")) 
				{
					while (this.hSqlDruck.FetchNext(ref this.nFetch)) 
					{
						this.cmbELMitarb.AddListItem(this.strPZei);
						// Call SalListAdd(cmbELMitarb, strPZei)
					}
					this.hSqlDruck.Commit();
				}
			}
			this.hSqlDruck.Disconnect();

			this.dfDvon.Value = new SalDateTime(1900, 1, 1);
			this.dfDbis.Value = new SalDateTime(2099, 12, 31);
			Sal.WaitCursor(false);
			// 05.02.18 Ä1648
			if (Var.strBNAbtlg != "GF" && Var.strBNZei != "KE") 
			{
				Sal.HideWindow(this.rbAltersstruktur);
				this.cmbAltersstruktur.HideWindow();
			}
			// 12.02.18 Ä1704
			this.cbWVmitUV.Checked = true;
			// 05.09.18
			this.cmbAltersstruktur.Text = "- Alles -";
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgdivDruck_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.EnableWindow(App.frmMain.pbDrucke);
			#endregion
		}
		
		/// <summary>
		/// dfvon WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfvon_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfvon_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfvon_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfvon.IsEmpty()) 
			{
				this.dfvon.Number = 1;
			}
			#endregion
		}
		
		/// <summary>
		/// dfbis WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfbis_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfbis_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfbis_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfbis.IsEmpty()) 
			{
				if (this.dfvon.Number == 1) 
				{
					this.dfbis.Number = 9999;
				}
				else
				{
					this.dfbis.Number = this.dfvon.Number;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfHvon WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHvon_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHvon_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHvon_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfHvon.IsEmpty()) 
			{
				this.dfHvon.Number = 1;
			}
			#endregion
		}
		
		/// <summary>
		/// dfHbis WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHbis_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHbis_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHbis_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfHbis.IsEmpty()) 
			{
				this.dfHbis.Number = this.dfHvon.Number;
				if (this.dfHbis.Number == 1) 
				{
					this.dfHbis.Number = 99999;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfDvon WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDvon_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfDvon_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDvon_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sal.IsNull(this.dfDvon)) 
			{
				this.dfDvon.Value = new SalDateTime(1900, 1, 1);
			}
			#endregion
		}
		
		/// <summary>
		/// dfDbis WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDbis_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfDbis_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDbis_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sal.IsNull(this.dfDbis)) 
			{
				this.dfDbis = this.dfDvon;
				if (this.dfDvon.Value == new SalDateTime(1900, 1, 1)) 
				{
					this.dfDbis.Value = new SalDateTime(2100, 12, 31);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// rbKontoauszVM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbKontoauszVM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbKontoauszVM_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbKontoauszVM_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalFillKontoauszug();
			#endregion
		}
		
		/// <summary>
		/// rbKontoauszVMNagelfeld WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbKontoauszVMNagelfeld_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbKontoauszVMNagelfeld_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbKontoauszVMNagelfeld_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalFillKontoauszug();
			#endregion
		}
		
		/// <summary>
		/// rbRechnungenVM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbRechnungenVM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbRechnungenVM_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbRechnungenVM_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalFillKontoauszug();
			#endregion
		}
		
		/// <summary>
		/// rbAusbVM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbAusbVM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbAusbVM_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbAusbVM_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalFillKontoauszug();
			#endregion
		}
		
		/// <summary>
		/// rbZahlungslisteVM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbZahlungslisteVM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbZahlungslisteVM_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbZahlungslisteVM_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalFillKontoauszug();
			#endregion
		}
		
		/// <summary>
		/// rbzusMeldungVM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbzusMeldungVM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbzusMeldungVM_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbzusMeldungVM_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalFillKontoauszug();
			#endregion
		}
		
		/// <summary>
		/// rbDATEValt WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbDATEValt_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbDATEValt_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbDATEValt_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalFillDATEV();
			#endregion
		}
		
		/// <summary>
		/// rbDATEVTKalt WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbDATEVTKalt_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbDATEVTKalt_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbDATEVTKalt_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalFillDATEV();
			#endregion
		}
		
		/// <summary>
		/// rbSchuldsaldo WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbSchuldsaldo_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbSchuldsaldo_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbSchuldsaldo_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalFillKontoauszug();
			#endregion
		}
		
		/// <summary>
		/// rbPharmalisteVM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbPharmalisteVM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbPharmalisteVM_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbPharmalisteVM_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalFillKontoauszug();
			#endregion
		}
		
		/// <summary>
		/// rb9000VM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rb9000VM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rb9000VM_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rb9000VM_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalFillKontoauszug();
			#endregion
		}
		
		/// <summary>
		/// cmbKontoDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbKontoDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_SetFocus:
					this.cmbKontoDruck_OnSAM_SetFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_SetFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbKontoDruck_OnSAM_SetFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(this.rbKontoauszVM.Checked) && !(this.rbRechnungenVM.Checked) && !(this.rb9000VM.Checked) && !(this.rbzusMeldungVM.Checked) && !(this.rbSchuldsaldo.Checked) && !(this.rbAusbVM.Checked) && !(this.rbKontoauszVMNagelfeld.Checked) && !(
			this.rbZahlungslisteVM.Checked) && !(this.rbPharmalisteVM.Checked)) 
			{
				this.rbKontoauszVM.Checked = true;
			}
			Sal.PostMsg(this.rbKontoauszVM, Sys.SAM_Click, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// dfMitarb WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMitarb_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_AnyEdit:
					this.dfMitarb_OnSAM_AnyEdit(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_AnyEdit event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMitarb_OnSAM_AnyEdit(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.rbZettel.Checked = true;
			#endregion
		}
		
		/// <summary>
		/// pkOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pkOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pkOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pkOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalWaitCursor( TRUE )
			if (this.dfvon.IsEmpty()) 
			{
				this.dfvon.Number = 1;
			}
			if (this.dfbis.IsEmpty()) 
			{
				if (this.dfvon.Number == 1) 
				{
					this.dfbis.Number = 9999;
				}
				else
				{
					this.dfbis.Number = this.dfvon.Number;
				}
			}
			if (this.dfHvon.IsEmpty()) 
			{
				this.dfHvon.Number = 1;
			}
			if (this.dfHbis.IsEmpty()) 
			{
				this.dfHbis.Number = this.dfHvon.Number;
				if (this.dfHbis.Number == 1) 
				{
					this.dfHbis.Number = 99999;
				}
			}
			if (Sal.IsNull(this.dfDvon)) 
			{
				this.dfDvon.Value = new SalDateTime(1900, 1, 1);
			}
			if (Sal.IsNull(this.dfDbis)) 
			{
				this.dfDbis = this.dfDvon;
				if (this.dfDvon.Value == new SalDateTime(1900, 1, 1)) 
				{
					this.dfDbis.Value = new SalDateTime(2100, 12, 31);
				}
			}
			if (this.cbImmer.Checked == true) 
			{
				App.frmMain.nImmer = 1;
			}
			else
			{
				App.frmMain.nImmer = 0;
			}
			App.frmMain.nArztVon = this.dfvon.Number;
			App.frmMain.nArztBis = this.dfbis.Number;
			App.frmMain.nHalterVon = this.dfHvon.Number;
			App.frmMain.nHalterBis = this.dfHbis.Number;
			App.frmMain.dtDatVon = this.dfDvon.Value;
			App.frmMain.dtDatBis = this.dfDbis.Value;
			App.frmMain.dtDatVM = ((SalString)this.cmbKontoDruck.Text).ToDate();
			if (this.rbTAEti.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle TA-Etiketten -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'ETITA'
				// Call PalReport(frmMain,'ETITA.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt',
				// 'ArztNr, AName1, AName2, AStr, AOrt',nErr)
				// Call SalWaitCursor( FALSE )
				// 11.12.18 Ä1813
				this.strDummy = "";
				if (this.cbArztEtiRSSa.Checked) 
				{
					this.strDummy = "RSSa";
				}

				dlgLlDruck.ModalDialog(App.frmMain, "Mitglieder.lbl", this.strDummy);
			}
			else if (this.rbTAEtiKo.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle TA-Etiketten -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'ETITAKO'
				// Call PalReport(frmMain,'ETITA.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt',
				// 'ArztNr, AName1, AName2, AStr, AOrt',nErr)
				// Call SalWaitCursor( FALSE )
				dlgLlDruck.ModalDialog(App.frmMain, "Mitglieder.lbl", "Kontoauszug");
			}
			else if (this.rbTAListe.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle TA-Liste -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'TALISTE'
				// Call PalReport(frmMain,'TALISTE.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt,
				// :frmMain.strBank, :frmMain.strBLZ, :frmMain.strKonto, :frmMain.dtEintritt, :frmMain.strZust',
				// 'ArztNr, AName1, AName2, AStr, AOrt,
				// Bank, BLZ, Konto, Eintritt, Zust',nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Mitglieder.lst", "");
			}
			else if (this.rbTHEti.Checked == true) 
			{
				this.dfbis.Number = this.dfvon.Number;
				// Call SalStatusSetText(hWndForm,'Erstelle TH-Etiketten -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'ETITH'
				// Call PalReport(frmMain,'ETITH.QRP',
				// ':frmMain.nTANr,:frmMain.nTHNr,:frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand',
				// 'ArztNr, HalterNr, HName1, HName2, HStr, HOrt, HLand',nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Halter.lbl", "");
			}
			else if (this.rbTHListe.Checked == true) 
			{
				this.dfbis.Number = this.dfvon.Number;
				// Call SalStatusSetText(hWndForm,'Erstelle TH-Liste -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'THLISTE'
				// Call PalReport(frmMain,'THLISTE.QRP',
				// ':frmMain.nTANr,:frmMain.nTHNr,:frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand',
				// 'ArztNr, HalterNr, HName1, HName2, HStr, HOrt, HLand',nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Halter.lst", "");
			}
			else if (this.rbTHListeBEZ.Checked == true)  // 10.03.14 Ä1006
			{
				this.dfbis.Number = this.dfvon.Number;
				dlgLlDruck.ModalDialog(App.frmMain, "Halter.lst", "BEZ");
			}
			else if (this.rbKontoausz.Checked == true) 
			{
				// 16.12.11 Ä679
				// If cbExtradrucke
				// Set frmMain.strReportName = 'KONTOAUSED'
				// Else
				// Set frmMain.strReportName = 'KONTOAUS'

				// Set frmMain.strReportName = 'KONTOAUS'
				// Call SalStatusSetText(hWndForm,'Erstelle Kontoauszüge -  Bitte warten !')
				// Set frmMain.nErr = 1
				// 05.06.08 F378 + strBuchtextGrp	30.10.09 OF330 + nTANrL / 28.10.10 OTÄ500 + 10% und 20%
				// Call PalReport( frmMain,'KONTOAUS.QRP',
				// ':frmMain.nTANr, :frmMain.nTANrL, :frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt,
				// :frmMain.strTASVN1,:frmMain.strTASVN2,:frmMain.strTASVStr,:frmMain.strTASVOrt,
				// :frmMain.nTHNr,:frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand,
				// :frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.strBuchTextGrp, :frmMain.nRechNr,
				// :frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins,
				// :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll, :frmMain.nDMHaben,  :frmMain.nSoll, :frmMain.nHaben,
				// :frmMain.strLA, :frmMain.nProz, :frmMain.nDMUeberw, :frmMain.nDMmitVorstV,
				// :frmMain.nDMmitVorstS, :frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
				// :frmMain.nVorVSt, :frmMain.nVorMwSt, :frmMain.nAussenst,
				// :frmMain.nSuDM19L, :frmMain.nSuDM16L, :frmMain.nSuDM15L, :frmMain.nSuDM7L, :frmMain.nSuDM0L, :frmMain.nSuDMaL, :frmMain.nSuDMAuslL,
				// :frmMain.nSuSt19L, :frmMain.nSuSt16L, :frmMain.nSuSt15L, :frmMain.nSuSt7L, :frmMain.nSuSt0L, :frmMain.nSuStaL,:frmMain.nSuStAuslL,
				// :frmMain.nSuDM19A, :frmMain.nSuDM16A, :frmMain.nSuDM15A, :frmMain.nSuDM7A, :frmMain.nSuDM0A, :frmMain.nSuDMaA,:frmMain.nSuDMAuslA,
				// :frmMain.nSuSt19A, :frmMain.nSuSt16A, :frmMain.nSuSt15A, :frmMain.nSuSt7A, :frmMain.nSuSt0A, :frmMain.nSuStaA,:frmMain.nSuStAuslA,
				// :frmMain.nSuDM19MB, :frmMain.nSuDM16MB, :frmMain.nSuDM15MB, :frmMain.nSuDM7MB, :frmMain.nSuDM0MB, :frmMain.nSuDMaMB,
				// :frmMain.nSuSt19MB, :frmMain.nSuSt16MB, :frmMain.nSuSt15MB, :frmMain.nSuSt7MB, :frmMain.nSuSt0MB, :frmMain.nSuStaMB,
				// :frmMain.nSuDMRg, :frmMain.nSuDMMg, :frmMain.nSuDMa, :frmMain.nSuDMaSt, :frmMain.nSuVSt, :frmMain.nSuStorno,
				// :frmMain.dtCurrentDate, :frmMain.nReverse,
				// :frmMain.nSuDM10L, :frmMain.nSuSt10L, :frmMain.nSuDM10A, :frmMain.nSuSt10A, :frmMain.nSuDM10MB, :frmMain.nSuSt10MB,
				// :frmMain.nSuDM20L, :frmMain.nSuSt20L, :frmMain.nSuDM20A, :frmMain.nSuSt20A, :frmMain.nSuDM20MB, :frmMain.nSuSt20MB',
				// 'ArztNr, ArztNrL, AName1, AName2, AStr, AOrt,
				// ASVName1, ASVName2, ASVStr, ASVOrt,
				// HalterNr, HName1, HName2, HStr, HOrt, HLand,
				// BuchDat, BuchText, BuchTextGrp, RechNr,
				// DMRech, DMPorto, DMMahn, DMZins, DMMwSt, DMVorst, DMSoll, DMHaben, Soll, Haben,
				// LA, Proz, DMUeberw, DMmitVorstV, DMmitVorstS, VorRech, VorSoll, VorHaben, VorVSt, VorMwSt, Auss,
				// SuDM19L, SuDM16L, SuDM15L, SuDM7L, SuDM0L, SuDMaL, SuDMAuslL,
				// SuSt19L, SuSt16L, SuSt15L, SuSt7L, SuSt0L, SuStaL, SuStAuslL,
				// SuDM19A, SuDM16A, SuDM15A, SuDM7A, SuDM0A, SuDMaA, SuDMAuslA,
				// SuSt19A, SuSt16A, SuSt15A, SuSt7A, SuSt0A, SuStaA, SuStAuslA,
				// SuDM19MB, SuDM16MB, SuDM15MB, SuDM7MB, SuDM0MB, SuDMaMB,
				// SuSt19MB, SuSt16MB, SuSt15MB, SuSt7MB, SuSt0MB, SuStaMB,
				// SuDMRg, SuDMMg, SuDMa, SuDMaSt, SuVSt, SuStorno, Druckdatum, Reverse,
				// SuDM10L, SuSt10L, SuDM10A, SuSt10A, SuDM10MB, SuSt10MB,
				// SuDM20L, SuSt20L, SuDM20A, SuSt20A, SuDM20MB, SuSt20MB',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				// 16.12.11 Ä679
				if (this.cbExtradrucke.Checked) 
				{
					dlgLlDruck.ModalDialog(App.frmMain, "Kontoauszug.lst", "ED");
				}
				else
				{
					dlgLlDruck.ModalDialog(App.frmMain, "Kontoauszug.lst", "");
				}
			}
			// Else If rbKontoauszAlt = TRUE
			// Call SalStatusSetText(hWndForm,'Erstelle Kontoauszüge Vormonate -  Bitte warten !')
			// Set frmMain.nErr = 1
			// Set frmMain.strReportName = 'KONTOAUSALT'
			// Call PalReport( frmMain,'KONTOAUA.QRP',
			// ':frmMain.nTANr,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt,
			// :frmMain.nTHNr,:frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt,
			// :frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nRechNr,
			// :frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins,
			// :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll, :frmMain.nDMHaben,  :frmMain.nSoll, :frmMain.nHaben,
			// :frmMain.strLA, :frmMain.nProz, :frmMain.nDMUeberw, :frmMain.nDMmitVorstV,
			// :frmMain.nDMmitVorstS, :frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
			// :frmMain.nVorVSt, :frmMain.nVorMwSt, :frmMain.nAussenst,
			// :frmMain.nSuDM16L, :frmMain.nSuDM15L, :frmMain.nSuDM7L, :frmMain.nSuDM0L, :frmMain.nSuDMaL,
			// :frmMain.nSuSt16L, :frmMain.nSuSt15L, :frmMain.nSuSt7L, :frmMain.nSuSt0L, :frmMain.nSuStaL,
			// :frmMain.nSuDM16A, :frmMain.nSuDM15A, :frmMain.nSuDM7A, :frmMain.nSuDM0A, :frmMain.nSuDMaA,
			// :frmMain.nSuSt16A, :frmMain.nSuSt15A, :frmMain.nSuSt7A, :frmMain.nSuSt0A, :frmMain.nSuStaA,
			// :frmMain.nSuDMRg, :frmMain.nSuDMMg, :frmMain.nSuDMa, :frmMain.nSuDMaSt, :frmMain.nSuVSt, :frmMain.nSuStorno,
			// , :frmMain.dtCurrentDate',
			// 'ArztNr, AName1, AName2, AStr, AOrt,
			// HalterNr, HName1, HName2, HStr, HOrt,
			// BuchDat, BuchText, RechNr,
			// DMRech, DMPorto, DMMahn, DMZins, DMMwSt, DMVorst, DMSoll, DMHaben, Soll, Haben,
			// LA, Proz, DMUeberw, DMmitVorstV, DMmitVorstS, VorRech, VorSoll, VorHaben, VorVSt, VorMwSt, Auss,
			// SuDM16L, SuDM15L, SuDM7L, SuDM0L, SuDMaL,
			// SuSt16L, SuSt15L, SuSt7L, SuSt0L, SuStaL,
			// SuDM16A, SuDM15A, SuDM7A, SuDM0A, SuDMaA,
			// SuSt16A, SuSt15A, SuSt7A, SuSt0A, SuStaA,
			// SuDMRg, SuDMMg, SuDMa, SuDMaSt, SuVSt, SuStorno, Druckdatum',
			// nErr)
			// Call SalWaitCursor( FALSE )
			else if (this.rbKontoauszVM.Checked == true) 
			{
				this.SetStatusBarText("Erstelle Kontoauszüge -  Bitte warten !");
				this.PalFillKontoauszug();
				App.frmMain.nErr = 1;
				App.frmMain.strReportName = "KONTOAUSVM";
				if (App.frmMain.dtDatVM < new SalDateTime(2002, 1, 15) && this.dfDvon.Value == new SalDateTime(1900, 1, 1)) 
				{
					// Call PalReport( frmMain,'KONTOAUSDM.QRP',
					// ':frmMain.nTANr, :frmMain.nTANrL,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt,
					// :frmMain.strTASVN1,:frmMain.strTASVN2,:frmMain.strTASVStr,:frmMain.strTASVOrt,
					// :frmMain.nTHNr,:frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand,
					// :frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nRechNr,
					// :frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins,
					// :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll, :frmMain.nDMHaben,  :frmMain.nSoll, :frmMain.nHaben,
					// :frmMain.strLA, :frmMain.nProz, :frmMain.nDMUeberw, :frmMain.nDMmitVorstV,
					// :frmMain.nDMmitVorstS, :frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
					// :frmMain.nVorVSt, :frmMain.nVorMwSt, :frmMain.nAussenst,
					// :frmMain.nSuDM19L, :frmMain.nSuDM16L, :frmMain.nSuDM15L, :frmMain.nSuDM7L, :frmMain.nSuDM0L, :frmMain.nSuDMaL, :frmMain.nSuDMAuslL,
					// :frmMain.nSuSt19L, :frmMain.nSuSt16L, :frmMain.nSuSt15L, :frmMain.nSuSt7L, :frmMain.nSuSt0L, :frmMain.nSuStaL,:frmMain.nSuStAuslL,
					// :frmMain.nSuDM19A, :frmMain.nSuDM16A, :frmMain.nSuDM15A, :frmMain.nSuDM7A, :frmMain.nSuDM0A, :frmMain.nSuDMaA,:frmMain.nSuDMAuslA,
					// :frmMain.nSuSt19A, :frmMain.nSuSt16A, :frmMain.nSuSt15A, :frmMain.nSuSt7A, :frmMain.nSuSt0A, :frmMain.nSuStaA,:frmMain.nSuStAuslA,
					// :frmMain.nSuDM19MB, :frmMain.nSuDM16MB, :frmMain.nSuDM15MB, :frmMain.nSuDM7MB, :frmMain.nSuDM0MB, :frmMain.nSuDMaMB,
					// :frmMain.nSuSt19MB, :frmMain.nSuSt16MB, :frmMain.nSuSt15MB, :frmMain.nSuSt7MB, :frmMain.nSuSt0MB, :frmMain.nSuStaMB,
					// :frmMain.nSuDMRg, :frmMain.nSuDMMg, :frmMain.nSuDMa, :frmMain.nSuDMaSt, :frmMain.nSuVSt, :frmMain.nSuStorno,
					// :frmMain.dtCurrentDate, :frmMain.nReverse',
					// 'ArztNr, ArztNrL,  AName1, AName2, AStr, AOrt,
					// ASVName1, ASVName2, ASVStr, ASVOrt,
					// HalterNr, HName1, HName2, HStr, HOrt, HLand,
					// BuchDat, BuchText, RechNr,
					// DMRech, DMPorto, DMMahn, DMZins, DMMwSt, DMVorst, DMSoll, DMHaben, Soll, Haben,
					// LA, Proz, DMUeberw, DMmitVorstV, DMmitVorstS, VorRech, VorSoll, VorHaben, VorVSt, VorMwSt, Auss,
					// SuDM19L, SuDM16L, SuDM15L, SuDM7L, SuDM0L, SuDMaL, SuDMAuslL,
					// SuSt19L, SuSt16L, SuSt15L, SuSt7L, SuSt0L, SuStaL, SuStAuslL,
					// SuDM19A, SuDM16A, SuDM15A, SuDM7A, SuDM0A, SuDMaA, SuDMAuslA,
					// SuSt19A, SuSt16A, SuSt15A, SuSt7A, SuSt0A, SuStaA, SuStAuslA,
					// SuDM19MB, SuDM16MB, SuDM15MB, SuDM7MB, SuDM0MB, SuDMaMB,
					// SuSt19MB, SuSt16MB, SuSt15MB, SuSt7MB, SuSt0MB, SuStaMB,
					// SuDMRg, SuDMMg, SuDMa, SuDMaSt, SuVSt, SuStorno, Druckdatum, Reverse',
					// nErr)
					Int.PalReport(App.frmMain, "KONTOAUSDM.QRP", @":frmMain.nTANr, :frmMain.nTANrL,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt,
:frmMain.strTASVN1,:frmMain.strTASVN2,:frmMain.strTASVStr,:frmMain.strTASVOrt,
:frmMain.nTHNr,:frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand,
:frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nRechNr,
:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins,
:frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll, :frmMain.nDMHaben,  :frmMain.nSoll, :frmMain.nHaben,
:frmMain.strLA, :frmMain.nProz, :frmMain.nDMUeberw, :frmMain.nDMmitVorstV,
:frmMain.nDMmitVorstS, :frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
:frmMain.nVorVSt, :frmMain.nVorMwSt, :frmMain.nAussenst,
:frmMain.nSuDM16L, :frmMain.nSuDM15L, :frmMain.nSuDM7L, :frmMain.nSuDM0L, :frmMain.nSuDMaL,
:frmMain.nSuSt16L, :frmMain.nSuSt15L, :frmMain.nSuSt7L, :frmMain.nSuSt0L, :frmMain.nSuStaL,
:frmMain.nSuDM16A, :frmMain.nSuDM15A, :frmMain.nSuDM7A, :frmMain.nSuDM0A, :frmMain.nSuDMaA,
:frmMain.nSuSt16A, :frmMain.nSuSt15A, :frmMain.nSuSt7A, :frmMain.nSuSt0A, :frmMain.nSuStaA,
:frmMain.nSuDM16MB, :frmMain.nSuDM15MB, :frmMain.nSuDM7MB, :frmMain.nSuDM0MB, :frmMain.nSuDMaMB,
:frmMain.nSuSt16MB, :frmMain.nSuSt15MB, :frmMain.nSuSt7MB, :frmMain.nSuSt0MB, :frmMain.nSuStaMB,
:frmMain.nSuDMRg, :frmMain.nSuDMMg, :frmMain.nSuDMa, :frmMain.nSuDMaSt, :frmMain.nSuVSt, :frmMain.nSuStorno,
:frmMain.dtCurrentDate, :frmMain.nReverse", @"ArztNr, ArztNrL,  AName1, AName2, AStr, AOrt,
ASVName1, ASVName2, ASVStr, ASVOrt,
HalterNr, HName1, HName2, HStr, HOrt, HLand,
BuchDat, BuchText, RechNr,
DMRech, DMPorto, DMMahn, DMZins, DMMwSt, DMVorst, DMSoll, DMHaben, Soll, Haben,
LA, Proz, DMUeberw, DMmitVorstV, DMmitVorstS, VorRech, VorSoll, VorHaben, VorVSt, VorMwSt, Auss,
SuDM16L, SuDM15L, SuDM7L, SuDM0L, SuDMaL,
SuSt16L, SuSt15L, SuSt7L, SuSt0L, SuStaL,
SuDM16A, SuDM15A, SuDM7A, SuDM0A, SuDMaA,
SuSt16A, SuSt15A, SuSt7A, SuSt0A, SuStaA,
SuDM16MB, SuDM15MB, SuDM7MB, SuDM0MB, SuDMaMB,
SuSt16MB, SuSt15MB, SuSt7MB, SuSt0MB, SuStaMB,
SuDMRg, SuDMMg, SuDMa, SuDMaSt, SuVSt, SuStorno, Druckdatum, Reverse", ref Var.nErr);
				}
				else
				{
					// 05.06.08 F378 + strBuchtextGrp
					// Call PalReport( frmMain,'KONTOAUS.QRP',
					// ':frmMain.nTANr, :frmMain.nTANrL,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt,
					// :frmMain.strTASVN1,:frmMain.strTASVN2,:frmMain.strTASVStr,:frmMain.strTASVOrt,
					// :frmMain.nTHNr,:frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand,
					// :frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.strBuchTextGrp, :frmMain.nRechNr,
					// :frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins,
					// :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll, :frmMain.nDMHaben,  :frmMain.nSoll, :frmMain.nHaben,
					// :frmMain.strLA, :frmMain.nProz, :frmMain.nDMUeberw, :frmMain.nDMmitVorstV,
					// :frmMain.nDMmitVorstS, :frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
					// :frmMain.nVorVSt, :frmMain.nVorMwSt, :frmMain.nAussenst,
					// :frmMain.nSuDM19L, :frmMain.nSuDM16L, :frmMain.nSuDM15L, :frmMain.nSuDM7L, :frmMain.nSuDM0L, :frmMain.nSuDMaL, :frmMain.nSuDMAuslL,
					// :frmMain.nSuSt19L, :frmMain.nSuSt16L, :frmMain.nSuSt15L, :frmMain.nSuSt7L, :frmMain.nSuSt0L, :frmMain.nSuStaL,:frmMain.nSuStAuslL,
					// :frmMain.nSuDM19A, :frmMain.nSuDM16A, :frmMain.nSuDM15A, :frmMain.nSuDM7A, :frmMain.nSuDM0A, :frmMain.nSuDMaA,:frmMain.nSuDMAuslA,
					// :frmMain.nSuSt19A, :frmMain.nSuSt16A, :frmMain.nSuSt15A, :frmMain.nSuSt7A, :frmMain.nSuSt0A, :frmMain.nSuStaA,:frmMain.nSuStAuslA,
					// :frmMain.nSuDM19MB, :frmMain.nSuDM16MB, :frmMain.nSuDM15MB, :frmMain.nSuDM7MB, :frmMain.nSuDM0MB, :frmMain.nSuDMaMB,
					// :frmMain.nSuSt19MB, :frmMain.nSuSt16MB, :frmMain.nSuSt15MB, :frmMain.nSuSt7MB, :frmMain.nSuSt0MB, :frmMain.nSuStaMB,
					// :frmMain.nSuDMRg, :frmMain.nSuDMMg, :frmMain.nSuDMa, :frmMain.nSuDMaSt, :frmMain.nSuVSt, :frmMain.nSuStorno,
					// :frmMain.dtCurrentDate, :frmMain.nReverse,
					// :frmMain.nSuDM10L, :frmMain.nSuSt10L, :frmMain.nSuDM10A, :frmMain.nSuSt10A, :frmMain.nSuDM10MB, :frmMain.nSuSt10MB,
					// :frmMain.nSuDM20L, :frmMain.nSuSt20L, :frmMain.nSuDM20A, :frmMain.nSuSt20A, :frmMain.nSuDM20MB, :frmMain.nSuSt20MB',
					// 'ArztNr, ArztNrL, AName1, AName2, AStr, AOrt,
					// ASVName1, ASVName2, ASVStr, ASVOrt,
					// HalterNr, HName1, HName2, HStr, HOrt, HLand,
					// BuchDat, BuchText, BuchTextGrp, RechNr,
					// DMRech, DMPorto, DMMahn, DMZins, DMMwSt, DMVorst, DMSoll, DMHaben, Soll, Haben,
					// LA, Proz, DMUeberw, DMmitVorstV, DMmitVorstS, VorRech, VorSoll, VorHaben, VorVSt, VorMwSt, Auss,
					// SuDM19L, SuDM16L, SuDM15L, SuDM7L, SuDM0L, SuDMaL, SuDMAuslL,
					// SuSt19L, SuSt16L, SuSt15L, SuSt7L, SuSt0L, SuStaL, SuStAuslL,
					// SuDM19A, SuDM16A, SuDM15A, SuDM7A, SuDM0A, SuDMaA, SuDMAuslA,
					// SuSt19A, SuSt16A, SuSt15A, SuSt7A, SuSt0A, SuStaA, SuStAuslA,
					// SuDM19MB, SuDM16MB, SuDM15MB, SuDM7MB, SuDM0MB, SuDMaMB,
					// SuSt19MB, SuSt16MB, SuSt15MB, SuSt7MB, SuSt0MB, SuStaMB,
					// SuDMRg, SuDMMg, SuDMa, SuDMaSt, SuVSt, SuStorno, Druckdatum, Reverse,
					// SuDM10L, SuSt10L, SuDM10A, SuSt10A, SuDM10MB, SuSt10MB,
					// SuDM20L, SuSt20L, SuDM20A, SuSt20A, SuDM20MB, SuSt20MB',
					// nErr)
					// LL
					// Call SalModalDialog( dlgLlDruck, frmMain, 'Kontoauszug.lst', 'Vormonate' )
					// 16.12.11 Ä679
					if (this.cbExtradrucke.Checked) 
					{
						dlgLlDruck.ModalDialog(App.frmMain, "Kontoauszug.lst", "VormonateED");
					}
					else
					{
						dlgLlDruck.ModalDialog(App.frmMain, "Kontoauszug.lst", "Vormonate");
					}
				}
				Sal.WaitCursor(false);
			}
			else if (this.rbKontoauszNagelfeld.Checked == true)  // 15.03.16 Ä1357
			{
				dlgLlDruck.ModalDialog(App.frmMain, "KontoauszugNF.lst", "");
			}
			else if (this.rbKontoauszVMNagelfeld.Checked == true)  // 15.03.16 Ä1357
			{
				this.SetStatusBarText("Erstelle Kontoauszüge -  Bitte warten !");
				this.PalFillKontoauszug();
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'KONTOAUSVM'
				dlgLlDruck.ModalDialog(App.frmMain, "KontoauszugNF.lst", "Vormonate");
				Sal.WaitCursor(false);
			}
			else if (this.rb9000.Checked == true) 
			{
				App.frmMain.dtDatum = SalDateTime.Current;
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Kontomitteilung.lst", "");
			}
			else if (this.rb9000VM.Checked == true) 
			{
				App.frmMain.dtDatum = SalDateTime.Current;
				this.PalFillKontoauszug();
				if (App.frmMain.dtDatVM < new SalDateTime(2002, 1, 15)) 
				{
				}
				else
				{
					// LL
					dlgLlDruck.ModalDialog(App.frmMain, "Kontomitteilung.lst", "Vormonate");
				}
				Sal.WaitCursor(false);
			}
			else if (this.rbRechnungen.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Rechnungen -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'RECHNUNG'
				// Call PalReport( frmMain,'RECHNUNG.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt,
				// :frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nDMVorst, :frmMain.nSoll, :frmMain.nDMRech, :frmMain.nProz, :frmMain.nDMPorto, :frmMain.dtCurrentDate',
				// 'ArztNr, AName1, AName2, AStr, AOrt,
				// Datum, Text, VSt, Soll, Netto, MwStProz, Porto, Druckdatum',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				// 16.12.11 Ä679
				if (this.cbExtradrucke.Checked) 
				{
					dlgLlDruck.ModalDialog(App.frmMain, "TVN-Rechnungen.lst", "ED");
				}
				else
				{
					dlgLlDruck.ModalDialog(App.frmMain, "TVN-Rechnungen.lst", "");
				}
			}
			else if (this.rbRechnungenVM.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Rechnungen -  Bitte warten !')
				// Call PalFillKontoauszug()
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'RECHNUNGVM'
				if (App.frmMain.dtDatVM < new SalDateTime(2002, 1, 15) && this.dfDvon.Value == new SalDateTime(1900, 1, 1)) 
				{
				}
				else
				{
					// Call PalReport( frmMain,'RECHNUNG.QRP',
					// ':frmMain.nTANr,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt,
					// :frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nDMVorst, :frmMain.nSoll, :frmMain.nDMRech, :frmMain.nProz, :frmMain.nDMPorto, :frmMain.dtCurrentDate',
					// 'ArztNr, AName1, AName2, AStr, AOrt,
					// Datum, Text, VSt, Soll, Netto, MwStProz, Porto, Druckdatum',
					// nErr)
					// LL
					// 16.12.11 Ä679
					if (this.cbExtradrucke.Checked) 
					{
						dlgLlDruck.ModalDialog(App.frmMain, "TVN-Rechnungen.lst", "VormonateED");
					}
					else
					{
						dlgLlDruck.ModalDialog(App.frmMain, "TVN-Rechnungen.lst", "Vormonate");
					}
				}
				// Call SalWaitCursor( FALSE )
			}
			else if (this.rbZahlungsliste.Checked == true)  // 15.08.17 Ä1594
			{
				this.SetStatusBarText("Erstelle Zahlungsliste -  Bitte warten !");
				dlgLlDruck.ModalDialog(App.frmMain, "Zahlungsliste.lst", "");
			}
			else if (this.rbZahlungslisteVM.Checked == true) 
			{
				this.SetStatusBarText("Erstelle Zahlungsliste -  Bitte warten !");
				this.PalFillKontoauszug();
				if (App.frmMain.dtDatVM < new SalDateTime(2002, 1, 15) && this.dfDvon.Value == new SalDateTime(1900, 1, 1)) 
				{
					Sal.MessageBox("Der Druck ist nur für die Zeit nach dem 15.1.2002 möglich.", "zu alt", Sys.MB_Ok);
				}
				else
				{
					// LL
					dlgLlDruck.ModalDialog(App.frmMain, "Zahlungsliste.lst", "Vormonate");
				}
				Sal.WaitCursor(false);
			}
			else if (this.rbzusMeldung.Checked == true) 
			{
				dlgLlDruck.ModalDialog(App.frmMain, "zus.Meldung.lst", "");
			}
			else if (this.rbzusMeldungVM.Checked == true) 
			{
				dlgLlDruck.ModalDialog(App.frmMain, "zus.Meldung.lst", "Vormonate");
			}
			else if (this.rbAdresse3.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Rechnungen -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'DECKBLATT'
				// Call PalReport( frmMain,'DECKBLATT.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt, :frmMain.dtCurrentDate',
				// 'ArztNr, AName1, AName2, AStr, AOrt, Druckdatum', nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Deckblatt.crd", "");
			}
			else if (this.rbSalden.Checked == true) 
			{
				// Call SalModalDialog(dlgSalden,frmMain)
				// Call SalStatusSetText(hWndForm,'Erstelle Saldenliste -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'SALDEN'
				// Call PalReport( frmMain,'SALDEN.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt,
				// :frmMain.nDMRech,
				// :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll, :frmMain.nDMHaben,  :frmMain.nDMSoll, :frmMain.nDMHaben,
				// :frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
				// :frmMain.nVorVSt, :frmMain.nVorMwSt, :frmMain.nAussenst',
				// 'ArztNr, AName1, AName2, AStr, AOrt,
				// DMRech, DMMwSt, DMVorst, DMSoll, DMHaben, Soll, Haben,
				//  VorRech, VorSoll, VorHaben, VorVSt, VorMwSt, Auss',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Saldenliste.lst", "");
			}
			else if (this.rbAusb.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Ausbuchungs-Liste -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'AUSBUCH'
				// Call PalReport( frmMain,'AUSBUCH.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt,
				// :frmMain.nTHNr,:frmMain.strTHN1,
				// :frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nRechNr,
				// :frmMain.nDMRech',
				// 'ArztNr, AName1, AName2, AStr, AOrt,
				// HalterNr, HName1,
				// BuchDat, BuchText, RechNr,
				// DMRech',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				// 16.12.11 Ä679
				if (this.cbExtradrucke.Checked) 
				{
					dlgLlDruck.ModalDialog(App.frmMain, "Ausbuchungen.lst", "ED");
				}
				else
				{
					dlgLlDruck.ModalDialog(App.frmMain, "Ausbuchungen.lst", "");
				}
			}
			else if (this.rbAusbVM.Checked == true) 
			{
				// LL
				// 16.12.11 Ä679
				if (this.cbExtradrucke.Checked) 
				{
					dlgLlDruck.ModalDialog(App.frmMain, "Ausbuchungen.lst", "VormonateED");
				}
				else
				{
					dlgLlDruck.ModalDialog(App.frmMain, "Ausbuchungen.lst", "Vormonate");
				}
			}
			else if (this.rbOPListen.Checked == true) 
			{
				dlgMS.ModalDialog(App.frmMain);
				// Call SalStatusSetText(hWndForm,'Erstelle OP-Listen -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'OPLISTE'
				// Call PalReport( frmMain,'OPLISTE.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,
				// :frmMain.nTHNr,:frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand, :frmMain.strTHText,
				// :frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nRechNr,
				// :frmMain.nDMRechL,  :frmMain.nDMRechA,  :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRechL, :frmMain.nZaRechA,
				// :frmMain.nZaMahn, :frmMain.nZaZins,
				// :frmMain.nMS, :frmMain.dtMahnDat, :frmMain.strInkasso',
				// 'ArztNr, AName1,
				// HalterNr, HName1, HName2, HStr, HOrt, HLand, HText,
				// RechDat, BuchText, RechNr,
				// DMRechL, DMRechA,  DMMahn, DMZins, ZaRechL, ZaRechA, ZaMahn, ZaZins,
				// MS, MahnDat, Inkasso',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				// 16.12.11 Ä679
				if (this.cbExtradrucke.Checked) 
				{
					dlgLlDruck.ModalDialog(App.frmMain, "OP-Liste.lst", "ED");
				}
				else
				{
					dlgLlDruck.ModalDialog(App.frmMain, "OP-Liste.lst", "");
				}
			}
			else if (this.rbOPListenOP.Checked == true)  // 06.12.17 Ä1657
			{
				dlgMS.ModalDialog(App.frmMain);
				// Call SalStatusSetText(hWndForm,'Erstelle OP-Listen -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'OPLISTE'
				// Call PalReport( frmMain,'OPLISTE.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,
				// :frmMain.nTHNr,:frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand, :frmMain.strTHText,
				// :frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nRechNr,
				// :frmMain.nDMRechL,  :frmMain.nDMRechA,  :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRechL, :frmMain.nZaRechA,
				// :frmMain.nZaMahn, :frmMain.nZaZins,
				// :frmMain.nMS, :frmMain.dtMahnDat, :frmMain.strInkasso',
				// 'ArztNr, AName1,
				// HalterNr, HName1, HName2, HStr, HOrt, HLand, HText,
				// RechDat, BuchText, RechNr,
				// DMRechL, DMRechA,  DMMahn, DMZins, ZaRechL, ZaRechA, ZaMahn, ZaZins,
				// MS, MahnDat, Inkasso',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				// 16.12.11 Ä679
				if (this.cbExtradrucke.Checked) 
				{
					dlgLlDruck.ModalDialog(App.frmMain, "OP-ListeOP.lst", "ED");
				}
				else
				{
					dlgLlDruck.ModalDialog(App.frmMain, "OP-ListeOP.lst", "");
				}
			}
			else if (this.rbOPListenMG.Checked == true) 
			{
				App.frmMain.nOPMS = 99;
				// Call SalStatusSetText(hWndForm,'Erstelle MG-OP-Listen -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'OPLISTE'
				// Call PalReport( frmMain,'OPLISTE.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,
				// :frmMain.nTHNr,:frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand, :frmMain.strTHText,
				// :frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nRechNr,
				// :frmMain.nDMRechL,  :frmMain.nDMRechA,  :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRechL, :frmMain.nZaRechA,
				// :frmMain.nZaMahn, :frmMain.nZaZins,
				// :frmMain.nMS, :frmMain.dtMahnDat, :frmMain.strInkasso',
				// 'ArztNr, AName1,
				// HalterNr, HName1, HName2, HStr, HOrt, HLand, HText,
				// RechDat, BuchText, RechNr,
				// DMRechL, DMRechA,  DMMahn, DMZins, ZaRechL, ZaRechA, ZaMahn, ZaZins,
				// MS, MahnDat, Inkasso',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				// 16.12.11 Ä679
				if (this.cbExtradrucke.Checked) 
				{
					dlgLlDruck.ModalDialog(App.frmMain, "OP-Liste.lst", "ED");
				}
				else
				{
					dlgLlDruck.ModalDialog(App.frmMain, "OP-Liste.lst", "");
				}
			}
			else if (this.rbOPDisk.Checked == true) 
			{
				frmOPDisk.CreateWindow(App.frmMain, App.frmMain.nArztVon);
				Sal.WaitCursor(false);
			}
			else if (this.rbMBInfo.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle MB-Info -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'MBINFO'
				// Call PalReport( frmMain,'MBINFO.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,
				// :frmMain.nTHNr,:frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand,
				// :frmMain.dtBuchDat, :frmMain.strTypDetail, :frmMain.strBuchText,
				// :frmMain.nRechNr, :frmMain.nRkDMHF, :frmMain.nRkDMMa, :frmMain.nRkZaHF, :frmMain.nRkZaMa,
				// :frmMain.nDMGK, :frmMain.nZaDM, :frmMain.nMS',
				// 'ArztNr, AName1,
				// HalterNr, HName1, HName2, HStr, HOrt, HLand,
				// Datum, TypDetail, BuchText,
				// RechNr, RkDMHF, RkDMMa, RkZaHF, RkZaMa,
				// GK, Za, MS', nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "MB-Info.lst", "");
			}
			else if (this.rbMBInfoAlle.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle MB-Info -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'MBINFO'
				// Call PalReport( frmMain,'MBINFO.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,
				// :frmMain.nTHNr,:frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand,
				// :frmMain.dtBuchDat, :frmMain.strTypDetail, :frmMain.strBuchText,
				// :frmMain.nRechNr, :frmMain.nRkDMHF, :frmMain.nRkDMMa, :frmMain.nRkZaHF, :frmMain.nRkZaMa,
				// :frmMain.nDMGK, :frmMain.nZaDM, :frmMain.nMS',
				// 'ArztNr, AName1,
				// HalterNr, HName1, HName2, HStr, HOrt, HLand,
				// Datum, TypDetail, BuchText,
				// RechNr, RkDMHF, RkDMMa, RkZaHF, RkZaMa,
				// GK, Za, MS', nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "MB-Info.lst", "A");
			}
			else if (this.rbPartie.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Partie-Info -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'OPPARTIE'
				// Call PalReport( frmMain,'OPPARTIE.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,
				// :frmMain.dtBuchDat, :frmMain.nRechJahr,
				// :frmMain.nDMRech,  :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRech,
				// :frmMain.nZaMahn, :frmMain.nZaZins,
				// :frmMain.nAnzRech, :frmMain.nDMAusbuch, :frmMain.strBezeichnung',
				// 'ArztNr, AName1,
				// RechDat, Jahr,
				// DMRech,  DMMahn, DMZins, ZaRech, ZaMahn, ZaZins,
				// AnzRech, DMAusbuch, Bezeichnung',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				App.frmMain.strabc = "alle";
				dlgLlDruck.ModalDialog(App.frmMain, "Partien-Info.lst", "");
			}
			else if (this.rbPartieMB.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Partie-Info -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'OPPARTIEMB'
				// Call PalReport( frmMain,'OPPARTIE.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,
				// :frmMain.dtBuchDat, :frmMain.nRechJahr,
				// :frmMain.nDMRech,  :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRech,
				// :frmMain.nZaMahn, :frmMain.nZaZins,
				// :frmMain.nAnzRech, :frmMain.nDMAusbuch, :frmMain.strBezeichnung',
				// 'ArztNr, AName1,
				// RechDat, Jahr,
				// DMRech,  DMMahn, DMZins, ZaRech, ZaMahn, ZaZins,
				// AnzRech, DMAusbuch, Bezeichnung',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				App.frmMain.strabc = "MB";
				dlgLlDruck.ModalDialog(App.frmMain, "Partien-Info.lst", "");
			}
			else if (this.rbBankClearing.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Protokoll -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'BANKCLEA'
				// Call PalReport( frmMain,'BANKCLEA.QRP',
				// ':frmMain.nTANr,:frmMain.nTHNr, :frmMain.nRechNr, :frmMain.nZahlDM, :frmMain.nBuchDM, :frmMain.dtBuchDat, :frmMain.nRestL, :frmMain.nRestA, :frmMain.nRestM, :frmMain.nRestZ, :frmMain.strKonto,
				// :frmMain.strErgebnis, :frmMain.nAuszug, :frmMain.strRef, :frmMain.nTextSchl, :frmMain.strVZ1, :frmMain.strVZ2, :frmMain.strAuftr1, :frmMain.strAuftr2',
				//  'Arzt, Halter, Rechnung, ZahlDM, BuchDM, BuchDat, RestL, RestA, RestM, RestZ, Konto, Ergebnis, Auszug, Ref, TextSchl, VZ1, VZ2, A1, A2' ,
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				App.frmMain.strabc = "alle";
				dlgLlDruck.ModalDialog(App.frmMain, "BankClearing.lst", "");
			}
			else if (this.rbBCng.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Protokoll -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'BCNG'
				// Call PalReport( frmMain,'BCNG.QRP',
				// ':frmMain.nTANr,:frmMain.nTHNr, :frmMain.nRechNr, :frmMain.nZahlDM, :frmMain.nBuchDM, :frmMain.dtBuchDat, :frmMain.nRestL, :frmMain.nRestA, :frmMain.nRestM, :frmMain.nRestZ, :frmMain.strKonto,
				// :frmMain.strErgebnis, :frmMain.nAuszug, :frmMain.strRef, :frmMain.nTextSchl, :frmMain.strVZ1, :frmMain.strVZ2, :frmMain.strAuftr1, :frmMain.strAuftr2',
				//  'Arzt, Halter, Rechnung, ZahlDM, BuchDM, BuchDat, RestL, RestA, RestM, RestZ, Konto, Ergebnis, Auszug, Ref, TextSchl, VZ1, VZ2, A1, A2' ,
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				App.frmMain.strabc = "NG";
				dlgLlDruck.ModalDialog(App.frmMain, "BankClearing.lst", "");
			}
			else if (this.rbBP.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Protokoll -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'BATCHPRO'
				// Call PalReport( frmMain,'BATCHPRO.QRP',
				// ':frmMain.nTANr,:frmMain.nTHNr, :frmMain.nRechNr, :frmMain.nZahlDM, :frmMain.nBuchDM, :frmMain.dtBuchDat, :frmMain.nRestL, :frmMain.nRestA, :frmMain.nRestM, :frmMain.nRestZ, :frmMain.strKonto,
				// :frmMain.strErgebnis',
				//  'Arzt, Halter, Rechnung, ZahlDM, BuchDM, BuchDat, RestL, RestA, RestM, RestZ, Konto, Ergebnis' ,
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Batchprotokoll.lst", "");
			}
			// Else If rbMBKac = TRUE
			// Set frmMain.strLA = 'M'
			// Call SalStatusSetText(hWndForm,'Erstelle Protokoll -  Bitte warten !')
			// Set frmMain.nErr = 1
			// Set frmMain.strReportName = 'MBKac'
			// Call PalReport( frmMain,'MBK.QRP',
			// ':frmMain.strLA, :frmMain.nTANr,:frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat,
			// :frmMain.nDMa, :frmMain.nDMb, :frmMain.nDMc,
			// :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTHN1, :frmMain.strabc',
			// 'Typ, Arzt, Halter, Rechnung, BuchDat, DMa, DMb, DMc, AN1, AN2, HN1, ABC',nErr)
			// Call SalWaitCursor( FALSE )
			// LL
			// Set frmMain.strabc = 'a+c'
			// Set frmMain.dtDatum = SalDateCurrent()
			// Call SalModalDialog( dlgLlDruck, frmMain, 'MB-Kosten.lst', '' )
			else if (this.rbMBKb.Checked == true) 
			{
				App.frmMain.strLA = "M";
				// Call SalStatusSetText(hWndForm,'Erstelle Protokoll -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'MBKb'
				// Call PalReport( frmMain,'MBK.QRP',
				// ':frmMain.strLA, :frmMain.nTANr,:frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat,
				// :frmMain.nDMa, :frmMain.nDMb, :frmMain.nDMc,
				// :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTHN1, :frmMain.strabc',
				// 'Typ, Arzt, Halter, Rechnung, BuchDat, DMa, DMb, DMc, AN1, AN2, HN1, ABC',nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				App.frmMain.strabc = "b";
				App.frmMain.dtDatum = SalDateTime.Current;
				dlgLlDruck.ModalDialog(App.frmMain, "MB-Kosten.lst", "");
			}
			else if (this.rbOPVerj.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle OP-Listen -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'OPVERJ'
				// Call PalReport( frmMain,'OPVERJ.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,
				// :frmMain.nTHNr,:frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand,
				// :frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nRechNr,
				// :frmMain.nDMRech,  :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRech,
				// :frmMain.nZaMahn, :frmMain.nZaZins,
				// :frmMain.nMS, :frmMain.dtMahnDat, :frmMain.dtVerjDat',
				// 'ArztNr, AName1,
				// HalterNr, HName1, HName2, HStr, HOrt, HLand,
				// RechDat, BuchText, RechNr,
				// DMRech,  DMMahn, DMZins, ZaRech, ZaMahn, ZaZins,
				// MS, MahnDat, VerjDat',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Verjährungen.lst", "DE");
			}
			else if (this.rbOPVerjAusl.Checked == true)  // 04.09.12 Ä815
			{
				// Call SalStatusSetText(hWndForm,'Erstelle OP-Listen -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'OPVERJ'
				// Call PalReport( frmMain,'OPVERJ.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,
				// :frmMain.nTHNr,:frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand,
				// :frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nRechNr,
				// :frmMain.nDMRech,  :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRech,
				// :frmMain.nZaMahn, :frmMain.nZaZins,
				// :frmMain.nMS, :frmMain.dtMahnDat, :frmMain.dtVerjDat',
				// 'ArztNr, AName1,
				// HalterNr, HName1, HName2, HStr, HOrt, HLand,
				// RechDat, BuchText, RechNr,
				// DMRech,  DMMahn, DMZins, ZaRech, ZaMahn, ZaZins,
				// MS, MahnDat, VerjDat',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Verjährungen.lst", "Ausl");
			}
			else if (this.rbArztVerj.Checked == true) 
			{
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Ärzte mit Verjährungen.lst", "");
			}
			// Else If rbRatCheck = TRUE
			// Set frmMain.nErr = 1
			// Set frmMain.strReportName = 'RATCHECK'
			// Call PalReport(frmMain,'RATCHECK.QRP',
			// ':frmMain.nTANr, :frmMain.nTHNr,:frmMain.strTHN1,
			// :frmMain.dtRatDat, :frmMain.dtRechDat,
			// :frmMain.nDMRat, :frmMain.nMtl, :frmMain.nDMRech',
			// 'ArztNr, HalterNr, HName1,
			// RatDat, RechDat,
			// DMRat, Mtl, DMRech',nErr)
			// Call SalWaitCursor( FALSE )
			// LL
			// Set frmMain.strabc = 'MB'
			// Call SalModalDialog( dlgLlDruck, frmMain, 'Ratenzahler-Checkliste.lst', '' )
			// Else If rbRatList = TRUE
			// Set frmMain.nErr = 1
			// Set frmMain.strReportName = 'RATLIST'
			// Call PalReport(frmMain,'RATLIST.QRP',
			// ':frmMain.nTANr, :frmMain.nTHNr,:frmMain.strTHN1,
			// :frmMain.dtRatDat, :frmMain.dtRechDat,
			// :frmMain.nDMRat, :frmMain.nMtl, :frmMain.nDMRech',
			// 'ArztNr, HalterNr, HName1,
			// RatDat, RechDat,
			// DMRat, Mtl, DMRech',nErr)
			// Call SalWaitCursor( FALSE )
			// LL
			// Call SalModalDialog( dlgLlDruck, frmMain, 'Ratenzahlerliste.lst', '' )
			else if (this.rb70Check.Checked == true) 
			{
				App.frmMain.nBankProz = this.dfZins.Number;
				App.frmMain.nTVProz = this.dfTVZins.Number;
				// Call SalStatusSetText(hWndForm,'Erstelle 70%-Checkliste -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = '70CHECK'
				// Call PalReport( frmMain,'70CHECK.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,
				// :frmMain.dtBuchDat, :frmMain.nRechJahr,
				// :frmMain.nDMRech,  :frmMain.nTage70, :frmMain.nTage30,  :frmMain.nProz70, :frmMain.nProz30,
				// :frmMain.nAnzRech,  :frmMain.nBankZins, :frmMain.nTVZins',
				// 'ArztNr, AName1, RechDat, Jahr,
				// DMRech, Tage70, Tage30, Proz70, Proz30, AnzRech, BankZins, TVZins',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "70-Checkliste.lst", "");
			}
			else if (this.rb90Check.Checked == true) 
			{
				App.frmMain.nBankProz = this.dfZins.Number;
				App.frmMain.nTVProz = this.dfTVZins.Number;
				// Call SalStatusSetText(hWndForm,'Erstelle 70%-Checkliste -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = '70CHECK'
				// Call PalReport( frmMain,'70CHECK.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,
				// :frmMain.dtBuchDat, :frmMain.nRechJahr,
				// :frmMain.nDMRech,  :frmMain.nTage70, :frmMain.nTage30,  :frmMain.nProz70, :frmMain.nProz30,
				// :frmMain.nAnzRech,  :frmMain.nBankZins, :frmMain.nTVZins',
				// 'ArztNr, AName1, RechDat, Jahr,
				// DMRech, Tage70, Tage30, Proz70, Proz30, AnzRech, BankZins, TVZins',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "70-Checkliste.lst", "90");
			}
			else if (this.rbSolvenz.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Solvenzliste -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'SOLVENZ'
				// Set frmMain.nBankProz =dfZins
				// Call PalReport( frmMain,'SOLVENZ.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,
				// :frmMain.dtBuchDat, :frmMain.nDMVorsch, :frmMain.nDMZahl, :frmMain.nDMRest, :frmMain.nDMZins,
				// :frmMain.nTage, :frmMain.nZinsProz',
				// 'ArztNr, AName1, Datum, DMVorsch, DMZahl, DMRest, DMZins, Tage, ZinsProz',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Solvenzliste.lst", "");
			}
			else if (this.rbHitListe.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Hitliste -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'HITLISTE'
				// Call PalReport( frmMain,'HITLISTE.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,
				// :frmMain.nAnzRech, :frmMain.nRechGeb, :frmMain.nBuchDM, :frmMain.nRechDM, :frmMain.nZahlDM',
				// 'ArztNr, AName1,
				// Anzahl, SummGeb, SchnGeb, SummRech, SchnRech',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Hitliste Rechnungen.lst", "");
			}
			else if (this.rbMahnHit.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Hitliste -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'MAHNHIT'
				// Call PalReport( frmMain,'MAHNHIT.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,
				// :frmMain.nAnzRech, :frmMain.nRechGeb, :frmMain.nBuchDM, :frmMain.nRechDM, :frmMain.nZahlDM',
				// 'ArztNr, AName1,
				// Anzahl, SummGeb, SchnGeb, SummRech, SchnRech',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Hitliste Mahnungen.lst", "");
			}
			else if (this.rbTAStatist.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle TA-Statistik -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'TASTATIS'
				// Call PalReport(frmMain,'TASTATIS.QRP',
				// ':frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strGKTyp, :frmMain.nRechJahr,
				// :frmMain.nGeb1, :frmMain.nRech1, :frmMain.nProz1,
				// :frmMain.nGeb2, :frmMain.nRech2, :frmMain.nProz2,
				// :frmMain.nGeb3, :frmMain.nRech3, :frmMain.nProz3,
				// :frmMain.nGeb4, :frmMain.nRech4, :frmMain.nProz4',
				// 'ArztNr, AName1, AName2, GKTyp, Jahr, Geb1, Rech1, Proz1, Geb2, Rech2, Proz2,
				// Geb3, Rech3, Proz3, Geb4, Rech4, Proz4',nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "TA-Statistik.lst", "");
			}
			else if (this.rbTAStatist1.Checked == true) 
			{
				if (this.dfDvon.Value < SalDateTime.Current.YearBegin()) 
				{
					this.dfDvon.Value = SalDateTime.Current.YearBegin();
				}
				if (this.dfDbis.Value == new SalDateTime(2100, 12, 31)) 
				{
					this.dfDbis.Value = SalDateTime.Current;
				}
				App.frmMain.dtDatVon = this.dfDvon.Value;
				App.frmMain.dtDatBis = this.dfDbis.Value;
				// Call SalStatusSetText(hWndForm,'Erstelle TA-Statistik -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'TASTATIS1'
				// Call PalReport(frmMain,'TASTATIS1.QRP',
				// ':frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strGKTyp, :frmMain.nRechJahr,
				// :frmMain.nGeb1, :frmMain.nRech1, :frmMain.nProz1,
				// :frmMain.dtDatVon, :frmMain.dtDatBis',
				// 'ArztNr, AName1, AName2, GKTyp, Jahr, Geb1, Rech1, Proz1, von, bis',nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "TA-StatistikVARI.lst", "");
			}
			// Else If rbMahnsperr2 = TRUE
			// Call SalStatusSetText(hWndForm,'Erstelle TA-Briefe -  Bitte warten !')
			// Set frmMain.nErr = 1
			// Set frmMain.strReportName = 'MASP2'
			// Call PalReport( frmMain,'MASP2.QRP',
			// ':frmMain.nTANr, :frmMain.nTHNr,
			// :frmMain.strTAN1, :frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt,
			// :frmMain.strTHN1, :frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand,
			// :frmMain.dtRechDat, :frmMain.nRechNr,
			// :frmMain.nDMOP',
			// 'ArztNr, HalterNr,
			// AName1, AName2, AStr, AOrt,
			// HName1, HName2, HStr, HOrt, HLand,
			// RechDat, RechNr,
			// DMOP',
			// nErr)
			// Call SalWaitCursor( FALSE )
			// LL
			// Call SalModalDialog( dlgLlDruck, frmMain, 'Mahnsperre2.lst', '' )
			else if (this.rbZettel.Checked == true) 
			{
				App.frmMain.strMitarb = this.dfMitarb.Text;
				// Call SalStatusSetText(hWndForm,'Erstelle Liste -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'ZETTEL'
				// Call PalReport( frmMain,'ZETTEL.QRP',
				// ':frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.strVon, :frmMain.strAn,
				// :frmMain.dtDatum, :frmMain.dtWieVor, :frmMain.lsBemerk
				// , :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt',
				// 'ArztNr, HalterNr, RechNr, Von, An, Datum, WieVor, Text, N1, N2, Str, Ort',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				// 12.02.18 Ä1704
				this.strDummy = "";
				if (this.cbWVmitUV.Checked) 
				{
					this.strDummy = "UV";
				}

				dlgLlDruck.ModalDialog(App.frmMain, "Wiedervorlageliste.lst", this.strDummy);
			}
			else if (this.rbNegativ.Checked == true) 
			{
				App.frmMain.strPLZ = this.dfNegativ.Text + "%";
				// Call SalStatusSetText(hWndForm,'Erstelle Negativliste -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'NEGLISTE'
				// Call PalReport(frmMain,'NEGLISTE.QRP',
				// ':frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strPLZ',
				// 'Name1, Name2, Str, Ort, PLZ',nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Negativliste.lst", "");
			}
			else if (this.rbMyco.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Myco-Zettel -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'MYCOLEER'
				// Call PalReport(frmMain,'MYCOLEER.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt',
				// 'ArztNr, AName1, AName2, AStr, AOrt',nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "MYCO-Zettel_LEER.crd", "");
			}
			else if (this.rbZM.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Liste -  Bitte warten !')
				// Set frmMain.strMitarb = dfMitarb
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'ZM'
				// Call PalReport( frmMain,'ZM.QRP',
				// ':frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.strVon, :frmMain.strAn,
				// :frmMain.dtDatum, :frmMain.strMeldung, :frmMain.nZMDM, :frmMain.lsBemerk
				// , :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt',
				// 'ArztNr, HalterNr, RechNr, Von, An, Datum, Meldung, ZMDM, Text, N1, N2, Str, Ort',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Zahlungsmeldungen.lst", "");
			}
			else if (this.rbEL.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Liste -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'EL'
				// Call PalReport( frmMain,'EL.QRP',
				// ':frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.strVon,
				// :frmMain.dtDatum, :frmMain.strText
				// , :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt',
				// 'ArztNr, HalterNr, RechNr, Von, Datum, Text, N1, N2, Str, Ort',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// 14.03.22 Ä1910
				App.frmMain.strMitarb = this.cmbELMitarb.Text;
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Erinnerungsliste.lst", "");
			}
			// Else If rbBEZ = TRUE
			// Call SalStatusSetText(hWndForm,'Erstelle Liste -  Bitte warten !')
			// Set frmMain.nErr = 1
			// Set frmMain.strReportName = 'BEZ'
			// Call PalReport( frmMain,'BEZ.QRP',
			// ':frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr,
			// :frmMain.dtDatum, :frmMain.nZMDM,
			// , :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strBLZ, :frmMain.strKonto',
			// 'ArztNr, HalterNr, RechNr, Datum, DM, N1, N2, Str, Ort, BLZ, Konto',
			// nErr)
			// Call SalWaitCursor( FALSE )
			// LL
			// Call SalModalDialog( dlgLlDruck, frmMain, 'Bankeinzüge.lst', '' )
			else if (this.rbRE.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Liste -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'RUECKER'
				// Call PalReport( frmMain,'RUECKER.QRP',
				// ':frmMain.nTANr, :frmMain.strTAN1,  :frmMain.nGebDM, :frmMain.nUebersch,
				// :frmMain.nGesGebDM, :frmMain.nDM, :frmMain.nJahr, :frmMain.dtZahlDat',
				// 'ArztNr, AName1, GebDM, Uebersch, GesGebDM, DM, Jahr, ZahlDat',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Rückerstattungen.lst", "");
			}
			else if (this.rbBuchAbgl.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Buchungsabgleich -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'BUCHABGL'
				// Call PalReport( frmMain,'BUCHABGL.QRP',
				// ':frmMain.nTKSoll, :frmMain.nTKHaben, :frmMain.nFISoll, :frmMain.nFIHaben,
				// :frmMain.dtDatVon, :frmMain.dtDatBis',
				// 'TKSoll, TKHaben, FISoll, FIHaben, DatVon, DatBis',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Buchungsabgleich.crd", "");
			}
			// Else If rbMBBEZ = TRUE
			// Call SalStatusSetText(hWndForm,'Erstelle Liste -  Bitte warten !')
			// Set frmMain.nErr = 1
			// Set frmMain.strReportName = 'MBBEZ'
			// Call PalReport( frmMain,'MBBEZ.QRP',
			// ':frmMain.nProzNr, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nA1, :frmMain.nR1, :frmMain.nA2, :frmMain.nR2, :frmMain.nA3, :frmMain.nR3, :frmMain.nA4, :frmMain.nR4,
			// :frmMain.nA5, :frmMain.nR5, :frmMain.nA6, :frmMain.nR6,
			// :frmMain.strAZ, :frmMain.strGerName, :frmMain.nDMa, :frmMain.nDMb, :frmMain.nDMc, :frmMain.nDMHF, :frmMain.dtBezahlt,
			// :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
			// :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.nAussenst',
			// 'ProzNr, ArztNr, HalterNr, A1, R1, A2, R2, A3, R3, A4, R4, A5, R5, A6, R6,
			// AZ, GerName, DMa, DMb, DMc, DMHF, Bezahlt,
			// N1, N2, Str, Ort, HLand,
			// AN1, AN2, AStr, AOrt, Aussenst',
			// nErr)
			// Call SalWaitCursor( FALSE )
			// LL
			// Call SalModalDialog( dlgLlDruck, frmMain, 'MB-Bezahlt.lst', '' )
			else if (this.rbBUB.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Liste -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'BUB'
				// Call PalReport( frmMain,'BUB.QRP',
				// ':frmMain.nTANr, :frmMain.dtDatum, :frmMain.nSoll, :frmMain.nHaben, :frmMain.nDM, :frmMain.strBuchText',
				// 'ArztNr, Datum, Soll, Haben, DM, BuchText',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Buchungsbelege.lst", "");
			}
			else if (this.rbRAAb.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle RA-Listen -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'RechAbListe'
				// Call PalReport( frmMain,'RechAbListe.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,
				// :frmMain.nTHNr,:frmMain.strTHN1,
				// :frmMain.dtBuchDat, :frmMain.nRechNr,
				// :frmMain.strBuchText, :frmMain.strZeichen, :frmMain.nDMRech',
				// 'ArztNr, AName1,
				// HalterNr, HName1,
				// Datum, RechNr,
				// RA, Zeichen, DMRech',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Rechnungsabgaben.lst", "");
			}
			// Else If rbTSK = TRUE
			// LL
			// Call SalModalDialog( dlgLlDruck, frmMain, 'TSK-Beihilfen.lst', '' )
			else if (this.rbSaldenMit.Checked == true) 
			{
				// Call SalModalDialog(dlgSalden,frmMain)
				// Call SalStatusSetText(hWndForm,'Erstelle Saldenliste -  Bitte warten !')
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'SALDEN'
				// Call PalReport( frmMain,'SALDEN.QRP',
				// ':frmMain.nTANr,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt,
				// :frmMain.nDMRech,
				// :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll, :frmMain.nDMHaben,  :frmMain.nDMSoll, :frmMain.nDMHaben,
				// :frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
				// :frmMain.nVorVSt, :frmMain.nVorMwSt, :frmMain.nAussenst',
				// 'ArztNr, AName1, AName2, AStr, AOrt,
				// DMRech, DMMwSt, DMVorst, DMSoll, DMHaben, Soll, Haben,
				//  VorRech, VorSoll, VorHaben, VorVSt, VorMwSt, Auss',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				App.frmMain.bSaldenSch = true;
				App.frmMain.bSaldenOP = false;
				dlgLlDruck.ModalDialog(App.frmMain, "Saldenmitteilung.crd", "");
			}
			else if (this.rbDruKon.Checked == true) 
			{
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "PM-Kontrolle.lst", "");
			}
			else if (this.rbScheckLis.Checked == true) 
			{
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Scheckliste.lst", "");
			}
			else if (this.rbZI.Checked == true)  // 19.01.11 Ä498
			{
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Zahlungsinfos.lst", "");
			}
			else if (this.rbSchuldsaldo.Checked == true)  // 21.11.11 Ä659
			{
				if (App.frmMain.dtDatVon < new SalDateTime(2002, 1, 15)) 
				{
					this.dfDvon.Value = new SalDateTime(2002, 1, 15);
					App.frmMain.dtDatVon = this.dfDvon.Value;
				}
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Schuldsaldoermittlung.lst", "Vormonate");
			}
			else if (this.rbRR.Checked) 
			{
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Rückrufliste.lst", "");
			}
			else if (this.rbanRAabgegeben.Checked == true) 
			{
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "OP-Liste.lst", "RA");
			}
			else if (this.rbAltersstruktur.Checked == true)  // 05.02.18 Ä1648
			{
				dlgLlDruck.ModalDialog(App.frmMain, "Altersstruktur.lst", this.cmbAltersstruktur.Text);
			}
			else if (this.rbVorschussMinderung.Checked == true)  // 28.06.19 Ä1854
			{
				dlgLlDruck.ModalDialog(App.frmMain, "Vorschussminderungen.lst", "");
			}
			else if (this.rbDATEVneu.Checked)  // 30.03.21 Ä1952
			{
				this.PalDATEVExport(true, SalDateTime.Null, "AR");
			}
			else if (this.rbDATEValt.Checked)  // 30.03.21 Ä1952
			{
				this.PalDATEVExport(false, ((SalString)this.cmbDATEValt.Text).ToDate(), "AR");
			}
			else if (this.rbPharmaliste.Checked == true)  // 09.12.21 Ä1984
			{
				this.SetStatusBarText("Erstelle Pharmaliste -  Bitte warten !");
				dlgLlDruck.ModalDialog(App.frmMain, "Pharmaliste.lst", "");
				Sal.WaitCursor(false);
			}
			else if (this.rbPharmalisteVM.Checked == true)  // 09.12.21 Ä1984
			{
				this.SetStatusBarText("Erstelle Pharmaliste -  Bitte warten !");
				this.PalFillKontoauszug();
				dlgLlDruck.ModalDialog(App.frmMain, "Pharmaliste.lst", "Vormonate");
				Sal.WaitCursor(false);
			}
			else if (this.rbOPListeDatum.Checked == true)  // 15.02.22 Ä1999
			{
				App.frmMain.nOPMS = 0;
				App.frmMain.nOPMSbis = 9;
				dlgLlDruck.ModalDialog(App.frmMain, "OP-Liste.lst", "Datum:" + Int.PalDateToStr(this.dfOPListeDatum.Value));
			}
			else if (this.rbDATEVTKneu.Checked)  // 30.03.21 Ä1952
			{
				this.PalDATEVExport(true, SalDateTime.Null, "KA");
			}
			else if (this.rbDATEVTKalt.Checked)  // 30.03.21 Ä1952
			{
				this.PalDATEVExport(false, ((SalString)this.cmbKontoDruck.Text).ToDate(), "KA");
			}
			Sal.EnableWindow(App.frmMain.pbDrucke);
			this.SetStatusBarText("");
			// 01.02.16 Ä1328 raus
			// Call SalEndDialog(dlgdivDruck,0)
			#endregion
		}
		
		/// <summary>
		/// dfOPListeDatum WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfOPListeDatum_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfOPListeDatum_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfOPListeDatum_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sal.IsNull(this.dfDbis)) 
			{
				this.dfDbis = this.dfDvon;
				if (this.dfDvon.Value == new SalDateTime(1900, 1, 1)) 
				{
					this.dfDbis.Value = new SalDateTime(2100, 12, 31);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalMakeFileDATEVARLocals
			{
				public SalNumber nArztNr = 0;
				public SalBoolean bNeu = false;
				public SalString strName = "";
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalMakeFileDATEVKALocals
			{
				public SalNumber nArztNr = 0;
				public SalBoolean bNeu = false;
				public SalString strName = "";
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalDATEVExportLocals
			{
				public SalString strPSelect = "";
				public SalBoolean bNeu = false;
				public SalDateTime dtAltDat = SalDateTime.Null;
				public SalString strTabelle = "";
			}
		}
		#endregion
	}
}
