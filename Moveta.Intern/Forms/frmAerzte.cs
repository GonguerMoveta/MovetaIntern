// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// ArztStamm
	/// </summary>
	/// <param name="strPHerkunft"></param>
	/// <param name="nPArztNr"></param>
	public partial class frmAerzte : SalQuickTabsForm
	{
		#region Window Parameters
		public SalString strPHerkunft;
		public SalNumber nPArztNr;
		#endregion
		
		#region Window Variables
		public SalBoolean bOK = false;
		public SalNumber nDummy = 0;
		public SalBoolean bExists = false;
		public SalBoolean bLoesch = false;
		public SalNumber nAVS = 0;
		public SalNumber nAVH = 0;
		public SalNumber nITBrief = 0;
		public SalNumber nITMulti = 0;
		public SalNumber nRundschreiben = 0;
		public SalString lsLogo = "";
		public SalString strDateiName = "";
		public SalString strDateiPfad = "";
		public SalNumber nLength = 0;
		public SalNumber nRaZa = 0;
		public SalSqlHandle hSqlTVNKonto = SalSqlHandle.Null;
		public SalNumber nTVNKonto = 0;
		public SalFileHandle hDisk = SalFileHandle.Null;
		public SalString strAktPfad = "";
		public SalNumber nCount = 0;
		public SalNumber nBytes = 0;
		public SalSqlHandle hSqlPI = SalSqlHandle.Null;
		public SalNumber nFetchPI = 0;
		public SalNumber nRowPI = 0;
		public SalString strSVLC = "";
		public SalString strKALC = "";
		public SalNumber nRaZaNeu = 0;
		public SalNumber nKeinGeld = 0;
		public SalString lsBody = "";
		public SalNumber nPicture = 0;
		public SalString strTemp = "";
		public MTblPrintParams PrintParams = new MTblPrintParams();
		public SalString strDevice = "";
		public SalNumber nResult = 0;
		public SalNumber nAnz = 0;
		public SalNumber nOff = 0;
		public SalArray<SalString> strPrinters = new SalArray<SalString>();
		public SalNumber nEWAVariante = 0;
		public SalNumber nZahlErinn = 0;
		public SalSqlHandle hSqlPersonen = SalSqlHandle.Null;
		public SalNumber nStaffel = 0;
		public SalNumber nKeinGuthabenbeiAbrg = 0;
		public SalNumber nKeinDarlehenbeiAbrg = 0;
		public SalNumber nAbtretung = 0;
		public SalNumber nMailAkteErl = 0;
		public SalNumber nVorsch1 = 0;
		public SalNumber nVorsch2 = 0;
		public SalNumber nVorsch3 = 0;
		public SalNumber nVorsch6 = 0;
		public SalNumber nVorsch7 = 0;
		public SalNumber nVorsch9 = 0;
		public SalNumber nVorsch9CR = 0;
		public SalString strStatus = "";
		public SalString strObject = "";
		public SalString strDATEVFormat = "";
		public SalSqlHandle hSqlDisk = SalSqlHandle.Null;
		public SalNumber nFetch = 0;
		public SalNumber nTANr = 0;
		public SalNumber nAnzTSE = 0;
		public SalNumber nTAReverse = 0;
		public SalNumber nDMVorst = 0;
		public SalNumber nDMSoll = 0;
		public SalNumber nKonto = 0;
		public SalDateTime dtBuchDat = SalDateTime.Null;
		public SalString strBuchText = "";
		public SalString strSelect = "";
		public SalNumber nBilanzierer = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmAerzte(SalString strPHerkunft, SalNumber nPArztNr)
		{
			// Assign global reference.
			App.frmAerzte = this;
			// Window Parameters initialization.
			this.strPHerkunft = strPHerkunft;
			this.nPArztNr = nPArztNr;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmAerzte CreateWindow(Control owner, SalString strPHerkunft, SalNumber nPArztNr)
		{
			frmAerzte frm = new frmAerzte(strPHerkunft, nPArztNr);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmAerzte FromHandle(SalWindowHandle handle)
		{
			return ((frmAerzte)SalWindow.FromHandle(handle, typeof(frmAerzte)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalHoleArzt()
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlIstDa(@" FROM a
WHERE aarztnr = :frmAerzte.dfArztNr ", ref bOK);
				if (bOK) 
				{

					// 17.12.15 Ä1295 + agfkrit
					// 26.07.16 Ä1377 + abeztage
					// 15.08.16 Ä1410 + akappung
					// 18.08.16 Ä1415 Bank, BLZ, Konto auskommentiert
					// 25.10.16 Ä1426 + austid2
					// 31.10.16 Ä1437 + aewaabeur, aewavariante
					// 07.11.16 Ä1421 + aneuenr
					// 17.02.17 Ä1504 + Zahlungserinnerungen
					// 06.03.17 Ä1515 + arechtext
					// 11.12.17 Ä1663 + Wochentage und Tag des Monats
					// 06.02.18 Ä1697 + RaZa-Kleinbetrag
					// 25.03.19 Ä1819 + aabtretung
					// 26.03.19 Ä1757 + amailakteerl
					// 18.06.19 Ä1854 + Vorschüsse
					// 12.11.19 Ä1872 + asteuernummer
					// 29.03.21 Ä1952 + DATEV-Export
					// 14.05.21 Ä1958 + atmein
					// 21.02.23 Ä2080 + amgausbuchenmtl
					// 08.08.23 Ä2110 + agfmemo, aanderenummern
					// 14.11.23 Ä2144 + abilanzierer
					Int.SqlImmedSel(@"SELECT aarztnr, aname1, aname2, astr, aort, aland, atvnkonto, aeintr, aabschgr, amindguth, akzpraxart,
afaelltg, akzmahndm, atitel, amatch, anr2, astaffel, akzmb, aaustritt, agestorben, agebdm, amahnint,
aeinlage, abeitrag, amgausbuchen, akleinbetrag, akzgebstaf, aproz1, aproz2, aproz3, adrucke, amemo, aallginfo, alogo, askonto, avorschproz, austid, asteuernr,
aemail, aemailtvs, aemailnews, apmemail, atelpraxis, atelhandy, atelprivat, atelfax,
aitmemo,  aitei, aittv, aitsoftware, aitbrief, aitmulti, aitgestseit, aitltztbelast, aitbelastdm, asehrgeehrte, araabgms, araabgaus, arundschreiben,
asvtitel, asvname1, asvname2, asvstr, asvort, asvland,
akatitel, akaname1, akaname2, akastr, akaort, akaland, abild, araza, arazaneu, aregnr, akeingeld, aiban, abic, agfkrit, abeztage,
akappung, austid2, aewaabeur, aewavariante, aneuenr,
azahlerinn, azefrist, azetext, arechtext, aabrkeinguthaben, aabrkeindarlehenbeiabrg,
awomo, awodi, awomi, awodo, awofr, atm, arazakleinbetrag, aabtretung, amailakteerl,
avorschuss1, avorschuss2, avorschuss3, avorschuss6, avorschuss7, avorschuss9, avorschuss1wochen, avorschuss9cr,
aapikey, aapisecret, adatevberaternr, adatevmandantennr, adatevcode, adatevmail, atmein,
amgausbuchenmtl, agfmemo, aanderenummern, abilanzierer
INTO :frmAerzte.dfArztNr, :frmAerzte.dfName1, :frmAerzte.dfName2, :frmAerzte.dfStr, :frmAerzte.dfOrt, :frmAerzte.strSVLC,
:frmAerzte.cmbTVNKonto, :frmAerzte.dfEintritt, :frmAerzte.dfAbschGr, :frmAerzte.dfMindGuth,
:frmAerzte.dfKZPraxArt, :frmAerzte.dfFaellTage, :frmAerzte.dfKZMahnDM, :frmAerzte.dfTitel, :frmAerzte.dfMatch,
:frmAerzte.dfArztNr2, :frmAerzte.nStaffel, :frmAerzte.dfKZMB, :frmAerzte.dfAustritt, :frmAerzte.dfGestorben,
:frmAerzte.dfGebDM, :frmAerzte.dfMahnint, :frmAerzte.dfEinlage, :frmAerzte.dfBeitrag, :frmAerzte.dfMGausb,
:frmAerzte.dfKleinbetr, :frmAerzte.dfKZGebStaff,  :frmAerzte.dfProz1, :frmAerzte.dfProz2, :frmAerzte.dfProz3,
:frmAerzte.dfDrucke, :frmAerzte.mlRechtext, :frmAerzte.mlRechInfo, :frmAerzte.dfLogo, :frmAerzte.dfSkonto, :frmAerzte.dfVorschProz, :frmAerzte.dfUStID, :frmAerzte.dfSteuerNr,
:frmAerzte.dfeMail, :frmAerzte.dfeMailTVS, :frmAerzte.dfeMailNews, :frmAerzte.dfeMailPM, :frmAerzte.dfTelPraxis, :frmAerzte.dfTelHandy, :frmAerzte.dfTelPrivat, :frmAerzte.dfTelFax ,
:frmAerzte.mlITMemo, :frmAerzte.dfITEI, :frmAerzte.dfITTV, :frmAerzte.dfITSoftware, :frmAerzte.nITBrief, :frmAerzte.nITMulti,
:frmAerzte.dfITGestSeit, :frmAerzte.dfITLtztBelast, :frmAerzte.dfITBelastDM, :frmAerzte.dfSehrgeehrte, :frmAerzte.dfRAAbgMS, :frmAerzte.dfRAAbgAusb, :frmAerzte.nRundschreiben,
:frmAerzte.dfSVTitel, :frmAerzte.dfSVName1, :frmAerzte.dfSVName2, :frmAerzte.dfSVStr, :frmAerzte.dfSVOrt,  :frmAerzte.cmbSVLC,
:frmAerzte.dfKATitel, :frmAerzte.dfKAName1, :frmAerzte.dfKAName2, :frmAerzte.dfKAStr, :frmAerzte.dfKAOrt,  :frmAerzte.cmbKALC,
:frmAerzte.lsLogo, :frmAerzte.nRaZa, :frmAerzte.nRaZaNeu, :frmAerzte.dfRegNr, :frmAerzte.nKeinGeld, :frmAerzte.dfIBAN, :frmAerzte.dfBIC, :frmAerzte.mlGFKrit, :frmAerzte.dfBEZTage,
:frmAerzte.dfKappung, :frmAerzte.dfUStID2, :frmAerzte.dfEWAabEUR, :frmAerzte.nEWAVariante, :frmAerzte.dfNeueNr,
:frmAerzte.nZahlErinn, :frmAerzte.dfZEFrist, :frmAerzte.mlZEText, :frmAerzte.mlRechTextO, :frmAerzte.nKeinGuthabenbeiAbrg, :frmAerzte.nKeinDarlehenbeiAbrg,
:frmAerzte.cbWoMo, :frmAerzte.cbWoDi, :frmAerzte.cbWoMi, :frmAerzte.cbWoDo, :frmAerzte.cbWoFr, :frmAerzte.dfTM, :frmAerzte.dfRaZaKleinbetrag, :frmAerzte.nAbtretung,
:frmAerzte.nMailAkteErl,
:frmAerzte.nVorsch1, :frmAerzte.nVorsch2, :frmAerzte.nVorsch3, :frmAerzte.nVorsch6, :frmAerzte.nVorsch7, :frmAerzte.nVorsch9, :frmAerzte.dfVorschuss1Wochen, :frmAerzte.nVorsch9CR,
:frmAerzte.dfAPIKey, :frmAerzte.dfAPISecret, :frmAerzte.dfDATEVBeraternr, :frmAerzte.dfDATEVMandantennr, :frmAerzte.strDATEVFormat, :frmAerzte.dfDATEVMail, :frmAerzte.dfTMEingang,
:frmAerzte.dfMGausbMtl, :frmAerzte.mlGFMemo, :frmAerzte.dfandereNummern, :frmAerzte.nBilanzierer
 FROM a WHERE aarztnr = :frmAerzte.dfArztNr");
					// 04.12.17 Ä1391
					cmbStaffel.Text = nStaffel.ToString(0);

					if (dfKappung.Number == Sys.NUMBER_Null) 
					{
						dfKappung.Number = Var.nKappung;
					}
					// 01.04.16
					cbDr01.Checked = Sal.StrMidX(dfDrucke.Text, 0, 1) == "X";
					cbDr02.Checked = Sal.StrMidX(dfDrucke.Text, 1, 1) == "X";
					cbDr03.Checked = Sal.StrMidX(dfDrucke.Text, 2, 1) == "X";
					cbDr04.Checked = Sal.StrMidX(dfDrucke.Text, 3, 1) == "X";
					cbDr05.Checked = Sal.StrMidX(dfDrucke.Text, 4, 1) == "X";
					cbDr06.Checked = Sal.StrMidX(dfDrucke.Text, 5, 1) == "X";
					cbDr07.Checked = Sal.StrMidX(dfDrucke.Text, 6, 1) == "X";
					cbDr08.Checked = Sal.StrMidX(dfDrucke.Text, 7, 1) == "X";
					cbDr09.Checked = Sal.StrMidX(dfDrucke.Text, 8, 1) == "X";
					// 18.08.16 Ä1415 Bank, BLZ, Konto auskommentiert
					// 17.11.10 OTF796
					// Set dfBLZ = PalCheckBLZKonto( strTABLZ)
					// Set dfKonto = PalCheckBLZKonto( strTAKonto)
					// 27.04.10 OTÄ420
					strSVLC = Int.PalPruefeLC(strSVLC, 1);
					cmbLC.Text = strSVLC;
					cmbSVLC.Text = Int.PalPruefeLC(cmbSVLC.Text, 1);
					cmbKALC.Text = Int.PalPruefeLC(cmbKALC.Text, 1);
					// 29.03.21 Ä1952 + DATEV-Export
					cmbDATEVFormat.Text = strDATEVFormat;

					cbITBrief.Checked = nITBrief == 1;
					cbITBrief4.Checked = nITBrief == 2;
					cbITMulti.Checked = nITMulti == 1;
					cbRundschreiben.Checked = nRundschreiben == 1;
					// 17.02.17 Ä1504 + Zahlungserinnerungen
					cbZahlErinn.Checked = nZahlErinn == 1;
					// 17.07.12 Ä792 Ä792
					// Call SalPicClear(picLogo)
					// If lsLogo != ''
					// If Not SalPicSetString ( picLogo, PIC_FormatObject, lsLogo )
					// Call SalMessageBox('Logo konnte nicht geladen werden.','Fehler',MB_Ok)
					picLogo.ClearImage();
					// If not hSqlPI
					// 20.01.14 Ä1005
					// Call SqlCreateSession(hSession,'')
					// If SqlCreateStatement (hSession, hSqlPI)
					// If SqlSetIsolationLevel(hSqlPI,'RO')

					Int.SqlConnection(ref hSqlPI);
					hSqlPI.PrepareAndExecute("SELECT abild INTO :frmAerzte.lsLogo FROM a WHERE aarztnr = :frmAerzte.dfArztNr");
					// TODO: Obsolete functions or constants used: SetLongBindDatatype.
					Sql.SetLongBindDatatype(1, 23); // 23 = BINARY
					nFetchPI = hSqlPI.FetchNext();
					// 18.02.14
					hSqlPI.Commit();
					hSqlPI.Disconnect();

					// 20.01.14 Ä1005
					// Call SqlFreeSession( hSession )

					if (lsLogo != "" && nFetchPI == Sys.FETCH_Ok) 
					{
						strTemp = Vis.DosGetEnvString("TEMP");
						Sal.StrUncompress(ref lsLogo);
						nPicture = MT.MImg.LoadFromString(lsLogo, MT.MImg.MIMG_TYPE_BMP, 0);
						if (nPicture != 0) 
						{
							// 18.03.12 F1549 strTVNPath -> strTemp 	25.03.13 + ' || PalDateToStrJJJJMMTThhmmsst( SalDateCurrent(  ) ) || '
							if (!(MT.MImg.Save(nPicture, strTemp + "\\Logo.bmp", MT.MImg.MIMG_TYPE_BMP))) 
							{
								this.SetStatusBarText("Das Logo für Mitglied " + Sal.NumberToStrX(App.frmMain.nTANr, 0) + " kann nicht nach " + strTemp + "\\Logo.bmp gespeichert werden.");
								nPicture = 0;
							}
							else
							{
								if (!(picLogo.SetImageFile(strTemp + "\\Logo.bmp"))) 
								{
									Sal.MessageBox("Logo konnte nicht geladen werden.", "Fehler", Sys.MB_Ok);
								}
							}
						}
						else
						{
							Sal.MessageBox("Das Logo kann nicht geladen werden!", "Logofehler", (Sys.MB_Ok | Sys.MB_IconStop));
						}
						// If not SalPicSetImage( picLogo, lsLogo, PIC_ImageTypeBMP )
						// Call SalMessageBox('Logo konnte nicht geladen werden.','Fehler',MB_Ok)
					}
					// #0009
					if (nRaZa == 0) 
					{
						rb0.Checked = true;
					}
					else if (nRaZa == 2) 
					{
						rb2.Checked = true;
					}
					else
					{
						rb1.Checked = true;
					}
					// 31.01.11 OTÄ533
					if (nRaZaNeu == 1) 
					{
						cbRaZaNeu.Checked = true;
					}
					else
					{
						cbRaZaNeu.Checked = false;
					}
					// 22.12.11 Ä696
					if (nKeinGeld == 1) 
					{
						cbKeinGeld.Checked = true;
					}
					else
					{
						cbKeinGeld.Checked = false;
					}
					// 04.12.17 Ä1461
					if (nKeinGuthabenbeiAbrg == 1) 
					{
						cbKeinGuthabenbeiAbrg.Checked = true;
					}
					else
					{
						cbKeinGuthabenbeiAbrg.Checked = false;
					}
					// 18.12.17 Ä1461
					if (nKeinDarlehenbeiAbrg == 1) 
					{
						cbKeinDarlehenbeiAbrg.Checked = true;
					}
					else
					{
						cbKeinDarlehenbeiAbrg.Checked = false;
					}
					// 31.10.16 Ä1437
					if (nEWAVariante == 1) 
					{
						rbEWA1.Checked = true;
					}
					else if (nEWAVariante == 2) 
					{
						rbEWA2.Checked = true;
					}
					else
					{
						rbEWA3.Checked = true;
					}
					// 07.11.16 Ä1421 + aneuenr
					if (dfNeueNr.Number == Sys.NUMBER_Null || dfNeueNr.Number == 0) 
					{
						cbNeueNr.Checked = false;
					}
					else
					{
						cbNeueNr.Checked = true;
					}
					// 06.02.18 Ä1697 + RaZa-Kleinbetrag
					if (dfRaZaKleinbetrag.Number == Sys.NUMBER_Null) 
					{
						dfRaZaKleinbetrag.Number = 5;
					}
					// 25.03.19 Ä1819 + aabtretung
					if (nAbtretung == 1) 
					{
						cbAbtretung.Checked = true;
						Sal.DisableWindow(dfIBAN);
						Sal.DisableWindow(dfBIC);
					}
					else
					{
						cbAbtretung.Checked = false;
						Sal.EnableWindow(dfIBAN);
						Sal.EnableWindow(dfBIC);
					}
					if (Var.strBNAbtlg == "GF") 
					{
						Sal.EnableWindow(cbAbtretung);
					}
					else
					{
						Sal.DisableWindow(cbAbtretung);
					}
					// 26.03.19 Ä1757 + amailakteerl
					if (nMailAkteErl == 1) 
					{
						cbMailAkteErl.Checked = true;
					}
					else
					{
						cbMailAkteErl.Checked = false;
					}
					// 18.06.19 Ä1854 + Vorschüsse
					cbVorschuss1.Checked = false;
					cbVorschuss2.Checked = false;
					cbVorschuss3.Checked = false;
					cbVorschuss6.Checked = false;
					cbVorschuss7.Checked = false;
					cbVorschuss9.Checked = false;
					cbVorschuss1.Checked = nVorsch1 == 1;
					cbVorschuss2.Checked = nVorsch2 == 1;
					cbVorschuss3.Checked = nVorsch3 == 1;
					cbVorschuss6.Checked = nVorsch6 == 1;
					if (nVorsch6 == SalNumber.Null) 
					{
						cbVorschuss6.Checked = true;
					}
					cbVorschuss7.Checked = nVorsch7 == 1;
					cbVorschuss9.Checked = nVorsch9 == 1;
					if (nVorsch9CR == SalNumber.Null || nVorsch9CR == 0) 
					{
						rbVorschuss9Positiv.Checked = false;
						rbVorschuss9Negativ.Checked = true;
					}
					else
					{
						rbVorschuss9Positiv.Checked = true;
						rbVorschuss9Negativ.Checked = false;
					}
					if (dfVorschuss1Wochen.Number == Sys.NUMBER_Null) 
					{
						dfVorschuss1Wochen.Number = 4;
					}
					// 14.11.23 Ä2144 + abilanzierer
					if (nBilanzierer == 1) 
					{
						cbBilanzierer.Checked = true;
					}
					else
					{
						cbBilanzierer.Checked = false;
					}


					// 10.07.07
					// Call frmAerzte.axText.PropSetRTFSelText( mlRechtext )

					// 05.08.09 OTÄ298
					PalSave();
					// 20.01.14 Ä1005
					// Call SqlCreateSession(hSession,'')
					// If SqlCreateStatement (hSession, hSqlPI)
					// If SqlSetIsolationLevel(hSqlPI,'RO')
					Int.SqlConnection(ref hSqlPI);

					tblPI.Populate(hSqlPI, @"SELECT pihauptnr, pinebennr
INTO :frmAerzte.tblPI.colnHauptNr, :frmAerzte.tblPI.colnNebenNr
FROM pi WHERE pihauptnr = :frmAerzte.dfArztNr ORDER BY pinebennr", Sys.TBL_FillAll);
					// 03.12.09
					// Call SqlConnection(hSqlTVNKonto)
					if (tblHZettel.Populate(hSqlPI, @"SELECT zvon,zan,zrechnr,zbemerk,zdatum, zerledigt
FROM Z
INTO :tblHZettel.colsVon, :tblHZettel.colsAn, :tblHZettel.colnRechNr, :tblHZettel.collsBemerk, :tblHZettel.coldtDatum, :tblHZettel.colsErl
WHERE  zarztnr = :frmAerzte.dfArztNr AND zhalternr=0  ORDER BY zdatum DESC", Sys.TBL_FillAll)) 
					{
						MT.MTbl.AutoSizeColumn(tblHZettel, Sys.hWndNULL, MT.MTbl.MTASC_ALLROWS);
					}
					// 13.12.11 Ä679
					tblDD.Populate(hSqlPI, @"SELECT ddarztnr, ddcode, ddz1, ddz2, ddstr, ddort, ddland, ddemail, dderfdat
INTO :frmAerzte.tblDD.colArztNr, :frmAerzte.tblDD.colCode, :frmAerzte.tblDD.colZ1, :frmAerzte.tblDD.colZ2, :frmAerzte.tblDD.colStr, :frmAerzte.tblDD.colOrt, :frmAerzte.tblDD.colLand, :frmAerzte.tblDD.colEMail, :frmAerzte.tblDD.colErfDat
FROM dd WHERE ddarztnr = :frmAerzte.dfArztNr ORDER BY dderfdat", Sys.TBL_FillAll);

					// 20.01.14 Ä1005
					hSqlPI.Disconnect();
					// Call SqlFreeSession( hSession )

					// Call SqlDisconnect(hSqlTVNKonto)
				}
				else
				{
					PalNeuerArzt();
					tblHZettel.ResetTable();
				}
				// 08.02.16
				Int.SqlConnection(ref hSqlPI);
				Int.SqlImmedSel("SELECT count(*) INTO :frmAerzte.dfPegNutzungGes FROM pn WHERE pnletztdat >= SYSDATE - 3 MONTHS");
				dfPegNutzung.Number = Sys.NUMBER_Null;

				if (dfArztNr.Number > 0) 
				{
					// Call SalTblPopulate( tblPN,hSqlPI,
					// 'SELECT dbarztnr, pnarztnr, pncomputername, pnpraxis, pnprogver, pnletztdat, pnguid
					// INTO :frmAerzte.tblPN.colTVNArztNr, :frmAerzte.tblPN.colPegArztNr, :frmAerzte.tblPN.colCN, :frmAerzte.tblPN.colPraxis, :frmAerzte.tblPN.colProgVer, :frmAerzte.tblPN.colLetztDat, :frmAerzte.tblPN.colGUID
					// FROM db, pn WHERE (dbguid(+)=pnguid or pnarztnr=dbarztnr) and (dbarztnr=:frmAerzte.dfArztNr or dbarztnr=:frmAerzte.dfArztNr2)'
					// ,TBL_FillAll )
					if (tblPN.Populate(hSqlPI, @"SELECT pncomputername, pnpraxis, pnprogver, pnguid, max(pnletztdat)
INTO :frmAerzte.tblPN.colCN, :frmAerzte.tblPN.colPraxis, :frmAerzte.tblPN.colProgVer, :frmAerzte.tblPN.colGUID, :frmAerzte.tblPN.colLetztDat
FROM db, pn WHERE (dbguid(+)=pnguid or pnarztnr=dbarztnr) and (dbarztnr=:frmAerzte.dfArztNr or dbarztnr=:frmAerzte.dfArztNr2) GROUP BY 1,2,3,4", Sys.TBL_FillAll)) 
					{
					}
					// 10.06.22
					dfITTV.Number = Int.PalNULLto0(dfITTV.Number);
					dfITEI.Number = Int.PalNULLto0(dfITEI.Number);
					if ((dfITEI.Number + dfITTV.Number) != dfPegNutzung.Number) 
					{
						Int.PalGetRecordInArray("AERZTE", "WHERE aarztnr = :frmAerzte.dfArztNr", "", Var.strLLFeld);
						dfITEI.Number = dfPegNutzung.Number - dfITTV.Number;
						Int.SqlImmedX(@"UPDATE a
SET aitei = :frmAerzte.dfITEI
WHERE aarztnr = :frmAerzte.dfArztNr");
						Int.PalGetRecordInArray("AERZTE", "WHERE aarztnr = :frmAerzte.dfArztNr", "2", Var.strLLFeld);
						Var.lsLog = Int.PalCompareRecordsInArray();
						if (Var.lsLog != "") 
						{
							Var.lsLog = @"***** AS geändert

" + Var.lsLog;
							Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmAerzte.dfArztNr, 0, 0,
:lsLog , SYSDATE, NULL, 'J', 'HS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,1, SYSDATETIME)");
						}
					}

					Sal.HideWindow(tblPN.colTVNArztNr);
					Sal.HideWindow(tblPN.colPegArztNr);
				}
				else
				{
					tblPN.Populate(hSqlPI, @"SELECT pnarztnr, pncomputername, pnpraxis, pnprogver, pnletztdat, pnguid
INTO :frmAerzte.tblPN.colPegArztNr, :frmAerzte.tblPN.colCN, :frmAerzte.tblPN.colPraxis, :frmAerzte.tblPN.colProgVer, :frmAerzte.tblPN.colLetztDat, :frmAerzte.tblPN.colGUID
FROM pn WHERE pnguid NOT IN (SELECT DISTINCT dbguid FROM db)", Sys.TBL_FillAll);
				}
				// 14.11.17 Ä1648
				PalHolePersonen();
				// 17.07.20 Ä1896
				tblTSE.ResetTable();
				if (picTabs.GetTop() == 14)  // TSEn
				{
					Sal.WaitCursor(true);
					if (dfAPIKey.Text != "" && dfAPISecret.Text != "") 
					{
						Var.FISKALY.fInit(dfAPIKey.Text, dfAPISecret.Text, "V1");
						if (Int.PalFiskalyRunMethod("frmAerzte", "ListTSS", ref Var.strFiskalyTSSId, ref Var.strFiskalyClientId, ref Var.strFiskalySerialNumber, ref Var.strFiskalyTxId, ref Var.strFiskalyState, "", SalNumber.Null, "", ref strStatus, ref strObject, ref 
							Var.strFiskalyCertificateSerial, ref Var.strFiskalyPublicKey, ref Var.strFiskalySignature_algorithm, ref Var.nFiskalySignature_counter, ref Var.strFiskalySignature_timestamp_format, ref Var.nFiskalyTransaction_number, ref Var.strFiskalySignature_value, ref 
							Var.strFiskalyQR_code_date, ref Var.strFiskalyEnv, Var.strFiskalyDescription, ref Var.strFiskalyProcessType, ref Var.strFiskalyProcessData, ref Var.strFiskalyExportID, Var.strFiskalyTime_Start, Var.strFiskalyTime_End)) 
						{
						}
						else
						{
							Sal.MessageBox("Das Laden der TSEn v1 war nicht erfolgreich", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
						}
						Var.FISKALY.fInit(dfAPIKey.Text, dfAPISecret.Text, "V2");
						if (Int.PalFiskalyRunMethod("frmAerzte", "ListTSS", ref Var.strFiskalyTSSId, ref Var.strFiskalyClientId, ref Var.strFiskalySerialNumber, ref Var.strFiskalyTxId, ref Var.strFiskalyState, "", SalNumber.Null, "", ref strStatus, ref strObject, ref 
							Var.strFiskalyCertificateSerial, ref Var.strFiskalyPublicKey, ref Var.strFiskalySignature_algorithm, ref Var.nFiskalySignature_counter, ref Var.strFiskalySignature_timestamp_format, ref Var.nFiskalyTransaction_number, ref Var.strFiskalySignature_value, ref 
							Var.strFiskalyQR_code_date, ref Var.strFiskalyEnv, Var.strFiskalyDescription, ref Var.strFiskalyProcessType, ref Var.strFiskalyProcessData, ref Var.strFiskalyExportID, Var.strFiskalyTime_Start, Var.strFiskalyTime_End)) 
						{
						}
						else
						{
							Sal.MessageBox("Das Laden der TSEn v2 war nicht erfolgreich", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
						}
					}
					Sal.WaitCursor(false);
				}
				// 21.09.23 Ä2138 TSE während des Jahres bei Austritt belasten
				Int.SqlIstDa(@"FROM tb
WHERE tbarztnr = :frmAerzte.dfArztNr AND tberldat IS NULL", ref bOK);
				if (bOK) 
				{
					pbTSEbel.EnableWindow();
				}
				else
				{
					pbTSEbel.DisableWindow();
				}

				// 20.01.14 Ä1005
				hSqlPI.Disconnect();
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalLoescheMaske()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.ClearField(dfArztNr);
				Sal.ClearField(dfName1);
				Sal.ClearField(dfName2);
				Sal.ClearField(dfStr);
				Sal.ClearField(dfOrt);
				Sal.ClearField(cmbLC);
				Sal.ClearField(dfFaellTage);
				Sal.ClearField(dfMahnint);
				Sal.ClearField(dfTitel);
				Sal.ClearField(dfMatch);
				Sal.ClearField(dfSVName1);
				Sal.ClearField(dfSVName2);
				Sal.ClearField(dfSVStr);
				Sal.ClearField(dfSVOrt);
				Sal.ClearField(dfSVTitel);
				Sal.ClearField(cmbSVLC);
				Sal.ClearField(dfKAName1);
				Sal.ClearField(dfKAName2);
				Sal.ClearField(dfKAStr);
				Sal.ClearField(dfKAOrt);
				Sal.ClearField(dfKATitel);
				Sal.ClearField(cmbKALC);
				Sal.ClearField(dfProz1);
				Sal.ClearField(dfProz2);
				Sal.ClearField(dfProz3);
				// 18.08.16 Ä1415 Bank, BLZ, Konto auskommentiert
				// Call SalClearField(dfBank)
				// Call SalClearField(dfBLZ)
				// Call SalClearField(dfKonto)
				Sal.ClearField(dfIBAN);
				Sal.ClearField(dfBIC);
				Sal.ClearField(cmbTVNKonto);
				Sal.ClearField(dfEintritt);
				Sal.ClearField(dfAbschGr);
				Sal.ClearField(dfMindGuth);
				Sal.ClearField(dfKZPraxArt);
				Sal.ClearField(dfKZMahnDM);
				Sal.ClearField(dfArztNr2);
				Sal.ClearField(cmbStaffel);
				nStaffel = 0;
				Sal.ClearField(dfKZMB);
				Sal.ClearField(dfAustritt);
				Sal.ClearField(dfGestorben);
				Sal.ClearField(dfGebDM);
				Sal.ClearField(dfEinlage);
				Sal.ClearField(dfBeitrag);
				Sal.ClearField(dfMGausb);
				Sal.ClearField(dfKleinbetr);
				Sal.ClearField(dfKZGebStaff);
				Sal.ClearField(dfDMRech);
				Sal.ClearField(dfDMMahn);
				Sal.ClearField(dfDMZahl);
				Sal.ClearField(dfDrucke);
				// 07.11.16 Ä1421 + aneuenr
				Sal.ClearField(dfNeueNr);
				cbNeueNr.Checked = false;
				// 06.02.18 Ä1697 + RaZa-Kleinbetrag
				Sal.ClearField(dfRaZaKleinbetrag);
				// 01.04.16
				cbDr01.Checked = false;
				cbDr02.Checked = false;
				cbDr03.Checked = false;
				cbDr04.Checked = false;
				cbDr05.Checked = false;
				cbDr06.Checked = false;
				cbDr07.Checked = false;
				cbDr08.Checked = false;
				cbDr09.Checked = false;

				Sal.ClearField(mlRechtext);
				// 06.03.17 Ä1515 + arechtext
				Sal.ClearField(mlRechTextO);
				// 10.07.07
				// Call frmAerzte.axText.Reset(  )

				Sal.ClearField(mlRechInfo);
				Sal.ClearField(dfLogo);
				Sal.ClearField(dfUStID);
				// 12.11.19 Ä1872 + asteuernummer
				Sal.ClearField(dfSteuerNr);

				Sal.ClearField(dfeMail);
				Sal.ClearField(dfeMailTVS);
				Sal.ClearField(dfeMailNews);
				Sal.ClearField(dfeMailPM);
				Sal.ClearField(dfRAAbgMS);
				Sal.ClearField(dfRAAbgAusb);
				// 03.09.01
				Sal.ClearField(dfTelPraxis);
				Sal.ClearField(dfTelHandy);
				Sal.ClearField(dfTelPrivat);
				Sal.ClearField(dfTelFax);
				// 12.02.01
				Sal.ClearField(dfH);
				Sal.ClearField(dfR);
				Sal.ClearField(dfAK);
				Sal.ClearField(dfZ);
				Sal.ClearField(dfZA);
				Sal.ClearField(dfMA);
				Sal.ClearField(dfEL);
				Sal.ClearField(dfPR);
				// Call SalClearField(dfRa )
				Sal.ClearField(dfTK);
				Sal.ClearField(dfV);
				Sal.ClearField(dfRo);
				// 22.04.02
				Sal.ClearField(mlITMemo);
				Sal.ClearField(dfITEI);
				Sal.ClearField(dfITTV);
				Sal.ClearField(dfITSoftware);
				Sal.ClearField(cbITBrief);
				Sal.ClearField(cbITMulti);
				Sal.ClearField(cbRundschreiben);
				nITBrief = SalNumber.Null;
				nITMulti = SalNumber.Null;
				Sal.ClearField(dfITGestSeit);
				Sal.ClearField(dfITLtztBelast);
				Sal.ClearField(dfITBelastDM);
				Sal.ClearField(dfSehrgeehrte);
				pbLoesch.DisableWindow();
				picLogo.ClearImage();
				// 21.04.09 OTÄ211
				Sal.ClearField(dfRegNr);
				// 25.10.16 Ä1426 + austid2
				Sal.ClearField(dfUStID2);

				rb1.Checked = true;
				// 31.10.16 Ä1437
				rbEWA3.Checked = true;
				// 17.02.17 Ä1504 + Zahlungserinnerungen
				cbZahlErinn.Checked = false;
				Sal.ClearField(dfZEFrist);
				Sal.ClearField(mlZEText);
				// 11.12.17 Ä1663
				Sal.ClearField(cbWoMo);
				Sal.ClearField(cbWoDi);
				Sal.ClearField(cbWoMi);
				Sal.ClearField(cbWoDo);
				Sal.ClearField(cbWoFr);
				Sal.ClearField(dfTM);
				// 29.03.21 Ä1952 + DATEV-Export
				Sal.ClearField(cmbDATEVFormat);
				Sal.ClearField(dfDATEVBeraternr);
				Sal.ClearField(dfDATEVMandantennr);
				Sal.ClearField(dfDATEVMail);
				// 21.02.23 Ä2080 + amgausbuchenmtl
				Sal.ClearField(dfMGausbMtl);
				// 08.08.23 Ä2110 + agfmemo, aanderenummern
				Sal.ClearField(mlGFMemo);
				Sal.ClearField(dfandereNummern);
				// 05.08.09 OTÄ298
				tblPI.ResetTable();
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalNeuerArzt()
		{
			#region Local Variables
			SalNumber nArztNr = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				if (Sal.IsNull(dfArztNr)) 
				{
				}
				else
				{
					nArztNr = dfArztNr.Number;
					PalLoescheMaske();
					dfArztNr.Number = nArztNr;
					dfProz1.Number = 0;
					dfProz2.Number = 0;
					dfProz3.Number = 0;
					dfEintritt.Value = SalDateTime.Current;
					dfAbschGr.Number = 0;
					dfMindGuth.Number = 0;
					dfKZPraxArt.Number = 0;
					dfFaellTage.Number = 14;
					dfKZMahnDM.Number = 0;
					dfArztNr2.Number = 0;
					// 04.12.17 Ä1391
					// Set dfStaffel = 903
					cmbStaffel.Text = "903";
					nStaffel = 903;

					dfKZMB.Text = "5";
					dfGebDM.Number = 0.00m;
					dfMahnint.Number = 1;
					dfEinlage.Number = 0;
					// 17.07.07 A115
					// Set dfBeitrag = 36
					dfBeitrag.Number = 18.41m;

					dfMGausb.Number = 1;
					// 17.07.07 A115
					// Set dfKleinbetr = 0.5
					dfKleinbetr.Number = 0.5m;
					// 06.02.18 Ä1697 + RaZa-Kleinbetrag
					dfRaZaKleinbetrag.Number = 5;

					dfKZGebStaff.Number = 0;
					// Set dfDrucke = ''
					mlRechtext.Text = "";
					// 06.03.17 Ä1515 + arechtext
					mlRechTextO.Text = "";
					// 10.07.07
					// Call frmAerzte.axText.Reset(  )

					mlRechInfo.Text = "";
					dfLogo.Text = "";
					dfUStID.Text = "";
					// 12.11.19 Ä1872 + asteuernummer
					dfSteuerNr.Text = "";

					dfRAAbgMS.Number = 5;
					dfRAAbgAusb.Number = 1;
					// 25.10.16 Ä1426 + austid2
					dfUStID2.Text = "";
					// 18.06.19 Ä1854 + Vorschüsse
					cbVorschuss1.Checked = false;
					cbVorschuss2.Checked = false;
					cbVorschuss3.Checked = false;
					cbVorschuss6.Checked = false;
					cbVorschuss7.Checked = false;
					cbVorschuss9.Checked = false;
					dfVorschuss1Wochen.Number = 4;
					rbVorschuss9Positiv.Checked = false;
					rbVorschuss9Negativ.Checked = false;

					rb1.Checked = true;
					// 31.10.16 Ä1437
					rbEWA3.Checked = true;
					// 05.08.09 OTÄ298
					tblPI.ResetTable();
					// 14.11.17 Ä1648
					tblPersonen.ResetTable();
					// 17.07.20 Ä1896
					dfAPIKey.Text = "";
					dfAPISecret.Text = "";
					// 21.02.23 Ä2080 + amgausbuchenmtl
					dfMGausbMtl.Number = 0;
					// 08.08.23 Ä2110 + agfmemo, aanderenummern
					mlGFMemo.Text = "";
					dfandereNummern.Text = "";

					tblTSE.ResetTable();

					Sal.SetFocus(dfName1);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// wählt Datei
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalBildWahl()
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(2);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strArExtensions[0] = "Bilddateien - *.bmp";
				strArExtensions[1] = "*.bmp";
				strDateiPfad = "";
				xOK = Sal.DlgOpenFile(this, "Bild wählen", strArExtensions, 2, ref nIndex, ref strDateiName, ref strDateiPfad);
				if (xOK) 
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalDateiWahl()
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(4);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strArExtensions[0] = "E-Mails - *.mai";
				strArExtensions[1] = "*.mai";
				strArExtensions[2] = "alle Dateien - *.*";
				strArExtensions[3] = "*.*";
				xOK = Sal.DlgOpenFile(this, "Briefe", strArExtensions, 4, ref nIndex, ref strDateiName, ref strDateiPfad);
				if (xOK) 
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalDateiSpeich()
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(4);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strArExtensions[0] = "E-Mails - *.mai";
				strArExtensions[1] = "*.mai";
				strArExtensions[2] = "alle Dateien - *.*";
				strArExtensions[3] = "*.*";
				xOK = Sal.DlgSaveFile(this, "SELECT-Statements", strArExtensions, 4, ref nIndex, ref strDateiName, ref strDateiPfad);
				if (xOK) 
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalNewRow()
		{
			#region Actions
			using (new SalContext(this))
			{
				PalSave();
				nRowPI = tblPI.InsertRow(Sys.TBL_MaxRow);
				tblPI.colnHauptNr.Number = dfArztNr.Number;
				tblPI.SetFocusCell(nRowPI, tblPI.colnNebenNr, 0, -1);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalSave()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.WaitCursor(true);
				// Call SqlConnection( hSqlLogBugUpd)
				tblPI.KillCellEdit();
				if (tblPI.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					nRowPI = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblPI.FindNextRow(ref nRowPI, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblPI.SetFocusRow(nRowPI);

						if (tblPI.colnNebenNr.Number == Sys.NUMBER_Null) 
						{
						}
						else
						{
							Int.SqlIstDa("FROM pi WHERE pihauptnr = :frmAerzte.tblPI.colnHauptNr AND pinebennr = :frmAerzte.tblPI.colnNebenNr", ref bExists);
							if (bExists) 
							{
							}
							if (!(bExists)) 
							{
								Int.SqlImmed(@"INSERT INTO pi
(pihauptnr, pinebennr )
VALUES(:frmAerzte.tblPI.colnHauptNr, :frmAerzte.tblPI.colnNebenNr)");
							}
							tblPI.SetRowFlags(nRowPI, (Sys.ROW_New | Sys.ROW_Edited), false);
						}
					}
				}
				// 13.12.11 Ä679
				if (PalDDSave()) 
				{
				}
				// 14.11.17 Ä1648
				if (PalPersSave()) 
				{
				}

				Sal.WaitCursor(false);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalDDNewRow()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (PalDDSave()) 
				{
				}
				Int.SqlConnection(ref hSqlTVNKonto);
				tblDD.Populate(hSqlTVNKonto, @"SELECT ddarztnr, ddcode, ddz1, ddz2, ddstr, ddort, ddland, ddemail, dderfdat
INTO :frmAerzte.tblDD.colArztNr, :frmAerzte.tblDD.colCode, :frmAerzte.tblDD.colZ1, :frmAerzte.tblDD.colZ2, :frmAerzte.tblDD.colStr, :frmAerzte.tblDD.colOrt, :frmAerzte.tblDD.colLand, :frmAerzte.tblDD.colEMail, :frmAerzte.tblDD.colErfDat
FROM dd WHERE ddarztnr = :frmAerzte.dfArztNr ORDER BY dderfdat", Sys.TBL_FillAll);
				hSqlTVNKonto.Disconnect();
				Var.nRow = tblDD.InsertRow(Sys.TBL_MaxRow);
				tblDD.colErfDat.DateTime = SalDateTime.Current;
				tblDD.colArztNr.Number = dfArztNr.Number;
				tblDD.SetFocusCell(Var.nRow, tblDD.colCode, 0, -1);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalDDSave()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.WaitCursor(true);
				// Call SqlConnection( hSqlLogBugUpd)
				tblDD.KillCellEdit();
				if (tblDD.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					Var.nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblDD.FindNextRow(ref Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblDD.SetFocusRow(Var.nRow);

						if (tblDD.colArztNr.Number != Sys.NUMBER_Null) 
						{
							if (tblDD.colErfDat.DateTime == Sys.DATETIME_Null) 
							{
								tblDD.colErfDat.DateTime = SalDateTime.Current;
							}
							tblDD.colLand.Text = Sal.StrLeftX(tblDD.colLand.Text, 2);

							Int.SqlIstDa("FROM dd WHERE dderfdat = :frmAerzte.tblDD.colErfDat AND ddarztnr = :frmAerzte.tblDD.colArztNr AND ddcode = :frmAerzte.tblDD.colCode", ref bExists);
							if (bExists) 
							{
								Int.SqlImmed(@"UPDATE dd SET
ddcode = :frmAerzte.tblDD.colCode,
ddemail = :frmAerzte.tblDD.colEMail,
ddz1 = :frmAerzte.tblDD.colZ1,
ddz2 = :frmAerzte.tblDD.colZ2,
ddstr = :frmAerzte.tblDD.colStr,
ddort = :frmAerzte.tblDD.colOrt,
ddland = :frmAerzte.tblDD.colLand
WHERE dderfdat = :frmAerzte.tblDD.colErfDat AND ddarztnr = :frmAerzte.tblDD.colArztNr AND ddcode = :frmAerzte.tblDD.colCode");
							}
							else
							{
								Int.SqlImmed(@"INSERT INTO dd
(ddarztnr, ddcode, ddz1, ddz2, ddstr, ddort, ddland, ddemail, dderfdat)
VALUES(:frmAerzte.tblDD.colArztNr, :frmAerzte.tblDD.colCode, :frmAerzte.tblDD.colZ1, :frmAerzte.tblDD.colZ2, :frmAerzte.tblDD.colStr, :frmAerzte.tblDD.colOrt, :frmAerzte.tblDD.colLand, :frmAerzte.tblDD.colEMail, :frmAerzte.tblDD.colErfDat)");
							}
						}
						tblDD.SetRowFlags(Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
				}
				Sal.WaitCursor(false);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strDrucke"></param>
		/// <param name="bDruck"></param>
		/// <returns></returns>
		public SalString PalAddDruck(SalString strDrucke, SalBoolean bDruck)
		{
			#region Actions
			using (new SalContext(this))
			{
				if (bDruck) 
				{
					strDrucke = strDrucke + "X";
				}
				else
				{
					strDrucke = strDrucke + " ";
				}
				return strDrucke;
			}
			#endregion
		}
		// 14.11.17 Ä1648
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalPersSave()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.WaitCursor(true);
				// Call SqlConnection( hSqlLogBugUpd)
				tblPersonen.KillCellEdit();
				if (tblPersonen.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					Var.nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblPersonen.FindNextRow(ref Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblPersonen.SetFocusRow(Var.nRow);

						Int.SqlIstDa("FROM ap WHERE (aparztnr = :frmAerzte.dfArztNr OR aparztnr = :frmAerzte.dfArztNr2) AND aperfdat = :tblPersonen.colErfDat", ref bExists);
						if (bExists) 
						{
							Int.SqlImmed("DELETE FROM ap WHERE (aparztnr = :frmAerzte.dfArztNr OR aparztnr = :frmAerzte.dfArztNr2) AND aperfdat = :tblPersonen.colErfDat");
							bExists = false;
						}
						if (!(bExists)) 
						{
							if (dfKZPraxArt.Number == 2) 
							{
								Int.SqlImmed(@"INSERT INTO ap
( aparztnr, apname, apgeschlecht, apgebdat, apeintrdat, aperfdat, apart )
VALUES(:frmAerzte.dfArztNr2, :tblPersonen.colName, :tblPersonen.colGeschlecht, :tblPersonen.colGebDat, :tblPersonen.colEintrDat, SYSDATETIME, :tblPersonen.colArt)");
							}
							else
							{
								Int.SqlImmed(@"INSERT INTO ap
( aparztnr, apname, apgeschlecht, apgebdat, apeintrdat, aperfdat, apart )
VALUES(:frmAerzte.dfArztNr, :tblPersonen.colName, :tblPersonen.colGeschlecht, :tblPersonen.colGebDat, :tblPersonen.colEintrDat, SYSDATETIME, :tblPersonen.colArt)");
							}
						}
						tblPersonen.SetRowFlags(Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
				}
				Sal.WaitCursor(false);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalPersNewRow()
		{
			#region Actions
			using (new SalContext(this))
			{
				Var.nRow = tblPersonen.InsertRow(Sys.TBL_MaxRow);
				tblPersonen.colEintrDat.DateTime = dfEintritt.Value;
				tblPersonen.colName.Text = ((SalString)(dfName1.Text + " " + dfName2.Text)).Trim();
				tblPersonen.SetFocusCell(Var.nRow, tblPersonen.colName, 0, -1);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalHolePersonen()
		{
			#region Actions
			using (new SalContext(this))
			{
				// 14.11.17 Ä1648
				tblPersonen.Populate(hSqlPI, @"SELECT apname, apgeschlecht, apgebdat, apeintrdat, aperfdat, apart
INTO :tblPersonen.colName, :tblPersonen.colGeschlecht, :tblPersonen.colGebDat, :tblPersonen.colEintrDat, :tblPersonen.colErfDat, :tblPersonen.colArt
FROM ap WHERE (aparztnr = :dfArztNr  or aparztnr=:frmAerzte.dfArztNr2) ORDER BY apeintrdat", Sys.TBL_FillAll);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalTSEBel()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.WaitCursor(true);
				Int.SqlConnection(ref hSqlDisk);
				// 22.12.11 Ä696
				strSelect = @"SELECT sum( tbanzahl )
INTO :frmAerzte.nAnzTSE
FROM tb
WHERE tbarztnr = :frmAerzte.dfArztNr AND tberldat IS NULL";
				Int.SqlHandleExec(hSqlDisk, strSelect, "Fehler beim Buchen der TSE-Kosten", ref nCount);
				nFetch = hSqlDisk.FetchNext();
				Var.nDummyHaben = 0;
				if (nFetch != Sys.FETCH_EOF) 
				{
					if (nAnzTSE > 0) 
					{
						strBuchText = "Technische Sicherheitseinrichtung (" + nAnzTSE.ToString(0) + " Monate)";

						Var.nCheckMwSt = Int.PalCheckAuslMwSt(nTANr);
						if (Var.nCheckMwSt == 0) 
						{
							nTAReverse = 1;
						}
						else
						{
							nTAReverse = 0;
						}
						nDMSoll = ((nAnzTSE * Var.nPreismtlTSE) * (100 + Var.nCheckMwSt)).Round() / 100;
						nDMVorst = ((nAnzTSE * Var.nPreismtlTSE) * Var.nCheckMwSt).Round() / 100;
						nKonto = 83400;

						dtBuchDat = SalDateTime.Current;
						// 06.03.23 Ä2086
						Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
						if (dtBuchDat < Var.dtINIMinBuchDat) 
						{
							dtBuchDat = Var.dtINIMinBuchDat;
						}

						// 21.09.23
						nTANr = dfArztNr.Number;
						Int.SqlImmed("UPDATE tb SET tberldat = :frmAerzte.dtBuchDat WHERE tbarztnr = :frmAerzte.nTANr AND tberldat IS NULL");


						Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkreverse)
VALUES (:frmAerzte.nTANr, 0, 0, :frmAerzte.strBuchText, 0, 0, 0,
:frmAerzte.dtBuchDat, :frmAerzte.nKonto, 0, 0, :frmAerzte.nDMVorst, 0, 0, 0, 0, 0, :nCheckMwSt, 0, 0, :frmAerzte.nDMSoll,
:frmAerzte.nDMSoll, 0, :frmAerzte.nTAReverse)");
						// AV Sachkonten - FiBu
						nDMSoll = nAnzTSE * Var.nPreismtlTSE;
						Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fihaben, fisoll, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, :frmAerzte.nKonto, 16000, :frmAerzte.nTANr, :frmAerzte.dtBuchDat, :frmAerzte.strBuchText,
:frmAerzte.nDMSoll, 6)");
						if (nDMVorst != 0) 
						{
							strBuchText = "MwSt Haben (TSE)";
							// 30.06.20 Ä1892
							Var.nMwStSenkung = 17760;
							// If dtBuchDat >= 2020-07-01 and dtBuchDat <= 2020-12-31
							// Set nMwStSenkung = PalKontenMwStSenkung( nMwStSenkung )
							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fihaben, fisoll, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, :nMwStSenkung, 16000, :frmAerzte.nTANr, :frmAerzte.dtBuchDat, :frmAerzte.strBuchText, :frmAerzte.nDMVorst, 6)");
						}
						Var.nDummyHaben = Var.nDummyHaben + 1;
					}

					nFetch = hSqlDisk.FetchNext();
				}
				hSqlDisk.Commit();
				hSqlDisk.Disconnect();
				Sal.WaitCursor(false);

				if (nAnzTSE > 0) 
				{
					Sal.MessageBox("Das Konto des Mitglieds wurde mit TSE-Kosten für " + nAnzTSE.ToString(0) + " Monate belastet.", "Ok", Sys.MB_IconAsterisk);
					pbTSEbel.DisableWindow();
				}
				else
				{
					Sal.MessageBox("ES wurden keine noch zu belastenden TSE-Kosten für das Mitglied gefunden.", "Nichts gefunden", Sys.MB_IconAsterisk);
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmAerzte WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAerzte_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmAerzte_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmAerzte_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAerzte_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(false);
			// 23.07.20 Ä1896
			this.tblTSE.SetContextMenu("frmAerzteTSERightClick", 0);
			// 21.09.23 Ä2138 TSE während des Jahres bei Austritt belasten
			this.pbTSEbel.DisableWindow();
			// 20.01.14 Ä1005
			// Set bOK = SqlCreateSession(hSqlSession,'')
			// Set bOK=SqlCreateStatement (hSqlSession, hSql)
			// Call SqlSetIsolationLevel(hSql,'RO')
			Int.SqlConnection(ref Var.hSql);

			// 27.04.10 OTÄ420
			this.cmbLC.PopulateList(Var.hSql, "SELECT lccode || \' \' || lcname FROM lc order by lccode");
			this.cmbSVLC.PopulateList(Var.hSql, "SELECT lccode || \' \' || lcname FROM lc order by lccode");
			this.cmbKALC.PopulateList(Var.hSql, "SELECT lccode || \' \' || lcname FROM lc order by lccode");
			this.tblDD.colLand.PopulateList(Var.hSql, "SELECT lccode || \' \' || lcname FROM lc order by lccode");
			// 04.12.17 Ä1391
			this.cmbStaffel.PopulateList(Var.hSql, @"SELECT stnr  || ': ' || st1 || '% ' || st2 || '% ' || st3 || '% ' || st4 || '% ' || st5 || '% ' || st6
FROM st ORDER BY stnr");
			// 29.03.21 Ä1952 + DATEV-Export
			this.cmbDATEVFormat.PopulateList(Var.hSql, "SELECT dscode FROM ds order by dscode");
			// 20.01.14 Ä1005
			Var.hSql.Disconnect();
			// Call SqlFreeSession( hSqlSession )

			if (this.nPArztNr != 0) 
			{
				this.dfArztNr.Number = this.nPArztNr;
				this.PalHoleArzt();
			}
			else
			{
				this.PalNeuerArzt();
			}
			// 12.02.01
			this.pbLoesch.DisableWindow();
			// 07.08.09 OTÄ298
			if (Var.nBNAdmin == 0) 
			{
				this.pbPINeu.DisableWindow();
				this.pbPILoe.DisableWindow();
			}
			// 07.12.06 Ä49
			Int.SqlConnection(ref this.hSqlTVNKonto);
			this.cmbTVNKonto.PopulateList(this.hSqlTVNKonto, "SELECT @STRING(bsnr,0) || \' \' || bsname FROM bs WHERE bskonto IS NOT NULL ORDER BY bsnr");
			this.hSqlTVNKonto.Disconnect();
			// 25.10.10 OTÄ493
			if (Var.strBNAbtlg != "GF" && Var.strBNZei != "KE") 
			{
				this.dfVorschProz.DisableWindowAndLabel();
				// 18.06.19 Ä1854 + Vorschüsse ( and strBNZei != 'KE')
				Sal.DisableWindow(this.cbVorschuss1);
				Sal.DisableWindow(this.cbVorschuss2);
				Sal.DisableWindow(this.cbVorschuss3);
				Sal.DisableWindow(this.cbVorschuss6);
				Sal.DisableWindow(this.cbVorschuss7);
				Sal.DisableWindow(this.cbVorschuss9);
				this.dfVorschuss1Wochen.DisableWindow();
				Sal.DisableWindow(this.rbVorschuss9Negativ);
				Sal.DisableWindow(this.rbVorschuss9Positiv);
			}
			// 01.02.11 Ä533
			if (Var.strBNAbtlg != "GF" && Var.strBNAbtlg != "MA") 
			{
				Sal.DisableWindowAndLabel(this.rb0);
				Sal.DisableWindowAndLabel(this.rb1);
				Sal.DisableWindowAndLabel(this.rb2);
				Sal.DisableWindowAndLabel(this.cbRaZaNeu);
			}
			// 17.07.12 Ä792 Ä792
			// Call SqlConnection(hSqlPI)
			// 30.07.20 Ä1896
			this.rbFax.Checked = true;
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAerzte_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 17.07.12 Ä792 Ä792
			// Call SqlDisconnect( hSqlPI)
			#endregion
		}
		
		/// <summary>
		/// picTabs WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// On TABSM_TabActivateFinish
				
				// 12.03.15 Ä1172
				
				// Set nTab = picTabs.GetClicked(  )
				
				// If nTab = 7		! EDV
				
				case QO.TABSM_TabActivateStart:
					this.picTabs_OnTABSM_TabActivateStart(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// TABSM_TabActivateStart event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_OnTABSM_TabActivateStart(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.picTabs.SelectedIndex = this.picTabs.GetClicked();
			if (this.picTabs.SelectedIndex == 3)  // Drucke
			{
				Int.SqlImmedSel(@"select sum(rkdmleis-rkzaleis), sum(rkdmarzn-rkzaarzn), sum(rkmbdmopl-rkmbzaopl) INTO :frmAerzte.dfMBa, :frmAerzte.dfMBb, :frmAerzte.dfMBc from rk
where rkarztnr= :frmAerzte.dfArztNr and rkrechnr>=999990");
			}
			if (this.picTabs.SelectedIndex == 14)  // TSEn
			{
				Sal.WaitCursor(true);
				if (Var.strBNAbtlg != "ED") 
				{
					this.dfAPIKey.DisableWindow();
					this.dfAPISecret.DisableWindow();
					this.tblTSE.DisableWindow();
				}
				this.tblTSE.ResetTable();
				if (this.dfAPIKey.Text != "" && this.dfAPISecret.Text != "") 
				{
					// Call FISKALY.fInit(dfAPIKey,dfAPISecret, 'V1')
					// If PalFiskalyRunMethod( 'frmAerzte', 'ListTSS', strFiskalyTSSId, strFiskalyClientId, strFiskalySerialNumber, strFiskalyTxId, strFiskalyState, '', NUMBER_Null, '', strStatus, strObject,
					// strFiskalyCertificateSerial, strFiskalyPublicKey, strFiskalySignature_algorithm, nFiskalySignature_counter, strFiskalySignature_timestamp_format,
					// nFiskalyTransaction_number, strFiskalySignature_value, strFiskalyQR_code_date, strFiskalyEnv,
					// strFiskalyDescription, strFiskalyProcessType, strFiskalyProcessData, strFiskalyExportID, strFiskalyTime_Start, strFiskalyTime_End )
					// Else
					// Call SalMessageBox( 'Das Laden der TSEn v1 war nicht erfolgreich', 'Fehler', MB_Ok|MB_IconExclamation )
					Var.FISKALY.fInit(this.dfAPIKey.Text, this.dfAPISecret.Text, "V2");
					if (Int.PalFiskalyRunMethod("frmAerzte", "ListTSS", ref Var.strFiskalyTSSId, ref Var.strFiskalyClientId, ref Var.strFiskalySerialNumber, ref Var.strFiskalyTxId, ref Var.strFiskalyState, "", SalNumber.Null, "", ref this.strStatus, ref this.strObject, ref 
						Var.strFiskalyCertificateSerial, ref Var.strFiskalyPublicKey, ref Var.strFiskalySignature_algorithm, ref Var.nFiskalySignature_counter, ref Var.strFiskalySignature_timestamp_format, ref Var.nFiskalyTransaction_number, ref Var.strFiskalySignature_value, ref 
						Var.strFiskalyQR_code_date, ref Var.strFiskalyEnv, Var.strFiskalyDescription, ref Var.strFiskalyProcessType, ref Var.strFiskalyProcessData, ref Var.strFiskalyExportID, Var.strFiskalyTime_Start, Var.strFiskalyTime_End)) 
					{
					}
					else
					{
						Sal.MessageBox("Das Laden der TSEn v2 war nicht erfolgreich", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
					}
				}
				Sal.WaitCursor(false);
			}
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalHoleArzt();
			#endregion
		}
		
		/// <summary>
		/// cbNeueNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbNeueNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbNeueNr_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbNeueNr_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.cbNeueNr.Checked) 
			{
				this.dfNeueNr.SetFocus();
			}
			#endregion
		}
		
		/// <summary>
		/// dfNeueNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNeueNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfNeueNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNeueNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfNeueNr.Number == Sys.NUMBER_Null || this.dfNeueNr.Number == 0) 
			{
				this.cbNeueNr.Checked = false;
			}
			else
			{
				this.cbNeueNr.Checked = true;
			}
			#endregion
		}
		
		/// <summary>
		/// dfMatch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMatch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfMatch_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMatch_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 18.04.23 F4998
			this.dfMatch.Text = ((SalString)this.dfMatch.Text).ToProper();
			#endregion
		}
		
		/// <summary>
		/// pbEti WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEti_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEti_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEti_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 01.11.07 Ä176
			Var.lsDummy = "";
			if (this.dfTitel.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfTitel.Text + @"
";
			}
			if (this.dfName1.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfName1.Text + @"
";
			}
			if (this.dfName2.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfName2.Text + @"
";
			}
			if (this.dfStr.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfStr.Text + @"
";
			}
			if (this.dfOrt.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfOrt.Text + @"
";
			}
			if (this.cmbLC.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.cmbLC.Text + @"
";
			}

			if (Var.bfrmDYMODruck) 
			{
				while (!(App.frmDYMODruck.DestroyWindow())) 
				{
				}
			}
			frmDYMODruck.CreateWindow(this, Var.lsDummy, "");
			#endregion
		}
		
		/// <summary>
		/// pbCopy WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbCopy_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbCopy_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbCopy_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfSVTitel.Text = this.dfTitel.Text;
			this.dfSVName1.Text = this.dfName1.Text;
			this.dfSVName2.Text = this.dfName2.Text;
			this.dfSVStr.Text = this.dfStr.Text;
			this.dfSVOrt.Text = this.dfOrt.Text;
			this.cmbSVLC.Text = this.cmbLC.Text;
			// Set dfKATitel = dfTitel
			// Set dfKAName1 = dfName1
			// Set dfKAName2 = dfName2
			// Set dfKAStr = dfStr
			// Set dfKAOrt = dfOrt
			#endregion
		}
		
		/// <summary>
		/// pbCopyKA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbCopyKA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbCopyKA_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbCopyKA_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfKATitel.Text = this.dfTitel.Text;
			this.dfKAName1.Text = this.dfName1.Text;
			this.dfKAName2.Text = this.dfName2.Text;
			this.dfKAStr.Text = this.dfStr.Text;
			this.dfKAOrt.Text = this.dfOrt.Text;
			this.cmbKALC.Text = this.cmbLC.Text;
			#endregion
		}
		
		/// <summary>
		/// mlZBemerk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void mlZBemerk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.mlZBemerk_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void mlZBemerk_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmed("INSERT INTO z (zarztnr, zhalternr, zart, zvon, zan, zbemerk,zdatum, zerledigt) VALUES( :frmAerzte.dfArztNr, 0, \'RA\', :strBNZei, \'*\', :frmAerzte.mlZBemerk, SYSDATE, \'J\')");
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// pbEtiSV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEtiSV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEtiSV_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEtiSV_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 01.11.07 Ä176
			Var.lsDummy = "";
			if (this.dfSVTitel.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfSVTitel.Text + @"
";
			}
			if (this.dfSVName1.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfSVName1.Text + @"
";
			}
			if (this.dfSVName2.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfSVName2.Text + @"
";
			}
			if (this.dfSVStr.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfSVStr.Text + @"
";
			}
			if (this.dfSVOrt.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfSVOrt.Text + @"
";
			}
			if (this.cmbSVLC.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.cmbSVLC.Text + @"
";
			}

			if (Var.bfrmDYMODruck) 
			{
				while (!(App.frmDYMODruck.DestroyWindow())) 
				{
				}
			}
			frmDYMODruck.CreateWindow(this, Var.lsDummy, "");
			#endregion
		}
		
		/// <summary>
		/// pbEtiKA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEtiKA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEtiKA_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEtiKA_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 01.11.07 Ä176
			Var.lsDummy = "";
			if (this.dfKATitel.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfKATitel.Text + @"
";
			}
			if (this.dfKAName1.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfKAName1.Text + @"
";
			}
			if (this.dfKAName2.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfKAName2.Text + @"
";
			}
			if (this.dfKAStr.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfKAStr.Text + @"
";
			}
			if (this.dfKAOrt.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfKAOrt.Text + @"
";
			}
			if (this.cmbKALC.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.cmbKALC.Text + @"
";
			}

			if (Var.bfrmDYMODruck) 
			{
				while (!(App.frmDYMODruck.DestroyWindow())) 
				{
				}
			}
			frmDYMODruck.CreateWindow(this, Var.lsDummy, "");
			#endregion
		}
		
		/// <summary>
		/// dfIBAN WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfIBAN_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfIBAN_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfIBAN_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfIBAN.Text != "") 
			{
				// 13.08.14
				this.dfIBAN.Text = Int.PalDelBlank(this.dfIBAN.Text);

				if (Int.PalIBANPruef(this.dfIBAN.Text)) 
				{
					e.Return = true;
					return;
				}
				else
				{
					Sal.MessageBox("Die eingegebene IBAN ist ungültig!", "Fehlerhafte Eingabe", Sys.MB_Ok);
					e.Return = false;
					return;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfBIC WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBIC_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfBIC_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBIC_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			#endregion
		}
		
		/// <summary>
		/// dfAustritt WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAustritt_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_KillFocus:
					this.dfAustritt_OnSAM_KillFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_KillFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAustritt_OnSAM_KillFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 21.09.23 Ä2138 TSE während des Jahres bei Austritt belasten
			if (this.dfAustritt.Value > new SalDateTime(1900, 1, 1)) 
			{
				if (this.pbTSEbel.IsEnabled()) 
				{
					if (Sys.IDYES == Sal.MessageBox("Es liegen noch unbelastete TSE-Kosten vor. Sollen diese jetzt dem Konto belastet werden?", "TSE noch belasten?", Sys.MB_IconQuestion)) 
					{
						this.PalTSEBel();
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfProz1 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfProz1_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfProz1_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfProz1_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.Number != 0 && this.dfArztNr.Number != Sys.NUMBER_Null) 
			{
				if (Sys.IDYES == Sal.MessageBox("Soll dieser Prozensatz für alle Halter übernommen werden?", "1.Mahnung", (Sys.MB_IconQuestion | Sys.MB_YesNo))) 
				{
					Int.SqlImmed("UPDATE h SET hproz1= :frmAerzte.dfProz1 WHERE harztnr = :frmAerzte.dfArztNr");
					Int.PalLog("frmAerzte:HProz1" + this.dfArztNr.Number.ToString(0) + "=" + this.dfProz1.Number.ToString(0));
					if (this.dfArztNr2.Number != 0 && this.dfArztNr2.Number != Sys.NUMBER_Null) 
					{
						Int.SqlImmed("UPDATE h SET hproz1= :frmAerzte.dfProz1 WHERE harztnr = :frmAerzte.dfArztNr2");
						Int.PalLog("frmAerzte:HProz1" + this.dfArztNr2.Number.ToString(0) + "=" + this.dfProz1.Number.ToString(0));
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfProz2 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfProz2_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfProz2_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfProz2_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.Number != 0 && this.dfArztNr.Number != Sys.NUMBER_Null) 
			{
				if (Sys.IDYES == Sal.MessageBox("Soll dieser Prozensatz für alle Halter übernommen werden?", "2.Mahnung", (Sys.MB_IconQuestion | Sys.MB_YesNo))) 
				{
					Int.SqlImmed("UPDATE h SET hproz2= :frmAerzte.dfProz2 WHERE harztnr = :frmAerzte.dfArztNr");
					Int.PalLog("frmAerzte:HProz2" + this.dfArztNr.Number.ToString(0) + "=" + this.dfProz2.Number.ToString(0));
					if (this.dfArztNr2.Number != 0 && this.dfArztNr2.Number != Sys.NUMBER_Null) 
					{
						Int.SqlImmed("UPDATE h SET hproz2= :frmAerzte.dfProz2 WHERE harztnr = :frmAerzte.dfArztNr2");
						Int.PalLog("frmAerzte:HProz2" + this.dfArztNr2.Number.ToString(0) + "=" + this.dfProz2.Number.ToString(0));
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfProz3 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfProz3_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfProz3_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfProz3_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.Number != 0 && this.dfArztNr.Number != Sys.NUMBER_Null) 
			{
				if (Sys.IDYES == Sal.MessageBox("Soll dieser Prozensatz für alle Halter übernommen werden?", "3.Mahnung", (Sys.MB_IconQuestion | Sys.MB_YesNo))) 
				{
					Int.SqlImmed("UPDATE h SET hproz3= :frmAerzte.dfProz3 WHERE harztnr = :frmAerzte.dfArztNr");
					Int.PalLog("frmAerzte:HProz3" + this.dfArztNr.Number.ToString(0) + "=" + this.dfProz3.Number.ToString(0));
					if (this.dfArztNr2.Number != 0 && this.dfArztNr2.Number != Sys.NUMBER_Null) 
					{
						Int.SqlImmed("UPDATE h SET hproz3= :frmAerzte.dfProz3 WHERE harztnr = :frmAerzte.dfArztNr2");
						Int.PalLog("frmAerzte:HProz3" + this.dfArztNr2.Number.ToString(0) + "=" + this.dfProz3.Number.ToString(0));
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfSkonto WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSkonto_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfSkonto_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSkonto_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfSkonto.Number > 0 && this.dfMGausb.Number != 1) 
			{
				Sal.MessageBox(@"""Mahngebühren ausbuchen"" wurde automatisch
auf 1 gesetzt, da sonst Skonto nicht abgezogen werden kann.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.dfMGausb.Number = 1;
				Int.PalLog("ArztVorgaben MGausbuchen = 1 : Arzt" + Int.PalStrNum(this.dfArztNr.Number, 4, 0));
			}
			#endregion
		}
		
		/// <summary>
		/// dfVorschProz WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfVorschProz_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfVorschProz_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfVorschProz_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfSkonto.Number > 0 && this.dfMGausb.Number != 1) 
			{
				Sal.MessageBox(@"""Mahngebühren ausbuchen"" wurde automatisch
auf 1 gesetzt, da sonst Skonto nicht abgezogen werden kann.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.dfMGausb.Number = 1;
				Int.PalLog("ArztVorgaben MGausbuchen = 1 : Arzt" + Int.PalStrNum(this.dfArztNr.Number, 4, 0));
			}
			#endregion
		}
		
		/// <summary>
		/// dfSteuerNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSteuerNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfSteuerNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSteuerNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (((SalString)this.dfSteuerNr.Text).ToUpper() >= "A" && this.dfSteuerNr.Text != "") 
			{
				if (Sys.IDYES == Sal.MessageBox(@"deutsche Steuernummern haben üblicherweise nur Ziffern und Schrägstriche.
Soll die Eingabe in das Feld USt-ID verschoben werden?", "Eingabe korrekt?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					this.dfUStID.Text = this.dfSteuerNr.Text;
					this.dfSteuerNr.Text = "";
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfUStID WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfUStID_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfUStID_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfUStID_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (((SalString)this.dfUStID.Text).ToUpper() < "A" && this.dfUStID.Text != "") 
			{
				if (Sys.IDYES == Sal.MessageBox(@"USt-ID ibn der EU beginnen immer mit zwei Buchstaben.
Soll die Eingabe in das Feld Steuernummer verschoben werden?", "Eingabe korrekt?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					this.dfSteuerNr.Text = this.dfUStID.Text;
					this.dfUStID.Text = "";
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfRAAbgMS WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRAAbgMS_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRAAbgMS_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRAAbgMS_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfRAAbgMS.Number != 5 && this.dfRAAbgMS.Number != 7) 
			{
				this.dfRAAbgMS.Number = 5;
				Sal.MessageBox(@"Nur 5 oder 7 erlaubt.
Wert wurde auf Standardwert 5 gesetzt.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			Int.PalLog("MS nach RAAbg = " + Int.PalStrNum(this.dfRAAbgMS.Number, 1, 0) + "  : Arzt" + Int.PalStrNum(this.dfArztNr.Number, 4, 0));
			#endregion
		}
		
		/// <summary>
		/// dfRAAbgAusb WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRAAbgAusb_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRAAbgAusb_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRAAbgAusb_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfRAAbgAusb.Number != 0 && this.dfRAAbgAusb.Number != 1) 
			{
				this.dfRAAbgAusb.Number = 1;
				Sal.MessageBox(@"Nur 0 oder 1 erlaubt.
Wert wurde auf Standardwert 1 gesetzt.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			Int.PalLog("Ausb nach RAAbg = " + Int.PalStrNum(this.dfRAAbgAusb.Number, 1, 0) + "  : Arzt" + Int.PalStrNum(this.dfArztNr.Number, 4, 0));
			#endregion
		}
		
		/// <summary>
		/// dfMahnint WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMahnint_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfMahnint_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMahnint_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nDummy = this.dfMahnint.Number;
			Int.SqlIstDa(" FROM MI WHERE minr = :frmAerzte.dfMahnint", ref this.bExists);
			if (!(this.bExists)) 
			{
				Sal.MessageBox(@"Den Mahnintervall
gibt es nicht !", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.dfMahnint.Number = this.nDummy;
			}
			#endregion
		}
		
		/// <summary>
		/// dfAbschGr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAbschGr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfAbschGr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAbschGr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfAbschGr.IsEmpty()) 
			{
				this.dfAbschGr.Number = 0;
			}
			#endregion
		}
		
		/// <summary>
		/// dfMindGuth WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMindGuth_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfMindGuth_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMindGuth_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfMindGuth.IsEmpty()) 
			{
				this.dfMindGuth.Number = 0;
			}
			#endregion
		}
		
		/// <summary>
		/// cmbStaffel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbStaffel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.cmbStaffel_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbStaffel_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 04.12.17 Ä1391
			if (((SalString)this.cmbStaffel.Text).Scan(":") != -1) 
			{
				this.cmbStaffel.Text = ((SalString)this.cmbStaffel.Text).Left(((SalString)this.cmbStaffel.Text).Scan(":"));
			}
			this.nStaffel = Int.PalValNum(this.cmbStaffel.Text);

			Int.SqlIstDa(" FROM ST WHERE stnr = :frmAerzte.nStaffel", ref this.bExists);
			if (!(this.bExists)) 
			{
				Sal.MessageBox(@"Die Staffelnr.
gibt es nicht !", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.cmbStaffel.Text = "903";
				this.nStaffel = 903;
			}
			#endregion
		}
		
		/// <summary>
		/// dfKZMB WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfKZMB_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfKZMB_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfKZMB_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Int.PalValNum(this.dfKZMB.Text) != 5 && Int.PalValNum(this.dfKZMB.Text) != 7) 
			{
				this.dfKZMB.Text = "5";
				Sal.MessageBox(@"Nur 5 oder 7 erlaubt.
Wert wurde auf Standardwert 5 gesetzt.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			#endregion
		}
		
		/// <summary>
		/// dfMGausb WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMGausb_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfMGausb_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMGausb_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfMGausb.Number != 0 && this.dfMGausb.Number != 1) 
			{
				this.dfMGausb.Number = 1;
				Sal.MessageBox(@"Nur 0 oder 1 erlaubt.
Wert wurde auf Standardwert 1 gesetzt.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			#endregion
		}
		
		/// <summary>
		/// dfMGausbMtl WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMGausbMtl_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfMGausbMtl_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMGausbMtl_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfMGausbMtl.Number != 0 && this.dfMGausbMtl.Number != 1) 
			{
				this.dfMGausbMtl.Number = 0;
				Sal.MessageBox(@"Nur 0 oder 1 erlaubt.
Wert wurde auf Standardwert 1 gesetzt.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			#endregion
		}
		
		/// <summary>
		/// pbInfo WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbInfo_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbInfo_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbInfo_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.IsEmpty()) 
			{
				Sal.MessageBox("ArztNr. fehlt", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.dfArztNr.SetFocus();
			}
			else
			{
				Int.SqlImmedSel(@"SELECT SUM(rkdmleis+rkdmarzn),
SUM(rkdmmahn), SUM(rkzaleis+rkzaarzn+rkzamahn)
INTO :frmAerzte.dfDMRech, :frmAerzte.dfDMMahn, :frmAerzte.dfDMZahl
FROM rk WHERE rkarztnr = :frmAerzte.dfArztNr AND rkrechdat > @yearbeg(@now) AND rkdeaktiv IS NULL");
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeu_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT MAX(aarztnr)+1 INTO :frmAerzte.dfArztNr
FROM a");
			this.PalNeuerArzt();
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 10.08.09 OTÄ281
			if (this.dfEintritt.Value == Sys.DATETIME_Null) 
			{
				Sal.MessageBox(@"Das Eintrittsdatum ist ein Pflichtfeld. Bitte angeben.

Die Eingaben wurden NOCH NICHT gespeichert.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				if ((this.dfSVTitel.Text + this.dfSVName1.Text + this.dfSVName2.Text + this.dfSVStr.Text + this.dfSVOrt.Text) == "") 
				{
					this.dfSVTitel.Text = this.dfTitel.Text;
					this.dfSVName1.Text = this.dfName1.Text;
					this.dfSVName2.Text = this.dfName2.Text;
					this.dfSVStr.Text = this.dfStr.Text;
					this.dfSVOrt.Text = this.dfOrt.Text;
					this.cmbSVLC.Text = this.cmbLC.Text;
				}
				// If (dfKATitel || dfKAName1 || dfKAName2 || dfKAStr || dfKAOrt) = ''
				// Set dfKATitel = dfTitel
				// Set dfKAName1 = dfName1
				// Set dfKAName2 = dfName2
				// Set dfKAStr = dfStr
				// Set dfKAOrt = dfOrt
				// #00009
				if (this.rb0.Checked) 
				{
					this.nRaZa = 0;
				}
				else if (this.rb2.Checked) 
				{
					this.nRaZa = 2;
				}
				else
				{
					this.nRaZa = 1;
				}
				// 31.10.16 Ä1437
				if (this.dfEWAabEUR.Number == Sys.NUMBER_Null) 
				{
					this.dfEWAabEUR.Number = 0;
				}
				if (this.rbEWA1.Checked) 
				{
					this.nEWAVariante = 1;
				}
				else if (this.rbEWA2.Checked) 
				{
					this.nEWAVariante = 2;
				}
				else
				{
					this.nEWAVariante = 3;
				}
				// 31.01.11 OTÄ533
				if (this.cbRaZaNeu.Checked) 
				{
					this.nRaZaNeu = 1;
				}
				else
				{
					this.nRaZaNeu = 0;
				}
				// 22.12.11 Ä696
				if (this.cbKeinGeld.Checked) 
				{
					this.nKeinGeld = 1;
				}
				else
				{
					this.nKeinGeld = 0;
				}
				// 04.12.17 Ä1461
				if (this.cbKeinGuthabenbeiAbrg.Checked) 
				{
					this.nKeinGuthabenbeiAbrg = 1;
				}
				else
				{
					this.nKeinGuthabenbeiAbrg = 0;
				}
				// 18.12.17 Ä1461
				if (this.cbKeinDarlehenbeiAbrg.Checked) 
				{
					this.nKeinDarlehenbeiAbrg = 1;
				}
				else
				{
					this.nKeinDarlehenbeiAbrg = 0;
				}
				// 10.07.07
				// Call frmAerzte.axText.PropGetRTFSelText( mlRechtext )
				// 25.03.19 Ä1819
				if (this.cbAbtretung.Checked) 
				{
					this.nAbtretung = 1;
				}
				else
				{
					this.nAbtretung = 0;
				}
				// 26.03.19 Ä1757
				if (this.cbMailAkteErl.Checked) 
				{
					this.nMailAkteErl = 1;
				}
				else
				{
					this.nMailAkteErl = 0;
				}

				// 27.04.10 OTÄ420
				Var.strPLC = ((SalString)this.cmbLC.Text).Left(2);
				this.strSVLC = ((SalString)this.cmbSVLC.Text).Left(2);
				this.strKALC = ((SalString)this.cmbSVLC.Text).Left(2);
				// 29.03.21 Ä1952 + DATEV-Export
				this.strDATEVFormat = this.cmbDATEVFormat.Text;
				// 19.06.15 F2432
				if (this.dfArztNr2.Number == Sys.NUMBER_Null) 
				{
					this.dfArztNr2.Number = 0;
				}

				// 01.04.16
				this.dfDrucke.Text = "";
				this.dfDrucke.Text = this.PalAddDruck(this.dfDrucke.Text, this.cbDr01.Checked);
				this.dfDrucke.Text = this.PalAddDruck(this.dfDrucke.Text, this.cbDr02.Checked);
				this.dfDrucke.Text = this.PalAddDruck(this.dfDrucke.Text, this.cbDr03.Checked);
				this.dfDrucke.Text = this.PalAddDruck(this.dfDrucke.Text, this.cbDr04.Checked);
				this.dfDrucke.Text = this.PalAddDruck(this.dfDrucke.Text, this.cbDr05.Checked);
				this.dfDrucke.Text = this.PalAddDruck(this.dfDrucke.Text, this.cbDr06.Checked);
				this.dfDrucke.Text = this.PalAddDruck(this.dfDrucke.Text, this.cbDr07.Checked);
				this.dfDrucke.Text = this.PalAddDruck(this.dfDrucke.Text, this.cbDr08.Checked);
				this.dfDrucke.Text = this.PalAddDruck(this.dfDrucke.Text, this.cbDr09.Checked);
				// 21.04.09 OTÄ211 + aregnr
				this.nTVNKonto = Int.PalValNum(((SalString)this.cmbTVNKonto.Text).Left(5));
				Int.SqlIstDa(@" FROM a
WHERE aarztnr = :frmAerzte.dfArztNr", ref this.bOK);

				// 30.01.19 Ä1823
				// Set nITBrief = cbITBrief
				if (this.cbITBrief.Checked) 
				{
					this.nITBrief = 1;
				}
				else if (this.cbITBrief4.Checked) 
				{
					this.nITBrief = 2;
				}
				else
				{
					this.nITBrief = 0;
				}

				this.nITMulti = this.cbITMulti.Checked;
				this.nRundschreiben = this.cbRundschreiben.Checked;
				// 18.06.19 Ä1854 + Vorschüsse
				if (this.cbVorschuss1.Checked) 
				{
					this.nVorsch1 = 1;
				}
				else
				{
					this.nVorsch1 = 0;
				}
				if (this.cbVorschuss2.Checked) 
				{
					this.nVorsch2 = 1;
				}
				else
				{
					this.nVorsch2 = 0;
				}
				if (this.cbVorschuss3.Checked) 
				{
					this.nVorsch3 = 1;
				}
				else
				{
					this.nVorsch3 = 0;
				}
				if (this.cbVorschuss6.Checked) 
				{
					this.nVorsch6 = 1;
				}
				else
				{
					this.nVorsch6 = 0;
				}
				if (this.cbVorschuss7.Checked) 
				{
					this.nVorsch7 = 1;
				}
				else
				{
					this.nVorsch7 = 0;
				}
				if (this.cbVorschuss9.Checked) 
				{
					this.nVorsch9 = 1;
				}
				else
				{
					this.nVorsch9 = 0;
				}
				if (this.rbVorschuss9Positiv.Checked) 
				{
					this.nVorsch9CR = 1;
				}
				else
				{
					this.nVorsch9CR = 0;
				}
				// 14.11.23 Ä2144 + abilanzierer
				if (this.cbBilanzierer.Checked) 
				{
					this.nBilanzierer = 1;
				}
				else
				{
					this.nBilanzierer = 0;
				}
				// 17.02.17 Ä1504 + Zahlungserinnerungen
				// 12.11.19 Ä1872 + asteuernummer
				this.nZahlErinn = this.cbZahlErinn.Checked;
				if (this.bOK) 
				{
					// 22.12.11 Ä696 + KeinGeld
					// 03.12.09
					Int.PalGetRecordInArray("AERZTE", "WHERE aarztnr = :frmAerzte.dfArztNr", "", Var.strLLFeld);
					// 16.09.14 + Software
					// 17.12.15 Ä1295 + agfkrit
					// 26.07.16 Ä1377 + abeztage
					// 15.08.16 Ä1410 + akappung
					// 18.08.16 Ä1415 Bank, BLZ, Konto auskommentiert
					// 25.10.16 Ä1426 + austid2
					// 31.10.16 Ä1437 + aewaabeur, aewavariante
					// 07.11.16 Ä1421 + aneuenr
					// 17.02.17 Ä1504 + Zahlungserinnerungen
					// 06.03.17 Ä1515 + arechtext
					// 11.12.17 Ä1663 + Wochentage und Tag des Monats
					// 06.02.18 Ä1697 + RaZa-Kleinbetrag
					// 25.03.19 Ä1819 + aabtretung
					// 18.06.19 Ä1854 + Vorschüsse
					// 29.03.21 Ä1952 + DATEV-Export
					// 14.05.21 Ä1958 + atmein
					// 21.02.23 Ä2080 + amgausbuchenmtl
					// 08.08.23 Ä2110 + agfmemo, aanderenummern
					// 14.11.23 Ä2144 + abilanzierer
					Int.SqlImmedX(@"UPDATE a
SET aname1 = :frmAerzte.dfName1,
aname2 = :frmAerzte.dfName2,
astr = :frmAerzte.dfStr,
aort = :frmAerzte.dfOrt,
aland = :strPLC,
asvtitel = :frmAerzte.dfSVTitel,
asvname1 = :frmAerzte.dfSVName1,
asvname2 = :frmAerzte.dfSVName2,
asvstr = :frmAerzte.dfSVStr,
asvort = :frmAerzte.dfSVOrt,
asvland = :frmAerzte.strSVLC,
akatitel = :frmAerzte.dfKATitel,
akaname1 = :frmAerzte.dfKAName1,
akaname2 = :frmAerzte.dfKAName2,
akastr = :frmAerzte.dfKAStr,
akaort = :frmAerzte.dfKAOrt,
akaland = :frmAerzte.strKALC,
afaelltg = :frmAerzte.dfFaellTage,
amahnint = :frmAerzte.dfMahnint,
atitel = :frmAerzte.dfTitel,
amatch = :frmAerzte.dfMatch,
aproz1 = :frmAerzte.dfProz1,
aproz2 = :frmAerzte.dfProz2,
aproz3 = :frmAerzte.dfProz3,
aiban = :frmAerzte.dfIBAN,
abic = :frmAerzte.dfBIC,
atvnkonto = :frmAerzte.nTVNKonto,
aeintr = :frmAerzte.dfEintritt.Value,
aabschgr = :frmAerzte.dfAbschGr,
amindguth = :frmAerzte.dfMindGuth,
akzpraxart = :frmAerzte.dfKZPraxArt,
akzmahndm = :frmAerzte.dfKZMahnDM,
anr2 = :frmAerzte.dfArztNr2,
astaffel = :frmAerzte.nStaffel,
akzmb = :frmAerzte.dfKZMB,
aaustritt = :frmAerzte.dfAustritt.Value,
agestorben = :frmAerzte.dfGestorben.Value,
agebdm = :frmAerzte.dfGebDM,
aeinlage = :frmAerzte.dfEinlage,
abeitrag = :frmAerzte.dfBeitrag,
amgausbuchen = :frmAerzte.dfMGausb,
akleinbetrag = :frmAerzte.dfKleinbetr,
akzgebstaf = :frmAerzte.dfKZGebStaff,
adrucke = :frmAerzte.dfDrucke,
amemo = :frmAerzte.mlRechtext,
arechtext = :frmAerzte.mlRechTextO,
aallginfo = :frmAerzte.mlRechInfo,
alogo = :frmAerzte.dfLogo,
askonto = :frmAerzte.dfSkonto,
avorschproz = :frmAerzte.dfVorschProz,
austid = :frmAerzte.dfUStID,
asteuernr = :frmAerzte.dfSteuerNr,
aemail = :frmAerzte.dfeMail,
aemailtvs = :frmAerzte.dfeMailTVS,
aemailnews = :frmAerzte.dfeMailNews,
apmemail = :frmAerzte.dfeMailPM,
atelpraxis = :frmAerzte.dfTelPraxis,
atelhandy = :frmAerzte.dfTelHandy,
atelprivat = :frmAerzte.dfTelPrivat,
atelfax = :frmAerzte.dfTelFax,
aitmemo = :frmAerzte.mlITMemo,
aitei = :frmAerzte.dfITEI,
aittv = :frmAerzte.dfITTV,
aitsoftware = :frmAerzte.dfITSoftware,
aitbrief = :frmAerzte.nITBrief,
aitmulti = :frmAerzte.nITMulti,
aitgestseit = :frmAerzte.dfITGestSeit,
aitltztbelast = :frmAerzte.dfITLtztBelast,
aitbelastdm = :frmAerzte.dfITBelastDM,
asehrgeehrte =  :frmAerzte.dfSehrgeehrte,
araabgms = :frmAerzte.dfRAAbgMS,
araabgaus = :frmAerzte.dfRAAbgAusb,
arundschreiben = :frmAerzte.nRundschreiben,
araza = :frmAerzte.nRaZa,
arazaneu = :frmAerzte.nRaZaNeu,
aregnr = :frmAerzte.dfRegNr,
akeingeld = :frmAerzte.nKeinGeld,
agfkrit = :frmAerzte.mlGFKrit,
abeztage = :frmAerzte.dfBEZTage,
akappung = :frmAerzte.dfKappung,
austid2 = :frmAerzte.dfUStID2,
aewaabeur = :frmAerzte.dfEWAabEUR,
aewavariante = :frmAerzte.nEWAVariante,
aneuenr = :frmAerzte.dfNeueNr,
azahlerinn = :frmAerzte.nZahlErinn,
azefrist = :frmAerzte.dfZEFrist,
azetext = :frmAerzte.mlZEText,
aabrkeinguthaben = :frmAerzte.nKeinGuthabenbeiAbrg,
aabrkeindarlehenbeiabrg = :frmAerzte.nKeinDarlehenbeiAbrg,
awomo = :frmAerzte.cbWoMo,
awodi = :frmAerzte.cbWoDi,
awomi = :frmAerzte.cbWoMi,
awodo = :frmAerzte.cbWoDo,
awofr = :frmAerzte.cbWoFr,
atm = :frmAerzte.dfTM,
arazakleinbetrag = :frmAerzte.dfRaZaKleinbetrag,
aabtretung = :frmAerzte.nAbtretung,
amailakteerl = :frmAerzte.nMailAkteErl,
avorschuss1 = :frmAerzte.nVorsch1,
avorschuss2 = :frmAerzte.nVorsch2,
avorschuss3 = :frmAerzte.nVorsch3,
avorschuss6 = :frmAerzte.nVorsch6,
avorschuss7 = :frmAerzte.nVorsch7,
avorschuss9 = :frmAerzte.nVorsch9,
avorschuss1wochen = :frmAerzte.dfVorschuss1Wochen,
avorschuss9cr = :frmAerzte.nVorsch9CR,
aapikey = :frmAerzte.dfAPIKey,
aapisecret = :frmAerzte.dfAPISecret,
adatevcode = :frmAerzte.strDATEVFormat,
adatevberaternr = :frmAerzte.dfDATEVBeraternr,
adatevmandantennr = :frmAerzte.dfDATEVMandantennr,
adatevmail = :frmAerzte.dfDATEVMail,
atmein = :frmAerzte.dfTMEingang,
amgausbuchenmtl = :frmAerzte.dfMGausbMtl,
agfmemo = :frmAerzte.mlGFMemo,
aanderenummern = :frmAerzte.dfandereNummern,
abilanzierer = :frmAerzte.nBilanzierer
WHERE aarztnr = :frmAerzte.dfArztNr");
					// 03.12.09 OTÄ350
					Int.PalGetRecordInArray("AERZTE", "WHERE aarztnr = :frmAerzte.dfArztNr", "2", Var.strLLFeld);
					Var.lsLog = Int.PalCompareRecordsInArray();
					if (Var.lsLog != "") 
					{
						Var.lsLog = @"***** AS geändert

" + Var.lsLog;
						Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmAerzte.dfArztNr, 0, 0,
:lsLog , SYSDATE, NULL, 'J', 'HS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,1, SYSDATETIME)");
					}
				}
				else
				{
					// 17.12.15 Ä1295 + agfkrit
					// 26.07.16 Ä1377 + abeztage
					// 15.08.16 Ä1410 + akappung
					// 18.08.16 Ä1415 Bank, BLZ, Konto auskommentiert
					// 25.10.16 Ä1426 + austid2
					// 31.10.16 Ä1437 + aewaabeur, aewavariante
					// 07.11.16 Ä1421 + aneuenr
					// 17.02.17 Ä1504 + Zahlungserinnerungen
					// 06.03.17 Ä1515 + arechtext
					// 11.12.17 Ä1663 + Wochentage und Tag des Monats
					// 06.02.18 Ä1697 + RaZa-Kleinbetrag
					// 25.03.19 Ä1819 + aabtretung
					// 18.06.19 Ä1854 + Vorschüsse
					// 29.03.21 Ä1952 + DATEV-Export
					// 14.05.21 Ä1958 + atmein
					// 21.02.23 Ä2080 + amgausbuchenmtl
					// 08.08.23 Ä2110 + agfmemo, aanderenummern
					// 14.11.23 Ä2144 + abilanzierer
					Int.SqlImmedX(@"INSERT INTO a
(aarztnr, aname1, aname2, astr, aort, aland, atvnkonto, aeintr, aabschgr, amindguth, akzpraxart,
afaelltg, akzmahndm, atitel, amatch, anr2, astaffel, akzmb, aaustritt, agestorben, agebdm, amahnint,
aeinlage, abeitrag, amgausbuchen, akleinbetrag, akzgebstaf, aproz1, aproz2, aproz3,
avorrech, avorsoll, avorhaben, avormwst, avorvst, adrucke, amemo, aallginfo, alogo, askonto, avorschproz, austid, asteuernr, aemail, aemailtvs, aemailnews, apmemail,
atelpraxis, atelhandy, atelprivat, atelfax,
aitmemo,  aitei, aittv, aitsoftware, aitbrief, aitmulti, aitgestseit, aitltztbelast, aitbelastdm, asehrgeehrte, araabgms, araabgaus,
asvtitel, asvname1, asvname2, asvstr, asvort, asvland,
akatitel, akaname1, akaname2, akastr, akaort, akaland,
araza, arazaneu, aregnr, akeingeld, aiban, abic, agfkrit, abeztage,
akappung, austid2, aewaabeur, aewavariante, aneuenr,
azahlerinn, azefrist, azetext, arechtext, aabrkeinguthaben, aabrkeindarlehenbeiabrg,
awomo, awodi, awomi, awodo, awofr, atm, arazakleinbetrag, aabtretung, amailakteerl,
avorschuss1, avorschuss2, avorschuss3, avorschuss6, avorschuss7, avorschuss9, avorschuss1wochen, avorschuss9cr,
aapikey, aapisecret, adatevcode, adatevberaternr, adatevmandantennr, adatevmail, atmein,
amgausbuchenmtl, agfmemo, aanderenummern, abilanzierer )
VALUES (:frmAerzte.dfArztNr, :frmAerzte.dfName1, :frmAerzte.dfName2, :frmAerzte.dfStr, :frmAerzte.dfOrt, :strPLC,
:frmAerzte.nTVNKonto, :frmAerzte.dfEintritt.Value, :frmAerzte.dfAbschGr, :frmAerzte.dfMindGuth,
:frmAerzte.dfKZPraxArt, :frmAerzte.dfFaellTage, :frmAerzte.dfKZMahnDM, :frmAerzte.dfTitel, :frmAerzte.dfMatch,
:frmAerzte.dfArztNr2, :frmAerzte.nStaffel, :frmAerzte.dfKZMB, :frmAerzte.dfAustritt.Value, :frmAerzte.dfGestorben.Value,
:frmAerzte.dfGebDM, :frmAerzte.dfMahnint, :frmAerzte.dfEinlage, :frmAerzte.dfBeitrag, :frmAerzte.dfMGausb,
:frmAerzte.dfKleinbetr, :frmAerzte.dfKZGebStaff,  :frmAerzte.dfProz1, :frmAerzte.dfProz2, :frmAerzte.dfProz3,
0,0,0,0,0, :frmAerzte.dfDrucke, :frmAerzte.mlRechtext, :frmAerzte.mlRechInfo, :frmAerzte.dfLogo, :frmAerzte.dfSkonto, :frmAerzte.dfVorschProz, :frmAerzte.dfUStID, :frmAerzte.dfSteuerNr,
:frmAerzte.dfeMail, :frmAerzte.dfeMailTVS, :frmAerzte.dfeMailNews, :frmAerzte.dfeMailPM, :frmAerzte.dfTelPraxis, :frmAerzte.dfTelHandy, :frmAerzte.dfTelPrivat, :frmAerzte.dfTelFax,
:frmAerzte.mlITMemo, :frmAerzte.dfITEI, :frmAerzte.dfITTV, :frmAerzte.dfITSoftware, :frmAerzte.nITBrief, :frmAerzte.nITMulti,
:frmAerzte.dfITGestSeit, :frmAerzte.dfITLtztBelast, :frmAerzte.dfITBelastDM, :frmAerzte.dfSehrgeehrte, :frmAerzte.dfRAAbgMS, :frmAerzte.dfRAAbgAusb,
:frmAerzte.dfSVTitel, :frmAerzte.dfSVName1, :frmAerzte.dfSVName2, :frmAerzte.dfSVStr, :frmAerzte.dfSVOrt, :frmAerzte.strSVLC,
:frmAerzte.dfKATitel, :frmAerzte.dfKAName1, :frmAerzte.dfKAName2, :frmAerzte.dfKAStr, :frmAerzte.dfKAOrt, :frmAerzte.strKALC,
:frmAerzte.nRaZa, :frmAerzte.nRaZaNeu, :frmAerzte.dfRegNr, :frmAerzte.nKeinGeld, :frmAerzte.dfIBAN, :frmAerzte.dfBIC, :frmAerzte.mlGFKrit, :frmAerzte.dfBEZTage,
:frmAerzte.dfKappung, :frmAerzte.dfUStID2, :frmAerzte.dfEWAabEUR, :frmAerzte.nEWAVariante, :frmAerzte.dfNeueNr,
:frmAerzte.nZahlErinn, :frmAerzte.dfZEFrist, :frmAerzte.mlZEText, :frmAerzte.mlRechTextO, :frmAerzte.nKeinGuthabenbeiAbrg, :frmAerzte.nKeinDarlehenbeiAbrg,
:frmAerzte.cbWoMo, :frmAerzte.cbWoDi, :frmAerzte.cbWoMi, :frmAerzte.cbWoDo, :frmAerzte.cbWoFr, :frmAerzte.dfTM, :frmAerzte.dfRaZaKleinbetrag, :frmAerzte.nAbtretung,
:frmAerzte.nMailAkteErl,
:frmAerzte.nVorsch1, :frmAerzte.nVorsch2, :frmAerzte.nVorsch3, :frmAerzte.nVorsch6, :frmAerzte.nVorsch7, :frmAerzte.nVorsch9, :frmAerzte.dfVorschuss1Wochen, :frmAerzte.nVorsch9CR,
:frmAerzte.dfAPIKey, :frmAerzte.dfAPISecret, :frmAerzte.strDATEVFormat, :frmAerzte.dfDATEVBeraternr, :frmAerzte.dfDATEVMandantennr, :frmAerzte.dfDATEVMail, :frmAerzte.dfTMEingang,
:frmAerzte.dfMGausbMtl, :frmAerzte.mlGFMemo, :frmAerzte.dfandereNummern, :frmAerzte.nBilanzierer )");
					// 03.12.09
					this.nCount = 0;
					while (this.nCount < 500) 
					{
						Var.nN[this.nCount] = SalNumber.Null;
						Var.strS[this.nCount] = "";
						Var.lsS[this.nCount] = "";
						Var.dtD[this.nCount] = SalDateTime.Null;
						this.nCount = this.nCount + 1;
					}

					// 03.12.09 OTÄ350
					Int.PalGetRecordInArray("AERZTE", "WHERE aarztnr = :frmAerzte.dfArztNr", "2", Var.strLLFeld);
					Var.lsLog = Int.PalCompareRecordsInArray();
					if (Var.lsLog != "") 
					{
						Var.lsLog = @"***** neuer Arzt

" + Var.lsLog;
						Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmAerzte.dfArztNr, 0, 0,
:lsLog , SYSDATE, NULL, 'J', 'HS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,1, SYSDATETIME)");
					}
				}
				// 05.08.09 OTÄ298
				this.PalSave();
			}
			#endregion
		}
		
		/// <summary>
		/// pbLoesch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoesch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoesch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoesch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.IsEmpty()) 
			{
				Sal.MessageBox("ArztNr.  fehlt", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				if (Sys.IDYES == Sal.MessageBox("Soll der Arzt wirklich gelöscht werden ?", "ACHTUNG !", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					Int.SqlImmedX(@"DELETE FROM h
WHERE harztnr = :frmAerzte.dfArztNr");
					Int.SqlImmedX(@"DELETE FROM ak
WHERE akarztnr = :frmAerzte.dfArztNr");
					Int.SqlImmedX(@"DELETE FROM z
WHERE zarztnr = :frmAerzte.dfArztNr");
					Int.SqlImmedX(@"DELETE FROM za
WHERE zaarztnr = :frmAerzte.dfArztNr");
					Int.SqlImmedX(@"DELETE FROM ma
WHERE maarztnr = :frmAerzte.dfArztNr");
					Int.SqlImmedX(@"DELETE FROM el
WHERE elarztnr = :frmAerzte.dfArztNr");
					Int.SqlImmedX(@"DELETE FROM pr
WHERE prarztnr = :frmAerzte.dfArztNr");
					// 11.02.16 Ä1330 raus
					// Call SqlImmedX('DELETE FROM r
					// WHERE rarztnr = :frmAerzte.dfArztNr')
					Int.SqlImmedX(@"DELETE FROM a
WHERE aarztnr = :frmAerzte.dfArztNr");
				}
				this.PalLoescheMaske();
			}
			this.dfArztNr.SetFocus();
			#endregion
		}
		
		/// <summary>
		/// pbFuellen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbFuellen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbFuellen_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbFuellen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.IsEmpty()) 
			{
				Sal.MessageBox("ArztNr.  fehlt", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				Sal.WaitCursor(true);
				this.bLoesch = true;
				Int.SqlImmedSel(@"SELECT count(*) FROM h INTO :frmAerzte.dfH
WHERE harztnr = :frmAerzte.dfArztNr ");
				Int.SqlImmedSel(@"SELECT count(*) FROM rk INTO :frmAerzte.dfR
WHERE rkarztnr = :frmAerzte.dfArztNr");
				if (this.dfR.Number > 0 && this.bLoesch) 
				{
					this.bLoesch = false;
				}
				Int.SqlImmedSel(@"SELECT count(*) FROM rk INTO :frmAerzte.dfRo
WHERE rkarztnr = :frmAerzte.dfArztNr AND rkkzzahl<2");
				Int.SqlImmedSel(@"SELECT count(*) FROM ak INTO :frmAerzte.dfAK
WHERE akarztnr = :frmAerzte.dfArztNr");
				Int.SqlImmedSel(@"SELECT count(*) FROM z INTO :frmAerzte.dfZ
WHERE zarztnr = :frmAerzte.dfArztNr");
				Int.SqlImmedSel(@"SELECT count(*) FROM za INTO :frmAerzte.dfZA
WHERE zaarztnr = :frmAerzte.dfArztNr");
				Int.SqlImmedSel(@"SELECT count(*) FROM ma INTO :frmAerzte.dfMA
WHERE maarztnr = :frmAerzte.dfArztNr");
				Int.SqlImmedSel(@"SELECT count(*) FROM el INTO :frmAerzte.dfEL
WHERE elarztnr = :frmAerzte.dfArztNr");
				Int.SqlImmedSel(@"SELECT count(*) FROM pr INTO :frmAerzte.dfPR
WHERE prarztnr = :frmAerzte.dfArztNr");
				// 11.02.16 Ä1330 raus
				// Call SqlImmedSel('SELECT count(*) FROM r INTO :frmAerzte.dfRa
				// WHERE rarztnr = :frmAerzte.dfArztNr')
				Int.SqlImmedSel(@"SELECT count(*) FROM tka INTO :frmAerzte.dfTKA
WHERE tkaarztnr = :frmAerzte.dfArztNr");
				if (this.dfTKA.Number > 0 && this.bLoesch) 
				{
					this.bLoesch = false;
				}
				Int.SqlImmedSel(@"SELECT count(*) FROM tk INTO :frmAerzte.dfTK
WHERE tkarztnr = :frmAerzte.dfArztNr");
				if (this.dfTK.Number > 0 && this.bLoesch) 
				{
					this.bLoesch = false;
				}
				Int.SqlImmedSel(@"SELECT count(*) FROM vo INTO :frmAerzte.dfV
WHERE voarztnr = :frmAerzte.dfArztNr");
				if (this.dfV.Number > 0 && this.bLoesch) 
				{
					this.bLoesch = false;
				}
				Int.SqlImmedSel(@"SELECT avorsoll, avorhaben FROM a INTO :frmAerzte.nAVS,  :frmAerzte.nAVH
WHERE aarztnr = :frmAerzte.dfArztNr");
				if ((this.nAVS - this.nAVH) != 0 && this.bLoesch) 
				{
					this.bLoesch = false;
					Sal.MessageBox(@"Saldovortrag ungleich 0.

Daher kein Löschen möglich !", "Achtung !", Sys.MB_Ok);
				}

				if (this.bLoesch) 
				{
					this.pbLoesch.EnableWindow();
				}
				Sal.WaitCursor(false);
			}
			this.dfArztNr.SetFocus();
			#endregion
		}
		
		/// <summary>
		/// cbITBrief WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbITBrief_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbITBrief_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbITBrief_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.cbITBrief4.Checked = false;
			#endregion
		}
		
		/// <summary>
		/// cbITBrief4 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbITBrief4_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbITBrief4_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbITBrief4_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.cbITBrief.Checked = false;
			#endregion
		}
		
		/// <summary>
		/// dfeMail WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfeMail_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfeMail_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfeMail_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.IDYES == Sal.MessageBox("Soll die E-Mail-Adresse " + this.dfeMail.Text + " auch in die anderen E-Mail-Felder eingetragen werden?", "andere E-Mail-Adressen?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
			{
				this.dfeMailTVS.Text = this.dfeMail.Text;
				this.dfeMailNews.Text = this.dfeMail.Text;
			}
			#endregion
		}
		
		/// <summary>
		/// pbEMNeu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMNeu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEMNeu_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbEMNeu_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMNeu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.mlEMText.Text = "";
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMNeu_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbEMNeu, "eingegebenen Text löschen");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbEMOeffne WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMOeffne_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEMOeffne_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbEMOeffne_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMOeffne_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.FileGetCurrentDirectory(ref this.strAktPfad);
			Sal.FileSetCurrentDirectory("K:");
			this.strDateiPfad = "K:";
			if (this.PalDateiWahl()) 
			{
				this.hDisk.Open(this.strDateiPfad, (Sys.OF_Read | Sys.OF_Text));
				this.mlEMText.Text = this.hDisk.Read(32000);
				this.hDisk.Close();
			}
			Sal.FileSetCurrentDirectory(this.strAktPfad);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMOeffne_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbEMOeffne, "bereits gespeicherten Text laden");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbEMSpeich WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMSpeich_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEMSpeich_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbEMSpeich_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMSpeich_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.FileGetCurrentDirectory(ref this.strAktPfad);
			Sal.FileSetCurrentDirectory("K:");
			if (this.PalDateiSpeich()) 
			{
				if (this.hDisk.Open(this.strDateiPfad, Sys.OF_Create)) 
				{
					this.hDisk.Close();
					if (this.hDisk.Open(this.strDateiPfad, Sys.OF_Write)) 
					{
						this.nBytes = this.hDisk.Write(this.mlEMText.Text, 32757);
						if (this.nBytes >= 0) 
						{
							this.hDisk.Close();
						}
					}
					else
					{
						Sal.MessageBox("Die Datei " + this.strDateiPfad + " kann nicht gespeichert werden !", "Fehler", Sys.MB_Ok);
					}
				}
				else
				{
					Sal.MessageBox("Die Datei " + this.strDateiPfad + " kann nicht erstellt werden !", "Fehler", Sys.MB_Ok);
				}
			}
			Sal.FileSetCurrentDirectory(this.strAktPfad);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMSpeich_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbEMSpeich, "Text unter einem Namen speichern");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbEMSenden WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMSenden_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEMSenden_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMSenden_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (((SalString)this.dfeMail.Text).Scan("@") != -1) 
			{
				// 06.05.14 F2003
				// If Not Email.EmailIsConnected()
				// If Email.EmailConnect('keuer','','', EMAIL_SYS_MSMAIL)
				Sal.WaitCursor(true);
				Int.PalMailInit();
				// 13.02.07 Ä82 Signatur	11.04.07 Ä87 Signatur erweitert
				// 06.05.14 F2003
				// If Email.EmailSendMessage(FALSE,dfEMBetreff, mlEMText || '
				// 
				// Mit freundlichen Grüßen,
				// 
				// ' || strBNName || '
				// tvn-Tierärztliche Verrechnungsstelle Niedersachsen r. V.
				// 
				// Danziger Straße 1
				// 31008 Elze
				// Telefon (0 50 68) 93 07-' || strBNTel || '
				// Telefax (0 50 68) 93 07-80
				// E-mail ' || strBNEMail || '
				// Web www.moveta.de
				// 
				// Kreissparkasse Hildesheim
				// BLZ 259 501 30
				// Konto 7006 573'
				// ,dfeMail,'','','',0,0)
				// Call SalStatusSetText(hWndForm, 'Die E-Mail ist in den Postausgang von Outlook gelegt worden.')
				this.lsBody = this.mlEMText.Text + @"

Mit freundlichen Grüßen,

" + Var.strBNName + @"
moveta r.V.k.V.

Danziger Straße 1
31008 Elze
Telefon (0 50 68) 93 07-" + Var.strBNTel + @"
Telefax (0 50 68) 93 07-80
E-mail " + Var.strBNEMail + @"
Web www.moveta.de

Sparkasse Hildesheim · IBAN: DE13 2595 0130 0007 0065 73 · BIC: NOLADE21HIK";
				// 29.07.14 F2003 'noreply@tvn-online.de' -> strBNEmail
				// 30.10.20 Ä1911
				// Set nResult = oOutgoingMail.SendMail( MAIL_FORMAT_PLAIN_TEXT, dfEMBetreff, strBNEMail, dfeMail, STRING_Null, lsBody, STRING_Null, FALSE, MAIL_PRIORITY_NORMAL )
				this.nResult = Int.SendeMail(Const.MAIL_FORMAT_PLAIN_TEXT, this.dfEMBetreff.Text, Var.strBNEMail, this.dfeMail.Text, this.lsBody, SalString.Null, Const.MAIL_PRIORITY_NORMAL, ref Var.strDummy, "", Var.strBNName);
				if (0 == this.nResult)
				{
					this.lsBody = "E-Mail an " + this.dfeMail.Text + @"
" + this.lsBody;
					Int.SqlImmed("INSERT INTO z (zarztnr, zhalternr, zart, zvon, zan, zbemerk,zdatum, zerledigt) VALUES( :frmAerzte.dfArztNr, 0, \'BR\', :strBNZei, \'*\', :frmAerzte.lsBody, SYSDATE, \'J\')");
					Sal.WaitCursor(false);
					Sal.MessageBox("Die E-Mail wurde erfolgreich versandt.", "Ok", Sys.MB_Ok);
				}
				else
				{
					Sal.WaitCursor(false);
					Sal.MessageBox("Die E-Mail konnte nicht versandt werden.", "Fehler: " + Var.strDummy, Sys.MB_Ok);
				}
				Int.PalMailClose();
			}
			else
			{
				Sal.MessageBox("Keine gültige E-mail-Adresse (" + this.dfeMail.Text + ") !.", "Fehler", Sys.MB_Ok);
			}
			#endregion
		}
		
		/// <summary>
		/// pbBildWahl WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBildWahl_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbBildWahl_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbBildWahl_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBildWahl_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.PalBildWahl()) 
			{
				if (!(this.picLogo.SetImageFile(this.strDateiPfad))) 
				{
					Sal.MessageBox("Bild " + this.strDateiPfad + " konnte nicht geladen werden.", "Fehler", Sys.MB_Ok);
				}
				else
				{
					this.nLength = this.picLogo.GetImageBytes(ref this.lsLogo, ref Var.nTemp);
					if (this.nLength > (512 * 1024)) 
					{
						Sal.MessageBox("Das Bild " + this.strDateiPfad + @"ist zu groß (max 500 kB).

Bitte wählen Sie am besten 1200x1200 Pixel schwarz/weiß.", "Fehler", Sys.MB_Ok);
						this.lsLogo = "";
						this.picLogo.ClearImage();
					}
					Sal.StrCompress(ref this.lsLogo);
					Int.SqlIstDa(@" FROM a
WHERE aarztnr = :frmAerzte.dfArztNr", ref this.bOK);
					if (this.bOK) 
					{
						// TODO: Obsolete functions or constants used: SetLongBindDatatype.
						Sql.SetLongBindDatatype(1, 23); // 23 = BINARY
						Int.SqlImmed("UPDATE a SET abild = :frmAerzte.lsLogo WHERE aarztnr = :frmAerzte.dfArztNr");
					}
					else
					{
						// TODO: Obsolete functions or constants used: SetLongBindDatatype.
						Sql.SetLongBindDatatype(1, 23); // 23 = BINARY
						Int.SqlImmed("INSERT INTO a (aarztnr, abild) VALUES( :frmAerzte.dfArztNr, :frmAerzte.lsLogo)");
					}
					// Set nLength = SalPicGetString ( picLogo, PIC_FormatObject, lsLogo )
					// If nLength > (1024*1000)
					// Call SalMessageBox('Das Bild ' || strDateiPfad || ' ist zu groß (max 1000 kB).','Fehler',MB_Ok)
					// Set lsLogo = ''
					// Call SalPicClear( picLogo )
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBildWahl_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbBildWahl, "Logo wählen");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbBildLoe WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBildLoe_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbBildLoe_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbBildLoe_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBildLoe_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.picLogo.ClearImage();
			this.lsLogo = "";
			Int.SqlImmed("UPDATE a SET abild = NULL WHERE aarztnr = :frmAerzte.dfArztNr");
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBildLoe_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbBildLoe, "Logo löschen");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbInventar WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbInventar_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbInventar_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbInventar_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmInvent.CreateWindow(this, this.dfArztNr.Number);
			#endregion
		}
		
		/// <summary>
		/// pbPINeu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPINeu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbPINeu_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbPINeu_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbPINeu_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPINeu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow();
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPINeu_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow();
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPINeu_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbPINeu, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbPILoe WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPILoe_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbPILoe_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbPILoe_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPILoe_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblPI.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				this.nRowPI = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblPI.FindNextRow(ref this.nRowPI, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblPI.SetFocusRow(this.nRowPI);
					Int.SqlImmed("DELETE FROM pi WHERE pihauptnr = :frmAerzte.tblPI.colnHauptNr AND pinebennr = :frmAerzte.tblPI.colnNebenNr");
				}
				this.PalSave();
				this.tblPI.ResetTable();
				// 20.01.14 Ä1005
				// Call SqlCreateSession(hSession,'')
				// If SqlCreateStatement (hSession, hSqlPI)
				// If SqlSetIsolationLevel(hSqlPI,'RO')
				Int.SqlConnection(ref this.hSqlPI);

				this.tblPI.Populate(this.hSqlPI, @"SELECT pihauptnr, pinebennr
INTO :frmAerzte.tblPI.colnHauptNr, :frmAerzte.tblPI.colnNebenNr
FROM pi WHERE pihauptnr = :frmAerzte.dfArztNr ORDER BY pinebennr", Sys.TBL_FillAll);
				// 20.01.14 Ä1005
				this.hSqlPI.Disconnect();
				// Call SqlFreeSession( hSession )

			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPILoe_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbPILoe, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// rb1 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rb1_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rb1_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rb1_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.rb1.Checked) 
			{
				Sal.EnableWindow(this.cbRaZaNeu);
			}
			else
			{
				Sal.DisableWindow(this.cbRaZaNeu);
			}
			#endregion
		}
		
		/// <summary>
		/// rb2 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rb2_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rb2_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rb2_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.rb2.Checked) 
			{
				Sal.EnableWindow(this.cbRaZaNeu);
			}
			else
			{
				Sal.DisableWindow(this.cbRaZaNeu);
			}
			#endregion
		}
		
		/// <summary>
		/// rb0 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rb0_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rb0_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rb0_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.rb0.Checked) 
			{
				Sal.DisableWindow(this.cbRaZaNeu);
			}
			else
			{
				Sal.EnableWindow(this.cbRaZaNeu);
			}
			#endregion
		}
		
		/// <summary>
		/// pbKopieren WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKopieren_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbKopieren_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKopieren_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfACopy.Number > 0) 
			{
				this.nCount = 0;
				Int.SqlImmedSel("SELECT count(*) FROM a INTO :frmAerzte.nCount WHERE aarztnr = :frmAerzte.dfACopy ");
				if (this.nCount > 0) 
				{
					Sal.MessageBox("Die Nummer " + this.dfACopy.Number.ToString(0) + " ist bereits belegt.", "Nummer nicht frei", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
				else
				{
					// 26.07.16 Ä1377 + abeztage
					// 25.10.16 Ä1426 + austid2
					// 31.10.16 Ä1437 + aewaabeur, aewavariante
					// 04.12.17 Ä1461 + , aabrkeinguthaben
					// 25.03.19 Ä1819 + aabtretung
					// 26.03.19 Ä1757 + amailakteerl
					// 18.06.19 Ä1854 + Vorschüsse
					// 14.05.21 Ä1958 + atmein
					// 14.11.23 Ä2144 + abilanzierer
					Int.SqlImmed(@"INSERT INTO a (aarztnr, aname1, aname2, astr, aort, aland, abank, ablz, akonto, atvnkonto, aeintr, aabschgr, amindguth, akzpraxart,
afaelltg, akzmahndm, atitel, amatch, anr2, astaffel, akzmb, aaustritt, agestorben, agebdm, amahnint,
aeinlage, abeitrag, amgausbuchen, akleinbetrag, akzgebstaf, aproz1, aproz2, aproz3, adrucke, amemo, aallginfo, alogo, askonto, avorschproz, austid,
aemail, aemailtvs, aemailnews, atelpraxis, atelhandy, atelprivat, atelfax,
aitmemo,  aitei, aittv, aitsoftware, aitbrief, aitmulti, aitgestseit, aitltztbelast, aitbelastdm, asehrgeehrte, araabgms, araabgaus, arundschreiben,
asvtitel, asvname1, asvname2, asvstr, asvort, asvland,
akatitel, akaname1, akaname2, akastr, akaort, akaland, abild, araza, arazaneu, akeingeld,
apmemail, aiban, abic, asperrinfo, agfkrit, abeztage, akappung, austid2, aewaabeur, aewavariante, aabrkeinguthaben, aabrkeindarlehenbeiabrg,
awomo, awodi, awomi, awodo, awofr, atm, aabtretung, amailakteerl,
avorschuss1, avorschuss2, avorschuss3, avorschuss6, avorschuss7, avorschuss9, avorschuss1wochen, avorschuss9cr, atmein, abilanzierer   )
SELECT " + this.dfACopy.Number.ToString(0) + @", aname1, aname2, astr, aort, aland, abank, ablz, akonto, atvnkonto, aeintr, aabschgr, amindguth, akzpraxart,
afaelltg, akzmahndm, atitel, amatch, anr2, astaffel, akzmb, aaustritt, agestorben, agebdm, amahnint,
aeinlage, abeitrag, amgausbuchen, akleinbetrag, akzgebstaf, aproz1, aproz2, aproz3, adrucke, amemo, aallginfo, alogo, askonto, avorschproz, austid,
aemail, aemailtvs, aemailnews, atelpraxis, atelhandy, atelprivat, atelfax,
aitmemo,  aitei, aittv, aitsoftware, aitbrief, aitmulti, aitgestseit, aitltztbelast, aitbelastdm, asehrgeehrte, araabgms, araabgaus, arundschreiben,
asvtitel, asvname1, asvname2, asvstr, asvort, asvland,
akatitel, akaname1, akaname2, akastr, akaort, akaland, abild, araza, arazaneu, akeingeld,
apmemail, aiban, abic, asperrinfo, agfkrit, abeztage, akappung, austid2, aewaabeur, aewavariante, aabrkeinguthaben, aabrkeindarlehenbeiabrg,
awomo, awodi, awomi, awodo, awofr, atm, aabtretung, amailakteerl,
avorschuss1, avorschuss2, avorschuss3, avorschuss6, avorschuss7, avorschuss9, avorschuss1wochen, avorschuss9cr, atmein, abilanzierer
FROM a WHERE aarztnr = :frmAerzte.dfArztNr");
					Sal.MessageBox("Kopiervorgang durchgeführt.", "Ok", (Sys.MB_Ok | Sys.MB_IconAsterisk));
				}
			}
			else
			{
				Sal.MessageBox("In welche Nummer soll das Mitglied kopiert werden?", "fehlende Angaben", (Sys.MB_Ok | Sys.MB_IconQuestion));
			}
			#endregion
		}
		
		/// <summary>
		/// tblHZettel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHZettel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// On SAM_FetchRowDone
				
				// 18.09.02
				
				// If bPFarbe
				
				// Call XSalTblSetRowBackColor( tblHZettel, lParam, 0xBFFFBF )
				
				// Set bPFarbe = FALSE
				
				// Else
				
				// Call XSalTblSetRowBackColor( tblHZettel, lParam, 0xEFFFEF )
				
				// Set bPFarbe = TRUE
				
				case Sys.SAM_Create:
					this.tblHZettel_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHZettel_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblHZettel, 0);
			#endregion
		}
		
		/// <summary>
		/// pbDDNeu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDDNeu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDDNeu_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbDDNeu_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDDNeu_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDDNeu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalDDNewRow();
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDDNeu_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow();
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDDNeu_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbDDNeu, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbDDLoe WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDDLoe_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDDLoe_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDDLoe_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDDLoe_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblDD.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblDD.FindNextRow(ref Var.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblDD.SetFocusRow(Var.nRow);
					if (Int.SqlImmed("DELETE FROM dd WHERE dderfdat = :frmAerzte.tblDD.colErfDat AND ddarztnr = :frmAerzte.tblDD.colArztNr")) 
					{
					}
				}
				if (this.PalDDSave()) 
				{
				}
				this.tblDD.ResetTable();
				// 06.02.12 F1194
				Int.SqlConnection(ref this.hSqlTVNKonto);

				this.tblDD.Populate(this.hSqlTVNKonto, @"SELECT ddarztnr, ddcode, ddz1, ddz2, ddstr, ddort, ddland, ddemail, dderfdat
INTO :frmAerzte.tblDD.colArztNr, :frmAerzte.tblDD.colCode, :frmAerzte.tblDD.colZ1, :frmAerzte.tblDD.colZ2, :frmAerzte.tblDD.colStr, :frmAerzte.tblDD.colOrt, :frmAerzte.tblDD.colLand, :frmAerzte.tblDD.colEMail, :frmAerzte.tblDD.colErfDat
FROM dd WHERE ddarztnr = :frmAerzte.dfArztNr ORDER BY dderfdat", Sys.TBL_FillAll);
				// 06.02.12 F1194
				this.hSqlTVNKonto.Disconnect();

			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDDLoe_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbDDLoe, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// tblPN WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblPN_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblPN_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblPN_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblPN_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblPN, 0);
			// 06.10.15
			MT.MTbl.SetFlags(this.tblPN, MT.MTbl.MTBL_FLAG_COLOR_ENTIRE_ROW, true);
			MT.MTbl.SetFlags(this.tblPN, MT.MTbl.MTBL_FLAG_VARIABLE_ROW_HEIGHT, true);

			this.tblPN.strCNAlt = "";
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblPN_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfPegNutzung.Number == Sys.NUMBER_Null) 
			{
				this.dfPegNutzung.Number = 0;
			}
			// 10.06.22 + and frmAerzte.tblPN.colLetztDat >= SalDateCurrent(  ) - 30
			App.frmMain.dtBezahlt = SalDateTime.Current - 92;
			if (this.tblPN.strCNAlt != this.tblPN.colCN.Text && this.tblPN.colLetztDat.DateTime >= SalDateTime.Current - 92) 
			{
				this.dfPegNutzung.Number = this.dfPegNutzung.Number + 1;
			}
			this.tblPN.strCNAlt = this.tblPN.colCN.Text;
			#endregion
		}
		
		/// <summary>
		/// pbDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDruck_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDruck_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PrintParams.Init();
			this.PrintParams.DocName = "Pegasus-Nutzung " + this.dfName1.Text;
			this.PrintParams.Orientation = MT.MTbl.MTP_OR_LANDSCAPE;
			// Set strDevice = MTblPrintGetDefPrinterName(  )
			this.nResult = this.lbPrinters.GetListSelectedIndex();
			if (this.nResult == Sys.LB_Err) 
			{
				this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			}
			else
			{
				this.strDevice = this.lbPrinters.GetListItemText(this.nResult);
			}
			this.PrintParams.PrinterName = this.strDevice;
			// 07.11.13 F1760
			this.PrintParams.Language = MT.MTbl.MTP_LNG_GERMAN;

			MT.MTbl.Print(this.tblPN, this.PrintParams);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nAnz = MT.MTbl.PrintGetPrinterNames(this.strPrinters);
			this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			this.nOff = -1;
			this.nResult = 0;
			while (this.nResult < this.nAnz) 
			{
				this.lbPrinters.AddListItem(this.strPrinters[this.nResult]);
				if (this.strPrinters[this.nResult] == this.strDevice) 
				{
					this.nOff = this.nResult;
				}
				this.nResult = this.nResult + 1;
			}
			if (this.nOff >= 0) 
			{
				this.lbPrinters.SetListSelectedIndex(this.nOff);
			}

			#endregion
		}
		
		/// <summary>
		/// dfBEZTage WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBEZTage_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfBEZTage_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBEZTage_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.IDYES == Sal.MessageBox("Sollen die Fälligkeitstage auch auf " + this.dfBEZTage.Number.ToString(0) + " gesetzt werden?", "Fälligkeitstage", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
			{
				this.dfFaellTage.Number = this.dfBEZTage.Number;
			}
			#endregion
		}
		
		/// <summary>
		/// pbPersNeu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPersNeu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbPersNeu_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbPersNeu_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbPersNeu_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPersNeu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalPersNewRow();
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPersNeu_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalPersNewRow();
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPersNeu_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbPersNeu, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbPersLoe WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPersLoe_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbPersLoe_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbPersLoe_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPersLoe_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblPersonen.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblPersonen.FindNextRow(ref Var.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblPersonen.SetFocusRow(Var.nRow);
					Int.SqlImmed("DELETE FROM ap WHERE (aparztnr = :frmAerzte.dfArztNr OR aparztnr = :frmAerzte.dfArztNr2) AND aperfdat = :tblPersonen.colErfDat");
				}
				this.PalPersSave();
				this.tblPersonen.ResetTable();
				// 14.11.17 Ä1648
				Int.SqlConnection(ref this.hSqlPI); // 23.01.18 F3094
				this.PalHolePersonen();
				this.hSqlPI.Disconnect(); // 23.01.18 F3094
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPersLoe_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbPersLoe, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// dfTM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfTM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfTM_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfTM_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfTM.Number > 28 || this.dfTM.Number < 1) 
			{
				Sal.MessageBox("Es darf nur 1 bis 28 eingegeben werden. Bitte Eingabe wiederholen.", "Ungültige Eingabe", (Sys.MB_Ok | Sys.MB_IconExclamation));
				e.Return = false;
				return;
			}
			#endregion
		}
		
		/// <summary>
		/// cbAbtretung WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbAbtretung_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbAbtretung_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbAbtretung_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 25.03.19 Ä1819 + aabtretung
			if (this.cbAbtretung.Checked) 
			{
				this.dfIBAN.DisableWindow();
				this.dfBIC.DisableWindow();
				Int.PalLog("Abtretung JA: " + Int.PalStrNum(this.dfArztNr.Number, 4, 0));
			}
			else
			{
				this.dfIBAN.EnableWindow();
				this.dfBIC.EnableWindow();
				Int.PalLog("Abtretung NEIN: " + Int.PalStrNum(this.dfArztNr.Number, 4, 0));
			}
			#endregion
		}
		
		/// <summary>
		/// pbExport WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbExport_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbExport_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbExport_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbExport_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.obExcel.Checked) 
			{
				MT.MTbl.ExportToExcel(this.tblHZettel, MT.MTbl.MTE_LNG_GERMAN, SalString.Null, ((((MT.MTbl.MTE_EXCEL_NEW_INSTANCE | MT.MTbl.MTE_EXCEL_STRING_COLS_AS_TEXT) | Const.MTE_EXCEL_NO_CLIPBOARD) | Const.MTE_EXCEL_NO_AUTO_FIT_COL) | Const.MTE_EXCEL_NO_AUTO_FIT_ROW), 
					(MT.MTbl.MTE_COL_HEADERS | MT.MTbl.MTE_SHOW_STATUS), 0, Sys.ROW_Hidden, Sys.COL_Visible, 0);
			}
			else
			{
				Ext.MTblExportToOOCalc(this.tblHZettel, MT.MTbl.MTE_LNG_GERMAN, SalString.Null, (Const.MTE_OOCALC_NEW_WORKBOOK | Const.MTE_OOCALC_STRING_COLS_AS_TEXT), (MT.MTbl.MTE_COL_HEADERS | MT.MTbl.MTE_SHOW_STATUS), 0, Sys.ROW_Hidden, Sys.COL_Visible, 
					0);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbExport_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbExport, "Tabelle exportieren");
			return;
			#endregion
		}
		
		/// <summary>
		/// dfVorschuss1Wochen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfVorschuss1Wochen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfVorschuss1Wochen_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfVorschuss1Wochen_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfVorschuss1Wochen.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox(@"Es muss eine Zahl eingegeben werden.
Der Wert wurde daher auf vier Wochen gesetzt.", "Leerer Wert ist nicht erlaubt!", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.dfVorschuss1Wochen.Number = 4;
			}
			#endregion
		}
		
		/// <summary>
		/// rbVorschuss9Positiv WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbVorschuss9Positiv_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbVorschuss9Positiv_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbVorschuss9Positiv_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalLog("Arzt " + this.dfArztNr.Number.ToString(0) + ": Vorschuss CR positiv");
			#endregion
		}
		
		/// <summary>
		/// rbVorschuss9Negativ WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbVorschuss9Negativ_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbVorschuss9Negativ_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbVorschuss9Negativ_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalLog("Arzt " + this.dfArztNr.Number.ToString(0) + ": Vorschuss CR positiv");
			#endregion
		}
		
		/// <summary>
		/// pbTSEanzeigen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbTSEanzeigen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbTSEanzeigen_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbTSEanzeigen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			this.tblTSE.ResetTable();
			Var.FISKALY.fInit(this.dfAPIKey.Text, this.dfAPISecret.Text, "V1");
			if (Int.PalFiskalyRunMethod("frmAerzte", "ListTSS", ref Var.strFiskalyTSSId, ref Var.strFiskalyClientId, ref Var.strFiskalySerialNumber, ref Var.strFiskalyTxId, ref Var.strFiskalyState, "", SalNumber.Null, "", ref this.strStatus, ref this.strObject, ref 
				Var.strFiskalyCertificateSerial, ref Var.strFiskalyPublicKey, ref Var.strFiskalySignature_algorithm, ref Var.nFiskalySignature_counter, ref Var.strFiskalySignature_timestamp_format, ref Var.nFiskalyTransaction_number, ref Var.strFiskalySignature_value, ref 
				Var.strFiskalyQR_code_date, ref Var.strFiskalyEnv, Var.strFiskalyDescription, ref Var.strFiskalyProcessType, ref Var.strFiskalyProcessData, ref Var.strFiskalyExportID, Var.strFiskalyTime_Start, Var.strFiskalyTime_End)) 
			{
			}
			Var.FISKALY.fInit(this.dfAPIKey.Text, this.dfAPISecret.Text, "V2");
			if (Int.PalFiskalyRunMethod("frmAerzte", "ListTSS", ref Var.strFiskalyTSSId, ref Var.strFiskalyClientId, ref Var.strFiskalySerialNumber, ref Var.strFiskalyTxId, ref Var.strFiskalyState, "", SalNumber.Null, "", ref this.strStatus, ref this.strObject, ref 
				Var.strFiskalyCertificateSerial, ref Var.strFiskalyPublicKey, ref Var.strFiskalySignature_algorithm, ref Var.nFiskalySignature_counter, ref Var.strFiskalySignature_timestamp_format, ref Var.nFiskalyTransaction_number, ref Var.strFiskalySignature_value, ref 
				Var.strFiskalyQR_code_date, ref Var.strFiskalyEnv, Var.strFiskalyDescription, ref Var.strFiskalyProcessType, ref Var.strFiskalyProcessData, ref Var.strFiskalyExportID, Var.strFiskalyTime_Start, Var.strFiskalyTime_End)) 
			{
			}
			else
			{
				Sal.WaitCursor(false);
				e.Return = false;
				return;
			}
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// pbBestaetigungDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBestaetigungDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbBestaetigungDruck_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBestaetigungDruck_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfAPIKey.Text == "" || this.dfAPISecret.Text == "") 
			{
				Sal.MessageBox("Ohne API-Key und API-Secret kann keine Bestätigung an das Mitglied gesendet werden.", "Fehlende Daten", (Sys.MB_Ok | Sys.MB_IconStop));
			}
			else
			{
				dlgLlDruck.ModalDialog(App.frmMain, "Brief Fiskaly.crd", "");
			}
			#endregion
		}
		
		/// <summary>
		/// dfTMEingang WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfTMEingang_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfTMEingang_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfTMEingang_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfTMEingang.Number > 28 || this.dfTMEingang.Number < 1) 
			{
				Sal.MessageBox("Es darf nur 1 bis 28 eingegeben werden. Bitte Eingabe wiederholen.", "Ungültige Eingabe", (Sys.MB_Ok | Sys.MB_IconExclamation));
				e.Return = false;
				return;
			}
			#endregion
		}
		
		/// <summary>
		/// pbTSEbel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbTSEbel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbTSEbel_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbTSEbel_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalTSEBel();
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.DestroyWindow();
			#endregion
		}
		#endregion
		
		#region tblPI
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblPITableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmAerzte _frmAerzte = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblPITableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmAerzte frmAerzte
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmAerzte == null) 
					{
						_frmAerzte = (frmAerzte)this.FindForm();
					}
					return _frmAerzte;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblPITableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblPITableWindow)SalWindow.FromHandle(handle, typeof(tblPITableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblHZettel
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblHZettelTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmAerzte _frmAerzte = null;
			
			
			#region Window Variables
			public SalBoolean bPFarbe = false;
			#endregion
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblHZettelTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmAerzte frmAerzte
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmAerzte == null) 
					{
						_frmAerzte = (frmAerzte)this.FindForm();
					}
					return _frmAerzte;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblHZettelTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblHZettelTableWindow)SalWindow.FromHandle(handle, typeof(tblHZettelTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblDD
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblDDTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmAerzte _frmAerzte = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblDDTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmAerzte frmAerzte
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmAerzte == null) 
					{
						_frmAerzte = (frmAerzte)this.FindForm();
					}
					return _frmAerzte;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblDDTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblDDTableWindow)SalWindow.FromHandle(handle, typeof(tblDDTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colArztNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colArztNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;

				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalBoolean temp1 = this.frmAerzte.bExists;
				Int.SqlIstDa("FROM a WHERE aarztnr = :frmAerzte.tblDD.colArztNr", ref temp1);
				this.frmAerzte.bExists = temp1;

				if (!(this.frmAerzte.bExists)) 
				{
					Sal.MessageBox("Dieses Mitglied gibt es nicht.", "Mitglied Nr. " + this.colArztNr.Number.ToString(0), (Sys.MB_IconExclamation | Sys.MB_Ok));
					e.Return = false;
					return;
				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblPN
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblPNTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmAerzte _frmAerzte = null;
			
			
			#region Window Variables
			public SalString strCNAlt = "";
			#endregion
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblPNTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmAerzte frmAerzte
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmAerzte == null) 
					{
						_frmAerzte = (frmAerzte)this.FindForm();
					}
					return _frmAerzte;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblPNTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblPNTableWindow)SalWindow.FromHandle(handle, typeof(tblPNTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblPersonen
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblPersonenTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmAerzte _frmAerzte = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblPersonenTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmAerzte frmAerzte
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmAerzte == null) 
					{
						_frmAerzte = (frmAerzte)this.FindForm();
					}
					return _frmAerzte;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblPersonenTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblPersonenTableWindow)SalWindow.FromHandle(handle, typeof(tblPersonenTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblTSE
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblTSETableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmAerzte _frmAerzte = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblTSETableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmAerzte frmAerzte
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmAerzte == null) 
					{
						_frmAerzte = (frmAerzte)this.FindForm();
					}
					return _frmAerzte;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblTSETableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblTSETableWindow)SalWindow.FromHandle(handle, typeof(tblTSETableWindow)));
			}
			#endregion
			
			#region Methods
			
			/// <summary>
			/// </summary>
			/// <param name="p_FISKALYTSSLIST"></param>
			/// <returns></returns>
			public SalNumber fFuelleTSSList(FiskalyTSSList p_FISKALYTSSLIST)
			{
				#region Local Variables
				SalNumber nTSS = 0;
				SalNumber nCount = 0;
				#endregion
				
				#region Actions
				using (new SalContext(this))
				{
					nTSS = p_FISKALYTSSLIST.count;
					if (nTSS > 0) 
					{
						nCount = 0;
						while (true)
						{
							Var.nRow = this.InsertRow(Sys.TBL_MaxRow);
							description.Text = p_FISKALYTSSLIST.TSS_LIST[nCount].description;
							state.Text = p_FISKALYTSSLIST.TSS_LIST[nCount].state;
							// Set certificate=p_FISKALYTSSLIST.TSS_LIST[nCount].certificate
							_id.Text = p_FISKALYTSSLIST.TSS_LIST[nCount]._id;
							// Set _type=p_FISKALYTSSLIST.TSS_LIST[nCount]._type
							_env.Text = p_FISKALYTSSLIST.TSS_LIST[nCount]._env;
							colVersion.Text = p_FISKALYTSSLIST.TSS_LIST[nCount]._version;
							if (Var.FISKALY.GetDateFromTimestamp(p_FISKALYTSSLIST.TSS_LIST[nCount].time_init).Left(10) != "01.01.1970") 
							{
								colaktiviert.Text = Var.FISKALY.GetDateFromTimestamp(p_FISKALYTSSLIST.TSS_LIST[nCount].time_init);
							}
							if (Var.FISKALY.GetDateFromTimestamp(p_FISKALYTSSLIST.TSS_LIST[nCount].time_disable).Left(10) != "01.01.1970") 
							{
								colgekuendigt.Text = Var.FISKALY.GetDateFromTimestamp(p_FISKALYTSSLIST.TSS_LIST[nCount].time_disable);
							}
							nCount = nCount + 1;
							if (nCount > nTSS) 
							{
								break;
							}
						}
						Sys.hWndItem.SetFlagsAnyRows(Sys.ROW_New, false, 0, 0);
					}
				}

				return 0;
				#endregion
			}
			
			/// <summary>
			/// </summary>
			/// <param name="p_FISKALYTSSLIST"></param>
			/// <returns></returns>
			public SalNumber fFuelleTSSList_V2(FiskalyTSSList_V2 p_FISKALYTSSLIST)
			{
				#region Local Variables
				SalNumber nTSS = 0;
				SalNumber nCount = 0;
				#endregion
				
				#region Actions
				using (new SalContext(this))
				{
					nTSS = p_FISKALYTSSLIST.count;
					if (nTSS > 0) 
					{
						nCount = 0;
						while (true)
						{
							Var.nRow = this.InsertRow(Sys.TBL_MaxRow);
							description.Text = p_FISKALYTSSLIST.TSS_LIST[nCount].description;
							state.Text = p_FISKALYTSSLIST.TSS_LIST[nCount].state;
							// Set certificate=p_FISKALYTSSLIST.TSS_LIST[nCount].certificate
							_id.Text = p_FISKALYTSSLIST.TSS_LIST[nCount]._id;
							// Set _type=p_FISKALYTSSLIST.TSS_LIST[nCount]._type
							_env.Text = p_FISKALYTSSLIST.TSS_LIST[nCount]._env;
							colVersion.Text = p_FISKALYTSSLIST.TSS_LIST[nCount]._version;
							if (Var.FISKALY.GetDateFromTimestamp(p_FISKALYTSSLIST.TSS_LIST[nCount].time_init).Left(10) != "01.01.1970") 
							{
								colaktiviert.Text = Var.FISKALY.GetDateFromTimestamp(p_FISKALYTSSLIST.TSS_LIST[nCount].time_init);
							}
							if (Var.FISKALY.GetDateFromTimestamp(p_FISKALYTSSLIST.TSS_LIST[nCount].time_disable).Left(10) != "01.01.1970") 
							{
								colgekuendigt.Text = Var.FISKALY.GetDateFromTimestamp(p_FISKALYTSSLIST.TSS_LIST[nCount].time_disable);
							}
							nCount = nCount + 1;
							if (nCount > nTSS) 
							{
								break;
							}
						}
						Sys.hWndItem.SetFlagsAnyRows(Sys.ROW_New, false, 0, 0);
					}
				}

				return 0;
				#endregion
			}
			#endregion
		}
		#endregion
	}
}
