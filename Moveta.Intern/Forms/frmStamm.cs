// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmStamm : SalFormWindow
	{
		#region Window Variables
		public SalString strSelect = "";
		public SalNumber nStammIndex = 0;
		public SalString strStammDatei = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmStamm()
		{
			// Assign global reference.
			App.frmStamm = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmStamm CreateWindow(Control owner)
		{
			frmStamm frm = new frmStamm();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmStamm FromHandle(SalWindowHandle handle)
		{
			return ((frmStamm)SalWindow.FromHandle(handle, typeof(frmStamm)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmStamm WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmStamm_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmStamm_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmStamm_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmStamm_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 06.01.14 Ä1005 RO
			Int.SqlConnection(ref Var.hSqlStamm);
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmStamm_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.hSqlStamm.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// lbDateien WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbDateien_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_DoubleClick:
					this.lbDateien_OnSAM_DoubleClick(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_DoubleClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbDateien_OnSAM_DoubleClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nStammIndex = this.lbDateien.GetListSelectedIndex();
			this.strStammDatei = this.lbDateien.GetListItemText(this.nStammIndex);
			if (this.strStammDatei == "Ärzte") 
			{
				this.strSelect = "select * from a order by aarztnr";
			}
			if (this.strStammDatei == "Banken") 
			{
				this.strSelect = "select * from bs";
			}
			if (this.strStammDatei == "Staffeln") 
			{
				this.strSelect = "select * from st order by stnr";
			}
			if (this.strStammDatei == "Leistungen") 
			{
				this.strSelect = "select * from l order by lkenn";
			}
			if (this.strStammDatei == "Rechnungs-Texte") 
			{
				this.strSelect = "select * from rt order by rtarztnr";
			}
			if (this.strStammDatei == "Mahnintervalle") 
			{
				this.strSelect = "select * from mi order by minr";
			}
			if (this.strStammDatei == "Buchungsarten") 
			{
				this.strSelect = "select * from ba order by banr";
			}
			if (this.strStammDatei == "Halter") 
			{
				this.strSelect = "select * from h where hdeaktiv IS NULL";
				if (!(this.dfStammArztNr.IsEmpty())) 
				{
					this.strSelect = this.strSelect + " and harztnr=:dfStammArztNr";
				}
				this.strSelect = this.strSelect + " order by harztnr, hhalternr";
			}
			if (this.strStammDatei == "Mahngebühren") 
			{
				this.strSelect = "select * from mg";
				if (!(this.dfStammArztNr.IsEmpty())) 
				{
					this.strSelect = this.strSelect + " where mgarztnr=:dfStammArztNr";
				}
				this.strSelect = this.strSelect + " order by mgarztnr";
			}
			if (this.strStammDatei == "Aufschläge") 
			{
				this.strSelect = "select * from au";
				if (!(this.dfStammArztNr.IsEmpty())) 
				{
					this.strSelect = this.strSelect + " where auarztnr=:dfStammArztNr";
				}
				this.strSelect = this.strSelect + " order by auarztnr";
			}
			tblStamm.CreateWindow(this);
			App.tblStamm.Populate(Var.hSqlStamm, this.strSelect, Sys.TBL_FillAll);
			// Call VisTblAutoSizeColumn(tblStamm, hWndNULL)
			MT.MTbl.AutoSizeColumn(App.tblStamm, Sys.hWndNULL, MT.MTbl.MTASC_ALLROWS);
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
	}
}
