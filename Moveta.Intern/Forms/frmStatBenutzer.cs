// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;
using System.Data;
using System.Windows.Forms.DataVisualization.Charting;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmStatBenutzer : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlGraph = SalSqlHandle.Null;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmStatBenutzer()
		{
			// Assign global reference.
			App.frmStatBenutzer = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmStatBenutzer CreateWindow(Control owner)
		{
			frmStatBenutzer frm = new frmStatBenutzer();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmStatBenutzer FromHandle(SalWindowHandle handle)
		{
			return ((frmStatBenutzer)SalWindow.FromHandle(handle, typeof(frmStatBenutzer)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmStatBenutzer WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmStatBenutzer_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmStatBenutzer_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmStatBenutzer_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfvon.Value = new SalDateTime(1995, 1, 1);
			this.dfbis.Value = new SalDateTime(2030, 12, 31);
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlConnection(ref this.hSqlGraph);
			Sal.WaitCursor(true);
			if (this.dfUser.IsEmpty()) 
			{
				if (this.tbl1.Populate(this.hSqlGraph, @"SELECT logname,
sum(@value(@mid(logtext,20,5)))
FROM log
WHERE logtext like 'intern Logout%'
and logdate BETWEEN :frmStatBenutzer.dfvon.Value AND :frmStatBenutzer.dfbis.Value GROUP BY 1", Sys.TBL_FillAll)) 
				{
				}
			}
			else
			{
				if (this.tbl1.Populate(this.hSqlGraph, @"SELECT logname,
sum(@value(@mid(logtext,20,5)))
FROM log
WHERE logtext like 'intern Logout%'
and logname = :frmStatBenutzer.dfUser and logdate BETWEEN :frmStatBenutzer.dfvon.Value AND :frmStatBenutzer.dfbis.Value GROUP BY 1", Sys.TBL_FillAll)) 
				{
				}
			}
			this.hSqlGraph.Disconnect();
			// !
			//FC:FINAL: replace cQuickGraph
			//this.cc1.Graph.GraphType = 3;
			//this.cc1.Graph.GraphTitle = "Anmeldezeiten";
			//this.cc1.Graph.DataSource = "tbl1";
			//this.cc1.Graph.DataField[0] = "colStunden";
			//this.cc1.Graph.LegendField = "colUser";
			//this.cc1.Graph.LegendPos = 1;
			//this.cc1.Graph.LegendText[0] = "Benutzer";
			//this.cc1.Graph.NumDataFields = 1;
			//this.cc1.Graph.DrawMode = 2;
			//this.cc1.Graph.ToolBar = 1;
			//this.cc1.Graph.PropertyPages = 1;
			// !
			//FC:FINAL: replace cQuickGraph
			this.cc1.Series.Clear();
			Action<cQuickGraph>[] actions = new Action<cQuickGraph>[]
			{
				Updatechart
			};
			this.cc1.Draw(actions);
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion

		private void Updatechart(cQuickGraph chart)
        {
			chart.Legends.Clear();
			chart.Titles.Clear();
			chart.Series.Clear();

			Title title = new Title();
			title.Font = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Regular);
			title.Name = "Title1";
			title.Text = "Anmeldezeiten";
			chart.Titles.Add(title);

			Legend legend = new Legend();
			legend.IsTextAutoFit = false;
			legend.LegendStyle = LegendStyle.Table;
			legend.Docking = Docking.Right;
			legend.Alignment = StringAlignment.Near;
			legend.Name = "Legend1";
			legend.BackColor = System.Drawing.Color.Transparent;
			chart.Legends.Add(legend);
			chart.Legends["Legend1"].IsDockedInsideChartArea = false;

			// Generate the DataTable with user names and login times
			DataTable table = chart.DataSource as DataTable;

			// Add each user as a separate series
			foreach (DataRow row in table.Rows)
			{
				string userName = row[this.tbl1.colUser.Name].ToString();
				int loginTimes = Convert.ToInt32(row[this.tbl1.colStunden.Name]);

				Series series = new Series(userName);
				series.ChartType = SeriesChartType.Column;
				series.Points.AddXY(userName, loginTimes);
				series.CustomProperties = "DrawingStyle=Cylinder";

				// No need to manually set color, chart will automatically use palette colors
				chart.Series.Add(series);
			}
		}
		
		#region tbl1
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tbl1TableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmStatBenutzer _frmStatBenutzer = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tbl1TableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmStatBenutzer frmStatBenutzer
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmStatBenutzer == null) 
					{
						_frmStatBenutzer = (frmStatBenutzer)this.FindForm();
					}
					return _frmStatBenutzer;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tbl1TableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tbl1TableWindow)SalWindow.FromHandle(handle, typeof(tbl1TableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
