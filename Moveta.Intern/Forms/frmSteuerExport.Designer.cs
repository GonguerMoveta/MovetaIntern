// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	public partial class frmSteuerExport
	{
		
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer components = null;
		
		#region Window Accessories
		
		/// <summary>
		/// Toolbar control.
		/// </summary>
		protected SalFormToolBar ToolBar;
		
		/// <summary>
		/// Client area panel.
		/// </summary>
		protected SalFormClientArea ClientArea;
		
		/// <summary>
		/// StatusBar control.
		/// </summary>
		protected SalFormStatusBar StatusBar;
		#endregion
		
		
		#region Window Controls
		public SalPushbutton pbAbbruch;
		protected SalBackgroundText bkgd4;
		public SalDataField dfNr;
		public SalDataField dfFirma;
		// cDesktopListBox: myLocalTree
		// List Initialization
		// Message Actions
		// On SAM_Create
		// Call SalSendClassMessage( SAM_Create, wParam, lParam )
		// On SAM_Click
		// Call SalSendClassMessage( SAM_Click, wParam, lParam )
		// ***** If current selection changed, update list view
		// Set nIndex = SalListQuerySelection( hWndItem )
		// If nIndex != LB_Err and nIndex != nLocalIndex
		// Set nItemFlags = myLocalTree.GetFlags( nIndex )
		// If Not nItemFlags & ITEM_IsExpanded
		// Set dfTree = myLocalTree.GetSelectedDir()
		// Call EnumLocal()
		// Set nLocalIndex = nIndex
		protected SalBackgroundText bkgd6;
		protected SalBackgroundText bkgd7;
		// cXSalFlatButton: pbOk
		// Message Actions
		// On SAM_Click
		// If dfNr = NUMBER_Null
		// Call SalMessageBox('Bitte wählen Sie den gewünschten Arzt aus.','Abbruch', MB_Ok|MB_IconExclamation)
		// Return FALSE
		// Else
		// 05.07.11 Ä603
		// Set strDrive = SalFileGetDrive()
		// Call SalFileSetDrive( 'C:' )
		// Call SalWaitCursor(FALSE)
		// Call SalModalDialog( dlgLaufwerk, hWndForm, 'Steuerprüfer', strDir )
		// Call SalFileSetDrive( strDrive )
		// If strDir = ''
		// Call SalMessageBox('Bitte Ordner für die Exportdateien auswählen.','Abbruch', MB_Ok|MB_IconExclamation)
		// Return FALSE
		// Else
		// If Not SalFileOpen( hFile, strDir || '\\TEST', OF_Create|OF_Text|OF_Write)
		// Call SalMessageBox('Im angegebenen Ordner
		// kann keine Datei erstellt werden !".','Achtung',MB_Ok)
		// Else
		// Call SalWaitCursor(TRUE)
		// If dfvon = DATETIME_Null
		// Set dfvon = '1900-01-01'
		// If dfbis = DATETIME_Null
		// Set dfbis = 2199-12-31
		// Call SalFileClose( hFile )
		// Prüfen, ob RechNr.-Lücken
		// Set nRechNrAlt = 0
		// Set bOk = (SqlHandleExecX(hSqlTR, '
		// SELECT rkarztnr, rkrechnr
		// INTO :frmSteuerExport.nArztNr, :frmSteuerExport.nRechNr
		// FROM rk
		// WHERE rkarztnr = :frmSteuerExport.dfNr AND rkrechdat BETWEEN :frmSteuerExport.dfvon AND :frmSteuerExport.dfbis AND rkrechnr < 999990
		// ORDER BY 1,2' ,'StPr-Export: RechNr.-Prüfung') = IDOK)
		// If bOk
		// Call SqlFetchNext(hSqlTR,nFetch)
		// While nFetch != FETCH_EOF
		// Set nDiff = nRechNr - nRechNrAlt
		// If nDiff > 1 And nRechNrAlt != 0
		// While nDiff > 1
		// Set nRechNrNeu = nRechNrAlt + nDiff -1
		// Call SqlImmedX('INSERT INTO RK (RKARZTNR, RKHALTERNR, RKRECHNR, RKBUCHTEXT, RKKZZAHL)
		// VALUES(:frmSteuerExport.dfNr, 0, :frmSteuerExport.nRechNrNeu, \'-\', 4) ')
		// Call PalLog('StPrf-Export: RechNr.' || SalNumberToStrX(nRechNrNeu,0))
		// Set nDiff = nDiff - 1
		// Set nRechNrAlt = nRechNr
		// Call SqlFetchNext(hSqlTR,nFetch)
		// Call SqlCommit(hSqlTR)
		// Set bOk = FALSE
		// Rechnungen
		// Set strFile = strDir || '\\Rechnungen.txt'
		// If PalMakeFile( strFile,
		// 'SELECT  rkarztnr, rkrechnr, rkarztnr || @char(9) || rkhalternr || @char(9) || rkrechnr || @char(9) || rkbuchtext || @char(9) || rkrechdat || @char(9) || rkfaelldat || @char(9) || (rkdmleis+rkdmarzn) || @char(9) || (rkdmmahn+rkdmzins) || @char(9) ||
		// (rkdmleis+rkdmarzn+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkzazins), sum(rpdm)
		// INTO :frmSteuerExport.nArztNr, :frmSteuerExport.nRechNr, :frmSteuerExport.strText, :frmSteuerExport.strText2
		// FROM rk,rp
		// WHERE rkarztnr=rparztnr and rkhalternr=rphalternr and rkrechnr=rprechnr
		// AND rkarztnr = :frmSteuerExport.dfNr AND rkrechdat BETWEEN :frmSteuerExport.dfvon AND :frmSteuerExport.dfbis AND rkrechnr < 999990 group by 1,2,3',
		// 'ArztNr	HalterNr	RechNr	Buchungstext	Rechnungsdatum	Fälligkeitsdatum	Brutto-HF-EUR	MahnZins-EUR	Offen-EUR	Netto-HF-EUR')
		// Rechnungsdetails
		// Set strFile = strDir || '\\Rechnungsdetails.txt'
		// If PalMakeFile( strFile,
		// 'SELECT  rkarztnr || @char(9) || rkhalternr || @char(9) || rkrechnr || @char(9) || rpla || @char(9) || rpmwst || @char(9) || rpdatum || @char(9) || rprechtext || @char(9) || rpdm || @char(9) || rptext
		// INTO :frmSteuerExport.strText
		// FROM rk,rp
		// WHERE rkarztnr=rparztnr and rkhalternr=rphalternr and rkrechnr=rprechnr
		// AND rkarztnr = :frmSteuerExport.dfNr AND rkrechdat BETWEEN :frmSteuerExport.dfvon AND :frmSteuerExport.dfbis AND rkrechnr < 999990 ORDER BY rkarztnr, rkrechnr',
		// 'ArztNr	HalterNr	RechNr	Typ	MwSt	Datum	Bezeichnung	Netto-EUR	Text')
		// Kunden
		// Set strFile = strDir || '\\Kunden.txt'
		// If PalMakeFile( strFile,
		// 'SELECT DISTINCT rkarztnr*100000+rkhalternr, rkarztnr || @char(9) || rkhalternr || @char(9) || hnn || @char(9) || hvn || @char(9) || hname2 || @char(9) || hstr || @char(9) || hland || @char(9) || hort
		// INTO :frmSteuerExport.strDummy, :frmSteuerExport.strText
		// FROM rk, h
		// WHERE   rkarztnr=harztnr and rkhalternr=hhalternr
		// AND rkarztnr = :frmSteuerExport.dfNr AND rkrechdat BETWEEN :frmSteuerExport.dfvon AND :frmSteuerExport.dfbis AND rkrechnr < 999990
		// ORDER BY rkarztnr,rkhalternr',
		// 'ArztNr	HalterNr	Nachname	Vorname	Name2	Strasse	Land	PLZ-Ort')
		// Zahlungen
		// Set strFile = strDir || '\\Zahlungen.txt'
		// If PalMakeFile( strFile,
		// 'SELECT  zaarztnr || @char(9) || zahalternr || @char(9) || zarechnr || @char(9) || zakz || @char(9) || zabuchdat || @char(9) || zabelegnr || @char(9) || zadm || @char(9) || zabuchtext
		// INTO :frmSteuerExport.strText
		// FROM za
		// WHERE zaarztnr = :frmSteuerExport.dfNr AND zabuchdat BETWEEN :frmSteuerExport.dfvon AND :frmSteuerExport.dfbis AND zakz < 4 ORDER BY zabuchdat',
		// 'ArztNr	HalterNr	RechNr	Zahl-Kz	BuchDat	BelegNr	Brutto-EUR	BuchText')
		// Ausbuchungen
		// Set strFile = strDir || '\\Ausbuchungen.txt'
		// If PalMakeFile( strFile,
		// 'SELECT  zaarztnr || @char(9) || zahalternr || @char(9) || zarechnr || @char(9) || zakz || @char(9) || zabuchdat || @char(9) || zabelegnr || @char(9) || zadm || @char(9) || zabuchtext
		// INTO :frmSteuerExport.strText
		// FROM za
		// WHERE zaarztnr = :frmSteuerExport.dfNr AND zabuchdat BETWEEN :frmSteuerExport.dfvon AND :frmSteuerExport.dfbis AND zakz >=4 ORDER BY zabuchdat',
		// 'ArztNr	HalterNr	RechNr	Zahl-Kz	BuchDat	BelegNr	Brutto-EUR	BuchText')
		// Call SalStatusSetText(hWndForm, 'Export abgeschlossen')
		// Call SalWaitCursor(FALSE)
		public SalPushbutton pbOk;
		public VisCalendarDropDown dfvon;
		public VisCalendarDropDown dfbis;
		#endregion
		
		#region Windows Form Designer generated code
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
            this.ToolBar = new PPJ.Runtime.Windows.SalFormToolBar();
            this.pbAbbruch = new PPJ.Runtime.Windows.SalPushbutton();
            this.ClientArea = new PPJ.Runtime.Windows.SalFormClientArea();
            this.dfbis = new PPJ.Runtime.Vis.VisCalendarDropDown();
            this.dfvon = new PPJ.Runtime.Vis.VisCalendarDropDown();
            this.pbOk = new PPJ.Runtime.Windows.SalPushbutton();
            this.dfFirma = new PPJ.Runtime.Windows.SalDataField();
            this.dfNr = new PPJ.Runtime.Windows.SalDataField();
            this.bkgd7 = new PPJ.Runtime.Windows.SalBackgroundText();
            this.bkgd6 = new PPJ.Runtime.Windows.SalBackgroundText();
            this.bkgd4 = new PPJ.Runtime.Windows.SalBackgroundText();
            this.StatusBar = new PPJ.Runtime.Windows.SalFormStatusBar();
            this.ToolBar.SuspendLayout();
            this.ClientArea.SuspendLayout();
            this.SuspendLayout();
            // 
            // ToolBar
            // 
            this.ToolBar.Controls.Add(this.pbAbbruch);
            this.ToolBar.Font = new System.Drawing.Font("Tahoma", 8F);
            this.ToolBar.Name = "ToolBar";
            this.ToolBar.Size = new System.Drawing.Size(457, 60);
            this.ToolBar.TabIndex = 1;
            this.ToolBar.TabStop = true;
            this.ToolBar.Visible = false;
            // 
            // pbAbbruch
            // 
            this.pbAbbruch.AcceleratorKey = System.Windows.Forms.Keys.Escape;
            this.pbAbbruch.Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold);
            this.pbAbbruch.Location = new System.Drawing.Point(-25, -42);
            this.pbAbbruch.Name = "pbAbbruch";
            this.pbAbbruch.Size = new System.Drawing.Size(25, 42);
            this.pbAbbruch.TabIndex = 0;
            this.pbAbbruch.Text = "Abbruch";
            this.pbAbbruch.WindowActions += new PPJ.Runtime.Windows.WindowActionsEventHandler(this.pbAbbruch_WindowActions);
            // 
            // ClientArea
            // 
            this.ClientArea.Controls.Add(this.dfbis);
            this.ClientArea.Controls.Add(this.dfvon);
            this.ClientArea.Controls.Add(this.pbOk);
            this.ClientArea.Controls.Add(this.dfFirma);
            this.ClientArea.Controls.Add(this.dfNr);
            this.ClientArea.Controls.Add(this.bkgd7);
            this.ClientArea.Controls.Add(this.bkgd6);
            this.ClientArea.Controls.Add(this.bkgd4);
            this.ClientArea.Location = new System.Drawing.Point(0, 60);
            this.ClientArea.Name = "ClientArea";
            this.ClientArea.Size = new System.Drawing.Size(457, 90);
            this.ClientArea.TabIndex = 0;
            // 
            // dfbis
            // 
            this.dfbis.CalendarForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(32)))), ((int)(((byte)(32)))), ((int)(((byte)(32)))));
            this.dfbis.CalendarMonthBackground = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(255)))));
            this.dfbis.CalendarTitleBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(231)))), ((int)(((byte)(233)))), ((int)(((byte)(235)))));
            this.dfbis.CalendarTitleForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(48)))), ((int)(((byte)(48)))), ((int)(((byte)(48)))));
            this.dfbis.CalendarTrailingForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(153)))), ((int)(((byte)(153)))), ((int)(((byte)(153)))));
            this.dfbis.Format = null;
            this.dfbis.Location = new System.Drawing.Point(109, 105);
            this.dfbis.Name = "dfbis";
            this.dfbis.Size = new System.Drawing.Size(116, 22);
            this.dfbis.TabIndex = 7;
            this.dfbis.Text = "1/29/2024";
            this.dfbis.Value = new PPJ.Runtime.SalDateTime(2024, 1, 29, 8, 23, 35, 328);
            // 
            // dfvon
            // 
            this.dfvon.CalendarForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(32)))), ((int)(((byte)(32)))), ((int)(((byte)(32)))));
            this.dfvon.CalendarMonthBackground = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(255)))));
            this.dfvon.CalendarTitleBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(231)))), ((int)(((byte)(233)))), ((int)(((byte)(235)))));
            this.dfvon.CalendarTitleForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(48)))), ((int)(((byte)(48)))), ((int)(((byte)(48)))));
            this.dfvon.CalendarTrailingForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(153)))), ((int)(((byte)(153)))), ((int)(((byte)(153)))));
            this.dfvon.Format = null;
            this.dfvon.Location = new System.Drawing.Point(109, 79);
            this.dfvon.Name = "dfvon";
            this.dfvon.Size = new System.Drawing.Size(116, 22);
            this.dfvon.TabIndex = 6;
            this.dfvon.Text = "1/29/2024";
            this.dfvon.Value = new PPJ.Runtime.SalDateTime(2024, 1, 29, 8, 23, 35, 331);
            // 
            // pbOk
            // 
            this.pbOk.Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold);
            this.pbOk.Image = global::Moveta.Intern.Properties.Resources.ok;
            this.pbOk.Location = new System.Drawing.Point(257, 63);
            this.pbOk.Name = "pbOk";
            this.pbOk.Size = new System.Drawing.Size(168, 56);
            this.pbOk.TabIndex = 5;
            this.pbOk.Text = "&Export starten";
            this.pbOk.TransparentColor = System.Drawing.Color.Black;
            this.pbOk.WindowActions += new PPJ.Runtime.Windows.WindowActionsEventHandler(this.pbOk_WindowActions);
            // 
            // dfFirma
            // 
            this.dfFirma.BackColor = System.Drawing.Color.White;
            this.dfFirma.Font = new System.Drawing.Font("Tahoma", 9F);
            this.dfFirma.Location = new System.Drawing.Point(109, 23);
            this.dfFirma.Name = "dfFirma";
            this.dfFirma.ReadOnly = true;
            this.dfFirma.Size = new System.Drawing.Size(316, 24);
            this.dfFirma.TabIndex = 2;
            // 
            // dfNr
            // 
            this.dfNr.BackColor = System.Drawing.Color.White;
            this.dfNr.DataType = PPJ.Runtime.Windows.DataType.Number;
            this.dfNr.Font = new System.Drawing.Font("Tahoma", 9F);
            this.dfNr.Format = "#0";
            this.dfNr.Location = new System.Drawing.Point(65, 23);
            this.dfNr.Name = "dfNr";
            this.dfNr.Size = new System.Drawing.Size(36, 24);
            this.dfNr.TabIndex = 1;
            this.dfNr.WindowActions += new PPJ.Runtime.Windows.WindowActionsEventHandler(this.dfNr_WindowActions);
            // 
            // bkgd7
            // 
            this.bkgd7.Font = new System.Drawing.Font("Tahoma", 8F);
            this.bkgd7.Location = new System.Drawing.Point(83, 105);
            this.bkgd7.Name = "bkgd7";
            this.bkgd7.Size = new System.Drawing.Size(24, 16);
            this.bkgd7.TabIndex = 4;
            this.bkgd7.Text = "bis";
            // 
            // bkgd6
            // 
            this.bkgd6.Font = new System.Drawing.Font("Tahoma", 8F);
            this.bkgd6.Location = new System.Drawing.Point(19, 81);
            this.bkgd6.Name = "bkgd6";
            this.bkgd6.Size = new System.Drawing.Size(82, 16);
            this.bkgd6.TabIndex = 3;
            this.bkgd6.Text = "Buchungen vom";
            // 
            // bkgd4
            // 
            this.bkgd4.Font = new System.Drawing.Font("Tahoma", 9F);
            this.bkgd4.Location = new System.Drawing.Point(17, 25);
            this.bkgd4.Name = "bkgd4";
            this.bkgd4.Size = new System.Drawing.Size(48, 16);
            this.bkgd4.TabIndex = 0;
            this.bkgd4.Text = "Arzt-Nr.:";
            // 
            // StatusBar
            // 
            this.StatusBar.Location = new System.Drawing.Point(0, 150);
            this.StatusBar.Name = "StatusBar";
            this.StatusBar.Size = new System.Drawing.Size(457, 22);
            this.StatusBar.TabIndex = 2;
            // 
            // frmSteuerExport
            // 
            this.ClientSize = new System.Drawing.Size(457, 172);
            this.Controls.Add(this.ClientArea);
            this.Controls.Add(this.ToolBar);
            this.Controls.Add(this.StatusBar);
            this.Font = new System.Drawing.Font("Tahoma", 9F);
            this.ForeColor = System.Drawing.SystemColors.WindowText;
            this.Name = "frmSteuerExport";
            this.Text = "Export der Daten für Steuerprüfungen der Mitglieder";
            this.WindowActions += new PPJ.Runtime.Windows.WindowActionsEventHandler(this.frmSteuerExport_WindowActions);
            this.ToolBar.ResumeLayout(false);
            this.ClientArea.ResumeLayout(false);
            this.ResumeLayout(false);

		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Release global reference.
		/// </summary>
		/// <param name="disposing"></param>
		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null) 
			{
				components.Dispose();
			}
			if (disposing && App.frmSteuerExport == this) 
			{
				App.frmSteuerExport = null;
			}
			base.Dispose(disposing);
		}
		#endregion
	}
}
