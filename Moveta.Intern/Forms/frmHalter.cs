// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="strPHerkunft"></param>
	/// <param name="nPArztNr"></param>
	/// <param name="nPHalterNr"></param>
	public partial class frmHalter : SalQuickTabsForm
	{
		#region Window Parameters
		public SalString strPHerkunft;
		public SalNumber nPArztNr;
		public SalNumber nPHalterNr;
		#endregion
		
		#region Window Variables
		public SalNumber nArztNr = 0;
		public SalNumber nArztNr2 = 0;
		public SalNumber nHalterNr = 0;
		public SalBoolean bOK = false;
		public SalString strKuerzel = "";
		public SalString mlAdresse = "";
		public SalNumber nCredoneg = 0;
		public SalString strGrund = "";
		public SalString strN1a = "";
		public SalString strN2a = "";
		public SalString strSa = "";
		public SalString strOa = "";
		public SalString strLa = "";
		public SalNumber nHalterNein = 0;
		public SalString strMCOrt = "";
		public SalString strDateiName = "";
		public SalString strDateiPfad = "";
		public SalFileHandle hDisk = SalFileHandle.Null;
		public SalString strAktPfad = "";
		public SalNumber nBytes = 0;
		public SalString strBrief = "";
		public SalString strAN1 = "";
		public SalString strAN2 = "";
		public SalString strAS = "";
		public SalString strAO = "";
		public SalString strAEMail = "";
		public SalString strALand = "";
		public SalSqlHandle hSqlPI = SalSqlHandle.Null;
		public SalNumber nFetchPI = 0;
		public SalNumber nHauptNr = 0;
		public SalNumber nHauptNrAlt = 0;
		public SalNumber nNebenNr = 0;
		public SalString lsBody = "";
		public SalString strPLC2 = "";
		public SalNumber nNachMBaufMS7 = 0;
		public SalBoolean bBEZSIben = false;
		public SalBoolean bBEZS = false;
		public SalBoolean bBEZD = false;
		public SalString strDigitalRg = "";
		public SalString strHerkunft = "";
		public SalDateTime dtHerkunftDat = SalDateTime.Null;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmHalter(SalString strPHerkunft, SalNumber nPArztNr, SalNumber nPHalterNr)
		{
			// Assign global reference.
			App.frmHalter = this;
			// Window Parameters initialization.
			this.strPHerkunft = strPHerkunft;
			this.nPArztNr = nPArztNr;
			this.nPHalterNr = nPHalterNr;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmHalter CreateWindow(Control owner, SalString strPHerkunft, SalNumber nPArztNr, SalNumber nPHalterNr)
		{
			frmHalter frm = new frmHalter(strPHerkunft, nPArztNr, nPHalterNr);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmHalter FromHandle(SalWindowHandle handle)
		{
			return ((frmHalter)SalWindow.FromHandle(handle, typeof(frmHalter)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalHoleHalter()
		{
			#region Actions
			using (new SalContext(this))
			{
				strGrund = "";

				Int.SqlIstDa(@" FROM h
WHERE harztnr = :frmHalter.dfArztNr AND hhalternr = :frmHalter.dfHalterNr AND hdeaktiv IS NULL", ref bOK);
				if (bOK) 
				{
					// 09.07.13 Ä848 + HTel/HEmail
					// 26.11.18 Ä1805 + hbezabzug + hbezabzugtext
					// 27.11.20 Ä1922 + DigitalRg
					// 12.03.21 Ä1925 / Ä1944 + hepostaenddat
					// 17.09.21 Ä1969 + Herkunft
					// 07.08.23 Ä2107 + Versicherung
					Int.SqlImmedSel(@"SELECT harztnr, hhalternr, hti, hvn, hnn, hname2, hstr, hort,
hfaelltg, hmahnint, hbankeinzug, hskonto, htitel, hproz1, hproz2, hproz3, hetikett, hcredoneg,
hblz, hkonto, hbezblz, hbezkonto, hag, hmolkerei, hgebdat, hgebdat2, hgebdat2text, hgebdattext, handerehalter, htelefon, htel2, hfax, hhandy,
hmemo, herfdat, hhalternein, hregnr, hemail, hpmemail, hland, hsperrdatum, hvirtkonto, hreverse, hustid ,
hhtel, hhtel2, hhtelhandy, hhtelfax, hhemail, hiban, hbeziban, hbic, hbezbic, hbezsigndat,
hsvname, hsvname2, hsvstr, hsvort, hsvland, hsvtitel,
hnachmbms7, hbezabzug, hbezabzugtext, hdigitalrg, hleitwegid, hdigitalmail,
hepostaenddat, haendherkunft, haendherkunftdat, hvecode, hvevsnr
INTO :frmHalter.dfArztNr, :frmHalter.dfHalterNr, :frmHalter.dfTi, :frmHalter.dfVN, :frmHalter.dfNN,
:frmHalter.dfName2, :frmHalter.dfStr, :frmHalter.dfOrt,
:frmHalter.dfFaellTage, :frmHalter.dfMahnint, :frmHalter.dfBankEinz,
:frmHalter.dfSkonto, :frmHalter.dfTitel,
:frmHalter.dfProz1,  :frmHalter.dfProz2,  :frmHalter.dfProz3, :frmHalter.dfEtikett, :frmHalter.nCredoneg,
:frmHalter.dfBLZ, :frmHalter.dfKonto, :frmHalter.dfBEZBLZ, :frmHalter.dfBEZKonto, :frmHalter.dfAG, :frmHalter.dfMolkerei,
:frmHalter.dfGebdat, :frmHalter.dfGebdat2, :frmHalter.dfGebDat2Text, :frmHalter.dfGebDatText, :frmHalter.dfandereNr, :frmHalter.dfSTel, :frmHalter.dfSTel2, :frmHalter.dfSFax, :frmHalter.dfSHandy,
:frmHalter.mlHInfo, :frmHalter.dfErfDat, :frmHalter.nHalterNein, :frmHalter.dfRegNr, :frmHalter.dfSEMail, :frmHalter.dfeMailPM, :frmHalter.cmbLC,
:frmHalter.dfSperreSeit, :frmHalter.dfVirtKonto,
:frmHalter.cbReverse, :frmHalter.dfUStID,
:frmHalter.dfSHTel, :frmHalter.dfSHTel2, :frmHalter.dfSHHandy, :frmHalter.dfSHFax, :frmHalter.dfSHEMail, :frmHalter.dfIBAN, :frmHalter.dfBEZIBAN, :frmHalter.dfBIC, :frmHalter.dfBEZBIC, :frmHalter.dfBEZSignDat,
:frmHalter.dfSVName1, :frmHalter.dfSVName2, :frmHalter.dfSVStr, :frmHalter.dfSVOrt, :frmHalter.cmbSVLC, :frmHalter.dfSVTitel,
:frmHalter.nNachMBaufMS7, :frmHalter.dfBEZAbzugProz, :frmHalter.dfBEZAbzugText, :frmHalter.strDigitalRg, :frmHalter.dfLeitwegID, :frmHalter.dfDigitalMail,
:frmHalter.dfEPostAenDat,
:frmHalter.strHerkunft, :frmHalter.dtHerkunftDat, :frmHalter.cmbVECode, :frmHalter.dfVeVSNr
FROM h WHERE harztnr = :frmHalter.dfArztNr AND hhalternr = :frmHalter.dfHalterNr AND hdeaktiv IS NULL");
					PalPCheckHalterNein((nHalterNein == 1));
					if (nCredoneg == 1) 
					{
						dfCredoneg.Text = "Credo neg.";
					}
					// 02.04.07 Ä102
					PalCheckSperre();
					// 07.09.09 OTÄ295
					if (dfVirtKonto.Text != "") 
					{
						dfVirtKonto.Text = "VirtKonto " + dfVirtKonto.Text + Int.PalPruefZifferB1(dfVirtKonto.Text, 9);
					}
					// 18.12.17 Ä1667
					if (nNachMBaufMS7 == 1) 
					{
						cbnachMBaufMS7.Checked = true;
					}
					else
					{
						cbnachMBaufMS7.Checked = false;
					}
					// 27.11.20 Ä1922
					if (strDigitalRg == "") 
					{
						rbDRNein.Checked = true;
					}
					else if (strDigitalRg == "ZRG") 
					{
						rbDRZ.Checked = true;
					}
					else
					{
						rbDRX.Checked = true;
					}

					strN1a = dfTi.Text + dfVN.Text + " " + dfNN.Text;
					strN2a = dfName2.Text;
					strSa = dfStr.Text;
					strOa = dfOrt.Text;
					PalPruefeZettel();
					PalPruefeEL();
					// If cmbLC = ''
					// Set cmbLC = 'DE'
					cmbLC.Text = Int.PalPruefeLC(cmbLC.Text, 1);
					cmbSVLC.Text = Int.PalPruefeLC(cmbSVLC.Text, 1);
					strLa = cmbLC.Text;
					// 03.12.09
					Int.SqlImmedSel(@"SELECT anr2, aemail
INTO :frmHalter.nArztNr2, :frmHalter.strAEMail
FROM a WHERE aarztnr=:frmHalter.dfArztNr");
					// 12.02.15 Ä1114
					if (strAEMail == "") 
					{
						Sal.DisableWindow(cbEMailanM);
					}
					// 17.09.21 Ä1969 + Herkunft
					if (strHerkunft != "") 
					{
						bkgdAendHerkunft.Text = "letzte Adressänderung von " + strHerkunft + " (Stand " + Int.PalDateToStrDE(dtHerkunftDat) + ")";
					}
					else
					{
						bkgdAendHerkunft.Text = "";
					}

					Int.SqlConnection(ref hSqlPI);
					if (tblHZettel.Populate(hSqlPI, @"SELECT zvon,zan,zrechnr,zbemerk,zdatum, zerledigt
FROM Z
INTO :tblHZettel.colsVon, :tblHZettel.colsAn, :tblHZettel.colnRechNr, :tblHZettel.collsBemerk, :tblHZettel.coldtDatum, :tblHZettel.colsErl
WHERE " + Int.PalArztNr("z", dfArztNr.Number, nArztNr2) + " AND zhalternr = :frmHalter.dfHalterNr AND zdeaktiv IS NULL ORDER BY zdatum DESC", Sys.TBL_FillAll)) 
					{
					}
					hSqlPI.Disconnect();
				}
				else
				{
					PalNeuerHalter();
					tblHZettel.ResetTable();
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalLoescheMaske()
		{
			#region Actions
			using (new SalContext(this))
			{
				// Call PalLog('Halter.pbOk 16a')
				// Call SalClearField(dfArztNr)
				Sal.ClearField(dfHalterNr);
				Sal.ClearField(dfTi);
				Sal.ClearField(dfVN);
				Sal.ClearField(dfNN);
				Sal.ClearField(dfName2);
				Sal.ClearField(dfStr);
				Sal.ClearField(dfOrt);
				Sal.ClearField(dfFaellTage);
				Sal.ClearField(dfMahnint);
				Sal.ClearField(dfBankEinz);
				// Call SalClearField(dfZuchtbetr)
				Sal.ClearField(dfEtikett);
				Sal.ClearField(dfSkonto);
				Sal.ClearField(dfTitel);
				// Call SalClearField(dfMC)
				Sal.ClearField(dfProz1);
				Sal.ClearField(dfProz2);
				Sal.ClearField(dfProz3);
				Sal.ClearField(dfCredoneg);
				Sal.ClearField(dfDMRech);
				Sal.ClearField(dfDMMahn);
				Sal.ClearField(dfDMZahl);
				Sal.ClearField(dfBLZ);
				Sal.ClearField(dfKonto);
				Sal.ClearField(dfIBAN);
				Sal.ClearField(dfBIC);
				Sal.ClearField(dfBEZBLZ);
				Sal.ClearField(dfBEZKonto);
				Sal.ClearField(dfBEZIBAN);
				Sal.ClearField(dfBEZBIC);
				Sal.ClearField(dfBEZSignDat);
				Sal.ClearField(dfAG);
				Sal.ClearField(dfMolkerei);
				Sal.ClearField(dfGebdat);
				// 16.09.14 Ä1099 GebDat2
				Sal.ClearField(dfGebdat2);
				Sal.ClearField(dfGebDat2Text);
				Sal.ClearField(dfGebDatText);

				Sal.ClearField(dfandereNr);
				Sal.ClearField(dfSTel);
				Sal.ClearField(dfSTel2);
				Sal.ClearField(dfSFax);
				Sal.ClearField(dfSHandy);
				Sal.ClearField(mlHInfo);
				Sal.ClearField(dfErfDat);
				Sal.ClearField(dfRegNr);
				Sal.ClearField(dfSEMail);
				Sal.ClearField(dfeMailPM);
				Sal.ClearField(dfSHTel);
				Sal.ClearField(dfSHTel2);
				Sal.ClearField(dfSHHandy);
				Sal.ClearField(dfSHFax);
				Sal.ClearField(dfSHEMail);
				// 27.07.15 Ä1235 + SV-Adresse
				Sal.ClearField(dfSVTitel);
				Sal.ClearField(dfSVName1);
				Sal.ClearField(dfSVName2);
				Sal.ClearField(dfSVStr);
				Sal.ClearField(dfSVOrt);
				// 26.11.18 Ä1805 + hbezabzug + hbezabzugtext
				Sal.ClearField(dfBEZAbzugProz);
				Sal.ClearField(dfBEZAbzugText);

				cmbSVLC.Text = "";
				// 18.12.17 Ä1667
				cbnachMBaufMS7.Checked = false;

				obHalterNein.Checked = false;
				nCredoneg = 0;
				strN1a = "";
				strN2a = "";
				strSa = "";
				strOa = "";
				strLa = "";
				cmbLC.Text = "";
				cbReverse.Checked = false;
				Sal.ClearField(dfUStID);
				// Call PalLog('Halter.pbOk 16b')
				Sal.ColorSet(cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				Sal.ColorSet(cbEL, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				// Call PalLog('Halter.pbOk 16c')
				dfVirtKonto.Text = "";
				// 17.09.21 Ä1969 + Herkunft
				bkgdAendHerkunft.Text = "";
				// 07.08.23 Ä2107
				Sal.ClearField(cmbVECode);
				Sal.ClearField(dfVeVSNr);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalNeuerHalter()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (Sal.IsNull(dfArztNr)) 
				{
					Sal.MessageBox("ArztNr des neuen Halters fehlt", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
					Sal.SetFocus(dfArztNr);
				}
				else
				{
					nArztNr = dfArztNr.Number;
					if (Sal.IsNull(dfHalterNr)) 
					{
						dfHalterNr.Number = 0;
					}
					nHalterNr = dfHalterNr.Number;
					PalLoescheMaske();
					dfArztNr.Number = nArztNr;
					if (nHalterNr != 0) 
					{
						dfHalterNr.Number = nHalterNr;
					}
					dfTitel.Text = "Herrn / Frau / Firma";
					dfProz1.Number = 0;
					dfProz2.Number = 0;
					Int.SqlImmedSel(@"SELECT afaelltg, amahnint, aproz1, aproz2, aproz3, anr2
INTO :frmHalter.dfFaellTage, :frmHalter.dfMahnint, :frmHalter.dfProz1, :frmHalter.dfProz2, :frmHalter.dfProz3, :frmHalter.nArztNr2
FROM a WHERE aarztnr = :frmHalter.dfArztNr");
					if (Sal.IsNull(dfHalterNr)) 
					{
						// 04.09.12 Ä811
						// Call SqlImmedSel('SELECT MAX(hhalternr)+1 INTO :frmHalter.dfHalterNr
						// FROM h WHERE harztnr = :frmHalter.dfArztNr')
						dfHalterNr.Number = Int.PalGetNewHalterNr(dfArztNr.Number, nArztNr2, "");

					}
					dfBankEinz.Checked = false;
					// Set dfZuchtbetr = 0
					dfEtikett.Number = 0;
					dfSkonto.Number = 0;
					cmbLC.Text = "DE";
					// 05.05.22 F4893
					dfSperreSeit.Value = Sys.DATETIME_Null;

					Sal.SetFocus(dfVN);
				}
				Sal.ColorSet(cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				Sal.ColorSet(cbEL, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				strGrund = "";
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalPruefeZettel()
		{
			#region Actions
			using (new SalContext(this))
			{

				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalBoolean temp1 = cbZettel.Checked;
				Int.SqlIstDa(@" FROM Z WHERE zhalternr=:frmHalter.dfHalterNr
and zarztnr = :frmHalter.dfArztNr AND zdeaktiv IS NULL", ref temp1);
				cbZettel.Checked = temp1;

				if (cbZettel.Checked == true) 
				{
					Sal.ColorSet(cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
				}
				else
				{
					Sal.ColorSet(cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalPruefeEL()
		{
			#region Actions
			using (new SalContext(this))
			{

				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalBoolean temp1 = cbEL.Checked;
				Int.SqlIstDa(@" FROM EL WHERE elhalternr=:frmHalter.dfHalterNr
and elarztnr = :frmHalter.dfArztNr and elerledigt = 'N' ", ref temp1);
				cbEL.Checked = temp1;

				if (cbEL.Checked == true) 
				{
					Sal.ColorSet(cbEL, Sys.COLOR_IndexWindow, Sys.COLOR_White);
				}
				else
				{
					Sal.ColorSet(cbEL, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bPNein"></param>
		/// <returns></returns>
		public SalNumber PalPCheckHalterNein(SalBoolean bPNein)
		{
			#region Actions
			using (new SalContext(this))
			{
				obHalterNein.Checked = bPNein;
				if (bPNein) 
				{
					Sal.ColorSet(obHalterNein, Sys.COLOR_IndexWindow, Sys.COLOR_Red);
					Sal.SetWindowText(obHalterNein, "Keine neuen Rechnungen für diesen Halter!");
				}
				else
				{
					Sal.ColorSet(obHalterNein, Sys.COLOR_IndexWindow, Sys.COLOR_Green);
					Sal.SetWindowText(obHalterNein, "Dieser Halter kann Rechnungen erhalten.");
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalDateiWahl()
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(4);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strArExtensions[0] = "E-Mails - *.mai";
				strArExtensions[1] = "*.mai";
				strArExtensions[2] = "alle Dateien - *.*";
				strArExtensions[3] = "*.*";
				xOK = Sal.DlgOpenFile(this, "Briefe", strArExtensions, 4, ref nIndex, ref strDateiName, ref strDateiPfad);
				if (xOK) 
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalDateiSpeich()
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(4);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strArExtensions[0] = "E-Mails - *.mai";
				strArExtensions[1] = "*.mai";
				strArExtensions[2] = "alle Dateien - *.*";
				strArExtensions[3] = "*.*";
				xOK = Sal.DlgSaveFile(this, "SELECT-Statements", strArExtensions, 4, ref nIndex, ref strDateiName, ref strDateiPfad);
				if (xOK) 
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalCheckSperre()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (dfSperreSeit.Value == Sys.DATETIME_Null) 
				{
					pbSperre.SetText("Postausgang sperren");
				}
				else
				{
					pbSperre.SetText("Postausgang erlauben");
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalChangeSperre()
		{
			#region Actions
			using (new SalContext(this))
			{
				// 02.04.07 Ä102
				strKuerzel = Var.strBNZei;
				// 07.05.07
				// 07.01.13 F1483 + aland
				Int.SqlImmedSel(@"SELECT anr2, aname1, aname2, astr, aort, aland
INTO :frmHalter.nArztNr2, :frmHalter.strAN1, :frmHalter.strAN2, :frmHalter.strAS, :frmHalter.strAO, :frmHalter.strALand
FROM a WHERE aarztnr=:frmHalter.dfArztNr");
				if (nArztNr2 == SalNumber.Null) 
				{
					nArztNr2 = dfArztNr.Number;
				}

				if (dfSperreSeit.Value == Sys.DATETIME_Null) 
				{
					strGrund = "";
					while (strGrund == "") 
					{
						strGrund = "Rechnung/Mahnung unzustellbar";
						dlgText.ModalDialog(this, "Warum soll der Postausgang gesperrt werden? :", "frmHalter", 100, ref strGrund);
					}
					Int.PalLog("Haltersperre ein : " + Int.PalStrNum(dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(dfHalterNr.Number, 5, 0));
					if (Int.SqlImmed("UPDATE h SET hsperrdatum = SYSDATE WHERE harztnr IN (:frmHalter.dfArztNr, :frmHalter.nArztNr2) AND hhalternr = :frmHalter.dfHalterNr")) 
					{
					}
					// 05.08.09 OTÄ298
					nHauptNr = 0;
					nHauptNrAlt = 0;
					Int.SqlConnection(ref hSqlPI);
					Int.SqlHandleExec(hSqlPI, @"SELECT pihauptnr, pinebennr
FROM pi
INTO :frmHalter.nHauptNr, :frmHalter.nNebenNr
WHERE pihauptnr in ( " + Sal.NumberToStrX(dfArztNr.Number, 0) + ", " + nArztNr2.ToString(0) + @")
OR pinebennr in ( " + Sal.NumberToStrX(dfArztNr.Number, 0) + ", " + nArztNr2.ToString(0) + ")", "Fehler Holen PackInfo", ref Var.nErr);
					nFetchPI = hSqlPI.FetchNext();
					while (nFetchPI != Sys.FETCH_EOF) 
					{
						if (nHauptNr != nHauptNrAlt) 
						{
							if (dfArztNr.Number != nHauptNr && nArztNr2 != nHauptNr) 
							{
								if (Int.SqlImmed("UPDATE h SET hsperrdatum = SYSDATE WHERE harztnr = :frmHalter.nHauptNr AND hhalternr = :frmHalter.dfHalterNr")) 
								{
								}
							}
							nHauptNrAlt = nHauptNr;
						}
						if (dfArztNr.Number == nNebenNr || nArztNr2 == nNebenNr) 
						{
						}
						else
						{
							if (Int.SqlImmed("UPDATE h SET hsperrdatum = SYSDATE WHERE harztnr = :frmHalter.nNebenNr AND hhalternr = :frmHalter.dfHalterNr")) 
							{
							}
						}
						nFetchPI = hSqlPI.FetchNext();
					}
					hSqlPI.Commit();
					hSqlPI.Disconnect();

					mlAdresse = "***** Postausgang gesperrt wegen: " + strGrund;
					dfSperreSeit.Value = SalDateTime.Current;
					// 02.07.09 OTÄ274
					// Brief
					strBrief = @"Sehr geehrte Damen und Herren,

bei der Anschrift Ihres Kunden

" + dfTi.Text + dfVN.Text + " " + dfNN.Text + ", " + dfStr.Text + ", " + dfOrt.Text + @"

gibt es Unklarheiten: " + strGrund + @"

Bitte nehmen Sie kurzfristig Kontakt mit uns auf. Vielen Dank!";
					// 06.08.08
					if (Var.bfrmBriefVari) 
					{
						while (!(App.frmBriefVari.DestroyWindow())) 
						{
						}
					}

					// 16.12.09 OTF345 SalDateCurrent() -> '1900-01-01'
					// 07.01.13 F1483
					// Call SalCreateWindow(frmBriefVari, hWndForm, dfArztNr, dfHalterNr, 0, 'A',
					// strBrief , '1900-01-01', '', strAN1, strAN2, strAS, strAO)
					// 06.08.18 Ä1763 TRUE -> FALSE
					if (strALand == "") 
					{
						frmBriefVari.CreateWindow(this, dfArztNr.Number, dfHalterNr.Number, 0, "A", strBrief, new SalDateTime(1900, 1, 1), "", strAN1, strAN2, strAS, strAO, false);
					}
					else
					{
						strALand = Int.PalPruefeLC(strALand, 0);
						frmBriefVari.CreateWindow(this, dfArztNr.Number, dfHalterNr.Number, 0, "A", strBrief, new SalDateTime(1900, 1, 1), strAN1, strAN2, strAS, strAO, strALand, true);
					}
					// Call SalMessageBox('Ok wenn gedruckt','Druck Ok?',MB_Ok)
					// If bfrmBriefVari
					// While Not SalDestroyWindow(frmBriefVari)

					strGrund = "Bitte Name/Anschrift mitteilen wegen: " + strGrund;
					Int.SqlImmedX(@"
INSERT INTO el (elzeichen, elarztnr, elhalternr, eltext,
	eldatum, elerledigt)
VALUES (:strBNZei, :frmHalter.dfArztNr, :frmHalter.dfHalterNr, :frmHalter.strGrund, SYSDATE, 'N')");

				}
				else
				{
					while (strGrund == "") 
					{
						dlgText.ModalDialog(this, "Warum soll der Postausgang wieder erlaubt werden? :", "frmHalter", 100, ref strGrund);
					}
					Int.PalLog("Haltersperre aus : " + Int.PalStrNum(dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(dfHalterNr.Number, 5, 0));
					if (Int.SqlImmed("UPDATE h SET hsperrdatum = NULL WHERE harztnr IN (:frmHalter.dfArztNr, :frmHalter.nArztNr2) AND hhalternr = :frmHalter.dfHalterNr")) 
					{
					}
					// 12.04.21 F4754
					Int.SqlImmed("DELETE FROM ewa WHERE " + Int.PalArztNr("ewa", dfArztNr.Number, nArztNr2) + " AND ewahalternr = :frmHalter.dfHalterNr");
					// 05.08.09 OTÄ298
					nHauptNr = 0;
					nHauptNrAlt = 0;
					Int.SqlConnection(ref hSqlPI);
					Int.SqlHandleExec(hSqlPI, @"SELECT pihauptnr, pinebennr
FROM pi
INTO :frmHalter.nHauptNr, :frmHalter.nNebenNr
WHERE pihauptnr in ( " + Sal.NumberToStrX(dfArztNr.Number, 0) + ", " + nArztNr2.ToString(0) + @")
OR pinebennr in ( " + Sal.NumberToStrX(dfArztNr.Number, 0) + ", " + nArztNr2.ToString(0) + ")", "Fehler Holen PackInfo", ref Var.nErr);
					nFetchPI = hSqlPI.FetchNext();
					while (nFetchPI != Sys.FETCH_EOF) 
					{
						if (nHauptNr != nHauptNrAlt) 
						{
							if (dfArztNr.Number != nHauptNr && nArztNr2 != nHauptNr) 
							{
								if (Int.SqlImmed("UPDATE h SET hsperrdatum = NULL WHERE harztnr = :frmHalter.nHauptNr AND hhalternr = :frmHalter.dfHalterNr")) 
								{
								}
								// 12.04.21 F4754
								Int.SqlImmed("DELETE FROM ewa WHERE ewaarztnr = :frmHalter.nHauptNr AND ewahalternr = :frmHalter.dfHalterNr");
							}
							nHauptNrAlt = nHauptNr;
						}
						if (dfArztNr.Number == nNebenNr || nArztNr2 == nNebenNr) 
						{
						}
						else
						{
							if (Int.SqlImmed("UPDATE h SET hsperrdatum = NULL WHERE harztnr = :frmHalter.nNebenNr AND hhalternr = :frmHalter.dfHalterNr")) 
							{
							}
							// 12.04.21 F4754
							Int.SqlImmed("DELETE FROM ewa WHERE ewaarztnr = :frmHalter.nNebenNr AND ewahalternr = :frmHalter.dfHalterNr");
						}
						nFetchPI = hSqlPI.FetchNext();
					}
					hSqlPI.Commit();
					hSqlPI.Disconnect();
					// 23.01.17 Ä1475
					// 03.04.23 Ä2093 14 -> 21
					Int.SqlImmed(@"UPDATE rk set rkmahnsperrbis = SYSDATE + 21 DAYS WHERE rkarztnr IN (:frmHalter.dfArztNr, :frmHalter.nArztNr2) AND rkhalternr = :frmHalter.dfHalterNr
AND rkkzzahl<2 AND rkrechnr < 999990");
					Int.PalLog("HSperr: MahnSperr aus " + Int.PalStrNum(dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(dfHalterNr.Number, 5, 0));

					mlAdresse = "***** Postausgang erlaubt wegen: " + strGrund;
					dfSperreSeit.Value = Sys.DATETIME_Null;
				}
				// 13.05.14 F2027
				dfHalterNr.Number = Int.PalCheckNULL(dfHalterNr.Number);

				Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmHalter.dfArztNr, :frmHalter.dfHalterNr, 0,
:frmHalter.mlAdresse , SYSDATE, NULL, 'J', 'HS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
				PalCheckSperre();
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strLike"></param>
		/// <returns></returns>
		public SalNumber PalPopulateEPost(SalString strLike)
		{
			#region Local Variables
			SqlLocals.PalPopulateEPostLocals locals = new SqlLocals.PalPopulateEPostLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.strLike = strLike;

				Int.SqlConnection(ref hSqlPI);
				if (tblEPostLog.Populate(hSqlPI, @"SELECT logname, logdate, @MID(logtext, 13, 255)
FROM log
INTO :tblEPostLog.colsZei, :tblEPostLog.coldtDatum, :tblEPostLog.collsBemerk
WHERE logtyp=1 AND logtext LIKE '" + locals.strLike + "\' ORDER BY logdate DESC", Sys.TBL_FillAll)) 
				{
				}
				hSqlPI.Disconnect();

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalSpeichereEPost()
		{
			#region Actions
			using (new SalContext(this))
			{
				// 12.03.21 Ä1925 / Ä1944
				if (dfeMailPM.Text == "") 
				{
					// If IDYES = SalMessageBox( 'Soll die Mailadresse für jeglichen Dokumentenversand über E-Post gelöscht werden?
					// 
					// Bitte nach der Antwort auf Speichern klicken!', 'Löschen ?', MB_YesNo|MB_IconQuestion )
					// Set dfEPostAenDat = SalDateCurrent(  )
					// Call PalLogTyp( PalStrNum0( dfArztNr, 4, 0 ) || '/H' || PalStrNum0( dfHalterNr, 5, 0 ) || ': bei Moveta gelöscht', 1 )
					// Call PalPopulateEPost( PalStrNum0( dfArztNr, 4, 0 ) || '/H' || PalStrNum0( dfHalterNr, 5, 0 ) || '%' )
					// Return TRUE
					// Else
					// Call SqlImmedSel( 'SELECT hpmemail, hepostaenddat
					// INTO :frmHalter.dfeMailPM, :frmHalter.dfEPostAenDat
					// FROM h
					// WHERE harztnr = :frmHalter.dfArztNr AND hhalternr = :frmHalter.dfHalterNr' )
					// Return FALSE
					dfEPostAenDat.DateTime = SalDateTime.Current;
					Int.PalLogTyp(Int.PalStrNum0(dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum0(dfHalterNr.Number, 5, 0) + ": bei Moveta gelöscht", 1);
					// Call PalPopulateEPost( PalStrNum0( dfArztNr, 4, 0 ) || '/H' || PalStrNum0( dfHalterNr, 5, 0 ) || '%' )
					return true;
				}
				else
				{
					// If IDYES = SalMessageBox( 'Soll die Mailadresse ' || dfeMailPM || ' für
					// jeglichen Dokumentenversand über E-Post verwendet werden?
					// 
					// Bitte nach der Antwort auf Speichern klicken!', 'Ok?', MB_YesNo|MB_IconQuestion )
					// Set dfEPostAenDat = SalDateCurrent(  )
					// Call PalLogTyp( PalStrNum0( dfArztNr, 4, 0 ) || '/H' || PalStrNum0( dfHalterNr, 5, 0 ) || ': bei Moveta geändert: ' || dfeMailPM, 1 )
					// Call PalPopulateEPost( PalStrNum0( dfArztNr, 4, 0 ) || '/H' || PalStrNum0( dfHalterNr, 5, 0 ) || '%' )
					// Return TRUE
					// Else
					// Call SqlImmedSel( 'SELECT hpmemail, hepostaenddat
					// INTO :frmHalter.dfeMailPM, :frmHalter.dfEPostAenDat
					// FROM h
					// WHERE harztnr = :frmHalter.dfArztNr AND hhalternr = :frmHalter.dfHalterNr' )
					// Return FALSE
					dfEPostAenDat.DateTime = SalDateTime.Current;
					Int.PalLogTyp(Int.PalStrNum0(dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum0(dfHalterNr.Number, 5, 0) + ": bei Moveta geändert: " + dfeMailPM.Text, 1);
					// Call PalPopulateEPost( PalStrNum0( dfArztNr, 4, 0 ) || '/H' || PalStrNum0( dfHalterNr, 5, 0 ) || '%' )
					return true;
				}
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmHalter WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmHalter_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmHalter_OnSAM_Create(sender, e);
					break;
                //FC:FINAL: use SAM_Close instead of SAM_Destroy
                case Sys.SAM_Close:
					this.frmHalter_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmHalter_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.bfrmHalter = true;
			Int.PalGetSize(this, false);
			// 20.01.14 Ä1005
			// Set bOK = SqlCreateSession(hSqlSession,'')
			// Set bOK=SqlCreateStatement (hSqlSession, hSql)
			// Call SqlSetIsolationLevel(hSql,'RO')
			Int.SqlConnection(ref Var.hSql);

			this.cmbLC.PopulateList(Var.hSql, "SELECT lccode || \' \' || lcname FROM lc order by lccode");
			// 27.07.15 Ä1235 + SV-Adresse
			this.cmbSVLC.PopulateList(Var.hSql, "SELECT lccode || \' \' || lcname FROM lc order by lccode");
			// 07.08.23 Ä2107 + versicherung
			this.cmbVECode.PopulateList(Var.hSql, "SELECT vecode FROM ve order by vecode");
			this.cmbVECode.AddListItem("");
			// 20.01.14 Ä1005
			Var.hSql.Disconnect();
			// Call SqlFreeSession( hSqlSession )

			Sal.WaitCursor(true);
			Sal.ColorSet(this.cbEL, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			// 05.05.22 F4893
			if (this.nPArztNr == SalNumber.Null) 
			{
				this.nPArztNr = 0;
			}
			if (this.nPHalterNr == SalNumber.Null) 
			{
				this.nPHalterNr = 0;
			}

			if (this.nPArztNr != 0) 
			{
				this.dfArztNr.Number = this.nPArztNr;
				if (this.nPHalterNr != 0 && (this.strPHerkunft != "frmSBM" && this.strPHerkunft.Left(6) != "frmTSK")) 
				{
					this.dfHalterNr.Number = this.nPHalterNr;
					this.PalHoleHalter();
				}
				else
				{
					if (this.strPHerkunft == "frmSBM" || this.strPHerkunft.Left(6) == "frmTSK" || this.strPHerkunft == "frmRechPos" || this.strPHerkunft == "frmRechPos2") 
					{
						this.dfHalterNr.Number = this.nPHalterNr;
					}
					this.PalNeuerHalter();
				}
			}
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmHalter_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlIstDa(@" FROM h
WHERE harztnr = :frmHalter.dfArztNr AND hhalternr = :frmHalter.dfHalterNr AND hdeaktiv IS NULL", ref this.bOK);
			if (this.strPHerkunft == "frmManLE") 
			{
				if (this.bOK) 
				{
					App.frmManLE.dfArztNr.Number = this.dfArztNr.Number;
					App.frmManLE.dfHalterNr.Number = this.dfHalterNr.Number;
					App.frmManLE.dfHalterGr.Number = this.dfHalterNr.Number;
					App.frmManLE.dfSHalterTi.Text = this.dfTi.Text;
					App.frmManLE.dfSHalterVN.Text = this.dfVN.Text;
					App.frmManLE.dfSHalterNN.Text = this.dfNN.Text;
					App.frmManLE.dfSHalterName2.Text = this.dfName2.Text;
					App.frmManLE.dfSHalterStr.Text = this.dfStr.Text;
					App.frmManLE.dfSHalterOrt.Text = this.dfOrt.Text;
					// 07.08.23 Ä2107
					App.frmManLE.cmbVECode.Text = this.cmbVECode.Text;
					App.frmManLE.dfVeVSNr.Text = this.dfVeVSNr.Text;
				}
				else
				{
					Sal.ClearField(App.frmManLE.dfHalterNr);
					Sal.ClearField(App.frmManLE.dfHalterGr);
					Sal.ClearField(App.frmManLE.dfSHalterTi);
					Sal.ClearField(App.frmManLE.dfSHalterVN);
					Sal.ClearField(App.frmManLE.dfSHalterNN);
					Sal.ClearField(App.frmManLE.dfSHalterName2);
					Sal.ClearField(App.frmManLE.dfSHalterStr);
					Sal.ClearField(App.frmManLE.dfSHalterOrt);
					Sal.SetFocus(App.frmManLE.dfHalterNr);
				}
				Sal.WaitCursor(false);
			}
			else if (this.strPHerkunft == "frmRechPos") 
			{
				if (this.bOK) 
				{
					App.frmRechPos.dfNBArztNr.Number = this.dfArztNr.Number;
					App.frmRechPos.dfNBHalterNr.Number = this.dfHalterNr.Number;
					App.frmRechPos.strNBTi = this.dfTi.Text;
					App.frmRechPos.strNBVN = this.dfVN.Text;
					App.frmRechPos.strNBNN = this.dfNN.Text;
					App.frmRechPos.strNBName2 = this.dfName2.Text;
					App.frmRechPos.strNBStr = this.dfStr.Text;
					App.frmRechPos.strNBOrt = this.dfOrt.Text;
				}
				else
				{
					Sal.ClearField(App.frmRechPos.dfNBHalterNr);
					App.frmRechPos.strNBTi = "";
					App.frmRechPos.strNBVN = "";
					App.frmRechPos.strNBNN = "";
					App.frmRechPos.strNBName2 = "";
					App.frmRechPos.strNBStr = "";
					App.frmRechPos.strNBOrt = "";
					Sal.SetFocus(App.frmRechPos.dfNBHalterNr);
				}
				Sal.WaitCursor(false);
			}
			else if (this.strPHerkunft == "frmRechPos2") 
			{
				if (this.bOK) 
				{
					App.frmRechPos.dfNB2ArztNr.Number = this.dfArztNr.Number;
					App.frmRechPos.dfNB2HalterNr.Number = this.dfHalterNr.Number;
					App.frmRechPos.strNB2Ti = this.dfTi.Text;
					App.frmRechPos.strNB2VN = this.dfVN.Text;
					App.frmRechPos.strNB2NN = this.dfNN.Text;
					App.frmRechPos.strNB2Name2 = this.dfName2.Text;
					App.frmRechPos.strNB2Str = this.dfStr.Text;
					App.frmRechPos.strNB2Ort = this.dfOrt.Text;
				}
				else
				{
					Sal.ClearField(App.frmRechPos.dfNB2HalterNr);
					App.frmRechPos.strNB2Ti = "";
					App.frmRechPos.strNB2VN = "";
					App.frmRechPos.strNB2NN = "";
					App.frmRechPos.strNB2Name2 = "";
					App.frmRechPos.strNB2Str = "";
					App.frmRechPos.strNB2Ort = "";
					Sal.SetFocus(App.frmRechPos.dfNB2HalterNr);
				}
				Sal.WaitCursor(false);
			}
			// If strPHerkunft = 'frmSBM'
			// 30.11.07 auskommentiert: And dfRegNr != ''
			// 17.12.07 F317 +  And dfVN != '' And dfNN != ''
			// If dfHalterNr > 0 And dfVN != '' And dfNN != ''
			// Set frmSBM.tbl1.colHalterNr = dfHalterNr
			// Set frmSBM.tbl1.colRegNr = dfRegNr
			// Call frmSBM.PalCheckReg(FALSE)
			// Call SalSetFocus(frmSBM.tbl1.colMwSt)
			if (this.strPHerkunft == "frmTSKBT") 
			{
				if (this.dfHalterNr.Number > 0 && this.dfNN.Text != "") 
				{
					App.frmTSK.tblBT.colArztNr.Number = this.dfArztNr.Number;
					App.frmTSK.tblBT.colHalterNr.Number = this.dfHalterNr.Number;
					App.frmTSK.tblBT.colRegNr.Text = this.dfRegNr.Text;
					App.frmTSK.PalCheckHalterNr(false, this.dfArztNr.Number, this.dfHalterNr.Number, "BT");
					Sal.SetFocus(App.frmTSK.tblBT.colDatum);
				}
			}
			else if (this.strPHerkunft == "frmTSKBTBV") 
			{
				if (this.dfHalterNr.Number > 0 && this.dfNN.Text != "") 
				{
					App.frmTSK.tblBTBV.colArztNr.Number = this.dfArztNr.Number;
					App.frmTSK.tblBTBV.colHalterNr.Number = this.dfHalterNr.Number;
					App.frmTSK.tblBTBV.colRegNr.Text = this.dfRegNr.Text;
					App.frmTSK.PalCheckHalterNr(false, this.dfArztNr.Number, this.dfHalterNr.Number, "BT");
					Sal.SetFocus(App.frmTSK.tblBTBV.colDatum);
				}
			}
			else if (this.strPHerkunft == "frmTSKBHVI") 
			{
				if (this.dfHalterNr.Number > 0 && this.dfNN.Text != "") 
				{
					App.frmTSK.tblBHVI.colArztNr.Number = this.dfArztNr.Number;
					App.frmTSK.tblBHVI.colHalterNr.Number = this.dfHalterNr.Number;
					App.frmTSK.tblBHVI.colRegNr.Text = this.dfRegNr.Text;
					App.frmTSK.PalCheckHalterNr(false, this.dfArztNr.Number, this.dfHalterNr.Number, "BT");
					Sal.SetFocus(App.frmTSK.tblBHVI.colDatum);
				}
			}
			else if (this.strPHerkunft == "frmTSKBVD") 
			{
				if (this.dfHalterNr.Number > 0 && this.dfNN.Text != "") 
				{
					App.frmTSK.tblBVD.colArztNr.Number = this.dfArztNr.Number;
					App.frmTSK.tblBVD.colHalterNr.Number = this.dfHalterNr.Number;
					App.frmTSK.tblBVD.colRegNr.Text = this.dfRegNr.Text;
					App.frmTSK.PalCheckHalterNr(false, this.dfArztNr.Number, this.dfHalterNr.Number, "BT");
					Sal.SetFocus(App.frmTSK.tblBVD.colDatum);
				}
			}
			else if (this.strPHerkunft == "frmTSKTbc") 
			{
				if (this.dfHalterNr.Number > 0 && this.dfNN.Text != "") 
				{
					App.frmTSK.tblTbc.colArztNr.Number = this.dfArztNr.Number;
					App.frmTSK.tblTbc.colHalterNr.Number = this.dfHalterNr.Number;
					App.frmTSK.tblTbc.colRegNr.Text = this.dfRegNr.Text;
					App.frmTSK.PalCheckHalterNr(false, this.dfArztNr.Number, this.dfHalterNr.Number, "BT");
					Sal.SetFocus(App.frmTSK.tblTbc.colDatum);
				}
			}
			else if (this.strPHerkunft == "frmTSKBHVIBV") 
			{
				if (this.dfHalterNr.Number > 0 && this.dfNN.Text != "") 
				{
					App.frmTSK.tblBHVIBV.colArztNr.Number = this.dfArztNr.Number;
					App.frmTSK.tblBHVIBV.colHalterNr.Number = this.dfHalterNr.Number;
					App.frmTSK.tblBHVIBV.colRegNr.Text = this.dfRegNr.Text;
					App.frmTSK.PalCheckHalterNr(false, this.dfArztNr.Number, this.dfHalterNr.Number, "BT");
					Sal.SetFocus(App.frmTSK.tblBHVIBV.colDatum);
				}
			}
			else if (this.strPHerkunft == "frmTSKBVDBV") 
			{
				if (this.dfHalterNr.Number > 0 && this.dfNN.Text != "") 
				{
					App.frmTSK.tblBVDBV.colArztNr.Number = this.dfArztNr.Number;
					App.frmTSK.tblBVDBV.colHalterNr.Number = this.dfHalterNr.Number;
					App.frmTSK.tblBVDBV.colRegNr.Text = this.dfRegNr.Text;
					App.frmTSK.PalCheckHalterNr(false, this.dfArztNr.Number, this.dfHalterNr.Number, "BT");
					Sal.SetFocus(App.frmTSK.tblBVDBV.colDatum);
				}
			}
			Int.PalSetSize(this);
			Var.bfrmHalter = false;
			#endregion
		}
		
		/// <summary>
		/// tblHZettel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHZettel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// On SAM_FetchRowDone
				
				// 18.09.02
				
				// If bPFarbe
				
				// Call XSalTblSetRowBackColor( tblHZettel, lParam, 0xBFFFBF )
				
				// Set bPFarbe = FALSE
				
				// Else
				
				// Call XSalTblSetRowBackColor( tblHZettel, lParam, 0xEFFFEF )
				
				// Set bPFarbe = TRUE
				
				case Sys.SAM_Create:
					this.tblHZettel_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHZettel_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblHZettel, 0xdfffdf);
			// Call MTblSubClass( hWndItem )
			// Call MTblSetAltRowBackColors( hWndItem, FALSE, COLOR_White, 0xBFFFBF )
			#endregion
		}
		
		/// <summary>
		/// pbInfo WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbInfo_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbInfo_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbInfo_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.IsEmpty() || this.dfHalterNr.IsEmpty()) 
			{
				Sal.MessageBox("ArztNr. / HalterNr. fehlt", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.dfArztNr.SetFocus();
			}
			else
			{
				Int.SqlImmedSel(@"SELECT SUM(rkdmleis+rkdmarzn),
SUM(rkdmmahn), SUM(rkzaleis+rkzaarzn+rkzamahn)
INTO :frmHalter.dfDMRech, :frmHalter.dfDMMahn, :frmHalter.dfDMZahl
FROM rk WHERE rkarztnr = :frmHalter.dfArztNr And  rkhalternr = :frmHalter.dfHalterNr
 AND rkrechdat > @yearbeg(@now) AND rkdeaktiv IS NULL");
			}
			#endregion
		}
		
		/// <summary>
		/// dfBLZ WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBLZ_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfBLZ_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBLZ_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (((SalString)this.cmbLC.Text).Left(2) == "DE" || this.cmbLC.Text == "") 
			{
				this.dfIBAN.Text = Int.PalIBAN(((SalString)this.cmbLC.Text).Left(2), this.dfBLZ.Text, this.dfKonto.Text);
				this.dfBIC.Text = Int.PalGetBIC(this.dfBLZ.Text);
			}
			#endregion
		}
		
		/// <summary>
		/// dfKonto WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfKonto_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfKonto_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfKonto_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (((SalString)this.cmbLC.Text).Left(2) == "DE" || this.cmbLC.Text == "") 
			{
				this.dfIBAN.Text = Int.PalIBAN(((SalString)this.cmbLC.Text).Left(2), this.dfBLZ.Text, this.dfKonto.Text);
			}
			#endregion
		}
		
		/// <summary>
		/// dfIBAN WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfIBAN_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfIBAN_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfIBAN_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfIBAN.Text != "") 
			{
				if (((SalString)this.dfIBAN.Text).Scan(" ") > -1)  // 26.03.15 F2159
				{
					this.dfIBAN.Text = Int.PalStringStrip(this.dfIBAN.Text, " ");
				}
				if (Int.PalIBANPruef(this.dfIBAN.Text)) 
				{
					e.Return = true;
					return;
				}
				else
				{
					Sal.MessageBox("Die eingegebene IBAN ist ungültig!", "Fehlerhafte Eingabe", Sys.MB_Ok);
					e.Return = false;
					return;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfBIC WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBIC_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfBIC_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBIC_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfBIC.Text != "") 
			{
				if (((SalString)this.dfBIC.Text).Scan(" ") > -1)  // 16.11.15 F1275
				{
					this.dfBIC.Text = Int.PalStringStrip(this.dfBIC.Text, " ");
				}
			}
			#endregion
		}
		
		/// <summary>
		/// obHalterNein WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obHalterNein_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.obHalterNein_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obHalterNein_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(this.obHalterNein.Checked)) 
			{
				this.mlAdresse = "***** Haltersperre aufgehoben";
				// 13.05.14 F2027
				this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

				Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmHalter.dfArztNr, :frmHalter.dfHalterNr, 0,
:frmHalter.mlAdresse , SYSDATE, NULL, 'J', 'HS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
				this.PalPCheckHalterNein(this.obHalterNein.Checked);
				this.pbOK.PostMessage(Sys.SAM_Click, 0, 0);
			}
			else
			{
				if (this.dfandereNr.IsEmpty()) 
				{
					Sal.MessageBox("Bitte vorher die andere(n) Halternummer(n) dieses Halters eingeben.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
					this.obHalterNein.Checked = false;
				}
				else
				{
					this.strKuerzel = App.frmMain.strUser.Left(2);
					this.strGrund = "";
					while (this.strGrund == "") 
					{
						dlgText.ModalDialog(this, "Warum darf der Halter nicht mehr verwendet werden? :", "frmHalter", 100, ref this.strGrund);
					}
					this.mlAdresse = "***** Halter gesperrt wg.: " + this.strGrund;
					// 13.05.14 F2027
					this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

					Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmHalter.dfArztNr, :frmHalter.dfHalterNr, 0,
:frmHalter.mlAdresse , SYSDATE, NULL, 'J', 'HS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
					this.PalPCheckHalterNein(this.obHalterNein.Checked);
					this.pbOK.PostMessage(Sys.SAM_Click, 0, 0);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfBankEinz WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBankEinz_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.dfBankEinz_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBankEinz_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 25.11.09 OTÄ239
			if (this.dfBankEinz.Checked == true) 
			{
				if (this.dfBEZBIC.Text == "" || this.dfBEZIBAN.Text == "" || this.dfBEZSignDat.DateTime == Sys.DATETIME_Null) 
				{
					Sal.MessageBox(@"Ohne IBAN, BIC und Signaturdatum ist kein Einzug möglich.
Bitte alle drei Felder eingeben.

Haken wird entfernt.", "Daten fehlen", Sys.MB_Ok);
					this.dfBankEinz.Checked = false;
				}
				else
				{
					if (Sys.IDNO == Sal.MessageBox("Liegt die vom Schuldner ausgefüllte moveta-Mandatsanfrage vor?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
					{
						this.dfBankEinz.Checked = false;
						Sal.MessageBox("Ohne ausgefüllte Mandatsanfrage kann kein Eintrag erfolgen!", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
					}
				}
			}
			else
			{
				Int.SqlIstDa("FROM bezs WHERE " + Int.PalArztNr("bezs", this.dfArztNr.Number, this.nArztNr2) + " AND bezshalternr = :frmHalter.dfHalterNr AND bezsrechnr IS NULL", ref this.bBEZSIben);
				Int.SqlIstDa("FROM bezs WHERE " + Int.PalArztNr("bezs", this.dfArztNr.Number, this.nArztNr2) + " AND bezshalternr = :frmHalter.dfHalterNr AND bezsrechnr IS NOT NULL AND bezserldat IS NULL", ref this.bBEZS);
				Int.SqlIstDa("FROM bezd WHERE " + Int.PalArztNr("bezd", this.dfArztNr.Number, this.nArztNr2) + " AND bezdhalternr = :frmHalter.dfHalterNr AND bezderldat IS NULL", ref this.bBEZD);
				if (this.bBEZD) 
				{
					if (Sys.IDYES == Sal.MessageBox(@"Es gibt noch unerledigte Bankeinzüge.
Soll diese sowie der BEZ-Stammdateneintrag gelöscht werden?", "Bankeinzug", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
					{
						if (this.bBEZSIben) 
						{
							Int.SqlImmed("DELETE FROM bezs WHERE " + Int.PalArztNr("bezs", this.dfArztNr.Number, this.nArztNr2) + " AND bezshalternr = :frmHalter.dfHalterNr AND bezsrechnr IS NULL");
						}
						else
						{
							Int.SqlImmed("DELETE FROM bezs WHERE " + Int.PalArztNr("bezs", this.dfArztNr.Number, this.nArztNr2) + " AND bezshalternr = :frmHalter.dfHalterNr AND bezsrechnr IS NOT NULL AND bezserldat IS NULL");
						}
						Int.SqlImmed("DELETE FROM bezd WHERE " + Int.PalArztNr("bezd", this.dfArztNr.Number, this.nArztNr2) + " AND bezdhalternr = :frmHalter.dfHalterNr AND bezderldat IS NULL");
						Int.PalLog("HS: BEZD/S gelöscht: " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0));
					}
				}
				else if (this.bBEZSIben) 
				{
					if (Sys.IDYES == Sal.MessageBox(@"Es gibt noch einen laufenden Bankeinzug.
Soll dieser gelöscht werden?", "Iben-Bankeinzug", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
					{
						Int.SqlImmed("DELETE FROM bezs WHERE " + Int.PalArztNr("bezs", this.dfArztNr.Number, this.nArztNr2) + " AND bezshalternr = :frmHalter.dfHalterNr AND bezsrechnr IS NULL");
						Int.PalLog("HS: BEZSIben gelöscht: " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0));
					}
				}
				else if (this.bBEZS) 
				{
					if (Sys.IDYES == Sal.MessageBox(@"Es gibt noch einen laufenden Bankeinzug.
Soll dieser gelöscht werden?", "Bankeinzug", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
					{
						Int.SqlImmed("DELETE FROM bezs WHERE " + Int.PalArztNr("bezs", this.dfArztNr.Number, this.nArztNr2) + " AND bezshalternr = :frmHalter.dfHalterNr AND bezsrechnr IS NOT NULL AND bezserldat IS NULL");
						Int.PalLog("HS: BEZS gelöscht: " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0));
					}
				}
			}
			// Else
			// Call SalMessageBox('Bedenken Sie bitte, daß wir eine ausgefüllte Mandatsanfrage der TVN benötigen.
			// Mandatsanfrage oder Einzugsermächtigung der Praxis reicht nicht mehr !!!!', 'Achtung', MB_Ok|MB_IconAsterisk)

			#endregion
		}
		
		/// <summary>
		/// pbCredopos WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbCredopos_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbCredopos_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbCredopos_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalAktion(this.dfArztNr.Number, this.dfHalterNr.Number, SalNumber.Null, "MG", "CRED+", SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null);
			this.nCredoneg = 0;
			Int.SqlImmedX(@"UPDATE h
SET hcredoneg = 0
WHERE harztnr = :frmHalter.dfArztNr AND hhalternr = :frmHalter.dfHalterNr");
			if (this.nArztNr2 != 0) 
			{
				Int.SqlImmedX(@"UPDATE h
SET hcredoneg = 0
WHERE harztnr = :frmHalter.nArztNr2 AND hhalternr = :frmHalter.dfHalterNr");
			}
			// 05.08.09 OTÄ298
			this.nHauptNr = 0;
			this.nHauptNrAlt = 0;
			Int.SqlConnection(ref this.hSqlPI);
			Int.SqlHandleExec(this.hSqlPI, @"SELECT pihauptnr, pinebennr
FROM pi
INTO :frmHalter.nHauptNr, :frmHalter.nNebenNr
WHERE pihauptnr in ( " + this.nArztNr.ToString(0) + ", " + this.nArztNr2.ToString(0) + @")
OR pinebennr in ( " + this.nArztNr.ToString(0) + ", " + this.nArztNr2.ToString(0) + ")", "Fehler Holen PackInfo", ref Var.nErr);
			this.nFetchPI = this.hSqlPI.FetchNext();
			while (this.nFetchPI != Sys.FETCH_EOF) 
			{
				if (this.nHauptNr != this.nHauptNrAlt) 
				{
					if (this.dfArztNr.Number != this.nHauptNr && this.nArztNr2 != this.nHauptNr) 
					{
						Int.SqlImmedX(@"UPDATE h
SET hcredoneg = 0
WHERE harztnr = :frmHalter.nHauptNr AND hhalternr = :frmHalter.dfHalterNr");
					}
					this.nHauptNrAlt = this.nHauptNr;
				}
				if (this.dfArztNr.Number == this.nNebenNr || this.nArztNr2 == this.nNebenNr) 
				{
				}
				else
				{
					Int.SqlImmedX(@"UPDATE h
SET hcredoneg = 0
WHERE harztnr = :frmHalter.nNebenNr AND hhalternr = :frmHalter.dfHalterNr");
				}
				this.nFetchPI = this.hSqlPI.FetchNext();
			}
			this.hSqlPI.Commit();
			this.hSqlPI.Disconnect();

			this.dfCredoneg.Text = "";
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// pbCredoneg WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbCredoneg_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbCredoneg_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbCredoneg_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalAktion(this.dfArztNr.Number, this.dfHalterNr.Number, SalNumber.Null, "MG", "CRED-", SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null);
			this.nCredoneg = 1;
			Int.SqlImmedX(@"UPDATE h
SET hcredoneg = 1
WHERE harztnr = :frmHalter.dfArztNr AND hhalternr = :frmHalter.dfHalterNr");
			if (this.nArztNr2 != 0) 
			{
				Int.SqlImmedX(@"UPDATE h
SET hcredoneg = 1
WHERE harztnr = :frmHalter.nArztNr2 AND hhalternr = :frmHalter.dfHalterNr");
			}
			// 05.08.09 OTÄ298
			this.nHauptNr = 0;
			this.nHauptNrAlt = 0;
			Int.SqlConnection(ref this.hSqlPI);
			Int.SqlHandleExec(this.hSqlPI, @"SELECT pihauptnr, pinebennr
FROM pi
INTO :frmHalter.nHauptNr, :frmHalter.nNebenNr
WHERE pihauptnr in ( " + this.nArztNr.ToString(0) + ", " + this.nArztNr2.ToString(0) + @")
OR pinebennr in ( " + this.nArztNr.ToString(0) + ", " + this.nArztNr2.ToString(0) + ")", "Fehler Holen PackInfo", ref Var.nErr);
			this.nFetchPI = this.hSqlPI.FetchNext();
			while (this.nFetchPI != Sys.FETCH_EOF) 
			{
				if (this.nHauptNr != this.nHauptNrAlt) 
				{
					if (this.dfArztNr.Number != this.nHauptNr && this.nArztNr2 != this.nHauptNr) 
					{
						Int.SqlImmedX(@"UPDATE h
SET hcredoneg = 1
WHERE harztnr = :frmHalter.nHauptNr AND hhalternr = :frmHalter.dfHalterNr");
					}
					this.nHauptNrAlt = this.nHauptNr;
				}
				if (this.dfArztNr.Number == this.nNebenNr || this.nArztNr2 == this.nNebenNr) 
				{
				}
				else
				{
					Int.SqlImmedX(@"UPDATE h
SET hcredoneg = 1
WHERE harztnr = :frmHalter.nNebenNr AND hhalternr = :frmHalter.dfHalterNr");
				}
				this.nFetchPI = this.hSqlPI.FetchNext();
			}
			this.hSqlPI.Commit();
			this.hSqlPI.Disconnect();

			this.dfCredoneg.Text = "Credo ---";
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalHoleHalter();
			#endregion
		}
		
		/// <summary>
		/// dfVN WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfVN_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_KillFocus:
					this.dfVN_OnSAM_KillFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_KillFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfVN_OnSAM_KillFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call PalTrimVN(dfVN  )

			// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
			SalString temp1 = this.dfVN.Text;
			SalString temp2 = this.dfTitel.Text;
			SalString temp3 = this.dfName2.Text;
			SalBoolean temp4 = Int.PalCheckVN(ref temp1, ref temp2, ref temp3);
			this.dfVN.Text = temp1;
			this.dfTitel.Text = temp2;
			this.dfName2.Text = temp3;

			if (!(temp4)) 
			{
				this.dfTitel.Text = "Herrn/Frau/Firma";
			}
			#endregion
		}
		
		/// <summary>
		/// pbEMSenden WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMSenden_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEMSenden_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMSenden_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (((SalString)this.dfSEMail.Text).Scan("@") != -1) 
			{
				// 06.05.14 F2003
				// If Not Email.EmailIsConnected()
				// If Email.EmailConnect('','','', EMAIL_SYS_MSMAIL)
				Sal.WaitCursor(true);
				Int.PalMailInit();
				// 13.02.07 Ä82 Signatur	11.04.07 Ä87 Signatur erweitert
				// If Email.EmailSendMessage(FALSE,dfEMBetreff, mlEMText || '
				// 
				// Mit freundlichen Grüßen,
				// 
				// ' || strBNName || '
				// tvn-Tierärztliche Verrechnungsstelle Niedersachsen r. V.
				// 
				// Danziger Straße 1
				// 31008 Elze
				// Telefon (0 50 68) 93 07-' || strBNTel || '
				// Telefax (0 50 68) 93 07-80
				// E-mail ' || strBNEMail || '
				// Web www.moveta.de
				// 
				// Kreissparkasse Hildesheim
				// BLZ 259 501 30
				// Konto 7006 573',dfSEMail,'','','',0,0)
				// Call SalMessageBox('Die E-Mail ist in den Postausgang
				// von Outlook gelegt worden.
				// 
				// Um die E-Mail zu versenden, muß Outlook geöffnet sein.', 'Ok',MB_Ok)
				this.lsBody = this.mlEMText.Text + @"

Mit freundlichen Grüßen,

" + Var.strBNName + @"
moveta r.V.k.V.

Danziger Straße 1
31008 Elze
Telefon (0 50 68) 93 07-" + Var.strBNTel + @"
Telefax (0 50 68) 93 07-80
E-mail " + Var.strBNEMail + @"
Web www.moveta.de

Sparkasse Hildesheim · IBAN: DE13 2595 0130 0007 0065 73 · BIC: NOLADE21HIK";
				// 29.07.14 F2003 'noreply@tvn-online.de' -> strBNEmail
				// 30.10.20 Ä1911
				// If 0 = oOutgoingMail.SendMail( MAIL_FORMAT_PLAIN_TEXT, dfEMBetreff, strBNEMail, dfSEMail, STRING_Null, lsBody, STRING_Null,
				// FALSE, MAIL_PRIORITY_NORMAL )
				// Set lsBody = 'E-Mail an ' || dfSEMail || '
				// ' || lsBody
				// 13.05.14 F2027
				// Set dfHalterNr = PalCheckNULL( dfHalterNr )
				// Call SqlImmed( 'INSERT INTO z (zarztnr, zhalternr, zart, zvon, zan, zbemerk,zdatum, zerledigt) VALUES( :frmHalter.dfArztNr, :frmHalter.dfHalterNr, \'BR\', :strBNZei, \'*\', :frmHalter.lsBody, SYSDATE, \'J\')'  )
				// Call SalStatusSetText(hWndForm, 'Die E-Mail ist versandt worden.')
				// Call SalWaitCursor( FALSE )
				if (0 == Int.SendeMail(Const.MAIL_FORMAT_PLAIN_TEXT, this.dfEMBetreff.Text, Var.strBNEMail, this.dfSEMail.Text, this.lsBody, SalString.Null, Const.MAIL_PRIORITY_NORMAL, ref Var.strDummy, "", Var.strBNName))
				{
					this.lsBody = "E-Mail an " + this.dfSEMail.Text + @"
" + this.lsBody;
					// 13.05.14 F2027
					this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

					Int.SqlImmed("INSERT INTO z (zarztnr, zhalternr, zart, zvon, zan, zbemerk,zdatum, zerledigt) VALUES( :frmHalter.dfArztNr, :frmHalter.dfHalterNr, \'BR\', :strBNZei, \'*\', :frmHalter.lsBody, SYSDATE, \'J\')");
					this.SetStatusBarText("Die E-Mail ist versandt worden.");
					Sal.MessageBox("Die E-Mail ist versandt worden.", "Mailversand", Sys.MB_Ok);
					Sal.WaitCursor(false);
				}
				else
				{
					Sal.WaitCursor(false);
					Sal.MessageBox("Die E-Mail konnte nicht versandt werden.", "Fehler", Sys.MB_Ok);
				}
				Int.PalMailClose();
			}
			else
			{
				Sal.MessageBox("Keine gültige E-mail-Adresse (" + this.dfSEMail.Text + ") !.", "Fehler", Sys.MB_Ok);
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeu_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfHalterNr.Clear();
			this.PalNeuerHalter();
			#endregion
		}
		
		/// <summary>
		/// pbEti WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEti_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEti_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEti_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.strPLN = ((SalString)this.cmbLC.Text).Mid(2, 255);
			// 01.11.07 Ä176
			// Call SqlImmed('INSERT INTO ed (eda, edn1,edn2,eds,edo) VALUES( :frmHalter.dfName1, :frmHalter.dfName2, :frmHalter.dfStr, :frmHalter.dfOrt, :strPLN)')
			Var.lsDummy = "";
			if (this.dfTi.Text + this.dfVN.Text + this.dfNN.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfTi.Text + this.dfVN.Text + " " + this.dfNN.Text + @"
";
			}
			if (this.dfName2.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfName2.Text + @"
";
			}
			if (this.dfStr.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfStr.Text + @"
";
			}
			if (this.dfOrt.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfOrt.Text + @"
";
			}
			if (Var.strPLN != "") 
			{
				Var.lsDummy = Var.lsDummy + Var.strPLN + @"
";
			}

			if (Var.bfrmDYMODruck) 
			{
				while (!(App.frmDYMODruck.DestroyWindow())) 
				{
				}
			}
			frmDYMODruck.CreateWindow(this, Var.lsDummy, "");
			#endregion
		}
		
		/// <summary>
		/// pbMandat WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMandat_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbMandat_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMandat_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// LL
			dlgLlDruck.ModalDialog(App.frmMain, "Brief-Mandatsanfrage.crd", "");
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 21.04.08
			if ((this.strPHerkunft == "frmSBM" || this.strPHerkunft.Left(6) == "frmTSK") && this.dfRegNr.Text == "") 
			{
				Sal.MessageBox("Registrierungsnummer fehlt! Bitte korrigieren.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				// Call PalLog('Halter.pbOk 01')
				Var.strPLC = ((SalString)this.cmbLC.Text).Left(2);
				Var.strPLN = ((SalString)this.cmbLC.Text).Mid(2, 255);
				this.strPLC2 = ((SalString)this.cmbSVLC.Text).Left(2);
				if (!(this.cbkeineKorr.Checked))  // 24.08.22
				{

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalString temp1 = this.dfTi.Text;
					Int.PalTrimFeld(ref temp1);
					this.dfTi.Text = temp1;


					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalString temp2 = this.dfVN.Text;
					Int.PalTrimVN(ref temp2);
					this.dfVN.Text = temp2;

					if (this.dfTitel.Text == "") 
					{

						// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
						SalString temp3 = this.dfVN.Text;
						SalString temp4 = this.dfTitel.Text;
						SalString temp5 = this.dfName2.Text;
						Int.PalCheckVN(ref temp3, ref temp4, ref temp5);
						this.dfVN.Text = temp3;
						this.dfTitel.Text = temp4;
						this.dfName2.Text = temp5;

						if (this.dfTitel.Text == "") 
						{
							this.dfTitel.Text = "Herrn/Frau/Firma";
						}
					}

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalString temp6 = this.dfNN.Text;
					Int.PalTrimFeld(ref temp6);
					this.dfNN.Text = temp6;


					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalString temp7 = this.dfName2.Text;
					Int.PalTrimFeld(ref temp7);
					this.dfName2.Text = temp7;


					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalString temp8 = this.dfStr.Text;
					Int.PalTrimOrt(ref temp8);
					this.dfStr.Text = temp8;


					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalString temp9 = this.dfTitel.Text;
					Int.PalTrimVN(ref temp9);
					this.dfTitel.Text = temp9;


					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalString temp10 = this.dfOrt.Text;
					Int.PalTrimOrtUK(ref temp10, Var.strPLC); // 01.02.16 Ä1168
					this.dfOrt.Text = temp10;

					// Call PalLog('Halter.pbOk 02')
					// 27.07.15 Ä1235

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalString temp11 = this.dfSVName1.Text;
					Int.PalTrimFeld(ref temp11);
					this.dfSVName1.Text = temp11;


					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalString temp12 = this.dfSVName2.Text;
					Int.PalTrimFeld(ref temp12);
					this.dfSVName2.Text = temp12;


					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalString temp13 = this.dfSVStr.Text;
					Int.PalTrimOrt(ref temp13);
					this.dfSVStr.Text = temp13;


					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalString temp14 = this.dfSVTitel.Text;
					Int.PalTrimVN(ref temp14);
					this.dfSVTitel.Text = temp14;


					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalString temp15 = this.dfSVOrt.Text;
					Int.PalTrimOrtUK(ref temp15, this.strPLC2); // 01.02.16 Ä1168
					this.dfSVOrt.Text = temp15;

				}
				// 28.07.14 F2085 or SalStrLeftX(cmbLC,2) = 'DE'  -> or SalStrLeftX(cmbLC,2) = strALand
				Int.SqlImmedSel("SELECT aland INTO :frmHalter.strALand FROM a WHERE aarztnr=:frmHalter.dfArztNr");

				if (this.dfArztNr.IsEmpty() || this.dfHalterNr.IsEmpty()) 
				{
					Sal.MessageBox(@"Arzt-Nr. oder
Halter-Nr. fehlt", "Daten unvollständig", (Sys.MB_Ok | Sys.MB_IconExclamation));
					this.dfArztNr.SetFocus();
				}
				else if (this.cbReverse.Checked && (this.cmbLC.Text == "" || ((SalString)this.cmbLC.Text).Left(2) == this.strALand || ((SalString)this.cmbLC.Text).Left(2) == "--"))  // 15.03.10 OTÄ397
				{
					Sal.MessageBox(@"Sie haben 'Unternehmen im Ausland' angehakt, aber kein Ausland angegeben.

Vorgang wird abgebrochen.", "Eingabe fehlt", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
				else if ((this.rbDRX.Checked || this.rbDRZ.Checked) && this.dfDigitalMail.Text == "")  // 27.11.20 Ä1922
				{
					Sal.MessageBox(@"Bitte geben Sie bei ZUGFeRD und X-Rechnung immer die Mail-Adresse des Empfängers an.

Vorgang wird abgebrochen.", "Eingabe fehlt", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
                // Else If (rbDRX or rbDRZ) And dfLeitwegID = ''		! 27.11.20 Ä1922
                // Call SalMessageBox( 'DieLeitweg-ID ist bei ZUGFeRD und X-Rechnung zwingend vorgeschrieben.
                // 
                // Vorgang wird abgebrochen.', 'Eingabe fehlt', MB_Ok|MB_IconExclamation )
                else
                {
					// 18.12.17 Ä1667
					if (this.cbnachMBaufMS7.Checked) 
					{
						this.nNachMBaufMS7 = 1;
					}
					else
					{
						this.nNachMBaufMS7 = 0;
					}
					// 27.11.20 Ä1922 + DigitalRg
					if (this.rbDRNein.Checked) 
					{
						this.strDigitalRg = "";
					}
					else if (this.rbDRZ.Checked) 
					{
						this.strDigitalRg = "ZRG";
					}
					else
					{
						this.strDigitalRg = "XRG";
					}

					Int.SqlImmedSel(@"SELECT anr2, aemail
INTO :frmHalter.nArztNr2, :frmHalter.strAEMail
FROM a WHERE aarztnr=:frmHalter.dfArztNr");
					// Call PalLog('Halter.pbOk 03')
					if (this.nArztNr2 == SalNumber.Null) 
					{
						this.nArztNr2 = 0;
					}
					// 21.10.22 F4923 + Pal
					this.dfVN.Text = Int.PalStringStrip(this.dfVN.Text, ((SalNumber)10).ToCharacter());
					this.dfNN.Text = Int.PalStringStrip(this.dfNN.Text, ((SalNumber)10).ToCharacter());
					this.dfName2.Text = Int.PalStringStrip(this.dfName2.Text, ((SalNumber)10).ToCharacter());
					this.dfStr.Text = Int.PalStringStrip(this.dfStr.Text, ((SalNumber)10).ToCharacter());
					this.dfOrt.Text = Int.PalStringStrip(this.dfOrt.Text, ((SalNumber)10).ToCharacter());

					Int.SqlIstDa(@" FROM h
WHERE harztnr = :frmHalter.dfArztNr AND hhalternr = :frmHalter.dfHalterNr AND hdeaktiv IS NULL", ref this.bOK);
					if (this.bOK) 
					{
						// Call PalLog('Halter.pbOk 04')
						// 03.12.09
						Int.PalGetRecordInArray("HALTER", "WHERE harztnr = :frmHalter.dfArztNr AND hhalternr = :frmHalter.dfHalterNr", "", Var.strLLFeld);

						// 11.01.12 Ä687 + BEZ
						// 16.09.14 Ä1099 + GebDat2
						// 27.07.15 Ä1235 + SV-Adresse
						// 18.12.17 Ä1667 + hnachmbms7
						// 26.11.18 Ä1805 + hbezabzug + hbezabzugtext
						// 12.03.21 Ä1925 / Ä1944 + hepostaenddat
						// 07.08.23 Ä2107 + versicherung
						Int.SqlImmedX(@"UPDATE h
SET hti = :frmHalter.dfTi,
hvn = :frmHalter.dfVN,
hnn = :frmHalter.dfNN,
hname2 = :frmHalter.dfName2,
hstr = :frmHalter.dfStr,
hort = :frmHalter.dfOrt,
hfaelltg = :frmHalter.dfFaellTage,
hmahnint = :frmHalter.dfMahnint,
hbankeinzug = :frmHalter.dfBankEinz,
hskonto = :frmHalter.dfSkonto,
htitel = :frmHalter.dfTitel,
hproz1 = :frmHalter.dfProz1,
hproz2 = :frmHalter.dfProz2,
hproz3 = :frmHalter.dfProz3,
hetikett = :frmHalter.dfEtikett,
hblz = :frmHalter.dfBLZ,
hkonto = :frmHalter.dfKonto,
hiban = :frmHalter.dfIBAN,
hbic = :frmHalter.dfBIC,
hbezblz = :frmHalter.dfBEZBLZ,
hbezkonto = :frmHalter.dfBEZKonto,
hbeziban = :frmHalter.dfBEZIBAN,
hbezbic = :frmHalter.dfBEZBIC,
hbezsigndat = :frmHalter.dfBEZSignDat,
hag = :frmHalter.dfAG,
hmolkerei = :frmHalter.dfMolkerei,
hgebdat = :frmHalter.dfGebdat,
hgebdat2 = :frmHalter.dfGebdat2,
hgebdat2text = :frmHalter.dfGebDat2Text,
hgebdattext = :frmHalter.dfGebDatText,
handerehalter = :frmHalter.dfandereNr,
htelefon = :frmHalter.dfSTel,
htel2 = :frmHalter.dfSTel2,
hfax = :frmHalter.dfSFax,
hhandy = :frmHalter.dfSHandy,
hmemo = :frmHalter.mlHInfo,
hregnr = :frmHalter.dfRegNr,
hemail = :frmHalter.dfSEMail,
hpmemail = :frmHalter.dfeMailPM,
hhalternein = :frmHalter.obHalterNein,
hland = :strPLC,
hsperrdatum = :frmHalter.dfSperreSeit.Value,
hreverse = :frmHalter.cbReverse,
hustid = :frmHalter.dfUStID,
hsvtitel = :frmHalter.dfSVTitel,
hsvname = :frmHalter.dfSVName1,
hsvname2 = :frmHalter.dfSVName2,
hsvstr = :frmHalter.dfSVStr,
hsvort = :frmHalter.dfSVOrt,
hsvland = :frmHalter.strPLC2,
hnachmbms7 = :frmHalter.nNachMBaufMS7,
hbezabzug = :frmHalter.dfBEZAbzugProz,
hbezabzugtext = :frmHalter.dfBEZAbzugText,
hdigitalrg = :frmHalter.strDigitalRg,
hleitwegid = :frmHalter.dfLeitwegID,
hdigitalmail = :frmHalter.dfDigitalMail,
hepostaenddat = :frmHalter.dfEPostAenDat,
hvecode = :frmHalter.cmbVECode,
hvevsnr = :frmHalter.dfVeVSNr
WHERE harztnr = :frmHalter.dfArztNr AND hhalternr = :frmHalter.dfHalterNr");
						// 03.12.09 OTÄ350
						Int.PalGetRecordInArray("HALTER", "WHERE harztnr = :frmHalter.dfArztNr AND hhalternr = :frmHalter.dfHalterNr", "2", Var.strLLFeld);
						Var.lsLog = Int.PalCompareRecordsInArray();
						this.strGrund = "";
						this.strHerkunft = "";
						if (Var.lsLog != "") 
						{
							// 17.09.21 Ä1969 + Herkunft
							// If SalStrScan( lsLog, 'Halter.Vorname' ) != -1 or SalStrScan( lsLog, 'Halter.Nachname' ) != -1 or SalStrScan( lsLog, 'Halter.Namenszeile' ) != -1 or SalStrScan( lsLog, 'Halter.Straße' ) != -1
							// or SalStrScan( lsLog, 'Halter.Ort' ) != -1 or SalStrScan( lsLog, 'Halter.Länd' ) != -1
							// While strGrund = ''
							// Call SalModalDialog(dlgTextHalter, hWndForm, 'Was ist der Grund für die Halterstamm-Änderung ? :', 'frmHalter', 100, strGrund, strHerkunft)
							// Call SqlImmedX('UPDATE h SET haendherkunft = :frmHalter.strHerkunft, haendherkunftdat = SYSDATETIME WHERE harztnr = :frmHalter.dfArztNr AND hhalternr = :frmHalter.dfHalterNr')
							// Set mlAdresse = '***** Halter geändert wg.: ' || strGrund || ' Herkunft: ' || strHerkunft || '
							// 
							// ' || lsLog
							// Else
							while (this.strGrund == "") 
							{
								dlgText.ModalDialog(this, "Was ist der Grund für die Halterstamm-Änderung ? :", "frmHalter", 100, ref this.strGrund);
							}
							this.mlAdresse = "***** Halter geändert wg.: " + this.strGrund + @"

" + Var.lsLog;
							// 13.05.14 F2027
							this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

							Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmHalter.dfArztNr, :frmHalter.dfHalterNr, 0,
:frmHalter.mlAdresse , SYSDATE, NULL, 'J', 'HS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,1, SYSDATETIME)");
							// 03.02.15 Ä1114
							// 12.02.15 Ä1114 Anweisung Sasse:
							// If SqlDatabase = 'TVN1'
							// and (SalStrScan( lsLog, 'Halter.Straße / Hausnummer:' ) != -1
							// or SalStrScan( lsLog, 'Halter.Namenszeile 2:' ) != -1
							// or SalStrScan( lsLog, 'Halter.Ort:' ) != -1
							// or SalStrScan( lsLog, 'Halter.Vorname:' ) != -1
							// or SalStrScan( lsLog, 'Halter.Nachname:' ) != -1 )
							// --->
							// If cbEMailanM
							// 09.03.15 Ä1114 +  and (SalStrScan( lsLog , 'ame' ) != -1 or SalStrScan( lsLog , 'Straße' ) != -1 or SalStrScan( lsLog , 'Ort' ) != -1 or SalStrScan( lsLog , 'Länder' ) != -1)
							if (this.cbEMailanM.Checked && (Var.lsLog.Scan("ame") != -1 || Var.lsLog.Scan("Straße") != -1 || Var.lsLog.Scan("Ort") != -1 || Var.lsLog.Scan("Länder") != -1)) 
							{
								Sal.WaitCursor(true);
								Int.PalMailInit();
								this.lsBody = @"Sehr geehrtes Mitglied,

der Halter " + this.dfVN.Text + " " + this.dfNN.Text + ", " + this.dfOrt.Text + @" wurde von mir soeben geändert. Die geänderten Daten stehen am Ende dieses Textes.
Als Grund für die Änderung wird angegeben: " + this.strGrund + @".

Mit freundlichen Grüßen,

" + Var.strBNName + @"
moveta r.V.k.V.

Danziger Straße 1
31008 Elze
Telefon (0 50 68) 93 07-" + Var.strBNTel + @"
Telefax (0 50 68) 93 07-80
E-mail " + Var.strBNEMail + @"
Web www.moveta.de

" + this.mlAdresse;
								// 09.03.15 Ä1173 +  || SalNumberToStrX( dfArztNr, 0 ) || '/H' || SalNumberToStrX( dfHalterNr, 0 )
								// 30.10.20 Ä1911
								// If 0 = oOutgoingMail.SendMail( MAIL_FORMAT_PLAIN_TEXT, 'Änderung der Daten des Kunden ' || SalNumberToStrX( dfArztNr, 0 ) || '/H' || SalNumberToStrX( dfHalterNr, 0 ) || ' '
								//  || dfVN || ' ' || dfNN, strBNEMail, strAEMail, STRING_Null,
								// lsBody, STRING_Null,
								// FALSE,
								// MAIL_PRIORITY_NORMAL )
								// Set lsBody = 'E-Mail an ' || strAEMail || '
								// ' || lsBody
								// Call SqlImmed( 'INSERT INTO z (zarztnr, zhalternr, zart, zvon, zan, zbemerk,zdatum, zerledigt) VALUES( :frmHalter.dfArztNr, :frmHalter.dfHalterNr, \'BR\', :strBNZei, \'*\', :frmHalter.lsBody, SYSDATE, \'J\')'  )
								// Call SalWaitCursor( FALSE )
								if (0 == Int.SendeMail(Const.MAIL_FORMAT_PLAIN_TEXT, "Änderung der Daten des Kunden " + this.dfArztNr.Number.ToString(0) + "/H" + this.dfHalterNr.Number.ToString(0) + " " + this.dfVN.Text + " " + this.dfNN.Text, Var.strBNEMail, this.strAEMail, this.lsBody, SalString.Null, Const.MAIL_PRIORITY_NORMAL, ref Var.strDummy, "", Var.strBNName))
								{
									this.lsBody = "E-Mail an " + this.strAEMail + @"
" + this.lsBody;
									Int.SqlImmed("INSERT INTO z (zarztnr, zhalternr, zart, zvon, zan, zbemerk,zdatum, zerledigt) VALUES( :frmHalter.dfArztNr, :frmHalter.dfHalterNr, \'BR\', :strBNZei, \'*\', :frmHalter.lsBody, SYSDATE, \'J\')");
									Sal.WaitCursor(false);
								}
								else
								{
									Sal.WaitCursor(false);
									Sal.MessageBox("Die Benachrichtigungs-E-Mail an M konnte nicht versandt werden.", "Fehler: " + Var.strDummy, Sys.MB_Ok);
								}
								Int.PalMailClose();
							}

							if (this.dfSperreSeit.Value != Sys.DATETIME_Null) 
							{
								// 09.03.17
								// If IDYES = SalMessageBox('Soll die Postausgangssperre aufgehoben werden?', 'Postausgang wieder Ok?', MB_YesNo|MB_IconQuestion)
								// Call PalLog('Haltersperre aus : '
								// || PalStrNum(dfArztNr, 4, 0) || '/H' || PalStrNum( dfHalterNr, 5,0))
								// If SqlImmed('UPDATE h SET hsperrdatum = NULL WHERE harztnr IN (:frmHalter.dfArztNr, :frmHalter.nArztNr2) AND hhalternr = :frmHalter.dfHalterNr')
								// Set mlAdresse = '***** Postausgang erlaubt wegen: ' || strGrund
								// Set dfSperreSeit = DATETIME_Null
								// Call SqlImmed('
								// INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
								// VALUES (:strBNZei, \'*\', :frmHalter.dfArztNr, :frmHalter.dfHalterNr, 0,
								// :frmHalter.mlAdresse , SYSDATE, NULL, \'J\', \'HS\', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)')
								this.PalChangeSperre();
							}
							// 20.12.10 OTÄ330
							Int.SqlIstDa("FROM pr WHERE " + Int.PalArztNr("pr", this.dfArztNr.Number, this.nArztNr2) + " AND prhalternr = :frmHalter.dfHalterNr AND (prerledigt=0 OR prerledigt IS NULL)", ref this.bOK);
							if (this.bOK) 
							{
								App.frmMain.strZust = Int.PalZust(this.dfArztNr.Number);
								// Set dtZettelWi = SalDateCurrent(  ) + 30
								// Set mlAdresse = 'Halterstammänderung ' || SalNumberToStrX( dfArztNr, 0 ) || '/H' || SalNumberToStrX( dfHalterNr, 0 )
								Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :frmMain.strZust, :frmHalter.dfArztNr, :frmHalter.dfHalterNr, 0,
:frmHalter.mlAdresse , SYSDATE, NULL, 'N', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
							}

						}

						// 18.11.96 Sasse: Änderungen am Halterstamm sollen sichtbar werden.
						// Call PalLog('Halter.pbOk 05')
						// 29.03.01 nur wenn Anschrift geändert wurde
						// If (dfTi || dfVN || ' ' || dfNN) != strN1a Or dfName2 != strN2a Or dfStr != strSa Or dfOrt != strOa Or cmbLC != strLa
						// Set strKuerzel = SalStrLeftX( frmMain.strUser, 2)
						// Call PalLog('Halter.pbOk 06')
						// Set strGrund = ''
						// While strGrund = ''
						// Call SalModalDialog(dlgText, hWndForm, 'Was ist der Grund für die Halterstamm-Änderung ? :', 'frmHalter', 100, strGrund)
						// Call PalLog('Halter.pbOk 07')
						// Set mlAdresse = '***** HS geändert wg.: ' || strGrund || '
						// ' || dfName1 || '
						// ' || dfName2 || '
						// ' ||  dfStr || '
						// ' ||  dfOrt || '
						// Tel. ' || dfSTel || '
						// Fäll.Tage : ' ||  PalStrNum(dfFaellTage, 3,0) || '
						// Mahnintervall : ' ||  PalStrNum(dfMahnint,3,0) || '
						// Titel : ' ||  dfTitel || '
						// Matchcode : ' ||  dfMC || '
						// Zinsen 1.Mahng.' ||  PalStrNum(dfProz1,5,2) || '
						// Zinsen 2.Mahng.' ||  PalStrNum(dfProz2,5,2) || '
						// Zinsen 3.Mahng.' ||  PalStrNum(dfProz3,5,2) || '
						// BLZ' ||  dfBLZ || '
						// Konto' || dfKonto || '
						// AG' || dfAG || '
						// Molkerei' || dfMolkerei || '
						// Geb.Dat.' || SalDateToStrX(dfGebdat) || '
						// andereHalter ' || dfandereNr
						// Set mlAdresse = '***** HS geändert wg.: ' || strGrund
						// If (dfTi || dfVN || ' ' || dfNN) != strN1a
						// Set mlAdresse = mlAdresse || '
						// ' || strN1a || ' -> ' || dfTi || dfVN || ' ' || dfNN
						// If dfName2 != strN2a
						// Set mlAdresse = mlAdresse || '
						// ' || strN2a || ' -> ' || dfName2
						// If dfStr != strSa
						// Set mlAdresse = mlAdresse || '
						// ' || strSa || ' -> ' || dfStr
						// If dfOrt != strOa
						// Set mlAdresse = mlAdresse || '
						// ' || strOa || ' -> ' || dfOrt
						// If cmbLC != strLa
						// Set mlAdresse = mlAdresse || '
						// ' || strLa || ' -> ' || cmbLC
						// Call PalLog('Halter.pbOk 08')
						// Call SqlImmed('
						// INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige)
						// VALUES (:strBNZei, \'*\', :frmHalter.dfArztNr, :frmHalter.dfHalterNr, 0,
						// :frmHalter.mlAdresse , SYSDATE, NULL, \'J\', \'HS\', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,1)')
						// Call PalLog('Halter.pbOk 09')
						// 12.07.07 Ä112
						// If dfSperreSeit != DATETIME_Null
						// If IDYES = SalMessageBox('Soll die Postausgangssperre aufgehoben werden?', 'Postausgang wieder Ok?', MB_YesNo|MB_IconQuestion)
						// Call PalLog('Haltersperre aus : '
						// || PalStrNum(dfArztNr, 4, 0) || '/H' || PalStrNum( dfHalterNr, 5,0))
						// If SqlImmed('UPDATE h SET hsperrdatum = NULL WHERE harztnr IN (:frmHalter.dfArztNr, :frmHalter.nArztNr2) AND hhalternr = :frmHalter.dfHalterNr')
						// Set mlAdresse = '***** Postausgang erlaubt wegen: ' || strGrund
						// Set dfSperreSeit = DATETIME_Null
						// Call SqlImmed('
						// INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige)
						// VALUES (:strBNZei, \'*\', :frmHalter.dfArztNr, :frmHalter.dfHalterNr, 0,
						// :frmHalter.mlAdresse , SYSDATE, NULL, \'J\', \'HS\', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0)')
					}
					else
					{
						// 08.09.03
						if (this.dfHalterNr.Number >= 100000) 
						{
							Sal.MessageBox(@"Neue Halter-Nr. wäre größer als 99999. Das ist nicht erlaubt.
Halter kann nicht angelegt werden!", "Fehler", (Sys.MB_IconStop | Sys.MB_Ok));
							// Call PalLog('Halter.pbOk 12')
							e.Return = false;
							return;
						}
						else
						{
							// 03.12.09
							Var.nCount = 0;
							while (Var.nCount < 500) 
							{
								Var.nN[Var.nCount] = SalNumber.Null;
								Var.strS[Var.nCount] = "";
								Var.lsS[Var.nCount] = "";
								Var.dtD[Var.nCount] = SalDateTime.Null;
								Var.nCount = Var.nCount + 1;
							}

							// 11.01.12 Ä687 + BEZ
							// 16.09.14 Ä1099 + GebDat2
							// 27.07.15 Ä1235 + SV-Adresse
							// 18.12.17 Ä1667 + hnachmbms7
							// 26.11.18 Ä1805 + hbezabzug + hbezabzugtext
							// 12.03.21 Ä1925 / Ä1944 + hepostaenddat
							// 07.08.23 Ä2107 + versicherung
							Int.SqlImmedX(@"INSERT INTO h
(harztnr, hhalternr, hti, hvn, hnn, hname2, hstr, hort, hfaelltg, hmahnint, hbankeinzug,
hskonto, htitel, hproz1, hproz2, hproz3, hetikett, hcredoneg,
hblz, hkonto, hbezblz, hbezkonto, hag, hmolkerei, hgebdat, hgebdat2, hgebdat2text, hgebdattext, handerehalter, htelefon, htel2, hfax, hhandy,
hmemo, hhalternein, hregnr, hemail, hpmemail, hland, hsperrdatum, hreverse, hustid, hiban, hbeziban, hbezbic, hbezsigndat, hbic,
hsvtitel, hsvname, hsvname2, hsvstr, hsvort, hsvland,
hnachmbms7, hbezabzug, hbezabzugtext, hdigitalrg, hleitwegid, hdigitalmail,
hepostaenddat, hvecode, hvevsnr )
VALUES (:frmHalter.dfArztNr, :frmHalter.dfHalterNr, :frmHalter.dfTi, :frmHalter.dfVN, :frmHalter.dfNN, :frmHalter.dfName2,
:frmHalter.dfStr, :frmHalter.dfOrt, :frmHalter.dfFaellTage, :frmHalter.dfMahnint,
:frmHalter.dfBankEinz, :frmHalter.dfSkonto, :frmHalter.dfTitel,
:frmHalter.dfProz1, :frmHalter.dfProz2, :frmHalter.dfProz3, :frmHalter.dfEtikett, :frmHalter.nCredoneg,
:frmHalter.dfBLZ, :frmHalter.dfKonto, :frmHalter.dfBEZBLZ, :frmHalter.dfBEZKonto, :frmHalter.dfAG, :frmHalter.dfMolkerei,
:frmHalter.dfGebdat, :frmHalter.dfGebdat2, :frmHalter.dfGebDat2Text, :frmHalter.dfGebDatText, :frmHalter.dfandereNr, :frmHalter.dfSTel, :frmHalter.dfSTel2, :frmHalter.dfSFax, :frmHalter.dfSHandy,
:frmHalter.mlHInfo, :frmHalter.obHalterNein, :frmHalter.dfRegNr, :frmHalter.dfSEMail, :frmHalter.dfeMailPM, :strPLC, :frmHalter.dfSperreSeit.Value,
:frmHalter.cbReverse, :frmHalter.dfUStID, :frmHalter.dfIBAN, :frmHalter.dfBEZIBAN, :frmHalter.dfBEZBIC, :frmHalter.dfBEZSignDat, :frmHalter.dfBIC,
:frmHalter.dfSVTitel, :frmHalter.dfSVName1, :frmHalter.dfSVName2, :frmHalter.dfSVStr, :frmHalter.dfSVOrt, :frmHalter.strPLC2,
:frmHalter.nNachMBaufMS7, :frmHalter.dfBEZAbzugProz, :frmHalter.dfBEZAbzugText, :frmHalter.strDigitalRg, :frmHalter.dfLeitwegID, :frmHalter.dfDigitalMail,
:frmHalter.dfEPostAenDat, :frmHalter.cmbVECode, :frmHalter.dfVeVSNr)");
							// 03.12.09 OTÄ350
							Int.PalGetRecordInArray("HALTER", "WHERE harztnr = :frmHalter.dfArztNr AND hhalternr = :frmHalter.dfHalterNr", "2", Var.strLLFeld);
							Var.lsLog = Int.PalCompareRecordsInArray();
							if (Var.lsLog != "") 
							{
								this.mlAdresse = @"***** neuer Halter

" + Var.lsLog;
								// 13.05.14 F2027
								this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

								Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmHalter.dfArztNr, :frmHalter.dfHalterNr, 0,
:frmHalter.mlAdresse , SYSDATE, NULL, 'J', 'HS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,1, SYSDATETIME)");
							}
							// Call PalLog('Halter.pbOk 13')
						}
					}
					if (this.nArztNr2 != 0) 
					{
						// 21.10.22 F4923 + Pal
						this.dfVN.Text = Int.PalStringStrip(this.dfVN.Text, ((SalNumber)10).ToCharacter());
						this.dfNN.Text = Int.PalStringStrip(this.dfNN.Text, ((SalNumber)10).ToCharacter());
						this.dfName2.Text = Int.PalStringStrip(this.dfName2.Text, ((SalNumber)10).ToCharacter());
						this.dfStr.Text = Int.PalStringStrip(this.dfStr.Text, ((SalNumber)10).ToCharacter());
						this.dfOrt.Text = Int.PalStringStrip(this.dfOrt.Text, ((SalNumber)10).ToCharacter());

						Int.SqlIstDa(@" FROM h
WHERE harztnr = :frmHalter.nArztNr2 AND hhalternr = :frmHalter.dfHalterNr AND hdeaktiv IS NULL", ref this.bOK);
						if (this.bOK) 
						{
							// Call PalLog('Halter.pbOk 10')
							// 11.01.12 Ä687 + BEZ
							// 16.09.14 Ä1099 + GebDat2
							// 26.11.18 Ä1805 + hbezabzug + hbezabzugtext
							// 12.03.21 Ä1925 / Ä1944 + hepostaenddat
							Int.SqlImmedX(@"UPDATE h
SET hti = :frmHalter.dfTi,
hvn = :frmHalter.dfVN,
hnn = :frmHalter.dfNN,
hname2 = :frmHalter.dfName2,
hstr = :frmHalter.dfStr,
hort = :frmHalter.dfOrt,
hfaelltg = :frmHalter.dfFaellTage,
hmahnint = :frmHalter.dfMahnint,
hbankeinzug = :frmHalter.dfBankEinz,
hskonto = :frmHalter.dfSkonto,
htitel = :frmHalter.dfTitel,
hproz1 = :frmHalter.dfProz1,
hproz2 = :frmHalter.dfProz2,
hproz3 = :frmHalter.dfProz3,
hetikett = :frmHalter.dfEtikett,
hblz = :frmHalter.dfBLZ,
hkonto = :frmHalter.dfKonto,
hiban = :frmHalter.dfIBAN,
hbic = :frmHalter.dfBIC,
hbezblz = :frmHalter.dfBEZBLZ,
hbezkonto = :frmHalter.dfBEZKonto,
hbeziban = :frmHalter.dfBEZIBAN,
hbezbic = :frmHalter.dfBEZBIC,
hbezsigndat = :frmHalter.dfBEZSignDat,
hag = :frmHalter.dfAG,
hmolkerei = :frmHalter.dfMolkerei,
hgebdat = :frmHalter.dfGebdat,
hgebdat2 = :frmHalter.dfGebdat2,
hgebdat2text = :frmHalter.dfGebDat2Text,
hgebdattext = :frmHalter.dfGebDatText,
handerehalter = :frmHalter.dfandereNr,
htelefon = :frmHalter.dfSTel,
htel2 = :frmHalter.dfSTel2,
hfax = :frmHalter.dfSFax,
hhandy = :frmHalter.dfSHandy,
hmemo = :frmHalter.mlHInfo,
hregnr = :frmHalter.dfRegNr,
hemail = :frmHalter.dfSEMail,
hpmemail = :frmHalter.dfeMailPM,
hhalternein = :frmHalter.obHalterNein,
hland = :strPLC,
hsperrdatum = :frmHalter.dfSperreSeit.Value,
hreverse = :frmHalter.cbReverse,
hustid = :frmHalter.dfUStID,
hsvtitel = :frmHalter.dfSVTitel,
hsvname = :frmHalter.dfSVName1,
hsvname2 = :frmHalter.dfSVName2,
hsvstr = :frmHalter.dfSVStr,
hsvort = :frmHalter.dfSVOrt,
hsvland = :frmHalter.strPLC2,
hnachmbms7 = :frmHalter.nNachMBaufMS7,
hbezabzug = :frmHalter.dfBEZAbzugProz,
hbezabzugtext = :frmHalter.dfBEZAbzugText,
hdigitalrg = :frmHalter.strDigitalRg,
hleitwegid = :frmHalter.dfLeitwegID,
hdigitalmail = :frmHalter.dfDigitalMail,
hepostaenddat = :frmHalter.dfEPostAenDat,
hvecode = :frmHalter.cmbVECode,
hvevsnr = :frmHalter.dfVeVSNr
WHERE harztnr = :frmHalter.nArztNr2 AND hhalternr = :frmHalter.dfHalterNr");
							// 17.09.21 Ä1969 + Herkunft
							if (this.strHerkunft != "") 
							{
								Int.SqlImmedX("UPDATE h SET haendherkunft = :frmHalter.strHerkunft, haendherkunftdat = SYSDATETIME WHERE harztnr = :frmHalter.nArztNr2 AND hhalternr = :frmHalter.dfHalterNr");
							}

							// Call PalLog('Halter.pbOk 11')
						}
						else
						{
							// 11.01.12 Ä687 + BEZ
							// 16.09.14 Ä1099
							// 26.11.18 Ä1805 + hbezabzug + hbezabzugtext
							// 12.03.21 Ä1925 / Ä1944 + hepostaenddat
							// 07.08.23 Ä2107 + versicherung
							Int.SqlImmedX(@"INSERT INTO h
(harztnr, hhalternr, hti, hvn, hnn, hname2, hstr, hort, hfaelltg, hmahnint, hbankeinzug,
hskonto, htitel, hproz1, hproz2, hproz3, hetikett, hcredoneg,
hblz, hkonto, hbezblz, hbezkonto, hag, hmolkerei, hgebdat, hgebdat2, hgebdat2text, hgebdattext, handerehalter, htelefon, htel2, hfax, hhandy,
hmemo, hhalternein, hregnr, hemail, hpmemail, hland, hsperrdatum, hreverse, hustid, hiban, hbeziban, hbezbic, hbezsigndat, hbic,
hsvtitel, hsvname, hsvname2, hsvstr, hsvort, hsvland,
hnachmbms7, hbezabzug, hbezabzugtext, hdigitalrg, hleitwegid, hdigitalmail,
hepostaenddat, hvecode, hvevsnr)
VALUES (:frmHalter.nArztNr2, :frmHalter.dfHalterNr, :frmHalter.dfTi, :frmHalter.dfVN, :frmHalter.dfNN, :frmHalter.dfName2,
:frmHalter.dfStr, :frmHalter.dfOrt, :frmHalter.dfFaellTage, :frmHalter.dfMahnint,
:frmHalter.dfBankEinz, :frmHalter.dfSkonto, :frmHalter.dfTitel,
:frmHalter.dfProz1, :frmHalter.dfProz2, :frmHalter.dfProz3, :frmHalter.dfEtikett, :frmHalter.nCredoneg,
:frmHalter.dfBLZ, :frmHalter.dfKonto, :frmHalter.dfBEZBLZ, :frmHalter.dfBEZKonto, :frmHalter.dfAG, :frmHalter.dfMolkerei,
:frmHalter.dfGebdat, :frmHalter.dfGebdat2, :frmHalter.dfGebDat2Text, :frmHalter.dfGebDatText, :frmHalter.dfandereNr, :frmHalter.dfSTel, :frmHalter.dfSTel2, :frmHalter.dfSFax,
:frmHalter.dfSHandy,
:frmHalter.mlHInfo, :frmHalter.obHalterNein, :frmHalter.dfRegNr, :frmHalter.dfSEMail, :frmHalter.dfeMailPM, :strPLC, :frmHalter.dfSperreSeit.Value,
:frmHalter.cbReverse, :frmHalter.dfUStID, :frmHalter.dfIBAN, :frmHalter.dfBEZIBAN, :frmHalter.dfBEZBIC, :frmHalter.dfBEZSignDat, :frmHalter.dfBIC,
:frmHalter.dfSVTitel, :frmHalter.dfSVName1, :frmHalter.dfSVName2, :frmHalter.dfSVStr, :frmHalter.dfSVOrt, :frmHalter.strPLC2,
:frmHalter.nNachMBaufMS7, :frmHalter.dfBEZAbzugProz, :frmHalter.dfBEZAbzugText, :frmHalter.strDigitalRg, :frmHalter.dfLeitwegID, :frmHalter.dfDigitalMail,
:frmHalter.dfEPostAenDat, :frmHalter.cmbVECode, :frmHalter.dfVeVSNr )");
							// Call PalLog('Halter.pbOk 14')
						}
					}
					// 05.08.09 OTÄ298
					this.nHauptNr = 0;
					this.nHauptNrAlt = 0;
					Int.SqlConnection(ref this.hSqlPI);
					Int.SqlHandleExec(this.hSqlPI, @"SELECT pihauptnr, pinebennr
FROM pi
INTO :frmHalter.nHauptNr, :frmHalter.nNebenNr
WHERE pihauptnr in ( " + this.nArztNr.ToString(0) + ", " + this.nArztNr2.ToString(0) + @")
OR pinebennr in ( " + this.nArztNr.ToString(0) + ", " + this.nArztNr2.ToString(0) + ")", "Fehler Holen PackInfo", ref Var.nErr);
					this.nFetchPI = this.hSqlPI.FetchNext();
					while (this.nFetchPI != Sys.FETCH_EOF) 
					{
						if (this.nHauptNr != this.nHauptNrAlt) 
						{
							if (this.dfArztNr.Number != this.nHauptNr && this.nArztNr2 != this.nHauptNr) 
							{
								Int.SqlIstDa(@" FROM h
WHERE harztnr = :frmHalter.nHauptNr AND hhalternr = :frmHalter.dfHalterNr AND hdeaktiv IS NULL", ref this.bOK);
								if (this.bOK) 
								{
									// 11.01.12 Ä687 + BEZ
									// 26.11.18 Ä1805 + hbezabzug + hbezabzugtext
									// 12.03.21 Ä1925 / Ä1944 + hepostaenddat
									// 21.10.22 F4923 + Pal
									this.dfVN.Text = Int.PalStringStrip(this.dfVN.Text, ((SalNumber)10).ToCharacter());
									this.dfNN.Text = Int.PalStringStrip(this.dfNN.Text, ((SalNumber)10).ToCharacter());
									this.dfName2.Text = Int.PalStringStrip(this.dfName2.Text, ((SalNumber)10).ToCharacter());
									this.dfStr.Text = Int.PalStringStrip(this.dfStr.Text, ((SalNumber)10).ToCharacter());
									this.dfOrt.Text = Int.PalStringStrip(this.dfOrt.Text, ((SalNumber)10).ToCharacter());

									Int.SqlImmedX(@"UPDATE h
SET hti = :frmHalter.dfTi,
hvn = :frmHalter.dfVN,
hnn = :frmHalter.dfNN,
hname2 = :frmHalter.dfName2,
hstr = :frmHalter.dfStr,
hort = :frmHalter.dfOrt,
hfaelltg = :frmHalter.dfFaellTage,
hmahnint = :frmHalter.dfMahnint,
hbankeinzug = :frmHalter.dfBankEinz,
hskonto = :frmHalter.dfSkonto,
htitel = :frmHalter.dfTitel,
hproz1 = :frmHalter.dfProz1,
hproz2 = :frmHalter.dfProz2,
hproz3 = :frmHalter.dfProz3,
hetikett = :frmHalter.dfEtikett,
hblz = :frmHalter.dfBLZ,
hkonto = :frmHalter.dfKonto,
hiban = :frmHalter.dfIBAN,
hbic = :frmHalter.dfBIC,
hbezblz = :frmHalter.dfBEZBLZ,
hbezkonto = :frmHalter.dfBEZKonto,
hbeziban = :frmHalter.dfBEZIBAN,
hbezbic = :frmHalter.dfBEZBIC,
hbezsigndat = :frmHalter.dfBEZSignDat,
hag = :frmHalter.dfAG,
hmolkerei = :frmHalter.dfMolkerei,
hgebdat = :frmHalter.dfGebdat,
hgebdat2 = :frmHalter.dfGebdat2,
hgebdat2text = :frmHalter.dfGebDat2Text,
hgebdattext = :frmHalter.dfGebDatText,
handerehalter = :frmHalter.dfandereNr,
htelefon = :frmHalter.dfSTel,
htel2 = :frmHalter.dfSTel2,
hfax = :frmHalter.dfSFax,
hhandy = :frmHalter.dfSHandy,
hmemo = :frmHalter.mlHInfo,
hregnr = :frmHalter.dfRegNr,
hemail = :frmHalter.dfSEMail,
hpmemail = :frmHalter.dfeMailPM,
hhalternein = :frmHalter.obHalterNein,
hland = :strPLC,
hsperrdatum = :frmHalter.dfSperreSeit.Value,
hreverse = :frmHalter.cbReverse,
hustid = :frmHalter.dfUStID,
hsvtitel = :frmHalter.dfSVTitel,
hsvname = :frmHalter.dfSVName1,
hsvname2 = :frmHalter.dfSVName2,
hsvstr = :frmHalter.dfSVStr,
hsvort = :frmHalter.dfSVOrt,
hsvland = :frmHalter.strPLC2,
hnachmbms7 = :frmHalter.nNachMBaufMS7,
hbezabzug = :frmHalter.dfBEZAbzugProz,
hbezabzugtext = :frmHalter.dfBEZAbzugText,
hdigitalrg = :frmHalter.strDigitalRg,
hleitwegid = :frmHalter.dfLeitwegID,
hdigitalmail = :frmHalter.dfDigitalMail,
hepostaenddat = :frmHalter.dfEPostAenDat,
hvecode = :frmHalter.cmbVECode,
hvevsnr = :frmHalter.dfVeVSNr
WHERE harztnr = :frmHalter.nHauptNr AND hhalternr = :frmHalter.dfHalterNr");
									// 17.09.21 Ä1969 + Herkunft
									if (this.strHerkunft != "") 
									{
										Int.SqlImmedX("UPDATE h SET haendherkunft = :frmHalter.strHerkunft, haendherkunftdat = SYSDATETIME WHERE harztnr = :frmHalter.nHauptNr AND hhalternr = :frmHalter.dfHalterNr");
									}

								}
								else
								{
									// 11.01.12 Ä687 + BEZ
									// 26.11.18 Ä1805 + hbezabzug + hbezabzugtext
									// 12.03.21 Ä1925 / Ä1944 + hepostaenddat
									// 07.08.23 Ä2107 + versicherung
									Int.SqlImmedX(@"INSERT INTO h
(harztnr, hhalternr, hti, hvn, hnn, hname2, hstr, hort, hfaelltg, hmahnint, hbankeinzug,
hskonto, htitel, hproz1, hproz2, hproz3, hetikett, hcredoneg,
hblz, hkonto, hbezblz, hbezkonto, hag, hmolkerei, hgebdat, hgebdat2, hgebdat2text, hgebdattext, handerehalter, htelefon, htel2, hfax, hhandy,
hmemo, hhalternein, hregnr, hemail, hpmemail, hland, hsperrdatum, hreverse, hustid, hiban, hbeziban, hbezbic, hbezsigndat, hbic,
hsvtitel, hsvname, hsvname2, hsvstr, hsvort, hsvland,
hnachmbms7, hbezabzug, hbezabzugtext, hdigitalrg, hleitwegid, hdigitalmail,
hepostaenddat, hvecode, hvevsnr)
VALUES (:frmHalter.nHauptNr, :frmHalter.dfHalterNr, :frmHalter.dfTi, :frmHalter.dfVN, :frmHalter.dfNN, :frmHalter.dfName2,
:frmHalter.dfStr, :frmHalter.dfOrt, :frmHalter.dfFaellTage, :frmHalter.dfMahnint,
:frmHalter.dfBankEinz, :frmHalter.dfSkonto, :frmHalter.dfTitel,
:frmHalter.dfProz1, :frmHalter.dfProz2, :frmHalter.dfProz3, :frmHalter.dfEtikett, :frmHalter.nCredoneg,
:frmHalter.dfBLZ, :frmHalter.dfKonto, :frmHalter.dfBEZBLZ, :frmHalter.dfBEZKonto, :frmHalter.dfAG, :frmHalter.dfMolkerei,
:frmHalter.dfGebdat, :frmHalter.dfGebdat2, :frmHalter.dfGebDat2Text, :frmHalter.dfGebDatText, :frmHalter.dfandereNr, :frmHalter.dfSTel, :frmHalter.dfSTel2, :frmHalter.dfSFax, :frmHalter.dfSHandy,
:frmHalter.mlHInfo, :frmHalter.obHalterNein, :frmHalter.dfRegNr, :frmHalter.dfSEMail, :frmHalter.dfeMailPM, :strPLC, :frmHalter.dfSperreSeit.Value,
:frmHalter.cbReverse, :frmHalter.dfUStID, :frmHalter.dfIBAN, :frmHalter.dfBEZIBAN, :frmHalter.dfBEZBIC, :frmHalter.dfBEZSignDat, :frmHalter.dfBIC,
:frmHalter.dfSVTitel, :frmHalter.dfSVName1, :frmHalter.dfSVName2, :frmHalter.dfSVStr, :frmHalter.dfSVOrt, :frmHalter.strPLC2,
:frmHalter.nNachMBaufMS7, :frmHalter.dfBEZAbzugProz, :frmHalter.dfBEZAbzugText, :frmHalter.strDigitalRg, :frmHalter.dfLeitwegID, :frmHalter.dfDigitalMail,
:frmHalter.dfEPostAenDat, :frmHalter.cmbVECode, :frmHalter.dfVeVSNr )");
								}
							}
							this.nHauptNrAlt = this.nHauptNr;
						}
						if (this.dfArztNr.Number == this.nNebenNr || this.nArztNr2 == this.nNebenNr) 
						{
						}
						else
						{
							Int.SqlIstDa(@" FROM h
WHERE harztnr = :frmHalter.nNebenNr AND hhalternr = :frmHalter.dfHalterNr AND hdeaktiv IS NULL", ref this.bOK);
							if (this.bOK) 
							{
								// 11.01.12 Ä687 + BEZ
								// 26.11.18 Ä1805 + hbezabzug + hbezabzugtext
								// 12.03.21 Ä1925 / Ä1944 + hepostaenddat
								// 21.10.22 F4923 + Pal
								this.dfVN.Text = Int.PalStringStrip(this.dfVN.Text, ((SalNumber)10).ToCharacter());
								this.dfNN.Text = Int.PalStringStrip(this.dfNN.Text, ((SalNumber)10).ToCharacter());
								this.dfName2.Text = Int.PalStringStrip(this.dfName2.Text, ((SalNumber)10).ToCharacter());
								this.dfStr.Text = Int.PalStringStrip(this.dfStr.Text, ((SalNumber)10).ToCharacter());
								this.dfOrt.Text = Int.PalStringStrip(this.dfOrt.Text, ((SalNumber)10).ToCharacter());

								Int.SqlImmedX(@"UPDATE h
SET hti = :frmHalter.dfTi,
hvn = :frmHalter.dfVN,
hnn = :frmHalter.dfNN,
hname2 = :frmHalter.dfName2,
hstr = :frmHalter.dfStr,
hort = :frmHalter.dfOrt,
hfaelltg = :frmHalter.dfFaellTage,
hmahnint = :frmHalter.dfMahnint,
hbankeinzug = :frmHalter.dfBankEinz,
hskonto = :frmHalter.dfSkonto,
htitel = :frmHalter.dfTitel,
hproz1 = :frmHalter.dfProz1,
hproz2 = :frmHalter.dfProz2,
hproz3 = :frmHalter.dfProz3,
hetikett = :frmHalter.dfEtikett,
hblz = :frmHalter.dfBLZ,
hkonto = :frmHalter.dfKonto,
hiban = :frmHalter.dfIBAN,
hbic = :frmHalter.dfBIC,
hbezblz = :frmHalter.dfBEZBLZ,
hbezkonto = :frmHalter.dfBEZKonto,
hbeziban = :frmHalter.dfBEZIBAN,
hbezbic = :frmHalter.dfBEZBIC,
hbezsigndat = :frmHalter.dfBEZSignDat,
hag = :frmHalter.dfAG,
hmolkerei = :frmHalter.dfMolkerei,
hgebdat = :frmHalter.dfGebdat,
hgebdat2 = :frmHalter.dfGebdat2,
hgebdat2text = :frmHalter.dfGebDat2Text,
hgebdattext = :frmHalter.dfGebDatText,
handerehalter = :frmHalter.dfandereNr,
htelefon = :frmHalter.dfSTel,
htel2 = :frmHalter.dfSTel2,
hfax = :frmHalter.dfSFax,
hhandy = :frmHalter.dfSHandy,
hmemo = :frmHalter.mlHInfo,
hregnr = :frmHalter.dfRegNr,
hemail = :frmHalter.dfSEMail,
hpmemail = :frmHalter.dfeMailPM,
hhalternein = :frmHalter.obHalterNein,
hland = :strPLC,
hsperrdatum = :frmHalter.dfSperreSeit.Value,
hreverse = :frmHalter.cbReverse,
hustid = :frmHalter.dfUStID,
hsvtitel = :frmHalter.dfSVTitel,
hsvname = :frmHalter.dfSVName1,
hsvname2 = :frmHalter.dfSVName2,
hsvstr = :frmHalter.dfSVStr,
hsvort = :frmHalter.dfSVOrt,
hsvland = :frmHalter.strPLC2,
hnachmbms7 = :frmHalter.nNachMBaufMS7,
hbezabzug = :frmHalter.dfBEZAbzugProz,
hbezabzugtext = :frmHalter.dfBEZAbzugText,
hdigitalrg = :frmHalter.strDigitalRg,
hleitwegid = :frmHalter.dfLeitwegID,
hdigitalmail = :frmHalter.dfDigitalMail,
hepostaenddat =  :frmHalter.dfEPostAenDat,
hvecode = :frmHalter.cmbVECode,
hvevsnr = :frmHalter.dfVeVSNr
WHERE harztnr = :frmHalter.nNebenNr AND hhalternr = :frmHalter.dfHalterNr");
								// 17.09.21 Ä1969 + Herkunft
								if (this.strHerkunft != "") 
								{
									Int.SqlImmedX("UPDATE h SET haendherkunft = :frmHalter.strHerkunft, haendherkunftdat = SYSDATETIME WHERE harztnr = :frmHalter.nNebenNr AND hhalternr = :frmHalter.dfHalterNr");
								}

							}
							else
							{
								// 11.01.12 Ä687 + BEZ
								// 26.11.18 Ä1805 + hbezabzug + hbezabzugtext
								// 12.03.21 Ä1925 / Ä1944 + hepostaenddat
								// 07.08.23 Ä2107 + versicherung
								Int.SqlImmedX(@"INSERT INTO h
(harztnr, hhalternr, hti, hvn, hnn, hname2, hstr, hort, hfaelltg, hmahnint, hbankeinzug,
hskonto, htitel, hproz1, hproz2, hproz3, hetikett, hcredoneg,
hblz, hkonto, hbezblz, hbezkonto, hag, hmolkerei, hgebdat, hgebdat2, hgebdat2text, hgebdattext, handerehalter, htelefon, htel2, hfax, hhandy,
hmemo, hhalternein, hregnr, hemail, hpmemail, hland, hsperrdatum, hreverse, hustid, hiban, hbeziban, hbezbic, hbezsigndat, hbic,
hsvtitel, hsvname, hsvname2, hsvstr, hsvort, hsvland,
hnachmbms7, hbezabzug, hbezabzugtext, hdigitalrg, hleitwegid, hdigitalmail,
hepostaenddat, hvecode, hvevsnr)
VALUES (:frmHalter.nNebenNr, :frmHalter.dfHalterNr, :frmHalter.dfTi, :frmHalter.dfVN, :frmHalter.dfNN, :frmHalter.dfName2,
:frmHalter.dfStr, :frmHalter.dfOrt, :frmHalter.dfFaellTage, :frmHalter.dfMahnint,
:frmHalter.dfBankEinz, :frmHalter.dfSkonto, :frmHalter.dfTitel,
:frmHalter.dfProz1, :frmHalter.dfProz2, :frmHalter.dfProz3, :frmHalter.dfEtikett, :frmHalter.nCredoneg,
:frmHalter.dfBLZ, :frmHalter.dfKonto, :frmHalter.dfBEZBLZ, :frmHalter.dfBEZKonto,  :frmHalter.dfAG, :frmHalter.dfMolkerei,
:frmHalter.dfGebdat, :frmHalter.dfGebdat2, :frmHalter.dfGebDat2Text, :frmHalter.dfGebDatText, :frmHalter.dfandereNr, :frmHalter.dfSTel, :frmHalter.dfSTel2, :frmHalter.dfSFax, :frmHalter.dfSHandy,
:frmHalter.mlHInfo, :frmHalter.obHalterNein, :frmHalter.dfRegNr, :frmHalter.dfSEMail, :frmHalter.dfeMailPM, :strPLC, :frmHalter.dfSperreSeit.Value,
:frmHalter.cbReverse, :frmHalter.dfUStID, :frmHalter.dfIBAN, :frmHalter.dfBEZIBAN, :frmHalter.dfBEZBIC, :frmHalter.dfBEZSignDat, :frmHalter.dfBIC,
:frmHalter.dfSVTitel, :frmHalter.dfSVName1, :frmHalter.dfSVName2, :frmHalter.dfSVStr, :frmHalter.dfSVOrt, :frmHalter.strPLC2,
:frmHalter.nNachMBaufMS7, :frmHalter.dfBEZAbzugProz, :frmHalter.dfBEZAbzugText, :frmHalter.strDigitalRg, :frmHalter.dfLeitwegID, :frmHalter.dfDigitalMail,
:frmHalter.dfEPostAenDat, :frmHalter.cmbVECode, :frmHalter.dfVeVSNr )");
							}
						}
						this.nFetchPI = this.hSqlPI.FetchNext();
					}
					this.hSqlPI.Commit();
					this.hSqlPI.Disconnect();
					// Call PalLog('Halter.pbOk 15')
					if (this.strPHerkunft == "frmManLE") 
					{
						this.DestroyWindow();
					}
					else if (this.strPHerkunft == "frmMycoLE") 
					{
						this.DestroyWindow();
					}
					else if (this.strPHerkunft == "frmSBM" || this.strPHerkunft.Left(6) == "frmTSK") 
					{
						this.DestroyWindow();
					}
					else if (this.strPHerkunft == "frmRechPos") 
					{
						App.frmRechPos.dfNBArztNr.Number = this.dfArztNr.Number;
						App.frmRechPos.dfNBHalterNr.Number = this.dfHalterNr.Number;
						Sal.PostMsg(App.frmRechPos.dfNBArztNr, Sys.SAM_Validate, 0, 0);
						Sal.PostMsg(App.frmRechPos.dfNBHalterNr, Sys.SAM_Validate, 0, 0);
						this.DestroyWindow();
					}
					else if (this.strPHerkunft == "frmRechPos2") 
					{
						App.frmRechPos.dfNB2ArztNr.Number = this.dfArztNr.Number;
						App.frmRechPos.dfNB2HalterNr.Number = this.dfHalterNr.Number;
						Sal.PostMsg(App.frmRechPos.dfNB2ArztNr, Sys.SAM_Validate, 0, 0);
						Sal.PostMsg(App.frmRechPos.dfNB2HalterNr, Sys.SAM_Validate, 0, 0);
						this.DestroyWindow();
					}
					else
					{
						Sal.MessageBeep(0);
						// Call PalLog('Halter.pbOk 16')
						this.PalLoescheMaske();
						// Call PalLog('Halter.pbOk 17')
						this.dfArztNr.SetFocus();
						// Call PalLog('Halter.pbOk 18')
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbLoesch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoesch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoesch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoesch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.IsEmpty() || this.dfHalterNr.IsEmpty()) 
			{
				Sal.MessageBox("ArztNr. / HalterNr. fehlt", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				Int.SqlIstDa(@" FROM rk
WHERE rkarztnr = :frmHalter.dfArztNr AND rkhalternr = :frmHalter.dfHalterNr AND rkdeaktiv IS NULL", ref this.bOK);
				if (this.bOK) 
				{
					Sal.MessageBox(@"Halter darf nicht gelöscht werden !
Es sind noch Rechnungen vorhanden", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
				else
				{
					Int.SqlIstDa(@" FROM h
WHERE harztnr = :frmHalter.dfArztNr AND hhalternr = :frmHalter.dfHalterNr AND hdeaktiv IS NULL", ref this.bOK);
					if (this.bOK) 
					{
						Int.SqlImmedX(@"DELETE FROM h
WHERE harztnr = :frmHalter.dfArztNr AND hhalternr = :frmHalter.dfHalterNr");
					}
					this.PalLoescheMaske();
				}
			}
			this.dfArztNr.SetFocus();
			#endregion
		}
		
		/// <summary>
		/// cbZettel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZettel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbZettel_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZettel_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmZettel.CreateWindow(this, "frmHalter", this.dfArztNr.Number, this.dfHalterNr.Number, 0);
			this.PalPruefeZettel();
			#endregion
		}
		
		/// <summary>
		/// cbEL WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbEL_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbEL_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbEL_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmEL.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number, 0);
			this.PalPruefeEL();
			#endregion
		}
		
		/// <summary>
		/// pbEMNeu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMNeu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEMNeu_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbEMNeu_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMNeu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.mlEMText.Text = "";
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMNeu_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbEMNeu, "eingegebenen Text löschen");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbEMOeffne WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMOeffne_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEMOeffne_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbEMOeffne_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMOeffne_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.FileGetCurrentDirectory(ref this.strAktPfad);
			Sal.FileSetCurrentDirectory("K:");
			this.strDateiPfad = "K:";
			if (this.PalDateiWahl()) 
			{
				this.hDisk.Open(this.strDateiPfad, (Sys.OF_Read | Sys.OF_Text));
				this.mlEMText.Text = this.hDisk.Read(32000);
				this.hDisk.Close();
			}
			Sal.FileSetCurrentDirectory(this.strAktPfad);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMOeffne_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbEMOeffne, "bereits gespeicherten Text laden");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbEMSpeich WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMSpeich_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEMSpeich_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbEMSpeich_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMSpeich_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.FileGetCurrentDirectory(ref this.strAktPfad);
			Sal.FileSetCurrentDirectory("K:");
			if (this.PalDateiSpeich()) 
			{
				if (this.hDisk.Open(this.strDateiPfad, Sys.OF_Create)) 
				{
					this.hDisk.Close();
					if (this.hDisk.Open(this.strDateiPfad, Sys.OF_Write)) 
					{
						this.nBytes = this.hDisk.Write(this.mlEMText.Text, 32757);
						if (this.nBytes >= 0) 
						{
							this.hDisk.Close();
						}
					}
					else
					{
						Sal.MessageBox("Die Datei " + this.strDateiPfad + " kann nicht gespeichert werden !", "Fehler", Sys.MB_Ok);
					}
				}
				else
				{
					Sal.MessageBox("Die Datei " + this.strDateiPfad + " kann nicht erstellt werden !", "Fehler", Sys.MB_Ok);
				}
			}
			Sal.FileSetCurrentDirectory(this.strAktPfad);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMSpeich_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbEMSpeich, "Text unter einem Namen speichern");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbSperre WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSperre_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSperre_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSperre_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.strGrund = "";
			this.PalChangeSperre();

			// Call SalPostMsg(pbOK, SAM_Click, 0, 0)
			#endregion
		}
		
		/// <summary>
		/// dfBEZBLZ WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBEZBLZ_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfBEZBLZ_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBEZBLZ_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (((SalString)this.cmbLC.Text).Left(2) == "DE" || this.cmbLC.Text == "") 
			{
				this.dfBEZIBAN.Text = Int.PalIBAN(((SalString)this.cmbLC.Text).Left(2), this.dfBEZBLZ.Text, this.dfBEZKonto.Text);
				this.dfBEZBIC.Text = Int.PalGetBIC(this.dfBEZBLZ.Text);
			}
			#endregion
		}
		
		/// <summary>
		/// dfBEZKonto WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBEZKonto_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfBEZKonto_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBEZKonto_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (((SalString)this.cmbLC.Text).Left(2) == "DE" || this.cmbLC.Text == "") 
			{
				this.dfBEZIBAN.Text = Int.PalIBAN(((SalString)this.cmbLC.Text).Left(2), this.dfBEZBLZ.Text, this.dfBEZKonto.Text);
			}
			#endregion
		}
		
		/// <summary>
		/// dfBEZIBAN WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBEZIBAN_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfBEZIBAN_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBEZIBAN_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfBEZIBAN.Text != "") 
			{
				if (((SalString)this.dfBEZIBAN.Text).Scan(" ") > -1)  // 26.03.15 F2159
				{
					this.dfBEZIBAN.Text = Int.PalStringStrip(this.dfBEZIBAN.Text, " ");
				}
				if (Int.PalIBANPruef(this.dfBEZIBAN.Text)) 
				{
					e.Return = true;
					return;
				}
				else
				{
					Sal.MessageBox("Die eingegebene IBAN ist ungültig!", "Fehlerhafte Eingabe", Sys.MB_Ok);
					e.Return = false;
					return;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfBEZBIC WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBEZBIC_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfBEZBIC_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBEZBIC_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfBEZBIC.Text != "") 
			{
				if (((SalString)this.dfBEZBIC.Text).Scan(" ") > -1)  // 16.11.15 F1275
				{
					this.dfBEZBIC.Text = Int.PalStringStrip(this.dfBEZBIC.Text, " ");
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfUStID WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfUStID_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfUStID_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfUStID_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Int.PalValNum(((SalString)this.dfUStID.Text).Left(2)) > 0) 
			{
				Sal.MessageBox("Dies ist keine gültige Umsatzsteuer.-ID.", "USt.-ID ungültig", (Sys.MB_Ok | Sys.MB_IconExclamation));
				e.Return = false;
				return;
			}
			#endregion
		}
		
		/// <summary>
		/// mlZBemerk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void mlZBemerk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.mlZBemerk_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void mlZBemerk_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalTblPopulate( tblHZettel,hSqlAbrPosi,
			// 'SELECT zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
			// INTO :frmAbrBearb.tblHZettel.colsVon, :frmAbrBearb.tblHZettel.colsAn,
			// :frmAbrBearb.tblHZettel.colnRechNr, :frmAbrBearb.tblHZettel.collsBemerk,
			// :frmAbrBearb.tblHZettel.coldtDatum, :frmAbrBearb.tblHZettel.colsErl
			// WHERE zarztnr = :frmAbrBearb.tblAbrHalter.colnArztNr  AND zhalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr
			// AND zart=\'RA\' ORDER BY zdatum DESC',TBL_FillAll )
			// 13.05.14 F2027
			this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

			Int.SqlImmed("INSERT INTO z (zarztnr, zhalternr, zart, zvon, zan, zbemerk,zdatum, zerledigt) VALUES( :frmHalter.dfArztNr, :frmHalter.dfHalterNr, \'RA\', :strBNZei, \'*\', :frmHalter.mlZBemerk, SYSDATE, \'J\')");
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// pbCopy WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbCopy_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbCopy_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbCopy_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfSVTitel.Text = this.dfTi.Text;
			this.dfSVName1.Text = "";
			if (this.dfVN.Text != "") 
			{
				this.dfSVName1.Text = this.dfSVName1.Text + this.dfVN.Text + " ";
			}
			this.dfSVName1.Text = this.dfSVName1.Text + this.dfNN.Text;
			this.dfSVName2.Text = this.dfName2.Text;
			this.dfSVStr.Text = this.dfStr.Text;
			this.dfSVOrt.Text = this.dfOrt.Text;
			this.cmbSVLC.Text = this.cmbLC.Text;
			// Set dfKATitel = dfTitel
			// Set dfKAName1 = dfName1
			// Set dfKAName2 = dfName2
			// Set dfKAStr = dfStr
			// Set dfKAOrt = dfOrt
			#endregion
		}
		
		/// <summary>
		/// pbEtiSV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEtiSV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEtiSV_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEtiSV_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 01.11.07 Ä176
			Var.lsDummy = "";
			if (this.dfSVTitel.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfSVTitel.Text + @"
";
			}
			if (this.dfSVName1.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfSVName1.Text + @"
";
			}
			if (this.dfSVName2.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfSVName2.Text + @"
";
			}
			if (this.dfSVStr.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfSVStr.Text + @"
";
			}
			if (this.dfSVOrt.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfSVOrt.Text + @"
";
			}
			if (this.cmbSVLC.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.cmbSVLC.Text + @"
";
			}

			if (Var.bfrmDYMODruck) 
			{
				while (!(App.frmDYMODruck.DestroyWindow())) 
				{
				}
			}
			frmDYMODruck.CreateWindow(this, Var.lsDummy, "");
			#endregion
		}
		
		/// <summary>
		/// pbSVLoe WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSVLoe_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSVLoe_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbSVLoe_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSVLoe_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfSVTitel.Text = Sys.STRING_Null;
			this.dfSVName1.Text = Sys.STRING_Null;
			this.dfSVName2.Text = Sys.STRING_Null;
			this.dfSVStr.Text = Sys.STRING_Null;
			this.dfSVOrt.Text = Sys.STRING_Null;
			this.cmbSVLC.Text = Sys.STRING_Null;
			Sal.MessageBox("Bitte klicken Sie bitte noch auf Speichern, wenn Sie mit Ihren Änderungen fertig sind.", "Achtung", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSVLoe_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbSVLoe, "Schriftverkehr-Adresse löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// dfeMailPM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfeMailPM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfeMailPM_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfeMailPM_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 12.03.21 Ä1925 / Ä1944
			// If dfeMailPM = ''
			// If IDYES = SalMessageBox( 'Soll die Mailadresse für jeglichen Dokumentenversand über E-Post gelöscht werden?
			// 
			// Bitte nach der Antwort auf Speichern klicken!', 'Löschen ?', MB_YesNo|MB_IconQuestion )
			// Set dfEPostAenDat = SalDateCurrent(  )
			// Call PalLogTyp( PalStrNum0( dfArztNr, 4, 0 ) || '/H' || PalStrNum0( dfHalterNr, 5, 0 ) || ': bei Moveta gelöscht', 1 )
			// Call PalPopulateEPost( PalStrNum0( dfArztNr, 4, 0 ) || '/H' || PalStrNum0( dfHalterNr, 5, 0 ) || '%' )
			// Else
			// Call SqlImmedSel( 'SELECT hpmemail, hepostaenddat
			// INTO :frmHalter.dfeMailPM, :frmHalter.dfEPostAenDat
			// FROM h
			// WHERE harztnr = :frmHalter.dfArztNr AND hhalternr = :frmHalter.dfHalterNr' )
			// Return FALSE
			e.Return = this.PalSpeichereEPost();
			return;
			// Else
			// If IDYES = SalMessageBox( 'Soll die Mailadresse ' || dfeMailPM || ' für
			// jeglichen Dokumentenversand über E-Post verwendet werden?
			// 
			// Bitte nach der Antwort auf Speichern klicken!', 'Ok?', MB_YesNo|MB_IconQuestion )
			// Set dfEPostAenDat = SalDateCurrent(  )
			// Call PalLogTyp( PalStrNum0( dfArztNr, 4, 0 ) || '/H' || PalStrNum0( dfHalterNr, 5, 0 ) || ': bei Moveta geändert: ' || dfeMailPM, 1 )
			// Call PalPopulateEPost( PalStrNum0( dfArztNr, 4, 0 ) || '/H' || PalStrNum0( dfHalterNr, 5, 0 ) || '%' )
			// Else
			// Call SqlImmedSel( 'SELECT hpmemail, hepostaenddat
			// INTO :frmHalter.dfeMailPM, :frmHalter.dfEPostAenDat
			// FROM h
			// WHERE harztnr = :frmHalter.dfArztNr AND hhalternr = :frmHalter.dfHalterNr' )
			// Return FALSE
			#endregion
		}
		
		/// <summary>
		/// pbEPostSpeihern WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEPostSpeihern_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEPostSpeihern_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEPostSpeihern_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 12.03.21 Ä1925 / Ä1944
			e.Return = this.PalSpeichereEPost();
			return;
			#endregion
		}
		
		/// <summary>
		/// tblEPostLog WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblEPostLog_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblEPostLog_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblEPostLog_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblEPostLog, 0xffdfdf);
			#endregion
		}
		
		/// <summary>
		/// pbRefresh WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRefresh_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRefresh_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbRefresh_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRefresh_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 12.03.21 Ä1925 / Ä1944
			this.PalPopulateEPost(Int.PalStrNum0(this.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum0(this.dfHalterNr.Number, 5, 0) + "%");
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRefresh_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbRefresh, "Liste aktualisieren");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.DestroyWindow();
			#endregion
		}
		#endregion
		
		#region tblHZettel
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblHZettelTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmHalter _frmHalter = null;
			
			
			#region Window Variables
			public SalBoolean bPFarbe = false;
			#endregion
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblHZettelTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmHalter frmHalter
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmHalter == null) 
					{
						_frmHalter = (frmHalter)this.FindForm();
					}
					return _frmHalter;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblHZettelTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblHZettelTableWindow)SalWindow.FromHandle(handle, typeof(tblHZettelTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblEPostLog
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblEPostLogTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmHalter _frmHalter = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblEPostLogTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmHalter frmHalter
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmHalter == null) 
					{
						_frmHalter = (frmHalter)this.FindForm();
					}
					return _frmHalter;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblEPostLogTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblEPostLogTableWindow)SalWindow.FromHandle(handle, typeof(tblEPostLogTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalPopulateEPostLocals
			{
				public SalString strLike = "";
			}
		}
		#endregion
	}
}
