// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// Liste zum Ã¤ndern von Halter-Nr. und Match
	/// </summary>
	/// <param name="strParent"></param>
	public partial class frmAbrHalter : SalFormWindow
	{
		#region Window Parameters
		public SalString strParent;
		#endregion
		
		#region Window Variables
		public SalSqlHandle hSqlAbrBearb = SalSqlHandle.Null;
		public SalSqlHandle hSqlUpdBearb = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalNumber nArztNr2 = 0;
		public SalWindowHandle hWndColumn = SalWindowHandle.Null;
		public SalNumber nHalterAlt = 0;
		public SalString strKuerzel = "";
		public SalString mlExpress = "";
		public SalString strPLand = "";
		public SalNumber nPRechNr = 0;
		public SalString strVeCode = "";
		public SalString strVeVSNr = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmAbrHalter(SalString strParent)
		{
			// Assign global reference.
			App.frmAbrHalter = this;
			// Window Parameters initialization.
			this.strParent = strParent;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmAbrHalter CreateWindow(Control owner, SalString strParent)
		{
			frmAbrHalter frm = new frmAbrHalter(strParent);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmAbrHalter FromHandle(SalWindowHandle handle)
		{
			return ((frmAbrHalter)SalWindow.FromHandle(handle, typeof(frmAbrHalter)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmAbrHalter WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAbrHalter_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmAbrHalter_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmAbrHalter_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAbrHalter_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			App.frmMain.SetStatusBarText("Datei OK");
			this.strSelect = @"SELECT learztnr,lehalternr, NULL,lenn, levn, leti,lestr,leort,
lebearbeiter,lebearbdatum,leposnr,ROWID
INTO :frmAbrHalter.tblAbrHalter.colnArztNr,:frmAbrHalter.tblAbrHalter.colnHalterNr,:frmAbrHalter.tblAbrHalter.colnMatch,
:frmAbrHalter.tblAbrHalter.colsNN, :frmAbrHalter.tblAbrHalter.colsVN, :frmAbrHalter.tblAbrHalter.colsTi,
:frmAbrHalter.tblAbrHalter.colsStr,:frmAbrHalter.tblAbrHalter.colsOrt
:frmAbrHalter.tblAbrHalter.colsBearbeiter,:frmAbrHalter.tblAbrHalter.coldtBearbDatum,:frmAbrHalter.tblAbrHalter.colnPosNr,:frmAbrHalter.tblAbrHalter.colsROWID
FROM le
WHERE learztnr=:frmDiskAbr.nArztNr
AND le.lebearbeiter=:frmDiskAbr.strBearbeiter
AND le.lebearbdatum=:frmDiskAbr.dtBearbDatum
ORDER BY leposnr";
			Int.SqlConnection(ref this.hSqlAbrBearb);
			Int.SqlConnection(ref this.hSqlUpdBearb);
			this.tblAbrHalter.Populate(this.hSqlAbrBearb, this.strSelect, Sys.TBL_FillAll);
			this.tblAbrHalter.SetFocusCell(0, this.tblAbrHalter.colnArztNr, 0, -1);
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAbrHalter_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblAbrHalter.KillCellEdit();
			this.hSqlAbrBearb.Disconnect();
			this.hSqlUpdBearb.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// tblAbrHalter WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAbrHalter_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_FetchRowDone:
					this.tblAbrHalter_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblAbrHalter_OnSAM_RowHeaderClick(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAbrHalter_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;

			// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
			SalString temp1 = this.tblAbrHalter.colsOrt.Text;
			this.strPLand = Int.PalGetLand(ref temp1);
			this.tblAbrHalter.colsOrt.Text = temp1;

			this.tblAbrHalter.colsLand.Text = this.strPLand;
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAbrHalter_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			tblHalter.CreateWindow(this.tblAbrHalter, "frmAbrHalter", this.tblAbrHalter.colnArztNr.Number, 0, this.tblAbrHalter.colsNN.Text, this.tblAbrHalter.colsVN.Text, "", this.tblAbrHalter.colsStr.Text, this.tblAbrHalter.colsOrt.Text);
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblAbrHalter
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblAbrHalterTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmAbrHalter _frmAbrHalter = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblAbrHalterTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmAbrHalter frmAbrHalter
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmAbrHalter == null) 
					{
						_frmAbrHalter = (frmAbrHalter)this.FindForm();
					}
					return _frmAbrHalter;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblAbrHalterTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblAbrHalterTableWindow)SalWindow.FromHandle(handle, typeof(tblAbrHalterTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colnHalterNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_SetFocus:
						this.colnHalterNr_OnSAM_SetFocus(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_SetFocus event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnHalterNr_OnSAM_SetFocus(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmAbrHalter.nHalterAlt = this.colnHalterNr.Number;
				#endregion
			}
			
			/// <summary>
			/// colnMatch WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnMatch_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colnMatch_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnMatch_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				// 07.08.23 Ã2107 Versicherung
				this.frmAbrHalter.strVeCode = "";
				this.frmAbrHalter.strVeVSNr = "";
				Int.SqlImmedSel("SELECT hvecode, hvevsnr INTO :frmAbrHalter.strVeCode, :frmAbrHalter.strVeVSNr FROM h WHERE " + Int.PalArztNr("h", this.colnArztNr.Number, this.frmAbrHalter.nArztNr2) + @"
AND hhalternr = :frmAbrHalter.tblAbrHalter.colnMatch");
				// kein verÃ¤ndern/LÃ¶schen nach Rechnungsdruck		11.05.06 lt. H.Sasse nach Gespr. mit H.Plate rausnehmen
				// Call SqlImmedSel('SELECT lerechnr INTO :frmAbrHalter.nPRechNr FROM le
				// WHERE LEARZTNR = :frmAbrHalter.tblAbrHalter.colnArztNr
				// AND LEHALTERNR = :frmAbrHalter.tblAbrHalter.colnHalterNr
				// AND LEPOSNR = :frmAbrHalter.tblAbrHalter.colnPosNr
				// AND LEBEARBEITER = :frmAbrHalter.tblAbrHalter.colsBearbeiter
				// AND LEBEARBDATUM = :frmAbrHalter.tblAbrHalter.coldtBearbDatum')
				// If nPRechNr != 0 And nPRechNr != NUMBER_Null
				// Call SalMessageBox('Ãnderung nicht erlaubt, da bereits abgerechnet (R ' || SalNumberToStrX(nPRechNr,0) || ')', 'Fehler', MB_Ok|MB_IconStop)
				// Else
				// ----------------------------------------------UPDATEN-------------------------------------------------------------------------------
				Int.SqlImmedSel(@"SELECT ANR2 INTO :frmAbrHalter.nArztNr2
FROM A WHERE AARZTNR = :frmAbrHalter.tblAbrHalter.colnArztNr");
				// 07.08.23 Ã2107 Versicherung
				Int.SqlImmedX(@"
UPDATE LE SET
LEHALTERNR = :frmAbrHalter.tblAbrHalter.colnMatch,
LEVECODE = :frmAbrHalter.strVeCode,
LEVEVSNR = :frmAbrHalter.strVeVSNr
WHERE LEARZTNR = :frmAbrHalter.tblAbrHalter.colnArztNr
AND LEHALTERNR = :frmAbrHalter.tblAbrHalter.colnHalterNr
AND LEPOSNR = :frmAbrHalter.tblAbrHalter.colnPosNr
AND LEBEARBEITER = :frmAbrHalter.tblAbrHalter.colsBearbeiter
AND LEBEARBDATUM = :frmAbrHalter.tblAbrHalter.coldtBearbDatum ");
				Int.SqlImmedX(@"
UPDATE LEP SET 	LEPHALTERNR = :frmAbrHalter.tblAbrHalter.colnMatch
WHERE LEPARZTNR = :frmAbrHalter.tblAbrHalter.colnArztNr
AND LEPHALTERNR = :frmAbrHalter.tblAbrHalter.colnHalterNr
AND LEPPOSNR = :frmAbrHalter.tblAbrHalter.colnPosNr
AND LEPBEARBEITER = :frmAbrHalter.tblAbrHalter.colsBearbeiter
AND LEBEARBDATUM = :frmAbrHalter.tblAbrHalter.coldtBearbDatum");
				if (this.frmAbrHalter.nArztNr2 != 0) 
				{
					Int.SqlImmedX(@"
UPDATE LE SET 	LEHALTERNR = :frmAbrHalter.tblAbrHalter.colnMatch,
LEVECODE = :frmAbrHalter.strVeCode,
LEVEVSNR = :frmAbrHalter.strVeVSNr
WHERE LEARZTNR = :frmAbrHalter.nArztNr2
AND LEHALTERNR = :frmAbrHalter.tblAbrHalter.colnHalterNr
AND LEPOSNR = :frmAbrHalter.tblAbrHalter.colnPosNr
AND LEBEARBEITER = :frmAbrHalter.tblAbrHalter.colsBearbeiter
AND LEBEARBDATUM = :frmAbrHalter.tblAbrHalter.coldtBearbDatum ");
					Int.SqlImmedX(@"
UPDATE LEP SET 	LEPHALTERNR = :frmAbrHalter.tblAbrHalter.colnMatch
WHERE LEPARZTNR = :frmAbrHalter.nArztNr2
AND LEPHALTERNR = :frmAbrHalter.tblAbrHalter.colnHalterNr
AND LEPPOSNR = :frmAbrHalter.tblAbrHalter.colnPosNr
AND LEPBEARBEITER = :frmAbrHalter.tblAbrHalter.colsBearbeiter
AND LEBEARBDATUM = :frmAbrHalter.tblAbrHalter.coldtBearbDatum");
				}
				Int.SqlImmedX("COMMIT");
				// 21.08.06 DATEV #44
				Int.PalLog("AbrHalter: HalterNr." + this.colnHalterNr.Number.ToString(0) + " > " + this.colnMatch.Number.ToString(0));
				// 11.04.16 F2667
				this.colnHalterNr.Number = this.colnMatch.Number;

				Sal.MessageBeep(0);
				// Call SalTblQueryFocus( frmAbrHalter.tblAbrHalter, nRow, hWndColumn )
				// Call SalTblPopulate( frmAbrHalter.tblAbrHalter,hSqlAbrBearb,strSelect,TBL_FillAll )
				// Call SalTblSetFocusCell( frmAbrHalter.tblAbrHalter, nRow, hWndColumn, 0, -1 )
				#endregion
			}
			#endregion
		}
		#endregion
	}
}
