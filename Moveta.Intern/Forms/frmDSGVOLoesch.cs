// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmDSGVOLoesch : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlS1 = SalSqlHandle.Null;
		public SalSqlHandle hSqlS2 = SalSqlHandle.Null;
		public SalSqlHandle hSqlS3 = SalSqlHandle.Null;
		public SalSqlHandle hSqlS4 = SalSqlHandle.Null;
		public SalSqlHandle hSqlU1 = SalSqlHandle.Null;
		public SalNumber nA = 0;
		public SalNumber nH = 0;
		public SalNumber nR = 0;
		public SalNumber nFetch = 0;
		public SalNumber nFetch2 = 0;
		public SalNumber nRow = 0;
		public SalDateTime dtDat = SalDateTime.Null;
		public SalNumber nIstDa = 0;
		public SalString strSelect2 = "";
		public MTblPrintParams PrintParams = new MTblPrintParams();
		public SalString strDevice = "";
		public SalNumber nResult = 0;
		public SalNumber nAnz = 0;
		public SalNumber nOff = 0;
		public SalArray<SalString> strPrinters = new SalArray<SalString>();
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmDSGVOLoesch()
		{
			// Assign global reference.
			App.frmDSGVOLoesch = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmDSGVOLoesch CreateWindow(Control owner)
		{
			frmDSGVOLoesch frm = new frmDSGVOLoesch();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmDSGVOLoesch FromHandle(SalWindowHandle handle)
		{
			return ((frmDSGVOLoesch)SalWindow.FromHandle(handle, typeof(frmDSGVOLoesch)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfAvon.Number == Sys.NUMBER_Null || this.dfAbis.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Bitte geben Sie für die Mitglieder einen Bereich von/bis ein.", "Fehlende Auswahl", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				Int.SqlConnection(ref this.hSqlS1);
				Int.SqlConnection(ref this.hSqlS2);
				Int.SqlConnection(ref this.hSqlS3);
				Int.SqlConnection(ref this.hSqlS4);
				Int.SqlConnection(ref this.hSqlU1);
				if (this.dfAvon.Number == this.dfAbis.Number) 
				{
					this.strSelect2 = "= :frmDSGVOLoesch.dfAvon";
				}
				else
				{
					this.strSelect2 = "BETWEEN :frmDSGVOLoesch.dfAvon AND :frmDSGVOLoesch.dfAbis";
				}
				// einzelne Rechnungen
				Int.SqlPrepar(this.hSqlS1, @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat INTO :frmDSGVOLoesch.nA, :frmDSGVOLoesch.nH, :frmDSGVOLoesch.nR, :frmDSGVOLoesch.dtDat
FROM rk WHERE rkarztnr " + this.strSelect2 + " AND rkkzzahl>=2 AND rkrechdat < @YEARBEG( SYSDATE - 10 YEARS ) AND rkdeaktiv IS NULL");
				this.hSqlS1.Execute();
				this.nFetch = this.hSqlS1.FetchNext();
				while (this.nFetch != Sys.FETCH_EOF) 
				{
					Int.SqlImmed("UPDATE rk SET rkdeaktiv=1 WHERE rkarztnr = :frmDSGVOLoesch.nA AND rkhalternr = :frmDSGVOLoesch.nH AND rkrechnr = :frmDSGVOLoesch.nR");
					this.nRow = this.tblErgebnis.InsertRow(Sys.TBL_MaxRow);
					this.tblErgebnis.colArzt.Number = this.nA;
					this.tblErgebnis.colHalter.Number = this.nH;
					this.tblErgebnis.colRechnung.Number = this.nR;
					this.tblErgebnis.colTabelle.Text = "RECHKO";
					this.tblErgebnis.colText.Text = "Rechnung vom " + Int.PalDateToStrDE(this.dtDat);
					// Z
					this.nIstDa = 0;
					// If nA = 480 and nH = 190
					// Call SalMessageBeep( 0 )
					Int.SqlPrepar(this.hSqlS2, @"SELECT COUNT(*) INTO :frmDSGVOLoesch.nIstDa FROM z WHERE zarztnr = :frmDSGVOLoesch.nA AND zhalternr = :frmDSGVOLoesch.nH AND zrechnr = :frmDSGVOLoesch.nR
AND zdeaktiv IS NULL");
					this.hSqlS2.Execute();
					this.nFetch2 = this.hSqlS2.FetchNext();
					if (this.nIstDa > 1) 
					{
						Int.SqlImmed("UPDATE z SET zdeaktiv=1 WHERE zarztnr = :frmDSGVOLoesch.nA AND zhalternr = :frmDSGVOLoesch.nH AND zrechnr = :frmDSGVOLoesch.nR");
						this.nRow = this.tblErgebnis.InsertRow(Sys.TBL_MaxRow);
						this.tblErgebnis.colArzt.Number = this.nA;
						this.tblErgebnis.colHalter.Number = this.nH;
						this.tblErgebnis.colRechnung.Number = this.nR;
						this.tblErgebnis.colTabelle.Text = "ZETTEL";
						this.tblErgebnis.colText.Text = this.nIstDa.ToString(0) + " Zettel";
					}
					// AK
					this.nIstDa = 0;
					// If nA = 480 and nH = 190
					// Call SalMessageBeep( 0 )
					Int.SqlPrepar(this.hSqlS2, @"SELECT COUNT(*) INTO :frmDSGVOLoesch.nIstDa FROM ak WHERE akarztnr = :frmDSGVOLoesch.nA AND akhalternr = :frmDSGVOLoesch.nH AND akrechnr = :frmDSGVOLoesch.nR
AND akdeaktiv IS NULL");
					this.hSqlS2.Execute();
					this.nFetch2 = this.hSqlS2.FetchNext();
					if (this.nIstDa > 1) 
					{
						Int.SqlImmed("UPDATE ak SET akdeaktiv=1 WHERE akarztnr = :frmDSGVOLoesch.nA AND akhalternr = :frmDSGVOLoesch.nH AND akrechnr = :frmDSGVOLoesch.nR");
						this.nRow = this.tblErgebnis.InsertRow(Sys.TBL_MaxRow);
						this.tblErgebnis.colArzt.Number = this.nA;
						this.tblErgebnis.colHalter.Number = this.nH;
						this.tblErgebnis.colRechnung.Number = this.nR;
						this.tblErgebnis.colTabelle.Text = "TAGEBUCH";
						this.tblErgebnis.colText.Text = this.nIstDa.ToString(0) + " Einträge";
					}
					this.nFetch = this.hSqlS1.FetchNext();
				}
				// Halter
				Int.SqlPrepar(this.hSqlS1, @"SELECT harztnr, hhalternr INTO :frmDSGVOLoesch.nA, :frmDSGVOLoesch.nH
FROM h
WHERE harztnr " + this.strSelect2 + @" AND harztnr*1000000+hhalternr NOT IN
(SELECT DISTINCT rkarztnr*1000000+rkhalternr FROM rk WHERE rkarztnr " + this.strSelect2 + @" AND rkdeaktiv IS NULL)
AND hdeaktiv IS NULL");
				this.hSqlS1.Execute();
				this.nFetch = this.hSqlS1.FetchNext();
				while (this.nFetch != Sys.FETCH_EOF) 
				{
					Int.SqlImmed("UPDATE h SET hdeaktiv=1 WHERE harztnr = :frmDSGVOLoesch.nA AND hhalternr = :frmDSGVOLoesch.nH");
					this.nRow = this.tblErgebnis.InsertRow(Sys.TBL_MaxRow);
					this.tblErgebnis.colArzt.Number = this.nA;
					this.tblErgebnis.colHalter.Number = this.nH;
					this.tblErgebnis.colTabelle.Text = "HALTER";
					this.tblErgebnis.colText.Text = "Halter";
					// Z
					this.nIstDa = 0;
					// If nA = 480 and nH = 190
					// Call SalMessageBeep( 0 )
					Int.SqlPrepar(this.hSqlS2, "SELECT COUNT(*) INTO :frmDSGVOLoesch.nIstDa FROM z WHERE zarztnr = :frmDSGVOLoesch.nA AND zhalternr = :frmDSGVOLoesch.nH AND zdeaktiv IS NULL");
					this.hSqlS2.Execute();
					this.nFetch2 = this.hSqlS2.FetchNext();
					if (this.nIstDa > 1) 
					{
						Int.SqlImmed("UPDATE z SET zdeaktiv=1 WHERE zarztnr = :frmDSGVOLoesch.nA AND zhalternr = :frmDSGVOLoesch.nH");
						this.nRow = this.tblErgebnis.InsertRow(Sys.TBL_MaxRow);
						this.tblErgebnis.colArzt.Number = this.nA;
						this.tblErgebnis.colHalter.Number = this.nH;
						this.tblErgebnis.colTabelle.Text = "ZETTEL";
						this.tblErgebnis.colText.Text = this.nIstDa.ToString(0) + " Zettel ohne Rechnung";
					}
					// AK
					this.nIstDa = 0;
					// If nA = 480 and nH = 190
					// Call SalMessageBeep( 0 )
					Int.SqlPrepar(this.hSqlS2, "SELECT COUNT(*) INTO :frmDSGVOLoesch.nIstDa FROM ak WHERE akarztnr = :frmDSGVOLoesch.nA AND akhalternr = :frmDSGVOLoesch.nH AND akdeaktiv IS NULL");
					this.hSqlS2.Execute();
					this.nFetch2 = this.hSqlS2.FetchNext();
					if (this.nIstDa > 1) 
					{
						Int.SqlImmed("UPDATE ak SET akdeaktiv=1 WHERE akarztnr = :frmDSGVOLoesch.nA AND akhalternr = :frmDSGVOLoesch.nH");
						this.nRow = this.tblErgebnis.InsertRow(Sys.TBL_MaxRow);
						this.tblErgebnis.colArzt.Number = this.nA;
						this.tblErgebnis.colHalter.Number = this.nH;
						this.tblErgebnis.colTabelle.Text = "TAGEBUCH";
						this.tblErgebnis.colText.Text = this.nIstDa.ToString(0) + " Einträge";
					}
					// RZ
					this.nIstDa = 0;
					// If nA = 480 and nH = 190
					// Call SalMessageBeep( 0 )
					Int.SqlPrepar(this.hSqlS2, "SELECT COUNT(*) INTO :frmDSGVOLoesch.nIstDa FROM rz WHERE rzarztnr = :frmDSGVOLoesch.nA AND rzhalternr = :frmDSGVOLoesch.nH AND rzdeaktiv IS NULL");
					this.hSqlS2.Execute();
					this.nFetch2 = this.hSqlS2.FetchNext();
					if (this.nIstDa > 1) 
					{
						Int.SqlImmed("UPDATE rz SET rzdeaktiv=1 WHERE rzarztnr = :frmDSGVOLoesch.nA AND rzhalternr = :frmDSGVOLoesch.nH");
						this.nRow = this.tblErgebnis.InsertRow(Sys.TBL_MaxRow);
						this.tblErgebnis.colArzt.Number = this.nA;
						this.tblErgebnis.colHalter.Number = this.nH;
						this.tblErgebnis.colTabelle.Text = "RATENZAHLER";
						this.tblErgebnis.colText.Text = this.nIstDa.ToString(0) + " Einträge";
					}
					// ZA
					this.nIstDa = 0;
					// If nA = 480 and nH = 190
					// Call SalMessageBeep( 0 )
					Int.SqlPrepar(this.hSqlS2, "SELECT COUNT(*) INTO :frmDSGVOLoesch.nIstDa FROM za WHERE zaarztnr = :frmDSGVOLoesch.nA AND zahalternr = :frmDSGVOLoesch.nH AND zadeaktiv IS NULL");
					this.hSqlS2.Execute();
					this.nFetch2 = this.hSqlS2.FetchNext();
					if (this.nIstDa > 1) 
					{
						Int.SqlImmed("UPDATE za SET zadeaktiv=1 WHERE zaarztnr = :frmDSGVOLoesch.nA AND zahalternr = :frmDSGVOLoesch.nH");
						this.nRow = this.tblErgebnis.InsertRow(Sys.TBL_MaxRow);
						this.tblErgebnis.colArzt.Number = this.nA;
						this.tblErgebnis.colHalter.Number = this.nH;
						this.tblErgebnis.colTabelle.Text = "ZAHLUNGEN";
						this.tblErgebnis.colText.Text = this.nIstDa.ToString(0) + " Zahlungen";
					}
					// MD
					this.nIstDa = 0;
					// If nA = 480 and nH = 190
					// Call SalMessageBeep( 0 )
					Int.SqlPrepar(this.hSqlS2, "SELECT COUNT(*) INTO :frmDSGVOLoesch.nIstDa FROM md WHERE mdarztnr = :frmDSGVOLoesch.nA AND mdhalternr = :frmDSGVOLoesch.nH AND mddeaktiv IS NULL");
					this.hSqlS2.Execute();
					this.nFetch2 = this.hSqlS2.FetchNext();
					if (this.nIstDa > 1) 
					{
						Int.SqlImmed("UPDATE md SET mddeaktiv=1 WHERE mdarztnr = :frmDSGVOLoesch.nA AND mdhalternr = :frmDSGVOLoesch.nH");
						this.nRow = this.tblErgebnis.InsertRow(Sys.TBL_MaxRow);
						this.tblErgebnis.colArzt.Number = this.nA;
						this.tblErgebnis.colHalter.Number = this.nH;
						this.tblErgebnis.colTabelle.Text = "MAHNDATEN";
						this.tblErgebnis.colText.Text = this.nIstDa.ToString(0) + " Zeilen";
					}

					this.nFetch = this.hSqlS1.FetchNext();
				}
				// tka
				Int.SqlImmedSel("SELECT count(*) INTO :frmDSGVOLoesch.nAnz FROM tka WHERE tkadruckdatum < @YEARBEG( SYSDATE - 10 YEARS ) AND tkadeaktiv IS NULL");
				if (this.nAnz > 0) 
				{
					Int.SqlImmed("UPDATE tka SET tkadeaktiv=1 WHERE tkadruckdatum < @YEARBEG( SYSDATE - 10 YEARS ) AND tkadeaktiv IS NULL");
					this.nRow = this.tblErgebnis.InsertRow(Sys.TBL_MaxRow);
					this.tblErgebnis.colTabelle.Text = "KONTOAUSZUG";
					this.tblErgebnis.colText.Text = this.nAnz.ToString(0) + " Buchungen";
				}
				// vo
				Int.SqlImmedSel("SELECT count(*) INTO :frmDSGVOLoesch.nAnz FROM vo WHERE vodatum < @YEARBEG( SYSDATE - 10 YEARS ) AND vodeaktiv IS NULL");
				if (this.nAnz > 0) 
				{
					Int.SqlImmed("UPDATE vo SET vodeaktiv=1 WHERE vodatum < @YEARBEG( SYSDATE - 10 YEARS ) AND vodeaktiv IS NULL");
					this.nRow = this.tblErgebnis.InsertRow(Sys.TBL_MaxRow);
					this.tblErgebnis.colTabelle.Text = "VORTRÄGE";
					this.tblErgebnis.colText.Text = this.nAnz.ToString(0) + " Vorträge";
				}
				// tsk
				Int.SqlImmedSel("SELECT count(*) INTO :frmDSGVOLoesch.nAnz FROM tsk WHERE tskantrdat < @YEARBEG( SYSDATE - 10 YEARS ) AND tskdeaktiv IS NULL");
				if (this.nAnz > 0) 
				{
					Int.SqlImmed("UPDATE tsk SET tskdeaktiv=1 WHERE tskantrdat < @YEARBEG( SYSDATE - 10 YEARS ) AND tskdeaktiv IS NULL");
					this.nRow = this.tblErgebnis.InsertRow(Sys.TBL_MaxRow);
					this.tblErgebnis.colTabelle.Text = "TSK";
					this.tblErgebnis.colText.Text = this.nAnz.ToString(0) + " Einträge";
				}
				// ue
				Int.SqlImmedSel("SELECT count(*) INTO :frmDSGVOLoesch.nAnz FROM ue WHERE ueerldat < @YEARBEG( SYSDATE - 10 YEARS ) AND uedeaktiv IS NULL");
				if (this.nAnz > 0) 
				{
					Int.SqlImmed("UPDATE ue SET uedeaktiv=1 WHERE ueerldat < @YEARBEG( SYSDATE - 10 YEARS ) AND uedeaktiv IS NULL");
					this.nRow = this.tblErgebnis.InsertRow(Sys.TBL_MaxRow);
					this.tblErgebnis.colTabelle.Text = "ÜBERWEISUNGEN";
					this.tblErgebnis.colText.Text = this.nAnz.ToString(0) + " Überweisungen";
				}

				this.hSqlS1.Disconnect();
				this.hSqlS2.Disconnect();
				this.hSqlS3.Disconnect();
				this.hSqlS4.Disconnect();
				this.hSqlU1.Disconnect();
			}
			#endregion
		}
		
		/// <summary>
		/// tblErgebnis WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblErgebnis_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblErgebnis_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblErgebnis_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblErgebnis, 0xffffd8);
			#endregion
		}
		
		/// <summary>
		/// pbDrucken WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.pbDrucken_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Click:
					this.pbDrucken_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nAnz = MT.MTbl.PrintGetPrinterNames(this.strPrinters);
			this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			this.nOff = -1;
			this.nResult = 0;
			while (this.nResult < this.nAnz) 
			{
				this.lbPrinters.AddListItem(this.strPrinters[this.nResult]);
				if (this.strPrinters[this.nResult] == this.strDevice) 
				{
					this.nOff = this.nResult;
				}
				this.nResult = this.nResult + 1;
			}
			if (this.nOff >= 0) 
			{
				this.lbPrinters.SetListSelectedIndex(this.nOff);
			}

			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Set nErr = 1
			// Set strReportName = 'ABSCHVOR'
			// Set hWndReport = SalReportTableView(tblAbschVor,hWndNULL,'ABSCHVOR.QRP',nErr)
			this.PrintParams.Init();
			this.PrintParams.DocName = "Abschlagsvorschlag";
			this.PrintParams.Orientation = MT.MTbl.MTP_OR_LANDSCAPE;
			this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			this.nResult = this.lbPrinters.GetListSelectedIndex();
			if (this.nResult == Sys.LB_Err) 
			{
				this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			}
			else
			{
				this.strDevice = this.lbPrinters.GetListItemText(this.nResult);
			}
			this.PrintParams.PrinterName = this.strDevice;
			// 07.11.13 F1760
			this.PrintParams.Language = MT.MTbl.MTP_LNG_GERMAN;

			MT.MTbl.Print(this.tblErgebnis, this.PrintParams);

			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblErgebnis
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblErgebnisTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmDSGVOLoesch _frmDSGVOLoesch = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblErgebnisTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmDSGVOLoesch frmDSGVOLoesch
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmDSGVOLoesch == null) 
					{
						_frmDSGVOLoesch = (frmDSGVOLoesch)this.FindForm();
					}
					return _frmDSGVOLoesch;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblErgebnisTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblErgebnisTableWindow)SalWindow.FromHandle(handle, typeof(tblErgebnisTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
