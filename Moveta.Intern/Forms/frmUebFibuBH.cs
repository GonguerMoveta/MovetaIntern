// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmUebFibuBH : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlFi = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalNumber nFetchFi = 0;
		public SalNumber nSoll = 0;
		public SalNumber nHaben = 0;
		public SalString strBelNr = "";
		public SalNumber nBelNr = 0;
		public SalDateTime dtBelDat = SalDateTime.Null;
		public SalString strBelDat = "";
		public SalString strBuchText = "";
		public SalNumber nDM = 0;
		public SalString strRowID = "";
		public SalNumber nTyp = 0;
		public SalBoolean bExists = false;
		public SalNumber nArztNr = 0;
		public SalNumber nHalterNr = 0;
		public SalNumber nRechNr = 0;
		public SalNumber nErr = 0;
		public SalNumber nFetch = 0;
		public SalWindowHandle hWndReport = SalWindowHandle.Null;
		public SalString strReportName = "";
		public SalSqlHandle hSqlRep = SalSqlHandle.Null;
		public SalNumber nJournalNr = 0;
		public SalNumber nLPeriode = 0;
		public SalDateTime dtLvon = SalDateTime.Null;
		public SalDateTime dtLbis = SalDateTime.Null;
		public SalNumber nFPeriode = 0;
		public SalDateTime dtFvon = SalDateTime.Null;
		public SalDateTime dtFbis = SalDateTime.Null;
		public SalNumber nJDruck = 0;
		public SalNumber nJManuell = 0;
		public SalNumber nJSperre = 0;
		public SalNumber nMaxBuchNr = 0;
		public SalNumber nAnzahl = 0;
		public SalNumber nZaehler = 0;
		public SalBoolean bExportOk = false;
		public SalDateTime dtExportDatei = SalDateTime.Null;
		public SalNumber nExportNr = 0;
		public SalDateTime dtAktuell = SalDateTime.Null;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmUebFibuBH()
		{
			// Assign global reference.
			App.frmUebFibuBH = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmUebFibuBH CreateWindow(Control owner)
		{
			frmUebFibuBH frm = new frmUebFibuBH();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmUebFibuBH FromHandle(SalWindowHandle handle)
		{
			return ((frmUebFibuBH)SalWindow.FromHandle(handle, typeof(frmUebFibuBH)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmUebFibuBH WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmUebFibuBH_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmUebFibuBH_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmUebFibuBH_OnSAM_Destroy(sender, e);
					break;
				
				case Sys.SAM_ReportStart:
					this.frmUebFibuBH_OnSAM_ReportStart(sender, e);
					break;
				
				case Sys.SAM_ReportFetchInit:
					this.frmUebFibuBH_OnSAM_ReportFetchInit(sender, e);
					break;
				
				case Sys.SAM_ReportFetchNext:
					this.frmUebFibuBH_OnSAM_ReportFetchNext(sender, e);
					break;
				
				case Sys.SAM_ReportFinish:
					this.frmUebFibuBH_OnSAM_ReportFinish(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmUebFibuBH_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlConnection(ref this.hSqlFi);
			this.rb0.Checked = true;
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmUebFibuBH_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlFi.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportStart event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmUebFibuBH_OnSAM_ReportStart(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 30.04.03
			if (Var.hWndfrmReport) 
			{
				Var.hWndfrmReport.BringWindowToTop();
			}

			Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Protokoll", "Das Protokoll", "wird gedruckt", "Protokoll");
			Int.SqlConnection(ref this.hSqlRep);
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFetchInit event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmUebFibuBH_OnSAM_ReportFetchInit(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Int.SqlHandleExec(this.hSqlRep, @"SELECT fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp
			INTO :frmUebFibuBH.nSoll, :frmUebFibuBH.nHaben, :frmUebFibuBH.strBelNr, :frmUebFibuBH.dtBelDat, :frmUebFibuBH.strBuchText, :frmUebFibuBH.nDM, :frmUebFibuBH.nTyp
			FROM fi
			WHERE fifertig = 0
			ORDER BY fityp, ROWID", "Report INIT", ref this.nErr) != Sys.IDOK) 
			{
				e.Return = false;
				return;
			}
			else
			{
				this.hSqlRep.Commit();
				e.Return = true;
				return;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFetchNext event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmUebFibuBH_OnSAM_ReportFetchNext(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.hSqlRep.FetchNext(ref this.nFetch)) 
			{
				if (this.nFetch == Sys.FETCH_Ok) 
				{
					e.Return = true;
					return;
				}
				else
				{
					e.Return = false;
					return;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFinish event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmUebFibuBH_OnSAM_ReportFinish(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlRep.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 04.10.19 Ä1860 entfernt, da jetzt mit Datumsstempel
			// If SalFileOpen(hFile,'F:\\Allgemein\\EXPORT.DIF',OF_Exist)
			// Set bExportOk = FALSE
			// Call SalFileGetDateTime('F:\\Allgemein\\EXPORT.DIF', dtExportDatei)
			// If IDYES = SalMessageBox( 'Soll bestehende EXPORT-Datei
			// vom ' || SalDateToStrX(dtExportDatei) || ' gelöscht werden ?','Achtung',
			// MB_YesNo|MB_IconQuestion )
			// Set bExportOk = TRUE
			// Else
			// Set bExportOk = TRUE
			// If bExportOk
			Sal.WaitCursor(true);
			if (this.rb1.Checked == true) 
			{
				this.nTyp = 1;
			}
			if (this.rb2.Checked == true) 
			{
				this.nTyp = 2;
			}
			if (this.rb3.Checked == true) 
			{
				this.nTyp = 3;
			}
			if (this.rb4.Checked == true) 
			{
				this.nTyp = 4;
			}
			if (this.rb5.Checked == true) 
			{
				this.nTyp = 5;
			}
			if (this.rb6.Checked == true) 
			{
				this.nTyp = 6;
			}
			if (this.rb7.Checked == true) 
			{
				this.nTyp = 7;
			}
			if (this.rb8.Checked == true) 
			{
				this.nTyp = 8;
			}
			if (this.rb9.Checked == true) 
			{
				this.nTyp = 9;
			}
			if (this.rb0.Checked == true) 
			{
				this.nTyp = 0;
			}
			// 16.07.19 Ä1860 + fiexportnr
			if (this.nTyp == 0) 
			{
				this.strSelect = @"SELECT fisoll, fihaben, fibelnr, @int(fibelnr), fibeldat, fibuchtext, fidm,
fiarztnr, fihalternr, firechnr ,ROWID, fiexportnr
INTO  :frmUebFibuBH.nSoll,  :frmUebFibuBH.nHaben,
:frmUebFibuBH.strBelNr,  :frmUebFibuBH.nBelNr,  :frmUebFibuBH.dtBelDat,
:frmUebFibuBH.strBuchText,  :frmUebFibuBH.nDM,
:frmUebFibuBH.nArztNr, :frmUebFibuBH.nHalterNr, :frmUebFibuBH.nRechNr,
:frmUebFibuBH.strRowID, :frmUebFibuBH.nExportNr
FROM FI
WHERE FIFERTIG=0 ORDER BY FITYP, FIARZTNR, FIHALTERNR";
				this.SetStatusBarText("Zähle Sätze");
				Int.SqlImmedSel(@"SELECT count(*) INTO :frmUebFibuBH.nAnzahl FROM FI
WHERE FIFERTIG=0");
			}
			else
			{
				this.strSelect = @"SELECT fisoll, fihaben, fibelnr, @int(fibelnr), fibeldat, fibuchtext, fidm ,
fiarztnr, fihalternr, firechnr, ROWID, fiexportnr
INTO  :frmUebFibuBH.nSoll,  :frmUebFibuBH.nHaben,
:frmUebFibuBH.strBelNr,  :frmUebFibuBH.nBelNr,  :frmUebFibuBH.dtBelDat,
:frmUebFibuBH.strBuchText,  :frmUebFibuBH.nDM,
:frmUebFibuBH.nArztNr, :frmUebFibuBH.nHalterNr, :frmUebFibuBH.nRechNr,
:frmUebFibuBH.strRowID, :frmUebFibuBH.nExportNr
FROM FI
WHERE FIFERTIG=0 AND fityp = :frmUebFibuBH.nTyp
ORDER BY FIARZTNR, FIHALTERNR";
				this.SetStatusBarText("Zähle Sätze");
				Int.SqlImmedSel(@"SELECT count(*) INTO :frmUebFibuBH.nAnzahl FROM FI
WHERE FIFERTIG=0 AND fityp = :frmUebFibuBH.nTyp");
			}
			this.SetStatusBarText(Int.PalStrNum(this.nAnzahl, 4, 0) + " Sätze");
			this.nZaehler = 0;
			// 28.12.99
			// Call SqlExists(strSelect, bExists)
			// If Not bExists
			// Call SalMessageBox( 'Es sind keine Buchungen
			// des gewählten Typs da !','Achtung',
			// MB_Ok|MB_IconExclamation )
			if (this.nAnzahl == 0) 
			{
				Sal.MessageBox(@"Es sind keine Buchungen
des gewählten Typs da !", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				// 04.10.19 Ä1860
				this.dtAktuell = SalDateTime.Current;

				this.SetStatusBarText("Erstelle Datei EXPORT" + Int.PalDateToStrJJJJMMTThhmmsst(this.dtAktuell) + ".DIF");
				Var.hFile.Open(Const.PATH_EXPORT + Int.PalDateToStrJJJJMMTThhmmsst(this.dtAktuell) + ".DIF", ((Sys.OF_Create | Sys.OF_Write) | Sys.OF_Text));
				this.SetStatusBarText("Verarbeitung beginnt");
				Int.SqlHandleExec(this.hSqlFi, this.strSelect, "Fehler", ref Var.nCount);
				this.nFetchFi = this.hSqlFi.FetchNext();
				while (this.nFetchFi != Sys.FETCH_EOF) 
				{
					this.nZaehler = this.nZaehler + 1;
					this.SetStatusBarText("bearbeite  " + Int.PalStrNum(this.nZaehler, 4, 0) + " von" + Int.PalStrNum(this.nAnzahl, 4, 0));
					// 07.04.17
					// neue Sage 100
					// Set strBelDat = PalDateToStrDE( dtBelDat )
					// alte Sage KHK
					// Set strBelDat = PalNullen(SalDateDay(dtBelDat),2)
					// || PalNullen(SalDateMonth(dtBelDat),2)
					// || SalStrRightX(PalNullen(SalDateYear(dtBelDat),4),2)
					// 04.01.19 Ä1817 OfficeLine
					this.strBelDat = Int.PalDateToStrDE(this.dtBelDat);

					if (this.nHaben == 0 || this.nHaben == SalNumber.Null || this.nSoll == 0 || this.nSoll == SalNumber.Null || this.nDM == 0 || this.nDM == SalNumber.Null) 
					{

						if (this.nDM == 0 || this.nDM == SalNumber.Null) 
						{
						}
						else
						{
							Sal.MessageBeep(0);
							Sal.MessageBox(@"Soll- oder Habenkonto oder Betrag
= 0 oder leer !
Soll " + Int.PalNullen(this.nSoll, 5) + ", Haben " + Int.PalNullen(this.nHaben, 5) + @"
BelNr " + this.strBelNr + ", BelDat " + this.strBelDat + @",
""" + this.strBuchText + "\"," + Int.PalStrNumDecPoint(this.nDM, 9, 2), "nicht gebucht !", (Sys.MB_Ok | Sys.MB_IconExclamation));
						}
					}
					else
					{
						this.SetStatusBarText("bearbeite  " + Int.SalDateToStrX(this.dtBelDat));

						// XXXXXXXXXXXXXXXXXXXXXXXX  EXPORT-Datei schreiben XXXXXXXXXXXXXXXXXXXXXXXX
						// 17.12.08 A301
						// 06.08.09 " raus bei Buchtext
						// Call SalFilePutStr(hFile,'"SH97","' || PalNullen(nSoll,5) || '","' || PalNullen(nHaben,5)
						// || '","' || strBelNr || '","' || strBelDat || '","' || strBuchText || '","01","EUR","3","2","00","0","0","'
						// || PalStrNumDecPoint(nDM,9,2) || '","0","' || PalStrNumDecPoint(nDM,9,2) || '","0"')
						// neue Sage 100
						// Call SalFilePutStr(hFile,'"SH40","S' || PalNullen(nSoll,5) || '","S' || PalNullen(nHaben,5)
						// || '","' || strBelNr || '","' || strBelDat || '","' || PalStrReplace(strBuchText, '"', '') || '","","01","EUR","3","2","000","0","1","'
						// || PalStrNumDecPoint(nDM,9,2) || '","0","' || PalStrNumDecPoint(nDM,9,2) || '","0"')
						// alte Sage KHK
						// Call SalFilePutStr(hFile,'"SH40","' || PalNullen(nSoll,5) || '","' || PalNullen(nHaben,5)
						// || '","' || strBelNr || '","' || strBelDat || '","' || PalStrReplace(strBuchText, '"', '') || '","","01","EUR","3","2","000","0","1","'
						// || PalStrNumDecPoint(nDM,9,2) || '","0","' || PalStrNumDecPoint(nDM,9,2) || '","0"')
						// 04.10.Ä1860
						if (this.nExportNr == SalNumber.Null) 
						{
							this.nExportNr = 0;
						}
						// 04.01.19 Ä1817 OfficeLine
						Var.hFile.PutString("\"SH40\",\"S" + Int.PalNullen(this.nSoll, 5) + "\",\"S" + Int.PalNullen(this.nHaben, 5) + "\",\"" + this.strBelNr + "\",\"" + this.strBelDat + "\",\"" + Int.PalStrReplace(this.strBuchText, "\"", "") + "\",\"\",\"01\",\"EUR\",\"3\",\"2\",\"000\",\"0\",\"1\",\"" + 
							Int.PalStrNumDecPoint(this.nDM, 9, 2) + "\",\"0\",\"" + Int.PalStrNumDecPoint(this.nDM, 9, 2) + "\",\"0\",\"" + this.nExportNr.ToString(0) + "\"");
						// Gupta-FiBu
						this.SetStatusBarText("bearbeite  " + this.strBelDat);

					}
					Int.SqlImmedX(@"UPDATE FI SET
FIFERTIG = 1, FIUEBDAT = SYSDATETIME  WHERE ROWID = :strRowID");
					this.nFetchFi = this.hSqlFi.FetchNext();
				}
				this.hSqlFi.Commit();
				Var.hFile.Close();
				// 05.06.08
				Sal.MessageBox("Es wurde eine Datei " + Const.PATH_EXPORT + Int.PalDateToStrJJJJMMTThhmmsst(this.dtAktuell) + ".DIF erstellt mit " + this.nZaehler.ToString(0) + " Buchungen.", "Fertig", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			}
			Sal.WaitCursor(false);
			this.DestroyWindow();
			#endregion
		}
		
		/// <summary>
		/// pbDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDruck_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Set nErr = 1
			// Set strReportName = 'UEBFIBU'
			// Call SalStatusSetText(hWndForm,'Erstelle Protokoll -  Bitte warten !')
			// Call PalReport(frmUebFibuBH, 'UEBFIBU.QRP',
			// ':frmUebFibuBH.nSoll, :frmUebFibuBH.nHaben, :frmUebFibuBH.strBelNr, :frmUebFibuBH.dtBelDat, :frmUebFibuBH.strBuchText, :frmUebFibuBH.nDM, :frmUebFibuBH.nTyp',
			// 'Soll, Haben, BelNr, BelDat, Text, DM, Typ',
			// nErr)
			// LL
			dlgLlDruck.ModalDialog(App.frmMain, "Übergabe FiBu.lst", "");
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
			this.DestroyWindow();
			#endregion
		}
		#endregion
	}
}
