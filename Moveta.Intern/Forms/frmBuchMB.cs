// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// Buchen MB-Kosten
	/// </summary>
	public partial class frmBuchMB : SalFormWindow
	{
		#region Window Variables
		public SalNumber nTAVSt = 0;
		public SalNumber nDiverse = 0;
		public SalNumber nResult = 0;
		public SalNumber nKZZahl = 0;
		public SalBoolean bOk = false;
		public SalNumber nPMwStSchl = 0;
		public SalNumber nPRechNr = 0;
		public SalSqlHandle hSqlBuchMB = SalSqlHandle.Null;
		public SalString strBABuchtext = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmBuchMB()
		{
			// Assign global reference.
			App.frmBuchMB = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmBuchMB CreateWindow(Control owner)
		{
			frmBuchMB frm = new frmBuchMB();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmBuchMB FromHandle(SalWindowHandle handle)
		{
			return ((frmBuchMB)SalWindow.FromHandle(handle, typeof(frmBuchMB)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmBuchMB WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBuchMB_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmBuchMB_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmBuchMB_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBuchMB_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfBuchDat.Value = SalDateTime.Current;
			Int.SqlConnection(ref this.hSqlBuchMB);
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBuchMB_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlBuchMB.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// dfProzNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfProzNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfProzNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfProzNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfProzDatum.Clear();
			if (!(this.dfProzNr.IsEmpty())) 
			{
				Int.SqlIstDa(" from pr where prnr=:frmBuchMB.dfProzNr", ref this.bOk);
				if (this.bOk) 
				{
					Int.SqlImmedSel(@"SELECT prdatum, prarztnr, prhalternr
into :frmBuchMB.dfProzDatum,  :frmBuchMB.dfArztNr, :frmBuchMB.dfHalterNr
from pr where prnr=:frmBuchMB.dfProzNr");
					this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0);
					this.dfHalterNr.PostMessage(Sys.SAM_Validate, 0, 0);
					this.dfBelNr.SetFocus();
				}
				else
				{
					Sal.MessageBox(@"angegebene PR-Nr.
ist nicht vorhanden !", "PR falsch", (Sys.MB_Ok | Sys.MB_IconStop));
					this.dfProzNr.Clear();
				}
			}
			#endregion
		}
		
		/// <summary>
		/// cbMwStSenkung WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbMwStSenkung_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbMwStSenkung_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbMwStSenkung_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfBuchArt.Number > 0 && this.dfBuchArt.Number != Sys.NUMBER_Null) 
			{
				this.dfBuchArt.PostMessage(Sys.SAM_Validate, 0, 0);
			}
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT aname1
into :frmBuchMB.dfArztName
from A where aarztnr=:frmBuchMB.dfArztNr");
			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfHalterName.Clear();
			Int.SqlIstDa(" from h where harztnr=:frmBuchMB.dfArztNr AND hhalternr = :frmBuchMB.dfHalterNr AND hdeaktiv IS NULL", ref this.bOk);
			if (this.bOk) 
			{
				Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn
into :frmBuchMB.dfHalterName
from h where harztnr=:frmBuchMB.dfArztNr AND hhalternr = :frmBuchMB.dfHalterNr AND hdeaktiv IS NULL");
			}
			else
			{
				Sal.MessageBox(@"angegebene Halter-Nr.
ist nicht vorhanden !", "Halter falsch", (Sys.MB_Ok | Sys.MB_IconStop));
				this.dfHalterNr.Clear();
			}
			#endregion
		}
		
		/// <summary>
		/// dfBuchArt WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBuchArt_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfBuchArt_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBuchArt_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 11.06.21 Ä1962 + babuchtext
			Int.SqlImmedSel(@"SELECT babuart, badm1, bastkzarzt1, bastkzabrst1, baktosoll1, baktohaben1,
 badm2, baktosoll2, baktohaben2,
  badm3, bastkzabrst3, baktosoll3, baktohaben3, babuchtext
INTO :frmBuchMB.dfSBuchArt,
:frmBuchMB.dfDM1,  :frmBuchMB.dfVSt1, :frmBuchMB.dfMwSt1, :frmBuchMB.dfSoll1, :frmBuchMB.dfHaben1,
:frmBuchMB.dfDM2, :frmBuchMB.dfSoll2, :frmBuchMB.dfHaben2,
:frmBuchMB.dfDM3, :frmBuchMB.dfMwSt3, :frmBuchMB.dfSoll3, :frmBuchMB.dfHaben3, :frmBuchMB.strBABuchtext
FROM ba WHERE banr = :frmBuchMB.dfBuchArt");
			// 24.06.20 Ä1892
			// 18.01.21 Mail Hennecke dfBuchDat >= 2020-07-01 and dfBuchDat <= 2020-12-31 And Not cbkeineMwStSenkung -> (dfBuchDat >= 2020-07-01 and dfBuchDat <= 2020-12-31) Or cbMwStSenkung
			if ((this.dfBuchDat.Value.Value >= new SalDateTime(2020, 7, 1) && this.dfBuchDat.Value <= new SalDateTime(2020, 12, 31)) || this.cbMwStSenkung.Checked) 
			{
				if (this.dfVSt1.Number == 10) 
				{
					this.dfVSt1.Number = 1;
				}
				if (this.dfMwSt1.Number == 10) 
				{
					this.dfMwSt1.Number = 1;
				}
				if (this.dfMwSt3.Number == 10) 
				{
					this.dfMwSt3.Number = 1;
				}
				// 30.06.20 Ä1892
				this.dfSoll1.Number = Int.PalKontenMwStSenkung(this.dfSoll1.Number);
				this.dfSoll2.Number = Int.PalKontenMwStSenkung(this.dfSoll2.Number);
				this.dfSoll3.Number = Int.PalKontenMwStSenkung(this.dfSoll3.Number);
				this.dfHaben1.Number = Int.PalKontenMwStSenkung(this.dfHaben1.Number);
				this.dfHaben2.Number = Int.PalKontenMwStSenkung(this.dfHaben2.Number);
				this.dfHaben3.Number = Int.PalKontenMwStSenkung(this.dfHaben3.Number);
				// 30.06.20
				this.dfDM1.Number = (this.dfDM1.Number * 116 / 119 * 100).Round() / 100;
				this.dfDM3.Number = (this.dfDM3.Number * 116 / 119 * 100).Round() / 100;

			}

			this.nPMwStSchl = this.dfVSt1.Number;
			this.dfVSt1.Number = Var.nMwSatz[this.dfVSt1.Number];
			this.dfMwSt1.Number = Var.nMwSatz[this.dfMwSt1.Number];
			this.dfMwSt3.Number = Var.nMwSatz[this.dfMwSt3.Number];
			this.dfHaben1.Number = this.dfHaben1.Number * 10;
			this.dfHaben2.Number = this.dfHaben2.Number * 10;
			this.dfHaben3.Number = this.dfHaben3.Number * 10;
			this.dfSoll1.Number = this.dfSoll1.Number * 10;
			this.dfSoll2.Number = this.dfSoll2.Number * 10;
			this.dfSoll3.Number = this.dfSoll3.Number * 10;
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// On SAM_Click
				
				// If SalIsNull( dfHalterNr )
				
				// Call SalMessageBox('keine Halter-Nr.
				
				// angegeben !','kein Halter',MB_Ok|MB_IconStop)
				
				// Else
				
				// Call SalWaitCursor(TRUE)
				
				// #16 kein leeres Buchungsdatum mehr erlauben
				
				// If dfBuchDat = DATETIME_Null
				
				// Set dfBuchDat = SalDateCurrent()
				
				// Set dfBuchText = dfSBuchArt || ' ' || dfBuchText
				
				// If SalIsNull(dfDM1)
				
				// Set dfDM1 = 0
				
				// If SalIsNull(dfDM2)
				
				// Set dfDM2 = 0
				
				// If SalIsNull(dfDM3)
				
				// Set dfDM3 = 0
				
				// Aktionsdatei
				
				// Call PalAktion( dfArztNr, dfHalterNr, NUMBER_Null, 'MB',dfSBuchArt,NUMBER_Null, NUMBER_Null, dfDM1+dfDM2+dfDM3,0, dfProzNr, NUMBER_Null)
				
				// MB-Kosten-Protokoll
				
				// Call SqlImmedX('INSERT INTO mk (mktyp, mkarztnr, mkhalternr, mkrechnr, mkbuchdat, mkdma, mkdmb, mkdmc)
				
				// VALUES (\'M\', :frmBuchMB.dfArztNr, :frmBuchMB.dfHalterNr, :frmBuchMB.dfBelNr, :frmBuchMB.dfBuchDat,
				
				// :frmBuchMB.dfDM1, :frmBuchMB.dfDM2, :frmBuchMB.dfDM3)')
				
				// Tierarzt-Buchhaltung (Kontoauszug)
				
				// Set nTAVSt = SalNumberRound(dfDM1 * dfVSt1 * 100 / (100 + dfVSt1)) /100
				
				// If dfDM1 != 0
				
				// Call SqlImmedX('INSERT INTO TK
				
				// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
				
				// tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
				
				// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
				
				// VALUES (:frmBuchMB.dfArztNr, 0, 0, :frmBuchMB.dfBuchText,
				
				// :frmBuchMB.dfHalterNr, :frmBuchMB.dfBelNr, :frmBuchMB.dfBelNr, :frmBuchMB.dfBuchDat,
				
				// :frmBuchMB.dfHaben1, 0,0,:frmBuchMB.nTAVSt, 0,0,0,0,0,
				
				// :frmBuchMB.dfVSt1, 0, 0, :frmBuchMB.dfDM1, :frmBuchMB.dfDM1, 0)')
				
				// If dfDM2 != 0
				
				// Call SqlImmedX('INSERT INTO TK
				
				// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
				
				// tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
				
				// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
				
				// VALUES (:frmBuchMB.dfArztNr, 0, 0, :frmBuchMB.dfBuchText,
				
				// :frmBuchMB.dfHalterNr, :frmBuchMB.dfBelNr, :frmBuchMB.dfBelNr, :frmBuchMB.dfBuchDat,
				
				// :frmBuchMB.dfHaben2, 0,0,0, 0,0,0,0,0,
				
				// 0, 0, 0, :frmBuchMB.dfDM2, :frmBuchMB.dfDM2, 0)')
				
				// KHK-FiBu
				
				// a)
				
				// If dfDM1!= 0
				
				// Set nTAVSt = SalNumberRound(dfDM1 * dfMwSt1 * 100 / (100 + dfMwSt1)) /100
				
				// Set nDiverse = dfDM1 - nTAVSt
				
				// Call SqlImmedX('INSERT INTO FI
				
				// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
				
				// VALUES (0, :frmBuchMB.dfSoll1, :frmBuchMB.dfHaben1, :frmBuchMB.dfBelNr,
				
				// :frmBuchMB.dfBuchDat, :frmBuchMB.dfBuchText, :frmBuchMB.nDiverse, 7)')
				
				// Call SqlImmedX('INSERT INTO FI
				
				// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
				
				// VALUES (0, :frmBuchMB.dfSoll1, 18300, :frmBuchMB.dfBelNr,
				
				// :frmBuchMB.dfBuchDat, :frmBuchMB.dfBuchText, :frmBuchMB.nTAVSt, 7)')
				
				// b)
				
				// If dfDM2 != 0
				
				// Set nDiverse = dfDM2
				
				// Call SqlImmedX('INSERT INTO FI
				
				// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
				
				// VALUES (0, :frmBuchMB.dfSoll2, :frmBuchMB.dfHaben2, :frmBuchMB.dfBelNr,
				
				// :frmBuchMB.dfBuchDat, :frmBuchMB.dfBuchText, :frmBuchMB.nDiverse, 7)')
				
				// c)
				
				// If dfDM3 != 0
				
				// Set nTAVSt = SalNumberRound(dfDM3 * dfMwSt3 * 100 / (100 + dfMwSt3)) /100
				
				// Set nDiverse = dfDM3 - nTAVSt
				
				// Call SqlImmedX('INSERT INTO FI
				
				// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
				
				// VALUES (0, :frmBuchMB.dfSoll3, :frmBuchMB.dfHaben3, :frmBuchMB.dfBelNr,
				
				// :frmBuchMB.dfBuchDat, :frmBuchMB.dfBuchText, :frmBuchMB.nDiverse, 7)')
				
				// Call SqlImmedX('INSERT INTO FI
				
				// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
				
				// VALUES (0, :frmBuchMB.dfSoll3, 18300, :frmBuchMB.dfBelNr,
				
				// :frmBuchMB.dfBuchDat, :frmBuchMB.dfBuchText, :frmBuchMB.nTAVSt, 7)')
				
				// 999990
				
				// 10.01.07 F103
				
				// Set nPRechNr = 999989 + nPMwStSchl
				
				// 11.12.06 Ä48 19% MwSt.
				
				// Call SqlIstDa(' FROM rk
				
				// WHERE rkarztnr = :frmBuchMB.dfArztNr AND rkhalternr = :frmBuchMB.dfHalterNr AND rkrechnr = :frmBuchMB.nPRechNr', bExists)
				
				// If bExists
				
				// Call SqlImmedSel('SELECT rkkzzahl INTO :frmBuchMB.nKZZahl FROM rk
				
				// WHERE rkarztnr = :frmBuchMB.dfArztNr
				
				// AND rkhalternr = :frmBuchMB.dfHalterNr AND rkrechnr = :frmBuchMB.nPRechNr')
				
				// If nKZZahl > 1
				
				// Set nKZZahl = 0
				
				// Call SqlImmedX('UPDATE rk SET
				
				// rkkzzahl = :frmBuchMB.nKZZahl,
				
				// rkrechdat = :frmBuchMB.dfBuchDat,
				
				// rkfaelldat = :frmBuchMB.dfBuchDat,
				
				// rkdmleis = rkdmleis + :frmBuchMB.dfDM1,
				
				// rkdmarzn = rkdmarzn + :frmBuchMB.dfDM2,
				
				// rkmbdmopl = rkmbdmopl + :frmBuchMB.dfDM3
				
				// WHERE rkarztnr = :frmBuchMB.dfArztNr
				
				// AND rkhalternr = :frmBuchMB.dfHalterNr AND rkrechnr = :frmBuchMB.nPRechNr')
				
				// Else
				
				// Set strBuchText = 'MB-Sammler ' || SalNumberToStrX(dfVSt1,0) || '%'
				
				// Call SqlImmedX('INSERT INTO RK (RKARZTNR, RKHALTERNR, RKRECHNR,
				
				// RKBUCHTEXT, RKRECHDAT, RKFAELLDAT, RKDMLEIS, RKDMARZN,  RKDMMAHN, RKDMZINS, RKMBDMOPL,
				
				// RKVERJAEHR,RKZALEIS,RKZAARZN,RKZAMAHN, RKZAZINS, RKMBZAOPL, RKKZZAHL,RKKZ,RKMAHNSTUFE)
				
				// VALUES(:frmBuchMB.dfArztNr, :frmBuchMB.dfHalterNr, :frmBuchMB.nPRechNr,
				
				// :frmBuchMB.dfBuchText, :frmBuchMB.dfBuchDat, :frmBuchMB.dfBuchDat, :frmBuchMB.dfDM1, :frmBuchMB.dfDM2,0,0,:frmBuchMB.dfDM3,
				
				// NULL,0, 0,0,0,0,0,2,0)')
				
				// 08.05.09
				
				// Set frmMain.dtHBBuchDat = SalDateCurrent()
				
				// If dfDM1 != 0
				
				// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext, hbproznr)
				
				// VALUES(:frmBuchMB.dfArztNr, :frmBuchMB.dfHalterNr, :frmBuchMB.nPRechNr, :frmBuchMB.dfBuchDat, \'MBa\', :frmMain.dtHBBuchDat, :frmBuchMB.dfDM1, :frmBuchMB.dfSoll1, :frmBuchMB.dfHaben1, :frmBuchMB.dfBuchText,
				
				// :frmBuchMB.dfProzNr)')
				
				// If dfDM2 != 0
				
				// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext, hbproznr)
				
				// VALUES(:frmBuchMB.dfArztNr, :frmBuchMB.dfHalterNr, :frmBuchMB.nPRechNr, :frmBuchMB.dfBuchDat, \'MBb\', :frmMain.dtHBBuchDat, :frmBuchMB.dfDM2, :frmBuchMB.dfSoll2, :frmBuchMB.dfHaben2, :frmBuchMB.dfBuchText,
				
				// :frmBuchMB.dfProzNr)')
				
				// If dfDM3 != 0
				
				// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext, hbproznr)
				
				// VALUES(:frmBuchMB.dfArztNr, :frmBuchMB.dfHalterNr, :frmBuchMB.nPRechNr, :frmBuchMB.dfBuchDat, \'MBc\', :frmMain.dtHBBuchDat, :frmBuchMB.dfDM3, :frmBuchMB.dfSoll3, :frmBuchMB.dfHaben3, :frmBuchMB.dfBuchText,
				
				// :frmBuchMB.dfProzNr)')
				
				// Call SalClearField(dfProzNr)
				
				// Call SalClearField(dfArztNr)
				
				// Call SalClearField(dfHalterNr)
				
				// Call SalClearField(dfArztName)
				
				// Call SalClearField(dfHalterName)
				
				// Call SalClearField(dfBelNr)
				
				// Call SalClearField(dfBelDat)
				
				// Call SalClearField(dfBuchText)
				
				// Call SalClearField(dfBuchArt)
				
				// Call SalClearField(dfDM1)
				
				// Call SalClearField(dfDM2)
				
				// Call SalClearField(dfDM3)
				
				// Call SalSetFocus(dfProzNr)
				
				// Call SalWaitCursor(FALSE)
				
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 01.12.10 OTF804
			Int.SqlIstDa("FROM ba WHERE banr = :frmBuchMB.dfBuchArt", ref this.bOk);

			if (this.dfHalterNr.IsEmpty()) 
			{
				Sal.MessageBox(@"keine Halter-Nr.
angegeben !", "kein Halter", (Sys.MB_Ok | Sys.MB_IconStop));
			}
			else if (!(this.bOk)) 
			{
				Sal.MessageBox("Buchungsart nicht angegeben !", "Daten fehlen", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			}
			else
			{
				Sal.WaitCursor(true);
				// 05.08.10
				// 04.10.23 Ä2134 + tkfall
				Int.PalBuchMB(this.hSqlBuchMB, this.dfBuchDat.Value, this.dfBuchArt.Number, this.dfDM1.Number, this.dfDM2.Number, this.dfDM3.Number, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfProzNr.Number, this.dfBelNr.Number, 0, this.dfBuchText.Text, 
					SalNumber.Null, this.cbMwStSenkung.Checked, 1);

				this.dfProzNr.Clear();
				this.dfArztNr.Clear();
				this.dfHalterNr.Clear();
				this.dfArztName.Clear();
				this.dfHalterName.Clear();
				// Call SalClearField(dfBelNr)
				// Call SalClearField(dfBelDat)
				this.dfBuchText.Clear();
				this.dfBuchArt.Clear();
				this.dfDM1.Clear();
				this.dfDM2.Clear();
				this.dfDM3.Clear();
				this.dfProzNr.SetFocus();
				Sal.WaitCursor(false);
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.DestroyWindow();
			#endregion
		}
		#endregion
	}
}
