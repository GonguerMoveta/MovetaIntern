// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// Ausbatch-Programm
	/// </summary>
	public partial class frmAusbatch : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlBankZahl = SalSqlHandle.Null;
		public SalSqlHandle hSqlRePo = SalSqlHandle.Null;
		public SalNumber nA1 = 0;
		public SalNumber nA2 = 0;
		public SalNumber nA3 = 0;
		public SalNumber nA4 = 0;
		public SalNumber nA5 = 0;
		public SalNumber nA6 = 0;
		public SalNumber nR1 = 0;
		public SalNumber nR2 = 0;
		public SalNumber nR3 = 0;
		public SalNumber nR4 = 0;
		public SalNumber nR5 = 0;
		public SalNumber nR6 = 0;
		public SalNumber nH = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmAusbatch()
		{
			// Assign global reference.
			App.frmAusbatch = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmAusbatch CreateWindow(Control owner)
		{
			frmAusbatch frm = new frmAusbatch();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmAusbatch FromHandle(SalWindowHandle handle)
		{
			return ((frmAusbatch)SalWindow.FromHandle(handle, typeof(frmAusbatch)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber OnCreate()
		{
			#region Actions
			using (new SalContext(this))
			{
				hSqlBankZahl.Connect();
				hSqlRePo.Connect();
				hSqlRePo.SetParameter(Sys.DBP_PRESERVE, 1, "");

			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber OnDestroy()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (hSqlBankZahl) 
				{
					hSqlBankZahl.Disconnect();
				}
				if (hSqlRePo) 
				{
					hSqlRePo.Disconnect();
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber Ausbatch()
		{
			#region Local Variables
			SqlLocals.AusbatchLocals locals = new SqlLocals.AusbatchLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				Sal.WaitCursor(true);
				this.SetStatusBarText("Altes Protokoll wird gelöscht");
				locals.hSqlEdit.Connect();
				locals.hSqlResult.Connect();
				locals.hSqlResult.SetParameter(Sys.DBP_PRESERVE, 1, "");

				if (locals.hSqlEdit.PrepareAndExecute("DELETE FROM bp")) 
				{
					locals.hSqlEdit.Commit();
				}
				pbZahlOk.DisableWindow();
				// 02.08.23 Ä2126 + , bbexportnr
				if (locals.hSqlResult.PrepareAndExecute(@"
SELECT bbarztnr, bbhalternr, bbrechnr, bbproznr, bbzahldm, bbbuchdat, bbkonto, bbbelnr, ROWID, bbexportnr
FROM BB
INTO :nArztNr, :nHalterNr, :nRechNr, :nProzNr, :nZahlDM, :dtBuchDat, :strBankKonto, :nBelNr, :strROWID, :nExportNr")) 
				{
					while (locals.hSqlResult.FetchNext(ref locals.nInd)) 
					{
						// 06.03.23 Ä2086
						Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
						if (locals.dtBuchDat < Var.dtINIMinBuchDat) 
						{
							locals.dtBuchDat = Var.dtINIMinBuchDat;
						}

						// Set strErgebnis = ZahlungBuchen('A', nArztNr, nHalterNr, nRechNr, nProzNr, nZahlDM, dtBuchDat , strBankKonto, nBelNr, nBuchDM, nRestL, nRestA, nRestM, nRestZ)
						// 02.08.23 Ä2126 + , bbexportnr
						locals.strErgebnis = ZahlungBuchen("A", locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.nProzNr, locals.nZahlDM, locals.dtBuchDat, locals.strBankKonto, locals.nBelNr, ref locals.nBuchDM, ref locals.nRestL, ref locals.nRestA, ref 
							locals.nRestM, ref locals.nRestZ, locals.nExportNr);
						locals.strErgebnis = locals.strErgebnis.Left(40);
						this.SetStatusBarText(locals.strErgebnis);
						if (locals.strErgebnis.Left(5) == "nicht") 
						{
							locals.nNichtGebucht = locals.nNichtGebucht + 1;
						}
						// 20.11.07 Ä178 Belegnummer hinzugefügt
						if (locals.hSqlEdit.PrepareAndExecute(@"
INSERT INTO BP
( bparztnr, bphalternr, bprechnr, bpzahldm, bpbuchdm, bpbuchdat, bprestl, bpresta, bprestm, bprestz, bpkonto, bpergebnis, bpbelnr)
VALUES
( :nArztNr, :nHalterNr, :nRechNr, :nZahlDM, :nBuchDM, :dtBuchDat, :nRestL, :nRestA, :nRestM, :nRestZ, :strBankKonto, :strErgebnis, :nBelNr)")) 
						{
							if (locals.hSqlEdit.Commit()) 
							{
								if (locals.hSqlEdit.PrepareAndExecute(@"
DELETE FROM bb
WHERE ROWID = :strROWID")) 
								{
									locals.hSqlEdit.Commit();
								}
							}
						}
					}
				}
				Sal.WaitCursor(false);
				Sal.MessageBox(Int.PalStrNum(locals.nNichtGebucht, 4, 0) + @" Buchungen nicht gebucht
Bitte Batch-Protokoll drucken !", "Info", (Sys.MB_Ok | Sys.MB_IconAsterisk));
				if (locals.hSqlEdit) 
				{
					locals.hSqlEdit.Disconnect();
				}
				if (locals.hSqlResult) 
				{
					locals.hSqlResult.Disconnect();
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <returns></returns>
		public SalBoolean GetZettel(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr)
		{
			#region Local Variables
			SqlLocals.GetZettelLocals locals = new SqlLocals.GetZettelLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;

				if (locals.phSql.PrepareAndExecute(@"
SELECT anr2, akzpraxart
FROM a
WHERE aarztnr = :pnArztNr
INTO :nArztNr2, :nKZPraxArt")) 
				{
					locals.nInd = locals.phSql.FetchNext();
				}
				if (locals.nKZPraxArt == 0) 
				{
					locals.nArztNr2 = locals.pnArztNr;
				}
				if (locals.pnHalterNr == 0) 
				{
					Sql.Exists(@"
SELECT * FROM z
WHERE zarztnr IN ( :pnArztNr, :nArztNr2 )
AND zrechnr = :pnRechNr
AND zart not in ('HS', 'ZM') AND zdeaktiv IS NULL", ref locals.bExists);
				}
				else
				{
					Sql.Exists(@"
SELECT * FROM z
WHERE zarztnr IN ( :pnArztNr, :nArztNr2 )
AND zhalternr = :pnHalterNr
AND zrechnr = :pnRechNr
AND zart not in ('HS', 'ZM') AND zdeaktiv IS NULL", ref locals.bExists);
				}
				return locals.bExists;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="nDMLeis"></param>
		/// <param name="nDMArzn"></param>
		/// <param name="nDMMahn"></param>
		/// <param name="nDMZins"></param>
		/// <param name="nZaLeis"></param>
		/// <param name="nZaArzn"></param>
		/// <param name="nZaMahn"></param>
		/// <param name="nZaZins"></param>
		/// <param name="nRestDM"></param>
		/// <param name="nMahnstufe"></param>
		/// <param name="dtVerjDat"></param>
		/// <returns></returns>
		public SalBoolean GetRechnung(SalSqlHandle phSql, SalNumber pnArztNr, ref SalNumber pnHalterNr, SalNumber pnRechNr, ref SalNumber nDMLeis, ref SalNumber nDMArzn, ref SalNumber nDMMahn, ref SalNumber nDMZins, ref SalNumber nZaLeis, ref SalNumber nZaArzn, ref SalNumber nZaMahn, ref SalNumber nZaZins, ref SalNumber nRestDM, ref SalNumber nMahnstufe, ref SalDateTime dtVerjDat)
		{
			#region Local Variables
			SqlLocals.GetRechnungLocals locals = new SqlLocals.GetRechnungLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnHalterNr = pnHalterNr;
					locals.pnRechNr = pnRechNr;
					locals.nDMLeis = nDMLeis;
					locals.nDMArzn = nDMArzn;
					locals.nDMMahn = nDMMahn;
					locals.nDMZins = nDMZins;
					locals.nZaLeis = nZaLeis;
					locals.nZaArzn = nZaArzn;
					locals.nZaMahn = nZaMahn;
					locals.nZaZins = nZaZins;
					locals.nRestDM = nRestDM;
					locals.nMahnstufe = nMahnstufe;
					locals.dtVerjDat = dtVerjDat;

					if (locals.pnHalterNr != 0) 
					{
						locals.phSql.PrepareAndExecute(@"
SELECT rkdmleis, rkdmarzn, rkdmmahn + rkmbdmopl, rkdmzins,
rkzaleis, rkzaarzn, rkzamahn + rkmbzaopl , rkzazins,
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins), rkmahnstufe, rkverjaehr
FROM RK
INTO :nDMLeis, :nDMArzn, :nDMMahn, :nDMZins,
:nZaLeis, :nZaArzn, :nZaMahn, :nZaZins,
:nRestDM, :nMahnstufe, :dtVerjDat
WHERE rkarztnr = :pnArztNr
AND rkhalternr = :pnHalterNr
AND rkrechnr = :pnRechNr AND rkdeaktiv IS NULL");
					}
					else
					{
						locals.phSql.PrepareAndExecute(@"
SELECT rkdmleis, rkdmarzn, rkdmmahn + rkmbdmopl, rkdmzins,
rkzaleis, rkzaarzn, rkzamahn + rkmbzaopl , rkzazins, rkhalternr,
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins), rkmahnstufe, rkverjaehr
FROM RK
INTO :nDMLeis, :nDMArzn, :nDMMahn, :nDMZins,
:nZaLeis, :nZaArzn, :nZaMahn, :nZaZins, :pnHalterNr,
:nRestDM, :nMahnstufe, :dtVerjDat
WHERE rkarztnr = :pnArztNr
AND rkrechnr = :pnRechNr AND rkdeaktiv IS NULL");
					}
					if (locals.phSql.FetchNext(ref locals.nInd)) 
					{
						locals.bExists = true;
					}
					return locals.bExists;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnHalterNr = locals.pnHalterNr;
					nDMLeis = locals.nDMLeis;
					nDMArzn = locals.nDMArzn;
					nDMMahn = locals.nDMMahn;
					nDMZins = locals.nDMZins;
					nZaLeis = locals.nZaLeis;
					nZaArzn = locals.nZaArzn;
					nZaMahn = locals.nZaMahn;
					nZaZins = locals.nZaZins;
					nRestDM = locals.nRestDM;
					nMahnstufe = locals.nMahnstufe;
					dtVerjDat = locals.dtVerjDat;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnRZNr"></param>
		/// <returns></returns>
		public SalBoolean GetRaZa(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, ref SalNumber pnRZNr)
		{
			#region Local Variables
			SqlLocals.GetRaZaLocals locals = new SqlLocals.GetRaZaLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnHalterNr = pnHalterNr;
					locals.pnRechNr = pnRechNr;
					locals.pnRZNr = pnRZNr;

					App.frmMain.nRZNr = 0;
					if (locals.pnHalterNr != 0) 
					{
						locals.phSql.PrepareAndExecute(@"
SELECT rznr
FROM rz, rzp
INTO :pnRZNr
WHERE rzparztnr = :pnArztNr
AND rzphalternr = :pnHalterNr
AND rzprechnr = :pnRechNr
AND rznr=rzpnr AND rzkuenddat IS NULL AND rzaktivdat IS NOT NULL AND rzdeaktiv IS NULL");
					}
					else
					{
						locals.phSql.PrepareAndExecute(@"
SELECT rznr
FROM rz, rzp
INTO :pnRZNr
WHERE rzparztnr = :pnArztNr
AND rzprechnr = :pnRechNr
AND rznr=rzpnr AND rzkuenddat IS NULL AND rzaktivdat IS NOT NULL AND rzdeaktiv IS NULL");
					}
					if (locals.phSql.FetchNext(ref locals.nInd)) 
					{
						Var.bExists = true;
					}
					return Var.bExists;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnRZNr = locals.pnRZNr;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRestDM"></param>
		/// <returns></returns>
		public SalBoolean GetGesamtOP(SalSqlHandle phSql, SalNumber pnArztNr, ref SalNumber pnHalterNr, ref SalNumber pnRestDM)
		{
			#region Local Variables
			SqlLocals.GetGesamtOPLocals locals = new SqlLocals.GetGesamtOPLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnHalterNr = pnHalterNr;
					locals.pnRestDM = pnRestDM;

					locals.phSql.PrepareAndExecute("SELECT ANR2 INTO :nArzt2 FROM A WHERE AARZTNR = :pnArztNr");
					// 30.10.06 F72
					locals.nInd = locals.phSql.FetchNext();

					if (locals.nArzt2 == 0) 
					{
						locals.nArzt2 = locals.pnArztNr;
					}
					locals.phSql.PrepareAndExecute(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
from rk into :pnRestDM where rkhalternr=:pnHalterNr
and rkarztnr in ( :pnArztNr, :nArzt2)
and rkkzzahl <2 AND rkdeaktiv IS NULL");
					if (locals.phSql.FetchNext(ref locals.nInd)) 
					{
						locals.bExists = true;
					}
					return locals.bExists;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnHalterNr = locals.pnHalterNr;
					pnRestDM = locals.pnRestDM;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnMGAusbuchen"></param>
		/// <param name="pnKleinBetrag"></param>
		/// <returns></returns>
		public SalNumber GetAusbuchen(SalSqlHandle phSql, SalNumber pnArztNr, ref SalNumber pnMGAusbuchen, ref SalNumber pnKleinBetrag)
		{
			#region Local Variables
			SqlLocals.GetAusbuchenLocals locals = new SqlLocals.GetAusbuchenLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnMGAusbuchen = pnMGAusbuchen;
					locals.pnKleinBetrag = pnKleinBetrag;

					if (locals.phSql.PrepareAndExecute(@"
SELECT amgausbuchen, akleinbetrag
FROM A
INTO :pnMGAusbuchen, :pnKleinBetrag
WHERE AARZTNR = :pnArztNr")) 
					{
						locals.nInd = locals.phSql.FetchNext();
					}

					return 0;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnMGAusbuchen = locals.pnMGAusbuchen;
					pnKleinBetrag = locals.pnKleinBetrag;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnSkonto"></param>
		/// <returns></returns>
		public SalNumber GetHalterAusbuchen(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, ref SalNumber pnSkonto)
		{
			#region Local Variables
			SqlLocals.GetHalterAusbuchenLocals locals = new SqlLocals.GetHalterAusbuchenLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnHalterNr = pnHalterNr;
					locals.pnSkonto = pnSkonto;

					if (locals.phSql.PrepareAndExecute(@"
SELECT hskonto
FROM H
INTO :pnSkonto
WHERE HARZTNR = :pnArztNr
AND HHALTERNR = :pnHalterNr")) 
					{
						locals.nInd = locals.phSql.FetchNext();
					}

					return 0;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnSkonto = locals.pnSkonto;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnTVSMahnGeb"></param>
		/// <param name="pnTVSMahnDM1"></param>
		/// <param name="pnTVSMahnDM2"></param>
		/// <param name="pnTVSMahnDM3"></param>
		/// <returns></returns>
		public SalNumber GetMahngeb(SalSqlHandle phSql, SalNumber pnArztNr, ref SalNumber pnTVSMahnGeb, ref SalNumber pnTVSMahnDM1, ref SalNumber pnTVSMahnDM2, ref SalNumber pnTVSMahnDM3)
		{
			#region Local Variables
			SqlLocals.GetMahngebLocals locals = new SqlLocals.GetMahngebLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnTVSMahnGeb = pnTVSMahnGeb;
					locals.pnTVSMahnDM1 = pnTVSMahnDM1;
					locals.pnTVSMahnDM2 = pnTVSMahnDM2;
					locals.pnTVSMahnDM3 = pnTVSMahnDM3;

					if (locals.phSql.PrepareAndExecute(@"
SELECT mgdmtvs, mgdm1, mgdm2, mgdm3
FROM MG
INTO :pnTVSMahnGeb, :pnTVSMahnDM1, :pnTVSMahnDM2, :pnTVSMahnDM3
WHERE MGARZTNR = :pnArztNr")) 
					{
						if (!(locals.phSql.FetchNext(ref locals.nInd))) 
						{
							if (locals.phSql.PrepareAndExecute(@"
SELECT mgdmtvs, mgdm1, mgdm2, mgdm3
FROM MG
INTO :pnTVSMahnGeb, :pnTVSMahnDM1, :pnTVSMahnDM2, :pnTVSMahnDM3
WHERE MGARZTNR = 0")) 
							{
								locals.nInd = locals.phSql.FetchNext();
							}
						}
					}

					return 0;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnTVSMahnGeb = locals.pnTVSMahnGeb;
					pnTVSMahnDM1 = locals.pnTVSMahnDM1;
					pnTVSMahnDM2 = locals.pnTVSMahnDM2;
					pnTVSMahnDM3 = locals.pnTVSMahnDM3;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnKZMwSt"></param>
		/// <returns></returns>
		public SalNumber GetMehrwertsteuer(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, ref SalNumber pnKZMwSt)
		{
			#region Local Variables
			SqlLocals.GetMehrwertsteuerLocals locals = new SqlLocals.GetMehrwertsteuerLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnHalterNr = pnHalterNr;
					locals.pnRechNr = pnRechNr;
					locals.pnKZMwSt = pnKZMwSt;

					if (locals.phSql.PrepareAndExecute(@"
SELECT rkkzmwst
FROM RK
INTO :pnKZMwSt
WHERE rkarztnr = :pnArztNr
AND rkhalternr = :pnHalterNr
AND rkrechnr = :pnRechNr")) 
					{
						locals.nInd = locals.phSql.FetchNext();
					}

					return 0;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnKZMwSt = locals.pnKZMwSt;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnRestL"></param>
		/// <param name="pnRestA"></param>
		/// <param name="pnRestM"></param>
		/// <param name="pnRestZ"></param>
		/// <returns></returns>
		public SalNumber GetRest(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnRechNr, SalNumber pnRestL, SalNumber pnRestA, SalNumber pnRestM, SalNumber pnRestZ)
		{
			#region Local Variables
			SqlLocals.GetRestLocals locals = new SqlLocals.GetRestLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnRechNr = pnRechNr;
				locals.pnRestL = pnRestL;
				locals.pnRestA = pnRestA;
				locals.pnRestM = pnRestM;
				locals.pnRestZ = pnRestZ;

				if (locals.phSql.PrepareAndExecute(@"
SELECT (rkdmleis-rkzaleis), (rkdmarzn-rkzaarzn), (rkdmmahn-rkzamahn), (rkdmzins-rkzazins)
FROM RK
INTO :pnRestL, :pnRestA, :pnRestM, :pnRestZ
WHERE  rkarztnr = :pnArztNr
AND rkrechnr = :pnRechNr")) 
				{
					locals.nInd = locals.phSql.FetchNext();
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnProzNr"></param>
		/// <returns></returns>
		public SalNumber GetProzNr(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, ref SalNumber pnProzNr)
		{
			#region Local Variables
			SqlLocals.GetProzNrLocals locals = new SqlLocals.GetProzNrLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnHalterNr = pnHalterNr;
					locals.pnRechNr = pnRechNr;
					locals.pnProzNr = pnProzNr;

					if (locals.pnRechNr >= 999990)  // 07.01.99
					{
						// If SqlPrepareAndExecute( phSql, '
						// SELECT prnr
						// FROM pr
						// INTO :pnProzNr
						// WHERE pra1 = :pnArztNr AND prhalternr = :pnHalterNr AND prrechnr = :pnRechNr')
						// Call SqlFetchNext( phSql, nInd )
					}
					else
					{
						// 15.12.15 F1079	war bisher nur in frmZahlHalter drin
						// If SqlPrepareAndExecute( phSql, '
						// SELECT prdnr
						// FROM prd
						// INTO :pnProzNr
						// WHERE prdarztnr = :pnArztNr AND prdrechnr = :pnRechNr')
						// Call SqlFetchNext( phSql, nInd )
						if (locals.phSql.PrepareAndExecute(@"
SELECT prdnr
FROM prd
INTO :pnProzNr
WHERE prdarztnr = :pnArztNr AND prdrechnr = :pnRechNr  AND prdnr NOT IN (SELECT mbnr FROM mb)")) 
						{
							locals.nInd = locals.phSql.FetchNext();
						}
					}

					return 0;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnProzNr = locals.pnProzNr;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnProzNr"></param>
		/// <param name="pnDMOP"></param>
		/// <returns></returns>
		public SalNumber GetProzOP(SalSqlHandle phSql, SalNumber pnProzNr, ref SalNumber pnDMOP)
		{
			#region Local Variables
			SqlLocals.GetProzOPLocals locals = new SqlLocals.GetProzOPLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnProzNr = pnProzNr;
					locals.pnDMOP = pnDMOP;

					// If SqlPrepareAndExecute( phSql, '
					// SELECT prhalternr, pra1, prr1, pra2, prr2, pra3, prr3, pra4, prr4, pra5, prr5, pra6, prr6
					// FROM pr
					// INTO :frmAusbatch.nH, :frmAusbatch.nA1, :frmAusbatch.nR1,
					// :frmAusbatch.nA2, :frmAusbatch.nR2,
					// :frmAusbatch.nA3, :frmAusbatch.nR3,
					// :frmAusbatch.nA4, :frmAusbatch.nR4,
					// :frmAusbatch.nA5, :frmAusbatch.nR5,
					// :frmAusbatch.nA6, :frmAusbatch.nR6
					// WHERE prnr = :pnProzNr')
					// Call SqlFetchNext( phSql, nInd )
					// Set strpSelect = 'SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
					// INTO :pnDMOP
					// FROM pr,rk
					// WHERE rkhalternr = :frmAusbatch.nH AND rkkzzahl<2 and  prnr=:pnProzNr and  ('
					// If nR1 != NUMBER_Null
					// Set strpSelect = strpSelect || '(pra1 = :frmAusbatch.nA1 AND prr1 = :frmAusbatch.nR1) OR '
					// If nR2 != NUMBER_Null
					// Set strpSelect = strpSelect || '(pra2 = :frmAusbatch.nA2 AND prr2 = :frmAusbatch.nR2) OR '
					// If nR3 != NUMBER_Null
					// Set strpSelect = strpSelect || '(pra3 = :frmAusbatch.nA3 AND prr3 = :frmAusbatch.nR3) OR '
					// If nR4 != NUMBER_Null
					// Set strpSelect = strpSelect || '(pra4 = :frmAusbatch.nA4 AND prr4 = :frmAusbatch.nR4) OR '
					// If nR5 != NUMBER_Null
					// Set strpSelect = strpSelect || '(pra5 = :frmAusbatch.nA5 AND prr5 = :frmAusbatch.nR5) OR '
					// If nR6 != NUMBER_Null
					// Set strpSelect = strpSelect || '(pra6 = :frmAusbatch.nA6 AND prr6 = :frmAusbatch.nR6) OR '
					// Set strpSelect = SalStrLeftX(strpSelect, SalStrLength(strpSelect)-3) || ')'
					// If SqlPrepareAndExecute( phSql, strpSelect)
					// Call SqlFetchNext( phSql, nInd )
					// 12.03.02
					locals.strpSelect = @"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
INTO :pnDMOP
FROM prd,rk
WHERE prdnr = :pnProzNr AND prdarztnr=rkarztnr AND prdhalternr=rkhalternr AND prdrechnr=rkrechnr AND rkkzzahl<2 AND rkdeaktiv IS NULL";
					if (locals.phSql.PrepareAndExecute(locals.strpSelect)) 
					{
						locals.nInd = locals.phSql.FetchNext();
					}

					return 0;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnDMOP = locals.pnDMOP;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnProzNr"></param>
		/// <returns></returns>
		public SalNumber UpdateProzBez(SalSqlHandle phSql, SalNumber pnProzNr)
		{
			#region Local Variables
			SqlLocals.UpdateProzBezLocals locals = new SqlLocals.UpdateProzBezLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnProzNr = pnProzNr;

				locals.pdtDatum = SalDateTime.Current;
				if (locals.phSql.PrepareAndExecute(@"
UPDATE pr SET
prbezahlt = :pdtDatum
WHERE prnr = :pnProzNr")) 
				{
					locals.phSql.Commit();
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnMahnAnz"></param>
		/// <returns></returns>
		public SalNumber GetMahnAnz(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnRechNr, ref SalNumber pnMahnAnz)
		{
			#region Local Variables
			SqlLocals.GetMahnAnzLocals locals = new SqlLocals.GetMahnAnzLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnRechNr = pnRechNr;
					locals.pnMahnAnz = pnMahnAnz;

					// 20.12.17 F3068 +
					// AND madmgeb>0
					if (locals.phSql.PrepareAndExecute(@"
SELECT COUNT(*)
FROM ma
INTO :pnMahnAnz
WHERE MAARZTNR = :pnArztNr
AND MARECHNR = :pnRechNr
AND madmgeb>0")) 
					{
						locals.nInd = locals.phSql.FetchNext();
					}

					return 0;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnMahnAnz = locals.pnMahnAnz;

				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnZahlDM"></param>
		/// <returns></returns>
		public SalNumber CheckRechAb(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, SalNumber pnZahlDM)
		{
			#region Local Variables
			SqlLocals.CheckRechAbLocals locals = new SqlLocals.CheckRechAbLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;
				locals.pnZahlDM = pnZahlDM;

				Sql.Exists(@"
SELECT *
FROM ra
WHERE raarztnr = :pnArztNr AND rahalternr = :pnHalterNr AND rarechnr = :pnRechNr", ref locals.bExists);
				if (locals.bExists) 
				{
					if (locals.phSql.PrepareAndExecute(@"
SELECT hti, hvn, hnn, hname2, hstr, hort, hland
FROM h
INTO :pstrTHTi, :pstrTHVN, :pstrTHNN, :pstrTHN2, :pstrTHStr, :pstrTHOrt, :pstrTHLand
WHERE harztnr = :pnArztNr
AND hhalternr = :pnHalterNr")) 
					{
						locals.nInd = locals.phSql.FetchNext();
					}
					// 10.04.06 Ländercodes
					locals.pstrTHLand = Int.PalPruefeLC(locals.pstrTHLand, 0);

					// 06.08.08
					if (Var.bfrmBriefVari) 
					{
						while (!(App.frmBriefVari.DestroyWindow())) 
						{
						}
					}

					frmBriefVari.CreateWindow(Sys.hWndNULL, locals.pnArztNr, locals.pnHalterNr, locals.pnRechNr, "R", @"Sehr geehrte Damen und Herren,

heute wurde bei uns für die Rechnung " + locals.pnArztNr.ToString(0) + "/R" + locals.pnRechNr.ToString(0) + @"
eine Zahlung in Höhe von EUR " + locals.pnZahlDM.ToString(2) + @" gebucht.

Der Schuldner ist :

" + locals.pstrTHTi + locals.pstrTHVN + " " + locals.pstrTHNN + @"
" + locals.pstrTHN2 + @"
" + locals.pstrTHStr + @"
" + locals.pstrTHOrt + @"
" + locals.pstrTHLand + @"


Wir bitten um Beachtung !", new SalDateTime(1900,1, 1), "", "", "", "", "", false);
					Sal.MessageBox("Ok wenn gedruckt", "Druck Ok?", Sys.MB_Ok);
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnZahlDM"></param>
		/// <returns></returns>
		public SalNumber BriefMS7(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, SalNumber pnZahlDM)
		{
			#region Local Variables
			SqlLocals.BriefMS7Locals locals = new SqlLocals.BriefMS7Locals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;
				locals.pnZahlDM = pnZahlDM;

				if (locals.phSql.PrepareAndExecute(@"
SELECT hti, hvn, hnn, hname2, hstr, hort, hland
FROM h
INTO :pstrTHTi, :pstrTHVN, :pstrTHNN, :pstrTHN2, :pstrTHStr, :pstrTHOrt, :pstrTHLand
WHERE harztnr = :pnArztNr
AND hhalternr = :pnHalterNr")) 
				{
					locals.nInd = locals.phSql.FetchNext();
				}
				// 10.04.06 Ländercodes
				locals.pstrTHLand = Int.PalPruefeLC(locals.pstrTHLand, 0);

				// 06.08.08
				if (Var.bfrmBriefVari) 
				{
					while (!(App.frmBriefVari.DestroyWindow())) 
					{
					}
				}

				frmBriefVari.CreateWindow(this, locals.pnArztNr, locals.pnHalterNr, locals.pnRechNr, "A", @"Sehr geehrte Damen und Herren,

heute wurde bei uns für die Rechnung " + locals.pnArztNr.ToString(0) + "/R" + locals.pnRechNr.ToString(0) + @"
eine Zahlung in Höhe von EUR " + locals.pnZahlDM.ToString(2) + @" gebucht.

Der Schuldner ist :

" + locals.pstrTHTi + locals.pstrTHVN + " " + locals.pstrTHNN + @"
" + locals.pstrTHN2 + @"
" + locals.pstrTHStr + @"
" + locals.pstrTHOrt + @"
" + locals.pstrTHLand + @"


Wir bitten um Beachtung !", new SalDateTime(1900, 1, 1), "", "", "", "", "", false);
				Sal.MessageBox("Ok wenn gedruckt", "Druck Ok?", Sys.MB_Ok);

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnFertig"></param>
		/// <param name="pstrBankKonto"></param>
		/// <param name="pnHaben"></param>
		/// <param name="pnBelNr"></param>
		/// <param name="pdtBelDat"></param>
		/// <param name="pstrBuchText"></param>
		/// <param name="pnDiverse"></param>
		/// <param name="pnTyp"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnExportNr">02.08.23 Ä2126</param>
		/// <returns></returns>
		public SalNumber InsertFiBu(SalSqlHandle phSql, SalNumber pnFertig, SalString pstrBankKonto, SalNumber pnHaben, SalNumber pnBelNr, SalDateTime pdtBelDat, SalString pstrBuchText, SalNumber pnDiverse, SalNumber pnTyp, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, SalNumber pnExportNr)
		{
			#region Local Variables
			SqlLocals.InsertFiBuLocals locals = new SqlLocals.InsertFiBuLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnFertig = pnFertig;
				locals.pstrBankKonto = pstrBankKonto;
				locals.pnHaben = pnHaben;
				locals.pnBelNr = pnBelNr;
				locals.pdtBelDat = pdtBelDat;
				locals.pstrBuchText = pstrBuchText;
				locals.pnDiverse = pnDiverse;
				locals.pnTyp = pnTyp;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;
				locals.pnExportNr = pnExportNr;

				if (locals.phSql.PrepareAndExecute(@"
INSERT INTO FI
( fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiarztnr, fihalternr, firechnr, fiexportnr )
VALUES
( :pnFertig, :pstrBankKonto, :pnHaben, :pnBelNr, :pdtBelDat, :pstrBuchText, :pnDiverse, :pnTyp, :pnArztNr, :pnHalterNr, :pnRechNr, :pnExportNr )")) 
				{
					locals.phSql.Commit();
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnProzNr"></param>
		/// <param name="pnKZZahl"></param>
		/// <param name="pnBelNr"></param>
		/// <param name="pnBuchDM"></param>
		/// <param name="pdtBuchDat"></param>
		/// <param name="pnRZNr"></param>
		/// <returns></returns>
		public SalNumber InsertZahlung(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, SalNumber pnProzNr, SalNumber pnKZZahl, SalNumber pnBelNr, SalNumber pnBuchDM, SalDateTime pdtBuchDat, SalNumber pnRZNr)
		{
			#region Local Variables
			SqlLocals.InsertZahlungLocals locals = new SqlLocals.InsertZahlungLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;
				locals.pnProzNr = pnProzNr;
				locals.pnKZZahl = pnKZZahl;
				locals.pnBelNr = pnBelNr;
				locals.pnBuchDM = pnBuchDM;
				locals.pdtBuchDat = pdtBuchDat;
				locals.pnRZNr = pnRZNr;

				// 13.05.14 F2027
				locals.pnHalterNr = Int.PalCheckNULL(locals.pnHalterNr);

				// 26.03.19 Ä1844 + , zaerfdat
				if (locals.phSql.PrepareAndExecute(@"
INSERT INTO ZA
( zaarztnr, zahalternr, zarechnr, zakz, zabuchdat, zabelegnr, zadm, zaproznr, zarznr, zaerfdat )
VALUES
( :pnArztNr, :pnHalterNr, :pnRechNr, :pnKZZahl, :pdtBuchDat, :pnBelNr, :pnBuchDM, :pnProzNr, :pnRZNr, SYSDATETIME )")) 
				{
					locals.phSql.Commit();
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pstrBuchText"></param>
		/// <param name="pnBelNr"></param>
		/// <param name="pdtBuchDat"></param>
		/// <param name="pnZahlLeis"></param>
		/// <param name="pnZahlArzn"></param>
		/// <param name="pnZahlMahn"></param>
		/// <param name="pnZahlZins"></param>
		/// <param name="pnRPMwSt"></param>
		/// <param name="pnMwSatz"></param>
		/// <param name="pnKZZahl"></param>
		/// <param name="pnDummyHaben"></param>
		/// <param name="pnReverseVersion"></param>
		/// <param name="pnDMMahn">22.08.22 Ä2015</param>
		/// <param name="pnDMRech">22.08.22 Ä2015</param>
		/// <param name="pstrKontoCode">14.11.23 Ä2144 +Kontierung</param>
		/// <returns></returns>
		public SalNumber InsertKonto(
					SalSqlHandle phSql, 
					SalNumber pnArztNr, 
					SalNumber pnHalterNr, 
					SalNumber pnRechNr, 
					SalString pstrBuchText, 
					SalNumber pnBelNr, 
					SalDateTime pdtBuchDat, 
					SalNumber pnZahlLeis, 
					SalNumber pnZahlArzn, 
					SalNumber pnZahlMahn, 
					SalNumber pnZahlZins, 
					SalNumber pnRPMwSt, 
					SalNumber pnMwSatz, 
					SalNumber pnKZZahl, 
					SalNumber pnDummyHaben, 
					SalNumber pnReverseVersion, 
					SalNumber pnDMMahn, 
					SalNumber pnDMRech, 
					SalString pstrKontoCode)
		{
			#region Local Variables
			SqlLocals.InsertKontoLocals locals = new SqlLocals.InsertKontoLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;
				locals.pstrBuchText = pstrBuchText;
				locals.pnBelNr = pnBelNr;
				locals.pdtBuchDat = pdtBuchDat;
				locals.pnZahlLeis = pnZahlLeis;
				locals.pnZahlArzn = pnZahlArzn;
				locals.pnZahlMahn = pnZahlMahn;
				locals.pnZahlZins = pnZahlZins;
				locals.pnRPMwSt = pnRPMwSt;
				locals.pnMwSatz = pnMwSatz;
				locals.pnKZZahl = pnKZZahl;
				locals.pnDummyHaben = pnDummyHaben;
				locals.pnReverseVersion = pnReverseVersion;
				locals.pnDMMahn = pnDMMahn;
				locals.pnDMRech = pnDMRech;
				locals.pstrKontoCode = pstrKontoCode;

				// 22.02.07 F132
				if (locals.pnDummyHaben != 0 || locals.pnDMRech != 0 || locals.pnDMMahn != 0) 
				{
					// 22.08.22 Ä2015 + tkdmmahn
					// 14.11.23 Ä2144 +Kontierung
					if (locals.phSql.PrepareAndExecute(@"
INSERT INTO TK
( tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tkdmmahn, tksoll, tkhaben, tkreverseversion, tkkontocode )
VALUES
( :pnArztNr, 1, 0, :pstrBuchText, :pnHalterNr, :pnRechNr, :pnBelNr, :pdtBuchDat,
0, 0, 1, 0, :pnZahlLeis, :pnZahlArzn, :pnZahlMahn, :pnZahlZins,
:pnRPMwSt, :pnMwSatz, :pnKZZahl, 0, :pnDMRech, :pnDMMahn, 0, :pnDummyHaben, :pnReverseVersion, :pstrKontoCode )")) 
					{
						locals.phSql.Commit();
					}
				}

				return 0;
			}
			#endregion
		}
		// Function: RatenZahlung
		// Description:
		// Returns
		// Parameters
		// Sql Handle: phSql
		// Number: pnArztNr
		// Number: pnHalterNr
		// Number: pnBuchDM
		// Static Variables
		// Local variables
		// Boolean: bExists
		// Date/Time: dtRatDat
		// Number: nRatMtl
		// Number: nIndRat
		// Number: nRestDM
		// Number: nArztNr2
		// Actions
		// 14.02.01
		// Call SqlExists( '
		// SELECT *
		// FROM r
		// WHERE rarztnr = :pnArztNr
		// AND rhalternr = :pnHalterNr', bExists )
		// If Not bExists
		// If SqlPrepareAndExecute( phSql, '
		// SELECT anr2
		// FROM a
		// WHERE aarztnr = :pnArztNr
		// INTO :nArztNr2')
		// Call SqlFetchNext( phSql, nIndRat )
		// Call SqlExists( '
		// SELECT *
		// FROM r
		// WHERE rarztnr = :nArztNr2
		// AND rhalternr = :pnHalterNr', bExists )
		// If bExists
		// Set pnArztNr = nArztNr2
		// If bExists
		// If GetGesamtOP( hSqlBankZahl, pnArztNr, pnHalterNr, nRestDM)
		// If nRestDM > pnBuchDM
		// If SqlPrepareAndExecute(phSql, '
		// SELECT rmtl INTO :nRatMtl FROM R
		// WHERE rarztnr = :pnArztNr
		// AND rhalternr = :pnHalterNr' )
		// Call SqlFetchNext( phSql, nIndRat )
		// Set dtRatDat = SalDateCurrent() + nRatMtl*30
		// If SqlPrepareAndExecute( phSql, '
		// UPDATE r SET
		// r1 = :dtRatDat
		// WHERE  rarztnr = :pnArztNr
		// AND rhalternr = :pnHalterNr' )
		// Call SqlCommit( phSql )
		// Else
		// Call PalLog('RaZa autom. gekündigt: Ha.'
		// || PalStrNum(pnArztNr, 4, 0) || '/' || PalStrNum(pnHalterNr, 5,0))
		// If SqlPrepareAndExecute( phSql, '
		// DELETE FROM r
		// WHERE  rarztnr = :pnArztNr
		// AND rhalternr = :pnHalterNr' )
		// Call SqlCommit( phSql )
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnKZZahl"></param>
		/// <param name="pnZaLeis"></param>
		/// <param name="pnZaArzn"></param>
		/// <param name="pnZaMahn"></param>
		/// <param name="pnZaZins"></param>
		/// <param name="pnMahnstufe"></param>
		/// <param name="pdtTeilzDat"></param>
		/// <param name="pdtVerjDat"></param>
		/// <returns></returns>
		public SalNumber UpdateRechnung(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, SalNumber pnKZZahl, SalNumber pnZaLeis, SalNumber pnZaArzn, SalNumber pnZaMahn, SalNumber pnZaZins, SalNumber pnMahnstufe, SalDateTime pdtTeilzDat, SalDateTime pdtVerjDat)
		{
			#region Local Variables
			SqlLocals.UpdateRechnungLocals locals = new SqlLocals.UpdateRechnungLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;
				locals.pnKZZahl = pnKZZahl;
				locals.pnZaLeis = pnZaLeis;
				locals.pnZaArzn = pnZaArzn;
				locals.pnZaMahn = pnZaMahn;
				locals.pnZaZins = pnZaZins;
				locals.pnMahnstufe = pnMahnstufe;
				locals.pdtTeilzDat = pdtTeilzDat;
				locals.pdtVerjDat = pdtVerjDat;

				if (locals.pnRechNr >= 999990) 
				{
					if (locals.phSql.PrepareAndExecute(@"
UPDATE RK SET
rkkzzahl = :pnKZZahl,
rkzaleis = :pnZaLeis,
rkzaarzn = :pnZaArzn,
rkmbzaopl = :pnZaMahn,
rkzazins = :pnZaZins,
rkteilzdat = :pdtTeilzDat
WHERE rkarztnr = :pnArztNr
AND rkhalternr = :pnHalterNr
AND rkrechnr = :pnRechNr")) 
					{
						locals.phSql.Commit();
					}
				}
				else
				{
					locals.pdtDatum = new SalDateTime(locals.pdtTeilzDat.Year() + 2, locals.pdtTeilzDat.Month(), locals.pdtTeilzDat.Day(), 0, 0, 0);
					if (locals.pdtDatum > locals.pdtVerjDat) 
					{
						locals.pdtVerjDat = locals.pdtDatum;
					}
					if (locals.phSql.PrepareAndExecute(@"
UPDATE RK SET
rkkzzahl = :pnKZZahl,
rkzaleis = :pnZaLeis,
rkzaarzn = :pnZaArzn,
rkzamahn = :pnZaMahn,
rkzazins = :pnZaZins,
rkteilzdat = :pdtTeilzDat,
rkmahnstufe = :pnMahnstufe,
rkverjaehr = :pdtVerjDat
WHERE rkarztnr = :pnArztNr
AND rkhalternr = :pnHalterNr
AND rkrechnr = :pnRechNr")) 
					{
						locals.phSql.Commit();
					}
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnProzMwSt"></param>
		/// <param name="pnDiverse"></param>
		/// <param name="pnRP1MwSt"></param>
		/// <param name="pstrLA"></param>
		/// <param name="pnReverseVersion"></param>
		/// <param name="pnRPZahl"></param>
		/// <returns></returns>
		public SalNumber UpdateRechPosition(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnRechNr, SalNumber pnProzMwSt, SalNumber pnDiverse, SalNumber pnRP1MwSt, SalString pstrLA, SalNumber pnReverseVersion, SalNumber pnRPZahl)
		{
			#region Local Variables
			SqlLocals.UpdateRechPositionLocals locals = new SqlLocals.UpdateRechPositionLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnRechNr = pnRechNr;
				locals.pnProzMwSt = pnProzMwSt;
				locals.pnDiverse = pnDiverse;
				locals.pnRP1MwSt = pnRP1MwSt;
				locals.pstrLA = pstrLA;
				locals.pnReverseVersion = pnReverseVersion;
				locals.pnRPZahl = pnRPZahl;

				// 02.12.14 Ä1104
				if (locals.pnReverseVersion == SalNumber.Null || locals.pnReverseVersion == 0) 
				{
					locals.pnSelect = @"SELECT ROWID
FROM RP
INTO :strROWIDLocal
WHERE rparztnr = :pnArztNr
AND rprechnr = :pnRechNr
AND rpmwst = :pnProzMwSt
AND rpla = :pstrLA
AND (rpreverseversion IS NULL or rpreverseversion = 0)";
				}
				else
				{
					locals.pnSelect = @"SELECT ROWID
FROM RP
INTO :strROWIDLocal
WHERE rparztnr = :pnArztNr
AND rprechnr = :pnRechNr
AND rpmwst = :pnProzMwSt
AND rpla = :pstrLA
AND rpreverseversion = :pnReverseVersion";
				}

				if (locals.phSql.PrepareAndExecute(locals.pnSelect)) 
				{
					if (locals.phSql.FetchNext(ref locals.nInd)) 
					{
						// 02.12.14 Ä1104 fehler gefunden: rpdmzahl = ( :pnDiverse - :pnRP1MwSt ) -> rpdmzahl = rpdmzahl + ( :pnDiverse - :pnRP1MwSt )
						locals.pnDiverse = locals.pnRPZahl + (locals.pnDiverse - locals.pnRP1MwSt);
						if (locals.phSql.PrepareAndExecute(@"
UPDATE RP SET
rpdmzahl = :pnDiverse
WHERE ROWID = :strROWIDLocal")) 
						{
							locals.phSql.Commit();
						}
					}
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// buchen einer Zahlung
		/// </summary>
		/// <param name="strMA">Buchung: M=manuell A=automatisch</param>
		/// <param name="nArztNr"></param>
		/// <param name="nHalterNr"></param>
		/// <param name="nRechNr"></param>
		/// <param name="nProzNrX"></param>
		/// <param name="nZahlDMX"></param>
		/// <param name="dtBuchDatX"></param>
		/// <param name="strBankKontoX"></param>
		/// <param name="nBelNrX"></param>
		/// <param name="nBuchungsDM"></param>
		/// <param name="nRestLX"></param>
		/// <param name="nRestAX"></param>
		/// <param name="nRestMX"></param>
		/// <param name="nRestZX"></param>
		/// <param name="nExportNrX">02.08.23 Ä2126</param>
		/// <returns></returns>
		public SalString ZahlungBuchen(SalString strMA, SalNumber nArztNr, SalNumber nHalterNr, SalNumber nRechNr, SalNumber nProzNrX, SalNumber nZahlDMX, SalDateTime dtBuchDatX, SalString strBankKontoX, SalNumber nBelNrX, ref SalNumber nBuchungsDM, ref SalNumber nRestLX, ref SalNumber nRestAX, ref SalNumber nRestMX, ref SalNumber nRestZX, SalNumber nExportNrX)
		{
			#region Local Variables
			SqlLocals.ZahlungBuchenLocals locals = new SqlLocals.ZahlungBuchenLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.strMA = strMA;
					locals.nArztNr = nArztNr;
					locals.nHalterNr = nHalterNr;
					locals.nRechNr = nRechNr;
					locals.nProzNrX = nProzNrX;
					locals.nZahlDMX = nZahlDMX;
					locals.dtBuchDatX = dtBuchDatX;
					locals.strBankKontoX = strBankKontoX;
					locals.nBelNrX = nBelNrX;
					locals.nBuchungsDM = nBuchungsDM;
					locals.nRestLX = nRestLX;
					locals.nRestAX = nRestAX;
					locals.nRestMX = nRestMX;
					locals.nRestZX = nRestZX;
					locals.nExportNrX = nExportNrX;

					locals.nBuchungsDM = 0;
					this.SetStatusBarText("Rech-Nr.: " + locals.nArztNr.ToString(0) + "/" + locals.nHalterNr.ToString(0) + "/" + locals.nRechNr.ToString(0));
					// If nZahlDMX < 0		! 25.06.03 entfernt
					// Set strReturn = 'nicht gebucht / Minusbetrag'
					// Return strReturn
					// Hole Rechnung
					if (!(GetRechnung(hSqlBankZahl, locals.nArztNr, ref locals.nHalterNr, locals.nRechNr, ref locals.nDMLeis, ref locals.nDMArzn, ref locals.nDMMahn, ref locals.nDMZins, ref locals.nZaLeis, ref locals.nZaArzn, ref locals.nZaMahn, ref locals.nZaZins, ref 
						locals.nRestDM, ref locals.nMahnstufe, ref locals.dtVerjDat))) 
					{
						locals.strReturn = "nicht gebucht / Rechnung nicht vorhanden";
						return locals.strReturn;
					}
					// Hole ProzNr		10.12.98
					// 19.07.01
					locals.nProzNr = locals.nProzNrX;
					if (locals.nRechNr < 999990) 
					{
						GetProzNr(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, ref locals.nProzNr);
					}
					// Hole MGAusbuchen + Kl.Betrag
					if (locals.nRechNr >= 999990 || locals.nMahnstufe == 9) 
					{
						locals.nMGAusbuchen = 0;
						locals.nKleinBetrag = 0;
						locals.nSkonto = 0;
					}
					else
					{
						GetAusbuchen(hSqlBankZahl, locals.nArztNr, ref locals.nMGAusbuchen, ref locals.nKleinBetrag);
						GetHalterAusbuchen(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, ref locals.nSkonto);
					}
					// Hole TVS-Mahngeb.
					if (locals.nRechNr >= 999990) 
					{
						locals.nTVSMahnGeb = 0;
					}
					else
					{
						GetMahngeb(hSqlBankZahl, locals.nArztNr, ref locals.nTVSMahnGeb, ref locals.nTVSDM1, ref locals.nTVSDM2, ref locals.nTVSDM3);
					}
					// 31.07.23 F5031
					locals.nTVSMahnGebjeMg = locals.nTVSMahnGeb;
					// 15.05.00
					GetMahnAnz(hSqlBankZahl, locals.nArztNr, locals.nRechNr, ref locals.nMahnAnz);
					locals.nTVSMahnGeb = locals.nTVSMahnGeb * locals.nMahnAnz;
					// If nMahnstufe > 3
					// Set nTVSMahnGeb = nTVSMahnGeb * 3
					// Else
					// Set nTVSMahnGeb = nTVSMahnGeb * nMahnstufe

					// Sonderfall 11/94
					locals.bSonder = false;
					// If nMahnstufe>0 and nMahnstufe<4 and nDMMahn<(nMahnstufe*4)
					// Set bSonder = TRUE
					// Set nDMMahn = nDMMahn + 4
					// Call SqlImmedX('UPDATE rk SET rkdmmahn = rkdmmahn + 4
					// WHERE rkarztnr = ' || SalNumberToStrX(nArzt,0) || '
					// AND rkhalternr = ' || SalNumberToStrX(nHalter,0) || '
					// AND rkrechnr = ' || SalNumberToStrX(nRech,0))
					// Wenn MG bereits bezahlt sind, nTVSMahnGeb = 0
					if (locals.nDMMahn - locals.nZaMahn <= 0) 
					{
						locals.nTVSMahnGeb = 0;
					}

					locals.nBuchDM = 0.00m;
					locals.nAusbuchDM = 0.00m;
					locals.nKZZahl = 0;
					// 31.07.23 F5031
					// If nTVSMahnGeb > 0
					// Set nMahnstufeDummy = nMahnstufe
					// Set nRestDMDummy = nRestDM + nZaMahn
					// If nMahnstufeDummy > 3
					// Set nMahnstufeDummy = 3
					// If nMahnstufeDummy = 3 and nRestDMDummy >= nTVSDM3
					// Set nMahnAnz = nMahnAnz - 1
					// Set nTVSMahnGeb = nTVSMahnGeb - nTVSMahnGebjeMg
					// Set nMahnstufeDummy = nMahnstufeDummy - 1
					// Set nRestDMDummy = nRestDMDummy - nTVSMahnGebjeMg
					// If nMahnstufeDummy = 2 and nRestDMDummy >= nTVSDM2
					// Set nMahnAnz = nMahnAnz - 1
					// Set nTVSMahnGeb = nTVSMahnGeb - nTVSMahnGebjeMg
					// Set nMahnstufeDummy = nMahnstufeDummy - 1
					// Set nRestDMDummy = nRestDMDummy - nTVSMahnGebjeMg
					// If nMahnstufeDummy = 1 and nRestDMDummy >= nTVSDM1
					// Set nMahnAnz = nMahnAnz - 1
					// Set nTVSMahnGeb = nTVSMahnGeb - nTVSMahnGebjeMg
					// Set nMahnstufeDummy = nMahnstufeDummy - 1
					// Set nRestDMDummy = nRestDMDummy - nTVSMahnGebjeMg
					// 28.09.23 F5031
					// Set nTVSMahnGeb = 0
					// Set nZahDMDummy = nZaMahn
					// If nZahDMDummy >= nTVSDM1 and nTVSDM1 > 0
					// Set nTVSMahnGeb = nTVSMahnGeb + nTVSMahnGebjeMg
					// Set nZahDMDummy = nZahDMDummy - nTVSDM1
					// If nZahDMDummy >= nTVSDM2 and nTVSDM2 > 0
					// Set nTVSMahnGeb = nTVSMahnGeb + nTVSMahnGebjeMg
					// Set nZahDMDummy = nZahDMDummy - nTVSDM2
					// If nZahDMDummy >= nTVSDM3 and nTVSDM3 > 0
					// Set nTVSMahnGeb = nTVSMahnGeb + nTVSMahnGebjeMg
					// Set nZahDMDummy = nZahDMDummy - nTVSDM3
					// 0=offen   1=TZ    2=VZ   3=VZ / MG ausgb.
					if (locals.nZahlDMX.Abs() < locals.nRestDM.Abs()) 
					{
						locals.nBuchDM = locals.nZahlDMX;
						locals.nRestDM = locals.nRestDM - locals.nZahlDMX;
						locals.nKZZahl = 1;
						// 25.06.03 nRestDM>0 and
						if (locals.nRestDM > 0 && locals.nRestDM <= locals.nDMMahn + locals.nKleinBetrag + ((locals.nDMLeis + locals.nDMArzn) * locals.nSkonto / 100)) 
						{
							if (locals.nMGAusbuchen == 1 || locals.nDMMahn == 0.00m) 
							{
								// 07.10.22 Ä2015
								// Set nAusbuchDM = nDMMahn + nKleinBetrag + ((nDMLeis+nDMArzn) * nSkonto / 100)
								locals.nAusbuchDM = locals.nDMMahn;

								if (locals.nRestDM - locals.nAusbuchDM < 0.00m) 
								{
									locals.nAusbuchDM = locals.nRestDM;
								}
								locals.nRestDM = locals.nRestDM - locals.nAusbuchDM;
								// 07.10.22 Ä2015
								locals.nAusbuchMahn = locals.nAusbuchDM;
								locals.nAusbuchRech = locals.nKleinBetrag + ((locals.nDMLeis + locals.nDMArzn) * locals.nSkonto / 100);
								if (locals.nRestDM - locals.nAusbuchRech < 0.00m) 
								{
									locals.nAusbuchRech = locals.nRestDM;
								}
								locals.nAusbuchDM = locals.nAusbuchRech + locals.nAusbuchMahn;
								locals.nAusbuchMahn = locals.nAusbuchMahn * -1;
								// Set nAusbuchRech = nAusbuchRech * -1

								locals.nKZZahl = 3;
							}
						}
						locals.nZahlDMX = 0.00m;
					}
					else if (locals.nZahlDMX == locals.nRestDM) 
					{
						locals.nBuchDM = locals.nZahlDMX;
						locals.nRestDM = 0.00m;
						locals.nKZZahl = 2;
						locals.nZahlDMX = 0.00m;
					}
					else if (locals.nZahlDMX.Abs() > locals.nRestDM.Abs()) 
					{
						// If strMA = 'M'
						locals.nBuchDM = locals.nRestDM;
						locals.nRestDM = 0.00m;
						locals.nZahlDMX = locals.nZahlDMX - locals.nBuchDM;
						locals.nKZZahl = 2;
						// Else
						// Set strReturn = 'nicht gebucht / Überzahlung'
						// Return strReturn
					}
					Sal.WaitCursor(true);
					if (locals.nKZZahl == 1) 
					{
						// 11.06.21 Ä1962
						// Set strBuchText = 'TZ' || PalStrNum( nArztNr, 4, 0 ) || '/' || PalStrNum( nHalterNr, 5, 0 ) || '/' || PalStrNum( nRechNr, 6, 0 )
						locals.strBuchText = "Teilzahlung " + Int.PalStrNum(locals.nArztNr, 4, 0) + "/" + Int.PalStrNum(locals.nHalterNr, 5, 0) + "/" + Int.PalStrNum(locals.nRechNr, 6, 0);

						locals.strReturn = "gebucht / TZ";
					}
					else if (locals.nKZZahl == 2) 
					{
						// 11.06.21 Ä1962
						// Set strBuchText = 'VZ ' || PalStrNum( nArztNr, 4, 0 ) || '/' || PalStrNum( nHalterNr, 5, 0 ) || '/' || PalStrNum( nRechNr, 6, 0 )
						locals.strBuchText = "Vollzahlung " + Int.PalStrNum(locals.nArztNr, 4, 0) + "/" + Int.PalStrNum(locals.nHalterNr, 5, 0) + "/" + Int.PalStrNum(locals.nRechNr, 6, 0);

						locals.strReturn = "gebucht / VZ";
					}
					else if (locals.nKZZahl == 3) 
					{
						// 11.06.21 Ä1962
						// Set strBuchText = 'VZ/MG aus' || PalStrNum( nArztNr, 4, 0 ) || '/' || PalStrNum( nRechNr, 6, 0 )
						locals.strBuchText = "Vollzahlung / Mahngebühr ausgebucht " + Int.PalStrNum(locals.nArztNr, 4, 0) + "/" + Int.PalStrNum(locals.nRechNr, 6, 0);

						locals.strReturn = "gebucht / VZ MG+Kl.betr. ausgebucht";
					}
					locals.nBuchungsDM = locals.nBuchDM;
					if (locals.nDMMahn > locals.nTVSMahnGeb && locals.nRechNr < 999990) 
					{
						locals.nTVSMahnDM = (locals.nZaLeis + locals.nZaArzn + locals.nZaMahn + locals.nBuchDM) - (locals.nDMLeis + locals.nDMArzn) - (locals.nDMMahn - locals.nTVSMahnGeb);
						if (locals.nTVSMahnDM < 0)  // 12.12.22 F4949
						{
							locals.nTVSMahnDM = locals.nTVSMahnDM * -1;
						}
					}
					else if (locals.nRechNr >= 999990)  // 07.01.99
					{
						// Set nTVSMahnDM = (nZaLeis+nZaArzn+nZaMahn+nZaZins+nBuchDM)-(nDMLeis+nDMArzn+nDMZins)
					}
					else
					{
						locals.nTVSMahnDM = 0.00m;
					}
					// wg. Zinsen
					if (locals.nRechNr < 999990 && locals.nTVSMahnDM > locals.nTVSMahnGeb) 
					{
						locals.nTVSMahnDM = locals.nTVSMahnGeb;
					}

					if (locals.nTVSMahnDM < 0.00m) 
					{
						locals.nTVSMahnDM = 0.00m;
					}
					if (locals.nTVSMahnDM > locals.nBuchDM && locals.nBuchDM > 0) 
					{
						locals.nTVSMahnDM = locals.nBuchDM;
					}
					// 24.08.06 F33 auskommentiert:
					// Call SalStatusSetText(hWndForm,'Sachkonten-Buchungen')
					// If nTVSMahnDM > 0.00
					// If nRechNr >= 999990			!07.01.99 siehe unten
					// Set strBuchTextDummy = 'MBc' || PalStrNum( nArztNr, 4, 0 ) || '/' || PalStrNum( nHalterNr, 5, 0 ) || '/' || PalStrNum( nRechNr, 6, 0 )
					// Set nDiverse =nTVSMahnDM
					// Call InsertFiBu( hSqlBankZahl, 0, strBankKontoX, 16510, nBelNrX, dtBuchDatX, strBuchTextDummy, nDiverse, 3, nArztNr, nHalterNr, nRechNr )
					// Else
					// Set strBuchTextDummy = 'MG TVS' || PalStrNum( nArztNr, 4, 0 ) || '/' || PalStrNum( nRechNr, 6, 0 )
					// Set nDiverse = SalNumberRound(nTVSMahnDM*10000/(100 + nMwStVoll)) / 100
					// Call InsertFiBu( hSqlBankZahl, 0, strBankKontoX, 80110, nBelNrX, dtBuchDatX, strBuchTextDummy, nDiverse, 3, NUMBER_Null, NUMBER_Null, NUMBER_Null )
					// Set nDiverse = nTVSMahnDM - nDiverse
					// Call InsertFiBu( hSqlBankZahl, 0, strBankKontoX, 18300, nBelNrX, dtBuchDatX, strBuchTextDummy, nDiverse, 3, NUMBER_Null, NUMBER_Null, NUMBER_Null )
					// 29.03.10 OTÄ135
					if (GetRaZa(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, ref locals.nRZNr)) 
					{
					}

					this.SetStatusBarText("Zahlungs-Datei");
					InsertZahlung(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.nProzNr, locals.nKZZahl, locals.nBelNrX, locals.nBuchDM, locals.dtBuchDatX, locals.nRZNr);
					// Call RatenZahlung( hSqlBankZahl, nArztNr, nHalterNr, nBuchDM )
					// ----ZA LEIS-----
					locals.nDiverse = locals.nDMLeis - locals.nZaLeis;
					if ((locals.nDMArzn - locals.nZaArzn) < 0)  // 11.11.98
					{
						if (locals.nDiverse > locals.nBuchDM - (locals.nDMArzn - locals.nZaArzn)) 
						{
							locals.nDiverse = locals.nBuchDM - (locals.nDMArzn - locals.nZaArzn);
						}
					}
					else
					{
						if (locals.nDiverse > locals.nBuchDM) 
						{
							locals.nDiverse = locals.nBuchDM;
						}
					}
					if (locals.nDiverse != 0)  // 20.10.98 von > auf !=
					{
						locals.nZahlLeis = locals.nDiverse;
						locals.nZaLeis = locals.nZaLeis + locals.nDiverse;
						locals.nBuchDM = locals.nBuchDM - locals.nDiverse;
					}
					// ----ZA ARZN-----
					locals.nDiverse = locals.nDMArzn - locals.nZaArzn;
					if (locals.nDiverse.Abs() > locals.nBuchDM.Abs()) 
					{
						locals.nDiverse = locals.nBuchDM;
					}
					if (locals.nDiverse != 0)  // 20.10.98 von > auf !=
					{
						locals.nZahlArzn = locals.nDiverse;
						locals.nZaArzn = locals.nZaArzn + locals.nDiverse;
						locals.nBuchDM = locals.nBuchDM - locals.nDiverse;
					}
					// ----ZA MAHN-----
					locals.nDiverse = locals.nDMMahn - locals.nZaMahn;
					if (locals.nDiverse > locals.nBuchDM && locals.nBuchDM >= 0) 
					{
						locals.nDiverse = locals.nBuchDM;
					}
					if (locals.nDiverse > 0) 
					{
						locals.nZahlMahn = locals.nDiverse;
						locals.nZaMahn = locals.nZaMahn + locals.nDiverse;
						locals.nBuchDM = locals.nBuchDM - locals.nDiverse;
					}
					// ----ZA ZINS-----
					locals.nDiverse = locals.nDMZins - locals.nZaZins;
					if (locals.nDiverse > locals.nBuchDM && locals.nBuchDM >= 0) 
					{
						locals.nDiverse = locals.nBuchDM;
					}
					if (locals.nDiverse > 0) 
					{
						locals.nZahlZins = locals.nDiverse;
						locals.nZaZins = locals.nZaZins + locals.nDiverse;
						locals.nBuchDM = locals.nBuchDM - locals.nDiverse;
					}
					// 28.09.23 F5031
					locals.nMahnDummy = locals.nZahlMahn;
					locals.nTVSMahnGeb = 0;
					// 15.11.23 F5031 + and nTVSDM1,2,3 != 0
					if (locals.nMahnDummy >= locals.nTVSDM1 && locals.nTVSDM1 != 0) 
					{
						locals.nTVSMahnGeb = locals.nTVSMahnGeb + locals.nTVSMahnGebjeMg;
						locals.nMahnDummy = locals.nMahnDummy - locals.nTVSDM1;
					}
					if (locals.nMahnDummy >= locals.nTVSDM2 && locals.nTVSDM2 != 0) 
					{
						locals.nTVSMahnGeb = locals.nTVSMahnGeb + locals.nTVSMahnGebjeMg;
						locals.nMahnDummy = locals.nMahnDummy - locals.nTVSDM2;
					}
					if (locals.nMahnDummy >= locals.nTVSDM3 && locals.nTVSDM3 != 0) 
					{
						locals.nTVSMahnGeb = locals.nTVSMahnGeb + locals.nTVSMahnGebjeMg;
						locals.nMahnDummy = locals.nMahnDummy - locals.nTVSDM3;
					}
					locals.nTVSMahnDM = locals.nTVSMahnGeb;
					// 24.08.06 F33
					if ((locals.nZahlMahn - locals.nTVSMahnDM) < 0) 
					{
						locals.nTVSMahnDM = locals.nTVSMahnDM + (locals.nZahlMahn - locals.nTVSMahnDM);
					}
					// 24.08.06 F33 hierher verschoben von oben
					this.SetStatusBarText("Sachkonten-Buchungen");
					if (locals.nTVSMahnDM > 0.00m) 
					{
						if (locals.nRechNr >= 999990)  // 07.01.99 siehe unten
						{
							// Set strBuchTextDummy = 'MBc' || PalStrNum( nArztNr, 4, 0 ) || '/' || PalStrNum( nHalterNr, 5, 0 ) || '/' || PalStrNum( nRechNr, 6, 0 )
							// Set nDiverse =nTVSMahnDM
							// Call InsertFiBu( hSqlBankZahl, 0, strBankKontoX, 16510, nBelNrX, dtBuchDatX, strBuchTextDummy, nDiverse, 3, nArztNr, nHalterNr, nRechNr )
						}
						else
						{
							locals.strBuchTextDummy = "Mahngebühr Moveta" + Int.PalStrNum(locals.nArztNr, 4, 0) + "/" + Int.PalStrNum(locals.nRechNr, 6, 0);
							// 03.05.10 OTÄ420
							Var.nCheckMwSt = Int.PalCheckAuslMwSt(locals.nArztNr);
							// 14.04.14 Ä1046
							if (Int.PalCheckAuslTA(locals.nArztNr) == "EU") 
							{
								App.frmMain.nErloeskonto = 80120;
							}
							else
							{
								App.frmMain.nErloeskonto = 80110;
								// 30.06.20 Ä1892
								if (locals.dtBuchDatX >= new SalDateTime(2020, 7, 1) && locals.dtBuchDatX <= new SalDateTime(2020, 12, 31)) 
								{
									App.frmMain.nErloeskonto = Int.PalKontenMwStSenkung(App.frmMain.nErloeskonto);
								}
							}

							locals.nDiverse = (locals.nTVSMahnDM * 10000 / (100 + Var.nCheckMwSt)).Round() / 100;
							// 02.08.23 Ä2126 + , bbexportnr
							InsertFiBu(hSqlBankZahl, 0, locals.strBankKontoX, App.frmMain.nErloeskonto, locals.nBelNrX, locals.dtBuchDatX, locals.strBuchTextDummy, locals.nDiverse, 3, SalNumber.Null, SalNumber.Null, SalNumber.Null, locals.nExportNrX);
							locals.nDiverse = locals.nTVSMahnDM - locals.nDiverse;
							if (locals.nDiverse != 0) 
							{
								// 30.06.20 Ä1892
								Var.nMwStSenkung = 17760;
								if (locals.dtBuchDatX >= new SalDateTime(2020, 7, 1) && locals.dtBuchDatX <= new SalDateTime(2020, 12, 31)) 
								{
									Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
								}

								// 02.08.23 Ä2126 + , bbexportnr
								InsertFiBu(hSqlBankZahl, 0, locals.strBankKontoX, Var.nMwStSenkung, locals.nBelNrX, locals.dtBuchDatX, locals.strBuchTextDummy, locals.nDiverse, 3, SalNumber.Null, SalNumber.Null, SalNumber.Null, locals.nExportNrX);
							}
						}
					}
					// -----------------------------
					if (locals.nRechNr >= 999990) 
					{
						locals.nDiverse = locals.nZahlLeis + locals.nZahlArzn + locals.nZahlZins;
					}
					else
					{
						locals.nDiverse = (locals.nZahlLeis + locals.nZahlArzn + locals.nZahlMahn + locals.nZahlZins) - locals.nTVSMahnDM;
					}
					// 02.08.23 Ä2126 + , bbexportnr
					InsertFiBu(hSqlBankZahl, 0, locals.strBankKontoX, 16000, locals.nBelNrX, locals.dtBuchDatX, locals.strBuchText, locals.nDiverse, 3, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.nExportNrX);
					if (locals.nAusbuchDM > 0.00m) 
					{
						locals.strBuchTextDummy = "Mahngebühr / Kleinbetrag ausgebucht " + Int.PalStrNum(locals.nArztNr, 4, 0) + "/" + Int.PalStrNum(locals.nRechNr, 6, 0);
						// 02.08.23 Ä2126 + , bbexportnr
						InsertFiBu(hSqlBankZahl, 0, ((SalNumber)16410).ToString(0), 16000, locals.nBelNrX, locals.dtBuchDatX, locals.strBuchTextDummy, locals.nAusbuchDM, 3, SalNumber.Null, SalNumber.Null, SalNumber.Null, locals.nExportNrX);
						// Call InsertKonto( hSqlBankZahl, nArztNr, nHalterNr, nRechNr, strBuchTextDummy, nBelNrX,
						// dtBuchDatX, 0, 0, 0, 0, nRPMwSt, 0, 0, 0, 0, 0, nAusbuchRech )

						if (hSqlRePo.PrepareAndExecute(@"
SELECT rpreverseversion, rpmwst, rpla, sum(rpdm), sum(rpdmzahl)
FROM RP
INTO :frmMain.nReverseVersion, :nProzMwSt, :strLA, :nRPDM, :nRPZahl
WHERE rparztnr = :nArztNr
AND rprechnr = :nRechNr
AND rpmwst IS NOT NULL
AND rpla IS NOT NULL
GROUP BY 1,2,3
ORDER BY rpmwst desc, rpla desc")) 
						{
							while (hSqlRePo.FetchNext(ref locals.nFetchRP)) 
							{
								locals.nDiverse = ((locals.nRPDM - locals.nRPZahl) * 100 + (locals.nRPDM - locals.nRPZahl) * locals.nProzMwSt).Round() / 100;
								// Set strBuchTextDummy = strBuchText || PalStrNum(nProzMwSt,2,0) || '%'
								// Set strBuchTextDummy = SalStrLeftX( strBuchTextDummy, 50)
								// Set strBuchText = SalStrLeftX( strBuchText, 50)
								if (locals.nAusbuchRech != 0.00m) 
								{
									if (locals.nDiverse.Abs() > locals.nAusbuchRech.Abs())  // 20.10.98
									{
										locals.nDiverse = locals.nAusbuchRech;
									}
									locals.nAusbuchRech = locals.nAusbuchRech - locals.nDiverse;
									// Set nZahlLeis = nZahlLeis + nZahlMahn
									// 30.04.04 +nZahlMahn rausgenommen, da falsch lt.H.Sasse und Buchhaltung, '
									locals.nRPMwSt = (locals.nDiverse * locals.nProzMwSt * 100 / (100 + locals.nProzMwSt)).Round() / 100;
									locals.nRP1MwSt = (locals.nDiverse * locals.nProzMwSt * 100 / (100 + locals.nProzMwSt)).Round() / 100;
									Var.nDummyHaben = locals.nDiverse * -1;
									// Call InsertKonto( hSqlBankZahl, nArztNr, nHalterNr, nRechNr, strBuchText, nBelNrX,
									// dtBuchDatX, nDiverse, 0, nZahlMahn, nZahlZins, nRPMwSt, nProzMwSt, nKZZahl, nDummyHaben, frmMain.nReverseVersion, 0, 0 )
									// 14.11.23 Ä2144 +Kontierung
									InsertKonto(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.strBuchTextDummy, locals.nBelNrX, locals.dtBuchDatX, 0, 0, 0, 0, 0, locals.nProzMwSt, 0, 0, 0, 0, Var.nDummyHaben, "Zahlg-nichtbezMG");
									UpdateRechPosition(hSqlBankZahl, locals.nArztNr, locals.nRechNr, locals.nProzMwSt, locals.nDiverse, locals.nRP1MwSt, locals.strLA, App.frmMain.nReverseVersion, locals.nRPZahl);
								}
							}
							hSqlBankZahl.Commit();
						}
						if (locals.nAusbuchRech != 0) 
						{
							Var.nDummyHaben = locals.nDiverse * -1;
							// 14.11.23 Ä2144 +Kontierung
							InsertKonto(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.strBuchTextDummy, locals.nBelNrX, locals.dtBuchDatX, 0, 0, 0, 0, 0, Var.nMwStVoll, 0, 0, 0, 0, Var.nDummyHaben, "Zahlg-nichtbezMG");
						}

						// 05.12.22 F4949
						if (locals.nRechNr >= 999990) 
						{
							locals.nTVSMahnGebAusbuch = 0;
						}
						else
						{
							GetMahngeb(hSqlBankZahl, locals.nArztNr, ref locals.nTVSMahnGebAusbuch, ref locals.nTVSDM1, ref locals.nTVSDM2, ref locals.nTVSDM3);
						}
						GetMahnAnz(hSqlBankZahl, locals.nArztNr, locals.nRechNr, ref locals.nMahnAnz);
						locals.nTVSMahnGebAusbuch = locals.nTVSMahnGebAusbuch * locals.nMahnAnz;
						if (locals.nAusbuchMahn > locals.nTVSMahnGebAusbuch) 
						{
							locals.nAusbuchMahn = locals.nTVSMahnGebAusbuch;
						}

						locals.nRPMwSt = 0;
						// 14.11.23 Ä2144 +Kontierung
						InsertKonto(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.strBuchTextDummy, locals.nBelNrX, locals.dtBuchDatX, 0, 0, 0, 0, locals.nRPMwSt, 0, 0, 0, 0, locals.nAusbuchMahn, 0, "Zahlg-nichtbezMG");
					}

					locals.dtTeilzDat = locals.dtBuchDatX;
					// UPDATE rk	11.9.00 auf Wunsch von H. Sasse kommentiert, da Dr. henn sich beschwert hat
					// If nMahnstufe <= 5 And nKZZahl = 1
					// Set nMahnstufe = 0
					this.SetStatusBarText("Rechnungs-Datei");
					UpdateRechnung(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.nKZZahl, locals.nZaLeis, locals.nZaArzn, locals.nZaMahn, locals.nZaZins, locals.nMahnstufe, locals.dtTeilzDat, locals.dtVerjDat);
					// "If nRechNr >= 999990" TB #1
					if (locals.nRechNr >= 999990) 
					{
						Var.bExists = true;
						// 07.01.99
						locals.strBuchTextDummy = "MBc" + Int.PalStrNum(locals.nArztNr, 4, 0) + "/" + Int.PalStrNum(locals.nHalterNr, 5, 0) + "/" + Int.PalStrNum(locals.nRechNr, 6, 0);
						locals.nDiverse = locals.nZahlMahn;
						// 02.08.23 Ä2126 + , bbexportnr
						InsertFiBu(hSqlBankZahl, 0, locals.strBankKontoX, 16510, locals.nBelNrX, locals.dtBuchDatX, locals.strBuchTextDummy, locals.nDiverse, 3, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.nExportNrX);

					}
					else
					{
						Sql.Exists(@"SELECT *
FROM rk
WHERE rkarztnr = :nArztNr
AND rkhalternr = :nHalterNr
AND rkrechnr = :nRechNr
AND rkkzmwst IS NOT NULL AND rkdeaktiv IS NULL", ref Var.bExists);
					}

					locals.nZahlMahn = locals.nZahlMahn - locals.nTVSMahnDM;

					if (Var.bExists) 
					{
						// Set nZahlLeis = nZahlLeis + nZahlMahn  Set nRPMwSt
						if (locals.nRechNr >= 999990) 
						{
							locals.nZahlMahn = 0;
							locals.nKZMwSt = locals.nRechNr - 999989;
							locals.strBuchTextDummy = locals.strBuchText;
							locals.nRPMwSt = (locals.nZahlLeis * Var.nMwSatz[locals.nKZMwSt] * 100 / (100 + Var.nMwSatz[locals.nKZMwSt])).Round() / 100;
							if (locals.nRPMwSt == 0)  // Falls nur MwSt-freie B-Beträge
							{
								locals.nKZMwSt = 0;
							}
						}
						else
						{
							GetMehrwertsteuer(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, ref locals.nKZMwSt);
							locals.strBuchTextDummy = locals.strBuchText + Int.PalStrNum(Var.nMwSatz[locals.nKZMwSt], 2, 0) + "%";
							// 30.04.04 +nZahlMahn rausgenommen, da falsch lt.H.Sasse und Buchhaltung
							locals.nRPMwSt = ((locals.nZahlLeis + locals.nZahlArzn) * Var.nMwSatz[locals.nKZMwSt] * 100 / (100 + Var.nMwSatz[locals.nKZMwSt])).Round() / 100;
						}
						locals.strBuchTextDummy = locals.strBuchTextDummy.Left(50);
						locals.strBuchText = locals.strBuchText.Left(50);
						Var.nDummyHaben = locals.nZahlLeis + locals.nZahlArzn + locals.nZahlMahn + locals.nZahlZins;
						// 14.11.23 Ä2144 +Kontierung
						InsertKonto(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.strBuchText, locals.nBelNrX, locals.dtBuchDatX, locals.nZahlLeis, locals.nZahlArzn, locals.nZahlMahn, locals.nZahlZins, locals.nRPMwSt, Var.nMwSatz[locals.nKZMwSt], 
							locals.nKZZahl, Var.nDummyHaben, 0, 0, 0, "Zahlg-Rg");
					}
					else
					{
						// Call SalStatusSetText(hWndForm,'neue Rechnung !')
						if (locals.nZahlLeis == 0 && locals.nZahlArzn == 0) 
						{
							locals.strBuchText = locals.strBuchText.Left(50);
							// 30.09.99 nProzMwst -> nMwStVoll
							// 30.04.04 rausgenommen, da falsch lt.H.Sasse und Buchhaltung
							// Set nRPMwSt = SalNumberRound(nZahlMahn * nMwStVoll * 100 / (100 + nMwStVoll)) /100
							locals.nRPMwSt = 0;
							// 14.11.23 Ä2144 +Kontierung
							InsertKonto(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.strBuchText, locals.nBelNrX, locals.dtBuchDatX, 0, 0, locals.nZahlMahn, locals.nZahlZins, locals.nRPMwSt, Var.nMwStVoll, locals.nKZZahl, locals.nZahlMahn + 
								locals.nZahlZins, 0, 0, 0, "Zahlg-Rg");
						}
						else
						{
							// 02.12.14 Ä1104 + reverseversion
							if (hSqlRePo.PrepareAndExecute(@"
SELECT rpreverseversion, rpmwst, rpla, sum(rpdm), sum(rpdmzahl)
FROM RP
INTO :frmMain.nReverseVersion, :nProzMwSt, :strLA, :nRPDM, :nRPZahl
WHERE rparztnr = :nArztNr
AND rprechnr = :nRechNr
AND rpmwst IS NOT NULL
AND rpla IS NOT NULL
GROUP BY 1,2,3
ORDER BY rpmwst desc, rpla desc")) 
							{
								while (hSqlRePo.FetchNext(ref locals.nFetchRP)) 
								{
									locals.nDiverse = ((locals.nRPDM - locals.nRPZahl) * 100 + (locals.nRPDM - locals.nRPZahl) * locals.nProzMwSt).Round() / 100;
									locals.strBuchTextDummy = locals.strBuchText + Int.PalStrNum(locals.nProzMwSt, 2, 0) + "%";
									locals.strBuchTextDummy = locals.strBuchTextDummy.Left(50);
									locals.strBuchText = locals.strBuchText.Left(50);
									// nRPMwSt = MwSt für HF + MG
									// nRP1MwSt = MwSt für HF
									if (locals.strLA == Var.strL) 
									{
										if (locals.nZahlLeis != 0.00m) 
										{
											if (locals.nDiverse.Abs() > locals.nZahlLeis.Abs())  // 20.10.98
											{
												locals.nDiverse = locals.nZahlLeis;
											}
											locals.nZahlLeis = locals.nZahlLeis - locals.nDiverse;
											// Set nZahlLeis = nZahlLeis + nZahlMahn
											// 30.04.04 +nZahlMahn rausgenommen, da falsch lt.H.Sasse und Buchhaltung
											locals.nRPMwSt = (locals.nDiverse * locals.nProzMwSt * 100 / (100 + locals.nProzMwSt)).Round() / 100;
											locals.nRP1MwSt = (locals.nDiverse * locals.nProzMwSt * 100 / (100 + locals.nProzMwSt)).Round() / 100;
											Var.nDummyHaben = locals.nDiverse + locals.nZahlMahn + locals.nZahlZins;
											// 14.11.23 Ä2144 +Kontierung
											InsertKonto(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.strBuchText, locals.nBelNrX, locals.dtBuchDatX, locals.nDiverse, 0, locals.nZahlMahn, locals.nZahlZins, locals.nRPMwSt, locals.nProzMwSt, locals.nKZZahl, 
												Var.nDummyHaben, App.frmMain.nReverseVersion, 0, 0, "Zahlg-Rg");
											locals.nZahlMahn = 0;
											locals.nZahlZins = 0;
											UpdateRechPosition(hSqlBankZahl, locals.nArztNr, locals.nRechNr, locals.nProzMwSt, locals.nDiverse, locals.nRP1MwSt, locals.strLA, App.frmMain.nReverseVersion, locals.nRPZahl);
										}
									}
									else if (locals.strLA == Var.strA) 
									{
										if (locals.nZahlArzn != 0.00m) 
										{
											if (locals.nDiverse.Abs() > locals.nZahlArzn.Abs())  // 20.10.98
											{
												locals.nDiverse = locals.nZahlArzn;
											}
											locals.nZahlArzn = locals.nZahlArzn - locals.nDiverse;
											// 30.04.04 +nZahlMahn rausgenommen, da falsch lt.H.Sasse und Buchhaltung
											locals.nRPMwSt = (locals.nDiverse * locals.nProzMwSt * 100 / (100 + locals.nProzMwSt)).Round() / 100;
											locals.nRP1MwSt = (locals.nDiverse * locals.nProzMwSt * 100 / (100 + locals.nProzMwSt)).Round() / 100;
											Var.nDummyHaben = locals.nDiverse + locals.nZahlMahn + locals.nZahlZins;
											// 14.11.23 Ä2144 +Kontierung
											InsertKonto(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.strBuchText, locals.nBelNrX, locals.dtBuchDatX, 0, locals.nDiverse, locals.nZahlMahn, locals.nZahlZins, locals.nRPMwSt, locals.nProzMwSt, locals.nKZZahl, 
												Var.nDummyHaben, App.frmMain.nReverseVersion, 0, 0, "Zahlg-Rg");
											locals.nZahlMahn = 0;
											locals.nZahlZins = 0;
											UpdateRechPosition(hSqlBankZahl, locals.nArztNr, locals.nRechNr, locals.nProzMwSt, locals.nDiverse, locals.nRP1MwSt, locals.strLA, App.frmMain.nReverseVersion, locals.nRPZahl);
										}
									}
								}
								hSqlBankZahl.Commit();
							}
							// 04.11.98
							if (locals.nZahlLeis != 0) 
							{
								locals.strBuchText = locals.strBuchText.Left(50);
								// 02.12.14 Ä1104 + reverseversion
								locals.nMwStVorgabe = Int.PalCheckAuslMwStTA(locals.nArztNr);

								locals.nRPMwSt = (locals.nZahlLeis * locals.nMwStVorgabe * 100 / (100 + Var.nMwStVoll)).Round() / 100;
								// 14.11.23 Ä2144 +Kontierung
								InsertKonto(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.strBuchText, locals.nBelNrX, locals.dtBuchDatX, locals.nZahlLeis, 0, locals.nZahlMahn, locals.nZahlZins, locals.nRPMwSt, locals.nMwStVorgabe, locals.nKZZahl, 
									locals.nZahlLeis + locals.nZahlMahn + locals.nZahlZins, 0, 0, 0, "Zahlg-Rg");
								locals.nZahlMahn = 0;
								locals.nZahlZins = 0;
							}
							if (locals.nZahlArzn != 0) 
							{
								locals.strBuchText = locals.strBuchText.Left(50);
								// 02.12.14 Ä1104 + reverseversion
								locals.nMwStVorgabe = Int.PalCheckAuslMwStTA(locals.nArztNr);

								locals.nRPMwSt = (locals.nZahlArzn * locals.nMwStVorgabe * 100 / (100 + Var.nMwStVoll)).Round() / 100;
								// 14.11.23 Ä2144 +Kontierung
								InsertKonto(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.strBuchText, locals.nBelNrX, locals.dtBuchDatX, 0, locals.nZahlArzn, locals.nZahlMahn, locals.nZahlZins, locals.nRPMwSt, locals.nMwStVorgabe, locals.nKZZahl, 
									locals.nZahlArzn + locals.nZahlMahn + locals.nZahlZins, 0, 0, 0, "Zahlg-Rg");
							}
						}
					}
					this.SetStatusBarText("Hole Rest-OP");
					GetRest(hSqlBankZahl, locals.nArztNr, locals.nRechNr, locals.nRestLX, locals.nRestAX, locals.nRestMX, locals.nRestZX);
					// 07.11.00
					if (locals.nProzNr != SalNumber.Null) 
					{
						// 07.12.00 rausgenommen
						// Call GetProzOP(hSqlBankZahl, nProzNr, nProzOP)
						// If nProzOP = 0
						// Call UpdateProzBez( hSqlBankZahl, nProzNr )

						UpdateProzBez(hSqlBankZahl, locals.nProzNr);
					}

					// 14.10.02
					if (CheckRechAb(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.nBuchungsDM)) 
					{
					}
					// 04.12.17 Ä1433
					Int.PalCheckELobBez(locals.nArztNr, locals.nHalterNr);

					if (locals.nMahnstufe > 6) 
					{
						locals.strReturn = locals.strReturn + " MS " + locals.nMahnstufe.ToString(0) + "!!!!";
						// 19.06.12 Ä755
						if (locals.nMahnstufe == 7) 
						{
							if (BriefMS7(hSqlBankZahl, locals.nArztNr, locals.nHalterNr, locals.nRechNr, locals.nBuchungsDM)) 
							{
							}
						}
					}
					if (locals.bSonder == true) 
					{
						locals.strReturn = locals.strReturn + " / MG Halter erhöht !";
					}
					return locals.strReturn;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					nBuchungsDM = locals.nBuchungsDM;
					nRestLX = locals.nRestLX;
					nRestAX = locals.nRestAX;
					nRestMX = locals.nRestMX;
					nRestZX = locals.nRestZX;

				}
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmAusbatch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAusbatch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmAusbatch_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmAusbatch_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAusbatch_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.OnCreate();
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAusbatch_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.OnDestroy();
			#endregion
		}
		
		/// <summary>
		/// pbZahlOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZahlOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbZahlOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZahlOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sal.MessageBox(@"Das alte
Batch-Protokoll
wird gelöscht! Weiter ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconExclamation)) == Sys.IDYES) 
			{
				this.Ausbatch();
			}
			this.SendMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.DestroyWindow();
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class AusbatchLocals
			{
				public SalSqlHandle hSqlEdit = SalSqlHandle.Null;
				public SalSqlHandle hSqlResult = SalSqlHandle.Null;
				public SalNumber nInd = 0;
				public SalNumber nNichtGebucht = 0;
				public SalString strROWID = "";
				public SalString strErgebnis = "";
				public SalString strBankKonto = "";
				public SalNumber nArztNr = 0;
				public SalNumber nHalterNr = 0;
				public SalNumber nRechNr = 0;
				public SalNumber nProzNr = 0;
				public SalNumber nBelNr = 0;
				public SalNumber nZahlDM = 0;
				public SalNumber nBuchDM = 0;
				public SalNumber nRestL = 0;
				public SalNumber nRestA = 0;
				public SalNumber nRestM = 0;
				public SalNumber nRestZ = 0;
				public SalDateTime dtBuchDat = SalDateTime.Null;
				// 02.08.23 Ä2126 + , bbexportnr
				public SalNumber nExportNr = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetZettelLocals
			{
				public SalNumber nKZPraxArt = 0;
				public SalNumber nArztNr2 = 0;
				public SalNumber nInd = 0;
				public SalBoolean bExists = false;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetRechnungLocals
			{
				public SalBoolean bExists = false;
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber nDMLeis = 0;
				public SalNumber nDMArzn = 0;
				public SalNumber nDMMahn = 0;
				public SalNumber nDMZins = 0;
				public SalNumber nZaLeis = 0;
				public SalNumber nZaArzn = 0;
				public SalNumber nZaMahn = 0;
				public SalNumber nZaZins = 0;
				public SalNumber nRestDM = 0;
				public SalNumber nMahnstufe = 0;
				public SalDateTime dtVerjDat = SalDateTime.Null;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetRaZaLocals
			{
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnRZNr = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetGesamtOPLocals
			{
				public SalBoolean bExists = false;
				public SalNumber nInd = 0;
				public SalNumber nArzt2 = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRestDM = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetAusbuchenLocals
			{
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnMGAusbuchen = 0;
				public SalNumber pnKleinBetrag = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetHalterAusbuchenLocals
			{
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnSkonto = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetMahngebLocals
			{
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnTVSMahnGeb = 0;
				public SalNumber pnTVSMahnDM1 = 0;
				public SalNumber pnTVSMahnDM2 = 0;
				public SalNumber pnTVSMahnDM3 = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetMehrwertsteuerLocals
			{
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnKZMwSt = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetRestLocals
			{
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnRestL = 0;
				public SalNumber pnRestA = 0;
				public SalNumber pnRestM = 0;
				public SalNumber pnRestZ = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetProzNrLocals
			{
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnProzNr = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetProzOPLocals
			{
				public SalNumber nInd = 0;
				public SalString strpSelect = "";
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnProzNr = 0;
				public SalNumber pnDMOP = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class UpdateProzBezLocals
			{
				public SalDateTime pdtDatum = SalDateTime.Null;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnProzNr = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetMahnAnzLocals
			{
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnMahnAnz = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class CheckRechAbLocals
			{
				public SalBoolean bExists = false;
				public SalNumber nInd = 0;
				public SalString pstrTHTi = "";
				public SalString pstrTHVN = "";
				public SalString pstrTHNN = "";
				public SalString pstrTHN2 = "";
				public SalString pstrTHStr = "";
				public SalString pstrTHOrt = "";
				public SalString pstrTHLand = "";
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnZahlDM = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class BriefMS7Locals
			{
				public SalBoolean bExists = false;
				public SalNumber nInd = 0;
				public SalString pstrTHTi = "";
				public SalString pstrTHVN = "";
				public SalString pstrTHNN = "";
				public SalString pstrTHN2 = "";
				public SalString pstrTHStr = "";
				public SalString pstrTHOrt = "";
				public SalString pstrTHLand = "";
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnZahlDM = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class InsertFiBuLocals
			{
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnFertig = 0;
				public SalString pstrBankKonto = "";
				public SalNumber pnHaben = 0;
				public SalNumber pnBelNr = 0;
				public SalDateTime pdtBelDat = SalDateTime.Null;
				public SalString pstrBuchText = "";
				public SalNumber pnDiverse = 0;
				public SalNumber pnTyp = 0;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				// 02.08.23 Ä2126
				public SalNumber pnExportNr = 0; // 02.08.23 Ä2126
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class InsertZahlungLocals
			{
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnProzNr = 0;
				public SalNumber pnKZZahl = 0;
				public SalNumber pnBelNr = 0;
				public SalNumber pnBuchDM = 0;
				public SalDateTime pdtBuchDat = SalDateTime.Null;
				public SalNumber pnRZNr = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class InsertKontoLocals
			{
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalString pstrBuchText = "";
				public SalNumber pnBelNr = 0;
				public SalDateTime pdtBuchDat = SalDateTime.Null;
				public SalNumber pnZahlLeis = 0;
				public SalNumber pnZahlArzn = 0;
				public SalNumber pnZahlMahn = 0;
				public SalNumber pnZahlZins = 0;
				public SalNumber pnRPMwSt = 0;
				public SalNumber pnMwSatz = 0;
				public SalNumber pnKZZahl = 0;
				public SalNumber pnDummyHaben = 0;
				public SalNumber pnReverseVersion = 0;
				// 22.08.22 Ä2015
				public SalNumber pnDMMahn = 0; // 22.08.22 Ä2015
				// 22.08.22 Ä2015
				public SalNumber pnDMRech = 0; // 22.08.22 Ä2015
				// 14.11.23 Ä2144 +Kontierung
				public SalString pstrKontoCode = ""; // 14.11.23 Ä2144 +Kontierung
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class UpdateRechnungLocals
			{
				public SalDateTime pdtDatum = SalDateTime.Null;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnKZZahl = 0;
				public SalNumber pnZaLeis = 0;
				public SalNumber pnZaArzn = 0;
				public SalNumber pnZaMahn = 0;
				public SalNumber pnZaZins = 0;
				public SalNumber pnMahnstufe = 0;
				public SalDateTime pdtTeilzDat = SalDateTime.Null;
				public SalDateTime pdtVerjDat = SalDateTime.Null;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class UpdateRechPositionLocals
			{
				public SalString strROWIDLocal = "";
				public SalNumber nInd = 0;
				public SalString pnSelect = "";
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnProzMwSt = 0;
				public SalNumber pnDiverse = 0;
				public SalNumber pnRP1MwSt = 0;
				public SalString pstrLA = "";
				public SalNumber pnReverseVersion = 0;
				public SalNumber pnRPZahl = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class ZahlungBuchenLocals
			{
				public SalBoolean bSonder = false;
				public SalNumber nBuchDM = 0;
				public SalNumber nAusbuchDM = 0;
				public SalNumber nAusbuchRech = 0;
				public SalNumber nAusbuchMahn = 0;
				public SalNumber nKZZahl = 0;
				public SalNumber nDMLeis = 0;
				public SalNumber nDMArzn = 0;
				public SalNumber nDMMahn = 0;
				public SalNumber nDMZins = 0;
				public SalNumber nZaLeis = 0;
				public SalNumber nZaArzn = 0;
				public SalNumber nZaMahn = 0;
				public SalNumber nZaZins = 0;
				public SalNumber nRestDM = 0;
				public SalNumber nMahnstufe = 0;
				public SalDateTime dtVerjDat = SalDateTime.Null;
				public SalNumber nMGAusbuchen = 0;
				public SalNumber nKleinBetrag = 0;
				public SalNumber nSkonto = 0;
				public SalNumber nTVSMahnGeb = 0;
				public SalNumber nTVSMahnDM = 0;
				// 31.07.23 F5031
				public SalNumber nRestDMDummy = 0;
				public SalNumber nZahDMDummy = 0;
				public SalNumber nMahnstufeDummy = 0;
				public SalNumber nTVSMahnGebjeMg = 0;
				public SalNumber nMahnDummy = 0;
				public SalNumber nTVSDM1 = 0;
				public SalNumber nTVSDM2 = 0;
				public SalNumber nTVSDM3 = 0;
				public SalNumber nMahnAnz = 0;
				public SalNumber nDiverse = 0;
				public SalNumber nRP1MwSt = 0;
				public SalString strReturn = "";
				public SalString strBuchText = "";
				public SalString strBuchTextDummy = "";
				public SalString strLA = "";
				public SalDateTime dtTeilzDat = SalDateTime.Null;
				public SalNumber nZahlDM = 0;
				public SalDateTime dtBuchDat = SalDateTime.Null;
				public SalString strBankKonto = "";
				public SalNumber nBelNr = 0;
				public SalNumber nKZMwSt = 0;
				public SalNumber nProzMwSt = 0;
				public SalNumber nZahlLeis = 0;
				public SalNumber nZahlArzn = 0;
				public SalNumber nZahlMahn = 0;
				public SalNumber nZahlZins = 0;
				public SalNumber nFetchRP = 0;
				public SalNumber nRPDM = 0;
				public SalNumber nRPZahl = 0;
				public SalNumber nRPMwSt = 0;
				public SalString strROWID = "";
				public SalString strPalZahlROWID = ""; // nur für PalZahlung !
				public SalNumber nRestL = 0;
				public SalNumber nRestA = 0;
				public SalNumber nRestM = 0;
				public SalNumber nRestZ = 0;
				// Date/Time: dtRatDat
				// Number: nRatMtl
				public SalNumber nProzNr = 0;
				public SalNumber nProzOP = 0;
				public SalNumber nRZNr = 0;
				// 02.12.14 Ä1104
				public SalNumber nMwStVorgabe = 0;
				// 05.12.22 F4949
				public SalNumber nTVSMahnGebAusbuch = 0;
				public SalNumber nTVSMahnDMAusbuch = 0;
				// Buchung: M=manuell A=automatisch
				public SalString strMA = ""; // Buchung: M=manuell A=automatisch
				public SalNumber nArztNr = 0;
				public SalNumber nHalterNr = 0;
				public SalNumber nRechNr = 0;
				public SalNumber nProzNrX = 0;
				public SalNumber nZahlDMX = 0;
				public SalDateTime dtBuchDatX = SalDateTime.Null;
				public SalString strBankKontoX = "";
				public SalNumber nBelNrX = 0;
				public SalNumber nBuchungsDM = 0;
				public SalNumber nRestLX = 0;
				public SalNumber nRestAX = 0;
				public SalNumber nRestMX = 0;
				public SalNumber nRestZX = 0;
				// 02.08.23 Ä2126
				public SalNumber nExportNrX = 0; // 02.08.23 Ä2126
			}
		}
		#endregion
	}
}
