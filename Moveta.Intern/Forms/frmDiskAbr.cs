// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmDiskAbr : SalQuickTabsForm
	{
		#region Window Variables
		public SalSqlHandle hSqlDisk = SalSqlHandle.Null;
		public SalSqlHandle hSqlAbr = SalSqlHandle.Null;
		public SalSqlHandle hSql2 = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalString strSelectList = "";
		public SalString strSelect2 = "";
		public SalNumber nDiskIndex = 0;
		public SalNumber nErr = 0;
		public SalNumber nFetch = 0;
		public SalWindowHandle hWndReport = SalWindowHandle.Null;
		public SalString strReportName = "";
		public SalNumber nTANr = 0;
		public SalNumber nTANrAlt = 0;
		public SalString strTAN1 = "";
		public SalString strTATi = "";
		public SalString strTAVN = "";
		public SalString strTANN = "";
		public SalString strTAN2 = "";
		public SalString strTAStr = "";
		public SalString strTAOrt = "";
		public SalString strTALand = "";
		public SalDateTime dtTAErfDat = SalDateTime.Null;
		public SalNumber nTAReverse = 0;
		public SalString strTAUStID = "";
		public SalNumber nTVNr = 0;
		public SalString strTVN1 = "";
		public SalString strTVTi = "";
		public SalString strTVVN = "";
		public SalString strTVNN = "";
		public SalString strTVN2 = "";
		public SalString strTVStr = "";
		public SalString strTVOrt = "";
		public SalString strTVLand = "";
		public SalDateTime dtTVErfDat = SalDateTime.Null;
		public SalNumber nTVReverse = 0;
		public SalString strTVUStID = "";
		public SalString strTAxN1 = "";
		public SalString strTAxN2 = "";
		public SalString strTAxStr = "";
		public SalString strTAxOrt = "";
		public SalString strTAxTi = "";
		public SalString strTAxVN = "";
		public SalString strTAxNN = "";
		public SalString strTVxN1 = "";
		public SalString strTVxN2 = "";
		public SalString strTVxStr = "";
		public SalString strTVxOrt = "";
		public SalString strTVxTi = "";
		public SalString strTVxVN = "";
		public SalString strTVxNN = "";
		public SalNumber nTAArztNr = 0;
		public SalNumber nTAArztNrAlt = 0;
		public SalNumber nTHNr = 0;
		public SalString strTHN1 = "";
		public SalString strTHN2 = "";
		public SalString strTHStr = "";
		public SalString strTHOrt = "";
		public SalString strBearbeiter = "";
		public SalDateTime dtBearbDatum = SalDateTime.Null;
		public SalNumber nArztNr = 0;
		public SalNumber nArztNr2 = 0;
		public SalBoolean bExists = false;
		public SalString strFehler = "";
		public SalNumber nPos = 0;
		public SalNumber nRow = 0;
		public SalNumber nSumme = 0;
		public SalNumber nSummeB = 0;
		public SalBoolean bZettel = false;
		public SalBoolean bZettel0 = false;
		public SalString strZVon = "";
		public SalNumber nZArzt = 0;
		public SalDateTime dtZDatum = SalDateTime.Null;
		public SalString lsZBemerk = "";
		public SalNumber nPosNr = 0;
		public SalNumber nPosNrAlt = 0;
		public SalString strROWIDLe = "";
		public SalNumber nRechNr = 0;
		public SalNumber nNetto = 0;
		public SalNumber nMwSt = 0;
		public SalString strLA = "";
		public SalString strStatus = "";
		public SalArray<SalString> saFiles = new SalArray<SalString>();
		public SalArray<SalNumber> naSize = new SalArray<SalNumber>();
		public SalArray<SalDateTime> dtaDate = new SalArray<SalDateTime>();
		public SalArray<SalNumber> naAttributes = new SalArray<SalNumber>();
		public SalNumber nCountF = 0;
		public SalNumber nNrF = 0;
		public SalString strAntwort = "";
		public SalNumber nHalterNein = 0;
		public SalString strAndererHalter = "";
		public SalString strPLZ = "";
		public SalString strStrasse = "";
		public SalNumber nByte = 0;
		public SalBoolean bMCOk = false;
		public SalDateTime dtSperrDatum = SalDateTime.Null;
		public SalNumber nTAEinzug = 0;
		public SalNumber nTVEinzug = 0;
		public SalWindowHandle hWndColRow = SalWindowHandle.Null;
		public SalNumber nColRow = 0;
		public SalNumber LEEPOST = 0;
		public SalString LEEPOSTMAIL = "";
		public SalDateTime LEEPOSTAENDDAT = SalDateTime.Null;
		public SalString HPMEMAIL = "";
		public SalDateTime HEPOSTAENDDAT = SalDateTime.Null;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmDiskAbr()
		{
			// Assign global reference.
			App.frmDiskAbr = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmDiskAbr CreateWindow(Control owner)
		{
			frmDiskAbr frm = new frmDiskAbr();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmDiskAbr FromHandle(SalWindowHandle handle)
		{
			return ((frmDiskAbr)SalWindow.FromHandle(handle, typeof(frmDiskAbr)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// Rechnet Abr-Summe für aktuellen Arzt
		/// </summary>
		/// <returns></returns>
		public SalNumber PalSumme()
		{
			#region Actions
			using (new SalContext(this))
			{
				dfSumme.Number = 0;
				dfSummeB.Number = 0;
				nRow = Sys.TBL_MinRow;
				while (tblOffeneAbr.FindNextRow(ref nRow, Sys.ROW_Selected, 0)) 
				{
					tblOffeneAbr.SetFocusRow(nRow);
					Int.SqlImmedSel(@" SELECT sum(lepdm), sum(@round(lepdm*(100+lepmwst)/100,2)) INTO :frmDiskAbr.nSumme, :frmDiskAbr.nSummeB  FROM lep
WHERE  lepbearbeiter = :frmDiskAbr.tblOffeneAbr.colsBearbeiter
AND lebearbdatum = :frmDiskAbr.tblOffeneAbr.coldtBearbDatum
AND leparztnr= :frmDiskAbr.tblOffeneAbr.colnArztNr");
					dfSumme.Number = dfSumme.Number + nSumme;
					dfSummeB.Number = dfSummeB.Number + nSummeB;
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalPruefeSperre()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.ColorSet(dfSperre, Sys.COLOR_IndexWindowText, Sys.COLOR_White);
				if (Int.PalFormFrei("Übergaben")) 
				{
					dfSperre.Text = "Übergaben erlaubt";
					Sal.ColorSet(dfSperre, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
				}
				else
				{
					dfSperre.Text = "Übergaben gesperrt !";
					Sal.ColorSet(dfSperre, Sys.COLOR_IndexWindow, Sys.COLOR_Red);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalHoleTabelle()
		{
			#region Actions
			using (new SalContext(this))
			{
				// 22.01.18 Ä1692
				nColRow = Sys.TBL_MinRow;
				tblOffeneAbr.FindNextRow(ref nColRow, Sys.ROW_Selected, 0);
				// Call SalStatusSetText( hWndForm, 'Row ' || SalNumberToStrX( nColRow, 0 ) )
				// Call SalMessageBeep( 0 )
				Var.nDummyHaben = picTabs.GetTop();

				if (picTabs.GetTop() == 0) 
				{
					strSelect = @"SELECT LEBEARBDATUM, LEARZTNR,LEBEARBEITER,LEBEARBDATUM, LESTATUS, NULL, count(*)
FROM LE  WHERE LEMANDISK= :strDisk AND (lestatus <> '---' AND lestatus is not null) GROUP BY 1,2,3,4,5";
				}
				else if (picTabs.GetTop() == 2) 
				{
					strSelect = @"SELECT LEBEARBDATUM, LEARZTNR,LEBEARBEITER,LEBEARBDATUM, LESTATUS, NULL, count(*)
FROM LE  WHERE LEMANDISK= :strDisk AND lestatus = '---' GROUP BY 1,2,3,4,5";
				}
				else
				{
					strSelect = @"SELECT LEBEARBDATUM, LEARZTNR,LEBEARBEITER,LEBEARBDATUM, LESTATUS, NULL, count(*)
FROM LE  WHERE LEMANDISK= :strDisk AND lestatus IS NULL GROUP BY 1,2,3,4,5";
				}
				if (Int.SqlConnection(ref hSqlAbr)) 
				{
				}
				if (tblOffeneAbr.Populate(hSqlAbr, strSelect, Sys.TBL_FillAll)) 
				{
				}
				if (hSqlAbr.Commit()) 
				{
				}
				if (hSqlAbr.Disconnect()) 
				{
				}
				// 14.05.02
				PalPruefeSperre();
				// 22.01.18 Ä1692
				if (nColRow != Sys.TBL_MinRow) 
				{
					tblOffeneAbr.SetRowFlags(nColRow, Sys.ROW_Selected, true);
					// 05.02.18 F3108
					tblOffeneAbr.SetContextRow(nColRow);
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmDiskAbr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmDiskAbr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmDiskAbr_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Activate:
					this.frmDiskAbr_OnSAM_Activate(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmDiskAbr_OnSAM_Close(sender, e);
					break;
				
				// On SAM_ReportStart
				
				// 30.04.03
				
				// If (hWndfrmReport)
				
				// Call SalBringWindowToTop(hWndfrmReport)
				
				// If strReportName = 'HPRUEF'
				
				// Call SalReportDlgOptions(SalNumberToWindowHandle(wParam),
				
				// 'Halter prüfen','Die Halter-Prüfen-Liste','wird gedruckt','Halter Prüfen')
				
				// Call SqlConnection(hSqlDisk)
				
				// Else If strReportName = 'HLIST'
				
				// Call SalReportDlgOptions(SalNumberToWindowHandle(wParam),
				
				// 'Halter prüfen','Die Halter-Liste','wird gedruckt','Halterliste')
				
				// Call SqlConnection(hSqlDisk)
				
				// Else If strReportName = 'ETITH'
				
				// Call SalReportDlgOptions(SalNumberToWindowHandle(wParam),
				
				// 'Kontoauszug','Die TH-Etiketten','werden gedruckt','TH-Etiketten')
				
				// Call SqlConnection(hSqlDisk)
				
				// On SAM_ReportFetchInit
				
				// If strReportName = 'HPRUEF'
				
				// If SqlHandleExecX(hSqlDisk,'SELECT lehalternr,leti, levn, lenn, leti || levn || \' \' || lenn,lename2,lestr,leort,
				
				// 			learztnr, lebearbeiter,lebearbdatum, leherfdat, leposnr, ROWID
				
				// 			INTO :frmDiskAbr.nTANr,:frmDiskAbr.strTATi,:frmDiskAbr.strTAVN,:frmDiskAbr.strTANN,
				
				// 			:frmDiskAbr.strTAN1, :frmDiskAbr.strTAN2,:frmDiskAbr.strTAStr,:frmDiskAbr.strTAOrt,
				
				// 			:frmDiskAbr.nTAArztNr,:frmDiskAbr.strBearbeiter,:frmDiskAbr.dtBearbDatum,
				
				// 			:frmDiskAbr.dtTAErfDat, :frmDiskAbr.nPosNr,  :frmDiskAbr.strROWIDLe
				
				// 			from le
				
				// 			WHERE ' || PalArztNr('le', nArztNr, nArztNr2) || '
				
				// 			AND lebearbeiter=:frmDiskAbr.strBearbeiter
				
				// 			AND lebearbdatum=:frmDiskAbr.dtBearbDatum
				
				// 			ORDER BY le.leposnr','Report INIT') != IDOK
				
				// Return FALSE
				
				// Else
				
				// Call SqlCommit(hSqlDisk)
				
				// Set bZettel = FALSE
				
				// Set bZettel0 = FALSE
				
				// Set nTANrAlt = 0
				
				// Call SqlConnection(hSql2)
				
				// Call SqlPrepareAndExecute(hSql2, 'SELECT zvon, zdatum, zbemerk
				
				// INTO :frmDiskAbr.strZVon, :frmDiskAbr.dtZDatum, :frmDiskAbr.lsZBemerk
				
				// FROM z WHERE ' || PalArztNr('z', nArztNr, nArztNr2) || '
				
				// AND (zhalternr = 0 OR zhalternr IS NULL)
				
				// AND zart = \'RA\' order by zdatum DESC')
				
				// Set bZettel0 = TRUE
				
				// Set strTAN1 = ''
				
				// Set strTATi = ''
				
				// Set strTAVN = ''
				
				// Set strTANN = ''
				
				// Set strTAN1 = ''
				
				// Set strTAN2 = ''
				
				// Set strTAStr = ''
				
				// Set strTAOrt = ''
				
				// Set strTALand = '--'
				
				// Set strTVN1 = ''
				
				// Set strTVTi = ''
				
				// Set strTVVN = ''
				
				// Set strTVNN = ''
				
				// Set strTVN1 = ''
				
				// Set strTVN2 = ''
				
				// Set strTVStr = ''
				
				// Set strTVOrt = ''
				
				// Set strTVLand = '--'
				
				// Return TRUE
				
				// Else If strReportName = 'HLIST'
				
				// If SqlHandleExecX(hSqlDisk,'SELECT lehalternr,lenn || \', \' || levn || \' \' || leti,lename2,lestr,leort,
				
				// 			learztnr, lebearbeiter,lebearbdatum, lekennungta, leposnr
				
				// 			INTO :frmDiskAbr.nTANr,:frmDiskAbr.strTAN1,
				
				// 			:frmDiskAbr.strTAN2,:frmDiskAbr.strTAStr,:frmDiskAbr.strTAOrt,
				
				// 			:frmDiskAbr.nTAArztNr,:frmDiskAbr.strBearbeiter,:frmDiskAbr.dtBearbDatum,
				
				// 			:frmDiskAbr.strFehler, :frmDiskAbr.nPos
				
				// 			from le
				
				// 			WHERE ' || PalArztNr('le', nArztNr, nArztNr2) || '
				
				// 			AND lebearbeiter=:frmDiskAbr.strBearbeiter
				
				// 			AND lebearbdatum=:frmDiskAbr.dtBearbDatum
				
				// 			ORDER BY le.leposnr','Report INIT') != IDOK
				
				// Return FALSE
				
				// Else
				
				// Call SqlCommit(hSqlDisk)
				
				// Return TRUE
				
				// Else If strReportName = 'ETITH'
				
				// If NOT SqlPrepare(hSqlDisk,'SELECT harztnr, hhalternr, hti || hvn || \' \' || hnn, hname2, hstr, hort
				
				// 			INTO :nTANr, :nTHNr, :strTHN1, :strTHN2, :strTHStr, :strTHOrt
				
				// 			FROM le,h
				
				// 			WHERE learztnr=harztnr AND lehalternr=hhalternr AND learztnr = :nArztNr
				
				// 			ORDER BY hnn, hvn')
				
				// Return FALSE
				
				// Else
				
				// If NOT SqlExecute(hSqlDisk)
				
				// Return FALSE
				
				// Else
				
				// Call SqlCommit(hSqlDisk)
				
				// Return TRUE
				
				// On SAM_ReportFetchNext
				
				// If strReportName = 'HPRUEF'
				
				// Loop
				
				// Set dtZDatum = DATETIME_Null
				
				// Set strZVon = ''
				
				// Set lsZBemerk = ''
				
				// If bZettel0
				
				// Set strFehler = 'Arzt-Info (nur RA-Infos)'
				
				// Set nTAArztNr = nArztNr
				
				// Set nTANr = NUMBER_Null
				
				// If SqlFetchNext(hSql2,nFetch)
				
				// If nFetch = FETCH_Ok
				
				// Return TRUE
				
				// Else
				
				// Set bZettel0 = FALSE
				
				// Else
				
				// Set bZettel0 = FALSE
				
				// If Not bZettel0
				
				// Call SqlPrepare(hSql2, 'SELECT zvon, zdatum, zbemerk
				
				// INTO :frmDiskAbr.strZVon, :frmDiskAbr.dtZDatum, :frmDiskAbr.lsZBemerk
				
				// FROM z WHERE ' || PalArztNr('z', nArztNr, nArztNr2) || '
				
				// AND zhalternr <>0 AND zhalternr = :frmDiskAbr.nTVNr order by zdatum DESC')
				
				// If bZettel
				
				// If SqlFetchNext(hSql2,nFetch)
				
				// If nFetch = FETCH_Ok
				
				// Return TRUE
				
				// Else
				
				// Set bZettel = FALSE
				
				// Else
				
				// Set bZettel = FALSE
				
				// Else
				
				// If SqlFetchNext(hSqlDisk,nFetch)
				
				// If nFetch = FETCH_Ok
				
				// If nTANrAlt = nTANr And nTANr != 0
				
				// Else
				
				// If nTANr = 0 And dtTAErfDat != DATETIME_Null
				
				// Call SqlImmedSel('SELECT HHALTERNR FROM H
				
				// INTO :frmDiskAbr.nTANr
				
				// WHERE harztnr=:frmDiskAbr.nArztNr AND herfdat = :frmDiskAbr.dtTAErfDat')
				
				// Set strFehler = ''
				
				// 13.04.06
				
				// Set strTALand = PalGetLand(strTAOrt)
				
				// If strTALand = '--'
				
				// Set strFehler = strFehler || '- Land nicht erkannt'
				
				// If nTANr = 0
				
				// Set strSelect2 = 'SELECT HHALTERNR FROM H INTO :frmDiskAbr.nTANr
				
				// WHERE harztnr=:frmDiskAbr.nArztNr AND hvn = :frmDiskAbr.strTAVN
				
				//  AND hnn = :frmDiskAbr.strTANN
				
				// AND @LICS(@TRIM(hstr)) = @LICS(@TRIM(:frmDiskAbr.strTAStr))
				
				// AND @LICS(@TRIM(hort)) = @LICS(@TRIM(:frmDiskAbr.strTAOrt))'
				
				// If strTATi != ''
				
				// Set strSelect2 = strSelect2 || '  AND hti = :frmDiskAbr.strTATi '
				
				// If strTAN2 = ''
				
				// Set strSelect2 = strSelect2 || ' AND hname2 IS NULL'
				
				// Else
				
				// Set strSelect2 = strSelect2 || ' AND @LICS(@TRIM(hname2)) = @LICS(@TRIM(:frmDiskAbr.strTAN2))'
				
				// Call SqlImmedSel(strSelect2)
				
				// If nTANr != 0
				
				// Call SqlImmedX('UPDATE LE SET LEHALTERNR = :frmDiskAbr.nTANr
				
				// WHERE ROWID = :frmDiskAbr.strROWIDLe')
				
				// 09.10.00  	leparztnr IN (:frmDiskAbr.nArztNr, :frmDiskAbr.nArztNr2)
				
				// Call SqlImmedX('UPDATE LEP SET LEPHALTERNR = :frmDiskAbr.nTANr
				
				// WHERE ' || PalArztNr('lep', nArztNr, nArztNr2) || '
				
				// AND lepposnr = :frmDiskAbr.nPosNr
				
				// AND lepbearbeiter=:frmDiskAbr.strBearbeiter
				
				// AND lebearbdatum=:frmDiskAbr.dtBearbDatum')
				
				// If dtTAErfDat != DATETIME_Null
				
				// Call SqlImmedX('UPDATE H SET
				
				// herfdat = :frmDiskAbr.dtTAErfDat
				
				// WHERE harztnr=:frmDiskAbr.nArztNr AND hhalternr = :frmDiskAbr.nTANr')
				
				// If nArztNr2 != nArztNr
				
				// Call SqlImmedX('UPDATE H SET
				
				// herfdat = :frmDiskAbr.dtTAErfDat
				
				// WHERE harztnr=:frmDiskAbr.nArztNr2 AND hhalternr = :frmDiskAbr.nTANr')
				
				// Call SalStatusSetText(hWndForm,'alte Nr. '||SalNumberToStrX(nTANr,0))
				
				// Set nTANrAlt = nTANr
				
				// Set strTAxTi = SalStrUpperX(PalDelBlank(strTATi))
				
				// Set strTAxVN = SalStrUpperX(PalDelBlank(strTAVN))
				
				// Set strTAxNN = SalStrUpperX(PalDelBlank(strTANN))
				
				// Set strTAxN2 = SalStrUpperX(PalDelBlank(strTAN2))
				
				// Set strTAxStr = SalStrUpperX(PalDelBlank(strTAStr))
				
				// Set strTAxOrt = SalStrUpperX(PalDelBlank(strTAOrt))
				
				// Set nTVNr = 999999
				
				// Set strTVTi = ''
				
				// Set strTVVN = ''
				
				// Set strTVNN = ''
				
				// Set strTVN1 = ''
				
				// Set strTVN2 = ''
				
				// Set strTVStr = ''
				
				// Set strTVOrt = ''
				
				// Set strTVLand = '--'
				
				// If nTANr != 0
				
				// Call SqlImmedSel('SELECT hhalternr,hti, hvn, hnn,hti || hvn || \' \' || hnn, hname2,hstr,hort, hland, herfdat, hhalternein, handerehalter
				
				// 			INTO :frmDiskAbr.nTVNr,:frmDiskAbr.strTVTi,:frmDiskAbr.strTVVN,:frmDiskAbr.strTVNN,
				
				// 			:frmDiskAbr.strTVN1, :frmDiskAbr.strTVN2,:frmDiskAbr.strTVStr,:frmDiskAbr.strTVOrt,:frmDiskAbr.strTVLand, :frmDiskAbr.dtTVErfDat,
				
				// 			:frmDiskAbr.nHalterNein, :frmDiskAbr.strAndererHalter
				
				// 			from h
				
				// 			WHERE harztnr=:frmDiskAbr.nArztNr
				
				// 			AND hhalternr = :frmDiskAbr.nTANr')
				
				// If nHalterNein = 1
				
				// Set strFehler = strFehler || '- gesperrt!!! ' || strAndererHalter
				
				// 18.11.03
				
				// Call SqlExecute(hSql2)
				
				// If SqlFetchNext(hSql2,nFetch)
				
				// If nFetch = FETCH_Ok
				
				// Set bZettel = TRUE
				
				// 13.04.06
				
				// Return TRUE
				
				// If nTVNr != 999999
				
				// Set strTVxTi = SalStrUpperX(PalDelBlank(strTVTi))
				
				// Set strTVxVN = SalStrUpperX(PalDelBlank(strTVVN))
				
				// Set strTVxNN = SalStrUpperX(PalDelBlank(strTVNN))
				
				// Set strTVxN2 = SalStrUpperX(PalDelBlank(strTVN2))
				
				// Set strTVxStr = SalStrUpperX(PalDelBlank(strTVStr))
				
				// Set strTVxOrt = SalStrUpperX(PalDelBlank(strTVOrt))
				
				// 13.04.06
				
				// Set strTVOrt = strTVLand || ' ' || strTVOrt
				
				// Set strTAOrt = strTALand || ' ' || strTAOrt
				
				// 09.07.01  rausgenommen, weil TA-Änderungen nicht durchgeführt worden sind :"(dtTAErfDat != DATETIME_Null And dtTAErfDat=dtTVErfDat) Or"
				
				// 16.01.02 rausgenommen und ersetzt: If (strTAxN1=strTVxN1 and strTAxN2=strTVxN2 and strTAxStr=strTVxStr and strTAxOrt=strTVxOrt)
				
				// If strTAxOrt = ''
				
				// Set strFehler = strFehler || '- Ort fehlt'
				
				// Set nTVNr = 0
				
				// Set strTVTi = ''
				
				// Set strTVVN = ''
				
				// Set strTVNN = ''
				
				// Set strTVN1 = ''
				
				// Set strTVN2 = ''
				
				// Set strTVStr = ''
				
				// Set strTVOrt = ''
				
				// Call SqlExecute(hSql2)
				
				// If SqlFetchNext(hSql2,nFetch)
				
				// If nFetch = FETCH_Ok
				
				// Set bZettel = TRUE
				
				// Return TRUE
				
				// Else If (strTAxTi=strTVxTi and strTAxVN=strTVxVN and strTAxNN=strTVxNN and strTAxN2=strTVxN2 and strTAxStr=strTVxStr and strTAxOrt=strTVxOrt and strTALand=strTVLand)
				
				// Set strPLZ = SalStrLeftX(strTAOrt,5)
				
				// Set strStrasse = PalTrimStrPhon(strTAStr)
				
				// Set nByte = SalStrLength(strStrasse)
				
				// If strStrasse != '' And strStrasse != 'Nr'
				
				// Call SqlIstDa( 'FROM mcs WHERE plz = :frmDiskAbr.strPLZ AND strphon = :frmDiskAbr.strStrasse', bMCOk)
				
				// If Not bMCOk
				
				// Set strStrasse = PalTrimStr(strTAStr)
				
				// Set nByte = SalStrLength(strStrasse)
				
				// Call SqlIstDa( 'FROM mcot WHERE plz = :frmDiskAbr.strPLZ AND @LICS(@LEFT(ort, :frmDiskAbr.nByte)) = @LICS(:frmDiskAbr.strStrasse)', bMCOk)
				
				// If Not bMCOk
				
				// Set strFehler = 'PLZ/Straße'
				
				// Return TRUE
				
				// Else
				
				// If nTANr != nTVNr		! im Halterstamm nicht gefunden
				
				// If dtTAErfDat != DATETIME_Null
				
				// Set nTVNr = 0
				
				// Call SqlImmedSel('SELECT hhalternr,hti, hvn, hnn,hti || hvn || \' \' || hnn, hname2,hstr,hort, hland
				
				// 			INTO :frmDiskAbr.nTVNr,:frmDiskAbr.strTVTi,:frmDiskAbr.strTVVN,:frmDiskAbr.strTVNN,
				
				// 			:frmDiskAbr.strTVN1, :frmDiskAbr.strTVN2,:frmDiskAbr.strTVStr,:frmDiskAbr.strTVOrt, :frmDiskAbr.strTVLand
				
				// 			from h
				
				// 			WHERE harztnr=:frmDiskAbr.nArztNr
				
				// 			AND herfdat = :frmDiskAbr.dtTAErfDat')
				
				// If nTVNr = 0	! im Halterstamm unter ErfDat nicht gefunden
				
				// Set strFehler = strFehler || '- von M angegebene Halter ist bei uns nicht vorhanden'
				
				// Set strTVTi = ''
				
				// Set strTVVN = ''
				
				// Set strTVNN = ''
				
				// Set strTVN1 = ''
				
				// Set strTVN2 = ''
				
				// Set strTVStr = ''
				
				// Set strTVOrt = ''
				
				// Call SqlExecute(hSql2)
				
				// If SqlFetchNext(hSql2,nFetch)
				
				// If nFetch = FETCH_Ok
				
				// Set bZettel = TRUE
				
				// Return TRUE
				
				// Else
				
				// If nTANr = 0
				
				// Set strFehler = strFehler || '- fehlt'
				
				// Else
				
				// Set strFehler = strFehler || '- von M angegebene Halter-Nr. ist bei uns nicht vorhanden'
				
				// Set nTVNr = 0
				
				// Set strTVTi = ''
				
				// Set strTVVN = ''
				
				// Set strTVNN = ''
				
				// Set strTVN1 = ''
				
				// Set strTVN2 = ''
				
				// Set strTVStr = ''
				
				// Set strTVOrt = ''
				
				// Call SqlExecute(hSql2)
				
				// If SqlFetchNext(hSql2,nFetch)
				
				// If nFetch = FETCH_Ok
				
				// Set bZettel = TRUE
				
				// Return TRUE
				
				// Else
				
				// Set strFehler = strFehler || '- Änderung'
				
				// Call SqlExecute(hSql2)
				
				// If SqlFetchNext(hSql2,nFetch)
				
				// If nFetch = FETCH_Ok
				
				// Set bZettel = TRUE
				
				// Return TRUE
				
				// If strFehler != ''
				
				// Set strFehler = SalStrMidX(strFehler,2,255)
				
				// Return TRUE
				
				// Else
				
				// Return FALSE
				
				// Else
				
				// Break
				
				// Else If strReportName = 'HLIST'
				
				// If SqlFetchNext(hSqlDisk,nFetch)
				
				// If nFetch = FETCH_Ok
				
				// Return TRUE
				
				// Else
				
				// Return FALSE
				
				// Call SqlCommit( hSqlDisk )
				
				// Else If strReportName = 'ETITH'
				
				// If SqlFetchNext(hSqlDisk,nFetch)
				
				// If nFetch = FETCH_Ok
				
				// Return TRUE
				
				// Else
				
				// Return FALSE
				
				// Call SqlCommit( hSqlDisk )
				
				// On SAM_ReportFinish
				
				// Call SqlDisconnect(hSqlDisk)
				
				// If hSql2
				
				// Call SqlDisconnect(hSql2)
				
				// If strReportName = 'HPRUEF'
				
				// Call SqlImmed('UPDATE le SET lestatus=\'HPRÜF\'
				
				// WHERE ' || PalArztNr('le', nArztNr, nArztNr2) || '
				
				// 			AND lebearbeiter=:frmDiskAbr.strBearbeiter
				
				// 			AND lebearbdatum=:frmDiskAbr.dtBearbDatum')
				
				// Else If strReportName = 'HLIST'
				
				// Call SqlImmed('UPDATE le SET lestatus=\'HLIST\'
				
				// WHERE ' || PalArztNr('le', nArztNr, nArztNr2) || '
				
				// 			AND lebearbeiter=:frmDiskAbr.strBearbeiter
				
				// 			AND lebearbdatum=:frmDiskAbr.dtBearbDatum')
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmDiskAbr_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.lbDiskAktionen.SetWindowColor(Sys.COLOR_IndexWindow, 0xffefef);
			this.lbDiskAktionen.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_DarkBlue);
			// 11.12.17 Ä1587
			this.bExists = this.tblOffeneAbr.SetContextMenu("frmDiskAbrRightClick", 0);
			this.PalHoleTabelle();
			#endregion
		}
		
		/// <summary>
		/// SAM_Activate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmDiskAbr_OnSAM_Activate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
            // 22.01.18 Ä1692
            //FC:FINAL: check if window still exist
			if(App.frmDiskAbr == null)
			{
				return;
			}
            this.nColRow = Sys.TBL_MinRow;
			this.tblOffeneAbr.FindNextRow(ref this.nColRow, Sys.ROW_Selected, 0);
			// Call SalStatusSetText( hWndForm, 'Row ' || SalNumberToStrX( nColRow, 0 ) )
			// Call SalMessageBeep( 0 )

			if (this.picTabs.GetTop() == 0) 
			{
				this.strSelect = @"SELECT LEBEARBDATUM, LEARZTNR,LEBEARBEITER,LEBEARBDATUM, LESTATUS, NULL, count(*)
FROM LE  WHERE LEMANDISK= :strDisk AND (lestatus <> '---' AND lestatus is not null) GROUP BY 1,2,3,4,5";
			}
			else if (this.picTabs.GetTop() == 2) 
			{
				this.strSelect = @"SELECT LEBEARBDATUM, LEARZTNR,LEBEARBEITER,LEBEARBDATUM, LESTATUS, NULL, count(*)
FROM LE  WHERE LEMANDISK= :strDisk AND lestatus = '---' GROUP BY 1,2,3,4,5";
			}
			else
			{
				this.strSelect = @"SELECT LEBEARBDATUM, LEARZTNR,LEBEARBEITER,LEBEARBDATUM, LESTATUS, NULL, count(*)
FROM LE  WHERE LEMANDISK= :strDisk AND lestatus IS NULL GROUP BY 1,2,3,4,5";
			}
			if (Int.SqlConnection(ref this.hSqlAbr)) 
			{
			}
            if (this.tblOffeneAbr.Populate(this.hSqlAbr, this.strSelect, Sys.TBL_FillAll)) ;
            if (this.hSqlAbr.Commit()) 
			{
			}
			if (this.hSqlAbr.Disconnect()) 
			{
			}
			// 14.05.02
			this.PalPruefeSperre();
			// 22.01.18 Ä1692
			if (this.nColRow != Sys.TBL_MinRow) 
			{
				this.tblOffeneAbr.SetRowFlags(this.nColRow, Sys.ROW_Selected, true);
				// 05.02.18 F3108
				this.tblOffeneAbr.SetContextRow(this.nColRow);
			}

			// 19.02.99
			// Set nRow = TBL_MinRow
			// While SalTblFindNextRow( tblOffeneAbr, nRow, 0, 0)
			// Call SalTblSetFocusRow( tblOffeneAbr, nRow )
			// Call SqlImmedSel( 'SELECT arechinfo INTO :frmDiskAbr.tblOffeneAbr.collsMemo FROM a
			// WHERE aarztnr= :frmDiskAbr.tblOffeneAbr.colnArztNr')
			// If (SalDateCurrent() -tblOffeneAbr.coldtBearbDatum)<=1
			// Call VisTblSetRowColor( tblOffeneAbr, nRow, COLOR_DarkGreen )
			// Else If (SalDateCurrent() -tblOffeneAbr.coldtBearbDatum)<=2
			// Call VisTblSetRowColor( tblOffeneAbr, nRow, COLOR_Periwinkle )
			// Else
			// Call VisTblSetRowColor( tblOffeneAbr, nRow, COLOR_DarkRed )
			// Test, um unnötige Locks zu vermeiden
			// Call SqlDisconnect(hSql)
			// Call SqlConnection(hSql)
			// 13.08.02
			// ! Init
			// Set nNrF=0
			// While nNrF<=79
			// Set saFiles[nNrF]=''
			// Set naSize[nNrF]=NUMBER_Null
			// Set dtaDate[nNrF]=DATETIME_Null
			// Set naAttributes[nNrF]=NUMBER_Null
			// Set nNrF = nNrF + 1
			// Set nCountF = VisDosEnumFileInfo( Const.PATH_ABR + '*.ABR', FA_Standard,
			// saFiles, naSize, dtaDate, naAttributes)
			// Set nNrF = 0
			// Set strStatus = ''
			// While nNrF<=nCountF-1
			// Set strStatus = strStatus || ' ' ||  saFiles[nNrF] || '(' || PalStrNum(naSize[nNrF]/1024,4,0) || ')'
			// Set nNrF = nNrF + 1
			// Call SalStatusSetText(hWndForm, strStatus)
			#endregion
		}

		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmDiskAbr_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.EnableWindow(App.frmMain.pbDiskAbr);
			#endregion
		}
		
		/// <summary>
		/// picTabs WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case QO.TABSM_TabActivateFinish:
					this.picTabs_OnTABSM_TabActivateFinish(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// TABSM_TabActivateFinish event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_OnTABSM_TabActivateFinish(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(hWndForm, SAM_Activate, 0, 0)
			this.PalHoleTabelle();
			#endregion
		}
		
		/// <summary>
		/// tblOffeneAbr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblOffeneAbr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblOffeneAbr_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Click:
					this.tblOffeneAbr_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblOffeneAbr_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblOffeneAbr_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblOffeneAbr_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblOffeneAbr, 0xbfffbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblOffeneAbr_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nArztNr = this.tblOffeneAbr.colnArztNr.Number;
			Int.SqlImmedSel(@"SELECT ANR2 INTO :frmDiskAbr.nArztNr2 FROM A
WHERE AARZTNR = :frmDiskAbr.nArztNr");
			if (this.nArztNr2 == 0) 
			{
				this.nArztNr2 = this.nArztNr;
			}
			this.strBearbeiter = this.tblOffeneAbr.colsBearbeiter.Text;
			this.dtBearbDatum = this.tblOffeneAbr.coldtBearbDatum.DateTime;
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblOffeneAbr_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nArztNr = this.tblOffeneAbr.colnArztNr.Number;
			Int.SqlImmedSel(@"SELECT ANR2 INTO :frmDiskAbr.nArztNr2 FROM A
WHERE AARZTNR = :frmDiskAbr.nArztNr");
			if (this.nArztNr2 == 0) 
			{
				this.nArztNr2 = this.nArztNr;
			}
			this.strBearbeiter = this.tblOffeneAbr.colsBearbeiter.Text;
			this.dtBearbDatum = this.tblOffeneAbr.coldtBearbDatum.DateTime;
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblOffeneAbr_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT arechinfo INTO :frmDiskAbr.tblOffeneAbr.collsMemo FROM a
WHERE aarztnr= :frmDiskAbr.tblOffeneAbr.colnArztNr");
			if (this.tblOffeneAbr.colsStatus.Text == "Eing.") 
			{
				this.tblOffeneAbr.nColor = 0xffbfbf;
			}
			else if ((SalDateTime.Current - this.tblOffeneAbr.coldtBearbDatum.DateTime) <= 1) 
			{
				this.tblOffeneAbr.nColor = 0xbfffbf;
			}
			else if ((SalDateTime.Current - this.tblOffeneAbr.coldtBearbDatum.DateTime) <= 2) 
			{
				this.tblOffeneAbr.nColor = 0xbfffff;
			}
			else
			{
				this.tblOffeneAbr.nColor = 0xbfbfff;
			}
			XSal.TblSetRowBackColor(this.tblOffeneAbr, Sys.lParam, this.tblOffeneAbr.nColor);
			// If nColor != COLOR_Yellow
			// Call VisTblSetRowColor (tblOffeneAbr, lParam, COLOR_White)
			#endregion
		}
		
		/// <summary>
		/// lbDiskAktionen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbDiskAktionen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.lbDiskAktionen_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.lbDiskAktionen_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbDiskAktionen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			this.nDiskIndex = this.lbDiskAktionen.GetListSelectedIndex();
			this.strSelect = this.lbDiskAktionen.GetListItemText(this.nDiskIndex);
			if (this.strSelect == "Dateien zusammenfügen") 
			{
				frmAbrDateiX.CreateWindow(this);
			}
			else if (this.strSelect == "Diskette einlesen") 
			{
				frmDiskEin.CreateWindow(this, "", "", "D", "");
			}
			// Else If strSelect = 'Eingang'
			// 13.08.02
			// Call SalModalDialog(dlgText, hWndForm, 'Arzt-Nr. der eingegangenen Abrechnung :', '', strAntwort)
			// Set nArztNr = PalValNum(strAntwort)
			// Set dtBearbDatum = SalDateCurrent()
			// If nArztNr >= 1 and nArztNr <= 9999
			// Call SqlImmedX('INSERT INTO LE (LEBEARBEITER, LEARZTNR, LEHALTERNR, LEMATCH,
			// LEPOSNR, LENAME1, LENAME2, LESTR, LEORT, LEKENNUNGTA, LEBEARBDATUM,
			// LEMANDISK, LEHERFDAT, LESTATUS)
			// VALUES (:SqlUser,:frmDiskAbr.nArztNr,0,NULL,0,
			// NULL, NULL, NULL, NULL, NULL,
			// :frmDiskAbr.dtBearbDatum,\'D\', :frmDiskAbr.dtBearbDatum, \'Eing.\')')
			// Call SqlImmedX('INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
			// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
			// LEBEARBDATUM, LEPZEIDAT)
			// VALUES (:SqlUser,:frmDiskAbr.nArztNr,0,0,0,
			// \'L\',0,NULL, NULL, NULL, NULL,
			// :frmDiskAbr.dtBearbDatum, SYSDATETIME )')
			// Set strSelect = 'SELECT DISTINCT LEARZTNR,LEBEARBEITER,LEBEARBDATUM, LESTATUS, NULL
			// FROM LE  WHERE LEMANDISK= :strDisk ORDER BY LEARZTNR'
			// Call SqlConnection(hSqlAbr)
			// Call SalTblPopulate( tblOffeneAbr,hSqlAbr,strSelect,TBL_FillAll )
			// Call SqlCommit(hSqlAbr)
			// Call SqlDisconnect(hSqlAbr)
			// 14.05.02
			// Call PalPruefeSperre()
			// Else If strSelect = 'Halterliste von Diskette'
			// Set nErr = 1
			// Set strReportName = 'HLIST'
			// Call PalReport(frmDiskAbr,'HLIST.QRP',
			// ':frmDiskAbr.nTANr,:frmDiskAbr.strTAN1,:frmDiskAbr.strTAN2,:frmDiskAbr.strTAStr,:frmDiskAbr.strTAOrt,
			// :frmDiskAbr.nTVNr,:frmDiskAbr.strTVN1,:frmDiskAbr.strTVN2,:frmDiskAbr.strTVStr,:frmDiskAbr.strTVOrt,
			// :frmDiskAbr.nTAArztNr,:frmDiskAbr.strBearbeiter,:frmDiskAbr.dtBearbDatum, :frmDiskAbr.strFehler',
			// 'TAHALTERNR,TANAME1,TANAME2,TASTR,TAORT,
			// TVHALTERNR,TVNAME1,TVNAME2,TVSTR,TVORT,
			// TAARZTNR,BEARBEITER,BEARBDATUM, FEHLER',
			// nErr)
			// Call SalWaitCursor( FALSE )
			else if (this.strSelect == "Halter prüfen") 
			{
				if (frmHalterAnl.CreateWindow(this, this.nArztNr, this.strBearbeiter, this.dtBearbDatum, true) != null) 
				{
				}
				// LL
				if (dlgLlDruck.ModalDialog(App.frmMain, "Halter prüfen.lst", "")) 
				{
				}
				// 24.08.21 von PalFetchEnd hierher verschoben
				if (Var.bfrmDYMODruck) 
				{
					while (!(App.frmDYMODruck.DestroyWindow())) 
					{
					}
				}
				frmDYMODruck.CreateWindow(this, "", "LabelHP");
			}
			else if (this.strSelect == "Halterstamm") 
			{
				frmHalter.CreateWindow(this, "frmDiskAbr", this.nArztNr, 0);
			}
			else if (this.strSelect == "Matchcode suchen") 
			{
				frmMCSuche.CreateWindow(this, this.tblOffeneAbr.colnArztNr.Number);
			}
			else if (this.strSelect == "Abrechnung bearbeiten") 
			{
				frmAbrBearb.CreateWindow(this, "frmDiskAbr");
			}
			else if (this.strSelect == "Halter-Nr. ändern") 
			{
				frmAbrHalter.CreateWindow(this, "frmDiskAbr");
			}
			else if (this.strSelect == "neue Halter anlegen") 
			{
				frmHalterAnl.CreateWindow(this, this.tblOffeneAbr.colnArztNr.Number, this.tblOffeneAbr.colsBearbeiter.Text, this.tblOffeneAbr.coldtBearbDatum.DateTime, false);
			}
			else if (this.strSelect == "Dublettenprüfung") 
			{
				frmDublPruef.CreateWindow(this, this.tblOffeneAbr.colnArztNr.Number, this.tblOffeneAbr.colsBearbeiter.Text, this.tblOffeneAbr.coldtBearbDatum.DateTime);
			}
			// Else If strSelect = 'Dublettenprüfung neu'
			// Call SalCreateWindow( frmDublPruef2,hWndForm
			// ,tblOffeneAbr.colnArztNr,tblOffeneAbr.colsBearbeiter,tblOffeneAbr.coldtBearbDatum )
			else if (this.strSelect == "TVS-Nr.-Diskette erstellen") 
			{
				frmTVSNrLw.CreateWindow(this, this.tblOffeneAbr.colnArztNr.Number, this.tblOffeneAbr.colsBearbeiter.Text, this.tblOffeneAbr.coldtBearbDatum.DateTime);
			}
			// Else If strSelect = 'Rechnungen drucken (alt)'
			// Call SalCreateWindow( frmDruRg,hWndForm
			// ,tblOffeneAbr.colnArztNr,tblOffeneAbr.colsBearbeiter,tblOffeneAbr.coldtBearbDatum )
			else if (this.strSelect == "Vorab-Rechnungen drucken")  // 30.08.11 Ä606
			{
				dlgLlDruck.ModalDialog(App.frmMain, "Vorab-Rechnung.lst", "D");
			}
			else if (this.strSelect == "Rechnungen drucken") 
			{
				// 05.05.08 nahm immer die erste Zeile
				// Call SalCreateWindow( frmSpeRg,hWndForm
				// ,frmDiskAbr.tblOffeneAbr.colnArztNr, frmDiskAbr.tblOffeneAbr.colsBearbeiter, frmDiskAbr.tblOffeneAbr.coldtBearbDatum )
				frmSpeRg.CreateWindow(this, this.nArztNr, this.strBearbeiter, this.dtBearbDatum, "D");
			}
			else if (this.strSelect == "EU-Standardüberweisungen") 
			{
				frmEUUeberw.CreateWindow(this, this.tblOffeneAbr.colnArztNr.Number, this.tblOffeneAbr.colsBearbeiter.Text, this.tblOffeneAbr.coldtBearbDatum.DateTime);
			}
			// Else If strSelect = 'CHF-Überweisungen'
			// Call SalCreateWindow( frmCHFUeberw,hWndForm
			// ,tblOffeneAbr.colnArztNr,tblOffeneAbr.colsBearbeiter,tblOffeneAbr.coldtBearbDatum )
			// Else If strSelect = 'Rechnungsprotokoll drucken'
			// Call SalCreateWindow( frmRechProt,hWndForm
			// ,tblOffeneAbr.colnArztNr,tblOffeneAbr.colsBearbeiter,tblOffeneAbr.coldtBearbDatum )
			else if (this.strSelect == "Rechnungsprotokoll drucken") 
			{
				frmRechProtneu.CreateWindow(this, this.tblOffeneAbr.colnArztNr.Number, this.tblOffeneAbr.colsBearbeiter.Text, this.tblOffeneAbr.coldtBearbDatum.DateTime, "D");
			}
			else if (this.strSelect == "Etiketten aus Rechnungsprotokoll") 
			{
				// Set frmDiskAbr.nErr = 1
				// Set frmDiskAbr.strReportName = 'ETITH'
				// Call PalReport(frmDiskAbr,'ETITH.QRP',
				// ':frmDiskAbr.nTANr,:frmDiskAbr.nTHNr,:frmDiskAbr.strTHN1,:frmDiskAbr.strTHN2,:frmDiskAbr.strTHStr,:frmDiskAbr.strTHOrt',
				// 'ArztNr, HalterNr, HName1, HName2, HStr, HOrt',nErr)
				// LL
				App.frmMain.nArztVon = this.nArztNr;
				dlgLlDruck.ModalDialog(App.frmMain, "Halter14.lbl", "RechProt");
			}
			else if (this.strSelect == "Übergabe OP") 
			{
				frmUebOP.CreateWindow(this, this.tblOffeneAbr.colnArztNr.Number, this.tblOffeneAbr.colsBearbeiter.Text, this.tblOffeneAbr.coldtBearbDatum.DateTime, "D");
			}
			// Else If strSelect = 'RA-Info-Zettel'
			// Call SalCreateWindow(frmZettel,hWndForm,'frmDiskAbr',tblOffeneAbr.colnArztNr, 0, 0)
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbDiskAktionen_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.lbDiskAktionen.AddListItem("Dateien zusammenfügen");
			this.lbDiskAktionen.AddListItem("Diskette einlesen");
			this.lbDiskAktionen.AddListItem("Halter prüfen");
			this.lbDiskAktionen.AddListItem("Matchcode suchen");
			this.lbDiskAktionen.AddListItem("Halterstamm");
			this.lbDiskAktionen.AddListItem("Abrechnung bearbeiten");
			this.lbDiskAktionen.AddListItem("Halter-Nr. ändern");
			this.lbDiskAktionen.AddListItem("neue Halter anlegen");
			this.lbDiskAktionen.AddListItem("Dublettenprüfung");
			// Call SalListAdd( lbDiskAktionen, 'Dublettenprüfung neu' )
			this.lbDiskAktionen.AddListItem("TVS-Nr.-Diskette erstellen");
			this.lbDiskAktionen.AddListItem("Vorab-Rechnungen drucken");
			this.lbDiskAktionen.AddListItem("Rechnungen drucken");
			this.lbDiskAktionen.AddListItem("Rechnungsprotokoll drucken");
			this.lbDiskAktionen.AddListItem("Etiketten aus Rechnungsprotokoll");
			this.lbDiskAktionen.AddListItem("Übergabe OP");
			// Call SalListAdd( lbDiskAktionen, '' )
			// Call SalListAdd( lbDiskAktionen, 'RA-Info-Zettel' )
			#endregion
		}
		
		/// <summary>
		/// dfSumme WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSumme_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_SetFocus:
					this.dfSumme_OnSAM_SetFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_SetFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSumme_OnSAM_SetFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalSumme();
			#endregion
		}
		
		/// <summary>
		/// dfSummeB WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSummeB_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_SetFocus:
					this.dfSummeB_OnSAM_SetFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_SetFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSummeB_OnSAM_SetFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalSumme();
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblOffeneAbr
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblOffeneAbrTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmDiskAbr _frmDiskAbr = null;
			
			
			#region Window Variables
			public SalNumber nColor = 0;
			#endregion
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblOffeneAbrTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmDiskAbr frmDiskAbr
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmDiskAbr == null) 
					{
						_frmDiskAbr = (frmDiskAbr)this.FindForm();
					}
					return _frmDiskAbr;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblOffeneAbrTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblOffeneAbrTableWindow)SalWindow.FromHandle(handle, typeof(tblOffeneAbrTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// collsMemo WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void collsMemo_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.collsMemo_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void collsMemo_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				Int.SqlImmed(@"UPDATE a SET arechinfo = :frmDiskAbr.tblOffeneAbr.collsMemo
WHERE aarztnr = :frmDiskAbr.tblOffeneAbr.colnArztNr");
				#endregion
			}
			
			/// <summary>
			/// colnRec WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnRec_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colnRec_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnRec_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				Int.SqlImmed(@"UPDATE a SET arechinfo = :frmDiskAbr.tblOffeneAbr.collsMemo
WHERE aarztnr = :frmDiskAbr.tblOffeneAbr.colnArztNr");
				#endregion
			}
			#endregion
		}
		#endregion
	}
}
