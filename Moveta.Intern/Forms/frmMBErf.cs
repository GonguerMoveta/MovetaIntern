// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="strParent"></param>
	/// <param name="nProzNr"></param>
	public partial class frmMBErf : SalQuickTabsForm
	{
		#region Window Parameters
		public SalString strParent;
		public SalNumber nProzNr;
		#endregion
		
		#region Window Variables
		public SalNumber nEheleute = 0;
		public SalBoolean bExists = false;
		public SalNumber nResult = 0;
		public SalNumber nArztNr2 = 0;
		public SalNumber nA = 0;
		public SalNumber nR = 0;
		public SalString strBez = "";
		public SalString strPLZ = "";
		public SalString strStr = "";
		public SalSqlHandle hSqlMBErf = SalSqlHandle.Null;
		public SalSqlHandle hSqlMBErfMeldung = SalSqlHandle.Null;
		public SalNumber nFetch = 0;
		public SalNumber nCountZA = 0;
		public SalNumber nHA = 0;
		public SalNumber nHR = 0;
		public SalNumber nFetchOK = 0;
		public SalNumber nPRNr = 0;
		public SalString strKuerzel = "";
		public SalString strZAn = "";
		public SalNumber nRnd = 0;
		public SalDateTime dtVerjaehr = SalDateTime.Null;
		public SalDateTime dtErinnerung = SalDateTime.Null;
		public SalString lsMemo = "";
		public SalNumber nProzHF = 0;
		public SalNumber nDMMahn = 0;
		public SalString strHTi = "";
		public SalString strHVN = "";
		public SalString strHNN = "";
		public SalString strHAnr = "";
		public SalString strGerName = "";
		public SalNumber nGesamt = 0;
		public SalString strPOrt = "";
		public SalString strAGALa = "";
		public SalString strAGALb = "";
		public SalString strAGALc = "";
		public SalString strAGALd = "";
		public SalString strKfz = "";
		public SalNumber nPraxArt = 0;
		public SalString strAGGVFUa = "";
		public SalString strAGGVVNa = "";
		public SalString strAGGVSHa = "";
		public SalString strAGGVPLZa = "";
		public SalString strAGGVOa = "";
		public SalString strAGGVALa = "";
		public SalString strAGGVFUb = "";
		public SalString strAGGVVNb = "";
		public SalString strAGGVSHb = "";
		public SalString strAGGVPLZb = "";
		public SalString strAGGVOb = "";
		public SalString strAGGVALb = "";
		public SalString strAGGVFUc = "";
		public SalString strAGGVVNc = "";
		public SalString strAGGVSHc = "";
		public SalString strAGGVPLZc = "";
		public SalString strAGGVOc = "";
		public SalString strAGGVALc = "";
		public SalString strAGGVFUd = "";
		public SalString strAGGVVNd = "";
		public SalString strAGGVSHd = "";
		public SalString strAGGVPLZd = "";
		public SalString strAGGVOd = "";
		public SalString strAGGVALd = "";
		public SalString strAGGVFUa2 = "";
		public SalString strAGGVVNa2 = "";
		public SalString strAGGVSHa2 = "";
		public SalString strAGGVPLZa2 = "";
		public SalString strAGGVOa2 = "";
		public SalString strAGGVALa2 = "";
		public SalString strAGGVFUb2 = "";
		public SalString strAGGVVNb2 = "";
		public SalString strAGGVSHb2 = "";
		public SalString strAGGVPLZb2 = "";
		public SalString strAGGVOb2 = "";
		public SalString strAGGVALb2 = "";
		public SalString strAGGVFUc2 = "";
		public SalString strAGGVVNc2 = "";
		public SalString strAGGVSHc2 = "";
		public SalString strAGGVPLZc2 = "";
		public SalString strAGGVOc2 = "";
		public SalString strAGGVALc2 = "";
		public SalString strAGGVFUd2 = "";
		public SalString strAGGVVNd2 = "";
		public SalString strAGGVSHd2 = "";
		public SalString strAGGVPLZd2 = "";
		public SalString strAGGVOd2 = "";
		public SalString strAGGVALd2 = "";
		public SalString strAGGVFUa3 = "";
		public SalString strAGGVVNa3 = "";
		public SalString strAGGVSHa3 = "";
		public SalString strAGGVPLZa3 = "";
		public SalString strAGGVOa3 = "";
		public SalString strAGGVALa3 = "";
		public SalString strAGGVFUb3 = "";
		public SalString strAGGVVNb3 = "";
		public SalString strAGGVSHb3 = "";
		public SalString strAGGVPLZb3 = "";
		public SalString strAGGVOb3 = "";
		public SalString strAGGVALb3 = "";
		public SalString strAGGVFUc3 = "";
		public SalString strAGGVVNc3 = "";
		public SalString strAGGVSHc3 = "";
		public SalString strAGGVPLZc3 = "";
		public SalString strAGGVOc3 = "";
		public SalString strAGGVALc3 = "";
		public SalString strAGGVFUd3 = "";
		public SalString strAGGVVNd3 = "";
		public SalString strAGGVSHd3 = "";
		public SalString strAGGVPLZd3 = "";
		public SalString strAGGVOd3 = "";
		public SalString strAGGVALd3 = "";
		public SalString strAGGVFUa4 = "";
		public SalString strAGGVVNa4 = "";
		public SalString strAGGVSHa4 = "";
		public SalString strAGGVPLZa4 = "";
		public SalString strAGGVOa4 = "";
		public SalString strAGGVALa4 = "";
		public SalString strAGGVFUb4 = "";
		public SalString strAGGVVNb4 = "";
		public SalString strAGGVSHb4 = "";
		public SalString strAGGVPLZb4 = "";
		public SalString strAGGVOb4 = "";
		public SalString strAGGVALb4 = "";
		public SalString strAGGVFUc4 = "";
		public SalString strAGGVVNc4 = "";
		public SalString strAGGVSHc4 = "";
		public SalString strAGGVPLZc4 = "";
		public SalString strAGGVOc4 = "";
		public SalString strAGGVALc4 = "";
		public SalString strAGGVFUd4 = "";
		public SalString strAGGVVNd4 = "";
		public SalString strAGGVSHd4 = "";
		public SalString strAGGVPLZd4 = "";
		public SalString strAGGVOd4 = "";
		public SalString strAGGVALd4 = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmMBErf(SalString strParent, SalNumber nProzNr)
		{
			// Assign global reference.
			App.frmMBErf = this;
			// Window Parameters initialization.
			this.strParent = strParent;
			this.nProzNr = nProzNr;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmMBErf CreateWindow(Control owner, SalString strParent, SalNumber nProzNr)
		{
			frmMBErf frm = new frmMBErf(strParent, nProzNr);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmMBErf FromHandle(SalWindowHandle handle)
		{
			return ((frmMBErf)SalWindow.FromHandle(handle, typeof(frmMBErf)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber MaskeLoeschen()
		{
			#region Actions
			using (new SalContext(this))
			{
				tblMB.ResetTable();
				// Call SalClearField(dfA1)
				// Call SalClearField(dfA2)
				// Call SalClearField(dfA3)
				// Call SalClearField(dfA4)
				// Call SalClearField(dfA5)
				// Call SalClearField(dfA6)
				// Call SalClearField(dfRg1)
				// Call SalClearField(dfRg2)
				// Call SalClearField(dfRg3)
				// Call SalClearField(dfRg4)
				// Call SalClearField(dfRg5)
				// Call SalClearField(dfRg6)
				// Call SalClearField(dfDM1)
				// Call SalClearField(dfDM2)
				// Call SalClearField(dfDM3)
				// Call SalClearField(dfDM4)
				// Call SalClearField(dfDM5)
				// Call SalClearField(dfDM6)
				// Call SalClearField(dfMBDat)
				// Call SalClearField(cbEheleute)
				// Call SalClearField(dfEhepartner)
				// Call SalClearField(dfGerKosten)
				Sal.ClearField(dfSumme);
				// Call SalClearField(dfGerName)
				strGerName = "";
				nGesamt = 0;
				Sal.ClearField(dfArztName);
				Sal.ClearField(dfHalterName);
				// Call SalClearField(dfSArztName)
				// Call SalClearField(dfSArztName2)
				Sal.ClearField(dfSHalterName);
				Sal.ClearField(dfSHalterName2);
				Sal.ClearField(dfSHalterStr);
				Sal.ClearField(dfSHalterOrt);
				// 26.08.04
				Sal.ClearField(dfAGANRa);
				Sal.ClearField(dfAGN1a);
				Sal.ClearField(dfAGN2a);
				Sal.ClearField(dfAGN3a);
				Sal.ClearField(dfAGRFa);
				Sal.ClearField(dfAGSHa);
				Sal.ClearField(dfAGPLZa);
				Sal.ClearField(dfAGOa);
				Sal.ClearField(dfPGPLZa);
				Sal.ClearField(dfPGOa);
				Sal.ClearField(dfPGMa);

				Sal.ClearField(dfAGANRb);
				Sal.ClearField(dfAGN1b);
				Sal.ClearField(dfAGN2b);
				Sal.ClearField(dfAGN3b);
				Sal.ClearField(dfAGRFb);
				Sal.ClearField(dfAGSHb);
				Sal.ClearField(dfAGPLZb);
				Sal.ClearField(dfAGOb);
				Sal.ClearField(dfPGPLZb);
				Sal.ClearField(dfPGOb);
				Sal.ClearField(dfPGMb);

				Sal.ClearField(dfAGANRc);
				Sal.ClearField(dfAGN1c);
				Sal.ClearField(dfAGN2c);
				Sal.ClearField(dfAGN3c);
				Sal.ClearField(dfAGRFc);
				Sal.ClearField(dfAGSHc);
				Sal.ClearField(dfAGPLZc);
				Sal.ClearField(dfAGOc);
				Sal.ClearField(dfPGPLZc);
				Sal.ClearField(dfPGOc);
				Sal.ClearField(dfPGMc);

				Sal.ClearField(dfAGANRd);
				Sal.ClearField(dfAGN1d);
				Sal.ClearField(dfAGN2d);
				Sal.ClearField(dfAGN3d);
				Sal.ClearField(dfAGRFd);
				Sal.ClearField(dfAGSHd);
				Sal.ClearField(dfAGPLZd);
				Sal.ClearField(dfAGOd);
				Sal.ClearField(dfPGPLZd);
				Sal.ClearField(dfPGOd);
				Sal.ClearField(dfPGMd);
				// 13.05.19 Ä1852
				Sal.ClearField(dfPGSa);
				Sal.ClearField(dfPGSb);
				Sal.ClearField(dfPGSc);
				Sal.ClearField(dfPGSd);

				pbOK.DisableWindow();

				// Call SalColorSet(cbZ1,COLOR_IndexWindow,COLOR_3DFace)
				// Call SalColorSet(cbZ2,COLOR_IndexWindow,COLOR_3DFace)
				// Call SalColorSet(cbZ3,COLOR_IndexWindow,COLOR_3DFace)
				// Call SalColorSet(cbZ4,COLOR_IndexWindow,COLOR_3DFace)
				// Call SalColorSet(cbZ5,COLOR_IndexWindow,COLOR_3DFace)
				// Call SalColorSet(cbZ6,COLOR_IndexWindow,COLOR_3DFace)
				Sal.ColorSet(cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				Sal.ColorSet(cbZahlungen, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				// Call SalColorSet(cbRaten,COLOR_IndexWindow,COLOR_3DFace)
				// 26.08.04
				cbGS.Checked = false;
				// 05.10.06 A32
				this.strAGGVFUa = "";
				this.strAGGVVNa = "";
				this.strAGGVSHa = "";
				this.strAGGVPLZa = "";
				this.strAGGVOa = "";
				this.strAGGVALa = "";
				this.strAGGVFUb = "";
				this.strAGGVVNb = "";
				this.strAGGVSHb = "";
				this.strAGGVPLZb = "";
				this.strAGGVOb = "";
				this.strAGGVALb = "";
				this.strAGGVFUc = "";
				this.strAGGVVNc = "";
				this.strAGGVSHc = "";
				this.strAGGVPLZc = "";
				this.strAGGVOc = "";
				this.strAGGVALc = "";
				this.strAGGVFUd = "";
				this.strAGGVVNd = "";
				this.strAGGVSHd = "";
				this.strAGGVPLZd = "";
				this.strAGGVOd = "";
				this.strAGGVALd = "";

				this.strAGGVFUa2 = "";
				this.strAGGVVNa2 = "";
				this.strAGGVSHa2 = "";
				this.strAGGVPLZa2 = "";
				this.strAGGVOa2 = "";
				this.strAGGVALa2 = "";
				this.strAGGVFUb2 = "";
				this.strAGGVVNb2 = "";
				this.strAGGVSHb2 = "";
				this.strAGGVPLZb2 = "";
				this.strAGGVOb2 = "";
				this.strAGGVALb2 = "";
				this.strAGGVFUc2 = "";
				this.strAGGVVNc2 = "";
				this.strAGGVSHc2 = "";
				this.strAGGVPLZc2 = "";
				this.strAGGVOc2 = "";
				this.strAGGVALc2 = "";
				this.strAGGVFUd2 = "";
				this.strAGGVVNd2 = "";
				this.strAGGVSHd2 = "";
				this.strAGGVPLZd2 = "";
				this.strAGGVOd2 = "";
				this.strAGGVALd2 = "";

				// 05.01.21 F4669
				this.strAGGVFUa3 = "";
				this.strAGGVVNa3 = "";
				this.strAGGVSHa3 = "";
				this.strAGGVPLZa3 = "";
				this.strAGGVOa3 = "";
				this.strAGGVALa3 = "";

				this.strAGGVFUb3 = "";
				this.strAGGVVNb3 = "";
				this.strAGGVSHb3 = "";
				this.strAGGVPLZb3 = "";
				this.strAGGVOa3 = "";
				this.strAGGVALa3 = "";
				this.strAGGVFUb3 = "";
				this.strAGGVVNb3 = "";
				this.strAGGVSHb3 = "";
				this.strAGGVPLZb3 = "";
				this.strAGGVOb3 = "";
				this.strAGGVALb3 = "";
				this.strAGGVFUc3 = "";
				this.strAGGVVNc3 = "";
				this.strAGGVSHc3 = "";
				this.strAGGVPLZc3 = "";
				this.strAGGVOc3 = "";
				this.strAGGVALc3 = "";
				this.strAGGVFUd3 = "";
				this.strAGGVVNd3 = "";
				this.strAGGVSHd3 = "";
				this.strAGGVPLZd3 = "";
				this.strAGGVOd3 = "";
				this.strAGGVALd3 = "";

				this.strAGGVFUa4 = "";
				this.strAGGVVNa4 = "";
				this.strAGGVSHa4 = "";
				this.strAGGVPLZa4 = "";
				this.strAGGVOa4 = "";
				this.strAGGVALa4 = "";
				this.strAGGVFUb4 = "";
				this.strAGGVVNb4 = "";
				this.strAGGVSHb4 = "";
				this.strAGGVPLZb4 = "";
				this.strAGGVOb4 = "";
				this.strAGGVALb4 = "";
				this.strAGGVFUc4 = "";
				this.strAGGVVNc4 = "";
				this.strAGGVSHc4 = "";
				this.strAGGVPLZc4 = "";
				this.strAGGVOc4 = "";
				this.strAGGVALc4 = "";
				this.strAGGVFUd4 = "";
				this.strAGGVVNd4 = "";
				this.strAGGVSHd4 = "";
				this.strAGGVPLZd4 = "";
				this.strAGGVOd4 = "";
				this.strAGGVALd4 = "";

				Sal.PostMsg(cbGS, Sys.SAM_Click, 0, 0);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nHF"></param>
		/// <returns></returns>
		public SalNumber BerechneGerKosten(SalNumber nHF)
		{
			#region Local Variables
			SalNumber nGK = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				// EURO
				nGK = 0;
				if (nHF <= 600) 
				{
					nGK = 18;
				}
				else if (nHF <= 900) 
				{
					nGK = 45m / 2;
				}
				else if (nHF <= 1200) 
				{
					nGK = 55m / 2;
				}
				else if (nHF <= 1500) 
				{
					nGK = 65m / 2;
				}
				else if (nHF <= 2000) 
				{
					nGK = 73m / 2;
				}
				else if (nHF <= 2500) 
				{
					nGK = 81m / 2;
				}
				else if (nHF <= 3000) 
				{
					nGK = 89m / 2;
				}
				else if (nHF <= 3500) 
				{
					nGK = 97m / 2;
				}
				else if (nHF <= 4000) 
				{
					nGK = 105m / 2;
				}
				else if (nHF <= 4500) 
				{
					nGK = 113m / 2;
				}
				else if (nHF <= 5000) 
				{
					nGK = 121m / 2;
				}
				else if (nHF <= 6000) 
				{
					nGK = 136m / 2;
				}
				else if (nHF <= 7000) 
				{
					nGK = 151m / 2;
				}
				else if (nHF <= 8000) 
				{
					nGK = 166m / 2;
				}
				else if (nHF <= 9000) 
				{
					nGK = 181m / 2;
				}
				else if (nHF <= 10000) 
				{
					nGK = 196m / 2;
				}
				else if (nHF <= 13000) 
				{
					nGK = 219m / 2;
				}
				else if (nHF <= 16000) 
				{
					nGK = 242m / 2;
				}
				else if (nHF <= 19000) 
				{
					nGK = 265m / 2;
				}
				else if (nHF <= 22000) 
				{
					nGK = 288m / 2;
				}
				else if (nHF <= 25000) 
				{
					nGK = 311m / 2;
				}
				else if (nHF <= 30000) 
				{
					nGK = 340m / 2;
				}
				else if (nHF <= 35000) 
				{
					nGK = 369m / 2;
				}
				else if (nHF <= 40000) 
				{
					nGK = 398m / 2;
				}
				else if (nHF <= 45000) 
				{
					nGK = 427m / 2;
				}
				else if (nHF <= 50000) 
				{
					nGK = 456m / 2;
				}
				else if (nHF <= 65000) 
				{
					nGK = 556m / 2;
				}
				else if (nHF <= 80000) 
				{
					nGK = 656m / 2;
				}
				else
				{
					nGK = 756m / 2;
				}
				return nGK;
			}
			#endregion
		}
		// Function: PalHoleGericht
		// Description:
		// Returns
		// String:
		// Parameters
		// String: strPLZ
		// Number: nDM
		// String: strLand
		// Receive String: strStrasse
		// Static Variables
		// Local variables
		// Boolean: bExists
		// String: strSelect
		// Actions
		// #20
		// 15.03.16 Ä960 Ausländer wie Deutsche behandeln
		// If strLand != 'DE' and strLand != ''
		// If nDM<= 5000		! DM 10000		! Amtsgericht
		// Set strBez = 'AG 31008 Elze'
		// Else
		// Set strBez = 'LG 31134 Hildesheim'
		// Return strBez
		// Else
		// If nDM<= 5000		! DM 10000		! Amtsgericht
		// Set strSelect = ' FROM ge WHERE gelg=0 AND geplz= ' || strPLZ
		// Else ! Landgericht
		// Set strSelect = ' FROM ge WHERE gelg=1 AND geplz= ' || strPLZ
		// Call SqlIstDa(strSelect , bExists)
		// If bExists
		// Call SqlImmedSel('SELECT gebez INTO :frmMBErf.strBez ' || strSelect)
		// Return strBez
		// 13.05.19 Ä1852 + Straße
		// If nDM<= 5000		! DM 10000		! Amtsgericht
		// Set strSelect = ' FROM ge WHERE gelg=0 AND geplz= ' || strPLZ
		// Else ! Landgericht
		// Set strSelect = ' FROM ge WHERE gelg=1 AND geplz= ' || strPLZ
		// Call SqlIstDa(strSelect , bExists)
		// If bExists
		// Call SqlImmedSel('SELECT gebez, gestr INTO :frmMBErf.strBez, :frmMBErf.strStr ' || strSelect)
		// If frmMBErf.strStr = ''
		// Call SqlImmedSel('SELECT gestr INTO :frmMBErf.strStr ' || strSelect || ' AND gestr IS NOT NULL' )
		// Set strStrasse = frmMBErf.strStr
		// Return strBez
		/// <summary>
		/// </summary>
		/// <param name="strXPLZ"></param>
		/// <param name="nDM"></param>
		/// <param name="strXBez"></param>
		/// <param name="strLand"></param>
		/// <param name="strStrasse">13.05.19 Ä1852</param>
		/// <returns></returns>
		public SalNumber PalSpeGericht(SalString strXPLZ, SalNumber nDM, SalString strXBez, SalString strLand, SalString strStrasse)
		{
			#region Local Variables
			SalBoolean bExists = false;
			SalString strSelect = "";
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				// #20
				if (strLand == "DE" || strLand == "") 
				{
					strBez = strXBez;
					strPLZ = strXPLZ;
					// EURO
					if (nDM <= 5000)  // DM 10000		! Amtsgericht
					{
						strSelect = " WHERE gelg=0 AND geplz= " + strPLZ;
					}
					else
					{
						strSelect = " WHERE gelg=1 AND geplz= " + strPLZ;
					}
					Int.SqlIstDa("FROM ge " + strSelect, ref bExists);
					// 13.05.19 Ä1852 + Straße
					this.strStr = strStrasse;
					if (bExists) 
					{
						Int.SqlImmed("UPDATE ge SET gebez = :frmMBErf.strBez, gestr = :frmMBErf.strStr " + strSelect);
					}
					else
					{
						if (nDM <= 10000) 
						{
							Int.SqlImmed(@"INSERT INTO ge (gelg, geplz, gebez, gestr)
VALUES(0, :frmMBErf.strPLZ, :frmMBErf.strBez, :frmMBErf.strStr)");
						}
						else
						{
							Int.SqlImmed(@"INSERT INTO ge (gelg, geplz, gebez, gestr)
VALUES(1, :frmMBErf.strPLZ, :frmMBErf.strBez, :frmMBErf.strStr)");
						}
					}
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalNextPRNr()
		{
			#region Local Variables
			SalBoolean bExists = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlImmedSel("SELECT max(prnr)+1 INTO :frmMBErf.nPRNr FROM pr");
				if (nPRNr == SalNumber.Null) 
				{
					nPRNr = 1;
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalHoleInfo()
		{
			#region Local Variables
			SalBoolean bExists = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlIstDa(@" FROM rk
WHERE rkarztnr = :frmMBErf.tblMB.colnArztNr
AND rkmahnstufe<6 AND rkhalternr = :frmMBErf.dfHalterNr AND rkrechnr = :frmMBErf.tblMB.colnRechNr AND rkdeaktiv IS NULL", ref bExists);
				if (!(bExists)) 
				{
					Sal.MessageBox("Keine gültige Rechnungsnr. für diesen Halter!", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
					return false;
				}
				else
				{
					// 17.04.02 keine MG + Zinsen nehmen, da die Berechnung der gerKosten darauf basiert !!!!!
					Int.SqlImmedSel(@"SELECT
(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn), rkverjaehr
INTO :frmMBErf.tblMB.colnDM, :frmMBErf.dtVerjaehr
FROM rk
WHERE rkarztnr = :frmMBErf.tblMB.colnArztNr AND rkkzzahl<>3 AND rkmahnstufe<6 AND rkhalternr=:frmMBErf.dfHalterNr AND rkrechnr = :frmMBErf.tblMB.colnRechNr AND rkdeaktiv IS NULL");
					Int.SqlIstDa(@" FROM Z WHERE zrechnr = :frmMBErf.tblMB.colnRechNr
and zarztnr = :frmMBErf.tblMB.colnArztNr AND zdeaktiv IS NULL", ref bExists);
					if (bExists == true) 
					{
						this.tblMB.colZettel.Number = 1;
					}
					else
					{
						this.tblMB.colZettel.Number = 0;
					}
					// 08.03.01
					if (dtVerjaehr < SalDateTime.Current) 
					{
						Sal.MessageBox("Diese Rechnung ist verjährt !", Int.PalStrNum(this.tblMB.colnArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.tblMB.colnRechNr.Number, 6, 0), Sys.MB_Ok);
					}
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalCheckStrasse()
		{
			#region Actions
			using (new SalContext(this))
			{
				// 13.05.19 Ä1852
				if (this.dfSHalterOrt.Text != "") 
				{
					// 17.06.19 F4506
					// Set strDummy = PalHoleGericht(dfAGPLZa, dfSumme, SalStrLeftX(cmbAGALa,2), dfPGSa)

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalString temp1 = dfPGSa.Text;
					Var.strDummy = Int.PalHoleGericht(((SalString)this.dfSHalterOrt.Text).Trim().Left(((SalString)this.dfSHalterOrt.Text).Trim().Scan(" ")), dfSumme.Number, Sal.StrLeftX(cmbAGALa.Text, 2), ref temp1);
					dfPGSa.Text = temp1;

					if (dfPGSa.Text == "") 
					{
						Sal.ColorSet(dfPGSa, Sys.COLOR_IndexWindow, Sys.COLOR_Red);
						Sal.ColorSet(dfPGSa, Sys.COLOR_IndexWindowText, Sys.COLOR_White);
					}
					else
					{
						Sal.ColorSet(dfPGSa, Sys.COLOR_IndexWindow, Sys.COLOR_White);
						Sal.ColorSet(dfPGSa, Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
					}
				}
				if (Int.PalValNum(dfAGPLZb.Text) > 0) 
				{

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalString temp2 = dfPGSb.Text;
					Var.strDummy = Int.PalHoleGericht(dfAGPLZb.Text, dfSumme.Number, Sal.StrLeftX(cmbAGALb.Text, 2), ref temp2);
					dfPGSb.Text = temp2;

					if (dfPGSb.Text == "") 
					{
						Sal.ColorSet(dfPGSb, Sys.COLOR_IndexWindow, Sys.COLOR_Red);
						Sal.ColorSet(dfPGSb, Sys.COLOR_IndexWindowText, Sys.COLOR_White);
					}
					else
					{
						Sal.ColorSet(dfPGSb, Sys.COLOR_IndexWindow, Sys.COLOR_White);
						Sal.ColorSet(dfPGSb, Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
					}
				}
				if (Int.PalValNum(dfAGPLZc.Text) > 0) 
				{

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalString temp3 = dfPGSc.Text;
					Var.strDummy = Int.PalHoleGericht(dfAGPLZc.Text, dfSumme.Number, Sal.StrLeftX(cmbAGALc.Text, 2), ref temp3);
					dfPGSc.Text = temp3;

					if (dfPGSc.Text == "") 
					{
						Sal.ColorSet(dfPGSc, Sys.COLOR_IndexWindow, Sys.COLOR_Red);
						Sal.ColorSet(dfPGSc, Sys.COLOR_IndexWindowText, Sys.COLOR_White);
					}
					else
					{
						Sal.ColorSet(dfPGSc, Sys.COLOR_IndexWindow, Sys.COLOR_White);
						Sal.ColorSet(dfPGSc, Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
					}
				}
				if (Int.PalValNum(dfAGPLZd.Text) > 0) 
				{

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalString temp4 = dfPGSd.Text;
					Var.strDummy = Int.PalHoleGericht(dfAGPLZd.Text, dfSumme.Number, Sal.StrLeftX(cmbAGALd.Text, 2), ref temp4);
					dfPGSd.Text = temp4;

					if (dfPGSd.Text == "") 
					{
						Sal.ColorSet(dfPGSd, Sys.COLOR_IndexWindow, Sys.COLOR_Red);
						Sal.ColorSet(dfPGSd, Sys.COLOR_IndexWindowText, Sys.COLOR_White);
					}
					else
					{
						Sal.ColorSet(dfPGSd, Sys.COLOR_IndexWindow, Sys.COLOR_White);
						Sal.ColorSet(dfPGSd, Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
					}
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmMBErf WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMBErf_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmMBErf_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_CreateComplete:
					this.frmMBErf_OnSAM_CreateComplete(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmMBErf_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMBErf_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlConnection(ref this.hSqlMBErf);
			Int.SqlConnection(ref this.hSqlMBErfMeldung);
			// 20.01.14 Ä1005
			// Set bOK = SqlCreateSession(hSqlSession,'')
			// Set bOK=SqlCreateStatement (hSqlSession, hSql)
			// Call SqlSetIsolationLevel(hSql,'RO')
			Int.SqlConnection(ref Var.hSql);

			// 26.04.06
			this.cmbAGALa.PopulateList(Var.hSql, "SELECT lccode || \' \' || lcname FROM lc WHERE lckfz IS NOT NULL order by lccode");
			this.cmbAGALb.PopulateList(Var.hSql, "SELECT lccode || \' \' || lcname FROM lc WHERE lckfz IS NOT NULL order by lccode");
			this.cmbAGALc.PopulateList(Var.hSql, "SELECT lccode || \' \' || lcname FROM lc WHERE lckfz IS NOT NULL order by lccode");
			this.cmbAGALd.PopulateList(Var.hSql, "SELECT lccode || \' \' || lcname FROM lc WHERE lckfz IS NOT NULL order by lccode");
			// 20.01.14 Ä1005
			Var.hSql.Disconnect();
			// Call SqlFreeSession( hSqlSession )


			// 06.01.13 Ä1005
			// Call SqlImmedSel('SELECT COUNT(*) INTO :frmMBErf.dfAnzMeldungen
			// FROM z WHERE zart = \'MB\' AND zerledigt <> \'J\' ')
			this.dfAnzMeldungen.Number = Int.SqlGetAnzahl("FROM z WHERE zart = \'MB\' AND zerledigt <> \'J\' AND zdeaktiv IS NULL ");

			if (this.dfAnzMeldungen.Number == 0) 
			{
				this.pbZurück.DisableWindow();
				this.pbWeiter.DisableWindow();
			}
			this.hSqlMBErfMeldung.PrepareAndExecute(@"SELECT zarztnr, zhalternr INTO :frmMBErf.dfArztNr, :frmMBErf.dfHalterNr
FROM z WHERE zart = 'MB' AND zerledigt <> 'J' AND zdeaktiv IS NULL  order by zarztnr, zhalternr");
			this.MaskeLoeschen();
			// Set cbEheleute = FALSE
			this.dfMBDat.DateTime = SalDateTime.Current;
			// Call SqlImmedSel( 'SELECT badm2 INTO :frmMBErf.dfGerKosten FROM ba
			// WHERE banr = 1')
			// 09.08.18 Ä1662
			if (this.strParent == "frmMB") 
			{
				this.pbOK.HideWindow();
				this.SetText("Antragsgegner für PR " + this.nProzNr.ToString(0));
				Int.SqlImmedSel(@"SELECT preproznr, preaggm,
preaganra, preagn1a, preagn2a, preagn3a, preagrfa, preagsha, preagplza, preagoa, preagala, prepgma, prepgplza, prepgoa,
preaganrb, preagn1b, preagn2b, preagn3b, preagrfb, preagshb, preagplzb, preagob, preagalb, prepgmb, prepgplzb, prepgob,
preaganrc, preagn1c, preagn2c, preagn3c, preagrfc, preagshc, preagplzc, preagoc, preagalc, prepgmc, prepgplzc, prepgoc,
preaganrd, preagn1d, preagn2d, preagn3d, preagrfd, preagshd, preagplzd, preagod, preagald, prepgmd, prepgplzd, prepgod,
preaggvfua, preaggvvna, preaggvsha, preaggvplza, preaggvoa, preaggvala,
preaggvfub, preaggvvnb, preaggvshb, preaggvplzb, preaggvob, preaggvalb,
preaggvfuc, preaggvvnc, preaggvshc, preaggvplzc, preaggvoc, preaggvalc,
preaggvfud, preaggvvnd, preaggvshd, preaggvplzd, preaggvod, preaggvald,
preaggvfua2, preaggvvna2, preaggvsha2, preaggvplza2, preaggvoa2, preaggvala2,
preaggvfub2, preaggvvnb2, preaggvshb2, preaggvplzb2, preaggvob2, preaggvalb2,
preaggvfuc2, preaggvvnc2, preaggvshc2, preaggvplzc2, preaggvoc2, preaggvalc2,
preaggvfud2, preaggvvnd2, preaggvshd2, preaggvplzd2, preaggvod2, preaggvald2,
preaggvfua3, preaggvvna3, preaggvsha3, preaggvplza3, preaggvoa3, preaggvala3,
preaggvfub3, preaggvvnb3, preaggvshb3, preaggvplzb3, preaggvob3, preaggvalb3,
preaggvfuc3, preaggvvnc3, preaggvshc3, preaggvplzc3, preaggvoc3, preaggvalc3,
preaggvfud3, preaggvvnd3, preaggvshd3, preaggvplzd3, preaggvod3, preaggvald3,
preaggvfua4, preaggvvna4, preaggvsha4, preaggvplza4, preaggvoa4, preaggvala4,
preaggvfub4, preaggvvnb4, preaggvshb4, preaggvplzb4, preaggvob4, preaggvalb4,
preaggvfuc4, preaggvvnc4, preaggvshc4, preaggvplzc4, preaggvoc4, preaggvalc4,
preaggvfud4, preaggvvnd4, preaggvshd4, preaggvplzd4, preaggvod4, preaggvald4
INTO :frmMBErf.nPRNr, :frmMBErf.nGesamt,
:frmMBErf.dfAGANRa, :frmMBErf.dfAGN1a, :frmMBErf.dfAGN2a, :frmMBErf.dfAGN3a, :frmMBErf.dfAGRFa,
:frmMBErf.dfAGSHa, :frmMBErf.dfAGPLZa, :frmMBErf.dfAGOa, :frmMBErf.strAGALa, :frmMBErf.dfPGMa, :frmMBErf.dfPGPLZa, :frmMBErf.dfPGOa,
:frmMBErf.dfAGANRb, :frmMBErf.dfAGN1b, :frmMBErf.dfAGN2b, :frmMBErf.dfAGN3b, :frmMBErf.dfAGRFb,
:frmMBErf.dfAGSHb, :frmMBErf.dfAGPLZb, :frmMBErf.dfAGOb, :frmMBErf.strAGALb, :frmMBErf.dfPGMb, :frmMBErf.dfPGPLZb, :frmMBErf.dfPGOb,
:frmMBErf.dfAGANRc, :frmMBErf.dfAGN1c, :frmMBErf.dfAGN2c, :frmMBErf.dfAGN3c, :frmMBErf.dfAGRFc,
:frmMBErf.dfAGSHc, :frmMBErf.dfAGPLZc, :frmMBErf.dfAGOc, :frmMBErf.strAGALc, :frmMBErf.dfPGMc, :frmMBErf.dfPGPLZc, :frmMBErf.dfPGOc,
:frmMBErf.dfAGANRd, :frmMBErf.dfAGN1d, :frmMBErf.dfAGN2d, :frmMBErf.dfAGN3d, :frmMBErf.dfAGRFd,
:frmMBErf.dfAGSHd, :frmMBErf.dfAGPLZd, :frmMBErf.dfAGOd, :frmMBErf.strAGALd, :frmMBErf.dfPGMd, :frmMBErf.dfPGPLZd, :frmMBErf.dfPGOd,
:frmMBErf.strAGGVFUa, :frmMBErf.strAGGVVNa, :frmMBErf.strAGGVSHa, :frmMBErf.strAGGVPLZa, :frmMBErf.strAGGVOa, :frmMBErf.strAGGVALa,
:frmMBErf.strAGGVFUb, :frmMBErf.strAGGVVNb, :frmMBErf.strAGGVSHb, :frmMBErf.strAGGVPLZb, :frmMBErf.strAGGVOb, :frmMBErf.strAGGVALb,
:frmMBErf.strAGGVFUc, :frmMBErf.strAGGVVNc, :frmMBErf.strAGGVSHc, :frmMBErf.strAGGVPLZc, :frmMBErf.strAGGVOc, :frmMBErf.strAGGVALc,
:frmMBErf.strAGGVFUd, :frmMBErf.strAGGVVNd, :frmMBErf.strAGGVSHd, :frmMBErf.strAGGVPLZd, :frmMBErf.strAGGVOd, :frmMBErf.strAGGVALd,
:frmMBErf.strAGGVFUa2, :frmMBErf.strAGGVVNa2, :frmMBErf.strAGGVSHa2, :frmMBErf.strAGGVPLZa2, :frmMBErf.strAGGVOa2, :frmMBErf.strAGGVALa2,
:frmMBErf.strAGGVFUb2, :frmMBErf.strAGGVVNb2, :frmMBErf.strAGGVSHb2, :frmMBErf.strAGGVPLZb2, :frmMBErf.strAGGVOb2, :frmMBErf.strAGGVALb2,
:frmMBErf.strAGGVFUc2, :frmMBErf.strAGGVVNc2, :frmMBErf.strAGGVSHc2, :frmMBErf.strAGGVPLZc2, :frmMBErf.strAGGVOc2, :frmMBErf.strAGGVALc2,
:frmMBErf.strAGGVFUd2, :frmMBErf.strAGGVVNd2, :frmMBErf.strAGGVSHd2, :frmMBErf.strAGGVPLZd2, :frmMBErf.strAGGVOd2, :frmMBErf.strAGGVALd2,
:frmMBErf.strAGGVFUa3, :frmMBErf.strAGGVVNa3, :frmMBErf.strAGGVSHa3, :frmMBErf.strAGGVPLZa3, :frmMBErf.strAGGVOa3, :frmMBErf.strAGGVALa3,
:frmMBErf.strAGGVFUb3, :frmMBErf.strAGGVVNb3, :frmMBErf.strAGGVSHb3, :frmMBErf.strAGGVPLZb3, :frmMBErf.strAGGVOb3, :frmMBErf.strAGGVALb3,
:frmMBErf.strAGGVFUc3, :frmMBErf.strAGGVVNc3, :frmMBErf.strAGGVSHc3, :frmMBErf.strAGGVPLZc3, :frmMBErf.strAGGVOc3, :frmMBErf.strAGGVALc3,
:frmMBErf.strAGGVFUd3, :frmMBErf.strAGGVVNd3, :frmMBErf.strAGGVSHd3, :frmMBErf.strAGGVPLZd3, :frmMBErf.strAGGVOd3, :frmMBErf.strAGGVALd3,
:frmMBErf.strAGGVFUa4, :frmMBErf.strAGGVVNa4, :frmMBErf.strAGGVSHa4, :frmMBErf.strAGGVPLZa4, :frmMBErf.strAGGVOa4, :frmMBErf.strAGGVALa4,
:frmMBErf.strAGGVFUb4, :frmMBErf.strAGGVVNb4, :frmMBErf.strAGGVSHb4, :frmMBErf.strAGGVPLZb4, :frmMBErf.strAGGVOb4, :frmMBErf.strAGGVALb4,
:frmMBErf.strAGGVFUc4, :frmMBErf.strAGGVVNc4, :frmMBErf.strAGGVSHc4, :frmMBErf.strAGGVPLZc4, :frmMBErf.strAGGVOc4, :frmMBErf.strAGGVALc4,
:frmMBErf.strAGGVFUd4, :frmMBErf.strAGGVVNd4, :frmMBErf.strAGGVSHd4, :frmMBErf.strAGGVPLZd4, :frmMBErf.strAGGVOd4, :frmMBErf.strAGGVALd4
FROM pre WHERE preproznr = :frmMBErf.nProzNr");

				this.cbGS.Checked = this.nGesamt == 1;
				Sal.PostMsg(this.cbGS, Sys.SAM_Click, 0, 0);
				// 13.05.19 Ä1852
				this.PalCheckStrasse();
				// 01.07.19

				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalString temp1 = this.dfPGSa.Text;
				this.strGerName = Int.PalHoleGericht(this.dfAGPLZa.Text, this.dfSumme.Number, ((SalString)this.cmbAGALa.Text).Left(2), ref temp1);
				this.dfPGSa.Text = temp1;

				Int.SqlImmedSel("SELECT gestr INTO :frmMBErf.dfPGSa FROM ge WHERE gebez = :frmMBErf.strGerName AND gestr IS NOT NULL");
				this.dfPGPLZa.Text = this.strGerName.Mid(3, 255);
				this.dfPGOa.Text = this.strGerName.Mid(9, 255);
				// 13.05.19 Ä1852
				if (this.dfPGSa.Text == "") 
				{
					this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Red);
					this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_White);
				}
				else
				{
					this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_White);
					this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
				}
			}
			else
			{
				this.pbAGOk.HideWindow();
				this.pbausHeinfg.HideWindow();
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMBErf_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.strParent == "frmMB") 
			{
				this.picTabs.Enable(0, false);
				this.picTabs.BringToTop(1, true);
			}
			else
			{
				this.picTabs.Enable(0, true);
				this.picTabs.BringToTop(0, true);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMBErf_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlMBErf.Disconnect();
			this.hSqlMBErfMeldung.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// picTabs WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case QO.TABSM_TabActivateStart:
					this.picTabs_OnTABSM_TabActivateStart(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// TABSM_TabActivateStart event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_OnTABSM_TabActivateStart(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.picTabs.SelectedIndex = this.picTabs.GetClicked();
			if (this.picTabs.SelectedIndex == 0) 
			{
				if (this.strParent == "frmMB") 
				{
					e.Return = false;
					return;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT aname1,aname2, anr2, akzpraxart
INTO :frmMBErf.dfSArztName,:frmMBErf.dfSArztName2, :frmMBErf.nArztNr2, :frmMBErf.nPraxArt
from A where aarztnr=:frmMBErf.dfArztNr");
			// 10.08.09 OTF306 + PraxArt
			if (this.nPraxArt == 2) 
			{
				this.dfArztNr.Number = this.nArztNr2;
				Int.SqlImmedSel(@"SELECT aname1,aname2, anr2, akzpraxart
INTO :frmMBErf.dfSArztName,:frmMBErf.dfSArztName2, :frmMBErf.nArztNr2, :frmMBErf.nPraxArt
from A where aarztnr=:frmMBErf.dfArztNr");
			}
			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.MaskeLoeschen();
			Int.SqlImmedSel(@"SELECT htitel, hti, hvn, hnn,hort,hname2,hstr, hproz3, hland
into :frmMBErf.strHAnr, :frmMBErf.strHTi, :frmMBErf.strHVN, :frmMBErf.strHNN, :frmMBErf.dfSHalterOrt, :frmMBErf.dfSHalterName2, :frmMBErf.dfSHalterStr, :frmMBErf.nProzHF, :frmMBErf.strAGALa
from H where hhalternr=:frmMBErf.dfHalterNr and harztnr=:frmMBErf.dfArztNr AND hdeaktiv IS NULL");
			// #20
			this.strKfz = "";
			Int.SqlImmedSel("SELECT lckfz INTO :frmMBErf.strKfz FROM lc WHERE lccode = :frmMBErf.strAGALa");
			if (this.strKfz == "") 
			{
				Sal.MessageBox("Dieses Land (" + this.strAGALa + @") gehört nicht zu den Ländern,
in die Mahnbescheide zugestellt werden können!", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.MaskeLoeschen();
			}
			else
			{
				Int.SqlImmedSel("SELECT lccode INTO :frmMBErf.cmbAGALa FROM lc WHERE lccode = :frmMBErf.strAGALa");
				// 26.08.04
				this.dfSHalterName.Text = this.strHTi + this.strHVN + " " + this.strHNN;
				this.dfAGN1a.Text = this.strHVN;
				this.dfAGN2a.Text = this.strHTi + this.strHNN;
				this.dfAGN3a.Text = this.dfSHalterName2.Text;
				this.dfAGSHa.Text = this.dfSHalterStr.Text;
				this.dfAGPLZa.Text = ((SalString)this.dfSHalterOrt.Text).Left(5);
				this.dfAGOa.Text = ((SalString)this.dfSHalterOrt.Text).Mid(5, 255).Trim();
				this.cmbAGALa.Text = Int.PalPruefeLC(this.cmbAGALa.Text, 2);
				if (this.strHAnr.ToUpper().Left(1) == "H") 
				{
					this.dfAGANRa.Number = 1;
				}
				else if (this.strHAnr.ToUpper().Left(1) == "F") 
				{
					this.dfAGANRa.Number = 2;
				}
				else
				{
					this.dfAGANRa.Number = 3;
				}
				if (this.nProzHF == SalNumber.Null || this.nProzHF < 8) 
				{
					// 26.01.07 A6
					this.nProzHF = -5;
				}
				// Call SqlIstDa(' FROM mb
				// WHERE mbarztnr = :frmMBErf.dfArztNr
				// AND mbhalternr = :frmMBErf.dfHalterNr',bExists)
				// If bExists
				// Call SqlImmedX('SELECT mbarztnr, mbhalternr, mbdatum,
				// mba1, mba2, mba3, mba4, mba5, mba6,
				// mbrg1, mbrg2, mbrg3, mbrg4, mbrg5, mbrg6,
				// mbeheleute, mbehepartner, mbgerkosten, mbgername
				// INTO :frmMBErf.dfArztNr, :frmMBErf.dfHalterNr, :frmMBErf.dfMBDat,
				// :frmMBErf.dfA1, :frmMBErf.dfA2, :frmMBErf.dfA3, :frmMBErf.dfA4, :frmMBErf.dfA5, :frmMBErf.dfA6,
				// :frmMBErf.dfRg1, :frmMBErf.dfRg2, :frmMBErf.dfRg3, :frmMBErf.dfRg4, :frmMBErf.dfRg5, :frmMBErf.dfRg6,
				// :frmMBErf.nEheleute, :frmMBErf.dfEhepartner, :frmMBErf.dfGerKosten, :frmMBErf.dfGerName
				// FROM mb WHERE mbarztnr = :frmMBErf.dfArztNr
				// AND mbhalternr = :frmMBErf.dfHalterNr')

				if (!(this.dfHalterNr.IsEmpty())) 
				{

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalBoolean temp1 = this.cbZettel.Checked;
					Int.SqlIstDa(" FROM Z WHERE zhalternr=" + this.dfHalterNr.Number.ToString(0) + @" AND zdeaktiv IS NULL
and " + Int.PalArztNr("z", this.dfArztNr.Number, this.nArztNr2), ref temp1);
					this.cbZettel.Checked = temp1;

					if (this.cbZettel.Checked == true) 
					{
						Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
					}
					else
					{
						Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
					}


					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalBoolean temp2 = this.cbZahlungen.Checked;
					Int.SqlIstDa(" FROM ZA WHERE zahalternr=" + this.dfHalterNr.Number.ToString(0) + @" AND zadeaktiv IS NULL
and " + Int.PalArztNr("za", this.dfArztNr.Number, this.nArztNr2), ref temp2);
					this.cbZahlungen.Checked = temp2;

					if (this.cbZahlungen.Checked == true) 
					{
						Sal.ColorSet(this.cbZahlungen, Sys.COLOR_IndexWindow, Sys.COLOR_Yellow);
					}
					else
					{
						Sal.ColorSet(this.cbZahlungen, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
					}

					// Call SqlIstDa(' FROM r WHERE rhalternr=' || SalNumberToStrX(dfHalterNr,0) || '
					// and ' || PalArztNr('r', dfArztNr, nArztNr2) ,frmMBErf.cbRaten)
					// If cbRaten
					// Call SalColorSet(cbRaten,COLOR_IndexWindow,COLOR_Red)
					// Else
					// Call SalColorSet(cbRaten,COLOR_IndexWindow,COLOR_3DFace)
					// #19 21.04.06
					if (((SalString)this.cmbAGALa.Text).Left(2) == "DE") 
					{
						Int.SqlImmedSel("SELECT ort INTO :frmMBErf.strPOrt FROM mcplz WHERE plz = :frmMBErf.dfAGPLZa");
						if (this.strPOrt != this.dfAGOa.Text && this.strPOrt != "") 
						{
							if (Sys.IDYES == Sal.MessageBox("In der PLZ-Datenbank steht für die PLZ " + this.dfAGPLZa.Text + " der Ort " + this.strPOrt + @"

Soll dieser Ort übernommen werden?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
							{
								this.lsMemo = @"***** HS geändert bei MB-Erfassung wg.: PLZ passt nicht zum Ort
" + this.dfAGOa.Text + " -> " + this.strPOrt;
								// 06.09.07 F246
								// Call SqlImmed('INSERT INTO Z VALUES (:strBNZei, :frmMBErf.strZAn, :frmMBErf.dfArztNr, :frmMBErf.dfHalterNr, 0,
								// :frmMBErf.lsMemo , SYSDATE, NULL, \'J\', \'HS\', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,1)')
								// 13.05.14 F2027
								this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

								Int.SqlImmed(@"INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :strBNZei, :frmMBErf.dfArztNr, :frmMBErf.dfHalterNr, 0,
:frmMBErf.lsMemo , SYSDATE, NULL, 'J', 'HS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,1, SYSDATETIME)");

								this.dfAGOa.Text = this.strPOrt;
								this.strPOrt = this.dfAGPLZa.Text + " " + this.strPOrt;
								Int.SqlImmed("UPDATE h SET hort = :frmMBErf.strPOrt WHERE harztnr = :frmMBErf.dfArztNr AND hhalternr = :frmMBErf.dfHalterNr");
								Sal.MessageBox("Die MB-Erfassungsmaske und der Halterstamm wurden geändert.", "Ok", (Sys.MB_Ok | Sys.MB_IconAsterisk));
							}
						}
						// 07.06.19
						this.dfAGPLZa.PostMessage(Sys.SAM_Validate, 0, 0);
					}
				}
			}
			// Call SalSetFocus(dfA1)
			#endregion
		}
		
		/// <summary>
		/// tblMB WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblMB_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_RowHeaderClick:
					this.tblMB_OnSAM_RowHeaderClick(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblMB_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmZettel.CreateWindow(this.tblMB, "frmMBErf", this.tblMB.colnArztNr.Number, this.dfHalterNr.Number, this.tblMB.colnRechNr.Number);
			#endregion
		}
		
		/// <summary>
		/// pbNeu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeu_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.nRow = this.tblMB.InsertRow(Sys.TBL_MaxRow);
			this.tblMB.SetFocusCell(Var.nRow, this.tblMB.colnRechNr, 0, 0);
			this.tblMB.colnArztNr.Number = this.dfArztNr.Number;
			#endregion
		}
		
		/// <summary>
		/// pbLoe WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoe_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoe_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoe_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblMB.AnyRows(Sys.ROW_Selected, 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblMB.FindNextRow(ref Var.nRow, Sys.ROW_Selected, 0))) 
					{
						break;
					}
					// Call SalTblSetFocusRow( tblMB, nRow )
					this.tblMB.DeleteRow(Var.nRow, Sys.TBL_NoAdjust);
				}
			}
			else
			{
				Sal.MessageBox("Bitte die zu löschende Zeilen markieren.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			#endregion
		}
		
		/// <summary>
		/// dfArztName WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztName_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztName_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztName_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			tblArzt.CreateWindow(this, "frmMBErf", this.dfArztName.Text);
			#endregion
		}
		
		/// <summary>
		/// dfHalterName WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterName_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterName_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterName_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(this.dfHalterName.IsEmpty())) 
			{
				Sal.WaitCursor(true);
				tblHalter.CreateWindow(this, "frmMBErf", this.dfArztNr.Number, 0, this.dfHalterName.Text, "", "", "", "");
			}
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Set nResult = SalMessageBox( 'Sind alle Rechnungen für
			// diesen Halter erfaßt ?','Achtung',
			// MB_YesNo|MB_IconExclamation )
			if (this.dfSumme.Number <= 5000)  // DM 10000		! Amtsgericht
			{
				if (!(this.dfAGPLZa.IsEmpty())) 
				{
					this.PalSpeGericht(this.dfAGPLZa.Text, this.dfSumme.Number, "AG " + this.dfPGPLZa.Text + " " + this.dfPGOa.Text, ((SalString)this.cmbAGALa.Text).Left(2), this.dfPGSa.Text);
				}
				if (!(this.dfAGPLZb.IsEmpty())) 
				{
					this.PalSpeGericht(this.dfAGPLZb.Text, this.dfSumme.Number, "AG " + this.dfPGPLZb.Text + " " + this.dfPGOb.Text, ((SalString)this.cmbAGALb.Text).Left(2), this.dfPGSb.Text);
				}
				if (!(this.dfAGPLZc.IsEmpty())) 
				{
					this.PalSpeGericht(this.dfAGPLZc.Text, this.dfSumme.Number, "AG " + this.dfPGPLZc.Text + " " + this.dfPGOc.Text, ((SalString)this.cmbAGALc.Text).Left(2), this.dfPGSc.Text);
				}
				if (!(this.dfAGPLZd.IsEmpty())) 
				{
					this.PalSpeGericht(this.dfAGPLZd.Text, this.dfSumme.Number, "AG " + this.dfPGPLZd.Text + " " + this.dfPGOd.Text, ((SalString)this.cmbAGALd.Text).Left(2), this.dfPGSd.Text);
				}
			}
			else
			{
				if (!(this.dfAGPLZa.IsEmpty())) 
				{
					this.PalSpeGericht(this.dfAGPLZa.Text, this.dfSumme.Number, "LG " + this.dfPGPLZa.Text + " " + this.dfPGOa.Text, ((SalString)this.cmbAGALa.Text).Left(2), this.dfPGSa.Text);
				}
				if (!(this.dfAGPLZb.IsEmpty())) 
				{
					this.PalSpeGericht(this.dfAGPLZb.Text, this.dfSumme.Number, "LG " + this.dfPGPLZb.Text + " " + this.dfPGOb.Text, ((SalString)this.cmbAGALb.Text).Left(2), this.dfPGSb.Text);
				}
				if (!(this.dfAGPLZc.IsEmpty())) 
				{
					this.PalSpeGericht(this.dfAGPLZc.Text, this.dfSumme.Number, "LG " + this.dfPGPLZc.Text + " " + this.dfPGOc.Text, ((SalString)this.cmbAGALc.Text).Left(2), this.dfPGSc.Text);
				}
				if (!(this.dfAGPLZd.IsEmpty())) 
				{
					this.PalSpeGericht(this.dfAGPLZd.Text, this.dfSumme.Number, "LG " + this.dfPGPLZd.Text + " " + this.dfPGOd.Text, ((SalString)this.cmbAGALd.Text).Left(2), this.dfPGSd.Text);
				}
			}
			// If nResult = IDYES
			// If cbEheleute=TRUE
			// Set nEheleute = 1
			// Else
			// Set nEheleute = 0
			// 18.06.98
			this.PalNextPRNr();

			// Call SqlIstDa(' FROM mb
			// WHERE mbarztnr = :frmMBErf.dfArztNr
			// AND mbhalternr = :frmMBErf.dfHalterNr',bExists)
			// Set bExists = FALSE
			// If bExists
			// Call SqlImmedX('UPDATE mb SET mbarztnr=:frmMBErf.dfArztNr,
			// mbhalternr=:frmMBErf.dfHalterNr,
			// mbdatum=:frmMBErf.dfMBDat,
			// mbrg1=:frmMBErf.dfRg1,
			// mbrg2=:frmMBErf.dfRg2,
			// mbrg3=:frmMBErf.dfRg3,
			// mbrg4=:frmMBErf.dfRg4,
			// mbrg5=:frmMBErf.dfRg5,
			// mbrg6=:frmMBErf.dfRg6,
			// mba1=:frmMBErf.dfA1,
			// mba2=:frmMBErf.dfA2,
			// mba3=:frmMBErf.dfA3,
			// mba4=:frmMBErf.dfA4,
			// mba5=:frmMBErf.dfA5,
			// mba6=:frmMBErf.dfA6,
			// mbeheleute=:frmMBErf.nEheleute,
			// mbehepartner=:frmMBErf.dfEhepartner,
			// mbgerkosten=:frmMBErf.dfGerKosten,
			// mbgername=:frmMBErf.dfGerName,
			// mbnr = :frmMBErf.nPRNr
			// WHERE mbarztnr = :frmMBErf.dfArztNr
			// AND mbhalternr = :frmMBErf.dfHalterNr')
			// Else
			// 20.03.19 Ä1842 nur noch 5% ÜBZ, daher nur noch nZIDI = 5
			// Call SqlImmedX('INSERT INTO mb (mbarztnr, mbhalternr, mbdatum,
			// mbeheleute, mbehepartner, mbgerkosten, mbgername, mbnr, mbprozhf)
			// VALUES (:frmMBErf.dfArztNr, :frmMBErf.dfHalterNr, :frmMBErf.dfMBDat,
			// 0, NULL, 0, NULL, :frmMBErf.nPRNr, :frmMBErf.nProzHF)')
			Int.SqlImmedX(@"INSERT INTO mb (mbarztnr, mbhalternr, mbdatum,
mbeheleute, mbehepartner, mbgerkosten, mbgername, mbnr, mbprozhf)
VALUES (:frmMBErf.dfArztNr, :frmMBErf.dfHalterNr, :frmMBErf.dfMBDat,
0, NULL, 0, NULL, :frmMBErf.nPRNr, -5)");

			this.strKuerzel = App.frmMain.strUser.Left(2);
			this.strZAn = Int.PalZust(this.dfArztNr.Number);
			// Set nRnd =  SalNumberRandom()
			// If nRnd <11000
			// Set strZAn = 'SE'
			// Else If nRnd >=11000 And nRnd < 22000
			// Set strZAn = 'KO'
			// Else
			// Set strZAn = 'ZK'
			// 10.09.18 Ä1783 42 -> 49
			this.dtErinnerung = SalDateTime.Current + 49;
			this.lsMemo = "*** Auto-Erinnerung nach MB-Erstellung ***";
			// 13.05.14 F2027
			this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

			Int.SqlImmed(@"INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :frmMBErf.strZAn, :frmMBErf.dfArztNr, :frmMBErf.dfHalterNr, 0,
:frmMBErf.lsMemo , SYSDATE, :frmMBErf.dtErinnerung, 'J', 'TN', NULL, NULL, :frmMBErf.nPRNr, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
			// 04.03.02
			if (this.tblMB.AnyRows(0, 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblMB.FindNextRow(ref Var.nRow, 0, 0))) 
					{
						break;
					}
					this.tblMB.SetFocusRow(Var.nRow);
					Int.SqlImmed(@"INSERT INTO prd (prdnr, prdarztnr, prdhalternr, prdrechnr)
VALUES( :frmMBErf.nPRNr, :frmMBErf.tblMB.colnArztNr, :frmMBErf.dfHalterNr,  :frmMBErf.tblMB.colnRechNr)");
				}
			}
			// 18.06.98
			if (this.dfPGMa.Number == 1) 
			{
				this.strGerName = "AG ";
			}
			else
			{
				this.strGerName = "LG ";
			}
			this.strGerName = this.strGerName + this.dfPGPLZa.Text + " " + this.dfPGOa.Text;
			Int.SqlImmed(@"INSERT INTO pr (prarztnr, prhalternr, prrechnr, prdatum, prnr, prgername, prprozhf, prprozko)
VALUES( :frmMBErf.dfArztNr, :frmMBErf.dfHalterNr, 999990,
:frmMBErf.dfMBDat, :frmMBErf.nPRNr, :frmMBErf.strGerName, :frmMBErf.nProzHF, 4)");
			// 26.04.06
			this.strAGALa = ((SalString)this.cmbAGALa.Text).Left(2);
			Int.SqlImmedSel("SELECT lckfz INTO :frmMBErf.strAGALa FROM lc WHERE lccode = :frmMBErf.strAGALa");
			if (this.strAGALa == "D") 
			{
				this.strAGALa = "";
			}
			this.strAGALb = ((SalString)this.cmbAGALb.Text).Left(2);
			Int.SqlImmedSel("SELECT lckfz INTO :frmMBErf.strAGALb FROM lc WHERE lccode = :frmMBErf.strAGALb");
			if (this.strAGALb == "D") 
			{
				this.strAGALb = "";
			}
			this.strAGALc = ((SalString)this.cmbAGALc.Text).Left(2);
			Int.SqlImmedSel("SELECT lckfz INTO :frmMBErf.strAGALc FROM lc WHERE lccode = :frmMBErf.strAGALc");
			if (this.strAGALc == "D") 
			{
				this.strAGALc = "";
			}
			this.strAGALd = ((SalString)this.cmbAGALd.Text).Left(2);
			Int.SqlImmedSel("SELECT lckfz INTO :frmMBErf.strAGALd FROM lc WHERE lccode = :frmMBErf.strAGALd");
			if (this.strAGALd == "D") 
			{
				this.strAGALd = "";
			}
			// 26.08.04
			this.nGesamt = this.cbGS.Checked;
			if (this.nGesamt == 0) 
			{
				this.dfAGANRb.Clear();
				this.dfAGN1b.Clear();
				this.dfAGN2b.Clear();
				this.dfAGN3b.Clear();
				this.dfAGRFb.Clear();
				this.dfAGSHb.Clear();
				this.dfAGPLZb.Clear();
				this.dfAGOb.Clear();
				this.cmbAGALb.Clear();
				this.dfPGPLZb.Clear();
				this.dfPGOb.Clear();
				this.dfPGMb.Clear();

				this.dfAGANRc.Clear();
				this.dfAGN1c.Clear();
				this.dfAGN2c.Clear();
				this.dfAGN3c.Clear();
				this.dfAGRFc.Clear();
				this.dfAGSHc.Clear();
				this.dfAGPLZc.Clear();
				this.dfAGOc.Clear();
				this.cmbAGALc.Clear();
				this.dfPGPLZc.Clear();
				this.dfPGOc.Clear();
				this.dfPGMc.Clear();

				this.dfAGANRd.Clear();
				this.dfAGN1d.Clear();
				this.dfAGN2d.Clear();
				this.dfAGN3d.Clear();
				this.dfAGRFd.Clear();
				this.dfAGSHd.Clear();
				this.dfAGPLZd.Clear();
				this.dfAGOd.Clear();
				this.cmbAGALd.Clear();
				this.dfPGPLZd.Clear();
				this.dfPGOd.Clear();
				this.dfPGMd.Clear();
				// 05.10.06 A32
				this.strAGGVFUb = "";
				this.strAGGVVNb = "";
				this.strAGGVSHb = "";
				this.strAGGVPLZb = "";
				this.strAGGVOb = "";
				this.strAGGVALb = "";
				this.strAGGVFUc = "";
				this.strAGGVVNc = "";
				this.strAGGVSHc = "";
				this.strAGGVPLZc = "";
				this.strAGGVOc = "";
				this.strAGGVALc = "";
				this.strAGGVFUd = "";
				this.strAGGVVNd = "";
				this.strAGGVSHd = "";
				this.strAGGVPLZd = "";
				this.strAGGVOd = "";
				this.strAGGVALd = "";

				this.strAGGVFUb2 = "";
				this.strAGGVVNb2 = "";
				this.strAGGVSHb2 = "";
				this.strAGGVPLZb2 = "";
				this.strAGGVOb2 = "";
				this.strAGGVALb2 = "";
				this.strAGGVFUc2 = "";
				this.strAGGVVNc2 = "";
				this.strAGGVSHc2 = "";
				this.strAGGVPLZc2 = "";
				this.strAGGVOc2 = "";
				this.strAGGVALc2 = "";
				this.strAGGVFUd2 = "";
				this.strAGGVVNd2 = "";
				this.strAGGVSHd2 = "";
				this.strAGGVPLZd2 = "";
				this.strAGGVOd2 = "";
				this.strAGGVALd2 = "";

				this.strAGGVFUb3 = "";
				this.strAGGVVNb3 = "";
				this.strAGGVSHb3 = "";
				this.strAGGVPLZb3 = "";
				this.strAGGVOb3 = "";
				this.strAGGVALb3 = "";
				this.strAGGVFUc3 = "";
				this.strAGGVVNc3 = "";
				this.strAGGVSHc3 = "";
				this.strAGGVPLZc3 = "";
				this.strAGGVOc3 = "";
				this.strAGGVALc3 = "";
				this.strAGGVFUd3 = "";
				this.strAGGVVNd3 = "";
				this.strAGGVSHd3 = "";
				this.strAGGVPLZd3 = "";
				this.strAGGVOd3 = "";
				this.strAGGVALd3 = "";

				this.strAGGVFUb4 = "";
				this.strAGGVVNb4 = "";
				this.strAGGVSHb4 = "";
				this.strAGGVPLZb4 = "";
				this.strAGGVOb4 = "";
				this.strAGGVALb4 = "";
				this.strAGGVFUc4 = "";
				this.strAGGVVNc4 = "";
				this.strAGGVSHc4 = "";
				this.strAGGVPLZc4 = "";
				this.strAGGVOc4 = "";
				this.strAGGVALc4 = "";
				this.strAGGVFUd4 = "";
				this.strAGGVVNd4 = "";
				this.strAGGVSHd4 = "";
				this.strAGGVPLZd4 = "";
				this.strAGGVOd4 = "";
				this.strAGGVALd4 = "";

			}
			Int.SqlImmed(@"INSERT INTO pre(preproznr, presa, preaggm,
preaganra, preagn1a, preagn2a, preagn3a, preagrfa, preagsha, preagplza, preagoa, preagala, prepgma, prepgplza, prepgoa,
preaganrb, preagn1b, preagn2b, preagn3b, preagrfb, preagshb, preagplzb, preagob, preagalb, prepgmb, prepgplzb, prepgob,
preaganrc, preagn1c, preagn2c, preagn3c, preagrfc, preagshc, preagplzc, preagoc, preagalc, prepgmc, prepgplzc, prepgoc,
preaganrd, preagn1d, preagn2d, preagn3d, preagrfd, preagshd, preagplzd, preagod, preagald, prepgmd, prepgplzd, prepgod,
preaggvfua, preaggvvna, preaggvsha, preaggvplza, preaggvoa, preaggvala,
preaggvfub, preaggvvnb, preaggvshb, preaggvplzb, preaggvob, preaggvalb,
preaggvfuc, preaggvvnc, preaggvshc, preaggvplzc, preaggvoc, preaggvalc,
preaggvfud, preaggvvnd, preaggvshd, preaggvplzd, preaggvod, preaggvald,
preaggvfua2, preaggvvna2, preaggvsha2, preaggvplza2, preaggvoa2, preaggvala2,
preaggvfub2, preaggvvnb2, preaggvshb2, preaggvplzb2, preaggvob2, preaggvalb2,
preaggvfuc2, preaggvvnc2, preaggvshc2, preaggvplzc2, preaggvoc2, preaggvalc2,
preaggvfud2, preaggvvnd2, preaggvshd2, preaggvplzd2, preaggvod2, preaggvald2,
preaggvfua3, preaggvvna3, preaggvsha3, preaggvplza3, preaggvoa3, preaggvala3,
preaggvfub3, preaggvvnb3, preaggvshb3, preaggvplzb3, preaggvob3, preaggvalb3,
preaggvfuc3, preaggvvnc3, preaggvshc3, preaggvplzc3, preaggvoc3, preaggvalc3,
preaggvfud3, preaggvvnd3, preaggvshd3, preaggvplzd3, preaggvod3, preaggvald3,
preaggvfua4, preaggvvna4, preaggvsha4, preaggvplza4, preaggvoa4, preaggvala4,
preaggvfub4, preaggvvnb4, preaggvshb4, preaggvplzb4, preaggvob4, preaggvalb4,
preaggvfuc4, preaggvvnc4, preaggvshc4, preaggvplzc4, preaggvoc4, preaggvalc4,
preaggvfud4, preaggvvnd4, preaggvshd4, preaggvplzd4, preaggvod4, preaggvald4)
VALUES(:frmMBErf.nPRNr, '01', :frmMBErf.nGesamt,
:frmMBErf.dfAGANRa, :frmMBErf.dfAGN1a, :frmMBErf.dfAGN2a, :frmMBErf.dfAGN3a, :frmMBErf.dfAGRFa,
:frmMBErf.dfAGSHa, :frmMBErf.dfAGPLZa, :frmMBErf.dfAGOa, :frmMBErf.strAGALa, :frmMBErf.dfPGMa, :frmMBErf.dfPGPLZa, :frmMBErf.dfPGOa,
:frmMBErf.dfAGANRb, :frmMBErf.dfAGN1b, :frmMBErf.dfAGN2b, :frmMBErf.dfAGN3b, :frmMBErf.dfAGRFb,
:frmMBErf.dfAGSHb, :frmMBErf.dfAGPLZb, :frmMBErf.dfAGOb, :frmMBErf.strAGALb, :frmMBErf.dfPGMb, :frmMBErf.dfPGPLZb, :frmMBErf.dfPGOb,
:frmMBErf.dfAGANRc, :frmMBErf.dfAGN1c, :frmMBErf.dfAGN2c, :frmMBErf.dfAGN3c, :frmMBErf.dfAGRFc,
:frmMBErf.dfAGSHc, :frmMBErf.dfAGPLZc, :frmMBErf.dfAGOc, :frmMBErf.strAGALc, :frmMBErf.dfPGMc, :frmMBErf.dfPGPLZc, :frmMBErf.dfPGOc,
:frmMBErf.dfAGANRd, :frmMBErf.dfAGN1d, :frmMBErf.dfAGN2d, :frmMBErf.dfAGN3d, :frmMBErf.dfAGRFd,
:frmMBErf.dfAGSHd, :frmMBErf.dfAGPLZd, :frmMBErf.dfAGOd, :frmMBErf.strAGALd, :frmMBErf.dfPGMd, :frmMBErf.dfPGPLZd, :frmMBErf.dfPGOd,
:frmMBErf.strAGGVFUa, :frmMBErf.strAGGVVNa, :frmMBErf.strAGGVSHa, :frmMBErf.strAGGVPLZa, :frmMBErf.strAGGVOa, :frmMBErf.strAGGVALa,
:frmMBErf.strAGGVFUb, :frmMBErf.strAGGVVNb, :frmMBErf.strAGGVSHb, :frmMBErf.strAGGVPLZb, :frmMBErf.strAGGVOb, :frmMBErf.strAGGVALb,
:frmMBErf.strAGGVFUc, :frmMBErf.strAGGVVNc, :frmMBErf.strAGGVSHc, :frmMBErf.strAGGVPLZc, :frmMBErf.strAGGVOc, :frmMBErf.strAGGVALc,
:frmMBErf.strAGGVFUd, :frmMBErf.strAGGVVNd, :frmMBErf.strAGGVSHd, :frmMBErf.strAGGVPLZd, :frmMBErf.strAGGVOd, :frmMBErf.strAGGVALd,
:frmMBErf.strAGGVFUa2, :frmMBErf.strAGGVVNa2, :frmMBErf.strAGGVSHa2, :frmMBErf.strAGGVPLZa2, :frmMBErf.strAGGVOa2, :frmMBErf.strAGGVALa2,
:frmMBErf.strAGGVFUb2, :frmMBErf.strAGGVVNb2, :frmMBErf.strAGGVSHb2, :frmMBErf.strAGGVPLZb2, :frmMBErf.strAGGVOb2, :frmMBErf.strAGGVALb2,
:frmMBErf.strAGGVFUc2, :frmMBErf.strAGGVVNc2, :frmMBErf.strAGGVSHc2, :frmMBErf.strAGGVPLZc2, :frmMBErf.strAGGVOc2, :frmMBErf.strAGGVALc2,
:frmMBErf.strAGGVFUd2, :frmMBErf.strAGGVVNd2, :frmMBErf.strAGGVSHd2, :frmMBErf.strAGGVPLZd2, :frmMBErf.strAGGVOd2, :frmMBErf.strAGGVALd2,
:frmMBErf.strAGGVFUa3, :frmMBErf.strAGGVVNa3, :frmMBErf.strAGGVSHa3, :frmMBErf.strAGGVPLZa3, :frmMBErf.strAGGVOa3, :frmMBErf.strAGGVALa3,
:frmMBErf.strAGGVFUb3, :frmMBErf.strAGGVVNb3, :frmMBErf.strAGGVSHb3, :frmMBErf.strAGGVPLZb3, :frmMBErf.strAGGVOb3, :frmMBErf.strAGGVALb3,
:frmMBErf.strAGGVFUc3, :frmMBErf.strAGGVVNc3, :frmMBErf.strAGGVSHc3, :frmMBErf.strAGGVPLZc3, :frmMBErf.strAGGVOc3, :frmMBErf.strAGGVALc3,
:frmMBErf.strAGGVFUd3, :frmMBErf.strAGGVVNd3, :frmMBErf.strAGGVSHd3, :frmMBErf.strAGGVPLZd3, :frmMBErf.strAGGVOd3, :frmMBErf.strAGGVALd3,
:frmMBErf.strAGGVFUa4, :frmMBErf.strAGGVVNa4, :frmMBErf.strAGGVSHa4, :frmMBErf.strAGGVPLZa4, :frmMBErf.strAGGVOa4, :frmMBErf.strAGGVALa4,
:frmMBErf.strAGGVFUb4, :frmMBErf.strAGGVVNb4, :frmMBErf.strAGGVSHb4, :frmMBErf.strAGGVPLZb4, :frmMBErf.strAGGVOb4, :frmMBErf.strAGGVALb4,
:frmMBErf.strAGGVFUc4, :frmMBErf.strAGGVVNc4, :frmMBErf.strAGGVSHc4, :frmMBErf.strAGGVPLZc4, :frmMBErf.strAGGVOc4, :frmMBErf.strAGGVALc4,
:frmMBErf.strAGGVFUd4, :frmMBErf.strAGGVVNd4, :frmMBErf.strAGGVSHd4, :frmMBErf.strAGGVPLZd4, :frmMBErf.strAGGVOd4, :frmMBErf.strAGGVALd4)");

			this.dfArztNr.Clear();
			this.dfHalterNr.Clear();
			this.MaskeLoeschen();
			this.dfArztNr.SetFocus();
			#endregion
		}
		
		/// <summary>
		/// pbLoeschen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeschen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoeschen_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeschen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.IsEmpty() || this.dfHalterNr.IsEmpty()) 
			{
				Sal.MessageBox(@"Zum Löschen bitte ArztNr und
HalterNr angeben", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				Int.SqlImmedX(@"DELETE FROM mb
WHERE mbarztnr = :frmMBErf.dfArztNr
AND mbhalternr = :frmMBErf.dfHalterNr");
			}
			#endregion
		}
		
		/// <summary>
		/// pbSuchen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSuchen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSuchen_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSuchen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// If Not SalIsWindowEnabled( frmMain.pbSuchen )
			// If SalDestroyWindow(frmRgSuchen)
			// Call SalCreateWindow(frmRgSuchen,hWndForm, dfArztNr, dfHalterNr, 0)
			App.frmRgSuchen.PalFuelle(this.dfArztNr.Number, this.dfHalterNr.Number, 0);
			#endregion
		}
		
		/// <summary>
		/// pbFuellen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbFuellen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbFuellen_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbFuellen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			this.tblMB.ResetTable();
			// 27.03.03 +  AND rkrechnr<999990
			Int.SqlIstDa("FROM rk WHERE " + Int.PalArztNr("rk", this.dfArztNr.Number, this.nArztNr2) + @"  AND rkhalternr = :frmMBErf.dfHalterNr
AND rkkzzahl<2 AND rkrechnr<999990 AND rkmahnstufe IN (3,4,5) AND rkfaelldat<SYSDATE AND (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn)>0.5 AND rkdeaktiv IS NULL", ref this.bExists);
			if (!(this.bExists)) 
			{
				Sal.MessageBox("Es gibt keine nennenswerten offenen Hauptforderungen für diesen Halter !", "MB nicht möglich !", Sys.MB_Ok);
			}
			else
			{
				// 15.01.02 ltz. H. Sasse 0.5E statt 5DM
				// Call SqlHandleExec(hSqlMBErf,
				// 'SELECT rkarztnr, rkrechnr
				// INTO :frmMBErf.nHA,  :frmMBErf.nHR
				// FROM rk WHERE rkarztnr IN (:frmMBErf.dfArztNr, :frmMBErf.nArztNr2) AND rkhalternr = :frmMBErf.dfHalterNr
				// AND rkkzzahl<2 AND rkmahnstufe IN (3,4,5) AND rkfaelldat<SYSDATE AND (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn)>0.5','Füllen Rechnungen',nCount)
				// Call SqlCommit(hSqlMBErf)
				// If SqlFetchNext( hSqlMBErf, nFetchOK)
				// Set dfA1 = nHA
				// Set dfRg1 = nHR
				// Call SalPostMsg( dfRg1, SAM_Validate,0,0 )
				// 24.05.02 (rkdmleis+rkdmarzn+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkzazins)>0.5 ---> (rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn)>0.5
				// 12.11.04 (rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn)  ---> (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn)
				Int.SqlHandleExec(this.hSqlMBErf, @"SELECT rkarztnr, rkrechnr
INTO :frmMBErf.nHA,  :frmMBErf.nHR
FROM rk WHERE " + Int.PalArztNr("rk", this.dfArztNr.Number, this.nArztNr2) + @"  AND rkhalternr = :frmMBErf.dfHalterNr
AND rkkzzahl<2 AND rkrechnr<999990 AND rkmahnstufe IN (3,4,5) AND rkfaelldat<SYSDATE AND  (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn)>0.5 AND rkdeaktiv IS NULL", "Füllen Rechnungen", ref Var.nCount);
				this.nFetchOK = this.hSqlMBErf.FetchNext();
				while (this.nFetchOK != Sys.FETCH_EOF) 
				{
					// 28.04.14 F1670
					Int.SqlIstDa(@" FROM prd
WHERE prdarztnr = :frmMBErf.nHA AND prdrechnr = :frmMBErf.nHR", ref this.bExists);
					if (this.bExists) 
					{
						// 11.06.14 F1670	27.06.14 Fragen statt ablehnen lt. Sa
						// Call SalMessageBox( 'Für die Rechnungsnr. ' || SalNumberToStrX( frmMBErf.tblMB.colnArztNr, 0 ) || '/R' || SalNumberToStrX( frmMBErf.tblMB.colnRechNr, 0 ) || ' ist bereits ein Mahnbescheid erlassen worden.
						// Daher wird diese Rechnung hier ausgelassen !','Achtung', MB_Ok|MB_IconExclamation )
						if (Sys.IDYES == Sal.MessageBox("Für die Rechnungsnr. " + this.nHA.ToString(0) + "/R" + this.nHR.ToString(0) + @" ist bereits ein Mahnbescheid erlassen worden.
Möchten Sie dennoch fortfahren?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							this.bExists = false;
							Int.PalLog("MBErf " + Int.PalStrNum(this.nHA, 4, 0) + "/R" + Int.PalStrNum(this.nHR, 6, 0) + " fortfahren=Ja");
						}
					}
					if (!(this.bExists)) 
					{
						Var.nRow = this.tblMB.InsertRow(Sys.TBL_MaxRow);
						this.tblMB.SetFocusCell(Var.nRow, this.tblMB.colZettel, 0, 0);
						this.tblMB.colnArztNr.Number = this.nHA;
						this.tblMB.colnRechNr.Number = this.nHR;
						this.PalHoleInfo();
					}
					this.nFetchOK = this.hSqlMBErf.FetchNext();
				}
				this.hSqlMBErf.Commit();
				// If SqlFetchNext( hSqlMBErf, nFetchOK)
				// Set dfA3 = nHA
				// Set dfRg3 = nHR
				// Call SalPostMsg( dfRg3, SAM_Validate,0,0 )
				// If SqlFetchNext( hSqlMBErf, nFetchOK)
				// Set dfA4 = nHA
				// Set dfRg4 = nHR
				// Call SalPostMsg( dfRg4, SAM_Validate,0,0 )
				// If SqlFetchNext( hSqlMBErf, nFetchOK)
				// Set dfA5 = nHA
				// Set dfRg5 = nHR
				// Call SalPostMsg( dfRg5, SAM_Validate,0,0 )
				// If SqlFetchNext( hSqlMBErf, nFetchOK)
				// Set dfA6 = nHA
				// Set dfRg6 = nHR
				// Call SalPostMsg( dfRg6, SAM_Validate,0,0 )
				// If SqlFetchNext( hSqlMBErf, nFetchOK)
				// Call SalMessageBox('Die 6 Rechnungsnr. reichen
				// nicht aus !!!
				// Bitte legen Sie manuell einen
				// weiteren MB an.','ACHTUNG!!', MB_Ok)
			}

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// cbZettel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZettel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbZettel_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZettel_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmZettel.CreateWindow(this, "frmMBErf", this.dfArztNr.Number, this.dfHalterNr.Number, this.nArztNr2);

			// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
			SalBoolean temp1 = this.cbZettel.Checked;
			Int.SqlIstDa(@" FROM Z WHERE zhalternr=:frmMBErf.dfHalterNr AND zdeaktiv IS NULL
and " + Int.PalArztNr("z", this.dfArztNr.Number, this.nArztNr2), ref temp1);
			this.cbZettel.Checked = temp1;

			if (this.cbZettel.Checked == true) 
			{
				Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
			}
			else
			{
				Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			}
			#endregion
		}
		
		/// <summary>
		/// cbZahlungen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZahlungen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbZahlungen_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZahlungen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			tblZahlungen.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number, 0);
			#endregion
		}
		
		/// <summary>
		/// pbZurück WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZurück_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbZurück_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZurück_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nFetch = this.hSqlMBErfMeldung.FetchPrevious();
			this.hSqlMBErfMeldung.Commit();
			this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0);
			this.dfHalterNr.PostMessage(Sys.SAM_Validate, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// pbWeiter WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbWeiter_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbWeiter_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbWeiter_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nFetch = this.hSqlMBErfMeldung.FetchNext();
			this.hSqlMBErfMeldung.Commit();
			this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0);
			this.dfHalterNr.PostMessage(Sys.SAM_Validate, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// pbGVa WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbGVa_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbGVa_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbGVa_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			dlgEDAGV.ModalDialog(this, "a", this.strAGGVFUa, this.strAGGVVNa, this.strAGGVSHa, this.strAGGVPLZa, this.strAGGVOa, this.strAGGVALa, this.strAGGVFUa2, this.strAGGVVNa2, this.strAGGVSHa2, this.strAGGVPLZa2, this.strAGGVOa2, this.strAGGVALa2, 
				this.strAGGVFUa3, this.strAGGVVNa3, this.strAGGVSHa3, this.strAGGVPLZa3, this.strAGGVOa3, this.strAGGVALa3, this.strAGGVFUa4, this.strAGGVVNa4, this.strAGGVSHa4, this.strAGGVPLZa4, this.strAGGVOa4, this.strAGGVALa4);
			#endregion
		}
		
		/// <summary>
		/// dfAGPLZa WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAGPLZa_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfAGPLZa_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAGPLZa_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Int.PalValNum(this.dfAGPLZa.Text) > 0) 
			{

				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalString temp1 = this.dfPGSa.Text;
				this.strGerName = Int.PalHoleGericht(this.dfAGPLZa.Text, this.dfSumme.Number, ((SalString)this.cmbAGALa.Text).Left(2), ref temp1);
				this.dfPGSa.Text = temp1;

				this.dfPGPLZa.Text = this.strGerName.Mid(3, 255);
				this.dfPGOa.Text = this.strGerName.Mid(9, 255);
				// 13.05.19 Ä1852
				if (this.dfPGSa.Text == "") 
				{
					this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Red);
					this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_White);
				}
				else
				{
					this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_White);
					this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// cmbAGALa WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbAGALa_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.cmbAGALa_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbAGALa_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;

			// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
			SalString temp1 = this.dfPGSa.Text;
			this.strGerName = Int.PalHoleGericht("", this.dfSumme.Number, ((SalString)this.cmbAGALa.Text).Left(2), ref temp1);
			this.dfPGSa.Text = temp1;

			this.dfPGPLZa.Text = this.strGerName.Mid(3, 255);
			this.dfPGOa.Text = this.strGerName.Mid(9, 255);
			// 13.05.19 Ä1852
			if (this.dfPGSa.Text == "") 
			{
				this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Red);
				this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_White);
			}
			else
			{
				this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_White);
				this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
			}
			#endregion
		}
		
		/// <summary>
		/// dfPGSa WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPGSa_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfPGSa_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPGSa_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfPGMa.Number == 1) 
			{
				if (!(this.dfAGPLZa.IsEmpty())) 
				{
					this.PalSpeGericht(this.dfAGPLZa.Text, this.dfSumme.Number, "AG " + this.dfPGPLZa.Text + " " + this.dfPGOa.Text, ((SalString)this.cmbAGALa.Text).Left(2), this.dfPGSa.Text);
				}
			}
			else
			{
				if (!(this.dfAGPLZa.IsEmpty())) 
				{
					this.PalSpeGericht(this.dfAGPLZa.Text, this.dfSumme.Number, "LG " + this.dfPGPLZa.Text + " " + this.dfPGOa.Text, ((SalString)this.cmbAGALa.Text).Left(2), this.dfPGSa.Text);
				}
			}
			// 13.05.19 Ä1852
			if (this.dfAGPLZa.Text == "") 
			{
				this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Red);
				this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_White);
			}
			else
			{
				this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_White);
				this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
			}
			#endregion
		}
		
		/// <summary>
		/// pbGVb WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbGVb_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbGVb_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbGVb_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			dlgEDAGV.ModalDialog(this, "b", this.strAGGVFUb, this.strAGGVVNb, this.strAGGVSHb, this.strAGGVPLZb, this.strAGGVOb, this.strAGGVALb, this.strAGGVFUb2, this.strAGGVVNb2, this.strAGGVSHb2, this.strAGGVPLZb2, this.strAGGVOb2, this.strAGGVALb2, 
				this.strAGGVFUb3, this.strAGGVVNb3, this.strAGGVSHb3, this.strAGGVPLZb3, this.strAGGVOb3, this.strAGGVALb3, this.strAGGVFUb4, this.strAGGVVNb4, this.strAGGVSHb4, this.strAGGVPLZb4, this.strAGGVOb4, this.strAGGVALb4);
			#endregion
		}
		
		/// <summary>
		/// dfAGPLZb WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAGPLZb_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfAGPLZb_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAGPLZb_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Int.PalValNum(this.dfAGPLZb.Text) > 0) 
			{
				// #19 21.04.06
				Int.SqlImmedSel("SELECT ort INTO :frmMBErf.strPOrt FROM mcplz WHERE plz = :frmMBErf.dfAGPLZb");
				this.dfAGOb.Text = this.strPOrt;


				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalString temp1 = this.dfPGSb.Text;
				this.strGerName = Int.PalHoleGericht(this.dfAGPLZb.Text, this.dfSumme.Number, ((SalString)this.cmbAGALb.Text).Left(2), ref temp1);
				this.dfPGSb.Text = temp1;

				this.dfPGPLZb.Text = this.strGerName.Mid(3, 255);
				this.dfPGOb.Text = this.strGerName.Mid(9, 255);
				// 13.05.19 Ä1852
				if (this.dfPGSb.Text == "") 
				{
					this.dfPGSb.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Red);
					this.dfPGSb.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_White);
				}
				else
				{
					this.dfPGSb.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_White);
					this.dfPGSb.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// cmbAGALb WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbAGALb_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.cmbAGALb_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbAGALb_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;

			// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
			SalString temp1 = this.dfPGSb.Text;
			this.strGerName = Int.PalHoleGericht("", this.dfSumme.Number, ((SalString)this.cmbAGALb.Text).Left(2), ref temp1);
			this.dfPGSb.Text = temp1;

			this.dfPGPLZb.Text = this.strGerName.Mid(3, 255);
			this.dfPGOb.Text = this.strGerName.Mid(9, 255);
			// 13.05.19 Ä1852
			if (this.dfPGSb.Text == "") 
			{
				this.dfPGSb.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Red);
				this.dfPGSb.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_White);
			}
			else
			{
				this.dfPGSb.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_White);
				this.dfPGSb.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
			}
			#endregion
		}
		
		/// <summary>
		/// dfPGSb WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPGSb_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfPGSb_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPGSb_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfPGMb.Number == 1) 
			{
				if (!(this.dfAGPLZb.IsEmpty())) 
				{
					this.PalSpeGericht(this.dfAGPLZb.Text, this.dfSumme.Number, "AG " + this.dfPGPLZb.Text + " " + this.dfPGOb.Text, ((SalString)this.cmbAGALb.Text).Left(2), this.dfPGSb.Text);
				}
			}
			else
			{
				if (!(this.dfAGPLZb.IsEmpty())) 
				{
					this.PalSpeGericht(this.dfAGPLZb.Text, this.dfSumme.Number, "LG " + this.dfPGPLZb.Text + " " + this.dfPGOb.Text, ((SalString)this.cmbAGALb.Text).Left(2), this.dfPGSb.Text);
				}
			}
			// 13.05.19 Ä1852
			if (this.dfAGPLZb.Text == "") 
			{
				this.dfPGSb.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Red);
				this.dfPGSb.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_White);
			}
			else
			{
				this.dfPGSb.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_White);
				this.dfPGSb.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
			}
			#endregion
		}
		
		/// <summary>
		/// pbGVc WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbGVc_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbGVc_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbGVc_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			dlgEDAGV.ModalDialog(this, "c", this.strAGGVFUc, this.strAGGVVNc, this.strAGGVSHc, this.strAGGVPLZc, this.strAGGVOc, this.strAGGVALc, this.strAGGVFUc2, this.strAGGVVNc2, this.strAGGVSHc2, this.strAGGVPLZc2, this.strAGGVOc2, this.strAGGVALc2, 
				this.strAGGVFUc3, this.strAGGVVNc3, this.strAGGVSHc3, this.strAGGVPLZc3, this.strAGGVOc3, this.strAGGVALc3, this.strAGGVFUc4, this.strAGGVVNc4, this.strAGGVSHc4, this.strAGGVPLZc4, this.strAGGVOc4, this.strAGGVALc4);
			#endregion
		}
		
		/// <summary>
		/// dfAGPLZc WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAGPLZc_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfAGPLZc_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAGPLZc_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Int.PalValNum(this.dfAGPLZc.Text) > 0) 
			{
				// #19 21.04.06
				Int.SqlImmedSel("SELECT ort INTO :frmMBErf.strPOrt FROM mcplz WHERE plz = :frmMBErf.dfAGPLZc");
				this.dfAGOc.Text = this.strPOrt;


				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalString temp1 = this.dfPGSc.Text;
				this.strGerName = Int.PalHoleGericht(this.dfAGPLZc.Text, this.dfSumme.Number, ((SalString)this.cmbAGALc.Text).Left(2), ref temp1);
				this.dfPGSc.Text = temp1;

				this.dfPGPLZc.Text = this.strGerName.Mid(3, 255);
				this.dfPGOc.Text = this.strGerName.Mid(9, 255);
				// 13.05.19 Ä1852
				if (this.dfPGSc.Text == "") 
				{
					this.dfPGSc.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Red);
					this.dfPGSc.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_White);
				}
				else
				{
					this.dfPGSc.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_White);
					this.dfPGSc.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// cmbAGALc WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbAGALc_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.cmbAGALc_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbAGALc_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;

			// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
			SalString temp1 = this.dfPGSc.Text;
			this.strGerName = Int.PalHoleGericht("", this.dfSumme.Number, ((SalString)this.cmbAGALc.Text).Left(2), ref temp1);
			this.dfPGSc.Text = temp1;

			this.dfPGPLZc.Text = this.strGerName.Mid(3, 255);
			this.dfPGOc.Text = this.strGerName.Mid(9, 255);
			// 13.05.19 Ä1852
			if (this.dfPGSc.Text == "") 
			{
				this.dfPGSc.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Red);
				this.dfPGSc.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_White);
			}
			else
			{
				this.dfPGSc.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_White);
				this.dfPGSc.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
			}
			#endregion
		}
		
		/// <summary>
		/// dfPGSc WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPGSc_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfPGSc_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPGSc_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfPGMc.Number == 1) 
			{
				if (!(this.dfAGPLZc.IsEmpty())) 
				{
					this.PalSpeGericht(this.dfAGPLZc.Text, this.dfSumme.Number, "AG " + this.dfPGPLZc.Text + " " + this.dfPGOc.Text, ((SalString)this.cmbAGALc.Text).Left(2), this.dfPGSc.Text);
				}
			}
			else
			{
				if (!(this.dfAGPLZc.IsEmpty())) 
				{
					this.PalSpeGericht(this.dfAGPLZc.Text, this.dfSumme.Number, "LG " + this.dfPGPLZc.Text + " " + this.dfPGOc.Text, ((SalString)this.cmbAGALc.Text).Left(2), this.dfPGSc.Text);
				}
			}
			// 13.05.19 Ä1852
			if (this.dfAGPLZc.Text == "") 
			{
				this.dfPGSc.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Red);
				this.dfPGSc.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_White);
			}
			else
			{
				this.dfPGSc.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_White);
				this.dfPGSc.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
			}
			#endregion
		}
		
		/// <summary>
		/// pbGVd WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbGVd_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbGVd_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbGVd_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			dlgEDAGV.ModalDialog(this, "d", this.strAGGVFUd, this.strAGGVVNd, this.strAGGVSHd, this.strAGGVPLZd, this.strAGGVOd, this.strAGGVALd, this.strAGGVFUd2, this.strAGGVVNd2, this.strAGGVSHd2, this.strAGGVPLZd2, this.strAGGVOd2, this.strAGGVALd2, 
				this.strAGGVFUd3, this.strAGGVVNd3, this.strAGGVSHd3, this.strAGGVPLZd3, this.strAGGVOd3, this.strAGGVALd3, this.strAGGVFUd4, this.strAGGVVNd4, this.strAGGVSHd4, this.strAGGVPLZd4, this.strAGGVOd4, this.strAGGVALd4);
			#endregion
		}
		
		/// <summary>
		/// dfAGPLZd WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAGPLZd_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfAGPLZd_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAGPLZd_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Int.PalValNum(this.dfAGPLZd.Text) > 0) 
			{
				// #19 21.04.06
				Int.SqlImmedSel("SELECT ort INTO :frmMBErf.strPOrt FROM mcplz WHERE plz = :frmMBErf.dfAGPLZd");
				this.dfAGOd.Text = this.strPOrt;


				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalString temp1 = this.dfPGSd.Text;
				this.strGerName = Int.PalHoleGericht(this.dfAGPLZd.Text, this.dfSumme.Number, ((SalString)this.cmbAGALd.Text).Left(2), ref temp1);
				this.dfPGSd.Text = temp1;

				this.dfPGPLZd.Text = this.strGerName.Mid(3, 255);
				this.dfPGOd.Text = this.strGerName.Mid(9, 255);
				// 13.05.19 Ä1852
				if (this.dfPGSd.Text == "") 
				{
					this.dfPGSd.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Red);
					this.dfPGSd.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_White);
				}
				else
				{
					this.dfPGSd.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_White);
					this.dfPGSd.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// cmbAGALd WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbAGALd_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.cmbAGALd_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbAGALd_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;

			// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
			SalString temp1 = this.dfPGSd.Text;
			this.strGerName = Int.PalHoleGericht("", this.dfSumme.Number, ((SalString)this.cmbAGALd.Text).Left(2), ref temp1);
			this.dfPGSd.Text = temp1;

			this.dfPGPLZd.Text = this.strGerName.Mid(3, 255);
			this.dfPGOd.Text = this.strGerName.Mid(9, 255);
			// 13.05.19 Ä1852
			if (this.dfPGSd.Text == "") 
			{
				this.dfPGSd.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Red);
				this.dfPGSd.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_White);
			}
			else
			{
				this.dfPGSd.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_White);
				this.dfPGSd.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
			}
			#endregion
		}
		
		/// <summary>
		/// dfPGSd WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPGSd_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfPGSd_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPGSd_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfPGMd.Number == 1) 
			{
				if (!(this.dfAGPLZd.IsEmpty())) 
				{
					this.PalSpeGericht(this.dfAGPLZd.Text, this.dfSumme.Number, "AG " + this.dfPGPLZd.Text + " " + this.dfPGOd.Text, ((SalString)this.cmbAGALd.Text).Left(2), this.dfPGSd.Text);
				}
			}
			else
			{
				if (!(this.dfAGPLZd.IsEmpty())) 
				{
					this.PalSpeGericht(this.dfAGPLZd.Text, this.dfSumme.Number, "LG " + this.dfPGPLZd.Text + " " + this.dfPGOd.Text, ((SalString)this.cmbAGALd.Text).Left(2), this.dfPGSd.Text);
				}
			}
			// 13.05.19 Ä1852
			if (this.dfAGPLZd.Text == "") 
			{
				this.dfPGSd.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Red);
				this.dfPGSd.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_White);
			}
			else
			{
				this.dfPGSd.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_White);
				this.dfPGSd.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
			}
			#endregion
		}
		
		/// <summary>
		/// pbBerechne WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBerechne_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbBerechne_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBerechne_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfSumme.Number = 0;
			Var.nCount = 0;
			this.nCountZA = 0;
			if (this.tblMB.AnyRows(0, 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblMB.FindNextRow(ref Var.nRow, 0, 0))) 
					{
						break;
					}
					this.tblMB.SetFocusRow(Var.nRow);
					this.dfSumme.Number = this.dfSumme.Number + this.tblMB.colnDM.Number;
					Int.SqlIstDa("FROM za WHERE zaarztnr = :frmMBErf.tblMB.colnArztNr AND zarechnr = :frmMBErf.tblMB.colnRechNr AND zadeaktiv IS NULL", ref this.bExists);
					if (this.bExists) 
					{
						// 04.02.09 OTF181
						// Set nCountZA = nCountZA + 1
						this.nCountZA = 1;

					}
					Var.nCount = Var.nCount + 1;
				}
			}
			// 11.04.23 F4996 12 -> 45
			if ((Var.nCount + this.nCountZA) > 45) 
			{
				if (this.nCountZA > 0) 
				{
					Sal.MessageBox(@"Es sind nur max. 45 Forderungen erlaubt!

" + this.nCountZA.ToString(0) + @" Rechnungen zählen doppelt, da Zinsforderungen dazu kommen.

Bitte korrigieren.", "Achtung", (Sys.MB_Ok | Sys.MB_IconStop));
				}
				else
				{
					Sal.MessageBox("Es sind nur max. 45 Forderungen erlaubt! Bitte korrigieren.", "Achtung", (Sys.MB_Ok | Sys.MB_IconStop));
				}
			}
			else
			{

				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalString temp1 = this.dfPGSa.Text;
				this.strGerName = Int.PalHoleGericht(this.dfAGPLZa.Text, this.dfSumme.Number, ((SalString)this.cmbAGALa.Text).Left(2), ref temp1);
				this.dfPGSa.Text = temp1;

				if (this.strGerName.Left(2) == "LG") 
				{
					this.dfPGMa.Number = 2;
					this.strGerName = this.strGerName.Mid(3, 255);
				}
				else if (this.strGerName.Left(2) == "AG") 
				{
					this.dfPGMa.Number = 1;
					this.strGerName = this.strGerName.Mid(3, 255);
				}
				else
				{
					this.dfPGMa.Number = 1;
				}
				this.dfPGPLZa.Text = this.strGerName.Mid(0, 5);
				this.dfPGOa.Text = this.strGerName.Mid(6, 255);
				this.dfPGMb.Number = this.dfPGMa.Number;
				this.dfPGMc.Number = this.dfPGMa.Number;
				this.dfPGMd.Number = this.dfPGMa.Number;
				this.dfPGPLZb.Text = this.dfPGPLZa.Text;
				this.dfPGPLZc.Text = this.dfPGPLZa.Text;
				this.dfPGPLZd.Text = this.dfPGPLZa.Text;
				this.dfPGOb.Text = this.dfPGOa.Text;
				this.dfPGOc.Text = this.dfPGOa.Text;
				this.dfPGOd.Text = this.dfPGOa.Text;
				// 13.05.19 Ä1852
				this.dfPGSb.Text = this.dfPGSa.Text;
				this.dfPGSc.Text = this.dfPGSa.Text;
				this.dfPGSd.Text = this.dfPGSa.Text;

				this.pbOK.EnableWindow();
			}
			#endregion
		}
		
		/// <summary>
		/// cbGS WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbGS_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbGS_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbGS_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(this.cbGS.Checked)) 
			{
				this.dfAGANRb.DisableWindow();
				this.dfAGN1b.DisableWindow();
				this.dfAGN2b.DisableWindow();
				this.dfAGN3b.DisableWindow();
				this.dfAGRFb.DisableWindow();
				this.dfAGSHb.DisableWindow();
				this.dfAGPLZb.DisableWindow();
				this.dfAGOb.DisableWindow();
				this.dfPGPLZb.DisableWindow();
				this.dfPGOb.DisableWindow();
				this.dfPGMb.DisableWindow();

				this.dfAGANRc.DisableWindow();
				this.dfAGN1c.DisableWindow();
				this.dfAGN2c.DisableWindow();
				this.dfAGN3c.DisableWindow();
				this.dfAGRFc.DisableWindow();
				this.dfAGSHc.DisableWindow();
				this.dfAGPLZc.DisableWindow();
				this.dfAGOc.DisableWindow();
				this.dfPGPLZc.DisableWindow();
				this.dfPGOc.DisableWindow();
				this.dfPGMc.DisableWindow();

				this.dfAGANRd.DisableWindow();
				this.dfAGN1d.DisableWindow();
				this.dfAGN2d.DisableWindow();
				this.dfAGN3d.DisableWindow();
				this.dfAGRFd.DisableWindow();
				this.dfAGSHd.DisableWindow();
				this.dfAGPLZd.DisableWindow();
				this.dfAGOd.DisableWindow();
				this.dfPGPLZd.DisableWindow();
				this.dfPGOd.DisableWindow();
				this.dfPGMd.DisableWindow();
				// 13.05.19 Ä1852
				this.dfPGSb.DisableWindow();
				this.dfPGSc.DisableWindow();
				this.dfPGSd.DisableWindow();

			}
			else
			{
				this.dfAGANRb.EnableWindow();
				this.dfAGN1b.EnableWindow();
				this.dfAGN2b.EnableWindow();
				this.dfAGN3b.EnableWindow();
				this.dfAGRFb.EnableWindow();
				this.dfAGSHb.EnableWindow();
				this.dfAGPLZb.EnableWindow();
				this.dfAGOb.EnableWindow();
				this.dfPGPLZb.EnableWindow();
				this.dfPGOb.EnableWindow();
				this.dfPGMb.EnableWindow();

				this.dfAGANRc.EnableWindow();
				this.dfAGN1c.EnableWindow();
				this.dfAGN2c.EnableWindow();
				this.dfAGN3c.EnableWindow();
				this.dfAGRFc.EnableWindow();
				this.dfAGSHc.EnableWindow();
				this.dfAGPLZc.EnableWindow();
				this.dfAGOc.EnableWindow();
				this.dfPGPLZc.EnableWindow();
				this.dfPGOc.EnableWindow();
				this.dfPGMc.EnableWindow();

				this.dfAGANRd.EnableWindow();
				this.dfAGN1d.EnableWindow();
				this.dfAGN2d.EnableWindow();
				this.dfAGN3d.EnableWindow();
				this.dfAGRFd.EnableWindow();
				this.dfAGSHd.EnableWindow();
				this.dfAGPLZd.EnableWindow();
				this.dfAGOd.EnableWindow();
				this.dfPGPLZd.EnableWindow();
				this.dfPGOd.EnableWindow();
				this.dfPGMd.EnableWindow();
				// 13.05.19 Ä1852
				this.dfPGSb.EnableWindow();
				this.dfPGSc.EnableWindow();
				this.dfPGSd.EnableWindow();

			}
			#endregion
		}
		
		/// <summary>
		/// pbAGOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAGOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAGOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAGOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmed(@"UPDATE pre SET
preaganra = :frmMBErf.dfAGANRa,
preagn1a = :frmMBErf.dfAGN1a,
preagn2a = :frmMBErf.dfAGN2a,
preagn3a = :frmMBErf.dfAGN3a,
preagrfa = :frmMBErf.dfAGRFa,
preagsha = :frmMBErf.dfAGSHa,
preagplza = :frmMBErf.dfAGPLZa,
preagoa = :frmMBErf.dfAGOa,
preagala = :frmMBErf.cmbAGALa,
prepgma = :frmMBErf.dfPGMa,
prepgplza = :frmMBErf.dfPGPLZa,
prepgoa = :frmMBErf.dfPGOa,
preaganrb = :frmMBErf.dfAGANRb,
preagn1b = :frmMBErf.dfAGN1b,
preagn2b = :frmMBErf.dfAGN2b,
preagn3b = :frmMBErf.dfAGN3b,
preagrfb = :frmMBErf.dfAGRFb,
preagshb = :frmMBErf.dfAGSHb,
preagplzb = :frmMBErf.dfAGPLZb,
preagob = :frmMBErf.dfAGOb,
preagalb = :frmMBErf.cmbAGALb,
prepgmb = :frmMBErf.dfPGMb,
prepgplzb = :frmMBErf.dfPGPLZb,
prepgob = :frmMBErf.dfPGOb,
preaganrc = :frmMBErf.dfAGANRc,
preagn1c = :frmMBErf.dfAGN1c,
preagn2c = :frmMBErf.dfAGN2c,
preagn3c = :frmMBErf.dfAGN3c,
preagrfc = :frmMBErf.dfAGRFc,
preagshc = :frmMBErf.dfAGSHc,
preagplzc = :frmMBErf.dfAGPLZc,
preagoc = :frmMBErf.dfAGOc,
preagalc = :frmMBErf.cmbAGALc,
prepgmc = :frmMBErf.dfPGMc,
prepgplzc = :frmMBErf.dfPGPLZc,
prepgoc = :frmMBErf.dfPGOc,
preaganrd = :frmMBErf.dfAGANRd,
preagn1d = :frmMBErf.dfAGN1d,
preagn2d = :frmMBErf.dfAGN2d,
preagn3d = :frmMBErf.dfAGN3d,
preagrfd = :frmMBErf.dfAGRFd,
preagshd = :frmMBErf.dfAGSHd,
preagplzd = :frmMBErf.dfAGPLZd,
preagod = :frmMBErf.dfAGOd,
preagald = :frmMBErf.cmbAGALd,
prepgmd = :frmMBErf.dfPGMd,
prepgplzd = :frmMBErf.dfPGPLZd,
prepgod = :frmMBErf.dfPGOd,
preaggvfua = :frmMBErf.strAGGVFUa,
preaggvvna = :frmMBErf.strAGGVVNa,
preaggvsha = :frmMBErf.strAGGVSHa,
preaggvplza = :frmMBErf.strAGGVPLZa,
preaggvoa = :frmMBErf.strAGGVOa,
preaggvala = :frmMBErf.strAGGVALa,
preaggvfub = :frmMBErf.strAGGVFUb,
preaggvvnb = :frmMBErf.strAGGVVNb,
preaggvshb = :frmMBErf.strAGGVSHb,
preaggvplzb = :frmMBErf.strAGGVPLZb,
preaggvob = :frmMBErf.strAGGVOb,
preaggvalb = :frmMBErf.strAGGVALb,
preaggvfuc = :frmMBErf.strAGGVFUc,
preaggvvnc = :frmMBErf.strAGGVVNc,
preaggvshc = :frmMBErf.strAGGVSHc,
preaggvplzc = :frmMBErf.strAGGVPLZc,
preaggvoc = :frmMBErf.strAGGVOc,
preaggvalc = :frmMBErf.strAGGVALc,
preaggvfud = :frmMBErf.strAGGVFUd,
preaggvvnd = :frmMBErf.strAGGVVNd,
preaggvshd = :frmMBErf.strAGGVSHd,
preaggvplzd = :frmMBErf.strAGGVPLZd,
preaggvod = :frmMBErf.strAGGVOd,
preaggvald = :frmMBErf.strAGGVALd,
preaggvfua2 = :frmMBErf.strAGGVFUa2,
preaggvvna2 = :frmMBErf.strAGGVVNa2,
preaggvsha2 = :frmMBErf.strAGGVSHa2,
preaggvplza2 = :frmMBErf.strAGGVPLZa2,
preaggvoa2 = :frmMBErf.strAGGVOa2,
preaggvala2 = :frmMBErf.strAGGVALa2,
preaggvfub2 = :frmMBErf.strAGGVFUb2,
preaggvvnb2 = :frmMBErf.strAGGVVNb2,
preaggvshb2 = :frmMBErf.strAGGVSHb2,
preaggvplzb2 = :frmMBErf.strAGGVPLZb2,
preaggvob2 = :frmMBErf.strAGGVOb2,
preaggvalb2 = :frmMBErf.strAGGVALb2,
preaggvfuc2 = :frmMBErf.strAGGVFUc2,
preaggvvnc2 = :frmMBErf.strAGGVVNc2,
preaggvshc2 = :frmMBErf.strAGGVSHc2,
preaggvplzc2 = :frmMBErf.strAGGVPLZc2,
preaggvoc2 = :frmMBErf.strAGGVOc2,
preaggvalc2 = :frmMBErf.strAGGVALc2,
preaggvfud2 = :frmMBErf.strAGGVFUd2,
preaggvvnd2 = :frmMBErf.strAGGVVNd2,
preaggvshd2 = :frmMBErf.strAGGVSHd2,
preaggvplzd2 = :frmMBErf.strAGGVPLZd2,
preaggvod2 = :frmMBErf.strAGGVOd2,
preaggvald2 = :frmMBErf.strAGGVALd2,
preaggvfua3 = :frmMBErf.strAGGVFUa3,
preaggvvna3 = :frmMBErf.strAGGVVNa3,
preaggvsha3 = :frmMBErf.strAGGVSHa3,
preaggvplza3 = :frmMBErf.strAGGVPLZa3,
preaggvoa3 = :frmMBErf.strAGGVOa3,
preaggvala3 = :frmMBErf.strAGGVALa3,
preaggvfub3 = :frmMBErf.strAGGVFUb3,
preaggvvnb3 = :frmMBErf.strAGGVVNb3,
preaggvshb3 = :frmMBErf.strAGGVSHb3,
preaggvplzb3 = :frmMBErf.strAGGVPLZb3,
preaggvob3 = :frmMBErf.strAGGVOb3,
preaggvalb3 = :frmMBErf.strAGGVALb3,
preaggvfuc3 = :frmMBErf.strAGGVFUc3,
preaggvvnc3 = :frmMBErf.strAGGVVNc3,
preaggvshc3 = :frmMBErf.strAGGVSHc3,
preaggvplzc3 = :frmMBErf.strAGGVPLZc3,
preaggvoc3 = :frmMBErf.strAGGVOc3,
preaggvalc3 = :frmMBErf.strAGGVALc3,
preaggvfud3 = :frmMBErf.strAGGVFUd3,
preaggvvnd3 = :frmMBErf.strAGGVVNd3,
preaggvshd3 = :frmMBErf.strAGGVSHd3,
preaggvplzd3 = :frmMBErf.strAGGVPLZd3,
preaggvod3 = :frmMBErf.strAGGVOd3,
preaggvald3 = :frmMBErf.strAGGVALd3,
preaggvfua4 = :frmMBErf.strAGGVFUa4,
preaggvvna4 = :frmMBErf.strAGGVVNa4,
preaggvsha4 = :frmMBErf.strAGGVSHa4,
preaggvplza4 = :frmMBErf.strAGGVPLZa4,
preaggvoa4 = :frmMBErf.strAGGVOa4,
preaggvala4 = :frmMBErf.strAGGVALa4,
preaggvfub4 = :frmMBErf.strAGGVFUb4,
preaggvvnb4 = :frmMBErf.strAGGVVNb4,
preaggvshb4 = :frmMBErf.strAGGVSHb4,
preaggvplzb4 = :frmMBErf.strAGGVPLZb4,
preaggvob4 = :frmMBErf.strAGGVOb4,
preaggvalb4 = :frmMBErf.strAGGVALb4,
preaggvfuc4 = :frmMBErf.strAGGVFUc4,
preaggvvnc4 = :frmMBErf.strAGGVVNc4,
preaggvshc4 = :frmMBErf.strAGGVSHc4,
preaggvplzc4 = :frmMBErf.strAGGVPLZc4,
preaggvoc4 = :frmMBErf.strAGGVOc4,
preaggvalc4 = :frmMBErf.strAGGVALc4,
preaggvfud4 = :frmMBErf.strAGGVFUd4,
preaggvvnd4 = :frmMBErf.strAGGVVNd4,
preaggvshd4 = :frmMBErf.strAGGVSHd4,
preaggvplzd4 = :frmMBErf.strAGGVPLZd4,
preaggvod4 = :frmMBErf.strAGGVOd4,
preaggvald4 = :frmMBErf.strAGGVALd4
WHERE preproznr = :frmMBErf.nProzNr");
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// pbausHeinfg WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbausHeinfg_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbausHeinfg_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbausHeinfg_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT htitel, hti, hvn, hnn,hort,hname2,hstr, hproz3, hland
into :frmMBErf.strHAnr, :frmMBErf.strHTi, :frmMBErf.strHVN, :frmMBErf.strHNN, :frmMBErf.dfSHalterOrt, :frmMBErf.dfSHalterName2, :frmMBErf.dfSHalterStr, :frmMBErf.nProzHF, :frmMBErf.strAGALa
from H,pr where prnr = :frmMBErf.nProzNr AND prarztnr=harztnr AND prhalternr=hhalternr AND hdeaktiv IS NULL");
			this.dfAGN1a.Text = this.strHVN.Left(35);
			this.dfAGN2a.Text = (this.strHTi + this.strHNN).Left(35);
			this.dfAGN3a.Text = ((SalString)this.dfSHalterName2.Text).Left(35);
			this.dfAGSHa.Text = ((SalString)this.dfSHalterStr.Text).Left(35);
			this.dfAGPLZa.Text = ((SalString)this.dfSHalterOrt.Text).Left(5);
			this.dfAGOa.Text = ((SalString)this.dfSHalterOrt.Text).Mid(5, 255).Trim();
			this.cmbAGALa.Text = Int.PalPruefeLC(this.cmbAGALa.Text, 2);
			if (this.strHAnr.ToUpper().Left(1) == "H") 
			{
				this.dfAGANRa.Number = 1;
			}
			else if (this.strHAnr.ToUpper().Left(1) == "F") 
			{
				this.dfAGANRa.Number = 2;
			}
			else
			{
				this.dfAGANRa.Number = 3;
			}
			// 28.08.18 F3231
			if (Int.PalValNum(this.dfAGPLZa.Text) > 0) 
			{

				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalString temp1 = this.dfPGSa.Text;
				this.strGerName = Int.PalHoleGericht(this.dfAGPLZa.Text, this.dfSumme.Number, ((SalString)this.cmbAGALa.Text).Left(2), ref temp1);
				this.dfPGSa.Text = temp1;

				this.dfPGPLZa.Text = this.strGerName.Mid(3, 255);
				this.dfPGOa.Text = this.strGerName.Mid(9, 255);
				// 13.05.19 Ä1852
				if (this.dfPGSa.Text == "") 
				{
					this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Red);
					this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_White);
				}
				else
				{
					this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_White);
					this.dfPGSa.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblMB
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblMBTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmMBErf _frmMBErf = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblMBTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmMBErf frmMBErf
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmMBErf == null) 
					{
						_frmMBErf = (frmMBErf)this.FindForm();
					}
					return _frmMBErf;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblMBTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblMBTableWindow)SalWindow.FromHandle(handle, typeof(tblMBTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colnRechNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnRechNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colnRechNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnRechNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmMBErf.PalHoleInfo();
				#endregion
			}
			
			/// <summary>
			/// colZettel WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colZettel_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Click:
						this.colZettel_OnSAM_Click(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Click event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colZettel_OnSAM_Click(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				frmZettel.CreateWindow(this, "frmMBErf", this.colnArztNr.Number, this.frmMBErf.dfHalterNr.Number, this.colnRechNr.Number);
				#endregion
			}
			#endregion
		}
		#endregion
	}
}
