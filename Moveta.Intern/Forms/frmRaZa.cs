// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="nParArztNr"></param>
	/// <param name="nParHalterNr"></param>
	public partial class frmRaZa : SalQuickTabsForm
	{
		#region Window Parameters
		public SalNumber nParArztNr;
		public SalNumber nParHalterNr;
		#endregion
		
		#region Window Variables
		public SalBoolean bOk = false;
		public SalSqlHandle hSqlRZ = SalSqlHandle.Null;
		public SalSqlHandle hSqlRZ2 = SalSqlHandle.Null;
		public SalSqlHandle hSqlTagebuch = SalSqlHandle.Null;
		public SalNumber nFetch = 0;
		public SalNumber nFetch2 = 0;
		public SalNumber nArztNr2 = 0;
		public SalNumber nFilterArztNr2 = 0;
		public SalNumber nKZPraxArt = 0;
		public SalNumber nRaZa = 0;
		public SalBoolean bJa = false;
		public SalString strTHN1 = "";
		public SalString strTHN2 = "";
		public SalString strTHStr = "";
		public SalString strTHOrt = "";
		public SalString strTHLand = "";
		public SalString strZei = "";
		public SalNumber nFax = 0;
		public SalNumber nAussenst = 0;
		public SalNumber nAussenst2 = 0;
		public SalNumber nAussenstGes = 0;
		public SalNumber nRow = 0;
		public SalDateTime dtErfDat = SalDateTime.Null;
		public SalNumber nNeuNr = 0;
		public SalString strAuswahl = "";
		public SalNumber nOPGesamt = 0;
		public SalNumber nOP = 0;
		public SalNumber nArztZins = 0;
		public SalNumber nRZNr = 0;
		public SalNumber nRZArztNr = 0;
		public SalNumber nRZHalterNr = 0;
		public SalNumber nRZRechNr = 0;
		public SalNumber nRZTag = 0;
		public SalNumber nRZRate = 0;
		public SalDateTime dtRZAktivDat = SalDateTime.Null;
		public SalDateTime dtRZKuendDat = SalDateTime.Null;
		public SalDateTime dtRZLtztZinsDat = SalDateTime.Null;
		public SalDateTime dtRZDat = SalDateTime.Null;
		public SalDateTime dtRZZahlDat = SalDateTime.Null;
		public SalDateTime dtRZHeute = SalDateTime.Null;
		public SalDateTime dtRZPauseBis = SalDateTime.Null;
		public SalNumber nRZZahl = 0;
		public SalNumber nRZZins = 0;
		public SalNumber nRZZinsEUR = 0;
		public SalNumber nRZAnz = 0;
		public SalBoolean bMBJa = false;
		public SalDateTime dtZettelWi = SalDateTime.Null;
		public SalString lsZettel = "";
		public SalNumber nRaZaNeu = 0;
		public SalNumber nAussenst3 = 0;
		public SalNumber nAussenst3a = 0;
		public SalNumber nAKleinbetrag = 0;
		public SalNumber nRkArzt = 0;
		public SalNumber nRkRech = 0;
		public SalNumber nMaxRechNr = 0;
		public SalNumber nMaxMS = 0;
		public SalNumber nMBSammlerOffen = 0;
		public SalNumber nMinMS = 0;
		public MTblPrintParams PrintParams = new MTblPrintParams();
		public SalString strDevice = "";
		public SalNumber nResult = 0;
		public SalNumber nAnz = 0;
		public SalNumber nOff = 0;
		public SalArray<SalString> strPrinters = new SalArray<SalString>();
		public SalSqlHandle hSqlHB = SalSqlHandle.Null;
		public SalNumber nSumHB = 0;
		public SalNumber nFetchHB = 0;
		public SalSqlHandle hSqlSaldo = SalSqlHandle.Null;
		public SalNumber nFetchSaldo = 0;
		public SalDateTime dtBuchDat = SalDateTime.Null;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmRaZa(SalNumber nParArztNr, SalNumber nParHalterNr)
		{
			// Assign global reference.
			App.frmRaZa = this;
			// Window Parameters initialization.
			this.nParArztNr = nParArztNr;
			this.nParHalterNr = nParHalterNr;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
			// Initialize references to inherited controls.
			InitializeComponentEx();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmRaZa CreateWindow(Control owner, SalNumber nParArztNr, SalNumber nParHalterNr)
		{
			frmRaZa frm = new frmRaZa(nParArztNr, nParHalterNr);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmRaZa FromHandle(SalWindowHandle handle)
		{
			return ((frmRaZa)SalWindow.FromHandle(handle, typeof(frmRaZa)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HoleArzt()
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlImmedSel(@"SELECT anr2, akzpraxart, araza, arzzins, arazaneu
INTO :frmRaZa.nArztNr2, :frmRaZa.nKZPraxArt, :frmRaZa.nRaZa, :frmRaZa.nArztZins, :frmRaZa.nRaZaNeu
FROM a WHERE aarztnr=:frmRaZa.dfNeuArztNr");
				if (nKZPraxArt == 2) 
				{
					dfNeuArztNr.Number = nArztNr2;
					Int.SqlImmedSel(@"SELECT anr2
INTO :frmRaZa.nArztNr2
FROM a WHERE aarztnr=:frmRaZa.dfNeuArztNr");
				}
				else if (nKZPraxArt == 0) 
				{
					nArztNr2 = dfNeuArztNr.Number;
				}

				if (nArztZins == SalNumber.Null) 
				{
					nArztZins = 12;
				}
				// #00009
				if (nRaZa == 0) 
				{
					Sal.MessageBox("Das Mitglied läßt keine Ratenzahlervereinbarung zu!", "nicht erlaubt", (Sys.MB_Ok | Sys.MB_IconStop));
					pbOK.DisableWindow();
				}
				else if (nRaZaNeu == 0) 
				{
					Sal.MessageBox("Für dieses Mitglied wird keine Ratenzahlervereinbarung nach dem neuen Schema gemacht!", "nicht erlaubt", (Sys.MB_Ok | Sys.MB_IconStop));
					pbOK.DisableWindow();
				}
				else if (nRaZa == 2) 
				{
					Sal.MessageBox("Ratenzahlervereinbarung nur nach Rückfrage bei M", "Rückfrage notwendig", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
				Int.SqlIstDa("from A where aarztnr=:frmRaZa.dfNeuArztNr", ref bOk);
				if (bOk) 
				{
					Int.SqlImmedSel(@"SELECT aname1
into :frmRaZa.dfArztName
from A where aarztnr=:frmRaZa.dfNeuArztNr");
				}
				else
				{
					Sal.ClearField(dfNeuArztNr);
					Sal.ClearField(dfArztName);
					Sal.SetFocus(dfNeuArztNr);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HoleHalter()
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlIstDa("from H where  harztnr = :frmRaZa.dfNeuArztNr AND hhalternr = :frmRaZa.dfNeuHalterNr AND hdeaktiv IS NULL ", ref bOk);
				if (bOk) 
				{
					Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
into :frmRaZa.dfHalterName, :frmRaZa.strTHN1, :frmRaZa.strTHN2, :frmRaZa.strTHStr, :frmRaZa.strTHOrt, :frmRaZa.strTHLand
from H where  harztnr = :frmRaZa.dfNeuArztNr AND hhalternr = :frmRaZa.dfNeuHalterNr ");
					// 22.02.06 #28
					// ! 10.04.06 Ländercodes
					strTHLand = Int.PalPruefeLC(strTHLand, 0);

					// 30.07.13 F1692 AND rzparztnr = :dfNeuArztNr -> ' || PalArztNr('rzp', dfNeuArztNr, nArztNr2) || '
					if (tblNeu.Populate(hSqlRZ, @"SELECT rkarztnr, rkhalternr, rkrechnr, (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn), (rkdmmahn+rkdmzins+rkmbdmopl+rkzamahn-rkzazins-rkmbzaopl)
INTO :frmRaZa.tblNeu.colnArztNr, :frmRaZa.tblNeu.colnHalterNr, :frmRaZa.tblNeu.colnRechNr, :frmRaZa.tblNeu.colnHF, :frmRaZa.tblNeu.colnKo
FROM rk
WHERE " + Int.PalArztNr("rk", dfNeuArztNr.Number, nArztNr2) + @" AND rkhalternr = :frmRaZa.dfNeuHalterNr AND rkkzzahl<2 AND rkdeaktiv IS NULL
AND rkarztnr*10000000000+rkhalternr*10000+rkrechnr NOT IN (SELECT rzparztnr*10000000000+rzphalternr*10000+rzprechnr FROM rz, rzp WHERE rznr=rzpnr AND rzdeaktiv IS NULL AND rzaktivdat IS NOT NULL AND rzbezdat IS NULL AND rzkuenddat IS NULL
AND " + Int.PalArztNr("rzp", dfNeuArztNr.Number, nArztNr2) + @")
ORDER BY rkarztnr, rkrechnr", Sys.TBL_FillAll)) 
					{
						tblNeu.SetFlagsAnyRows(Sys.ROW_Selected, true, 0, 0);
					}
					dfNeuTag.Number = 1;
				}
				else
				{
					Sal.SetFocus(dfHalterNr);
				}
			}

			return 0;
			#endregion
		}
		// 09.02.18
		// Function: PalTagebuchRefresh
		// Description:
		// Returns
		// Parameters
		// Static Variables
		// Local variables
		// String: strPSelect
		// Actions
		// 25.06.10 OTÄ432
		// If obFilter
		// 13.02.17 Ä1480
		// Set strPSelect = ''
		// Set strPSelect = 'rznr=hbrznr(+) '
		// If dfFilterArzt != NUMBER_Null
		// If strPSelect != ''
		// Set strPSelect = strPSelect || ' AND '
		// Call SqlImmedSel('SELECT anr2
		// INTO :frmRaZa.nFilterArztNr2
		// FROM a WHERE aarztnr=:frmRaZa.dfFilterArzt')
		// Set strPSelect = strPSelect || PalArztNr( 'rz', dfFilterArzt, nFilterArztNr2 )
		// If dfFilterHalter != NUMBER_Null
		// If strPSelect != ''
		// Set strPSelect = strPSelect || ' AND '
		// Set strPSelect = strPSelect || 'rzhalternr = :frmRaZa.dfFilterHalter '
		// 19.10.16 Ä1425
		// If dfFilterRateEUR != NUMBER_Null
		// If strPSelect != ''
		// Set strPSelect = strPSelect || ' AND '
		// Set strPSelect = strPSelect || 'rzrate = :frmRaZa.dfFilterRateEUR '
		// If dfFilterHaltername != ''
		// If strPSelect != ''
		// Set strPSelect = strPSelect || ' AND '
		// Set strPSelect = strPSelect || '(rzarztnr*1000000 + rzhalternr) IN (SELECT (harztnr*1000000 + hhalternr) FROM h WHERE @LICS(hnn)  like @lics(' || '\'%' || dfFilterHaltername  || '%\'' || ') )  '
		// If strPSelect != ''
		// Set strPSelect = ' WHERE ' || strPSelect
		// Else
		// 13.02.17 Ä1480
		// Set strPSelect = ''
		// Set strPSelect = ' WHERE rznr=hbrznr(+) '
		// 13.02.17 Ä1480 + , sum(hbdm)  - ORDER BY rzerfdat -> GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13
		// Call SalTblPopulate( tblTagebuch, hSqlTagebuch,
		// 'SELECT rznr, rzarztnr, rzhalternr, rzerfdat, rzaktivdat, rzkuenddat, rzbezdat, rzzins, rzrate, rztag, rzpausebis, rzanzpausen, rzschluss, sum(hbdm)
		// INTO :frmRaZa.tblTagebuch.colnRZNr, :frmRaZa.tblTagebuch.colnArztNr, :frmRaZa.tblTagebuch.colnHalterNr, :frmRaZa.tblTagebuch.coldtDatum, :frmRaZa.tblTagebuch.coldtAktivDat,
		// :frmRaZa.tblTagebuch.coldtKuendDat,  :frmRaZa.tblTagebuch.coldtBezDat, :frmRaZa.tblTagebuch.colnZins, :frmRaZa.tblTagebuch.colnRate, :frmRaZa.tblTagebuch.colnTag,
		// :frmRaZa.tblTagebuch.coldtPauseBis, :frmRaZa.tblTagebuch.colnAnzPausen, :frmRaZa.tblTagebuch.coldtSchluss, :frmRaZa.tblTagebuch.colnSaldoHB
		// FROM rz, hb ' || strPSelect || ' GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13', TBL_FillNormal)
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalTagebuchRefresh()
		{
			#region Local Variables
			SqlLocals.PalTagebuchRefreshLocals locals = new SqlLocals.PalTagebuchRefreshLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				// 25.06.10 OTÄ432
				if (obFilter.Checked) 
				{
					// 13.02.17 Ä1480
					// Set strPSelect = ''
					locals.strPSelect = "";

					if (dfFilterArzt.Number != Sys.NUMBER_Null) 
					{
						if (locals.strPSelect != "") 
						{
							locals.strPSelect = locals.strPSelect + " AND ";
						}
						Int.SqlImmedSel(@"SELECT anr2
INTO :frmRaZa.nFilterArztNr2
FROM a WHERE aarztnr=:frmRaZa.dfFilterArzt");
						locals.strPSelect = locals.strPSelect + Int.PalArztNr("rz", dfFilterArzt.Number, nFilterArztNr2);
					}
					if (dfFilterHalter.Number != Sys.NUMBER_Null) 
					{
						if (locals.strPSelect != "") 
						{
							locals.strPSelect = locals.strPSelect + " AND ";
						}
						locals.strPSelect = locals.strPSelect + "rzhalternr = :frmRaZa.dfFilterHalter ";
					}
					// 19.10.16 Ä1425
					if (dfFilterRateEUR.Number != Sys.NUMBER_Null) 
					{
						if (locals.strPSelect != "") 
						{
							locals.strPSelect = locals.strPSelect + " AND ";
						}
						locals.strPSelect = locals.strPSelect + "rzrate = :frmRaZa.dfFilterRateEUR ";
					}
					if (dfFilterHaltername.Text != "") 
					{
						if (locals.strPSelect != "") 
						{
							locals.strPSelect = locals.strPSelect + " AND ";
						}
						locals.strPSelect = locals.strPSelect + "(rzarztnr*1000000 + rzhalternr) IN (SELECT (harztnr*1000000 + hhalternr) FROM h WHERE @LICS(hnn)  like @lics(" + "\'%" + dfFilterHaltername.Text + "%\'" + ") AND hdeaktiv IS NULL )  ";
					}

					// If strPSelect != ''
					locals.strPSelect = " WHERE rzarztnr=harztnr AND rzhalternr=hhalternr AND rzdeaktiv IS NULL AND " + locals.strPSelect;
				}
				else
				{
					// 13.02.17 Ä1480
					// Set strPSelect = ''
					locals.strPSelect = " WHERE rzarztnr=harztnr AND rzhalternr=hhalternr AND rzdeaktiv IS NULL";

				}

				// 13.02.17 Ä1480 + , sum(hbdm)  - ORDER BY rzerfdat -> GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13
				// 12.07.21 SE, YI: + || ' ORDER BY RZNR DESC'
				tblTagebuch.Populate(hSqlTagebuch, @"SELECT rznr, rzarztnr, rzhalternr, rzerfdat, rzaktivdat, rzkuenddat, rzbezdat, rzzins, rzrate, rztag, rzpausebis, rzanzpausen, rzschluss, hvn || ' ' || hnn
INTO :frmRaZa.tblTagebuch.colnRZNr, :frmRaZa.tblTagebuch.colnArztNr, :frmRaZa.tblTagebuch.colnHalterNr, :frmRaZa.tblTagebuch.coldtDatum, :frmRaZa.tblTagebuch.coldtAktivDat,
:frmRaZa.tblTagebuch.coldtKuendDat,  :frmRaZa.tblTagebuch.coldtBezDat, :frmRaZa.tblTagebuch.colnZins, :frmRaZa.tblTagebuch.colnRate, :frmRaZa.tblTagebuch.colnTag,
:frmRaZa.tblTagebuch.coldtPauseBis, :frmRaZa.tblTagebuch.colnAnzPausen, :frmRaZa.tblTagebuch.coldtSchluss, :frmRaZa.tblTagebuch.colsHalterName
FROM rz, h " + locals.strPSelect + " ORDER BY RZNR DESC", Sys.TBL_FillNormal);

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalNeuSchaetzeZinsen()
		{
			#region Local Variables
			SalNumber nZinsTage = 0;
			SalDateTime dtBZvon = SalDateTime.Null;
			SalDateTime dtBZbis = SalDateTime.Null;
			SalNumber nDMZins = 0;
			SalNumber nRestHF = 0;
			SalNumber nZinsSumme = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				nRestHF = dfNeuSumme.Number;
				nZinsSumme = 0;
				if (dfNeuZahlenAb.DateTime == Sys.DATETIME_Null) 
				{
					dtBZvon = SalDateTime.Current;
				}
				else
				{
					dtBZvon = dfNeuZahlenAb.DateTime;
				}
				if (SalDateTime.Current.Day() > dfNeuTag.Number) 
				{
					dtBZvon = dtBZvon + 30;
				}
				dtBZbis = new SalDateTime(dtBZvon.Year(), dtBZvon.Month(), dfNeuTag.Number, 0, 0, 0);
				dtBZvon = SalDateTime.Current;

				while (nRestHF > 0) 
				{
					nZinsTage = Int.PalTage(dtBZvon, dtBZbis, false).Round() - 1;
					nDMZins = (nRestHF * (nZinsTage / 365) * 12).Round() / 100;
					nRestHF = nRestHF - dfNeuRateEUR.Number + nDMZins;
					nZinsSumme = nZinsSumme + nDMZins;
					dtBZvon = dtBZbis;
					if (dtBZvon.Month() == 12) 
					{
						dtBZbis = new SalDateTime(dtBZvon.Year() + 1, 1, dtBZvon.Day(), 0, 0, 0);
					}
					else
					{
						dtBZbis = new SalDateTime(dtBZvon.Year(), dtBZvon.Month() + 1, dtBZvon.Day(), 0, 0, 0);
					}
				}
				return nZinsSumme;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalAddKuend()
		{
			#region Actions
			using (new SalContext(this))
			{
				tblPruef.InsertRow(Sys.TBL_MaxRow);
				tblPruef.colnArztNr.Number = nRZArztNr;
				tblPruef.colnHalterNr.Number = nRZHalterNr;
				tblPruef.colnRZNr.Number = nRZNr;
				tblPruef.colsAktion.Text = "Kündigung";
				// 07.06.10
				// Call SqlImmed( 'UPDATE rz SET rzkuenddat = SYSDATETIME WHERE rznr = :frmRaZa.nRZNr' )
				// Call PalAktionRZ( nRZArztNr, nRZHalterNr, nRZNr, 'RZ', 'Kündg',
				// NUMBER_Null, NUMBER_Null, NUMBER_Null, NUMBER_Null, NUMBER_Null, NUMBER_Null)
				// 14.12.10 OTÄ502
				// Call SqlIstDa( 'FROM rzp, rk WHERE rzparztnr=rkarztnr AND rzphalternr=rkhalternr AND rzprechnr=rkrechnr AND (rkmahnstufe=9 OR rzprechnr>999990) AND rzpnr = :frmRaZa.nRZNr', bMBJa )
				// If bMBJa
				// Set frmMain.strZust = PalZust(nRZArztNr)
				// Set dtZettelWi = SalDateCurrent(  ) + 30
				// Set lsZettel = 'Kündigung der RaZa-Vereinbarung RZ ' || SalNumberToStrX( nRZNr, 0 ) || ' durch die TVN'
				// Call SqlImmed('
				// INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
				// VALUES (:strBNZei, :frmMain.strZust, :frmRaZa.nRZArztNr, :frmRaZa.nRZHalterNr, 0,
				// :frmRaZa.lsZettel , SYSDATE, NULL, \'N\', \'TN\', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)')

				// Set frmRaZa.nRZAnz = frmRaZa.nRZAnz + 1
				// 05.10.15 Ä1248	26.10.15: +  AND rzprechnr < 999990
				// 29.11.16 <=5 -> =5
				Int.SqlHandleExec(hSqlRZ2, @"SELECT rzparztnr, rzprechnr
INTO :frmRaZa.nRkArzt, :frmRaZa.nRkRech
FROM rzp, rk
WHERE  rzparztnr = rkarztnr AND rzphalternr = rkhalternr AND rzprechnr = rkrechnr
AND rzpnr = :frmRaZa.nRZNr AND rkmahnstufe =5 AND rzprechnr < 999990 AND rkdeaktiv IS NULL
ORDER BY rzparztnr, rzprechnr", "RaZa-Prüflauf2", ref Var.nErr);
				nFetch2 = hSqlRZ2.FetchNext();
				while (nFetch2 != Sys.FETCH_EOF) 
				{

					tblPruef.colsMS45.Text = tblPruef.colsMS45.Text + ", " + nRkArzt.ToString(0) + "/R" + nRkRech.ToString(0);
					nFetch2 = hSqlRZ2.FetchNext();
				}
				hSqlRZ2.Commit();
				if (tblPruef.colsMS45.Text != "") 
				{
					tblPruef.colsMS45.Text = Sal.StrMidX(tblPruef.colsMS45.Text, 2, 32000);
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmRaZa WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRaZa_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmRaZa_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmRaZa_OnSAM_Close(sender, e);
					break;
				
				case Sys.SAM_Activate:
					this.frmRaZa_OnSAM_Activate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRaZa_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.bfrmRaZa = true;
			// 15.03.16 Ä1294
			this.pbKuendOk.DisableWindow();
			this.pbKuendListe.DisableWindow();
			this.pbMS5TADruck.DisableWindow();

			// Set strBNAbtlg = 'MA'
			if (Var.strBNAbtlg != "MA") 
			{
				Sal.DisableWindow(this.cbnurMBs);
			}
			else
			{
				this.cbnurMBs.Checked = true;
			}
			this.obFilter.Checked = false;
			Sal.DisableWindow(App.frmMain.pbRaZa);
			Int.SqlConnection(ref this.hSqlRZ);
			Int.SqlConnection(ref this.hSqlTagebuch);
			Int.SqlConnection(ref this.hSqlRZ2);
			// 09.02.18
			Int.SqlConnection(ref this.hSqlHB);
			Int.SqlPrepar(this.hSqlHB, "SELECT sum(hbdm) INTO :frmRaZa.nSumHB FROM hb WHERE hbrznr = :frmRaZa.tblTagebuch.colnRZNr");
			// 29.08.22 Ä2040
			Int.SqlConnection(ref this.hSqlSaldo);
			Int.SqlPrepar(this.hSqlSaldo, @"SELECT  sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
INTO :frmRaZa.tblTagebuch.colnSaldo
FROM rk,rzp WHERE rkarztnr=rzparztnr and rkhalternr=rzphalternr and rkrechnr=rzprechnr and rzpnr = :frmRaZa.tblTagebuch.colnRZNr");

			this.tblTagebuch.SetContextMenu("frmRaZaRightClick", 0);
			this.tblPruef.SetContextMenu("frmRaZaPruefRightClick", 0);

			// 13.02.17 Ä1480 nach unten in Else
			// Call PalTagebuchRefresh()

			if (this.nParArztNr == SalNumber.Null) 
			{
				this.nParArztNr = 0;
			}
			if (this.nParHalterNr == SalNumber.Null) 
			{
				this.nParHalterNr = 0;
			}
			if (this.nParArztNr > 0 || this.nParHalterNr > 0) 
			{
				this.dfFilterArzt.Number = this.nParArztNr;
				this.dfFilterHalter.Number = this.nParHalterNr;
				this.obFilter.Checked = true;
				this.PalTagebuchRefresh();
			}
			else
			{
				this.obFilter.Checked = false;
				// 13.02.17 Ä1480 von oben
				this.PalTagebuchRefresh();
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRaZa_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlRZ2.Disconnect();
			this.hSqlTagebuch.Disconnect();
			this.hSqlRZ.Disconnect();
			Sal.EnableWindow(App.frmMain.pbRaZa);
			Var.bfrmRaZa = false;
			#endregion
		}
		
		/// <summary>
		/// SAM_Activate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRaZa_OnSAM_Activate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			//FC:FINAL: check if from still exists
			if(App.frmRaZa == null)
			{
				return;
            }
			if (Int.PalFormFrei("Übergaben")) 
			{
				this.pbZins.EnableWindow();
			}
			else
			{
				this.pbZins.DisableWindow();
			}
			#endregion
		}
		
		/// <summary>
		/// dfFilterArzt WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfFilterArzt_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfFilterArzt_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfFilterArzt_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.obFilter.Checked = true;
			this.PalTagebuchRefresh();
			#endregion
		}
		
		/// <summary>
		/// dfFilterHalter WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfFilterHalter_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfFilterHalter_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfFilterHalter_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.obFilter.Checked = true;
			this.PalTagebuchRefresh();
			#endregion
		}
		
		/// <summary>
		/// dfFilterRateEUR WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfFilterRateEUR_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfFilterRateEUR_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfFilterRateEUR_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.obFilter.Checked = true;
			this.PalTagebuchRefresh();
			#endregion
		}
		
		/// <summary>
		/// dfFilterHaltername WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfFilterHaltername_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfFilterHaltername_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfFilterHaltername_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.obFilter.Checked = true;
			this.PalTagebuchRefresh();
			#endregion
		}
		
		/// <summary>
		/// obFilter WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obFilter_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.obFilter_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obFilter_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.obFilter.Checked = true;
			this.PalTagebuchRefresh();
			#endregion
		}
		
		/// <summary>
		/// tblTagebuch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTagebuch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblTagebuch_OnSAM_Create(sender, e);
					break;
				
				// On SAM_FetchRowDone
				
				// 18.09.02
				
				// If bPFarbe
				
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xFFBFFF )
				
				// Set bPFarbe = FALSE
				
				// Else
				
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xFFEFFF )
				
				// Set bPFarbe = TRUE
				
				case Sys.SAM_RowHeaderClick:
					this.tblTagebuch_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblTagebuch_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTagebuch_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblTagebuch, 0xffbfff);
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTagebuch_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call picTabs.BringToTop(1, FALSE)
			this.dfRZNr.Number = this.tblTagebuch.colnRZNr.Number;
			this.dfDetTag.Number = this.tblTagebuch.colnTag.Number;
			// 31.01.11 Ä533
			this.dfDetZahlpauseBis.DateTime = this.tblTagebuch.coldtPauseBis.DateTime;
			if (this.tblTagebuch.colnAnzPausen.Number == 0 || this.tblTagebuch.colnAnzPausen.Number == Sys.NUMBER_Null) 
			{
				this.dfDetZahlpauseBis.EnableWindowAndLabel();
			}
			else
			{
				this.dfDetZahlpauseBis.DisableWindowAndLabel();
			}
			// 14.08.12 Ä802 auskommentiert
			// If tblTagebuch.coldtAktivDat = DATETIME_Null
			// Call SalEnableWindowAndLabel( dfDetTag )
			// Else
			// Call SalDisableWindowAndLabel( dfDetTag )
			// 31.01.11
			if (this.tblTagebuch.coldtKuendDat.DateTime == Sys.DATETIME_Null && this.tblTagebuch.coldtAktivDat.DateTime != Sys.DATETIME_Null) 
			{
				this.pbRaZaKuend.EnableWindowAndLabel();
			}
			else
			{
				this.pbRaZaKuend.DisableWindowAndLabel();
			}

			this.dfRZNr.SendMessage(Sys.SAM_Validate, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTagebuch_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlExecut(this.hSqlHB, "SELECT sum(hbdm) INTO :frmRaZa.nSumHB FROM hb WHERE hbrznr = :frmRaZa.tblTagebuch.colnRZNr");
			this.nFetchHB = this.hSqlHB.FetchNext();
			this.tblTagebuch.colnSaldoHB.Number = this.nSumHB;
			// 29.08.22 Ä2040
			Int.SqlExecut(this.hSqlSaldo, @"SELECT  sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
INTO :frmRaZa.tblTagebuch.colnSaldo
FROM rk,rzp WHERE rkarztnr=rzparztnr and rkhalternr=rzphalternr and rkrechnr=rzprechnr and rzpnr = :frmRaZa.tblTagebuch.colnRZNr");
			this.nFetchSaldo = this.hSqlSaldo.FetchNext();
			this.tblTagebuch.colnSaldo.Number = this.tblTagebuch.colnSaldo.Number + this.tblTagebuch.colnSaldoHB.Number;
			#endregion
		}
		
		/// <summary>
		/// dfRZNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRZNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRZNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRZNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			Int.SqlIstDa(" from rz where rznr=:frmRaZa.dfRZNr AND rzdeaktiv IS NULL", ref this.bOk);
			if (this.bOk) 
			{
				Int.SqlImmedSel(@"SELECT rzarztnr, rzhalternr, rzerfdat, rzmemo, hti || hvn || ' ' || hnn, hort, hland
into :frmRaZa.dfArztNr, :frmRaZa.dfHalterNr, :frmRaZa.dfProzDatum, :frmRaZa.mlRZMemo, :frmRaZa.dfHN1, :frmRaZa.dfHO, :frmRaZa.dfHLC
from rz, h
WHERE rznr=:frmRaZa.dfRZNr AND rzarztnr = harztnr AND rzhalternr = hhalternr ");
				this.tblRZ.Populate(this.hSqlRZ, @"SELECT akdatum, aktypdetail
INTO :frmRaZa.tblRZ.coldtDatum, :frmRaZa.tblRZ.colsVorgang
FROM ak
WHERE akRZNr = :frmRaZa.dfRZNr AND aktyp ='RZ' ORDER BY akdatum", Sys.TBL_FillAll);
				this.tblRZPos.Populate(this.hSqlRZ, @"SELECT rzparztnr, rzphalternr, rzprechnr
INTO :frmRaZa.tblRZPos.colnArztNr, :frmRaZa.tblRZPos.colnHalterNr, :frmRaZa.tblRZPos.colnRechNr
FROM rzp
WHERE rzpnr = :frmRaZa.dfRZNr", Sys.TBL_FillAll);
			}
			else
			{
				Sal.WaitCursor(false);
				Sal.MessageBox(@"angegebene RZ-Nr.
ist nicht vorhanden !", "RZ falsch", (Sys.MB_Ok | Sys.MB_IconStop));
				this.dfRZNr.Clear();
			}
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// dfDetTag WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDetTag_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfDetTag_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDetTag_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 25.06.10 OTÄ431
			if (this.dfDetTag.Number < 1 || this.dfDetTag.Number > 28) 
			{
				Sal.MessageBox("Bitte nur Tage 1 bis 28 eingeben.", "nicht erlaubt", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.dfDetTag.Number = 1;
				e.Return = false;
				return;
			}
			else
			{
				this.dtRZAktivDat = SalDateTime.Null;
				Int.SqlImmedSel(@"SELECT rzaktivdat FROM rz INTO :frmRaZa.dtRZAktivDat
WHERE rznr=:frmRaZa.dfRZNr AND rzdeaktiv IS NULL");
				// 14.08.12 Ä802
				// If dtRZAktivDat != DATETIME_Null
				// Call SalMessageBox( 'Änderung ist bei aktivierten Verträgen nicht mehr möglich.', 'nicht erlaubt', MB_Ok|MB_IconExclamation )
				// Else
				// Call SqlImmed('UPDATE rz SET rztag = :frmRaZa.dfDetTag
				// WHERE rznr=:frmRaZa.dfRZNr')
				// Call PalLog('RaZa Tag geändert: RZ '
				// || PalStrNum(dfRZNr, 4, 0) || ' in Tag ' || PalStrNum(dfDetTag, 2,0))
				// Call SalMessageBeep( 0 )
				if (this.dtRZAktivDat != SalDateTime.Null) 
				{
					if (Sys.IDYES == Sal.MessageBox("Vertrag ist bereits aktiviert. Dennoch ändern?", "Zahltag ändern", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
					{
						Int.PalLog("RaZa-Tag verändert trotz Aktivierung");
						Int.SqlImmed(@"UPDATE rz SET rztag = :frmRaZa.dfDetTag
WHERE rznr=:frmRaZa.dfRZNr");
						Int.PalLog("RaZa Tag geändert: RZ " + Int.PalStrNum(this.dfRZNr.Number, 4, 0) + " in Tag " + Int.PalStrNum(this.dfDetTag.Number, 2, 0));
						// 20.08.12 Ä802
						App.frmMain.strZust = Int.PalZust(this.dfArztNr.Number);
						// Set dtZettelWi = SalDateCurrent(  ) + 30
						this.lsZettel = "Änderung der RaZa-Vereinbarung RZ " + this.dfRZNr.Number.ToString(0) + @" durch moveta (manuell)

Tag -> " + this.dfDetTag.Number.ToString(0);
						// 13.05.14 F2027
						this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

						Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :frmMain.strZust, :frmRaZa.dfArztNr, :frmRaZa.dfHalterNr, 0,
:frmRaZa.lsZettel , SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");

						Sal.MessageBeep(0);
					}
				}
				else
				{
					Int.SqlImmed(@"UPDATE rz SET rztag = :frmRaZa.dfDetTag
WHERE rznr=:frmRaZa.dfRZNr");
					Int.PalLog("RaZa Tag geändert: RZ " + Int.PalStrNum(this.dfRZNr.Number, 4, 0) + " in Tag " + Int.PalStrNum(this.dfDetTag.Number, 2, 0));
					// 20.08.12 Ä802
					App.frmMain.strZust = Int.PalZust(this.dfArztNr.Number);
					// Set dtZettelWi = SalDateCurrent(  ) + 30
					this.lsZettel = "Änderung der RaZa-Vereinbarung RZ " + this.dfRZNr.Number.ToString(0) + @" durch moveta (manuell)

Tag -> " + this.dfDetTag.Number.ToString(0);
					// 13.05.14 F2027
					this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

					Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :frmMain.strZust, :frmRaZa.dfArztNr, :frmRaZa.dfHalterNr, 0,
:frmRaZa.lsZettel , SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");

					Sal.MessageBeep(0);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfDetZahlpauseBis WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDetZahlpauseBis_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfDetZahlpauseBis_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDetZahlpauseBis_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfDetZahlpauseBis.DateTime > SalDateTime.Current + 90) 
			{
				Sal.MessageBox("Dieses Datum liegt zu weit in der Zukunft.", "Max. 90 Tage", (Sys.MB_Ok | Sys.MB_IconExclamation));
				e.Return = false;
				return;
			}
			else
			{
				if (this.tblTagebuch.colnAnzPausen.Number == Sys.NUMBER_Null) 
				{
					this.tblTagebuch.colnAnzPausen.Number = 0;
				}
				this.dtRZAktivDat = SalDateTime.Null;
				if (this.tblTagebuch.colnAnzPausen.Number >= 1) 
				{
					Sal.MessageBox("Die maximale Anzahl der Zahlpausen wurde bereits erreicht!", "Zahlpause nicht möglich", (Sys.MB_Ok | Sys.MB_IconAsterisk));
					Int.PalLog("RaZa Pausenzahl überschritten: RZ " + Int.PalStrNum(this.dfRZNr.Number, 4, 0));
				}
				else
				{
					if (Sys.IDYES == Sal.MessageBox(@"Es darf EINMALIG eine Zahlpause eingerichtet werden. Danach MUSS der Tilgungsplan eingehalten werden.
Bitte teilen Sie dem Halter mit, daß sich durch die Zahlpause der Tilgungsplan weiter nach hinten verschiebt.", "Zahlpause einrichten?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
					{
						Int.SqlImmed(@"UPDATE rz SET rzpausebis = :frmRaZa.dfDetZahlpauseBis, rzanzpausen = :frmRaZa.tblTagebuch.colnAnzPausen  + 1
WHERE rznr=:frmRaZa.dfRZNr");
						Int.PalLog("RaZa Pause eingerichtet: RZ " + this.dfRZNr.Number.ToString(0) + " bis " + Int.PalDateToStrDE(this.dfDetZahlpauseBis.DateTime));
						Sal.MessageBeep(0);
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// tblRZ WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblRZ_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblRZ_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblRZ_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblRZ, 0xffbfff);
			#endregion
		}
		
		/// <summary>
		/// tblRZPos WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblRZPos_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblRZPos_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblRZPos_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblRZPos, 0xffbfff);
			#endregion
		}
		
		/// <summary>
		/// mlRZMemo WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void mlRZMemo_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.mlRZMemo_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void mlRZMemo_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmed(@"UPDATE rz SET rzmemo = :frmRaZa.mlRZMemo
WHERE rznr=:frmRaZa.dfRZNr");
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// pbRaZaOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRaZaOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRaZaOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRaZaOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 14.06.11 Ä588
			if (this.dfRZNr.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Bitte RZ-Nr. angeben.", "Achtung", Sys.MB_Ok);
			}
			else
			{
				Int.SqlImmedSel(@"SELECT rzaktivdat, rzkuenddat
INTO :frmRaZa.dtRZAktivDat, :frmRaZa.dtRZKuendDat
FROM rz
WHERE rznr = :frmRaZa.dfRZNr AND rzdeaktiv IS NULL");
				if (this.dtRZKuendDat != SalDateTime.Null) 
				{
					Sal.MessageBox("Der Vertrag ist bereits gekündigt worden.", "Achtung", Sys.MB_Ok);
				}
				else if (this.dtRZAktivDat != SalDateTime.Null) 
				{
					Sal.MessageBox("Der Vertrag ist bereits aktiviert worden.", "Achtung", Sys.MB_Ok);
				}
				else if (Sys.IDYES == Sal.MessageBox("Wurde die Ratenzahlungsvereinbarung ausgefüllt und unterschrieben zurückgesandt?", "Vereinbarung ok?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					Int.SqlIstDa("FROM ak WHERE akrznr = :frmRaZa.dfRZNr AND aktyp = \'RZ\' AND aktypdetail = \'RV-Ok\' AND akdeaktiv IS NULL", ref this.bJa);
					if (this.bJa) 
					{
						Sal.MessageBox("Die Vereinbarung wurde bereits geschlossen.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
					}
					else
					{
						Int.SqlImmed("UPDATE rz SET rzaktivdat = SYSDATETIME WHERE rznr = :frmRaZa.dfRZNr");
						Int.PalAktionRZ(this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRZNr.Number, "RZ", "RV-Ok", SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null);

						if (Var.bfrmBriefVari) 
						{
							while (!(App.frmBriefVari.DestroyWindow())) 
							{
							}
						}

						Int.SqlImmedSel("SELECT rzrate INTO :frmMain.nRZRate FROM rz WHERE rznr = :frmRaZa.dfRZNr AND rzdeaktiv IS NULL");

						Int.SqlImmedSel(@"SELECT anr2
INTO :frmRaZa.nArztNr2
FROM a WHERE aarztnr=:frmRaZa.dfArztNr");
						Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl) INTO :frmRaZa.nOP FROM rk,rzp
WHERE " + Int.PalArztNr("rk", this.dfArztNr.Number, this.nArztNr2) + " AND rkdeaktiv IS NULL AND rkhalternr = :frmRaZa.dfHalterNr AND rzpnr = :frmRaZa.dfRZNr AND rkarztnr=rzparztnr AND rkhalternr=rzphalternr AND rkrechnr=rzprechnr");
						// 14.06.13 F1643 +  AND rkkzzahl<2
						Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl) INTO :frmRaZa.nOPGesamt FROM rk
WHERE " + Int.PalArztNr("rk", this.dfArztNr.Number, this.nArztNr2) + " AND rkdeaktiv IS NULL AND rkhalternr = :frmRaZa.dfHalterNr AND rkkzzahl<2");
						// 04.08.10 OTÖ449
						Sal.MessageBox("Es erfolgt der Druck des Aktivierungsbriefes an den Schuldner und danach das Infoschreiben an das Mitglied.", "Info", (Sys.MB_Ok | Sys.MB_IconAsterisk));
						Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
into :frmRaZa.strTHN1, :frmRaZa.strTHN2, :frmRaZa.strTHStr, :frmRaZa.strTHOrt, :frmRaZa.strTHLand
from H where  harztnr = :frmRaZa.dfArztNr AND hhalternr = :frmRaZa.dfHalterNr AND hdeaktiv IS NULL ");
						this.strTHLand = Int.PalPruefeLC(this.strTHLand, 0);
						dlgLlDruck.ModalDialog(App.frmMain, "RaZa-Aktivierung.crd", "");

						this.strTHLand = Int.PalPruefeLC(this.dfHLC.Text, 0);
						// 06.08.18 Ä1763 TRUE -> FALSE
						frmBriefVari.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number, 0, "A", @"Sehr geehrte Damen und Herren,

heute wurde mit Halter-Nr. " + this.dfArztNr.Number.ToString(0) + "/H" + this.dfHalterNr.Number.ToString(0) + @"
eine Ratenzahlungsvereinbarung in Höhe von EUR " + Sal.NumberToStrX(App.frmMain.nRZRate, 2) + @" im Monat geschlossen.

Der Schuldner ist :

" + this.dfHN1.Text + @"
" + this.dfHO.Text + @"
" + this.strTHLand + @"

Der Umfang der offenen Posten dieser Vereinbarung beläuft sich auf € " + this.nOP.ToString(2) + @".
Insgesamt hat der/die Schuldner/-in noch offene Posten in Höhe von € " + this.nOPGesamt.ToString(2) + @".


Wir bitten um Beachtung !", new SalDateTime(1900, 1, 1), "", "", "", "", "", false);
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbRaZaKuend WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRaZaKuend_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRaZaKuend_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRaZaKuend_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 16.02.11 If
			// 14.06.11 Ä588
			if (this.dfRZNr.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Bitte RZ-Nr. angeben.", "Achtung", Sys.MB_Ok);
			}
			else
			{
				if (Sys.IDYES == Sal.MessageBox("Soll wirklich gekündigt werden?", "Fortfahren?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					// 07.06.10
					Int.SqlImmed("UPDATE rz SET rzkuenddat = SYSDATETIME WHERE rznr = :frmRaZa.dfRZNr");
					Int.PalAktionRZ(this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRZNr.Number, "RZ", "Kündg", SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null);
					// 14.12.10 OTÄ502
					Int.SqlIstDa(@"FROM rzp, rk WHERE rzparztnr=rkarztnr AND rzphalternr=rkhalternr AND rzprechnr=rkrechnr AND (rkmahnstufe=9 OR rzprechnr>999990) AND rzpnr = :frmRaZa.dfRZNr
 AND rkdeaktiv IS NULL", ref this.bMBJa);
					if (this.bMBJa) 
					{
						App.frmMain.strZust = Int.PalZust(this.dfArztNr.Number);
						// Set dtZettelWi = SalDateCurrent(  ) + 30
						this.lsZettel = "Kündigung der RaZa-Vereinbarung RZ " + this.dfRZNr.Number.ToString(0) + " durch moveta (manuell)";
						// 13.05.14 F2027
						this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

						Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :frmMain.strZust, :frmRaZa.dfArztNr, :frmRaZa.dfHalterNr, 0,
:frmRaZa.lsZettel , SYSDATE, NULL, 'N', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
						Int.PalLog("RaZa Künd manuell: RZ " + Int.PalStrNum(this.dfRZNr.Number, 4, 0));
						Sal.MessageBeep(0);
					}

					this.tblPruef.ResetTable();
					this.tblPruef.InsertRow(Sys.TBL_MaxRow);
					this.tblPruef.colnArztNr.Number = this.dfArztNr.Number;
					this.tblPruef.colnHalterNr.Number = this.dfHalterNr.Number;
					this.tblPruef.colnRZNr.Number = this.dfRZNr.Number;
					this.tblPruef.colsAktion.Text = "Kündigung";

					// LL
					if (this.cbRaZaKuendBriefe.Checked) 
					{
						Sal.MessageBox(@"Es folgen zwei Drucke:

Kündigungsschreiben an Halter
Infoschreiben an Mitglied", "Information", Sys.MB_IconAsterisk);
						if (dlgLlDruck.ModalDialog(App.frmMain, "RaZa-Kündigung.crd", "")) 
						{
						}
						if (dlgLlDruck.ModalDialog(App.frmMain, "RaZa-KündInfoM.crd", "")) 
						{
						}
					}

				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfNeuArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNeuArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfNeuArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNeuArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.HoleArzt();
			#endregion
		}
		
		/// <summary>
		/// dfNeuHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNeuHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfNeuHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNeuHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.HoleHalter();
			#endregion
		}
		
		/// <summary>
		/// tblNeu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblNeu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblNeu_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblNeu_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblNeu_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblNeu, 0xffbfff);
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblNeu_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblNeu.colnRechNr.Number >= 999990) 
			{
				this.tblNeu.colnKo.Number = this.tblNeu.colnKo.Number + this.tblNeu.colnHF.Number;
				this.tblNeu.colnHF.Number = 0;
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeuSumme WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuSumme_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeuSumme_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuSumme_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfNeuArztNr.IsEmpty() || this.dfNeuHalterNr.IsEmpty()) 
			{
				Sal.MessageBox(@"Arzt-Nr. oder
Halter-Nr. fehlt", "Daten unvollständig", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.dfNeuArztNr.SetFocus();
			}
			else
			{
				if (this.tblNeu.AnyRows(Sys.ROW_Selected, 0)) 
				{
					this.nRow = Sys.TBL_MinRow;

					this.nOPGesamt = 0;
					while (true)
					{
						if (!(this.tblNeu.FindNextRow(ref this.nRow, Sys.ROW_Selected, 0))) 
						{
							break;
						}
						this.tblNeu.SetFocusRow(this.nRow);
						Int.SqlImmedSel(@"SELECT (rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl) INTO :frmRaZa.nOP FROM rk
WHERE rkarztnr = :frmRaZa.tblNeu.colnArztNr AND rkhalternr = :frmRaZa.tblNeu.colnHalterNr AND rkrechnr = :frmRaZa.tblNeu.colnRechNr AND rkdeaktiv IS NULL");
						this.nOPGesamt = this.nOPGesamt + this.nOP;
					}

					this.dfNeuSumme.Number = this.nOPGesamt;
					this.dfNeuRateEUR.Number = (this.dfNeuSumme.Number / 3 / 5 + 0.49m).Round() * 5;
				}
				else
				{
					Sal.MessageBox("Bitte markieren Sie die Rechnungen, die Bestandteil dieser Vereinbarung werden sollen.", "Welche Rechnungen?", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
			}
			// Else
			// Call SqlIstDa(' FROM rz
			// WHERE rzarztnr = :frmRaZa.dfNeuArztNr AND rzhalternr = :frmRaZa.dfNeuHalterNr',bOk)
			// If bOk
			// Call SqlImmedX('UPDATE r
			// SET rdm = :frmRaZa.dfDM,
			// rmtl = :frmRaZa.dfmtl,
			// r1 = :frmRaZa.df1,
			// rdat = :frmRaZa.dfDatum
			// WHERE rarztnr = :frmRaZa.dfArztNr AND rhalternr = :frmRaZa.dfHalterNr')
			// Call PalLog('RaZa geändert: Ha.'
			// || PalStrNum(dfArztNr, 4, 0) || '/' || PalStrNum(dfHalterNr, 5,0) || ' 1.' || PalDateToStr(df1))
			// Else
			// Call SqlImmedX( 'INSERT INTO r
			// (rarztnr, rhalternr, rdm, rmtl, r1, rdat)
			// VALUES (:frmRaZa.dfArztNr, :frmRaZa.dfHalterNr, :frmRaZa.dfDM, :frmRaZa.dfmtl, :frmRaZa.df1, :frmRaZa.dfDatum)' )
			// Call PalLog('RaZa vereinbart: Ha.'
			// || PalStrNum(dfArztNr, 4, 0) || '/' || PalStrNum(dfHalterNr, 5,0) || ' 1.' || PalDateToStr(df1))
			// RK
			// Call SqlImmed('UPDATE rk SET rkmahnstufe = 0, rkmahnsperr=0
			// WHERE rkarztnr = :frmRaZa.dfArztNr AND rkhalternr = :frmRaZa.dfHalterNr
			// AND rkrechnr < 999990 AND rkmahnstufe NOT IN (6,7,9)')
			// 27.11.03
			// If nArztNr2 != dfArztNr
			// Call SqlImmed('UPDATE rk SET rkmahnstufe = 0, rkmahnsperr=0
			// WHERE rkarztnr = :frmRaZa.nArztNr2 AND rkhalternr = :frmRaZa.dfHalterNr
			// AND rkrechnr < 999990 AND rkmahnstufe NOT IN (6,7,9)')
			// Ende
			// If strPHerkunft = 'frmRgSuchen'
			// Call SalDestroyWindow( hWndForm)
			// Else
			// Call SalMessageBeep( 0 )
			// Call SalDestroyWindow(hWndForm)
			#endregion
		}
		
		/// <summary>
		/// dfNeuRateAnz WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNeuRateAnz_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfNeuRateAnz_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNeuRateAnz_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfNeuRateAnz.Number > 5 && Sys.IDNO == Sal.MessageBox(@"Mehr als 5 Raten sind nur nach Anfrage bei der Praxis erlaubt.

Haben Sie eine explizite Erlaubnis der Praxis eingeholt?", "Anfrage notwendig", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
			{
				Sal.MessageBox("Es sind maximal 5 Raten erlaubt.", "Ratenanzahl überschritten", (Sys.MB_Ok | Sys.MB_IconStop));
				e.Return = false;
				return;
			}
			else
			{
				this.dfNeuRateEUR.Number = (this.dfNeuSumme.Number / this.dfNeuRateAnz.Number / 5 + 0.49m).Round() * 5;
				if (this.dfNeuRateEUR.Number <= (this.dfNeuSumme.Number * this.nArztZins / 100m / 12)) 
				{
					Sal.MessageBox(@"Die monatliche Rate ist so gering, daß keine Tilgung möglich ist.

12 Raten werden eingetragen.", "Rate zu gering", Sys.MB_Ok);
					this.dfNeuRateAnz.Number = 12;
					this.dfNeuRateEUR.Number = (this.dfNeuSumme.Number / this.dfNeuRateAnz.Number / 5 + 0.49m).Round() * 5;
				}
				// 14.06.11 Ä587
				this.dfNeuGeschZinsen.Number = this.PalNeuSchaetzeZinsen();
			}
			#endregion
		}
		
		/// <summary>
		/// dfNeuTag WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNeuTag_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfNeuTag_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNeuTag_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfNeuTag.Number < 1 || this.dfNeuTag.Number > 28) 
			{
				Sal.MessageBox("Bitte nur Tage 1 bis 28 eingeben.", "nicht erlaubt", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.dfNeuTag.Number = 1;
				e.Return = false;
				return;
			}
			else
			{
				// 14.06.11 Ä587
				this.dfNeuGeschZinsen.Number = this.PalNeuSchaetzeZinsen();
			}
			#endregion
		}
		
		/// <summary>
		/// dfNeuZahlenAb WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNeuZahlenAb_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfNeuZahlenAb_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNeuZahlenAb_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfNeuZahlenAb.DateTime > SalDateTime.Current + 90) 
			{
				Sal.MessageBox("Dieses Datum liegt zu weit in der Zukunft.", "Max. 90 Tage", (Sys.MB_Ok | Sys.MB_IconExclamation));
				e.Return = false;
				return;
			}
			else
			{
				// 14.06.11 Ä587
				this.dfNeuGeschZinsen.Number = this.PalNeuSchaetzeZinsen();
			}
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// If (dfNeuSumme / dfNeuRateEUR) > 5
			// Call SalMessageBox( 'Es sind mximal 5 Raten erlaubt.', 'Ratenanzahl überschritten', MB_Ok|MB_IconStop)
			if (this.dfNeuRateAnz.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBeep(0);
			}
			else
			{
				if (this.dfNeuArztNr.IsEmpty() || this.dfNeuHalterNr.IsEmpty()) 
				{
					Sal.MessageBox(@"Arzt-Nr. oder
Halter-Nr. fehlt", "Daten unvollständig", (Sys.MB_Ok | Sys.MB_IconExclamation));
					this.dfNeuArztNr.SetFocus();
				}
				else
				{
					if (this.tblNeu.AnyRows(Sys.ROW_Selected, 0)) 
					{
						this.nRow = Sys.TBL_MinRow;
						this.dtErfDat = SalDateTime.Current;
						Int.SqlImmedSel("SELECT MAX(rznr) INTO :frmRaZa.nNeuNr FROM rz");
						if (this.nNeuNr == SalNumber.Null) 
						{
							this.nNeuNr = 0;
						}
						this.nNeuNr = this.nNeuNr + 1;
						// 07.02.11
						this.dfNeuZahlenAb.DateTime = this.dfNeuZahlenAb.DateTime - 1;

						// 30.03.21 Ä1953 + rzopdm
						Int.SqlImmed(@"INSERT INTO rz (rznr, rzarztnr, rzhalternr, rzerfdat, rzzins, rztvngeb, rzrate, rztag, rzpausebis, rzopdm)
VALUES(:frmRaZa.nNeuNr, :frmRaZa.dfNeuArztNr, :frmRaZa.dfNeuHalterNr, :frmRaZa.dtErfDat, :frmRaZa.nArztZins, 0, :frmRaZa.dfNeuRateEUR, :frmRaZa.dfNeuTag, :frmRaZa.dfNeuZahlenAb,
:frmRaZa.dfNeuSumme)");

						while (true)
						{
							if (!(this.tblNeu.FindNextRow(ref this.nRow, Sys.ROW_Selected, 0))) 
							{
								break;
							}
							this.tblNeu.SetFocusRow(this.nRow);
							Int.SqlImmed("INSERT INTO rzp (rzpnr, rzparztnr, rzphalternr, rzprechnr) VALUES(:frmRaZa.nNeuNr, :frmRaZa.tblNeu.colnArztNr, :frmRaZa.tblNeu.colnHalterNr, :frmRaZa.tblNeu.colnRechNr)");
							// ! 17.08.10 OTÄ457 rkteilzdat = SYSDATE  -->> rkmahnsperrbis = SYSDATE + 14 DAYS
							// 28.08.18 Ä1768 14 -> 17
							Int.SqlImmed("UPDATE rk SET rkmahnsperrbis = SYSDATE + 17 DAYS WHERE rkarztnr = :frmRaZa.tblNeu.colnArztNr and rkhalternr = :frmRaZa.tblNeu.colnHalterNr AND rkrechnr = :frmRaZa.tblNeu.colnRechNr");
						}

						// Set strZei = strBNTel || ' /' || SalStrProperX(strBNZei)
						// Set nFax = cbFax
						// LL
						Int.PalAktionRZ(this.dfNeuArztNr.Number, this.dfHalterNr.Number, this.nNeuNr, "RZ", "RaVer", SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null);
						if (dlgLlDruck.ModalDialog(App.frmMain, "RaZaVerBrief.crd", " AND rzerfdat = :frmRaZa.dtErfDat")) 
						{
							if (dlgLlDruck.ModalDialog(App.frmMain, "Ratenzahler-Vereinbarung.lst", " AND rzerfdat = :frmRaZa.dtErfDat")) 
							{
								if (dlgLlDruck.ModalDialog(App.frmMain, "Ratenzahler-Tilgungsplan.lst", " AND rzerfdat = :frmRaZa.dtErfDat")) 
								{
								}
							}
						}

						this.dfNeuArztNr.Number = Sys.NUMBER_Null;
						this.dfNeuHalterNr.Number = Sys.NUMBER_Null;
						this.dfNeuRateAnz.Number = Sys.NUMBER_Null;
						this.dfNeuRateEUR.Number = Sys.NUMBER_Null;
						// 14.06.11 Ä587
						this.dfNeuGeschZinsen.Number = Sys.NUMBER_Null;

						this.tblNeu.ResetTable();

						this.picTabsRZ.BringToTop(0, true);
						this.PalTagebuchRefresh();
					}
					else
					{
						Sal.MessageBox("Bitte markieren Sie die Rechnungen, die Bestandteil dieser Vereinbarung werden sollen.", "Welche Rechnungen?", (Sys.MB_Ok | Sys.MB_IconExclamation));
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbKuend WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKuend_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbKuend_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKuend_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 18.11.13 Ä997
			Sal.WaitCursor(true);
			// 15.03.16 Ä1294
			this.pbKuendOk.DisableWindow();
			this.pbKuendListe.DisableWindow();
			this.pbMS5TADruck.DisableWindow();

			// 23.11.15 Ä1287
			// Set strBNZei = 'YI'
			Var.strBNLeseberechtigung = "";
			Int.PalCheckLeseberechtigung();
			Var.strBNLeseberechtigung = "\'" + Var.strBNZei + "\', " + Var.strBNLeseberechtigung;

			Int.SqlHandleExec(this.hSqlRZ, @"SELECT za.rowid, zabuchdat, zaarztnr, zahalternr, rznr
INTO :frmRaZa.strAuswahl, :frmRaZa.dtRZZahlDat, :frmRaZa.nRZArztNr, :frmRaZa.nRZHalterNr, :frmRaZa.nRZNr
FROM za,rz,rzp
WHERE rzkuenddat IS NULL AND rzbezdat IS NULL AND rzaktivdat IS NOT NULL  AND rzdeaktiv IS NULL
AND (rzpausebis IS NULL OR rzpausebis < SYSDATE - 7 DAYS)
AND (rzschluss IS NULL OR rzschluss < SYSDATE - 35 DAYS)
AND zaarztnr=rzparztnr AND zahalternr=rzphalternr AND zarechnr=rzprechnr AND rznr=rzpnr
AND zarznr=0 AND zakz<4
AND rzpnr IN (select akrznr from ak where aktyp='RZ' and aktypdetail='Kündg' AND akdeaktiv IS NULL)
AND rzpnr IN (select akrznr from ak where aktyp='RZ' and aktypdetail='KünRü' AND akdeaktiv IS NULL)", "RaZa-Prüflauf", ref Var.nErr);
			this.nFetch = this.hSqlRZ.FetchNext();
			while (this.nFetch != Sys.FETCH_EOF) 
			{
				this.dtRZDat = SalDateTime.Null;

				if (Int.SqlImmedSel(@"SELECT akdatum INTO :frmRaZa.dtRZDat FROM ak WHERE aktyp='RZ' and aktypdetail='Kündg' and akrznr = :frmRaZa.nRZNr AND akdatum >= :frmRaZa.dtRZZahlDat - 7 DAYS
AND akdeaktiv IS NULL")) 
				{
				}
				if (this.dtRZDat != SalDateTime.Null) 
				{
					this.dtRZDat = SalDateTime.Null;
					if (Int.SqlImmedSel(@"SELECT akdatum INTO :frmRaZa.dtRZDat FROM ak WHERE aktyp='RZ' and aktypdetail='KünRü' and akrznr = :frmRaZa.nRZNr AND akdatum >= :frmRaZa.dtRZZahlDat
AND akdatum < :frmRaZa.dtRZZahlDat + 1 MONTH AND akdeaktiv IS NULL")) 
					{
					}
					if (this.dtRZDat != SalDateTime.Null) 
					{
						// Call SalMessageBox( PalDateToStrDE( dtRZZahlDat ), SalNumberToStrX( nRZNr, 0 ), MB_Ok )
						Int.PalLog("KünRZ: RZNr " + this.nRZNr.ToString(0) + " nachgetragen Za " + Int.PalDateToStrJJMMTT(this.dtRZZahlDat));
						if (Int.SqlImmed("UPDATE za SET zarznr = :frmRaZa.nRZNr WHERE ROWID = :frmRaZa.strAuswahl")) 
						{
						}
					}
				}
				this.nFetch = this.hSqlRZ.FetchNext();
			}
			this.hSqlRZ.Commit();

			this.dtRZHeute = new SalDateTime(SalDateTime.Current.Year(), SalDateTime.Current.Month(), SalDateTime.Current.Day(), 0, 0, 0);
			this.nRZAnz = 0;
			this.tblPruef.ResetTable();
			// 01.02.11 Ä533 + AND (rzpausebis IS NULL
			// OR rzpausebis < SYSDATE - 7 DAYS)
			// 04.10.12 F1415 + AND (rzschluss IS NULL OR rzschluss < SYSDATE - 35 DAYS)
			Int.SqlHandleExec(this.hSqlRZ, @"SELECT rznr, rzarztnr, rzhalternr, rzaktivdat, rzrate, rztag, rzpausebis
INTO :frmRaZa.nRZNr, :frmRaZa.nRZArztNr, :frmRaZa.nRZHalterNr, :frmRaZa.dtRZAktivDat, :frmRaZa.nRZRate, :frmRaZa.nRZTag, :frmRaZa.dtRZPauseBis
FROM rz WHERE rzkuenddat IS NULL AND rzbezdat IS NULL AND rzaktivdat IS NOT NULL AND rzdeaktiv IS NULL
AND (rzpausebis IS NULL OR rzpausebis < SYSDATE - 7 DAYS)
AND (rzschluss IS NULL OR rzschluss < SYSDATE - 35 DAYS)
ORDER BY rznr", "RaZa-Prüflauf", ref Var.nErr);
			this.nFetch = this.hSqlRZ.FetchNext();
			while (this.nFetch != Sys.FETCH_EOF) 
			{
				if (this.nRZTag < (this.dtRZHeute - 7).Day()) 
				{
					this.dtRZDat = this.dtRZHeute - 7;
				}
				else
				{
					this.dtRZDat = this.dtRZHeute - 7 - 31;
				}
				// 28.08.12 F1396
				if (this.dtRZPauseBis != SalDateTime.Null) 
				{
					if (this.nRZTag < this.dtRZPauseBis.Day()) 
					{
						this.dtRZPauseBis = new SalDateTime(this.dtRZPauseBis.Year(), this.dtRZPauseBis.Month(), this.nRZTag, 0, 0, 0) + 31;
					}
					this.dtRZPauseBis = this.dtRZPauseBis + 7;
				}
				else
				{
					this.dtRZPauseBis = new SalDateTime(1900, 1, 1);
				}
				// 18.05.11 F925
				// Set dtRZDat = SalDateConstruct( SalDateYear(dtRZDat), SalDateMonth( dtRZDat ), frmMain.nRZTag, 0, 0, 0 )
				this.dtRZDat = new SalDateTime(this.dtRZDat.Year(), this.dtRZDat.Month(), this.nRZTag, 0, 0, 0);
				// 10.06.11 Ä585
				this.dtRZDat = this.dtRZDat - 10;
				// 22.10.14 Ä965 raus: AND zakz<4
				Int.SqlImmedSel("SELECT sum(zadm) INTO :frmRaZa.nRZZahl FROM za WHERE zarznr = :frmRaZa.nRZNr AND zabuchdat >= :frmRaZa.dtRZDat AND zadeaktiv IS NULL");

				if (this.nRZZahl == SalNumber.Null) 
				{
					this.nRZZahl = 0;
				}
				// 15.06.10 Evtl. Vormonat doppelt bezahlt?
				if (this.nRZZahl == 0) 
				{
					// 22.10.14 Ä965 raus: AND zakz<4
					Int.SqlImmedSel("SELECT sum(zadm) INTO :frmRaZa.nRZZahl FROM za WHERE zarznr = :frmRaZa.nRZNr AND zabuchdat BETWEEN :frmRaZa.dtRZDat - 31 DAYS AND :frmRaZa.dtRZDat AND zadeaktiv IS NULL");
					if (this.nRZZahl == SalNumber.Null) 
					{
						this.nRZZahl = 0;
					}
					if (this.nRZZahl < this.nRZRate * 1.5m) 
					{
						this.nRZZahl = 0;
					}
				}
				// 28.08.12 F1396 +  And dtRZPauseBis < SalDateCurrent(  )
				if (this.dtRZAktivDat <= this.dtRZHeute - 30 && this.nRZZahl < this.nRZRate * 0.75m && this.dtRZPauseBis < SalDateTime.Current) 
				{
					// 10.06.10
					// 23.11.15 Ä1287 + MAX(rkrechnr), MAX(rkmahnstufe)
					Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl),
MAX(rkrechnr), MAX(rkmahnstufe)
FROM rk
INTO :frmRaZa.nAussenst, :frmRaZa.nMaxRechNr, :frmRaZa.nMaxMS
WHERE rkkzzahl<2  AND rkdeaktiv IS NULL
AND rkarztnr*10000000000+rkhalternr*10000+rkrechnr IN (SELECT rzparztnr*10000000000+rzphalternr*10000+rzprechnr FROM rzp WHERE rzpnr = :frmRaZa.nRZNr) ");
					// 25.11.15 Ä1287
					if (this.nMaxRechNr >= 999990) 
					{
						Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
FROM rk
INTO :frmRaZa.nMBSammlerOffen
WHERE rkkzzahl<2 AND rkrechnr >= 999990  AND rkdeaktiv IS NULL
AND rkarztnr*10000000000+rkhalternr*10000+rkrechnr IN (SELECT rzparztnr*10000000000+rzphalternr*10000+rzprechnr FROM rzp WHERE rzpnr = :frmRaZa.nRZNr) ");
						if (this.nMBSammlerOffen == 0) 
						{
							this.nMaxRechNr = 999989;
						}
					}
					Int.SqlImmedSel(@"SELECT sum(hbdm)
FROM hb
INTO :frmRaZa.nAussenst2
WHERE hbcode = 'RaZa'
AND hbrznr = :frmRaZa.nRZNr ");
					this.nAussenst = this.nAussenst + this.nAussenst2;

					if (this.nAussenst == 0) 
					{
						Int.SqlImmed("UPDATE rz SET rzbezdat = SYSDATETIME WHERE rznr = :frmRaZa.nRZNr");
						Int.PalAktionRZ(this.nRZArztNr, this.nRZHalterNr, this.nRZNr, "RZ", "RZbez", SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null);
					}
					else
					{
						// 23.11.15 Ä1287 + MAX(rkrechnr), MAX(rkmahnstufe)
						if (this.cbnurMBs.Checked) 
						{
							if ((this.nMaxMS >= 9 || this.nMaxRechNr >= 999990) && Var.strBNLeseberechtigung.Scan(Int.PalZust(this.nRZArztNr)) != -1) 
							{
								this.PalAddKuend();
							}
						}
						else
						{
							if (this.nMaxMS < 9 && this.nMaxRechNr < 999990) 
							{
								this.PalAddKuend();
							}
						}

					}
				}

				this.nFetch = this.hSqlRZ.FetchNext();
			}
			this.hSqlRZ.Commit();

			// 15.03.16 Ä1294
			if (this.tblPruef.AnyRows(0, 0)) 
			{
				this.pbKuendOk.EnableWindow();
				this.pbKuendListe.EnableWindow();
			}

			// LL
			// If frmRaZa.nRZAnz > 0
			// Call SalMessageBox( 'Es folgen zwei Drucke:
			// 
			// Kündigungsschreiben an Halter
			// Infoschreiben an Mitglied', 'Information', MB_IconAsterisk)
			// If SalModalDialog( dlgLlDruck, frmMain, 'RaZa-Kündigung.crd', '')
			// If SalModalDialog( dlgLlDruck, frmMain, 'RaZa-KündInfoM.crd', '')

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// pbKuendOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKuendOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbKuendOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKuendOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nRZAnz = 0;
			this.nFax = this.cbFax.Checked;
			// 22.01.18 Ä1693
			this.nRow = Sys.TBL_MinRow;
			while (this.tblPruef.FindNextRow(ref this.nRow, 0, Sys.ROW_MarkDeleted)) 
			{
				this.nRZAnz = this.nRZAnz + 1;
			}
			if (this.nRZAnz > 0) 
			{
				if (Sys.IDYES == Sal.MessageBox("Wollen Sie wirklich " + this.nRZAnz.ToString(0) + " RaZa-Verträge kündigen?", "RaZa-Kündigen?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					this.nRZAnz = 0;
					this.nRow = Sys.TBL_MinRow;
					while (this.tblPruef.FindNextRow(ref this.nRow, 0, Sys.ROW_MarkDeleted)) 
					{
						this.tblPruef.SetFocusRow(this.nRow);

						// Call SalTblInsertRow( tblPruef, TBL_MaxRow)
						// Set tblPruef.colnArztNr = nRZArztNr
						// Set tblPruef.colnHalterNr = nRZHalterNr
						// Set tblPruef.colnRZNr = nRZNr
						// Set tblPruef.colsAktion = 'Kündigung'
						// 07.06.10
						Int.SqlImmed("UPDATE rz SET rzkuenddat = SYSDATETIME WHERE rznr = :frmRaZa.tblPruef.colnRZNr");
						Int.PalAktionRZ(this.tblPruef.colnArztNr.Number, this.tblPruef.colnHalterNr.Number, this.tblPruef.colnRZNr.Number, "RZ", "Kündg", SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null);
						// 14.12.10 OTÄ502
						Int.SqlIstDa(@"FROM rzp, rk WHERE rzparztnr=rkarztnr AND rzphalternr=rkhalternr AND rzprechnr=rkrechnr AND (rkmahnstufe=9 OR rzprechnr>999990)
AND rzpnr = :frmRaZa.tblPruef.colnRZNr AND rkdeaktiv IS NULL", ref this.bMBJa);
						if (this.bMBJa) 
						{
							App.frmMain.strZust = Int.PalZust(this.tblPruef.colnArztNr.Number);
							// Set dtZettelWi = SalDateCurrent(  ) + 30
							this.lsZettel = "Kündigung der RaZa-Vereinbarung RZ " + this.tblPruef.colnRZNr.Number.ToString(0) + " durch moveta";
							// 13.05.14 F2027
							this.tblPruef.colnHalterNr.Number = Int.PalCheckNULL(this.tblPruef.colnHalterNr.Number);

							Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :frmMain.strZust, :frmRaZa.tblPruef.colnArztNr, :frmRaZa.tblPruef.colnHalterNr, 0,
:frmRaZa.lsZettel , SYSDATE, NULL, 'N', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
						}

						this.nRZAnz = this.nRZAnz + 1;
					}

					// LL
					if (this.nRZAnz > 0) 
					{
						Sal.MessageBox(@"Es folgen zwei Drucke:

1. Kündigungsschreiben an Halter
2. Infoschreiben an Mitglied", "Information", Sys.MB_IconAsterisk);
						if (dlgLlDruck.ModalDialog(App.frmMain, "RaZa-Kündigung.crd", "")) 
						{
						}
						if (dlgLlDruck.ModalDialog(App.frmMain, "RaZa-KündInfoM.crd", "")) 
						{
						}
						// If SalModalDialog( dlgLlDruck, frmMain, 'RaZa-KündInfoM-MS4und5.crd', '')	! 29.11.16 Ä1439 entfernt
					}

				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbKuendListe WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKuendListe_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbKuendListe_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKuendListe_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nRZAnz = 0;
			this.nRow = Sys.TBL_MinRow;
			while (this.tblPruef.FindNextRow(ref this.nRow, 0, Sys.ROW_MarkDeleted)) 
			{
				this.tblPruef.SetFocusRow(this.nRow);
				this.nRZAnz = this.nRZAnz + 1;
			}

			// LL
			if (this.nRZAnz > 0) 
			{
				if (dlgLlDruck.ModalDialog(App.frmMain, "RaZa-Kündigungsliste.lst", "")) 
				{
				}
			}

			#endregion
		}
		
		/// <summary>
		/// pbInfo WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbInfo_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbInfo_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbInfo_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			App.frmRgSuchen.PalFuelle(this.tblPruef.colnArztNr.Number, this.tblPruef.colnHalterNr.Number, 0);
			#endregion
		}
		
		/// <summary>
		/// pbZins WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZins_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbZins_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZins_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			this.dtRZHeute = new SalDateTime(SalDateTime.Current.Year(), SalDateTime.Current.Month(), SalDateTime.Current.Day(), 0, 0, 0);
			this.tblPruef.ResetTable();
			// 22.01.16
			Int.SqlPrepar(this.hSqlRZ2, @"INSERT INTO hb (hbarztnr, hbhalternr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext, hbrznr)
VALUES(:frmRaZa.nRZArztNr, :frmRaZa.nRZHalterNr, SYSDATE, 'Zins', SYSDATETIME, :frmRaZa.nRZZinsEUR, 16000, 16450, :frmRaZa.tblPruef.colsAktion, :frmRaZa.nRZNr)");
			// 06.02.12 Ä719 + AND rzschluss IS NULL
			Int.SqlHandleExec(this.hSqlRZ, @"SELECT rznr, rzarztnr, rzhalternr, rzaktivdat, rzzins, rzltztzinsdat
INTO :frmRaZa.nRZNr, :frmRaZa.nRZArztNr, :frmRaZa.nRZHalterNr, :frmRaZa.dtRZAktivDat, :frmRaZa.nRZZins, :frmRaZa.dtRZLtztZinsDat
FROM rz WHERE rzkuenddat IS NULL AND rzdeaktiv IS NULL AND rzbezdat IS NULL AND rzaktivdat IS NOT NULL AND rzschluss IS NULL ORDER BY rznr", "RaZa-Prüflauf", ref Var.nErr);
			this.nFetch = this.hSqlRZ.FetchNext();
			while (this.nFetch != Sys.FETCH_EOF) 
			{


				Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
FROM rk
INTO :frmRaZa.nAussenst
WHERE rkkzzahl<2 AND rkdeaktiv IS NULL
AND rkarztnr*10000000000+rkhalternr*10000+rkrechnr IN (SELECT rzparztnr*10000000000+rzphalternr*10000+rzprechnr FROM rzp WHERE rzpnr = :frmRaZa.nRZNr) ");
				if (this.dtRZLtztZinsDat == SalDateTime.Null) 
				{
					this.dtRZLtztZinsDat = this.dtRZAktivDat;
				}
				Int.SqlImmedSel(@"SELECT sum(hbdm)
FROM hb
INTO :frmRaZa.nAussenst2
WHERE hbcode = 'RaZa'
AND hbrznr = :frmRaZa.nRZNr ");
				this.nAussenst = this.nAussenst + this.nAussenst2;
				this.nRZTag = this.dtRZHeute - this.dtRZLtztZinsDat;
				this.nRZZinsEUR = this.nAussenst * this.nRZZins * this.nRZTag / 360m / 100;

				if (this.nRZZinsEUR > 0) 
				{
					this.tblPruef.InsertRow(Sys.TBL_MaxRow);
					this.tblPruef.colnArztNr.Number = this.nRZArztNr;
					this.tblPruef.colnHalterNr.Number = this.nRZHalterNr;
					this.tblPruef.colnRZNr.Number = this.nRZNr;
					this.tblPruef.colsAktion.Text = "Zins " + this.nRZZins.ToString(1) + "% auf EUR " + this.nAussenst.ToString(2) + " seit " + Int.PalDateToStrDE(this.dtRZLtztZinsDat);
					this.tblPruef.colnEUR.Number = this.nRZZinsEUR;
					// 09.12.15
					this.SetStatusBarText("Buche Zinsen für RZ-Nr." + this.nRZNr.ToString(0));
					// 06.03.23 Ä2086
					this.dtBuchDat = SalDateTime.Current;
					Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
					if (this.dtBuchDat < Var.dtINIMinBuchDat) 
					{
						this.dtBuchDat = Var.dtINIMinBuchDat;
					}


					if (Sys.IDOK == Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16000, 16450, :frmRaZa.nRZNr, :frmRaZa.dtBuchDat, 'Ratenzahler-Zinsen', :frmRaZa.nRZZinsEUR, 9)")) 
					{
						this.nRZZinsEUR = this.nRZZinsEUR * -1;
						if (Sys.IDOK == Int.SqlHandleExecuteXError(this.hSqlRZ2, @"INSERT INTO hb (hbarztnr, hbhalternr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext, hbrznr)
VALUES(:frmRaZa.nRZArztNr, :frmRaZa.nRZHalterNr, SYSDATE, 'Zins', SYSDATETIME, :frmRaZa.nRZZinsEUR, 16000, 16450, :frmRaZa.tblPruef.colsAktion, :frmRaZa.nRZNr)", "Fehler Halterkonto-Buchung")) 
						{
							// 09.12.15 nach unten wegen SQL-Fehlern
							// If IDOK = SqlImmedX('UPDATE rz SET rzltztzinsdat = SYSDATE WHERE rznr = :frmRaZa.nRZNr')
						}
					}
				}

				this.nFetch = this.hSqlRZ.FetchNext();
			}
			this.hSqlRZ.Commit();

			Int.SqlImmedX("UPDATE rz SET rzltztzinsdat = SYSDATE WHERE rznr IN (SELECT hbrznr FROM hb WHERE hbbuchdat = SYSDATE AND hbcode = \'Zins\')");
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// pbSchluss WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSchluss_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSchluss_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSchluss_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			if (Int.SqlImmed("UPDATE rz SET rzschluss = NULL WHERE rzschluss = '1900-01-01'")) 
			{
			}
			this.dtRZHeute = new SalDateTime(SalDateTime.Current.Year(), SalDateTime.Current.Month(), SalDateTime.Current.Day(), 0, 0, 0);
			this.nRZAnz = 0;
			this.tblPruef.ResetTable();
			Int.SqlHandleExec(this.hSqlRZ, @"SELECT rznr, rzarztnr, rzhalternr, rzrate
INTO :frmRaZa.nRZNr, :frmRaZa.nRZArztNr, :frmRaZa.nRZHalterNr, :frmRaZa.nRZRate
FROM rz WHERE rzkuenddat IS NULL AND rzdeaktiv IS NULL AND rzbezdat IS NULL AND rzaktivdat IS NOT NULL  AND rzschluss IS NULL ORDER BY rznr", "RaZa-Prüflauf", ref Var.nErr);
			// Call SqlHandleExec(hSqlRZ,
			// 'SELECT rznr, rzarztnr, rzhalternr, rzrate
			// INTO :frmRaZa.nRZNr, :frmRaZa.nRZArztNr, :frmRaZa.nRZHalterNr, :frmRaZa.nRZRate
			// FROM rz WHERE  rznr between 22520 and 22555'
			// ,'RaZa-Prüflauf', nErr)
			this.nFetch = this.hSqlRZ.FetchNext();
			while (this.nFetch != Sys.FETCH_EOF) 
			{

				this.nArztNr2 = 0;
				// 06.02.18 Ä1697 akleinbetrag -> arazakleinbetrag
				Int.SqlImmedSel("SELECT anr2, arazakleinbetrag INTO :frmRaZa.nArztNr2, :frmRaZa.nAKleinbetrag FROM a WHERE aarztnr = :frmRaZa.nRZArztNr");

				if (this.nArztNr2 == 0 || this.nArztNr2 == SalNumber.Null) 
				{
					this.nArztNr2 = this.nRZArztNr;
				}
				if (this.nAKleinbetrag == SalNumber.Null) 
				{
					this.nAKleinbetrag = 1;
				}

				Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
FROM rk
INTO :frmRaZa.nAussenst
WHERE " + Int.PalArztNr("rk", this.nRZArztNr, this.nArztNr2) + @" AND rkhalternr = :frmRaZa.nRZHalterNr
AND rkkzzahl<2 AND rkdeaktiv IS NULL
AND rkarztnr*10000000000+rkhalternr*10000+rkrechnr IN (SELECT rzparztnr*10000000000+rzphalternr*10000+rzprechnr FROM rzp WHERE rzpnr = :frmRaZa.nRZNr) ");
				Int.SqlImmedSel(@"SELECT sum(hbdm)
FROM hb
INTO :frmRaZa.nAussenst2
WHERE hbrznr = :frmRaZa.nRZNr ");
				this.nAussenst2 = this.nAussenst2 * -1;
				// 08.12.21 Ä1983 wegen Ä1983 entfernt:
				// Set nAussenst = nAussenst + nAussenst2

				if (this.nAussenst <= this.nRZRate && this.nAussenst > 0) 
				{
					// 06.02.12 Ä719
					if (this.nAussenst < this.nAKleinbetrag) 
					{
					}
					else
					{
						this.nAussenst3 = 0;
						this.nAussenst3a = 0;
						this.nRZZinsEUR = 0;
						// 19.10.16 Ä1408
						// Call PalFA( 0, nRZArztNr, nRZHalterNr, '', 0, SalDateCurrent(  ) , TRUE, TRUE, FALSE)
						Int.PalFA(0, this.nRZArztNr, this.nRZHalterNr, "", 0, SalDateTime.Current, true, false, false);

						Int.SqlImmedSel(@"SELECT sum(fazinsdm) FROM fa INTO :frmRaZa.nRZZinsEUR
WHERE faproznr in (SELECT prnr FROM pr WHERE " + Int.PalArztNr("pr", this.nRZArztNr, this.nArztNr2) + @" AND prhalternr = :frmRaZa.nRZHalterNr)
AND fauser = :strBNUser");
						// 08.12.21 Ä1983 wegen Ä1983 entfernt:
						// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
						// FROM rk
						// INTO :frmRaZa.nAussenst3
						// WHERE rkkzzahl<2 AND rkdeaktiv IS NULL
						// AND ' || PalArztNr( 'rk', nRZArztNr, nArztNr2 ) || ' AND rkhalternr = :frmRaZa.nRZHalterNr
						// AND rkarztnr*10000000000+rkhalternr*10000+rkrechnr NOT IN (SELECT rzparztnr*10000000000+rzphalternr*10000+rzprechnr FROM rzp WHERE rzpnr = :frmRaZa.nRZNr) ')
						// Call SqlImmedSel('SELECT sum(hbdm)
						// FROM hb
						// INTO :frmRaZa.nAussenst3a
						// WHERE ' || PalArztNr( 'hb', nRZArztNr, nArztNr2 ) || ' AND hbhalternr = :frmRaZa.nRZHalterNr
						// AND hbrznr <> :frmRaZa.nRZNr ')
						// Set nAussenst3 = nAussenst3 + nAussenst3a

						this.tblPruef.InsertRow(Sys.TBL_MaxRow);
						this.tblPruef.colnArztNr.Number = this.nRZArztNr;
						this.tblPruef.colnHalterNr.Number = this.nRZHalterNr;
						this.tblPruef.colnRZNr.Number = this.nRZNr;
						this.tblPruef.colsAktion.Text = "Schlußbrief";
						this.tblPruef.colnEUR.Number = this.nRZZinsEUR;
						this.tblPruef.colnEUR2.Number = this.nAussenst;
						this.tblPruef.colnEUR3.Number = this.nAussenst3;
						// 08.12.21 Ä1983
						// Set nAussenst3a = nAussenst3a * -1
						// Set tblPruef.colnEURHaBu = nAussenst2 + nAussenst3a
						this.tblPruef.colnEURHaBu.Number = this.nAussenst2;

						this.nRZAnz = this.nRZAnz + 1;

						this.lsZettel = "*** RaZa-Schlußbrief " + this.nRZNr.ToString(0);
						// 13.05.14 F2027
						this.nRZHalterNr = Int.PalCheckNULL(this.nRZHalterNr);

						Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmRaZa.nRZArztNr, :frmRaZa.nRZHalterNr, 0,
:frmRaZa.lsZettel , SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
						Int.PalLog("RaZa Schlußbrief: RZ " + Int.PalStrNum(this.nRZNr, 4, 0));
						if (Int.SqlImmed("UPDATE rz SET rzschluss = '1900-01-01' WHERE rznr = :frmRaZa.nRZNr")) 
						{
						}
					}
				}

				this.nFetch = this.hSqlRZ.FetchNext();
			}
			this.hSqlRZ.Commit();
			Sal.WaitCursor(false);

			if (this.nRZAnz > 0) 
			{
				// LL
				if (dlgLlDruck.ModalDialog(App.frmMain, "RaZa-Schlußbrief.crd", "")) 
				{
				}

			}

			#endregion
		}
		
		/// <summary>
		/// pbMS5TAVorschl WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMS5TAVorschl_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbMS5TAVorschl_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMS5TAVorschl_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			// 15.03.16 Ä1294
			this.pbKuendOk.DisableWindow();
			this.pbKuendListe.DisableWindow();
			this.pbMS5TADruck.DisableWindow();

			if (Int.SqlImmed("UPDATE rz SET rzms5tainfo = NULL WHERE rzms5tainfo = '1900-01-01'")) 
			{
			}
			this.dtRZHeute = new SalDateTime(SalDateTime.Current.Year(), SalDateTime.Current.Month(), SalDateTime.Current.Day(), 0, 0, 0);
			this.nRZAnz = 0;
			this.tblPruef.ResetTable();
			Int.SqlHandleExec(this.hSqlRZ, @"SELECT rznr, rzarztnr, rzhalternr, rzrate
INTO :frmRaZa.nRZNr, :frmRaZa.nRZArztNr, :frmRaZa.nRZHalterNr, :frmRaZa.nRZRate
FROM rz WHERE rzkuenddat IS NULL AND rzdeaktiv IS NULL AND rzbezdat IS NULL AND rzaktivdat IS NULL  AND rzschluss IS NULL AND rzms5tainfo IS NULL AND rzerfdat < SYSDATE - 42 DAYS ORDER BY rznr", "RaZa-Prüflauf", ref Var.nErr);
			this.nFetch = this.hSqlRZ.FetchNext();
			while (this.nFetch != Sys.FETCH_EOF) 
			{

				// 16.03.16 Ä1294
				if (Var.strBNZei == Int.PalZust(this.nRZArztNr)) 
				{
					this.nArztNr2 = 0;
					Int.SqlImmedSel("SELECT anr2, akleinbetrag INTO :frmRaZa.nArztNr2, :frmRaZa.nAKleinbetrag FROM a WHERE aarztnr = :frmRaZa.nRZArztNr");
					if (this.nArztNr2 == 0 || this.nArztNr2 == SalNumber.Null) 
					{
						this.nArztNr2 = this.nRZArztNr;
					}
					if (this.nAKleinbetrag == SalNumber.Null) 
					{
						this.nAKleinbetrag = 1;
					}
					Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
FROM rk
INTO :frmRaZa.nAussenst
WHERE " + Int.PalArztNr("rk", this.nRZArztNr, this.nArztNr2) + @" AND rkdeaktiv IS NULL AND rkhalternr = :frmRaZa.nRZHalterNr
AND rkkzzahl<2 AND rkmahnstufe=5
AND rkarztnr*10000000000+rkhalternr*10000+rkrechnr IN (SELECT rzparztnr*10000000000+rzphalternr*10000+rzprechnr FROM rzp WHERE rzpnr = :frmRaZa.nRZNr) ");
					// 06.04.16 Ä1294 SE/KN
					Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
FROM rk
INTO :frmRaZa.nAussenst2
WHERE " + Int.PalArztNr("rk", this.nRZArztNr, this.nArztNr2) + @" AND rkdeaktiv IS NULL AND rkhalternr = :frmRaZa.nRZHalterNr
AND rkkzzahl<2");

					// Call SqlImmedSel('SELECT sum(hbdm)
					// FROM hb
					// INTO :frmRaZa.nAussenst2
					// WHERE hbrznr = :frmRaZa.nRZNr ')
					// Set nAussenst2 = nAussenst2 * -1
					// Set nAussenst = nAussenst + nAussenst2
					// 06.04.16 raus: nAussenst <= nRZRate and
					if (this.nAussenst > 0) 
					{
						// 06.02.12 Ä719
						if (this.nAussenst < this.nAKleinbetrag) 
						{
						}
						else
						{
							this.tblPruef.InsertRow(Sys.TBL_MaxRow);
							this.tblPruef.colnArztNr.Number = this.nRZArztNr;
							this.tblPruef.colnHalterNr.Number = this.nRZHalterNr;
							this.tblPruef.colnRZNr.Number = this.nRZNr;
							this.tblPruef.colsAktion.Text = "MS5-InfoanTA";
							this.tblPruef.colnEUR.Number = this.nAussenst2;
							this.tblPruef.colnEUR2.Number = this.nAussenst2;
							this.nRZAnz = this.nRZAnz + 1;

							// Set lsZettel = '*** RaZa-MS5TAInfof ' || SalNumberToStrX( nRZNr, 0 )
							// 13.05.14 F2027
							this.nRZHalterNr = Int.PalCheckNULL(this.nRZHalterNr);

							// Call SqlImmed('
							// INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
							// VALUES (:strBNZei, \'*\', :frmRaZa.nRZArztNr, :frmRaZa.nRZHalterNr, 0,
							// :frmRaZa.lsZettel , SYSDATE, NULL, \'J\', \'TN\', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)')

							// 08.02.16 Ä1294 + AND rkkzzahl<2 laut SD und SE
							Int.SqlHandleExec(this.hSqlRZ2, @"SELECT rzparztnr, rzprechnr
INTO :frmRaZa.nRkArzt, :frmRaZa.nRkRech
FROM rzp, rk
WHERE  rzparztnr = rkarztnr AND rzphalternr = rkhalternr AND rzprechnr = rkrechnr
AND rzpnr = :frmRaZa.nRZNr AND rkdeaktiv IS NULL AND rzprechnr < 999990 AND rkkzzahl<2
ORDER BY rzparztnr, rzprechnr", "RaZa-Prüflauf2", ref Var.nErr);
							this.nFetch2 = this.hSqlRZ2.FetchNext();
							while (this.nFetch2 != Sys.FETCH_EOF) 
							{

								this.tblPruef.colsMS45.Text = this.tblPruef.colsMS45.Text + ", " + this.nRkArzt.ToString(0) + "/R" + this.nRkRech.ToString(0);
								this.nFetch2 = this.hSqlRZ2.FetchNext();
							}
							this.hSqlRZ2.Commit();
							if (this.tblPruef.colsMS45.Text != "") 
							{
								this.tblPruef.colsMS45.Text = ((SalString)this.tblPruef.colsMS45.Text).Mid(2, 32000);
							}

							// Call PalLog('RaZa MS5TAInfo: RZ '|| PalStrNum(nRZNr, 4, 0))
							// If SqlImmed('UPDATE rz SET rzms5tainfo = '1900-01-01' WHERE rznr = :frmRaZa.nRZNr')
						}
					}
				}

				this.nFetch = this.hSqlRZ.FetchNext();
			}
			this.hSqlRZ.Commit();
			this.pbMS5TADruck.EnableWindow();
			Sal.WaitCursor(false);

			// If nRZAnz > 0
			// LL
			// If SalModalDialog( dlgLlDruck, frmMain, 'RaZa-MS5TAInfo.crd', '')

			#endregion
		}
		
		/// <summary>
		/// pbEWA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEWA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEWA_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEWA_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (dlgLlDruck.ModalDialog(App.frmMain, "EWA-Liste.lst", "")) 
			{
			}
			#endregion
		}
		
		/// <summary>
		/// tblPruef WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblPruef_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblPruef_OnSAM_Create(sender, e);
					break;
				
				// On SAM_FetchRowDone
				
				// 18.09.02
				
				// If bPFarbe
				
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xFFBFFF )
				
				// Set bPFarbe = FALSE
				
				// Else
				
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xFFEFFF )
				
				// Set bPFarbe = TRUE
				
				// On SAM_RowHeaderClick	! 30.01.17 wegen Ä1466 entfernt
				
				// Call PalFuelle(  tblPruef.colnArztNr, tblPruef.colnHalterNr, 0 )
				
				// On SAM_RowSetContext
				
				// Call picTabs.BringToTop(1, FALSE)
				
				// Set dfRZNr = tblTagebuch.colnRZNr
				
				// Call SalSendMsg( dfRZNr, SAM_Validate, 0, 0 )
				
				// Call PalFuelle(  tblPruef.colnArztNr, tblPruef.colnHalterNr, 0 )
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblPruef_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblPruef, 0xffbfff);
			#endregion
		}
		
		/// <summary>
		/// pbMS5TADruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMS5TADruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbMS5TADruck_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMS5TADruck_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nRZAnz = 0;
			this.nRow = Sys.TBL_MinRow;
			while (this.tblPruef.FindNextRow(ref this.nRow, 0, Sys.ROW_MarkDeleted)) 
			{
				this.tblPruef.SetFocusRow(this.nRow);
				this.nRZAnz = this.nRZAnz + 1;

				this.lsZettel = "*** RaZa-MS5TAInfof " + this.tblPruef.colnRZNr.Number.ToString(0);
				Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmRaZa.tblPruef.colnArztNr, :frmRaZa.tblPruef.colnHalterNr, 0,
:frmRaZa.lsZettel , SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
				Int.PalLog("RaZa MS5TAInfo: RZ " + Int.PalStrNum(this.tblPruef.colnRZNr.Number, 4, 0));
				if (Int.SqlImmed("UPDATE rz SET rzms5tainfo = '1900-01-01' WHERE rznr = :frmRaZa.tblPruef.colnRZNr")) 
				{
				}
			}
			// !
			// ! LL
			if (this.nRZAnz > 0) 
			{
				if (dlgLlDruck.ModalDialog(App.frmMain, "RaZa-MS5TAInfo.crd", "")) 
				{
				}
			}
			// !
			#endregion
		}
		
		/// <summary>
		/// pbDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDruck_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDruck_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PrintParams.Init();
			this.PrintParams.DocName = "Ratenzahler";
			this.PrintParams.Orientation = MT.MTbl.MTP_OR_LANDSCAPE;
			// Set strDevice = MTblPrintGetDefPrinterName(  )
			this.nResult = this.lbPrinters.GetListSelectedIndex();
			if (this.nResult == Sys.LB_Err) 
			{
				this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			}
			else
			{
				this.strDevice = this.lbPrinters.GetListItemText(this.nResult);
			}
			this.PrintParams.PrinterName = this.strDevice;
			// 07.11.13 F1760
			this.PrintParams.Language = MT.MTbl.MTP_LNG_GERMAN;

			MT.MTbl.Print(this.tblTagebuch, this.PrintParams);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nAnz = MT.MTbl.PrintGetPrinterNames(this.strPrinters);
			this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			this.nOff = -1;
			this.nResult = 0;
			while (this.nResult < this.nAnz) 
			{
				this.lbPrinters.AddListItem(this.strPrinters[this.nResult]);
				if (this.strPrinters[this.nResult] == this.strDevice) 
				{
					this.nOff = this.nResult;
				}
				this.nResult = this.nResult + 1;
			}
			if (this.nOff >= 0) 
			{
				this.lbPrinters.SetListSelectedIndex(this.nOff);
			}

			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblTagebuch
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblTagebuchTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmRaZa _frmRaZa = null;
			
			
			#region Window Variables
			public SalBoolean bPFarbe = false;
			#endregion
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblTagebuchTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmRaZa frmRaZa
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmRaZa == null) 
					{
						_frmRaZa = (frmRaZa)this.FindForm();
					}
					return _frmRaZa;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblTagebuchTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblTagebuchTableWindow)SalWindow.FromHandle(handle, typeof(tblTagebuchTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblRZ
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblRZTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmRaZa _frmRaZa = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblRZTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmRaZa frmRaZa
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmRaZa == null) 
					{
						_frmRaZa = (frmRaZa)this.FindForm();
					}
					return _frmRaZa;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblRZTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblRZTableWindow)SalWindow.FromHandle(handle, typeof(tblRZTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblRZPos
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblRZPosTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmRaZa _frmRaZa = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblRZPosTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmRaZa frmRaZa
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmRaZa == null) 
					{
						_frmRaZa = (frmRaZa)this.FindForm();
					}
					return _frmRaZa;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblRZPosTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblRZPosTableWindow)SalWindow.FromHandle(handle, typeof(tblRZPosTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblNeu
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblNeuTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmRaZa _frmRaZa = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblNeuTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmRaZa frmRaZa
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmRaZa == null) 
					{
						_frmRaZa = (frmRaZa)this.FindForm();
					}
					return _frmRaZa;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblNeuTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblNeuTableWindow)SalWindow.FromHandle(handle, typeof(tblNeuTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblPruef
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblPruefTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmRaZa _frmRaZa = null;
			
			
			#region Window Variables
			public SalBoolean bPFarbe = false;
			#endregion
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblPruefTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmRaZa frmRaZa
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmRaZa == null) 
					{
						_frmRaZa = (frmRaZa)this.FindForm();
					}
					return _frmRaZa;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblPruefTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblPruefTableWindow)SalWindow.FromHandle(handle, typeof(tblPruefTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalTagebuchRefreshLocals
			{
				public SalString strPSelect = "";
			}
		}
		#endregion
	}
}
