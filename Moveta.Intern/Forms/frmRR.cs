// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;
using Dart.Ftp;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmRR : SalQuickTabsForm
	{
		#region Window Variables
		public SalSqlHandle hSqlRR = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalString strTelPraxis = "";
		public SalString strTelHandy = "";
		public SalString strTelPrivat = "";
		public SalFileHandle hFile = SalFileHandle.Null;
		public SalString strFile = "";
		public SalString strScanTitel = "";
		public SalNumber nRet = 0;
		public SalBoolean bOk = false;
		public SalString strUnterOrdner = "";
		public SalArray<SalString> saDirs = new SalArray<SalString>();
		public SalArray<SalString> saFiles = new SalArray<SalString>();
		public SalArray<SalNumber> naSize = new SalArray<SalNumber>();
		public SalArray<SalDateTime> dtaDate = new SalArray<SalDateTime>();
		public SalArray<SalNumber> naAttributes = new SalArray<SalNumber>();
		public SalArray<SalString> saFiles1 = new SalArray<SalString>();
		public SalArray<SalNumber> naSize1 = new SalArray<SalNumber>();
		public SalArray<SalDateTime> dtaDate1 = new SalArray<SalDateTime>();
		public SalArray<SalNumber> naAttributes1 = new SalArray<SalNumber>();
		public SalNumber nCount = 0;
		public SalNumber nCountF = 0;
		public SalNumber nNrF = 0;
		public SalString strDir = "";
		public SalNumber nPicDoc = 0;
		public SalString strTemp = "";
		public SalVariant vData = new SalVariant();
		public SalBoolean bPFTPOk = false;
		public Ftp axFTP = new Dart.Ftp.Ftp();
        public Listing objFTPList = new Listing();
		public ListEntry objFTPEntry;
		public SalNumber nPCount = 0;
		public SalString strName = "";
		public SalString strDirectory = "";
		public SalDateTime dtDate = SalDateTime.Null;
		public SalString strDate = "";
		public SalNumber nSize = 0;
		public SalFileHandle hDisk = SalFileHandle.Null;
		public SalString strLine = "";
		public SalString strCN = "";
		public SalString strGUID = "";
		public SalString strPraxis = "";
		public SalNumber nArztNr = 0;
		public SalString strProgVer = "";
		public SalString strPerson = "";
		public SalNumber nDringend = 0;
		public SalDateTime dtErfDat = SalDateTime.Null;
		public SalString strProdukt = "";
		public SalString strAuswahl = "";
		public SalString lsBody = "";
		public SalString strMail = "";
		public SalString strDummy = "";
		public SalString strPZ = "";
		public SalString strProjekt = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmRR()
		{
			// Assign global reference.
			App.frmRR = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();

            //FC:FINAL:AX_DartFtp:
            this.axFTP.Progress += AxFTP_Progress; ;
            //FC:FINAL:AX_DartFtp:
            this.axFTP.Error += AxFTP_Error; ;
        }

        private void AxFTP_Error(object sender, ErrorEventArgs e)
        {
            Int.PalLog(e.GetException().Message);
        }

        private void AxFTP_Progress(object sender, ProgressEventArgs e)
        {
            //throw new NotImplementedException();
        }
        #endregion

        #region System Methods/Properties

        /// <summary>
        /// Shows the form window.
        /// </summary>
        /// <param name="owner"></param>
        /// <returns></returns>
        public static frmRR CreateWindow(Control owner)
		{
			frmRR frm = new frmRR();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmRR FromHandle(SalWindowHandle handle)
		{
			return ((frmRR)SalWindow.FromHandle(handle, typeof(frmRR)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <param name="strPSort"></param>
		/// <returns></returns>
		public SalNumber PalPopulate(SalString strPSort)
		{
			#region Local Variables
			SqlLocals.PalPopulateLocals locals = new SqlLocals.PalPopulateLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.strPSort = strPSort;

				// 30.08.16
				PalRRCheck();
				// 21.02.19
				strAuswahl = "";
				if (obP3.Checked) 
				{
					strAuswahl = strAuswahl + ",\'P3\'";
				}
				if (obP4.Checked) 
				{
					strAuswahl = strAuswahl + ",\'P4\'";
				}
				if (obMM.Checked) 
				{
					strAuswahl = strAuswahl + ",\'MME\'";
				}
				if (obApp.Checked) 
				{
					strAuswahl = strAuswahl + ",\'App\'";
				}
				if (obInt.Checked) 
				{
					strAuswahl = strAuswahl + ",\'Int\'";
				}
				if (strAuswahl == "") 
				{
					Sal.MessageBox("Bitte treffen Sie eine Auswahl der anzuzeigenden Produkte.", "Kein Produkt gewählt", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
				else
				{

					strAuswahl = strAuswahl.Mid(1, 100);
					// 07.02.14 Ä1023 + rrwichtig
					strSelect = @"SELECT rrdatum, rruser, rrrufnr, rrarztnr, rrpraxis, rrname, rrbemerk, rrerldat, rrerluser, rrlizenz, rrwichtig, rrlevel, @ISNA(rrscan), rrprodukt
INTO :frmRR.gridRR.colDatum, :frmRR.gridRR.colBenutzer, :frmRR.gridRR.colRufNr, :frmRR.gridRR.colArztNr, :frmRR.gridRR.colPraxis, :frmRR.gridRR.colName, :frmRR.gridRR.colBemerk,
:frmRR.gridRR.colErlDat, :frmRR.gridRR.colErlUser, :frmRR.gridRR.colArt, :frmRR.gridRR.colWichtig, :frmRR.gridRR.colLevel, :frmRR.gridRR.colScan, :frmRR.gridRR.colProdukt
FROM rr WHERE (rrprodukt IS NULL OR rrprodukt In (" + strAuswahl + ")) ";
					if (!(cbErl.Checked)) 
					{
						strSelect = strSelect + " AND rrerldat IS NULL";
					}
					// 19.06.15
					// Set strSelect = strSelect || ' ORDER BY rrdatum DESC'
					if (locals.strPSort != "") 
					{
						strSelect = strSelect + " ORDER BY " + locals.strPSort + " DESC";
					}
					else
					{
						strSelect = strSelect + " ORDER BY rrdatum DESC";
					}
					if (gridRR.Populate(hSqlRR, strSelect, Sys.TBL_FillAllBackground)) 
					{
					}
					// If SalTblPopulate( gridRR, hSqlRR, strSelect, TBL_FillAll )
					// 07.02.14 Ä1023
					// 29.07.16 Ä1403 entfernt
					// If strBNAbtlg != 'ED' and strBNZei != 'SD' and strBNZei != 'RI'
					// Call SalDisableWindow( obDA )
					// Call SalDisableWindow( obKE )
					// Call SalDisableWindow( obSD )
					// Call SalDisableWindow( obRI )
					// If SalFileOpen( hFile, 'F:\\Allgemein\\~DA.txt', OF_Exist )
					// Set obDA = TRUE
					// Call SalColorSet( obDA,  COLOR_IndexWindow, COLOR_DarkRed )
					// Else
					// Set obDA = FALSE
					// Call SalColorSet( obDA,  COLOR_IndexWindow, COLOR_DarkGreen )
					// If SalFileOpen( hFile, 'F:\\Allgemein\\~KE.txt', OF_Exist )
					// Set obKE = TRUE
					// Call SalColorSet( obKE,  COLOR_IndexWindow, COLOR_DarkRed )
					// Else
					// Set obKE = FALSE
					// Call SalColorSet( obKE,  COLOR_IndexWindow, COLOR_DarkGreen )
					// If SalFileOpen( hFile, 'F:\\Allgemein\\~SD.txt', OF_Exist )
					// Set obSD = TRUE
					// Call SalColorSet( obSD,  COLOR_IndexWindow, COLOR_DarkRed )
					// Else
					// Set obSD = FALSE
					// Call SalColorSet( obSD,  COLOR_IndexWindow, COLOR_DarkGreen )
					// If SalFileOpen( hFile, 'F:\\Allgemein\\~RI.txt', OF_Exist )
					// Set obRI = TRUE
					// Call SalColorSet( obRI,  COLOR_IndexWindow, COLOR_DarkRed )
					// Else
					// Set obRI = FALSE
					// Call SalColorSet( obRI,  COLOR_IndexWindow, COLOR_DarkGreen )
					// 06.10.15
					// Call MTblSortTree( gridRR, MTST_TOPDOWN )
					// Call MTblSetTreeFlags( hWndItem, MTBL_TREE_FLAG_INDENT_ALL, FALSE )
					MT.MTbl.AutoSizeRows(gridRR, Const.MTASR_ALLROWS);
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalResizeForm()
		{
			#region Local Variables
			SalNumber nPWidth = 0;
			SalNumber nPHeight = 0;
			SalNumber nVWidth = 0;
			SalNumber nVHeight = 0;
			SalNumber nFWidth = 0;
			SalNumber nFHeight = 0;
			SalNumber nX = 0;
			SalNumber nY = 0;
			SalNumber nX1 = 0;
			SalNumber nY1 = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				this.GetSize(ref nPWidth, ref nPHeight);
				gridRR.GetLocation(ref nX, ref nY);

				nFWidth = nPWidth - 1.8m;
				nFHeight = nPHeight - nY - 0.3m;

				gridRR.SetSize(nFWidth - 0.25m, nFHeight - 0.5m);

			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalRRCheck()
		{
			#region Local Variables
			SalArray<SalString> strArrToken = new SalArray<SalString>();
			SalBoolean bPOk = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				// 21.01.16 Ä1322
				// Call SalTblReset( tblFTP )
				Sal.WaitCursor(true);


				//bPFTPOk = axFTP.Login("ftp.tvn-elze.de", "TVNUser", "91L3bg6Q", "", 21);
                this.axFTP.Connect("ftp.tvn-elze.de");
                this.axFTP.Authenticate("TVNUser", "91L3bg6Q"); // "", 21);
                //FC:FINAL:#44 setze bPFTPOk auf den Wert, ob die Verbindung zum Server erfolgreich war
                this.bPFTPOk = this.axFTP.Connected;
                if (this.bPFTPOk) 
				{
					axFTP.Timeout = 60000;
					// 22.12.09
					// 07.12.12
					// Call axFTP.PropSetPassive( FALSE )
					//axFTP.PropSetPassive(true);

					// Call axFTP.PropSetDirectory( String )
					//axFTP.List("/RRTVN");
					//axFTP.PropGetListing(objFTPList);
					//objFTPList.PropGetCount(ref nPCount);
                    this.objFTPList = this.axFTP.List("/RRTVN", " ", ListType.Full);
                    nPCount = this.objFTPList.Count;

                    while (nPCount > 0) 
					{
						vData.SetNumber(nPCount, Sys.VT_I2);
						//objFTPList.Item(vData, objFTPEntry);
						//objFTPEntry.PropGetName(ref strName);
						//objFTPEntry.PropGetDirectory(ref strDirectory);
						//objFTPEntry.PropGetTimeStamp(ref strDate);
						//objFTPEntry.PropGetSize(ref nSize);
                        objFTPEntry = objFTPList[nPCount - 1];
                        strName = objFTPEntry.Name;
                        strDirectory = objFTPEntry.DirectoryName;
                        strDate = objFTPEntry.TimeStamp;
                        nSize = objFTPEntry.Length;

                        if (strName != "." && strName != "..") 
						{
							strTemp = Vis.DosGetEnvString("TEMP");
							vData.SetString(strTemp + "\\" + strName);
							//bPFTPOk = axFTP.Retrieve("/RRTVN/" + strName, vData, 0, 0);
                            var result = axFTP.Get("/RRTVN/" + strName, vData.ToString(), Synchronize.Off);
							if (result.Status == CopyStatus.Completed) 
							{
								hDisk.Open(strTemp + "\\" + strName, Sys.OF_Read);
								while (hDisk.GetString(ref strLine, 2048)) 
								{
									if (strLine.Tokenize("", ((SalNumber)9).ToCharacter(), strArrToken) > 5) 
									{
										strGUID = strArrToken[2];
										strPerson = strArrToken[3];
										strPraxis = strArrToken[4];
										strTelPraxis = strArrToken[5];
										mlBemerk.Text = strArrToken[6];
										nDringend = Int.PalValNum(strArrToken[7]);
										// 30.08.22 Ä2041
										strProjekt = strArrToken[8];
										if (strProjekt == "") 
										{
											strProjekt = "P3";
										}
										// 29.12.17 F3071
										dtErfDat = SalDateTime.Current;

										Int.SqlImmedSel("SELECT pnarztnr INTO :frmRR.nArztNr FROM pn WHERE pnguid = :frmRR.strGUID");

										Int.SqlImmed(@"INSERT INTO rr (rrdatum, rruser, rrrufnr, rrarztnr, rrpraxis, rrname, rrbemerk, rrlevel, rrwichtig, rrprodukt)
VALUES ( :frmRR.dtErfDat, '--', :frmRR.strTelPraxis, :frmRR.nArztNr, :frmRR.strPraxis, :frmRR.strPerson, :frmRR.mlBemerk , 1, :frmRR.nDringend, :frmRR.strProjekt )");
										// 12.11.21
									}
									else
									{
										Int.SqlImmedSel("SELECT rrbemerk INTO :frmRR.mlBemerk FROM rr WHERE rrdatum = :frmRR.dtErfDat");
										mlBemerk.Text = mlBemerk.Text + @"
" + strLine;
										Int.SqlImmed("UPDATE rr SET rrbemerk = :frmRR.mlBemerk WHERE rrdatum = :frmRR.dtErfDat");
									}
									mlBemerk.Text = "";
								}
								hDisk.Close();
								//bPFTPOk = axFTP.Delete("/RRTVN/" + strName);
								var response = axFTP.Delete("/RRTVN/" + strName);
							}
						}

						nPCount = nPCount - 1;
					}

					axFTP.Close();
				}

				this.SetStatusBarText("");
				Sal.WaitCursor(false);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalTimerTippAction()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (this.KillTimer(1)) 
				{
					this.SetTimer(1, 30000);
					// Call SalMessageBeep( 0 )
					// Set mlBemerk = mlBemerk || '.'
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmRR WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRR_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmRR_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_CreateComplete:
					this.frmRR_OnSAM_CreateComplete(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmRR_OnSAM_Destroy(sender, e);
					break;
				
				case Sys.SAM_Timer:
					this.frmRR_OnSAM_Timer(sender, e);
					break;
				
				case Const.WM_SIZE:
					this.frmRR_OnWM_SIZE(sender, e);
					break;
				
				case Sys.SAM_Activate:
					this.frmRR_OnSAM_Activate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRR_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.bfrmRR = true;
			Int.PalGetSize(this, true);
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRR_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 16.06.15 +  and strBNZei != 'RI'
			if (Var.strBNAbtlg != "ED" && Var.strBNZei != "SD" && Var.strBNZei != "RI") 
			{
				// Call SalHideWindow( gridRR.colErl )
			}
			else
			{
				this.gridRR.SetContextMenu("frmRRRightClick", 0);
			}
			// 28.04.16
			this.PalRRCheck();
			// 21.02.19
			this.obP3.Checked = false;
			this.obP4.Checked = false;
			this.obMM.Checked = false;
			this.obApp.Checked = false;
			this.obInt.Checked = false;
			if (1 == Int.PalGetProfileIntR("frmRR", "P3", 1, "TVN")) 
			{
				this.obP3.Checked = true;
			}
			if (1 == Int.PalGetProfileIntR("frmRR", "P4", 1, "TVN")) 
			{
				this.obP4.Checked = true;
			}
			if (1 == Int.PalGetProfileIntR("frmRR", "MME", 1, "TVN")) 
			{
				this.obMM.Checked = true;
			}
			if (1 == Int.PalGetProfileIntR("frmRR", "App", 1, "TVN")) 
			{
				this.obApp.Checked = true;
			}
			if (1 == Int.PalGetProfileIntR("frmRR", "Int", 1, "TVN")) 
			{
				this.obInt.Checked = true;
			}

			Int.SqlConnection(ref this.hSqlRR);
			this.PalPopulate("");
			this.SetTimer(1, 30000);
			this.obTimer.Checked = true;
			// 18.11.13 Ä988
			this.cmbGeraet.AddListItem("Toner");
			this.cmbGeraet.AddListItem("Headset");
			this.cmbGeraet.AddListItem("Bildschirm");
			// 12.05.15
			this.cmbMA.PopulateList(this.hSqlRR, "SELECT bncode FROM bn ORDER BY bncode");
			this.cmbMA.Text = Var.strBNUser;
			// 15.05.15
			// Set hPicDoc = VisPicLoad (PIC_LoadFile|PIC_FormatBitmap, strTVNPath || '\\bmp\\16\\document.bmp', '')
			this.nPicDoc = MT.MImg.LoadFromFile(Var.strTVNPath + "\\bmp\\16\\document.bmp", MT.MImg.MIMG_TYPE_BMP, 0);
			Int.PalTblSetRowPicture(this.gridRR, Vis.ROW_UserFlag2, this.nPicDoc);
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRR_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 21.02.19
			if (this.obP3.Checked) 
			{
				Int.PalSetProfileStringR("frmRR", "P3", "1", "TVN");
			}
			else
			{
				Int.PalSetProfileStringR("frmRR", "P3", "0", "TVN");
			}
			if (this.obP4.Checked) 
			{
				Int.PalSetProfileStringR("frmRR", "P4", "1", "TVN");
			}
			else
			{
				Int.PalSetProfileStringR("frmRR", "P4", "0", "TVN");
			}
			if (this.obMM.Checked) 
			{
				Int.PalSetProfileStringR("frmRR", "MME", "1", "TVN");
			}
			else
			{
				Int.PalSetProfileStringR("frmRR", "MME", "0", "TVN");
			}
			if (this.obApp.Checked) 
			{
				Int.PalSetProfileStringR("frmRR", "App", "1", "TVN");
			}
			else
			{
				Int.PalSetProfileStringR("frmRR", "App", "0", "TVN");
			}
			if (this.obInt.Checked) 
			{
				Int.PalSetProfileStringR("frmRR", "Int", "1", "TVN");
			}
			else
			{
				Int.PalSetProfileStringR("frmRR", "Int", "0", "TVN");
			}

			Int.PalSetSize(this);
			this.KillTimer(1);
			this.hSqlRR.Disconnect();
			Var.bfrmRR = false;
			#endregion
		}
		
		/// <summary>
		/// SAM_Timer event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRR_OnSAM_Timer(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 28.04.16
			// Call PalRRCheck(  )

			this.PalPopulate("");
			#endregion
		}
		
		/// <summary>
		/// WM_SIZE event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRR_OnWM_SIZE(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalResizeForm();
			#endregion
		}
		
		/// <summary>
		/// SAM_Activate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRR_OnSAM_Activate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
            //FC:FINAL: check if form still exists
            if ((App.frmRR == null))
            {
				return;
            }
            // 07.03.22
            this.strPZ = Int.PalStrNum0(SalDateTime.Current.Day(), 2, 0);
			this.dfPZ.Text = Int.PalPruefZiffer(this.strPZ.Left(1)) + Int.PalPruefZiffer(this.strPZ.Right(1));
			#endregion
		}
		
		/// <summary>
		/// gridRR WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gridRR_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.gridRR_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.gridRR_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_FetchDone:
					this.gridRR_OnSAM_FetchDone(sender, e);
					break;
				
				case MT.MTbl.MTM_BtnClick: // 20.02.18 Ä1710
					this.gridRR_OnMTM_BtnClick(sender, e);
					break;
				
				case Const.WM_MOUSEMOVE:
					this.gridRR_OnWM_MOUSEMOVE(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gridRR_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.gridRR, 0);
			MT.MTbl.DefineColLines(this.gridRR, MT.MTbl.MTLS_DOT, MT.MTbl.MTBL_COLOR_UNDEF);
			MT.MTbl.DefineRowLines(this.gridRR, MT.MTbl.MTLS_INVISIBLE, MT.MTbl.MTBL_COLOR_UNDEF);
			// 06.10.15
			MT.MTbl.SetFlags(this.gridRR, MT.MTbl.MTBL_FLAG_COLOR_ENTIRE_ROW, true);
			MT.MTbl.SetFlags(this.gridRR, MT.MTbl.MTBL_FLAG_VARIABLE_ROW_HEIGHT, true);

			MT.MTbl.SetColumnFlags(this.gridRR.colArztNr, Const.MTBL_COL_FLAG_BUTTONS_PERMANENT, true);
			MT.MTbl.DefineButtonColumn(this.gridRR.colArztNr, true, -1, "Log", 0, 0);
			// Call MTblSetColumnFlags( frmKundList.tblKundList.colsNam1, MTBL_COL_FLAG_BUTTONS_PERMANENT, TRUE )
			// Call MTblDefineButtonColumn( frmKundList.tblKundList.colsNam1, TRUE, -1, 'auswählen', 0, 0 )
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gridRR_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.gridRR.colErlDat.DateTime == Sys.DATETIME_Null && this.gridRR.colErlUser.Text == "") 
			{
				// Set colDauer = (SalDateCurrent(  ) - colDatum) * 24 * 60
				this.gridRR.colDauer.Number = Int.PalTimeDiffWorkDay(this.gridRR.colDatum.DateTime, SalDateTime.Current);
				this.gridRR.colErl.Number = 0;
				// 18.11.13 Ä988
				if (this.gridRR.colArt.Text == "") 
				{
					// Call VisTblSetRowColor( gridRR, lParam, COLOR_DarkRed )
					MT.MTbl.SetRowTextColor(this.gridRR, Sys.lParam, Sys.COLOR_Red, MT.MTbl.MTSC_REDRAW);
				}
				else
				{
					if (this.gridRR.colArt.Text == "BE") 
					{
						// Call VisTblSetRowColor( gridRR, lParam, COLOR_DarkBlue )
						MT.MTbl.SetRowTextColor(this.gridRR, Sys.lParam, Sys.COLOR_DarkBlue, MT.MTbl.MTSC_REDRAW);
					}
					else
					{
						// Call VisTblSetRowColor( gridRR, lParam, COLOR_Purple )
						MT.MTbl.SetRowTextColor(this.gridRR, Sys.lParam, Sys.COLOR_Purple, MT.MTbl.MTSC_REDRAW);
					}
				}
			}
			else if (this.gridRR.colErlDat.DateTime == Sys.DATETIME_Null && this.gridRR.colErlUser.Text != "") 
			{
				// Set colDauer = (SalDateCurrent(  ) - colDatum) * 24 * 60
				this.gridRR.colDauer.Number = Int.PalTimeDiffWorkDay(this.gridRR.colDatum.DateTime, SalDateTime.Current);
				this.gridRR.colErl.Number = 0;
				// Call VisTblSetRowColor( gridRR, lParam, COLOR_Marigold )
				MT.MTbl.SetRowTextColor(this.gridRR, Sys.lParam, Sys.COLOR_Marigold, MT.MTbl.MTSC_REDRAW);
			}
			else
			{
				// Set colDauer = (colErlDat - colDatum) * 24 * 60
				this.gridRR.colDauer.Number = Int.PalTimeDiffWorkDay(this.gridRR.colDatum.DateTime, this.gridRR.colErlDat.DateTime);
				this.gridRR.colErl.Number = 1;
				// Call VisTblSetRowColor( gridRR, lParam, COLOR_DarkGreen )
				MT.MTbl.SetRowTextColor(this.gridRR, Sys.lParam, Sys.COLOR_DarkGreen, MT.MTbl.MTSC_REDRAW);
			}
			// 15.05.15
			if (this.gridRR.colScan.Number == 0) 
			{
				this.gridRR.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag2, true);
			}
			else
			{
				this.gridRR.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag2, false);
			}
			// 28.01.16
			if (this.gridRR.colDauer.Number > 30 && this.gridRR.colErlDat.DateTime == Sys.DATETIME_Null) 
			{
				MT.MTbl.SetCellBackColor(this.gridRR.colDauer, Sys.lParam, Sys.COLOR_Yellow, MT.MTbl.MTSC_REDRAW);
				MT.MTbl.SetCellFont(this.gridRR.colDauer, Sys.lParam, MT.MTbl.MTBL_FONT_UNDEF_NAME, MT.MTbl.MTBL_FONT_UNDEF_SIZE, Sys.FONT_EnhBold, MT.MTbl.MTSF_REDRAW);
			}
			// 04.04.16
			if (this.gridRR.colErlDat.DateTime == Sys.DATETIME_Null) 
			{
				if (this.gridRR.colLevel.Number == 2) 
				{
					MT.MTbl.SetCellBackColor(this.gridRR.colLevel, Sys.lParam, Sys.COLOR_Yellow, MT.MTbl.MTSC_REDRAW);
					MT.MTbl.SetCellFont(this.gridRR.colLevel, Sys.lParam, MT.MTbl.MTBL_FONT_UNDEF_NAME, MT.MTbl.MTBL_FONT_UNDEF_SIZE, Sys.FONT_EnhBold, MT.MTbl.MTSF_REDRAW);
				}
				else if (this.gridRR.colLevel.Number == 3) 
				{
					MT.MTbl.SetCellBackColor(this.gridRR.colLevel, Sys.lParam, Sys.COLOR_Red, MT.MTbl.MTSC_REDRAW);
					MT.MTbl.SetCellFont(this.gridRR.colLevel, Sys.lParam, MT.MTbl.MTBL_FONT_UNDEF_NAME, MT.MTbl.MTBL_FONT_UNDEF_SIZE, Sys.FONT_EnhBold, MT.MTbl.MTSF_REDRAW);
					MT.MTbl.SetCellTextColor(this.gridRR.colLevel, Sys.lParam, Sys.COLOR_White, MT.MTbl.MTSC_REDRAW);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gridRR_OnSAM_FetchDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 14.07.17
			MT.MTbl.AutoSizeRows(this.gridRR, Const.MTASR_ALLROWS);

			#endregion
		}
		
		/// <summary>
		/// MTM_BtnClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gridRR_OnMTM_BtnClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.gridRR.colArztNr.Number == 0 || this.gridRR.colArztNr.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Ohne Arzt-Nummer kann kein Support-Log aufgerufen werden.", "Arzt-Nr. fehlt", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				if (Var.bfrmSupportLog) 
				{
					while (!(App.frmSupportLog.DestroyWindow())) 
					{
					}
				}
				frmSupportLog.CreateWindow(this.gridRR, this.gridRR.colDatum.DateTime, this.gridRR.colArztNr.Number, this.gridRR.colName.Text, 0);
			}
			#endregion
		}
		
		/// <summary>
		/// WM_MOUSEMOVE event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gridRR_OnWM_MOUSEMOVE(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalTimerTippAction();
			#endregion
		}
		
		/// <summary>
		/// pbReferesh WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbReferesh_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbReferesh_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbReferesh_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalPopulate("");
			#endregion
		}
		
		/// <summary>
		/// obTimer WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obTimer_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.obTimer_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obTimer_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.obTimer.Checked) 
			{
				this.PalPopulate("");
				this.SetTimer(1, 30000);
			}
			else
			{
				this.KillTimer(1);
			}
			#endregion
		}
		
		/// <summary>
		/// cbErl WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbErl_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbErl_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbErl_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalPopulate("");
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 04.12.17 Ä1392
			this.cmbName.PopulateList(this.hSqlRR, "SELECT aaname FROM aa WHERE aaarztnr= :frmRR.dfArztNr ORDER BY aaname");

			Int.SqlImmedSel("SELECT aname1 || \', \' || aort, atelpraxis, atelhandy, atelprivat INTO :frmRR.dfPraxis, :frmRR.strTelPraxis, :frmRR.strTelHandy, :frmRR.strTelPrivat FROM a WHERE aarztnr = :frmRR.dfArztNr");
			if (this.strTelPraxis != "") 
			{
				this.cmbRufNr.AddListItem("Prx: " + this.strTelPraxis);
			}
			if (this.strTelHandy) 
			{
				this.cmbRufNr.AddListItem("Mob: " + this.strTelHandy);
			}
			if (this.strTelPrivat) 
			{
				this.cmbRufNr.AddListItem("Prv: " + this.strTelPrivat);
			}
			this.cmbName.SetFocus();
			#endregion
		}
		
		/// <summary>
		/// cmbName WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbName_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.cmbName_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbName_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 04.12.17 Ä1392
			Int.SqlImmedSel("SELECT aarufnr INTO :frmRR.cmbRufNr FROM aa WHERE aaarztnr= :frmRR.dfArztNr AND aaname = :frmRR.cmbName");
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.mlBemerk.Text == "") 
			{
				Sal.MessageBox("Es muß ein Rückrufgrund angegeben werden.", "Daten fehlen", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else if (this.cmbName.Text == "") 
			{
				Sal.MessageBox("Es muß der Name der anzurufenden Person angegeben werden.", "Daten fehlen", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else if (this.cmbRufNr.Text == "") 
			{
				Sal.MessageBox("Es muß eine Rückrufnummer angegeben werden.", "Daten fehlen", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else if (this.cmbProdukt.Text == "") 
			{
				Sal.MessageBox("Bitte geben Sie das Produkt an.", "Daten fehlen", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				// 21.02.19
				this.strProdukt = ((SalString)this.cmbProdukt.Text).Left(3).Trim();
				// 29.07.16 Ä1403 Level von 1 auf 2 gesetzt
				Int.SqlImmed(@"INSERT INTO rr (rrdatum, rruser, rrrufnr, rrarztnr, rrpraxis, rrname, rrbemerk, rrlevel, rrprodukt)
VALUES ( SYSDATETIME, :strBNZei, :frmRR.cmbRufNr, :frmRR.dfArztNr, :frmRR.dfPraxis, :frmRR.cmbName, :frmRR.mlBemerk, 2, :frmRR.strProdukt )");
				this.dfPraxis.Text = "";
				this.dfArztNr.Number = Sys.NUMBER_Null;
				this.cmbRufNr.Text = "";
				this.cmbRufNr.ClearList();
				this.cmbName.Text = "";
				this.mlBemerk.Text = "";
				this.cmbProdukt.Text = "";
				this.PalPopulate("");
			}
			#endregion
		}
		
		/// <summary>
		/// pbOk2 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk2_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk2_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk2_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.cmbGeraet.Text == "") 
			{
				Sal.MessageBox("Es muß die Art des zu bestellenden Artikels angegeben werden.", "Daten fehlen", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				Int.SqlImmed(@"INSERT INTO rr (rrdatum, rruser, rrpraxis, rrname, rrbemerk, rrlizenz, rrprodukt)
VALUES ( SYSDATETIME, :strBNZei, :frmRR.cmbGeraet, :frmRR.dfZuGeraet, :frmRR.mlBemerk2, 'BE', 'Int' )");
				this.cmbGeraet.Text = "";
				this.dfZuGeraet.Text = "";
				this.mlBemerk2.Text = "";
				this.PalPopulate("");
			}
			#endregion
		}
		
		/// <summary>
		/// pbOk3 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk3_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk3_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk3_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.cmbMA.Text == "") 
			{
				Sal.MessageBox("Es muß der Code der Kollegin / des Kollegen angegeben werden.", "Daten fehlen", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				Int.SqlImmed(@"INSERT INTO rr (rrdatum, rruser, rrpraxis, rrname, rrbemerk, rrlizenz, rrprodukt)
VALUES ( SYSDATETIME, :strBNZei, 'moveta intern', :frmRR.cmbMA, :frmRR.mlBemerk, 'IN' , 'Int')");
				this.cmbMA.Text = Var.strBNUser;
				this.PalPopulate("");
			}
			#endregion
		}
		
		/// <summary>
		/// obP3 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obP3_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.obP3_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obP3_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalPopulate("");
			#endregion
		}
		
		/// <summary>
		/// obP4 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obP4_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.obP4_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obP4_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalPopulate("");
			#endregion
		}
		
		/// <summary>
		/// obMM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obMM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.obMM_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obMM_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalPopulate("");
			#endregion
		}
		
		/// <summary>
		/// obApp WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obApp_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.obApp_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obApp_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalPopulate("");
			#endregion
		}
		
		/// <summary>
		/// obInt WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obInt_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.obInt_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obInt_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalPopulate("");
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
			this.DestroyWindow();
			#endregion
		}
		#endregion
		
		#region gridRR
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class gridRRTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmRR _frmRR = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public gridRRTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmRR frmRR
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmRR == null) 
					{
						_frmRR = (frmRR)this.FindForm();
					}
					return _frmRR;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static gridRRTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((gridRRTableWindow)SalWindow.FromHandle(handle, typeof(gridRRTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colWichtig WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colWichtig_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colWichtig_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colWichtig_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				// 07.02.14 Ä1023
				if (this.colWichtig.Number == 1) 
				{
					Int.SqlImmed("UPDATE rr SET rrwichtig = 1 WHERE rrdatum = :frmRR.gridRR.colDatum");
				}
				else
				{
					Int.SqlImmed("UPDATE rr SET rrwichtig = 0 WHERE rrdatum = :frmRR.gridRR.colDatum");
				}
				this.frmRR.PalPopulate("");
				#endregion
			}
			
			/// <summary>
			/// colProdukt WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colProdukt_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colProdukt_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colProdukt_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				Int.SqlImmed("UPDATE rr SET rrprodukt = :frmRR.gridRR.colProdukt WHERE rrdatum = :frmRR.gridRR.colDatum");
				this.frmRR.PalPopulate("");
				#endregion
			}
			
			/// <summary>
			/// colRufNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRufNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colRufNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRufNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				Int.SqlImmed("UPDATE rr SET rrrufnr = :frmRR.gridRR.colRufNr WHERE rrdatum = :frmRR.gridRR.colDatum");
				this.frmRR.PalPopulate("");
				#endregion
			}
			
			/// <summary>
			/// colName WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colName_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colName_OnSAM_Validate(sender, e);
						break;
					
					case Sys.SAM_SetFocus:
						this.colName_OnSAM_SetFocus(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colName_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				// 04.12.17 Ä1392
				this.colRufNr.Text = "";
				Int.SqlImmedSel("SELECT aarufnr INTO :frmRR.gridRR.colRufNr FROM aa WHERE aaarztnr= :frmRR.gridRR.colArztNr AND aaname = :frmRR.gridRR.colName");
				Int.SqlImmed("UPDATE rr SET rrrufnr = :frmRR.gridRR.colRufNr WHERE rrarztnr= :frmRR.gridRR.colArztNr AND rrdatum = :frmRR.gridRR.colDatum");
				this.frmRR.PalPopulate("");
				#endregion
			}
			
			/// <summary>
			/// SAM_SetFocus event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colName_OnSAM_SetFocus(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				// 04.12.17 Ä1392
				this.colName.PopulateList(this.frmRR.hSqlRR, "SELECT aaname FROM aa WHERE aaarztnr= :frmRR.gridRR.colArztNr ORDER BY aaname");

				#endregion
			}
			
			/// <summary>
			/// colBemerk WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBemerk_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colBemerk_OnSAM_Validate(sender, e);
						break;
					
					case Sys.SAM_KillFocus:
						this.colBemerk_OnSAM_KillFocus(sender, e);
						break;
					
					case Sys.SAM_SetFocus:
						this.colBemerk_OnSAM_SetFocus(sender, e);
						break;
					
					case Sys.SAM_AnyEdit:
						this.colBemerk_OnSAM_AnyEdit(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBemerk_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				Int.SqlImmed("UPDATE rr SET rrbemerk = :frmRR.gridRR.colBemerk WHERE rrdatum = :frmRR.gridRR.colDatum");
				this.frmRR.PalPopulate("");
				#endregion
			}
			
			/// <summary>
			/// SAM_KillFocus event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBemerk_OnSAM_KillFocus(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				Sal.MapEnterToTab(true);
				#endregion
			}
			
			/// <summary>
			/// SAM_SetFocus event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBemerk_OnSAM_SetFocus(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				Sal.MapEnterToTab(false);
				#endregion
			}
			
			/// <summary>
			/// SAM_AnyEdit event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBemerk_OnSAM_AnyEdit(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmRR.PalTimerTippAction();
				#endregion
			}
			
			/// <summary>
			/// colErl WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colErl_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colErl_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colErl_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (this.colErl.Number == 1) 
				{
					Int.SqlImmed("UPDATE rr SET rrerldat = SYSDATETIME, rrerluser = :strBNZei WHERE rrdatum = :frmRR.gridRR.colDatum");
				}
				else
				{
					Int.SqlImmed("UPDATE rr SET rrerldat = NULL, rrerluser = NULL WHERE rrdatum = :frmRR.gridRR.colDatum");
				}
				this.frmRR.PalPopulate("");
				#endregion
			}
			
			/// <summary>
			/// colDatum WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colDatum_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmRR.PalPopulate("rrdatum");
				#endregion
			}
			
			/// <summary>
			/// colErlDat WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colErlDat_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colErlDat_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colErlDat_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmRR.PalPopulate("rrerldat");
				#endregion
			}
			
			/// <summary>
			/// colScan WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colScan_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colScan_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colScan_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				Int.SqlImmed("UPDATE rr SET rrbemerk = :frmRR.gridRR.colBemerk WHERE rrdatum = :frmRR.gridRR.colDatum");
				this.frmRR.PalPopulate("");
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalPopulateLocals
			{
				public SalString strPSort = "";
			}
		}
		#endregion
	}
}
