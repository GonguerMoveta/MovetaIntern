// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// 23.01.01
	/// </summary>
	/// <param name="nArztNr"></param>
	/// <param name="nSumme"></param>
	/// <param name="dtBearbDatum">18.06.19 Ä1854</param>
	/// <param name="strBearbeiter"></param>
	public partial class dlgVorschuss : SalDialogBox
	{
		#region Window Parameters
		public SalNumber nArztNr;
		public SalNumber nSumme;
		public SalDateTime dtBearbDatum;
		public SalString strBearbeiter;
		#endregion
		
		#region Window Variables
		public SalSqlHandle hSqlV = SalSqlHandle.Null;
		public SalString strTAN1 = "";
		public SalString strTAN2 = "";
		public SalString strTABank = "";
		public SalString strTABLZ = "";
		public SalString strTAKonto = "";
		public SalString strTVBank = "";
		public SalString strTVBLZ = "";
		public SalString strTVKonto = "";
		public SalNumber nIndex = 0;
		public SalNumber nKonto = 0;
		public SalString strVBuchText = "";
		public SalString strZBuchText = "";
		public SalString strGBuchText = "";
		public SalString strBuchText = "";
		public SalString strBuchText2 = "";
		public SalDateTime dtBuchDat = SalDateTime.Null;
		public SalNumber nVorschProz = 0;
		public SalNumber nSaldo = 0;
		public SalNumber nTKSaldo = 0;
		public SalNumber nZinsen = 0;
		public SalBoolean bJa = false;
		public SalNumber nMindGuth = 0;
		public SalNumber nGuthaben = 0;
		public SalNumber nMwSt = 0;
		public SalNumber nBrutto = 0;
		public SalString strTALand = "";
		public SalString strTVIBAN = "";
		public SalString strTABIC = "";
		public SalString strTVBIC = "";
		public SalString strDevice = "";
		public SalString strDriver = "";
		public SalString strPort = "";
		public SalString strOldDevice = "";
		public SalString strOldDriver = "";
		public SalString strOldPort = "";
		public SalNumber nKeinGuthabenbeiAbrg = 0;
		public SalNumber nKeinDarlehenbeiAbrg = 0;
		public SalNumber nVorschMind = 0;
		public SalNumber nVorschuss1Wochen = 0;
		public SalDateTime dtVorschussMS5 = SalDateTime.Null;
		public SalNumber nVorsch1 = 0;
		public SalNumber nVorsch2 = 0;
		public SalNumber nVorsch3 = 0;
		public SalNumber nVorsch6 = 0;
		public SalNumber nVorsch7 = 0;
		public SalNumber nVorsch9 = 0;
		public SalNumber nVorsch9CR = 0;
		public SalSqlHandle hSqlVo = SalSqlHandle.Null;
		public SalNumber nFetchVo = 0;
		public SalNumber nCountVo = 0;
		public SalNumber nRechNr = 0;
		public SalNumber nVorschDM = 0;
		public SalString strVorschRueckGrund = "";
		public SalString strVorschussMS = "";
		public SalNumber nVorschussAusbuch = 0;
		public SalNumber nVorschRechzualt = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public dlgVorschuss(SalNumber nArztNr, SalNumber nSumme, SalDateTime dtBearbDatum, SalString strBearbeiter)
		{
			// Assign global reference.
			App.dlgVorschuss = this;
			// Window Parameters initialization.
			this.nArztNr = nArztNr;
			this.nSumme = nSumme;
			this.dtBearbDatum = dtBearbDatum;
			this.strBearbeiter = strBearbeiter;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the modal dialog.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static SalNumber ModalDialog(Control owner, SalNumber nArztNr, SalNumber nSumme, SalDateTime dtBearbDatum, SalString strBearbeiter)
		{
			dlgVorschuss dlg = new dlgVorschuss(nArztNr, nSumme, dtBearbDatum, strBearbeiter);
			SalNumber ret = dlg.ShowDialog(owner);
			return ret;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static dlgVorschuss FromHandle(SalWindowHandle handle)
		{
			return ((dlgVorschuss)SalWindow.FromHandle(handle, typeof(dlgVorschuss)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// dlgVorschuss WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgVorschuss_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.dlgVorschuss_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.dlgVorschuss_OnSAM_Close(sender, e);
					break;
				
				// On SAM_ReportStart
				
				// Call SalReportDlgOptions(SalNumberToWindowHandle(wParam),
				
				// '','Druck läuft','','')
				
				// On SAM_ReportFetchInit
				
				// Set bJa=TRUE
				
				// Return TRUE
				
				// On SAM_ReportFetchNext
				
				// If bJa=TRUE
				
				// Set bJa=FALSE
				
				// Return TRUE
				
				// Else
				
				// Return FALSE
				
				// On SAM_ReportFinish
				
				// If IDYES = SalMessageBox( 'Ist der Druck korrekt beendet worden  ?','Achtung',
				
				// MB_YesNo|MB_IconQuestion )
				
				// Call SalMessageBeep(0)
				
				// Call SalWaitCursor(FALSE)
				
				// Call SalPostMsg(hWndForm, SAM_Close,0,0)
				
				// Else
				
				// Call PalReport(dlgVorschuss, 'VORSCHBEL.QRP',
				
				// ':dlgVorschuss.strTABank, :dlgVorschuss.strTABLZ, :dlgVorschuss.strTAKonto,
				
				// :dlgVorschuss.strTVBank, :dlgVorschuss.strTVBLZ, :dlgVorschuss.strTVKonto,
				
				// :dlgVorschuss.strTAN1, :dlgVorschuss.strVBuchText, :dlgVorschuss.strZBuchText, :dlgVorschuss.strGBuchText,
				
				// :dlgVorschuss.dfDM, :dlgVorschuss.nZinsen, :dlgVorschuss.dfGuthaben, :dlgVorschuss.nKonto',
				
				// 'TABank, TABLZ, TAKonto, TVBank, TVBLZ, TVKonto, TAN1,
				
				// VBuchText, ZBuchText, GBuchText, DM, Zinsen, Guthaben, Konto', nErr)
				
				// Call SalStatusSetText( hWndForm, '' )
				
				// Call SalWaitCursor(FALSE)
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgVorschuss_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sal.PrtGetDefault(ref this.strDevice, ref this.strDriver, ref this.strPort)) 
			{
				this.dfDrucker.Text = this.strDevice + " an " + this.strPort;
				this.strOldDevice = this.strDevice;
				this.strOldDriver = this.strDriver;
				this.strOldPort = this.strPort;
			}
			Int.SqlConnection(ref this.hSqlV);
			this.dfArztNr.Number = this.nArztNr;
			this.dfA1.Text = this.strTAN1;
			this.dfA2.Text = this.strTAN2;
			Int.SqlImmedSel(@"SELECT
sum( tkhaben-tksoll) from tk into :nTKSaldo where tkarztnr = :dlgVorschuss.nArztNr");
			// 04.12.17 Ä1461 + aabrkeinguthaben
			Int.SqlImmedSel(@"SELECT aname1, aname2, abank, ablz, akonto, avorschproz, (avorhaben-avorsoll), amindguth, aiban, aland, abic, aabrkeinguthaben, aabrkeindarlehenbeiabrg, avorschuss1wochen,
avorschuss1, avorschuss2, avorschuss3, avorschuss6, avorschuss7, avorschuss9, avorschuss9cr
INTO :dlgVorschuss.strTAN1, :dlgVorschuss.strTAN2, :dlgVorschuss.strTABank, :dlgVorschuss.strTABLZ, :dlgVorschuss.strTAKonto,
:dlgVorschuss.nVorschProz, :dlgVorschuss.nSaldo, :dlgVorschuss.nMindGuth, :dlgVorschuss.dfIBAN , :dlgVorschuss.strTALand, :dlgVorschuss.dfBIC,
:dlgVorschuss.nKeinGuthabenbeiAbrg, :dlgVorschuss.nKeinDarlehenbeiAbrg, :dlgVorschuss.nVorschuss1Wochen,
:dlgVorschuss.nVorsch1, :dlgVorschuss.nVorsch2, :dlgVorschuss.nVorsch3, :dlgVorschuss.nVorsch6, :dlgVorschuss.nVorsch7, :dlgVorschuss.nVorsch9, :dlgVorschuss.nVorsch9CR
FROM a
WHERE aarztnr = :dlgVorschuss.nArztNr");
			// 13.08.14
			this.dfIBAN.Text = Int.PalDelBlank(this.dfIBAN.Text);

			this.dfTABLZ.Text = Int.PalCheckBLZKonto(this.dfTABLZ.Text).Left(8);
			if (this.dfBIC.Text == "") 
			{
				this.dfBIC.Text = Int.PalGetBIC(this.dfTABLZ.Text);
			}
			if (this.nMindGuth == SalNumber.Null || this.nMindGuth < 0) 
			{
				this.nMindGuth = 0;
			}
			this.nTKSaldo = this.nTKSaldo + this.nSaldo;
			if (this.nTKSaldo < 0) 
			{
				this.nGuthaben = 0;
			}
			else
			{
				this.nGuthaben = this.nTKSaldo - this.nMindGuth;
			}
			this.dfGuthaben.Number = this.nGuthaben;
			if (this.dfGuthaben.Number < 0) 
			{
				this.dfGuthaben.Number = 0;
			}
			this.dfTABank.Text = this.strTABank.Left(27);
			this.dfTAKonto.Text = Int.PalCheckBLZKonto(this.strTAKonto).Left(10);
			this.dfTABLZ.Text = Int.PalCheckBLZKonto(this.strTABLZ).Left(8);
			if (this.strTALand == "") 
			{
				this.strTALand = "DE";
			}
			// 10.02.11 OTÄ541
			if (this.dfIBAN.Text == "" || !(Int.PalIBANPruef(this.dfIBAN.Text))) 
			{
				this.dfIBAN.Text = Int.PalIBAN(this.strTALand, this.dfTABLZ.Text, this.dfTAKonto.Text);
			}
			if (this.dfIBAN.Text == "" || this.dfBIC.Text == "") 
			{
				this.pbOk.DisableWindow();
			}

			this.lbBank.PopulateList(this.hSqlV, "SELECT * FROM BS WHERE bskonto IS NOT NULL ORDER BY BSNR");
			// 13.11.06 F81
			// Call SalListSetSelect(lbBank,1)
			this.lbBank.SetListSelectedIndex(0);

			if (this.nVorschProz == 0 || this.nVorschProz == SalNumber.Null) 
			{
				// Call SalPostMsg(hWndForm, SAM_Close,0,0)
				this.dfProz.Number = 0;
				this.dfDM.Number = 0;
				if (Var.strBNAbtlg == "GF") 
				{
					Sal.MessageBox(@"Dieses Mitglied hat keinen Vorschuß
in den Arztstammdaten eingetragen.

Sie können jetzt aber dennoch einen
Vorschuß eingeben.

Wenn kein Vorschuß gewünscht ist, Fenster
bitte schließen.", "Achtung !", Sys.MB_Ok);
				}
			}
			else
			{
				this.dfProz.Number = this.nVorschProz;
				this.dfDM.Number = this.nSumme * this.nVorschProz / 100;
				if (this.dfProz.Number <= 30 && this.dfDM.Number > 2500)  // DATEV #54 von 2556.46 auf 2500 geändert
				{
					this.dfDM.Number = 2500;
				}

			}
			// 24.06.19 Ä1854
			this.dfVorschussOri.Number = this.dfDM.Number;
			this.dfVorschussMinderung.Number = 0;
			if (this.nVorsch1 == SalNumber.Null) 
			{
				this.nVorsch1 = 0;
			}
			if (this.nVorsch2 == SalNumber.Null) 
			{
				this.nVorsch2 = 0;
			}
			if (this.nVorsch3 == SalNumber.Null) 
			{
				this.nVorsch3 = 0;
			}
			if (this.nVorsch6 == SalNumber.Null) 
			{
				this.nVorsch6 = 1;
			}
			if (this.nVorsch7 == SalNumber.Null) 
			{
				this.nVorsch7 = 0;
			}
			if (this.nVorsch9 == SalNumber.Null) 
			{
				this.nVorsch9 = 0;
			}
			// Fall 1
			if (this.nVorsch1 == 1) 
			{
				this.dtVorschussMS5 = SalDateTime.Current - (this.nVorschuss1Wochen * 7);
				Int.SqlImmedSel(@"SELECT SUM( rkvorschussdm) INTO :dlgVorschuss.nVorschMind FROM rk
WHERE rkarztnr = :dlgVorschuss.nArztNr AND rkvorschussdm>0 AND rkvorschussrueckdat IS NULL AND rkmahnstufe=5 AND rkms5dat < :dlgVorschuss.dtVorschussMS5");
				this.dfVorschussMinderung.Number = this.dfVorschussMinderung.Number + this.nVorschMind;
				Int.PalLog("Arzt " + Int.PalStrNum0(this.nArztNr, 4, 0) + " € " + (this.nVorschMind * this.dfProz.Number / 100).ToString(2) + ": kein Vorschuss wegen Fall 1");
			}
			// Fall 2
			if (this.nVorsch2) 
			{
				Int.SqlImmedSel(@"SELECT SUM( rkvorschussdm) INTO :dlgVorschuss.nVorschMind FROM rk
WHERE rkarztnr = :dlgVorschuss.nArztNr AND rkvorschussdm>0 AND rkvorschussrueckdat IS NULL AND rkmahnstufe IN (7,8)");
				this.dfVorschussMinderung.Number = this.dfVorschussMinderung.Number + this.nVorschMind;
				Int.PalLog("Arzt " + Int.PalStrNum0(this.nArztNr, 4, 0) + " € " + (this.nVorschMind * this.dfProz.Number / 100).ToString(2) + ": kein Vorschuss wegen Fall 2");
			}
			// Fall 3
			if (this.nVorsch3) 
			{
				// Call SqlImmedSel( 'SELECT rkrechdat, SUM( DISTINCT rkdmleis + rkdmarzn )
				// INTO :dlgVorschuss.dtBuchDat,  :dlgVorschuss.nVorschRechzualt
				// FROM rk, rp
				// WHERE rkarztnr = :dlgVorschuss.nArztNr AND rkrechnr BETWEEN :frmUebOP.nRechNrMin AND :frmUebOP.nRechNrMax
				// AND rkrechnr=rprechnr AND rkarztnr=rparztnr AND rkhalternr=rphalternr
				// GROUP BY 1 HAVING MAX(rpdatum) < SYSDATE - 4 MONTHS' )
				Int.SqlImmedSel(@"SELECT SUM( rkdmleis + rkdmarzn )
INTO :dlgVorschuss.nVorschRechzualt
FROM rk, h
WHERE rkarztnr=harztnr AND rkhalternr=hhalternr AND hsperrdatum IS NULL
AND rkarztnr = :dlgVorschuss.nArztNr AND rkrechnr BETWEEN :frmUebOP.nRechNrMin AND :frmUebOP.nRechNrMax
AND rkrechnr IN (SELECT rprechnr FROM rp WHERE rparztnr = :dlgVorschuss.nArztNr AND rprechnr BETWEEN :frmUebOP.nRechNrMin AND :frmUebOP.nRechNrMax
AND rpdatum < SYSDATE - 4 MONTHS)");
				this.dfVorschussMinderungzualt.Number = (this.nVorschRechzualt * this.dfProz.Number).Round() / 100;
				Int.PalLog("Arzt " + Int.PalStrNum0(this.nArztNr, 4, 0) + " € " + (this.nVorschMind * this.dfProz.Number / 100).ToString(2) + ": kein Vorschuss wegen Fall 3");
			}
			// Fall 6
			if (this.nVorsch6) 
			{
				// 05.11.19 F4540 zadm -> zadmhf, raus: AND zadm>5
				Int.SqlImmedSel(@"SELECT SUM( zadmhf) INTO :dlgVorschuss.nVorschMind FROM rk, za
WHERE rkarztnr = :dlgVorschuss.nArztNr AND rkvorschussdm>0 AND rkvorschussrueckdat IS NULL
AND rkarztnr=zaarztnr AND rkrechnr=zarechnr AND zakz >3");
				this.dfVorschussMinderung.Number = this.dfVorschussMinderung.Number + this.nVorschMind * this.dfProz.Number / 100;
				Int.PalLog("Arzt " + Int.PalStrNum0(this.nArztNr, 4, 0) + " € " + (this.nVorschMind * this.dfProz.Number / 100).ToString(2) + ": kein Vorschuss wegen Fall 6 (Za)");
				// Call SqlImmedSel( 'SELECT SUM( rkdmleis+rkdmarzn) INTO :dlgVorschuss.nVorschMind FROM rk
				// WHERE rkarztnr = :dlgVorschuss.nArztNr AND rkrechdat>=2019-7-10 AND rkvorschussrueckdat IS NULL
				// AND rkbuchtext = \'Gutschrift\'' )
				// Set nVorschMind = nVorschMind * -1
				// Set dfVorschussMinderung = dfVorschussMinderung + nVorschMind * dfProz / 100
				// Call PalLog( 'Arzt ' || PalStrNum0( nArztNr, 4, 0 ) || ' € ' || SalNumberToStrX( nVorschMind * dfProz / 100, 2 ) || ': kein Vorschuss wegen Fall 6 (Gutschr)' )
			}
			this.dfVorschussMax.Number = this.dfVorschussOri.Number - this.dfVorschussMinderung.Number - this.dfVorschussMinderungzualt.Number;
			// 08.07.19
			if (this.dfVorschussMax.Number < 0) 
			{
				this.dfVorschussMax.Number = 0;
			}

			this.dfDM.Number = this.dfVorschussMax.Number;

			Sal.WaitCursor(true);
			if (this.tblUeberw.Populate(this.hSqlV, @"SELECT tkbeldat, tkbuchtext, tksoll FROM tk
WHERE tkarztnr = :dlgVorschuss.nArztNr AND tksoll<>0 AND tkbuchtext LIKE '+%'", Sys.TBL_FillAll)) 
			{
				// Call VisTblAutoSizeColumn(tblUeberw, hWndNULL)
				MT.MTbl.AutoSizeColumn(this.tblUeberw, Sys.hWndNULL, MT.MTbl.MTASC_ALLROWS);
			}
			// 15.01.04
			if (this.dfZinsProz.IsEmpty()) 
			{
				if (this.dfArztNr.Number == 167 || this.dfArztNr.Number == 168 || this.dfArztNr.Number == 567) 
				{
					this.dfZinsProz.Number = 0.45m;
				}
				else
				{
					// Set dfZinsProz = 0.53
					// 22.12.04
					this.dfZinsProz.Number = 0.50m;
				}
			}
			// 23.08.06 Ä15 DATEV H.Burlitta
			if (this.dfDM.Number < 0) 
			{
				this.dfDM.Number = 0;
			}
			if (this.dfGuthaben.Number < 0) 
			{
				this.dfGuthaben.Number = 0;
			}
			// 04.12.17 Ä1461
			this.bkgdKeinGuthabenAbrg.Text = "";
			if (this.nKeinGuthabenbeiAbrg) 
			{
				if (this.dfGuthaben.Number > 0) 
				{
					this.bkgdKeinGuthabenAbrg.Text = "Guthaben von € " + this.dfGuthaben.Number.ToString(2) + " wird auf Wunsch von M nicht überwiesen.";
				}
				this.dfGuthaben.Number = 0;
			}
			// 04.12.17 Ä1461
			this.bkgdKeinDarlehenAbrg.Text = "";
			if (this.nKeinDarlehenbeiAbrg) 
			{
				if (this.dfDM.Number > 0) 
				{
					this.bkgdKeinDarlehenAbrg.Text = "Darlehen von € " + this.dfDM.Number.ToString(2) + " wird auf Wunsch von M nicht überwiesen.";
				}
				this.dfDM.Number = 0;
			}
			// 25.10.10 OTÄ493
			if (Var.strBNAbtlg != "GF") 
			{
				this.dfProz.DisableWindowAndLabel();
			}

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgVorschuss_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlV.Disconnect();
			Sal.PrtSetDefault(this.strOldDevice, this.strOldDriver, this.strOldPort);
			#endregion
		}
		
		/// <summary>
		/// dfProz WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfProz_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfProz_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfProz_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 28.06.19 Ä1854
			// Set dfDM = nSumme * dfProz / 100
			this.dfVorschussMinderungzualt.Number = (this.nVorschRechzualt * this.dfProz.Number).Round() / 100;
			this.dfVorschussMax.Number = this.dfVorschussOri.Number - this.dfVorschussMinderung.Number - this.dfVorschussMinderungzualt.Number;
			// 08.07.19
			if (this.dfVorschussMax.Number < 0) 
			{
				this.dfVorschussMax.Number = 0;
			}

			this.dfDM.Number = this.dfVorschussMax.Number;
			#endregion
		}
		
		/// <summary>
		/// dfDM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfDM_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDM_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 28.06.19 Ä1854
			// If dfDM > (nSumme * nVorschProz / 100)
			// Call SalMessageBox('Das ist zuviel !','Fehler',MB_Ok)
			// Set dfDM = nSumme * nVorschProz / 100
			if (this.dfDM.Number > this.dfVorschussMax.Number) 
			{
				Sal.MessageBox("Das ist zuviel !", "Fehler", Sys.MB_Ok);
				this.dfDM.Number = this.dfVorschussMax.Number;
			}
			// 23.08.06 Ä15 DATEV H.Burlitta
			if (this.dfDM.Number < 0) 
			{
				this.dfDM.Number = 0;
			}

			// Set dfProz = dfDM / nSumme * 100
			#endregion
		}
		
		/// <summary>
		/// dfGuthaben WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfGuthaben_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfGuthaben_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfGuthaben_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfGuthaben.Number > this.nGuthaben) 
			{
				Sal.MessageBox("Das Guthaben beträgt nur € " + this.nGuthaben.ToString(2) + ".", "Achtung", (Sys.MB_Ok | Sys.MB_IconAsterisk));
				this.dfGuthaben.Number = this.nGuthaben;
			}
			// 23.08.06 Ä15 DATEV H.Burlitta
			if (this.dfGuthaben.Number < 0) 
			{
				this.dfGuthaben.Number = 0;
			}

			#endregion
		}
		
		/// <summary>
		/// lbBank WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbBank_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.lbBank_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbBank_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			#endregion
		}
		
		/// <summary>
		/// dfTAKonto WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfTAKonto_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfTAKonto_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfTAKonto_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfTAKonto.Text != "" && this.dfTABLZ.Text != "")  // 14.01.14
			{
				this.dfIBAN.Text = Int.PalIBAN(this.strTALand, this.dfTABLZ.Text, this.dfTAKonto.Text);
			}
			#endregion
		}
		
		/// <summary>
		/// dfTABLZ WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfTABLZ_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfTABLZ_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfTABLZ_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfTAKonto.Text != "" && this.dfTABLZ.Text != "")  // 14.01.14
			{
				this.dfIBAN.Text = Int.PalIBAN(this.strTALand, this.dfTABLZ.Text, this.dfTAKonto.Text);
			}
			this.dfTABLZ.Text = Int.PalCheckBLZKonto(this.dfTABLZ.Text).Left(8);
			if (this.dfBIC.Text == "") 
			{
				this.dfBIC.Text = Int.PalGetBIC(this.dfTABLZ.Text);
			}
			#endregion
		}
		
		/// <summary>
		/// dfZinsProz WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfZinsProz_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfZinsProz_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfZinsProz_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfDM.Number = this.nSumme * this.dfProz.Number / 100;
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfIBAN.Text == "" || this.dfBIC.Text == "")  // 14.01.14
			{
				Sal.MessageBox("IBAN oder BIC fehlen. Bitte ergänzen.", "Daten fehlen", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				// 13.08.14
				this.dfIBAN.Text = Int.PalDelBlank(this.dfIBAN.Text);

				// 28.04.03
				if (this.dfZinsProz.IsEmpty()) 
				{
					// Set dfZinsProz = 0.53
					// 22.12.04
					this.dfZinsProz.Number = 0.50m;
				}
				this.nIndex = this.lbBank.GetListSelectedIndex();
				this.strTVKonto = this.lbBank.GetListItemText(this.nIndex);
				this.strTVKonto = this.strTVKonto.Left(5);
				this.nKonto = Int.PalValNum(this.strTVKonto);
				if (this.nKonto == 0) 
				{
					this.nKonto = 12000;
				}
				// 13.02.17 Ä1496
				if (this.nKonto == 12000) 
				{
					this.nKonto = 15400;
				}

				Int.SqlImmedSel(@"SELECT bsname, bsblz, bskonto
INTO  :dlgVorschuss.strTVBank, :dlgVorschuss.strTVBLZ, :dlgVorschuss.strTVKonto
FROM bs
WHERE bsnr = :dlgVorschuss.nKonto");

				this.strTVBank = this.strTVBank.Left(27);
				this.strTVBLZ = Int.PalCheckBLZKonto(this.strTVBLZ).Left(8);
				this.strTVBIC = Int.PalGetBIC(this.strTVBLZ);
				this.strTVKonto = Int.PalCheckBLZKonto(this.strTVKonto).Left(10);
				this.strTAN1 = this.strTAN1.Left(30);
				this.strTVIBAN = Int.PalIBAN("DE", this.strTVBLZ, this.strTVKonto);
				// Vorschuss
				if (this.dfDM.Number > 0) 
				{
					// 25.01.08 A184
					// Set strBuchText = SalStrLeftX( PalStrNum(nArztNr,4,0) || '/Vorsch.f.Abrg. vom ' ,27)
					this.strBuchText = (Int.PalStrNum(this.nArztNr, 4, 0) + "/Darlehen f.Abrg.").Left(27);

					this.strBuchText2 = (Int.SalDateToStrX(SalDateTime.Current) + " %" + Int.PalStrNum(this.dfProz.Number, 2, 1)).Left(27);
					// 16.07.19 Ä1860 + ueexportnr
					App.frmMain.nUeberwNr = Int.PalGetProfileInt("BH", "Ueberweisungsnummer", 1);

					// Call SqlImmedX(' INSERT INTO ue
					// (uetvnr, uetvbank, uetvblz, uetvkonto,
					// uetabank, uetablz, uetakonto,
					// uetaname, ueverw1, ueverw2,  uedm, uemanuell, uebearbeiter)
					// VALUES (:frmUeberw.nTVNr, :frmUeberw.strAbsBank, :frmUeberw.dfAbsBLZ, :frmUeberw.dfAbsKonto,
					// :frmUeberw.dfEmpfBank, :frmUeberw.dfEmpfBLZ, :frmUeberw.dfEmpfKonto,
					// :frmUeberw.dfEmpf, :frmUeberw.dfVerw1, :frmUeberw.dfVerw2, :frmUeberw.dfDM, 1, :frmUeberw.strBearbeiter)')
					Int.SqlImmedX(@" INSERT INTO ue
(uetvnr, uetvbank, uetvblz, uetvkonto,
uetabank, uetablz, uetakonto,
uetaname, ueverw1, ueverw2,  uedm, uemanuell, uetviban, uetaiban, uetvbic, uetabic,
ueexportnr)
VALUES (:dlgVorschuss.nKonto, :dlgVorschuss.strTVBank, :dlgVorschuss.strTVBLZ, :dlgVorschuss.strTVKonto,
:dlgVorschuss.dfTABank, :dlgVorschuss.dfTABLZ, :dlgVorschuss.dfTAKonto,
:dlgVorschuss.strTAN1, :dlgVorschuss.strBuchText, :dlgVorschuss.strBuchText2, :dlgVorschuss.dfDM, 0,
:dlgVorschuss.strTVIBAN, :dlgVorschuss.dfIBAN, :dlgVorschuss.strTVBIC, :dlgVorschuss.dfBIC,
:frmMain.nUeberwNr)");
					// 25.01.08 A184
					// Set strBuchText = '+' || PalStrNum(nArztNr,4,0) || '/ÜBERW.%' || PalStrNum(dfProz,2,1)
					this.strBuchText = ("+" + Int.PalStrNum(this.nArztNr, 4, 0) + "/Darlehen %" + Int.PalStrNum(this.dfProz.Number, 2, 1)).Left(20);

					this.strVBuchText = this.strBuchText;
					this.dtBuchDat = SalDateTime.Current;
					// 06.03.23 Ä2086
					Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
					if (this.dtBuchDat < Var.dtINIMinBuchDat) 
					{
						this.dtBuchDat = Var.dtINIMinBuchDat;
					}

					// 05.05.11 F913 tksa 0 -> 2
					Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
VALUES (:dlgVorschuss.nArztNr, 2, 0, :dlgVorschuss.strBuchText, 0, 0, 0,
:dlgVorschuss.dtBuchDat, :dlgVorschuss.nKonto, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, :dlgVorschuss.dfDM,
:dlgVorschuss.dfDM, 0)");
					Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp,
fiexportnr)
VALUES (0, 16000,:dlgVorschuss.nKonto, :dlgVorschuss.nArztNr, :dlgVorschuss.dtBuchDat, :dlgVorschuss.strBuchText,
:dlgVorschuss.dfDM, 6,
:frmMain.nUeberwNr)");
					Int.SqlImmedX(@" INSERT INTO bub
(bubbearbeiter, bubbearbdatum, bubarztnr, bubsoll, bubhaben, bubdm, bubbuchtext)
VALUES (:frmMain.strUser, SYSDATETIME, :dlgVorschuss.nArztNr, 16000,:dlgVorschuss.nKonto, :dlgVorschuss.dfDM, :dlgVorschuss.strBuchText)");
					// Zinsen
					if (this.dfProz.Number > 30) 
					{
						// 11.06.21 Ä1962
						// Set strBuchText = PalStrNum(nArztNr,4,0) || '/ZINSABSCHL.'
						this.strBuchText = Int.PalStrNum(this.nArztNr, 4, 0) + "/Zinsabschlag";

						this.strZBuchText = this.strBuchText;
						this.nZinsen = (this.dfDM.Number * this.dfZinsProz.Number).Round() / 100;
						this.dtBuchDat = SalDateTime.Current;
						// 03.04.23 Ä2086
						Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
						if (this.dtBuchDat < Var.dtINIMinBuchDat) 
						{
							this.dtBuchDat = Var.dtINIMinBuchDat;
						}

						// 28.07.14 F2098
						if (Int.PalCheckAuslTA(this.nArztNr) == "EU") 
						{
							this.nMwSt = 0;
							// 08.01.15 F2226
							App.frmMain.nErloeskonto = 81340;
							// 16.01.15 F2235 von unten
							this.nBrutto = this.nZinsen + this.nMwSt;
							// 14.01.14 F2235 nBrutto -> nZinsen
							// 29.01.15 F2235 nZinsen -> nBrutto
							Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkkontocode)
VALUES (:dlgVorschuss.nArztNr, 0, 0, :dlgVorschuss.strBuchText, 0, 0, 0,
:dlgVorschuss.dtBuchDat, :frmMain.nErloeskonto, 0, 0, :dlgVorschuss.nMwSt, 0, 0, 0, 0, 0, 0, 0, 0, :dlgVorschuss.nBrutto,
:dlgVorschuss.nBrutto, 0, 'Abschlag-')");
						}
						else
						{
							// 27.12.12 Ä855
							this.nMwSt = (this.nZinsen * Var.nMwStVoll).Round() / 100;
							// 08.01.15 F2226
							App.frmMain.nErloeskonto = 81300;
							// 30.06.20 Ä1892
							if (this.dtBuchDat >= new SalDateTime(2020, 7, 1) && this.dtBuchDat <= new SalDateTime(2020, 12, 31)) 
							{
								App.frmMain.nErloeskonto = Int.PalKontenMwStSenkung(App.frmMain.nErloeskonto);
							}
							// 16.01.15 F2235 von unten
							this.nBrutto = this.nZinsen + this.nMwSt;
							// 14.01.14 F2235 nBrutto -> nZinsen
							// 29.01.15 F2235 nZinsen -> nBrutto
							Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkkontocode)
VALUES (:dlgVorschuss.nArztNr, 0, 0, :dlgVorschuss.strBuchText, 0, 0, 0,
:dlgVorschuss.dtBuchDat, :frmMain.nErloeskonto, 0, 0, :dlgVorschuss.nMwSt, 0, 0, 0, 0, 0, :nMwStVoll, 0, 0, :dlgVorschuss.nBrutto,
:dlgVorschuss.nBrutto, 0, 'Abschlag-')");
						}
						// 16.01.15 F2235 nach oben
						// Set nBrutto = nZinsen + nMwSt
						// Call SqlImmedX('INSERT INTO TK
						// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
						// tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
						// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
						// VALUES (:dlgVorschuss.nArztNr, 0, 0, :dlgVorschuss.strBuchText, 0, 0, 0,
						// :dlgVorschuss.dtBuchDat, 81300, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, :dlgVorschuss.nZinsen,
						// :dlgVorschuss.nZinsen, 0)')
						// 08.01.15 F2226 auskommentiert bis ENDE
						// 14.04.14 Ä1046
						// If PalCheckAuslTA( nArztNr ) = 'EU'
						// Set frmMain.nErloeskonto = 81340
						// Else
						// Set frmMain.nErloeskonto = 81300
						// 11.02.13 F1543 0 -> :nMwStVoll
						// Call SqlImmedX('INSERT INTO TK
						// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
						// tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
						// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
						// VALUES (:dlgVorschuss.nArztNr, 0, 0, :dlgVorschuss.strBuchText, 0, 0, 0,
						// :dlgVorschuss.dtBuchDat, :frmMain.nErloeskonto, 0, 0, :dlgVorschuss.nMwSt, 0, 0, 0, 0, 0, :nMwStVoll, 0, 0, :dlgVorschuss.nBrutto,
						// :dlgVorschuss.nBrutto, 0)')
						// ENDE

						Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16000, :frmMain.nErloeskonto, :dlgVorschuss.nArztNr, :dlgVorschuss.dtBuchDat, :dlgVorschuss.strBuchText,
:dlgVorschuss.nZinsen, 6)");
						Int.SqlImmedX(@" INSERT INTO bub
(bubbearbeiter, bubbearbdatum, bubarztnr, bubsoll, bubhaben, bubdm, bubbuchtext)
VALUES (:frmMain.strUser, SYSDATETIME, :dlgVorschuss.nArztNr, 16000, :frmMain.nErloeskonto, :dlgVorschuss.nZinsen, :dlgVorschuss.strBuchText)");
						// 27.12.12 Ä855
						this.strBuchText = "MwSt Haben";
						// 30.06.20 Ä1892
						Var.nMwStSenkung = 17760;
						if (this.dtBuchDat >= new SalDateTime(2020, 7, 1) && this.dtBuchDat <= new SalDateTime(2020, 12, 31)) 
						{
							Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
						}

						Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16000, :nMwStSenkung, :dlgVorschuss.nArztNr, :dlgVorschuss.dtBuchDat, :dlgVorschuss.strBuchText,
:dlgVorschuss.nMwSt, 6)");
						Int.SqlImmedX(@" INSERT INTO bub
(bubbearbeiter, bubbearbdatum, bubarztnr, bubsoll, bubhaben, bubdm, bubbuchtext)
VALUES (:frmMain.strUser, SYSDATETIME, :dlgVorschuss.nArztNr, 16000, :nMwStSenkung, :dlgVorschuss.nMwSt, :dlgVorschuss.strBuchText)");

					}
				}
				// 18.06.19 Ä1854
				Int.SqlImmed(@"UPDATE uf SET ufvorschgeb = :dlgVorschuss.dfProz, ufvorschsum = :dlgVorschuss.dfDM
WHERE ufarztnr=:dlgVorschuss.nArztNr
AND ufbearbeiter=:dlgVorschuss.strBearbeiter
AND ufbearbdatum=:dlgVorschuss.dtBearbDatum");
				// 24.06.19 Ä1854
				// Vorschuss-Rück
				this.nVorschMind = this.dfVorschussMinderung.Number;
				if (this.nVorschMind > this.dfVorschussOri.Number) 
				{
					this.nVorschMind = this.dfVorschussOri.Number;
				}
				Int.SqlConnection(ref this.hSqlVo);
				// Fall 1
				if (this.nVorsch1 == 1) 
				{
					this.dtVorschussMS5 = SalDateTime.Current - (this.nVorschuss1Wochen * 7);

					Int.SqlHandleExec(this.hSqlVo, @"SELECT rkrechnr, rkvorschussdm INTO :dlgVorschuss.nRechNr, :dlgVorschuss.nVorschDM FROM rk
WHERE rkarztnr = :dlgVorschuss.nArztNr AND rkvorschussdm>0 AND rkvorschussrueckdat IS NULL AND rkmahnstufe=5 AND rkms5dat < :dlgVorschuss.dtVorschussMS5 ", "Fehler Buchung Vorschuss-Minderung Fall 1", ref this.nCountVo);
					this.nFetchVo = this.hSqlVo.FetchNext();
					while (this.nFetchVo != Sys.FETCH_EOF && this.nVorschMind > 0) 
					{
						this.strVorschRueckGrund = "Mahnstufe 5 länger als " + this.nVorschuss1Wochen.ToString(0) + " Wochen";
						if (this.nVorschDM > this.nVorschMind) 
						{
							this.nVorschDM = this.nVorschMind;
						}
						if (this.nVorschDM > 0) 
						{
							Sql.Immediate(@"UPDATE rk
SET rkvorschussrueckdm = :dlgVorschuss.nVorschDM, rkvorschussrueckdat = SYSDATETIME, rkvorschussrueckgrund = :dlgVorschuss.strVorschRueckGrund
 WHERE rkarztnr = :dlgVorschuss.nArztNr AND rkrechnr = :dlgVorschuss.nRechNr");
							this.nVorschMind = this.nVorschMind - this.nVorschDM;
						}
						this.nFetchVo = this.hSqlVo.FetchNext();
					}
				}
				// Fall 2
				if (this.nVorsch2) 
				{
					Int.SqlHandleExec(this.hSqlVo, @"SELECT rkrechnr, rkvorschussdm, rkmahnstufe INTO :dlgVorschuss.nRechNr, :dlgVorschuss.nVorschDM, :dlgVorschuss.strVorschussMS FROM rk
WHERE rkarztnr = :dlgVorschuss.nArztNr AND rkvorschussdm>0 AND rkvorschussrueckdat IS NULL AND rkmahnstufe IN (7,8) ", "Fehler Buchung Vorschuss-Minderung Fall 2", ref this.nCountVo);
					this.nFetchVo = this.hSqlVo.FetchNext();
					while (this.nFetchVo != Sys.FETCH_EOF && this.nVorschMind > 0) 
					{
						this.strVorschRueckGrund = "Mahnstufe " + this.strVorschussMS;
						if (this.nVorschDM > this.nVorschMind) 
						{
							this.nVorschDM = this.nVorschMind;
						}
						if (this.nVorschDM > 0) 
						{
							Sql.Immediate(@"UPDATE rk
SET rkvorschussrueckdm = :dlgVorschuss.nVorschDM, rkvorschussrueckdat = SYSDATETIME, rkvorschussrueckgrund = :dlgVorschuss.strVorschRueckGrund
 WHERE rkarztnr = :dlgVorschuss.nArztNr AND rkrechnr = :dlgVorschuss.nRechNr");
							this.nVorschMind = this.nVorschMind - this.nVorschDM;
						}
						this.nFetchVo = this.hSqlVo.FetchNext();
					}
				}
				// Fall 6
				if (this.nVorsch6) 
				{
					// Call SqlImmedSel( 'SELECT SUM( rkvorschussdm) INTO :dlgVorschuss.nVorschMind FROM rk, za
					// WHERE rkarztnr = :dlgVorschuss.nArztNr AND rkvorschussdm>0 AND rkvorschussrueckdat IS NULL
					// AND rkarztnr=zaarztnr AND rkrechnr=zarechnr AND zakz >3' )
					// 05.11.19 F4540 zadm -> zadmhf, raus: AND zadm>5
					Int.SqlHandleExec(this.hSqlVo, @"SELECT rkrechnr, rkvorschussdm, SUM( zadmhf ) INTO :dlgVorschuss.nRechNr, :dlgVorschuss.nVorschDM, :dlgVorschuss.nVorschussAusbuch FROM rk, za
WHERE rkarztnr = :dlgVorschuss.nArztNr AND rkvorschussdm>0 AND rkvorschussrueckdat IS NULL
AND rkarztnr=zaarztnr AND rkhalternr=zahalternr AND rkrechnr=zarechnr AND zakz >3 AND rkrechnr<999990 GROUP BY 1,2 ", "Fehler Buchung Vorschuss-Minderung Fall 6a", ref this.nCountVo);
					this.nFetchVo = this.hSqlVo.FetchNext();
					while (this.nFetchVo != Sys.FETCH_EOF && this.nVorschMind > 0) 
					{
						this.strVorschRueckGrund = "Ausbuchungen";
						// 16.07.19
						this.nVorschussAusbuch = (this.nVorschussAusbuch * this.dfProz.Number).Round() / 100;
						if (this.nVorschDM > this.nVorschussAusbuch) 
						{
							this.nVorschDM = this.nVorschussAusbuch;
						}

						if (this.nVorschDM > this.nVorschMind) 
						{
							this.nVorschDM = this.nVorschMind;
						}
						if (this.nVorschDM > 0) 
						{
							Sql.Immediate(@"UPDATE rk
SET rkvorschussrueckdm = :dlgVorschuss.nVorschussAusbuch, rkvorschussrueckdat = SYSDATETIME, rkvorschussrueckgrund = :dlgVorschuss.strVorschRueckGrund
 WHERE rkarztnr = :dlgVorschuss.nArztNr AND rkrechnr = :dlgVorschuss.nRechNr");
							this.nVorschMind = this.nVorschMind - this.nVorschDM;
						}
						this.nFetchVo = this.hSqlVo.FetchNext();
					}
					// If nVorschMind > 0
					// Call SqlImmedSel( 'SELECT SUM( rkdmleis+rkdmarzn) INTO :dlgVorschuss.nVorschMind FROM rk
					// WHERE rkarztnr = :dlgVorschuss.nArztNr AND rkrechdat>=2019-7-10 AND rkvorschussrueckdat IS NULL
					// AND rkbuchtext = \'Gutschrift\'' )
					// Call SqlHandleExec(hSqlVo,
					// 'SELECT rkrechnr, (rkdmleis+rkdmarzn) INTO :dlgVorschuss.nRechNr, :dlgVorschuss.nVorschDM
					// FROM rk
					// WHERE rkarztnr = :dlgVorschuss.nArztNr AND rkrechdat>=2019-7-10 AND rkvorschussrueckdat IS NULL
					// AND rkbuchtext = \'Gutschrift\'',
					// 'Fehler Buchung Vorschuss-Minderung Fall 6b', nCountVo)
					// Call SqlFetchNext(hSqlVo, nFetchVo)
					// While nFetchVo != FETCH_EOF and nVorschMind > 0
					// Set strVorschRueckGrund = 'Stornierungen'
					// Set nVorschDM = SalNumberRound( nVorschDM * -1 * dfProz) / 100
					// If nVorschDM > nVorschMind
					// Set nVorschDM = nVorschMind
					// If nVorschDM > 0
					// Call SqlImmediate( 'UPDATE rk
					// SET rkvorschussrueckdm = :dlgVorschuss.nVorschDM, rkvorschussrueckdat = SYSDATETIME, rkvorschussrueckgrund = :dlgVorschuss.strVorschRueckGrund
					//  WHERE rkarztnr = :dlgVorschuss.nArztNr AND rkrechnr = :dlgVorschuss.nRechNr' )
					// Set nVorschMind = nVorschMind - nVorschDM
					// Call SqlFetchNext(hSqlVo, nFetchVo)
				}

				this.hSqlVo.Disconnect();
				// Guthaben
				if (this.dfGuthaben.Number > 0) 
				{
					this.strBuchText = Int.PalStrNum(this.nArztNr, 4, 0) + "/Guthaben am " + Int.SalDateToStrX(SalDateTime.Current);
					Int.SqlImmedX(@" INSERT INTO ue
(uetvnr, uetvbank, uetvblz, uetvkonto,
uetabank, uetablz, uetakonto,
uetaname, ueverw1,  uedm, uemanuell, uetviban, uetaiban, uetvbic, uetabic,
ueexportnr)
VALUES (:dlgVorschuss.nKonto, :dlgVorschuss.strTVBank, :dlgVorschuss.strTVBLZ, :dlgVorschuss.strTVKonto,
:dlgVorschuss.dfTABank, :dlgVorschuss.dfTABLZ, :dlgVorschuss.dfTAKonto,
:dlgVorschuss.strTAN1, :dlgVorschuss.strBuchText, :dlgVorschuss.dfGuthaben, 0,
:dlgVorschuss.strTVIBAN, :dlgVorschuss.dfIBAN, :dlgVorschuss.strTVBIC, :dlgVorschuss.dfBIC,
:frmMain.nUeberwNr)");
					this.strBuchText = "+" + Int.PalStrNum(this.nArztNr, 4, 0) + "/GUTH.";
					this.strGBuchText = this.strBuchText;
					this.dtBuchDat = SalDateTime.Current;
					// 06.03.23 Ä2086
					Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
					if (this.dtBuchDat < Var.dtINIMinBuchDat) 
					{
						this.dtBuchDat = Var.dtINIMinBuchDat;
					}

					// 05.05.11 F913 tksa 0 -> 2
					Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
VALUES (:dlgVorschuss.nArztNr, 2, 0, :dlgVorschuss.strBuchText, 0, 0, 0,
:dlgVorschuss.dtBuchDat, :dlgVorschuss.nKonto, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, :dlgVorschuss.dfGuthaben,
:dlgVorschuss.dfGuthaben, 0)");
					Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp,
fiexportnr)
VALUES (0, 16000,:dlgVorschuss.nKonto, :dlgVorschuss.nArztNr, :dlgVorschuss.dtBuchDat, :dlgVorschuss.strBuchText,
:dlgVorschuss.dfGuthaben, 6,
:frmMain.nUeberwNr)");
					Int.SqlImmedX(@" INSERT INTO bub
(bubbearbeiter, bubbearbdatum, bubarztnr, bubsoll, bubhaben, bubdm, bubbuchtext)
VALUES (:frmMain.strUser, SYSDATETIME, :dlgVorschuss.nArztNr, 16000, :dlgVorschuss.nKonto, :dlgVorschuss.dfGuthaben, :dlgVorschuss.strBuchText)");
				}
				Sal.MessageBeep(0);
				this.PostMessage(Sys.SAM_Close, 0, 0);
				// Beleg
				// Call PalReport(dlgVorschuss, 'VORSCHBEL.QRP',
				// ':dlgVorschuss.strTABank, :dlgVorschuss.strTABLZ, :dlgVorschuss.strTAKonto,
				// :dlgVorschuss.strTVBank, :dlgVorschuss.strTVBLZ, :dlgVorschuss.strTVKonto,
				// :dlgVorschuss.strTAN1, :dlgVorschuss.strVBuchText, :dlgVorschuss.strZBuchText, :dlgVorschuss.strGBuchText,
				// :dlgVorschuss.dfDM, :dlgVorschuss.nZinsen, :dlgVorschuss.dfGuthaben, :dlgVorschuss.nKonto',
				// 'TABank, TABLZ, TAKonto, TVBank, TVBLZ, TVKonto, TAN1,
				// VBuchText, ZBuchText, GBuchText, DM, Zinsen, Guthaben, Konto', nErr)
			}
			#endregion
		}
		
		/// <summary>
		/// tblUeberw WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblUeberw_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblUeberw_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblUeberw_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblUeberw, 0);
			#endregion
		}
		
		/// <summary>
		/// pbSetup WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSetup_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSetup_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSetup_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sal.PrtSetup(ref this.strDevice, ref this.strDriver, ref this.strPort, true)) 
			{
				this.dfDrucker.Text = this.strDevice + " an " + this.strPort;
			}
			#endregion
		}
		
		/// <summary>
		/// dfIBAN WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfIBAN_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfIBAN_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfIBAN_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 13.08.14
			this.dfIBAN.Text = Int.PalDelBlank(this.dfIBAN.Text);

			if (this.dfIBAN.Text != "" && this.dfBIC.Text != "") 
			{
				this.pbOk.EnableWindow();
			}
			#endregion
		}
		
		/// <summary>
		/// dfBIC WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBIC_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfBIC_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBIC_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfIBAN.Text != "" && this.dfBIC.Text != "") 
			{
				this.pbOk.EnableWindow();
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblUeberw
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblUeberwTableWindow : SalTableWindow
		{
			// reference to the container form.
			private dlgVorschuss _dlgVorschuss = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblUeberwTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private dlgVorschuss dlgVorschuss
			{
				[DebuggerStepThrough]
				get
				{
					if (_dlgVorschuss == null) 
					{
						_dlgVorschuss = (dlgVorschuss)this.FindForm();
					}
					return _dlgVorschuss;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblUeberwTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblUeberwTableWindow)SalWindow.FromHandle(handle, typeof(tblUeberwTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
