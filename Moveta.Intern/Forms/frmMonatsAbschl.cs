// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmMonatsAbschl : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlMA = SalSqlHandle.Null;
		public SalNumber nFetchMA = 0;
		public SalNumber nArztNr = 0;
		public SalNumber nSoll = 0;
		public SalNumber nHaben = 0;
		public SalNumber nRech = 0;
		public SalNumber nVSt = 0;
		public SalNumber nMwSt = 0;
		public SalNumber nVSoll = 0;
		public SalNumber nVHaben = 0;
		public SalNumber nVRech = 0;
		public SalNumber nVVSt = 0;
		public SalNumber nVMwSt = 0;
		public SalNumber nAussenst = 0;
		public SalBoolean bOk = false;
		public SalNumber nMahn = 0;
		public SalNumber nVMahn = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmMonatsAbschl()
		{
			// Assign global reference.
			App.frmMonatsAbschl = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmMonatsAbschl CreateWindow(Control owner)
		{
			frmMonatsAbschl frm = new frmMonatsAbschl();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmMonatsAbschl FromHandle(SalWindowHandle handle)
		{
			return ((frmMonatsAbschl)SalWindow.FromHandle(handle, typeof(frmMonatsAbschl)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmMonatsAbschl WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMonatsAbschl_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmMonatsAbschl_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmMonatsAbschl_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMonatsAbschl_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.cbJahr.Checked = false;
			Int.SqlConnection(ref this.hSqlMA);
			// 06.03.23 Ä2086
			if (SalDateTime.Current.Day() >= 25) 
			{
				this.dfMinBuchDat.DateTime = (SalDateTime.Current + 15).MonthBegin();
			}
			else if (SalDateTime.Current.Day() <= 4) 
			{
				this.dfMinBuchDat.DateTime = SalDateTime.Current.MonthBegin();
			}
			else
			{
				this.dfMinBuchDat.DateTime = SalDateTime.Current;
			}
			Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
			if (this.dfMinBuchDat.DateTime < Var.dtINIMinBuchDat) 
			{
				this.dfMinBuchDat.DateTime = Var.dtINIMinBuchDat;
			}
			Int.PalSetProfileString("BH", "MinBuchDat", Int.SalDateToStrX(this.dfMinBuchDat.DateTime));
			Var.dtINIMinBuchDat = this.dfMinBuchDat.DateTime;
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMonatsAbschl_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlMA.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// dfMinBuchDat WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMinBuchDat_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfMinBuchDat_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMinBuchDat_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 06.03.23 Ä2086
			if ((this.dfMinBuchDat.DateTime - SalDateTime.Current) > 15) 
			{
				Sal.MessageBox("Sie können nicht mehr als 15 Tagen unbebuchbar lassen!.", "Das geht nicht", (Sys.MB_Ok | Sys.MB_IconStop));
				this.dfMinBuchDat.DateTime = SalDateTime.Current;
			}
			Int.PalSetProfileString("BH", "MinBuchDat", Int.SalDateToStrX(this.dfMinBuchDat.DateTime));
			Var.dtINIMinBuchDat = this.dfMinBuchDat.DateTime;
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (((SalString)this.dfPasswort.Text).ToUpper() != "ACHTUNG") 
			{
				Sal.MessageBox("Passwort ungültig", "Achtung", Sys.MB_Ok);
			}
			else
			{
				this.SetStatusBarText("Kopiere TK");
				this.bOk = false;
				if (this.cbJahr.Checked) 
				{
					if (Sys.IDYES == Sal.MessageBox("Laut H.Meinecke muß direkt vor dem Jahresabschluß eine Saldenliste gedruckt werden.  Ist dies bereits gemacht worden?", "Achtung!", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
					{
						this.bOk = true;
					}
				}
				else
				{
					this.bOk = true;
				}
				if (this.bOk) 
				{
					// Call SqlImmed('INSERT INTO tka SELECT * FROM TK')
					// 24.11.98
					Sal.WaitCursor(true);
					// 02.12.14 Ä1104 + reverseversion
					// 02.01.15 F2224 das zweite tkareverseversion in tkreverseversion geändert
					// 22.08.22 Ä2015 + tkdmmahn
					// 08.01.24 + tkkontocode
					Int.SqlImmed(@"INSERT INTO TKA (tkaarztnr, tkasa, tkajournalnr, tkabuchtext, tkahalternr, tkarechnr, tkabelnr,
tkabeldat, tkakontonr, tkarechdm, tkakzhaben, tkatavst, tkadmzaleis, tkadmzaarzn, tkadmzamahn,
tkadmzamwst, tkaprozmwst, tkakzzahl, tkadmporto, tkadmabr, tkadmzazins, tksoll, tkhaben, tkareverse, tkadruckdatum, tkareverseversion, tkadmmahn, tkakontocode,tkafall)
SELECT tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr,
tkbeldat, tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tkdmzazins, tksoll, tkhaben, tkreverse, SYSDATE, tkreverseversion, tkdmmahn, tkkontocode,tkfall
FROM tk ");
					Sal.WaitCursor(false);
					this.SetStatusBarText("TK kopiert !");


					// 22.08.22 Ä2015 + tkmahn
					Int.SqlHandleExec(this.hSqlMA, @"SELECT aarztnr, sum(tkdmabr), sum(tksoll), sum(tkhaben), sum(tktavst), sum(tkdmzamwst), sum(tkdmmahn)
INTO :frmMonatsAbschl.nArztNr, :frmMonatsAbschl.nRech, :frmMonatsAbschl.nSoll, :frmMonatsAbschl.nHaben,
:frmMonatsAbschl.nVSt, :frmMonatsAbschl.nMwSt, :frmMonatsAbschl.nMahn
FROM tk, a WHERE aarztnr=tkarztnr (+)  GROUP BY 1", "Fehler", ref Var.nCount);
					this.nFetchMA = this.hSqlMA.FetchNext();
					while (this.nFetchMA != Sys.FETCH_EOF) 
					{
						// 22.08.22 Ä2015 + tkmahn
						Int.SqlImmedSel(@"SELECT avorrech, avorsoll, avorhaben, avorvst, avormwst, avormahn
INTO :frmMonatsAbschl.nVRech, :frmMonatsAbschl.nVSoll, :frmMonatsAbschl.nVHaben,
:frmMonatsAbschl.nVVSt, :frmMonatsAbschl.nVMwSt, :frmMonatsAbschl.nVMahn
FROM a
WHERE aarztnr = :frmMonatsAbschl.nArztNr");
						Int.SqlImmedSel(@"SELECT
sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
INTO :frmMonatsAbschl.nAussenst FROM rk WHERE rkarztnr = :frmMonatsAbschl.nArztNr
AND rkkzzahl <2 AND rkdeaktiv IS NULL");
						// 24.11.98
						// 22.08.22 Ä2015 + tkmahn
						Int.SqlImmed(@"INSERT INTO vo (vodatum, voarztnr, vovorrech, vovorsoll, vovorhaben, vovorvst, vovormwst, voop, vovormahn)
VALUES(SYSDATE, :frmMonatsAbschl.nArztNr, :frmMonatsAbschl.nVRech,
:frmMonatsAbschl.nVSoll, :frmMonatsAbschl.nVHaben,
:frmMonatsAbschl.nVVSt, :frmMonatsAbschl.nVMwSt, :frmMonatsAbschl.nAussenst, :frmMonatsAbschl.nVMahn)");
						// 22.07.99  	AND vodatum = SYSDATE
						// Call SqlImmed('UPDATE vo SET voop = :frmMonatsAbschl.nAussenst WHERE voarztnr = :frmMonatsAbschl.nArztNr
						// AND vodatum = SYSDATE')

						// 22.08.22 Ä2015 + tkmahn
						if (this.cbJahr.Checked == true) 
						{
							this.nVRech = 0;
							this.nVMahn = 0;
							this.nVSoll = this.nVSoll + this.nSoll - this.nVHaben - this.nHaben;
							this.nVHaben = 0;
							this.nVVSt = 0;
							this.nVMwSt = 0;
						}
						else
						{
							this.nVMahn = this.nVMahn + this.nMahn;
							this.nVRech = this.nVRech + this.nRech;
							this.nVSoll = this.nVSoll + this.nSoll;
							this.nVHaben = this.nVHaben + this.nHaben;
							this.nVVSt = this.nVVSt + this.nVSt;
							this.nVMwSt = this.nVMwSt + this.nMwSt;
						}
						Int.SqlImmed(@"UPDATE a SET avorrech=:frmMonatsAbschl.nVRech,
avorsoll=:frmMonatsAbschl.nVSoll, avorhaben=:frmMonatsAbschl.nVHaben,
avorvst=:frmMonatsAbschl.nVVSt, avormwst=:frmMonatsAbschl.nVMwSt,
avormahn = :frmMonatsAbschl.nVMahn
WHERE aarztnr = :frmMonatsAbschl.nArztNr");
						Int.SqlImmed(@"DELETE FROM tk
WHERE tkarztnr = :frmMonatsAbschl.nArztNr");
						this.SetStatusBarText("Bearbeite Arzt-Nr." + Int.PalStrNum(this.nArztNr, 4, 0));
						this.nFetchMA = this.hSqlMA.FetchNext();
					}
					this.hSqlMA.Commit();
					this.DestroyWindow();
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
			this.DestroyWindow();
			#endregion
		}
		#endregion
	}
}
