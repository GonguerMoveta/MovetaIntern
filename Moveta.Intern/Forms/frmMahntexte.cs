// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// Mahntexte
	/// </summary>
	public partial class frmMahntexte : SalFormWindow
	{
		#region Window Variables
		public SalBoolean bExists = false;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmMahntexte()
		{
			// Assign global reference.
			App.frmMahntexte = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmMahntexte CreateWindow(Control owner)
		{
			frmMahntexte frm = new frmMahntexte();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmMahntexte FromHandle(SalWindowHandle handle)
		{
			return ((frmMahntexte)SalWindow.FromHandle(handle, typeof(frmMahntexte)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmMahntexte WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMahntexte_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmMahntexte_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMahntexte_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfArztNr.Number = 0;
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.mlMTO.Clear();
			this.mlMTU.Clear();
			// Call SalClearField(dfO1)
			// Call SalClearField(dfO2)
			// Call SalClearField(dfO3)
			// Call SalClearField(dfO4)
			// Call SalClearField(dfO5)
			// Call SalClearField(dfO6)
			// Call SalClearField(dfU1)
			// Call SalClearField(dfU2)
			// Call SalClearField(dfU3)
			// Call SalClearField(dfU4)
			// Call SalClearField(dfU5)
			// Call SalClearField(dfU6)
			if (this.dfArztNr.Number == 0) 
			{
				this.dfArztName.Text = "allgemeine GÃ¼ltigkeit";
			}
			else
			{
				Int.SqlImmedSel(@"SELECT aname1 INTO :frmMahntexte.dfArztName
FROM a WHERE aarztnr = :frmMahntexte.dfArztNr");
			}
			#endregion
		}
		
		/// <summary>
		/// dfMS WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMS_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_KillFocus:
					this.dfMS_OnSAM_KillFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_KillFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMS_OnSAM_KillFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlIstDa(@" FROM mt WHERE mtarztnr = :frmMahntexte.dfArztNr
AND mtstufe = :frmMahntexte.dfMS", ref this.bExists);
			if (this.bExists) 
			{
				Int.SqlImmedSel(@"SELECT
mto, mtu
INTO :frmMahntexte.mlMTO, :frmMahntexte.mlMTU
FROM MT
WHERE mtarztnr = :frmMahntexte.dfArztNr AND mtstufe = :frmMahntexte.dfMS");
			}
			else
			{
				this.mlMTO.Clear();
				this.mlMTU.Clear();
				// Call SalClearField(dfO1)
				// Call SalClearField(dfO2)
				// Call SalClearField(dfO3)
				// Call SalClearField(dfO4)
				// Call SalClearField(dfO5)
				// Call SalClearField(dfO6)
				// Call SalClearField(dfU1)
				// Call SalClearField(dfU2)
				// Call SalClearField(dfU3)
				// Call SalClearField(dfU4)
				// Call SalClearField(dfU5)
				// Call SalClearField(dfU6)
			}
			#endregion
		}
		
		/// <summary>
		/// dfArztName WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztName_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztName_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztName_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			tblArzt.CreateWindow(this, "frmMahntexte", this.dfArztName.Text);
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlIstDa(@" FROM mt WHERE mtarztnr = :frmMahntexte.dfArztNr
AND mtstufe = :frmMahntexte.dfMS", ref this.bExists);
			if (this.bExists) 
			{
				Int.SqlImmedX(@"UPDATE MT SET mto = :frmMahntexte.mlMTO,  mtu = :frmMahntexte.mlMTU
WHERE mtarztnr = :frmMahntexte.dfArztNr AND mtstufe = :frmMahntexte.dfMS");
			}
			else
			{
				// 17.02.12 F1220
				// Call SqlImmedX('INSERT INTO MT
				// VALUES (:frmMahntexte.dfArztNr, :frmMahntexte.dfMS,
				// :frmMahntexte.dfO1,
				// :frmMahntexte.dfO2,
				// :frmMahntexte.dfO3,
				// :frmMahntexte.dfO4,
				// :frmMahntexte.dfO5,
				// :frmMahntexte.dfO6,
				// :frmMahntexte.dfU1,
				// :frmMahntexte.dfU2,
				// :frmMahntexte.dfU3,
				// :frmMahntexte.dfU4,
				// :frmMahntexte.dfU5,
				// :frmMahntexte.dfU6)')
				Int.SqlImmedX(@"INSERT INTO MT (mtarztnr, mtstufe, mto, mtu)
VALUES (:frmMahntexte.dfArztNr, :frmMahntexte.dfMS, :frmMahntexte.mlMTO, :frmMahntexte.mlMTU)");
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.DestroyWindow();
			#endregion
		}
		#endregion
	}
}
