// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class dlgAbschVor : SalDialogBox
	{
		#region Window Variables
		public SalSqlHandle hSqlMahn = SalSqlHandle.Null;
		public SalNumber nFetch = 0;
		public SalString strSelect = "";
		public SalNumber nOriSaldo = 0;
		public SalNumber nSaldo = 0;
		public SalNumber nVorSaldo = 0;
		public SalNumber nArztNr = 0;
		public SalNumber nAbschGrenze = 0;
		public SalNumber nMindGuth = 0;
		public SalNumber nWoMo = 0;
		public SalNumber nWoDi = 0;
		public SalNumber nWoMi = 0;
		public SalNumber nWoDo = 0;
		public SalNumber nWoFr = 0;
		public SalNumber nTag = 0;
		public SalNumber nTagEin = 0;
		public SalNumber nTagePlus = 0;
		public SalNumber nWochentag = 0;
		public SalDateTime dtWoTagLtzt = SalDateTime.Null;
		public SalBoolean bTagOk = false;
		public SalDateTime dtWo = SalDateTime.Null;
		public SalDateTime dtTag = SalDateTime.Null;
		public SalDateTime dtTag2 = SalDateTime.Null;
		public SalNumber nJahr = 0;
		public SalNumber nMonat = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public dlgAbschVor()
		{
			// Assign global reference.
			App.dlgAbschVor = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the modal dialog.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static SalNumber ModalDialog(Control owner)
		{
			dlgAbschVor dlg = new dlgAbschVor();
			SalNumber ret = dlg.ShowDialog(owner);
			return ret;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static dlgAbschVor FromHandle(SalWindowHandle handle)
		{
			return ((dlgAbschVor)SalWindow.FromHandle(handle, typeof(dlgAbschVor)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// dlgAbschVor WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgAbschVor_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.dlgAbschVor_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgAbschVor_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.rbNein.Checked = true;
			this.dfSumme.Number = 50;
			#endregion
		}
		
		/// <summary>
		/// pkOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pkOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pkOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pkOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			if (this.dfvon.IsEmpty()) 
			{
				this.dfvon.Number = 1;
			}
			if (this.dfbis.IsEmpty()) 
			{
				this.dfbis.Number = 9999;
			}
			this.SetStatusBarText("Alter Vorschlag wird gelöscht");
			Int.SqlImmedX("DELETE FROM av");
			this.SetStatusBarText("Neuer Vorschlag wird erstellt -  Bitte warten ...");
			Sal.WaitCursor(true);
			// 18.01.12 Ä696 +  AND (akeingeld=0 OR akeingeld IS NULL)
			// 18.12.17 Ä1461 +
			// 	AND (aabrkeinguthaben = 0 or aabrkeinguthaben is null)
			if (this.cbSonder.Checked == true) 
			{
				this.strSelect = @"SELECT
	tkarztnr, avg(aabschgr), avg(avorhaben-avorsoll),
	sum( tkhaben-tksoll), avg(amindguth)
	INTO :dlgAbschVor.nArztNr, :dlgAbschVor.nAbschGrenze, :dlgAbschVor.nSaldo, :dlgAbschVor.nVorSaldo, :dlgAbschVor.nMindGuth
	FROM tk,a
	WHERE tkarztnr >= :dlgAbschVor.dfvon AND tkarztnr <=:dlgAbschVor.dfbis
	AND tkarztnr=aarztnr AND aabschgr > 0 AND (akeingeld=0 OR akeingeld IS NULL)
	AND (aabrkeinguthaben = 0 or aabrkeinguthaben is null)
	GROUP BY tkarztnr";
			}
			else if (this.cbTag.Checked == true)  // 11.12.17 Ä1663
			{
				// 14.05.21 Ä1958 + atmein
				this.strSelect = @"SELECT
	tkarztnr, avg(aabschgr), avg(avorhaben-avorsoll),
	sum( tkhaben-tksoll), avg(amindguth),
	avg(awomo), avg(awodi), avg(awomi), avg(awodo), avg(awofr), avg(atm), avg(atmein), max(awotagltzt), SYSDATE - 6 DAYS
	INTO :dlgAbschVor.nArztNr, :dlgAbschVor.nAbschGrenze, :dlgAbschVor.nSaldo, :dlgAbschVor.nVorSaldo, :dlgAbschVor.nMindGuth,
	:dlgAbschVor.nWoMo, :dlgAbschVor.nWoDi, :dlgAbschVor.nWoMi, :dlgAbschVor.nWoDo, :dlgAbschVor.nWoFr, :dlgAbschVor.nTag, :dlgAbschVor.nTagEin, :dlgAbschVor.dtWoTagLtzt,
	:dlgAbschVor.dtWo
	FROM tk,a
	WHERE tkarztnr >= :dlgAbschVor.dfvon AND tkarztnr <=:dlgAbschVor.dfbis
	AND tkarztnr=aarztnr
	AND (akeingeld=0 OR akeingeld IS NULL)
	AND (AWOMO=1 or awodi=1 or awomi=1 or awodo=1 or awofr=1 or atm > 0 or atmein>0)
	AND (aabrkeinguthaben = 0 or aabrkeinguthaben is null)
	GROUP BY tkarztnr";
			}
			else
			{
				this.strSelect = @"SELECT aarztnr,0, avg(avorhaben-avorsoll), sum( tkhaben-tksoll), avg(amindguth)
	INTO :dlgAbschVor.nArztNr, :dlgAbschVor.nAbschGrenze, :dlgAbschVor.nSaldo, :dlgAbschVor.nVorSaldo, :dlgAbschVor.nMindGuth
	FROM tk,a
	WHERE  aarztnr >= :dlgAbschVor.dfvon AND aarztnr <= :dlgAbschVor.dfbis AND (akeingeld=0 OR akeingeld IS NULL)
	AND (aabrkeinguthaben = 0 or aabrkeinguthaben is null)
	AND tkarztnr(+)=aarztnr
	GROUP BY 1";
			}
			Int.SqlConnection(ref this.hSqlMahn);
			Int.SqlHandleExec(this.hSqlMahn, this.strSelect, "Abschlag ermitteln", ref Var.nErr);
			this.nFetch = this.hSqlMahn.FetchNext();
			while (this.nFetch != Sys.FETCH_EOF) 
			{
				this.nSaldo = this.nSaldo + this.nVorSaldo;
				if (this.nMindGuth == SalNumber.Null || this.nMindGuth < 0) 
				{
					this.nMindGuth = 0;
				}
				// 04.06.21 Trillian Hennecke		25.06.21 +  and cbTag = FALSE
				if (this.cbSonder.Checked == false && this.cbTag.Checked == false) 
				{
					this.nAbschGrenze = 0;
				}

				if (this.nSaldo > this.nAbschGrenze) 
				{
					this.nOriSaldo = this.nSaldo;
					if (this.rbJa.Checked && !(this.dfSumme.IsEmpty())) 
					{
						this.nSaldo = (this.nSaldo / this.dfSumme.Number).Truncate(20, 0) * this.dfSumme.Number;
					}
					// 18.12.17 Ä1663
					if (this.cbTag.Checked && this.nSaldo > this.nMindGuth) 
					{
						this.bTagOk = false;
						if (this.nWoMo == 1 || this.nWoDi == 1 || this.nWoMi == 1 || this.nWoDo == 1 || this.nWoFr == 1) 
						{
							if (this.nWoMo == 1 && SalDateTime.Current.Weekday() == 2) 
							{
								this.bTagOk = true;
							}
							else if (this.nWoDi == 1 && SalDateTime.Current.Weekday() == 3) 
							{
								this.bTagOk = true;
							}
							else if (this.nWoMi == 1 && SalDateTime.Current.Weekday() == 4) 
							{
								this.bTagOk = true;
							}
							else if (this.nWoDo == 1 && SalDateTime.Current.Weekday() == 5) 
							{
								this.bTagOk = true;
							}
							else if (this.nWoFr == 1 && SalDateTime.Current.Weekday() == 6) 
							{
								this.bTagOk = true;
							}
							// Else	! 20.07.21 auskommentiert nach Rücksprache mit HE und JA
							// If dtWoTagLtzt != DATETIME_Null And dtWoTagLtzt < dtWo
							// Set bTagOk = TRUE
						}
						else if (this.nTag > 0 && this.nTag != SalNumber.Null) 
						{
							if (this.nTag == SalDateTime.Current.Day()) 
							{
								this.bTagOk = true;
							}
							else
							{
								// 26.03.18
								this.nJahr = SalDateTime.Current.Year();
								this.nMonat = SalDateTime.Current.Month();
								if (this.nTag >= SalDateTime.Current.Day()) 
								{
									this.nMonat = this.nMonat - 1;
									if (this.nMonat == 0) 
									{
										this.nJahr = this.nJahr - 1;
										this.nMonat = 12;
									}
								}
								this.dtTag = new SalDateTime(this.nJahr, this.nMonat, this.nTag, 0, 0, 0);

								if (this.dtWoTagLtzt != SalDateTime.Null && this.dtWoTagLtzt < this.dtTag) 
								{
									this.bTagOk = true;
								}
							}
						}
						else if (this.nTagEin > 0 && this.nTagEin != SalNumber.Null)  // 14.05.21 Ä1958
						{
							this.nJahr = SalDateTime.Current.Year();
							this.nMonat = SalDateTime.Current.Month();
							if (this.nTagEin < SalDateTime.Current.Day()) 
							{
								if (this.nMonat == 12) 
								{
									this.nMonat = 1;
									this.nJahr = this.nJahr + 1;
								}
								else
								{
									this.nMonat = this.nMonat + 1;
								}
							}
							this.dtTag = new SalDateTime(this.nJahr, this.nMonat, this.nTagEin, 0, 0, 0);
							Int.SqlIstDa("FROM fe WHERE fedatum = :dlgAbschVor.dtTag", ref Var.bExists);
							while (this.dtTag.Weekday() == 0 || this.dtTag.Weekday() == 1 || Var.bExists) 
							{
								this.dtTag = Int.PalAddDay(this.dtTag, -1);
								Int.SqlIstDa("FROM fe WHERE fedatum = :dlgAbschVor.dtTag", ref Var.bExists);
							}
							this.dtTag = Int.PalAddDay(this.dtTag, -2);
							Int.SqlIstDa("FROM fe WHERE fedatum = :dlgAbschVor.dtTag", ref Var.bExists);
							while (this.dtTag.Weekday() == 0 || this.dtTag.Weekday() == 1 || Var.bExists) 
							{
								this.dtTag = Int.PalAddDay(this.dtTag, -1);
								Int.SqlIstDa("FROM fe WHERE fedatum = :dlgAbschVor.dtTag", ref Var.bExists);
							}

							this.nTag = this.dtTag.Day();
							if (this.nTag == SalDateTime.Current.Day()) 
							{
								this.bTagOk = true;
							}
							else
							{
								// 26.03.18
								this.nJahr = SalDateTime.Current.Year();
								this.nMonat = SalDateTime.Current.Month();
								if (this.nTag >= SalDateTime.Current.Day()) 
								{
									this.nMonat = this.nMonat - 1;
									if (this.nMonat == 0) 
									{
										this.nJahr = this.nJahr - 1;
										this.nMonat = 12;
									}
								}
								this.dtTag = new SalDateTime(this.nJahr, this.nMonat, this.nTag, 0, 0, 0);

								if (this.dtWoTagLtzt != SalDateTime.Null && this.dtWoTagLtzt < this.dtTag) 
								{
									this.bTagOk = true;
								}
							}
						}
						if (!(this.bTagOk)) 
						{
							this.nSaldo = 0;
						}
					}

					if (this.nSaldo > this.nMindGuth) 
					{
						this.nSaldo = this.nSaldo - this.nMindGuth;
						Int.SqlImmedX(@"	INSERT INTO av (avarztnr, avsaldo, avzahldm)
		VALUES( :dlgAbschVor.nArztNr, :dlgAbschVor.nOriSaldo, :dlgAbschVor.nSaldo)");
					}
					this.SetStatusBarText("Arzt-Nr.: " + this.nArztNr.ToString(0));
				}
				this.nFetch = this.hSqlMahn.FetchNext();
			}
			Sal.WaitCursor(false);
			this.SetStatusBarText(" ");
			this.hSqlMahn.Disconnect();
			this.EndDialog(0);
			#endregion
		}
		
		/// <summary>
		/// dfSumme WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSumme_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfSumme_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSumme_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.rbJa.Checked = true;
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.DestroyWindow();
			#endregion
		}
		#endregion
	}
}
