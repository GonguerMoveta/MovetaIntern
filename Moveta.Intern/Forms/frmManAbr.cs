// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmManAbr : SalQuickTabsForm
	{
		#region Window Variables
		public SalSqlHandle hSqlMan = SalSqlHandle.Null;
		public SalSqlHandle hSqlDisk = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalString strSelectList = "";
		public SalNumber nManIndex = 0;
		public SalNumber nErr = 0;
		public SalNumber nFetch = 0;
		public SalWindowHandle hWndReport = SalWindowHandle.Null;
		public SalString strReportName = "";
		public SalNumber nTANr = 0;
		public SalString strTAN1 = "";
		public SalString strTAN2 = "";
		public SalString strTAStr = "";
		public SalString strTAOrt = "";
		public SalString strTALand = "";
		public SalNumber nTVNr = 0;
		public SalString strTVN1 = "";
		public SalString strTVN2 = "";
		public SalString strTVStr = "";
		public SalString strTVOrt = "";
		public SalNumber nTAArztNr = 0;
		public SalNumber nTHNr = 0;
		public SalString strTHN1 = "";
		public SalString strTHN2 = "";
		public SalString strTHStr = "";
		public SalString strTHOrt = "";
		public SalString strTHLand = "";
		public SalString strBearbeiter = "";
		public SalDateTime dtBearbDatum = SalDateTime.Null;
		public SalNumber nArztNr = 0;
		public SalNumber nArztNr2 = 0;
		public SalNumber nRow = 0;
		public SalNumber nSumme = 0;
		public SalNumber nSummeB = 0;
		public SalNumber nPosNr = 0;
		public SalString strLA = "";
		public SalNumber nMwSt = 0;
		public SalNumber nMwStProz = 0;
		public SalNumber nNetto = 0;
		public SalDateTime dtDatum = SalDateTime.Null;
		public SalString strNN = "";
		public SalString strVN = "";
		public SalWindowHandle hWndColRow = SalWindowHandle.Null;
		public SalNumber nColRow = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmManAbr()
		{
			// Assign global reference.
			App.frmManAbr = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmManAbr CreateWindow(Control owner)
		{
			frmManAbr frm = new frmManAbr();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmManAbr FromHandle(SalWindowHandle handle)
		{
			return ((frmManAbr)SalWindow.FromHandle(handle, typeof(frmManAbr)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// Rechnet Abr-Summe für aktuellen Arzt
		/// </summary>
		/// <returns></returns>
		public SalNumber PalSumme()
		{
			#region Actions
			using (new SalContext(this))
			{
				dfSumme.Number = 0;
				dfSummeB.Number = 0;
				nRow = Sys.TBL_MinRow;
				while (tblOffeneAbr.FindNextRow(ref nRow, Sys.ROW_Selected, 0)) 
				{
					tblOffeneAbr.SetFocusRow(nRow);
					Int.SqlImmedSel(@" SELECT sum(lepdm), sum(@round(lepdm*(100+lepmwst)/100,2)) INTO :frmManAbr.nSumme, :frmManAbr.nSummeB  FROM lep
WHERE  lepbearbeiter = :frmManAbr.tblOffeneAbr.colsBearbeiter
AND lebearbdatum = :frmManAbr.tblOffeneAbr.coldtBearbDatum
AND leparztnr= :frmManAbr.tblOffeneAbr.colnArztNr");
					dfSumme.Number = dfSumme.Number + nSumme;
					dfSummeB.Number = dfSummeB.Number + nSummeB;
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalPruefeSperre()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.ColorSet(dfSperre, Sys.COLOR_IndexWindowText, Sys.COLOR_White);
				if (Int.PalFormFrei("Übergaben")) 
				{
					dfSperre.Text = "Übergaben erlaubt";
					Sal.ColorSet(dfSperre, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
				}
				else
				{
					dfSperre.Text = "Übergaben gesperrt !";
					Sal.ColorSet(dfSperre, Sys.COLOR_IndexWindow, Sys.COLOR_Red);
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmManAbr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmManAbr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmManAbr_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Activate:
					this.frmManAbr_OnSAM_Activate(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmManAbr_OnSAM_Close(sender, e);
					break;
				
				case Sys.SAM_ReportStart:
					this.frmManAbr_OnSAM_ReportStart(sender, e);
					break;
				
				case Sys.SAM_ReportFetchInit:
					this.frmManAbr_OnSAM_ReportFetchInit(sender, e);
					break;
				
				case Sys.SAM_ReportFetchNext:
					this.frmManAbr_OnSAM_ReportFetchNext(sender, e);
					break;
				
				case Sys.SAM_ReportFinish:
					this.frmManAbr_OnSAM_ReportFinish(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmManAbr_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.lbManAktionen.SetWindowColor(Sys.COLOR_IndexWindow, 0xefffef);
			this.lbManAktionen.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_DarkGreen);
			#endregion
		}
		
		/// <summary>
		/// SAM_Activate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmManAbr_OnSAM_Activate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			//FC:FINAL: check if form still exist
			if(App.frmManAbr == null)
            {
                return;
            }
			// 22.01.18 Ä1692
			this.nColRow = Sys.TBL_MinRow;
			this.tblOffeneAbr.FindNextRow(ref this.nColRow, Sys.ROW_Selected, 0);
			// Call SalStatusSetText( hWndForm, 'Row ' || SalNumberToStrX( nColRow, 0 ) )
			// Call SalMessageBeep( 0 )

			// 03.04.08
			if (this.picTabs.GetTop() == 0) 
			{
				this.strSelect = @"SELECT LEBEARBDATUM, LEARZTNR,LEBEARBEITER,LEBEARBDATUM, LESTATUS, NULL, count(*)
FROM LE  WHERE LEMANDISK= :strMan AND (lestatus <> '---' OR lestatus IS NULL) GROUP BY 1,2,3,4,5";
			}
			else if (this.picTabs.GetTop() == 2) 
			{
				this.strSelect = @"SELECT LEBEARBDATUM, LEARZTNR,LEBEARBEITER,LEBEARBDATUM, LESTATUS, NULL, count(*)
FROM LE  WHERE LEMANDISK= :strMan AND (lestatus <> 'TSK' OR lestatus IS NULL) GROUP BY 1,2,3,4,5";
			}
			else
			{
				this.strSelect = @"SELECT LEBEARBDATUM, LEARZTNR,LEBEARBEITER,LEBEARBDATUM, LESTATUS, NULL, count(*)
FROM LE  WHERE LEMANDISK= :strMan AND lestatus = '---' GROUP BY 1,2,3,4,5";
			}

			// Set strSelect = 'SELECT LEBEARBDATUM, LEARZTNR,LEBEARBEITER,LEBEARBDATUM, LESTATUS, NULL, count(*)
			// FROM LE WHERE LEMANDISK= :strMan GROUP BY 1,2,3,4,5,6'
			Int.SqlConnection(ref this.hSqlMan);
			this.tblOffeneAbr.Populate(this.hSqlMan, this.strSelect, Sys.TBL_FillAll);
			this.hSqlMan.Commit();
			this.hSqlMan.Disconnect();
			// 19.02.99
			// Set nRow = TBL_MinRow
			// While SalTblFindNextRow( tblOffeneAbr, nRow, 0, 0)
			// Call SalTblSetFocusRow( tblOffeneAbr, nRow )
			// Call SqlImmedSel( 'SELECT arechinfo INTO :frmManAbr.tblOffeneAbr.collsMemo FROM a
			// WHERE aarztnr= :frmManAbr.tblOffeneAbr.colnArztNr')
			// If (SalDateCurrent() -tblOffeneAbr.coldtBearbDatum)<=1
			// Call VisTblSetRowColor( tblOffeneAbr, nRow, COLOR_DarkGreen )
			// Else If (SalDateCurrent() -tblOffeneAbr.coldtBearbDatum)<=2
			// Call VisTblSetRowColor( tblOffeneAbr, nRow, COLOR_Periwinkle )
			// Else
			// Call VisTblSetRowColor( tblOffeneAbr, nRow, COLOR_DarkRed )
			// 14.05.02
			this.PalPruefeSperre();
			// Test, um unnötige Locks zu vermeiden
			// Call SqlDisconnect(hSql)
			// Call SqlConnection(hSql)
			// 22.01.18 Ä1692
			if (this.nColRow != Sys.TBL_MinRow) 
			{
				this.tblOffeneAbr.SetRowFlags(this.nColRow, Sys.ROW_Selected, true);
				// 05.02.18 F3108
				this.tblOffeneAbr.SetContextRow(this.nColRow);
			}

			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmManAbr_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.EnableWindow(App.frmMain.pbManAbr);
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportStart event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmManAbr_OnSAM_ReportStart(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 30.04.03
			if (Var.hWndfrmReport) 
			{
				Var.hWndfrmReport.BringWindowToTop();
			}

			if (this.strReportName == "ETITH") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "TH-Etiketten", "Die TH-Etiketten", "werden gedruckt", "TH-Etiketten");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "MYCOHA") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Mycoplasmen-Abrechnungsscheine", "Die Abrechnungsscheine", "werden gedruckt", "Abrechnungsscheine");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "RechCheck") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Rechnungs-Check", "Rechnungs-Check", "wird gedruckt", "Rechnungs-Check");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFetchInit event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmManAbr_OnSAM_ReportFetchInit(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.strReportName == "ETITH") 
			{
				if (!(this.hSqlDisk.Prepare(@"SELECT harztnr, hhalternr, hti || hvn || ' ' || hnn, hname2, hstr, hort,hland
			INTO :nTANr, :nTHNr, :strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strTHLand
			FROM le,h
			WHERE learztnr=harztnr AND lehalternr=hhalternr AND learztnr = :nArztNr
			ORDER BY hnn, hvn"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "MYCOHA") 
			{
				if (!(this.hSqlDisk.Prepare(@"SELECT harztnr, hhalternr, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland,
			aname1, aname2, astr, aort
			INTO :nTANr, :nTHNr, :strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strTHLand ,
			:strTAN1, :strTAN2, :strTAStr, :strTAOrt
			FROM le,h,a
			WHERE learztnr=harztnr AND lehalternr=hhalternr AND learztnr=aarztnr AND learztnr = :nArztNr
			ORDER BY hnn, hvn"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "RechCheck") 
			{
				if (!(this.hSqlDisk.Prepare(@"SELECT harztnr, hnn, hvn, hhalternr, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland,
			aname1, aname2, astr, aort, leposnr, lepla, lepmwst, sum(lepdm), sum(@round(lepdm*lepmwst/100,2)), min(lepdatum)
			INTO :nTANr, :strNN, :strVN, :nTHNr, :strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strTHLand ,
			:strTAN1, :strTAN2, :strTAStr, :strTAOrt, :nPosNr, :strLA, :nMwStProz, :nNetto, :nMwSt, :dtDatum
			FROM le,lep,h,a
			WHERE learztnr=harztnr AND lehalternr=hhalternr AND learztnr=aarztnr
			AND lebearbeiter = :frmManAbr.strBearbeiter AND le.lebearbdatum = :frmManAbr.dtBearbDatum
			AND learztnr=leparztnr AND lehalternr=lephalternr AND leposnr=lepposnr AND lebearbeiter=lepbearbeiter
			AND le.lebearbdatum=lep.lebearbdatum
			GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFetchNext event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmManAbr_OnSAM_ReportFetchNext(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.strReportName == "ETITH") 
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						// ! 10.04.06 Ländercodes
						this.strTHLand = Int.PalPruefeLC(this.strTHLand, 0);
						// !
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
				this.hSqlDisk.Commit();
			}
			else if (this.strReportName == "MYCOHA") 
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						// ! 10.04.06 Ländercodes
						this.strTHLand = Int.PalPruefeLC(this.strTHLand, 0);
						// !
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
				this.hSqlDisk.Commit();
			}
			else
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
				this.hSqlDisk.Commit();
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFinish event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmManAbr_OnSAM_ReportFinish(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlDisk.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// picTabs WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case QO.TABSM_TabActivateFinish:
					this.picTabs_OnTABSM_TabActivateFinish(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// TABSM_TabActivateFinish event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_OnTABSM_TabActivateFinish(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Activate, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// tblOffeneAbr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblOffeneAbr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblOffeneAbr_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Click:
					this.tblOffeneAbr_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblOffeneAbr_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblOffeneAbr_OnSAM_RowHeaderClick(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblOffeneAbr_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblOffeneAbr, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblOffeneAbr_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nArztNr = this.tblOffeneAbr.colnArztNr.Number;
			// 18.04.12
			Int.SqlImmedSel(@"SELECT ANR2 INTO :frmManAbr.nArztNr2 FROM A
WHERE AARZTNR = :frmManAbr.nArztNr");
			if (this.nArztNr2 == 0) 
			{
				this.nArztNr2 = this.nArztNr;
			}

			this.strBearbeiter = this.tblOffeneAbr.colsBearbeiter.Text;
			this.dtBearbDatum = this.tblOffeneAbr.coldtBearbDatum.DateTime;
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblOffeneAbr_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT arechinfo INTO :frmManAbr.tblOffeneAbr.collsMemo FROM a
WHERE aarztnr= :frmManAbr.tblOffeneAbr.colnArztNr");
			if (this.tblOffeneAbr.colsStatus.Text == "Eing.") 
			{
				this.tblOffeneAbr.nColor = 0xffbfbf;
			}
			else if ((SalDateTime.Current - this.tblOffeneAbr.coldtBearbDatum.DateTime) <= 1) 
			{
				this.tblOffeneAbr.nColor = 0xbfffbf;
			}
			else if ((SalDateTime.Current - this.tblOffeneAbr.coldtBearbDatum.DateTime) <= 2) 
			{
				this.tblOffeneAbr.nColor = 0xbfffff;
			}
			else
			{
				this.tblOffeneAbr.nColor = 0xbfbfff;
			}
			XSal.TblSetRowBackColor(this.tblOffeneAbr, Sys.lParam, this.tblOffeneAbr.nColor);
			// If nColor != COLOR_Yellow
			// Call VisTblSetRowColor (tblOffeneAbr, lParam, COLOR_White)
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblOffeneAbr_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblOffeneAbr.PostMessage(Sys.SAM_Click, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// lbManAktionen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbManAktionen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.lbManAktionen_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.lbManAktionen_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbManAktionen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			this.nManIndex = this.lbManAktionen.GetListSelectedIndex();
			this.strSelect = this.lbManAktionen.GetListItemText(this.nManIndex);
			if (this.strSelect == "Matchcode suchen") 
			{
				frmMCSuche.CreateWindow(this, SalNumber.Null);
			}
			else if (this.strSelect == "Halterstamm") 
			{
				frmHalter.CreateWindow(this, "frmManAbr", 0, 0);
			}
			else if (this.strSelect == "Leistungen erfassen") 
			{
				if (!(this.tblOffeneAbr.AnyRows(Sys.ROW_Selected, 0))) 
				{
					this.nArztNr = SalNumber.Null;
					this.nArztNr2 = SalNumber.Null;
					this.strBearbeiter = "";
					this.dtBearbDatum = SalDateTime.Null;
				}
				frmManLE.CreateWindow(this);
			}
			else if (this.strSelect == "Abrechnung bearbeiten") 
			{
				frmAbrBearb.CreateWindow(this, "frmManAbr");
			}
			// Else If strSelect = 'Rechnungs-Check'
			// Set frmManAbr.nErr = 1
			// Set frmManAbr.strReportName = 'RechCheck'
			// Call PalReport(frmManAbr,'RechCheck.QRP',
			// ':frmManAbr.nTANr,:frmManAbr.nTHNr,:frmManAbr.strTHN1,:frmManAbr.strTHN2,:frmManAbr.strTHStr,:frmManAbr.strTHOrt, :frmManAbr.strTHLand,
			// :frmManAbr.strTAN1,:frmManAbr.strTAN2,:frmManAbr.strTAStr,:frmManAbr.strTAOrt,
			// :frmManAbr.dtDatum, :frmManAbr.nMwSt, :frmManAbr.nNetto, :frmManAbr.nMwStProz, :frmManAbr.nPosNr, :frmManAbr.strLA',
			// 'ArztNr, HalterNr, HName1, HName2, HStr, HOrt, HLand, AName1, AName2, AStr, AOrt, Datum, MwSt, Netto, MwStProz, PosNr, LA',nErr)
			// 25.06.07
			// LL
			// Call SalModalDialog( dlgLlDruck, frmMain, 'Rechnungs-Check.lst', '' )
			// Else If strSelect = 'TVS-Nr.-Diskette erstellen'
			// Call SalCreateWindow( frmTVSNrLw,hWndForm
			// ,tblOffeneAbr.colnArztNr,tblOffeneAbr.colsBearbeiter,tblOffeneAbr.coldtBearbDatum )
			// Else If strSelect = 'Rechnungen drucken (alt)'
			// Call SalCreateWindow( frmDruRg,hWndForm
			// ,nArztNr,strBearbeiter,dtBearbDatum )
			else if (this.strSelect == "Vorab-Rechnungen drucken")  // 30.08.11 Ä606
			{
				dlgLlDruck.ModalDialog(App.frmMain, "Vorab-Rechnung.lst", "M");
			}
			else if (this.strSelect == "Rechnungen drucken") 
			{
				frmSpeRg.CreateWindow(this, this.tblOffeneAbr.colnArztNr.Number, this.tblOffeneAbr.colsBearbeiter.Text, this.tblOffeneAbr.coldtBearbDatum.DateTime, "M");
			}
			// Else If strSelect = 'Rechnungsprotokoll drucken'
			// Call SalCreateWindow( frmRechProt,hWndForm
			// ,nArztNr,strBearbeiter,dtBearbDatum )
			// Else If strSelect = 'EU-Standardüberweisungen'
			// Call SalCreateWindow( frmEUUeberw,hWndForm
			// ,tblOffeneAbr.colnArztNr,tblOffeneAbr.colsBearbeiter,tblOffeneAbr.coldtBearbDatum )
			else if (this.strSelect == "Rechnungsprotokoll drucken") 
			{
				frmRechProtneu.CreateWindow(this, this.tblOffeneAbr.colnArztNr.Number, this.tblOffeneAbr.colsBearbeiter.Text, this.tblOffeneAbr.coldtBearbDatum.DateTime, "M");
			}
			else if (this.strSelect == "Etiketten aus Rechnungsprotokoll") 
			{
				// Set frmManAbr.nErr = 1
				// Set frmManAbr.strReportName = 'ETITH'
				// Call PalReport(frmManAbr,'ETITH.QRP',
				// ':frmManAbr.nTANr,:frmManAbr.nTHNr,:frmManAbr.strTHN1,:frmManAbr.strTHN2,:frmManAbr.strTHStr,:frmManAbr.strTHOrt, :frmManAbr.strTHLand',
				// 'ArztNr, HalterNr, HName1, HName2, HStr, HOrt, HLand',nErr)
				// 25.06.07
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Halter14.lbl", "frmManAbr");
			}
			else if (this.strSelect == "Übergabe OP") 
			{
				frmUebOP.CreateWindow(this, this.tblOffeneAbr.colnArztNr.Number, this.tblOffeneAbr.colsBearbeiter.Text, this.tblOffeneAbr.coldtBearbDatum.DateTime, "M");
			}
			// Else If strSelect = 'Myco-Abrechnung'
			// Call SalCreateWindow( frmMycoLE,hWndForm )
			// Else If strSelect = 'Myco-Zettel drucken'
			// Set frmManAbr.nErr = 1
			// Set frmManAbr.strReportName = 'MYCOHA'
			// Call PalReport(frmManAbr,'MYCOHA.QRP',
			// ':frmManAbr.nTANr,:frmManAbr.nTHNr,:frmManAbr.strTHN1,:frmManAbr.strTHN2,:frmManAbr.strTHStr,:frmManAbr.strTHOrt, :frmManAbr.strTHLand,
			// :frmManAbr.strTAN1,:frmManAbr.strTAN2,:frmManAbr.strTAStr,:frmManAbr.strTAOrt',
			// 'ArztNr, HalterNr, HName1, HName2, HStr, HOrt, HLand, AName1, AName2, AStr, AOrt',nErr)
			// LL
			// Call SalModalDialog( dlgLlDruck, frmMain, 'MYCO-Zettel.lst', '' )
			// Else If strSelect = 'Seuchenbekämpfungsmaßnahmen'
			// Call SalCreateWindow( frmSBM,hWndForm )
			// Else If strSelect = 'RA-Info-Zettel'
			// Call SalCreateWindow(frmZettel,hWndForm,'frmManAbr',tblOffeneAbr.colnArztNr, 0, 0)
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbManAktionen_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.lbManAktionen.AddListItem("Matchcode suchen");
			this.lbManAktionen.AddListItem("Leistungen erfassen");
			this.lbManAktionen.AddListItem("Halterstamm");
			this.lbManAktionen.AddListItem("Abrechnung bearbeiten");
			// Call SalListAdd( lbManAktionen, 'Rechnungs-Check' )
			// Call SalListAdd( lbManAktionen, 'TVS-Nr.-Diskette erstellen' )
			this.lbManAktionen.AddListItem("Vorab-Rechnungen drucken");
			this.lbManAktionen.AddListItem("Rechnungen drucken");
			// Call SalListAdd( lbManAktionen, 'EU-Standardüberweisungen' )
			this.lbManAktionen.AddListItem("Rechnungsprotokoll drucken");
			this.lbManAktionen.AddListItem("Etiketten aus Rechnungsprotokoll");
			this.lbManAktionen.AddListItem("Übergabe OP");
			// Call SalListAdd( lbManAktionen, '' )
			// Call SalListAdd( lbManAktionen, 'Myco-Abrechnung' )
			// Call SalListAdd( lbManAktionen, 'Myco-Zettel drucken' )
			// Call SalListAdd( lbManAktionen, '' )
			// Call SalListAdd( lbDiskAktionen, 'Seuchenbekämpfungsmaßnahmen' )
			// Call SalListAdd( lbDiskAktionen, '' )
			// Call SalListAdd( lbManAktionen, 'RA-Info-Zettel' )
			#endregion
		}
		
		/// <summary>
		/// dfSumme WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSumme_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_SetFocus:
					this.dfSumme_OnSAM_SetFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_SetFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSumme_OnSAM_SetFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalSumme();
			#endregion
		}
		
		/// <summary>
		/// dfSummeB WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSummeB_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_SetFocus:
					this.dfSummeB_OnSAM_SetFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_SetFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSummeB_OnSAM_SetFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalSumme();
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblOffeneAbr
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblOffeneAbrTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmManAbr _frmManAbr = null;
			
			
			#region Window Variables
			public SalNumber nColor = 0;
			#endregion
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblOffeneAbrTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmManAbr frmManAbr
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmManAbr == null) 
					{
						_frmManAbr = (frmManAbr)this.FindForm();
					}
					return _frmManAbr;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblOffeneAbrTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblOffeneAbrTableWindow)SalWindow.FromHandle(handle, typeof(tblOffeneAbrTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// collsMemo WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void collsMemo_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.collsMemo_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void collsMemo_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				Int.SqlImmed(@"UPDATE a SET arechinfo = :frmManAbr.tblOffeneAbr.collsMemo
WHERE aarztnr = :frmManAbr.tblOffeneAbr.colnArztNr");
				#endregion
			}
			
			/// <summary>
			/// colnRec WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnRec_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colnRec_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnRec_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				Int.SqlImmed(@"UPDATE a SET arechinfo = :frmDiskAbr.tblOffeneAbr.collsMemo
WHERE aarztnr = :frmDiskAbr.tblOffeneAbr.colnArztNr");
				#endregion
			}
			#endregion
		}
		#endregion
	}
}
