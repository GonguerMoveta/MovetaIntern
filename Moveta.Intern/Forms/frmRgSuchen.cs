// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="nSuchArzt"></param>
	/// <param name="nSuchHalter"></param>
	/// <param name="nSuchRech"></param>
	public partial class frmRgSuchen : FCQuickTabsRibbonForm
	{
		#region Window Parameters
		public SalNumber nSuchArzt;
		public SalNumber nSuchHalter;
		public SalNumber nSuchRech;
		#endregion
		
		#region Window Variables
		public SalString strSelect = "";
		public SalString strSelectRg = "";
		public SalString strSelectRgI = "";
		public SalNumber nFetch = 0;
		public SalNumber naltArzt = 0;
		public SalNumber nArztNr = 0;
		public SalNumber nArztNr2 = 0;
		public SalNumber naltHalter = 0;
		public SalNumber nSaldo = 0;
		public SalNumber nBEZSaldo = 0;
		public SalSqlHandle hSqlDisk = SalSqlHandle.Null;
		public SalNumber nErr = 0;
		public SalNumber nFetchRep = 0;
		public SalWindowHandle hWndReport = SalWindowHandle.Null;
		public SalString strReportName = "";
		public SalNumber nTANr = 0;
		public SalString strTAN1 = "";
		public SalString strTAN2 = "";
		public SalString strTATitel = "";
		public SalString strTAStr = "";
		public SalString strTAOrt = "";
		public SalString strTALand = "";
		public SalNumber nTHNr = 0;
		public SalString strTHN1 = "";
		public SalString strTHN2 = "";
		public SalString strTHStr = "";
		public SalString strTHOrt = "";
		public SalString strTHLand = "";
		public SalDateTime dtBuchDat = SalDateTime.Null;
		public SalDateTime dtXBuchDat = SalDateTime.Null;
		public SalDateTime dtBuchDatAlt = SalDateTime.Null;
		public SalDateTime dtRechDat = SalDateTime.Null;
		public SalString strBuchText = "";
		public SalString strXBuchText = "";
		public SalNumber nRechNr = 0;
		public SalNumber nXRechNr = 0;
		public SalNumber nRechNrAlt = 0;
		public SalNumber nDMRechAlt = 0;
		public SalNumber nDMMahn = 0;
		public SalNumber nXDMMahn = 0;
		public SalNumber nDMMBKo = 0;
		public SalNumber nDMZins = 0;
		public SalNumber nZaRech = 0;
		public SalNumber nZaMahn = 0;
		public SalNumber nZaZins = 0;
		public SalNumber nMS = 0;
		public SalDateTime dtMahnDat = SalDateTime.Null;
		public SalSqlHandle hSqlZa = SalSqlHandle.Null;
		public SalNumber nFetchZa = 0;
		public SalBoolean bNoFetch = false;
		public SalDateTime dtZahlDat = SalDateTime.Null;
		public SalNumber nKZZahl = 0;
		public SalNumber nDMOP = 0;
		public SalNumber nCredoneg = 0;
		public SalString strArztRechNr = "";
		public SalString strArztRechNrAlt = "";
		public SalNumber nDM = 0;
		public SalNumber nXDM = 0;
		public SalString strTyp = "";
		public SalBoolean bOk = false;
		public SalNumber nA1 = 0;
		public SalNumber nA2 = 0;
		public SalNumber nA3 = 0;
		public SalNumber nA4 = 0;
		public SalNumber nA5 = 0;
		public SalNumber nA6 = 0;
		public SalNumber nR1 = 0;
		public SalNumber nR2 = 0;
		public SalNumber nR3 = 0;
		public SalNumber nR4 = 0;
		public SalNumber nR5 = 0;
		public SalNumber nR6 = 0;
		public SalString strText = "";
		public SalNumber nGesKo = 0;
		public SalString strZaKZ = "";
		public SalString strZaBuchText = "";
		public SalString strTATelPraxis = "";
		public SalString strTATelPrivat = "";
		public SalString strTATelHandy = "";
		public SalString strTATelFax = "";
		public SalNumber nHalterNein = 0;
		public SalString strAndererHalter = "";
		public SalNumber nRAArztNr = 0;
		public SalNumber nRAArztNr2 = 0;
		public SalNumber nRAHalterNr = 0;
		public SalNumber nRARechNr = 0;
		public SalDateTime dtRADatum = SalDateTime.Null;
		public SalString strRAZeichen = "";
		public SalString strRAN1 = "";
		public SalString strRAN2 = "";
		public SalString strRAN3 = "";
		public SalString strRAN1a = "";
		public SalString strRAN2a = "";
		public SalString strRAN3a = "";
		public SalString strRAN4 = "";
		public SalString strRAN5 = "";
		public SalString strRAN4a = "";
		public SalString strRAN5a = "";
		public SalBoolean bExist = false;
		public SalString strRAText = "";
		public SalString lstrText = "";
		public SalString strKuerzel = "";
		public SalNumber nPRaZa = 0;
		public SalString strGrund = "";
		public SalString strSelectH = "";
		public SalString strSelect1 = "";
		public SalString strHSucheName = "";
		public SalNumber bPFarbe = 0;
		public SalString strLand = "";
		public SalDateTime dtSSperrDatum = SalDateTime.Null;
		public SalNumber nNoviArzt = 0;
		public SalNumber nNoviHalter = 0;
		public SalString lsNoviParameter = "";
		public SalNumber nSBankeinzug = 0;
		public SalNumber nMahnZinsAus = 0;
		public SalString strUnterOrdner = "";
		public SalBoolean bReturn = false;
		public SalString strDateiPfad = "";
		public SalString strDateiName = "";
		public SalString strFile = "";
		public SalString strScanTitel = "";
		public SalNumber nRet = 0;
		public SalArray<SalString> sFiles = new SalArray<SalString>();
		public SalString strDrive = "";
		public SalString strDir = "";
		public SalFileHandle hFile = SalFileHandle.Null;
		public SalSqlHandle hSqlCSV = SalSqlHandle.Null;
		public SalNumber nFetchCSV = 0;
		public SalNumber nSBDM = 0;
		public SalString strSBSH = "";
		public SalNumber nSBMwSt = 0;
		public SalNumber nSBGegKto = 0;
		public SalNumber nSBBelNr = 0;
		public SalDateTime dtSBBelDat = SalDateTime.Null;
		public SalNumber nSBKonto = 0;
		public SalString strSBBuchText = "";
		public SalString strSBRowID = "";
		public SalNumber nSBArztNr = 0;
		public SalNumber nSBArztNrAlt = 0;
		public SalString strHTel = "";
		public SalString strHTel2 = "";
		public SalString strHTelHandy = "";
		public SalString strHTelFax = "";
		public SalString strHEmail = "";
		public SalString lsGrund = "";
		public SalString strBEZBIC = "";
		public SalString strBEZIban = "";
		public SalDateTime dtBEZSignDat = SalDateTime.Null;
		public SalString strBLZ = "";
		public SalString strName = "";
		public SalString strBIC = "";
		public SalString strKonto = "";
		public SalString strIBAN = "";
		public SalString strMeldung = "";
		public SalNumber nTab = 0;
		public SalSqlHandle hSqlWv = SalSqlHandle.Null;
		public SalNumber nFetchWv = 0;
		public MTblPrintParams PrintParams = new MTblPrintParams();
		public SalNumber nTwainResolution = 0;
		public SalNumber nTwainColor = 0;
		public SalNumber nEWAabEUR = 0;
		public SalNumber nEWAVariante = 0;
		public SalNumber nRowFind = 0;
		public SalBoolean bFindVari = false;
		public SalString strBarcode = "";
		public SalNumber nMahnNr = 0;
		public SalString strPfadLL = "";
		public SalNumber nVorschussDM = 0;
		public SalDateTime dtVorschussDat = SalDateTime.Null;
		public SalNumber nVorschussDMRueck = 0;
		public SalDateTime dtVorschussDatRueck = SalDateTime.Null;
		public SalString strVorschussRueckGrund = "";
		public SalString strPfadAppData = "";
		public cfBase64 oBase64 = new cfBase64();
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmRgSuchen(SalNumber nSuchArzt, SalNumber nSuchHalter, SalNumber nSuchRech)
		{
			// Assign global reference.
			App.frmRgSuchen = this;
			// Window Parameters initialization.
			this.nSuchArzt = nSuchArzt;
			this.nSuchHalter = nSuchHalter;
			this.nSuchRech = nSuchRech;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
			//FC:FINAL: create menu as RibbonBar
			this.CreateRibbon();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmRgSuchen CreateWindow(Control owner, SalNumber nSuchArzt, SalNumber nSuchHalter, SalNumber nSuchRech)
		{
			frmRgSuchen frm = new frmRgSuchen(nSuchArzt, nSuchHalter, nSuchRech);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmRgSuchen FromHandle(SalWindowHandle handle)
		{
			return ((frmRgSuchen)SalWindow.FromHandle(handle, typeof(frmRgSuchen)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalFuelleInfosA()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.WaitCursor(true);
				pbADA.SetText("");
				// 07.05.14 auskommentiert AK und EL
				// Call SalStatusSetText(frmRgSuchen,'Tagebuch ?  ...')
				// Call SqlIstDa(' FROM ak WHERE ' || PalArztNr('ak', nArztNr, nArztNr2)   ,frmRgSuchen.cbTagebuch)
				// If frmRgSuchen.cbTagebuch
				// Call SalColorSet(frmRgSuchen.cbTagebuch,COLOR_IndexWindow,COLOR_Jade)
				// Else
				// Call SalColorSet(frmRgSuchen.cbTagebuch,COLOR_IndexWindow,COLOR_3DFace)

				this.SetStatusBarText("Zettel ?  ...");
				// 13.05.14 (zhalternr IS NULL OR zhalternr = 0) -> zhalternr = 0

				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalBoolean temp1 = this.cbAZettel.Checked;
				Int.SqlIstDa(" FROM Z WHERE " + Int.PalArztNr("z", nArztNr, nArztNr2) + " AND zhalternr=0 AND zdeaktiv IS NULL", ref temp1);
				this.cbAZettel.Checked = temp1;

				if (cbAZettel.Checked == true) 
				{
					Sal.ColorSet(cbAZettel, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
				}
				else
				{
					Sal.ColorSet(cbAZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				}
				// 16.06.00
				// Call SqlIstDa(' FROM EL WHERE ' || PalArztNr('el', nArztNr, nArztNr2) || ' and elerledigt = \'N\' ',cbEL)
				// If cbEL=TRUE
				// Call SalColorSet(cbEL,COLOR_IndexWindow,COLOR_White)
				// Else
				// Call SalColorSet(cbEL,COLOR_IndexWindow,COLOR_3DFace)

				// 07.05.14 auskommentiert
				// Call PalFuelleZettelA()
				// Call PalFuelleZahlungenA()
				// Call PalFuelleTagebuchA()

				naltArzt = dfArztNr.Number;
				this.SetStatusBarText("");
				// 25.10.10
				Var.nCount = Vis.DosEnumFiles(Var.strPfadArchiv + Sql.Database + "\\" + "A" + Int.PalStrNullen(Sal.NumberToStrX(dfArztNr.Number, 0), 4) + "\\*.*", Sys.FA_Standard, sFiles);
				if (Var.nCount > 0) 
				{
					pbADA.SetText(Var.nCount.ToString(0));
				}
				else if (Var.nCount <= 0) 
				{
					pbADA.SetText("-");
				}
				Sal.WaitCursor(false);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalFuelleInfosH()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.WaitCursor(true);
				pbHDA.SetText("");
				pbHDPR.SetText("");

				// 12.01.07 F107
				if (dfArztNr.Number > 0 && dfHalterNr.Number > 0) 
				{
					this.SetStatusBarText("Hole Halter ...");
					// 09.07.13 Ä848 hTel/HEmail
					// 18.06.15 F2428 hblz, hkonto -> hbic, hiban
					// Call SqlImmedSel('SELECT hti || hvn || \' \' || hnn,hname2,hstr,hort, hland, hcredoneg, hag, hmolkerei, hbic, hiban,  htelefon || \' \' || htel2 || \' F:\' || hfax || \' H:\' || hhandy, hmemo, hhalternein, handerehalter, hsperrdatum, hbankeinzug, hvirtkonto,
					// hhtel, hhtel2, hhtelhandy, hhtelfax, hhemail
					// 20.03.19 Ä1726 + GebDat
					Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn,hname2,hstr,hort, hland, hcredoneg, hag, hmolkerei, hbic, hiban,  htelefon || ' ' || htel2 || ' F:' || hfax || ' H:' || hhandy, hmemo, hhalternein, handerehalter, hsperrdatum,
hbankeinzug, hvirtkonto,
hhtel, hhtel2, hhtelhandy, hhtelfax, hhemail,
hgebdat, hgebdat2, hgebdattext, hgebdat2text
from h into :frmRgSuchen.dfSHalterName,:frmRgSuchen.dfSHalterName2,:frmRgSuchen.dfSHalterStr,:frmRgSuchen.dfSHalterOrt, :frmRgSuchen.dfSHalterLand, :frmRgSuchen.nCredoneg,
:frmRgSuchen.dfSArbeitgeber,:frmRgSuchen.dfSMolkerei,:frmRgSuchen.dfSBLZ,:frmRgSuchen.dfSKonto,
:frmRgSuchen.dfSTel, :frmRgSuchen.mlHInfo, :frmRgSuchen.nHalterNein, :frmRgSuchen.strAndererHalter, :frmRgSuchen.dtSSperrDatum, :frmRgSuchen.nSBankeinzug, :frmRgSuchen.dfSVirtKonto,
:frmRgSuchen.strHTel, :frmRgSuchen.strHTel2, :frmRgSuchen.strHTelHandy, :frmRgSuchen.strHTelFax, :frmRgSuchen.strHEmail,
:frmRgSuchen.dfSGebDat, :frmRgSuchen.dfSGebDat2, :frmRgSuchen.dfSGebDatText, :frmRgSuchen.dfSGebDatText2
where  hdeaktiv IS NULL AND hhalternr=" + Sal.NumberToStrX(dfHalterNr.Number, 0) + " and harztnr=" + Sal.NumberToStrX(dfArztNr.Number, 0));
					mlSHPegasus.Text = "";
					if (strHTel != "") 
					{
						mlSHPegasus.Text = mlSHPegasus.Text + "T: " + strHTel + "  ";
					}
					if (strHTel2 != "") 
					{
						mlSHPegasus.Text = mlSHPegasus.Text + "T2: " + strHTel2 + "  ";
					}
					if (strHTelHandy != "") 
					{
						mlSHPegasus.Text = mlSHPegasus.Text + "H: " + strHTelHandy + "  ";
					}
					if (strHTelFax != "") 
					{
						mlSHPegasus.Text = mlSHPegasus.Text + "F: " + strHTelFax + "  ";
					}
					if (strHEmail != "") 
					{
						mlSHPegasus.Text = mlSHPegasus.Text + "E: " + strHEmail + "  ";
					}
					// 29.06.09 OTÄ130 Bankeinzug
					if (nSBankeinzug == 1) 
					{
						dfSBankeinzug.Text = "Bankeinzug: ja";
					}
					else
					{
						dfSBankeinzug.Text = "";
					}
					// 21.02.18 F3090
					Int.SqlIstDa("FROM bezs WHERE " + Int.PalArztNr("bezs", nArztNr, nArztNr2) + "  AND bezshalternr = " + Sal.NumberToStrX(dfHalterNr.Number, 0) + @"
AND bezsrechnr IS NULL", ref Var.bExists);
					if (Var.bExists) 
					{
						dfSBankeinzug.Text = dfSBankeinzug.Text + " / IBEN-BEZ aktiv";
					}
					else
					{
						Int.SqlIstDa("FROM bezs WHERE " + Int.PalArztNr("bezs", nArztNr, nArztNr2) + "  AND bezshalternr = " + Sal.NumberToStrX(dfHalterNr.Number, 0) + @"
AND bezsrechnr IS NOT NULL AND bezserldat IS NULL", ref Var.bExists);
						if (Var.bExists) 
						{
							dfSBankeinzug.Text = dfSBankeinzug.Text + " / BEZ aktiv";
						}
					}
					// 07.09.09 OTÄ295
					if (dfSVirtKonto.Text != "") 
					{
						dfSVirtKonto.Text = "VirtKonto " + dfSVirtKonto.Text + Int.PalPruefZifferB1(dfSVirtKonto.Text, 9);
					}

					dfSHalterLand.Text = Int.PalPruefeLC(dfSHalterLand.Text, 0);
					if (nHalterNein == 1) 
					{
						Sal.MessageBox(@"Halter ist gesperrt!!!

Alternative Halternummer(n) : " + strAndererHalter, "Achtung!", (Sys.MB_Ok | Sys.MB_IconStop));
					}
					if (nCredoneg == 1) 
					{
						dfSCredoneg.Text = "CR negativ !!!";
					}
					else
					{
						dfSCredoneg.Text = "";
					}
					// 02.04.07 Ä102
					if (dtSSperrDatum != SalDateTime.Null) 
					{
						dfSCredoneg.Text = "Postausgang gesperrt seit " + Int.PalDateToStrJJJJMMTT(dtSSperrDatum).Mid(6, 2) + "." + Int.PalDateToStrJJJJMMTT(dtSSperrDatum).Mid(4, 2) + "." + Int.PalDateToStrJJJJMMTT(dtSSperrDatum).Mid(0, 4) + "   " + dfSCredoneg.Text;
						Sal.ColorSet(dfSCredoneg, Sys.COLOR_IndexWindow, Sys.COLOR_Red);
						Sal.ColorSet(dfSCredoneg, Sys.COLOR_IndexWindowText, Sys.COLOR_White);
					}
					else
					{
						Sal.ColorSet(dfSCredoneg, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
						Sal.ColorSet(dfSCredoneg, Sys.COLOR_IndexWindowText, Sys.COLOR_Red);
					}

					this.SetStatusBarText("Hole OP-Summe ...");
					// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
					// from rk into :frmRgSuchen.dfSHalterSaldo where rkhalternr=' || SalNumberToStrX(dfHalterNr,0) || '
					// and (rkarztnr =  ' || SalNumberToStrX(nArztNr,0) || ' or rkarztnr =  ' || SalNumberToStrX(nArztNr2,0) || ')
					// and rkkzzahl <2')
					Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
from rk into :frmRgSuchen.dfSHalterSaldo where rkhalternr=" + Sal.NumberToStrX(dfHalterNr.Number, 0) + @" AND rkdeaktiv IS NULL
and " + Int.PalArztNr("rk", nArztNr, nArztNr2) + @"
and rkkzzahl <2");
					// 06.04.10 OTÄ135
					Int.SqlImmedSel("SELECT sum(hbdm) INTO :frmRgSuchen.dfSHalterSaldoHaBu FROM hb WHERE " + Int.PalArztNr("hb", nArztNr, nArztNr2) + " AND hbhalternr = " + Sal.NumberToStrX(dfHalterNr.Number, 0));
					if (dfSHalterSaldoHaBu.Number != Sys.NUMBER_Null) 
					{
						dfSHalterSaldoHaBu.Number = dfSHalterSaldoHaBu.Number * -1;
						dfSHalterSaldo.Number = dfSHalterSaldo.Number + dfSHalterSaldoHaBu.Number;
					}
					// 25.02.19 F3137
					Int.SqlImmedSel(@"SELECT sum(hbdm) INTO :frmRgSuchen.dfSHalterSaldoHaBuEinzug FROM hb
WHERE " + Int.PalArztNr("hb", nArztNr, nArztNr2) + " AND hbhalternr = " + Sal.NumberToStrX(dfHalterNr.Number, 0) + " AND hbreteinzdat IS NOT NULL");
					if (dfSHalterSaldoHaBuEinzug.Number != Sys.NUMBER_Null) 
					{
						dfSHalterSaldoHaBuEinzug.Number = dfSHalterSaldoHaBuEinzug.Number * -1;
					}

					// 01.04.16
					if (dfSHalterSaldoHaBu.Number == 0 || dfSHalterSaldoHaBu.Number == Sys.NUMBER_Null) 
					{
						Sal.HideWindow(cbFARZZins);
					}
					else
					{
						Sal.ShowWindow(cbFARZZins);
					}

					if (Sal.IsNull(dfSHalterSaldo)) 
					{
						Sal.ColorSet(dfSHalterSaldo, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
					}
					else
					{
						Sal.ColorSet(dfSHalterSaldo, Sys.COLOR_IndexWindow, Sys.COLOR_Red);
					}

					// Call SalStatusSetText(frmRgSuchen,'Ratenzahler ?  ...')
					// Call SqlIstDa(' FROM r WHERE rhalternr=' || SalNumberToStrX(dfHalterNr,0) || '
					// and  ' || PalArztNr('r', nArztNr, nArztNr2)  ,frmRgSuchen.cbRaten)
					// If frmRgSuchen.cbRaten
					// Call SalColorSet(frmRgSuchen.cbRaten,COLOR_IndexWindow,COLOR_Red)
					// Else
					// Call SalColorSet(frmRgSuchen.cbRaten,COLOR_IndexWindow,COLOR_3DFace)

					this.SetStatusBarText("Tagebuch ?  ...");

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalBoolean temp1 = this.cbTagebuch.Checked;
					Int.SqlIstDa(" FROM ak WHERE akhalternr=" + Sal.NumberToStrX(dfHalterNr.Number, 0) + @" AND akdeaktiv IS NULL
and  " + Int.PalArztNr("ak", nArztNr, nArztNr2), ref temp1);
					this.cbTagebuch.Checked = temp1;

					if (this.cbTagebuch.Checked) 
					{
						Sal.ColorSet(this.cbTagebuch, Sys.COLOR_IndexWindow, Sys.COLOR_Jade);
					}
					else
					{
						Sal.ColorSet(this.cbTagebuch, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
					}

					this.SetStatusBarText("BatchBuch ?  ...");
					Int.SqlIstDa(@" FROM bb
WHERE  " + Int.PalArztNr("bb", nArztNr, nArztNr2) + @"
and bbhalternr=:frmRgSuchen.dfHalterNr", ref Var.bExists);
					if (Var.bExists) 
					{
						Sal.ShowWindowAndLabel(dfSZaungebucht);
						Int.SqlImmedSel(@"SELECT sum(bbzahldm) INTO :frmRgSuchen.dfSZaungebucht FROM bb
WHERE   " + Int.PalArztNr("bb", nArztNr, nArztNr2) + @"
and bbhalternr=:frmRgSuchen.dfHalterNr");
					}
					else
					{
						// Call SalClearField(dfSZaungebucht)
						dfSZaungebucht.Number = 0;
						Sal.HideWindowAndLabel(dfSZaungebucht);
					}

					this.SetStatusBarText("Prozeßregister ?  ...");

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalBoolean temp2 = this.cbPR.Checked;
					Int.SqlIstDa(@" FROM pr WHERE prhalternr=:frmRgSuchen.dfHalterNr
and  " + Int.PalArztNr("pr", nArztNr, nArztNr2), ref temp2);
					this.cbPR.Checked = temp2;

					if (this.cbPR.Checked) 
					{
						Sal.ColorSet(this.cbPR, Sys.COLOR_IndexWindow, Sys.COLOR_Marigold);
					}
					else
					{
						Sal.ColorSet(this.cbPR, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
					}
					// ab 01.01.99
					this.SetStatusBarText("Forderungsaufstellung ?  ...");

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalBoolean temp3 = this.cbFA.Checked;
					Int.SqlIstDa(@" FROM prd WHERE prdhalternr=:frmRgSuchen.dfHalterNr
and  " + Int.PalArztNr("prd", nArztNr, nArztNr2) + @"
and prdnr>=3073", ref temp3);
					this.cbFA.Checked = temp3;

					if (this.cbFA.Checked) 
					{
						Sal.ColorSet(this.cbFA, Sys.COLOR_IndexWindow, Sys.COLOR_DarkBlue);
						Sal.EnableWindow(cbFA);
					}
					else
					{
						Sal.ColorSet(this.cbFA, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
						Sal.DisableWindow(cbFA);
					}
					// 08.03.17 F2830
					Int.SqlIstDa(@" FROM prd WHERE prdhalternr=:frmRgSuchen.dfHalterNr
and  " + Int.PalArztNr("prd", nArztNr, nArztNr2) + @"
and prdnr = :frmRgSuchen.dfProzNr", ref this.bExist);
					if (!(bExist)) 
					{
						dfProzNr.Number = Sys.NUMBER_Null;
					}

					this.SetStatusBarText("Zettel ?  ...");

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalBoolean temp4 = this.cbZettel.Checked;
					Int.SqlIstDa(" FROM Z WHERE zhalternr=" + Sal.NumberToStrX(dfHalterNr.Number, 0) + @" AND zdeaktiv IS NULL
and  " + Int.PalArztNr("z", nArztNr, nArztNr2), ref temp4);
					this.cbZettel.Checked = temp4;

					if (cbZettel.Checked == true) 
					{
						Sal.ColorSet(cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
					}
					else
					{
						Sal.ColorSet(cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
					}
					// 16.06.00

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalBoolean temp5 = cbEL.Checked;
					Int.SqlIstDa(@" FROM EL WHERE elhalternr=:frmRgSuchen.dfHalterNr
and  " + Int.PalArztNr("el", nArztNr, nArztNr2) + " and elerledigt = \'N\' ", ref temp5);
					cbEL.Checked = temp5;

					if (cbEL.Checked == true) 
					{
						Sal.ColorSet(cbEL, Sys.COLOR_IndexWindow, Sys.COLOR_White);
					}
					else
					{
						Sal.ColorSet(cbEL, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
					}
					// 25.06.10 OTÄ432

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalBoolean temp6 = cbRaZa.Checked;
					Int.SqlIstDa(@" FROM rz WHERE rzkuenddat IS NULL AND rzdeaktiv IS NULL AND
" + Int.PalArztNr("rz", nArztNr, nArztNr2) + @"
and rzhalternr=" + Sal.NumberToStrX(dfHalterNr.Number, 0), ref temp6);
					cbRaZa.Checked = temp6;

					if (cbRaZa.Checked == true) 
					{
						Sal.ColorSet(cbRaZa, Sys.COLOR_IndexWindow, Sys.COLOR_Purple);
						Int.SqlImmedSel(@"SELECT rznr INTO :frmRgSuchen.dfRZNr FROM rz WHERE rzkuenddat IS NULL AND
" + Int.PalArztNr("rz", nArztNr, nArztNr2) + @"
and rzhalternr=" + Sal.NumberToStrX(dfHalterNr.Number, 0) + " ORDER BY rzaktivdat DESC");
					}
					else
					{
						Sal.ColorSet(cbRaZa, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
					}
					// 10.03.15 Ä1172
					Int.SqlIstDa(" FROM ee WHERE eeerldatum IS NULL AND " + Int.PalArztNr("ee", nArztNr, nArztNr2) + @"
and eehalternr=" + Sal.NumberToStrX(dfHalterNr.Number, 0), ref bExist);
					if (bExist) 
					{
						pbEWAKontrolle.ShowWindow();
						pbEWAKontrolle.EnableWindow();
					}
					else
					{
						pbEWAKontrolle.HideWindow();
					}
					// 13.02.17 Ä1499

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalBoolean temp7 = cbRISER.Checked;
					Int.SqlIstDa(" FROM ri WHERE " + Int.PalArztNr("ri", nArztNr, nArztNr2) + @"
and rihalternr=" + Sal.NumberToStrX(dfHalterNr.Number, 0), ref temp7);
					cbRISER.Checked = temp7;

					if (cbRISER.Checked == true) 
					{
						Sal.ColorSet(cbRISER, Sys.COLOR_IndexWindow, Sys.COLOR_Maize);
					}
					else
					{
						Sal.ColorSet(cbRISER, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
					}

					// 19.05.00
					// Call SalStatusSetText(frmRgSuchen,'Tab: Zahlungen Halter')
					// Call SqlConnection(hSqlZa)
					// Call SalTblPopulate(tblHZahlungen,hSqlZa,
					// 'select zaarztnr, zarechnr, zabuchdat,zabelegnr,zadm,zakz, zabuchtext, zaproznr from za
					// into :frmRgSuchen.tblHZahlungen.colnZAArztNr,  :frmRgSuchen.tblHZahlungen.colnZARechNr,
					// :frmRgSuchen.tblHZahlungen.coldtZADat,:frmRgSuchen.tblHZahlungen.colnZABelNr,
					// :frmRgSuchen.tblHZahlungen.colnZADM,:frmRgSuchen.tblHZahlungen.colnZAKZ, :frmRgSuchen.tblHZahlungen.colsZABuchtext,
					// :frmRgSuchen.tblHZahlungen.colnZAProzNr
					// where zaarztnr IN (:frmRgSuchen.nArztNr, :frmRgSuchen.nArztNr2) and zahalternr=:frmRgSuchen.dfHalterNr
					// order by zabuchdat DESC',TBL_FillAll)
					// Call SalStatusSetText(frmRgSuchen,'Tab: Tagebuch Halter')
					// Call SalTblPopulate( tblHTagebuch, hSqlZa,
					// 'SELECT akarztnr,akhalternr, akrechnr, akdatum, aktyp, aktypdetail, akdm, akproznr
					// INTO :frmRgSuchen.tblHTagebuch.colnArztNr,
					// :frmRgSuchen.tblHTagebuch.colnHalterNr,
					// :frmRgSuchen.tblHTagebuch.colnRechNr,
					// :frmRgSuchen.tblHTagebuch.coldtDatum,
					// :frmRgSuchen.tblHTagebuch.colsTyp,
					// :frmRgSuchen.tblHTagebuch.colsTypDetail,
					// :frmRgSuchen.tblHTagebuch.colnDM,
					// :frmRgSuchen.tblHTagebuch.colnProzNr
					// FROM ak WHERE akarztnr IN (:frmRgSuchen.nArztNr, :frmRgSuchen.nArztNr2)  AND akhalternr = :frmRgSuchen.dfHalterNr ORDER BY akdatum DESC', TBL_FillAll)
					// Call SalStatusSetText(frmRgSuchen,'Tab: Zettel Halter')
					// Call SalTblPopulate( tblHZettel,hSqlZa,
					// 'SELECT zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
					// INTO :tblHZettel.colsVon, :tblHZettel.colsAn, :tblHZettel.colnRechNr, :tblHZettel.collsBemerk, :tblHZettel.coldtDatum, :tblHZettel.colsErl
					// WHERE zarztnr IN (:frmRgSuchen.nArztNr, :frmRgSuchen.nArztNr2)  AND zhalternr = :frmRgSuchen.dfHalterNr ORDER BY zdatum DESC',TBL_FillAll )
					// Call SqlDisconnect(hSqlZa)
					PalFuelleZettel();
					PalFuelleZahlungen();
					PalFuelleTagebuch();
					PalFuelleMahnungen();
					// 11.05.09
					PalFuelleHaBu();

					naltArzt = dfArztNr.Number;
					naltHalter = dfHalterNr.Number;
					// 15.07.03 Telefonbucheintrag?
					// If dfArztNr > 0 and dfHalterNr > 0
					// Call SalStatusSetText(frmRgSuchen,'Halter im Telefonbuch?  ...')
					// Call SqlIstDa(' FROM TE WHERE tearztnr =' || SalNumberToStrX(dfArztNr,0) || '
					// and tehalternr= ' || SalNumberToStrX(dfHalterNr,0) ,bOk)
					// If bOk
					// Call SalShowWindow(pbTelH)
					// Else
					// Call SalHideWindow(pbTelH)
					// Else
					// Call SalHideWindow(pbTelH)
					// 25.10.10
					Var.nCount = Vis.DosEnumFiles(Var.strPfadArchiv + Sql.Database + "\\" + "A" + Int.PalStrNullen(Sal.NumberToStrX(dfArztNr.Number, 0), 4) + "\\H" + Int.PalStrNullen(Sal.NumberToStrX(dfHalterNr.Number, 0), 5) + "\\*.*", Sys.FA_Standard, sFiles);
					if (Var.nCount > 0) 
					{
						pbHDA.SetText(Var.nCount.ToString(0));
					}
					else if (Var.nCount <= 0) 
					{
						pbHDA.SetText("-");
					}
					// 05.11.21 Ä1976
					Var.nCount = Vis.DosEnumFiles(Var.strPfadArchiv + Sql.Database + "\\" + "A" + Int.PalStrNullen(Int.PalCheckLarztnr(dfArztNr.Number).ToString(0), 4) + "\\H" + Int.PalStrNullen(Sal.NumberToStrX(dfHalterNr.Number, 0), 5) + "\\PR" + Sal.NumberToStrX(
							dfProzNr.Number, 0) + "\\*.*", Sys.FA_Standard, sFiles);
					if (Var.nCount > 0) 
					{
						pbHDPR.SetText(Var.nCount.ToString(0));
					}
					else if (Var.nCount <= 0) 
					{
						pbHDPR.SetText("-");
					}
				}
				else
				{
					Sal.MessageBox("Arzt- oder Halter-Nr. ist 0 oder leer", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
				this.SetStatusBarText("");
				Sal.WaitCursor(false);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Setze Zahlungsart etc.
		/// </summary>
		/// <returns></returns>
		public SalNumber PalFuelleInfos()
		{
			#region Local Variables
			SalBoolean bExists = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				pbRDA.SetText("");
				dfZahlArt.Text = Int.PalZahlArt(dfSZahlKZ.Number);
				if (dfSZahlKZ.Number >= 2) 
				{
					Sal.ColorSet(dfZahlArt, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
					Sal.ColorSet(dfSRestOP, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
				}
				else
				{
					Sal.ColorSet(dfZahlArt, Sys.COLOR_IndexWindow, Sys.COLOR_Red);
					Sal.ColorSet(dfSRestOP, Sys.COLOR_IndexWindow, Sys.COLOR_Red);
				}
				if (Sal.IsNull(dfSRestOP)) 
				{
					Sal.HideWindowAndLabel(dfSRestOP);
				}
				else
				{
					Sal.ShowWindowAndLabel(dfSRestOP);
				}
				dfMMS.Number = dfSMahnst.Number;
				dfMTeilzDat.DateTime = dfSTeilzDat.DateTime;
				if (dfArztNr.Number != naltArzt) 
				{
					this.SetStatusBarText("Hole Arztname ...");
					// 01.11.16 Ä1437 + , aewaabeur, aewavariante
					Int.SqlImmedSel(@"SELECT aname1, aname2, aemail, atelpraxis, atelprivat, atelhandy, atelfax, amatch, aewaabeur, aewavariante   from a
into :frmRgSuchen.dfArztName, :frmRgSuchen.dfArztName2,
:frmRgSuchen.dfAEMail, :frmRgSuchen.strTATelPraxis, :frmRgSuchen.strTATelPrivat, :frmRgSuchen.strTATelHandy, :frmRgSuchen.strTATelFax, :frmRgSuchen.dfAMC,
:frmRgSuchen.nEWAabEUR, :frmRgSuchen.nEWAVariante
where aarztnr= " + Sal.NumberToStrX(dfArztNr.Number, 0));
					dfAZust.Text = Int.PalZust(dfArztNr.Number);
					// 09.08.02
					dfATel.Text = "";
					dfATel2.Text = "";
					if (strTATelPraxis != "") 
					{
						dfATel.Text = "Praxis:" + strTATelPraxis;
					}
					if (strTATelPrivat != "") 
					{
						dfATel.Text = dfATel.Text + " · Privat:" + strTATelPrivat;
					}
					if (strTATelHandy != "") 
					{
						dfATel2.Text = dfATel2.Text + " Handy:" + strTATelHandy;
					}
					if (strTATelFax != "") 
					{
						dfATel2.Text = dfATel2.Text + " · Fax:" + strTATelFax;
					}
					// 01.11.16 Ä1437 + , aewaabeur, aewavariante
					// Set bkgdEWAInfo = ''
					// If nEWAVariante = 1
					// Set bkgdEWAInfo = 'EWA sofort'
					// Else If nEWAVariante = 2
					// Set bkgdEWAInfo = 'EWA nur nach Rücksprache mit M'
					// Else
					// Set bkgdEWAInfo = 'EWA nach 14 Tagen Wartezeit'
					// If nEWAabEUR != 0 and nEWAabEUR != NUMBER_Null
					// Set bkgdEWAInfo = bkgdEWAInfo || ' - EWA nur ab € ' || SalNumberToStrX( nEWAabEUR, 2 )

				}
				naltArzt = dfArztNr.Number;
				if (dfHalterNr.Number != naltHalter) 
				{
					PalFuelleInfosH();
				}
				naltHalter = dfHalterNr.Number;
				this.SetStatusBarText("Zahlungen ?  ...");

				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalBoolean temp1 = cbZahlungen.Checked;
				Int.SqlIstDa(@" FROM ZA
WHERE zaarztnr =" + Sal.NumberToStrX(dfArztNr.Number, 0) + @" AND zadeaktiv IS NULL
and zahalternr=" + Sal.NumberToStrX(dfHalterNr.Number, 0) + @"
and zarechnr=" + Sal.NumberToStrX(dfSRgNr.Number, 0), ref temp1);
				cbZahlungen.Checked = temp1;

				if (cbZahlungen.Checked == true) 
				{
					Sal.ColorSet(cbZahlungen, Sys.COLOR_IndexWindow, Sys.COLOR_Yellow);
				}
				else
				{
					Sal.ColorSet(cbZahlungen, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				}
				this.SetStatusBarText("Mahnungen ?  ...");

				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalBoolean temp2 = cbMahnungen.Checked;
				Int.SqlIstDa(@" FROM MA
WHERE maarztnr =" + Sal.NumberToStrX(dfArztNr.Number, 0) + @" AND madeaktiv IS NULL
and marechnr=" + this.dfSRgNr.Number.ToString(0), ref temp2);
				cbMahnungen.Checked = temp2;

				if (cbMahnungen.Checked == true) 
				{
					Sal.ColorSet(cbMahnungen, Sys.COLOR_IndexWindow, Sys.COLOR_Blue);
				}
				else
				{
					Sal.ColorSet(cbMahnungen, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				}
				this.SetStatusBarText("Kopie ?  ...");

				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalBoolean temp3 = cbRechPos.Checked;
				Int.SqlIstDa(" FROM RP WHERE rparztnr=" + Sal.NumberToStrX(dfArztNr.Number, 0) + @"
and rprechnr=" + this.dfSRgNr.Number.ToString(0), ref temp3);
				cbRechPos.Checked = temp3;

				if (cbRechPos.Checked == true) 
				{
					Sal.ColorSet(cbRechPos, Sys.COLOR_IndexWindow, Sys.COLOR_Magenta);
				}
				else
				{
					Sal.ColorSet(cbRechPos, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				}

				this.SetStatusBarText("Zettel für Rechng. ?  ...");

				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalBoolean temp4 = this.cbZettelRg.Checked;
				Int.SqlIstDa(" FROM Z WHERE zarztnr =" + Sal.NumberToStrX(dfArztNr.Number, 0) + @" AND zdeaktiv IS NULL
and zhalternr=" + Sal.NumberToStrX(dfHalterNr.Number, 0) + @"
and zrechnr=" + this.dfSRgNr.Number.ToString(0), ref temp4);
				this.cbZettelRg.Checked = temp4;

				if (cbZettelRg.Checked == true) 
				{
					Sal.ColorSet(cbZettelRg, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
				}
				else
				{
					Sal.ColorSet(cbZettelRg, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				}
				// 27.08.18 Ä1769
				cbRechPDF.Checked = Vis.DosExist(Var.strPfadArchiv + Sql.Database + "-Rechnungen\\" + "A" + Int.PalStrNullen(Sal.NumberToStrX(dfArztNr.Number, 0), 4) + "\\" + "R" + Int.PalStrNullen(Sal.NumberToStrX(dfSRgNr.Number, 0), 6) + "\\*.pdf");
				if (cbRechPDF.Checked == true) 
				{
					Sal.ColorSet(cbRechPDF, Sys.COLOR_IndexWindow, Sys.COLOR_Magenta);
					Sal.EnableWindow(cbRechPDF);
				}
				else
				{
					Sal.ColorSet(cbRechPDF, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
					Sal.DisableWindow(cbRechPDF);
				}
				// 24.11.04
				this.SetStatusBarText("Rechnung abgegeben ? ...");
				Int.SqlIstDa(" FROM RA WHERE raarztnr =" + Sal.NumberToStrX(dfArztNr.Number, 0) + @"
and rahalternr=" + Sal.NumberToStrX(dfHalterNr.Number, 0) + @"
and rarechnr=" + this.dfSRgNr.Number.ToString(0), ref bExist);
				if (bExist == true) 
				{
					pbRAab.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Yellow);
					pbRAab.SetText("RA Abg. ändern?");
				}
				else
				{
					pbRAab.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
					pbRAab.SetText("an RA abg.");
				}
				// 29.03.10 OTÄ135
				// 25.06.10 OTÄ432 in Halter verschoben
				// Call SalStatusSetText(frmRgSuchen,'Ratenzahler ? ...')
				// Call SqlIstDa(' FROM rz, rzp WHERE rznr=rzpnr AND rzkuenddat IS NULL AND
				// rzparztnr =' || SalNumberToStrX(dfArztNr,0) || '
				// and rzphalternr=' || SalNumberToStrX(dfHalterNr,0) || '
				// and rzprechnr=' || SalNumberToStrX( frmRgSuchen.dfSRgNr,0) ,bExist)
				// If bExist=TRUE
				// Call SalColorSet(cbRaZa,COLOR_IndexWindow,COLOR_Purple)
				// Call SqlImmedSel('SELECT rznr INTO :frmRgSuchen.dfRZNr FROM rz, rzp WHERE rznr=rzpnr AND rzkuenddat IS NULL AND
				// rzparztnr =' || SalNumberToStrX(dfArztNr,0) || '
				// and rzphalternr=' || SalNumberToStrX(dfHalterNr,0) || '
				// and rzprechnr=' || SalNumberToStrX( frmRgSuchen.dfSRgNr,0))
				// Else
				// Call SalColorSet(cbRaZa,COLOR_IndexWindow,COLOR_3DFace)
				// 25.10.10
				Var.nCount = Vis.DosEnumFiles(Var.strPfadArchiv + Sql.Database + "\\" + "A" + Int.PalStrNullen(Sal.NumberToStrX(dfArztNr.Number, 0), 4) + "\\H" + Int.PalStrNullen(Sal.NumberToStrX(dfHalterNr.Number, 0), 5) + "\\R" + Int.PalStrNullen(Sal.NumberToStrX(
							dfSRgNr.Number, 0), 6) + "\\*.*", Sys.FA_Standard, sFiles);
				if (Var.nCount > 0) 
				{
					pbRDA.SetText(Var.nCount.ToString(0));
				}
				else if (Var.nCount <= 0) 
				{
					pbRDA.SetText("-");
				}
				// 03.07.19 Ä1854 + Vorshussminderung
				// 		rkvorschussdm, rkvorschussdat, rkvorschussrueckdm, rkvorschussrueckdat, rkvorschussrueckgrund
				mlVoMi.Text = "";
				if (dtVorschussDat != SalDateTime.Null) 
				{
					mlVoMi.Text = Int.PalDateToStrDE(dtVorschussDat) + ": Vorschuss € " + Int.PalStrNum(nVorschussDM, 8, 2);
					if (dtVorschussDatRueck != SalDateTime.Null) 
					{
						mlVoMi.Text = mlVoMi.Text + @"
" + Int.PalDateToStrDE(dtVorschussDatRueck) + ": Vorschussmindg. um € " + Int.PalStrNum(nVorschussDMRueck, 8, 2) + " wegen " + strVorschussRueckGrund;
					}
					Sal.ShowWindow(mlVoMi);
				}
				else
				{
					Sal.HideWindow(mlVoMi);
				}
				// 01.08.23 Ä2107 Versicherung
				// If strVeCode = ''
				// Set dfVeVSNr = ''
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Ermittle die Where-Klausel
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalFuelleWhere()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (!(Sal.IsNull(dfArztNr))) 
				{
					nArztNr = dfArztNr.Number;
					Int.SqlImmedSel("SELECT ANR2 INTO :frmRgSuchen.nArztNr2 FROM A WHERE AARZTNR = " + Sal.NumberToStrX(dfArztNr.Number, 0));
					if (nArztNr2 == 0) 
					{
						nArztNr2 = dfArztNr.Number;
					}
				}
				else
				{
					nArztNr2 = dfArztNr.Number;
				}
				if (!(Sal.IsNull(dfRgNr))) 
				{
					if (!(Sal.IsNull(dfArztNr))) 
					{
						if (Sal.IsNull(dfHalterNr)) 
						{
							strSelectRg = strSelectRgI + " where rkarztnr = " + Sal.NumberToStrX(dfArztNr.Number, 0) + "  and rkrechnr = " + Sal.NumberToStrX(dfRgNr.Number, 0);
						}
						else
						{
							strSelectRg = strSelectRgI + " where rkarztnr = " + Sal.NumberToStrX(dfArztNr.Number, 0) + @"
			    and rkrechnr = " + Sal.NumberToStrX(dfRgNr.Number, 0) + @"
			    and rkhalternr = " + Sal.NumberToStrX(dfHalterNr.Number, 0);
						}
						return true;
					}
					else if (!(Sal.IsNull(dfHalterNr))) 
					{
						strSelectRg = strSelectRgI + @"
where rkhalternr = " + Sal.NumberToStrX(dfHalterNr.Number, 0) + " and rkrechnr = " + Sal.NumberToStrX(dfRgNr.Number, 0);
						return true;
					}
					else if (!(Sal.IsNull(dfHalterName))) 
					{
						strSelectRg = strSelectRgI + @",h
where rkhalternr=hhalternr and rkarztnr=harztnr and rkrechnr = " + Sal.NumberToStrX(dfRgNr.Number, 0) + @"
and @soundex(hnn) = @soundex( :frmRgSuchen.dfHalterName)";
						return true;
					}
					else
					{
						strSelectRg = strSelectRgI + @"
where rkrechnr = " + Sal.NumberToStrX(dfRgNr.Number, 0);
						return true;
					}
				}
				else if (!(Sal.IsNull(dfHalterNr))) 
				{
					// If Not SalIsNull(dfArztNr)
					// Set strSelectRg = strSelectRgI || '
					// where (rkarztnr = :frmRgSuchen.dfArztNr or rkarztnr = :frmRgSuchen.nArztNr2) and rkhalternr = :frmRgSuchen.dfHalterNr'
					// Return TRUE
					if (!(Sal.IsNull(dfArztNr))) 
					{
						strSelectRg = strSelectRgI + @"
where " + Int.PalArztNr("rk", nArztNr, nArztNr2) + " and rkhalternr = " + Sal.NumberToStrX(dfHalterNr.Number, 0);
						return true;
					}
					else
					{
						strSelectRg = strSelectRgI + @"
where rkhalternr = " + Sal.NumberToStrX(dfHalterNr.Number, 0);
						return true;
					}
				}
				else
				{
					this.SetStatusBarText("Bitte geben Sie Halternr, -Name oder Rg.Nr. an !");
					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// Leert die Maskenfelder
		/// </summary>
		/// <returns></returns>
		public SalNumber PalLeereFelder()
		{
			#region Actions
			using (new SalContext(this))
			{
				axShell.Enabled = false;
				Sal.ClearField(dfQuick);
				Sal.ClearField(dfArztNr);
				Sal.ClearField(dfArztName);
				Sal.ClearField(dfATel);
				Sal.ClearField(dfATel2);
				Sal.ClearField(dfAEMail);
				Sal.ClearField(dfAMC);
				Sal.ClearField(dfAZust);
				Sal.ClearField(dfArztName2);
				// 13.01.14 Ä1002
				Sal.ClearField(mlSperrinfo);

				Sal.ClearField(dfHalterNr);
				Sal.ClearField(dfHalterName);
				Sal.ClearField(dfHalterVN);
				Sal.ClearField(dfHalterPLZ);
				Sal.ClearField(dfSHalterName);
				Sal.ClearField(dfSHalterName2);
				Sal.ClearField(dfSHalterStr);
				Sal.ClearField(dfSHalterOrt);
				Sal.ClearField(dfSCredoneg);
				Sal.ClearField(dfSArbeitgeber);
				Sal.ClearField(dfSMolkerei);
				Sal.ClearField(dfSBLZ);
				Sal.ClearField(dfSKonto);
				Sal.ClearField(dfSTel);
				Sal.ClearField(mlHInfo);
				Sal.ClearField(dfRgNr);
				Sal.ClearField(dfSRgNr);
				Sal.ClearField(dfSBuchtext);
				Sal.ClearField(dfSRgDat);
				Sal.ClearField(dfSFaellDat);
				Sal.ClearField(dfSMwstKz);
				Sal.ClearField(dfSDMLeis);
				Sal.ClearField(dfSDMArzn);
				Sal.ClearField(dfSDMMahn);
				Sal.ClearField(dfSDMMB);
				Sal.ClearField(dfSDMZins);
				Sal.ClearField(dfSMahnst);
				Sal.ClearField(dfSDatMahn);
				Sal.ClearField(dfSDatMahnltzt);
				Sal.ClearField(dfSZALeis);
				Sal.ClearField(dfSZAArzn);
				Sal.ClearField(dfSZAMahn);
				Sal.ClearField(dfSZAMB);
				Sal.ClearField(dfSZAZins);
				Sal.ClearField(dfSTeilzDat);
				Sal.ClearField(dfSRestOP);
				Sal.ClearField(dfSVerj);
				Sal.ClearField(dfSZahlKZ);
				Sal.ClearField(dfRowID);
				Sal.ClearField(dfZahlArt);
				Sal.ClearField(dfSHalterSaldo);
				Sal.ClearField(dfSArztSaldo);
				Sal.ClearField(dfSArztOP);
				// 11.07.11 F959
				Sal.ClearField(dfProzNr);
				Sal.ClearField(dfSHalterSaldoHaBu);
				// 25.02.19 F3137
				Sal.ClearField(dfSHalterSaldoHaBuEinzug);
				// 29.10.14 Ä1115 + SpezifiRg
				cbSpezifiRg.Checked = false;
				// 03.07.19 Ä1854
				Sal.ClearField(mlVoMi);

				tblHZahlungen.ResetTable();
				tblHTagebuch.ResetTable();
				tblHZettel.ResetTable();
				tblHMahnungen.ResetTable();
				tblHSuche.ResetTable();
				pbRAab.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				pbRAab.SetText("an RA abg.");
				Sal.ColorSet(cbZahlungen, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				cbZahlungen.Checked = false;
				Sal.ColorSet(cbMahnungen, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				cbMahnungen.Checked = false;
				Sal.ColorSet(cbRechPos, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				cbRechPos.Checked = false;
				// 27.08.18 Ä1769
				Sal.ColorSet(cbRechPDF, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				cbRechPDF.Checked = false;

				Sal.ColorSet(cbZettelRg, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				cbZettelRg.Checked = false;
				// Call SalColorSet(cbRaten ,COLOR_IndexWindow,COLOR_3DFace)
				// Set cbRaten = FALSE
				Sal.ColorSet(cbTagebuch, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				cbTagebuch.Checked = false;
				Sal.ColorSet(cbPR, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				cbPR.Checked = false;
				Sal.ColorSet(cbFA, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				cbFA.Checked = false;
				Sal.ColorSet(cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				cbZettel.Checked = false;
				Sal.ColorSet(dfSRestOP, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				dfSRestOP.Number = Sys.NUMBER_Null;
				Sal.ColorSet(dfZahlArt, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				dfZahlArt.Text = "";
				Sal.ColorSet(dfSRgNr, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				dfSRgNr.Number = Sys.NUMBER_Null;
				Sal.ColorSet(dfArztNr, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				dfArztNr.Number = Sys.NUMBER_Null;
				Sal.ColorSet(dfSBuchtext, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				dfSBuchtext.Text = "";
				Sal.ColorSet(dfSHalterSaldo, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				dfSHalterSaldo.Number = Sys.NUMBER_Null;
				dfSVirtKonto.Text = "";
				// 17.03.10 OTÄ397
				cbReverse.Checked = false;
				// 30.03.10 OTÄ135
				Sal.ColorSet(cbRaZa, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				// 29.07.10 F424
				Sal.ClearField(dfRZNr);
				Sal.ClearField(dfARaZa);

				dfEWAVariante.Text = "";
				// 01.08.23 Ä2107 Versicherung
				// Set strVeCode = ''
				Sal.ClearField(cmbVECode);
				Sal.ClearField(dfVeVSNr);

				naltArzt = 0;
				naltHalter = 0;
			}

			return 0;
			#endregion
		}
		// 27.09.06 F65
		/// <summary>
		/// Leert die Maskenfelder der Rechnungsdaten
		/// </summary>
		/// <returns></returns>
		public SalNumber PalLeereHalterFelder()
		{
			#region Actions
			using (new SalContext(this))
			{
				axShell.Enabled = false;
				Sal.ClearField(dfHalterName);
				Sal.ClearField(dfHalterVN);
				Sal.ClearField(dfHalterPLZ);
				Sal.ClearField(dfSHalterName);
				Sal.ClearField(dfSHalterName2);
				Sal.ClearField(dfSHalterStr);
				Sal.ClearField(dfSHalterOrt);
				Sal.ClearField(dfSCredoneg);
				Sal.ClearField(dfSArbeitgeber);
				Sal.ClearField(dfSMolkerei);
				Sal.ClearField(dfSBLZ);
				Sal.ClearField(dfSKonto);
				Sal.ClearField(dfSTel);
				Sal.ClearField(mlHInfo);
				Sal.ClearField(dfRgNr);
				Sal.ClearField(dfSRgNr);
				Sal.ClearField(dfSBuchtext);
				Sal.ClearField(dfSRgDat);
				Sal.ClearField(dfSFaellDat);
				Sal.ClearField(dfSMwstKz);
				Sal.ClearField(dfSDMLeis);
				Sal.ClearField(dfSDMArzn);
				Sal.ClearField(dfSDMMahn);
				Sal.ClearField(dfSDMMB);
				Sal.ClearField(dfSDMZins);
				Sal.ClearField(dfSMahnst);
				Sal.ClearField(dfSDatMahn);
				Sal.ClearField(dfSDatMahnltzt);
				Sal.ClearField(dfSZALeis);
				Sal.ClearField(dfSZAArzn);
				Sal.ClearField(dfSZAMahn);
				Sal.ClearField(dfSZAMB);
				Sal.ClearField(dfSZAZins);
				Sal.ClearField(dfSTeilzDat);
				Sal.ClearField(dfSRestOP);
				Sal.ClearField(dfSVerj);
				Sal.ClearField(dfSZahlKZ);
				Sal.ClearField(dfRowID);
				Sal.ClearField(dfZahlArt);
				Sal.ClearField(dfSHalterSaldo);
				Sal.ClearField(dfSArztSaldo);
				Sal.ClearField(dfSArztOP);
				// 11.07.11 F959
				Sal.ClearField(dfSHalterSaldoHaBu);
				// 25.02.19 F3137
				Sal.ClearField(dfSHalterSaldoHaBuEinzug);
				// 29.10.14 Ä1115 + SpezifiRg
				cbSpezifiRg.Checked = false;
				// 03.07.19 Ä1854
				Sal.ClearField(mlVoMi);


				tblHZahlungen.ResetTable();
				tblHTagebuch.ResetTable();
				tblHZettel.ResetTable();
				tblHMahnungen.ResetTable();
				pbRAab.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				pbRAab.SetText("an RA abg.");
				Sal.ColorSet(cbZahlungen, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				cbZahlungen.Checked = false;
				Sal.ColorSet(cbMahnungen, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				cbMahnungen.Checked = false;
				Sal.ColorSet(cbRechPos, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				cbRechPos.Checked = false;
				// 27.08.18 Ä1769
				Sal.ColorSet(cbRechPDF, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				cbRechPDF.Checked = false;

				Sal.ColorSet(cbZettelRg, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				cbZettelRg.Checked = false;
				// Call SalColorSet(cbRaten ,COLOR_IndexWindow,COLOR_3DFace)
				// Set cbRaten = FALSE
				Sal.ColorSet(cbTagebuch, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				cbTagebuch.Checked = false;
				Sal.ColorSet(cbPR, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				cbPR.Checked = false;
				Sal.ColorSet(cbFA, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				cbFA.Checked = false;
				Sal.ColorSet(cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				cbZettel.Checked = false;
				Sal.ColorSet(dfSRestOP, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				dfSRestOP.Number = Sys.NUMBER_Null;
				Sal.ColorSet(dfZahlArt, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				dfZahlArt.Text = "";
				Sal.ColorSet(dfSRgNr, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				dfSRgNr.Number = Sys.NUMBER_Null;
				Sal.ColorSet(dfSBuchtext, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				dfSBuchtext.Text = "";
				Sal.ColorSet(dfSHalterSaldo, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				dfSHalterSaldo.Number = Sys.NUMBER_Null;
				// 17.03.10 OTÄ397
				cbReverse.Checked = false;
				// 30.03.10 OTÄ135
				Sal.ColorSet(cbRaZa, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);

				naltArzt = 0;
				naltHalter = 0;
				// 03.04.07
				Sal.ColorSet(dfSCredoneg, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				Sal.ColorSet(dfSCredoneg, Sys.COLOR_IndexWindowText, Sys.COLOR_Red);
				// 01.08.23 Ä2107 Versicherung
				// Set strVeCode = ''
				Sal.ClearField(cmbVECode);

			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalFuelleZahlungen()
		{
			#region Actions
			using (new SalContext(this))
			{
				this.SetStatusBarText("Tab: Zahlungen Halter");
				// Call SqlConnection(hSqlZa)
				// 20.01.14 Ä1005
				// Call SqlCreateSession(hSession,'')
				// If SqlCreateStatement (hSession, hSqlZa)
				// If SqlSetIsolationLevel(hSqlZa,'RO')
				Int.SqlConnection(ref hSqlZa);

				// 10.12.12 Ä826 + zarznr
				if (tblHZahlungen.Populate(hSqlZa, @"select zaarztnr, zarechnr, zabuchdat,zabelegnr,zadm,zakz, zabuchtext, zaproznr, zarznr from za
into :frmRgSuchen.tblHZahlungen.colnZAArztNr,  :frmRgSuchen.tblHZahlungen.colnZARechNr,
:frmRgSuchen.tblHZahlungen.coldtZADat,:frmRgSuchen.tblHZahlungen.colnZABelNr,
:frmRgSuchen.tblHZahlungen.colnZADM,:frmRgSuchen.tblHZahlungen.colnZAKZ, :frmRgSuchen.tblHZahlungen.colsZABuchtext,
:frmRgSuchen.tblHZahlungen.colnZAProzNr, :frmRgSuchen.tblHZahlungen.colnZARZNr
where  " + Int.PalArztNr("za", nArztNr, nArztNr2) + " and zahalternr= " + Sal.NumberToStrX(dfHalterNr.Number, 0) + @" AND zadeaktiv IS NULL
order by zabuchdat DESC, zaerfdat DESC", Sys.TBL_FillAll)) 
				{
					// Call SqlDisconnect(hSqlZa)
				}
				// 20.01.14 Ä1005
				hSqlZa.Disconnect();
				// Call SqlFreeSession( hSession )

				this.SetStatusBarText("");
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalFuelleZettel()
		{
			#region Actions
			using (new SalContext(this))
			{
				this.SetStatusBarText("Tab: Zettel Halter");
				// Call SqlConnection(hSqlZa)
				// If SalTblPopulate( tblHZettel,hSqlZa,
				// 'SELECT zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
				// INTO :tblHZettel.colsVon, :tblHZettel.colsAn, :tblHZettel.colnRechNr, :tblHZettel.collsBemerk, :tblHZettel.coldtDatum, :tblHZettel.colsErl
				// WHERE  ' || PalArztNr('z', nArztNr, nArztNr2) || '  AND zhalternr = ' || SalNumberToStrX(dfHalterNr,0) || ' ORDER BY zdatum DESC',TBL_FillAll )
				// Call SqlDisconnect(hSqlZa)
				// 20.01.14 Ä1005
				// Call SqlCreateSession(hSession,'')
				// If SqlCreateStatement (hSession, hSqlZa)
				// If SqlSetIsolationLevel(hSqlZa,'RO')
				Int.SqlConnection(ref hSqlZa);

				if (tblHZettel.Populate(hSqlZa, @"SELECT zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
INTO :tblHZettel.colsVon, :tblHZettel.colsAn, :tblHZettel.colnRechNr, :tblHZettel.collsBemerk, :tblHZettel.coldtDatum, :tblHZettel.colsErl
WHERE  (zarztnr=:frmRgSuchen.nArztNr OR zarztnr=:frmRgSuchen.nArztNr2)  AND zhalternr = :frmRgSuchen.dfHalterNr AND zdeaktiv IS NULL ORDER BY zdatum DESC, zerfdat DESC", Sys.TBL_FillAll)) 
				{
					// Call SqlDisconnect(hSqlZa)
				}
				// 20.01.14 Ä1005
				hSqlZa.Disconnect();
				// Call SqlFreeSession( hSession )

				this.SetStatusBarText("");
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalFuelleTagebuch()
		{
			#region Actions
			using (new SalContext(this))
			{
				this.SetStatusBarText("Tab: Tagebuch Halter");
				// Call SqlConnection(hSqlZa)
				// 20.01.14 Ä1005
				// Call SqlCreateSession(hSession,'')
				// If SqlCreateStatement (hSession, hSqlZa)
				// If SqlSetIsolationLevel(hSqlZa,'RO')
				Int.SqlConnection(ref hSqlZa);

				if (tblHTagebuch.Populate(hSqlZa, @"SELECT akarztnr,akhalternr, akrechnr, akdatum, aktyp, aktypdetail, akdm, akproznr
INTO :frmRgSuchen.tblHTagebuch.colnArztNr,
:frmRgSuchen.tblHTagebuch.colnHalterNr,
:frmRgSuchen.tblHTagebuch.colnRechNr,
:frmRgSuchen.tblHTagebuch.coldtDatum,
:frmRgSuchen.tblHTagebuch.colsTyp,
:frmRgSuchen.tblHTagebuch.colsTypDetail,
:frmRgSuchen.tblHTagebuch.colnDM,
:frmRgSuchen.tblHTagebuch.colnProzNr
FROM ak WHERE  " + Int.PalArztNr("ak", nArztNr, nArztNr2) + "  AND akhalternr = " + Sal.NumberToStrX(dfHalterNr.Number, 0) + " AND akdeaktiv IS NULL ORDER BY akdatum DESC", Sys.TBL_FillAll)) 
				{
					// Call SqlDisconnect(hSqlZa)
				}
				// 20.01.14 Ä1005
				hSqlZa.Disconnect();
				// Call SqlFreeSession( hSession )

				this.SetStatusBarText("");
			}

			return 0;
			#endregion
		}
		// Function: PalFuelleZahlungenA
		// Description:
		// Returns
		// Parameters
		// Static Variables
		// Local variables
		// Actions
		// Call SalStatusSetText(frmRgSuchen,'Tab: Zahlungen Halter')
		// Call SqlConnection(hSqlZa)
		// 10.12.12 Ä826 + zarznr
		// 20.01.14 Ä1005
		// Call SqlCreateSession(hSession,'')
		// If SqlCreateStatement (hSession, hSqlZa)
		// If SqlSetIsolationLevel(hSqlZa,'RO')
		// Call SqlConnection( hSqlZa )
		// If SalTblPopulate(tblHZahlungen,hSqlZa,
		// 'select zaarztnr, zarechnr, zabuchdat,zabelegnr,zadm,zakz, zabuchtext, zaproznr, zarznr from za
		// into :frmRgSuchen.tblHZahlungen.colnZAArztNr,  :frmRgSuchen.tblHZahlungen.colnZARechNr,
		// :frmRgSuchen.tblHZahlungen.coldtZADat,:frmRgSuchen.tblHZahlungen.colnZABelNr,
		// :frmRgSuchen.tblHZahlungen.colnZADM,:frmRgSuchen.tblHZahlungen.colnZAKZ, :frmRgSuchen.tblHZahlungen.colsZABuchtext,
		// :frmRgSuchen.tblHZahlungen.colnZAProzNr, :frmRgSuchen.tblHZahlungen.colnZARZNr
		// where  ' || PalArztNr('za', nArztNr, nArztNr2) || '
		// order by zabuchdat DESC',TBL_FillAll)
		// Call SqlDisconnect(hSqlZa)
		// 20.01.14 Ä1005
		// Call SqlDisconnect( hSqlZa )
		// Call SqlFreeSession( hSession )
		// Call SalStatusSetText(frmRgSuchen,'')
		// Function: PalFuelleZettelA
		// Description:
		// Returns
		// Parameters
		// Static Variables
		// Local variables
		// Actions
		// Call SalStatusSetText(frmRgSuchen,'Tab: Zettel Halter')
		// Call SqlConnection(hSqlZa)
		// 20.01.14 Ä1005
		// Call SqlCreateSession(hSession,'')
		// If SqlCreateStatement (hSession, hSqlZa)
		// If SqlSetIsolationLevel(hSqlZa,'RO')
		// Call SqlConnection( hSqlZa )
		// If SalTblPopulate( tblHZettel,hSqlZa,
		// 'SELECT zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
		// INTO :tblHZettel.colsVon, :tblHZettel.colsAn, :tblHZettel.colnRechNr, :tblHZettel.collsBemerk, :tblHZettel.coldtDatum, :tblHZettel.colsErl
		// WHERE  ' || PalArztNr('z', nArztNr, nArztNr2) || '  ORDER BY zdatum DESC, zerfdat DESC',TBL_FillAll )
		// Call SqlDisconnect(hSqlZa)
		// 20.01.14 Ä1005
		// Call SqlDisconnect( hSqlZa )
		// Call SqlFreeSession( hSession )
		// Call SalStatusSetText(frmRgSuchen,'')
		// Function: PalFuelleTagebuchA
		// Description:
		// Returns
		// Parameters
		// Static Variables
		// Local variables
		// Actions
		// Call SalStatusSetText(frmRgSuchen,'Tab: Tagebuch Halter')
		// Call SqlConnection(hSqlZa)
		// 20.01.14 Ä1005
		// Call SqlCreateSession(hSession,'')
		// If SqlCreateStatement (hSession, hSqlZa)
		// If SqlSetIsolationLevel(hSqlZa,'RO')
		// Call SqlConnection( hSqlZa )
		// If SalTblPopulate( tblHTagebuch, hSqlZa,
		// 'SELECT akarztnr,akhalternr, akrechnr, akdatum, aktyp, aktypdetail, akdm, akproznr
		// INTO :frmRgSuchen.tblHTagebuch.colnArztNr,
		// :frmRgSuchen.tblHTagebuch.colnHalterNr,
		// :frmRgSuchen.tblHTagebuch.colnRechNr,
		// :frmRgSuchen.tblHTagebuch.coldtDatum,
		// :frmRgSuchen.tblHTagebuch.colsTyp,
		// :frmRgSuchen.tblHTagebuch.colsTypDetail,
		// :frmRgSuchen.tblHTagebuch.colnDM,
		// :frmRgSuchen.tblHTagebuch.colnProzNr
		// FROM ak WHERE  ' || PalArztNr('ak', nArztNr, nArztNr2) || '  ORDER BY akdatum DESC', TBL_FillAll)
		// Call SqlDisconnect(hSqlZa)
		// 20.01.14 Ä1005
		// Call SqlDisconnect( hSqlZa )
		// Call SqlFreeSession( hSession )
		// Call SalStatusSetText(frmRgSuchen,'')
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalFuelleMahnungen()
		{
			#region Actions
			using (new SalContext(this))
			{
				this.SetStatusBarText("Tab: Mahnungen");
				// Call SqlConnection(hSqlZa)
				// 20.01.14 Ä1005
				// Call SqlCreateSession(hSession,'')
				// If SqlCreateStatement (hSession, hSqlZa)
				// If SqlSetIsolationLevel(hSqlZa,'RO')
				Int.SqlConnection(ref hSqlZa);

				// 26.02.19 Ä1827 + manr
				//FC:FINAL:#i12 remove .. from sql statemnts
				tblHMahnungen.Populate(hSqlZa, @"select maarztnr, marechnr, madatum, madmgeb, mams, manr
from ma, rk
into :frmRgSuchen.tblHMahnungen.colnArztNr, :frmRgSuchen.tblHMahnungen.colnRechNr, :frmRgSuchen.tblHMahnungen.coldtMADat,
:frmRgSuchen.tblHMahnungen.colnMADM,:frmRgSuchen.tblHMahnungen.colnMAMS, :frmRgSuchen.tblHMahnungen.colnMahnNr
WHERE  " + Int.PalArztNr("ma", nArztNr, nArztNr2) + "  AND rkhalternr = " + Sal.NumberToStrX(dfHalterNr.Number, 0) + @" AND rkrechnr<999990
AND maarztnr=rkarztnr AND marechnr=rkrechnr AND rkdeaktiv IS NULL AND madeaktiv IS NULL ORDER BY madatum desc", Sys.TBL_FillAll);
				// 20.01.14 Ä1005
				hSqlZa.Disconnect();
				// Call SqlFreeSession( hSession )

				// Call SqlDisconnect(hSqlZa)
			}

			return 0;
			#endregion
		}
		// 11.05.08
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalFuelleHaBu()
		{
			#region Actions
			using (new SalContext(this))
			{
				this.SetStatusBarText("Tab: Halterbuchhaltung");
				// 20.01.14 Ä1005
				// Call SqlCreateSession(hSession,'')
				// If SqlCreateStatement (hSession, hSqlZa)
				// If SqlSetIsolationLevel(hSqlZa,'RO')
				Int.SqlConnection(ref hSqlZa);

				if (dfHalterNr.Number == 0 || dfHalterNr.Number == Sys.NUMBER_Null) 
				{
				}
				else
				{
					// Call SqlConnection(hSqlZa)
					// If obKomp
					// If SalTblPopulate(tblHaBu,hSqlZa,
					// 'SELECT hbarztnr, hbhalternr, hbrechnr, hbproznr, hbrznr, hbbuchdat, hbbelegnr, hzakz, hberfdat, hbbuchtext, sum(hbdm)
					// FROM hb
					// INTO :frmRgSuchen.tblHaBu.colArzt, :frmRgSuchen.tblHaBu.colHalter, :frmRgSuchen.tblHaBu.colRech, :frmRgSuchen.tblHaBu.colPRNr, :frmRgSuchen.tblHaBu.colRZNr , :frmRgSuchen.tblHaBu.colBuchDat,
					// :frmRgSuchen.tblHaBu.colBelegNr, :frmRgSuchen.tblHaBu.colZaKz, :frmRgSuchen.tblHaBu.colErfDat,
					// :frmRgSuchen.tblHaBu.colBuchText, :frmRgSuchen.tblHaBu.colDM
					// WHERE  ' || PalArztNr('hb', nArztNr, nArztNr2) || ' and hbhalternr= ' || SalNumberToStrX(dfHalterNr,0) || '
					// GROUP BY 1,2,3,4,5,6,7,8,9,10
					// ORDER BY hbbuchdat DESC, hberfdat DESC',TBL_FillAll)
					// Call SqlDisconnect(hSqlZa)
					// Else
					if (tblHaBu.Populate(hSqlZa, @"SELECT hbcode, hbarztnr, hbhalternr, hbrechnr, hbproznr, hbrznr, hbbuchdat, hbbelegnr, hzakz, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext
FROM hb
INTO :frmRgSuchen.tblHaBu.colCode, :frmRgSuchen.tblHaBu.colArzt, :frmRgSuchen.tblHaBu.colHalter, :frmRgSuchen.tblHaBu.colRech, :frmRgSuchen.tblHaBu.colPRNr, :frmRgSuchen.tblHaBu.colRZNr , :frmRgSuchen.tblHaBu.colBuchDat,
:frmRgSuchen.tblHaBu.colBelegNr, :frmRgSuchen.tblHaBu.colZaKz, :frmRgSuchen.tblHaBu.colErfDat, :frmRgSuchen.tblHaBu.colDM,
:frmRgSuchen.tblHaBu.colSoll, :frmRgSuchen.tblHaBu.colHaben, :frmRgSuchen.tblHaBu.colBuchText
WHERE  " + Int.PalArztNr("hb", nArztNr, nArztNr2) + " and hbhalternr= " + Sal.NumberToStrX(dfHalterNr.Number, 0) + @"
ORDER BY hbbuchdat DESC", Sys.TBL_FillAll)) 
					{
						// Call SqlDisconnect(hSqlZa)
					}
				}
				// 20.01.14 Ä1005
				hSqlZa.Disconnect();
				// Call SqlFreeSession( hSession )

				this.SetStatusBarText("");
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bVari"></param>
		/// <returns></returns>
		public SalNumber PalFuelleHalter(SalBoolean bVari)
		{
			#region Local Variables
			SqlLocals.PalFuelleHalterLocals locals = new SqlLocals.PalFuelleHalterLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.bVari = bVari;

				Sal.WaitCursor(true);

				if (locals.bVari) 
				{
					if (dfArztNr.Number > 0) 
					{
						strSelectH = @"select @lics(hnn), harztnr,hhalternr, hnn || ', ' || hvn || ' ' || hti,hort, hland,hname2,hstr, hhalternein, hregnr
into :frmRgSuchen.tblHSuche.colstrNNLics, :frmRgSuchen.tblHSuche.colnArztNr, :frmRgSuchen.tblHSuche.colnHalterNr,
:frmRgSuchen.tblHSuche.colstrName, :frmRgSuchen.tblHSuche.colstrOrt, :frmRgSuchen.tblHSuche.colstrLand, :frmRgSuchen.tblHSuche.colstrName2, :frmRgSuchen.tblHSuche.colstrStrasse, :frmRgSuchen.tblHSuche.colnHalterNein,
:frmRgSuchen.tblHSuche.colsRegNr
from H
WHERE harztnr=:frmRgSuchen.dfArztNr AND";
					}
					else
					{
						strSelectH = @"select @lics(hnn), harztnr,hhalternr,hnn || ', ' || hvn || ' ' || hti,hort,hland, hname2,hstr, hhalternein, hregnr
into :frmRgSuchen.tblHSuche.colstrNNLics, :frmRgSuchen.tblHSuche.colnArztNr, :frmRgSuchen.tblHSuche.colnHalterNr,
:frmRgSuchen.tblHSuche.colstrName, :frmRgSuchen.tblHSuche.colstrOrt, :frmRgSuchen.tblHSuche.colstrLand, :frmRgSuchen.tblHSuche.colstrName2, :frmRgSuchen.tblHSuche.colstrStrasse, :frmRgSuchen.tblHSuche.colnHalterNein,
:frmRgSuchen.tblHSuche.colsRegNr
from H
WHERE";
					}
					strSelect1 = "";
					if (dfHalterName.Text != "") 
					{
						// 25.11.10 TVN3 und Umlaute
						// Set strSelect1 = strSelect1 || ' AND (@lics(hnn) LIKE \'%' || PalLics(dfHalterName) || '%\' OR @lics(hvn) LIKE \'%' || PalLics(dfHalterName) || '%\' )'
						strSelect1 = strSelect1 + " AND (@lics(hnn) LIKE @LICS(\'%" + dfHalterName.Text + "%\') OR @lics(hvn) LIKE @LICS(\'%" + dfHalterName.Text + "%\') )";
					}
					if (dfHalterVN.Text != "") 
					{
						strSelect1 = strSelect1 + " AND (@lics(hnn) LIKE @LICS(\'%" + dfHalterVN.Text + "%\') OR @lics(hvn) LIKE @LICS(\'%" + dfHalterVN.Text + "%\') )";
					}
					// 09.02.07 F124
					if (dfHalterPLZ.Text != "") 
					{
						strSelect1 = strSelect1 + @" AND
hort LIKE @LICS('" + dfHalterPLZ.Text + "%\') ";

					}
					// 18.02.14
					if (strSelect1.Length > 4) 
					{
						strSelect1 = strSelect1.Mid(4, 32000);
					}

					strSelectH = strSelectH + strSelect1 + " AND hdeaktiv IS NULL Order by 1, hvn";
				}
				else
				{
					// Set strName=strName||'%'
					if (dfArztNr.Number > 0) 
					{
						strSelectH = @"select @lics(hnn), harztnr,hhalternr, hnn || ', ' || hvn || ' ' || hti,hort,hland, hname2,hstr, hhalternein, hregnr
into :frmRgSuchen.tblHSuche.colstrNNLics, :frmRgSuchen.tblHSuche.colnArztNr, :frmRgSuchen.tblHSuche.colnHalterNr,
:frmRgSuchen.tblHSuche.colstrName, :frmRgSuchen.tblHSuche.colstrOrt, :frmRgSuchen.tblHSuche.colstrLand, :frmRgSuchen.tblHSuche.colstrName2, :frmRgSuchen.tblHSuche.colstrStrasse, :frmRgSuchen.tblHSuche.colnHalterNein,
:frmRgSuchen.tblHSuche.colsRegNr
from H
WHERE harztnr=:frmRgSuchen.dfArztNr AND";
					}
					else
					{
						strSelectH = @"select @lics(hnn), harztnr,hhalternr,hnn || ', ' || hvn || ' ' || hti,hort,hland, hname2,hstr, hhalternein, hregnr
into :frmRgSuchen.tblHSuche.colstrNNLics, :frmRgSuchen.tblHSuche.colnArztNr, :frmRgSuchen.tblHSuche.colnHalterNr,
:frmRgSuchen.tblHSuche.colstrName, :frmRgSuchen.tblHSuche.colstrOrt, :frmRgSuchen.tblHSuche.colstrLand, :frmRgSuchen.tblHSuche.colstrName2, :frmRgSuchen.tblHSuche.colstrStrasse, :frmRgSuchen.tblHSuche.colnHalterNein,
:frmRgSuchen.tblHSuche.colsRegNr
from H
WHERE";
					}
					strSelect1 = "";
					if (dfHalterVN.Text != "") 
					{
						strSelect1 = strSelect1 + @" AND
@soundex(hvn) = @soundex( :frmRgSuchen.dfHalterVN) ";
					}
					if (dfHalterPLZ.Text != "") 
					{
						// 09.02.07 F124
						// Set dfHalterPLZ = dfHalterPLZ || '%'
						// Set strSelect1 = strSelect1 ||
						// ' AND
						// hort LIKE :frmRgSuchen.dfHalterPLZ '
						strSelect1 = strSelect1 + @" AND
hort LIKE '" + dfHalterPLZ.Text + "%\' ";

					}
					if (dfHalterName.Text != "") 
					{
						strSelect1 = strSelect1 + @" AND
@soundex(hnn) = @soundex( :frmRgSuchen.dfHalterName) ";
					}
					// 18.02.14
					if (strSelect1.Length > 4) 
					{
						strSelect1 = strSelect1.Mid(4, 32000);
					}

					strSelectH = strSelectH + strSelect1 + " AND hdeaktiv IS NULL Order by 1, hvn";
				}
				if (strSelect1 != "") 
				{
					// If Not hSqlHalter
					// Call SqlConnection(hSqlHalter)
					// 20.12.07
					// If SqlCommit( hSqlHalter )
					// 20.01.14 Ä1005
					// Call SqlCreateSession(hSession,'')
					// If SqlCreateStatement (hSession, hSqlZa)
					// If SqlSetIsolationLevel(hSqlZa,'RO')
					Int.SqlConnection(ref hSqlZa);
					// 04.12.17 Ä1569
					nRowFind = -1;

					if (tblHSuche.Populate(hSqlZa, strSelectH, Sys.TBL_FillAll)) 
					{
					}
					// 04.12.17 Ä1569
					if (nRowFind != -1) 
					{
						tblHSuche.SetFocusRow(nRowFind);
					}

					// 20.01.14 Ä1005
					hSqlZa.Disconnect();
					// Call SqlFreeSession( hSession )

					// 16.07.03 keinen Halter gefunden
					if (!(tblHSuche.AnyRows(0, 0))) 
					{
						Int.PalLog("HSuche neg.:" + Int.PalStrNum(dfArztNr.Number, 4, 0) + "/" + dfHalterName.Text + "|" + dfHalterVN.Text + "|" + dfHalterPLZ.Text);
						// 05.10.06 Ä36 Set strName = '' auskommentiert
						// Set strName = ''

						// If 1 = SalModalDialog(dlgText, hWndForm, 'Kein Kunde gefunden. Bitte Suchwort eingeben :', '', 100, strHSucheName)
						// Set dfHalterName = strHSucheName
						// If dfHalterName != ''
						// If dfArztNr>0
						// Set strSelectH =
						// 'select @lics(hnn), harztnr,hhalternr, hnn || \', \' || hvn || \' \' || hti,hort, hland,hname2,hstr, hhalternein, hregnr
						// into :frmRgSuchen.tblHSuche.colstrNNLics, :frmRgSuchen.tblHSuche.colnArztNr, :frmRgSuchen.tblHSuche.colnHalterNr,
						// :frmRgSuchen.tblHSuche.colstrName, :frmRgSuchen.tblHSuche.colstrOrt, :frmRgSuchen.tblHSuche.colstrLand, :frmRgSuchen.tblHSuche.colstrName2, :frmRgSuchen.tblHSuche.colstrStrasse, :frmRgSuchen.tblHSuche.colnHalterNein,
						// :frmRgSuchen.tblHSuche.colsRegNr
						// from H
						// where harztnr=:frmRgSuchen.dfArztNr '
						// Else
						// Set strSelectH =
						// 'select @lics(hnn), harztnr,hhalternr,hnn || \', \' || hvn || \' \' || hti,hort,hland, hname2,hstr, hhalternein, hregnr
						// into :frmRgSuchen.tblHSuche.colstrNNLics, :frmRgSuchen.tblHSuche.colnArztNr, :frmRgSuchen.tblHSuche.colnHalterNr,
						// :frmRgSuchen.tblHSuche.colstrName, :frmRgSuchen.tblHSuche.colstrOrt, :frmRgSuchen.tblHSuche.colstrLand, :frmRgSuchen.tblHSuche.colstrName2, :frmRgSuchen.tblHSuche.colstrStrasse, :frmRgSuchen.tblHSuche.colnHalterNein,
						// :frmRgSuchen.tblHSuche.colsRegNr
						// from H '
						// Set strSelect1 =  ' AND (@lics(hnn) LIKE \'%' || PalLics(dfHalterName) || '%\' OR @lics(hvn) LIKE \'%' || PalLics(dfHalterName) || '%\' )'
						// If dfArztNr>0
						// Set strSelectH = strSelectH  || strSelect1 || ' Order by 1, hvn'
						// Else
						// Set strSelectH = strSelectH || 'WHERE ' || SalStrMidX(strSelect1,4,2048) || ' Order by hnn, hvn'
						// Call SalTblPopulate( tblHSuche,hSqlHalter,strSelectH,TBL_FillNormal)
					}
					else
					{
						Int.PalLog("HSuche pos.:" + Int.PalStrNum(dfArztNr.Number, 4, 0) + "/" + dfHalterName.Text + "|" + dfHalterVN.Text + "|" + dfHalterPLZ.Text);
						// Set dfHalterName = ''
					}
				}
				Sal.WaitCursor(false);

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nFArzt"></param>
		/// <param name="nFHalter"></param>
		/// <param name="nFRech"></param>
		/// <returns></returns>
		public SalNumber PalFuelle(SalNumber nFArzt, SalNumber nFHalter, SalNumber nFRech)
		{
			#region Actions
			using (new SalContext(this))
			{
				dfArztNr.Number = nFArzt;
				dfHalterNr.Number = nFHalter;
				dfRgNr.Number = nFRech;
				if (dfArztNr.Number == 0) 
				{
					Sal.ClearField(dfArztNr);
					// Call SalHideWindow(pbTelA)
				}
				else
				{
					Sal.PostMsg(dfArztNr, Sys.SAM_Validate, 0, 0);
				}
				if (dfHalterNr.Number == Sys.NUMBER_Null) 
				{
					dfHalterNr.Number = 0;
				}
				if (dfHalterNr.Number == 0) 
				{
					Sal.ClearField(dfHalterNr);
					// Call SalHideWindow(pbTelH)
				}
				else
				{
					Sal.PostMsg(dfHalterNr, Sys.SAM_Validate, 0, 0);
				}
				if (dfRgNr.Number == 0) 
				{
					Sal.ClearField(dfRgNr);
				}
				else
				{
					Sal.PostMsg(dfRgNr, Sys.SAM_Validate, 0, 0);
				}
				// 18.05.00
				if (dfArztNr.Number > 0 && (dfRgNr.Number > 0 || dfHalterNr.Number > 0)) 
				{
					pbSucheRg.PostMessage(Sys.SAM_Click, 0, 0);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// wählt Datei
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalBildWahl()
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(20);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				// Set strArExtensions[0] = 'Bitmapdateien - *.bmp'
				// Set strArExtensions[1] = '*.bmp'
				// Set strArExtensions[2] = 'Icondateien - *.ico'
				// Set strArExtensions[3] = '*.ico'
				// Set strArExtensions[4] = 'Jpeg-Dateien - *.jpg'
				// Set strArExtensions[5] = '*.jpg'
				// Set strArExtensions[6] = 'Gif-Dateien - *.gif'
				// Set strArExtensions[7] = '*.gif'
				// Set strArExtensions[8] = 'Meta-Dateien - *.wmf'
				// Set strArExtensions[9] = '*.wmf'
				// Set strArExtensions[10] = 'Png-Dateien - *.png'
				// Set strArExtensions[11] = '*.png'
				// Set strArExtensions[12] = 'Pcx-Dateien - *.pcx'
				// Set strArExtensions[13] = '*.pcx'
				// Set strArExtensions[14] = 'Tiff-Dateien - *.tif'
				// Set strArExtensions[15] = '*.tif'
				// Set strArExtensions[16] = 'Tga-Dateien - *.tga'
				// Set strArExtensions[17] = '*.tga'
				// Set strArExtensions[18] = 'alle Dateien - *.*'
				// Set strArExtensions[19] = '*.*'
				strArExtensions[0] = "alle Dateien - *.*";
				strArExtensions[1] = "*.*";
				strDateiPfad = "";
				xOK = Sal.DlgOpenFile(this, "Datei wählen", strArExtensions, 2, ref nIndex, ref strDateiName, ref strDateiPfad);
				if (xOK) 
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalCountZettel()
		{
			#region Actions
			using (new SalContext(this))
			{
				// 29.11.05
				Int.PalCheckLeseberechtigung();
				// 09.03.16
				// Set strBNLeseberechtigung = '\'' || frmMain.strUser || '\'' || strBNLeseberechtigung
				if (Var.strBNLeseberechtigung == "") 
				{
					// 28.04.22 F4890
					// Set strBNLeseberechtigung = '\'' || frmMain.strUser || '\''
					Var.strBNLeseberechtigung = "\'" + Var.strBNZei + "\'";

					Int.SqlImmedSel(@"SELECT count(*), max(zdatum) INTO :frmMain.nZettelAnz, :frmMain.dtZettelDat
FROM z WHERE zan = " + Var.strBNLeseberechtigung + @"
AND zerledigt = 'N' AND zdeaktiv IS NULL");
				}
				else
				{
					Var.strBNLeseberechtigung = "\'" + App.frmMain.strUser + "\'" + Var.strBNLeseberechtigung;

					Int.SqlImmedSel(@"SELECT count(*), max(zdatum) INTO :frmMain.nZettelAnz, :frmMain.dtZettelDat
FROM z WHERE zan IN (" + Var.strBNLeseberechtigung + @")
AND zerledigt = 'N' AND zdeaktiv IS NULL");
				}

				// Call SalSetWindowText(pbZettel, SalDateToStrX(dtZettelDat))
				// If nZettelAnzAlt != -1 and nZettelAnzAlt < nZettelAnz
				// Call SalColorSet(pbZettel,COLOR_IndexWindow,COLOR_Red)
				// Else If nZettelAnz = 0
				// Call SalColorSet(pbZettel,COLOR_IndexWindow,COLOR_Yellow)
				// Set nZettelAnzAlt = nZettelAnz
				// 06.01.14 Ä1005
				// Call SqlImmedSel('SELECT count(*) INTO :frmMain.nAnzEL
				// FROM el WHERE elzeichen = :strBNZei
				// AND elerledigt = \'N\'')
				App.frmMain.nAnzEL = Int.SqlGetAnzahl("FROM el WHERE elzeichen = :strBNZei AND elerledigt = \'N\'");
				App.frmMain.nAnzEE = Int.SqlGetAnzahl("FROM ee WHERE eezei = :strBNZei AND eeerldatum IS NULL");
				// 26.11.15
				if (Var.strBNAbtlg == "MA") 
				{
					Var.strBNLeseberechtigung = "";
					Int.PalCheckLeseberechtigung();
					if (Var.strBNLeseberechtigung == "") 
					{
						Var.strBNLeseberechtigung = "\'" + Var.strBNZei + "\' ";
						// 12.05.16 F2687 + AND zproznr>0
						App.frmMain.nAnzWv = Int.SqlGetAnzahl("FROM z WHERE zan = " + Var.strBNLeseberechtigung + @"
AND zwiedervor <= SYSDATE AND zwiedervor >= '2015-11-1' AND zproznr IS NOT NULL AND zproznr>0 AND zdeaktiv IS NULL");
					}
					else
					{
						Var.strBNLeseberechtigung = "\'" + Var.strBNZei + "\' " + Var.strBNLeseberechtigung;
						App.frmMain.nAnzWv = Int.SqlGetAnzahl("FROM z WHERE zan IN (" + Var.strBNLeseberechtigung + @")
AND zwiedervor <= SYSDATE AND zwiedervor >= '2015-11-1' AND zproznr IS NOT NULL AND zproznr>0 AND zdeaktiv IS NULL");
					}
				}

				// Call SalSetWindowText(pbEL, PalStrNum(nAnzEL,5,0) || ' ELs')
				// 28.01.11
				if (Var.strBNAbtlg == "MA") 
				{
					// Call SalStatusSetText( hWndForm, SalNumberToStrX( frmMain.nZettelAnz, 0 ) || ' Zettel (' || SalDateToStrX(dtZettelDat) || ')  -  ' || SalNumberToStrX( frmMain.nAnzEL, 0 ) || ' ELs' || '  -  ' || SalNumberToStrX( frmMain.nAnzEE, 0 ) || ' EWAs' || '  -  ' || SalNumberToStrX( frmMain.nAnzWv, 0 ) || ' Wiedervorlagen - (Aktualisierung alle 5 Minuten)')
					// Set bkgdInfozeile = SalNumberToStrX( frmMain.nZettelAnz, 0 ) || ' Zettel (' || SalDateToStrX(dtZettelDat) || ')  -  ' || SalNumberToStrX( frmMain.nAnzEL, 0 ) || ' ELs' || '  -  ' || SalNumberToStrX( frmMain.nAnzEE, 0 ) || ' EWAs' || '  -  ' || SalNumberToStrX( frmMain.nAnzWv, 0 ) || ' Wiedervorlagen - (Aktualisierung alle 5 Minuten)'
					Sal.SetWindowText(bkgdInfozeile, Sal.NumberToStrX(App.frmMain.nZettelAnz, 0) + " Zettel (" + Int.SalDateToStrX(App.frmMain.dtZettelDat) + ")  -  " + Sal.NumberToStrX(App.frmMain.nAnzEL, 0) + " ELs" + "  -  " + Sal.NumberToStrX(App.frmMain.nAnzEE, 
							0) + " EWAs" + "  -  " + Sal.NumberToStrX(App.frmMain.nAnzWv, 0) + " Wiedervorlagen - (Aktualisierung alle 5 Minuten)");
					Sal.MessageBeep(0);
				}
				else
				{
					// Call SalStatusSetText( hWndForm, SalNumberToStrX( frmMain.nZettelAnz, 0 ) || ' Zettel (' || SalDateToStrX(dtZettelDat) || ')  -  ' || SalNumberToStrX( frmMain.nAnzEL, 0 ) || ' ELs' || '  -  ' || SalNumberToStrX( frmMain.nAnzEE, 0 ) || ' EWAs - (Aktualisierung alle 5 Minuten)')
					// Set bkgdInfozeile = SalNumberToStrX( frmMain.nZettelAnz, 0 ) || ' Zettel (' || SalDateToStrX(dtZettelDat) || ')  -  ' || SalNumberToStrX( frmMain.nAnzEL, 0 ) || ' ELs' || '  -  ' || SalNumberToStrX( frmMain.nAnzEE, 0 ) || ' EWAs - (Aktualisierung alle 5 Minuten)'
					Sal.SetWindowText(bkgdInfozeile, Sal.NumberToStrX(App.frmMain.nZettelAnz, 0) + " Zettel (" + Int.SalDateToStrX(App.frmMain.dtZettelDat) + ")  -  " + Sal.NumberToStrX(App.frmMain.nAnzEL, 0) + " ELs" + "  -  " + Sal.NumberToStrX(App.frmMain.nAnzEE, 
							0) + " EWAs - (Aktualisierung alle 5 Minuten)");
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalHoleWv()
		{
			#region Actions
			using (new SalContext(this))
			{
				Var.strBNLeseberechtigung = "";
				Int.PalCheckLeseberechtigung();
				Var.strBNLeseberechtigung = "\'" + Var.strBNZei + "\' " + Var.strBNLeseberechtigung;
				Int.SqlConnection(ref hSqlWv);
				// 26.07.16 Ä1383 + zan
				if (gridWv.Populate(hSqlWv, @"SELECT zwiedervor, zproznr, zan INTO :frmRgSuchen.gridWv.colDatum, :frmRgSuchen.gridWv.colPR, :frmRgSuchen.gridWv.colZei
FROM z WHERE zan IN (" + Var.strBNLeseberechtigung + ") AND zdeaktiv IS NULL AND zwiedervor >= '2015-11-1' AND zwiedervor <= SYSDATE AND zproznr IS NOT NULL AND zproznr>0 GROUP BY 1,2,3", Sys.TBL_FillAll)) 
				{
				}
				hSqlWv.Disconnect();
				gridWv.BringWindowToTop();
			}

			return 0;
			#endregion
		}
		// 04.11.21
		/// <summary>
		/// </summary>
		/// <param name="nA"></param>
		/// <param name="nH"></param>
		/// <param name="nPR"></param>
		/// <returns></returns>
		public SalNumber PalZeigeArchiv(SalNumber nA, SalNumber nH, SalNumber nPR)
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.WaitCursor(true);
				//FC:FINAL: axShell
				axShell.Enabled = true;;
				strUnterOrdner = "A" + Int.PalStrNullen(Int.PalCheckLarztnr(nA).ToString(0), 4);
				if (nH > 0) 
				{
					strUnterOrdner = strUnterOrdner + "\\H" + Int.PalStrNullen(nH.ToString(0), 5);
					if (nPR > 0) 
					{
						strUnterOrdner = strUnterOrdner + "\\PR" + nPR.ToString(0);
					}
				}
				Int.PalExplorer(strUnterOrdner, false);
				//FC:FINAL: axShell
				axShell.Path = Var.strPfadArchiv + Sql.Database + "\\" + strUnterOrdner;
				if (axShell.IsEmpty())
				{
					Sal.MessageBox("Der Ordner " + Var.strPfadArchiv + Sql.Database + "\\" + strUnterOrdner + " kann nicht angezeigt werden.", "Fehler im Archiv", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
				picTabs.BringToTop(5, true);
				Sal.WaitCursor(false);
			}

			return 0;
			#endregion
		}
		// 12.11.21
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalResizeForm()
		{
			#region Local Variables
			SalNumber nPWidth = 0;
			SalNumber nPHeight = 0;
			SalNumber nFWidth = 0;
			SalNumber nFHeight = 0;
			SalNumber nXWidth = 0;
			SalNumber nXHeight = 0;
			SalNumber nTWidth = 0;
			SalNumber nTHeight = 0;
			SalNumber nT1Width = 0;
			SalNumber nT1Height = 0;
			SalNumber nT2Width = 0;
			SalNumber nT2Height = 0;
			SalNumber nX = 0;
			SalNumber nY = 0;
			SalNumber nBehX = 0;
			SalNumber nBehY = 0;
			SalNumber nBehHeight = 0;
			SalNumber nMenuH = 0;
			SalNumber nMenuW = 0;
			SalBoolean bRibbonBar = false;
			// 06.05.15
			// Number: nMoniWidth
			// Number: nMoniHeight
			// 21.01.16
			SalNumber nDummyX = 0;
			SalNumber nDummyY = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{

				this.GetSize(ref nPWidth, ref nPHeight);
				// 23.10.13	30.07.15 wegen F2473 auskommentiert
				// If SalFormUnitsToPixels( frmBehErf, nPHeight, TRUE ) < 700
				// Call SalRibbonMinimize( frmBehErf )
				// Set bRibbonBar = FALSE
				// Else
				// Call SalRibbonMaximize( frmBehErf )
				// Set bRibbonBar = bMenuBarAsRibbonBar
				bRibbonBar = true;
				// 30.08.13 > Windows 7
				// If nWinTextSizeFactor > 0
				// Set nPWidth = nPWidth / nWinTextSizeFactor
				// Set nPHeight = nPHeight / nWinTextSizeFactor

				nFWidth = nPWidth - 0.5m;
				// 24.02.09 OTF206
				// Set nFHeight =  (nPHeight - nY - 0.9)
				nFHeight = nPHeight - nY - 0.9m - (bRibbonBar * 1.1m);
				// Call SalGetWindowSize( m_hWndRibbon, nMenuW, nMenuH )
				// If nMenuH > 3
				// Else
				// Set nFHeight =  (nPHeight - nY - 0.9 - nMenuH)

				picTabs.SetSize(nFWidth, nFHeight);
				nFWidth = nFWidth - 0.9m;
				nFHeight = nFHeight - 0.6m;
				//FC:TODO: axShell
				//axShell.Size = new Size(nFWidth - 0.2m, nFHeight - 0.9m);

			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_DiskAbrg_MenuActions()
		{
			if (Var.bfrmDiskEin)  // 22.12.15 Ä1304
			{
				Sal.MessageBox("Das Fenster ist noch geöffnet und kann kein zweites Mal geöffnet werden.", "bereits geöffnet", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			}
			else
			{
				frmDiskAbr.CreateWindow(this);
			}
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_LeistErf_MenuActions()
		{
			frmManAbr.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Internet_MenuActions()
		{
			if (Var.bfrmAbrFTP)  // 22.12.15 Ä1304
			{
				Sal.MessageBox("Das Fenster ist noch geöffnet und kann kein zweites Mal geöffnet werden.", "bereits geöffnet", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			}
			else
			{
				frmAbrFTP.CreateWindow(this);
			}
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Überw_MenuActions()
		{
			frmUeberwListe.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_RaZa_MenuActions()
		{
			frmRaZa.CreateWindow(this, 0, 0);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Mahng_MenuActions()
		{
			frmMahn.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_MBKal_MenuActions()
		{
			frmMBKalender.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Buchhaltg_MenuActions()
		{
			frmFiBu.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Tagebuch_MenuActions()
		{
			frmTagebuch.CreateWindow(this, SalNumber.Null, SalNumber.Null);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Zettel_MenuActions()
		{
			// 26.07.16 F2699
			if (Var.bfrmZettel) 
			{
				while (!(App.frmZettel.DestroyWindow())) 
				{
				}
			}

			frmZettel.CreateWindow(this, "frmMain", 0, 0, 0);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Drucke_MenuActions()
		{
			dlgdivDruck.ModalDialog(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Rechnungsnachdruck_MenuActions()
		{
			// 11.12.08 Ä346
			frmRechNachdruck.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_variables_MenuActions()
		{
			// Call SalCreateWindow( frmEti, hWndForm)

			if (Var.bfrmDYMODruck) 
			{
				while (!(App.frmDYMODruck.DestroyWindow())) 
				{
				}
			}
			frmDYMODruck.CreateWindow(this, "", "");
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_PMPortoptimierung_MenuActions()
		{
			// LL
			dlgLlDruck.ModalDialog(App.frmMain, "Portooptimierung.lst", "");
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Serienbrief_MenuActions()
		{
			// If bfrmDYMODruck
			// While Not SalDestroyWindow(frmDYMODruck)
			frmSerienbrief.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Serienbrief_1_MenuActions()
		{
			// If bfrmDYMODruck
			// While Not SalDestroyWindow(frmDYMODruck)
			frmSerienbriefH.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Eti_MenuActions()
		{
			// 20.02.15 Ä1169
			if (Var.bfrmDYMODruck) 
			{
				while (!(App.frmDYMODruck.DestroyWindow())) 
				{
				}
			}
			frmDYMODruck.CreateWindow(this, "", "Label" + Var.strBNAbtlg);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Eti_1_EnabledWhen()
		{
			return Var.strBNAbtlg == "RA";
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Eti_1_MenuActions()
		{
			// 20.02.15 Ä1169
			if (Var.bfrmDYMODruck) 
			{
				while (!(App.frmDYMODruck.DestroyWindow())) 
				{
				}
			}
			frmDYMODruck.CreateWindow(this, "", "LabelHP");
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Standard_MenuActions()
		{
			// ! 06.08.08
			if (Var.bfrmBrAktiErf) 
			{
				while (!(App.frmBrAktiErf.DestroyWindow())) 
				{
				}
			}
			// !
			frmBrAktiErf.CreateWindow(this, SalNumber.Null, SalNumber.Null, SalNumber.Null);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_frei_MenuActions()
		{
			if (Var.bfrmBriefVari) 
			{
				while (!(App.frmBriefVari.DestroyWindow())) 
				{
				}
			}
			// !
			// 06.08.18 Ä1763 TRUE -> FALSE
			frmBriefVari.CreateWindow(this, SalNumber.Null, SalNumber.Null, SalNumber.Null, "", "", new SalDateTime(1900, 1, 1), "", "", "", "", "", false);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_EWAKontrolle_MenuActions()
		{
			if (Var.bfrmEE) 
			{
				while (!(App.frmEE.DestroyWindow())) 
				{
				}
			}
			// !
			frmEE.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_EL_MenuActions()
		{
			frmEL.CreateWindow(this, 0, 0, 0);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Noviplan_MenuActions()
		{
			Sal.LoadApp(App.frmMain.strNoviplan, "STD");
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Textver_MenuActions()
		{
			frmText.CreateWindow(this, 0, 0, 0, "");
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_erfassen_MenuActions()
		{
			// 05.12.17 Ä1428
			if (Var.bfrmAnwBelege) 
			{
				Sal.MessageBox("Das Fenster ist noch geöffnet und kann kein zweites Mal geöffnet werden.", "bereits geöffnet", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			}
			else
			{
				frmAnwBeleg.CreateWindow(this);
			}
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_drucken_EnabledWhen()
		{
			return Var.strBNAbtlg == "ED" || Var.strBNAbtlg == "BH";
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_drucken_MenuActions()
		{
			// 19.10.10 OTÄ487
			dlgLlDruck.ModalDialog(App.frmMain, "Anweisungsbelege.lst", "");
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_RRListe_MenuActions()
		{
			if (Var.bfrmRR) 
			{
				if (App.frmRR.BringWindowToTop()) 
				{
					App.frmRR.PalPopulate("");
				}
			}
			else
			{
				frmRR.CreateWindow(Sys.hWndNULL);
			}
			if (dfArztNr.Number != Sys.NUMBER_Null) 
			{
				App.frmRR.dfArztNr.Number = dfArztNr.Number;
				Sal.PostMsg(App.frmRR.dfArztNr, Sys.SAM_Validate, 0, 0);
			}
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Forderungslisten_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect) && !(Var.bfrmTSK);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Forderungslisten_MenuActions()
		{
			frmTSK.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Anträge_MenuActions()
		{
			// LL
			dlgLlDruck.ModalDialog(App.frmMain, "VetAmt-Antrag.crd", "");
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Rechnung_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Rechnung_MenuActions()
		{
			frmTSKZahl.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Erinnerungsbrief_MenuActions()
		{
			// LL
			dlgLlDruck.ModalDialog(App.frmMain, "TSK-Erinnerungen.lst", "");
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Beihilfen_MenuActions()
		{
			dlgBeihilfeEin.ModalDialog(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Beihilfen_1_MenuActions()
		{
			frmTSKBeihilfen.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Verwaiste_MenuActions()
		{
			frmTSKWaisen.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Scan_MenuActions()
		{
			if (!(hFile.Open("\\\\archiv01\\noviplan.net.doc\\scans\\test.txt", (Sys.OF_Create | Sys.OF_Write)))) 
			{
				Sal.MessageBox("Der Scanordner ist nicht verfügbar.", "Achtung", (Sys.MB_Ok | Sys.MB_IconStop));
			}
			else
			{
				hFile.Close();
				if (!(hFile.Open("\\\\archiv01\\noviplan.net.doc\\scans\\test.txt", Sys.OF_Delete))) 
				{
				}
				strScanTitel = "Scan";
				// Call axTwain.TwainOpenDefaultSource( bOk )
				// Call axTwain.TwainSetAutoFeed( TRUE, bOk )
				// Call axTwain.TwainSetAutoScan( TRUE, bOk )
				// Call axTwain.TwainSetCurrentResolution( 300, nDummyHaben)
				// Call axTwain.TwainEnableDuplex( TRUE, nDummyHaben )
				// Call axTwain.TwainSetAutomaticDiscardBlankPages( TRUE, nDummyHaben )
				// Set nTwainColor = GdTwain2_TwainPixelType_TWPT_BW

				// Call axTwain.TwainSetCurrentPixelType ( nTwainColor , nDummyHaben )
				// Call axTwain.TwainSetHideUI ( TRUE )

				strFile = Var.strBNZei + "-" + Int.PalDateToStrJJJJMMTThhmmss(SalDateTime.Current) + ".pdf";
				// Call SalGetProfileString('License','Name','Demo',strDummy,'Pegasus')
				// Call axTwain.TwainPdfStart( '\\\\archiv01\\noviplan.net.doc\\scans\\' || strFile, 'Scan in Noviplan', 'moveta v' || strProgVer, strBNUser, 'moveta', nRet)
				// Set nRet = 0
				// Call axTwain.TwainAcquireToGdPictureImage( 0, nRet )
				// While nRet != 0
				// Call axTwain.TwainAddGdPictureImageToPdf( nRet, bOk )
				// Call axTwain.TwainAcquireToGdPictureImage( 0, nRet )
				// Call axTwain.TwainPdfStop( nRet )
				// Call axTwain.TwainCloseSource( bOk )
				//axTwain.TwainIsAvailable(ref Var.bOK);
				Var.bOK = axTwain.TwainIsAvailable();
                if (Var.bOK) 
				{
					strPfadAppData = Vis.DosGetEnvString("APPDATA") + "\\";
					//axTwain.TwainGetDefaultSourceName(ref Var.strDummy);
					Var.strDummy = axTwain.TwainGetDefaultSourceName(0);
                    Sal.UseRegistry(false, "TVN");
					// Call SalMessageBox( '.' || strDummy || '.', 'Scannername', MB_Ok )
					Sal.SetProfileString("Settings", "Scanner", Var.strDummy, strPfadAppData + "CLScan.ini");
					Sal.SetProfileString("Settings", "Filename", "\\\\archiv01\\noviplan.net.doc\\scans\\" + strFile, strPfadAppData + "CLScan.ini");
					Sal.SetProfileString("Settings", "ColorType", "GRAY", strPfadAppData + "CLScan.ini");
					Sal.SetProfileString("Settings", "DuplexEnabled", "Y", strPfadAppData + "CLScan.ini");
					Sal.UseRegistry(true, "TVN");
					if (!(Sal.LoadAppAndWait("CLScan.exe /ReadFromIni \"" + strPfadAppData + "CLScan.ini\"", Sys.Window_NotVisible, ref nRet))) 
					{
						Sal.MessageBox("Scanprogramm CLScan.exe wurde nicht gefunden.", "Fehler", Sys.MB_Ok);
					}
				}
			}
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Fernwartung_MenuActions()
		{
			// 12.10.10 OTÄ495
			// 16.12.15 + SalWaitCursor
			Sal.WaitCursor(true);
			if (Sal.LoadApp("TeamViewerQS_de-idc9rq3eta.exe", "")) 
			{
				Sal.WaitCursor(false);
			}
			else
			{
				Sal.WaitCursor(false);
				Sal.MessageBox(@"Teamviewer ist im Pegasus-Programmordner nicht vorhanden.

Bitte starten Sie auf www.moveta.de unter Service&Support die Fernwartung.
Vielen Dank.", "Fernwartung nicht vorhanden", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Update_MenuActions()
		{
			if (Sys.IDYES == Sal.MessageBox(@"Das moveta-Programm wird geschlossen und das Update gestartet.

Möchten Sie das Update jetzt durchführen?", "Update", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
			{
				// If Not SalLoadApp( Const.PATH_UPDATE + 'TVN3-Update.exe', '')
				// Call SalMessageBeep( 0 )
				if (Ext.ShellExecuteA(SalWindowHandle.Null, "open", Const.PATH_UPDATE + "TVN3-Update.exe", "", "", Const.SW_SHOWNORMAL)) 
				{
				}
				this.DestroyWindow();
			}
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Über_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Über_MenuActions()
		{
			dlgAbout.ModalDialog(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_movetaHomepage_MenuActions()
		{
			Ext.ShellExecuteA(this, "open", "http://www.moveta.de", SalString.Null, SalString.Null, 1);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Bonicheck_MenuActions()
		{
			Ext.ShellExecuteA(this, "open", "https://icd-check.infoscore.de", SalString.Null, SalString.Null, 1);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Bonicheck_1_MenuActions()
		{
			Ext.ShellExecuteA(this, "open", "https://bonitaets-check.de", SalString.Null, SalString.Null, 1);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Kundenportal_MenuActions()
		{
			Ext.ShellExecuteA(this, "open", "https://tvnportal.axosoft.com", SalString.Null, SalString.Null, Const.SW_SHOWNORMAL);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_HaustürKamera_MenuActions()
		{
			Ext.ShellExecuteA(this, "open", "iexplore.exe", "http://kamera", SalString.Null, Const.SW_SHOWNORMAL);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Statistik_MenuActions()
		{
			frmInfoSasse.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_ArztVKZs_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_ArztVKZs_MenuActions()
		{
			frmVKZ.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Jahressummen_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Jahressummen_MenuActions()
		{
			frmJahresSummen.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Gewinnermittlung_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect) && (App.frmMain.dfUser.Text == "KEUER" || Var.strBNAbtlg == "GF");
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Gewinnermittlung_MenuActions()
		{
			frmGewinnErm.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Grafiken_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Grafiken_MenuActions()
		{
			frmGraph.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_PRs_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect) && (App.frmMain.dfUser.Text == "KEUER" || Var.strBNAbtlg == "GF");
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_PRs_MenuActions()
		{
			frmPRGrafik.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_BenutzerAnmeldezeiten_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect) && (App.frmMain.dfUser.Text == "KEUER" || Var.strBNAbtlg == "GF");
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_BenutzerAnmeldezeiten_MenuActions()
		{
			frmStatBenutzer.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Abrg_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect) && (App.frmMain.dfUser.Text == "KEUER" || Var.strBNAbtlg == "GF");
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Abrg_MenuActions()
		{
			frmStatAbrg.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_PRs_1_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect) && (App.frmMain.dfUser.Text == "KEUER" || Var.strBNAbtlg == "GF");
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_PRs_1_MenuActions()
		{
			// LL
			dlgLlDruck.ModalDialog(App.frmMain, "PRs je Benutzer.lst", "");
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Rückrufe_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Rückrufe_MenuActions()
		{
			// 06.01.15 F2603
			dlgLlDruck.ModalDialog(App.frmMain, "RR je Benutzer.lst", "");
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_movetaMEAnmeldungen_MenuActions()
		{
			// 06.01.15 F2603
			dlgLlDruck.ModalDialog(App.frmMain, "TVN-Online.lst", "");
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_PrintID_MenuActions()
		{
			frmPrintIds.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Belastung_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Belastung_MenuActions()
		{
			frmNegativerSaldo.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_MBAktionen_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect) && (App.frmMain.dfUser.Text == "KEUER" || Var.strBNAbtlg == "GF");
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_MBAktionen_MenuActions()
		{
			// LL
			App.frmMain.strZust = "KO";
			dlgLlDruck.ModalDialog(App.frmMain, "MB-Aktionen je Benutzer.lst", "");
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_MBAktionen_1_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect) && (App.frmMain.dfUser.Text == "KEUER" || Var.strBNAbtlg == "GF");
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_MBAktionen_1_MenuActions()
		{
			// LL
			App.frmMain.strZust = "SE";
			dlgLlDruck.ModalDialog(App.frmMain, "MB-Aktionen je Benutzer.lst", "");
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_MBAktionen_2_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect) && (App.frmMain.dfUser.Text == "KEUER" || Var.strBNAbtlg == "GF");
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_MBAktionen_2_MenuActions()
		{
			// LL
			App.frmMain.strZust = "YI";
			dlgLlDruck.ModalDialog(App.frmMain, "MB-Aktionen je Benutzer.lst", "");
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_MBAktionen_3_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect) && (App.frmMain.dfUser.Text == "KEUER" || Var.strBNAbtlg == "GF");
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_MBAktionen_3_MenuActions()
		{
			// LL
			App.frmMain.strZust = "ZK";
			dlgLlDruck.ModalDialog(App.frmMain, "MB-Aktionen je Benutzer.lst", "");
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Mitglieder_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Mitglieder_MenuActions()
		{
			frmSteuerExport.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_moveta_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_moveta_MenuActions()
		{
			frmSteuerExportA.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Statusliste_EnabledWhen()
		{
			return Var.strBNAbtlg == "GF" || Var.strBNAbtlg == "ED" || Var.strBNAbtlg == "BH";
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Statusliste_MenuActions()
		{
			// 19.10.10 OTÄ487
			dlgLlDruck.ModalDialog(App.frmMain, "KA-Statusliste.lst", "");
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Bewegungen_EnabledWhen()
		{
			return Var.strBNAbtlg == "GF" || Var.strBNAbtlg == "ED" || Var.strBNAbtlg == "BH";
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Bewegungen_MenuActions()
		{
			// 19.10.10 OTÄ487

			// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
			SalDateTime temp1 = App.frmMain.dtDatVon;
			SalDateTime temp2 = App.frmMain.dtDatBis;
			SalNumber temp3 = dlgEinDat.ModalDialog(this, "Bitte wählen Sie einen Zeitraum aus:", ref temp1, ref temp2);
			App.frmMain.dtDatVon = temp1;
			App.frmMain.dtDatBis = temp2;

			if (1 == temp3) 
			{
				dlgLlDruck.ModalDialog(App.frmMain, "KA-Zu-abgänge.lst", "");
			}
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Übersicht_EnabledWhen()
		{
			return Var.strBNAbtlg == "GF" || Var.strBNAbtlg == "ED" || Var.strBNAbtlg == "BH";
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Übersicht_MenuActions()
		{
			frmKA.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Buchungsabgleich_MenuActions()
		{
			frmBuchAbgleich.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Variabel_EnabledWhen()
		{
			return Var.strBNAbtlg == "ED" || Var.strBNAbtlg == "GF" || Var.strBNAbtlg == "BH";
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Variabel_MenuActions()
		{
			frmStatVariabel.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Stammdaten_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Stammdaten_MenuActions()
		{
			Int.PalStamm();
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Aerzte_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Aerzte_MenuActions()
		{
			frmAerzte.CreateWindow(this, "frmMain", 0);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Halter_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Halter_MenuActions()
		{
			frmHalter.CreateWindow(this, "frmMain", 0, 0);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Mahnintervall_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Mahnintervall_MenuActions()
		{
			frmArztVorgaben.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Halter_1_MenuActions()
		{
			frmHalterKopieren.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_fehlende_MenuActions()
		{
			frmHalterFehlend.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_BundebankBLZDatei_MenuActions()
		{
			strDrive = Sal.FileGetDrive();
			Sal.FileSetDrive("C:");
			Sal.WaitCursor(false);
			dlgLaufwerk.ModalDialog(this, "Bundesbank-BLZ-Datei blz.txt einlesen", ref strDir);
			Sal.FileSetDrive(strDrive);
			// ! 26.09.07 F261
			if (strDir == "") 
			{
				Sal.MessageBox("Sie haben kein Ziellaufwerk ausgewählt. Der Export wird abgebrochen.", "Achtung", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			}
			else
			{
				Sal.WaitCursor(true);
				if (!(hFile.Open(strDir + "blz.txt", (Sys.OF_Text | Sys.OF_Read)))) 
				{
					Sal.MessageBox("Die Datei konnte nicht gelesen werden. Prüfen Sie, ob Sie Leserechte haben.", "Fehler", (Sys.MB_IconStop | Sys.MB_Ok));
				}
				else
				{
					Int.SqlImmed("DELETE FROM blz");

					while (hFile.GetString(ref Var.strDummy1, 32000)) 
					{
						strBLZ = Var.strDummy1.Mid(0, 8);
						strName = Var.strDummy1.Mid(8, 32);
						strIBAN = Var.strDummy1.Mid(61, 6); // IBAN-Regel
						strBIC = Var.strDummy1.Mid(40, 11);
						if (strIBAN == "001400") 
						{
							strBIC = "DAAEDEDDXXX";
						}
						if (strBIC != "           " && (strIBAN == "000000" || strIBAN == "000200" || strIBAN == "000300" || strIBAN == "000400" || strIBAN == "000600" || strIBAN == "000700" || strIBAN == "000800" || strIBAN == "000900" || strIBAN == "001000" || 
						strIBAN == "001100" || strIBAN == "001200" || strIBAN == "001300" || strIBAN == "001800" || strIBAN == "002200" || strIBAN == "002400" || strIBAN == "002600" || strIBAN == "002700" || strIBAN == "002800" || strIBAN == "003000" || strIBAN == 
						"004000" || strIBAN == "004400" || strIBAN == "004800" || strIBAN == "005100" || strIBAN == "005200" || strIBAN == "005300")) 
						{
							Int.SqlImmed("INSERT INTO blz (blzblz, blzname, blzbic) VALUES(:frmRgSuchen.strBLZ, :frmRgSuchen.strName, :frmRgSuchen.strBIC)");
							this.SetStatusBarText("Lese Bank-BLZ " + strBLZ);
						}
					}
					hFile.Close();
					Sal.MessageBox("Der Import wurde abgeschlossen.", "Ok", (Sys.MB_Ok | Sys.MB_IconAsterisk));
				}
			}
			Sal.WaitCursor(false);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Mitgliedern_EnabledWhen()
		{
			return Var.strBNAbtlg == "ED";
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Mitgliedern_MenuActions()
		{
			Int.SqlConnection(ref hSqlCSV);
			hSqlCSV.PrepareAndExecute(@"SELECT aarztnr, aland, ablz, akonto, abic, aiban
INTO :frmRgSuchen.nArztNr, :frmRgSuchen.strLand, :frmRgSuchen.strBLZ, :frmRgSuchen.strKonto, :frmRgSuchen.strBIC, :frmRgSuchen.strIBAN
FROM a
WHERE (abic IS NULL OR aiban IS NULL) AND ablz IS NOT NULL AND akonto IS NOT NULL ORDER BY aarztnr");
			nFetchCSV = hSqlCSV.FetchNext();
			while (nFetchCSV != Sys.FETCH_EOF) 
			{
				strBLZ = Int.PalCheckBLZKonto(strBLZ);
				strKonto = Int.PalCheckBLZKonto(strKonto);
				if (strLand == "") 
				{
					strLand = "DE";
				}

				if (strBIC == "" && strLand == "DE" && strBLZ != "") 
				{
					strBIC = Int.PalGetBIC(strBLZ);
					if (strBIC != "") 
					{
						Int.SqlImmed("UPDATE a SET abic = :frmRgSuchen.strBIC WHERE aarztnr = :frmRgSuchen.nArztNr");
						Int.PalLog("FehlBIC " + Int.PalStrNum0(nArztNr, 4, 0) + ": " + strBIC);
						this.SetStatusBarText("BIC " + Int.PalStrNum0(nArztNr, 4, 0) + ": " + strBIC);
					}
				}
				if (strIBAN == "" && strLand == "DE" && strBLZ != "" && strKonto != "") 
				{
					strIBAN = Int.PalIBAN(strLand, strBLZ, strKonto);
					if (strIBAN != "") 
					{
						Int.SqlImmed("UPDATE a SET aiban = :frmRgSuchen.strIBAN WHERE aarztnr = :frmRgSuchen.nArztNr");
						Int.PalLog("FehlIBAN " + Int.PalStrNum0(nArztNr, 4, 0) + ": " + strIBAN);
						this.SetStatusBarText("IBAN " + Int.PalStrNum0(nArztNr, 4, 0) + ": " + strIBAN);
					}
				}
				nFetchCSV = hSqlCSV.FetchNext();
			}
			hSqlCSV.Commit();
			hSqlCSV.Disconnect();
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Haltern_EnabledWhen()
		{
			return Var.strBNAbtlg == "ED";
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Haltern_MenuActions()
		{
			Int.SqlConnection(ref hSqlCSV);
			hSqlCSV.PrepareAndExecute(@"SELECT harztnr, hhalternr, hland, hblz, hkonto, hbic, hiban
INTO :frmRgSuchen.nArztNr, :frmRgSuchen.nNoviHalter, :frmRgSuchen.strLand, :frmRgSuchen.strBLZ, :frmRgSuchen.strKonto, :frmRgSuchen.strBIC, :frmRgSuchen.strIBAN
FROM h
WHERE (hbic IS NULL OR hiban IS NULL) AND hblz IS NOT NULL AND hkonto IS NOT NULL AND hdeaktiv IS NULL ORDER BY harztnr, hhalternr");
			nFetchCSV = hSqlCSV.FetchNext();
			while (nFetchCSV != Sys.FETCH_EOF) 
			{
				strBLZ = Int.PalCheckBLZKonto(strBLZ);
				strKonto = Int.PalCheckBLZKonto(strKonto);
				if (strLand == "") 
				{
					strLand = "DE";
				}

				if (strBIC == "" && strLand == "DE" && strBLZ != "") 
				{
					strBIC = Int.PalGetBIC(strBLZ);
					if (strBIC != "") 
					{
						Int.SqlImmed("UPDATE h SET hbic = :frmRgSuchen.strBIC WHERE harztnr = :frmRgSuchen.nArztNr AND hhalternr = :frmRgSuchen.nNoviHalter");
						Int.PalLog("FehlBIC " + Int.PalStrNum0(nArztNr, 4, 0) + Int.PalStrNum0(nNoviHalter, 5, 0) + ": " + strBIC);
						this.SetStatusBarText("BIC " + Int.PalStrNum0(nArztNr, 4, 0) + Int.PalStrNum0(nNoviHalter, 5, 0) + ": " + strBIC);
					}
				}
				if (strIBAN == "" && strLand == "DE" && strBLZ != "" && strKonto != "") 
				{
					strIBAN = Int.PalIBAN(strLand, strBLZ, strKonto);
					if (strIBAN != "") 
					{
						Int.SqlImmed("UPDATE h SET hiban = :frmRgSuchen.strIBAN WHERE harztnr = :frmRgSuchen.nArztNr AND hhalternr = :frmRgSuchen.nNoviHalter");
						Int.PalLog("FehlIBAN " + Int.PalStrNum0(nArztNr, 4, 0) + Int.PalStrNum0(nNoviHalter, 5, 0) + ": " + strIBAN);
						this.SetStatusBarText("IBAN " + Int.PalStrNum0(nArztNr, 4, 0) + Int.PalStrNum0(nNoviHalter, 5, 0) + ": " + strIBAN);
					}
				}
				nFetchCSV = hSqlCSV.FetchNext();
			}
			hSqlCSV.Commit();
			hSqlCSV.Disconnect();
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Überweisungsempf_EnabledWhen()
		{
			return Var.strBNAbtlg == "ED";
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Überweisungsempf_MenuActions()
		{
			Int.SqlConnection(ref hSqlCSV);
			hSqlCSV.PrepareAndExecute(@"SELECT ueeblz, ueekonto
INTO :frmRgSuchen.strBLZ, :frmRgSuchen.strKonto
FROM uee
WHERE ueeblz IS NOT NULL AND ueekonto IS NOT NULL");
			nFetchCSV = hSqlCSV.FetchNext();
			while (nFetchCSV != Sys.FETCH_EOF) 
			{
				strBLZ = Int.PalCheckBLZKonto(strBLZ);
				strKonto = Int.PalCheckBLZKonto(strKonto);
				strLand = "DE";

				strBIC = Int.PalGetBIC(strBLZ);
				strIBAN = Int.PalIBAN(strLand, strBLZ, strKonto);
				if (strIBAN != "" && strBIC != "") 
				{
					Int.SqlImmed("UPDATE uee SET ueeiban = :frmRgSuchen.strIBAN, ueebic = :frmRgSuchen.strBIC WHERE ueeblz = :frmRgSuchen.strBLZ AND ueekonto = :frmRgSuchen.strKonto");
					Int.PalLog("FehlIBANBIC UEE " + strIBAN);
					this.SetStatusBarText("IBAN: " + strIBAN);
				}
				nFetchCSV = hSqlCSV.FetchNext();
			}
			hSqlCSV.Commit();
			hSqlCSV.Disconnect();
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_DATEVExportformate_MenuActions()
		{
			frmDATEVStamm.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Kontierungen_MenuActions()
		{
			frmKontierungen.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Feiertage_MenuActions()
		{
			frmFeiertage.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Gerichte_MenuActions()
		{
			frmGerichte.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Versicherungen_MenuActions()
		{
			frmVersicherungen.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Benutzer_EnabledWhen()
		{
			return Var.nBNAdmin > 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Benutzer_MenuActions()
		{
			frmBenutzer.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Zuständigkeiten_EnabledWhen()
		{
			return Var.strBNAbtlg == "GF" || App.frmMain.dfUser.Text == "KEUER";
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Zuständigkeiten_MenuActions()
		{
			frmZust.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Kennwort_MenuActions()
		{
			dlgPWChange.ModalDialog(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Abwesenheitsassistent_MenuActions()
		{
			dlgAbwAss.ModalDialog(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Computerhändler_MenuActions()
		{
			frmInventHaendler.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Hardwaregestellung_MenuActions()
		{
			frmInvent.CreateWindow(this, 0);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Verwaltung_MenuActions()
		{
			frmBEZStamm.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_anstehende_MenuActions()
		{
			Int.SqlConnection(ref hSqlCSV);
			// 05.02.18 F3090 bezserldat IS NULL -> (bezserldat IS NULL OR bezsrechnr IS NULL)
			hSqlCSV.PrepareAndExecute(@"SELECT bezserfdat, bezsarztnr, anr2, bezshalternr, bezsrechnr,
bezsblz, bezskonto, bezsmaxdm, bezsltzteinzug, bezstag, bezsabdatum,
bezsiban, bezsbic, bezssigndat
INTO :frmRgSuchen.dtRADatum, :frmRgSuchen.nRAArztNr, :frmRgSuchen.nRAArztNr2, :frmRgSuchen.nRAHalterNr, :frmRgSuchen.nRARechNr,
:frmRgSuchen.strRAN1, :frmRgSuchen.strRAN2, :frmRgSuchen.nSBankeinzug, :frmRgSuchen.dtBuchDatAlt, :frmRgSuchen.nA1, :frmRgSuchen.dtSSperrDatum,
:frmRgSuchen.strBEZIban, :frmRgSuchen.strBEZBIC, :frmRgSuchen.dtBEZSignDat
FROM bezs, a
WHERE (bezserldat IS NULL OR bezsrechnr IS NULL) AND bezsarztnr=aarztnr ORDER BY bezserfdat");
			nFetchCSV = hSqlCSV.FetchNext();
			Var.nCount = 0;
			// 14.03.14 F1950 strDummy -> strMeldung
			strMeldung = "";
			while (nFetchCSV != Sys.FETCH_EOF) 
			{
				if (nA1 == SalNumber.Null) 
				{
					nA1 = SalDateTime.Current.Day();
				}
				if (nRAArztNr2 == 0 || nRAArztNr2 == SalNumber.Null) 
				{
					nRAArztNr2 = nRAArztNr;
				}
				// 20.04.12
				if (dtBuchDatAlt == SalDateTime.Null) 
				{
					dtBuchDatAlt = dtRADatum - 31;
				}
				// 30.01.12 If SalDateDay( SalDateCurrent(  ) ) >= nA1 And (SalDateMonth( SalDateCurrent(  )) > SalDateMonth( dtBuchDatAlt) or dtBuchDatAlt = DATETIME_Null) And SalDateCurrent(  ) >= dtSSperrDatum
				// ->
				// If SalDateDay( SalDateCurrent(  ) ) >= nA1 And (SalDateYear( SalDateCurrent(  )) > SalDateYear( dtBuchDatAlt) or SalDateMonth( SalDateCurrent(  )) > SalDateMonth( dtBuchDatAlt) or dtBuchDatAlt = DATETIME_Null)
				// And (SalDateCurrent(  ) >= dtSSperrDatum or dtSSperrDatum = DATETIME_Null)
				// 07.05.12 dtBuchDatAlt-31 -> dtBuchDatAlt+30
				if ((SalDateTime.Current.Day() >= nA1 || SalDateTime.Current > (dtBuchDatAlt + 30)) && (SalDateTime.Current.Year() > dtBuchDatAlt.Year() || SalDateTime.Current.Month() > dtBuchDatAlt.Month() || dtBuchDatAlt == SalDateTime.Null) && (SalDateTime.Current >= 
				dtSSperrDatum || dtSSperrDatum == SalDateTime.Null)) 
				{
					if (nRARechNr == SalNumber.Null)  // Iben-Muster
					{
						Int.SqlImmedSel(@"SELECT SUM(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
INTO :frmRgSuchen.nSaldo
FROM rk
WHERE " + Int.PalArztNr("rk", nRAArztNr, nRAArztNr2) + " AND rkhalternr = :frmRgSuchen.nRAHalterNr AND rkkzzahl < 2 AND rkdeaktiv IS NULL");
						// 31.07.18 F3137
						Int.SqlImmedSel("SELECT SUM(hbdm) INTO :frmRgSuchen.nRet FROM hb WHERE " + Int.PalArztNr("hb", nRAArztNr, nRAArztNr2) + @" AND hbhalternr = :frmRgSuchen.nRAHalterNr
AND hbcode LIKE 'BEZ%' AND hbreteinzdat IS NULL");
						if (nRet > 0 || nRet == SalNumber.Null) 
						{
							nRet = 0;
						}
						else
						{
							// Call SalMessageBeep( 0 )
						}
						// 25.02.19 F3137
						nBEZSaldo = nRet;
						// 03.04.19 F4488 If
						if (nSaldo > 0) 
						{

							nSaldo = nSaldo - nRet;

							if (nSaldo > 0 && nSaldo < nSBankeinzug) 
							{
								nSBankeinzug = nSaldo;
							}
							else if (nSaldo <= 0)  // 07.05.12 F1300
							{
								nSBankeinzug = 0;
							}
							if (nSBankeinzug > 0) 
							{
								// 11.11.13
								if (strBEZIban == "" || strBEZBIC == "" || dtBEZSignDat == SalDateTime.Null) 
								{
									strMeldung = strMeldung + nRAArztNr.ToString(0) + "/H" + nRAHalterNr.ToString(0) + @": IBAN, BIC oder Siganturdatum fehlt
";
								}
								else if (!(Int.PalIBANPruef(strBEZIban))) 
								{
									strMeldung = strMeldung + nRAArztNr.ToString(0) + "/H" + nRAHalterNr.ToString(0) + @": IBAN ungültig
";
								}
								else
								{
									// 07.05.19 F3137
									nSBankeinzug = nSBankeinzug - nBEZSaldo; // Minus, da nBEZSaldo negativ ist

									Int.SqlImmed(@"INSERT INTO bezd (bezderfdat, bezdarztnr, bezdhalternr, bezddm, bezdkonto, bezdblz, bezdiban, bezdbic, bezdsigndat)
VALUES( SYSDATETIME, :frmRgSuchen.nRAArztNr, :frmRgSuchen.nRAHalterNr, :frmRgSuchen.nSBankeinzug,
:frmRgSuchen.strRAN2, :frmRgSuchen.strRAN1, :frmRgSuchen.strBEZIban, :frmRgSuchen.strBEZBIC, :frmRgSuchen.dtBEZSignDat)");
									// 10.12.18 Ä1810 + , bezsanzseitretoure=bezsanzseitretoure+1
									Int.SqlImmed(@"UPDATE bezs SET bezsltzteinzug = SYSDATETIME, bezsanzseitretoure=bezsanzseitretoure+1
WHERE bezsarztnr = :frmRgSuchen.nRAArztNr AND bezshalternr = :frmRgSuchen.nRAHalterNr AND bezserfdat = :frmRgSuchen.dtRADatum");
									Var.nCount = Var.nCount + 1;
									// 25.02.19 F3137
									if (nBEZSaldo < 0) 
									{
										Int.SqlImmed("UPDATE hb SET hbreteinzdat=SYSDATE WHERE " + Int.PalArztNr("hb", nRAArztNr, nRAArztNr2) + @" AND hbhalternr = :frmRgSuchen.nRAHalterNr
AND hbcode LIKE 'BEZ%' AND hbreteinzdat IS NULL");
									}

								}
							}
						}
					}
					else
					{
						Int.SqlImmedSel(@"SELECT SUM(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
INTO :frmRgSuchen.nSaldo
FROM rk
WHERE rkarztnr = :frmRgSuchen.nRAArztNr AND rkhalternr = :frmRgSuchen.nRAHalterNr AND rkrechnr = :frmRgSuchen.nRARechNr AND rkkzzahl < 2 AND rkdeaktiv IS NULL");
						// 04.02.19 F3137
						Int.SqlImmedSel("SELECT SUM(hbdm) INTO :frmRgSuchen.nRet FROM hb WHERE " + Int.PalArztNr("hb", nRAArztNr, nRAArztNr2) + @" AND hbhalternr = :frmRgSuchen.nRAHalterNr
AND hbcode LIKE 'BEZ%' AND hbreteinzdat IS NULL");
						if (nRet > 0 || nRet == SalNumber.Null) 
						{
							nRet = 0;
						}
						else
						{
							// Call SalMessageBeep( 0 )
						}
						// 25.02.19 F3137
						nBEZSaldo = nRet;
						// 03.04.19 F4488 If
						if (nSaldo > 0) 
						{

							// 20.11.23 F5061 auskommentiert, da unten nochmal: Set nSBankeinzug = nSBankeinzug - nBEZSaldo	! Minus, da nBEZSaldo negativ ist
							// Set nSaldo = nSaldo - nRet

							if (nSBankeinzug == SalNumber.Null || nSBankeinzug == 0) 
							{
								nSBankeinzug = nSaldo;
							}
							if (nSaldo > 0 && nSaldo < nSBankeinzug) 
							{
								nSBankeinzug = nSaldo;
							}
							// 11.11.13
							// 05.07.12 F1351 If nSBankeinzug > 0
							if (nSBankeinzug > 0) 
							{
								if (strBEZIban == "" || strBEZBIC == "" || dtBEZSignDat == SalDateTime.Null) 
								{
									strMeldung = strMeldung + nRAArztNr.ToString(0) + "/H" + nRAHalterNr.ToString(0) + @"
";
								}
								else if (!(Int.PalIBANPruef(strBEZIban))) 
								{
									strMeldung = strMeldung + nRAArztNr.ToString(0) + "/H" + nRAHalterNr.ToString(0) + @": IBAN ungültig
";
								}
								else
								{
									// 07.05.19 F3137
									nSBankeinzug = nSBankeinzug - nBEZSaldo; // Minus, da nBEZSaldo negativ ist

									Int.SqlImmed(@"INSERT INTO bezd (bezderfdat, bezdarztnr, bezdhalternr, bezdrechnr, bezddm, bezdkonto, bezdblz, bezdiban, bezdbic, bezdsigndat)
VALUES( SYSDATETIME, :frmRgSuchen.nRAArztNr, :frmRgSuchen.nRAHalterNr, :frmRgSuchen.nRARechNr, :frmRgSuchen.nSBankeinzug,
:frmRgSuchen.strRAN2, :frmRgSuchen.strRAN1, :frmRgSuchen.strBEZIban, :frmRgSuchen.strBEZBIC, :frmRgSuchen.dtBEZSignDat)");
									Var.nCount = Var.nCount + 1;
									// 10.12.18 Ä1810 + , bezsanzseitretoure=bezsanzseitretoure+1
									Int.SqlImmed(@"UPDATE bezs SET bezsltzteinzug = SYSDATETIME, bezsanzseitretoure=bezsanzseitretoure+1
WHERE bezsarztnr = :frmRgSuchen.nRAArztNr AND bezshalternr = :frmRgSuchen.nRAHalterNr AND bezsrechnr = :frmRgSuchen.nRARechNr AND bezserfdat = :frmRgSuchen.dtRADatum");
									if ((nSaldo - nSBankeinzug) <= 0) 
									{
										Int.SqlImmed(@"UPDATE bezs SET bezserldat = SYSDATETIME
WHERE bezsarztnr = :frmRgSuchen.nRAArztNr AND bezshalternr = :frmRgSuchen.nRAHalterNr AND bezsrechnr = :frmRgSuchen.nRARechNr AND bezserfdat = :frmRgSuchen.dtRADatum");
									}
									// 25.02.19 F3137
									if (nBEZSaldo < 0) 
									{
										Int.SqlImmed("UPDATE hb SET hbreteinzdat=SYSDATE WHERE " + Int.PalArztNr("hb", nRAArztNr, nRAArztNr2) + @" AND hbhalternr = :frmRgSuchen.nRAHalterNr
AND hbcode LIKE 'BEZ%' AND hbreteinzdat IS NULL");
									}

								}
							}
						}
					}
				}

				nFetchCSV = hSqlCSV.FetchNext();
			}
			if (Var.nCount > 0) 
			{
				Sal.MessageBox(Var.nCount.ToString(0) + " Einzüge erstellt.", "Ok", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			}
			else
			{
				Sal.MessageBox("Keine Einzüge zu erstellen", "Nichts gefunden", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			}
			if (strMeldung != "") 
			{
				Sal.MessageBox(@"Folgende Bankeinzüge konnten NICHT durchgeführt werden:

" + strMeldung, "Fehlende Angaben", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			// 10.12.18 Ä1810 + , bezsanzseitretoure=bezsanzseitretoure+1
			Int.SqlImmed("UPDATE bezs SET BEZSANZRETOURE = 0 WHERE bezsanzseitretoure > 3");

			hSqlCSV.Commit();
			hSqlCSV.Disconnect();
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Einzüge_MenuActions()
		{
			frmBEZDaten.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_HalterSondersuche_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_HalterSondersuche_MenuActions()
		{
			frmSonderSuche.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Zahlungen_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Zahlungen_MenuActions()
		{
			frmInfoZahlAusbuch.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_KontoauszugStatistik_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_KontoauszugStatistik_MenuActions()
		{
			frmStatTK.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Rückerstattungen_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect) && (App.frmMain.dfUser.Text == "KEUER" || Var.strBNAbtlg == "GF");
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Rückerstattungen_MenuActions()
		{
			frmRueckErst.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Löschen_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Löschen_MenuActions()
		{
			frmDatLoe.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Datei_MenuActions()
		{
			// 17.06.11 Ä591
			nSBArztNrAlt = 0;
			strDrive = Sal.FileGetDrive();
			Sal.FileSetDrive("C:");
			Sal.WaitCursor(false);
			dlgLaufwerk.ModalDialog(this, "FremdbuchungCSV", ref strDir);
			Sal.FileSetDrive(strDrive);
			Int.SqlImmed("UPDATE sb SET sbuebdat = NULL WHERE sbuebdat = '1900-01-01'");
			// ! 26.09.07 F261
			// 29.08.14 Ä1100 Gänsefüßchen entfernt
			if (strDir == "") 
			{
				Sal.MessageBox("Sie haben kein Ziellaufwerk ausgewählt. Der Export wird abgebrochen.", "Achtung", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			}
			else
			{
				Sal.WaitCursor(true);
				if (!(hFile.Open(strDir + "moveta_buchungen.csv", (Sys.OF_Text | Sys.OF_Write)))) 
				{
					Sal.MessageBox("Die Datei konnte nicht erstellt werden. Prüfen Sie, ob Sie Schreibrechte haben.", "Fehler", (Sys.MB_IconStop | Sys.MB_Ok));
				}
				else
				{
					hFile.PutString("UmsatzEUR,SH,MwSt%,Gegenkonto,Belegnr,Belegdatum,Konto,Buchtext");

					Int.SqlConnection(ref hSqlCSV);
					hSqlCSV.PrepareAndExecute(@"SELECT ROWID, sbdm, sbsh, sbmwst, sbgegkto, sbbelnr, sbbeldat, sbkonto, sbbuchtext, sbarztnr
INTO :frmRgSuchen.strSBRowID, :frmRgSuchen.nSBDM, :frmRgSuchen.strSBSH, :frmRgSuchen.nSBMwSt, :frmRgSuchen.nSBGegKto,
:frmRgSuchen.nSBBelNr, :frmRgSuchen.dtSBBelDat, :frmRgSuchen.nSBKonto, :frmRgSuchen.strSBBuchText, :frmRgSuchen.nSBArztNr
FROM sb
WHERE sbuebdat IS NULL ORDER BY sbarztnr, sbbeldat");
					nFetchCSV = hSqlCSV.FetchNext();
					while (nFetchCSV != Sys.FETCH_EOF) 
					{
						// 11.07.11
						if (nSBMwSt == 7) 
						{
							nSBMwSt = 8;
						}
						else if (nSBMwSt == 16) 
						{
							nSBMwSt = 7;
						}
						else
						{
							nSBMwSt = 9;
						}

						if (nSBArztNr != nSBArztNrAlt) 
						{
							hFile.Close();
							if (!(hFile.Open(strDir + "moveta_buchungen" + nSBArztNr.ToString(0) + ".csv", (Sys.OF_Text | Sys.OF_Write)))) 
							{
								Sal.MessageBox("Die Datei konnte nicht erstellt werden. Prüfen Sie, ob Sie Schreibrechte haben.", "Fehler", (Sys.MB_IconStop | Sys.MB_Ok));
							}
							else
							{
								hFile.PutString("\\UmsatzEUR\\,SH,MwSt%,Gegenkonto,Belegnr,Belegdatum,Konto,Buchtext");
							}
							// 10.10.11 F1041
							nSBArztNrAlt = nSBArztNr;
						}
						hFile.PutString(Int.PalStringMakeCSV(Int.PalStrNumDecPoint(nSBDM, 8, 2)) + "," + Int.PalStringMakeCSV(strSBSH) + "," + Int.PalStringMakeCSV(Int.PalStrNumDecPoint(nSBMwSt, 5, 0)) + "," + Int.PalStringMakeCSV(Int.PalStrNumDecPoint(nSBGegKto, 
									5, 0)) + "," + Int.PalStringMakeCSV(Int.PalStrNumDecPoint(nSBBelNr, 8, 0)) + "," + Int.PalStringMakeCSV(Int.PalDateToStrDE(dtSBBelDat)) + "," + Int.PalStringMakeCSV(Int.PalStrNumDecPoint(nSBKonto, 5, 0)) + "," + Int.PalStringMakeCSV(
								strSBBuchText));
						Int.SqlImmed("UPDATE sb SET sbuebdat = '1900-01-01' WHERE rowid = :frmRgSuchen.strSBRowID");
						nFetchCSV = hSqlCSV.FetchNext();
					}
					hFile.Close();
					hFile.Open(strDir + "moveta_buchungen.csv", Sys.OF_Delete);
					hSqlCSV.Commit();
					hSqlCSV.Disconnect();
					Int.SqlImmed("UPDATE sb SET sbuebdat = SYSDATETIME WHERE sbuebdat = '1900-01-01'");
					Sal.MessageBox("Der Export wurde abgeschlossen.", "Ok", (Sys.MB_Ok | Sys.MB_IconAsterisk));
				}
			}
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_movetaME_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_movetaME_MenuActions()
		{
			frmTVNOnline.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Logbuch_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Logbuch_MenuActions()
		{
			frmLogbuch.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Forderungsaufstellungsdruck_MenuActions()
		{
			Int.SqlImmed("DELETE FROM fa");
			Sal.MessageBox("Der Forderungsaufstellungsdruck wurde freigegeben.", "!", (Sys.MB_Ok | Sys.MB_IconExclamation));
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Druckkontrollliste_MenuActions()
		{
			Int.SqlImmed("UPDATE dk SET dkerldat = NULL WHERE dkerldat >= SYSDATE");
			Int.PalLog("DK Reset");
			Sal.MessageBox("Liste kann jetzt erneut gedruckt werden.", "zurückgesetzt", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool popupMenu_Sonstiges_1_EnabledWhen()
		{
			return Var.strBNAbtlg == "ED";
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_unbekVornamen_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect) && App.frmMain.dfUser.Text == "KEUER";
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_unbekVornamen_MenuActions()
		{
			tblVN.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Namenskonvertierung_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect);
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Namenskonvertierung_MenuActions()
		{
			frmNamenstest.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Abrechnungsstorno_MenuActions()
		{
			// 11.12.08 Ä346
			frmRechVonBisStorno.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_GUI_MenuActions()
		{
			// Call PALTDAppTools_ShowGuiInspector( hWndNULL, TRUE, frmRgSuchen )
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_SQLMonitor_MenuActions()
		{
			// Call PALTDAppTools_ShowSqlMonitor( hWndNULL, TRUE, FALSE )
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_doppelte_MenuActions()
		{
			frmHalterDoppelt.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_DSGVOLöschung_EnabledWhen()
		{
			return Sal.IsWindowEnabled(App.frmMain.pbDisconnect) && (App.frmMain.dfUser.Text == "KEUER" || Var.strBNAbtlg == "GF");
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_DSGVOLöschung_MenuActions()
		{
			frmDSGVOLoesch.CreateWindow(this);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_GUI_1_EnabledWhen()
		{
			return Var.strBNAbtlg == "ED";
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_GUI_1_MenuActions()
		{
			// Call PALTDAppTools_ShowGuiInspector( hWndNULL, TRUE, frmRgSuchen )
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_SQLMonitor_1_EnabledWhen()
		{
			return Var.strBNAbtlg == "ED";
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_SQLMonitor_1_MenuActions()
		{
			// Call PALTDAppTools_ShowSqlMonitor( hWndNULL, TRUE, FALSE )
			return 0;
		}
		
		/// <summary>
		/// frmRgSuchen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRgSuchen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmRgSuchen_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmRgSuchen_OnSAM_Destroy(sender, e);
					break;
				
				// On SAM_Activate
				
				// 28.01.11
				
				// 09.03.16 in Timer verschoben
				
				// Call PalCountZettel(  )
				
				case Sys.SAM_Timer:
					this.frmRgSuchen_OnSAM_Timer(sender, e);
					break;
				
				case Const.WM_SIZE:
					this.frmRgSuchen_OnWM_SIZE(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRgSuchen_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			//
            Int.PalGetSize(this, false);
			Sal.DisableWindow(App.frmMain.pbSuchen);
			// 27.12.18
			this.strPfadLL = Vis.DosGetEnvString("ALLUSERSPROFILE");
			if (this.strPfadLL != "" && this.strPfadLL.Right(1) != "\\") 
			{
				this.strPfadLL = this.strPfadLL + "\\";
			}
			Int.PalGetProfileStringR("Vorgabe", "PfadLL", this.strPfadLL, ref this.strPfadLL, "TVN");
			//FC:FINAL: axPfadLL
			this.axPfadLL.FolderMode = true;
			this.axPfadLL.Path = this.strPfadLL;
			// 14.05.14 \\dbserver\\Dateiarchiv -> \\dateiserver\\TVN-Archiv
#if FECHER
			Var.strPfadArchiv = "F:\\TVN-Archiv\\";
#else
			Var.strPfadArchiv = Const.PATH_TVNARCHIVE;
#endif
			//FC:CHECK: axTWAIN
			//this.axTwain.SetLicenseNumber("1123975584299537269312072", ref this.bOk);
			// 13.10.10
			if (Sql.Database == "TVN2") 
			{
				this.SetText("moveta-Programm v" + Var.strProgVer + " TESTDATENBANK");
			}
			else
			{
				this.SetText("moveta-Programm v" + Var.strProgVer);
			}
			// Call SalCenterWindow(hWndForm)
			// 14.03.02
			if (Var.strBNAbtlg == "MA") 
			{
			}
			else
			{
				this.pbRAab.DisableWindow();
			}
			// Call SalSetWindowLoc ( hWndForm, 0, 0 )
			Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			Sal.ColorSet(this.cbZettelRg, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			Sal.ColorSet(this.cbRechPos, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			// 27.08.18 Ä1769
			Sal.ColorSet(this.cbRechPDF, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);

			Sal.ColorSet(this.cbZahlungen, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			Sal.ColorSet(this.cbMahnungen, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			// Call SalColorSet(cbRaten,COLOR_IndexWindow,COLOR_3DFace)
			Sal.ColorSet(this.cbTagebuch, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			Sal.ColorSet(this.cbPR, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			Sal.ColorSet(this.cbFA, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			Sal.DisableWindow(this.cbFA);
			Sal.ColorSet(this.cbEL, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			// 30.03.10 OTÄ135
			Sal.ColorSet(this.cbRaZa, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);

			this.dfSArztOP.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			this.dfSArztSaldo.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			this.tblHZettel.SetWindowColor(Sys.COLOR_IndexWindow, 0xefffef);
			this.tblHZahlungen.SetWindowColor(Sys.COLOR_IndexWindow, 0xefffff);
			this.tblHTagebuch.SetWindowColor(Sys.COLOR_IndexWindow, 0xffefff);
			this.tblHMahnungen.SetWindowColor(Sys.COLOR_IndexWindow, 0xffefef);
			// 03.09.01
			// 29.10.14 Ä1115 + SpezifiRg
			// 17.01.18 Ä1684 rkmahnsperr raus
			// 27.08.18 Ä1769 + Barcode
			// 03.07.19 Ä1854 + Vorshussminderung
			// 		rkvorschussdm, rkvorschussdat, rkvorschussrueckdm, rkvorschussrueckdat, rkvorschussrueckgrund
			// 01.08.23 Ä2107 Versicherung
			this.strSelectRgI = @"select rkarztnr,rkhalternr,rkrechnr,
		rkbuchtext,rkrechdat,rkfaelldat,rkdmleis,rkdmarzn,rkdmmahn, rkdmzins, rkmbdmopl,
		rkkzmwst, rkmahnstufe,rkmahnsperrbis, rkmahnltzt,rkzaleis,rkzaarzn,rkzamahn,rkzazins, rkmbzaopl,
		rkkzzahl,rkverjaehr,rkteilzdat,(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-
		rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl), rk.rowid, rkreverse, rkpapierrg, rkbarcode,
		rkvorschussdm, rkvorschussdat, rkvorschussrueckdm, rkvorschussrueckdat, rkvorschussrueckgrund, rkvecode, rkvevsnr
		INTO :frmRgSuchen.dfArztNr,:frmRgSuchen.dfHalterNr,:frmRgSuchen.dfSRgNr,:frmRgSuchen.dfSBuchtext,:frmRgSuchen.dfSRgDat
		:frmRgSuchen.dfSFaellDat,:frmRgSuchen.dfSDMLeis,:frmRgSuchen.dfSDMArzn,:frmRgSuchen.dfSDMMahn,:frmRgSuchen.dfSDMZins,:frmRgSuchen.dfSDMMB,:frmRgSuchen.dfSMwstKz,
		:frmRgSuchen.dfSMahnst,:frmRgSuchen.dfSDatMahn,:frmRgSuchen.dfSDatMahnltzt,:frmRgSuchen.dfSZALeis,:frmRgSuchen.dfSZAArzn,:frmRgSuchen.dfSZAMahn,:frmRgSuchen.dfSZAZins,:frmRgSuchen.dfSZAMB,
		:frmRgSuchen.dfSZahlKZ,:frmRgSuchen.dfSVerj,:frmRgSuchen.dfSTeilzDat,:frmRgSuchen.dfSRestOP,:frmRgSuchen.dfRowID, :frmRgSuchen.cbReverse, :frmRgSuchen.cbSpezifiRg,
		:frmRgSuchen.strBarcode,
		:frmRgSuchen.nVorschussDM, :frmRgSuchen.dtVorschussDat, :frmRgSuchen.nVorschussDMRueck, :frmRgSuchen.dtVorschussDatRueck, :frmRgSuchen.strVorschussRueckGrund,
		:frmRgSuchen.cmbVECode, :frmRgSuchen.dfVeVSNr
		from RK";
			// Call SqlCreateSession(hSession,'')
			// Call SqlConnection(hSqlRg)
			Int.SqlConnection(ref Var.hSqlFetch);
			// Call SqlConnection(hSqlZa)
			// Call SqlConnection(hSqlHalter)
			// Call SqlConnection(hSqlSA)
			// Call SqlConnection(hSqlSH)
			// Call SqlSetIsolationLevel(hSqlLlRW,'RO')
			// If SqlCreateStatement (hSession, hSqlRg)
			// If SqlSetIsolationLevel(hSqlRg,'RO')
			// If SqlCreateStatement (hSession, hSqlFetch)
			// If SqlSetIsolationLevel(hSqlFetch,'RO')
			// If SqlCreateStatement (hSession, hSqlZa)
			// If SqlSetIsolationLevel(hSqlZa,'RO')
			// If SqlCreateStatement (hSession, hSqlHalter)
			// If SqlSetIsolationLevel(hSqlHalter,'RO')
			// If SqlCreateStatement (hSession, hSqlSA)
			// If SqlSetIsolationLevel(hSqlSA,'RO')
			// If SqlCreateStatement (hSession, hSqlSH)
			// If SqlSetIsolationLevel(hSqlSH,'RO')

			this.pbWeiter.DisableWindow();
			this.pbZurück.DisableWindow();
			// Set dfArztNr = nSuchArzt
			// Set dfHalterNr = nSuchHalter
			// Set dfRgNr = nSuchRech
			// If dfArztNr=0
			// Call SalClearField(dfArztNr)
			// Call SalHideWindow(pbTelA)
			// Else
			// Call SalPostMsg(dfArztNr, SAM_Validate, 0, 0)
			// If dfHalterNr = NUMBER_Null
			// Set dfHalterNr = 0
			// If dfHalterNr=0
			// Call SalClearField(dfHalterNr)
			// Call SalHideWindow(pbTelH)
			// Else
			// Call SalPostMsg(dfHalterNr, SAM_Validate, 0, 0)
			// If dfRgNr=0
			// Call SalClearField(dfRgNr)
			// Else
			// Call SalPostMsg(dfRgNr, SAM_Validate, 0, 0)
			// 18.05.00
			// If dfArztNr > 0 And (dfRgNr >0 Or dfHalterNr >0)
			// Call SalPostMsg(pbSucheRg, SAM_Click, 0, 0)
			this.PalFuelle(this.nSuchArzt, this.nSuchHalter, this.nSuchRech);
			// 08.11.06
			// 20.01.14 Ä1005
			// Call SqlCreateSession(hSession,'')
			// If SqlCreateStatement (hSession, hSqlZa)
			// If SqlSetIsolationLevel(hSqlZa,'RO')
			Int.SqlConnection(ref this.hSqlZa);

			this.cmbSHLC.PopulateList(this.hSqlZa, "SELECT lccode || \' \' || lcname FROM lc order by lccode");
			// 27.10.16
			this.cmbSHLC.AddListItem("");
			// 20.01.14 Ä1005
			this.hSqlZa.Disconnect();
			// Call SqlFreeSession( hSession )

			// 11.05.09
			// Set obKomp = TRUE
			// 26.08.10
			this.cmbTheme.Text = Var.strTheme;
			// 13.10.10 Dateiarchiv
			if (Var.strPfadArchiv == "") 
			{
				this.axShell.Enabled = false;
			}
			else
			{
				Sal.WaitCursor(true);
				this.axShell.Enabled = true;
				Int.PalExplorer("", false);
				if (Var.strPfadArchiv == "") 
				{
					this.axShell.Enabled = false;
				}
				else
				{
					//FC:FINAL: axShell
					//if (!(this.axShell.PropSetPath(Var.strPfadArchiv + Sql.Database + "\\"))) 
					//{
					//}
					this.axShell.Path = Var.strPfadArchiv + Sql.Database + "\\";
                }
				Sal.WaitCursor(false);
			}
			//FC:FINAL: axShell
			//this.axShell.PropGetThumbnailWidth(ref this.nRet);
			//this.axShell.PropGetThumbnailHeight(ref this.nRet);
			this.nRet = axShell.ThumbnailSize.Height;
			if (this.nRet == 256) 
			{
				this.obSize256.Checked = true;
			}
			else if (this.nRet == 96) 
			{
				this.obSize96.Checked = true;
			}
			else if (this.nRet == 128) 
			{
				this.obSize128.Checked = true;
			}
			//FC:Final: axShell
			this.axShell.ViewState = Jam.Shell.ViewState.Thumbnails;
			this.axShell.Thumbnails = true;
			// If cmbDAStyle = 'Kacheln'
			// Call axShell.PropSetViewStyle( 0 )
			// Call axShell.PropSetThumbnails( TRUE )
			// Else If cmbDAStyle = 'Symbole'
			// Call axShell.PropSetViewStyle( 1 )
			// Else If cmbDAStyle = 'Liste'
			// Call axShell.PropSetViewStyle( 2 )
			// Else If cmbDAStyle = 'Details'
			// Call axShell.PropSetViewStyle( 3 )
			// 14.08.12 Ä796
			this.tblHZahlungen.SetContextMenu("frmRgSuchenZaRightClick", 0);
			// 23.11.15 Ä1289
			// Set strBNZei = 'YI'
			// Set strBNAbtlg = 'MA'
			if (Var.strBNAbtlg == "MA") 
			{
				// Call SalContextMenuSetPopup( gridWv, 'frmRgSuchenWvRightClick', 0)
				this.PalHoleWv();
			}
			else
			{
				this.gridWv.HideWindow();
				this.pbDruckWv.HideWindow();
				this.bkgd131.HideWindow();
			}
			// 16.03.16 Ä1358
			this.cbFAEnte.Checked = true;
			this.cbFARZZins.Checked = true;
			// 09.03.16
			this.PalCountZettel();
			this.SetTimer(1, 1000 * 60 * 5);
			// 20.02.18 Ä1710
			// 28.01.21 laut SA:  and strBNAbtlg != 'GF'
			// If strBNAbtlg != 'ED' and strBNAbtlg != 'GF'	! auskommentiert: SE 01.03.22
			// Call SalHideWindow( pbSL )

			// Call SalMessageBox( PalStrNumPicture( 1234567.89, '#,##0.00'), 'Test', MB_Ok )
			// 07.08.23 Ä2107 + versicherung
			this.cmbVECode.PopulateList(Var.hSql, "SELECT vecode FROM ve order by vecode");
			this.cmbVECode.AddListItem("");
#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRgSuchen_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			//FC:FINAL:#43 aus axShell_Destroy übernommen
            // 13.05.09
            Int.PalSetProfileStringR("Vorgabe", "DateiArchiv.Style", this.cmbDAStyle.Text, "Pegasus");
            
			// 09.03.16
            this.KillTimer(1);

			Int.PalSetSize(this);
			// Call SqlDisconnect(hSqlRg)
			Var.hSqlFetch.Disconnect();
			// Call SqlDisconnect(hSqlZa)
			// Call SqlDisconnect(hSqlHalter)
			// Call SqlDisconnect(hSqlSA)
			// Call SqlDisconnect(hSqlSH)
			// Call SqlFreeSession( hSession )
			Sal.EnableWindow(App.frmMain.pbSuchen);
			if (Var.bfrmRR) 
			{
				App.frmRR.DestroyWindow();
			}
			App.frmMain.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// SAM_Timer event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRgSuchen_OnSAM_Timer(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalCountZettel();
			#endregion
		}
		
		/// <summary>
		/// WM_SIZE event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRgSuchen_OnWM_SIZE(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 12.11.21
			this.PalResizeForm();
			#endregion
		}
		
		/// <summary>
		/// picTabs WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case QO.TABSM_TabActivateFinish:
					this.picTabs_OnTABSM_TabActivateFinish(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// TABSM_TabActivateFinish event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_OnTABSM_TabActivateFinish(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 12.03.15 Ä1172
			this.picTabs.SelectedIndex = this.picTabs.GetClicked();
			if (this.picTabs.SelectedIndex == 0)  // OP
			{
				if (this.dfHalterNr.Number > 0) 
				{
					Int.SqlIstDa(" FROM ee WHERE eeerldatum IS NULL AND " + Int.PalArztNr("ee", this.nArztNr, this.nArztNr2) + @"
and eehalternr=" + this.dfHalterNr.Number.ToString(0), ref this.bExist);
					if (this.bExist) 
					{
						this.pbEWAKontrolle.ShowWindow();
						this.pbEWAKontrolle.EnableWindow();
					}
					else
					{
						this.pbEWAKontrolle.HideWindow();
					}
				}
				else
				{
					this.pbEWAKontrolle.HideWindow();
				}
			}
			else if (this.picTabs.SelectedIndex == 5)  // Dateiarchiv
			{
				//this.axTwain.TwainIsAvailable(ref Var.bOK);
				Var.bOK = axTwain.TwainIsAvailable();
                if (!(Var.bOK)) 
				{
					this.bkgdScanner.Text = "Twain ist nicht verfügbar";
				}
				else
				{
                    //this.axTwain.TwainGetDefaultSourceName(ref Var.strDummy);
                    Var.strDummy = axTwain.TwainGetDefaultSourceName(0);
                    if (Var.strDummy == "") 
					{
						this.bkgdScanner.Text = " ";
					}
					else
					{
						this.bkgdScanner.Text = "Scanner: " + Var.strDummy;
					}
				}
				// 11.11.21
				// If Not SalLoadAppAndWait('CLScan.exe /GetScanners > "K:\\CLScanList.txt"',Window_Normal, nRet)
				// Call SalMessageBox('Scanprogramm CLScan.exe wurde nicht gefunden.','Fehler',MB_Ok)
				// Else
				// Call ShellExecuteA ( frmRgSuchen, 'open', 'CLScan.exe', '/GetScanners > "K:\\CLScanList.txt"', STRING_Null, SW_SHOW )
				// Call SalListClear( cmbScanner )
				// Call SalFileOpen( hFile, 'C:\\ProgramData\\CLScanList.txt', OF_Read|OF_Text )
				// While SalFileGetStr( hFile, strDummy1, 32000 )
				// If strDummy1 = 'Supported scanners:'
				// Else If strDummy1 = 'None TWAIN scanner found.'
				// Call SalDisableWindow( pbDAScan )
				// Set bkgdScanner = strDummy1
				// Else
				// Call SalListAdd( cmbScanner, strDummy1 )
				// Call PalGetProfileStringR('DefaultScanner','Name', '', strDummy, 'TVN')
				// Set cmbScanner = strDummy
				// Call SalFileClose( hFile )
			}
			#endregion
		}
		
		/// <summary>
		/// dfQuick WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfQuick_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfQuick_OnSAM_Validate(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.dfQuick_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfQuick_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 27.09.06 F65
			this.PalLeereHalterFelder();

			// 21.03.01
			if (((SalString)this.dfQuick.Text).Scan("-") != -1) 
			{
				this.dfQuick.Text = ((SalString)this.dfQuick.Text).Left(((SalString)this.dfQuick.Text).Scan("-")) + "H" + ((SalString)this.dfQuick.Text).Mid(((SalString)this.dfQuick.Text).Scan("-") + 1, 255);
			}
			else if (((SalString)this.dfQuick.Text).Scan("+") != -1) 
			{
				this.dfQuick.Text = ((SalString)this.dfQuick.Text).Left(((SalString)this.dfQuick.Text).Scan("+")) + "R" + ((SalString)this.dfQuick.Text).Mid(((SalString)this.dfQuick.Text).Scan("+") + 1, 255);
			}

			if (((SalString)this.dfQuick.Text).Scan("H") != -1) 
			{
				this.dfArztNr.Number = Int.PalValNum(((SalString)this.dfQuick.Text).Left(((SalString)this.dfQuick.Text).Scan("H")));
				this.dfRgNr.Clear();
				this.dfHalterNr.Number = Int.PalValNum(((SalString)this.dfQuick.Text).Mid(((SalString)this.dfQuick.Text).Scan("H") + 1, 255));
				this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0);
				this.dfHalterNr.PostMessage(Sys.SAM_Validate, 0, 0);
				this.dfQuick.Text = this.dfArztNr.Number.ToString(0);
			}
			else if (((SalString)this.dfQuick.Text).Scan("R") != -1) 
			{
				this.dfArztNr.Number = Int.PalValNum(((SalString)this.dfQuick.Text).Left(((SalString)this.dfQuick.Text).Scan("R")));
				this.dfHalterNr.Clear();
				this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0);
				this.dfRgNr.Number = Int.PalValNum(((SalString)this.dfQuick.Text).Mid(((SalString)this.dfQuick.Text).Scan("R") + 1, 255));
				this.dfRgNr.PostMessage(Sys.SAM_Validate, 0, 0);
				this.pbSucheRg.PostMessage(Sys.SAM_Click, 0, 0);
				this.dfQuick.Text = this.dfArztNr.Number.ToString(0);
			}
			else
			{
				// 27.09.06 F65
				this.dfArztName.Clear();
				this.dfATel.Clear();
				this.dfATel2.Clear();
				this.dfAEMail.Clear();
				this.dfAMC.Clear();
				this.dfAZust.Clear();
				this.dfArztName2.Clear();
				this.dfHalterNr.Clear();

				this.dfArztNr.Number = Int.PalValNum(this.dfQuick.Text);
				this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0);
				this.dfQuick.Text = this.dfArztNr.Number.ToString(0);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfQuick_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.dfQuick, @"Schnelleingabe, z.B. :

423-95  zeigt Arzt 423 und Halter 95 an,
423+1865 zeigt Arzt 423 und Rechnung 1865 an.");
			return;
			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(this.dfHalterNr.IsEmpty())) 
			{
				Var.dtLogDauerStart = SalDateTime.Current;
				if (!(this.dfArztNr.IsEmpty())) 
				{
					// 27.09.06 F65
					this.PalLeereHalterFelder();

					this.nArztNr = this.dfArztNr.Number;
					Int.SqlImmedSel("SELECT ANR2 INTO :frmRgSuchen.nArztNr2 FROM A WHERE AARZTNR = :frmRgSuchen.dfArztNr");
					if (this.nArztNr2 == 0) 
					{
						this.nArztNr2 = this.dfArztNr.Number;
					}
				}
				else
				{
					this.nArztNr2 = this.dfArztNr.Number;
				}
				this.PalFuelleInfosH();
				// Call PalLogDauer( 'Info: Halter', SalDateCurrent(  ) - dtLogDauerStart )
			}
			#endregion
		}
		
		/// <summary>
		/// dfProzNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfProzNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfProzNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfProzNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 19.08.14 F2118 pr -> prd
			Int.SqlIstDa(" from prd where prdnr=:frmRgSuchen.dfProzNr", ref this.bOk);
			if (this.bOk) 
			{
				Int.SqlImmedSel(@"SELECT prdarztnr, prdhalternr
into :frmRgSuchen.dfArztNr,  :frmRgSuchen.dfHalterNr
from prd
WHERE prdnr=:frmRgSuchen.dfProzNr");
				this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0);
				this.dfHalterNr.PostMessage(Sys.SAM_Validate, 0, 0);
			}
			else
			{
				Sal.MessageBox(@"angegebene PR-Nr.
ist nicht vorhanden !", "PR falsch", (Sys.MB_Ok | Sys.MB_IconStop));
				this.dfProzNr.Clear();
			}
			#endregion
		}
		
		/// <summary>
		/// dfRZNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRZNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRZNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRZNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlIstDa(" from rz where rznr=:frmRgSuchen.dfRZNr AND rzdeaktiv IS NULL", ref this.bOk);
			if (this.bOk) 
			{
				Int.SqlImmedSel(@"SELECT rzarztnr, rzhalternr
into :frmRgSuchen.dfArztNr,  :frmRgSuchen.dfHalterNr
from rz
WHERE rznr=:frmRgSuchen.dfRZNr");
				this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0);
				this.dfHalterNr.PostMessage(Sys.SAM_Validate, 0, 0);
			}
			else
			{
				Sal.MessageBox(@"angegebene RZ-Nr.
ist nicht vorhanden !", "RZ falsch", (Sys.MB_Ok | Sys.MB_IconStop));
				this.dfRZNr.Clear();
			}
			#endregion
		}
		
		/// <summary>
		/// dfAZ WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAZ_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfAZ_OnSAM_Validate(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.dfAZ_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAZ_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlIstDa(" from pr where praz LIKE \'%" + this.dfAZ.Text + "%\'", ref this.bOk);
			if (this.bOk) 
			{
				Int.SqlImmedSel(@"SELECT prarztnr, prhalternr
into :frmRgSuchen.dfArztNr,  :frmRgSuchen.dfHalterNr
from pr
WHERE praz LIKE '%" + this.dfAZ.Text + "%\'");
				this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0);
				this.dfHalterNr.PostMessage(Sys.SAM_Validate, 0, 0);
			}
			else
			{
				Sal.MessageBox(@"angegebenes Aktenzeichen
ist nicht vorhanden !", "AZ falsch", (Sys.MB_Ok | Sys.MB_IconStop));
				this.dfProzNr.Clear();
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAZ_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.dfAZ, "sucht nach beliebigem Teil eines Aktenzeichens");
			return;
			#endregion
		}
		
		/// <summary>
		/// dfVWZ WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfVWZ_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfVWZ_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfVWZ_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (((SalString)this.dfVWZ.Text).Left(2) == "11") 
			{
				if (((SalString)this.dfVWZ.Text).Length == 13) 
				{
					this.dfArztNr.Number = Int.PalValNum(((SalString)this.dfVWZ.Text).Mid(2, 4));
					this.dfRgNr.Number = Int.PalValNum(((SalString)this.dfVWZ.Text).Mid(6, 6));
					// 29.05.17 Ä1552
					Int.SqlImmedSel(@"SELECT rkhalternr INTO :frmRgSuchen.dfHalterNr FROM rk
WHERE rkarztnr = :frmRgSuchen.dfArztNr AND rkrechnr = :frmRgSuchen.dfRgNr AND rkdeaktiv IS NULL");
					// Call SalClearField(dfHalterNr)

					this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0);
					// 29.05.17 Ä1552 dfRgNr -> dfHalterNr
					this.dfRgNr.Number = Sys.NUMBER_Null;
					this.dfHalterNr.PostMessage(Sys.SAM_Validate, 0, 0);
					this.pbSucheRg.PostMessage(Sys.SAM_Click, 0, 0);
					this.dfQuick.Text = this.dfArztNr.Number.ToString(0);
				}
				else
				{
					Sal.MessageBox(this.dfVWZ.Text + " ist kein gültiger Verwendungszweck!", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
			}
			else if (((SalString)this.dfVWZ.Text).Left(2) == "97") 
			{
				this.dfRZNr.Number = Int.PalValNum(((SalString)this.dfVWZ.Text).Mid(2, 6));
				this.dfArztNr.Number = Int.PalValNum(((SalString)this.dfVWZ.Text).Mid(8, 4));
				this.dfHalterNr.Number = Int.PalValNum(((SalString)this.dfVWZ.Text).Mid(12, 5));
				this.dfQuick.Text = this.dfArztNr.Number.ToString(0);
				this.dfRgNr.Clear();
				this.dfRZNr.PostMessage(Sys.SAM_Validate, 0, 0);
			}
			else
			{
				Sal.MessageBox("Der angegebene Verwendungszweck " + this.dfVWZ.Text + " ist ungültig.", "VWZ ungültig", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			#endregion
		}
		
		/// <summary>
		/// dfMahnNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMahnNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfMahnNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMahnNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Int.SqlIstDa("FROM ma WHERE manr = :frmRgSuchen.dfMahnNr AND madeaktiv IS NULL", ref Var.bOK)) 
			{
			}
			if (Var.bOK) 
			{
				// 29.05.17 Ä1552
				Int.SqlImmedSel(@"SELECT maarztnr, marechnr INTO :frmRgSuchen.dfArztNr, :frmRgSuchen.dfRgNr FROM ma
WHERE manr = :frmRgSuchen.dfMahnNr AND madeaktiv IS NULL");
				Int.SqlImmedSel(@"SELECT rkhalternr INTO :frmRgSuchen.dfHalterNr FROM rk
WHERE rkarztnr = :frmRgSuchen.dfArztNr AND rkrechnr = :frmRgSuchen.dfRgNr AND rkdeaktiv IS NULL");
				// Call SalClearField(dfHalterNr)

				this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0);
				// 29.05.17 Ä1552 dfRgNr -> dfHalterNr
				this.dfRgNr.Number = Sys.NUMBER_Null;
				this.dfHalterNr.PostMessage(Sys.SAM_Validate, 0, 0);
				this.pbSucheRg.PostMessage(Sys.SAM_Click, 0, 0);
				this.dfQuick.Text = this.dfArztNr.Number.ToString(0);
			}
			else
			{
				Sal.MessageBox("Die angegebene Mahnungsnummer " + this.dfMahnNr.Number.ToString(0) + " ist ungültig.", "Mahnungsnr. ungültig", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeu_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalLeereFelder();
			this.dfQuick.SetFocus();
			#endregion
		}
		
		/// <summary>
		/// pbSucheRg WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSucheRg_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSucheRg_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSucheRg_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(this.dfHalterNr.IsEmpty() && this.dfRgNr.IsEmpty()) && !(this.dfArztNr.IsEmpty())) 
			{
				Var.dtLogDauerStart = SalDateTime.Current;
				Var.bOK = this.PalFuelleWhere();
				if (Var.bOK) 
				{
					this.SetStatusBarText("Suche läuft ...");
					Int.PalLog("InfoRg." + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0) + "/" + Int.PalStrNum(this.dfRgNr.Number, 6, 0));
					Int.SqlHandleExec(Var.hSqlFetch, this.strSelectRg + " ORDER BY RKRECHDAT DESC", "Lesen Rechnungen", ref Var.nCount);
					Var.nCount = Var.hSqlFetch.GetResultSetCount();
					// Call SqlCommit(hSqlFetch)
					Var.strStatus = Var.nCount.ToString(0);
					if (Var.nCount > 1) 
					{
						this.nFetch = Var.hSqlFetch.FetchNext();
						Int.PalCheckFetch(this.nFetch);
						this.PalFuelleInfos();
						this.pbWeiter.EnableWindow();
						this.pbZurück.EnableWindow();
						this.SetStatusBarText(Var.strStatus + " Datensätze gefunden");
					}
					else if (Var.nCount == 1) 
					{
						this.nFetch = Var.hSqlFetch.FetchNext();
						Int.PalCheckFetch(this.nFetch);
						this.PalFuelleInfos();
						this.pbWeiter.DisableWindow();
						this.pbZurück.DisableWindow();
						this.SetStatusBarText(Var.strStatus + " Datensatz gefunden");
					}
					else
					{
						this.pbWeiter.DisableWindow();
						this.pbZurück.DisableWindow();
						this.SetStatusBarText("Keine Daten gefunden");
					}
				}
				else
				{
					this.pbWeiter.DisableWindow();
					this.pbZurück.DisableWindow();
					this.SetStatusBarText("ungültige Suche !!");
				}
				// Call PalLogDauer( 'Info: Rech', SalDateCurrent(  ) - dtLogDauerStart )
			}
			else
			{
				Sal.MessageBox("Rech-Nr, Halter-Nr. oder Arzt-Nr. ist leer.", "Achtung", (Sys.MB_IconExclamation | Sys.MB_Ok));
			}
			#endregion
		}
		
		/// <summary>
		/// pbSucheOP WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSucheOP_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSucheOP_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSucheOP_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(this.dfHalterNr.IsEmpty()) && !(this.dfArztNr.IsEmpty())) 
			{
				Var.bOK = this.PalFuelleWhere();
				// If bOK
				// Set strSelectRg = strSelectRg || ' and rkkzzahl not in (2,3,4,5) and
				// (rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn)<>0' || ' ORDER BY RKRECHDAT DESC'
				// Call SalStatusSetText(frmRgSuchen,'Suche läuft ...')
				// Set bOK = SqlPrepare(hSqlFetch,strSelectRg)
				// Set bOK = SqlExecute(hSqlFetch)
				// Set bOK = SqlGetResultSetCount(hSqlFetch,nCount)
				// Call SalNumberToStr(nCount,0,strStatus)
				// Call SalStatusSetText(frmRgSuchen,strStatus || ' Datensätze gefunden')
				// If nCount>1
				// Call SqlFetchNext(hSqlFetch,nFetch)
				// Call PalCheckFetch(nFetch)
				// Call PalFuelleInfos()
				// Call SalEnableWindow(pbWeiter)
				// Call SalEnableWindow(pbZurück)
				// Else If nCount=1
				// Call SqlFetchNext(hSqlFetch,nFetch)
				// Call PalCheckFetch(nFetch)
				// Call PalFuelleInfos()
				// Call SalDisableWindow(pbWeiter)
				// Call SalDisableWindow(pbZurück)
				// Else
				// Call SalDisableWindow(pbWeiter)
				// Call SalDisableWindow(pbZurück)
				// **** neue Funktionen testen ****
				if (Var.bOK) 
				{
					this.SetStatusBarText("Suche läuft ...");
					// 16.02.05
					Int.PalLog("InfoOP." + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0) + "/" + Int.PalStrNum(this.dfRgNr.Number, 6, 0));

					this.strSelectRg = this.strSelectRg + @" and rkkzzahl not in (2,3,4,5) and
(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)<>0" + " ORDER BY RKRECHDAT DESC";
					Int.SqlHandleExec(Var.hSqlFetch, this.strSelectRg, "Lesen Rechnungen", ref Var.nTemp);
					// Set bOK = SqlPrepare(hSqlFetch,strSelectRg)
					// If not bOK
					// Set bOK = SqlPrepare(hSqlFetch,strSelectRg)
					// If bOK
					// Set bOK = SqlExecute(hSqlFetch)
					Var.bOK = Var.hSqlFetch.GetResultSetCount(ref Var.nCount);
					Var.strStatus = Var.nCount.ToString(0);
					// Call SqlCommit( hSqlFetch )
					if (Var.nCount > 1) 
					{
						this.nFetch = Var.hSqlFetch.FetchNext();
						Int.PalCheckFetch(this.nFetch);
						this.PalFuelleInfos();
						this.pbWeiter.EnableWindow();
						this.pbZurück.EnableWindow();
					}
					else if (Var.nCount == 1) 
					{
						this.nFetch = Var.hSqlFetch.FetchNext();
						Int.PalCheckFetch(this.nFetch);
						this.PalFuelleInfos();
						this.pbWeiter.DisableWindow();
						this.pbZurück.DisableWindow();
					}
					else
					{
						this.pbWeiter.DisableWindow();
						this.pbZurück.DisableWindow();
					}
					this.SetStatusBarText(Var.strStatus + " Datensätze gefunden");
				}
				else
				{
					this.pbWeiter.DisableWindow();
					this.pbZurück.DisableWindow();
				}
			}
			else
			{
				Sal.MessageBox("Halter-Nr. oder Arzt-Nr. ist leer.", "Achtung", (Sys.MB_IconExclamation | Sys.MB_Ok));
			}
			#endregion
		}
		
		/// <summary>
		/// dfSArbeitgeber WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSArbeitgeber_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfSArbeitgeber_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSArbeitgeber_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedX(@"UPDATE H SET hag = :frmRgSuchen.dfSArbeitgeber
WHERE harztnr  = :frmRgSuchen.dfArztNr AND hhalternr  = :frmRgSuchen.dfHalterNr");
			#endregion
		}
		
		/// <summary>
		/// dfSMolkerei WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSMolkerei_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfSMolkerei_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSMolkerei_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedX(@"UPDATE H SET hmolkerei = :frmRgSuchen.dfSMolkerei
WHERE harztnr  = :frmRgSuchen.dfArztNr AND hhalternr  = :frmRgSuchen.dfHalterNr");
			#endregion
		}
		
		/// <summary>
		/// dfSBLZ WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSBLZ_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfSBLZ_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSBLZ_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 18.05.15 F2428
			// Call SqlImmedX('UPDATE H SET hblz = :frmRgSuchen.dfSBLZ
			// WHERE harztnr  = :frmRgSuchen.dfArztNr AND hhalternr  = :frmRgSuchen.dfHalterNr')
			if (this.dfSBLZ.Text != "") 
			{
				if (((SalString)this.dfSBLZ.Text).Scan(" ") > -1)  // 26.03.15 F2159
				{
					this.dfSBLZ.Text = Int.PalStringStrip(this.dfSBLZ.Text, " ");
				}
				if (Int.PalIBANPruef(this.dfSBLZ.Text)) 
				{
					e.Return = true;
					return;
				}
				else
				{
					Sal.MessageBox("Die eingegebene IBAN könnte ungültig sein!", "Fehlerhafte Eingabe", Sys.MB_Ok);
				}
			}
			Int.SqlImmedX(@"UPDATE H SET hbic = :frmRgSuchen.dfSBLZ
WHERE harztnr  = :frmRgSuchen.dfArztNr AND hhalternr  = :frmRgSuchen.dfHalterNr");
			#endregion
		}
		
		/// <summary>
		/// dfSKonto WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSKonto_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfSKonto_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSKonto_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 18.05.15 F2428
			// Call SqlImmedX('UPDATE H SET hkonto = :frmRgSuchen.dfSKonto
			// WHERE harztnr  = :frmRgSuchen.dfArztNr AND hhalternr  = :frmRgSuchen.dfHalterNr')
			Int.SqlImmedX(@"UPDATE H SET hiban = :frmRgSuchen.dfSKonto
WHERE harztnr  = :frmRgSuchen.dfArztNr AND hhalternr  = :frmRgSuchen.dfHalterNr");
			#endregion
		}
		
		/// <summary>
		/// mlHInfo WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void mlHInfo_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.mlHInfo_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void mlHInfo_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(this.dfHalterNr.IsEmpty())) 
			{
				if (!(this.dfArztNr.IsEmpty())) 
				{
					this.nArztNr = this.dfArztNr.Number;
					Int.SqlImmedSel("SELECT ANR2 INTO :frmRgSuchen.nArztNr2 FROM A WHERE AARZTNR = :frmRgSuchen.dfArztNr");
					if (this.nArztNr2 != 0) 
					{
						Int.SqlImmedX(@"UPDATE H SET hmemo = :frmRgSuchen.mlHInfo
WHERE harztnr  = :frmRgSuchen.nArztNr2 AND hhalternr  = :frmRgSuchen.dfHalterNr");
					}
					Int.SqlImmedX(@"UPDATE H SET hmemo = :frmRgSuchen.mlHInfo
WHERE harztnr  = :frmRgSuchen.dfArztNr AND hhalternr  = :frmRgSuchen.dfHalterNr");
					Sal.MessageBeep(0);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbSucheMB WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSucheMB_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSucheMB_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSucheMB_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(this.dfHalterNr.IsEmpty()) && !(this.dfArztNr.IsEmpty())) 
			{
				Var.bOK = this.PalFuelleWhere();
				// If bOK
				// Set strSelectRg = strSelectRg || ' and rkkzzahl not in (2,3,4,5) and
				// (rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn)<>0' || ' ORDER BY RKRECHDAT DESC'
				// Call SalStatusSetText(frmRgSuchen,'Suche läuft ...')
				// Set bOK = SqlPrepare(hSqlFetch,strSelectRg)
				// Set bOK = SqlExecute(hSqlFetch)
				// Set bOK = SqlGetResultSetCount(hSqlFetch,nCount)
				// Call SalNumberToStr(nCount,0,strStatus)
				// Call SalStatusSetText(frmRgSuchen,strStatus || ' Datensätze gefunden')
				// If nCount>1
				// Call SqlFetchNext(hSqlFetch,nFetch)
				// Call PalCheckFetch(nFetch)
				// Call PalFuelleInfos()
				// Call SalEnableWindow(pbWeiter)
				// Call SalEnableWindow(pbZurück)
				// Else If nCount=1
				// Call SqlFetchNext(hSqlFetch,nFetch)
				// Call PalCheckFetch(nFetch)
				// Call PalFuelleInfos()
				// Call SalDisableWindow(pbWeiter)
				// Call SalDisableWindow(pbZurück)
				// Else
				// Call SalDisableWindow(pbWeiter)
				// Call SalDisableWindow(pbZurück)
				// **** neue Funktionen testen ****
				if (Var.bOK) 
				{
					this.SetStatusBarText("Suche läuft ...");
					this.strSelectRg = this.strSelectRg + " and rkrechnr >=999990 ORDER BY RKRECHNR";
					Int.SqlHandleExec(Var.hSqlFetch, this.strSelectRg, "Lesen Rechnungen", ref Var.nTemp);
					// Set bOK = SqlPrepare(hSqlFetch,strSelectRg)
					// Set bOK = SqlExecute(hSqlFetch)
					Var.bOK = Var.hSqlFetch.GetResultSetCount(ref Var.nCount);
					Var.strStatus = Var.nCount.ToString(0);
					this.SetStatusBarText(Var.strStatus + " Datensätze gefunden");
					if (Var.nCount > 1) 
					{
						this.nFetch = Var.hSqlFetch.FetchNext();
						Int.PalCheckFetch(this.nFetch);
						this.PalFuelleInfos();
						this.pbWeiter.EnableWindow();
						this.pbZurück.EnableWindow();
					}
					else if (Var.nCount == 1) 
					{
						this.nFetch = Var.hSqlFetch.FetchNext();
						Int.PalCheckFetch(this.nFetch);
						this.PalFuelleInfos();
						this.pbWeiter.DisableWindow();
						this.pbZurück.DisableWindow();
					}
					else
					{
						this.pbWeiter.DisableWindow();
						this.pbZurück.DisableWindow();
					}
				}
				else
				{
					this.pbWeiter.DisableWindow();
					this.pbZurück.DisableWindow();
				}
			}
			else
			{
				Sal.MessageBox("Halter-Nr. oder Arzt-Nr. ist leer.", "Achtung", (Sys.MB_IconExclamation | Sys.MB_Ok));
			}
			#endregion
		}
		
		/// <summary>
		/// pbArztSuchen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbArztSuchen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbArztSuchen_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbArztSuchen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.SetStatusBarText("Suche läuft ...");
			this.pbArztSuchen.DisableWindow();
			// 09.08.07 Ä143
			if (this.dfHalterName.Text + this.dfHalterVN.Text == "") 
			{
				this.dfHalterName.Text = this.dfQuick.Text;
			}

			tblArzt.CreateWindow(this, "frmRgSuchen", this.dfHalterName.Text + " " + this.dfHalterVN.Text);
			this.SetStatusBarText("");
			#endregion
		}
		
		/// <summary>
		/// pbHalterSuchen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHalterSuchen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbHalterSuchen_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHalterSuchen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.dtLogDauerStart = SalDateTime.Current;
			// 09.08.07 Ä143
			if (this.dfHalterName.Text + this.dfHalterVN.Text == "") 
			{
				this.dfHalterName.Text = this.dfQuick.Text;
			}

			this.PalFuelleHalter(false);
			// Call PalLogDauer( 'Info: Haltersuche', SalDateCurrent(  ) - dtLogDauerStart )
			#endregion
		}
		
		/// <summary>
		/// pbHalterMatch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHalterMatch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbHalterMatch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHalterMatch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.dtLogDauerStart = SalDateTime.Current;
			// 09.08.07 Ä143
			if (this.dfHalterName.Text + this.dfHalterVN.Text == "") 
			{
				this.dfHalterName.Text = this.dfQuick.Text;
			}

			this.PalFuelleHalter(true);
			// Call PalLogDauer( 'Info: HalterVari', SalDateCurrent(  ) - dtLogDauerStart )
			#endregion
		}
		
		/// <summary>
		/// pbHiW WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHiW_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbHiW_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHiW_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 06.08.08
			if (Var.bfrmBrAktiErf) 
			{
				while (!(App.frmBrAktiErf.DestroyWindow())) 
				{
				}
			}
			frmBrAktiErf.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfSRgNr.Number);

			// If SalIsWindowEnabled(frmMain.pbBriefe)
			// Call SalCreateWindow(frmBrAktiErf, hWndNULL, dfArztNr, dfHalterNr, dfSRgNr)
			// Else
			// Call SalMessageBox('Das Fenster für die Standardbriefe ist bereits geöffnet. kann nicht mehrfach geöffnet werden', 'Achtung', MB_Ok)
			#endregion
		}
		
		/// <summary>
		/// pbMaps WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMaps_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbMaps_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMaps_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 24.07.15 Ä1149
			if (this.dfHalterNr.Number != 0 && this.dfHalterNr.Number != Sys.NUMBER_Null) 
			{
				Var.strDummy = "";
				if (this.dfSHalterStr.Text != "") 
				{
					Var.strDummy = Var.strDummy + "+" + Int.PalStringStrip(this.dfSHalterStr.Text, "/");
				}
				if (this.dfSHalterOrt.Text != "") 
				{
					Var.strDummy = Var.strDummy + "+" + Int.PalStringStrip(this.dfSHalterOrt.Text, "/");
				}
				if (this.dfSHalterLand.Text != "") 
				{
					Var.strDummy = Var.strDummy + "+" + Int.PalStringStrip(this.dfSHalterLand.Text, "/");
				}
				Var.strDummy = Var.strDummy.Mid(1, 255);
				Ext.ShellExecuteA(this, "open", "https://maps.google.de?q=" + Var.strDummy, SalString.Null, SalString.Null, Const.SW_SHOWNORMAL);
			}
			else
			{
				Sal.MessageBox("Bitte rufen Sie einen Halter auf.", "Daten fehlen", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			#endregion
		}
		
		/// <summary>
		/// pbBriefFrei WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBriefFrei_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbBriefFrei_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBriefFrei_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 06.08.08
			// If bfrmText
			// While Not SalDestroyWindow(frmText)
			if (Var.bfrmBriefVari) 
			{
				while (!(App.frmBriefVari.DestroyWindow())) 
				{
				}
			}

			// 06.08.18 Ä1763 TRUE -> FALSE
			frmBriefVari.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfSRgNr.Number, "", "", new SalDateTime(1900, 1, 1), "", "", "", "", "", false);
			// Call SalCreateWindow(frmText, hWndNULL, dfArztNr, dfHalterNr, dfSRgNr)
			#endregion
		}
		
		/// <summary>
		/// pbText WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbText_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbText_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbText_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 04.08.09
			if (Var.bfrmText) 
			{
				while (!(App.frmText.DestroyWindow())) 
				{
				}
			}

			frmText.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfSRgNr.Number, "");
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.axShell.Enabled = false;
			Var.dtLogDauerStart = SalDateTime.Current;
			// 13.01.14 Ä1002 + asperrinfo
			// 01.11.16 Ä1437 + , aewaabeur, aewavariante
			Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, aemail, atelpraxis, atelprivat, atelhandy, atelfax, amatch, araza, anr2, asperrinfo, aewaabeur, aewavariante
into :frmRgSuchen.dfArztName, :frmRgSuchen.dfArztName2, :frmRgSuchen.strTAStr, :frmRgSuchen.strTAOrt,
:frmRgSuchen.dfAEMail,  :frmRgSuchen.strTATelPraxis, :frmRgSuchen.strTATelPrivat, :frmRgSuchen.strTATelHandy, :frmRgSuchen.strTATelFax,
:frmRgSuchen.dfAMC, :frmRgSuchen.nPRaZa, :frmRgSuchen.nArztNr2, :frmRgSuchen.mlSperrinfo,
:frmRgSuchen.nEWAabEUR, :frmRgSuchen.nEWAVariante
from A where aarztnr=:frmRgSuchen.dfArztNr");
			this.dfAZust.Text = Int.PalZust(this.dfArztNr.Number);
			// 19.12.05
			if (this.nPRaZa == 2) 
			{
				this.dfARaZa.Text = "Ratenzahlung nur nach Rückfrage";
			}
			else if (this.nPRaZa == 1) 
			{
				this.dfARaZa.Text = "Ratenzahlung erlaubt";
			}
			else
			{
				this.dfARaZa.Text = "Ratenzahlung NICHT erlaubt!";
			}
			// 09.08.02
			this.dfATel.Text = "";
			this.dfATel2.Text = "";
			if (this.strTATelPraxis != "") 
			{
				this.dfATel.Text = "Praxis: " + this.strTATelPraxis;
			}
			if (this.strTATelPrivat != "") 
			{
				this.dfATel.Text = this.dfATel.Text + " · Privat: " + this.strTATelPrivat;
			}
			if (this.strTATelHandy != "") 
			{
				this.dfATel2.Text = this.dfATel2.Text + "Handy: " + this.strTATelHandy;
			}
			if (this.strTATelFax != "") 
			{
				this.dfATel2.Text = this.dfATel2.Text + " · Fax: " + this.strTATelFax;
			}
			// 01.11.16 Ä1437 + , aewaabeur, aewavariante
			this.dfEWAVariante.Text = "";
			if (this.nEWAVariante == 1) 
			{
				this.dfEWAVariante.Text = "EWA sofort";
			}
			else if (this.nEWAVariante == 2) 
			{
				this.dfEWAVariante.Text = "EWA nur nach Rücksprache mit M";
			}
			else if (this.nEWAVariante == SalNumber.Null) 
			{
				this.dfEWAVariante.Text = "EWA nach 14 Tagen Wartezeit (Standard)";
			}
			else
			{
				this.dfEWAVariante.Text = "EWA nach 14 Tagen Wartezeit";
			}
			if (this.nEWAabEUR != 0 && this.nEWAabEUR != SalNumber.Null) 
			{
				this.dfEWAVariante.Text = this.dfEWAVariante.Text + " ab € " + this.nEWAabEUR.ToString(2);
			}


			this.dfSArztOP.Clear();
			this.dfSArztSaldo.Clear();
			this.dfSHalterSaldo.Clear();
			this.naltArzt = this.dfArztNr.Number;
			// 06.05.14
			this.nArztNr = this.dfArztNr.Number;
			this.PalFuelleInfosA();
			// 15.07.03 Telefonbucheintrag?
			// If dfArztNr > 0
			// Call SqlIstDa(' FROM TE WHERE tearztnr =' || SalNumberToStrX(dfArztNr,0) || '
			// and tehalternr IS NULL' ,bOk)
			// If bOk
			// Call SalShowWindow(pbTelA)
			// Else
			// Call SalHideWindow(pbTelA)
			// Else
			// Call SalHideWindow(pbTelA)
			// 26.11.03
			// If Not SalIsNull(dfArztNr)
			// Set nArztNr = dfArztNr
			// Call SqlImmedSel('SELECT ANR2 INTO :frmRgSuchen.nArztNr2 FROM A WHERE AARZTNR = :frmRgSuchen.dfArztNr')
			// If nArztNr2 = 0
			// Set nArztNr2 = dfArztNr
			// Else
			// Set nArztNr2 = dfArztNr
			// Call PalFuelleInfosA()
			// 25.10.10
			Var.nCount = Vis.DosEnumFiles(Var.strPfadArchiv + Sql.Database + "\\" + "A" + Int.PalStrNullen(this.dfArztNr.Number.ToString(0), 4) + "\\*.*", Sys.FA_Standard, this.sFiles);
			if (Var.nCount > 0) 
			{
				this.pbADA.SetText(Var.nCount.ToString(0));
			}
			else if (Var.nCount <= 0) 
			{
				this.pbADA.SetText("-");
			}
			// Call PalLogDauer( 'Info: Arzt', SalDateCurrent(  ) - dtLogDauerStart )
			#endregion
		}
		
		/// <summary>
		/// pbZurück WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZurück_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbZurück_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZurück_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// FetchNext, weil DESC Sortierung
			this.nFetch = Var.hSqlFetch.FetchNext();
			// Call SqlCommit( hSqlFetch )
			this.PalFuelleInfos();
			#endregion
		}
		
		/// <summary>
		/// pbWeiter WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbWeiter_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbWeiter_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbWeiter_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// FetchPrevious, weil DESC Sortierung
			this.nFetch = Var.hSqlFetch.FetchPrevious();
			// Call SqlCommit( hSqlFetch )
			this.PalFuelleInfos();
			#endregion
		}
		
		/// <summary>
		/// cbAZettel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbAZettel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbAZettel_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbAZettel_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Bitte erst die Arztnummer eingeben.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				// 26.07.16 F2699
				if (Var.bfrmZettel) 
				{
					while (!(App.frmZettel.DestroyWindow())) 
					{
					}
				}

				frmZettel.CreateWindow(this, "frmRgSuchen", this.dfArztNr.Number, 0, 0);
			}
			// Call SqlIstDa(' FROM Z WHERE ' || PalArztNr('z', nArztNr, nArztNr2),cbZettel)
			// If cbZettel=TRUE
			// Call SalColorSet(cbZettel,COLOR_IndexWindow,COLOR_DarkGreen)
			// Else
			// Call SalColorSet(cbZettel,COLOR_IndexWindow,COLOR_3DFace)
			#endregion
		}
		
		/// <summary>
		/// cbZettel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZettel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbZettel_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZettel_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Bitte erst die Arztnummer eingeben.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				// 26.07.16 F2699
				if (Var.bfrmZettel) 
				{
					while (!(App.frmZettel.DestroyWindow())) 
					{
					}
				}

				frmZettel.CreateWindow(this, "frmRgSuchen", this.dfArztNr.Number, this.dfHalterNr.Number, 0);

				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalBoolean temp1 = this.cbZettel.Checked;
				Int.SqlIstDa(@" FROM Z WHERE zhalternr=:frmRgSuchen.dfHalterNr AND zdeaktiv IS NULL
and  " + Int.PalArztNr("z", this.nArztNr, this.nArztNr2), ref temp1);
				this.cbZettel.Checked = temp1;

				if (this.cbZettel.Checked == true) 
				{
					Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
				}
				else
				{
					Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// cbZettelRg WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZettelRg_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbZettelRg_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZettelRg_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Bitte erst die Arztnummer eingeben.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				// 26.07.16 F2699
				if (Var.bfrmZettel) 
				{
					while (!(App.frmZettel.DestroyWindow())) 
					{
					}
				}

				frmZettel.CreateWindow(this, "frmRgSuchen", this.dfArztNr.Number, this.dfHalterNr.Number, this.dfSRgNr.Number);

				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalBoolean temp1 = this.cbZettel.Checked;
				Int.SqlIstDa(@" FROM Z WHERE zrechnr=:frmRgSuchen.dfSRgNr AND zhalternr=:frmRgSuchen.dfHalterNr AND zdeaktiv IS NULL
and " + Int.PalArztNr("z", this.nArztNr, this.nArztNr2), ref temp1);
				this.cbZettel.Checked = temp1;

				if (this.cbZettelRg.Checked == true) 
				{
					Sal.ColorSet(this.cbZettelRg, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
				}
				else
				{
					Sal.ColorSet(this.cbZettelRg, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// cbRaZa WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbRaZa_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbRaZa_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbRaZa_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 22.08.12
			if (Var.bfrmRaZa) 
			{
				if (App.frmRaZa.SendMessage(Sys.SAM_Close, 0, 0)) 
				{
				}
			}

			if (Sal.IsWindowEnabled(App.frmMain.pbRaZa)) 
			{
				frmRaZa.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number);
				// 29.03.10 OTÄ135
				// 25.06.10 OTÄ432
				// Call SqlIstDa(' FROM rz, rzp WHERE rznr=rzpnr AND rzkuenddat IS NULL AND
				// rzparztnr =' || SalNumberToStrX(dfArztNr,0) || '
				// and rzphalternr=' || SalNumberToStrX(dfHalterNr,0) || '
				// and rzprechnr=' || SalNumberToStrX( frmRgSuchen.dfSRgNr,0) ,bExist)
				Int.SqlIstDa(@" FROM rz WHERE rzkuenddat IS NULL AND rzdeaktiv IS NULL AND
" + Int.PalArztNr("rz", this.nArztNr, this.nArztNr2) + @"
and rzhalternr=" + this.dfHalterNr.Number.ToString(0), ref this.bExist);
				if (this.bExist == true) 
				{
					Sal.ColorSet(this.cbRaZa, Sys.COLOR_IndexWindow, Sys.COLOR_Purple);
					Int.SqlImmedSel(@"SELECT rznr INTO :frmRgSuchen.dfRZNr FROM rz WHERE rzkuenddat IS NULL AND rzdeaktiv IS NULL AND
" + Int.PalArztNr("rz", this.nArztNr, this.nArztNr2) + @"
and rzhalternr=" + this.dfHalterNr.Number.ToString(0) + " ORDER BY rzaktivdat DESC");
				}
				else
				{
					Sal.ColorSet(this.cbRaZa, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// cbRISER WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbRISER_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbRISER_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbRISER_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 22.08.12
			frmRISER.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfProzNr.Number);
			#endregion
		}
		
		/// <summary>
		/// cbTagebuch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbTagebuch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbTagebuch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbTagebuch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmTagebuch.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number);
			#endregion
		}
		
		/// <summary>
		/// cbZahlungen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZahlungen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbZahlungen_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZahlungen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			tblZahlungen.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfSRgNr.Number);
			#endregion
		}
		
		/// <summary>
		/// cbMahnungen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbMahnungen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbMahnungen_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbMahnungen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmtblMahnungen.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfSRgNr.Number);
			#endregion
		}
		
		/// <summary>
		/// cbRechPos WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbRechPos_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbRechPos_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbRechPos_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmRechPos.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfSRgNr.Number);

			// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
			SalBoolean temp1 = this.cbRechPos.Checked;
			Int.SqlIstDa(@" FROM RP WHERE rparztnr=:frmRgSuchen.dfArztNr
and rprechnr=:frmRgSuchen.dfSRgNr", ref temp1);
			this.cbRechPos.Checked = temp1;

			if (this.cbRechPos.Checked == true) 
			{
				Sal.ColorSet(this.cbRechPos, Sys.COLOR_IndexWindow, Sys.COLOR_Magenta);
			}
			else
			{
				Sal.ColorSet(this.cbRechPos, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			}
			#endregion
		}
		
		/// <summary>
		/// cbRechPDF WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbRechPDF_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbRechPDF_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbRechPDF_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 27.08.18 Ä1769
			if (Vis.DosExist(Var.strPfadArchiv + Sql.Database + "-Rechnungen\\" + "A" + Int.PalStrNullen(this.dfArztNr.Number.ToString(0), 4) + "\\" + "R" + Int.PalStrNullen(this.dfSRgNr.Number.ToString(0), 6) + "\\" + this.strBarcode + ".pdf")) 
			{
				Ext.ShellExecuteA(SalWindowHandle.Null, "open", Var.strPfadArchiv + Sql.Database + "-Rechnungen\\" + "A" + Int.PalStrNullen(this.dfArztNr.Number.ToString(0), 4) + "\\" + "R" + Int.PalStrNullen(this.dfSRgNr.Number.ToString(0), 6) + "\\" + 
					this.strBarcode + ".pdf", "", "", 1);
			}
			else
			{
				Sal.MessageBox("Die Datei " + Var.strPfadArchiv + Sql.Database + "-Rechnungen\\" + "A" + Int.PalStrNullen(this.dfArztNr.Number.ToString(0), 4) + "\\" + "R" + Int.PalStrNullen(this.dfSRgNr.Number.ToString(0), 6) + "\\" + this.strBarcode + 
					".pdf wurde nicht gefunden.", "Dateifehler", Sys.MB_IconStop);
			}
			#endregion
		}
		
		/// <summary>
		/// cbPR WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbPR_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbPR_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbPR_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmProzReg.CreateWindow(this, this.nArztNr, this.dfHalterNr.Number);
			#endregion
		}
		
		/// <summary>
		/// cbFA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbFA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbFA_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbFA_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SqlIstDa(' FROM FA WHERE fauser = :strBNUser', bOk)
			// Set bOk = FALSE
			// If bOk
			// Call SalMessageBox('Forderungsaufstellungsdruck ist gerade belegt.
			// 
			// Bitte in einer Minute erneut versuchen oder über Dienstprogramme freigeben.', 'Achtung', MB_Ok|MB_IconHand)
			// Return FALSE
			// Else
			// Call SqlImmedSel('SELECT MAX(prdnr)
			// INTO :frmRgSuchen.nFAPRNr
			// FROM prd
			// WHERE prdhalternr=:frmRgSuchen.dfHalterNr
			// and ' || PalArztNr('prd', nArztNr, nArztNr2))
			// Set ndlgDM = NUMBER_Null
			// Call SalModalDialog(dlgTextPRundDM, hWndForm, 'Geben Sie eventuelle Zusatzkosten an :', strFAText, nFAPRNr, nFADM)
			// While ndlgDM = NUMBER_Null
			// 07.09.06 F55 + If ndlgDM != 0
			// If ndlgDM != 0
			// Set dtdlgDatum = SalDateCurrent()
			// Call SalModalDialog(dlgDatum, hWndForm, 'Datum der Forderungsaufstellung :', dtdlgDatum)
			// Set dtdlgDatum = SalDateConstruct(SalDateYear(dtdlgDatum), SalDateMonth(dtdlgDatum), SalDateDay(dtdlgDatum), 23, 59, 59)
			// Call SalStatusSetText(hWndForm,'Erstelle Forderungsaufstellung ·  Bitte warten !')
			// Set nErr = 1
			// Set strReportName = 'FORDAUFS'
			// Call PalReport(frmRgSuchen,'FORDAUFS.QRP',
			// ':frmRgSuchen.nProzNr, :frmRgSuchen.dtFADate, :frmRgSuchen.strAZ, :frmRgSuchen.nZinsen, :frmRgSuchen.nDMRech,
			// :frmRgSuchen.nZinsKo, :frmRgSuchen.nDMKo, :frmRgSuchen.dtSeit, :frmRgSuchen.nUnvzDM, :frmRgSuchen.nZinsDM,
			// :frmRgSuchen.dfSHalterName,:frmRgSuchen.dfSHalterName2,:frmRgSuchen.dfSHalterStr,:frmRgSuchen.dfSHalterOrt, :frmRgSuchen.strZust',
			// 'ProzNr, Datum, Text, ZinsHF, DMHF, ZinsKo, DMKo, Seit, UnvzDM, ZinsDM,
			// N1, N2, S, O, Zei',
			// nErr)
			// 27.06.07
			// #25
			// Call SqlConnection(hSqlBZ)
			// 26.01.07 F112
			// Call SqlConnection(hSqlZi)
			// Call SqlConnection(hSqlZiZahl)
			// Call SqlConnection(hSqlDisk)
			// 26.04.05
			// Call SqlImmed('DELETE FROM FA WHERE fauser = :strBNUser')
			// 28.08.06 Aufgabe 7
			// Set strZust = PalZust(dfArztNr)
			// 09.04.99
			// Call SqlImmedSel('SELECT hti || hvn || \' \' || hnn,hname2,hstr,hort, hland
			// into :frmRgSuchen.dfSHalterName,:frmRgSuchen.dfSHalterName2,:frmRgSuchen.dfSHalterStr,:frmRgSuchen.dfSHalterOrt, :frmRgSuchen.strTHLand
			// from H where hhalternr=:frmRgSuchen.dfHalterNr and harztnr=:frmRgSuchen.dfArztNr')
			// 07.06.01 plus , prdmhf
			// Call SqlPrepareAndExecute(hSqlDisk, 'SELECT prnr, prdatum, prdma, prdmb, prdmc, praz, prdmhf, prprozhf, prprozko
			// INTO :frmRgSuchen.nProzNr, :frmRgSuchen.dtFADate, :frmRgSuchen.nDMa, :frmRgSuchen.nDMb, :frmRgSuchen.nDMc, :frmRgSuchen.strAZ, :frmRgSuchen.nDMRechSum, :frmRgSuchen.nZinsen, :frmRgSuchen.nZiKo
			// FROM pr
			// WHERE prhalternr=:frmRgSuchen.dfHalterNr
			// and prarztnr IN (:frmRgSuchen.nArztNr, :frmRgSuchen.nArztNr2) And (prerledigt IS NULL or prerledigt <> 1)')
			// Call SqlFetchNext(hSqlDisk, nFetchRep)
			// While nFetchRep != FETCH_EOF
			// If nZinsen = 0 Or nZinsen = NUMBER_Null
			// Set ndlgDM = NUMBER_Null
			// If 1 = SalModalDialog(dlgDM, hWndForm, 'Bitte geben Sie für PR' || PalStrNum(nProzNr,6,0) || ' den Zinssatz für die HF ein  (%) :',nZinsen)
			// While ndlgDM = NUMBER_Null
			// HF
			// Call SalStatusSetText(hWndForm, 'HF')
			// Set nDMRechSum = 0
			// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn) INTO :frmRgSuchen.nDMRech
			// FROM rk WHERE rkarztnr=:frmRgSuchen.nA1 AND rkrechnr=:frmRgSuchen.nR1')
			// Set nDMRechSum = nDMRechSum + nDMRech
			// Call SalFileOpen(hFileFA, 'fa.log', OF_Create|OF_Write)
			// If dtFADate <= dtdlgDatum
			// If strAZ = ''
			// Set strAZ = 'Mahnbescheid'
			// Else ! 20.11.07
			// Set strAZ = 'Mahnbescheid AZ ' || strAZ
			// Call SqlImmed('INSERT INTO fa
			// (fauser, faproznr, fadatum, fatext, fazinshf, fadmhf)
			// VALUES(:strBNUser, :frmRgSuchen.nProzNr, :frmRgSuchen.dtFADate,  :frmRgSuchen.strAZ, :frmRgSuchen.nZinsen, :frmRgSuchen.nDMRechSum)')
			// 26.01.07 F112
			// If nProzNr >= 16672
			// Set nZiHFDM = 0
			// Set nZiRest = 0
			// Set nZiSumme = 0
			// Call SqlImmedSel('SELECT akzust INTO :frmRgSuchen.dtZiBis
			// FROM ak  WHERE akzust IS NOT NULL AND akproznr = :frmRgSuchen.nProzNr AND aktyp=\'MB\' AND (aktypdetail =\'MB\' OR aktypdetail =\'MB-AG\') ')
			// 27.09.07 F272
			// If dtZiBis = DATETIME_Null
			// Set dtZiBis = PalAddDay(dtdlgDatum,-1)
			// Set strSelect = 'SELECT prdarztnr, prdrechnr, rkrechDat, (rkdmleis+rkdmarzn)
			// INTO :frmRgSuchen.nZiArztNr, :frmRgSuchen.nZiRechNr, :frmRgSuchen.dtZiRechDat, :frmRgSuchen.nZiHFDM
			// FROM prd, rk WHERE prdnr = :frmRgSuchen.nProzNr AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr ORDER BY prdarztnr, prdrechnr'
			// Call SqlHandleExec(hSqlZi,strSelect,'Fehler',nCount)
			// Call SqlFetchNext(hSqlZi,nFetchZi)
			// While nFetchZi != FETCH_EOF
			// Set dtZiVon = PalAddDay(dtZiRechDat,30)
			// Zinsberechnung je Zahldatum
			// Set strSelect = 'SELECT zabuchdat, zadm
			// INTO :frmRgSuchen.dtZiZahlDat, :frmRgSuchen.nZiZahlDM
			// FROM za WHERE zaarztnr = :frmRgSuchen.nZiArztNr AND zarechnr = :frmRgSuchen.nZiRechNr ORDER BY zabuchdat'
			// Set nZiRest = nZiHFDM
			// Call SqlHandleExec(hSqlZiZahl,strSelect,'Fehler',nCount)
			// Call SqlFetchNext(hSqlZiZahl,nFetchZiZahl)
			// While nFetchZiZahl != FETCH_EOF
			// Call SqlPrepareAndExecute(hSqlBZ, 'SELECT bzvon, bzbis, bzzins INTO :frmRgSuchen.dtBZvon, :frmRgSuchen.dtBZbis, :frmRgSuchen.nBZZins
			// FROM bz ORDER BY bzvon, bzbis')
			// Call SqlFetchNext(hSqlBZ, nFetchBZ)
			// While nFetchBZ != FETCH_EOF
			// If dtZiZahlDat < dtBZvon
			// Else If dtBZbis < dtZiVon
			// Else
			// If dtZiZahlDat <= dtBZbis
			// Set dtBZbis = PalAddDay(dtZiZahlDat,-1)
			// If dtBZvon < dtZiVon
			// Set dtBZvon = dtZiVon
			// Set nZinsTage = PalTage( dtBZvon, dtBZbis, FALSE )
			// Set nZiSumme = nZiSumme + SalNumberRound( nZiRest * (nZinsTage / 365) * nBZZins) / 100
			// Call SalFilePutStr(hFileFA, 'a: ' || SalDateToStrX(dtBZvon) || '-' || SalDateToStrX(dtBZbis) || ' = ' || PalStrNum(nZinsTage,4,0) || ' Tage * ' || PalStrNum(nBZZins, 5,1) || '% auf €' || PalStrNum(nZiRest,8,2) || ' = € ' || PalStrNum(SalNumberRound( nZiRest
			// *
			// (nZinsTage / 365) * nBZZins) / 100,8,2))
			// Call SqlFetchNext(hSqlBZ, nFetchBZ)
			// Hochsetzen für nächsten Datensatz
			// Set dtZiVon = dtZiZahlDat
			// Set nZiRest = nZiRest - nZiZahlDM
			// Call SqlFetchNext(hSqlZiZahl,nFetchZiZahl)
			// Zinsen für Zeitraum von letzter Zahlung bis heute
			// Call SqlPrepareAndExecute(hSqlBZ, 'SELECT bzvon, bzbis, bzzins INTO :frmRgSuchen.dtBZvon, :frmRgSuchen.dtBZbis, :frmRgSuchen.nBZZins
			// FROM bz ORDER BY bzvon, bzbis')
			// Call SqlFetchNext(hSqlBZ, nFetchBZ)
			// While nFetchBZ != FETCH_EOF
			// If dtZiBis < dtBZvon
			// Else If dtZiBis < dtZiVon
			// Else If dtBZbis < dtZiVon
			// Else
			// If dtZiBis <= dtBZbis
			// Set dtBZbis = PalAddDay(dtZiBis,-1)
			// If dtBZvon < dtZiVon
			// Set dtBZvon = dtZiVon
			// Set nZinsTage = PalTage( dtBZvon, dtBZbis, FALSE )
			// Set nZiSumme = nZiSumme + SalNumberRound( nZiRest * (nZinsTage / 365) * nBZZins) / 100
			// Call SalFilePutStr(hFileFA, 'b: ' || SalDateToStrX(dtBZvon) || '-' || SalDateToStrX(dtBZbis) || ' = ' || PalStrNum(nZinsTage,4,0) || ' Tage * ' || PalStrNum(nBZZins, 5,1) || '% auf €' || PalStrNum(nZiRest,8,2) || ' = € ' || PalStrNum(SalNumberRound( nZiRest *
			// (nZinsTage / 365) * nBZZins) / 100,8,2))
			// Call SqlFetchNext(hSqlBZ, nFetchBZ)
			// Call SqlFetchNext(hSqlZi,nFetchZi)
			// Call SqlCommit( hSqlZi )
			// Set strAZ = 'vorgerichtliche Zinsen bis ' || SalDateToStrX(dtZiBis)
			// Call SqlImmed('INSERT INTO fa
			// (fauser, faproznr, fadatum, fatext, faunvzdm)
			// VALUES(:strBNUser, :frmRgSuchen.nProzNr, :frmRgSuchen.dtFADate,  :frmRgSuchen.strAZ, :frmRgSuchen.nZiSumme)')
			// ENDE F112
			// Call SalFileClose(hFileFA)
			// MG
			// Call SalStatusSetText(hWndForm, 'Mahngebühren')
			// Set nDMRechSum = 0
			// 11.03.02
			// Call SqlImmedSel('SELECT sum(rkdmmahn) INTO :frmRgSuchen.nDMRechSum
			// FROM rk,prd WHERE prdnr= :frmRgSuchen.nProzNr AND prdarztnr=rkarztnr AND prdhalternr=rkhalternr AND prdrechnr=rkrechnr')
			// If dtFADate <= dtdlgDatum
			// Call SqlImmed('INSERT INTO fa
			// (fauser, faproznr, fadatum, fatext, faunvzdm)
			// VALUES(:strBNUser, :frmRgSuchen.nProzNr, :frmRgSuchen.dtFADate,  \'Nebenforderung\', :frmRgSuchen.nDMRechSum)')
			// AK, MB (unverzinslich)
			// Call SalStatusSetText(hWndForm, 'unverz. Kosten')
			// Call SqlImmed('INSERT INTO fa
			// (faproznr, fadatum, fatext, faunvzdm)
			// SELECT akproznr, akdatum, \'Nebenforderung\', ' || PalStrNumDecPoint(nDMa+nDMc,9,2) || '
			// FROM ak WHERE akproznr = :frmRgSuchen.nProzNr AND aktyp=\'MB\' AND aktypdetail =\'MB\'')
			// AK, MB (verzinslich)
			// 14.02.02 lt. Fr. Seil und Fr. Kollay statt 4 jetzt 8% für Kosten
			// Call SalStatusSetText(hWndForm, 'verz. Kosten')
			// 12.03.02
			// If nDMb = NUMBER_Null
			// Set nDMb = 0
			// If nDMb != 0
			// Call SqlImmed('INSERT INTO fa
			// (fauser, faproznr, fadatum, fatext, fazinsko, fadmko)
			// SELECT \'' || strBNUser || '\', akproznr, akdatum, aktypdetail || \'-Kosten\', 4, ' || PalStrNumDecPoint(nDMb,9,2) || '
			// FROM ak WHERE akproznr = :frmRgSuchen.nProzNr AND aktyp=\'MB\' AND aktypdetail =\'MB\' AND akdatum <= :dtdlgDatum')
			// 24.02.05
			// If nDMa+nDMc != 0
			// 18.10.07 F285
			// If nProzNr < 12003
			// Call SqlImmed('INSERT INTO fa
			// (fauser, faproznr, fadatum, fatext, faunvzdm)
			// SELECT \'' || strBNUser || '\', akproznr, akdatum, aktypdetail || \'-Kosten\', ' || PalStrNumDecPoint(nDMa+nDMc,9,2) || '
			// FROM ak WHERE akproznr = :frmRgSuchen.nProzNr AND aktyp=\'MB\' AND aktypdetail =\'MB\' AND akdatum <= :dtdlgDatum')
			// Else
			// Call SqlImmed('INSERT INTO fa
			// (fauser, faproznr, fadatum, fatext, faunvzdm)
			// SELECT \'' || strBNUser || '\', akproznr, akdatum, aktypdetail || \'-Kosten\', akdm
			// FROM ak WHERE akproznr = :frmRgSuchen.nProzNr AND aktyp=\'MB\' AND aktypdetail =\'MB\' AND akdatum <= :dtdlgDatum')
			// Set nRestVZ = nRestVZ + nDMb
			// 01.11.07 F292
			// Call SqlImmed('INSERT INTO fa
			// (fauser, faproznr, fadatum, fatext, fazinsko, fadmko)
			// SELECT \'' || strBNUser || '\', akproznr, akdatum, aktypdetail || \'-Kosten\', 4, akdm
			// FROM ak WHERE akproznr = :frmRgSuchen.nProzNr AND aktyp=\'MB\' AND aktypdetail =\'MB-AG\' AND akdatum <= :dtdlgDatum')
			// Call SqlImmed('INSERT INTO fa
			// (fauser, faproznr, fadatum, fatext, fazinsko, fadmko)
			// SELECT \'' || strBNUser || '\', akproznr, @DATEVALUE(akdatum), aktypdetail || \'-Kosten\', 4, SUM(akdm)
			// FROM ak WHERE akproznr = :frmRgSuchen.nProzNr AND aktyp=\'MB\' AND aktypdetail =\'MB-AG\' AND akdatum <= :dtdlgDatum GROUP BY 1,2,3,4,5')
			// Call SqlImmedSel('SELECT sum(akdm) INTO :frmRgSuchen.nDMb
			// FROM ak WHERE akproznr = :frmRgSuchen.nProzNr AND aktyp=\'MB\' AND aktypdetail =\'MB-AG\' AND akdatum <= :dtdlgDatum')
			// Set nRestVZ = nRestVZ + nDMb
			// AK, VB (verzinslich)
			// Call SalStatusSetText(hWndForm, 'verz. Kosten')
			// Call SqlImmed('INSERT INTO fa
			// (fauser, faproznr, fadatum, fatext, fazinsko, fadmko)
			// SELECT \'' || strBNUser || '\', akproznr, akdatum, aktypdetail || \'-Kosten\', 4, akdm
			// FROM ak WHERE akproznr = :frmRgSuchen.nProzNr AND aktyp=\'MB\' AND aktypdetail = \'VB\' AND akdatum <= :dtdlgDatum')
			// AK, Rest (unverzinslich)
			// Call SalStatusSetText(hWndForm, 'unverz. Kosten')
			// Call SqlImmed('INSERT INTO fa
			// (fauser, faproznr, fadatum, fatext, faunvzdm)
			// SELECT \'' || strBNUser || '\', akproznr, akdatum, aktypdetail || \'-Kosten\', akdm
			// FROM ak WHERE akproznr = :frmRgSuchen.nProzNr AND aktyp=\'MB\' AND aktypdetail  NOT IN (\'MB\', \'MB-AG\', \'VB\') AND akdatum <= :dtdlgDatum')
			// Set nRestVZ = nRestVZ + nDMb
			// ZA
			// Call SalStatusSetText(hWndForm, 'Zahlungen')
			// Call SqlImmed('INSERT INTO fa
			// (fauser, faproznr, fadatum, fatext, fadmhf)
			// SELECT \'' || strBNUser || '\', zaproznr, zabuchdat+0.1, \'Zahlung\', sum(zadm*-1)
			// FROM za WHERE zaproznr = :frmRgSuchen.nProzNr  AND zabuchdat <= :dtdlgDatum GROUP BY 1,2,3')
			// Call SqlFetchNext(hSqlDisk, nFetchRep)
			// Berechnung SEIT
			// Call SalStatusSetText(hWndForm, 'Hole Startdaten für Zinsberechnung')
			// Call SqlPrepareAndExecute(hSqlDisk, 'SELECT DISTINCT faproznr
			// INTO :frmRgSuchen.nProzNr
			// FROM fa WHERE fauser = :strBNUser')
			// Call SqlFetchNext(hSqlDisk, nFetchRep)
			// While nFetchRep != FETCH_EOF
			// Ermittlung der Zinsen HF
			// Set dtSeit = DATETIME_Null
			// Call SqlImmedSel('SELECT akzust INTO :frmRgSuchen.dtSeit
			// FROM ak  WHERE akproznr = :frmRgSuchen.nProzNr AND aktyp=\'MB\' AND (aktypdetail =\'MB\' OR aktypdetail =\'MB-AG\') ')
			// 20.11.07 F305
			// Call SqlImmed('UPDATE fa SET faseitko = :frmRgSuchen.dtSeit
			// WHERE faproznr = :frmRgSuchen.nProzNr AND fazinshf>=0')
			// 29.11.07
			// If dtSeit != DATETIME_Null
			// Set dtSeit = PalAddDay(dtSeit,1)
			// Set dtSeit = PalAddDay(dtSeit,1)
			// Call SqlImmed('UPDATE fa SET faseitko = :frmRgSuchen.dtSeit
			// WHERE faproznr = :frmRgSuchen.nProzNr AND fazinshf IS NOT NULL')
			// Ermittlung der Zinsen MB-Kosten
			// Set dtSeit = DATETIME_Null
			// Call SqlImmedSel('SELECT akzust INTO :frmRgSuchen.dtSeit
			// FROM ak  WHERE akproznr = :frmRgSuchen.nProzNr AND aktyp=\'MB\' AND aktypdetail =\'VB\' ')
			// Call SqlImmed('UPDATE fa SET faseitko = :frmRgSuchen.dtSeit
			// WHERE faproznr = :frmRgSuchen.nProzNr AND fazinsko>=0')
			// Call SqlFetchNext(hSqlDisk, nFetchRep)
			// Haupt-Berechnung
			// Call SalStatusSetText(hWndForm, 'Berechne Zinsen')
			// Set nProzNrAlt = 0
			// Call SqlPrepareAndExecute(hSqlDisk, 'SELECT faproznr, @DATEVALUE(fadatum), fazinshf, fadmhf, fazinsko, fadmko, faseitko, faunvzdm, fazinsdm
			// INTO :frmRgSuchen.nProzNr, :frmRgSuchen.dtFADate, :frmRgSuchen.nZinsen, :frmRgSuchen.nDMRech,
			// :frmRgSuchen.nZinsKo, :frmRgSuchen.nDMKo, :frmRgSuchen.dtSeit, :frmRgSuchen.nUnvzDM, :frmRgSuchen.nZinsDM
			// FROM fa WHERE fauser = :strBNUser  ORDER BY faproznr, fadatum')
			// Call SqlFetchNext(hSqlDisk, nFetchRep)
			// While nFetchRep != FETCH_EOF
			// If nDMRech = NUMBER_Null
			// Set nDMRech = 0
			// If nZinsen = NUMBER_Null
			// Set nZinsen = 0
			// If nZinsKo = NUMBER_Null
			// Set nZinsKo = 0
			// If nDMKo = NUMBER_Null
			// Set nDMKo = 0
			// If nUnvzDM = NUMBER_Null
			// Set nUnvzDM = 0
			// If nZinsDM = NUMBER_Null
			// Set nZinsDM = 0
			// If nProzNr != nProzNrAlt
			// If nProzNrAlt != 0
			// 20.11.07 F305 nZinsHF enthielt den Wert -5 (5% üBZ) und wurde nicht berechnet. SalNumberAbs hinzugefügt
			// If SalNumberAbs(nZiHF) > 0 And dtHFSeitAlt != DATETIME_Null
			// Set dtFADate = dtdlgDatum
			// #25
			// If nProzNr >= 12003 		! EDA-Verfahren
			// Call SqlPrepareAndExecute(hSqlBZ, 'SELECT bzvon, bzbis, bzzins INTO :frmRgSuchen.dtBZvon, :frmRgSuchen.dtBZbis, :frmRgSuchen.nBZZins
			// FROM bz ORDER BY bzvon, bzbis')
			// Call SqlFetchNext(hSqlBZ, nFetchBZ)
			// Set dtBZvon = dtHFSeitAlt
			// While nFetchBZ != FETCH_EOF
			// If dtFADate < dtBZvon
			// Else If dtBZbis < dtHFSeitAlt
			// Else
			// If dtFADate <= dtBZbis
			// 24.08.06 Ä17
			// Set dtBZbis = dtFADate
			// Set dtBZbis = PalAddDay(dtFADate,-1)
			// If dtBZvon < dtHFSeitAlt
			// 24.08.06 Ä17
			// Set dtBZvon = PalAddDay( dtHFSeitAlt, 1)
			// Set dtBZvon = dtHFSeitAlt
			// 26.01.07 F112
			// If dtBZvon < dtZiBis
			// Set dtBZvon = PalAddDay(dtZiBis,1)
			// Set nZinsTage = PalTage( dtBZvon, dtBZbis, FALSE )
			// 24.08.06 Ä17
			// Set nDMZins = SalNumberRound( nRestHF * (nZinsTage / 365) * nBZZins) / 100
			// Set dtBZvon = PalAddDay( dtBZvon, 1)
			// Set strAZ = PalStrNum(nBZZins,5,2) || '% ' || SalDateToStrX(dtBZvon) || '-' || SalDateToStrX(dtBZbis) ||
			// ' auf € HF' || PalStrNum(nRestHF,7,2)
			// If nDMZins > 0
			// Call SqlImmed('INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
			// VALUES(:strBNUser, :frmRgSuchen.nProzNrAlt, :frmRgSuchen.dtFADate,  :frmRgSuchen.strAZ, :frmRgSuchen.nDMZins)')
			// Call SqlFetchNext(hSqlBZ, nFetchBZ)
			// Set dtHFSeitAlt = dtFADate
			// Else
			// Set ndlgDM = NUMBER_Null
			// If 1 = SalModalDialog(dlgDM, hWndForm, 'Bitte geben Sie für ' || SalDateToStrX(dtHFSeitAlt) || '-' || SalDateToStrX(dtFADate) ||
			// ' auf € HF' || PalStrNum(nRestHF,7,2) || ' den Zinssatz ein  (%) :',nZiHF)
			// While ndlgDM = NUMBER_Null
			// If nZiHF > 0
			// Set strAZ = PalStrNum(nZiHF,5,2) || '% ' || SalDateToStrX(dtHFSeitAlt) || '-' || SalDateToStrX(dtFADate) ||
			// ' auf € HF' || PalStrNum(nRestHF,7,2)
			// Set nZinsTage = PalTage( dtHFSeitAlt, dtFADate, FALSE)
			// 24.08.06 Ä17
			// Set nDMZins = SalNumberRound( nRestHF * (nZinsTage / 365) * nZiHF) / 100
			// If nDMZins > 0
			// Call SqlImmed('INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
			// VALUES(:strBNUser, :frmRgSuchen.nProzNrAlt, :frmRgSuchen.dtFADate,  :frmRgSuchen.strAZ, :frmRgSuchen.nDMZins)')
			// If nZiKo > 0 And dtKoSeitAlt != DATETIME_Null
			// Set dtFADate = dtdlgDatum
			// #25
			// If nProzNr >= 12003 		! EDA-Verfahren
			// Call SqlPrepareAndExecute(hSqlBZ, 'SELECT bzvon, bzbis, bzzins INTO :frmRgSuchen.dtBZvon, :frmRgSuchen.dtBZbis, :frmRgSuchen.nBZZins
			// FROM bz  ORDER BY bzvon, bzbis')
			// Call SqlFetchNext(hSqlBZ, nFetchBZ)
			// Set dtBZvon = dtKoSeitAlt
			// While nFetchBZ != FETCH_EOF
			// If dtFADate < dtBZvon
			// Else If dtBZbis < dtKoSeitAlt
			// Else
			// If dtFADate <= dtBZbis
			// 24.08.06 Ä17
			// Set dtBZbis = dtFADate
			// Set dtBZbis = PalAddDay(dtFADate,-1)
			// If dtBZvon < dtKoSeitAlt
			// 24.08.06 Ä17
			// Set dtBZvon = PalAddDay( dtHFSeitAlt, 1)
			// Set dtBZvon = dtKoSeitAlt
			// Set nZinsTage = PalTage( dtBZvon, dtBZbis, FALSE )
			// 24.08.06 Ä17
			// Set nDMZins = SalNumberRound( nRestHF * (nZinsTage / 365) * nBZZins) / 100
			// Set dtBZvon = PalAddDay( dtBZvon, 1)
			// Set strAZ = PalStrNum(nBZZins,5,2) || '% ' || SalDateToStrX(dtBZvon) || '-' || SalDateToStrX(dtBZbis) ||
			// ' auf € VZ' || PalStrNum(nRestVZ,7,2)
			// If nDMZins > 0
			// Call SqlImmed('INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
			// VALUES(:strBNUser, :frmRgSuchen.nProzNrAlt, :frmRgSuchen.dtFADate,  :frmRgSuchen.strAZ, :frmRgSuchen.nDMZins)')
			// Call SqlFetchNext(hSqlBZ, nFetchBZ)
			// Set dtKoSeitAlt = dtFADate
			// Else
			// Set ndlgDM = NUMBER_Null
			// If 1 = SalModalDialog(dlgDM, hWndForm, 'Bitte geben Sie für ' || SalDateToStrX(dtKoSeitAlt) || '-' || SalDateToStrX(dtFADate) ||
			// ' auf € VZ' || PalStrNum(nRestVZ,7,2) || ' den Zinssatz ein  (%) :',nZiKo)
			// While ndlgDM = NUMBER_Null
			// If nZiKo > 0
			// Set strAZ = PalStrNum(nZiKo,5,2) || '% ' || SalDateToStrX(dtKoSeitAlt) || '-' || SalDateToStrX(dtFADate) ||
			// ' auf € VZ' || PalStrNum(nRestVZ,7,2)
			// Set nZinsTage = PalTage( dtKoSeitAlt, dtFADate, FALSE )
			// 24.08.06 Ä17
			// Set nDMZins = SalNumberRound( nRestVZ * (nZinsTage / 365) * nZiKo) / 100
			// If nDMZins > 0
			// Call SqlImmed('INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
			// VALUES(:strBNUser, :frmRgSuchen.nProzNrAlt, :frmRgSuchen.dtFADate,  :frmRgSuchen.strAZ, :frmRgSuchen.nDMZins)')
			// Set nRestHF = 0
			// Set nRestVZ = 0
			// Set nRestUVZ = 0
			// Set dtKoSeitAlt = DATETIME_Null
			// Set dtHFSeitAlt = DATETIME_Null
			// If nDMRech > 0
			// Set nRestHF = nRestHF + nDMRech
			// Set dtHFSeitAlt = dtSeit
			// Set nZiHF = nZinsen
			// Else If nDMKo > 0
			// Set nRestVZ = nRestVZ + nDMKo
			// Set dtKoSeitAlt = dtSeit
			// Set nZiKo = nZinsKo
			// Else If nUnvzDM > 0
			// Set nRestUVZ = nRestUVZ + nUnvzDM
			// Else If nDMRech < 0		! Zahlung
			// If nRestHF > 0			! HF noch offen
			// If nDMRech*-1 > nRestHF
			// Set nZahlDM = nRestHF * -1
			// Else
			// Set nZahlDM = nDMRech
			// 25.02.02 aus + ein - gemacht
			// Set nDMRech = nDMRech - nZahlDM
			// #25
			// If nProzNr >= 12003 		! EDA-Verfahren
			// If dtHFSeitAlt != DATETIME_Null
			// Call SqlPrepareAndExecute(hSqlBZ, 'SELECT bzvon, bzbis, bzzins INTO :frmRgSuchen.dtBZvon, :frmRgSuchen.dtBZbis, :frmRgSuchen.nBZZins
			// FROM bz ORDER BY bzvon, bzbis')
			// Call SqlFetchNext(hSqlBZ, nFetchBZ)
			// Set dtBZvon = dtHFSeitAlt
			// While nFetchBZ != FETCH_EOF
			// If dtFADate < dtBZvon
			// Else If dtBZbis < dtHFSeitAlt
			// Else
			// If dtFADate <= dtBZbis
			// 24.08.06 Ä17
			// Set dtBZbis = dtFADate
			// Set dtBZbis = PalAddDay(dtFADate,-1)
			// If dtBZvon < dtHFSeitAlt
			// 24.08.06 Ä17
			// Set dtBZvon = PalAddDay( dtHFSeitAlt, 1)
			// Set dtBZvon = dtHFSeitAlt
			// 26.01.07 F112
			// If dtBZvon < dtZiBis
			// Set dtBZvon = PalAddDay(dtZiBis,1)
			// Set nZinsTage = PalTage( dtBZvon, dtBZbis, FALSE )
			// 24.08.06 Ä17
			// Set nDMZins = SalNumberRound( nRestHF * (nZinsTage / 365) * nBZZins) / 100
			// Set dtBZvon = PalAddDay( dtBZvon, 1)
			// Set strAZ = PalStrNum(nBZZins,5,2) || '% ' || SalDateToStrX(dtBZvon) || '-' || SalDateToStrX(dtBZbis) ||
			// ' auf € HF' || PalStrNum(nRestHF,7,2)
			// If nDMZins > 0
			// Call SqlImmed('INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
			// VALUES(:strBNUser, :frmRgSuchen.nProzNr, :frmRgSuchen.dtFADate,  :frmRgSuchen.strAZ, :frmRgSuchen.nDMZins)')
			// Call SqlFetchNext(hSqlBZ, nFetchBZ)
			// Set dtHFSeitAlt = dtFADate
			// Else
			// If nZiHF > 0 And dtHFSeitAlt != DATETIME_Null
			// Set ndlgDM = NUMBER_Null
			// If 1 = SalModalDialog(dlgDM, hWndForm, 'Bitte geben Sie für ' || SalDateToStrX(dtHFSeitAlt) || '-' || SalDateToStrX(dtFADate) ||
			// ' auf € HF' || PalStrNum(nRestHF,7,2) || ' den Zinssatz ein  (%) :',nZiHF)
			// While ndlgDM = NUMBER_Null
			// If nZiHF > 0
			// Set dtFADate = dtFADate - 0.1
			// Set strAZ = PalStrNum(nZiHF,5,2) || '% ' || SalDateToStrX(dtHFSeitAlt) || '-' || SalDateToStrX(dtFADate) ||
			// ' auf € HF' || PalStrNum(nRestHF,7,2)
			// Set nZinsTage = PalTage( dtHFSeitAlt, dtFADate, FALSE )
			// 24.08.06 Ä17
			// Set nDMZins = SalNumberRound( nRestHF * (nZinsTage / 365) * nZiHF) / 100
			// If nDMZins > 0
			// Call SqlImmed('INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
			// VALUES(:strBNUser, :frmRgSuchen.nProzNr, :frmRgSuchen.dtFADate,  :frmRgSuchen.strAZ, :frmRgSuchen.nDMZins)')
			// Set dtHFSeitAlt = dtFADate
			// Set nRestHF = nRestHF + nZahlDM
			// If nRestVZ > 0			! verz. Kosten noch offen
			// If nDMRech*-1 > nRestVZ
			// Set nZahlDM = nRestVZ * -1
			// Else
			// Set nZahlDM = nDMRech
			// 25.02.02 aus + ein - gemacht
			// Set nDMRech = nDMRech - nZahlDM
			// #25
			// If nProzNr >= 12003 		! EDA-Verfahren
			// If dtKoSeitAlt != DATETIME_Null
			// Call SqlPrepareAndExecute(hSqlBZ, 'SELECT bzvon, bzbis, bzzins INTO :frmRgSuchen.dtBZvon, :frmRgSuchen.dtBZbis, :frmRgSuchen.nBZZins
			// FROM bz  ORDER BY bzvon, bzbis')
			// Call SqlFetchNext(hSqlBZ, nFetchBZ)
			// Set dtBZvon = dtKoSeitAlt
			// While nFetchBZ != FETCH_EOF
			// If dtFADate < dtBZvon
			// Else If dtBZbis < dtKoSeitAlt
			// Else
			// If dtFADate <= dtBZbis
			// 24.08.06 Ä17
			// Set dtBZbis = dtFADate
			// Set dtBZbis = PalAddDay(dtFADate,-1)
			// If dtBZvon < dtKoSeitAlt
			// 24.08.06 Ä17
			// Set dtBZvon = PalAddDay( dtKoSeitAlt, 1)
			// Set dtBZvon = dtKoSeitAlt
			// Set nZinsTage = PalTage( dtBZvon, dtBZbis, FALSE )
			// 24.08.06 Ä17
			// Set nDMZins = SalNumberRound( nRestVZ * (nZinsTage / 365) * nBZZins) / 100
			// Set dtBZvon = PalAddDay( dtBZvon, 1)
			// Set strAZ = PalStrNum(nBZZins,5,2) || '% ' || SalDateToStrX(dtBZvon) || '-' || SalDateToStrX(dtBZbis) ||
			// ' auf € VZ' || PalStrNum(nRestVZ,7,2)
			// If nDMZins > 0
			// Call SqlImmed('INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
			// VALUES(:strBNUser, :frmRgSuchen.nProzNr, :frmRgSuchen.dtFADate,  :frmRgSuchen.strAZ, :frmRgSuchen.nDMZins)')
			// Call SqlFetchNext(hSqlBZ, nFetchBZ)
			// Set dtKoSeitAlt = dtFADate
			// Else
			// If nZiKo > 0 And dtKoSeitAlt != DATETIME_Null
			// Set ndlgDM = NUMBER_Null
			// If 1 = SalModalDialog(dlgDM, hWndForm, 'Bitte geben Sie für ' || SalDateToStrX(dtKoSeitAlt) || '-' || SalDateToStrX(dtFADate) ||
			// ' auf € VZ' || PalStrNum(nRestVZ,7,2) || ' den Zinssatz ein  (%) :',nZiKo)
			// While ndlgDM = NUMBER_Null
			// If nZiKo > 0
			// Set dtFADate = dtFADate - 0.1
			// Set strAZ = PalStrNum(nZiKo,5,2) || '% ' || SalDateToStrX(dtKoSeitAlt) || '-' || SalDateToStrX(dtFADate) ||
			// ' auf € VZ' || PalStrNum(nRestVZ,7,2)
			// Set nZinsTage = PalTage( dtKoSeitAlt, dtFADate, FALSE )
			// 24.08.06 Ä17
			// Set nDMZins = SalNumberRound( nRestVZ * (nZinsTage / 365) * nZiKo) / 100
			// If nDMZins > 0
			// Call SqlImmed('INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
			// VALUES(:strBNUser, :frmRgSuchen.nProzNr, :frmRgSuchen.dtFADate,  :frmRgSuchen.strAZ, :frmRgSuchen.nDMZins)')
			// Set dtKoSeitAlt = dtFADate
			// Set nRestVZ = nRestVZ + nZahlDM
			// If nRestUVZ > 0			! unverz. Kosten noch offen
			// If nDMRech*-1 > nRestUVZ
			// Set nZahlDM = nRestUVZ * -1
			// Else
			// Set nZahlDM = nDMRech
			// Set nDMRech = nDMRech + nZahlDM
			// Set nRestUVZ = nRestUVZ + nZahlDM
			// Set nProzNrAlt = nProzNr
			// Call SqlFetchNext(hSqlDisk, nFetchRep)
			// 20.11.07 F305 nZinsHF enthielt den Wert -5 (5% üBZ) und wurde nicht berechnet. SalNumberAbs hinzugefügt
			// If SalNumberAbs(nZiHF) > 0 And nRestHF > 0 And dtHFSeitAlt != DATETIME_Null
			// Set dtFADate = dtdlgDatum
			// #25
			// If nProzNr >= 12003 		! EDA-Verfahren
			// Call SqlPrepareAndExecute(hSqlBZ, 'SELECT bzvon, bzbis, bzzins INTO :frmRgSuchen.dtBZvon, :frmRgSuchen.dtBZbis, :frmRgSuchen.nBZZins
			// FROM bz ORDER BY bzvon, bzbis')
			// Call SqlFetchNext(hSqlBZ, nFetchBZ)
			// Set dtBZvon = dtHFSeitAlt
			// While nFetchBZ != FETCH_EOF
			// If dtFADate < dtBZvon
			// Else If dtBZbis < dtHFSeitAlt
			// Else
			// If dtFADate <= dtBZbis
			// Set dtBZbis = dtFADate
			// If dtBZvon < dtHFSeitAlt
			// 24.08.06 Ä17
			// Set dtBZvon = PalAddDay( dtHFSeitAlt,1)
			// Set dtBZvon = dtHFSeitAlt
			// 26.01.07 F112
			// If dtBZvon < dtZiBis
			// Set dtBZvon = PalAddDay(dtZiBis,1)
			// Set nZinsTage = PalTage( dtBZvon, dtBZbis, FALSE )
			// 24.08.06 Ä17
			// Set nDMZins = SalNumberRound( nRestHF * (nZinsTage / 365) * nBZZins) / 100
			// Set dtBZvon = PalAddDay( dtBZvon, 1)
			// Set strAZ = PalStrNum(nBZZins,5,2) || '% ' || SalDateToStrX(dtBZvon) || '-' || SalDateToStrX(dtBZbis) ||
			// ' auf € HF' || PalStrNum(nRestHF,7,2)
			// If nDMZins > 0
			// Call SqlImmed('INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
			// VALUES(:strBNUser, :frmRgSuchen.nProzNr, :frmRgSuchen.dtFADate,  :frmRgSuchen.strAZ, :frmRgSuchen.nDMZins)')
			// Call SqlFetchNext(hSqlBZ, nFetchBZ)
			// Else
			// Set ndlgDM = NUMBER_Null
			// If 1 = SalModalDialog(dlgDM, hWndForm, 'Bitte geben Sie für ' || SalDateToStrX(dtHFSeitAlt) || '-' || SalDateToStrX(dtFADate) ||
			// ' auf € HF' || PalStrNum(nRestHF,7,2) || ' den Zinssatz ein  (%) :',nZiHF)
			// While ndlgDM = NUMBER_Null
			// If nZiHF > 0
			// Set strAZ = PalStrNum(nZiHF,5,2) || '% ' || SalDateToStrX(dtHFSeitAlt) || '-' || SalDateToStrX(dtFADate) ||
			// ' auf € HF' || PalStrNum(nRestHF,7,2)
			// Set nZinsTage = PalTage( dtHFSeitAlt, dtFADate, FALSE )
			// 24.08.06 Ä17
			// Set nDMZins = SalNumberRound( nRestHF * (nZinsTage / 365) * nZiHF) / 100
			// If nDMZins > 0
			// Call SqlImmed('INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
			// VALUES(:strBNUser, :frmRgSuchen.nProzNr, :frmRgSuchen.dtFADate,  :frmRgSuchen.strAZ, :frmRgSuchen.nDMZins)')
			// If nZiKo > 0 And nRestVZ > 0 And dtKoSeitAlt != DATETIME_Null
			// Set dtFADate = dtdlgDatum
			// #25
			// If nProzNr >= 12003 		! EDA-Verfahren
			// Call SqlPrepareAndExecute(hSqlBZ, 'SELECT bzvon, bzbis, bzzins INTO :frmRgSuchen.dtBZvon, :frmRgSuchen.dtBZbis, :frmRgSuchen.nBZZins
			// FROM bz  ORDER BY bzvon, bzbis')
			// Call SqlFetchNext(hSqlBZ, nFetchBZ)
			// Set dtBZvon = dtKoSeitAlt
			// While nFetchBZ != FETCH_EOF
			// If dtFADate < dtBZvon
			// Else If dtBZbis < dtKoSeitAlt
			// Else
			// If dtFADate <= dtBZbis
			// Set dtBZbis = dtFADate
			// If dtBZvon < dtKoSeitAlt
			// 24.08.06 Ä17
			// Set dtBZvon = PalAddDay( dtKoSeitAlt, 1)
			// Set dtBZvon = dtKoSeitAlt
			// Set nZinsTage = PalTage( dtBZvon, dtBZbis, FALSE )
			// 24.08.06 Ä17
			// Set nDMZins = SalNumberRound( nRestVZ * (nZinsTage / 365) * nBZZins) / 100
			// Set strAZ = PalStrNum(nBZZins,5,2) || '% ' || SalDateToStrX(dtBZvon) || '-' || SalDateToStrX(dtBZbis) ||
			// ' auf € VZ' || PalStrNum(nRestVZ,7,2)
			// If nDMZins > 0
			// Call SqlImmed('INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
			// VALUES(:strBNUser, :frmRgSuchen.nProzNr, :frmRgSuchen.dtFADate,  :frmRgSuchen.strAZ, :frmRgSuchen.nDMZins)')
			// Call SqlFetchNext(hSqlBZ, nFetchBZ)
			// Else
			// Set ndlgDM = NUMBER_Null
			// If 1 = SalModalDialog(dlgDM, hWndForm, 'Bitte geben Sie für ' || SalDateToStrX(dtKoSeitAlt) || '-' || SalDateToStrX(dtFADate) ||
			// ' auf € VZ' || PalStrNum(nRestVZ,7,2) || ' den Zinssatz ein  (%) :',nZiKo)
			// While ndlgDM = NUMBER_Null
			// If nZiKo > 0
			// Set strAZ = PalStrNum(nZiKo,5,2) || '% ' || SalDateToStrX(dtKoSeitAlt) || '-' || SalDateToStrX(dtFADate) ||
			// ' auf € VZ' || PalStrNum(nRestVZ,7,2)
			// Set nZinsTage = PalTage( dtKoSeitAlt, dtFADate, FALSE )
			// 24.08.06 Ä17
			// Set nDMZins = SalNumberRound( nRestVZ * (nZinsTage / 365) * nZiKo) / 100
			// If nDMZins > 0
			// Call SqlImmed('INSERT INTO fa (fauser, faproznr, fadatum, fatext, fazinsdm)
			// VALUES(:strBNUser, :frmRgSuchen.nProzNr, :frmRgSuchen.dtFADate,  :frmRgSuchen.strAZ, :frmRgSuchen.nDMZins)')
			// Call SalStatusSetText(hWndForm, '')
			// 07.02.02
			// If nFADM = NUMBER_Null
			// Set nFADM = 0
			// If nFADM !=0 Or strFAText != ''
			// Call SqlImmed('INSERT INTO fa (fauser, faproznr, fadatum, fatext, faunvzdm)
			// VALUES(:strBNUser, :frmRgSuchen.nFAPRNr, SYSDATETIME,  :frmRgSuchen.strFAText, :frmRgSuchen.nFADM)')
			// 27.06.07
			// LL
			// If SalModalDialog( dlgLlDruck, frmMain, 'Forderungsaufstellung.lst', '' )
			// Call SqlDisconnect(hSqlDisk)
			// 18.05.99
			// 30.08.07 F241 mal auskommentiert, um nachprüfen zu können, ob Berichts- oder Programmproblem
			// Call SqlImmed('DELETE FROM FA WHERE fauser = :strBNUser')
			// #25
			// Call SqlDisconnect(hSqlBZ)
			// 26.01.07 F112
			// Call SqlDisconnect(hSqlZi)
			// Call SqlDisconnect(hSqlZiZahl)
			// 14.04.16 Ä1358
			// 18.12.07 Ä164
			// 12.05.23 Ä2108 0 -> dfProzNr
			// 26.07.23 Hennecke: If
			if (this.cbFAEnte.Checked) 
			{
				if (Int.PalFA(0, this.nArztNr, this.dfHalterNr.Number, "", SalNumber.Null, SalDateTime.Null, this.cbFARZZins.Checked, (this.cbFAEnte.Checked == false), false)) 
				{
					// 27.06.07
					// LL
					if (dlgLlDruck.ModalDialog(App.frmMain, "Forderungsaufstellung.lst", "")) 
					{
					}
				}
			}
			else
			{
				if (Int.PalFA(this.dfProzNr.Number, this.nArztNr, this.dfHalterNr.Number, "", SalNumber.Null, SalDateTime.Null, this.cbFARZZins.Checked, (this.cbFAEnte.Checked == false), false)) 
				{
					// 27.06.07
					// LL
					if (dlgLlDruck.ModalDialog(App.frmMain, "Forderungsaufstellung.lst", "")) 
					{
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbBH WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBH_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbBH_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBH_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nSaldo = 0;
			this.dfSArztSaldo.Number = 0;
			Int.SqlImmedSel(@"SELECT aname1, aname2, (avorsoll-avorhaben)
into :frmRgSuchen.dfArztName, :frmRgSuchen.dfArztName2,
:frmRgSuchen.nSaldo
from A where aarztnr=:frmRgSuchen.dfArztNr");
			Int.SqlImmedSel(@"SELECT
sum( tksoll-tkhaben) from tk into :frmRgSuchen.dfSArztSaldo where tkarztnr=:frmRgSuchen.dfArztNr");
			this.dfSArztSaldo.Number = this.dfSArztSaldo.Number + this.nSaldo;
			#endregion
		}
		
		/// <summary>
		/// pbOP WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOP_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOP_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOP_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SqlImmedSel('SELECT
			// sum(@choose(rkkzzahl,
			// (rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl),
			// (rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl),0))
			// from rk into :dfSArztOP where rkarztnr=:frmRgSuchen.dfArztNr')
			Int.SqlImmedSel(@"SELECT
sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
from rk into :frmRgSuchen.dfSArztOP where rkarztnr=:frmRgSuchen.dfArztNr and rkkzzahl<2 AND rkdeaktiv IS NULL");
			#endregion
		}
		
		/// <summary>
		/// pbHalterKonto WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHalterKonto_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbHalterKonto_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHalterKonto_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalStatusSetText(hWndForm,'Erstelle OP-Liste ·  Bitte warten !')
			this.PalFuelleWhere();
			// Set nErr = 1
			// Set strReportName = 'OPHALTER'
			// Call PalReport(frmRgSuchen,'OPHALTER.QRP',
			// ':frmRgSuchen.strArztRechNr, :frmRgSuchen.nTANr,:frmRgSuchen.strTAN1,
			// :frmRgSuchen.nTHNr,:frmRgSuchen.strTHN1,:frmRgSuchen.strTHN2,:frmRgSuchen.strTHStr,:frmRgSuchen.strTHOrt,:frmRgSuchen.strTHLand,
			// :frmRgSuchen.dtBuchDat, :frmRgSuchen.strBuchText, :frmRgSuchen.nRechNr,
			// :frmRgSuchen.nDMRech,  :frmRgSuchen.nDMMahn, :frmRgSuchen.nDMZins, :frmRgSuchen.nZaRech,
			// :frmRgSuchen.nZaMahn, :frmRgSuchen.nZaZins,
			// :frmRgSuchen.nMS, :frmRgSuchen.dtMahnDat :frmRgSuchen.dtZahlDat, :frmRgSuchen.nZahlDM,
			// :frmRgSuchen.nDMOP, :frmRgSuchen.strZaKZ',
			// 'ArztRechNr, ArztNr, AName1,
			// HalterNr, HName1, HName2, HStr, HOrt, HLand,
			// RechDat, BuchText, RechNr,
			// DMRech,  DMMahn, DMZins, ZaRech, ZaMahn, ZaZins,
			// MS, MahnDat, ZahlDat, ZahlDM, DMOP, ZaKZ',
			// nErr)
			// 25.06.07
			// LL
			dlgLlDruck.ModalDialog(App.frmMain, "OP-Liste Halter.lst", "");
			#endregion
		}
		
		/// <summary>
		/// pbHalterRgListe WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHalterRgListe_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbHalterRgListe_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHalterRgListe_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalStatusSetText(hWndForm,'Erstelle Rg-Liste ·  Bitte warten !')
			this.PalFuelleWhere();
			// Set nErr = 1
			// Set strReportName = 'RGHALTER'
			// Call PalReport(frmRgSuchen,'OPHALTER.QRP',
			// ':frmRgSuchen.strArztRechNr, :frmRgSuchen.nTANr,:frmRgSuchen.strTAN1,
			// :frmRgSuchen.nTHNr,:frmRgSuchen.strTHN1,:frmRgSuchen.strTHN2,:frmRgSuchen.strTHStr,:frmRgSuchen.strTHOrt,:frmRgSuchen.strTHLand,
			// :frmRgSuchen.dtBuchDat, :frmRgSuchen.strBuchText, :frmRgSuchen.nRechNr,
			// :frmRgSuchen.nDMRech,  :frmRgSuchen.nDMMahn, :frmRgSuchen.nDMZins, :frmRgSuchen.nZaRech,
			// :frmRgSuchen.nZaMahn, :frmRgSuchen.nZaZins,
			// :frmRgSuchen.nMS, :frmRgSuchen.dtMahnDat :frmRgSuchen.dtZahlDat, :frmRgSuchen.nZahlDM,
			// :frmRgSuchen.nDMOP, :frmRgSuchen.strZaKZ',
			// 'ArztRechNr, ArztNr, AName1,
			// HalterNr, HName1, HName2, HStr, HOrt, HLand,
			// RechDat, BuchText, RechNr,
			// DMRech,  DMMahn, DMZins, ZaRech, ZaMahn, ZaZins,
			// MS, MahnDat, ZahlDat, ZahlDM, DMOP, ZaKZ',
			// nErr)
			// 25.06.07
			// LL
			dlgLlDruck.ModalDialog(App.frmMain, "OP-Liste Halter.lst", "alle");
			#endregion
		}
		
		/// <summary>
		/// dfMMS WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMMS_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate: // 19.06.12 Ä762
					this.dfMMS_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMMS_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfMMS.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Bitte geben Sie eine Mahnstufe ein.", "leeres Feld nicht erlaubt!", (Sys.MB_Ok | Sys.MB_IconExclamation));
				e.Return = false;
				return;
			}
			#endregion
		}
		
		/// <summary>
		/// pbRAab WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRAab_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRAab_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbRAab_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRAab_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.strRAText = this.pbRAab.GetText(30);
			if (this.strRAText == "an RA abg.") 
			{
				// If IDYES = SalMessageBox('Wollen Sie die Rg. ' || PalStrNum(dfArztNr,4,0) || ' / ' || PalStrNum(dfSRgNr,6,0) || '
				// wirklich an Rechtsanwalt / Inkasso abgeben ?', 'RA ?', MB_YesNo|MB_IconQuestion)
				frmRechAb.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfSRgNr.Number);
			}
			else
			{
				this.strRAN1 = "";
				this.strRAN2 = "";
				this.strRAN3 = "";
				this.strRAN4 = "";
				this.strRAN5 = "";
				// 18.01.22 Ä1987 + , raan4, raan5
				Int.SqlImmedSel(@"SELECT radatum, razeichen, raan1, raan2, raan3, raan4, raan5
INTO :frmRgSuchen.dtRADatum,  :frmRgSuchen.strRAZeichen, :frmRgSuchen.strRAN1, :frmRgSuchen.strRAN2, :frmRgSuchen.strRAN3, :frmRgSuchen.strRAN4, :frmRgSuchen.strRAN5
FROM RA WHERE raarztnr =" + this.dfArztNr.Number.ToString(0) + @"
and rahalternr=" + this.dfHalterNr.Number.ToString(0) + @"
and rarechnr=" + this.dfSRgNr.Number.ToString(0));
				this.strRAN1a = this.strRAN1;
				this.strRAN2a = this.strRAN2;
				this.strRAN3a = this.strRAN3;
				this.strRAN4a = this.strRAN4;
				this.strRAN5a = this.strRAN5;
				if (1 == dlgAnschrift.ModalDialog(this, "Rechnung wurde erneut abgegeben an:", ref this.strRAN1, ref this.strRAN2, ref this.strRAN3, ref this.strRAN4, ref this.strRAN5)) 
				{
					if (this.strRAN1 == "" && this.strRAN2 == "" && this.strRAN3 == "" && this.strRAN4 == "" && this.strRAN5 == "")  // 06.10.05 #0003
					{
						this.strKuerzel = App.frmMain.strUser.Left(2);
						Int.SqlImmed(@"DELETE FROM ra
WHERE raarztnr =" + this.dfArztNr.Number.ToString(0) + @"
and rahalternr=" + this.dfHalterNr.Number.ToString(0) + @"
and rarechnr=" + this.dfSRgNr.Number.ToString(0));
						this.lstrText = @"***** RA zurückgenommen

von " + this.strRAN1a + ", " + this.strRAN2a + ", " + this.strRAN3a + ", " + this.strRAN4a + ", " + this.strRAN5a;
						// 13.05.14 F2027
						this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

						Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmRgSuchen.dfArztNr, :frmRgSuchen.dfHalterNr, :frmRgSuchen.dfSRgNr,
:frmRgSuchen.lstrText, SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, SYSDATETIME)");
					}
					else if (this.strRAN1 != this.strRAN1a || this.strRAN2 != this.strRAN2a || this.strRAN3 != this.strRAN3a || this.strRAN4 != this.strRAN4a || this.strRAN5 != this.strRAN5a) 
					{
						this.strKuerzel = App.frmMain.strUser.Left(2);
						Int.SqlImmed(@"UPDATE ra SET
radatum = SYSDATE,
razeichen = :strBNZei,
raan1 = :frmRgSuchen.strRAN1,
raan2 = :frmRgSuchen.strRAN2,
raan3 = :frmRgSuchen.strRAN3,
raan4 = :frmRgSuchen.strRAN4,
raan5 = :frmRgSuchen.strRAN5
WHERE raarztnr =" + this.dfArztNr.Number.ToString(0) + @"
and rahalternr=" + this.dfHalterNr.Number.ToString(0) + @"
and rarechnr=" + this.dfSRgNr.Number.ToString(0));
						this.lstrText = @"***** RA Abgabe geändert

von " + this.strRAN1a + ", " + this.strRAN2a + ", " + this.strRAN3a + ", " + this.strRAN4a + ", " + this.strRAN5a + @"

in " + this.strRAN1 + ", " + this.strRAN2 + ", " + this.strRAN3 + ", " + this.strRAN4 + ", " + this.strRAN5;
						// 13.05.14 F2027
						this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

						Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmRgSuchen.dfArztNr, :frmRgSuchen.dfHalterNr, :frmRgSuchen.dfSRgNr,
:frmRgSuchen.lstrText, SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
					}
					Sal.MessageBox(this.lstrText, "Ergebnis", (Sys.MB_Ok | Sys.MB_IconAsterisk));
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRAab_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.Number != 0 && this.dfArztNr.Number != Sys.NUMBER_Null && this.dfHalterNr.Number != 0 && this.dfHalterNr.Number != Sys.NUMBER_Null && this.dfSRgNr.Number != 0 && this.dfSRgNr.Number != Sys.NUMBER_Null) 
			{
				this.dtRADatum = SalDateTime.Null;
				// 18.01.22 Ä1987 + , raan4, raan5
				Int.SqlImmedSel(@"SELECT radatum, razeichen, raan1, raan2, raan3, raan4, raan5
INTO :frmRgSuchen.dtRADatum,  :frmRgSuchen.strRAZeichen, :frmRgSuchen.strRAN1, :frmRgSuchen.strRAN2, :frmRgSuchen.strRAN3,
:frmRgSuchen.strRAN4, :frmRgSuchen.strRAN5
FROM RA WHERE raarztnr =" + this.dfArztNr.Number.ToString(0) + @"
and rahalternr=" + this.dfHalterNr.Number.ToString(0) + @"
and rarechnr=" + this.dfSRgNr.Number.ToString(0));
				if (this.dtRADatum == SalDateTime.Null) 
				{
					e.Return = Int.XSalTooltipSetTextActive(this.pbRAab, "Die Rechnung " + this.dfArztNr.Number.ToString(0) + "/R" + this.dfSRgNr.Number.ToString(0) + " wurde noch NICHT abgegeben.");
					return;
				}
				else
				{
					e.Return = Int.XSalTooltipSetTextActive(this.pbRAab, "Zuletzt am " + Int.SalDateToStrX(this.dtRADatum) + " durch " + this.strRAZeichen + " abgegeben an " + this.strRAN1 + ", " + this.strRAN2 + ", " + this.strRAN3 + ", " + this.strRAN4 + 
						", " + this.strRAN5);
					return;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbMGaus WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMGaus_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbMGaus_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbMGaus_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMGaus_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.Number != 0 && this.dfArztNr.Number != Sys.NUMBER_Null && this.dfHalterNr.Number != 0 && this.dfHalterNr.Number != Sys.NUMBER_Null && this.dfSRgNr.Number != 0 && this.dfSRgNr.Number != Sys.NUMBER_Null) 
			{
				if (this.dfSRgNr.Number >= 999990) 
				{
					Sal.MessageBox("Diese Funktion ist für MB-Sammler nicht möglich.", "Fehler", Sys.MB_Ok);
				}
				else
				{
					// 04.08.10 OTÄ446
					this.nMahnZinsAus = this.dfSDMMahn.Number + this.dfSDMZins.Number - this.dfSZAMahn.Number - this.dfSZAZins.Number;
					if (this.nMahnZinsAus == 0 || this.nMahnZinsAus == SalNumber.Null) 
					{
						Sal.MessageBox("Der Betrag ist 0. Was soll da ausgebucht werden?", "???", Sys.MB_Ok);
					}
					else
					{
						// 30.03.15 Ä1188
						// Set strBuchText = 'STRE' || PalStrNum(dfArztNr,4,0)  || '/'
						// || PalStrNum(dfHalterNr,5,0)|| '/' || PalStrNum(dfSRgNr,5,0)
						// Call SqlImmedX('INSERT INTO FI
						// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
						// VALUES (0, 16410, 16000, 0, SYSDATE, :frmRgSuchen.strBuchText, :frmRgSuchen.nMahnZinsAus, 5)')
						// Call SqlImmed( 'UPDATE rk SET rkzamahn=rkdmmahn, rkzazins=rkdmzins WHERE rkarztnr = :frmRgSuchen.dfArztNr AND rkhalternr = :frmRgSuchen.dfHalterNr AND rkrechnr = :frmRgSuchen.dfSRgNr' )
						// 08.11.10 OTF787
						// If dfSRestOP = nMahnZinsAus
						// Call SqlImmed( 'UPDATE rk SET rkkzzahl=3 WHERE rkarztnr = :frmRgSuchen.dfArztNr AND rkhalternr = :frmRgSuchen.dfHalterNr AND rkrechnr = :frmRgSuchen.dfSRgNr' )
						// Set dfSRestOP = 0
						// 26.08.10 OTÄ446
						// Call SqlImmedX('INSERT INTO ZA
						// (zaarztnr,zahalternr,zarechnr,zakz,zabuchdat,zabelegnr,zadm, zaproznr, zabuchtext)
						// VALUES (:frmRgSuchen.dfArztNr,
						// :frmRgSuchen.dfHalterNr,
						// :frmRgSuchen.dfSRgNr,
						// 4,
						// SYSDATE,
						// 0,
						// :frmRgSuchen.nMahnZinsAus,
						// NULL,
						// :frmRgSuchen.strBuchText)')

						// Set dfSZAMahn = dfSDMMahn
						// Set dfSZAZins = dfSDMZins
						this.lsGrund = "Knopfdruck durch moveta-Mitarbeiter " + Var.strBNName + " in Infobild";
						// 09.05.16 Ä1367 AN -> HE
						Int.SqlImmed(@"INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, 'HE', :frmRgSuchen.dfArztNr, :frmRgSuchen.dfHalterNr, :frmRgSuchen.dfSRgNr,
:frmRgSuchen.lsGrund , SYSDATE, NULL, 'N', 'ZM', 'MG ausbuchen', :frmRgSuchen.nMahnZinsAus, :frmRgSuchen.dfProzNr, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
						this.PalFuelleInfosH();
						Sal.MessageBeep(0);
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMGaus_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.Number != 0 && this.dfArztNr.Number != Sys.NUMBER_Null && this.dfHalterNr.Number != 0 && this.dfHalterNr.Number != Sys.NUMBER_Null && this.dfSRgNr.Number != 0 && this.dfSRgNr.Number != Sys.NUMBER_Null) 
			{
				if (this.dfSRgNr.Number >= 999990) 
				{
					e.Return = Int.XSalTooltipSetTextActive(this.pbMGaus, "Diese Funktion ist für MB-Sammler nicht möglich.");
					return;
				}
				else
				{
					e.Return = Int.XSalTooltipSetTextActive(this.pbMGaus, "offene Mahngebühren und Zinsen stornieren.");
					return;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbHist WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHist_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbHist_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHist_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.IsEmpty() || this.dfHalterNr.IsEmpty()) 
			{
				Sal.MessageBox("Arzt- oder Halter-Nr. fehlt.", "Daten fehlen", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				tblHistorie.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfSHalterSaldo.Number);
			}
			#endregion
		}
		
		/// <summary>
		/// tblHZahlungen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHZahlungen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_FetchRowDone:
					this.tblHZahlungen_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.tblHZahlungen_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHZahlungen_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblHZahlungen.colsZAZahlArt.Text = Int.PalZahlArt(this.tblHZahlungen.colnZAKZ.Number);
			if (this.tblHZahlungen.colnZAKZ.Number == 0) 
			{
				this.tblHZahlungen.colsZAZahlArt.Text = "";
			}
			// 18.09.02
			// If bPFarbe
			// Call XSalTblSetRowBackColor( tblHZahlungen, lParam, 0xBFFFFF )
			// Set bPFarbe = FALSE
			// Else
			// Call XSalTblSetRowBackColor( tblHZahlungen, lParam, 0xEFFFFF )
			// Set bPFarbe = TRUE
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHZahlungen_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblHZahlungen, 0xbfffff);
			// Call MTblSubClass( hWndItem )
			// Call MTblSetAltRowBackColors( hWndItem, FALSE, COLOR_White, 0xBFFFFF )
			#endregion
		}
		
		/// <summary>
		/// tblHTagebuch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHTagebuch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblHTagebuch_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_FetchDone:
					this.tblHTagebuch_OnSAM_FetchDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHTagebuch_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblHTagebuch, 0xffdfff);
			// Call MTblSubClass( hWndItem )
			// Call MTblSetAltRowBackColors( hWndItem, FALSE, COLOR_White, 0xFFBFFF )
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHTagebuch_OnSAM_FetchDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			#endregion
		}
		
		/// <summary>
		/// tblHZettel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHZettel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblHZettel_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHZettel_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblHZettel, 0xdfffdf);
			// Call MTblSubClass( hWndItem )
			// Call MTblSetAltRowBackColors( hWndItem, FALSE, COLOR_White, 0xBFFFBF )
			#endregion
		}
		
		/// <summary>
		/// tblHMahnungen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHMahnungen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblHMahnungen_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblHMahnungen_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHMahnungen_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblHMahnungen, 0xffdfdf);
			// Call MTblSubClass( hWndItem )
			// Call MTblSetAltRowBackColors( hWndItem, FALSE, COLOR_White, 0xFFBFBF )
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHMahnungen_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblHMahnungen.colnMAMS.Number == 0) 
			{
				this.tblHMahnungen.colsMAMSText.Text = "ZE";
			}
			else
			{
				this.tblHMahnungen.colsMAMSText.Text = this.tblHMahnungen.colnMAMS.Number.ToString(0);
			}
			#endregion
		}
		
		/// <summary>
		/// cbEL WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbEL_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbEL_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbEL_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmEL.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRgNr.Number);
			#endregion
		}
		
		/// <summary>
		/// pbUeberw WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbUeberw_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbUeberw_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbUeberw_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			tblUeberw.CreateWindow(this, this.dfArztNr.Number);
			#endregion
		}
		
		/// <summary>
		/// pbEtiA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEtiA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEtiA_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbEtiA_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEtiA_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 01.11.07 Ä176
			Int.SqlImmedSel(@"SELECT asvname1, asvname2, asvstr, asvort, asvland
into :frmRgSuchen.strTAN1, :frmRgSuchen.strTAN2, :frmRgSuchen.strTAStr, :frmRgSuchen.strTAOrt, :frmRgSuchen.strTALand
from A where aarztnr=:frmRgSuchen.dfArztNr");
			// Call SqlImmed('INSERT INTO ed (edn1,edn2,eds,edo) VALUES( :frmRgSuchen.strTAN1, :frmRgSuchen.strTAN2, :frmRgSuchen.strTAStr, :frmRgSuchen.strTAOrt)')
			Var.lsDummy = "";
			if (this.strTAN1 != "") 
			{
				Var.lsDummy = Var.lsDummy + this.strTAN1 + @"
";
			}
			if (this.strTAN2 != "") 
			{
				Var.lsDummy = Var.lsDummy + this.strTAN2 + @"
";
			}
			if (this.strTAStr != "") 
			{
				Var.lsDummy = Var.lsDummy + this.strTAStr + @"
";
			}
			if (this.strTAOrt != "") 
			{
				Var.lsDummy = Var.lsDummy + this.strTAOrt + @"
";
			}
			// 29.07.10 F728
			if (this.strTALand != "") 
			{
				this.strTALand = Int.PalPruefeLC(this.strTALand, 0);
				Var.lsDummy = Var.lsDummy + this.strTALand + @"
";
			}

			if (Var.bfrmDYMODruck) 
			{
				while (!(App.frmDYMODruck.DestroyWindow())) 
				{
				}
			}
			frmDYMODruck.CreateWindow(this, Var.lsDummy, "");
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEtiA_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbEtiA, "Etikett für diesen Arzt drucken.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbAStamm WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAStamm_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAStamm_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbAStamm_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAStamm_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmAerzte.CreateWindow(this, "frmRgSuchen", this.dfArztNr.Number);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAStamm_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbAStamm, "In den Arztstamm wechseln.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbEtiH WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEtiH_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEtiH_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbEtiH_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEtiH_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 01.11.07 Ä176
			// Call SqlImmed('INSERT INTO ed (edn1,edn2,eds,edo) VALUES( :frmRgSuchen.dfSHalterName,:frmRgSuchen.dfSHalterName2,:frmRgSuchen.dfSHalterStr,:frmRgSuchen.dfSHalterOrt)')
			Var.lsDummy = "";
			if (this.dfSHalterName.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfSHalterName.Text + @"
";
			}
			if (this.dfSHalterName2.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfSHalterName2.Text + @"
";
			}
			if (this.dfSHalterStr.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfSHalterStr.Text + @"
";
			}
			if (this.dfSHalterOrt.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfSHalterOrt.Text + @"
";
			}
			if (this.dfSHalterLand.Text != "") 
			{
				Var.lsDummy = Var.lsDummy + this.dfSHalterLand.Text + @"
";
			}

			if (Var.bfrmDYMODruck) 
			{
				while (!(App.frmDYMODruck.DestroyWindow())) 
				{
				}
			}
			frmDYMODruck.CreateWindow(this, Var.lsDummy, "");
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEtiH_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbEtiH, "Etikett für diesen Halter drucken.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbHStamm WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHStamm_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbHStamm_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbHStamm_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHStamm_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmHalter.CreateWindow(this, "frmRgSuchen", this.dfArztNr.Number, this.dfHalterNr.Number);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHStamm_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbHStamm, "In den Halterstamm wechseln.");
			return;
			#endregion
		}
		
		/// <summary>
		/// tblHSuche WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHSuche_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_RowHeaderClick:
					this.tblHSuche_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblHSuche_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.tblHSuche_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHSuche_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfArztNr.Number = this.tblHSuche.colnArztNr.Number;
			this.dfHalterNr.Number = this.tblHSuche.colnHalterNr.Number;
			this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0);
			this.dfHalterNr.PostMessage(Sys.SAM_Validate, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHSuche_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 30.07.03
			if (this.tblHSuche.colnHalterNein.Number == 1) 
			{
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xBFBFFF )
				MT.MTbl.SetRowBackColor(this.tblHSuche, Sys.lParam, 0xbfbfff, MT.MTbl.MTSC_REDRAW);
			}
			// Else
			// 18.09.02
			// If bPFarbe
			// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xFFBFBF )
			// Set bPFarbe = FALSE
			// Else
			// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xFFEFEF )
			// Set bPFarbe = TRUE
			// 04.12.17 Ä1569
			if (((SalString)this.tblHSuche.colstrName.Text).ToUpper().Scan(this.dfHalterName.Text) != -1 && this.nRowFind == -1) 
			{
				this.nRowFind = Sys.lParam;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHSuche_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblHSuche, 0xffdfdf);
			#endregion
		}
		
		/// <summary>
		/// pbSA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSA_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSA_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			this.strSelect1 = @"select aarztnr,aname1,aname2,astr,aort
INTO :frmRgSuchen.tblSA.colnArztNr, :frmRgSuchen.tblSA.colstrName, :frmRgSuchen.tblSA.colstrName2, :frmRgSuchen.tblSA.colstrStrasse, :frmRgSuchen.tblSA.colstrOrt
FROM A WHERE aarztnr <> -1 ";
			if (this.dfSAName.Text != "") 
			{
				this.strSelect1 = this.strSelect1 + " AND (@LICS(aname1) LIKE @LICS(\'%" + this.dfSAName.Text + @"%')
	OR @LICS(aname2) LIKE @LICS('%" + this.dfSAName.Text + "%\')  ) ";
			}
			if (this.dfSAStr.Text != "") 
			{
				this.strSelect1 = this.strSelect1 + " AND (@LICS(astr) LIKE @LICS(\'%" + this.dfSAStr.Text + "%\')  ) ";
			}
			if (this.dfSAOrt.Text != "") 
			{
				this.strSelect1 = this.strSelect1 + " AND (@LICS(aort) LIKE @LICS(\'%" + this.dfSAOrt.Text + "%\')  ) ";
			}
			// 20.01.14 Ä1005
			// Call SqlCreateSession(hSession,'')
			// If SqlCreateStatement (hSession, hSqlZa)
			// If SqlSetIsolationLevel(hSqlZa,'RO')
			Int.SqlConnection(ref this.hSqlZa);

			this.strSelect1 = this.strSelect1 + " ORDER BY amatch";
			if (this.tblSA.Populate(this.hSqlZa, this.strSelect1, Sys.TBL_FillAll)) 
			{
			}
			// 20.01.14 Ä1005
			this.hSqlZa.Disconnect();
			// Call SqlFreeSession( hSession )

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// tblSA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblSA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_RowHeaderClick:
					this.tblSA_OnSAM_RowHeaderClick(sender, e);
					break;
				
				// On SAM_FetchRowDone
				
				// If bPFarbe
				
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xBFBFFF )
				
				// Set bPFarbe = FALSE
				
				// Else
				
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xEFEFFF )
				
				// Set bPFarbe = TRUE
				
				case Sys.SAM_Create:
					this.tblSA_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblSA_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfArztNr.Number = this.tblSA.colnArztNr.Number;
			this.PalLeereHalterFelder();
			this.dfQuick.Text = Int.PalStrNum(this.dfArztNr.Number, 4, 0);
			this.dfQuick.PostMessage(Sys.SAM_Validate, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblSA_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call MTblSubClass( hWndItem )
			// Call MTblSetAltRowBackColors( hWndItem, FALSE, COLOR_White, 0xBFBFFF )
			Int.PalPrepareMTbl(this.tblSA, 0xbfbfff);
			#endregion
		}
		
		/// <summary>
		/// dfSH2HalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSH2HalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfSH2HalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSH2HalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.rbSH2.Checked = true;
			#endregion
		}
		
		/// <summary>
		/// dfSH2RechNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSH2RechNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfSH2RechNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSH2RechNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.rbSH2.Checked = true;
			#endregion
		}
		
		/// <summary>
		/// dfSH2RechDM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSH2RechDM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfSH2RechDM_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSH2RechDM_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.rbSH2.Checked = true;
			#endregion
		}
		
		/// <summary>
		/// pbSH WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSH_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSH_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSH_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			// 04.12.07  A171
			if (this.rbSH1.Checked) 
			{
				if (this.obSHLics.Checked) 
				{
					if (this.dfSHArztNr.Number > 0) 
					{
						this.strSelectH = @"select @lics(hnn), harztnr,hhalternr, hnn || ', ' || hvn || ' ' || hti,hort, hland,hname2,hstr, hhalternein
into :frmRgSuchen.tblSH.colstrNNLics, :frmRgSuchen.tblSH.colnArztNr, :frmRgSuchen.tblSH.colnHalterNr,
:frmRgSuchen.tblSH.colstrName, :frmRgSuchen.tblSH.colstrOrt, :frmRgSuchen.tblSH.colstrLand, :frmRgSuchen.tblSH.colstrName2, :frmRgSuchen.tblSH.colstrStrasse, :frmRgSuchen.tblSH.colnHalterNein
from H
WHERE harztnr=:frmRgSuchen.dfSHArztNr AND hdeaktiv IS NULL AND";
					}
					else
					{
						this.strSelectH = @"select @lics(hnn), harztnr,hhalternr,hnn || ', ' || hvn || ' ' || hti,hort,hland, hname2,hstr, hhalternein
into :frmRgSuchen.tblSH.colstrNNLics, :frmRgSuchen.tblSH.colnArztNr, :frmRgSuchen.tblSH.colnHalterNr,
:frmRgSuchen.tblSH.colstrName, :frmRgSuchen.tblSH.colstrOrt, :frmRgSuchen.tblSH.colstrLand, :frmRgSuchen.tblSH.colstrName2, :frmRgSuchen.tblSH.colstrStrasse, :frmRgSuchen.tblSH.colnHalterNein
from H
WHERE hdeaktiv IS NULL AND ";
					}
					this.strSelect1 = "";
					if (this.dfSHNN.Text != "") 
					{
						this.strSelect1 = this.strSelect1 + " AND @lics(hnn) LIKE @LICS(\'%" + this.dfSHNN.Text + "%\') ";
					}
					if (this.dfSHVN.Text != "") 
					{
						this.strSelect1 = this.strSelect1 + " AND @lics(hvn) LIKE @LICS(\'%" + this.dfSHVN.Text + "%\') ";
					}
					// 20.11.07 Ä165
					if (this.dfSHName2.Text != "") 
					{
						this.strSelect1 = this.strSelect1 + " AND @lics(hname2) LIKE @LICS(\'%" + this.dfSHName2.Text + "%\') ";
					}

					if (this.dfSHStr.Text != "") 
					{
						this.strSelect1 = this.strSelect1 + " AND @lics(hstr) LIKE @LICS(\'%" + this.dfSHStr.Text + "%\') ";
					}
					if (this.dfSHOrt.Text != "") 
					{
						this.strSelect1 = this.strSelect1 + " AND @lics(hort) LIKE @LICS(\'%" + this.dfSHOrt.Text + "%\') ";
					}
					if (this.cmbSHLC.Text != "") 
					{
						this.strLand = ((SalString)this.cmbSHLC.Text).Left(2);
						this.strSelect1 = this.strSelect1 + " AND hland = :frmRgSuchen.strLand ";
					}
					// 14.02.11 OTÄ509
					if (this.dfSHVirtKont.Text != "") 
					{
						this.strSelect1 = this.strSelect1 + " AND hvirtkonto = \'" + this.dfSHVirtKont.Text + "\'";
					}
					// 18.02.14
					if (this.strSelect1.Length > 4) 
					{
						this.strSelect1 = this.strSelect1.Mid(4, 32000);
					}


					this.strSelectH = this.strSelectH + this.strSelect1 + " Order by 1, hvn";
				}
				else
				{
					// Set strName=strName||'%'
					if (this.dfSHArztNr.Number > 0) 
					{
						this.strSelectH = @"select @lics(hnn), harztnr,hhalternr, hnn || ', ' || hvn || ' ' || hti,hort,hland, hname2,hstr, hhalternein
into :frmRgSuchen.tblSH.colstrNNLics, :frmRgSuchen.tblSH.colnArztNr, :frmRgSuchen.tblSH.colnHalterNr,
:frmRgSuchen.tblSH.colstrName, :frmRgSuchen.tblSH.colstrOrt, :frmRgSuchen.tblSH.colstrLand, :frmRgSuchen.tblSH.colstrName2, :frmRgSuchen.tblSH.colstrStrasse, :frmRgSuchen.tblSH.colnHalterNein
from H
WHERE harztnr=:frmRgSuchen.dfSHArztNr AND hdeaktiv IS NULL AND";
					}
					else
					{
						this.strSelectH = @"select @lics(hnn), harztnr,hhalternr,hnn || ', ' || hvn || ' ' || hti,hort,hland, hname2,hstr, hhalternein
into :frmRgSuchen.tblSH.colstrNNLics, :frmRgSuchen.tblSH.colnArztNr, :frmRgSuchen.tblSH.colnHalterNr,
:frmRgSuchen.tblSH.colstrName, :frmRgSuchen.tblSH.colstrOrt, :frmRgSuchen.tblSH.colstrLand, :frmRgSuchen.tblSH.colstrName2, :frmRgSuchen.tblSH.colstrStrasse, :frmRgSuchen.tblSH.colnHalterNein
from H
WHERE hdeaktiv IS NULL AND ";
					}
					this.strSelect1 = "";
					if (this.dfSHVN.Text != "") 
					{
						this.strSelect1 = this.strSelect1 + @" AND
@soundex(hvn) = @soundex( :frmRgSuchen.dfSHVN) ";
					}
					if (this.dfSHNN.Text != "") 
					{
						this.strSelect1 = this.strSelect1 + @" AND
@soundex(hnn) = @soundex( :frmRgSuchen.dfSHNN) ";
					}
					// 20.11.07 Ä165
					if (this.dfSHName2.Text != "") 
					{
						this.strSelect1 = this.strSelect1 + " AND @lics(hname2) LIKE @LICS(\'%" + this.dfSHName2.Text + "%\') ";
					}

					if (this.dfSHStr.Text != "") 
					{
						this.strSelect1 = this.strSelect1 + " AND @lics(hstr) LIKE @LICS(\'%" + this.dfSHStr.Text + "%\') ";
					}
					if (this.dfSHOrt.Text != "") 
					{
						this.strSelect1 = this.strSelect1 + " AND @lics(hort) LIKE @LICS(\'%" + this.dfSHOrt.Text + "%\') ";
					}
					if (this.cmbSHLC.Text != "") 
					{
						this.strLand = ((SalString)this.cmbSHLC.Text).Left(2);
						this.strSelect1 = this.strSelect1 + " AND hland = :frmRgSuchen.strLand ";
					}
					// 14.02.11 OTÄ509
					if (this.dfSHVirtKont.Text != "") 
					{
						this.strSelect1 = this.strSelect1 + " AND hvirtkonto = \'" + this.dfSHVirtKont.Text + "\'";
					}
					// 14.04.22
					if (this.dfSHMail.Text != "") 
					{
						this.strSelect1 = this.strSelect1 + " AND (@lics(hemail) LIKE @LICS(\'%" + this.dfSHMail.Text + "%\') OR @lics(hpmemail) LIKE @LICS(\'%" + this.dfSHMail.Text + "%\') OR @lics(hhemail) LIKE @LICS(\'%" + this.dfSHMail.Text + @"%')
OR @lics(hdigitalmail) LIKE @LICS('%" + this.dfSHMail.Text + "%\') OR @lics(hepostmail) LIKE @LICS(\'%" + this.dfSHMail.Text + "%\')) ";
					}
					// 18.02.14
					if (this.strSelect1.Length > 4) 
					{
						this.strSelect1 = this.strSelect1.Mid(4, 32000);
					}


					this.strSelectH = this.strSelectH + this.strSelect1 + " Order by 1, hvn";
				}
			}
			else if (this.rbSH2.Checked) 
			{
				this.strSelectH = @"select @lics(hnn), harztnr,hhalternr, hnn || ', ' || hvn || ' ' || hti,hort,hland, hname2,hstr, hhalternein
into :frmRgSuchen.tblSH.colstrNNLics, :frmRgSuchen.tblSH.colnArztNr, :frmRgSuchen.tblSH.colnHalterNr,
:frmRgSuchen.tblSH.colstrName, :frmRgSuchen.tblSH.colstrOrt, :frmRgSuchen.tblSH.colstrLand, :frmRgSuchen.tblSH.colstrName2, :frmRgSuchen.tblSH.colstrStrasse, :frmRgSuchen.tblSH.colnHalterNein
from H ";
				this.strSelect1 = "";
				if (!(this.dfSH2HalterNr.IsEmpty())) 
				{
					this.strSelect1 = this.strSelect1 + @" AND
hhalternr= :frmRgSuchen.dfSH2HalterNr  AND
harztnr*1000000+hhalternr IN (SELECT rkarztnr*1000000+rkhalternr FROM rk WHERE rkkzzahl<2 AND rkhalternr = :frmRgSuchen.dfSH2HalterNr) ";
				}
				if (!(this.dfSH2RechNr.IsEmpty())) 
				{
					this.strSelect1 = this.strSelect1 + @" AND
harztnr*1000000+hhalternr IN (SELECT rkarztnr*1000000+rkhalternr FROM rk WHERE rkkzzahl<2 AND rkrechnr = :frmRgSuchen.dfSH2RechNr) ";
				}
				if (!(this.dfSH2RechDM.IsEmpty())) 
				{
					// 20.02.23 Ä2078 +OR (rkdmleis+rkdmarzn) = :frmRgSuchen.dfSH2RechDM )
					this.strSelect1 = this.strSelect1 + @" AND
harztnr*1000000+hhalternr IN
(SELECT rkarztnr*1000000+rkhalternr
FROM rk
WHERE rkkzzahl<2 AND ((rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl) = :frmRgSuchen.dfSH2RechDM
OR rkdmleis+rkdmarzn = :frmRgSuchen.dfSH2RechDM )) ";
				}
				if (this.strSelect1 == "") 
				{
					Sal.MessageBox("Es muß eine Auswahl eingegeben werden.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
				else
				{

					this.strSelectH = this.strSelectH + "WHERE " + this.strSelect1.Mid(4, 32000) + " AND hdeaktiv IS NULL Order by 1, hvn";
				}
			}
			if (this.strSelect1 != "") 
			{
				// 20.01.14 Ä1005
				// Call SqlCreateSession(hSession,'')
				// If SqlCreateStatement (hSession, hSqlZa)
				// If SqlSetIsolationLevel(hSqlZa,'RO')
				Int.SqlConnection(ref this.hSqlZa);

				this.tblSH.Populate(this.hSqlZa, this.strSelectH, Sys.TBL_FillAll);
				// 20.01.14 Ä1005
				this.hSqlZa.Disconnect();
				// Call SqlFreeSession( hSession )

				// 16.07.03 keinen Halter gefunden
				if (!(this.tblSH.AnyRows(0, 0))) 
				{
					Int.PalLog("HSuche neg.:" + Int.PalStrNum(this.dfSHArztNr.Number, 4, 0) + "/" + this.dfHalterName.Text + "|" + this.dfHalterVN.Text + "|" + this.dfHalterPLZ.Text);
				}
				else
				{
					Int.PalLog("HSuche pos.:" + Int.PalStrNum(this.dfSHArztNr.Number, 4, 0) + "/" + this.dfHalterName.Text + "|" + this.dfHalterVN.Text + "|" + this.dfHalterPLZ.Text);
				}
			}
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// tblSH WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblSH_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_RowHeaderClick:
					this.tblSH_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblSH_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.tblSH_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblSH_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfArztNr.Number = this.tblSH.colnArztNr.Number;
			this.dfHalterNr.Number = this.tblSH.colnHalterNr.Number;
			this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0);
			this.dfHalterNr.PostMessage(Sys.SAM_Validate, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblSH_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 30.07.03
			if (this.tblSH.colnHalterNein.Number == 1) 
			{
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xBFBFFF )
				MT.MTbl.SetRowBackColor(this.tblSH, Sys.lParam, 0xbfbfff, MT.MTbl.MTSC_REDRAW);
			}
			// Else
			// 18.09.02
			// If bPFarbe
			// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xFFBFBF )
			// Set bPFarbe = FALSE
			// Else
			// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xFFEFEF )
			// Set bPFarbe = TRUE
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblSH_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblSH, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// tblHaBu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHaBu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_FetchRowDone:
					this.tblHaBu_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.tblHaBu_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHaBu_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// If tblHaBu.colErfDat != dtErfDatAlt
			// Set bPFarbe = NOT bPFarbe
			// If bPFarbe
			// Call XSalTblSetRowBackColor( tblHaBu, lParam, 0xB4D5FC )
			// Set bPFarbe = FALSE
			// Else
			// Call XSalTblSetRowBackColor( tblHaBu, lParam, 0xD9E9FD )
			// Set bPFarbe = TRUE
			this.tblHaBu.dtErfDatAlt = this.tblHaBu.colErfDat.DateTime;
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHaBu_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblHaBu, 0xb4d5fc);
			#endregion
		}
		
		/// <summary>
		/// pbHBDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHBDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbHBDruck_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbHBDruck_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHBDruck_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 31.07.23 Ä2123
			// LL
			dlgLlDruck.ModalDialog(App.frmMain, "Halterkonto.lst", "");
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHBDruck_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbHBDruck, "Etikett für diesen Halter drucken.");
			return;
			#endregion
		}
		
		/// <summary>
		/// cmbTheme WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbTheme_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cmbTheme_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbTheme_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
            //FC:FINAL: Get themes using PPJ Skins
            Int.SalThemeSet(Int.PalValNum(((SalString)this.cmbTheme.Text).Left(((SalString)this.cmbTheme.Text).Scan("-"))));
            Int.PalSetProfileStringR("Vorgabe", "Theme2010", this.cmbTheme.Text, "TVN");
			#endregion
		}
		
		/// <summary>
		/// cmbDAStyle WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbDAStyle_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cmbDAStyle_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbDAStyle_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			//FC:FINAL: axShell
			//this.axShell.PropGetViewStyle(ref this.nRet);
			if (this.cmbDAStyle.Text == "Kacheln") 
			{
				this.axShell.ViewState = Jam.Shell.ViewState.Thumbnails;
				this.axShell.Thumbnails = true;				
			}
			else if (this.cmbDAStyle.Text == "Symbole") 
			{
				axShell.ViewState = Jam.Shell.ViewState.LargeIcons;
			}
			else if (this.cmbDAStyle.Text == "Liste") 
			{
				this.axShell.ViewState = Jam.Shell.ViewState.List;
            }
			else if (this.cmbDAStyle.Text == "Details") 
			{
				this.axShell.ViewState = Jam.Shell.ViewState.Details;
			}
			else
			{
                //FC:FINAL:#43 - axShell
                //this.axShell.PropSetViewStyle(Int.PalValNum(this.cmbDAStyle.Text));
                this.axShell.ViewState = Jam.Shell.ViewState.Thumbnails;
            }
			#endregion
		}
		
		/// <summary>
		/// obSize96 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obSize96_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.obSize96_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obSize96_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			//FC:FINAL: axShell
			//this.axShell.PropSetThumbnailWidth(96);
			//this.axShell.PropSetThumbnailHeight(96);
			//this.axShell.PropSetThumbnails(true);
			this.axShell.ThumbnailSize = new Size(96, 96);
            this.axShell.ViewState = Jam.Shell.ViewState.Thumbnails;
			#endregion
        }
		
		/// <summary>
		/// obSize128 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obSize128_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.obSize128_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obSize128_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
            //FC:FINAL: axShell
            //this.axShell.PropSetThumbnailWidth(128);
            //this.axShell.PropSetThumbnailHeight(128);
            //this.axShell.PropSetThumbnails(true);
            this.axShell.ThumbnailSize = new Size(128, 128);
            this.axShell.ViewState = Jam.Shell.ViewState.Thumbnails;
			#endregion
        }
		
		/// <summary>
		/// obSize256 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obSize256_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.obSize256_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void obSize256_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
            //FC:FINAL: axShell
            //this.axShell.PropSetThumbnailWidth(256);
            //this.axShell.PropSetThumbnailHeight(256);
            //this.axShell.PropSetThumbnails(true);
            this.axShell.ThumbnailSize = new Size(256, 256);
            this.axShell.ViewState = Jam.Shell.ViewState.Thumbnails;
			#endregion
        }	
				
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void axShell_OnSAM_Create()
		{
			#region Actions
            //FC:FINAL: axShell
            //FC:FINAL: axShell Init
            this.axShell.ShellContextMenu = true;
            this.axShell.AutomaticRefresh = true;
            this.axShell.MultiSelect = true;
            //axShell.ShowColumnHeaders = true;
            this.axShell.ShowOverlayIcons = false;
            this.axShell.ShowFolders = true;
            //this.axShell.ShowParentFolder = true;
            this.axShell.CopyMode = DragDropEffects.Copy;
            //this.axShell.Thumbnails = true;
            //this.axShell.NoFillOnStartup = true;
            this.axShell.ViewState = Jam.Shell.ViewState.Details;
            this.axShell.ShowErrorMessages = true;
			#endregion
        }

		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void axShell_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 13.05.09
			Int.PalSetProfileStringR("Vorgabe", "DateiArchiv.Style", this.cmbDAStyle.Text, "Pegasus");
			#endregion
		}
		
		/// <summary>
		/// pbDAWahl WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAWahl_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDAWahl_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDAWahl_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAWahl_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call PalSetDefDir()
			if (Var.strPfadArchiv == "") 
			{
				Sal.MessageBox("Bitte richten Sie zunächst Ihr Dateiarchiv ein.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				if (this.PalBildWahl()) 
				{
					Sal.WaitCursor(true);
					this.strFile = Int.PalDateToStrJJJJMMTThhmmss(SalDateTime.Current) + ".jpg";
                    //FC:FINAL: axShell
                    //this.axShell.PropGetPath(ref Var.strDummy);
                    Var.strDummy = this.axShell.Path;
                    Sal.FileCopy(this.strDateiPfad, Var.strDummy + Var.strBNZei + "-" + this.strDateiName, true);
					Sal.WaitCursor(false);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAWahl_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbDAWahl, "Datei öffnen");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbDAGeraet WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAGeraet_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDAGeraet_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDAGeraet_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAGeraet_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// If Not SalLoadApp( 'TWAINCom.exe', '-t' )
			// Call SalMessageBox('Scanprogramm wurde nicht gefunden.','Fehler',MB_Ok)
			// 15.07.10
			// Call PalSetDefDir()
			if (Var.strPfadArchiv == "") 
			{
				Sal.MessageBox("Bitte richten Sie zunächst Ihr Dateiarchiv ein.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				//if (this.axTwain.TwainSelectSource(0, ref this.bOk))
				if(this.axTwain.TwainSelectSource(0))
				{
					//this.axTwain.TwainGetDefaultSourceName(ref Var.strDummy);
					Var.strDummy = this.axTwain.TwainGetDefaultSourceName(0);
                    if (Var.strDummy == "") 
					{
						this.bkgdScanner.Text = " ";
					}
					else
					{
						this.bkgdScanner.Text = "Scanner: " + Var.strDummy;
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAGeraet_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbDAGeraet, "Scanner wählen");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbDAScan WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAScan_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// On SAM_Click
				
				// If Not SalLoadApp( 'TWAINCom.exe', '~scan.bmp -o')
				
				// Call SalMessageBox('Scanprogramm wurde nicht gefunden.','Fehler',MB_Ok)
				
				// Else
				
				// If IDYES = SalMessageBox('Wurde der Scanvorgang korrekt beendet?', '', MB_YesNo|MB_IconQuestion)
				
				// Call SalWaitCursor(TRUE)
				
				// Set strFile = PalDateToStrJJJJMMTThhmmss(SalDateCurrent()) || '.jpg'
				
				// Call SalFileCopy( '~scan.bmp', strPfadArchiv || strDB || '\\' || dfKKenn || '\\' || strFile, TRUE )
				
				// Call SalWaitCursor( FALSE )
				
				// 15.07.10
				
				// Call PalSetDefDir()
				
				// If strPfadArchiv = ''
				
				// Call SalMessageBox( 'Bitte richten Sie zunächst Ihr Dateiarchiv ein.', 'Achtung', MB_Ok|MB_IconExclamation)
				
				// Else
				
				// Set strScanTitel = 'Scan'
				
				// If SalStrScan( dfShellOrdner, '\\PR' ) != -1
				
				// If 1 = SalModalDialog(dlgEinStringScan, hWndForm, 'Bitte geben Sie einen Titel für den Scan ein:',
				
				// '', '','','', strScanTitel, 50, 'ScanPR')
				
				// Else
				
				// If 1 = SalModalDialog(dlgEinStringScan, hWndForm, 'Bitte geben Sie einen Titel für den Scan ein:',
				
				// '', '','','', strScanTitel, 50, 'Scan')
				
				// call
				
				// Call SalMessageBox( 'Scan Start', 'Scan', MB_Ok )
				
				// Call axTwain.TwainOpenDefaultSource( bOk )
				
				// Call SalMessageBox( 'Scan nach TwainOpenDefaultSource', 'Scan', MB_Ok )
				
				// Call axTwain.TwainSetAutoFeed( TRUE, bOk )
				
				// Call SalMessageBox( 'Scan nach TwainSetAutoFeed', 'Scan', MB_Ok )
				
				// Call axTwain.TwainSetAutoScan( TRUE, bOk )
				
				// Call SalMessageBox( 'Scan nach TwainSetAutoScan', 'Scan', MB_Ok )
				
				// 17.07.19
				
				// Call axTwain.TwainSetAutoSize( TRUE, bOk )
				
				// Call SalMessageBox( 'Scan nach TwainSetAutoSize', 'Scan', MB_Ok )
				
				// If not bOk
				
				// Call axTwain.TwainSetPaperSize( 1, bOk )
				
				// Call SalMessageBox( 'Scan nach TwainSetPaperSize', 'Scan', MB_Ok )
				
				// 05.07.16
				
				// Call axTwain.TwainSetCurrentResolution( 300, nDummyHaben)
				
				// Call SalMessageBox( 'Scan nach TwainSetCurrentResolution', 'Scan', MB_Ok )
				
				// 29.07.16
				
				// If cbDAFarbe
				
				// Set nTwainColor = GdTwain2_TwainPixelType_TWPT_RGB
				
				// Else
				
				// 15.04.19 lt. E-Mail Daerr
				
				// Set nTwainColor = GdTwain2_TwainPixelType_TWPT_GRAY
				
				// Set nTwainColor = GdTwain2_TwainPixelType_TWPT_BW
				
				// If dfDAScan=1
				
				// Else If dfDAScan=2
				
				// 05.07.16
				
				// Call axTwain.TwainSetCurrentResolution( 200, nDummyHaben)
				
				// 29.07.16
				
				// If cbDAFarbe
				
				// Set nTwainColor = GdTwain2_TwainPixelType_TWPT_RGB
				
				// Else
				
				// Set nTwainColor = GdTwain2_TwainPixelType_TWPT_GRAY
				
				// Else If dfDAScan=3
				
				// 05.07.16
				
				// Call axTwain.TwainSetCurrentResolution( 200, nDummyHaben)
				
				// 29.07.16
				
				// If cbDAFarbe
				
				// Set nTwainColor = GdTwain2_TwainPixelType_TWPT_RGB
				
				// Else
				
				// Set nTwainColor = GdTwain2_TwainPixelType_TWPT_BW
				
				// Else If dfDAScan=4
				
				// 05.07.16
				
				// Call axTwain.TwainSetCurrentResolution( 300, nDummyHaben)
				
				// 29.07.16
				
				// If cbDAFarbe
				
				// Set nTwainColor = GdTwain2_TwainPixelType_TWPT_RGB
				
				// Else
				
				// Set nTwainColor = GdTwain2_TwainPixelType_TWPT_BW
				
				// Else If dfDAScan=5
				
				// 05.07.16
				
				// Call axTwain.TwainSetCurrentResolution( 400, nDummyHaben)
				
				// 29.07.16
				
				// If cbDAFarbe
				
				// Set nTwainColor = GdTwain2_TwainPixelType_TWPT_RGB
				
				// Else
				
				// Set nTwainColor = GdTwain2_TwainPixelType_TWPT_BW
				
				// 01.11.16
				
				// Call axTwain.TwainEnableDuplex( cbDADuplex, nDummyHaben )
				
				// If cbDADuplex
				
				// Call axTwain.TwainEnableDuplex( TRUE, nDummyHaben )
				
				// Call SalMessageBox( 'Scan nach TwainEnableDuplex TRUE', 'Scan', MB_Ok )
				
				// Else
				
				// Call axTwain.TwainEnableDuplex( FALSE, nDummyHaben )
				
				// Call SalMessageBox( 'Scan nach TwainEnableDuplex FALSE', 'Scan', MB_Ok )
				
				// 25.08.16
				
				// Call axTwain.TwainSetAutomaticDiscardBlankPages( TRUE, nDummyHaben )
				
				// Call SalMessageBox( 'Scan nach TwainSetAutomaticDiscardBlankPages', 'Scan', MB_Ok )
				
				// Call axTwain.TwainSetCurrentPixelType ( nTwainColor , nDummyHaben )
				
				// Call SalMessageBox( 'Scan nach TwainSetCurrentPixelType', 'Scan', MB_Ok )
				
				// Call axTwain.TwainSetHideUI ( TRUE )
				
				// Call SalMessageBox( 'Scan nach TwainSetHideUI', 'Scan', MB_Ok )
				
				// Set strFile = strBNZei || '-' || strScanTitel || PalDateToStrJJJJMMTThhmmss(SalDateCurrent()) || '.pdf'
				
				// Call SalGetProfileString('License','Name','Demo',strDummy,'Pegasus')
				
				// Call axTwain.TwainPdfStart(strPfadArchiv || SqlDatabase || '\\' || strUnterOrdner || '\\' || strFile, strScanTitel, 'moveta v' || strProgVer, strBNUser, 'moveta', nRet)
				
				// Call SalMessageBox( 'Scan nach TwainPdfStart', 'Scan', MB_Ok )
				
				// Set nRet = 0
				
				// Call axTwain.TwainAcquireToGdPictureImage( 0, nRet )
				
				// Call SalMessageBox( 'Scan nach TwainAcquireToGdPictureImage: ' || SalNumberToStrX( nRet, 0 ), 'Scan', MB_Ok )
				
				// While nRet != 0
				
				// Call axTwain.TwainAddGdPictureImageToPdf( nRet, bOk )
				
				// Call SalMessageBox( 'Scan nach TwainAddGdPictureImageToPdf', 'Scan', MB_Ok )
				
				// Call axTwain.TwainAcquireToGdPictureImage( 0, nRet )
				
				// Call SalMessageBox( 'Scan nach TwainAcquireToGdPictureImage', 'Scan', MB_Ok )
				
				// Call axTwain.TwainAcquireToFile( strPfadArchiv || SqlDatabase || '\\' || strUnterOrdner || '\\' || strFile, hWndForm, nRet )
				
				// While nRet != 0
				
				// Call axTwain.TwainAddGdPictureImageToPdf( nRet, bOk )
				
				// Call axTwain.TwainAcquireToGdPictureImage( 0, nRet )
				
				// Call axTwain.TwainPdfStop( nRet )
				
				// Call SalMessageBox( 'Scan nach TwainAcquireToGdPictureImage', 'Scan', MB_Ok )
				
				// Call axTwain.TwainCloseSource( bOk )
				
				// Call SalMessageBox( 'Scan nach TwainCloseSource', 'Scan', MB_Ok )
				
				// 05.11.21
				
				// Call axTwain.TwainDisableAutoSourceClose( TRUE )
				
				// Call SalMessageBox( 'Scan nach TwainDisableAutoSourceClose', 'Scan', MB_Ok )
				
				// Set bOK = TRUE
				
				// Call axTwain.TwainDisableSource( bOK )
				
				// Call SalMessageBox( 'Scan nach TwainDisableSource', 'Scan', MB_Ok )
				
				// Call axTwain.CloseImage( nRet, nDummyHaben )
				
				// Call SalMessageBox( 'Scan nach CloseImage', 'Scan', MB_Ok )
				
				// Call axTwain.ReleaseGdPictureImageDC( nRet, nErr )
				
				// Call SalMessageBox( 'Scan nach ReleaseGdPictureImageDC: ' || SalNumberToStrX( nRet, 0 ), 'Scan', MB_Ok )
				
				case Sys.SAM_Click:
					this.pbDAScan_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDAScan_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAScan_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Var.strPfadArchiv == "") 
			{
				Sal.MessageBox("Bitte richten Sie zunächst Ihr Dateiarchiv ein.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				this.strScanTitel = "Scan";
				if (((SalString)this.dfShellOrdner.Text).Scan("\\PR") != -1) 
				{
					if (1 == dlgEinStringScan.ModalDialog(this, "Bitte geben Sie einen Titel für den Scan ein:", "", "", "", "", ref this.strScanTitel, 50, "ScanPR")) 
					{
					}
				}
				else
				{
					if (1 == dlgEinStringScan.ModalDialog(this, "Bitte geben Sie einen Titel für den Scan ein:", "", "", "", "", ref this.strScanTitel, 50, "Scan")) 
					{
					}
				}
				//this.axTwain.TwainIsAvailable(ref Var.bOK);
				Var.bOK = this.axTwain.TwainIsAvailable();
                if (Var.bOK) 
				{
					//this.axTwain.TwainGetDefaultSourceName(ref Var.strDummy);
					Var.strDummy = this.axTwain.TwainGetDefaultSourceName(0);
                    this.strPfadAppData = Vis.DosGetEnvString("APPDATA") + "\\";
					Int.PalLogToFile("DAScan: AppData: " + this.strPfadAppData, 0);
					Var.bOK = Vis.FileDelete("C:\\ProgramData\\Scan.pdf");
					if (Var.bOK) 
					{
						Int.PalLogToFile("DAScan: VisFileDelete ok", 0);
					}
					else
					{
						Int.PalLogToFile("DAScan: VisFileDelete NICHT ok", 0);
					}
					Sal.UseRegistry(false, "TVN");
					// Call SalMessageBox( '.' || strDummy || '.', 'Scannername', MB_Ok )
					Sal.SetProfileString("Settings", "Scanner", Var.strDummy, this.strPfadAppData + "CLScan.ini");
					Int.PalLogToFile("DAScan: Set " + this.strPfadAppData + "CLScan.ini: Settings/Scanner: " + Var.strDummy, 0);
					Sal.SetProfileString("Settings", "Filename", "C:\\ProgramData\\Scan.pdf", this.strPfadAppData + "CLScan.ini");
					if (this.cbDAFarbe.Checked) 
					{
						Sal.SetProfileString("Settings", "ColorType", "RGB", this.strPfadAppData + "CLScan.ini");
						Int.PalLogToFile("DAScan: Set " + this.strPfadAppData + "CLScan.ini: Settings/ColorType: RGB", 0);
					}
					else
					{
						Sal.SetProfileString("Settings", "ColorType", "GRAY", this.strPfadAppData + "CLScan.ini");
						Int.PalLogToFile("DAScan: Set " + this.strPfadAppData + "CLScan.ini: Settings/ColorType: GRAY", 0);
					}
					if (this.cbDADuplex.Checked) 
					{
						Sal.SetProfileString("Settings", "DuplexEnabled", "Y", this.strPfadAppData + "CLScan.ini");
						Int.PalLogToFile("DAScan: Set " + this.strPfadAppData + "CLScan.ini: Settings/DuplexEnabled: Y", 0);
					}
					else
					{
						Sal.SetProfileString("Settings", "DuplexEnabled", "N", this.strPfadAppData + "CLScan.ini");
						Int.PalLogToFile("DAScan: Set " + this.strPfadAppData + "CLScan.ini: Settings/DuplexEnabled: N", 0);
					}
					Sal.UseRegistry(true, "TVN");
					// If Not SalLoadApp( 'CLScan.exe', '/ReadFromIni "C:\\ProgramData\\CLScan.ini"')
					// Call SalMessageBox('Scanprogramm CLScan.exe wurde nicht gefunden.','Fehler',MB_Ok)
					// If Not SalLoadAppAndWait('CLScan.exe /SetScanner "' || strDummy || '" /SetFileName "C:\\ProgramData\\Scan.pdf" /SetTransferType',Window_Minimized, nRet)
					// Call SalMessageBox( 'vor LoadAppAndWait', 'Scan', MB_Ok )
					if (!(Sal.LoadAppAndWait("CLScan.exe /ReadFromIni \"" + this.strPfadAppData + "CLScan.ini\"", Sys.Window_NotVisible, ref this.nRet))) 
					{
						Int.PalLogToFile("DAScan NICHT Ok: CLScan.exe /ReadFromIni \"" + this.strPfadAppData + "CLScan.ini\"", 0);
						Sal.MessageBox("Scanprogramm CLScan.exe wurde nicht gefunden.", "Fehler", Sys.MB_Ok);
					}
					else
					{
						// If IDYES = SalMessageBox('Wurde der Scanvorgang korrekt beendet?', '', MB_YesNo|MB_IconQuestion)
						Int.PalLogToFile("DAScan Ok: CLScan.exe /ReadFromIni \"" + this.strPfadAppData + "CLScan.ini\"", 0);
						Sal.WaitCursor(true);
						this.strFile = Var.strBNZei + "-" + this.strScanTitel + Int.PalDateToStrJJJJMMTThhmmss(SalDateTime.Current) + ".pdf";
						// Call SalMessageBox( 'vor FileCopy C:\\ProgramData\\Scan.pdf', 'Scan', MB_Ok )
						if (!(Var.hFileExist.Open("C:\\ProgramData\\Scan.pdf", Sys.OF_Exist))) 
						{
							if (Sys.IDYES == Sal.MessageBox(@"Die gescannte Datei C:\ProgramData\Scan.pdf ist nicht vorhanden.
Möchten Sie es noch einmal versuchen?", "Datei nicht vorhanden", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
							{
								if (!(Var.hFileExist.Open("C:\\ProgramData\\Scan.pdf", Sys.OF_Exist))) 
								{
									Int.PalLogToFile("DAScan vor FileCopy: Zieldatei nicht vorhanden", 0);
								}
							}
						}
						else
						{
							Var.hFileExist.Close();
						}
						this.nErr = Sal.FileCopy("C:\\ProgramData\\Scan.pdf", Var.strPfadArchiv + Sql.Database + "\\" + this.strUnterOrdner + "\\" + this.strFile, true);
						Int.PalLogToFile("DAScan FileCopy: " + this.nErr.ToString(0), 0);
						if (this.nErr == Sys.FILE_CopyOK) 
						{
						}
						else
						{
							Var.strDummy = "";
							if (this.nErr == Sys.FILE_CopyDest) 
							{
								Var.strDummy = "Die Zieldatei kann nicht geöffnet werden.";
							}
							else if (this.nErr == Sys.FILE_CopyExist) 
							{
								Var.strDummy = "Die Zieldatei existiert bereits.";
							}
							else if (this.nErr == Sys.FILE_CopyRead) 
							{
								Var.strDummy = "Die Quelldatei kann nicht gelesen werden.";
							}
							else if (this.nErr == Sys.FILE_CopySrc) 
							{
								Var.strDummy = "Die Quelldatei kann nicht geöffnet werden.";
							}
							else if (this.nErr == Sys.FILE_CopyWrite) 
							{
								Var.strDummy = "Die Zieldatei kann nicht geschrieben werden.";
							}
							if (Var.strDummy != "") 
							{
								Var.strDummy = @"
Grund: " + Var.strDummy;
							}
							Sal.MessageBox("Datei konnte nicht im Dateiarchiv gespeichert werden !" + Var.strDummy, "Fehler bei " + Var.strPfadArchiv + Sql.Database + "\\" + this.strUnterOrdner + "\\" + this.strFile, (Sys.MB_Ok | Sys.MB_IconStop));
						}
						Sal.WaitCursor(false);
					}
					// Call PalSetProfileStringR('DefaultScanner','Name', cmbScanner, 'TVN')
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAScan_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbDAScan, "Bild von Twain-kompatiblem Gerät einscannen");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbDALizenz WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDALizenz_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDALizenz_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDALizenz_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDALizenz_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(Sal.LoadAppAndWait("CLScan.exe /license", Sys.Window_NotVisible, ref this.nRet))) 
			{
				Sal.MessageBox("Scanprogramm CLScan.exe wurde nicht gefunden.", "Fehler", Sys.MB_Ok);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDALizenz_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbDALizenz, "Bild von Twain-kompatiblem Gerät einscannen");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbADA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbADA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// On SAM_Click
				
				// Set lsNoviParameter =  'DOC - ListDocuments;Dokumentenliste;Dokument1;'
				
				// Set lsNoviParameter = lsNoviParameter || '1~SCHLAGWORTE2~' || SalNumberToStrX(dfArztNr,0) || '|'
				
				// If nArztNr2 != dfArztNr And nArztNr2 != 0
				
				// Set lsNoviParameter = lsNoviParameter || '2~SCHLAGWORTE2~' || SalNumberToStrX(nArztNr2,0) || '|'
				
				// Set lsNoviParameter = SalStrLeftX(lsNoviParameter, SalStrLength(lsNoviParameter)-1)
				
				// Call SalLoadApp( strNoviplan, 'SCRIPT "MISC - StartActivity" "' || lsNoviParameter || '"')
				
				// Call SalLoadApp( strNoviplan, 'STD')
				
				case Sys.SAM_Click:
					this.pbADA_OnSAM_Click(sender, e);
					break;
				
				// On SAM_Create
				
				// Return XSalTooltipSetTextActive(
				
				// 	hWndItem,
				
				// 	"Noviplan-Dokumente dieses Mitgliedes anzeigen" )
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbADA_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Var.strPfadArchiv == "") 
			{
				this.axShell.Enabled = false;
			}
			else
			{
				Sal.WaitCursor(true);
				this.axShell.Enabled = true;
				// 20.04.09 OTÄ153
				this.strUnterOrdner = "A" + Int.PalStrNullen(this.dfArztNr.Number.ToString(0), 4);
				Int.PalExplorer(this.strUnterOrdner, false);
				//FC:FINAL: axShell
				axShell.Path = Var.strPfadArchiv + Sql.Database + "\\" + this.strUnterOrdner;
				if (axShell.IsEmpty())
				{
					Sal.MessageBox("Der Ordner " + Var.strPfadArchiv + Sql.Database + "\\" + this.strUnterOrdner + " kann nicht angezeigt werden.", "Fehler im Archiv", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
				this.picTabs.BringToTop(5, true);
				Sal.WaitCursor(false);
			}
			#endregion
		}
		
		/// <summary>
		/// pbANP WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbANP_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbANP_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbANP_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbANP_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Set lsNoviParameter =  'DOC - ListDocuments;Dokumentenliste;Dokument1;'
			this.lsNoviParameter = "\"Filter:";
			this.lsNoviParameter = this.lsNoviParameter + "1~SCHLAGWORTE2~" + this.dfArztNr.Number.ToString(0) + "|";
			if (this.nArztNr2 != this.dfArztNr.Number && this.nArztNr2 != 0) 
			{
				this.lsNoviParameter = this.lsNoviParameter + "2~SCHLAGWORTE2~" + this.nArztNr2.ToString(0) + "|";
			}
			this.lsNoviParameter = this.lsNoviParameter.Left(this.lsNoviParameter.Length - 1) + "\"  \"DeleteNpStartFile:1\"";
			// 26.05.21 Mail Grein
			// Call SalLoadApp( strNoviplan, 'SCRIPT "MISC - StartActivity" "' || lsNoviParameter || '"')
			Sal.LoadApp(App.frmMain.strNoviplan, "\"Option:npstart\" \"Command:ExecuteScript\" \"ScriptIdent:StartActivityArgs\" \"ActivityIdent:DOC - ListDocuments\" \"CtlKey:Dokumentenliste\" \"NodeKey:Dokument1\" " + this.lsNoviParameter + "\"");
			// Call SalLoadApp( strNoviplan, 'STD')
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbANP_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbANP, @"Noviplan-Dokumente dieses Mitgliedes anzeigen
(" + App.frmMain.strNoviplan + ")");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbHDA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHDA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// On SAM_Click
				
				// Call SqlHandleExec(hSqlSH,'SELECT prnr INTO :frmRgSuchen.nNoviArzt FROM pr WHERE prhalternr=:frmRgSuchen.dfHalterNr
				
				// and  ' || PalArztNr('pr', nArztNr, nArztNr2), 'Lesen Noviplan-PRs',nCount)
				
				// Set lsNoviParameter =  'DOC - ListDocuments;Dokumentenliste;Dokument1;'
				
				// Set nCount = 1
				
				// Call SqlFetchNext(hSqlSH,nFetch)
				
				// While nFetch != FETCH_EOF
				
				// Set lsNoviParameter = lsNoviParameter || SalNumberToStrX(nCount,0) || '~SCHLAGWORTE5~' || SalNumberToStrX(nNoviArzt,0) || '|'
				
				// Set nCount = nCount + 1
				
				// Call SqlFetchNext(hSqlSH,nFetch)
				
				// Call SqlCommit(hSqlSH)
				
				// Set lsNoviParameter = lsNoviParameter || SalNumberToStrX(nCount,0) || '~SCHLAGWORTE2~' || SalNumberToStrX(dfArztNr,0) || '|' || SalNumberToStrX(nCount,0) || '~SCHLAGWORTE3~' || SalNumberToStrX(dfHalterNr,0) || '|'
				
				// Set nCount = nCount + 1
				
				// If nArztNr2 > 0 And nArztNr2 != dfArztNr
				
				// Set lsNoviParameter = lsNoviParameter || SalNumberToStrX(nCount,0) || '~SCHLAGWORTE2~' || SalNumberToStrX(nArztNr2,0) || '|' || SalNumberToStrX(nCount,0) || '~SCHLAGWORTE3~' || SalNumberToStrX(dfHalterNr,0) || '|'
				
				// Set nCount = nCount + 1
				
				// Set lsNoviParameter = SalStrLeftX(lsNoviParameter, SalStrLength(lsNoviParameter)-1)
				
				// Call SalLoadApp( strNoviplan, 'SCRIPT "MISC - StartActivity" "' || lsNoviParameter || '"')
				
				// Call SalLoadApp( strNoviplan, 'STD')
				
				case Sys.SAM_Click:
					this.pbHDA_OnSAM_Click(sender, e);
					break;
				
				// On SAM_Create
				
				// Return XSalTooltipSetTextActive(
				
				// 	hWndItem,
				
				// 	"Noviplan-Dokumente dieses Halters anzeigen" )
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHDA_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfHalterNr.Number == 0 || this.dfHalterNr.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Bitte erst einen Halter aufrufen!", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			// Else
			// Set lsNoviParameter =  'DOC - ListDocuments;Dokumentenliste;Dokument1;'
			// Set lsNoviParameter = lsNoviParameter || '1~SCHLAGWORTE2~' || SalNumberToStrX(dfArztNr,0) || '|1~SCHLAGWORTE4~' || SalNumberToStrX(dfSRgNr,0) || '|'
			// Set lsNoviParameter = SalStrLeftX(lsNoviParameter, SalStrLength(lsNoviParameter)-1)
			// Call SalLoadApp( strNoviplan, 'SCRIPT "MISC - StartActivity" "' || lsNoviParameter || '"')
			// Call SalLoadApp( strNoviplan, 'STD')
			else
			{
				if (Var.strPfadArchiv == "") 
				{
					this.axShell.Enabled = false;
				}
				else
				{
					Sal.WaitCursor(true);
					this.axShell.Enabled = true;
					// 20.04.09 OTÄ153
					this.strUnterOrdner = "A" + Int.PalStrNullen(Int.PalCheckLarztnr(this.dfArztNr.Number).ToString(0), 4) + "\\H" + Int.PalStrNullen(this.dfHalterNr.Number.ToString(0), 5);
					Int.PalExplorer(this.strUnterOrdner, false);
					//FC:FINAL: axShell
					axShell.Path = Var.strPfadArchiv + Sql.Database + "\\" + this.strUnterOrdner;
					if (this.axShell.IsEmpty())
					{
						Sal.MessageBox("Der Ordner " + Var.strPfadArchiv + Sql.Database + "\\" + this.strUnterOrdner + " kann nicht angezeigt werden.", "Fehler im Archiv", (Sys.MB_Ok | Sys.MB_IconExclamation));
					}
					this.picTabs.BringToTop(5, true);
					Sal.WaitCursor(false);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbHDPR WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHDPR_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// On SAM_Click
				
				// Call SqlHandleExec(hSqlSH,'SELECT prnr INTO :frmRgSuchen.nNoviArzt FROM pr WHERE prhalternr=:frmRgSuchen.dfHalterNr
				
				// and  ' || PalArztNr('pr', nArztNr, nArztNr2), 'Lesen Noviplan-PRs',nCount)
				
				// Set lsNoviParameter =  'DOC - ListDocuments;Dokumentenliste;Dokument1;'
				
				// Set nCount = 1
				
				// Call SqlFetchNext(hSqlSH,nFetch)
				
				// While nFetch != FETCH_EOF
				
				// Set lsNoviParameter = lsNoviParameter || SalNumberToStrX(nCount,0) || '~SCHLAGWORTE5~' || SalNumberToStrX(nNoviArzt,0) || '|'
				
				// Set nCount = nCount + 1
				
				// Call SqlFetchNext(hSqlSH,nFetch)
				
				// Call SqlCommit(hSqlSH)
				
				// Set lsNoviParameter = lsNoviParameter || SalNumberToStrX(nCount,0) || '~SCHLAGWORTE2~' || SalNumberToStrX(dfArztNr,0) || '|' || SalNumberToStrX(nCount,0) || '~SCHLAGWORTE3~' || SalNumberToStrX(dfHalterNr,0) || '|'
				
				// Set nCount = nCount + 1
				
				// If nArztNr2 > 0 And nArztNr2 != dfArztNr
				
				// Set lsNoviParameter = lsNoviParameter || SalNumberToStrX(nCount,0) || '~SCHLAGWORTE2~' || SalNumberToStrX(nArztNr2,0) || '|' || SalNumberToStrX(nCount,0) || '~SCHLAGWORTE3~' || SalNumberToStrX(dfHalterNr,0) || '|'
				
				// Set nCount = nCount + 1
				
				// Set lsNoviParameter = SalStrLeftX(lsNoviParameter, SalStrLength(lsNoviParameter)-1)
				
				// Call SalLoadApp( strNoviplan, 'SCRIPT "MISC - StartActivity" "' || lsNoviParameter || '"')
				
				// Call SalLoadApp( strNoviplan, 'STD')
				
				case Sys.SAM_Click:
					this.pbHDPR_OnSAM_Click(sender, e);
					break;
				
				// On SAM_Create
				
				// Return XSalTooltipSetTextActive(
				
				// 	hWndItem,
				
				// 	"Noviplan-Dokumente dieses Halters anzeigen" )
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHDPR_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfHalterNr.Number == 0 || this.dfHalterNr.Number == Sys.NUMBER_Null || this.dfProzNr.Number == Sys.NUMBER_Null || this.dfProzNr.Number == 0) 
			{
				Sal.MessageBox("Bitte erst eine PR-Nr. eingeben!", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			// Else
			// Set lsNoviParameter =  'DOC - ListDocuments;Dokumentenliste;Dokument1;'
			// Set lsNoviParameter = lsNoviParameter || '1~SCHLAGWORTE2~' || SalNumberToStrX(dfArztNr,0) || '|1~SCHLAGWORTE4~' || SalNumberToStrX(dfSRgNr,0) || '|'
			// Set lsNoviParameter = SalStrLeftX(lsNoviParameter, SalStrLength(lsNoviParameter)-1)
			// Call SalLoadApp( strNoviplan, 'SCRIPT "MISC - StartActivity" "' || lsNoviParameter || '"')
			// Call SalLoadApp( strNoviplan, 'STD')
			else
			{
				if (Var.strPfadArchiv == "") 
				{
					this.axShell.Enabled = false;
				}
				else
				{
					this.PalZeigeArchiv(this.dfArztNr.Number, this.dfHalterNr.Number, this.dfProzNr.Number);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbHNP WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHNP_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbHNP_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbHNP_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHNP_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 20.01.14 Ä1005
			// Call SqlCreateSession(hSession,'')
			// If SqlCreateStatement (hSession, hSqlZa)
			// If SqlSetIsolationLevel(hSqlZa,'RO')
			// Call SqlConnection( hSqlZa )

			// Call SqlHandleExec(hSqlZa,'SELECT prnr INTO :frmRgSuchen.nNoviArzt FROM pr WHERE prhalternr=:frmRgSuchen.dfHalterNr
			// and  ' || PalArztNr('pr', nArztNr, nArztNr2), 'Lesen Noviplan-PRs',nCount)
			// Set lsNoviParameter =  'DOC - ListDocuments;Dokumentenliste;Dokument1;'
			Var.nCount = 1;
			// 26.05.21 Mail Grein
			// Set lsNoviParameter =  'DOC - ListDocuments;Dokumentenliste;Dokument1;'
			this.lsNoviParameter = "\"Filter:";
			this.lsNoviParameter = this.lsNoviParameter + Var.nCount.ToString(0) + "~SCHLAGWORTE2~" + this.dfArztNr.Number.ToString(0) + "|" + Var.nCount.ToString(0) + "~SCHLAGWORTE3~" + this.dfHalterNr.Number.ToString(0) + "|";
			Var.nCount = Var.nCount + 1;
			if (this.nArztNr2 > 0 && this.nArztNr2 != this.dfArztNr.Number) 
			{
				this.lsNoviParameter = this.lsNoviParameter + Var.nCount.ToString(0) + "~SCHLAGWORTE2~" + this.nArztNr2.ToString(0) + "|" + Var.nCount.ToString(0) + "~SCHLAGWORTE3~" + this.dfHalterNr.Number.ToString(0) + "|";
				Var.nCount = Var.nCount + 1;
			}
			// 20.01.14 Ä1005
			// Call SqlDisconnect( hSqlZa )
			// Call SqlFreeSession( hSession )

			// Set lsNoviParameter = SalStrLeftX(lsNoviParameter, SalStrLength(lsNoviParameter)-1)
			// Call SalMessageBox( '-SCRIPT "MISC - StartActivity" "' || lsNoviParameter || '"-', strNoviplan, MB_Ok )
			// 26.05.21 Mail Grein
			// Call SalLoadApp( strNoviplan, 'SCRIPT "MISC - StartActivity" "' || lsNoviParameter || '"')
			this.lsNoviParameter = this.lsNoviParameter.Left(this.lsNoviParameter.Length - 1) + "\"  \"DeleteNpStartFile:1\"";
			Sal.LoadApp(App.frmMain.strNoviplan, "\"Option:npstart\" \"Command:ExecuteScript\" \"ScriptIdent:StartActivityArgs\" \"ActivityIdent:DOC - ListDocuments\" \"CtlKey:Dokumentenliste\" \"NodeKey:Dokument1\" " + this.lsNoviParameter + "\"");
			// Call SalLoadApp( strNoviplan, 'STD')
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHNP_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbHNP, @"Noviplan-Dokumente dieses Halters anzeigen
(" + App.frmMain.strNoviplan + ")");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbRDA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRDA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRDA_OnSAM_Click(sender, e);
					break;
				
				// On SAM_Create
				
				// Return XSalTooltipSetTextActive(
				
				// 	hWndItem,
				
				// 	"Noviplan-Dokumente dieser Rechnung anzeigen" )
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRDA_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfSRgNr.Number == 0 || this.dfSRgNr.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Bitte erst eine Rechnung aufrufen!", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			// Else
			// Set lsNoviParameter =  'DOC - ListDocuments;Dokumentenliste;Dokument1;'
			// Set lsNoviParameter = lsNoviParameter || '1~SCHLAGWORTE2~' || SalNumberToStrX(dfArztNr,0) || '|1~SCHLAGWORTE4~' || SalNumberToStrX(dfSRgNr,0) || '|'
			// Set lsNoviParameter = SalStrLeftX(lsNoviParameter, SalStrLength(lsNoviParameter)-1)
			// Call SalLoadApp( strNoviplan, 'SCRIPT "MISC - StartActivity" "' || lsNoviParameter || '"')
			// Call SalLoadApp( strNoviplan, 'STD')
			else
			{
				if (Var.strPfadArchiv == "") 
				{
					this.axShell.Enabled = false;
				}
				else
				{
					Sal.WaitCursor(true);
					this.axShell.Enabled = true;
					// 20.04.09 OTÄ153
					this.strUnterOrdner = "A" + Int.PalStrNullen(this.dfArztNr.Number.ToString(0), 4) + "\\H" + Int.PalStrNullen(this.dfHalterNr.Number.ToString(0), 5) + "\\R" + Int.PalStrNullen(this.dfSRgNr.Number.ToString(0), 6);
					Int.PalExplorer(this.strUnterOrdner, false);
					//FC:FINAL: axShell
					axShell.Path = Var.strPfadArchiv + Sql.Database + "\\" + this.strUnterOrdner;
					if (axShell.IsEmpty())
					{
						Sal.MessageBox("Der Ordner " + Var.strPfadArchiv + Sql.Database + "\\" + this.strUnterOrdner + " kann nicht angezeigt werden.", "Fehler im Archiv", (Sys.MB_Ok | Sys.MB_IconExclamation));
					}
					this.picTabs.BringToTop(5, true);
					Sal.WaitCursor(false);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbRNP WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRNP_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRNP_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbRNP_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRNP_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfSRgNr.Number == 0 || this.dfSRgNr.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Bitte erst eine Rechnung aufrufen!", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				// 26.05.21 Mail Grein
				// Set lsNoviParameter =  'DOC - ListDocuments;Dokumentenliste;Dokument1;'
				this.lsNoviParameter = "\"Filter:";
				this.lsNoviParameter = this.lsNoviParameter + "1~SCHLAGWORTE2~" + this.dfArztNr.Number.ToString(0) + "1~SCHLAGWORTE3~" + this.dfHalterNr.Number.ToString(0) + "|1~SCHLAGWORTE4~" + this.dfSRgNr.Number.ToString(0) + "|";
				// 26.05.21 Mail Grein
				// Set lsNoviParameter = SalStrLeftX(lsNoviParameter, SalStrLength(lsNoviParameter)-1)
				this.lsNoviParameter = this.lsNoviParameter.Left(this.lsNoviParameter.Length - 1) + "\"  \"DeleteNpStartFile:1\"";
				// Call SalLoadApp( strNoviplan, 'SCRIPT "MISC - StartActivity" "' || lsNoviParameter || '"')
				Sal.LoadApp(App.frmMain.strNoviplan, "\"Option:npstart\" \"Command:ExecuteScript\" \"ScriptIdent:StartActivityArgs\" \"ActivityIdent:DOC - ListDocuments\" \"CtlKey:Dokumentenliste\" \"NodeKey:Dokument1\" " + this.lsNoviParameter + "\"");
				// Call SalLoadApp( strNoviplan, 'STD')
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRNP_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbRNP, @"Noviplan-Dokumente dieser Rechnung anzeigen
(" + App.frmMain.strNoviplan + ")");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbMahnAendern WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMahnAendern_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbMahnAendern_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMahnAendern_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 17.08.10 OTÄ457 rkteilzdat -> rkmahnsperrbis
			// 17.01.18 Ä1684 rkmahnsperr raus
			Int.SqlImmedX(@"UPDATE RK SET rkmahnstufe = :frmRgSuchen.dfMMS,
rkmahnsperrbis = :frmRgSuchen.dfSDatMahn
WHERE rkarztnr  = :frmRgSuchen.dfArztNr AND rkrechnr  = :frmRgSuchen.dfSRgNr");
			Int.PalLog("Mahndaten geändert: Rg." + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfSRgNr.Number, 6, 0) + "|MSbis" + Int.PalDateToStrJJJJMMTT(this.dfSDatMahn.DateTime) + "|MS" + this.dfMMS.Number.ToString(0));
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// mlSperrinfo WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void mlSperrinfo_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.mlSperrinfo_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void mlSperrinfo_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 13.01.14 Ä1002
			Int.SqlImmed("UPDATE a SET asperrinfo = :frmRgSuchen.mlSperrinfo WHERE aarztnr = :frmRgSuchen.dfArztNr");
			Int.PalLog("Sperrinfo gesetzt für " + Int.PalStrNum(this.nArztNr, 4, 0) + ": " + this.mlSperrinfo.Text);
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// pbEWAKontrolle WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEWAKontrolle_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEWAKontrolle_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEWAKontrolle_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmed("UPDATE ee SET eeerldatum = SYSDATETIME WHERE eearztnr = :frmRgSuchen.dfArztNr AND eehalternr = :frmRgSuchen.dfHalterNr AND eeerldatum IS NULL");
			this.pbEWAKontrolle.HideWindow();
			#endregion
		}
		
		/// <summary>
		/// gridWv WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gridWv_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.gridWv_OnSAM_Create(sender, e);
					break;
				
				case Const.WM_MOUSEMOVE:
					this.gridWv_OnWM_MOUSEMOVE(sender, e);
					break;
				
				case Const.WM_MOUSELEAVE:
					this.gridWv_OnWM_MOUSELEAVE(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.gridWv_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_RowSetContext:
					this.gridWv_OnSAM_RowSetContext(sender, e);
					break;
				
				case Sys.SAM_FetchDone:
					this.gridWv_OnSAM_FetchDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gridWv_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call MTblSubClass( hWndItem )
			// Call MTblSetAltRowBackColors( hWndItem, FALSE, COLOR_White, 0x58EDFF )
			Int.PalPrepareMTbl(this.gridWv, 0x58edff);
			#endregion
		}
		
		/// <summary>
		/// WM_MOUSEMOVE event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gridWv_OnWM_MOUSEMOVE(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.gridWv.GetSize(ref Var.nDummyHaben, ref Var.nDummySoll);
			if (Var.nDummySoll < 1) 
			{
				// Call SalShowWindow( gridWv )
				// Call SalMessageBeep( 0 )
				this.gridWv.SetSize(3.1m, 5);
				this.gridWv.SetFocus();
				// Call SalBringWindowToTop( gridWv )
				Ext._TrackMouseEvent(16, Const.TME_LEAVE, this.gridWv, 10);
			}
			#endregion
		}
		
		/// <summary>
		/// WM_MOUSELEAVE event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gridWv_OnWM_MOUSELEAVE(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalHideWindow( gridWv )
			// Call SalMessageBeep( 0 )
			// Call SalGetWindowSize( hWndItem, nDummyHaben, nDummySoll )
			this.gridWv.SetSize(3.1m, 0.7m);
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gridWv_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.dtLogDauerStart = SalDateTime.Current;
			this.dfProzNr.Number = this.gridWv.colPR.Number;
			this.dfProzNr.PostMessage(Sys.SAM_Validate, 0, 0);
			// Call PalLogDauer( 'Info: Wiedervorlagenliste', SalDateCurrent(  ) - dtLogDauerStart )
			#endregion
		}
		
		/// <summary>
		/// SAM_RowSetContext event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gridWv_OnSAM_RowSetContext(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfProzNr.Number = this.gridWv.colPR.Number;
			this.dfProzNr.PostMessage(Sys.SAM_Validate, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void gridWv_OnSAM_FetchDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlWv.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// pbDruckWv WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruckWv_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDruckWv_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruckWv_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PrintParams.Init();
			this.PrintParams.DocName = "Wiedervorlagen";
			this.PrintParams.Orientation = MT.MTbl.MTP_OR_PORTRAIT;
			this.PrintParams.PrinterName = MT.MTbl.MTblPrintGetDefPrinterName();
			this.PrintParams.Language = MT.MTbl.MTP_LNG_GERMAN;

			MT.MTbl.Print(this.gridWv, this.PrintParams);
			#endregion
		}
		
		/// <summary>
		/// pbRefreshWv WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRefreshWv_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRefreshWv_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbRefreshWv_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRefreshWv_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.gridWv.ResetTable();
			this.PalHoleWv();
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRefreshWv_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbRefreshWv, "Liste aktualisieren");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbRefreshInfozeile WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRefreshInfozeile_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRefreshInfozeile_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRefreshInfozeile_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalCountZettel();
			#endregion
		}
		
		/// <summary>
		/// pbSL WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSL_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSL_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSL_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Var.bfrmSupportLog) 
			{
				while (!(App.frmSupportLog.DestroyWindow())) 
				{
				}
			}
			frmSupportLog.CreateWindow(this, SalDateTime.Current, this.dfArztNr.Number, "", 1);
			#endregion
		}
		
		/// <summary>
		/// pbDAParentFolder WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAParentFolder_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDAParentFolder_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDAParentFolder_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAParentFolder_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Var.strPfadArchiv == "") 
			{
				Sal.MessageBox("Bitte richten Sie zunächst Ihr Dateiarchiv ein.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				//FC:FINAL: axShell
				this.axShell.GoUp();
                // PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
                this.dfShellOrdner.Text = this.axShell.Path;
				axShell.Path = Var.strPfadArchiv + Sql.Database + "\\" + this.strUnterOrdner;
				if(!axShell.IsEmpty())
				{
                    this.dfShellOrdner.Text = this.axShell.Path;
                }                
            }
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAParentFolder_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
            //FC:FINAL: Tooltip
			e.Return = new SalToolTipManager().SetTipText(this.pbDAParentFolder, "übergeordneten Ordner öffnen");
            return;
			#endregion
		}
		
		/// <summary>
		/// pbDAFolderNew WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAFolderNew_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDAFolderNew_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDAFolderNew_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAFolderNew_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 15.07.10
			if (Var.strPfadArchiv == "") 
			{
				Sal.MessageBox("Bitte richten Sie zunächst Ihr Dateiarchiv ein.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				Var.strDummy = "";
				if (1 == dlgEinStr2.ModalDialog(this, "Bitte geben Sie den Namen", "des neuen Ordners an:", ref Var.strDummy, 255)) 
				{
					//FC:FINAL: axShell
					try
					{
                        this.axShell.CreateDir(Var.strDummy, false);
                        this.axShell.SmartRefresh();
                    }
					catch
					{
                        Sal.MessageBox("Der Ordner konnte nicht angelegt werden. ", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
                    }                    
                }
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDAFolderNew_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
            //FC:FINAL: Tooltip
			e.Return = new SalToolTipManager().SetTipText(this.pbDAFolderNew, "neuen Ordner erstellen");
            return;
			#endregion
		}
		
		/// <summary>
		/// cmbVECode WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbVECode_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.cmbVECode_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbVECode_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedX(@"UPDATE RK SET rkvecode = :frmRgSuchen.cmbVECode
WHERE rkarztnr  = :frmRgSuchen.dfArztNr AND rkrechnr  = :frmRgSuchen.dfSRgNr");
			#endregion
		}
		
		/// <summary>
		/// dfVeVSNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfVeVSNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfVeVSNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfVeVSNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedX(@"UPDATE RK SET rkvevsnr = :frmRgSuchen.dfVeVSNr
WHERE rkarztnr  = :frmRgSuchen.dfArztNr AND rkrechnr  = :frmRgSuchen.dfSRgNr");
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.IDYES == Sal.MessageBox("Wollen Sie das moveta-Programm schließen ?", "Frage", (Sys.MB_YesNo | Sys.MB_IconQuestion)))  // 15.12.10
			{
				// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
				this.DestroyWindow();
			}
			#endregion
		}
#endregion
		
		#region tblHZahlungen
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblHZahlungenTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmRgSuchen _frmRgSuchen = null;
			
			
			#region Window Variables
			public SalBoolean bPFarbe = false;
			#endregion
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblHZahlungenTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmRgSuchen frmRgSuchen
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmRgSuchen == null) 
					{
						_frmRgSuchen = (frmRgSuchen)this.FindForm();
					}
					return _frmRgSuchen;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblHZahlungenTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblHZahlungenTableWindow)SalWindow.FromHandle(handle, typeof(tblHZahlungenTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblHTagebuch
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblHTagebuchTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmRgSuchen _frmRgSuchen = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblHTagebuchTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmRgSuchen frmRgSuchen
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmRgSuchen == null) 
					{
						_frmRgSuchen = (frmRgSuchen)this.FindForm();
					}
					return _frmRgSuchen;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblHTagebuchTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblHTagebuchTableWindow)SalWindow.FromHandle(handle, typeof(tblHTagebuchTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblHZettel
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblHZettelTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmRgSuchen _frmRgSuchen = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblHZettelTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmRgSuchen frmRgSuchen
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmRgSuchen == null) 
					{
						_frmRgSuchen = (frmRgSuchen)this.FindForm();
					}
					return _frmRgSuchen;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblHZettelTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblHZettelTableWindow)SalWindow.FromHandle(handle, typeof(tblHZettelTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblHMahnungen
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblHMahnungenTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmRgSuchen _frmRgSuchen = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblHMahnungenTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmRgSuchen frmRgSuchen
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmRgSuchen == null) 
					{
						_frmRgSuchen = (frmRgSuchen)this.FindForm();
					}
					return _frmRgSuchen;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblHMahnungenTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblHMahnungenTableWindow)SalWindow.FromHandle(handle, typeof(tblHMahnungenTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblHSuche
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblHSucheTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmRgSuchen _frmRgSuchen = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblHSucheTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmRgSuchen frmRgSuchen
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmRgSuchen == null) 
					{
						_frmRgSuchen = (frmRgSuchen)this.FindForm();
					}
					return _frmRgSuchen;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblHSucheTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblHSucheTableWindow)SalWindow.FromHandle(handle, typeof(tblHSucheTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colnHalterNein WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnHalterNein_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Click:
						this.colnHalterNein_OnSAM_Click(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Click event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnHalterNein_OnSAM_Click(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (this.colnHalterNein.Number == 1) 
				{
					Sal.MessageBox("Sperre kann nur im Halterstamm aufgehoben werden.", "Achtung", Sys.MB_Ok);
				}
				else
				{
					this.frmRgSuchen.strKuerzel = App.frmMain.strUser.Left(2);
					this.frmRgSuchen.strGrund = "";
					while (this.frmRgSuchen.strGrund == "") 
					{

						// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
						SalString temp1 = this.frmRgSuchen.strGrund;
						dlgText.ModalDialog(this, "Warum darf der Halter nicht mehr verwendet werden? :", "frmHalter", 100, ref temp1);
						this.frmRgSuchen.strGrund = temp1;

					}
					this.frmRgSuchen.lsGrund = "***** Halter gesperrt wg.: " + this.frmRgSuchen.strGrund;
					// 13.05.14 F2027
					this.colnHalterNr.Number = Int.PalCheckNULL(this.colnHalterNr.Number);

					Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmRgSuchen.tblHSuche.colnArztNr, :frmRgSuchen.tblHSuche.colnHalterNr, 0,
:frmRgSuchen.lsGrund , SYSDATE, NULL, 'J', 'HS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
					this.frmRgSuchen.strGrund = "";
					while (this.frmRgSuchen.strGrund == "") 
					{

						// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
						SalString temp2 = this.frmRgSuchen.strGrund;
						dlgText.ModalDialog(this, "Andere Nummern des Halters (ohne Arzt-Nr.)? :", "frmHalter", 20, ref temp2);
						this.frmRgSuchen.strGrund = temp2;

					}
					Int.SqlImmed("UPDATE h SET hhalternein=1, handerehalter = :frmRgSuchen.tblHSuche.strGrund WHERE harztnr = :frmRgSuchen.tblHSuche.colnArztNr and hhalternr = :frmRgSuchen.tblHSuche.colnHalterNr");
					this.colnHalterNein.Number = 1;
				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblSA
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblSATableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmRgSuchen _frmRgSuchen = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblSATableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmRgSuchen frmRgSuchen
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmRgSuchen == null) 
					{
						_frmRgSuchen = (frmRgSuchen)this.FindForm();
					}
					return _frmRgSuchen;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblSATableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblSATableWindow)SalWindow.FromHandle(handle, typeof(tblSATableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblSH
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblSHTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmRgSuchen _frmRgSuchen = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblSHTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmRgSuchen frmRgSuchen
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmRgSuchen == null) 
					{
						_frmRgSuchen = (frmRgSuchen)this.FindForm();
					}
					return _frmRgSuchen;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblSHTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblSHTableWindow)SalWindow.FromHandle(handle, typeof(tblSHTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colnHalterNein WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnHalterNein_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Click:
						this.colnHalterNein_OnSAM_Click(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Click event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnHalterNein_OnSAM_Click(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (this.colnHalterNein.Number == 1) 
				{
					Sal.MessageBox("Sperre kann nur im Halterstamm aufgehoben werden.", "Achtung", Sys.MB_Ok);
				}
				else
				{
					this.frmRgSuchen.strKuerzel = App.frmMain.strUser.Left(2);
					this.frmRgSuchen.strGrund = "";
					while (this.frmRgSuchen.strGrund == "") 
					{

						// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
						SalString temp1 = this.frmRgSuchen.strGrund;
						dlgText.ModalDialog(this, "Warum darf der Halter nicht mehr verwendet werden? :", "frmHalter", 100, ref temp1);
						this.frmRgSuchen.strGrund = temp1;

					}
					this.frmRgSuchen.lsGrund = "***** Halter gesperrt wg.: " + this.frmRgSuchen.strGrund;
					// 13.05.14 F2027
					this.colnHalterNr.Number = Int.PalCheckNULL(this.colnHalterNr.Number);

					Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmRgSuchen.tblSH.colnArztNr, :frmRgSuchen.tblSH.colnHalterNr, 0,
:frmRgSuchen.tblSH.lsGrund , SYSDATE, NULL, 'J', 'HS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
					this.frmRgSuchen.strGrund = "";
					while (this.frmRgSuchen.strGrund == "") 
					{

						// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
						SalString temp2 = this.frmRgSuchen.strGrund;
						dlgText.ModalDialog(this, "Andere Nummern des Halters (ohne Arzt-Nr.)? :", "frmHalter", 20, ref temp2);
						this.frmRgSuchen.strGrund = temp2;

					}
					Int.SqlImmed("UPDATE h SET hhalternein=1, handerehalter = :frmRgSuchen.tblSH.strGrund WHERE harztnr = :frmRgSuchen.tblSH.colnArztNr and hhalternr = :frmRgSuchen.tblSH.colnHalterNr");
					this.colnHalterNein.Number = 1;
				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblHaBu
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblHaBuTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmRgSuchen _frmRgSuchen = null;
			
			
			#region Window Variables
			public SalDateTime dtErfDatAlt = SalDateTime.Null;
			#endregion
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblHaBuTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmRgSuchen frmRgSuchen
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmRgSuchen == null) 
					{
						_frmRgSuchen = (frmRgSuchen)this.FindForm();
					}
					return _frmRgSuchen;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblHaBuTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblHaBuTableWindow)SalWindow.FromHandle(handle, typeof(tblHaBuTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region gridWv
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class gridWvTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmRgSuchen _frmRgSuchen = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public gridWvTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmRgSuchen frmRgSuchen
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmRgSuchen == null) 
					{
						_frmRgSuchen = (frmRgSuchen)this.FindForm();
					}
					return _frmRgSuchen;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static gridWvTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((gridWvTableWindow)SalWindow.FromHandle(handle, typeof(gridWvTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalFuelleHalterLocals
			{
				public SalBoolean bVari = false;
			}
		}
		#endregion
	}
}
