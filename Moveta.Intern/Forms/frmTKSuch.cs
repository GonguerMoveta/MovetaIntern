// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmTKSuch : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlTKSuch = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalBoolean bErster = false;
		public SalString strBuchText = "";
		public SalNumber nSaldo = 0;
		public SalBoolean bSaldo = false;
		public SalDateTime tkbeldat = SalDateTime.Null;
		public SalDateTime tkadruckdatum = SalDateTime.Null;
		public SalNumber tkarztnr = 0;
		public SalString tkbuchtext = "";
		public SalNumber tkhalternr = 0;
		public SalNumber tkrechnr = 0;
		public SalNumber tkbelnr = 0;
		public SalNumber tkkontonr = 0;
		public SalNumber tksoll = 0;
		public SalNumber tkhaben = 0;
		public SalNumber nErr = 0;
		public SalNumber nFetch = 0;
		public SalNumber nRow = 0;
		public MTblPrintParams PrintParams = new MTblPrintParams();
		public SalString strDevice = "";
		public SalNumber nResult = 0;
		public SalNumber nAnz = 0;
		public SalNumber nOff = 0;
		public SalArray<SalString> strPrinters = new SalArray<SalString>();
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmTKSuch()
		{
			// Assign global reference.
			App.frmTKSuch = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmTKSuch CreateWindow(Control owner)
		{
			frmTKSuch frm = new frmTKSuch();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmTKSuch FromHandle(SalWindowHandle handle)
		{
			return ((frmTKSuch)SalWindow.FromHandle(handle, typeof(frmTKSuch)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmTKSuch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmTKSuch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmTKSuch_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmTKSuch_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmTKSuch_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlConnection(ref this.hSqlTKSuch);
			this.dfVMvon.DateTime = new SalDateTime(1900, 1, 1);
			this.dfVMbis.DateTime = new SalDateTime(2099, 12, 31);
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmTKSuch_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlTKSuch.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// dfBuchText WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBuchText_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfBuchText_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBuchText_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.strBuchText = "%" + this.dfBuchText.Text + "%";
			#endregion
		}
		
		/// <summary>
		/// rblfd WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rblfd_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rblfd_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rblfd_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfAbschlDatum.DisableWindow();
			#endregion
		}
		
		/// <summary>
		/// rbVM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbVM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbVM_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbVM_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfAbschlDatum.EnableWindow();
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.bErster = true;
			this.strBuchText = "%" + this.dfBuchText.Text + "%";
			if (this.rblfd.Checked) 
			{
				// Set strSelect = 'SELECT tkbeldat, tkarztnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkkontonr, tksoll, tkhaben
				// INTO :frmTKSuch.tblTK.coldtBelDat, :frmTKSuch.tblTK.colnArzt, :frmTKSuch.tblTK.colsBuchText, :frmTKSuch.tblTK.colnHalterNr, :frmTKSuch.tblTK.colnRechNr, :frmTKSuch.tblTK.colnBelegNr, :frmTKSuch.tblTK.colnKontoNr ,
				// :frmTKSuch.tblTK.colnSoll,
				// :frmTKSuch.tblTK.colnHaben
				// FROM TK '
				this.strSelect = @"SELECT tkbeldat, tkarztnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkkontonr, tksoll, tkhaben
INTO :frmTKSuch.tkbeldat, :frmTKSuch.tkarztnr, :frmTKSuch.tkbuchtext, :frmTKSuch.tkhalternr, :frmTKSuch.tkrechnr,
:frmTKSuch.tkbelnr, :frmTKSuch.tkkontonr, :frmTKSuch.tksoll, :frmTKSuch.tkhaben
FROM TK ";
				if (!(this.dfArztNr.IsEmpty())) 
				{
					if (this.bErster) 
					{
						this.strSelect = this.strSelect + " WHERE tkarztnr = :frmTKSuch.dfArztNr ";
						this.bErster = false;
					}
					else
					{
						this.strSelect = this.strSelect + " AND tkarztnr = :frmTKSuch.dfArztNr ";
					}
				}
				if (!(this.dfHalterNr.IsEmpty())) 
				{
					if (this.bErster) 
					{
						this.strSelect = this.strSelect + " WHERE tkHalternr = :frmTKSuch.dfHalterNr ";
						this.bErster = false;
					}
					else
					{
						this.strSelect = this.strSelect + " AND tkHalternr = :frmTKSuch.dfHalterNr ";
					}
				}
				if (!(this.dfRechNr.IsEmpty())) 
				{
					if (this.bErster) 
					{
						this.strSelect = this.strSelect + " WHERE tkRechnr = :frmTKSuch.dfRechNr ";
						this.bErster = false;
					}
					else
					{
						this.strSelect = this.strSelect + " AND tkRechnr = :frmTKSuch.dfRechNr ";
					}
				}
				if (!(this.dfDatum.IsEmpty())) 
				{
					if (this.bErster) 
					{
						this.strSelect = this.strSelect + " WHERE tkbeldat = :frmTKSuch.dfDatum ";
						this.bErster = false;
					}
					else
					{
						this.strSelect = this.strSelect + " AND tkbeldat = :frmTKSuch.dfDatum ";
					}
				}
				if (!(this.dfBuchText.IsEmpty())) 
				{
					if (this.bErster) 
					{
						this.strSelect = this.strSelect + " WHERE @LICS(tkbuchtext) LIKE @LICS(:frmTKSuch.strBuchText) ";
						this.bErster = false;
					}
					else
					{
						this.strSelect = this.strSelect + " AND @LICS(tkbuchtext) LIKE @LICS(:frmTKSuch.strBuchText) ";
					}
				}
				if (!(this.dfSoll.IsEmpty())) 
				{
					if (this.bErster) 
					{
						this.strSelect = this.strSelect + " WHERE tksoll = :frmTKSuch.dfSoll ";
						this.bErster = false;
					}
					else
					{
						this.strSelect = this.strSelect + " AND tksoll = :frmTKSuch.dfSoll ";
					}
				}
				if (!(this.dfHaben.IsEmpty())) 
				{
					if (this.bErster) 
					{
						this.strSelect = this.strSelect + " WHERE tkhaben = :frmTKSuch.dfHaben ";
						this.bErster = false;
					}
					else
					{
						this.strSelect = this.strSelect + " AND tkhaben = :frmTKSuch.dfHaben ";
					}
				}
				// 31.07.23 Ä2125
				if (!(this.dfBelegNr.IsEmpty())) 
				{
					if (this.bErster) 
					{
						this.strSelect = this.strSelect + " WHERE tkbelnr = :frmTKSuch.dfBelegNr ";
						this.bErster = false;
					}
					else
					{
						this.strSelect = this.strSelect + " AND tkbelnr = :frmTKSuch.dfBelegNr ";
					}
				}

				this.strSelect = this.strSelect + " ORDER BY tkbeldat";
			}
			else
			{
				// Set strSelect = 'SELECT tkabeldat, tkaarztnr, tkabuchtext, tkahalternr, tkarechnr, tkabelnr, tkakontonr, tksoll, tkhaben
				// INTO :frmTKSuch.tblTK.coldtBelDat, :frmTKSuch.tblTK.colnArzt, :frmTKSuch.tblTK.colsBuchText, :frmTKSuch.tblTK.colnHalterNr, :frmTKSuch.tblTK.colnRechNr, :frmTKSuch.tblTK.colnBelegNr, :frmTKSuch.tblTK.colnKontoNr,
				// :frmTKSuch.tblTK.colnSoll,
				// :frmTKSuch.tblTK.colnHaben
				// FROM TKA '
				this.strSelect = @"SELECT tkabeldat, tkaarztnr, tkabuchtext, tkahalternr, tkarechnr, tkabelnr, tkakontonr, tksoll, tkhaben, tkadruckdatum
INTO :frmTKSuch.tkbeldat, :frmTKSuch.tkarztnr, :frmTKSuch.tkbuchtext, :frmTKSuch.tkhalternr, :frmTKSuch.tkrechnr,
:frmTKSuch.tkbelnr, :frmTKSuch.tkkontonr, :frmTKSuch.tksoll, :frmTKSuch.tkhaben, :frmTKSuch.tkadruckdatum
FROM TKA WHERE tkadeaktiv IS NULL AND tkabeldat BETWEEN :frmTKSuch.dfVMvon AND :frmTKSuch.dfVMbis ";
				if (!(this.dfArztNr.IsEmpty())) 
				{
					// If bErster
					// Set strSelect = strSelect || ' AND tkaarztnr = :frmTKSuch.dfArztNr '
					// Set bErster = FALSE
					// Else
					this.strSelect = this.strSelect + " AND tkaarztnr = :frmTKSuch.dfArztNr ";
				}
				if (!(this.dfHalterNr.IsEmpty())) 
				{
					// If bErster
					// Set strSelect = strSelect || ' AND tkaHalternr = :frmTKSuch.dfHalterNr '
					// Set bErster = FALSE
					// Else
					this.strSelect = this.strSelect + " AND tkaHalternr = :frmTKSuch.dfHalterNr ";
				}
				if (!(this.dfRechNr.IsEmpty())) 
				{
					// If bErster
					// Set strSelect = strSelect || ' WHERE tkaRechnr = :frmTKSuch.dfRechNr '
					// Set bErster = FALSE
					// Else
					this.strSelect = this.strSelect + " AND tkaRechnr = :frmTKSuch.dfRechNr ";
				}
				if (!(this.dfDatum.IsEmpty())) 
				{
					// If bErster
					// Set strSelect = strSelect || ' WHERE tkabeldat = :frmTKSuch.dfDatum '
					// Set bErster = FALSE
					// Else
					this.strSelect = this.strSelect + " AND tkabeldat = :frmTKSuch.dfDatum ";
				}
				if (!(this.dfAbschlDatum.IsEmpty())) 
				{
					// If bErster
					// Set strSelect = strSelect || ' WHERE tkadruckdatum = :frmTKSuch.dfAbschlDatum '
					// Set bErster = FALSE
					// Else
					this.strSelect = this.strSelect + " AND tkadruckdatum = :frmTKSuch.dfAbschlDatum ";
				}
				if (!(this.dfBuchText.IsEmpty())) 
				{
					// If bErster
					// Set strSelect = strSelect || ' WHERE tkabuchtext LIKE :frmTKSuch.strBuchText '
					// Set bErster = FALSE
					// Else
					this.strSelect = this.strSelect + " AND @LICS(tkabuchtext) LIKE @LICS(:frmTKSuch.strBuchText) ";
				}
				if (!(this.dfSoll.IsEmpty())) 
				{
					// If bErster
					// Set strSelect = strSelect || ' WHERE tksoll = :frmTKSuch.dfSoll '
					// Set bErster = FALSE
					// Else
					this.strSelect = this.strSelect + " AND tksoll = :frmTKSuch.dfSoll ";
				}
				if (!(this.dfHaben.IsEmpty())) 
				{
					// If bErster
					// Set strSelect = strSelect || ' WHERE tkhaben = :frmTKSuch.dfHaben '
					// Set bErster = FALSE
					// Else
					this.strSelect = this.strSelect + " AND tkhaben = :frmTKSuch.dfHaben ";
				}
				// 01.12.23 Ä2125
				if (!(this.dfBelegNr.IsEmpty())) 
				{
					this.strSelect = this.strSelect + " AND tkabelnr = :frmTKSuch.dfBelegNr ";
				}
				// If bErster
				// Set strSelect = strSelect || ' WHERE tkadruckdatum >= 2004-02-02 '
				// Else
				this.strSelect = this.strSelect + " AND tkadruckdatum >= '2004-02-02' ";

				this.strSelect = this.strSelect + " ORDER BY tkabeldat";
			}
			// 17.08.15 Ä1238
			if (this.dfHalterNr.Number != Sys.NUMBER_Null || this.dfRechNr.Number != Sys.NUMBER_Null || this.dfAbschlDatum.DateTime != Sys.DATETIME_Null || this.dfDatum.DateTime != Sys.DATETIME_Null || this.dfArztNr.Number == Sys.NUMBER_Null || this.dfBuchText.Text != 
			Sys.STRING_Null || this.dfSoll.Number != Sys.NUMBER_Null || this.dfHaben.Number != Sys.NUMBER_Null) 
			{
				this.bSaldo = false;
			}
			else
			{
				this.bSaldo = true;
			}
			if (this.bSaldo) 
			{
				this.nSaldo = 0;
				if (this.rblfd.Checked) 
				{
					Int.SqlImmedSel("SELECT (avorhaben - avorsoll) INTO :frmTKSuch.nSaldo FROM a WHERE aarztnr = :frmTKSuch.dfArztNr");
				}
				else
				{
					Int.SqlImmedSel("SELECT (vovorhaben - vovorsoll) INTO :frmTKSuch.nSaldo FROM vo WHERE voarztnr = :frmTKSuch.dfArztNr AND vodatum = '2004-02-02' AND vodeaktiv IS NULL");
				}
				if (this.nSaldo != 0) 
				{
					this.nRow = this.tblTK.InsertRow(Sys.TBL_MaxRow);
					this.tblTK.colsBuchText.Text = "Anfangsbestand";
					this.tblTK.colnSaldo.Number = this.nSaldo;
				}
			}
			else
			{
				this.tblTK.colnSaldo.HideWindow();
			}

			Sal.WaitCursor(true);
			// If SalTblPopulate(tblTK, hSqlTKSuch, strSelect, TBL_FillAll)
			// Call VisTblAutoSizeColumn(tblTK, hWndNULL)
			this.tblTK.ResetTable();
			Int.SqlHandleExec(this.hSqlTKSuch, this.strSelect, "TKSuch: Lade Liste", ref this.nErr);
			this.nFetch = this.hSqlTKSuch.FetchNext();
			while (this.nFetch != Sys.FETCH_EOF) 
			{
				this.nRow = this.tblTK.InsertRow(Sys.TBL_MaxRow);
				this.tblTK.coldtBelDat.DateTime = this.tkbeldat;
				this.tblTK.colnArzt.Number = this.tkarztnr;
				this.tblTK.colsBuchText.Text = this.tkbuchtext;
				this.tblTK.colnHalterNr.Number = this.tkhalternr;
				this.tblTK.colnRechNr.Number = this.tkrechnr;
				this.tblTK.colnBelegNr.Number = this.tkbelnr;
				this.tblTK.colnKontoNr.Number = this.tkkontonr;
				this.tblTK.colnSoll.Number = this.tksoll;
				this.tblTK.colnHaben.Number = this.tkhaben;
				if (this.bSaldo) 
				{
					// Call SalTblSetContext( tblTK, lParam )
					// Call SalTblSetFocusRow( tblTK, lParam )
					// Set frmTKSuch.tblTK.colnSaldo = frmTKSuch.tblTK.colnHaben - frmTKSuch.tblTK.colnSoll
					this.tblTK.colnSaldo.Number = this.nSaldo + this.tkhaben - this.tksoll;
					this.nSaldo = this.tblTK.colnSaldo.Number;
				}

				this.nFetch = this.hSqlTKSuch.FetchNext();
			}
			this.hSqlTKSuch.Commit();
			MT.MTbl.AutoSizeRows(this.tblTK, Const.MTASR_ALLROWS);
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// tblTK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// On SAM_FetchRowDone
				
				// 17.08.15 Ä1238
				
				// !!CB!! 129
				
				// Set strSelect = 'SELECT tkbeldat, tkarztnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkkontonr, tksoll, tkhaben
				
				// 		INTO :frmTKSuch.tblTK.coldtBelDat, :frmTKSuch.tblTK.colnArzt, :frmTKSuch.tblTK.colsBuchText, :frmTKSuch.tblTK.colnHalterNr, :frmTKSuch.tblTK.colnRechNr, :frmTKSuch.tblTK.colnBelegNr, :frmTKSuch.tblTK.colnKontoNr ,
				
				// 		:frmTKSuch.tblTK.colnSoll,
				
				// 		:frmTKSuch.tblTK.colnHaben
				
				// 		FROM TK '
				
				// Set tblTK.coldtBelDat = tkbeldat
				
				// Set tblTK.colnArzt = tkarztnr
				
				// Set tblTK.colsBuchText = tkbuchtext
				
				// Set tblTK.colnHalterNr = tkhalternr
				
				// Set tblTK.colnRechNr = tkrechnr
				
				// Set tblTK.colnBelegNr = tkbelnr
				
				// Set tblTK.colnKontoNr = tkkontonr
				
				// Set tblTK.colnSoll = tksoll
				
				// Set tblTK.colnHaben = tkhaben
				
				// If bSaldo
				
				// Call SalTblSetContext( tblTK, lParam )
				
				// Call SalTblSetFocusRow( tblTK, lParam )
				
				// Set frmTKSuch.tblTK.colnSaldo = frmTKSuch.tblTK.colnHaben - frmTKSuch.tblTK.colnSoll
				
				// Set frmTKSuch.tblTK.colnSaldo = nSaldo + tkhaben - tksoll
				
				// Set nSaldo = frmTKSuch.tblTK.colnSaldo
				
				case Sys.SAM_Create:
					this.tblTK_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTK_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 25.06.13
			// Call MTblSubClass( hWndItem )
			// Call MTblSetAltRowBackColors( hWndItem, FALSE, COLOR_White, 0xFFFFA8 )
			// Call MTblSetAltRowBackColors( hWndItem, FALSE, COLOR_White, 0xFFFFD8 )
			// Call MTblSetFlags( hWndItem, MTBL_FLAG_COLOR_ENTIRE_ROW, TRUE )
			// Call MTblSetFlags( hWndItem, MTBL_FLAG_VARIABLE_ROW_HEIGHT, TRUE )
			// Call MTblSetFlags( hWndItem, MTBL_FLAG_NO_FREE_COL_AREA_LINES, TRUE )
			// Call MTblSetFlags( hWndItem, MTBL_FLAG_NO_FREE_ROW_AREA_LINES, TRUE )
			Int.PalPrepareMTbl(this.tblTK, 0xffffd8);

			#endregion
		}
		
		/// <summary>
		/// pbDrucken WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDrucken_OnSAM_Click(sender, e);
					break;
				
				// On SAM_Click
				
				// Call PrintParams.Init(  )
				
				// Set PrintParams.DocName = 'Kontoauszug-Daten'
				
				// Set PrintParams.Orientation = MTP_OR_PORTRAIT
				
				// Set strDevice = MTblPrintGetDefPrinterName(  )
				
				// Set nResult = SalListQuerySelection( lbPrinters)
				
				// If nResult = LB_Err
				
				// Set strDevice = MTblPrintGetDefPrinterName(  )
				
				// Else
				
				// Call SalListQueryText( lbPrinters, nResult, strDevice )
				
				// Set PrintParams.PrinterName = strDevice
				
				// Set PrintParams.Language = MTP_LNG_GERMAN
				
				// Call MTblPrint( tblTK, PrintParams )
				
				// On SAM_Create
				
				// Set nAnz = MTblPrintGetPrinterNames( strPrinters )
				
				// Set strDevice = MTblPrintGetDefPrinterName(  )
				
				// Set nOff = -1
				
				// Set nResult = 0
				
				// While nResult < nAnz
				
				// Call SalListAdd( lbPrinters, strPrinters[nResult] )
				
				// If strPrinters[nResult] = strDevice
				
				// Set nOff = nResult
				
				// Set nResult = nResult + 1
				
				// If nOff >= 0
				
				// Call SalListSetSelect( lbPrinters, nOff )
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 23.02.11 OTÄ531
			// Set nErr = 1
			// Call SalReportTableCreate('Suchergebnis', tblTK, nErr)
			// Call SalReportTableView(tblTK, hWndNULL,  'Suchergebnis', nErr)
			// 05.01.18 Ä1680
			Var.strDummy = "";
			this.nRow = Sys.TBL_MinRow;
			if (this.tblTK.FindNextRow(ref this.nRow, Sys.ROW_Selected, 0)) 
			{
				if (Sys.IDYES == Sal.MessageBox("Sollen nur die markierten Zeilen gedruckt werden (Nein = Alle drucken)?", "Zeilen sind markiert", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					Var.strDummy = "SE";
				}
			}
			if (dlgLlDruck.ModalDialog(App.frmMain, "TKSuch.lst", Var.strDummy)) 
			{
			}
			#endregion
		}
		
		/// <summary>
		/// pbExport WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbExport_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbExport_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbExport_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			MT.MTbl.ExportToExcel(this.tblTK, MT.MTbl.MTE_LNG_GERMAN, SalString.Null, ((((MT.MTbl.MTE_EXCEL_NEW_INSTANCE | MT.MTbl.MTE_EXCEL_STRING_COLS_AS_TEXT) | Const.MTE_EXCEL_NO_CLIPBOARD) | Const.MTE_EXCEL_NO_AUTO_FIT_COL) | Const.MTE_EXCEL_NO_AUTO_FIT_ROW), 
				(MT.MTbl.MTE_COL_HEADERS | MT.MTbl.MTE_SHOW_STATUS), 0, Sys.ROW_Hidden, Sys.COL_Visible, 0);
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblTK
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblTKTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTKSuch _frmTKSuch = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblTKTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTKSuch frmTKSuch
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTKSuch == null) 
					{
						_frmTKSuch = (frmTKSuch)this.FindForm();
					}
					return _frmTKSuch;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblTKTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblTKTableWindow)SalWindow.FromHandle(handle, typeof(tblTKTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
