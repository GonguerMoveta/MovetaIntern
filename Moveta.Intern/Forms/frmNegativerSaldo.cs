// <ppj name="Moveta.Intern" date="15.11.2024 14:25:35" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;
using PPJ.Porting.Util.RS.ObjectModel;
using PPJ.Runtime.Scripting;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmNegativerSaldo : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlNeg = SalSqlHandle.Null;
		public SalSqlHandle hSqlAbrVJ = SalSqlHandle.Null;
		public SalSqlHandle hSqlAbrVVJ = SalSqlHandle.Null;
		public SalSqlHandle hSqlBelVJ = SalSqlHandle.Null;
		public SalSqlHandle hSqlANr2 = SalSqlHandle.Null;
		public SalSqlHandle hSqlAndereNr = SalSqlHandle.Null;
		public SalNumber nFetch = 0;
		public SalNumber nFetchNeg = 0;
		public SalNumber nFetchDummy = 0;
		public SalNumber nArztNr = 0;
		public SalNumber nArztNr2 = 0;
		public SalNumber nArztNrDummy = 0;
		public SalString strAndereNummern = "";
		public SalString strAndereNummernOhneNr2 = "";
		public SalNumber nITBrief = 0;
		public SalNumber nAbrVJ = 0;
		public SalNumber nAbrVVJ = 0;
		public SalNumber nBelVJ = 0;
		public SalDateTime dtBelDate = SalDateTime.Null;
		public SalNumber nEI = 0;
		public SalNumber nTV = 0;
		public SalNumber nSaldo = 0;
		public SalNumber nSaldoDummy = 0;
		public SalString lsGFMemo = "";
		public SalString strN1 = "";
		public SalString strN2 = "";
		public SalString strS = "";
		public SalString strO = "";
		public SalString strLand = "";
		public SalNumber nBrutto = 0;
		public SalNumber nMwSt = 0;
		public SalString strBuchText = "";
		public SalNumber nErloesKonto = 0;
		public MTblPrintParams PrintParams = new MTblPrintParams();
		public SalArray<SalString> strPrinters = new SalArray<SalString>();
		public SalNumber nAnz = 0;
		public SalNumber nOff = 0;
		public SalNumber nResult = 0;
		public SalString strDevice = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmNegativerSaldo()
		{
			// Assign global reference.
			App.frmNegativerSaldo = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmNegativerSaldo CreateWindow(Control owner)
		{
			frmNegativerSaldo frm = new frmNegativerSaldo();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmNegativerSaldo FromHandle(SalWindowHandle handle)
		{
			return ((frmNegativerSaldo)SalWindow.FromHandle(handle, typeof(frmNegativerSaldo)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalHoleTabelle()
		{
			#region Actions
			using (new SalContext(this))
			{
				// 05.02.24 ### +
				// AND aaustritt IS NULL AND agestorben IS NULL
				if (hSqlNeg.PrepareAndExecute(@"SELECT aarztnr, aname1, aname2, astr, aort, aland, avorhaben-avorsoll, agfmemo, aitbrief, aitei, aittv
INTO :frmNegativerSaldo.nArztNr, :frmNegativerSaldo.strN1, :frmNegativerSaldo.strN2,
:frmNegativerSaldo.strS, :frmNegativerSaldo.strO, :frmNegativerSaldo.strLand,
:frmNegativerSaldo.nSaldo, :frmNegativerSaldo.lsGFMemo, :frmNegativerSaldo.nITBrief,
:frmNegativerSaldo.nEI, :frmNegativerSaldo.nTV
FROM a WHERE akzpraxart<2 AND aitbrief>0 AND aarztnr between :frmNegativerSaldo.dfAvon AND :frmNegativerSaldo.dfAbis
AND aaustritt IS NULL AND agestorben IS NULL
ORDER BY aarztnr")) 
				{
				}
				nFetchNeg = hSqlNeg.FetchNext();
				while (nFetchNeg != Sys.FETCH_EOF) 
				{
					PalNextRow();
					nFetchNeg = hSqlNeg.FetchNext();
				}
				Int.SqlConnection(ref this.hSqlNeg);
				hSqlNeg.Disconnect();
				Sal.HideWindow(bkgdBW);
				tblNeg.ShowWindow();
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalNextRow()
		{
			#region Local Variables
			SqlLocals.PalNextRowLocals locals = new SqlLocals.PalNextRowLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				this.SetStatusBarText("Ermittle Daten f√ºr Mitglied " + nArztNr.ToString(0));

				strAndereNummern = "";
				nSaldoDummy = 0;
				Int.SqlConnection(ref hSqlAndereNr);
				hSqlAndereNr.PrepareAndExecute("SELECT aarztnr, avorhaben-avorsoll INTO :frmNegativerSaldo.nArztNrDummy, :frmNegativerSaldo.nSaldoDummy FROM a WHERE aneuenr = :frmNegativerSaldo.nArztNr");
				nFetchDummy = hSqlAndereNr.FetchNext();
				while (nFetchDummy != Sys.FETCH_EOF) 
				{
					strAndereNummern = strAndereNummern + "," + nArztNrDummy.ToString(0);
					// 24.01.24 ### auskommentiert
					// If nSaldoDummy = NUMBER_Null
					// Set nSaldoDummy = 0
					// Set nSaldo = nSaldo + nSaldoDummy
					nFetchDummy = hSqlAndereNr.FetchNext();
				}

				Int.SqlExecut(hSqlANr2, "Holen der 2.ArztNr");
				nFetch = hSqlANr2.FetchNext();
				if (nArztNr2 != 0 && nArztNr2 != SalNumber.Null) 
				{
					strAndereNummern = strAndereNummern + "," + nArztNr2.ToString(0);
				}
				strAndereNummernOhneNr2 = strAndereNummern;
				strAndereNummern = nArztNr.ToString(0) + strAndereNummern;
				hSqlAndereNr.Disconnect();

				nSaldoDummy = 0;
				// 24.01.24 ###
				// Call SqlImmedSel( 'SELECT avorhaben-avorsoll INTO :frmNegativerSaldo.nSaldoDummy FROM a WHERE aarztnr = :frmNegativerSaldo.nArztNr2 ' )
				Int.SqlImmedSel("SELECT sum(avorhaben-avorsoll) INTO :frmNegativerSaldo.nSaldoDummy FROM a WHERE aarztnr IN (" + strAndereNummern + ") ");

				if (nSaldoDummy == SalNumber.Null) 
				{
					nSaldoDummy = 0;
				}
				// 24.01.24 ###
				// Set nSaldo = nSaldo + nSaldoDummy
				nSaldo = nSaldoDummy;
				// 24.01.24 ###
				Int.SqlImmedSel("SELECT sum( tkhaben-tksoll) FROM tk INTO :frmNegativerSaldo.nSaldoDummy WHERE tkarztnr IN (" + strAndereNummern + ") ");
				if (nSaldoDummy == SalNumber.Null) 
				{
					nSaldoDummy = 0;
				}
				nSaldo = nSaldo + nSaldoDummy;

				if (nEI == SalNumber.Null) 
				{
					nEI = 0;
				}
				if (nTV == SalNumber.Null) 
				{
					nTV = 0;
				}

				if (nSaldo < 0 || nITBrief > 0) 
				{
					locals.nPRow = tblNeg.InsertRow(Sys.TBL_MaxRow);
					tblNeg.SetFocusRow(locals.nPRow);

					tblNeg.colAnschrift.Text = strN1;
					if (strN2 != "") 
					{
						tblNeg.colAnschrift.Text = tblNeg.colAnschrift.Text + ", " + strN2;
					}
					if (strS != "") 
					{
						tblNeg.colAnschrift.Text = tblNeg.colAnschrift.Text + ", " + strS;
					}
					if (strO != "") 
					{
						tblNeg.colAnschrift.Text = tblNeg.colAnschrift.Text + ", " + strO;
					}
					if (strLand != "") 
					{
						tblNeg.colAnschrift.Text = tblNeg.colAnschrift.Text + ", " + strLand;
					}

					if (nITBrief == 0) 
					{
						tblNeg.colSoftware.Text = "- keine -";
					}
					else if (nITBrief == 1) 
					{
						tblNeg.colSoftware.Text = "Pegasus";
					}
					else if (nITBrief == 2) 
					{
						tblNeg.colSoftware.Text = "MovetaON";
					}
					else
					{
						tblNeg.colSoftware.Text = "- unbekannt -";
					}

					tblNeg.colSaldo.Number = nSaldo;
					tblNeg.colSaldomitBelastung.Number = nSaldo;
					tblNeg.colGFMemo.Text = lsGFMemo;
					if (tblNeg.colSaldo.Number < 0) 
					{
						tblNeg.colBrief.Number = 1;
					}
					else
					{
						tblNeg.colBrief.Number = 0;
					}

					tblNeg.colPCs.Text = nEI.ToString(0) + "/" + nTV.ToString(0);
					tblNeg.colAndereNr.Text = strAndereNummernOhneNr2;

					if (Int.SqlImmedSel(@"SELECT sum(akrechsumm) INTO :frmNegativerSaldo.nAbrVJ
FROM ak
WHERE @yearbeg(akdatum) = @yearbeg(sysdate)-1 years and aktyp='RG' and aktypdetail='UebOP' and akarztnr IN (" + strAndereNummern + ")")) 
					{
					}
					if (Int.SqlImmedSel(@"SELECT sum(akrechsumm) INTO :frmNegativerSaldo.nAbrVVJ
FROM ak
WHERE @yearbeg(akdatum) = @yearbeg(sysdate)-2 years and aktyp='RG' and aktypdetail='UebOP' and akarztnr IN (" + strAndereNummern + ")")) 
					{
					}
					if (Int.SqlImmedSel(@"SELECT MAX(tkabeldat), SUM(tksoll) INTO :frmNegativerSaldo.dtBelDate, :frmNegativerSaldo.nBelVJ
FROM tka
WHERE tkafall=99 and tkaarztnr IN (" + strAndereNummern + ")")) 
					{
					}
					if (Int.SqlImmedSel(@"SELECT MAX(tkabeldat), SUM(tksoll) INTO :frmNegativerSaldo.dtBelDate, :frmNegativerSaldo.nBelVJ 
FROM tka
WHERE(tkafall = 99 or tkabuchtext like \'Softwarenutzung%\') and tkaarztnr IN (" +  strAndereNummern +")"))
				    {
					}
					// Call SqlExecut( hSqlAbrVJ, 'Holen der Abrechnungssumme VJ' )
					// Call SqlFetchNext( hSqlAbrVJ, nFetch )
					// Call SqlExecut( hSqlAbrVVJ, 'Holen der Abrechnungssumme VVJ' )
					// Call SqlFetchNext( hSqlAbrVVJ, nFetch )
					// Call SqlExecut( hSqlBelVJ, 'Holen der letzten Belastung' )
					// Call SqlFetchNext( hSqlBelVJ, nFetch )

					tblNeg.colAbrVJ.Number = nAbrVJ;
					tblNeg.colAbrVVJ.Number = nAbrVVJ;
					tblNeg.colltztBelastung.DateTime = dtBelDate;
					tblNeg.colDMVJ.Number = nBelVJ;
					tblNeg.colArztNr.Number = nArztNr;
				}

				return 0;
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmNegativerSaldo WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmNegativerSaldo_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_CreateComplete:
					this.frmNegativerSaldo_OnSAM_CreateComplete(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.frmNegativerSaldo_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmNegativerSaldo_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmNegativerSaldo_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblNeg, 0xbfffff);

			this.dfJahr.Number = SalDateTime.Current.Year() - 1;

			Int.SqlConnection(ref this.hSqlAbrVJ);
			Int.SqlConnection(ref this.hSqlAbrVVJ);
			Int.SqlConnection(ref this.hSqlBelVJ);
			Int.SqlConnection(ref this.hSqlANr2);
			this.hSqlANr2.Prepare("SELECT anr2 INTO :frmNegativerSaldo.nArztNr2 FROM a WHERE aarztnr = :frmNegativerSaldo.nArztNr");
			// If SqlPrepare(hSqlAbrVJ,'SELECT sum(akrechsumm) INTO :frmNegativerSaldo.nAbrVJ
			// FROM ak
			// WHERE @yearbeg(akdatum) = @yearbeg(sysdate)-1 years and aktyp=\'RG\' and aktypdetail=\'UebOP\' and akarztnr IN (:frmNegativerSaldo.nArztNr, :frmNegativerSaldo.nArztNr2)')
			// If SqlPrepare(hSqlAbrVVJ,'SELECT sum(akrechsumm) INTO :frmNegativerSaldo.nAbrVJ
			// FROM ak
			// WHERE @yearbeg(akdatum) = @yearbeg(sysdate)-2 years and aktyp=\'RG\' and aktypdetail=\'UebOP\' and akarztnr IN (:frmNegativerSaldo.nArztNr, :frmNegativerSaldo.nArztNr2)')
			// If SqlPrepare(hSqlBelVJ,'SELECT MAX(tkabeldat) INTO :frmNegativerSaldo.nBelVJ
			// FROM tka
			// WHERE tkafall=99 and tkaarztnr IN (:frmNegativerSaldo.nArztNr, :frmNegativerSaldo.nArztNr2)')
			// 25.01.24 ###
			// Call PalHoleTabelle(  )
			this.dfAvon.Number = 1;
			this.dfAbis.Number = 9999;

			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmNegativerSaldo_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Var.strBNAbtlg == "GF" || Var.strBNZei == "KE") 
			{
			}
			else
			{
				// 25.01.24 ###
				this.pbBuchen.DisableWindow();
				this.pbAusgleich.DisableWindow();
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmNegativerSaldo_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlAbrVJ.Disconnect();
			this.hSqlAbrVVJ.Disconnect();
			this.hSqlBelVJ.Disconnect();
			this.hSqlANr2.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// dfAvon WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAvon_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfAvon_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAvon_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblNeg.ResetTable();
			#endregion
		}
		
		/// <summary>
		/// dfAbis WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAbis_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfAbis_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAbis_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblNeg.ResetTable();
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.bkgdBW.ShowWindow();
			this.PalHoleTabelle();
			#endregion
		}
		
		/// <summary>
		/// tblNeg WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblNeg_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblNeg_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblNeg_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblNeg, 0xbfffbf);
			#endregion
		}
		
		/// <summary>
		/// pbBuchen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBuchen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbBuchen_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBuchen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfJahr.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Bitte geben Sie das Jahr an, f√ºr das die Belastung durchgef√ºhrt werden soll.", "Jahr fehlt", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				this.tblNeg.KillCellEdit();
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblNeg.FindNextRow(ref Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
					{
						break;
					}
					this.tblNeg.SetFocusRow(Var.nRow);
					if (this.tblNeg.colDM.Number > 0) 
					{
						this.nErloesKonto = 81450;
						this.strBuchText = "Softwarenutzung " + this.dfJahr.Number.ToString(0);
						if (Int.PalCheckAuslTA(this.tblNeg.colArztNr.Number) == "EU") 
						{
							this.nMwSt = 0;
							this.nBrutto = this.tblNeg.colDM.Number;
							Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
VALUES (:frmNegativerSaldo.tblNeg.colArztNr, 0, 0, :frmNegativerSaldo.strBuchText, 0, 0, 0,
SYSDATE, :frmNegativerSaldo.nErloesKonto, 0, 0, :frmNegativerSaldo.nMwSt, 0, 0, 0, 0, 0, 0, 0, 0, :frmNegativerSaldo.nBrutto,
:frmNegativerSaldo.nBrutto, 0)");
						}
						else
						{
							// 27.12.12 √Ñ855
							this.nMwSt = (this.tblNeg.colDM.Number * Var.nMwStVoll).Round() / 100;
							// 16.01.15 F2235 von unten
							this.nBrutto = this.tblNeg.colDM.Number + this.nMwSt;
							Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
VALUES (:frmNegativerSaldo.tblNeg.colArztNr, 0, 0, :frmNegativerSaldo.strBuchText, 0, 0, 0,
SYSDATE, :frmNegativerSaldo.nErloesKonto, 0, 0, :frmNegativerSaldo.nMwSt, 0, 0, 0, 0, 0, :nMwStVoll, 0, 0, :frmNegativerSaldo.nBrutto,
:frmNegativerSaldo.nBrutto, 0)");
						}

						Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16000, :frmNegativerSaldo.nErloesKonto, :frmNegativerSaldo.tblNeg.colArztNr, SYSDATE, :frmNegativerSaldo.strBuchText,
:frmNegativerSaldo.tblNeg.colDM, 6)");
						Int.SqlImmedX(@" INSERT INTO bub
(bubbearbeiter, bubbearbdatum, bubarztnr, bubsoll, bubhaben, bubdm, bubbuchtext)
VALUES (:frmMain.strUser, SYSDATETIME, :frmNegativerSaldo.tblNeg.colArztNr, 16000, :frmNegativerSaldo.nErloesKonto, :frmNegativerSaldo.tblNeg.colDM, :frmNegativerSaldo.strBuchText)");
						// 27.12.12 √Ñ855
						this.strBuchText = "MwSt Haben";
						// 30.06.20 √Ñ1892
						Var.nMwStSenkung = 17760;

						Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16000, :nMwStSenkung, :frmNegativerSaldo.tblNeg.colArztNr, SYSDATE, :frmNegativerSaldo.strBuchText,
:frmNegativerSaldo.nMwSt, 6)");
						Int.SqlImmedX(@" INSERT INTO bub
(bubbearbeiter, bubbearbdatum, bubarztnr, bubsoll, bubhaben, bubdm, bubbuchtext)
VALUES (:frmMain.strUser, SYSDATETIME, :frmNegativerSaldo.tblNeg.colArztNr, 16000, :nMwStSenkung, :frmNegativerSaldo.nMwSt, :frmNegativerSaldo.strBuchText)");
					}

				}
			}

			#endregion
		}
		
		/// <summary>
		/// pbAusgleich WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAusgleich_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAusgleich_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAusgleich_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblNeg.KillCellEdit();
			Var.nRow = Sys.TBL_MinRow;
			while (true)
			{
				if (!(this.tblNeg.FindNextRow(ref Var.nRow, 0, 0))) 
				{
					break;
				}
				this.tblNeg.SetFocusRow(Var.nRow);
				if (this.tblNeg.colBrief.Number == 1) 
				{
					this.tblNeg.SetRowFlags(Var.nRow, Sys.ROW_UnusedFlag1, true);
				}

			}
			dlgLlDruck.ModalDialog(App.frmMain, "Brief BitteUmAusgleich.crd", "");

			#endregion
		}
		
		/// <summary>
		/// pbDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDruck_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDruck_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;


			// 13.11.13
			// Set nErr = 1
			// Set hWndReport = SalCreateWindow (frmReport, hWndNULL,'Statistik')
			// Call SalReportTableCreate('TEST', tblResult, nErr)
			// Call SalReportTableView(tblResult, frmReport, 'TEST', nErr)
			// 08.09.06 Aufgabe 24
			// Call SalBringWindowToTop(hWndReport)
			this.PrintParams.Init();
			this.PrintParams.DocName = "Belastungen f√ºr Softwarenutzung";
			this.PrintParams.Orientation = MT.MTbl.MTP_OR_LANDSCAPE;
			// Set strDevice = MTblPrintGetDefPrinterName(  )
			this.nResult = this.lbPrinters.GetListSelectedIndex();
			if (this.nResult == Sys.LB_Err) 
			{
				this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			}
			else
			{
				this.strDevice = this.lbPrinters.GetListItemText(this.nResult);
			}
			this.PrintParams.PrinterName = this.strDevice;
			// 07.11.13 F1760
			this.PrintParams.Language = MT.MTbl.MTP_LNG_GERMAN;

			MT.MTbl.Print(this.tblNeg, this.PrintParams);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nAnz = MT.MTbl.PrintGetPrinterNames(this.strPrinters);
			this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			this.nOff = -1;
			this.nResult = 0;
			while (this.nResult < this.nAnz) 
			{
				this.lbPrinters.AddListItem(this.strPrinters[this.nResult]);
				if (this.strPrinters[this.nResult] == this.strDevice) 
				{
					this.nOff = this.nResult;
				}
				this.nResult = this.nResult + 1;
			}
			if (this.nOff >= 0) 
			{
				this.lbPrinters.SetListSelectedIndex(this.nOff);
			}

			// Return PalToolTipSetText( hWndItem
			// ,
			// 	"Tabelle mit Abfrage-Ergebnis drucken" )
			#endregion
		}
		
		/// <summary>
		/// pbExport WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbExport_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbExport_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbExport_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.obExcel.Checked) 
			{
				MT.MTbl.ExportToExcel(this.tblNeg, MT.MTbl.MTE_LNG_GERMAN, SalString.Null, ((((MT.MTbl.MTE_EXCEL_NEW_INSTANCE | MT.MTbl.MTE_EXCEL_STRING_COLS_AS_TEXT) | Const.MTE_EXCEL_NO_CLIPBOARD) | Const.MTE_EXCEL_NO_AUTO_FIT_COL) | Const.MTE_EXCEL_NO_AUTO_FIT_ROW), 
					(MT.MTbl.MTE_COL_HEADERS | MT.MTbl.MTE_SHOW_STATUS), 0, Sys.ROW_Hidden, Sys.COL_Visible, 0);
			}
			else
			{
				Ext.MTblExportToOOCalc(App.frmPrintIds.tblPRID, MT.MTbl.MTE_LNG_GERMAN, SalString.Null, (Const.MTE_OOCALC_NEW_WORKBOOK | Const.MTE_OOCALC_STRING_COLS_AS_TEXT), (MT.MTbl.MTE_COL_HEADERS | MT.MTbl.MTE_SHOW_STATUS), 0, Sys.ROW_Hidden, Sys.COL_Visible, 
					0);
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblNeg
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblNegTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmNegativerSaldo _frmNegativerSaldo = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblNegTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmNegativerSaldo frmNegativerSaldo
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmNegativerSaldo == null) 
					{
						_frmNegativerSaldo = (frmNegativerSaldo)this.FindForm();
					}
					return _frmNegativerSaldo;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblNegTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblNegTableWindow)SalWindow.FromHandle(handle, typeof(tblNegTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colGFMemo WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colGFMemo_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colGFMemo_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colGFMemo_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				Int.SqlImmed("UPDATE a SET agfmemo = :frmNegativerSaldo.tblNeg.colGFMemo WHERE aarztnr = :frmNegativerSaldo.tblNeg.colArztNr");
				#endregion
			}
			
			/// <summary>
			/// colDM WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDM_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colDM_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDM_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				// 25.01.24 ###
				if (Int.PalCheckAuslTA(this.colArztNr.Number) == "EU") 
				{
					this.colDMBrutto.Number = this.colDM.Number;
				}
				else
				{
					this.colDMBrutto.Number = this.colDM.Number + (this.colDM.Number * Var.nMwStVoll).Round() / 100;
				}

				this.colSaldomitBelastung.Number = this.colSaldo.Number - this.colDMBrutto.Number;
				if (this.colSaldomitBelastung.Number < 0) 
				{
					this.colBrief.Number = 1;
				}
				else
				{
					this.colBrief.Number = 0;
				}
				#endregion
			}
			
			/// <summary>
			/// colDMBrutto WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDMBrutto_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colDMBrutto_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDMBrutto_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				// 25.01.24 ###
				if (Int.PalCheckAuslTA(this.colArztNr.Number) == "EU") 
				{
				}
				else
				{
					this.colDM.Number = this.colDM.Number + (this.colDM.Number * Var.nMwStVoll).Round() / 100;
				}

				this.colSaldomitBelastung.Number = this.colSaldo.Number - this.colDM.Number;
				if (this.colSaldomitBelastung.Number < 0) 
				{
					this.colBrief.Number = 1;
				}
				else
				{
					this.colBrief.Number = 0;
				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalNextRowLocals
			{
				public SalNumber nPRow = 0;
			}
		}
		#endregion
	}
}
