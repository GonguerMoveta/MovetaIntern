// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmZahlHalter : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlZa = SalSqlHandle.Null;
		public SalSqlHandle hSqlHB = SalSqlHandle.Null;
		public SalNumber nFetch = 0;
		public SalNumber nBuchDM = 0;
		public SalString strBuchText = "";
		public SalString strBankKonto = "";
		public SalNumber nBankKonto = 0;
		public SalNumber nIndex = 0;
		public SalNumber nRestL = 0;
		public SalNumber nRestA = 0;
		public SalNumber nRestM = 0;
		public SalNumber nRestZ = 0;
		public SalNumber nMahnstufe = 0;
		public SalString strErgebnis = "";
		public SalNumber nBatchDM = 0;
		public SalBoolean bOk = false;
		public SalNumber nZCount = 0;
		public SalNumber nProzNr = 0;
		public SalNumber nZeit = 0;
		public SalDateTime dt1 = SalDateTime.Null;
		public SalDateTime dt2 = SalDateTime.Null;
		public SalNumber nResult = 0;
		public SalNumber nLPeriode = 0;
		public SalDateTime dtLvon = SalDateTime.Null;
		public SalDateTime dtLbis = SalDateTime.Null;
		public SalNumber nFPeriode = 0;
		public SalDateTime dtFvon = SalDateTime.Null;
		public SalDateTime dtFbis = SalDateTime.Null;
		public SalNumber nJDruck = 0;
		public SalNumber nJManuell = 0;
		public SalNumber nJSperre = 0;
		public SalNumber nArztNr = 0;
		public SalNumber nArztNr2 = 0;
		public SalNumber nBankeinzug = 0;
		public SalNumber nRZNr = 0;
		public SalNumber nDMHB = 0;
		public SalNumber nRetHB = 0;
		public SalNumber nRZZahlKZ = 0;
		public SalNumber nRZArztNr = 0;
		public SalBoolean bRZMS9 = false;
		public SalString lsText = "";
		public SalNumber nHBGesamt = 0;
		public SalNumber nDummy = 0;
		public SalNumber nRZKleinbetrag = 0;
		public SalNumber nNetto = 0;
		public SalNumber nMwSt = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmZahlHalter()
		{
			// Assign global reference.
			App.frmZahlHalter = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmZahlHalter CreateWindow(Control owner)
		{
			frmZahlHalter frm = new frmZahlHalter();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmZahlHalter FromHandle(SalWindowHandle handle)
		{
			return ((frmZahlHalter)SalWindow.FromHandle(handle, typeof(frmZahlHalter)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <param name="nPRZNr"></param>
		/// <returns></returns>
		public SalNumber PalCheckHaBu(SalNumber nPRZNr)
		{
			#region Local Variables
			SqlLocals.PalCheckHaBuLocals locals = new SqlLocals.PalCheckHaBuLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.nPRZNr = nPRZNr;

				locals.nSumHB = 0;
				// 16.08.18 F3187
				locals.nZahlDM = dfZahlDM.Number;
				// 06.04.10 OTÄ135
				Int.SqlConnection(ref hSqlHB);
				// Call SqlImmedSel( 'SELECT sum(hbdm) INTO :frmZahlHalter.dfDMHaBu FROM hb, rz, rzp WHERE hbrznr=rznr AND rznr=rzpnr AND rzparztnr = :frmZahlHalter.dfArztNr AND rzphalternr = :frmZahlHalter.dfHalterNr AND rzprechnr= :frmZahlHalter.dfRechNr
				// AND rzaktivdat IS NOT NULL')
				// ! 13.09.10 OTF751 rzparztnr = :frmZahlHalter.dfArztNr -->> ' || PalArztNr('rzp', dfArztNr, nArztNr2) || '
				// 03.12.10 raus:
				// AND rzprechnr = :frmZahlHalter.dfRechNr
				// Set strPSelect = 'SELECT hbrznr, min(rzarztnr), sum(hbdm) INTO :frmZahlHalter.nRZNr, :frmZahlHalter.nRZArztNr, :frmZahlHalter.nDMHB
				// FROM hb, rz, rzp
				// WHERE hbrznr=rznr AND rznr=rzpnr
				// AND ' || PalArztNr('rzp', dfArztNr, nArztNr2) || '
				// AND rzphalternr = :frmZahlHalter.dfHalterNr
				// AND rzaktivdat IS NOT NULL'
				// 22.12.11 F695  + AND rzprechnr = :frmZahlHalter.dfRechNr
				// 07.11.16 Ä1436 + Zi
				locals.strPSelect = @"SELECT hbrznr, min(rzarztnr) INTO :frmZahlHalter.nRZNr, :frmZahlHalter.nRZArztNr
FROM hb, rz, rzp
WHERE hbrznr=rznr AND rznr=rzpnr
AND " + Int.PalArztNr("rzp", dfArztNr.Number, nArztNr2) + @"
AND rzphalternr = :frmZahlHalter.dfHalterNr
AND rzaktivdat IS NOT NULL
AND hbcode LIKE 'Zi%' AND rzdeaktiv IS NULL ";
				if (locals.nPRZNr != 0) 
				{
					locals.strPSelect = locals.strPSelect + " AND rznr = " + locals.nPRZNr.ToString(0);
				}
				// 23.02.15 F2292 von oben hierher
				if (dfRechNr.Number != 0 && dfRechNr.Number != Sys.NUMBER_Null) 
				{
					locals.strPSelect = locals.strPSelect + " AND rzprechnr = :frmZahlHalter.dfRechNr ";
				}

				locals.strPSelect = locals.strPSelect + " GROUP BY 1";
				Int.SqlHandleExec(hSqlHB, locals.strPSelect, "ZahlHalter: RaZa-Prüflauf", ref Var.nErr);
				nFetch = hSqlHB.FetchNext();
				while (nFetch != Sys.FETCH_EOF) 
				{
					// 21.12.10
					Int.SqlImmedSel(@"SELECT sum(hbdm) INTO :frmZahlHalter.nDMHB FROM hb WHERE hbrznr = :frmZahlHalter.nRZNr
AND hbcode LIKE 'Zi%'");
					// 12.01.11 F829 +  or nDMHB > 0
					if (nDMHB == SalNumber.Null || nDMHB > 0) 
					{
						nDMHB = 0;
					}
					else if ((nDMHB * -1) > locals.nZahlDM)  // 23.04.10 nDMHB < dfZahlDM ---> (nDMHB*-1) > dfZahlDM	16.08.18 F3187 dfZahlDM -> nZahlDM
					{
						nDMHB = locals.nZahlDM * -1;
						nRZZahlKZ = 1;
					}
					else
					{
						nRZZahlKZ = 2;
					}
					if (nDMHB != 0) 
					{
						// 16.08.18 F3187
						locals.nZahlDM = locals.nZahlDM + nDMHB;

						// 28.05.21 Ä1962
						// Set strBuchText = 'Halterko.'  || PalStrNum( nRZArztNr, 4, 0 ) || '/' || PalStrNum( dfHalterNr, 5, 0 )
						strBuchText = "Halterkonto " + Int.PalStrNum(nRZArztNr, 4, 0) + "/" + Int.PalStrNum(dfHalterNr.Number, 5, 0);
						// TVN
						nBankKonto = Int.PalValNum(strBankKonto);
						nDMHB = nDMHB * -1;
						nBuchDM = (nDMHB * 100m / 2).Round() / 100;
						// 06.03.23 Ä2086
						Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
						if (dfBuchDat.DateTime < Var.dtINIMinBuchDat) 
						{
							dfBuchDat.DateTime = Var.dtINIMinBuchDat;
						}

						// 31.07.23 Ä2126 + , fiexportnr
						Int.SqlImmed(@"
INSERT INTO FI
( fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiarztnr, fihalternr, firechnr, fiexportnr )
VALUES
( 0, :frmZahlHalter.nBankKonto , 16000, :frmZahlHalter.dfBelNr , :frmZahlHalter.dfBuchDat , :frmZahlHalter.strBuchText , :frmZahlHalter.nBuchDM , 9, :frmZahlHalter.nRZArztNr , :frmZahlHalter.dfHalterNr , NULL, :frmZahlHalter.dfExportNr )");
						// 20.11.23 Ä2144 + tkkontocode
						Int.SqlImmed(@"
INSERT INTO TK
( tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkkontocode )
VALUES
( :frmZahlHalter.nRZArztNr , 1, 0, :frmZahlHalter.strBuchText, :frmZahlHalter.dfHalterNr , NULL, :frmZahlHalter.dfBelNr , :frmZahlHalter.dfBuchDat ,
0, 0, 1, 0, 0, 0, 0, :frmZahlHalter.nBuchDM ,
0, 0, 2, 0, 0, 0, :frmZahlHalter.nBuchDM, 'Zahlg-bezHalterZins' )");
						// TA
						// TVN
						// 14.04.14 Ä1046
						if (Int.PalCheckAuslTA(this.nRZArztNr) == "EU") 
						{
							App.frmMain.nErloeskonto = 81360;
						}
						else
						{
							App.frmMain.nErloeskonto = 81310;
						}

						nBuchDM = nDMHB - nBuchDM;
						// 31.07.23 Ä2126 + , fiexportnr
						Int.SqlImmed(@"
INSERT INTO FI
( fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiarztnr, fihalternr, firechnr, fiexportnr )
VALUES
( 0, :frmZahlHalter.nBankKonto , :frmMain.nErloeskonto, :frmZahlHalter.dfBelNr , :frmZahlHalter.dfBuchDat , :frmZahlHalter.strBuchText , :frmZahlHalter.nBuchDM , 9, :frmZahlHalter.nRZArztNr , :frmZahlHalter.dfHalterNr , NULL,
:frmZahlHalter.dfExportNr )");

						// 13.05.14 F2027
						dfHalterNr.Number = Int.PalCheckNULL(dfHalterNr.Number);

						// 26.03.19 Ä1844 + , zaerfdat
						Int.SqlImmed(@"
INSERT INTO ZA
( zaarztnr, zahalternr, zarechnr, zakz, zabuchdat, zabelegnr, zadm, zabuchtext, zarznr, zaerfdat )
VALUES
( :frmZahlHalter.nRZArztNr, :frmZahlHalter.dfHalterNr, 0, :frmZahlHalter.nRZZahlKZ, :frmZahlHalter.dfBuchDat, :frmZahlHalter.dfBelNr, :frmZahlHalter.nDMHB, 'Halterkonto', :frmZahlHalter.nRZNr,
SYSDATETIME )");
						Int.SqlImmed(@"INSERT INTO hb (hbarztnr, hbhalternr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext, hbrznr)
VALUES(:frmZahlHalter.nRZArztNr, :frmZahlHalter.dfHalterNr, :frmZahlHalter.dfBuchDat, 'ZiZa', SYSDATETIME, :frmZahlHalter.nDMHB, :frmZahlHalter.nBankKonto, :frmMain.nErloeskonto, :frmZahlHalter.strBuchText, :frmZahlHalter.nRZNr)");
						locals.nSumHB = locals.nSumHB + nDMHB;
						// Call SqlImmed('UPDATE rz SET rzltztzinsdat = SYSDATE WHERE rznr = :frmRaZa.nRZNr')
					}

					nFetch = hSqlHB.FetchNext();
				}
				hSqlHB.Commit();
				// 12.02.18 Ä1697
				if (nRZKleinbetrag == SalNumber.Null) 
				{
					nRZKleinbetrag = 5;
				}
				Int.SqlImmedSel("SELECT sum(hbdm) INTO :frmZahlHalter.nDMHB FROM hb WHERE " + Int.PalArztNr("hb", dfArztNr.Number, nArztNr2) + @"
AND hbhalternr = :frmZahlHalter.dfHalterNr
AND hbcode LIKE 'Zi%'");
				if ((nDMHB * -1) <= nRZKleinbetrag && (nDMHB * -1) > 0) 
				{
					locals.strPSelect = @"SELECT hbrznr, min(hbarztnr) INTO :frmZahlHalter.nRZNr, :frmZahlHalter.nRZArztNr
FROM hb
WHERE " + Int.PalArztNr("hb", dfArztNr.Number, nArztNr2) + @"
AND hbhalternr = :frmZahlHalter.dfHalterNr
AND hbcode LIKE 'Zi%' GROUP BY 1";

					Int.SqlHandleExec(hSqlHB, locals.strPSelect, "ZahlHalter: RaZa-Prüflauf2", ref Var.nErr);
					nFetch = hSqlHB.FetchNext();
					while (nFetch != Sys.FETCH_EOF) 
					{
						Int.SqlImmedSel(@"SELECT sum(hbdm) INTO :frmZahlHalter.nDMHB FROM hb WHERE hbrznr = :frmZahlHalter.nRZNr
AND hbcode LIKE 'Zi%'");
						if (nDMHB == SalNumber.Null || nDMHB > 0) 
						{
							nDMHB = 0;
						}
						// Else If (nDMHB*-1) > dfZahlDM
						// Set nDMHB = dfZahlDM * -1
						if (nDMHB != 0) 
						{
							// 06.03.23 Ä2086
							Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
							if (dfBuchDat.DateTime < Var.dtINIMinBuchDat) 
							{
								dfBuchDat.DateTime = Var.dtINIMinBuchDat;
							}

							// 28.05.21 Ä1962
							// Set strBuchText = 'Halterko.'  || PalStrNum( nRZArztNr, 4, 0 ) || '/' || PalStrNum( dfHalterNr, 5, 0 )
							strBuchText = "Halterkonto " + Int.PalStrNum(nRZArztNr, 4, 0) + "/" + Int.PalStrNum(dfHalterNr.Number, 5, 0);
							// TVN
							nBankKonto = Int.PalValNum(strBankKonto);
							nDMHB = nDMHB * -1;
							// 31.07.23 Ä2126 + , fiexportnr
							Int.SqlImmed(@"
INSERT INTO FI
( fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiarztnr, fihalternr, firechnr, fiexportnr )
VALUES
( 0, 16450 , 16000, :frmZahlHalter.dfBelNr , :frmZahlHalter.dfBuchDat , :frmZahlHalter.strBuchText , :frmZahlHalter.nDMHB , 9, :frmZahlHalter.nRZArztNr , :frmZahlHalter.dfHalterNr , NULL,
:frmZahlHalter.dfExportNr )");

							dfHalterNr.Number = Int.PalCheckNULL(dfHalterNr.Number);

							nRZZahlKZ = 4;
							// 26.03.19 Ä1844 + , zaerfdat
							Int.SqlImmed(@"
INSERT INTO ZA
( zaarztnr, zahalternr, zarechnr, zakz, zabuchdat, zabelegnr, zadm, zabuchtext, zarznr, zaerfdat )
VALUES
( :frmZahlHalter.nRZArztNr, :frmZahlHalter.dfHalterNr, 0, :frmZahlHalter.nRZZahlKZ, :frmZahlHalter.dfBuchDat, :frmZahlHalter.dfBelNr, :frmZahlHalter.nDMHB, 'Halterkonto', :frmZahlHalter.nRZNr,
SYSDATETIME )");
							Int.SqlImmed(@"INSERT INTO hb (hbarztnr, hbhalternr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext, hbrznr)
VALUES(:frmZahlHalter.nRZArztNr, :frmZahlHalter.dfHalterNr, :frmZahlHalter.dfBuchDat, 'ZiAu', SYSDATETIME, :frmZahlHalter.nDMHB, :frmZahlHalter.nBankKonto, :frmMain.nErloeskonto, :frmZahlHalter.strBuchText, :frmZahlHalter.nRZNr)");
							// Set nSumHB = nSumHB + nDMHB
							// Call SqlImmed('UPDATE rz SET rzltztzinsdat = SYSDATE WHERE rznr = :frmRaZa.nRZNr')
						}

						nFetch = hSqlHB.FetchNext();
					}
					hSqlHB.Commit();
				}
				// !
				hSqlHB.Disconnect();

				return locals.nSumHB;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalCheckBEZRet()
		{
			#region Local Variables
			SalNumber nSumHB = 0;
			SalString strPSelect = "";
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				// 07.11.16 Ä1436 BEZ-Retoure
				nSumHB = 0;
				Int.SqlConnection(ref hSqlHB);
				Int.SqlImmedSel("SELECT sum(hbdm) INTO :frmZahlHalter.nDMHB FROM hb WHERE " + Int.PalArztNr("hb", dfArztNr.Number, nArztNr2) + @"
AND hbhalternr = :frmZahlHalter.dfHalterNr
AND hbcode LIKE 'BEZ%'");
				if (nDMHB == SalNumber.Null || nDMHB > 0) 
				{
					nDMHB = 0;
				}
				else if ((nDMHB * -1) > dfZahlDM.Number)  // 23.04.10 nDMHB < dfZahlDM ---> (nDMHB*-1) > dfZahlDM
				{
					nDMHB = dfZahlDM.Number * -1;
				}

				if (nDMHB != 0) 
				{
					// 06.03.23 Ä2086
					Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
					if (dfBuchDat.DateTime < Var.dtINIMinBuchDat) 
					{
						dfBuchDat.DateTime = Var.dtINIMinBuchDat;
					}

					// 16.01.17 F2824 nRZArztNr -> dfArztNr
					// 28.05.21 Ä1962
					// Set strBuchText = 'Halterko.'  || PalStrNum( dfArztNr, 4, 0 ) || '/' || PalStrNum( dfHalterNr, 5, 0 )
					strBuchText = "Halterkonto " + Int.PalStrNum(dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(dfHalterNr.Number, 5, 0);

					// TVN
					nBankKonto = Int.PalValNum(strBankKonto);
					nDMHB = nDMHB * -1;
					// 16.01.17 F2824 auskommentiert, da hier der halbe Betrag nicht richtig ist
					// 07.03.17
					// Set nBuchDM = SalNumberRound(nDMHB * 100 / 2) / 100
					nBuchDM = nDMHB;
					// 13.02.17 Ä1497 16460 -> 15550
					// 31.07.23 Ä2126 + , fiexportnr
					Int.SqlImmed(@"
INSERT INTO FI
( fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiarztnr, fihalternr, firechnr, fiexportnr )
VALUES
( 0, :frmZahlHalter.nBankKonto , 15550, :frmZahlHalter.dfBelNr , :frmZahlHalter.dfBuchDat , :frmZahlHalter.strBuchText , :frmZahlHalter.nBuchDM , 9, :frmZahlHalter.dfArztNr , :frmZahlHalter.dfHalterNr , NULL,
:frmZahlHalter.dfExportNr )");
					// Call SqlImmed( '
					// INSERT INTO TK
					// ( tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
					// tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
					// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben )
					// VALUES
					// ( :frmZahlHalter.nRZArztNr , 1, 0, :frmZahlHalter.strBuchText, :frmZahlHalter.dfHalterNr , NULL, :frmZahlHalter.dfBelNr , :frmZahlHalter.dfBuchDat ,
					// 0, 0, 1, 0, 0, 0, 0, :frmZahlHalter.nBuchDM ,
					// 0, 0, 2, 0, 0, 0, :frmZahlHalter.nBuchDM )' )
					// TA
					// TVN
					// 14.04.14 Ä1046
					// Set frmMain.nErloeskonto = 81360
					// If PalCheckAuslTA( frmZahlHalter.nRZArztNr ) = 'EU'
					// Else
					// Set frmMain.nErloeskonto = 81310

					// Set nBuchDM = nDMHB - nBuchDM
					// Call SqlImmed( '
					// INSERT INTO FI
					// ( fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiarztnr, fihalternr, firechnr )
					// VALUES
					// ( 0, :frmZahlHalter.nBankKonto , :frmMain.nErloeskonto, :frmZahlHalter.dfBelNr , :frmZahlHalter.dfBuchDat , :frmZahlHalter.strBuchText , :frmZahlHalter.nBuchDM , 9, :frmZahlHalter.nRZArztNr , :frmZahlHalter.dfHalterNr , NULL )' )

					// 13.05.14 F2027
					dfHalterNr.Number = Int.PalCheckNULL(dfHalterNr.Number);

					// 26.03.19 Ä1844 + , zaerfdat
					Int.SqlImmed(@"
INSERT INTO ZA
( zaarztnr, zahalternr, zarechnr, zakz, zabuchdat, zabelegnr, zadm, zabuchtext, zaerfdat )
VALUES
( :frmZahlHalter.dfArztNr, :frmZahlHalter.dfHalterNr, 0, 0, :frmZahlHalter.dfBuchDat, :frmZahlHalter.dfBelNr, :frmZahlHalter.nDMHB, 'Halterkonto', SYSDATETIME )");
					Int.SqlImmed(@"INSERT INTO hb (hbarztnr, hbhalternr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
VALUES(:frmZahlHalter.dfArztNr, :frmZahlHalter.dfHalterNr, :frmZahlHalter.dfBuchDat, 'BEZZa', SYSDATETIME, :frmZahlHalter.nDMHB, :frmZahlHalter.nBankKonto, :frmMain.nErloeskonto, :frmZahlHalter.strBuchText)");
					// 25.02.19 F3137
					Int.SqlImmed("UPDATE hb SET hbreteinzdat=NULL WHERE " + Int.PalArztNr("hb", dfArztNr.Number, nArztNr2) + @"
AND hbhalternr = :frmZahlHalter.dfHalterNr
AND hbcode LIKE 'BEZ%' AND hbreteinzdat IS NOT NULL");

					nSumHB = nSumHB + nDMHB;
				}
				hSqlHB.Commit();
				// !
				hSqlHB.Disconnect();

				return nSumHB;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPRZNr"></param>
		/// <returns></returns>
		public SalBoolean PalCheckRZMS9(SalNumber nPRZNr)
		{
			#region Local Variables
			SalBoolean bPExists = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				// Set strPSelect = 'SELECT hbrznr, min(rzarztnr) INTO :frmZahlHalter.nRZNr, :frmZahlHalter.nRZArztNr
				// FROM hb, rz, rzp
				// WHERE hbrznr=rznr AND rznr=rzpnr
				// AND ' || PalArztNr('rzp', dfArztNr, nArztNr2) || '
				// AND rzphalternr = :frmZahlHalter.dfHalterNr
				// AND rzaktivdat IS NOT NULL'
				bPExists = false;
				if (nPRZNr != SalNumber.Null) 
				{
					// 12.09.11 Ä643
					// Call SqlIstDa( 'FROM rzp, rk
					// WHERE rzpnr = ' || SalNumberToStrX( nPRZNr, 0 ) || '
					// AND rzparztnr = rkarztnr AND rzphalternr = rkhalternr
					// AND rzprechnr = rkrechnr
					// AND rkmahnstufe = 9', bPExists )
					// 16.07.12 F1361 rkrechnr >= 99990  --->> rkrechnr >= 999990
					Int.SqlIstDa(@"FROM rzp, rk
WHERE rzpnr = " + nPRZNr.ToString(0) + @"
AND rzparztnr = rkarztnr AND rzphalternr = rkhalternr
AND rzprechnr = rkrechnr
AND (rkmahnstufe = 9 OR rkrechnr >= 999990) AND rkdeaktiv IS NULL ", ref bPExists);
				}
				return bPExists;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nBetrag"></param>
		/// <returns></returns>
		public SalNumber PalBuchUeberschZins(SalNumber nBetrag)
		{
			#region Local Variables
			SalNumber nSumHB = 0;
			SalString strPSelect = "";
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				nSumHB = 0;
				// 06.04.10 OTÄ135
				// Call SqlConnection(hSqlHB)
				if (nBetrag != 0) 
				{
					// 28.05.21 Ä1962
					// Set strBuchText = 'AbschlZins'  || PalStrNum( dfArztNr, 4, 0 ) || '/' || PalStrNum( dfHalterNr, 5, 0 )
					strBuchText = ("Abschluss Zinsen" + Int.PalStrNum(dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(dfHalterNr.Number, 5, 0)).Left(50);
					// TVN
					nBankKonto = Int.PalValNum(strBankKonto);
					// Set nDMHB = nDMHB * -1
					nDMHB = nBetrag;
					nBuchDM = (nDMHB * 100m / 2).Round() / 100;
					// 06.03.23 Ä2086
					Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
					if (dfBuchDat.DateTime < Var.dtINIMinBuchDat) 
					{
						dfBuchDat.DateTime = Var.dtINIMinBuchDat;
					}

					// 31.07.23 Ä2126 + , fiexportnr
					Int.SqlImmed(@"
INSERT INTO FI
( fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiarztnr, fihalternr, firechnr, fiexportnr )
VALUES
( 0, :frmZahlHalter.nBankKonto , 16000, :frmZahlHalter.dfBelNr , :frmZahlHalter.dfBuchDat , :frmZahlHalter.strBuchText , :frmZahlHalter.nBuchDM , 9, :frmZahlHalter.dfArztNr , :frmZahlHalter.dfHalterNr , NULL,
:frmZahlHalter.dfExportNr )");
					// 20.11.23 Ä2144 + tkkontocode
					Int.SqlImmed(@"
INSERT INTO TK
( tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkkontocode )
VALUES
( :frmZahlHalter.dfArztNr , 1, 0, :frmZahlHalter.strBuchText, :frmZahlHalter.dfHalterNr , NULL, :frmZahlHalter.dfBelNr , :frmZahlHalter.dfBuchDat ,
0, 0, 1, 0, 0, 0, 0, :frmZahlHalter.nBuchDM ,
0, 0, 2, 0, 0, 0, :frmZahlHalter.nBuchDM, 'Zahlg-bezHalterZins' )");
					lsText = "***** Überschuß-Halterzins gezahlt (Mitglied € " + Int.PalStrNum(nBuchDM, 8, 2) + " / moveta € ";
					// TA
					// 14.04.14 Ä1046
					if (Int.PalCheckAuslTA(this.dfArztNr.Number) == "EU") 
					{
						App.frmMain.nErloeskonto = 81360;
					}
					else
					{
						App.frmMain.nErloeskonto = 81310;
					}
					// TVN
					nBuchDM = nDMHB - nBuchDM;
					// 31.07.23 Ä2126 + , fiexportnr
					Int.SqlImmed(@"
INSERT INTO FI
( fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiarztnr, fihalternr, firechnr, fiexportnr )
VALUES
( 0, :frmZahlHalter.nBankKonto , :frmMain.nErloeskonto, :frmZahlHalter.dfBelNr , :frmZahlHalter.dfBuchDat , :frmZahlHalter.strBuchText , :frmZahlHalter.nBuchDM , 9, :frmZahlHalter.dfArztNr ,
:frmZahlHalter.dfHalterNr , NULL, :frmZahlHalter.dfExportNr )");
					// 04.07.11 F936
					lsText = lsText + Int.PalStrNum(nBuchDM, 8, 2) + ")";
					// 13.05.14 F2027
					dfHalterNr.Number = Int.PalCheckNULL(dfHalterNr.Number);

					Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmZahlHalter.dfArztNr, :frmZahlHalter.dfHalterNr, 0,
:frmZahlHalter.lsText , SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");

					// Call SqlImmed( '
					// INSERT INTO ZA
					// ( zaarztnr, zahalternr, zarechnr, zakz, zabuchdat, zabelegnr, zadm, zabuchtext, zarznr )
					// VALUES
					// ( :frmZahlHalter.dfArztNr, :frmZahlHalter.dfHalterNr, 0, :frmZahlHalter.nRZZahlKZ, :frmZahlHalter.dfBuchDat, :frmZahlHalter.dfBelNr, :frmZahlHalter.nDMHB, \'Halterkonto\', :frmZahlHalter.nRZNr )' )
					// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext, hbrznr)
					// VALUES(:frmZahlHalter.dfArztNr, :frmZahlHalter.dfHalterNr, :frmZahlHalter.dfBuchDat, \'ZiZa\', SYSDATETIME, :frmZahlHalter.nDMHB, :frmZahlHalter.nBankKonto, 81310, :frmZahlHalter.strBuchText, :frmZahlHalter.nRZNr)')
					// Call SqlImmed('UPDATE rz SET rzltztzinsdat = SYSDATE WHERE rznr = :frmRaZa.nRZNr')
				}
				// Call SqlCommit( hSqlHB )
				// !
				// Call SqlDisconnect(hSqlHB)

			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalHoleHalter()
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hbankeinzug
into :frmZahlHalter.dfHalterName, :frmZahlHalter.nBankeinzug
from H where  harztnr = :frmZahlHalter.dfArztNr AND hhalternr = :frmZahlHalter.dfHalterNr AND hdeaktiv IS NULL  ");
				// 29.06.09 OTÄ130 Bankeinzug
				if (nBankeinzug == 1) 
				{
					dfSBankeinzug.Text = "Bankeinzug: ja";
				}
				else
				{
					dfSBankeinzug.Text = "";
				}

				// 23.03.01 auf Anforderung von Fr. Hennecke rausgenommen.
				// Call SqlImmedSel('SELECT rkrechnr, rkrechdat, rkdmleis, rkdmarzn, rkdmmahn+rkmbdmopl, rkdmzins,
				// (rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins),rkmahnstufe
				// INTO
				// :frmZahlHalter.dfRechNr,
				// :frmZahlHalter.dfRechDat,
				// :frmZahlHalter.dfDMLeis,
				// :frmZahlHalter.dfDMArzn,
				// :frmZahlHalter.dfDMMahn,
				// :frmZahlHalter.dfDMZins,
				// :frmZahlHalter.dfDMRest,
				// :frmZahlHalter.dfMS
				// FROM RK
				// WHERE rkarztnr IN (:frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2) AND rkhalternr = :frmZahlHalter.dfHalterNr AND
				// rkkzzahl not in (2,3,4,5) AND
				// (rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)<>0
				// ORDER BY rkrechdat')
				// 06.09.16
				dfSum.Number = 0;
				dfSumHF.Number = 0;
				dfSumMG.Number = 0;
				dfSumZI.Number = 0;
				// 10.01.18 Ä1682
				dfBuchSum.Number = 0;
				dfProzOP.Number = Sys.NUMBER_Null;
				Sal.HideWindowAndLabel(dfProzOP);

				// 08.01.18 Ä1681 Leis, Arzn -> Leis + Arzn / Mahn -> Mahn - ZaMahn / Zins -> Zins - ZaZins
				tblRechnungen.Populate(hSqlZa, @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkdmleis + rkdmarzn - rkzaleis - rkzaarzn, rkdmmahn+rkmbdmopl-rkzamahn-rkmbzaopl, rkdmzins-rkzazins,
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins),rkmahnstufe
INTO :frmZahlHalter.tblRechnungen.colnArztNr,
:frmZahlHalter.tblRechnungen.colnHalterNr,
:frmZahlHalter.tblRechnungen.colnRechNr,
:frmZahlHalter.tblRechnungen.coldtRechDat,
:frmZahlHalter.tblRechnungen.colnDMLeis,
:frmZahlHalter.tblRechnungen.colnDMMahn,
:frmZahlHalter.tblRechnungen.colnDMZins,
:frmZahlHalter.tblRechnungen.colnDMRest,
:frmZahlHalter.tblRechnungen.colnMS
FROM RK
WHERE " + Int.PalArztNr("rk", nArztNr, nArztNr2) + @" AND rkhalternr = :frmZahlHalter.dfHalterNr AND
rkkzzahl not in (2,3,4,5) AND
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)<>0 AND rkdeaktiv IS NULL
ORDER BY rkrechdat", Sys.TBL_FillAll);
				// 25.02.19 F3137
				tblBEZRetEinzug.ResetTable();
				tblBEZRetEinzug.Populate(hSqlZa, @"SELECT hbbuchdat, SUM(hbdm * -1)
INTO :frmZahlHalter.tblBEZRetEinzug.colDatum,
:frmZahlHalter.tblBEZRetEinzug.colDM
FROM hb
WHERE " + Int.PalArztNr("hb", nArztNr, nArztNr2) + @" AND hbhalternr = :frmZahlHalter.dfHalterNr AND hbreteinzdat IS NOT NULL AND hbcode LIKE 'BEZ%'
GROUP BY 1", Sys.TBL_FillAll);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalHoleMahnNr()
		{
			#region Actions
			using (new SalContext(this))
			{
				// 27.11.18
				Int.SqlImmedSel(@"SELECT rkarztnr, rkhalternr
INTO :frmZahlHalter.dfArztNr, :frmZahlHalter.dfHalterNr
FROM RK, MA
WHERE manr = :frmZahlHalter.dfMahnNr AND maarztnr=rkarztnr AND marechnr=rkrechnr AND rkdeaktiv IS NULL ");

				Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hbankeinzug
into :frmZahlHalter.dfHalterName, :frmZahlHalter.nBankeinzug
from H where  harztnr = :frmZahlHalter.dfArztNr AND hhalternr = :frmZahlHalter.dfHalterNr AND hdeaktiv IS NULL  ");
				// 29.06.09 OTÄ130 Bankeinzug
				if (nBankeinzug == 1) 
				{
					dfSBankeinzug.Text = "Bankeinzug: ja";
				}
				else
				{
					dfSBankeinzug.Text = "";
				}
				// 13.12.18 F3969
				Int.SqlImmedSel(@"SELECT aname1, anr2, arazakleinbetrag
into :frmZahlHalter.dfArztName, :frmZahlHalter.nArztNr2, :frmZahlHalter.nRZKleinbetrag
from A where aarztnr=:frmZahlHalter.dfArztNr");
				nArztNr = dfArztNr.Number;
				if (nArztNr2 == SalNumber.Null || nArztNr2 == 0) 
				{
					nArztNr2 = dfArztNr.Number;
				}

				// 06.09.16
				dfSum.Number = 0;
				dfSumHF.Number = 0;
				dfSumMG.Number = 0;
				dfSumZI.Number = 0;
				// 10.01.18 Ä1682
				dfBuchSum.Number = 0;
				dfProzOP.Number = Sys.NUMBER_Null;
				Sal.HideWindowAndLabel(dfProzOP);

				// 08.01.18 Ä1681 Leis, Arzn -> Leis + Arzn / Mahn -> Mahn - ZaMahn / Zins -> Zins - ZaZins
				tblRechnungen.Populate(hSqlZa, @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkdmleis + rkdmarzn - rkzaleis - rkzaarzn, rkdmmahn+rkmbdmopl-rkzamahn-rkmbzaopl, rkdmzins-rkzazins,
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins),rkmahnstufe
INTO :frmZahlHalter.tblRechnungen.colnArztNr,
:frmZahlHalter.tblRechnungen.colnHalterNr,
:frmZahlHalter.tblRechnungen.colnRechNr,
:frmZahlHalter.tblRechnungen.coldtRechDat,
:frmZahlHalter.tblRechnungen.colnDMLeis,
:frmZahlHalter.tblRechnungen.colnDMMahn,
:frmZahlHalter.tblRechnungen.colnDMZins,
:frmZahlHalter.tblRechnungen.colnDMRest,
:frmZahlHalter.tblRechnungen.colnMS
FROM RK, MA
WHERE manr = :frmZahlHalter.dfMahnNr AND maarztnr=rkarztnr AND marechnr=rkrechnr AND
rkkzzahl not in (2,3,4,5) AND
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)<>0 AND rkdeaktiv IS NULL
ORDER BY rkrechdat", Sys.TBL_FillAll);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalGet1234()
		{
			#region Local Variables
			SalNumber nRet = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				nIndex = Sal.ListQuerySelection(lbBank);
				Sal.ListQueryText(lbBank, nIndex, ref strBankKonto);
				strBankKonto = strBankKonto.Left(5);
				nRet = Int.PalGetProfileInt(Var.strBNZei, strBankKonto, 0) / 100;
				return nRet;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="n1234"></param>
		/// <returns></returns>
		public SalNumber PalSet1234(SalNumber n1234)
		{
			#region Actions
			using (new SalContext(this))
			{
				nIndex = Sal.ListQuerySelection(lbBank);
				Sal.ListQueryText(lbBank, nIndex, ref strBankKonto);
				strBankKonto = strBankKonto.Left(5);
				Int.PalSetProfileString(Var.strBNZei, strBankKonto, (n1234 * 100).ToString(0));
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmZahlHalter WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmZahlHalter_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmZahlHalter_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmZahlHalter_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmZahlHalter_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			Int.SqlConnection(ref this.hSqlZa);
			// Call SqlConnection(hSqlRp)
			// 24.4.97
			// Call SqlPrepare(hSqlRp,'SELECT rpmwst, rpla, sum(rpdm), sum(rpdmzahl)
			// INTO :nProzMwSt, :strLA,
			// :nRPDM, :nRPZahl
			// FROM RP
			// WHERE rparztnr= :nArzt
			// AND rprechnr = :nRech
			// AND rpmwst IS NOT NULL
			// GROUP BY 1,2
			// ORDER BY rpmwst desc, rpla desc')
			// Call SqlPrepare(hSqlRp,'SELECT rpmwst, rpla, sum(rpdm), sum(rpdmzahl)
			// INTO :nProzMwSt, :strLA,
			// :nRPDM, :nRPZahl
			// FROM RP
			// WHERE rparztnr= :nArzt
			// AND rprechnr = :nRech  GROUP BY 1,2
			// ORDER BY rpmwst desc, rpla desc')
			// Call SqlConnection(hSqlZX)
			// Call SqlPrepare(hSqlZX,'UPDATE RP SET rpdmzahl = (:nDiverse - :nRP1MwSt)
			// WHERE ROWID = :strPalZahlROWID')
			this.lbBank.PopulateList(this.hSqlZa, "SELECT * FROM BS ORDER BY BSNR");
			this.lbBank.SetListSelectedIndex(1);
			// 15.02.16 Ä1345
			// Set df1234=0
			this.df1234.Number = this.PalGet1234();

			this.dfBuchDat.DateTime = SalDateTime.Current;
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmZahlHalter_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SqlDisconnect( hSqlRp )
			this.hSqlZa.Disconnect();
			// Call SqlDisconnect(hSqlZX)
			#endregion
		}
		
		/// <summary>
		/// dfZahlDM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfZahlDM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfZahlDM_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfZahlDM_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 17.04.09 OTÄ204
			this.cmbProzNr.ClearList();
			this.cmbProzNr.Text = "";
			// 10.01.18 Ä1682
			this.dfProzOP.Number = Sys.NUMBER_Null;
			this.dfProzOP.HideWindowAndLabel();

			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 24.11.99 ,anr2
			Int.SqlImmedSel(@"SELECT aname1, anr2, arazakleinbetrag
into :frmZahlHalter.dfArztName, :frmZahlHalter.nArztNr2, :frmZahlHalter.nRZKleinbetrag
from A where aarztnr=:frmZahlHalter.dfArztNr");
			this.nArztNr = this.dfArztNr.Number;
			if (this.nArztNr2 == SalNumber.Null || this.nArztNr2 == 0) 
			{
				this.nArztNr2 = this.dfArztNr.Number;
			}

			// 30.07.09 OTÄ204
			this.cmbProzNr.ClearList();
			this.cmbProzNr.Text = "";
			// 10.02.10 OTF381
			this.nProzNr = 0;
			// 10.01.18 Ä1682
			this.dfProzOP.Number = Sys.NUMBER_Null;
			this.dfProzOP.HideWindowAndLabel();

			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			this.PalHoleHalter();
			// 30.07.09 OTÄ204
			this.cmbProzNr.ClearList();
			this.cmbProzNr.Text = "";
			// 10.01.18 Ä1682
			this.dfProzOP.Number = Sys.NUMBER_Null;
			this.dfProzOP.HideWindowAndLabel();

			// 23.02.15
			// 29.05.15 F2398 auskommentiert
			// Call SqlImmedSel( 'SELECT sum(hbdm) INTO :frmZahlHalter.dfDMHaBu FROM hb, rz, rzp WHERE hbrznr=rznr AND rznr=rzpnr AND rzparztnr = :frmZahlHalter.dfArztNr AND rzphalternr = :frmZahlHalter.dfHalterNr  AND rzaktivdat IS NOT NULL')
			// Call SqlImmedSel( 'SELECT sum(hbdm) INTO :frmZahlHalter.nHBGesamt FROM hb WHERE hbarztnr = :frmZahlHalter.dfArztNr AND hbhalternr = :frmZahlHalter.dfHalterNr')
			// 11.05.15 F2398 ">" -> "<"
			// If dfDMHaBu < nHBGesamt
			// Set dfDMHaBu = nHBGesamt
			// If dfDMHaBu = NUMBER_Null
			// Set dfDMHaBu = 0
			// If dfDMHaBu != 0
			// Set dfDMHaBu = dfDMHaBu * -1
			this.dfDMHaBu.HideWindow();
			this.dfDMHaBuHalter.HideWindow();
			this.dfDMHaBuHalterBEZRet.HideWindow();


			// 29.05.15 F2398 auskommentiert
			// Set frmZahlHalter.nZCount = SqlGetAnzahl( 'FROM rzp WHERE rzparztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2)
			// AND rzphalternr = :frmZahlHalter.dfHalterNr' )
			this.nZCount = Int.SqlGetAnzahl(@"FROM rz WHERE rzarztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2)
AND rzhalternr = :frmZahlHalter.dfHalterNr AND rzdeaktiv IS NULL  AND rznr IN
(SELECT hbrznr FROM hb WHERE hbarztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2)
AND hbhalternr = :frmZahlHalter.dfHalterNr GROUP BY 1 having SUM(hbdm)<>0)");

			if (this.nZCount >= 1) 
			{
				// 23.02.15 F2292 dfRZNr -> cmbRZNr
				this.nRZNr = Int.PalValNum(this.cmbRZNr.Text);
				if (this.nRZNr == 0) 
				{
					// 29.05.15 F2398 auskommentiert
					// Call SqlImmedSel('SELECT rzpnr INTO :frmZahlHalter.nRZNr FROM rzp WHERE rzparztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2) AND rzphalternr = :frmZahlHalter.dfHalterNr ORDER BY rzpnr DESC')
					Int.SqlImmedSel("SELECT hbrznr INTO :frmZahlHalter.nRZNr FROM hb WHERE hbarztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2) AND hbhalternr = :frmZahlHalter.dfHalterNr AND hbrznr IS NOT NULL ORDER BY hbrznr DESC");

				}
				this.cmbRZNr.Text = this.nRZNr.ToString(0);
				this.cmbRZNr.ClearList();
				// 29.05.15 F2398 auskommentiert
				// Call SqlPrepare(hSqlZa, 'SELECT rznr INTO :frmZahlHalter.nRZNr FROM rz WHERE rzarztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2) AND rzhalternr = :frmZahlHalter.dfHalterNr ORDER BY rznr' )
				this.hSqlZa.Prepare(@"SELECT rznr INTO :frmZahlHalter.nRZNr FROM rz WHERE rzarztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2)
AND rzdeaktiv IS NULL
AND rzhalternr = :frmZahlHalter.dfHalterNr
AND rznr IN
(SELECT hbrznr FROM hb WHERE hbarztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2)
AND hbhalternr = :frmZahlHalter.dfHalterNr GROUP BY 1 having SUM(hbdm)<>0)");

				this.hSqlZa.Execute();
				this.nFetch = this.hSqlZa.FetchNext();
				while (this.nFetch != Sys.FETCH_EOF) 
				{
					this.cmbRZNr.AddListItem(this.nRZNr.ToString(0));
					this.nFetch = this.hSqlZa.FetchNext();
				}
				// ! 11.04.14 F1980 Kommentierung aufgehoben:
				// While nPCount < 15
				// Call SalListAdd(hKenn, ' ')
				// Set nPCount = nPCount + 1
				// !
				this.hSqlZa.Commit();
			}
			// 17.12.15 Ä1296
			Int.SqlImmedSel(@"SELECT sum(hbdm) INTO :frmZahlHalter.dfDMHaBuHalter FROM hb WHERE hbarztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2)
AND hbhalternr = :frmZahlHalter.dfHalterNr
AND hbcode LIKE 'Zi%'");
			if (this.dfDMHaBuHalter.Number != 0 && this.dfDMHaBuHalter.Number != Sys.NUMBER_Null) 
			{
				this.dfDMHaBuHalter.Number = this.dfDMHaBuHalter.Number * -1;
				this.dfDMHaBuHalter.ShowWindow();
			}
			// 07.11.16 Ä1436
			Int.SqlImmedSel(@"SELECT sum(hbdm) INTO :frmZahlHalter.dfDMHaBuHalterBEZRet FROM hb WHERE hbarztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2)
AND hbhalternr = :frmZahlHalter.dfHalterNr
AND hbcode LIKE 'BEZ%'");
			if (this.dfDMHaBuHalterBEZRet.Number != 0 && this.dfDMHaBuHalterBEZRet.Number != Sys.NUMBER_Null) 
			{
				this.dfDMHaBuHalterBEZRet.Number = this.dfDMHaBuHalterBEZRet.Number * -1;
				this.dfDMHaBuHalterBEZRet.ShowWindow();
				this.bkgd42.ShowWindow();
			}

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// dfRechNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRechNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfRechNr.Number >= 999990 && this.dfHalterNr.IsEmpty()) 
			{
				Sal.MessageBox("Bitte geben Sie die Halter-Nr. ein!", "Achtung", (Sys.MB_Ok | Sys.MB_IconStop));
				this.dfHalterNr.SetFocus();
			}
			else
			{
				// 08.01.17 Ä1681
				Var.strDummy = "rkdmleis-rkzaleis+rkdmarzn-rkzaarzn";
				if (!(this.tblRechnungen.colnNoMahn.Number)) 
				{
					Var.strDummy = Var.strDummy + " + rkdmmahn+rkmbdmopl-rkzamahn-rkmbzaopl";
				}
				if (!(this.tblRechnungen.colnNoZins.Number)) 
				{
					Var.strDummy = Var.strDummy + " + rkdmzins-rkzazins";
				}
				if (this.dfHalterNr.IsEmpty()) 
				{
					Int.SqlImmedSel(@"SELECT rkrechdat, rkhalternr, rkdmleis-rkzaleis, rkdmarzn-rkzaarzn, rkdmmahn+rkmbdmopl-rkzamahn-rkmbzaopl, rkdmzins-rkzazins,
(" + Var.strDummy + @"),rkmahnstufe
INTO :frmZahlHalter.dfRechDat,
:frmZahlHalter.dfHalterNr,
:frmZahlHalter.dfDMLeis,
:frmZahlHalter.dfDMArzn,
:frmZahlHalter.dfDMMahn,
:frmZahlHalter.dfDMZins,
:frmZahlHalter.dfDMRest,
:frmZahlHalter.dfMS
FROM RK
WHERE rkarztnr = :frmZahlHalter.nArztNr AND rkrechnr = :frmZahlHalter.dfRechNr AND
rkkzzahl not in (2,3,4,5) AND
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)<>0 AND rkdeaktiv IS NULL  ");
				}
				else
				{
					Int.SqlImmedSel(@"SELECT rkrechdat, rkhalternr, rkdmleis-rkzaleis, rkdmarzn-rkzaarzn, rkdmmahn+rkmbdmopl-rkzamahn-rkmbzaopl, rkdmzins-rkzazins,
(" + Var.strDummy + @"),rkmahnstufe
INTO :frmZahlHalter.dfRechDat,
:frmZahlHalter.dfHalterNr,
:frmZahlHalter.dfDMLeis,
:frmZahlHalter.dfDMArzn,
:frmZahlHalter.dfDMMahn,
:frmZahlHalter.dfDMZins,
:frmZahlHalter.dfDMRest,
:frmZahlHalter.dfMS
FROM RK
WHERE rkarztnr = :frmZahlHalter.dfArztNr
AND rkhalternr = :frmZahlHalter.dfHalterNr
AND rkrechnr = :frmZahlHalter.dfRechNr AND
rkkzzahl not in (2,3,4,5) AND
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)<>0 AND rkdeaktiv IS NULL  ");
				}
				Int.PalLogToFile("ZahlHalter SELECT from rk", 0);
				// 06.04.10 OTÄ135
				// 29.05.15 F2398 auskommentiert
				// Call SqlImmedSel( 'SELECT sum(hbdm) INTO :frmZahlHalter.dfDMHaBu FROM hb, rz, rzp WHERE hbrznr=rznr AND rznr=rzpnr AND rzparztnr = :frmZahlHalter.dfArztNr AND rzphalternr = :frmZahlHalter.dfHalterNr AND rzprechnr= :frmZahlHalter.dfRechNr
				// AND rzaktivdat IS NOT NULL')
				// 16.09.14 F2135
				// Call SqlImmedSel( 'SELECT sum(hbdm) INTO :frmZahlHalter.nHBGesamt FROM hb WHERE hbarztnr = :frmZahlHalter.dfArztNr AND hbhalternr = :frmZahlHalter.dfHalterNr')
				// If dfDMHaBu > nHBGesamt
				// Set dfDMHaBu = nHBGesamt

				// If dfDMHaBu = NUMBER_Null
				// Set dfDMHaBu = 0
				// If dfDMHaBu != 0
				// Set dfDMHaBu = dfDMHaBu * -1


				Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hbankeinzug
into :frmZahlHalter.dfHalterName, :frmZahlHalter.nBankeinzug
from H where  harztnr = :frmZahlHalter.dfArztNr AND hhalternr = :frmZahlHalter.dfHalterNr AND hdeaktiv IS NULL  ");
				Int.PalLogToFile("ZahlHalter SELECT from h", 0);
				// 29.06.09 OTÄ130 Bankeinzug
				if (this.nBankeinzug == 1) 
				{
					this.dfSBankeinzug.Text = "Bankeinzug: ja";
				}
				else
				{
					this.dfSBankeinzug.Text = "";
				}

				// If dfMS > 6
				// Call SalMessageBeep(0)

				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalBoolean temp1 = this.cbZettel.Checked;
				Int.SqlIstDa(@" FROM Z WHERE zhalternr=:frmZahlHalter.dfHalterNr
and " + Int.PalArztNr("z", this.nArztNr, this.nArztNr2) + @" and zrechnr=:frmZahlHalter.dfRechNr
AND zart not in ('HS', 'ZM') AND zdeaktiv IS NULL ", ref temp1);
				this.cbZettel.Checked = temp1;

				Int.PalLogToFile("ZahlHalter SELECT from z", 0);
				if (this.cbZettel.Checked == true) 
				{
					Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
				}
				else
				{
					Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				}
			}
			// 16.07.01
			if (this.dfRechNr.Number >= 999990) 
			{
				// 29.06.01
				this.nZCount = 0;
				// 04.12.07 F314
				// Call SqlImmedSel('SELECT count(*) INTO :frmZahlHalter.nZCount FROM prd WHERE prdarztnr = :frmZahlHalter.nArztNr AND prdhalternr = :frmZahlHalter.dfHalterNr')
				// 24.11.11 F1079
				// Call SqlImmedSel('SELECT count(*) INTO :frmZahlHalter.nZCount FROM prd WHERE prdarztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2) AND prdhalternr = :frmZahlHalter.dfHalterNr')
				// 06.01.13 Ä1005
				// Call SqlImmedSel('SELECT count(*) INTO :frmZahlHalter.nZCount FROM pr WHERE prarztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2) AND prhalternr = :frmZahlHalter.dfHalterNr AND prnr NOT IN (SELECT mbnr FROM mb)')
				this.nZCount = Int.SqlGetAnzahl("FROM pr WHERE prarztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2) AND prhalternr = :frmZahlHalter.dfHalterNr AND prnr NOT IN (SELECT mbnr FROM mb)");
				Int.PalLogToFile("ZahlHalter GetAnzhal from pr", 0);
				// AND prdnr NOT IN (SELECT mbnr FROM mb)
				if (this.nZCount > 0) 
				{
					if (this.cmbProzNr.Text == "") 
					{
						this.cmbProzNr.ClearList();
						this.cmbProzNr.Text = "";
						// 10.01.18 Ä1682
						this.dfProzOP.Number = Sys.NUMBER_Null;
						this.dfProzOP.HideWindowAndLabel();

						// 04.12.07 F314
						// Call SalListPopulate( cmbProzNr, hSqlZa,
						// 'SELECT DISTINCT prdnr FROM prd WHERE prdarztnr = :frmZahlHalter.nArztNr AND prdhalternr = :frmZahlHalter.dfHalterNr ORDER BY prdnr DESC ')
						// 24.11.11 F1079
						// Call SalListPopulate( cmbProzNr, hSqlZa,
						// 'SELECT DISTINCT prdnr FROM prd WHERE prdarztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2) AND prdhalternr = :frmZahlHalter.dfHalterNr ORDER BY prdnr DESC ')
						this.cmbProzNr.PopulateList(this.hSqlZa, "SELECT DISTINCT prdnr FROM prd WHERE prdarztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2) AND prdhalternr = :frmZahlHalter.dfHalterNr AND prdnr NOT IN (SELECT mbnr FROM mb) ORDER BY prdnr DESC ");
						Int.PalLogToFile("ZahlHalter ListPopulate from prd", 0);

						this.cmbProzNr.Text = this.cmbProzNr.GetListItemText(0);
						this.dfProzDatum.Clear();
						this.nProzNr = Int.PalValNum(this.cmbProzNr.Text);
						if (this.nZCount == 1) 
						{
							if (Sys.IDYES != Sal.MessageBox("Das Feld \"PR-Nr.\" wurde mit der einzigen vorhandenen Nr. " + this.cmbProzNr.Text + @" gefüllt.
Ist dies in Ordnung ?", "Achtung", (Sys.MB_IconQuestion | Sys.MB_YesNo))) 
							{
								this.cmbProzNr.Text = "";
								this.nProzNr = 0;
							}
						}
						else
						{
							if (Sys.IDYES != Sal.MessageBox("Das Feld \"PR-Nr.\" wurde mit der jüngsten der " + Int.PalStrNum(this.nZCount, 2, 0) + " vorhandenen Nr. " + this.cmbProzNr.Text + @" gefüllt.
Ist dies in Ordnung ?", "Achtung", (Sys.MB_IconQuestion | Sys.MB_YesNo))) 
							{
								this.cmbProzNr.Text = "";
								this.nProzNr = 0;
							}
						}
						this.cmbProzNr.EnableWindowAndLabel();
					}
				}
				else
				{
					this.cmbProzNr.DisableWindowAndLabel();
				}
			}
			// 18.04.11 Ä566
			this.nZCount = 0;
			// 16.07.12 F1360 AND rzphalternr = :frmZahlHalter.dfHalterNr
			// 06.01.13 Ä1005
			// Call SqlImmedSel('SELECT count(*) INTO :frmZahlHalter.nZCount FROM rzp WHERE rzparztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2)
			// AND rzphalternr = :frmZahlHalter.dfHalterNr AND rzprechnr = :frmZahlHalter.dfRechNr')
			this.nZCount = Int.SqlGetAnzahl(@"FROM rzp WHERE rzparztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2)
AND rzphalternr = :frmZahlHalter.dfHalterNr AND rzprechnr = :frmZahlHalter.dfRechNr");
			Int.PalLogToFile("ZahlHalter GetAnzahl from rzp", 0);
			// 22.06.11 Ä584 =1 -> >=1
			if (this.nZCount >= 1) 
			{
				// 23.02.15 F2292 dfRZNr -> cmbRZNr
				this.nRZNr = Int.PalValNum(this.cmbRZNr.Text);
				if (this.nRZNr == 0) 
				{
					// 16.07.12 F1360 AND rzphalternr = :frmZahlHalter.dfHalterNr
					Int.SqlImmedSel(@"SELECT rzpnr INTO :frmZahlHalter.nRZNr FROM rzp WHERE rzparztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2)
AND rzphalternr = :frmZahlHalter.dfHalterNr AND rzprechnr = :frmZahlHalter.dfRechNr ORDER BY rzpnr DESC");
					Int.PalLogToFile("ZahlHalter SELECT from rzp", 0);
					// 23.02.15 F2292 dfRZNr -> cmbRZNr
					if (this.nRZNr == 0 || this.nRZNr == SalNumber.Null) 
					{
						this.cmbRZNr.Text = "";
					}
					else
					{
						this.cmbRZNr.Text = this.nRZNr.ToString(0);
						// 29.05.15 F2398
						Int.SqlImmedSel("SELECT sum(hbdm) INTO :frmZahlHalter.dfDMHaBu FROM hb WHERE hbrznr = :frmZahlHalter.nRZNr");
						Int.PalLogToFile("ZahlHalter SELECT from hb", 0);
						// 17.06.15 F2430
						this.dfDMHaBu.Number = this.dfDMHaBu.Number * -1;

						this.dfDMHaBu.ShowWindow();

					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfMahnNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMahnNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfMahnNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMahnNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfMahnNr.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Bitte geben Sie eine gültige Mahn-Nr. ein!", "Achtung", (Sys.MB_Ok | Sys.MB_IconStop));
				this.dfMahnNr.SetFocus();
			}
			else
			{
				this.PalHoleMahnNr();
			}
			#endregion
		}
		
		/// <summary>
		/// cmbProzNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbProzNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.cmbProzNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbProzNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfProzDatum.Clear();
			this.nProzNr = Int.PalValNum(this.cmbProzNr.Text);
			Int.SqlImmedSel(@"SELECT prdatum, prarztnr, prhalternr
into :frmZahlHalter.dfProzDatum,  :frmZahlHalter.dfArztNr, :frmZahlHalter.dfHalterNr
from pr where prnr=:frmZahlHalter.nProzNr");
			// 22.01.13 F1511
			// Call SalPostMsg(dfArztNr, SAM_Validate,0,0)
			Int.SqlImmedSel(@"SELECT aname1, anr2, arazakleinbetrag
into :frmZahlHalter.dfArztName, :frmZahlHalter.nArztNr2, :frmZahlHalter.nRZKleinbetrag
from A where aarztnr=:frmZahlHalter.dfArztNr");
			this.nArztNr = this.dfArztNr.Number;
			if (this.nArztNr2 == SalNumber.Null || this.nArztNr2 == 0) 
			{
				this.nArztNr2 = this.dfArztNr.Number;
			}
			// Call SalPostMsg(dfHalterNr, SAM_Validate,0,0)
			this.PalHoleHalter();
			// 08.01.18 Ä1682
			Int.SqlImmedSel(@"select sum(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)
INTO :frmZahlHalter.dfProzOP
FROM prd, rk
WHERE prdnr = :frmZahlHalter.nProzNr AND prdarztnr=rkarztnr AND prdhalternr=rkhalternr AND prdrechnr=rkrechnr AND rkkzzahl<2 AND rkdeaktiv IS NULL ");
			if (this.dfProzOP.Number == Sys.NUMBER_Null) 
			{
				this.dfProzOP.Number = 0;
			}
			Int.SqlImmedSel(@"select sum(akdm)
INTO :frmZahlHalter.nDummy
FROM ak
WHERE akproznr = :frmZahlHalter.nProzNr AND akdeaktiv IS NULL ");
			if (this.nDummy == SalNumber.Null) 
			{
				this.nDummy = 0;
			}
			this.dfProzOP.Number = this.dfProzOP.Number + this.nDummy;
			// 19.01.18
			// Call SqlImmedSel( 'select sum(zadm)
			// INTO :frmZahlHalter.nDummy
			// FROM za, prd
			// WHERE zaproznr = :frmZahlHalter.nProzNr AND zarechnr>=999990 AND prdarztnr=zaarztnr AND prdhalternr=zahalternr AND prdrechnr=zarechnr ' )
			Int.SqlImmedSel("select sum(zadm) INTO :frmZahlHalter.nDummy FROM za WHERE zaproznr = :frmZahlHalter.nProzNr AND zarechnr>=999990 AND zadeaktiv IS NULL ");

			if (this.nDummy == SalNumber.Null) 
			{
				this.nDummy = 0;
			}
			this.dfProzOP.Number = this.dfProzOP.Number - this.nDummy;
			if (this.dfProzOP.Number != 0) 
			{
				this.dfProzOP.ShowWindowAndLabel();
			}

			this.dfHalterNr.SetFocus();
			// Call SqlIstDa(' from pr where prnr=:frmZahlHalter.nProzNr', bOk)
			// If bOk
			// Call SqlImmedSel('SELECT prdatum, prarztnr, prhalternr
			// into :frmZahlHalter.dfProzDatum,  :frmZahlHalter.dfArztNr, :frmZahlHalter.dfHalterNr
			// from pr where prnr=:frmZahlHalter.dfProzNr')
			// Call SalPostMsg(dfArztNr, SAM_Validate,0,0)
			// Call SalPostMsg(dfHalterNr, SAM_Validate,0,0)
			// Call SalSetFocus(dfHalterNr)
			// Else
			// Call SalMessageBox('angegebene PR-Nr.
			// ist nicht vorhanden !','PR falsch',MB_Ok|MB_IconStop)
			// Call SalClearField( dfProzNr )
			#endregion
		}
		
		/// <summary>
		/// cmbRZNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbRZNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.cmbRZNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbRZNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			// 23.02.15 F2292 dfRZNr -> cmbRZNr
			this.nRZNr = Int.PalValNum(this.cmbRZNr.Text);
			Int.SqlImmedSel("SELECT rzarztnr, rzhalternr INTO :frmZahlHalter.dfArztNr, :frmZahlHalter.dfHalterNr FROM rz WHERE rznr = :frmZahlHalter.nRZNr AND rzdeaktiv IS NULL ");
			if (this.dfArztNr.SendMessage(Sys.SAM_Validate, 0, 0)) 
			{
			}
			Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hbankeinzug
into :frmZahlHalter.dfHalterName, :frmZahlHalter.nBankeinzug
from H where  harztnr = :frmZahlHalter.dfArztNr AND hhalternr = :frmZahlHalter.dfHalterNr AND hdeaktiv IS NULL  ");
			// 29.06.09 OTÄ130 Bankeinzug
			if (this.nBankeinzug == 1) 
			{
				this.dfSBankeinzug.Text = "Bankeinzug: ja";
			}
			else
			{
				this.dfSBankeinzug.Text = "";
			}
			// 06.09.16
			this.dfSum.Number = 0;
			this.dfSumHF.Number = 0;
			this.dfSumMG.Number = 0;
			this.dfSumZI.Number = 0;

			// 08.01.18 Ä1681 Leis, Arzn -> Leis + Arzn / Mahn -> Mahn - ZaMahn / Zins -> Zins - ZaZins
			this.tblRechnungen.Populate(this.hSqlZa, @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkdmleis + rkdmarzn - rkzaleis - rkzaarzn, rkdmmahn+rkmbdmopl-rkzamahn-rkmbzaopl, rkdmzins-rkzazins,
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins),rkmahnstufe
INTO :frmZahlHalter.tblRechnungen.colnArztNr,
:frmZahlHalter.tblRechnungen.colnHalterNr,
:frmZahlHalter.tblRechnungen.colnRechNr,
:frmZahlHalter.tblRechnungen.coldtRechDat,
:frmZahlHalter.tblRechnungen.colnDMLeis,
:frmZahlHalter.tblRechnungen.colnDMMahn,
:frmZahlHalter.tblRechnungen.colnDMZins,
:frmZahlHalter.tblRechnungen.colnDMRest,
:frmZahlHalter.tblRechnungen.colnMS
FROM RK, RZP
WHERE rzpnr = :frmZahlHalter.nRZNr AND rzparztnr=rkarztnr AND rzprechnr=rkrechnr AND rzphalternr=rkhalternr AND
rkkzzahl not in (2,3,4,5) AND
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)<>0 AND rkdeaktiv IS NULL
ORDER BY rkrechdat", Sys.TBL_FillAll);
			// 30.07.09 OTÄ204
			this.cmbProzNr.ClearList();
			this.cmbProzNr.Text = "";
			// 10.01.18 Ä1682
			this.dfProzOP.Number = Sys.NUMBER_Null;
			this.dfProzOP.HideWindowAndLabel();

			// 29.05.15 F2398
			Int.SqlImmedSel("SELECT sum(hbdm) INTO :frmZahlHalter.dfDMHaBu FROM hb WHERE hbrznr = :frmZahlHalter.nRZNr");
			// 17.06.15 F2430
			this.dfDMHaBu.Number = this.dfDMHaBu.Number * -1;
			// 17.12.15 Ä1296
			Int.SqlImmedSel(@"SELECT sum(hbdm) INTO :frmZahlHalter.dfDMHaBuHalter FROM hb WHERE hbarztnr IN ( :frmZahlHalter.nArztNr, :frmZahlHalter.nArztNr2)
AND hbhalternr = :frmZahlHalter.dfHalterNr");
			if (this.dfDMHaBuHalter.Number != 0 && this.dfDMHaBuHalter.Number != Sys.NUMBER_Null) 
			{
				this.dfDMHaBuHalter.Number = this.dfDMHaBuHalter.Number * -1;
				this.dfDMHaBuHalter.ShowWindow();
			}


			this.dfDMHaBu.ShowWindow();

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// pbBatchOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBatchOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbBatchOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBatchOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nIndex = this.lbBank.GetListSelectedIndex();
			this.strBankKonto = this.lbBank.GetListItemText(this.nIndex);
			this.strBankKonto = this.strBankKonto.Left(5);
			// If dfRechNr >= 999990 And SalIsNull(dfProzNr)		! 20.01.99
			// Call SalMessageBox('MB-Kosten-Buchungen nur mit PR-Nr. !!','Achtung',MB_Ok|MB_IconExclamation)
			// Call SalSetFocus(dfProzNr)
			if (!(this.dfVerwahr.IsEmpty())) 
			{
				Sal.MessageBox(@"Verwahrkonto-Buchungen
nur als Direkt-Buchung möglich !", "Achtung", Sys.MB_Ok);
			}
			else if (this.dfZahlDM.Number == 0 || this.dfZahlDM.Number == Sys.NUMBER_Null)  // 07.01.13 F1461
			{
				Sal.MessageBox("Zahlbetrag darf nicht 0,00 sein.", "Achtung", Sys.MB_Ok);
			}
			else
			{
				// 16.04.07 nachträglich eingefügt/ #16 kein leeres Buchungsdatum mehr erlauben
				if (this.dfBuchDat.DateTime == Sys.DATETIME_Null) 
				{
					this.dfBuchDat.DateTime = SalDateTime.Current;
				}

				// 11.01.99
				if (this.dfRechNr.Number >= 999990)  // 07.01.99
				{
					// 10.02.10 OTF381
					this.nProzNr = 0;
					this.nProzNr = Int.PalValNum(this.cmbProzNr.Text);
				}
				else
				{
					// Call SqlImmed( '
					// SELECT prnr
					// FROM pr
					// INTO :frmZahlHalter.nProzNr
					// WHERE ((pra1 = :frmZahlHalter.dfArztNr AND prr1 = :frmZahlHalter.dfRechNr)
					// OR (pra2 = :frmZahlHalter.dfArztNr AND prr2 = :frmZahlHalter.dfRechNr)
					// OR (pra3 = :frmZahlHalter.dfArztNr AND prr3 = :frmZahlHalter.dfRechNr)
					// OR (pra4 = :frmZahlHalter.dfArztNr AND prr4 = :frmZahlHalter.dfRechNr)
					// OR (pra5 = :frmZahlHalter.dfArztNr AND prr5 = :frmZahlHalter.dfRechNr)
					// OR (pra6 = :frmZahlHalter.dfArztNr AND prr6 = :frmZahlHalter.dfRechNr))')
					// 10.02.10 OTF381
					this.nProzNr = 0;
					// 11.03.02
					// 24.11.11 F1079
					// Call SqlImmedSel( '
					// SELECT prdnr
					// FROM prd
					// INTO :frmZahlHalter.nProzNr
					// WHERE prdarztnr = :frmZahlHalter.dfArztNr AND prdrechnr = :frmZahlHalter.dfRechNr')
					Int.SqlImmedSel(@"
SELECT prdnr
FROM prd
INTO :frmZahlHalter.nProzNr
WHERE prdarztnr = :frmZahlHalter.dfArztNr AND prdrechnr = :frmZahlHalter.dfRechNr AND prdnr NOT IN (SELECT mbnr FROM mb)");
					// 03.12.10
					if (this.dfHalterNr.Number == 0 || this.dfHalterNr.Number == Sys.NUMBER_Null) 
					{
						Int.SqlImmedSel(@"
SELECT rkhalternr
FROM rk
INTO :frmZahlHalter.dfHalterNr
WHERE rkarztnr = :frmZahlHalter.dfArztNr AND rkrechnr = :frmZahlHalter.dfRechNr");
					}
				}

				// 23.02.15 F2292 dfRZNr -> cmbRZNr
				this.nRZNr = Int.PalValNum(this.cmbRZNr.Text);
				if (this.dfDMRest.IsEmpty()) 
				{
					this.nRetHB = this.PalCheckHaBu(this.nRZNr);
					if (this.nRetHB != 0) 
					{
						this.dfZahlDM.Number = this.dfZahlDM.Number - this.nRetHB;
						this.df4.Number = this.df3.Number;
						this.df3.Number = this.df2.Number;
						this.df2.Number = this.df1.Number;
						this.df1.Number = this.nRetHB;
						this.df1234.Number = this.df1234.Number + this.nRetHB;
						// 15.02.16 Ä1345
						this.PalSet1234(this.df1234.Number);
					}
					else
					{
						Sal.MessageBox(@"Es ist noch kein Buchungsbetrag
eingegeben !", "Kein Buchungsbetrag", Sys.MB_Ok);
					}
				}
				// Else If dfZahlDM <= 0.00
				// Call SalMessageBox('Ungültiger
				// Zahlungsbetrag !','Falscher Zahlbetrag',MB_Ok)
				else
				{
					// 14.06.11 Ä584 auch + If not bRZMS9
					// 23.02.15 F2292 dfRZNr -> cmbRZNr
					this.bRZMS9 = this.PalCheckRZMS9(this.nRZNr);
					// 06.04.10 OTÄ135
					if (!(this.bRZMS9)) 
					{
						// 23.02.15 F2292 dfRZNr -> cmbRZNr
						this.nRetHB = this.PalCheckHaBu(this.nRZNr);
						if (this.nRetHB != 0) 
						{
							this.dfZahlDM.Number = this.dfZahlDM.Number - this.nRetHB;
							this.df4.Number = this.df3.Number;
							this.df3.Number = this.df2.Number;
							this.df2.Number = this.df1.Number;
							this.df1.Number = this.nRetHB;
							this.df1234.Number = this.df1234.Number + this.nRetHB;
							// 15.02.16 Ä1345
							this.PalSet1234(this.df1234.Number);
						}
					}

					this.nRestZ = 0;
					if (this.dfHalterNr.Number != 0) 
					{
						Int.SqlIstDa(@" FROM RK
WHERE  rkarztnr = :frmZahlHalter.dfArztNr
AND rkhalternr = :frmZahlHalter.dfHalterNr
AND rkrechnr = :frmZahlHalter.dfRechNr AND rkdeaktiv IS NULL ", ref Var.bExists);
					}
					else
					{
						Int.SqlIstDa(@" FROM RK
WHERE  rkarztnr = :frmZahlHalter.dfArztNr
AND rkrechnr = :frmZahlHalter.dfRechNr AND rkdeaktiv IS NULL ", ref Var.bExists);
					}

					// 08.01.18 Ä1681
					Var.strDummy = "rkdmleis + rkdmarzn - rkzaleis - rkzaarzn";
					if (this.tblRechnungen.colnNoMahn.Number != 1) 
					{
						Var.strDummy = Var.strDummy + " + rkdmmahn + rkmbdmopl - rkzamahn - rkmbzaopl";
					}
					if (this.tblRechnungen.colnNoZins.Number != 1) 
					{
						Var.strDummy = Var.strDummy + " + rkdmzins - rkzazins";
					}
					if (this.dfHalterNr.Number != 0) 
					{
						Int.SqlImmedSel(@"SELECT
(" + Var.strDummy + @"), rkmahnstufe
INTO  :frmZahlHalter.nRestZ, :frmZahlHalter.nMahnstufe
FROM RK
WHERE  rkarztnr = :frmZahlHalter.dfArztNr
AND rkhalternr= :frmZahlHalter.dfHalterNr
AND rkrechnr = :frmZahlHalter.dfRechNr AND rkdeaktiv IS NULL ");
					}
					else
					{
						Int.SqlImmedSel(@"SELECT
(" + Var.strDummy + @"), rkmahnstufe
INTO  :frmZahlHalter.nRestZ, :frmZahlHalter.nMahnstufe
FROM RK
WHERE  rkarztnr = :frmZahlHalter.dfArztNr
AND rkrechnr = :frmZahlHalter.dfRechNr AND rkdeaktiv IS NULL ");
					}
					// BB
					if (this.dfHalterNr.Number != 0) 
					{
						Int.SqlImmedSel(@"SELECT
sum(bbzahldm)
INTO  :frmZahlHalter.nBatchDM
FROM bb
WHERE  bbarztnr = :frmZahlHalter.dfArztNr
AND bbhalternr= :frmZahlHalter.dfHalterNr
AND bbrechnr = :frmZahlHalter.dfRechNr");
					}
					else
					{
						Int.SqlImmedSel(@"SELECT
sum(bbzahldm)
INTO  :frmZahlHalter.nBatchDM
FROM bb
WHERE  bbarztnr = :frmZahlHalter.dfArztNr
AND bbrechnr = :frmZahlHalter.dfRechNr");
					}
					if (this.nBatchDM > 0) 
					{
						if (Sal.MessageBox(@"für diese Rechnung gibt es
bereits Batch-Buchungen
in Höhe von € " + Int.PalStrNum(this.nBatchDM, 8, 2) + @"
Restbetrag wird gekürzt !", "Achtung", Sys.MB_OkCancel) == Sys.IDOK) 
						{
							this.nRestZ = this.nRestZ - this.nBatchDM;
						}
						else
						{
							this.dfZahlDM.Number = 0;
						}
					}

					if (this.dfZahlDM.Number > this.nRestZ) 
					{
						this.dfZahlDM.Number = this.dfZahlDM.Number - this.nRestZ;
						this.nBuchDM = this.nRestZ;
					}
					else
					{
						this.nBuchDM = this.dfZahlDM.Number;
						this.dfZahlDM.Clear();
					}

					// 02.08.23 Ä2126 + , bbexportnr
					if (this.nBuchDM != 0) 
					{
						Int.SqlImmedX(@"INSERT INTO BB (bbarztnr, bbhalternr, bbrechnr, bbzahldm, bbbuchdat,
bbkonto, bbbelnr, bbproznr, bbexportnr)
VALUES(:frmZahlHalter.dfArztNr, :frmZahlHalter.dfHalterNr, :frmZahlHalter.dfRechNr,
:frmZahlHalter.nBuchDM, :frmZahlHalter.dfBuchDat , :frmZahlHalter.strBankKonto, :frmZahlHalter.dfBelNr,
:frmZahlHalter.nProzNr, :frmZahlHalter.dfExportNr )");
					}
					if (this.nMahnstufe > 6) 
					{
						// Call SalMessageBeep(0)
						Sal.MessageBox(" MS " + this.nMahnstufe.ToString(0) + "!!!!", "", Sys.MB_Ok);
					}
					this.df4.Number = this.df3.Number;
					this.df3.Number = this.df2.Number;
					this.df2.Number = this.df1.Number;
					this.df1.Number = this.nBuchDM;
					this.df1234.Number = this.df1234.Number + this.nBuchDM;
					// 15.02.16 Ä1345
					this.PalSet1234(this.df1234.Number);
					// Call SalClearField(dfArztNr)
					if (this.dfZahlDM.Number > 0) 
					{
					}
					else
					{
						this.dfHalterNr.Clear();
					}
					this.dfRechNr.Clear();
					// Call SalClearField(dfProzNr)
					this.nProzNr = 0;
					this.dfVerwahr.Clear();
					this.dfRechDat.Clear();
					this.dfMS.Clear();
					this.dfDMLeis.Clear();
					this.dfDMArzn.Clear();
					this.dfDMMahn.Clear();
					this.dfDMZins.Clear();
					this.dfDMRest.Clear();
					// Set dfBelNr = dfBelNr + 1
					this.dfZahlDM.SetFocus();
					this.cmbProzNr.Text = "";
					this.cmbProzNr.ClearList();
					// 24.03.09 OTÄ204
					this.cmbProzNr.Clear();
					// 25.07.11 F937
					// 23.02.15 F2292 dfRZNr -> cmbRZNr
					// Call SalClearField( dfRZNr )
					this.cmbRZNr.ClearList();
					// 10.01.18 Ä1682
					this.dfProzOP.Number = Sys.NUMBER_Null;
					this.dfProzOP.HideWindowAndLabel();


					Sal.WaitCursor(false);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfMatch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMatch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfMatch_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMatch_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.SetStatusBarText("Suche läuft ...");
			tblHalter.CreateWindow(this, "frmZahlHalter", this.dfArztNr.Number, 0, this.dfMatch.Text, "", "", "", "");
			this.SetStatusBarText("");
			#endregion
		}
		
		/// <summary>
		/// tblRechnungen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblRechnungen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_RowHeaderClick:
					this.tblRechnungen_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.tblRechnungen_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblRechnungen_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblRechnungen_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfArztNr.Number = this.tblRechnungen.colnArztNr.Number;
			this.dfRechNr.Number = this.tblRechnungen.colnRechNr.Number;
			// 19.07.01
			// 10.12.18 F3969
			// Call SalPostMsg(dfRechNr, SAM_Validate,0,0)
			Int.PalLogToFile("ZahlHalter tblRech.HeaderClick", 0);
			this.dfRechNr.SendMessage(Sys.SAM_Validate, 0, 0);
			Int.PalLogToFile("ZahlHalter tblRech.HeaderClick fertig", 0);
			// Set dfRechDat = coldtRechDat
			// Set dfMS = colnMS
			// Set dfDMLeis = colnDMLeis
			// Set dfDMArzn = colnDMArzn
			// Set dfDMMahn = colnDMMahn
			// Set dfDMZins = colnDMZins
			// Set dfDMRest = colnDMRest
			// If dfMS > 6
			// Call SalMessageBeep(0)

			// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
			SalBoolean temp1 = this.cbZettel.Checked;
			Int.SqlIstDa(@" FROM Z WHERE zhalternr=:frmZahlHalter.dfHalterNr
and " + Int.PalArztNr("z", this.nArztNr, this.nArztNr2) + @"
and zrechnr=:frmZahlHalter.dfRechNr AND zdeaktiv IS NULL ", ref temp1);
			this.cbZettel.Checked = temp1;

			Int.PalLogToFile("ZahlHalter from z", 0);
			if (this.cbZettel.Checked == true) 
			{
				Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
			}
			else
			{
				Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			}
			// 19.11.14 Ä1116
			this.nZCount = Int.SqlGetAnzahl(@"FROM rzp WHERE rzparztnr = :frmZahlHalter.nArztNr
AND rzphalternr = :frmZahlHalter.dfHalterNr AND rzprechnr = :frmZahlHalter.tblRechnungen.colnRechNr");
			Int.PalLogToFile("ZahlHalter from rzp", 0);
			if (this.nZCount >= 1) 
			{
				Int.SqlImmedSel(@"SELECT rzpnr INTO :frmZahlHalter.nRZNr FROM rzp
WHERE rzparztnr = :frmZahlHalter.nArztNr AND rzphalternr = :frmZahlHalter.dfHalterNr AND rzprechnr = :frmZahlHalter.tblRechnungen.colnRechNr
ORDER BY rzpnr DESC");
				Int.PalLogToFile("ZahlHalter SELECT from rzp", 0);
				// 23.02.15 F2292 dfRZNr -> cmbRZNr
				if (this.nRZNr == 0 || this.nRZNr == SalNumber.Null) 
				{
					this.cmbRZNr.Text = "";
				}
				else
				{
					this.cmbRZNr.Text = this.nRZNr.ToString(0);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblRechnungen_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblRechnungen, 0xbfffff);
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblRechnungen_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT  MAX(rzpnr) INTO :frmZahlHalter.tblRechnungen.colnRZNr FROM rzp
WHERE rzparztnr = :frmZahlHalter.tblRechnungen.colnArztNr AND rzphalternr = :frmZahlHalter.tblRechnungen.colnHalterNr AND rzprechnr = :frmZahlHalter.tblRechnungen.colnRechNr");
			Int.SqlImmedSel(@"SELECT  MAX(prdnr) INTO :frmZahlHalter.tblRechnungen.colnPRNr FROM prd
WHERE prdarztnr = :frmZahlHalter.tblRechnungen.colnArztNr AND prdhalternr = :frmZahlHalter.tblRechnungen.colnHalterNr AND prdrechnr = :frmZahlHalter.tblRechnungen.colnRechNr");
			// 06.09.16
			this.dfSum.Number = this.dfSum.Number + this.tblRechnungen.colnDMRest.Number;
			// 08.01.18 Ä1681 Leis, Arzn -> Leis + Arzn
			// Set dfSumHF = dfSumHF + frmZahlHalter.tblRechnungen.colnDMArzn + frmZahlHalter.tblRechnungen.colnDMLeis
			this.dfSumHF.Number = this.dfSumHF.Number + this.tblRechnungen.colnDMLeis.Number;

			this.dfSumMG.Number = this.dfSumMG.Number + this.tblRechnungen.colnDMMahn.Number;
			this.dfSumZI.Number = this.dfSumZI.Number + this.tblRechnungen.colnDMZins.Number;
			// 20.02.23 Ä2079
			Int.SqlImmedSel(@"SELECT SUM(bbzahldm) INTO :frmZahlHalter.tblRechnungen.colnDMBatch
FROM bb
WHERE  bbarztnr = :frmZahlHalter.tblRechnungen.colnArztNr
AND bbhalternr = :frmZahlHalter.tblRechnungen.colnHalterNr
AND bbrechnr = :frmZahlHalter.tblRechnungen.colnRechNr");

			#endregion
		}
		
		/// <summary>
		/// lbBank WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbBank_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.lbBank_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbBank_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.df1.Number = 0.00m;
			this.df2.Number = 0.00m;
			this.df3.Number = 0.00m;
			this.df4.Number = 0.00m;
			// 15.02.16 Ä1345
			// Set df1234 = 0.00
			this.df1234.Number = this.PalGet1234();
			#endregion
		}
		
		/// <summary>
		/// pbDel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDel_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDel_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.df1234.Number = 0;
			this.PalSet1234(0);
			#endregion
		}
		
		/// <summary>
		/// dfVerwahr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfVerwahr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_KillFocus:
					this.dfVerwahr_OnSAM_KillFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_KillFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfVerwahr_OnSAM_KillFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfVerwahr.IsEmpty()) 
			{
				this.dfVerwahr.Number = 15000;
			}
			if (this.dfVerwahr.Number < 10000) 
			{
				this.dfVerwahr.Number = this.dfVerwahr.Number * 10;
			}
			#endregion
		}
		
		/// <summary>
		/// pbSuchen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSuchen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSuchen_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSuchen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// If Not SalIsWindowEnabled( frmMain.pbSuchen )
			// If SalDestroyWindow(frmRgSuchen)
			// Call SalCreateWindow(frmRgSuchen,hWndForm, dfArztNr, dfHalterNr, dfRechNr)
			App.frmRgSuchen.PalFuelle(this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRechNr.Number);
			#endregion
		}
		
		/// <summary>
		/// cbZettel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZettel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbZettel_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZettel_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmZettel.CreateWindow(this, "frmZahlHalter", this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRechNr.Number);
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// #16 kein leeres Buchungsdatum mehr erlauben
			if (this.dfBuchDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfBuchDat.DateTime = SalDateTime.Current;
			}
			// 06.03.23 Ä2086
			Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
			if (this.dfBuchDat.DateTime < Var.dtINIMinBuchDat) 
			{
				this.dfBuchDat.DateTime = Var.dtINIMinBuchDat;
			}


			this.nIndex = this.lbBank.GetListSelectedIndex();
			this.strBankKonto = this.lbBank.GetListItemText(this.nIndex);
			this.strBankKonto = this.strBankKonto.Left(5);
			if (!(this.dfVerwahr.IsEmpty())) 
			{
				this.strBuchText = this.dfBuchText.Text;
				this.df4.Number = this.df3.Number;
				this.df3.Number = this.df2.Number;
				this.df2.Number = this.df1.Number;
				this.df1.Number = this.dfZahlDM.Number;
				this.df1234.Number = this.df1234.Number + this.dfZahlDM.Number;
				// 15.02.16 Ä1345
				this.PalSet1234(this.df1234.Number);

				// 31.07.23 Ä2126 + , fiexportnr
				Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiexportnr)
VALUES (0, :frmZahlHalter.strBankKonto, :frmZahlHalter.dfVerwahr, :frmZahlHalter.dfBelNr,
:frmZahlHalter.dfBuchDat,
:frmZahlHalter.strBuchText,
:frmZahlHalter.dfZahlDM, 3, :frmZahlHalter.dfExportNr)");
				// Call SalClearField(dfArztNr)
				// Call SalClearField(dfRechNr)
				// Call SalClearField(dfHalterNr)
				this.dfVerwahr.Clear();
				this.dfRechDat.Clear();
				this.dfMS.Clear();
				this.dfDMLeis.Clear();
				this.dfDMArzn.Clear();
				this.dfDMMahn.Clear();
				this.dfDMZins.Clear();
				this.dfDMRest.Clear();
				this.dfZahlDM.Clear();
				// Call SalTblReset(tblRechnungen)
				this.dfZahlDM.SetFocus();
				// 22.06.11
				// 23.02.15 F2292 dfRZNr -> cmbRZNr
				// Call SalClearField( dfRZNr )
				this.cmbRZNr.ClearList();
			}
			else
			{
				Sal.MessageBox(@"Sofortbuchung nur für
Verwahrkonten möglich !", "Achtung", Sys.MB_Ok);
			}
			#endregion
		}
		
		/// <summary>
		/// pbUeberschZins WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbUeberschZins_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbUeberschZins_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbUeberschZins_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbUeberschZins_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// #16 kein leeres Buchungsdatum mehr erlauben
			if (this.dfBuchDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfBuchDat.DateTime = SalDateTime.Current;
			}

			this.nIndex = this.lbBank.GetListSelectedIndex();
			this.strBankKonto = this.lbBank.GetListItemText(this.nIndex);
			this.strBankKonto = this.strBankKonto.Left(5);
			if (!(this.dfVerwahr.IsEmpty())) 
			{
				Sal.MessageBox("Buchung auf Verwahrkonto nicht möglich.", "Buchung nicht möglich", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				this.PalBuchUeberschZins(this.dfZahlDM.Number);
				this.df4.Number = this.df3.Number;
				this.df3.Number = this.df2.Number;
				this.df2.Number = this.df1.Number;
				this.df1.Number = this.dfZahlDM.Number;
				this.df1234.Number = this.df1234.Number + this.dfZahlDM.Number;
				// 15.02.16 Ä1345
				this.PalSet1234(this.df1234.Number);

			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbUeberschZins_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbUeberschZins, "zu viel gezahlte Halterkosten (z.B. RaZa-Zinsen) buchen");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbRaZaZins WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRaZaZins_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRaZaZins_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbRaZaZins_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRaZaZins_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// #16 kein leeres Buchungsdatum mehr erlauben
			if (this.dfBuchDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfBuchDat.DateTime = SalDateTime.Current;
			}
			if (this.dfZahlDM.Number == 0) 
			{
				Sal.MessageBox("Bitte vorher Zahlbetrag eingeben.", "Buchung nicht möglich", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{

				this.nIndex = this.lbBank.GetListSelectedIndex();
				this.strBankKonto = this.lbBank.GetListItemText(this.nIndex);
				this.strBankKonto = this.strBankKonto.Left(5);
				if (!(this.dfVerwahr.IsEmpty())) 
				{
					Sal.MessageBox("Buchung auf Verwahrkonto nicht möglich.", "Buchung nicht möglich", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
				else
				{
					// 23.02.15 F2292 dfRZNr -> cmbRZNr
					this.nRZNr = Int.PalValNum(this.cmbRZNr.Text);
					this.nRetHB = this.PalCheckHaBu(this.nRZNr);
					if (this.nRetHB != 0) 
					{
						this.dfZahlDM.Number = this.dfZahlDM.Number - this.nRetHB;
						this.df4.Number = this.df3.Number;
						this.df3.Number = this.df2.Number;
						this.df2.Number = this.df1.Number;
						this.df1.Number = this.nRetHB;
						this.df1234.Number = this.df1234.Number + this.nRetHB;
						// 15.02.16 Ä1345
						this.PalSet1234(this.df1234.Number);

						// 23.02.15 F2292 dfRZNr -> cmbRZNr
						Int.PalLog("ZahlHalter: RZZins RZ" + this.nRZNr.ToString(0));
					}
					else
					{
						Sal.MessageBox("Keine offene Halterkonto-Buchungen für diese Rechnung gefunden.", "Nichts gefunden", (Sys.MB_Ok | Sys.MB_IconExclamation));
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRaZaZins_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbRaZaZins, "zu viel gezahlte Halterkosten (z.B. RaZa-Zinsen) buchen");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbRestaufTA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRestaufTA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRestaufTA_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbRestaufTA_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRestaufTA_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 14.05.19 Ä1815
			if (this.dfBuchDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfBuchDat.DateTime = SalDateTime.Current;
			}
			if (this.dfZahlDM.Number == 0) 
			{
				Sal.MessageBox("Bitte vorher Überzahlungsbetrag eingeben.", "Buchung nicht möglich", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{

				this.nIndex = this.lbBank.GetListSelectedIndex();
				this.strBankKonto = this.lbBank.GetListItemText(this.nIndex);
				this.strBankKonto = this.strBankKonto.Left(5);
				if (!(this.dfVerwahr.IsEmpty())) 
				{
					Sal.MessageBox("Buchung auf Verwahrkonto nicht möglich.", "Buchung nicht möglich", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
				else
				{
					this.nIndex = this.lbBank.GetListSelectedIndex();
					this.strBankKonto = this.lbBank.GetListItemText(this.nIndex);
					this.strBankKonto = this.strBankKonto.Left(5);

					// 11.06.21 Ä1962
					// Set strBuchText = 'TA'  || PalStrNum( dfArztNr, 4, 0 ) || '/H' || PalStrNum( dfHalterNr, 5, 0 ) || ' zu viel'
					this.strBuchText = "Tierarzt " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0) + " zu viel";

					// TVN
					this.nArztNr = Int.PalCheckLarztnr(this.dfArztNr.Number);
					if (this.nArztNr == this.dfArztNr.Number) 
					{
						Var.strDummy = "tkdmzaleis, tkdmzaarzn";
					}
					else
					{
						Var.strDummy = "tkdmzaarzn, tkdmzaleis";
					}
					this.nBankKonto = Int.PalValNum(this.strBankKonto);
					this.nBuchDM = this.dfZahlDM.Number;
					this.nNetto = ((this.nBuchDM * 100) / (1 + Var.nMwStVoll / 100)).Round() / 100;
					this.nMwSt = this.nBuchDM - this.nNetto;
					// 06.03.23 Ä2086
					Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
					if (this.dfBuchDat.DateTime < Var.dtINIMinBuchDat) 
					{
						this.dfBuchDat.DateTime = Var.dtINIMinBuchDat;
					}

					// 31.07.23 Ä2126 + , fiexportnr
					Int.SqlImmed(@"
INSERT INTO FI
( fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiarztnr, fihalternr, firechnr, fiexportnr )
VALUES
( 0, :frmZahlHalter.nBankKonto , 16000, :frmZahlHalter.dfBelNr , :frmZahlHalter.dfBuchDat , :frmZahlHalter.strBuchText , :frmZahlHalter.nBuchDM , 3,
:frmZahlHalter.dfArztNr , :frmZahlHalter.dfHalterNr , :frmZahlHalter.dfRechNr, :frmZahlHalter.dfExportNr )");
					// 22.08.22 Ä2015 + tkfall
					// 20.11.23 Ä2144 + tkkontocode
					Int.SqlImmed(@"
INSERT INTO TK
( tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tktavst, " + Var.strDummy + @", tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkfall, tkkontocode )
VALUES
( :frmZahlHalter.dfArztNr , 1, 0, :frmZahlHalter.strBuchText, :frmZahlHalter.dfHalterNr , :frmZahlHalter.dfRechNr, :frmZahlHalter.dfBelNr , :frmZahlHalter.dfBuchDat ,
0, 0, 1, 0, :frmZahlHalter.nBuchDM ,0, 0, 0,
:frmZahlHalter.nMwSt, :nMwStVoll, 2, 0, 0, 0, :frmZahlHalter.nBuchDM, 18, 'ZahlHalter-Zinsen' )");
					Int.SqlImmed(@"
INSERT INTO ZA
( zaarztnr, zahalternr, zarechnr, zakz, zabuchdat, zabelegnr, zadm, zabuchtext, zarznr, zaerfdat )
VALUES
( :frmZahlHalter.dfArztNr, :frmZahlHalter.dfHalterNr, 0, 1, :frmZahlHalter.dfBuchDat, :frmZahlHalter.dfBelNr, :frmZahlHalter.nBuchDM, 'zu viel', 0, SYSDATETIME )");

					this.dfZahlDM.Number = this.dfZahlDM.Number - this.nBuchDM;
					this.df4.Number = this.df3.Number;
					this.df3.Number = this.df2.Number;
					this.df2.Number = this.df1.Number;
					this.df1.Number = this.nBuchDM;
					this.df1234.Number = this.df1234.Number + this.nBuchDM;
					// 15.02.16 Ä1345
					this.PalSet1234(this.df1234.Number);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRestaufTA_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbRestaufTA, "Überzahlung dem Tierarztkonto gutschreiben");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbZinsen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZinsen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbZinsen_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbZinsen_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZinsen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 14.05.19 Ä1815
			if (this.dfBuchDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfBuchDat.DateTime = SalDateTime.Current;
			}
			if (this.dfZahlDM.Number == 0) 
			{
				Sal.MessageBox("Bitte vorher Überzahlungsbetrag eingeben.", "Buchung nicht möglich", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{

				this.nIndex = this.lbBank.GetListSelectedIndex();
				this.strBankKonto = this.lbBank.GetListItemText(this.nIndex);
				this.strBankKonto = this.strBankKonto.Left(5);
				if (!(this.dfVerwahr.IsEmpty())) 
				{
					Sal.MessageBox("Buchung auf Verwahrkonto nicht möglich.", "Buchung nicht möglich", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
				else
				{
					this.nIndex = this.lbBank.GetListSelectedIndex();
					this.strBankKonto = this.lbBank.GetListItemText(this.nIndex);
					this.strBankKonto = this.strBankKonto.Left(5);

					// 11.06.21 Ä1962
					// Set strBuchText = 'TA'  || PalStrNum( dfArztNr, 4, 0 ) || '/H' || PalStrNum( dfHalterNr, 5, 0 ) || ' Zinsen'
					this.strBuchText = "Tierarzt " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0) + " Zinsen";
					// TVN
					this.nArztNr = Int.PalCheckLarztnr(this.dfArztNr.Number);
					if (this.nArztNr == this.dfArztNr.Number) 
					{
						Var.strDummy = "tkdmzaleis, tkdmzaarzn";
					}
					else
					{
						Var.strDummy = "tkdmzaarzn, tkdmzaleis";
					}
					this.nBankKonto = Int.PalValNum(this.strBankKonto);
					this.nBuchDM = this.dfZahlDM.Number;
					// 06.03.23 Ä2086
					Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
					if (this.dfBuchDat.DateTime < Var.dtINIMinBuchDat) 
					{
						this.dfBuchDat.DateTime = Var.dtINIMinBuchDat;
					}

					// 31.07.23 Ä2126 + , fiexportnr
					Int.SqlImmed(@"
INSERT INTO FI
( fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiarztnr, fihalternr, firechnr, fiexportnr )
VALUES
( 0, :frmZahlHalter.nBankKonto , 16000, :frmZahlHalter.dfBelNr , :frmZahlHalter.dfBuchDat , :frmZahlHalter.strBuchText , :frmZahlHalter.nBuchDM , 3,
:frmZahlHalter.dfArztNr , :frmZahlHalter.dfHalterNr , :frmZahlHalter.dfRechNr, :frmZahlHalter.dfExportNr )");
					// 22.08.22 Ä2015 + tkfall und bei tkdmzains: 0 ->
					// 20.11.23 Ä2144 + tkkontocode
					Int.SqlImmed(@"
INSERT INTO TK
( tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tktavst, " + Var.strDummy + @", tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkfall, tkkontocode )
VALUES
( :frmZahlHalter.dfArztNr , 1, 0, :frmZahlHalter.strBuchText, :frmZahlHalter.dfHalterNr , :frmZahlHalter.dfRechNr, :frmZahlHalter.dfBelNr , :frmZahlHalter.dfBuchDat ,
0, 0, 1, 0, 0 ,0, 0, :frmZahlHalter.nBuchDM,
0, 0, 2, 0, 0, 0, :frmZahlHalter.nBuchDM, 17, 'ZahlHalter-Zinsen' )");
					this.nProzNr = Int.PalValNum(this.cmbProzNr.Text);
					Int.SqlImmed(@"
INSERT INTO ZA
( zaarztnr, zahalternr, zarechnr, zakz, zabuchdat, zabelegnr, zadm, zabuchtext, zarznr, zaerfdat, zaproznr )
VALUES
( :frmZahlHalter.dfArztNr, :frmZahlHalter.dfHalterNr, 0, 1, :frmZahlHalter.dfBuchDat, :frmZahlHalter.dfBelNr, :frmZahlHalter.nBuchDM, 'Zinsen', 0, SYSDATETIME, :frmZahlHalter.nProzNr )");

					this.dfZahlDM.Number = this.dfZahlDM.Number - this.nBuchDM;
					this.df4.Number = this.df3.Number;
					this.df3.Number = this.df2.Number;
					this.df2.Number = this.df1.Number;
					this.df1.Number = this.nBuchDM;
					this.df1234.Number = this.df1234.Number + this.nBuchDM;
					// 15.02.16 Ä1345
					this.PalSet1234(this.df1234.Number);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZinsen_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbZinsen, "Überzahlung dem Tierarztkonto gutschreiben");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbZahlInfo WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZahlInfo_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbZahlInfo_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZahlInfo_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 04.07.11 F952
			if (this.dfHalterNr.Number == Sys.NUMBER_Null || this.dfHalterNr.Number == 0) 
			{
				Sal.MessageBox("Bitte Halternummer angeben.", "fehlende Eingabe", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				dlgZahlInfo.ModalDialog(this, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRechNr.Number, Int.PalValNum(this.cmbProzNr.Text), "Zahlung € " + this.dfZahlDM.Number.ToString(2) + " am " + Int.PalDateToStrDE(this.dfBuchDat.DateTime));
			}
			#endregion
		}
		
		/// <summary>
		/// pbBEZRetZahl WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBEZRetZahl_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbBEZRetZahl_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbBEZRetZahl_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBEZRetZahl_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// #16 kein leeres Buchungsdatum mehr erlauben
			if (this.dfBuchDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfBuchDat.DateTime = SalDateTime.Current;
			}
			if (this.dfZahlDM.Number == 0) 
			{
				Sal.MessageBox("Bitte vorher Zahlbetrag eingeben.", "Buchung nicht möglich", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{

				this.nIndex = this.lbBank.GetListSelectedIndex();
				this.strBankKonto = this.lbBank.GetListItemText(this.nIndex);
				this.strBankKonto = this.strBankKonto.Left(5);
				if (!(this.dfVerwahr.IsEmpty())) 
				{
					Sal.MessageBox("Buchung auf Verwahrkonto nicht möglich.", "Buchung nicht möglich", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
				else
				{
					// 23.02.15 F2292 dfRZNr -> cmbRZNr
					this.nRetHB = this.PalCheckBEZRet();
					if (this.nRetHB != 0) 
					{
						this.dfZahlDM.Number = this.dfZahlDM.Number - this.nRetHB;
						this.df4.Number = this.df3.Number;
						this.df3.Number = this.df2.Number;
						this.df2.Number = this.df1.Number;
						this.df1.Number = this.nRetHB;
						this.df1234.Number = this.df1234.Number + this.nRetHB;
						// 15.02.16 Ä1345
						this.PalSet1234(this.df1234.Number);

						// 23.02.15 F2292 dfRZNr -> cmbRZNr
						Int.PalLog("ZahlHalter: BEZRet" + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0));
					}
					else
					{
						Sal.MessageBox("Keine offene BEZ-Retourengebühren für diesen Halter gefunden.", "Nichts gefunden", (Sys.MB_Ok | Sys.MB_IconExclamation));
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBEZRetZahl_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbBEZRetZahl, "gezahlte Bankeinzug-Retouregebühr buchen");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbBuchSum WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBuchSum_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbBuchSum_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBuchSum_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfBuchSum.Number = 0;
			this.tblRechnungen.KillFocusRow();
			Var.nRow = Sys.TBL_MinRow;
			while (true)
			{
				if (!(this.tblRechnungen.FindNextRow(ref Var.nRow, 0, 0))) 
				{
					break;
				}
				this.tblRechnungen.SetFocusRow(Var.nRow);
				this.dfBuchSum.Number = this.dfBuchSum.Number + this.tblRechnungen.colnDMRest.Number;
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblRechnungen
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblRechnungenTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmZahlHalter _frmZahlHalter = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblRechnungenTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmZahlHalter frmZahlHalter
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmZahlHalter == null) 
					{
						_frmZahlHalter = (frmZahlHalter)this.FindForm();
					}
					return _frmZahlHalter;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblRechnungenTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblRechnungenTableWindow)SalWindow.FromHandle(handle, typeof(tblRechnungenTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colnNoMahn WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnNoMahn_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_AnyEdit:
						this.colnNoMahn_OnSAM_AnyEdit(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_AnyEdit event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnNoMahn_OnSAM_AnyEdit(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				// 08.01.18 Ä1681
				this.colnDMRest.Number = this.colnDMLeis.Number;
				if (this.colnNoMahn.Number != 1) 
				{
					this.colnDMRest.Number = this.colnDMRest.Number + this.colnDMMahn.Number;
				}
				if (this.colnNoZins.Number != 1) 
				{
					this.colnDMRest.Number = this.colnDMRest.Number + this.colnDMZins.Number;
				}

				this.frmZahlHalter.dfArztNr.Number = this.colnArztNr.Number;
				this.frmZahlHalter.dfRechNr.Number = this.colnRechNr.Number;
				this.frmZahlHalter.dfRechNr.PostMessage(Sys.SAM_Validate, 0, 0);
				#endregion
			}
			
			/// <summary>
			/// colnNoZins WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnNoZins_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_AnyEdit:
						this.colnNoZins_OnSAM_AnyEdit(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_AnyEdit event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnNoZins_OnSAM_AnyEdit(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				// 08.01.18 Ä1681
				this.colnDMRest.Number = this.colnDMLeis.Number;
				if (this.colnNoMahn.Number != 1) 
				{
					this.colnDMRest.Number = this.colnDMRest.Number + this.colnDMMahn.Number;
				}
				if (this.colnNoZins.Number != 1) 
				{
					this.colnDMRest.Number = this.colnDMRest.Number + this.colnDMZins.Number;
				}

				this.frmZahlHalter.dfArztNr.Number = this.colnArztNr.Number;
				this.frmZahlHalter.dfRechNr.Number = this.colnRechNr.Number;
				this.frmZahlHalter.dfRechNr.PostMessage(Sys.SAM_Validate, 0, 0);
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblBEZRetEinzug
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblBEZRetEinzugTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmZahlHalter _frmZahlHalter = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblBEZRetEinzugTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmZahlHalter frmZahlHalter
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmZahlHalter == null) 
					{
						_frmZahlHalter = (frmZahlHalter)this.FindForm();
					}
					return _frmZahlHalter;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblBEZRetEinzugTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblBEZRetEinzugTableWindow)SalWindow.FromHandle(handle, typeof(tblBEZRetEinzugTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalCheckHaBuLocals
			{
				public SalNumber nSumHB = 0;
				public SalString strPSelect = "";
				public SalNumber nZahlDM = 0;
				public SalNumber nPRZNr = 0;
			}
		}
		#endregion
	}
}
