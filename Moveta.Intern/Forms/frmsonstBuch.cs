// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// sonstige Buchungen
	/// </summary>
	/// <param name="bPharma"></param>
	public partial class frmsonstBuch : SalFormWindow
	{
		#region Window Parameters
		public SalBoolean bPharma;
		#endregion
		
		#region Window Variables
		public SalNumber nTAVSt = 0;
		public SalNumber nDiverse = 0;
		public SalNumber nKZHaben = 0;
		public SalBoolean bExists = false;
		public SalString strTHN1 = "";
		public SalString strTHN2 = "";
		public SalString strTHStr = "";
		public SalString strTHOrt = "";
		public SalString strTHLand = "";
		public SalNumber nHalterNr = 0;
		public SalNumber nDMRA = 0;
		public SalNumber nTAReverse = 0;
		public SalNumber nSA = 0;
		public SalString strSH = "";
		public SalSqlHandle hSqlPR = SalSqlHandle.Null;
		public SalNumber nArztNr2 = 0;
		public SalNumber nProzNr = 0;
        public SalString strKOCode = "";
        public SalNumber nErr = 0;
        public SalNumber nFetch = 0;
        #endregion

        #region Constructors/Destructors

        /// <summary>
        /// Default Constructor.
        /// </summary>
        public frmsonstBuch(SalBoolean bPharma)
		{
			// Assign global reference.
			App.frmsonstBuch = this;
			// Window Parameters initialization.
			this.bPharma = bPharma;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmsonstBuch CreateWindow(Control owner, SalBoolean bPharma)
		{
			frmsonstBuch frm = new frmsonstBuch(bPharma);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmsonstBuch FromHandle(SalWindowHandle handle)
		{
			return ((frmsonstBuch)SalWindow.FromHandle(handle, typeof(frmsonstBuch)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalCheckSB()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (cbSB.Checked) 
				{
					Sal.EnableWindowAndLabel(dfSBSoll);
					Sal.EnableWindowAndLabel(dfSBHaben);
					Sal.EnableWindowAndLabel(dfSBBuchText);
				}
				else
				{
					dfSBSoll.Number = Sys.NUMBER_Null;
					dfSBHaben.Number = Sys.NUMBER_Null;
					dfSBBuchText.Text = "";
					Sal.DisableWindowAndLabel(dfSBSoll);
					Sal.DisableWindowAndLabel(dfSBHaben);
					Sal.DisableWindowAndLabel(dfSBBuchText);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalGet1234()
		{
			#region Local Variables
			SalNumber nRet = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				nRet = Int.PalGetProfileInt(Var.strBNZei, "sonstBuch", 0) / 100;
				return nRet;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="n1234"></param>
		/// <returns></returns>
		public SalNumber PalSet1234(SalNumber n1234)
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.PalSetProfileString(Var.strBNZei, "sonstBuch", (n1234 * 100).ToString(0));
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmsonstBuch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmsonstBuch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmsonstBuch_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmsonstBuch_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmsonstBuch_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;

			this.dfBuchDat.DateTime = SalDateTime.Current;
			this.dfArztNr.Clear();
			this.dfBelNr.Clear();
			this.dfBelDat.Clear();
			this.dfBuchText.Clear();
			this.nKZHaben = 0;
			this.dfDM.Clear();
			this.dfGegenkonto.Clear();
			this.dfKZMwSt.Number = 0;
			this.dfSteuerArzt.Text = "N";
			// 20.08.12 Ä797
			Int.SqlConnection(ref this.hSqlPR);
			// 20.08.12 Ä797
			this.dfHalterNr.DisableWindowAndLabel();
			this.dfHalterName.DisableWindowAndLabel();
			this.cmbProzNr.DisableWindowAndLabel();
			// 01.10.21 Ä1974
			if (this.bPharma) 
			{
				this.SetText("Pharmarechnungen");
				this.dfRechNr.HideWindowAndLabel();
				Sal.HideWindow(this.cbZahlTab);
				this.dfHalterNr.HideWindowAndLabel();
				this.cmbProzNr.HideWindowAndLabel();
				this.dfRZNr.HideWindowAndLabel();
				this.dfHalterName.HideWindowAndLabel();
				this.dfKZMwSt.HideWindowAndLabel();
				this.dfSteuerArzt.Text = "J";
			}
			// 02.08.23 Ä2126 Abstimm-Kz. auch bei Nicht-Pharma-Rg.
			// Else
			// Call SalHideWindowAndLabel( dfExportNr )
			// 19.02.18 Ä1709
			this.df1234.Number = this.PalGet1234();
			// 14.11.23 Ä2144 +Kontierung
			this.cmbKontierung.ClearList();
			this.cmbKontierung.PopulateList(this.hSqlPR, "SELECT DISTINCT kocode FROM ko ORDER BY kocode");
            // 02.04.24 ###
            // Call SqlHandleExec(hSqlPR,'SELECT DISTINCT  @LEFT(kocode, @scan(kocode, \'-\')+1) INTO :frmsonstBuch.strKOCode FROM ko WHERE @RIGHT(kocode,1) <> \'-\'' ,'KO-Code holen', nErr)
            // Call SqlFetchNext(hSqlPR,nFetch)
            // While nFetch != FETCH_EOF
            // Set strKOCode = SalStrLeftX( strKOCode, SalStrScan( strKOCode, '-' )+1 )
            // Call SalListAdd( cmbKontierung, strKOCode )
            // Call SqlFetchNext(hSqlPR, nFetch)
            // Call SqlCommit( hSqlPR )

            Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmsonstBuch_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 20.08.12 Ä797
			this.hSqlPR.Disconnect();

			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT aname1, aname2, aort, anr2
into :frmsonstBuch.dfArztName, :frmsonstBuch.dfArztName2, :frmsonstBuch.dfArztOrt, :frmsonstBuch.nArztNr2
from A where aarztnr=:frmsonstBuch.dfArztNr");
			if (this.nArztNr2 == SalNumber.Null || this.nArztNr2 == 0) 
			{
				this.nArztNr2 = this.dfArztNr.Number;
			}
			#endregion
		}
		
		/// <summary>
		/// dfRechNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRechNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlIstDa(" from rk where rkarztnr = :frmsonstBuch.dfArztNr AND rkrechnr = :frmsonstBuch.dfRechNr AND rkdeaktiv IS NULL", ref this.bExists);
			if (!(this.bExists)) 
			{
				Sal.MessageBox("Diese Rechnung existiert nicht !", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				this.dfBuchText.Text = this.dfArztNr.Number.ToString(0) + "/" + this.dfRechNr.Number.ToString(0);
				Int.SqlImmedSel(@"SELECT hhalternr, hti || hvn || ' ' || hnn, hname2, hstr, hland, hort
into :frmsonstBuch.nHalterNr, :frmsonstBuch.strTHN1, :frmsonstBuch.strTHN2, :frmsonstBuch.strTHStr, :frmsonstBuch.strTHLand, :frmsonstBuch.strTHOrt
from RK, H where rkarztnr=:frmsonstBuch.dfArztNr AND rkrechnr = :frmsonstBuch.dfRechNr
AND rkarztnr=harztnr AND rkhalternr=hhalternr AND rkdeaktiv IS NULL AND hdeaktiv IS NULL");
				// 20.08.12 Ä797
				this.dfHalterNr.Number = this.nHalterNr;
				this.dfHalterName.Text = this.strTHN1;
				this.cmbProzNr.ClearList();
				this.cmbProzNr.Text = "";
				if (this.dfRechNr.Number == Sys.NUMBER_Null) 
				{
					this.cmbProzNr.PopulateList(this.hSqlPR, @"SELECT DISTINCT prdnr FROM prd WHERE prdarztnr IN ( :frmsonstBuch.dfArztNr, :frmsonstBuch.nArztNr2) AND prdhalternr = :frmsonstBuch.dfHalterNr
 AND prdrechnr = :frmsonstBuch.dfRechNr
AND prdnr NOT IN (SELECT mbnr FROM mb) ORDER BY prdnr DESC ");
				}
				else
				{
					this.cmbProzNr.PopulateList(this.hSqlPR, @"SELECT DISTINCT prdnr FROM prd WHERE prdarztnr IN ( :frmsonstBuch.dfArztNr, :frmsonstBuch.nArztNr2) AND prdhalternr = :frmsonstBuch.dfHalterNr
 AND prdrechnr = :frmsonstBuch.dfRechNr
AND prdnr NOT IN (SELECT mbnr FROM mb) ORDER BY prdnr DESC ");
				}
				this.cmbProzNr.Text = this.cmbProzNr.GetListItemText(0);
				this.nProzNr = Int.PalValNum(this.cmbProzNr.Text);
			}
			#endregion
		}
		
		/// <summary>
		/// cbHaben WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbHaben_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbHaben_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbHaben_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(this.cbHaben.Checked)) 
			{
				this.cbZahlTab.Checked = false;
			}
			if (this.cbZahlTab.Checked) 
			{
				this.dfHalterNr.EnableWindowAndLabel();
				this.dfHalterName.EnableWindowAndLabel();
				this.cmbProzNr.EnableWindowAndLabel();
			}
			else
			{
				this.dfHalterNr.DisableWindowAndLabel();
				this.dfHalterName.DisableWindowAndLabel();
				this.cmbProzNr.DisableWindowAndLabel();
			}
			#endregion
		}
		
		/// <summary>
		/// cbZahlTab WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZahlTab_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbZahlTab_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZahlTab_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.cbZahlTab.Checked && (this.dfRechNr.Number == 0 || this.dfRechNr.Number == Sys.NUMBER_Null)) 
			{
				Sal.MessageBox("Bitte geben Sie die Rechnungsnr. an.", "Eingabe fehlt", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.cbZahlTab.Checked = false;
				e.Return = false;
				return;
			}
			if (this.cbZahlTab.Checked) 
			{
				this.dfHalterNr.EnableWindowAndLabel();
				this.dfHalterName.EnableWindowAndLabel();
				this.cmbProzNr.EnableWindowAndLabel();
			}
			else
			{
				this.dfHalterNr.DisableWindowAndLabel();
				this.dfHalterName.DisableWindowAndLabel();
				this.cmbProzNr.DisableWindowAndLabel();
			}
			#endregion
		}
		
		/// <summary>
		/// dfGegenkonto WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfGegenkonto_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfGegenkonto_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfGegenkonto_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// If dfGegenkonto <10
			// Set dfGegenkonto = dfGegenkonto * 10000
			// Else If dfGegenkonto <100
			// Set dfGegenkonto = dfGegenkonto * 1000
			// Else If dfGegenkonto <1000
			// Set dfGegenkonto = dfGegenkonto * 100
			// Else If dfGegenkonto <10000
			// Set dfGegenkonto = dfGegenkonto * 10
			// 31.01.02
			if (this.dfGegenkonto.Number < 10000) 
			{
				if (Sys.IDNO == Sal.MessageBox(@"Kontenklasse 0.

Ist das richtig ?", "", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					e.Return = false;
					return;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// cbSB WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbSB_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbSB_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbSB_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalCheckSB();
			#endregion
		}
		
		/// <summary>
		/// pbZahlInfo WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZahlInfo_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbZahlInfo_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZahlInfo_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			dlgZahlInfo.ModalDialog(this, this.dfArztNr.Number, this.nHalterNr, this.dfRechNr.Number, SalNumber.Null, "sonst Buchung € " + this.dfDM.Number.ToString(2) + " am " + Int.PalDateToStrDE(this.dfBelDat.DateTime));
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// #16 kein leeres Buchungsdatum mehr erlauben
			if (this.dfBuchDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfBuchDat.DateTime = SalDateTime.Current;
			}
			// 06.03.23 Ä2086
			Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
			if (this.dfBuchDat.DateTime < Var.dtINIMinBuchDat) 
			{
				this.dfBuchDat.DateTime = Var.dtINIMinBuchDat;
			}


			if (this.dfDM.IsEmpty()) 
			{
				Sal.MessageBox("Ohne €-Betrag keine Buchung !", "Kein Betrag", Sys.MB_Ok);
			}
			else if (this.dfArztNr.IsEmpty()) 
			{
				Sal.MessageBox("Ohne Arzt-Nr. keine Buchung !", "Keine Arzt-Nr.", Sys.MB_Ok);
			}
			else if (this.dfGegenkonto.IsEmpty()) 
			{
				Sal.MessageBox("Ohne Gegenkonto keine Buchung !", "Kein Gegenkonto", Sys.MB_Ok);
			}
			else if (this.cmbKontierung.Text == "") 
			{
				Sal.MessageBox("Bitte wählen Sie eine Kontierung aus.", "Kontierung fehlt.", Sys.MB_Ok);
			}
			else
			{
				Sal.WaitCursor(true);
				// 04.11.22 Ä2015
				if (this.cbMahngeb.Checked) 
				{
					this.cbHaben.Checked = true;
				}

				if (this.cbHaben.Checked) 
				{
					this.nKZHaben = 1;
				}
				else
				{
					this.nKZHaben = 0;
				}
				this.nTAVSt = (this.dfDM.Number * Var.nMwSatz[this.dfKZMwSt.Number] * 100 / (100 + Var.nMwSatz[this.dfKZMwSt.Number])).Round() / 100;
				if (this.nKZHaben == 1) 
				{
					// 05.05.11 F913
					if (this.bPharma)  // 01.10.21 Ä1974
					{
						this.nSA = 4;
					}
					else
					{
						this.nSA = 1;
					}
					// 04.11.22 Ä2015 If
					// 14.11.23 Ä2144 +Kontierung
					if (this.cbMahngeb.Checked) 
					{
						Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkfall,
tkkontocode)
VALUES (:frmsonstBuch.dfArztNr, :frmsonstBuch.nSA, 0, :frmsonstBuch.dfBuchText,
0, 0, :frmsonstBuch.dfBelNr, :frmsonstBuch.dfBuchDat, :frmsonstBuch.dfGegenkonto,
0, :frmsonstBuch.nKZHaben, 0,
0, 0, :frmsonstBuch.dfDM, :frmsonstBuch.nTAVSt, :nMwSatz[frmsonstBuch.dfKZMwSt],0, 0, 0,
0, :frmsonstBuch.dfDM, 19,
:frmsonstBuch.cmbKontierung)");
					}
					else
					{
						Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben,
tkkontocode)
VALUES (:frmsonstBuch.dfArztNr, :frmsonstBuch.nSA, 0, :frmsonstBuch.dfBuchText,
0, 0, :frmsonstBuch.dfBelNr, :frmsonstBuch.dfBuchDat, :frmsonstBuch.dfGegenkonto,
0, :frmsonstBuch.nKZHaben, 0,
:frmsonstBuch.dfDM, 0, 0,:frmsonstBuch.nTAVSt, :nMwSatz[frmsonstBuch.dfKZMwSt],0, 0, 0,
0, :frmsonstBuch.dfDM,
:frmsonstBuch.cmbKontierung)");
					}
					// 14.08.12 Ä797
					if (this.cbZahlTab.Checked) 
					{
						// 13.05.14 F2027
						this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

						// 26.03.19 Ä1844 + , zaerfdat
						Int.SqlImmedX(@"INSERT INTO za
(zaarztnr, zahalternr, zarechnr, zakz, zabuchdat, zabelegnr, zadm, zabuchtext, zaproznr, zarznr, zaerfdat)
VALUES( :frmsonstBuch.dfArztNr, :frmsonstBuch.dfHalterNr, :frmsonstBuch.dfRechNr, 0, :frmsonstBuch.dfBuchDat, :frmsonstBuch.dfBelNr, :frmsonstBuch.dfDM,
:frmsonstBuch.dfBuchText, :frmsonstBuch.nProzNr, :frmsonstBuch.dfRZNr, SYSDATETIME )");
					}
				}
				else
				{
					// 18.04.11 Ä563
					if (this.cbTAReverse.Checked) 
					{
						this.nTAReverse = 1;
					}
					else
					{
						this.nTAReverse = 0;
					}

					// 05.05.11 F913
					if (this.bPharma)  // 01.10.21 Ä1974
					{
						this.nSA = 4;
					}
					else if (((SalString)this.dfBuchText.Text).Left(1) == "+") 
					{
						this.nSA = 2;
					}
					else
					{
						this.nSA = 0;
					}

					// 05.05.11 F913 0 -> nSA
					// 14.11.23 Ä2144 +Kontierung
					Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkreverse,
tkkontocode)
VALUES (:frmsonstBuch.dfArztNr, :frmsonstBuch.nSA, 0, :frmsonstBuch.dfBuchText,
0, 0, :frmsonstBuch.dfBelNr, :frmsonstBuch.dfBuchDat, :frmsonstBuch.dfGegenkonto,
0, :frmsonstBuch.nKZHaben, :frmsonstBuch.nTAVSt,
0,0, 0,0, :nMwSatz[frmsonstBuch.dfKZMwSt],0, 0, :frmsonstBuch.dfDM,
 :frmsonstBuch.dfDM, 0, :frmsonstBuch.nTAReverse,
:frmsonstBuch.cmbKontierung)");
				}
				if (!(this.cbnurTK.Checked)) 
				{
					if (this.dfSteuerArzt.Text == "N") 
					{
						this.nDiverse = this.dfDM.Number - this.nTAVSt;
					}
					else
					{
						this.nDiverse = this.dfDM.Number;
					}
					if (this.nKZHaben == 0) 
					{
						Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiexportnr)
VALUES (0, 16000, :frmsonstBuch.dfGegenkonto, :frmsonstBuch.dfBelNr, :frmsonstBuch.dfBuchDat,
:frmsonstBuch.dfBuchText,
:frmsonstBuch.nDiverse, 6, :frmsonstBuch.dfExportNr)");
						if (Var.nMwSatz[this.dfKZMwSt.Number] != 0.00m && this.dfSteuerArzt.Text == "N") 
						{
							// 30.06.20 Ä1892
							Var.nMwStSenkung = 17760;
							if (this.dfBuchDat.DateTime >= new SalDateTime(2020, 7, 1) && this.dfBuchDat.DateTime <= new SalDateTime(2020, 12, 31)) 
							{
								Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
							}

							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiexportnr)
VALUES (0, 16000, :nMwStSenkung, :frmsonstBuch.dfBelNr, :frmsonstBuch.dfBuchDat,
:frmsonstBuch.dfBuchText,
:frmsonstBuch.nTAVSt, 6, :frmsonstBuch.dfExportNr)");
						}
					}
					else
					{
						Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiexportnr)
VALUES (0,  :frmsonstBuch.dfGegenkonto, 16000, :frmsonstBuch.dfBelNr, :frmsonstBuch.dfBuchDat,
:frmsonstBuch.dfBuchText,
:frmsonstBuch.nDiverse, 6, :frmsonstBuch.dfExportNr)");
						if (Var.nMwSatz[this.dfKZMwSt.Number] != 0.00m && this.dfSteuerArzt.Text == "N") 
						{
							// 30.06.20 Ä1892
							Var.nMwStSenkung = 17760;
							if (this.dfBuchDat.DateTime >= new SalDateTime(2020, 7, 1) && this.dfBuchDat.DateTime <= new SalDateTime(2020, 12, 31)) 
							{
								Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
							}

							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiexportnr)
VALUES (0, :nMwStSenkung, 16000, :frmsonstBuch.dfBelNr, :frmsonstBuch.dfBuchDat,
:frmsonstBuch.dfBuchText,
:frmsonstBuch.nTAVSt, 6, :frmsonstBuch.dfExportNr)");
						}
					}
				}
				// 15.03.02 Benachrichtigung an RA
				if (this.nKZHaben == 1) 
				{
					Int.SqlIstDa(" from ra where raarztnr = :frmsonstBuch.dfArztNr AND rarechnr = :frmsonstBuch.dfRechNr", ref this.bExists);
					if (this.bExists) 
					{
						this.nDMRA = this.dfDM.Number;
						// 10.04.06 Ländercodes
						this.strTHLand = Int.PalPruefeLC(this.strTHLand, 0);

						dlgDM.ModalDialog(this, "Zahlbetrag, der dem RA gemeldet werden soll :", ref this.nDMRA);
						// 06.08.08
						if (Var.bfrmBriefVari) 
						{
							while (!(App.frmBriefVari.DestroyWindow())) 
							{
							}
						}

						frmBriefVari.CreateWindow(Sys.hWndNULL, this.dfArztNr.Number, this.nHalterNr, this.dfRechNr.Number, "R", @"Sehr geehrte Damen und Herren,

heute wurde bei uns für die Rechnung " + this.dfArztNr.Number.ToString(0) + "/" + this.dfRechNr.Number.ToString(0) + @"
eine Zahlung in Höhe von EUR " + this.nDMRA.ToString(2) + @" gebucht.

Der Schuldner ist :

" + this.strTHN1 + @"
" + this.strTHN2 + @"
" + this.strTHStr + @"
" + this.strTHOrt + @"
" + this.strTHLand + @"


Wir bitten um Beachtung !", new SalDateTime(1900, 1, 1), "", "", "", "", "", false);
					}
				}
				// 10.06.11 Ä591
				// If cbSB
				// If nKZHaben = 1
				// Set strSH = 'H'
				// Else
				// Set strSH = 'S'
				// Call SqlImmed( 'INSERT INTO sb (sbarztnr, sbbeldat, sbbelnr, sbbuchtext, sbkonto, sbgegkto, sbdm, sbsh, sbmwst, sbuebdat)
				// VALUES(:frmsonstBuch.dfArztNr, :frmsonstBuch.dfBelDat, :frmsonstBuch.dfBelNr, :frmsonstBuch.dfSBBuchText, :frmsonstBuch.dfSBSoll, :frmsonstBuch.dfSBHaben,
				// :frmsonstBuch.dfDM, :frmsonstBuch.strSH, :nMwSatz[frmsonstBuch.dfKZMwSt], NULL)' )

				this.df4.Number = this.df3.Number;
				this.df3.Number = this.df2.Number;
				this.df2.Number = this.df1.Number;
				this.df1.Number = this.dfDM.Number;
				this.df1234.Number = this.df1234.Number + this.dfDM.Number;
				// 19.02.18 Ä1709
				this.PalSet1234(this.df1234.Number);

				// Set dfBuchDat = SalDateCurrent()
				this.dfArztNr.Clear();
				this.dfRechNr.Clear();
				this.dfBuchText.Clear();
				this.nKZHaben = 0;
				this.dfDM.Clear();
				this.dfGegenkonto.Clear();
				this.dfKZMwSt.Number = 0;
				this.dfSteuerArzt.Text = "N";
				// 10.06.11 Ä591
				this.cbSB.Checked = false;
				this.PalCheckSB();
				// 20.08.12 Ä797
				this.dfHalterNr.DisableWindowAndLabel();
				this.dfHalterName.DisableWindowAndLabel();
				this.cmbProzNr.DisableWindowAndLabel();
				// 14.11.23 Ä2144
				this.cmbKontierung.Text = "";

				this.cbMahngeb.Checked = false;

				Sal.WaitCursor(false);
				this.dfArztNr.SetFocus();
			}
			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn
into :frmsonstBuch.dfHalterName
from H where  harztnr = :frmsonstBuch.dfArztNr AND hhalternr = :frmsonstBuch.dfHalterNr AND hdeaktiv IS NULL ");

			this.cmbProzNr.ClearList();
			this.cmbProzNr.Text = "";
			if (this.dfRechNr.Number == Sys.NUMBER_Null) 
			{
				this.cmbProzNr.PopulateList(this.hSqlPR, @"SELECT DISTINCT prdnr FROM prd WHERE prdarztnr IN ( :frmsonstBuch.dfArztNr, :frmsonstBuch.nArztNr2) AND prdhalternr = :frmsonstBuch.dfHalterNr
AND prdnr NOT IN (SELECT mbnr FROM mb) ORDER BY prdnr DESC ");
			}
			else
			{
				this.cmbProzNr.PopulateList(Var.hSqlZa, @"SELECT DISTINCT prdnr FROM prd WHERE prdarztnr IN ( :frmsonstBuch.dfArztNr, :frmsonstBuch.nArztNr2) AND prdhalternr = :frmsonstBuch.dfHalterNr
AND prdnr NOT IN (SELECT mbnr FROM mb) ORDER BY prdnr DESC ");
			}
			this.cmbProzNr.Text = this.cmbProzNr.GetListItemText(0);
			this.nProzNr = Int.PalValNum(this.cmbProzNr.Text);
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// cmbProzNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbProzNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.cmbProzNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbProzNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nProzNr = Int.PalValNum(this.cmbProzNr.Text);
			Int.SqlImmedSel(@"SELECT prarztnr, prhalternr
into :frmsonstBuch.dfArztNr, :frmsonstBuch.dfHalterNr
from pr where prnr=:frmsonstBuch.nProzNr");
			#endregion
		}
		
		/// <summary>
		/// dfRZNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRZNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRZNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRZNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			Int.SqlImmedSel("SELECT rzarztnr, rzhalternr INTO :frmsonstBuch.dfArztNr, :frmsonstBuch.dfHalterNr FROM rz WHERE rznr = :frmsonstBuch.dfRZNr AND rzdeaktiv IS NULL");
			this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0);

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// pbDel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDel_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDel_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.df1234.Number = 0;
			this.PalSet1234(0);
			#endregion
		}
		
		/// <summary>
		/// pbKontDel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKontDel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbKontDel_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKontDel_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.cmbKontierung.Text = "";
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
			this.DestroyWindow();
			#endregion
		}
		#endregion
	}
}
