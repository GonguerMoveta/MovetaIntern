// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmMBAktiErf : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlAktiErf = SalSqlHandle.Null;
		public SalBoolean bOk = false;
		public SalNumber nArztNr2 = 0;
		public SalNumber nKZPraxArt = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmMBAktiErf()
		{
			// Assign global reference.
			App.frmMBAktiErf = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmMBAktiErf CreateWindow(Control owner)
		{
			frmMBAktiErf frm = new frmMBAktiErf();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmMBAktiErf FromHandle(SalWindowHandle handle)
		{
			return ((frmMBAktiErf)SalWindow.FromHandle(handle, typeof(frmMBAktiErf)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber LoescheMaske()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.ClearField(dfArztNr);
				Sal.ClearField(dfArztName);
				Sal.ClearField(dfHalterNr);
				Sal.ClearField(dfHalterName);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HoleArzt()
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlImmedSel(@"SELECT anr2, akzpraxart
INTO :frmMBAktiErf.nArztNr2, :frmMBAktiErf.nKZPraxArt
FROM a WHERE aarztnr=:frmMBAktiErf.dfArztNr");
				if (nKZPraxArt == 2) 
				{
					dfArztNr.Number = nArztNr2;
					Int.SqlImmedSel(@"SELECT anr2
INTO :frmMBAktiErf.nArztNr2
FROM a WHERE aarztnr=:frmMBAktiErf.dfArztNr");
				}
				else if (nKZPraxArt == 0) 
				{
					nArztNr2 = dfArztNr.Number;
				}
				Int.SqlIstDa("from A where aarztnr=:frmMBAktiErf.dfArztNr", ref bOk);
				if (bOk) 
				{
					Int.SqlImmedSel(@"SELECT aname1
into :frmMBAktiErf.dfArztName
from A where aarztnr=:frmMBAktiErf.dfArztNr");
				}
				else
				{
					Sal.ClearField(dfArztNr);
					Sal.ClearField(dfArztName);
					Sal.SetFocus(dfArztNr);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HoleHalter()
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlIstDa("from H where  harztnr = :frmMBAktiErf.dfArztNr AND hhalternr = :frmMBAktiErf.dfHalterNr AND hdeaktiv IS NULL  ", ref bOk);
				if (bOk) 
				{
					Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn
into :frmMBAktiErf.dfHalterName
from H where  harztnr = :frmMBAktiErf.dfArztNr AND hhalternr = :frmMBAktiErf.dfHalterNr ");
				}
				else
				{
					LoescheMaske();
					Sal.SetFocus(dfArztNr);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strTyp"></param>
		/// <returns></returns>
		public SalNumber Speichern(SalString strTyp)
		{
			#region Actions
			using (new SalContext(this))
			{
				if (Sal.IsNull(dfArztNr) || Sal.IsNull(dfHalterNr)) 
				{
					Sal.MessageBox(@"Arzt-Nr. oder
Halter-Nr. fehlt", "Daten unvollst√§ndig", (Sys.MB_Ok | Sys.MB_IconExclamation));
					Sal.SetFocus(dfArztNr);
				}
				else
				{
					Int.PalAktion(dfArztNr.Number, dfHalterNr.Number, SalNumber.Null, "MB", strTyp, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null);
					Sal.MessageBeep(0);
					LoescheMaske();
					Sal.SetFocus(dfArztNr);
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmMBAktiErf WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMBAktiErf_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmMBAktiErf_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMBAktiErf_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlConnection(ref this.hSqlAktiErf);
			this.tblVermerke.Populate(this.hSqlAktiErf, @"SELECT vcode, vbez INTO :tblVermerke.colsCode, :tblVermerke.colsBez
FROM v WHERE vart = 1
ORDER BY vcode", Sys.TBL_FillAll);
			this.hSqlAktiErf.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.HoleArzt();
			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.HoleHalter();
			#endregion
		}
		
		/// <summary>
		/// tblVermerke WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblVermerke_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.tblVermerke_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblVermerke_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.Speichern(this.tblVermerke.colsCode.Text);
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.DestroyWindow();
			#endregion
		}
		#endregion
		
		#region tblVermerke
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblVermerkeTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmMBAktiErf _frmMBAktiErf = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblVermerkeTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmMBAktiErf frmMBAktiErf
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmMBAktiErf == null) 
					{
						_frmMBAktiErf = (frmMBAktiErf)this.FindForm();
					}
					return _frmMBAktiErf;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblVermerkeTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblVermerkeTableWindow)SalWindow.FromHandle(handle, typeof(tblVermerkeTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
