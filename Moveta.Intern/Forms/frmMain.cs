// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// Anmeldung
	/// </summary>
	public partial class frmMain : SalFormWindow
	{
		#region Window Variables
		public SalDateTime dtProgDat = SalDateTime.Null;
		public SalString strUser = "";
		public SalString strStern = "";
		public SalSqlHandle hSqlDisk = SalSqlHandle.Null;
		public SalSqlHandle hSql70 = SalSqlHandle.Null;
		public SalNumber nErr = 0;
		public SalNumber nFetch = 0;
		public SalNumber nFetch70 = 0;
		public SalWindowHandle hWndReport = SalWindowHandle.Null;
		public SalString strReportName = "";
		public SalNumber nArztVon = 0;
		public SalNumber nArztBis = 0;
		public SalNumber nHalterVon = 0;
		public SalNumber nHalterBis = 0;
		public SalDateTime dtDatVon = SalDateTime.Null;
		public SalDateTime dtDatBis = SalDateTime.Null;
		public SalDateTime dtDatVM = SalDateTime.Null;
		public SalNumber nTANr = 0;
		public SalNumber nTANr2 = 0;
		public SalString strTAN1 = "";
		public SalString strTAN2 = "";
		public SalString strTAStr = "";
		public SalString strTAOrt = "";
		public SalString strTALand = "";
		public SalString strTAEMail = "";
		public SalString strTAFax = "";
		public SalString strTATelPraxis = "";
		public SalString strTATelPrivat = "";
		public SalString strTATelHandy = "";
		public SalString strTAAPIKey = "";
		public SalString strTAAPISecret = "";
		public SalString strTASVN1 = "";
		public SalString strTASVN2 = "";
		public SalString strTASVStr = "";
		public SalString strTASVOrt = "";
		public SalString strTASVLand = "";
		public SalString strTAUStID = "";
		public SalString strSteuerNr = "";
		public SalString strTAUStID2 = "";
		public SalNumber nTHNr = 0;
		public SalString strTHMatch = "";
		public SalString strTHAnr = "";
		public SalString strTHTi = "";
		public SalString strTHVN = "";
		public SalString strTHNN = "";
		public SalString strTHN1 = "";
		public SalString strTHN2 = "";
		public SalString strTHStr = "";
		public SalString strTHOrt = "";
		public SalString strTHLand = "";
		public SalString strTHText = "";
		public SalDateTime dtTHBEZSignDat = SalDateTime.Null;
		public SalString strTHBEZIBAN = "";
		public SalString strTHBEZBIC = "";
		public SalNumber nRZNr = 0;
		public SalNumber nRZZins = 0;
		public SalNumber nRZArztNr = 0;
		public SalNumber nRZHalterNr = 0;
		public SalNumber nRZRechNr = 0;
		public SalNumber nRZLeis = 0;
		public SalNumber nRZArzn = 0;
		public SalNumber nRZMahn = 0;
		public SalNumber nRZMBOpl = 0;
		public SalNumber nRZRate = 0;
		public SalNumber nRZTag = 0;
		public SalDateTime dtRZPauseBis = SalDateTime.Null;
		public SalDateTime dtRZKuendDat = SalDateTime.Null;
		public SalNumber nTHBankeinzug = 0;
		public SalNumber nTHFaellTg = 0;
		public SalString strBank = "";
		public SalString strBLZ = "";
		public SalString strKonto = "";
		public SalDateTime dtEintritt = SalDateTime.Null;
		public SalNumber nRechGeb = 0;
		public SalNumber nRechDM = 0;
		public SalNumber nDMOP = 0;
		public SalDateTime dtRechDat = SalDateTime.Null;
		public SalString strVon = "";
		public SalString strAn = "";
		public SalDateTime dtDatum = SalDateTime.Null;
		public SalDateTime dtWieVor = SalDateTime.Null;
		public SalString strMeldung = "";
		public SalNumber nZMDM = 0;
		public SalString strZahlArt = "";
		public SalString lsBemerk = "";
		public SalString strText = "";
		public SalDateTime dtZettelDat = SalDateTime.Null;
		public SalNumber nX = 0;
		public SalNumber nY = 0;
		public SalString strLike = "";
		public SalString strSelect = "";
		public SalNumber nSA = 0;
		public SalNumber nTANrAlt = 0;
		public SalNumber nTHNrAlt = 0;
		public SalNumber nTANrL = 0;
		public SalNumber nAnzEL = 0;
		public SalNumber nAnzEE = 0;
		public SalNumber nAnzWv = 0;
		public SalDateTime dtBuchDat = SalDateTime.Null;
		public SalString strBuchText = "";
		public SalString strBuchTextGrp = "";
		public SalNumber nRechNr = 0;
		public SalNumber nDMRech = 0;
		public SalNumber nDMRechL = 0;
		public SalNumber nDMRechA = 0;
		public SalNumber nDMPorto = 0;
		public SalNumber nDMMahn = 0;
		public SalNumber nDMZins = 0;
		public SalNumber nDMMwSt = 0;
		public SalNumber nDMVorst = 0;
		public SalNumber nDMSoll = 0;
		public SalNumber nDMHaben = 0;
		public SalNumber nDMZaL = 0;
		public SalNumber nDMZaA = 0;
		public SalNumber nDMUeberw = 0;
		public SalNumber nDMmitVorstS = 0;
		public SalNumber nDMmitVorstV = 0;
		public SalNumber nSoll = 0; // für TKSOLL
		public SalNumber nHaben = 0; // für TKHABEN
		public SalNumber nProz = 0;
		public SalBoolean bNoFetch = false;
		public SalString strLA = "";
		public SalNumber nZaRech = 0;
		public SalNumber nZaRechL = 0;
		public SalNumber nZaRechA = 0;
		public SalNumber nZaMahn = 0;
		public SalNumber nZaZins = 0;
		public SalNumber nMS = 0;
		public SalDateTime dtMahnDat = SalDateTime.Null;
		public SalDateTime dtTeilzDat = SalDateTime.Null;
		public SalDateTime dtVerjDat = SalDateTime.Null;
		public SalBoolean bRepOk = false;
		public SalNumber nAnzRech = 0;
		public SalNumber nRechJahr = 0;
		public SalNumber nRechJahrAlt = 0;
		public SalNumber nRechMonat = 0;
		public SalNumber nKZZahl = 0;
		public SalNumber nDMAusbuch = 0;
		public SalString strBezeichnung = "";
		public SalNumber nMinRechNr = 0;
		public SalNumber nZahlDM = 0;
		public SalNumber nBuchDM = 0;
		public SalNumber nRestL = 0;
		public SalNumber nRestA = 0;
		public SalNumber nRestM = 0;
		public SalNumber nRestZ = 0;
		public SalNumber nKonto = 0;
		public SalString strErgebnis = "";
		public SalNumber nAuszug = 0;
		public SalString strRef = "";
		public SalNumber nTextSchl = 0;
		public SalString strVZ1 = "";
		public SalString strVZ2 = "";
		public SalString strVZ3 = "";
		public SalString strVZ4 = "";
		public SalString strVZ5 = "";
		public SalString strVZ6 = "";
		public SalString strAuftr1 = "";
		public SalString strAuftr2 = "";
		public SalNumber nDMa = 0;
		public SalNumber nDMb = 0;
		public SalNumber nDMc = 0;
		public SalString strabc = "";
		public SalNumber nResult = 0;
		public SalString strTABank = "";
		public SalString strTABLZ = "";
		public SalString strTAKonto = "";
		public SalString strTVBank = "";
		public SalString strTVBLZ = "";
		public SalString strTVKonto = "";
		public SalNumber nVorRech = 0;
		public SalNumber nVorSoll = 0;
		public SalNumber nVorHaben = 0;
		public SalNumber nVorVSt = 0;
		public SalNumber nVorMwSt = 0;
		public SalNumber nVorMahn = 0;
		public SalNumber nAussenst = 0;
		public SalNumber nKZPraxArt = 0;
		public SalNumber nOPMS = 0;
		public SalNumber nOPMSbis = 0;
		public SalBoolean bSaldenSch = false;
		public SalBoolean bSaldenOP = false;
		public SalDateTime dtSaldenOP = SalDateTime.Null;
		public SalString strPLZ = "";
		public SalDateTime dtCurrentDate = SalDateTime.Null;
		public SalString strZeichen = "";
		public SalString strZust = "";
		public SalDateTime dtLogin = SalDateTime.Null;
		public SalNumber nSuDM19L = 0;
		public SalNumber nSuDM16L = 0;
		public SalNumber nSuDM15L = 0;
		public SalNumber nSuDM7L = 0;
		public SalNumber nSuDM0L = 0;
		public SalNumber nSuDMaL = 0;
		public SalNumber nSuDMAuslL = 0;
		public SalNumber nSuSt19L = 0;
		public SalNumber nSuSt16L = 0;
		public SalNumber nSuSt15L = 0;
		public SalNumber nSuSt7L = 0;
		public SalNumber nSuSt0L = 0;
		public SalNumber nSuStaL = 0;
		public SalNumber nSuStAuslL = 0;
		public SalNumber nSuDM19A = 0;
		public SalNumber nSuDM16A = 0;
		public SalNumber nSuDM15A = 0;
		public SalNumber nSuDM7A = 0;
		public SalNumber nSuDM0A = 0;
		public SalNumber nSuDMaA = 0;
		public SalNumber nSuDMAuslA = 0;
		public SalNumber nSuSt19A = 0;
		public SalNumber nSuSt16A = 0;
		public SalNumber nSuSt15A = 0;
		public SalNumber nSuSt7A = 0;
		public SalNumber nSuSt0A = 0;
		public SalNumber nSuStaA = 0;
		public SalNumber nSuStAuslA = 0;
		public SalNumber nSuDM19MB = 0;
		public SalNumber nSuDM16MB = 0;
		public SalNumber nSuDM15MB = 0;
		public SalNumber nSuDM7MB = 0;
		public SalNumber nSuDM0MB = 0;
		public SalNumber nSuDMaMB = 0;
		public SalNumber nSuSt19MB = 0;
		public SalNumber nSuSt16MB = 0;
		public SalNumber nSuSt15MB = 0;
		public SalNumber nSuSt7MB = 0;
		public SalNumber nSuSt0MB = 0;
		public SalNumber nSuStaMB = 0;
		public SalNumber nSuDMRg = 0;
		public SalNumber nSuDMMg = 0;
		public SalNumber nSuDMa = 0;
		public SalNumber nSuDMaSt = 0;
		public SalNumber nSuVSt = 0;
		public SalNumber nSuStorno = 0;
		public SalString strTyp = "";
		public SalString strTypDetail = "";
		public SalString strGebuchtVZ = "";
		public SalNumber nRkDMHF = 0;
		public SalNumber nRkDMMa = 0;
		public SalNumber nRkZaHF = 0;
		public SalNumber nRkZaMa = 0;
		public SalNumber nZaDM = 0;
		public SalNumber nDMGK = 0;
		public SalDateTime dtRatDat = SalDateTime.Null;
		public SalNumber nDMRat = 0;
		public SalNumber nMtl = 0;
		public SalDateTime dtNaechstDat = SalDateTime.Null;
		public SalNumber nTage30 = 0;
		public SalNumber nTage70 = 0;
		public SalNumber nProz30 = 0;
		public SalNumber nProz70 = 0;
		public SalNumber nTage90 = 0;
		public SalNumber nTage95 = 0;
		public SalNumber nProz90 = 0;
		public SalNumber nProz95 = 0;
		public SalDateTime dtZahlDat = SalDateTime.Null;
		public SalDateTime dtZahlDatAlt = SalDateTime.Null;
		public SalNumber nBankZins = 0;
		public SalNumber nTVZins = 0;
		public SalNumber nBankProz = 0;
		public SalNumber nTVProz = 0;
		public SalNumber nImmer = 0;
		public SalString strMitarb = "";
		public SalNumber nDMVorsch = 0;
		public SalNumber nDMZahl = 0;
		public SalNumber nDMZahlAlt = 0;
		public SalNumber nDMRest = 0;
		public SalNumber nDMRestAlt = 0;
		public SalNumber nTage = 0;
		public SalNumber nZinsProz = 0;
		public SalNumber nGeb1 = 0;
		public SalNumber nRech1 = 0;
		public SalNumber nProz1 = 0;
		public SalNumber nGeb2 = 0;
		public SalNumber nRech2 = 0;
		public SalNumber nProz2 = 0;
		public SalNumber nGeb3 = 0;
		public SalNumber nRech3 = 0;
		public SalNumber nProz3 = 0;
		public SalNumber nGeb4 = 0;
		public SalNumber nRech4 = 0;
		public SalNumber nProz4 = 0;
		public SalNumber nRech1Alt = 0;
		public SalNumber nRech2Alt = 0;
		public SalNumber nRech3Alt = 0;
		public SalNumber nRech4Alt = 0;
		public SalString strGKTyp = "";
		public SalString strROWID = "";
		public SalNumber nGebDM = 0;
		public SalNumber nGesGebDM = 0;
		public SalNumber nUebersch = 0;
		public SalNumber nDM = 0;
		public SalNumber nJahr = 0;
		public SalNumber nTKSoll = 0;
		public SalNumber nTKHaben = 0;
		public SalNumber nFISoll = 0;
		public SalNumber nFIHaben = 0;
		public SalNumber nA1 = 0;
		public SalNumber nR1 = 0;
		public SalNumber nA2 = 0;
		public SalNumber nR2 = 0;
		public SalNumber nA3 = 0;
		public SalNumber nR3 = 0;
		public SalNumber nA4 = 0;
		public SalNumber nR4 = 0;
		public SalNumber nA5 = 0;
		public SalNumber nR5 = 0;
		public SalNumber nA6 = 0;
		public SalNumber nR6 = 0;
		public SalString strAZ = "";
		public SalString strGerName = "";
		public SalNumber nDMHF = 0;
		public SalDateTime dtBezahlt = SalDateTime.Null;
		public SalNumber nProzNr = 0;
		public SalNumber nZettelAnz = 0;
		public SalNumber nZettelAnzAlt = 0;
		public SalString strInkasso = "";
		public SalString strPUser = "";
		public SalString strPComputer = "";
		public SalNumber nAnzAlle = 0;
		public SalNumber nAnzBezahlt = 0;
		public SalNumber nAnz = 0;
		public SalNumber nMwSatzDef = 0;
		public SalNumber nMahnBereich = 0;
		public SalString strMahnText = "";
		public SalNumber nMahnStufe = 0;
		public SalDateTime dtMahnZahlEing = SalDateTime.Null;
		public SalNumber nMahnEUR = 0;
		public SalNumber nMahnOffen = 0;
		public SalString strMahnMZF = "";
		public SalString strMahnMTO1 = "";
		public SalString strMahnMTO2 = "";
		public SalString strMahnMTO3 = "";
		public SalString strMahnMTO4 = "";
		public SalString strMahnMTO5 = "";
		public SalString strMahnMTO6 = "";
		public SalString strMahnMTU1 = "";
		public SalString strMahnMTU2 = "";
		public SalString strMahnMTU3 = "";
		public SalString strMahnMTU4 = "";
		public SalString strMahnMTU5 = "";
		public SalString strMahnMTU6 = "";
		public SalString lsMahnMTO = "";
		public SalString lsMahnMTU = "";
		public SalString lsMemo = "";
		public SalString strLogo = "";
		public SalString strBeihText = "";
		public SalNumber nBeihilfe = 0;
		public SalString strRegNr = "";
		public SalDateTime dtErfDat = SalDateTime.Null;
		public SalString strRepRechLA = "";
		public SalString strRepRechText = "";
		public SalDateTime dtRepRechDatum = SalDateTime.Null;
		public SalDateTime dtRepRechZeiDat = SalDateTime.Null;
		public SalNumber nRepRechMwSt = 0;
		public SalNumber nRepRechDM = 0;
		public SalNumber nRepRechBrutto = 0;
		public SalNumber nRepRechPos = 0;
		public SalNumber nRepDMOP = 0;
		public SalString strRepZahlKZ = "";
		public SalDateTime dtRepZahlDat = SalDateTime.Null;
		public SalNumber nRepZahlDM = 0;
		public SalString strRepBuchText = "";
		public SalDateTime dtRepSperrDatum = SalDateTime.Null;
		public SalNumber nBelNr = 0;
		public SalString strBarcode = "";
		public cBTRegistry oReg = new cBTRegistry();
		public SalString strNoviplan = "";
		public SalString strVACode = "";
		public SalDateTime dtHBBuchDat = SalDateTime.Null;
		public SalString strTHUStID = "";
		public SalNumber nReverse = 0;
		public SalBoolean bRepKopie = false;
		public SalNumber nRepBeilage = 0;
		public SalNumber nSuDM20L = 0;
		public SalNumber nSuSt20L = 0;
		public SalNumber nSuDM20A = 0;
		public SalNumber nSuSt20A = 0;
		public SalNumber nSuDM20MB = 0;
		public SalNumber nSuSt20MB = 0;
		public SalNumber nSuDM10L = 0;
		public SalNumber nSuSt10L = 0;
		public SalNumber nSuDM10A = 0;
		public SalNumber nSuSt10A = 0;
		public SalNumber nSuDM10MB = 0;
		public SalNumber nSuSt10MB = 0;
		public SalString lsBild = "";
		public SalString strErloeskonto = "";
		public SalNumber nErloeskonto = 0;
		public SalNumber nPapierRg = 0;
		public SalNumber nReverseVersion = 0;
		public SalNumber nProzMwSt = 0;
		public SalString lsRechTextO = "";
		public SalString lsVWZ = "";
		public SalDateTime dtRADatum = SalDateTime.Null;
		public SalString strRAZeichen = "";
		public SalString strRAN1 = "";
		public SalString strRAN2 = "";
		public SalString strRAN3 = "";
		public SalString strRAN1a = "";
		public SalString strRAN2a = "";
		public SalString strRAN3a = "";
		public SalString strRAN4 = "";
		public SalString strRAN4a = "";
		public SalString strRAN5 = "";
		public SalString strRAN5a = "";
		public SalNumber nRabatt = 0;
		public SalNumber nFormat = 0;
		public SalArray<SalString> strPrinters = new SalArray<SalString>();
		public SalString strDDEMail = "";
		public SalNumber nMahnNr = 0;
		public SalNumber nMahnGirocodeDM = 0;
		public SalNumber nUeberwNr = 0;
		public SalNumber nRechSammler = 0;
		public SalString strDigitalRg = "";
		public SalString strLeitwegID = "";
		public SalString strDigitalMail = "";
		public SalString strVeCode = "";
		public SalString strVeVSNr = "";
		public SalNumber nTKFall = 0;
		public SalString strBeihilfeGUID = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmMain()
		{
			// Assign global reference.
			App.frmMain = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmMain CreateWindow(Control owner)
		{
			frmMain frm = new frmMain();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmMain FromHandle(SalWindowHandle handle)
		{
			return ((frmMain)SalWindow.FromHandle(handle, typeof(frmMain)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalSummenblatt()
		{
			#region Actions
			using (new SalContext(this))
			{
				// Summenblatt-Ermittlung
				if (nHaben != 0) 
				{
					if (strLA == Var.strL) 
					{
						// If nProz = nMwStVoll
						// Set nSuDM16L = nSuDM16L + nHaben
						// Set nSuSt16L = nSuSt16L + nDMMwSt
						// Else If nProz = 15
						// Set nSuDM15L = nSuDM15L + nHaben
						// Set nSuSt15L = nSuSt15L + nDMMwSt
						// Else If nProz = nMwStHalb
						// Set nSuDM7L = nSuDM7L + nHaben
						// Set nSuSt7L = nSuSt7L + nDMMwSt
						// Else If nProz = 0
						// Set nSuDM0L = nSuDM0L + nHaben
						// Set nSuSt0L = nSuSt0L + nDMMwSt
						// Else
						// Set nSuDMaL = nSuDMaL + nHaben
						// Set nSuStaL = nSuStaL + nDMMwSt
						// 15.06.05  	plus  - nDMMahn - nDMZins, da diese steuerfrei sind - siehe unten
						// 08.12.06 Ä48 19% MwSt.
						// 26.05.10 OTÄ397
						if (nProz == 19) 
						{
							nSuDM19L = nSuDM19L + nHaben - nDMMahn - nDMZins;
							nSuSt19L = nSuSt19L + nDMMwSt;
						}
						else if (nProz == 16) 
						{
							nSuDM16L = nSuDM16L + nHaben - nDMMahn - nDMZins;
							nSuSt16L = nSuSt16L + nDMMwSt;
						}
						else if (nProz == 15) 
						{
							nSuDM15L = nSuDM15L + nHaben - nDMMahn - nDMZins;
							nSuSt15L = nSuSt15L + nDMMwSt;
						}
						else if (nProz == Var.nMwStHalb) 
						{
							nSuDM7L = nSuDM7L + nHaben - nDMMahn - nDMZins;
							nSuSt7L = nSuSt7L + nDMMwSt;
						}
						else if (nProz == 0) 
						{
							if (nReverse == 1) 
							{
								nSuDMAuslL = nSuDMAuslL + nHaben - nDMMahn - nDMZins;
								nSuStAuslL = nSuStAuslL + nDMMwSt;
							}
							else
							{
								nSuDM0L = nSuDM0L + nHaben - nDMMahn - nDMZins;
								nSuSt0L = nSuSt0L + nDMMwSt;
							}
						}
						else if (nProz == 20) 
						{
							nSuDM20L = nSuDM20L + nHaben - nDMMahn - nDMZins;
							nSuSt20L = nSuSt20L + nDMMwSt;
						}
						else if (nProz == 10) 
						{
							nSuDM10L = nSuDM10L + nHaben - nDMMahn - nDMZins;
							nSuSt10L = nSuSt10L + nDMMwSt;
						}
						else
						{
							nSuDMaL = nSuDMaL + nHaben - nDMMahn - nDMZins;
							nSuStaL = nSuStaL + nDMMwSt;
						}
						// 15.06.05
						nSuDM0L = nSuDM0L + nDMMahn + nDMZins;
					}
					else if (strLA == "MB")  // 30.01.01
					{
						if (nProz == 19) 
						{
							nSuDM19MB = nSuDM19MB + nDMZaL;
							nSuSt19MB = nSuSt19MB + nDMMwSt;
						}
						else if (nProz == 16) 
						{
							nSuDM16MB = nSuDM16MB + nDMZaL;
							nSuSt16MB = nSuSt16MB + nDMMwSt;
						}
						else if (nProz == 15) 
						{
							nSuDM15MB = nSuDM15MB + nDMZaL;
							nSuSt15MB = nSuSt15MB + nDMMwSt;
						}
						else if (nProz == Var.nMwStHalb) 
						{
							nSuDM7MB = nSuDM7MB + nDMZaL;
							nSuSt7MB = nSuSt7MB + nDMMwSt;
						}
						else if (nProz == 0) 
						{
							nSuDM0MB = nSuDM0MB + nDMZaL;
							nSuSt0MB = nSuSt0MB + nDMMwSt;
						}
						else if (nProz == 20) 
						{
							nSuDM20MB = nSuDM20MB + nDMZaL;
							nSuSt20MB = nSuSt20MB + nDMMwSt;
						}
						else if (nProz == 10) 
						{
							nSuDM10MB = nSuDM10MB + nDMZaL;
							nSuSt10MB = nSuSt10MB + nDMMwSt;
						}
						else
						{
							nSuDMaMB = nSuDMaMB + nDMZaL;
							nSuStaMB = nSuStaMB + nDMMwSt;
						}
						nSuDM0MB = nSuDM0MB + nDMZaA;
					}
					else
					{
						// 15.06.05  	plus  - nDMMahn - nDMZins, da diese steuerfrei sind - siehe unten
						if (nProz == 19) 
						{
							nSuDM19A = nSuDM19A + nHaben - nDMMahn - nDMZins;
							nSuSt19A = nSuSt19A + nDMMwSt;
						}
						else if (nProz == 16) 
						{
							nSuDM16A = nSuDM16A + nHaben - nDMMahn - nDMZins;
							nSuSt16A = nSuSt16A + nDMMwSt;
						}
						else if (nProz == 15) 
						{
							nSuDM15A = nSuDM15A + nHaben - nDMMahn - nDMZins;
							nSuSt15A = nSuSt15A + nDMMwSt;
						}
						else if (nProz == Var.nMwStHalb) 
						{
							nSuDM7A = nSuDM7A + nHaben - nDMMahn - nDMZins;
							nSuSt7A = nSuSt7A + nDMMwSt;
						}
						else if (nProz == 0) 
						{
							if (nReverse == 1) 
							{
								nSuDMAuslA = nSuDMAuslA + nHaben - nDMMahn - nDMZins;
								nSuStAuslA = nSuStAuslA + nDMMwSt;
							}
							else
							{
								nSuDM0A = nSuDM0A + nHaben - nDMMahn - nDMZins;
								nSuSt0A = nSuSt0A + nDMMwSt;
							}
						}
						else if (nProz == 20) 
						{
							nSuDM20A = nSuDM20A + nHaben - nDMMahn - nDMZins;
							nSuSt20A = nSuSt20A + nDMMwSt;
						}
						else if (nProz == 10) 
						{
							nSuDM10A = nSuDM10A + nHaben - nDMMahn - nDMZins;
							nSuSt10A = nSuSt10A + nDMMwSt;
						}
						else
						{
							nSuDMaA = nSuDMaA + nHaben - nDMMahn - nDMZins;
							nSuStaA = nSuStaA + nDMMwSt;
						}
						// 15.06.05
						nSuDM0A = nSuDM0A + nDMMahn + nDMZins;
					}

				}
				if (nSoll != 0) 
				{
					if (strBuchText.Left(4) == "GEBV" || strBuchText.Left(12) == "Gebühren von") 
					{
						nSuDMRg = nSuDMRg + nSoll;
					}
					else if (strBuchText.Left(7) == "Mahnung" || strBuchText.Left(7) == "RaZa-Ma") 
					{
						nSuDMMg = nSuDMMg + nSoll;
					}
					else if (strBuchText.Left(1) != "+") 
					{
						if (nDMVorst != 0 && nDMVorst != SalNumber.Null) 
						{
							nSuDMaSt = nSuDMaSt + nSoll;
						}
						else
						{
							nSuDMa = nSuDMa + nSoll;
						}
					}
				}
				// 17.12.07 F318 + or nSA = 3
				if (nDMRech < 0 || nSA == 3) 
				{
					nSuStorno = nSuStorno - nDMRech;
				}
				nSuVSt = nSuVSt + nDMVorst;
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalCountZettel()
		{
			#region Actions
			using (new SalContext(this))
			{
				// 29.11.05
				Int.PalCheckLeseberechtigung();
				if (Var.strBNLeseberechtigung == "") 
				{
					Var.strBNLeseberechtigung = "\'" + strUser + "\'";

					Int.SqlImmedSel(@"SELECT count(*), max(zdatum) INTO :frmMain.nZettelAnz, :frmMain.dtZettelDat
FROM z WHERE zan = " + Var.strBNLeseberechtigung + @"
AND zerledigt = 'N' AND zdeaktiv IS NULL");
				}
				else
				{
					Var.strBNLeseberechtigung = "\'" + strUser + "\'" + Var.strBNLeseberechtigung;

					Int.SqlImmedSel(@"SELECT count(*), max(zdatum) INTO :frmMain.nZettelAnz, :frmMain.dtZettelDat
FROM z WHERE zan IN (" + Var.strBNLeseberechtigung + @")
AND zerledigt = 'N' AND zdeaktiv IS NULL");
				}
				pbZettel.SetText(Int.SalDateToStrX(dtZettelDat));
				if (nZettelAnzAlt != -1 && nZettelAnzAlt < nZettelAnz) 
				{
					pbZettel.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Red);
				}
				else if (nZettelAnz == 0) 
				{
					pbZettel.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Yellow);
				}
				nZettelAnzAlt = nZettelAnz;

				// 06.01.13 Ä1005
				// Call SqlImmedSel('SELECT count(*) INTO :frmMain.nAnzEL
				// FROM el WHERE elzeichen = :strBNZei
				// AND elerledigt = \'N\'')
				this.nAnzEL = Int.SqlGetAnzahl("FROM el WHERE elzeichen = :strBNZei AND elerledigt = \'N\'");
				pbEL.SetText(Int.PalStrNum(nAnzEL, 5, 0) + " ELs");
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalMainDisconnect()
		{
			#region Actions
			using (new SalContext(this))
			{
				// 18.04.05
				Int.PalLog("intern Logout Zeit: " + Int.PalStrNum((SalDateTime.Current - dtLogin) * 24 * 60, 5, 3) + " Minuten");

				// 09.07.03 TAPI
				// If dfUser != 'SC'
				// Call SalDestroyWindow( frmTAPIManager )
				// 24.02.05
				// Call SalDestroyWindow( frmKlicktel )

				// Call SalTimerKill ( frmMain, 1 )
				// Call SqlDisconnect(hSql)
				// 20.01.14 Ä1005
				// Call SqlFreeSession( hSqlSession )

				// Set dfUser=''
				dfPassword.Text = "";
				// Set SqlUser='DUMMY'
				// Set SqlPassword='DUMMY'
				pbDisconnect.DisableWindow();
				pbConnect.EnableWindow();
				pbSuchen.DisableWindow();
				pbDiskAbr.DisableWindow();
				pbManAbr.DisableWindow();
				pbFiBu.DisableWindow();
				pbRaZa.DisableWindow();
				pbMahn.DisableWindow();
				pbMB.DisableWindow();
				pbZettel.DisableWindow();
				pbEL.DisableWindow();
				pbUeberw.DisableWindow();
				pbStatistik.DisableWindow();
				pbTagebuch.DisableWindow();
				pbDrucke.DisableWindow();
				pbBriefe.DisableWindow();
				pbBriefeFrei.DisableWindow();
				Sal.SetFocus(dfPassword);
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmMain WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMain_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmMain_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmMain_OnSAM_Close(sender, e);
					break;
				
				case Sys.SAM_ReportStart:
					this.frmMain_OnSAM_ReportStart(sender, e);
					break;
				
				case Sys.SAM_ReportFetchInit:
					this.frmMain_OnSAM_ReportFetchInit(sender, e);
					break;
				
				case Sys.SAM_ReportFetchNext:
					this.frmMain_OnSAM_ReportFetchNext(sender, e);
					break;
				
				case Sys.SAM_ReportFinish:
					this.frmMain_OnSAM_ReportFinish(sender, e);
					break;
				
				// On SAM_Timer
				
				// Call PalCountZettel()
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMain_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
            Var.strProgVer = "3.07.11";
            // Call SalCenterWindow(frmMain)
            // 27.08.10
            this.HideWindow();

			this.GetLocation(ref this.nX, ref this.nY);
			this.SetLocation(0, this.nY);
			Var.nMwSatz[0] = 0.00m;
			Var.nMwSatz[1] = 16.00m;
			Var.nMwSatz[2] = 7.00m;
			// 04.05.10 OTÄ420 Österreich
			// Set nMwSatz[3] = 13.00
			// Set nMwSatz[4] = 6.50
			Var.nMwSatz[3] = 20;
			Var.nMwSatz[4] = 10;
			// 29.01.14 Ä1017 (Pegasus)
			// Set nMwSatz[5] = 6.00
			Var.nMwSatz[5] = 3.00m;

			Var.nMwSatz[6] = 5.50m;
			Var.nMwSatz[7] = 5.00m;
			Var.nMwSatz[8] = 14.00m;
			Var.nMwSatz[9] = 15.00m;
			// 08.12.06 Ä48 19% MwSt.
			Var.nMwSatz[10] = 19.00m;

			Var.nMwSatz[11] = 9.00m; // 20.06.03 Gestüte verwenden 9%
			// 12.07.13
			Var.nMwSatz[12] = 20;
			// 19.01.15 Ä1144
			Var.nMwSatz[13] = 17;
			// 02.05.16 F2680
			Var.nMwSatz[14] = 13;

			// 02.05.16 F2680 13 -> 15
			Var.nAnzMwSt = 15;
			Var.nBearbGeb = 0.77m;
			Var.nTVMahnDM = 1.28m;
			// 27.12.12 Ä850 zukünftig auch in frmRechProt ändern!!!!
			// Set nPorto1 = 0.55
			// 30.12.13 Ä1003
			// Set nPorto1 = 0.58
			// 30.12.14 Ä1142
			// Set nPorto1 = 0.6
			// 30.12.15 Ä1282
			// Set nPorto1 = 0.62
			// 02.07.19 Ä1856
			// Set nPorto1 = 0.7
			// 03.01.22 Ä1992
			// Set nPorto1 = 0.8
			Var.nPorto1 = 0.85m;

			// 03.06.08 Ä257
			// Set nPorto2 = 1.00
			// 30.12.14 Ä1142
			// Set nPorto2 = 0.9
			// 02.07.19 Ä1856
			// Set nPorto2 = 0.85
			// 03.01.22 Ä1992
			// Set nPorto2 = 0.95
			Var.nPorto2 = 1.00m;
			// 16.12.20 Ä1858
			// 03.01.22 Ä1992
			// Set nPortoG = 1.55
			Var.nPortoG = 1.6m;

			// 15.08.16 Ä1410 + akappung 13.10.16 scharf geschaltet
			// Set nKappung = 972
			// Wunsch Kersten
			// Set nKappung = 1800
			Var.nKappung = 2500;
			// 10.07.23
			// 02.01.24 Ä2121 8 -> 8.7
			Var.nPreismtlTSE = 8.7m;

			Var.nFaellTg = 14;
			Var.strNull = "";
			Var.strDisk = "D";
			Var.strMan = "M";
			Var.strL = "L";
			Var.strA = "A";
			// 08.12.06 Ä48 19% MwSt. NOCH ÄNDERN!!!
			// 12.06.20 Ä1892
			if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
			{
				this.nMwSatzDef = 1;
				Var.nMwStHalb = Var.nMwSatz[7];
			}
			else
			{
				this.nMwSatzDef = 10;
				Var.nMwStHalb = Var.nMwSatz[2];
			}
			Var.nMwStVoll = Var.nMwSatz[this.nMwSatzDef];

			Var.nNull = 0;
			Var.nDruckLaenge = 62;
			Var.strWin[1] = "ä";
			Var.strWin[2] = "ö";
			Var.strWin[3] = "ü";
			Var.strWin[4] = "Ä";
			Var.strWin[5] = "Ö";
			Var.strWin[6] = "Ü";
			Var.strWin[7] = "ß";
			Var.strWin[8] = "´";
			// 25.10.11 F1061
			Var.strDOS[1] = "„";
			Var.strDOS[2] = "”";

			Var.strDOS[3] = ((SalNumber)129).ToCharacter();
			Var.strDOS[4] = ((SalNumber)142).ToCharacter();
			Var.strDOS[5] = ((SalNumber)153).ToCharacter();
			// 25.10.11 F1061
			Var.strDOS[6] = "š";

			Var.strDOS[7] = ((SalNumber)225).ToCharacter();
			Var.strDOS[8] = ((SalNumber)39).ToCharacter();
			this.pbSuchen.DisableWindow();
			this.pbDisconnect.DisableWindow();
			this.pbDiskAbr.DisableWindow();
			this.pbManAbr.DisableWindow();
			this.pbFiBu.DisableWindow();
			this.pbRaZa.DisableWindow();
			this.pbMahn.DisableWindow();
			this.pbMB.DisableWindow();
			this.pbZettel.DisableWindow();
			this.pbEL.DisableWindow();
			this.pbUeberw.DisableWindow();
			this.pbStatistik.DisableWindow();
			this.pbTagebuch.DisableWindow();
			this.pbDrucke.DisableWindow();
			this.pbBriefe.DisableWindow();
			this.pbBriefeFrei.DisableWindow();
			this.dfUser.Text = "";
			this.dfPassword.Text = "";
			Sal.MapEnterToTab(true);
			Sal.FileGetCurrentDirectory(ref Var.strTVNPath);
			Sal.FileGetDateTime(Var.strTVNPath + "/TVN.EXE", ref this.dtProgDat);
			// ! 14.05.01
			// If Not Email.EmailIsConnected()
			// If Email.EmailConnect('','','', EMAIL_SYS_MSMAIL)
			Sal.FileSetCurrentDirectory(Var.strTVNPath);
			this.SetText("moveta-Programm - Ordner: " + Var.strTVNPath);
			// Set dfProgDat = dtProgDat
			// 12.04.02
			// Call XSalTooltipSetColors( COLOR_Black, 0xE0FFFF )
			// 12.05.06
			// Call SalHideWindow(pbTest)
			// 02.10.06 Ä35
			Sql.Database = "TVN1";
			Sql.User = "SYSADM";
			Sql.Password = "SYSADM";
            //FC:FINAL: not supported and not needed SqlNoRecovery
            //SqlNoRecovery = false;
			this.strNoviplan = "";
			// 21.04.08 Noviplan
			this.oReg.SetRootKey(Const.HKEY_LOCAL_MACHINE);
			if (this.oReg.OpenKey("\\SOFTWARE\\INTENSIO\\noviplan.net\\installation", true)) 
			{
				this.oReg.ReadString("InstallFolder", ref this.strNoviplan);
			}
			this.oReg.CloseKey();
			// 08.08.14 F2109
			// 26.05.21 Mail Grein
			// If VisDosExist( 'C:\\Program Files (x86)\\INTENSIO\\NOVIPLAN.ConfigurationClient\\npStart.exe' )
			// Set strNoviplan = 'C:\\Program Files (x86)\\INTENSIO\\NOVIPLAN.ConfigurationClient\\npStart.exe'
			if (Vis.DosExist("C:\\Program Files (x86)\\INTENSIO\\NOVIPLAN\\NoviplanConnector\\npNoviplanConnector.exe")) 
			{
				this.strNoviplan = "C:\\Program Files (x86)\\INTENSIO\\NOVIPLAN\\NoviplanConnector\\npNoviplanConnector.exe";
			}
			// Else If VisDosExist( 'C:\\Program Files\\INTENSIO\\noviplan.net\\Bin\\npStart.exe' )
			// Set strNoviplan = 'C:\\Program Files\\INTENSIO\\noviplan.net\\Bin\\npStart.exe'
			// ! 14.07.20 Ä1896
			Var.FISKALY = new Fiskaly();
			// !

			// Set strDummy = ''
			// Set nCount = 0
			// While nCount < SalStrLength( strNoviplan )
			// Set strDummy = strDummy || SalStrMidX( strNoviplan, nCount, 1 )
			// Set nCount = nCount + 1
			// Set strDummy = strDummy || '\\bin\\npStart.exe'
			// Set strNoviplan = strDummy

			// Call oReg.SetRootKey( HKEY_LOCAL_MACHINE )
			// Call oReg.OpenKey( '\\Software\\TVN\\TVN', TRUE )
			// Call oReg.ReadString( 'DYMO-Label', strDYMOLabel )
			if (Int.PalGetUser(ref this.strPUser, ref this.strPComputer)) 
			{
				this.dfUser.Text = this.strPUser.Left(8);
				//FC:WORKAROUND: disabled
				//this.dfUser.Text = "KEUER";
				//strPUser = "KEUER";		
				//if(1== dlgBenutzerFE.ModalDialog(this, ref strPUser))
				//{
				//	this.dfUser.Text = this.strPUser.Left(8);
				//            }
				//else
				//{
				//                this.dfUser.Text = "KEUER";
				//            }

				// Set strPUser = 'Memmeler'
				// Call SalMessageBox( 'dfUser:' || dfUser || '.', 'strPUser:' || strPUser || '.', MB_Ok )

				// 29.06.20 von pcConnect hierher
				// Set SqlDatabase='TVN1'
				// Set nState = VisGetKeyState (VK_Control)
				// ¨ #
				this.SetText("moveta-Programm - Ordner: " + Var.strTVNPath);
				this.nErr = Vis.GetKeyState(Vis.VK_Control);
				if (this.nErr & Vis.KS_Down) 
				{
					Sql.Database = "TVN2";
					if (Sys.IDNO == Sal.MessageBox("Wollen Sie sich wirklich an der Test-Datenbank anmelden?", "", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
					{
						Sql.Database = "TVN1";
					}
					else
					{
						this.SetText("moveta-Programm - Ordner: " + Var.strTVNPath + " TESTDATENBANK");
					}
				}
				else
				{
					Sql.Database = "TVN1";
				}

				this.dfPassword.Text = "";
				// Call SalSetFocus(dfPassword)
				// 20.01.14 Ä1005
				Var.bOK = Int.SqlConnection(ref Var.hSql);
				// 28.11.13
				// Set bOK = SqlCreateSession(hSqlSession,'')
				// If not bOK
				// Call SalMessageBox( 'Session kann nicht erzeugt werden.', 'SqlImmedSel', MB_Ok )
				// Else
				// Set bOK=SqlCreateStatement (hSqlSession, hSql)
				// Call SqlSetIsolationLevel(hSql,'RO')
				// Call SqlDisconnect(hSql)
				// Call SqlFreeSession( hSqlSession )
				if (!(Var.bOK)) 
				{
					this.SetStatusBarText("Keine Verbindung zum Server !");
				}
				else
				{
					// Call SqlGetParameter(hSql,DBP_VERSION,bOK,dfVersion)
					Var.strBNUser = "";
					Int.SqlImmedSel(@"SELECT bnpw
INTO :frmMain.dfPassword
FROM BN WHERE bncode = :frmMain.dfUser");
					// Call SalMessageBox( '.' || dfUser || '.', '.' || dfPassword || '.', MB_Ok )
					if (this.dfPassword.Text != "") 
					{
						this.pbConnect.PostMessage(Sys.SAM_Click, 0, 0);
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMain_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(pbDisconnect, SAM_Click, 0, 0)
			// If hSql
			this.PalMainDisconnect();
			Sql.ClearImmediate();
			// 06.05.14 F2003
			// If Email.EmailIsConnected()
			// Call Email.EmailDisconnect()
			// Call SalStatusSetText(hWndForm,'Server 1...')
			// Call ConnectServer(nServerNr, 'SERVER1', 'SYSADM')
			// If DeinstallDatabase(nServerNr, 'TVN1', SalStrLength('TVN1')) = 0
			// Call SalStatusSetText(hWndForm,'Datenbank auf Server 1 geschlossen')
			// Else
			// Call SalStatusSetText(hWndForm,'Datenbank konnte nicht geschlossen werden')
			// Call DisconnectServer(nServerNr)
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportStart event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMain_OnSAM_ReportStart(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 30.04.03
			if (Var.hWndfrmReport) 
			{
				Var.hWndfrmReport.BringWindowToTop();
			}

			if (this.strReportName == "ETITA" || this.strReportName == "ETITAKO") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Etiketten", "Die TA-Etiketten", "werden gedruckt", "TA-Etiketten");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "TALISTE") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "TA-Liste", "Die TA-Liste", "wird gedruckt", "TA-Liste");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "ETITH") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Etiketten", "Die TH-Etiketten", "werden gedruckt", "TH-Etiketten");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "THLISTE" || this.strReportName == "NEGLISTE") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Liste", "Die TH-Liste", "wird gedruckt", "TH-Liste");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "KREUZTAB" || this.strReportName == "KREUZTABMG") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Kreuztabelle", "Die Kreuztabelle", "wird gedruckt", "Kreuztabelle");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "KONTOAUS" || this.strReportName == "KONTOAUSALT" || this.strReportName == "KONTOAUSVM") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Kontoauszug", "Der Kontoauszug", "wird gedruckt", "Kontoauszug");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "RECHNUNG" || this.strReportName == "RECHNUNGVM") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Rechnungen", "Die Rechnungen", "werden gedruckt", "Rechnungen an Mitglieder");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "DECKBLATT") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Deckblätter", "Die Deckblätter", "werden gedruckt", "Deckblätter an Mitglieder");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "SALDEN") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Salden-Liste", "Die Saldenliste", "wird gedruckt", "Saldenliste");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "AUSBUCH") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Kontoauszug", "Die Ausbuch-Liste", "wird gedruckt", "Ausbuchungs-Liste");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "OPLISTE" || this.strReportName == "OPVERJ") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "OP-Liste", "Die OP-Liste", "wird gedruckt", "OP-Liste");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "MBINFO") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "OP-Liste", "Die MB-Info-Liste", "wird gedruckt", "MB-Info");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "OPPARTIE" || this.strReportName == "OPPARTIEMB") 
			{
				this.nTANrAlt = 0;
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Partie-OP-Liste", "Die Partie-OP-Liste", "wird gedruckt", "Rechnungspartie");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "BANKCLEA" || this.strReportName == "MBKac" || this.strReportName == "MBKb" || this.strReportName == "BCNG" || this.strReportName == "BATCHPRO") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Bank-Clearing-Protokoll", "Das Protokoll", "wird gedruckt", "Protokoll");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "RATCHECK") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Ratenzahler-Checkliste", "Die Checkliste", "wird gedruckt", "Ratenzahler-Checkliste");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "RATLIST") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Ratenzahler-Liste", "Die Liste", "wird gedruckt", "Ratenzahler-Liste");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "70CHECK") 
			{
				this.nTANrAlt = 0;
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "70%-Checkliste", "Die 70%-Checkliste", "wird gedruckt", "70%-Checkliste");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "SOLVENZ") 
			{
				this.nTANrAlt = 0;
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Solvenzliste", "Die Solvenzliste", "wird gedruckt", "Solvenzliste");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "HITLISTE" || this.strReportName == "MAHNHIT") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Hitliste", "Die Hit-Liste", "wird gedruckt", "Hitliste");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "TASTATIS" || this.strReportName == "TASTATIS1") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "TA-Statistik", "Die TA-Statistik", "wird gedruckt", "TA-Statistik");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "MASP2") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "TA-Briefe", "TA-Briefe", "werden gedruckt", "TA-Briefe");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "ZETTEL" || this.strReportName == "ZM") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Zettel", "Zettel", "werden gedruckt", "Zettel");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "MYCOLEER") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Myco-Zettel", "Die Zettel", "werden gedruckt", "Myco-Zettel");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "EL") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Erinnerungsliste", "Erinnerungsliste", "wird gedruckt", "Erinnerungsliste");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "BEZ") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Bankeinzüge", "Bankeinzüge", "werden gedruckt", "Bankeinzüge");
				Int.SqlImmedX("UPDATE bez SET bezerldat = NULL WHERE bezerldat = '1900-1-1'");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "RUECKER") 
			{
				this.nTANrAlt = 0;
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Rückerstattungsliste", "Die Rückerstattungsliste", "wird gedruckt", "Rückerstattungsliste");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "BUCHABGL") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Buchungsabgleich", "Der Buchungsabgleich", "wird gedruckt", "Buchungsabgleich");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "MBBEZ") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "bezahlte MBs", "bezahlte MBs", "werden gedruckt", "bezahlte MBs");
				Int.SqlImmedX("UPDATE pr SET prdruckdatum = NULL WHERE prdruckdatum = '1900-1-1'");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "BUB") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Buchungsbelege", "Buchungsbelege", "werden gedruckt", "Buchungsbelege");
				Int.SqlImmedX("UPDATE bub SET buberldat = NULL WHERE buberldat = '1900-1-1'");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			else if (this.strReportName == "RechAbListe") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Rechnungsabgabe-Liste", "Die Rechnungsabgabe-Liste", "wird gedruckt", "Rechnungsabgabe-Liste");
				Int.SqlConnection(ref this.hSqlDisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFetchInit event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMain_OnSAM_ReportFetchInit(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 04.09.03
			Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), this.strReportName, "Der Druck beginnt nach dem Hochzählen der Seiten", "Drücken Sie CANCEL zum Abbrechen", this.strReportName);

			if (this.strReportName == "ETITA") 
			{
				if (!(this.hSqlDisk.Prepare(@"SELECT aarztnr, asvname1, asvname2, asvstr, asvort
			INTO :nTANr, :strTAN1, :strTAN2, :strTAStr, :strTAOrt
			FROM a
			WHERE aarztnr BETWEEN :nArztVon AND :nArztBis
			AND aaustritt IS NULL AND agestorben IS NULL
			ORDER BY aarztnr"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "TALISTE") 
			{
				if (!(this.hSqlDisk.Prepare(@"SELECT aarztnr, aname1, aname2, astr, aort,
			abank, ablz, akonto, aeintr
			INTO :nTANr, :strTAN1, :strTAN2, :strTAStr, :strTAOrt,
			:strBank, :strBLZ, :strKonto, :dtEintritt
			FROM a
			WHERE aarztnr BETWEEN :nArztVon AND :nArztBis
			AND aaustritt IS NULL AND agestorben IS NULL
			ORDER BY aarztnr"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "ETITH") 
			{
				if (!(this.hSqlDisk.Prepare(@"SELECT harztnr, hhalternr, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
			INTO :nTANr, :nTHNr, :strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strTHLand
			FROM h
			WHERE harztnr = " + this.nArztVon.ToString(0) + @"
			AND  hhalternr BETWEEN " + this.nHalterVon.ToString(0) + @"
			 AND " + this.nHalterBis.ToString(0) + @"
			AND hetikett<10
			ORDER BY harztnr, hnn, hvn"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "THLISTE") 
			{
				if (!(this.hSqlDisk.Prepare(@"SELECT harztnr, hhalternr, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
			INTO :nTANr, :nTHNr, :strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strTHLand
			FROM h
			WHERE harztnr = " + this.nArztVon.ToString(0) + @"
			AND  hhalternr BETWEEN " + this.nHalterVon.ToString(0) + @"
			 AND " + this.nHalterBis.ToString(0) + @"
			AND hetikett<10
			ORDER BY harztnr, hnn, hvn"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "KREUZTAB") 
			{
				if (!(this.hSqlDisk.Prepare(@"SELECT akdatum, akdm, akrechsumm
			INTO :dtRechDat, :nRechGeb, :nRechDM
			FROM ak
			WHERE aktyp='RG' AND akdatum>=@YEARBEG(SYSDATE - 7 YEARS)"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "KREUZTABMG") 
			{
				if (!(this.hSqlDisk.Prepare(@"SELECT akdatum, akdm, akrechsumm
			INTO :dtRechDat, :nRechGeb, :nRechDM
			FROM ak
			WHERE aktyp='MG' AND akdatum>=@YEARBEG(SYSDATE - 7 YEARS)"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "KONTOAUS") 
			{
				if (!(this.hSqlDisk.Prepare(@"SELECT tksa, tkarztnr, tkhalternr, tkrechnr, tkbeldat, tkbuchtext,
			tkdmabr, tkdmporto, tkdmzamahn, tkdmzazins, tkdmzamwst, tktavst, tkrechdm,
			tkdmzaleis, tkdmzaarzn, tkprozmwst, tksoll, tkhaben
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben
			FROM tk
			WHERE tkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			ORDER BY tkarztnr, tkbeldat"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						this.nDMUeberw = 0;
						this.nDMmitVorstV = 0;
						this.nDMmitVorstS = 0;
						this.bNoFetch = false;
						this.nSuDM20L = 0;
						this.nSuDM19L = 0;
						this.nSuDM16L = 0;
						this.nSuDM15L = 0;
						this.nSuDM10L = 0;
						this.nSuDM7L = 0;
						this.nSuDM0L = 0;
						this.nSuDMaL = 0;
						this.nSuDMAuslL = 0;
						this.nSuSt20L = 0;
						this.nSuSt19L = 0;
						this.nSuSt16L = 0;
						this.nSuSt15L = 0;
						this.nSuSt10L = 0;
						this.nSuSt7L = 0;
						this.nSuSt0L = 0;
						this.nSuStaL = 0;
						this.nSuStAuslL = 0;
						this.nSuDM20A = 0;
						this.nSuDM19A = 0;
						this.nSuDM16A = 0;
						this.nSuDM15A = 0;
						this.nSuDM10A = 0;
						this.nSuDM7A = 0;
						this.nSuDM0A = 0;
						this.nSuDMaA = 0;
						this.nSuDMAuslA = 0;
						this.nSuSt20A = 0;
						this.nSuSt19A = 0;
						this.nSuSt16A = 0;
						this.nSuSt15A = 0;
						this.nSuSt10A = 0;
						this.nSuSt7A = 0;
						this.nSuSt0A = 0;
						this.nSuStaA = 0;
						this.nSuStAuslA = 0;
						this.nSuDM20MB = 0;
						this.nSuDM19MB = 0;
						this.nSuDM16MB = 0;
						this.nSuDM15MB = 0;
						this.nSuDM10MB = 0;
						this.nSuDM7MB = 0;
						this.nSuDM0MB = 0;
						this.nSuDMaMB = 0;
						this.nSuSt20MB = 0;
						this.nSuSt19MB = 0;
						this.nSuSt16MB = 0;
						this.nSuSt15MB = 0;
						this.nSuSt10MB = 0;
						this.nSuSt7MB = 0;
						this.nSuSt0MB = 0;
						this.nSuStaMB = 0;
						this.nSuDMRg = 0;
						this.nSuDMMg = 0;
						this.nSuDMa = 0;
						this.nSuDMaSt = 0;
						this.nSuVSt = 0;
						this.nSuStorno = 0;
						this.nTANr = 0;
						this.nTANrAlt = 9999;
						this.nReverse = 0;
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "KONTOAUSALT") 
			{
				if (!(this.hSqlDisk.Prepare(@"SELECT tkasa, tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
			tkadmabr, tkadmporto, tkadmzamahn, tkadmzazins, tkadmzamwst, tkatavst, tkarechdm,
			tkadmzaleis, tkadmzaarzn, tkaprozmwst, tksoll, tkhaben
			INTO :nSA, :nTANr, :nTHNr, :nRechNr, :dtBuchDat, :strBuchText,
			:nDMRech, :nDMPorto, :nDMMahn, :nDMZins, :nDMMwSt, :nDMVorst, :nDMSoll,
			:nDMZaL, ,:nDMZaA, :nProz, :nSoll, :nHaben
			FROM tka
			WHERE tkaarztnr BETWEEN :nArztVon AND :nArztBis
			AND tkabeldat BETWEEN :dtDatVon AND :dtDatBis
			ORDER BY tkaarztnr, tkabeldat"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						this.nDMUeberw = 0;
						this.nDMmitVorstV = 0;
						this.nDMmitVorstS = 0;
						this.bNoFetch = false;
						this.nSuDM19L = 0;
						this.nSuDM16L = 0;
						this.nSuDM15L = 0;
						this.nSuDM7L = 0;
						this.nSuDM0L = 0;
						this.nSuDMaL = 0;
						this.nSuDMAuslL = 0;
						this.nSuSt19L = 0;
						this.nSuSt16L = 0;
						this.nSuSt15L = 0;
						this.nSuSt7L = 0;
						this.nSuSt0L = 0;
						this.nSuStaL = 0;
						this.nSuStAuslL = 0;
						this.nSuDM19A = 0;
						this.nSuDM16A = 0;
						this.nSuDM15A = 0;
						this.nSuDM7A = 0;
						this.nSuDM0A = 0;
						this.nSuDMaA = 0;
						this.nSuDMAuslA = 0;
						this.nSuSt19A = 0;
						this.nSuSt16A = 0;
						this.nSuSt15A = 0;
						this.nSuSt7A = 0;
						this.nSuSt0A = 0;
						this.nSuStaA = 0;
						this.nSuStAuslA = 0;
						this.nSuDM19MB = 0;
						this.nSuDM16MB = 0;
						this.nSuDM15MB = 0;
						this.nSuDM7MB = 0;
						this.nSuDM0MB = 0;
						this.nSuDMaMB = 0;
						this.nSuSt19MB = 0;
						this.nSuSt16MB = 0;
						this.nSuSt15MB = 0;
						this.nSuSt7MB = 0;
						this.nSuSt0MB = 0;
						this.nSuStaMB = 0;
						this.nSuDMRg = 0;
						this.nSuDMMg = 0;
						this.nSuDMa = 0;
						this.nSuDMaSt = 0;
						this.nSuVSt = 0;
						this.nSuStorno = 0;
						this.nSuDM20L = 0;
						this.nSuDM10L = 0;
						this.nSuSt20L = 0;
						this.nSuSt10L = 0;
						this.nSuDM20A = 0;
						this.nSuDM10A = 0;
						this.nSuSt20A = 0;
						this.nSuSt10A = 0;
						this.nSuDM20MB = 0;
						this.nSuDM10MB = 0;
						this.nSuSt20MB = 0;
						this.nSuSt10MB = 0;
						this.nTANr = 0;
						this.nTANrAlt = 9999;
						this.nReverse = 0;
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "KONTOAUSVM") 
			{
				this.strSelect = @"SELECT tkasa, tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
			tkadmabr, tkadmporto, tkadmzamahn, tkadmzazins, tkadmzamwst, tkatavst, tkarechdm,
			tkadmzaleis, tkadmzaarzn, tkaprozmwst, tksoll, tkhaben
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben
			FROM tka
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tkadruckdatum = :frmMain.dtDatVM
			ORDER BY tkaarztnr, tkabeldat";
				if (!(this.hSqlDisk.Prepare(this.strSelect))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						this.nDMUeberw = 0;
						this.nDMmitVorstV = 0;
						this.nDMmitVorstS = 0;
						this.bNoFetch = false;
						this.nSuDM19L = 0;
						this.nSuDM16L = 0;
						this.nSuDM15L = 0;
						this.nSuDM7L = 0;
						this.nSuDM0L = 0;
						this.nSuDMaL = 0;
						this.nSuDMAuslL = 0;
						this.nSuSt19L = 0;
						this.nSuSt16L = 0;
						this.nSuSt15L = 0;
						this.nSuSt7L = 0;
						this.nSuSt0L = 0;
						this.nSuStaL = 0;
						this.nSuStAuslL = 0;
						this.nSuDM19A = 0;
						this.nSuDM16A = 0;
						this.nSuDM15A = 0;
						this.nSuDM7A = 0;
						this.nSuDM0A = 0;
						this.nSuDMaA = 0;
						this.nSuDMAuslA = 0;
						this.nSuSt19A = 0;
						this.nSuSt16A = 0;
						this.nSuSt15A = 0;
						this.nSuSt7A = 0;
						this.nSuSt0A = 0;
						this.nSuStaA = 0;
						this.nSuStAuslA = 0;
						this.nSuDM19MB = 0;
						this.nSuDM16MB = 0;
						this.nSuDM15MB = 0;
						this.nSuDM7MB = 0;
						this.nSuDM0MB = 0;
						this.nSuDMaMB = 0;
						this.nSuSt19MB = 0;
						this.nSuSt16MB = 0;
						this.nSuSt15MB = 0;
						this.nSuSt7MB = 0;
						this.nSuSt0MB = 0;
						this.nSuStaMB = 0;
						this.nSuDMRg = 0;
						this.nSuDMMg = 0;
						this.nSuDMa = 0;
						this.nSuDMaSt = 0;
						this.nSuVSt = 0;
						this.nSuStorno = 0;
						this.nSuDM20L = 0;
						this.nSuDM10L = 0;
						this.nSuSt20L = 0;
						this.nSuSt10L = 0;
						this.nSuDM20A = 0;
						this.nSuDM10A = 0;
						this.nSuSt20A = 0;
						this.nSuSt10A = 0;
						this.nSuDM20MB = 0;
						this.nSuDM10MB = 0;
						this.nSuSt20MB = 0;
						this.nSuSt10MB = 0;
						this.nTANr = 0;
						this.nTANrAlt = 9999;
						this.nReverse = 0;
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "RECHNUNG") 
			{
				this.strLike = "+%";
				this.dtCurrentDate = SalDateTime.Current;
				if (!(this.hSqlDisk.Prepare(@"SELECT tkarztnr, aname1, aname2, astr, aort, tkbeldat, tkbuchtext, tkdmporto, tktavst, (tkrechdm-tktavst), tkprozmwst, tksoll
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt,
			:frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nDMPorto, :frmMain.nDMVorst, :frmMain.nDMRech, :frmMain.nProz, :frmMain.nSoll
			FROM tk, a
			WHERE tkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tksoll<>0 AND tkbuchtext not like :frmMain.strLike
			AND tkarztnr = aarztnr
			ORDER BY tkarztnr, tkbeldat"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "RECHNUNGVM") 
			{
				this.strLike = "+%";
				if (!(this.hSqlDisk.Prepare(@"SELECT tkaarztnr, aname1, aname2, astr, aort, tkabeldat, tkabuchtext, tkadmporto, tkatavst, (tkarechdm-tkatavst), tkaprozmwst, tksoll, tkadruckdatum
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt,
			:frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nDMPorto, :frmMain.nDMVorst, :frmMain.nDMRech, :frmMain.nProz, :frmMain.nSoll, :dtCurrentDate
			FROM tka, a
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tkadruckdatum = :dtDatVM
			AND tksoll<>0 AND tkabuchtext not like :frmMain.strLike
			AND tkaarztnr = aarztnr
			ORDER BY tkaarztnr, tkabeldat"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "DECKBLATT") 
			{
				this.strLike = "+%";
				this.dtCurrentDate = SalDateTime.Current;
				if (!(this.hSqlDisk.Prepare(@"SELECT aarztnr, akaname1, akaname2, akastr, akaort
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt
			FROM a
			WHERE aarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND (akaname1 IS NOT NULL AND akastr IS NOT NULL AND akaort IS NOT NULL)
			ORDER BY aarztnr"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "SALDEN") 
			{
				this.strSelect = @"SELECT aarztnr, aname1, aname2, astr, aort,  akzpraxart,
		avorrech, avorsoll, avorhaben, avorvst, avormwst
		INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt,
		:frmMain.nKZPraxArt,
		:frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
		:frmMain.nVorVSt, :frmMain.nVorMwSt
		FROM A
		WHERE aarztnr BETWEEN :nArztVon AND :nArztBis ";
				if (!(this.hSqlDisk.Prepare(this.strSelect))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						this.nDMUeberw = 0;
						this.nDMmitVorstV = 0;
						this.nDMmitVorstS = 0;
						this.bNoFetch = false;
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "AUSBUCH") 
			{
				if (!(this.hSqlDisk.Prepare(@"SELECT tkarztnr, tkhalternr, tkrechnr, tkbeldat, tkbuchtext,
			tkdmabr
			INTO :nTANr, :nTHNr, :nRechNr, :dtBuchDat, :strBuchText,
			:nDMRech
			FROM tk
			WHERE tkarztnr BETWEEN :nArztVon AND :nArztBis
			AND (tkdmabr < 0 OR tkbuchtext LIKE 'AusbRück%' OR tkbuchtext LIKE 'Ausbuchung rück%')
			ORDER BY tkarztnr, tkbeldat"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "OPLISTE") 
			{

				// 14.02.03 raus: and (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)>0
				// 17.03.03 wieder rein, da zu viele mit 0,00 rkkzzahl=1 hatten
				if (this.nOPMS == SalNumber.Null) 
				{
					this.strSelect = @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkbuchtext,
(rkdmleis+rkmbdmopl), rkdmarzn, rkdmmahn, rkdmzins,   (rkzaleis+rkmbzaopl), rkzaarzn, rkzamahn, rkzazins,
rkmahnstufe, rkmahnltzt, aname1, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
INTO :nTANr, :nTHNr, :nRechNr, :dtBuchDat, :strBuchText,
:nDMRechL, :nDMRechA, :nDMMahn, :nDMZins, :nZaRechL, :nZaRechA, :nZaMahn, :nZaZins,
:nMS, :dtMahnDat, :strTAN1, :strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strTHLand
FROM rk,a,h
WHERE rkarztnr BETWEEN :nArztVon AND :nArztBis
AND (@MID(adrucke, 0,1) = 'X' OR :nImmer = 1)
AND rkkzzahl<2 and (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)<>0
AND rkarztnr=aarztnr AND rkarztnr=harztnr AND rkhalternr=hhalternr
ORDER BY rkarztnr, hnn, hhalternr, rkrechnr";
				}
				else if (this.nOPMS == 9) 
				{
					this.strSelect = @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkbuchtext,
(rkdmleis+rkmbdmopl), rkdmarzn, rkdmmahn, rkdmzins,    (rkzaleis+rkmbzaopl), rkzaarzn, rkzamahn, rkzazins,
rkmahnstufe, rkmahnltzt, aname1, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
INTO :nTANr, :nTHNr, :nRechNr, :dtBuchDat, :strBuchText,
:nDMRechL, :nDMRechA, :nDMMahn, :nDMZins, :nZaRechL, :nZaRechA, :nZaMahn, :nZaZins,
:nMS, :dtMahnDat, :strTAN1, :strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strTHLand
FROM rk,a,h
WHERE rkarztnr BETWEEN :nArztVon AND :nArztBis
AND (rkmahnstufe = :nOPMS Or rkrechnr >= 999990)
AND (@MID(adrucke, 0,1) = 'X' OR :nImmer = 1)
AND rkkzzahl<2
AND rkarztnr=aarztnr AND rkarztnr=harztnr AND rkhalternr=hhalternr
ORDER BY rkarztnr, hnn, hhalternr, rkrechnr";
				}
				else if (this.nOPMS == 99)  // 18.10.00) 	nur Mahngebühren (Röcken)	! 03.03.03  + AND (rkdmmahn+rkdmzins-rkzamahn-rkzazins)>0 AND rkzaleis=rkdmleis AND rkzaarzn=rkdmarzn
				{
					this.strSelect = @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkbuchtext,
NULL, NULL, rkdmmahn, rkdmzins,    NULL, NULL, rkzamahn, rkzazins,
rkmahnstufe, rkmahnltzt, aname1, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
INTO :nTANr, :nTHNr, :nRechNr, :dtBuchDat, :strBuchText,
:nDMRechL, :nDMRechA, :nDMMahn, :nDMZins, :nZaRechL, :nZaRechA, :nZaMahn, :nZaZins,
:nMS, :dtMahnDat, :strTAN1, :strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strTHLand
FROM rk,a,h
WHERE rkarztnr BETWEEN :nArztVon AND :nArztBis
AND (@MID(adrucke, 5,1) = 'X' OR :nImmer = 1)
AND rkkzzahl<2 AND (rkdmmahn+rkdmzins-rkzamahn-rkzazins)>0 AND rkzaleis=rkdmleis AND rkzaarzn=rkdmarzn
AND rkarztnr=aarztnr AND rkarztnr=harztnr AND rkhalternr=hhalternr
ORDER BY rkarztnr, hnn, hhalternr, rkrechnr";
				}
				else
				{
					this.strSelect = @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkbuchtext,
(rkdmleis+rkmbdmopl), rkdmarzn, rkdmmahn, rkdmzins,    (rkzaleis+rkmbzaopl), rkzaarzn, rkzamahn, rkzazins,
rkmahnstufe, rkmahnltzt, aname1, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
INTO :nTANr, :nTHNr, :nRechNr, :dtBuchDat, :strBuchText,
:nDMRechL, :nDMRechA, :nDMMahn, :nDMZins, :nZaRechL, :nZaRechA, :nZaMahn, :nZaZins,
:nMS, :dtMahnDat, :strTAN1, :strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strTHLand
FROM rk,a,h
WHERE rkarztnr BETWEEN :nArztVon AND :nArztBis
AND (rkmahnstufe = :nOPMS)
AND (@MID(adrucke, 0,1) = 'X' OR :nImmer = 1)
AND rkkzzahl<2
AND rkarztnr=aarztnr AND rkarztnr=harztnr AND rkhalternr=hhalternr
ORDER BY rkarztnr, hnn, hhalternr, rkrechnr";
				}
				if (!(this.hSqlDisk.Prepare(this.strSelect))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "OPVERJ") 
			{
				if (!(this.hSqlDisk.Prepare(@"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkbuchtext,
(rkdmleis+rkdmarzn+rkmbdmopl), rkdmmahn, rkdmzins,   (rkzaleis+rkzaarzn+rkmbzaopl), rkzamahn, rkzazins,
rkmahnstufe, rkmahnltzt, rkverjaehr, aname1, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
INTO :nTANr, :nTHNr, :nRechNr, :dtBuchDat, :strBuchText,
:nDMRech, :nDMMahn, :nDMZins, :nZaRech, :nZaMahn, :nZaZins,
:nMS, :dtMahnDat, :dtVerjDat, :strTAN1, :strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strTHLand
FROM rk,a,h
WHERE rkarztnr BETWEEN :nArztVon AND :nArztBis
AND rkkzzahl<2 AND rkmahnstufe<>9 and rkverjaehr <=  :dtDatBis
AND rkrechnr<999990 AND (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)>0
AND rkarztnr=aarztnr AND rkarztnr=harztnr AND rkhalternr=hhalternr
ORDER BY rkarztnr, hnn, hhalternr, rkrechnr"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "MBINFO") 
			{

				Int.SqlImmed("DELETE FROM mbtemp");
				Int.SqlImmed(@"INSERT INTO mbtemp
(tarztnr, thalternr, trechnr, tdatum, ttyp, ttyptext, tdmhf, tdmma, tzahf, tzama, tms)
SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, 'RG', 'Rechnungserstellung',
(rkdmleis+rkdmarzn), (rkdmmahn+rkdmzins+rkmbdmopl), (rkzaleis+rkzaarzn+rkmbzaopl), (rkzamahn+rkzazins), rkmahnstufe
FROM rk WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND (rkarztnr*100000+rkhalternr) IN (SELECT rkarztnr*100000+rkhalternr FROM rk,a
WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND (rkmahnstufe = 9 OR rkrechnr>=999990) AND rkkzzahl<2
AND (@MID(adrucke, 1,1) = 'X' OR :nImmer = 1)
AND rkarztnr=aarztnr  )
AND rkkzzahl<2");
				Int.SqlImmed(@"INSERT INTO mbtemp
(tarztnr, thalternr, trechnr, tdatum, ttyp, ttyptext, tdmza)
SELECT rkarztnr, rkhalternr, rkrechnr, zabuchdat, 'ZA',
@CHOOSE(zakz, NULL, 'Teilzahlung', 'Vollzahlung', 'Vollzahlung, Mahngeb.ausgebucht', 'ausgebucht', 'ausgebucht bei MB-Erst.'),
zadm
FROM rk,za WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND rkrechnr<999990
AND (rkarztnr*100000+rkhalternr) IN (SELECT rkarztnr*100000+rkhalternr FROM rk,a
WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND (rkmahnstufe = 9 OR rkrechnr>=999990) AND rkkzzahl<2
AND (@MID(adrucke, 1,1) = 'X' OR :nImmer = 1)
AND rkarztnr=aarztnr  )
AND rkkzzahl<2
AND rkarztnr=zaarztnr AND rkhalternr=zahalternr AND rkrechnr=zarechnr");
				Int.SqlImmed(@"INSERT INTO mbtemp
(tarztnr, thalternr, trechnr, tdatum, ttyp, ttyptext, tdmgk)
SELECT akarztnr, akhalternr, akrechnr, akdatum, aktypdetail, vbez,
akdm
FROM ak,v WHERE akarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND (aktyp = 'MB' OR aktyp = 'BR')
AND aktypdetail = vcode
AND (akarztnr*100000+akhalternr) IN
(SELECT (tarztnr*100000+thalternr) FROM mbtemp) ");
				this.strTyp = "MB";
				this.strSelect = @"SELECT tarztnr, thalternr, trechnr, tdatum, ttyp, ttyptext,
tdmhf, tdmma, tzahf, tzama, tdmgk, tdmza, tms,
aname1, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
INTO :nTANr, :nTHNr, :nRechNr, :dtBuchDat, :strTypDetail, :strBuchText,
:frmMain.nRkDMHF, :frmMain.nRkDMMa, :frmMain.nRkZaHF, :frmMain.nRkZaMa,
:nDMGK, :nZaDM, :nMS, :strTAN1, :strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strTHLand
FROM mbtemp,a,h
WHERE tarztnr=aarztnr AND tarztnr=harztnr AND thalternr=hhalternr
ORDER BY tarztnr, hnn, hhalternr, tdatum";
				if (!(this.hSqlDisk.Prepare(this.strSelect))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "OPPARTIE") 
			{
				if (this.nArztVon == 0 && this.nArztBis == 0) 
				{
					if (!(this.hSqlDisk.Prepare(@"SELECT 0, rkrechdat, min(rkrechnr), sum(rkdmleis+rkdmarzn+rkmbdmopl),
sum(rkdmmahn), sum(rkdmzins),
sum(rkzaleis+rkzaarzn+rkmbzaopl),
sum(rkzamahn), sum(rkzazins), count(rkrechdat),
sum(@choose(rkkzzahl,0,0,
(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)))
INTO :nTANr, :dtBuchDat, :nMinRechNr,
:nDMRech, :nDMMahn, :nDMZins, :nZaRech, :nZaMahn, :nZaZins,
:nAnzRech, :nDMAusbuch
from rk
WHERE rkrechnr < 999990
GROUP BY 1,2
ORDER BY rkrechdat"))) 
					{
						e.Return = false;
						return;
					}
					else
					{
						if (!(this.hSqlDisk.Execute())) 
						{
							e.Return = false;
							return;
						}
						else
						{
							this.hSqlDisk.Commit();
							e.Return = true;
							return;
						}
					}
				}
				else
				{
					if (!(this.hSqlDisk.Prepare(@"SELECT rkarztnr, rkrechdat, min(rkrechnr), sum(rkdmleis+rkdmarzn+rkmbdmopl),
sum(rkdmmahn), sum(rkdmzins),
sum(rkzaleis+rkzaarzn+rkmbzaopl),
sum(rkzamahn), sum(rkzazins), count(rkrechdat),
sum(@choose(rkkzzahl,0,0,
(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)))
INTO :nTANr, :dtBuchDat, :nMinRechNr,
:nDMRech, :nDMMahn, :nDMZins, :nZaRech, :nZaMahn, :nZaZins,
:nAnzRech, :nDMAusbuch
from rk,a
WHERE rkarztnr BETWEEN :nArztVon AND :nArztBis
AND (@MID(adrucke, 2,1) = 'X' OR :nImmer = 1)
AND rkrechnr < 999990
AND rkarztnr=aarztnr
GROUP BY 1,2
ORDER BY rkarztnr, rkrechdat"))) 
					{
						e.Return = false;
						return;
					}
					else
					{
						if (!(this.hSqlDisk.Execute())) 
						{
							e.Return = false;
							return;
						}
						else
						{
							this.hSqlDisk.Commit();
							e.Return = true;
							return;
						}
					}
				}
			}
			else if (this.strReportName == "OPPARTIEMB") 
			{
				if (!(this.hSqlDisk.Prepare(@"SELECT rkarztnr, rkrechdat, min(rkrechnr), sum(rkdmleis+rkdmarzn+rkmbdmopl),
sum(rkdmmahn), sum(rkdmzins),
sum(rkzaleis+rkzaarzn+rkmbzaopl),
sum(rkzamahn), sum(rkzazins), count(rkrechdat),
sum(@choose(rkkzzahl,0,0,
(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)))
INTO :nTANr, :dtBuchDat, :nMinRechNr,
:nDMRech, :nDMMahn, :nDMZins, :nZaRech, :nZaMahn, :nZaZins,
:nAnzRech, :nDMAusbuch
from rk,a
WHERE rkarztnr BETWEEN :nArztVon AND :nArztBis
AND (@MID(adrucke, 3,1) = 'X' OR :nImmer = 1)
AND rkarztnr=aarztnr
GROUP BY 1,2
ORDER BY rkarztnr, rkrechdat"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "BANKCLEA") 
			{
				if (!(this.hSqlDisk.Prepare(@"SELECT bcarztnr, bchalternr, bcrechnr,
bczahldm, bcbuchdm, bcbuchdat, bcrestl, bcresta, bcrestm, bcrestz, bckonto, bcergebnis,
bcauszug, bcref, bctextschl, bcvz1, bcvz2, bcauftr1, bcauftr2
INTO :nTANr, :nTHNr, :nRechNr,
:nZahlDM, :nBuchDM, :dtBuchDat, :nRestL, :nRestA, :nRestM, :nRestZ, :strKonto, :strErgebnis,
:nAuszug, :strRef, :nTextSchl, :strVZ1, :strVZ2, :strAuftr1, :strAuftr2
FROM bc ORDER BY bcauszug, bcarztnr, bcrechnr"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "BCNG") 
			{
				this.strGebuchtVZ = "gebucht / VZ";
				if (!(this.hSqlDisk.Prepare(@"SELECT bcarztnr, bchalternr, bcrechnr,
bczahldm, bcbuchdm, bcbuchdat, bcrestl, bcresta, bcrestm, bcrestz, bckonto, bcergebnis,
bcauszug, bcref, bctextschl, bcvz1, bcvz2, bcauftr1, bcauftr2
INTO :nTANr, :nTHNr, :nRechNr,
:nZahlDM, :nBuchDM, :dtBuchDat, :nRestL, :nRestA, :nRestM, :nRestZ, :strKonto, :strErgebnis,
:nAuszug, :strRef, :nTextSchl, :strVZ1, :strVZ2, :strAuftr1, :strAuftr2
FROM bc
WHERE bcergebnis<>:strGebuchtVZ
ORDER BY bcauszug, bcergebnis, bcarztnr, bcrechnr"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "BATCHPRO") 
			{
				if (!(this.hSqlDisk.Prepare(@"SELECT bparztnr, bphalternr, bprechnr,
bpzahldm, bpbuchdm, bpbuchdat, bprestl, bpresta, bprestm, bprestz, bpkonto, bpergebnis
INTO :nTANr, :nTHNr, :nRechNr,
:nZahlDM, :nBuchDM, :dtBuchDat, :nRestL, :nRestA, :nRestM, :nRestZ, :strKonto, :strErgebnis
FROM bp ORDER BY bparztnr, bprechnr"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "MBKac") 
			{
				this.strabc = "a+c";
				this.dtDatum = SalDateTime.Current;
				if (!(this.hSqlDisk.Prepare(@"SELECT mkarztnr, mkhalternr,mkrechnr,
mkbuchdat, mkdma, mkdmb, mkdmc, ROWID
INTO :nTANr, :nTHNr, :nRechNr,
:dtBuchDat, :nDMa, :nDMb, :nDMc, :strROWID
FROM mk
WHERE mktyp = :frmMain.strLA AND (mkdma+mkdmc) <> 0 AND mkdruck IS NULL
ORDER BY mkrechnr"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "MBKb") 
			{
				this.strabc = "b";
				this.dtDatum = SalDateTime.Current;
				if (!(this.hSqlDisk.Prepare(@"SELECT mkarztnr, mkhalternr,mkrechnr,
mkbuchdat, mkdma, mkdmb, mkdmc, ROWID
INTO :nTANr, :nTHNr, :nRechNr,
:dtBuchDat, :nDMa, :nDMb, :nDMc, :strROWID
FROM mk
WHERE mktyp = :frmMain.strLA AND mkdmb <> 0 AND mkdruck IS NULL
ORDER BY mkrechnr"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "ETITAKO") 
			{
				if (!(this.hSqlDisk.Prepare(@"SELECT aarztnr, asvname1, asvname2, asvstr, asvort
			INTO :nTANr, :strTAN1, :strTAN2, :strTAStr, :strTAOrt
			FROM a
			WHERE aarztnr in
			(SELECT DISTINCT tkarztnr from tk)
			ORDER BY aarztnr"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			// Else If strReportName = 'RATCHECK'
			// If IDYES = SalMessageBox('Sollen die bezahlten Raten-
			// zahlervereinbarungen gelöscht
			// werden ?','Achtung', MB_YesNo|MB_IconQuestion)
			// Set strSelect = 'SELECT rarztnr, rhalternr
			// INTO :frmMain.nTANr, :frmMain.nTHNr
			// FROM r,rk WHERE rarztnr=rkarztnr AND rhalternr=rkhalternr
			// AND rkkzzahl>1
			// GROUP BY 1,2
			// HAVING sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-
			// rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)<=0'
			// 06.08.98
			// Set strSelect = 'SELECT rarztnr, rhalternr
			// INTO :frmMain.nTANr, :frmMain.nTHNr
			// FROM r,rk WHERE rarztnr=rkarztnr AND rhalternr=rkhalternr
			// GROUP BY 1,2
			// HAVING min(rkkzzahl)>1'
			// Call SqlHandleExec(hSqlDisk,strSelect,'Raten löschen',nCount)
			// Call SqlFetchNext(hSqlDisk,nFetch)
			// While nFetch != FETCH_EOF
			// Call SqlImmed('DELETE FROM r
			// WHERE rarztnr= :frmMain.nTANr AND rhalternr=:frmMain.nTHNr')
			// Call PalLog('RaZa n. RATCHECK gek.: Ha.'
			// || PalStrNum(nTANr, 4, 0) || '/' || PalStrNum(nTHNr, 5,0))
			// Call SqlFetchNext(hSqlDisk,nFetch)
			// Call SqlCommit( hSqlDisk )
			// If NOT SqlPrepare(hSqlDisk,'
			// SELECT rarztnr, rhalternr, hname1, rdm, rmtl, r1, anr2, max(rkrechdat),
			// sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-
			// rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
			// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.strTHN1, :frmMain.nDMRat, :frmMain.nMtl, :frmMain.dtRatDat, :frmMain.nTANrAlt,
			// :frmMain.dtRechDat, :frmMain.nDMRech
			// FROM r,h,a, rk
			// WHERE  rarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			// AND rarztnr=aarztnr AND rarztnr=harztnr and rhalternr=hhalternr
			// AND rarztnr=rkarztnr AND rhalternr=rkhalternr and rkkzzahl<2
			// GROUP BY 1,2,3,4,5,6,7
			// having sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-
			// rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)>(rdm/rmtl*24)')
			// Return FALSE
			// If NOT SqlPrepare(hSqlDisk,'
			// SELECT rarztnr, rhalternr, hti || hvn || \' \' || hnn, rdm, rmtl, r1, anr2, max(rkrechdat),
			// sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-
			// rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
			// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.strTHN1, :frmMain.nDMRat, :frmMain.nMtl, :frmMain.dtRatDat, :frmMain.nTANrAlt,
			// :frmMain.dtRechDat, :frmMain.nDMRech
			// FROM r,h,a, rk
			// WHERE  rarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			// AND rarztnr=aarztnr AND rarztnr=harztnr and rhalternr=hhalternr
			// AND rarztnr=rkarztnr AND rhalternr=rkhalternr and rkkzzahl<2
			// GROUP BY 1,2,3,4,5,6,7')
			// Return FALSE
			// Else
			// If NOT SqlExecute(hSqlDisk)
			// Return FALSE
			// Else
			// Call SqlCommit(hSqlDisk)
			// Return TRUE
			// Else If strReportName = 'RATLIST'
			// If NOT SqlPrepare(hSqlDisk,'
			// SELECT rarztnr, rhalternr, hti || hvn || \' \' || hnn, rdm, rmtl, r1, anr2
			// INTO :nTANr, :nTHNr, :strTHN1, :nDMRat, :nMtl, :dtRatDat, :nTANrAlt
			// FROM r,h,a
			// WHERE  rarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			// AND (@MID(adrucke, 4,1) = \'X\' OR :nImmer = 1)
			// AND rarztnr=aarztnr AND rarztnr=harztnr AND rhalternr=hhalternr
			// ORDER BY rarztnr, hnn')
			// Return FALSE
			// Else
			// If NOT SqlExecute(hSqlDisk)
			// Return FALSE
			// Else
			// Call SqlCommit(hSqlDisk)
			// Return TRUE
			else if (this.strReportName == "70CHECK") 
			{
				Int.SqlConnection(ref this.hSql70);
				if (!(this.hSqlDisk.Prepare(@"SELECT rkarztnr, rkrechdat, min(rkrechnr), sum(rkdmleis+rkdmarzn),
count(rkrechdat)
INTO :nTANr, :dtBuchDat, :nMinRechNr,
:nDMRech, :nAnzRech
from rk
WHERE rkarztnr BETWEEN :nArztVon AND :nArztBis
AND rkrechnr < 999990 AND rkrechdat>='1994-9-1'
GROUP BY 1,2
ORDER BY rkarztnr, rkrechdat"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "SOLVENZ") 
			{
				// If NOT SqlPrepare(hSqlDisk,'SELECT tkaarztnr, tkabeldat, sum(tksoll), sum(tkhaben)
				// INTO :nTANr, :dtBuchDat, :nDMVorsch, :nDMZahl
				// from tka
				// WHERE tkaarztnr BETWEEN :nArztVon AND :nArztBis
				// AND tkabeldat BETWEEN :dtDatVon AND :dtDatBis
				// AND (tkabuchtext LIKE \'+%\'  OR tkhaben >0)
				// GROUP BY 1,2')
				// Return FALSE
				// XXXXX
				if (!(this.hSqlDisk.Prepare(@"SELECT tkaarztnr, tkabeldat, sum(tksoll), sum(tkhaben)
INTO :nTANr, :dtBuchDat, :nDMVorsch, :nDMZahl
from tka
WHERE tkaarztnr BETWEEN :nArztVon AND :nArztBis
AND tkabeldat BETWEEN :dtDatVon AND :dtDatBis
AND (tksoll<>0  OR tkhaben <>0)
GROUP BY 1,2"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						this.nDMRestAlt = 0;
						this.nDMZahlAlt = 0;
						this.dtZahlDatAlt = SalDateTime.Null;
						this.nTANrAlt = 0;
						this.nZinsProz = this.nBankProz;
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "HITLISTE") 
			{
				if (!(this.hSqlDisk.Prepare(@"
SELECT aarztnr, aname1, sum(akanzahl), sum(akdm), avg(akdm),
sum(akrechsumm), avg(akrechsumm)
INTO :nTANr, :strTAN1, :nAnzRech, :nRechGeb, :nBuchDM, :nRechDM, :nZahlDM
FROM ak,a
WHERE aktyp='RG' AND aktypdetail LIKE 'UebOP%' AND akdatum>=@YEARBEG(@NOW)
AND (akarztnr = aarztnr OR (akarztnr = anr2 AND anr2 >= 1)) AND akzpraxart<2
GROUP BY 1,2 ORDER BY 4 DESC"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "MAHNHIT") 
			{
				if (!(this.hSqlDisk.Prepare(@"
SELECT aarztnr, aname1, sum(akanzahl), sum(akdm), avg(akdm),
sum(akrechsumm), avg(akrechsumm)
INTO :nTANr, :strTAN1, :nAnzRech, :nRechGeb, :nBuchDM, :nRechDM, :nZahlDM
FROM ak,a
WHERE aktyp='MG' AND akdatum>=@YEARBEG(@NOW)
AND akarztnr IN (aarztnr, anr2) AND akzpraxart<2
GROUP BY 1,2 ORDER BY 4 DESC"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "TASTATIS") 
			{
				if (!(this.hSqlDisk.Prepare(@"
SELECT aarztnr, aname1, aname2, agktyp, @YEAR(akdatum),
SUM(@CHOOSE( @quarter(akdatum), 0, akdm, NULL)),
SUM(@CHOOSE( @quarter(akdatum), 0, akrechsumm, NULL)),
SUM(@CHOOSE( @quarter(akdatum),0,0, akdm, NULL)),
SUM(@CHOOSE( @quarter(akdatum),0,0, akrechsumm, NULL)),
SUM(@CHOOSE( @quarter(akdatum),0,0,0, akdm, NULL)),
SUM(@CHOOSE( @quarter(akdatum),0,0,0, akrechsumm, NULL)),
SUM(@CHOOSE( @quarter(akdatum),0,0,0,0, akdm, NULL)),
SUM(@CHOOSE( @quarter(akdatum),0,0,0,0, akrechsumm, NULL))
INTO :nTANr, :strTAN1, :strTAN2, :strGKTyp, :nRechJahr,  :nGeb1, :nRech1,
:nGeb2, :nRech2,  :nGeb3, :nRech3,  :nGeb4, :nRech4
FROM ak,a
WHERE aarztnr BETWEEN :nArztVon AND :nArztBis
AND aktyp='RG' AND aktypdetail LIKE 'UebOP%'
AND akarztnr IN (aarztnr, anr2) AND akzpraxart<2
AND @YEARNO(akdatum) > @YEARNO(SYSDATE)-3
GROUP BY 1,2,3,4,5"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						this.nRechJahrAlt = 0;
						this.nTANrAlt = 0;
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "TASTATIS1") 
			{
				if (!(this.hSqlDisk.Prepare(@"
SELECT aarztnr, aname1, aname2, agktyp, @YEAR(akdatum), SUM(akdm), SUM(akrechsumm)
INTO  :nTANr, :strTAN1, :strTAN2, :strGKTyp, :nRechJahr, :nGeb1, :nRech1
FROM ak,a
WHERE aarztnr BETWEEN :nArztVon AND :nArztBis
AND aktyp='RG' AND aktypdetail LIKE 'UebOP%'
AND akarztnr IN (aarztnr, anr2) AND akzpraxart<2
AND (akdatum BETWEEN :dtDatVon AND :dtDatBis
Or akdatum BETWEEN :dtDatVon - 1 YEAR AND :dtDatBis - 1 YEAR
Or akdatum BETWEEN :dtDatVon - 2 YEAR AND :dtDatBis - 2 YEAR)
GROUP BY 1,2,3,4,5"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						this.nTANrAlt = 0;
						e.Return = true;
						return;
					}
				}
			}
			// Else If strReportName = 'MASP2'
			// Set strSelect = 'SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat,
			// (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins),
			//  asvname1, asvname2, asvstr, asvort,
			//  hti || hvn || \' \' || hnn, hname2, hstr, hort, hland
			// INTO :nTANr, :nTHNr, :nRechNr, :dtRechDat,
			// :nDMOP, :strTAN1, :strTAN2, :strTAStr, :strTAOrt,
			// :strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strTHLand
			// FROM rk,a, h
			// WHERE rkarztnr BETWEEN :nArztVon AND :nArztBis
			// AND rkmahnsperr = 2 AND rkrechdat<@QUARTERBEG(SYSDATE)
			// AND rkkzzahl<2 AND (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)>0
			// AND rkarztnr=aarztnr AND rkarztnr=harztnr AND rkhalternr=hhalternr
			// ORDER BY rkarztnr, rkrechdat'
			// If NOT SqlPrepare(hSqlDisk,strSelect)
			// Return FALSE
			// Else
			// If NOT SqlExecute(hSqlDisk)
			// Return FALSE
			// Else
			// Call SqlCommit(hSqlDisk)
			// Return TRUE
			else if (this.strReportName == "ZETTEL") 
			{

				this.strSelect = @"SELECT zarztnr, zhalternr, zrechnr, zvon, zan,
zdatum, zwiedervor, zbemerk, hti || hvn || ' ' || hnn, hname2, hstr, hland || ' ' || hort
INTO :nTANr, :nTHNr, :nRechNr, :strVon, :strAn,
:dtDatum, :dtWieVor, :lsBemerk, :strTAN1, :strTAN2, :strTAStr, :strTAOrt
FROM z, h
WHERE zwiedervor BETWEEN :dtDatVon AND :dtDatBis
AND zarztnr BETWEEN :nArztVon AND :nArztBis ";
				if (this.strMitarb != "") 
				{
					// 29.11.05
					Int.PalCheckLeseberechtigung();
					Var.strBNLeseberechtigung = "\'" + this.strMitarb + "\'" + Var.strBNLeseberechtigung;

					this.strSelect = this.strSelect + " AND zan IN (" + Var.strBNLeseberechtigung + ") ";
				}
				this.strSelect = this.strSelect + @" AND zarztnr=harztnr(+) AND zhalternr=hhalternr(+)
ORDER BY zarztnr, zwiedervor";
				if (!(this.hSqlDisk.Prepare(this.strSelect))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "NEGLISTE") 
			{
				// If NOT SqlPrepare(hSqlDisk,'SELECT hti, hvn, hnn, hname2, hstr, hort
				// 			INTO :nTANr, :nTHNr
				// 			FROM h,rk
				// 			WHERE rkmahnstufe=9 and rkrechdat >= SYSDATE - 1095
				// 			AND hort LIKE \'21%\'
				// 			AND rkarztnr=harztnr AND rkhalternr=hhalternr
				// 			GROUP BY 1,2,3,4,5,6')
				// Return FALSE
				if (!(this.hSqlDisk.Prepare(@"SELECT rkarztnr, rkhalternr
			INTO :frmMain.nTANr, :frmMain.nTHNr
			FROM h, rk
			WHERE rkmahnstufe=9 and rkrechdat >= SYSDATE - 1095
			AND hort LIKE :frmMain.strPLZ
			AND rkarztnr=harztnr AND rkhalternr=hhalternr
			GROUP BY 1,2"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						// Call SqlCommit(hSqlDisk)
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "MYCOLEER") 
			{
				if (!(this.hSqlDisk.Prepare(@"SELECT aarztnr, aname1, aname2, astr, aort
			INTO :nTANr, :strTAN1, :strTAN2, :strTAStr, :strTAOrt
			FROM a
			WHERE aarztnr BETWEEN :nArztVon AND :nArztBis
			AND aaustritt IS NULL AND agestorben IS NULL
			ORDER BY aarztnr"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "ZM") 
			{

				this.dtCurrentDate = SalDateTime.Current;
				this.strSelect = @"SELECT zarztnr, zhalternr, zrechnr, zvon, zan,
zdatum, zzm, zzmdm, zbemerk, hti || hvn || ' ' || hnn, hname2, hstr, hland || ' ' || hort, z.ROWID
INTO :nTANr, :nTHNr, :nRechNr, :strVon, :strAn,
:dtDatum, :strMeldung, :nZMDM, :lsBemerk, :strTAN1, :strTAN2, :strTAStr, :strTAOrt, :strROWID
FROM z, h
WHERE zart = 'ZM'
AND zerledigt <> 'J' ";
				this.strSelect = this.strSelect + @" AND zarztnr=harztnr AND zhalternr=hhalternr
ORDER BY zarztnr, zwiedervor";
				if (!(this.hSqlDisk.Prepare(this.strSelect))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "EL") 
			{
				this.strVon = "";
				dlgText.ModalDialog(this, "EL-Liste für welches Zeichen (2-stellig) ? :", "", 2, ref this.strVon);
				this.strVon = this.strVon.ToUpper();

				this.strSelect = @"SELECT elarztnr, elhalternr, elrechnr, elzeichen,
eldatum, eltext, hti || hvn || ' ' || hnn, hname2, hstr, hland || ' ' || hort
INTO :nTANr, :nTHNr, :nRechNr, :strVon,
:dtDatum, :strText, :strTAN1, :strTAN2, :strTAStr, :strTAOrt
FROM el, h
WHERE elerledigt <> 'J'  ";
				if (this.strVon != "") 
				{
					this.strSelect = this.strSelect + @"
AND elzeichen = :strVon ";
				}
				this.strSelect = this.strSelect + @"
AND elarztnr=harztnr(+) AND elhalternr=hhalternr(+)
ORDER BY elarztnr, eldatum ";
				if (!(this.hSqlDisk.Prepare(this.strSelect))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "BEZ") 
			{

				this.dtCurrentDate = SalDateTime.Current;
				this.strSelect = @"SELECT bezarztnr, bezhalternr, bezrechnr, bezbearbdatum, bezdm,
hti || hvn || ' ' || hnn, hname2, hstr, hland || ' ' || hort, hblz, hkonto, bez.ROWID
INTO :nTANr, :nTHNr, :nRechNr, :dtDatum, :nZMDM, :strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strBLZ, :strKonto, :strROWID
FROM bez, h
WHERE (bezerldat IS NULL Or bezerldat = '1900-01-01')
AND bezarztnr = harztnr AND bezhalternr = hhalternr
ORDER BY bezarztnr";
				if (!(this.hSqlDisk.Prepare(this.strSelect))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "RUECKER") 
			{
				this.strSelect = @"SELECT rearztnr, aname1, regebdm, reuebersch, regesgebdm, redm, rejahr, rezahldat
INTO :nTANr, :strTAN1, :nGebDM, :nUebersch, :nGesGebDM, :nDM, :nJahr, :dtZahlDat
FROM re, a
WHERE rearztnr = aarztnr
ORDER BY rearztnr, rejahr";
				if (!(this.hSqlDisk.Prepare(this.strSelect))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "BUCHABGL") 
			{
				Int.SqlImmedSel(@"SELECT sum(tksoll), sum(tkhaben) INTO :nTKSoll, :nTKHaben
FROM tk
WHERE tkbeldat BETWEEN :dtDatVon AND :dtDatBis");
				Int.SqlImmedSel(@"SELECT sum(fidm) INTO :nFISoll
FROM fi
WHERE fibeldat BETWEEN :dtDatVon AND :dtDatBis
and fisoll in (16000, 16100, 16200, 16420, 16500, 17300, 16400, 16410)
and not fihaben in (16000, 16100, 16200, 16420, 16500, 17300, 16400, 16410)");
				Int.SqlImmedSel(@"SELECT sum(fidm) INTO :nFIHaben
FROM fi
WHERE fibeldat BETWEEN :dtDatVon AND :dtDatBis
and fihaben in (16000, 16100, 16200, 16420, 16500, 17300, 16400, 16410)
and not fisoll  in (16000, 16100, 16200, 16420, 16500, 17300, 16400, 16410)");
				this.bNoFetch = false;
				e.Return = true;
				return;
			}
			else if (this.strReportName == "MBBEZ") 
			{

				this.dtCurrentDate = SalDateTime.Current;
				this.strSelect = @"SELECT prnr, prarztnr, prhalternr,
praz, prgername, prdma, prdmb, prdmc, prdmhf, prbezahlt,
hti || hvn || ' ' || hnn, hname2, hstr, hort, hland,
anr2, aname1, aname2, astr, aort, pr.ROWID
INTO :nProzNr, :nTANr, :nTHNr,
:strAZ, :strGerName, :nDMa, :nDMb, :nDMc, :nDMHF, :dtBezahlt,
:strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strTHLand, :nTANr2, :strTAN1, :strTAN2, :strTAStr, :strTAOrt, :strROWID
FROM pr, h, a
WHERE prarztnr BETWEEN :nArztVon AND :nArztBis
AND prdruckdatum IS NULL AND prbezahlt IS NOT NULL
AND prarztnr = aarztnr AND prarztnr = harztnr AND prhalternr = hhalternr
ORDER BY prarztnr";
				if (!(this.hSqlDisk.Prepare(this.strSelect))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "BUB") 
			{

				this.dtCurrentDate = SalDateTime.Current;
				this.strSelect = @"SELECT bubarztnr, bubbearbdatum, bubsoll, bubhaben, bubdm, bubbuchtext, bub.ROWID
INTO :nTANr, :dtDatum, :nSoll, :nHaben, :nDM, :strBuchText, :strROWID
FROM bub
WHERE buberldat IS NULL
ORDER BY bubhaben, bubarztnr, bubbearbdatum";
				if (!(this.hSqlDisk.Prepare(this.strSelect))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "RechAbListe") 
			{
				this.strSelect = @"SELECT raarztnr, rahalternr, rarechnr, radatum, razeichen, raan1 || ', ' || raan2 || ', ' || raan3 || ' (' || @STRING(raarztnr,0) || ')',
aname1, hti || hvn || ' ' || hnn || ', ' || hname2 || ', ' || hstr || ', ' || hland || ' ' || hort,
(rkdmleis+rkdmarzn)
INTO :nTANr, :nTHNr, :nRechNr, :dtBuchDat, :strZeichen, :strBuchText, :strTAN1, :strTHN1, :nDMRech
FROM ra,a,h, rk
WHERE raarztnr BETWEEN :nArztVon AND :nArztBis
AND radatum BETWEEN :dtDatVon AND :dtDatBis
AND (@MID(adrucke, 6,1) = 'X' OR :nImmer = 1)
AND raarztnr=aarztnr AND raarztnr=harztnr AND rahalternr=hhalternr AND raarztnr=rkarztnr AND rahalternr=rkhalternr AND rarechnr=rkrechnr
ORDER BY raarztnr, raan1, hnn, hhalternr, rarechnr";
				if (!(this.hSqlDisk.Prepare(this.strSelect))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlDisk.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlDisk.Commit();
						e.Return = true;
						return;
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFetchNext event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMain_OnSAM_ReportFetchNext(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// ! 10.04.06 Ländercodes
			this.strTHLand = Int.PalPruefeLC(this.strTHLand, 0);

			if (this.strReportName == "KONTOAUS" || this.strReportName == "KONTOAUSALT" || this.strReportName == "KONTOAUSVM") 
			{
				if (this.bNoFetch) 
				{
					// 09.07.09 OTF292 auskommentiert:
					// Set strTHN1 = ''
					// Set strTHN2 = ''
					// Set strTHStr = ''
					// Set strTHOrt = ''

					this.nDMMwSt = 0;
					this.nDMVorst = 0;

					this.bNoFetch = false;
					this.nDMMahn = 0;
					// 15.06.05
					this.nDMZins = 0;

					this.nDMHaben = this.nDMZaA;
					// am 31.10.96 rausgenommen, da bei Buchungen,
					// die ZALEIS und ZAARZN hatten, die MwSt falsch war
					// Set nDMMwSt = nDMHaben  -
					// SalNumberRound(nDMHaben * 100 / (1 + (nProz/100))) /100
					if (this.strLA != "MB")  // 30.01.01
					{
						this.strLA = Var.strA;
					}
					if (this.nRechNr >= 999990) 
					{
						this.nProz = 0;
					}
					if (this.nSA == 2) 
					{
						this.nDMUeberw = this.nDMSoll - this.nDMHaben;
					}
					else
					{
						this.nDMUeberw = 0.00m;
					}
					if (this.nDMVorst > 0.00m) 
					{
						this.nDMmitVorstV = this.nDMVorst;
						this.nDMmitVorstS = this.nDMSoll - this.nDMHaben;
					}
					else
					{
						this.nDMmitVorstV = 0.00m;
						this.nDMmitVorstS = 0.00m;
					}
					// Summenblatt-Ermittlung
					// Call PalSummenblatt()
					e.Return = true;
					return;
				}
				else
				{
					if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
					{
						if (this.nFetch == Sys.FETCH_Ok) 
						{
							// 05.06.08 F378
							// Set strBuchTextGrp = strBuchText || SalNumberToStrX(nTANr,0) || 'H' || SalNumberToStrX(nTHNr,0)
							if (this.nTHNr == 0 || this.nTHNr == SalNumber.Null)  // 17.06.08
							{
								this.strBuchTextGrp = this.strBuchText;
							}
							else
							{
								this.strBuchTextGrp = this.nTANr.ToString(0) + "H" + this.nTHNr.ToString(0);
							}
							if (this.nTANr != this.nTANrAlt) 
							{
								if (this.strReportName == "KONTOAUSVM") 
								{
									Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort,  akzpraxart,
		asvname1, asvname2, asvstr, asvort,
		akzpraxart, anr2
		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt,
		:frmMain.nKZPraxArt,
		:frmMain.strTASVN1, :frmMain.strTASVN2, :frmMain.strTASVStr, :frmMain.strTASVOrt,
		:frmMain.nKZPraxArt, :frmMain.nTANrL
		FROM A
		WHERE a.aarztnr = :frmMain.nTANr");
									Int.SqlImmedSel(@"SELECT vodatum, vovorrech, vovorsoll, vovorhaben, vovorvst, vovormwst, voop
		INTO :frmMain.dtCurrentDate, :frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
		:frmMain.nVorVSt, :frmMain.nVorMwSt, :frmMain.nAussenst
		FROM vo
		WHERE voarztnr = :frmMain.nTANr
		AND vodatum = :frmMain.dtDatVM  ");
								}
								else
								{
									// 30.10.09 OTF330 + akzpraxart, aarztnr2
									Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort,  akzpraxart,
		asvname1, asvname2, asvstr, asvort,
		avorrech, avorsoll, avorhaben, avorvst, avormwst,
		akzpraxart, anr2
		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt,
		:frmMain.nKZPraxArt,
		:frmMain.strTASVN1, :frmMain.strTASVN2, :frmMain.strTASVStr, :frmMain.strTASVOrt,
		:frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
		:frmMain.nVorVSt, :frmMain.nVorMwSt,
		:frmMain.nKZPraxArt, :frmMain.nTANrL
		FROM A
		WHERE a.aarztnr = :frmMain.nTANr");
									Int.SqlImmedSel(@"SELECT
sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
INTO :frmMain.nAussenst FROM rk WHERE rkarztnr = :frmMain.nTANr
AND rkkzzahl <2");
									this.dtCurrentDate = SalDateTime.Current;
								}
								if (this.nKZPraxArt < 2) 
								{
									this.nTANrL = this.nTANr;
								}
								this.nTANrAlt = this.nTANr;

								this.nSuDM19L = 0;
								this.nSuDM16L = 0;
								this.nSuDM15L = 0;
								this.nSuDM7L = 0;
								this.nSuDM0L = 0;
								this.nSuDMaL = 0;
								this.nSuDMAuslL = 0;
								this.nSuSt19L = 0;
								this.nSuSt16L = 0;
								this.nSuSt15L = 0;
								this.nSuSt7L = 0;
								this.nSuSt0L = 0;
								this.nSuStaL = 0;
								this.nSuStAuslL = 0;
								this.nSuDM19A = 0;
								this.nSuDM16A = 0;
								this.nSuDM15A = 0;
								this.nSuDM7A = 0;
								this.nSuDM0A = 0;
								this.nSuDMaA = 0;
								this.nSuDMAuslA = 0;
								this.nSuSt19A = 0;
								this.nSuSt16A = 0;
								this.nSuSt15A = 0;
								this.nSuSt7A = 0;
								this.nSuSt0A = 0;
								this.nSuStaA = 0;
								this.nSuStAuslA = 0;
								this.nSuDM19MB = 0;
								this.nSuDM16MB = 0;
								this.nSuDM15MB = 0;
								this.nSuDM7MB = 0;
								this.nSuDM0MB = 0;
								this.nSuDMaMB = 0;
								this.nSuSt19MB = 0;
								this.nSuSt16MB = 0;
								this.nSuSt15MB = 0;
								this.nSuSt7MB = 0;
								this.nSuSt0MB = 0;
								this.nSuStaMB = 0;
								this.nSuDMRg = 0;
								this.nSuDMMg = 0;
								this.nSuDMa = 0;
								this.nSuDMaSt = 0;
								this.nSuVSt = 0;
								this.nSuStorno = 0;
								this.nSuDM20L = 0;
								this.nSuDM10L = 0;
								this.nSuSt20L = 0;
								this.nSuSt10L = 0;
								this.nSuDM20A = 0;
								this.nSuDM10A = 0;
								this.nSuSt20A = 0;
								this.nSuSt10A = 0;
								this.nSuDM20MB = 0;
								this.nSuDM10MB = 0;
								this.nSuSt20MB = 0;
								this.nSuSt10MB = 0;
							}
							if (this.strBuchText.Left(1) == "+") 
							{
								this.nSA = 2;
							}
							// 05.06.08
							// 17.12.07 F318 + or nSA=3
							// If nSA = 1 or nSA=3
							// If nTHNr != 0
							// Call SqlImmedSel('SELECT hti || hvn || \' \' || hnn, hname2, hstr, hort, hland
							// 		INTO :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand
							// 		FROM H
							// 		WHERE h.harztnr = :frmMain.nTANr AND h.hhalternr = :frmMain.nTHNr')
							// 10.04.06 Ländercodes
							// Set strTHLand = PalPruefeLC(strTHLand,0)
							// Else
							// Set strTHN1 = ''
							// Set strTHN2 = ''
							// Set strTHStr = ''
							// Set strTHOrt = ''
							// Set strTHLand = ''
							// Else
							// Set strTHN1 = ''
							// Set strTHN2 = ''
							// Set strTHStr = ''
							// Set strTHOrt = ''
							// Set strTHLand = ''
							if (this.nTHNr != 0) 
							{
								Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
		INTO :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand
		FROM H
		WHERE h.harztnr = :frmMain.nTANr AND h.hhalternr = :frmMain.nTHNr");
								// 10.04.06 Ländercodes
								this.strTHLand = Int.PalPruefeLC(this.strTHLand, 0);
								// 26.05.10 OTÄ397
								this.nReverse = 0;
								if (this.nRechNr != 0 && this.nRechNr != SalNumber.Null) 
								{
									Int.SqlImmedSel("SELECT rkreverse INTO :frmMain.nReverse FROM rk WHERE rkarztnr = :frmMain.nTANr AND rkhalternr = :frmMain.nTHNr AND rkrechnr = :frmMain.nRechNr");
									if (this.nReverse == SalNumber.Null) 
									{
										this.nReverse = 0;
									}
								}

							}
							else
							{
								this.strTHN1 = "";
								this.strTHN2 = "";
								this.strTHStr = "";
								this.strTHOrt = "";
								this.strTHLand = "";
							}

							if (this.nDMZaL != 0.00m && this.nDMZaA != 0.00m) 
							{
								this.bNoFetch = true;
								this.nDMHaben = this.nDMZaL;
								this.strLA = Var.strL;
							}
							else
							{
								this.bNoFetch = false;
								this.nDMHaben = this.nDMZaL + this.nDMZaA;
								if (this.nDMZaL != 0.00m) 
								{
									this.strLA = Var.strL;
								}
								else if (this.nDMZaL == 0.00m && this.nDMZaA == 0.00m)  // 09.10.09 OTF323
								{
									// 09.11.10 OTF790
									// Set strLA = ''
									// 09.08.11 F989 + Or nKZPraxArt = 0
									if (this.nKZPraxArt == 1 || this.nKZPraxArt == 0) 
									{
										this.strLA = Var.strL;
									}
									else if (this.nKZPraxArt == 2) 
									{
										this.strLA = Var.strA;
									}
								}
								else
								{
									this.strLA = Var.strA;
								}
							}
							if (this.nSA != 1) 
							{
								this.strLA = "";
							}
							if (this.nSA == 2) 
							{
								this.nDMUeberw = this.nDMSoll - this.nDMHaben;
							}
							else
							{
								this.nDMUeberw = 0.00m;
							}
							if (this.nSA == 1) 
							{
								// Set nDMMwSt = nDMHaben + nDMMahn -
								// SalNumberRound((nDMHaben+nDMMahn) * 100 / (1 + (nProz/100))) /100
								this.nDMHaben = this.nDMHaben + this.nDMMahn + this.nDMZins;
							}
							else
							{
								this.nDMSoll = this.nDMSoll + this.nDMPorto;
							}
							if (this.nDMVorst > 0.00m) 
							{
								this.nDMmitVorstV = this.nDMVorst;
								this.nDMmitVorstS = this.nDMSoll - this.nDMHaben;
							}
							else
							{
								this.nDMmitVorstV = 0.00m;
								this.nDMmitVorstS = 0.00m;
							}
							if (this.nRechNr >= 999990) 
							{
								// 30.01.01 kommentiert
								// Set bNoFetch = FALSE
								// Set nDMHaben = nDMZaL + nDMZaA

								this.nDMMahn = 0;
								this.strLA = "MB";
								// If nDMZaL != 0.00
								// Set strLA = strL
								// Else
								// Set strLA = strA
							}

							if (this.nKZPraxArt == 1) 
							{
								if (this.strLA == Var.strA) 
								{
									this.strLA = Var.strL;
								}
							}
							else if (this.nKZPraxArt == 2) 
							{
								if (this.strLA == Var.strL) 
								{
									this.strLA = Var.strA;
								}
							}
							// Summenblatt-Ermittlung
							this.PalSummenblatt();
							e.Return = true;
							return;
						}
						else
						{
							e.Return = false;
							return;
						}
					}
				}
			}
			else if (this.strReportName == "TALISTE") 
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						this.strZust = Int.PalZust(this.nTANr);
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			else if (this.strReportName == "THLISTE") 
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						// 21.04.06 Ländercodes
						this.strTHLand = Int.PalPruefeLC(this.strTHLand, 0);

						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			else if (this.strReportName == "SALDEN") 
			{
				while (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						Int.SqlImmedSel(@"SELECT 	sum(tkdmabr), sum(tkdmporto), sum( tkdmzamwst), sum(tktavst),
			 sum(tksoll), sum(tkhaben)
			INTO  :frmMain.nDMRech, :frmMain.nDMPorto,  :frmMain.nDMMwSt, :frmMain.nDMVorst,
			:frmMain.nDMSoll, :frmMain.nDMHaben
			FROM tk
			WHERE tkarztnr = :frmMain.nTANr");
						if ((this.bSaldenSch == false && (this.nVorRech != 0 || this.nVorSoll != 0 || this.nVorHaben != 0 || this.nDMRech != 0 || this.nDMSoll != 0 || this.nDMHaben != 0)) || (this.bSaldenSch == true && (this.nDMSoll - this.nDMHaben + this.nVorSoll - 
						this.nVorHaben) > 0)) 
						{
							if (this.bSaldenOP) 
							{
								Int.SqlImmedSel(@"SELECT
sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
INTO :frmMain.nAussenst FROM rk WHERE rkarztnr = :frmMain.nTANr
AND rkkzzahl <2");
							}
							else
							{
								this.nAussenst = SalNumber.Null;
							}
							e.Return = true;
							return;
						}
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			else if (this.strReportName == "AUSBUCH") 
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort
		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt
		FROM A
		WHERE a.aarztnr = :frmMain.nTANr");
						if (this.nTHNr != 0) 
						{
							Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn
		INTO :frmMain.strTHN1
		FROM H
		WHERE h.harztnr = :frmMain.nTANr AND h.hhalternr = :frmMain.nTHNr");
						}
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			else if (this.strReportName == "OPPARTIE" || this.strReportName == "OPPARTIEMB") 
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						if (this.nTANr != this.nTANrAlt) 
						{
							Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort
INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt
FROM a
WHERE aarztnr = :frmMain.nTANr");
							this.nTANrAlt = this.nTANr;
						}
						this.nRechJahr = this.dtBuchDat.Year();
						if (this.nMinRechNr >= 999990) 
						{
							this.strBezeichnung = "MB letzte Aktivität.";
						}
						else
						{
							this.strBezeichnung = "Rechnungspartie";
						}
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			else if (this.strReportName == "OPLISTE") 
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						if (this.nOPMS == 99) 
						{
							this.strTAN1 = this.strTAN1 + "   NUR OFFENE MAHNGEB. UND ZINSEN !!!";
						}
						// 13.02.01
						// Call SqlIstDa('FROM r,a WHERE aarztnr = :frmMain.nTANr AND rhalternr = :frmMain.nTHNr and (rarztnr=aarztnr or rarztnr=anr2)', bRepOk)
						// If bRepOk
						// Set strTHText = 'Ratenzahler'
						// Else
						this.strTHText = "";
						// 17.12.04
						this.strInkasso = "";
						Int.SqlImmedSel(@"SELECT 'von ' || razeichen || '  am ' || @DATETOCHAR( radatum, 'dd.mm.yy') || ' abgegeben an ' || raan1 INTO :frmMain.strInkasso
FROM ra WHERE raarztnr = :frmMain.nTANr AND rarechnr = :frmMain.nRechNr");

						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			else if (this.strReportName == "MBKac" || this.strReportName == "MBKb") 
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						Int.SqlImmedSel(@"SELECT aname1, aname2
		INTO :frmMain.strTAN1, :frmMain.strTAN2
		FROM A
		WHERE a.aarztnr = :frmMain.nTANr");
						Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn
		INTO :frmMain.strTHN1
		FROM h
		WHERE h.harztnr = :frmMain.nTANr AND h.hhalternr = :frmMain.nTHNr");
						Int.SqlImmed("UPDATE mk SET mkdruck = :frmMain.dtDatum WHERE ROWID = :frmMain.strROWID");
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			else if (this.strReportName == "RATCHECK") 
			{
				while (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						this.bRepOk = false;
						if (this.nDMRech > (this.nDMRat / this.nMtl * 24)) 
						{
							this.bRepOk = true;
						}
						else
						{
							this.dtTeilzDat = new SalDateTime(1900, 1, 1);
							this.dtMahnDat = new SalDateTime(1900, 1, 1);
							Int.SqlImmedSel(@"SELECT max(zabuchdat) INTO :frmMain.dtTeilzDat FROM za
WHERE zaarztnr = :frmMain.nTANr AND zahalternr = :frmMain.nTHNr");
							Int.SqlImmedSel(@"SELECT max(madatum) INTO :frmMain.dtMahnDat FROM rk,ma
WHERE rkarztnr = :frmMain.nTANr AND rkhalternr = :frmMain.nTHNr AND rkarztnr=maarztnr AND rkrechnr=marechnr  AND mams IS NULL");
							if (this.dtTeilzDat == SalDateTime.Null) 
							{
								this.dtTeilzDat = new SalDateTime(1900, 1, 1);
							}
							if (this.dtMahnDat == SalDateTime.Null) 
							{
								this.dtMahnDat = new SalDateTime(1900, 1, 1);
							}
							if (this.dtMahnDat > this.dtZahlDat && SalDateTime.Current > this.dtRatDat + 5) 
							{
								this.bRepOk = true;
							}
						}
						if (this.bRepOk) 
						{
							e.Return = true;
							return;
						}
					}
					else
					{
						e.Return = false;
						return;
					}
				}
				e.Return = false;
				return;
			}
			else if (this.strReportName == "RATLIST") 
			{
				while (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						Int.SqlImmedSel(@"
SELECT
sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl),
max(rkrechdat)
INTO :frmMain.nDMRech, :frmMain.dtRechDat
FROM rk
WHERE rkarztnr IN (:frmMain.nTANr, :frmMain.nTANrAlt)
AND rkhalternr = :frmMain.nTHNr
AND rkkzzahl<2");
						if (this.nDMRech > 0) 
						{
							e.Return = true;
							return;
						}
					}
					else
					{
						e.Return = false;
						return;
					}
				}
				e.Return = false;
				return;
			}
			else if (this.strReportName == "70CHECK") 
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						if (this.nTANr != this.nTANrAlt) 
						{
							Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort
INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt
FROM a
WHERE aarztnr = :frmMain.nTANr");
							this.nTANrAlt = this.nTANr;
						}
						this.nZaDM = 0;
						this.nTage30 = 0;
						this.nTage70 = 0;
						this.nProz70 = 0;
						this.nProz30 = 0;
						this.nBankZins = 0;
						this.nRechJahr = this.dtBuchDat.Year();
						this.dtZahlDatAlt = this.dtBuchDat;

						this.dtZahlDat = SalDateTime.Null;
						Int.SqlHandleExec(this.hSql70, @"SELECT zabuchdat, sum(zadm) INTO :frmMain.dtZahlDat, :frmMain.nZahlDM
FROM rk,za
WHERE rkarztnr = :frmMain.nTANr AND rkrechdat = :frmMain.dtBuchDat
AND rkrechnr < 999990 AND rkrechdat>='1994-9-1' AND zakz<4
AND rkarztnr=zaarztnr AND rkrechnr=zarechnr
GROUP BY 1", "Lesen ZA bei 70%-Checkliste", ref this.nErr);
						this.nFetch70 = this.hSql70.FetchNext();
						while (this.nFetch70 != Sys.FETCH_EOF) 
						{
							this.SetStatusBarText("TA " + Int.PalStrNum(this.nTANr, 4, 0) + ": " + "  Partie: " + Int.SalDateToStrX(this.dtBuchDat) + "  Zahlung: " + Int.SalDateToStrX(this.dtZahlDat));

							if (this.nTage70 == 0) 
							{
								this.nBankZins = this.nBankZins + ((this.nDMRech * 0.7m - this.nZaDM) * (this.dtZahlDat - this.dtZahlDatAlt) * this.nBankProz) / (100 * 360);
							}
							this.nZaDM = this.nZaDM + this.nZahlDM;
							this.dtZahlDatAlt = this.dtZahlDat;

							if (this.nZaDM >= (this.nDMRech * 0.3m) && this.nTage30 == 0) 
							{
								this.nTage30 = this.dtZahlDat - this.dtBuchDat;
								if (this.nDMRech > 0) 
								{
									this.nProz30 = this.nZaDM / this.nDMRech * 100;
								}
							}
							if (this.nZaDM >= (this.nDMRech * 0.7m) && this.nTage70 == 0) 
							{
								this.nTage70 = this.dtZahlDat - this.dtBuchDat;
								if (this.nDMRech > 0) 
								{
									this.nProz70 = this.nZaDM / this.nDMRech * 100;
								}
							}
							this.nFetch70 = this.hSql70.FetchNext();
						}
						this.hSql70.Commit();
						if (this.nTage30 == 0) 
						{
							this.nTage30 = this.dtZahlDat - this.dtBuchDat;
							if (this.nDMRech > 0) 
							{
								this.nProz30 = this.nZaDM / this.nDMRech * 100;
							}
						}
						if (this.nTage70 == 0) 
						{
							this.nTage70 = this.dtZahlDat - this.dtBuchDat;
							if (this.nDMRech > 0) 
							{
								this.nProz70 = this.nZaDM / this.nDMRech * 100;
							}
							this.nBankZins = this.nBankZins + ((this.nDMRech * 0.7m - this.nZaDM) * (SalDateTime.Current - this.dtZahlDat) * this.nBankProz) / (100 * 360);
						}

						this.nTVZins = this.nDMRech * 0.7m * this.nTVProz / 100;
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			else if (this.strReportName == "SOLVENZ") 
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						if (this.nTANr != this.nTANrAlt) 
						{
							Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort
INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt
FROM a
WHERE aarztnr = :frmMain.nTANr");
							this.nTANrAlt = this.nTANr;
						}
						this.nDMZins = 0;
						this.nDMRest = 0;
						this.nTage = 0;

						if (this.dtZahlDatAlt != SalDateTime.Null) 
						{
							this.nTage = this.dtBuchDat - this.dtZahlDatAlt;
						}
						this.nDMRest = this.nDMRestAlt + this.nDMVorsch - this.nDMZahl;
						if (this.nTage > 0) 
						{
							this.nDMZins = (this.nDMRestAlt * this.nTage * this.nBankProz) / (100 * 360);
						}

						this.dtZahlDatAlt = this.dtBuchDat;
						this.nDMRestAlt = this.nDMRest;
						this.nDMZahlAlt = this.nDMZahl;

						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			else if (this.strReportName == "TASTATIS") 
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{

						this.nRechJahr = this.nRechJahr + 1900;
						if (this.nTANr != this.nTANrAlt) 
						{
							this.nRech1Alt = 0;
							this.nRech2Alt = 0;
							this.nRech3Alt = 0;
							this.nRech4Alt = 0;
							this.nTANrAlt = this.nTANr;
						}
						this.nProz1 = SalNumber.Null;
						this.nProz2 = SalNumber.Null;
						this.nProz3 = SalNumber.Null;
						this.nProz4 = SalNumber.Null;

						this.nRech2 = this.nRech1 + this.nRech2;
						this.nRech3 = this.nRech2 + this.nRech3;
						this.nRech4 = this.nRech3 + this.nRech4;

						// Set nRech2Alt = nRech1Alt + nRech2Alt
						// Set nRech3Alt = nRech2Alt + nRech3Alt
						// Set nRech4Alt =nRech3Alt + nRech4Alt

						if (this.nRech1Alt != 0 && this.nRech1 != SalNumber.Null && this.nRech1Alt != SalNumber.Null) 
						{
							this.nProz1 = this.nRech1 / this.nRech1Alt - 1;
						}
						if (this.nRech2Alt != 0 && this.nRech2 != SalNumber.Null && this.nRech2Alt != SalNumber.Null) 
						{
							this.nProz2 = this.nRech2 / this.nRech2Alt - 1;
						}
						if (this.nRech3Alt != 0 && this.nRech3 != SalNumber.Null && this.nRech3Alt != SalNumber.Null) 
						{
							this.nProz3 = this.nRech3 / this.nRech3Alt - 1;
						}
						if (this.nRech4Alt != 0 && this.nRech4 != SalNumber.Null && this.nRech4Alt != SalNumber.Null) 
						{
							this.nProz4 = this.nRech4 / this.nRech4Alt - 1;
						}
						this.nRech1Alt = this.nRech1;
						this.nRech2Alt = this.nRech2;
						this.nRech3Alt = this.nRech3;
						this.nRech4Alt = this.nRech4;
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			else if (this.strReportName == "TASTATIS1") 
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{

						this.nRechJahr = this.nRechJahr + 1900;
						if (this.nTANr != this.nTANrAlt) 
						{
							this.nRech1Alt = 0;
							this.nTANrAlt = this.nTANr;
						}
						this.nProz1 = SalNumber.Null;


						if (this.nRech1Alt != 0 && this.nRech1 != SalNumber.Null && this.nRech1Alt != SalNumber.Null) 
						{
							this.nProz1 = this.nRech1 / this.nRech1Alt - 1;
						}
						this.nRech1Alt = this.nRech1;
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			else if (this.strReportName == "ZM") 
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						Int.SqlImmed("UPDATE z SET zerledigt = \'Z\'  WHERE ROWID = :frmMain.strROWID");
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			else if (this.strReportName == "BEZ") 
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						Int.SqlImmed("UPDATE bez SET bezerldat = '1900-1-1' WHERE ROWID = :frmMain.strROWID");
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			else if (this.strReportName == "BUCHABGL") 
			{
				if (this.bNoFetch) 
				{
					e.Return = false;
					return;
				}
				else
				{
					this.bNoFetch = true;
					e.Return = true;
					return;
				}
			}
			else if (this.strReportName == "MBBEZ") 
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						if (this.nTANr2 == 0 || this.nTANr2 == SalNumber.Null) 
						{
							this.nTANr2 = this.nTANr;
						}
						Int.SqlImmedSel(@"SELECT
sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
INTO :frmMain.nAussenst FROM rk WHERE rkarztnr IN  (:frmMain.nTANr, :frmMain.nTANr2)
AND rkhalternr = :frmMain.nTHNr AND rkkzzahl <2");
						if (this.nAussenst == SalNumber.Null) 
						{
							this.nAussenst = 0;
						}
						Int.SqlImmed("UPDATE pr SET prdruckdatum = '1900-1-1' WHERE ROWID = :frmMain.strROWID");
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			else if (this.strReportName == "BUB") 
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						Int.SqlImmed("UPDATE bub SET buberldat = '1900-1-1' WHERE ROWID = :frmMain.strROWID");
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			else if (this.strReportName == "NEGLISTE") 
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						Int.SqlImmedSel(@"SELECT hti, hvn, hnn, hname2, hstr, hort
			INTO :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt
			FROM h
			WHERE harztnr = :frmMain.nTANr AND hhalternr = :frmMain.nTHNr");
						this.strTHN1 = this.strTHTi + this.strTHVN + " " + this.strTHNN;
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			// Else If strReportName = 'RECHNUNG'
			// If SqlFetchNext(hSqlDisk,nFetch)
			// If nFetch = FETCH_Ok
			// Set nDMRech = nSoll - nDMPorto - nDMVorst
			// Return TRUE
			// Else
			// Return FALSE
			else
			{
				if (this.hSqlDisk.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			this.hSqlDisk.Commit();
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFinish event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMain_OnSAM_ReportFinish(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.strReportName == "70CHECK") 
			{
				this.hSql70.Disconnect();
			}
			else if (this.strReportName == "MBKac" || this.strReportName == "MBKb") 
			{
				if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					Sal.WaitCursor(true);
					Int.SqlImmedX("DELETE FROM mk WHERE mktyp = :frmMain.strLA AND mkdruck = :frmMain.dtDatum");
				}
				else
				{
					Sal.WaitCursor(true);
					Int.SqlImmed("UPDATE mk SET mkdruck = NULL WHERE mkdruck = :frmMain.dtDatum");
				}
			}
			else if (this.strReportName == "ZM") 
			{
				if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					Sal.WaitCursor(true);
					Int.SqlImmedX("UPDATE z SET zerledigt = \'J\'  WHERE zerledigt = \'Z\'");
				}
				else
				{
					Sal.WaitCursor(true);
					Int.SqlImmedX("UPDATE z SET zerledigt = \'N\' WHERE zerledigt = \'Z\'");
				}
			}
			else if (this.strReportName == "BEZ") 
			{
				if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					Sal.WaitCursor(true);
					Int.SqlImmedX("UPDATE bez SET bezerldat = :frmMain.dtCurrentDate WHERE bezerldat = '1900-1-1'");
				}
				else
				{
					Sal.WaitCursor(true);
					Int.SqlImmedX("UPDATE bez SET bezerldat = NULL WHERE bezerldat = '1900-1-1'");
				}
			}
			else if (this.strReportName == "MBBEZ") 
			{
				if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					Sal.WaitCursor(true);
					Int.SqlImmedX("UPDATE pr SET prdruckdatum = :frmMain.dtCurrentDate WHERE prdruckdatum = '1900-1-1'");
				}
				else
				{
					Sal.WaitCursor(true);
					Int.SqlImmedX("UPDATE pr SET prdruckdatum = NULL WHERE prdruckdatum = '1900-1-1'");
				}
			}
			else if (this.strReportName == "BUB") 
			{
				if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					Sal.WaitCursor(true);
					Int.SqlImmedX("UPDATE bub SET buberldat = :frmMain.dtCurrentDate WHERE buberldat = '1900-1-1'");
				}
				else
				{
					Sal.WaitCursor(true);
					Int.SqlImmedX("UPDATE bub SET buberldat = NULL WHERE buberldat = '1900-1-1'");
				}
			}
			this.SetStatusBarText("");
			Sal.WaitCursor(false);
			this.hSqlDisk.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// pbSuchen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSuchen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSuchen_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbSuchen_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSuchen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// If Not SalIsWindowEnabled( frmMain.pbSuchen )
			// If SalDestroyWindow(frmRgSuchen)
			// Call SalDisableWindow( pbSuchen )
			// Call SalCreateWindow(frmRgSuchen,hWndForm, 0,0,0)
			App.frmRgSuchen.PalFuelle(0, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSuchen_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbSuchen, "Druckvorschau am Bildschirm");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbUeberw WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbUeberw_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbUeberw_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbUeberw_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.pbUeberw.DisableWindow();
			frmUeberwListe.CreateWindow(this);
			#endregion
		}
		
		/// <summary>
		/// pbFiBu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbFiBu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbFiBu_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbFiBu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.pbFiBu.DisableWindow();
			frmFiBu.CreateWindow(this);
			#endregion
		}
		
		/// <summary>
		/// pbDiskAbr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDiskAbr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDiskAbr_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDiskAbr_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.pbDiskAbr.DisableWindow();
			frmDiskAbr.CreateWindow(Sys.hWndNULL);
			#endregion
		}
		
		/// <summary>
		/// pbManAbr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbManAbr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbManAbr_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbManAbr_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.pbManAbr.DisableWindow();
			frmManAbr.CreateWindow(this);
			#endregion
		}
		
		/// <summary>
		/// pbRaZa WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRaZa_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRaZa_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRaZa_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.pbRaZa.IsEnabled()) 
			{
				this.pbRaZa.DisableWindow();
				frmRaZa.CreateWindow(this, 0, 0);
			}
			#endregion
		}
		
		/// <summary>
		/// pbMahn WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMahn_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbMahn_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMahn_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.pbMahn.DisableWindow();
			frmMahn.CreateWindow(this);
			#endregion
		}
		
		/// <summary>
		/// pbMB WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMB_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbMB_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMB_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.pbMB.DisableWindow();
			frmMBKalender.CreateWindow(this);
			#endregion
		}
		
		/// <summary>
		/// pbZettel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZettel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbZettel_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZettel_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalDisableWindow( pbZettel )         erledigt frmZettel selbst
			this.pbZettel.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Yellow);
			frmZettel.CreateWindow(this, "frmMain", 0, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// pbDrucke WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucke_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDrucke_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucke_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.pbDrucke.DisableWindow();
			dlgdivDruck.ModalDialog(this);
			#endregion
		}
		
		/// <summary>
		/// pbBriefe WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBriefe_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbBriefe_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBriefe_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.pbBriefe.DisableWindow();
			// 06.08.08
			if (Var.bfrmBrAktiErf) 
			{
				while (!(App.frmBrAktiErf.DestroyWindow())) 
				{
				}
			}

			frmBrAktiErf.CreateWindow(this, SalNumber.Null, SalNumber.Null, SalNumber.Null);
			#endregion
		}
		
		/// <summary>
		/// pbBriefeFrei WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBriefeFrei_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbBriefeFrei_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbBriefeFrei_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 06.08.08
			if (Var.bfrmBriefVari) 
			{
				while (!(App.frmBriefVari.DestroyWindow())) 
				{
				}
			}

			// 06.08.18 Ä1763 TRUE -> FALSE
			frmBriefVari.CreateWindow(this, SalNumber.Null, SalNumber.Null, SalNumber.Null, "", "", new SalDateTime(1900, 1, 1), "", "", "", "", "", false);
			#endregion
		}
		
		/// <summary>
		/// pbTagebuch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbTagebuch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbTagebuch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbTagebuch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.pbTagebuch.DisableWindow();
			frmTagebuch.CreateWindow(this, SalNumber.Null, SalNumber.Null);
			#endregion
		}
		
		/// <summary>
		/// pbEL WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEL_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEL_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEL_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmEL.CreateWindow(this, 0, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// pbNoviplan WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNoviplan_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNoviplan_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNoviplan_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.LoadApp(this.strNoviplan, "STD");
			#endregion
		}
		
		/// <summary>
		/// pbText WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbText_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbText_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbText_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmText.CreateWindow(this, 0, 0, 0, "");
			#endregion
		}
		
		/// <summary>
		/// dfPassword WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPassword_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfPassword_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPassword_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Set dfPassword = SalStrUpperX(dfPassword)
			#endregion
		}
		
		/// <summary>
		/// pbConnect WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbConnect_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbConnect_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbConnect_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Set SqlDatabase='TVN1'
			// Set nState = VisGetKeyState (VK_Control)
			// ¨ #
			// Call SalSetWindowText(hWndForm, 'moveta-Programm - Ordner: ' || strTVNPath)
			// Set nErr = VisGetKeyState (VK_Control)
			// If nErr & KS_Down
			// Set SqlDatabase='TVN2'
			// If IDNO = SalMessageBox('Wollen Sie sich wirklich an der Test-Datenbank anmelden?', '', MB_YesNo|MB_IconQuestion)
			// Set SqlDatabase='TVN1'
			// Else
			// Call SalSetWindowText(hWndForm, 'moveta-Programm - Ordner: ' || strTVNPath || ' TESTDATENBANK')
			// Else
			// Set SqlDatabase='TVN1'
			if (this.dfUser.IsEmpty() || this.dfPassword.IsEmpty()) 
			{
				Sal.MessageBox("Bitte Namen und Passwort eingeben", "Name und Passwort", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			}
			else
			{
				// If dfUser = 'DÜMMER'
				// Set dfUser = 'DUEMMER'
				// Set SqlUser='SYSADM'
				// Set SqlPassword='SYSADM'
				// Set SqlNoRecovery = FALSE
				// 20.01.14 Ä1005
				Var.bOK = Int.SqlConnection(ref Var.hSql);
				// Set bOK = SqlCreateSession(hSqlSession,'')
				// If not bOK
				// Call SalMessageBox( 'Session kann nicht erzeugt werden.', 'SqlImmedSel', MB_Ok )
				// Else
				// Set bOK=SqlCreateStatement (hSqlSession, hSql)
				// Call SqlSetIsolationLevel(hSql,'RO')
				// Call SqlDisconnect( hSql )
				// Call SqlFreeSession( hSqlSession )
				if (!(Var.bOK)) 
				{
					this.SetStatusBarText("Keine Verbindung zum Server !");
				}
				else
				{
					// Call SqlGetParameter(hSql,DBP_VERSION,bOK,dfVersion)
					Var.strBNUser = "";
					Int.SqlImmedSel(@"SELECT bncode, bnpw, bnabtlg, bnadmin, bntel, bnname, bnzei, bnemail, bnvertr
INTO :strBNUser, :strBNPW, :strBNAbtlg, :nBNAdmin, :strBNTel, :strBNName, :strBNZei, :strBNEMail, :strBNVertr
FROM bn WHERE bncode = :frmMain.dfUser AND bnpw = :frmMain.dfPassword");
					// Set strBNUser = 'YILMAZ'
					// Set strBNAbtlg = 'MA'
					if (Var.strBNUser == "") 
					{
						Sal.MessageBox("Name oder Paßwort ungültig!", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
					}
					else
					{
						this.SetStatusBarText("Verbindung zum Server hergestellt");
						// 18.04.05
						this.dtLogin = SalDateTime.Current;
						Int.PalLog("intern Login");

						this.pbConnect.DisableWindow();
						this.pbDisconnect.EnableWindow();
						this.pbSuchen.EnableWindow();
						this.pbDiskAbr.EnableWindow();
						this.pbManAbr.EnableWindow();
						this.pbFiBu.EnableWindow();
						this.pbRaZa.EnableWindow();
						this.pbMahn.EnableWindow();
						this.pbMB.EnableWindow();
						this.pbZettel.EnableWindow();
						this.pbEL.EnableWindow();
						this.pbUeberw.EnableWindow();
						this.pbStatistik.EnableWindow();
						this.pbTagebuch.EnableWindow();
						this.pbDrucke.EnableWindow();
						this.pbBriefe.EnableWindow();
						this.pbBriefeFrei.EnableWindow();
						this.strUser = ((SalString)this.dfUser.Text).Left(2);
						this.strStern = "*";
						// 28.01.99
						// 17.04.01
						this.nZettelAnzAlt = -1;
						// 29.11.05
						// Call SqlConnection(hSqlDisk)
						// Set strBNLeseberechtigung = ''
						// If SqlPrepareAndExecute(hSqlDisk, 'SELECT bncode INTO :strBNVertr FROM bn WHERE bnvertr = :strBNUser')
						// While SqlFetchNext(hSqlDisk, nFetch)
						// Set strBNLeseberechtigung = strBNLeseberechtigung || ',' || strBNVertr
						// Call SqlCommit( hSqlDisk )
						// Call SqlDisconnect(hSqlDisk)
						Int.PalCheckLeseberechtigung();
						if (Var.strBNLeseberechtigung != "") 
						{
							Sal.MessageBox(@"Folgende Mitarbeiter haben Ihnen
Leseberechtigung erteilt: " + Var.strBNLeseberechtigung.Mid(1, 255), "Info", Sys.MB_IconAsterisk);
						}
						// 29.11.05
						if (Var.strBNVertr != "") 
						{
							if (Sys.IDYES == Sal.MessageBox("Der Benutzer " + Var.strBNVertr + @" kann momentan Ihre Zettel lesen.

Soll dies jetzt aufgehoben werden?", "Wieder da?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
							{
								Int.SqlImmed("UPDATE bn SET bnvertr = NULL WHERE bncode = :strBNUser");
							}
						}

						this.PalCountZettel();
						// Call SalTimerSet ( frmMain, 1, 1800000 )
						// Call SqlImmedSel('SELECT max(zdatum) INTO :frmMain.dfZettelDat
						// FROM z WHERE zan IN (:frmMain.strUser, :frmMain.strStern)
						// AND zerledigt = \'N\'')
						// 27.06.13 entfernt
						// Call SalCreateWindow(frmGelesen, frmMain, strUser, FALSE)

						// 09.07.03 TAPI
						// Call SalCreateWindow( frmTAPIManager, hWndForm )
						// If dfUser != 'SC'
						// Call SalHideWindow( SalCreateWindow( frmTAPIManager, hWndForm ) )
						// Klicktel 24.02.05
						// Call SalHideWindow(SalCreateWindow( frmKlicktel, hWndForm ))
						// 23.08.06 mit H.Sasse besprechen
						if (Var.strBNAbtlg != "BH" && Var.nBNAdmin == 0) 
						{
							this.pbFiBu.DisableWindow();
						}
						// 26.08.10
						if (frmRgSuchen.CreateWindow(Sys.hWndNULL, 0, 0, 0) != null) 
						{
							this.HideWindow();
						}
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbDisconnect WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDisconnect_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDisconnect_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDisconnect_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalMainDisconnect();
			// Call SalHideWindow(pbTest)
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// pbStatistik WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbStatistik_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbStatistik_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbStatistik_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.pbStatistik.DisableWindow();
			frmInfoSasse.CreateWindow(this);
			#endregion
		}
		
		/// <summary>
		/// axLL WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void axLL_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.axLL_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void axLL_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 18.04.08 siehe E-Mail combit
			this.axLL.LlSetOptionString(Const.LL_OPTION_MAXRTFVERSION, "0x 401", ref Var.nDummySoll);
			// 15.04.19
			// Call axLL.LlSetOptionString( LL_OPTIONSTR_LICENSINGINFO, 'j4xoEQ', nDummySoll )
			this.axLL.LlSetOptionString(Const.LL_OPTIONSTR_LICENSINGINFO, "XtFyHQ", ref Var.nDummySoll);
			#endregion
		}
		#endregion
	}
}
