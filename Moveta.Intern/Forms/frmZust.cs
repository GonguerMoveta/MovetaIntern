// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmZust : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlIK = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalNumber nFetch = 0;
		public SalNumber nColor = 0;
		public SalNumber nRow = 0;
		public SalString strN = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmZust()
		{
			// Assign global reference.
			App.frmZust = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmZust CreateWindow(Control owner)
		{
			frmZust frm = new frmZust();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmZust FromHandle(SalWindowHandle handle)
		{
			return ((frmZust)SalWindow.FromHandle(handle, typeof(frmZust)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalSave()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.WaitCursor(true);
				// Call SqlConnection( hSqlLogBugUpd)
				tblZust.KillCellEdit();
				if (tblZust.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblZust.FindNextRow(ref nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblZust.SetFocusRow(nRow);

						Int.SqlIstDa("FROM zu WHERE zuabc = :frmZust.tblZust.colABC", ref Var.bExists);
						if (Var.bExists) 
						{
							Int.SqlImmed("DELETE FROM zu WHERE zuabc = :frmZust.tblZust.colABC");
							Var.bExists = false;
						}
						if (!(Var.bExists)) 
						{
							Int.SqlImmed(@"INSERT INTO zu
( zuabc, zuzei )
VALUES(:frmZust.tblZust.colABC, :frmZust.tblZust.colZei)");
						}
						tblZust.SetRowFlags(nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
				}
				Sal.WaitCursor(false);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalRefresh()
		{
			#region Local Variables
			SalNumber nRowPI = 0;
			SalNumber nRowErg = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				Sal.WaitCursor(true);
				PalSave();
				tblErg.ResetTable();
				tblZust.KillCellEdit();
				nRowPI = Sys.TBL_MinRow;
				while (true)
				{
					if (!(tblZust.FindNextRow(ref nRowPI, 0, 0))) 
					{
						break;
					}
					tblZust.SetFocusRow(nRowPI);

					nRowErg = Vis.TblFindString(tblErg, 0, tblErg.colZei, tblZust.colZei.Text);
					if (nRowErg == -1) 
					{
						nRowErg = tblErg.InsertRow(Sys.TBL_MaxRow);
						tblErg.SetFocusRow(nRowErg);
						tblErg.colZei.Text = tblZust.colZei.Text;
						tblErg.colalle.Number = tblZust.colalle.Number;
						tblErg.coloffen.Number = tblZust.coloffen.Number;
					}
					else
					{
						tblErg.SetFocusRow(nRowErg);
						tblErg.colalle.Number = tblErg.colalle.Number + tblZust.colalle.Number;
						tblErg.coloffen.Number = tblErg.coloffen.Number + tblZust.coloffen.Number;
					}
				}
				tblErg.KillCellEdit();

				Sal.WaitCursor(false);
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmZust WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmZust_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmZust_OnSAM_Create(sender, e);
					break;
                //FC:FINAL: use SAM_Close instead of SAM_Destroy
                case Sys.SAM_Close:
					this.frmZust_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmZust_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			Int.SqlConnection(ref this.hSqlIK);

			this.tblZust.colZei.AddListItem("");
			if (this.hSqlIK.PrepareAndExecute("SELECT bnzei INTO :frmZust.strN FROM bn WHERE bnabtlg = \'MA\'")) 
			{
				while (this.hSqlIK.FetchNext(ref this.nFetch)) 
				{
					this.tblZust.colZei.AddListItem(this.strN);
				}
				this.hSqlIK.Commit();
			}
			// 25.08.22
			this.rbAZ.Checked = true;

			if (this.rbAZ.Checked) 
			{
				if (this.tblZust.Populate(this.hSqlIK, @"SELECT zuabc, zuzei INTO :frmZust.tblZust.colABC, :frmZust.tblZust.colZei
FROM zu ORDER BY zuabc", Sys.TBL_FillAll)) 
				{
				}
			}
			else
			{
				if (this.tblZust.Populate(this.hSqlIK, @"SELECT zuabc, zuzei INTO :frmZust.tblZust.colABC, :frmZust.tblZust.colZei
FROM zu ORDER BY zuzei", Sys.TBL_FillAll)) 
				{
				}
			}
			this.PalRefresh();

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmZust_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlIK.Disconnect();
			this.PalSave();
			#endregion
		}
		
		/// <summary>
		/// tblZust WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblZust_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_FetchRowDone:
					this.tblZust_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblZust_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT sum(@isna(prerledigt)), count(*) INTO :frmZust.tblZust.coloffen, :frmZust.tblZust.colalle
FROM pr,a
WHERE prdatum>='2001-01-01' AND prarztnr=aarztnr and @UPPER(@LEFT(amatch,1)) = :frmZust.tblZust.colABC");
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// pbRefresh WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRefresh_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRefresh_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbRefresh_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRefresh_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalRefresh();
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRefresh_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbRefresh, "Liste aktualisieren");
			return;
			#endregion
		}
		
		/// <summary>
		/// rbAZ WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbAZ_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbAZ_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbAZ_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 25.08.22
			if (this.tblZust.Populate(this.hSqlIK, @"SELECT zuabc, zuzei INTO :frmZust.tblZust.colABC, :frmZust.tblZust.colZei
FROM zu ORDER BY zuabc", Sys.TBL_FillAll)) 
			{
			}
			this.PalRefresh();

			#endregion
		}
		
		/// <summary>
		/// rbZei WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbZei_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbZei_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbZei_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 25.08.22
			if (this.tblZust.Populate(this.hSqlIK, @"SELECT zuabc, zuzei INTO :frmZust.tblZust.colABC, :frmZust.tblZust.colZei
FROM zu ORDER BY zuzei", Sys.TBL_FillAll)) 
			{
			}
			this.PalRefresh();

			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.DestroyWindow();
			#endregion
		}
		#endregion
		
		#region tblZust
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblZustTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmZust _frmZust = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblZustTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmZust frmZust
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmZust == null) 
					{
						_frmZust = (frmZust)this.FindForm();
					}
					return _frmZust;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblZustTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblZustTableWindow)SalWindow.FromHandle(handle, typeof(tblZustTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colZei WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colZei_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colZei_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colZei_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmZust.tblErg.ResetTable();
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblErg
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblErgTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmZust _frmZust = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblErgTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmZust frmZust
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmZust == null) 
					{
						_frmZust = (frmZust)this.FindForm();
					}
					return _frmZust;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblErgTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblErgTableWindow)SalWindow.FromHandle(handle, typeof(tblErgTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
