// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="hWndRepForm"></param>
	/// <param name="strTemplate"></param>
	/// <param name="strVariables"></param>
	/// <param name="strInputs"></param>
	public partial class dlgDruckUtil : SalDialogBox
	{
		#region Window Parameters
		public SalWindowHandle hWndRepForm;
		public SalString strTemplate;
		public SalString strVariables;
		public SalString strInputs;
		#endregion
		
		#region Window Variables
		public SalNumber nColor = 0;
		public SalNumber nErr = 0;
		public SalNumber nOptions = 0;
		public SalString strDevice = "";
		public SalString strDriver = "";
		public SalString strPort = "";
		public SalString strOldDevice = "";
		public SalString strOldDriver = "";
		public SalString strOldPort = "";
		public SalFileHandle hFile = SalFileHandle.Null;
		public SalBoolean bOk = false;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public dlgDruckUtil(SalWindowHandle hWndRepForm, SalString strTemplate, SalString strVariables, SalString strInputs)
		{
			// Assign global reference.
			App.dlgDruckUtil = this;
			// Window Parameters initialization.
			this.hWndRepForm = hWndRepForm;
			this.strTemplate = strTemplate;
			this.strVariables = strVariables;
			this.strInputs = strInputs;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the modal dialog.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static SalNumber ModalDialog(Control owner, SalWindowHandle hWndRepForm, SalString strTemplate, SalString strVariables, SalString strInputs)
		{
			dlgDruckUtil dlg = new dlgDruckUtil(hWndRepForm, strTemplate, strVariables, strInputs);
			SalNumber ret = dlg.ShowDialog(owner);
			return ret;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static dlgDruckUtil FromHandle(SalWindowHandle handle)
		{
			return ((dlgDruckUtil)SalWindow.FromHandle(handle, typeof(dlgDruckUtil)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <param name="nCheckErr"></param>
		/// <returns></returns>
		public SalNumber PalCheckError(SalNumber nCheckErr)
		{
			#region Actions
			using (new SalContext(this))
			{
				if (nCheckErr == Sys.RPT_ErrPrtOpen) 
				{
					Sal.MessageBox(@"Der Drucker konnte
nicht angesprochen werden.

Überprüfen Sie bitte, ob das
Druckerkabel richtig angeschlossen ist
und ob der Drucker angeschlossen ist.", "RPT_ErrPrtOpen", Sys.MB_Ok);
				}
				if (nCheckErr == Sys.RPT_ErrBind) 
				{
					Sal.MessageBox(@"Es ist ein Fehler in der
Druckvorlage aufgetreten.", "RPT_ErrBind", Sys.MB_Ok);
				}
				if (nCheckErr == Sys.RPT_ErrCount) 
				{
					Sal.MessageBox(@"Es ist ein Fehler in der
Druckvorlage aufgetreten.", "RPT_ErrCount", Sys.MB_Ok);
				}
				if (nCheckErr == Sys.RPT_ErrFilenameLength) 
				{
					Sal.MessageBox(@"Es ist ein Fehler in der
Druckvorlage aufgetreten.", "RPT_ErrFilenameLength", Sys.MB_Ok);
				}
				if (nCheckErr == Sys.RPT_ErrFileOpen) 
				{
					Sal.MessageBox("Druckvorlage konnte nicht geöffnet werden.", "RPT_ErrFileOpen", Sys.MB_Ok);
				}
				if (nCheckErr == Sys.RPT_ErrInput) 
				{
					Sal.MessageBox(@"Es ist ein Fehler in der
Druckvorlage aufgetreten.", "RPT_ErrInput", Sys.MB_Ok);
				}
				if (nCheckErr == Sys.RPT_ErrLoadDLL) 
				{
					Sal.MessageBox(@"benötigte Programmteile (DLL's konnten
nicht geladen werden.", "RPT_ErrLoadDLL", Sys.MB_Ok);
				}
				if (nCheckErr == Sys.RPT_ErrMaxRpts) 
				{
					Sal.MessageBox(@"Es können nur max. 10 Berichte
gleichzeitig angezeigt werden.
Diese Zahl wurde überschritten.", "RPT_ErrMaxRpts", Sys.MB_Ok);
				}
				if (nCheckErr == Sys.RPT_ErrRptOpen) 
				{
					Sal.MessageBox(@"Die Druckvorlage konnte nicht
gefunden werden.", "RPT_ErrRptOpen", Sys.MB_Ok);
				}
				if (nCheckErr == Sys.RPT_ErrRptWindow) 
				{
					Sal.MessageBox(@"Das berichtsfenster konnte nicht
geöffnet werden.", "RPT_ErrRptWindow", Sys.MB_Ok);
				}
				if (nCheckErr == Sys.RPT_ErrType) 
				{
					Sal.MessageBox(@"Es ist ein Fehler in der
Druckvorlage aufgetreten.", "RPT_ErrType", Sys.MB_Ok);
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// dlgDruckUtil WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgDruckUtil_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.dlgDruckUtil_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.dlgDruckUtil_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgDruckUtil_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nColor = this.GetWindowColor(Sys.COLOR_IndexWindow);
			this.dfDrucker.SetWindowColor(Sys.COLOR_IndexWindow, this.nColor);
			this.SetText("Druck von : " + this.strTemplate);
			Sal.FileSetCurrentDirectory(Var.strTVNPath);
			if (Sal.PrtGetDefault(ref this.strDevice, ref this.strDriver, ref this.strPort)) 
			{
				this.dfDrucker.Text = this.strDevice + " an " + this.strPort;
				this.strOldDevice = this.strDevice;
				this.strOldDriver = this.strDriver;
				this.strOldPort = this.strPort;
			}
			this.dfExemplare.Number = 1;
			if (this.strTemplate == "RECHPROT.QRP") 
			{
				this.dfExemplare.Number = 2;
			}
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgDruckUtil_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.PrtSetDefault(this.strOldDevice, this.strOldDriver, this.strOldPort);
			#endregion
		}
		
		/// <summary>
		/// pbDrucken WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDrucken_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDrucken_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfVon.IsEmpty() && this.dfBis.IsEmpty()) 
			{
				this.nOptions = Sys.RPT_PrintAll;
			}
			else
			{
				this.nOptions = Sys.RPT_PrintRange;
			}
			this.nErr = 0;
			Sal.ReportPrint(this.hWndRepForm, this.strTemplate, this.strVariables, this.strInputs, this.dfExemplare.Number, this.nOptions, this.dfVon.Number, this.dfBis.Number, ref this.nErr).DestroyWindow();
			this.PalCheckError(this.nErr);
			this.EndDialog(0);
			this.hWndRepForm.BringWindowToTop();
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbDrucken, "Drucken auf o.g. Drucker");
			return;
			#endregion
		}
		
		/// <summary>
		/// dfExemplare WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfExemplare_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.dfExemplare_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfExemplare_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.dfExemplare, "wie oft soll der Ausdruck erfolgen ?");
			return;
			#endregion
		}
		
		/// <summary>
		/// dfVon WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfVon_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.dfVon_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfVon_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.dfVon, "Drucken von Seite");
			return;
			#endregion
		}
		
		/// <summary>
		/// dfBis WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBis_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.dfBis_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBis_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.dfBis, "Drucken bis Seite");
			return;
			#endregion
		}
		
		/// <summary>
		/// dfDatei WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDatei_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.dfDatei_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDatei_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.dfDatei, "gewünschter Pfad- und Dateiname");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbAnzeige WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAnzeige_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAnzeige_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbAnzeige_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAnzeige_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.bOK = frmReport.CreateWindow(Sys.hWndNULL, this.strTemplate) != null;
			Sal.ReportView(this.hWndRepForm, App.frmReport, this.strTemplate, this.strVariables, this.strInputs, ref this.nErr);
			this.EndDialog(0);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAnzeige_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbAnzeige, "Bericht wird angezeigt");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbDatei WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDatei_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDatei_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDatei_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDatei_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfVon.IsEmpty() && this.dfBis.IsEmpty()) 
			{
				this.nOptions = Sys.RPT_PrintAll;
			}
			else
			{
				this.nOptions = Sys.RPT_PrintRange;
			}
			this.dfDatei.Text = this.dfDatei.Text + ".RTF";
			this.bOk = this.hFile.Open(this.dfDatei.Text, (Sys.OF_Create | Sys.OF_Write));
			if (!(this.bOk)) 
			{
				if (this.dfDatei.Text == ".RTF") 
				{
					Sal.MessageBox("Bitte Dateinamen eintragen", "Dateifehler !!", (Sys.MB_Ok | Sys.MB_IconAsterisk));
				}
				else
				{
					Sal.MessageBox("Datei kann nicht erstellt werden !", "Dateifehler !!", (Sys.MB_Ok | Sys.MB_IconAsterisk));
				}
			}
			else
			{
				this.hFile.Open(this.dfDatei.Text, Sys.OF_Delete);
				Sal.ReportPrintToFile(this.hWndRepForm, this.strTemplate, this.dfDatei.Text, this.strVariables, this.strInputs, 1, this.nOptions, this.dfVon.Number, this.dfBis.Number, true, ref this.nErr);
			}
			this.BringWindowToTop();
			this.EndDialog(0);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDatei_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbDatei, "Bericht wird in Datei " + this.dfDatei.Text + " exportiert");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbSetup WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSetup_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.pbSetup_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Click:
					this.pbSetup_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSetup_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbSetup, "Drucker wählen / einrichten");
			return;
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSetup_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sal.PrtSetup(ref this.strDevice, ref this.strDriver, ref this.strPort, true)) 
			{
				this.dfDrucker.Text = this.strDevice + " an " + this.strPort;
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.DestroyWindow();
			#endregion
		}
		#endregion
	}
}
