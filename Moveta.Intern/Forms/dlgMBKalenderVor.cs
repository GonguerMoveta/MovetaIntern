// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class dlgMBKalenderVor : SalDialogBox
	{
		#region Window Variables
		public SalSqlHandle hSqlMBKalender = SalSqlHandle.Null;
		public SalSqlHandle hSqlMBKalenderZa = SalSqlHandle.Null;
		public SalNumber nFetch = 0;
		public SalNumber nFetchZa = 0;
		public SalString strSelect = "";
		public SalBoolean bOK = false;
		public SalNumber nProzNr = 0;
		public SalNumber nHalterNr = 0;
		public SalString strAZ = "";
		public SalString strGerName = "";
		public SalString strGerPLZ = "";
		public SalNumber nHF = 0;
		public SalNumber nHF1 = 0;
		public SalNumber nHF2 = 0;
		public SalNumber nHF3 = 0;
		public SalNumber nHF4 = 0;
		public SalNumber nHF5 = 0;
		public SalNumber nHF6 = 0;
		public SalNumber nProzHF = 0;
		public SalNumber nMahn = 0;
		public SalNumber nMahn1 = 0;
		public SalNumber nA1 = 0;
		public SalNumber nA2 = 0;
		public SalNumber nA3 = 0;
		public SalNumber nA4 = 0;
		public SalNumber nA5 = 0;
		public SalNumber nA6 = 0;
		public SalNumber nR1 = 0;
		public SalNumber nR2 = 0;
		public SalNumber nR3 = 0;
		public SalNumber nR4 = 0;
		public SalNumber nR5 = 0;
		public SalNumber nR6 = 0;
		public SalNumber nMBDM = 0;
		public SalDateTime dtMBZust = SalDateTime.Null;
		public SalNumber nVBDM = 0;
		public SalDateTime dtVBZust = SalDateTime.Null;
		public SalNumber nDMFrueh = 0;
		public SalNumber nVADM = 0;
		public SalNumber nZinsHF = 0;
		public SalNumber nZinsMB = 0;
		public SalString strHN1 = "";
		public SalString strHN2 = "";
		public SalString strHS = "";
		public SalString strHO = "";
		public SalNumber nTage = 0;
		public SalDateTime dtZaBuchDat = SalDateTime.Null;
		public SalDateTime dtZaGrundDat = SalDateTime.Null;
		public SalNumber nZaDM = 0;
		public SalNumber nZinsBer = 0;
		public SalNumber nMGausbuchen = 0;
		public SalNumber nKleinbetrag = 0;
		public SalNumber nDMHF = 0;
		public SalNumber nDMMahn = 0;
		public SalNumber nLfdZins = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public dlgMBKalenderVor()
		{
			// Assign global reference.
			App.dlgMBKalenderVor = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the modal dialog.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static SalNumber ModalDialog(Control owner)
		{
			dlgMBKalenderVor dlg = new dlgMBKalenderVor();
			SalNumber ret = dlg.ShowDialog(owner);
			return ret;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static dlgMBKalenderVor FromHandle(SalWindowHandle handle)
		{
			return ((dlgMBKalenderVor)SalWindow.FromHandle(handle, typeof(dlgMBKalenderVor)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// dlgMBKalenderVor WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgMBKalenderVor_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.dlgMBKalenderVor_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgMBKalenderVor_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfMBKalenderDat.DateTime = SalDateTime.Current;
			this.cbVA.Checked = true;
			#endregion
		}
		
		/// <summary>
		/// dfMBKalenderDat WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMBKalenderDat_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfMBKalenderDat_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMBKalenderDat_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfMBKalenderDat.DateTime < (SalDateTime.Current - 1)) 
			{
				if (Sal.MessageBox(@"Das eingegebene Datum liegt in der Vergangenheit.

Dadurch würden Zinsen falsch berechnet. Vorgang wird abgebrochen.", "Achtung", (Sys.MB_IconExclamation | Sys.MB_Ok))) 
				{
					this.dfMBKalenderDat.DateTime = SalDateTime.Current;
					e.Return = false;
					return;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// cbVB WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbVB_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbVB_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbVB_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.cbVB.Checked) 
			{
				this.cbVA.Checked = false;
			}
			else
			{
				this.cbVA.Checked = true;
			}
			#endregion
		}
		
		/// <summary>
		/// cbVA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbVA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbVA_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbVA_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.cbVA.Checked) 
			{
				this.cbVB.Checked = false;
			}
			else
			{
				this.cbVB.Checked = true;
			}
			#endregion
		}
		
		/// <summary>
		/// pkOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pkOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pkOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pkOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Set strBNZei = 'SE'
			if (this.dfMBKalenderDat.IsEmpty()) 
			{
				this.dfMBKalenderDat.DateTime = SalDateTime.Current;
			}
			if (this.dfMBKalenderDat.DateTime > SalDateTime.Current) 
			{
				if (Sys.IDNO == Sal.MessageBox(@"Das gewählte MBKalenderdatum
liegt in der Zukunft !

Trotzdem OK ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					this.EndDialog(0);
				}
			}
			Sal.WaitCursor(true);
			// 20.03.19 Ä1773 +  AND (prerledigt IS NULL or prerledigt=1)
			if (this.cbVB.Checked) 
			{
				this.SetStatusBarText("Alter MBKalendervorschlag wird gelöscht");
				Int.SqlImmedX("DELETE FROM mbk WHERE mbktyp=\'VB\' AND mbkuser = :strBNUser  ");
				this.SetStatusBarText("Neuer Vorschlag wird erstellt -  Bitte warten ...");
				// 08.07.20 F4630 prerledigt=1 -> prerledigt=0
				this.strSelect = @"select prnr, prarztnr, prhalternr, praz
INTO :dlgMBKalenderVor.nProzNr, :dlgMBKalenderVor.nA1, :dlgMBKalenderVor.nHalterNr, :dlgMBKalenderVor.strAZ
from pr
WHERE prterminvb <= :dlgMBKalenderVor.dfMBKalenderDat AND (prerledigt IS NULL or prerledigt=0)
ORDER BY prnr";
				this.bOK = Int.SqlConnection(ref this.hSqlMBKalender);
				this.bOK = Int.SqlHandleExec(this.hSqlMBKalender, this.strSelect, "Erstellen Vorschlag", ref Var.nErr) == Sys.IDOK;
				Sal.WaitCursor(true);
				if (this.bOK) 
				{
					this.nFetch = this.hSqlMBKalender.FetchNext();
					while (this.nFetch != Sys.FETCH_EOF) 
					{
						// 14.04.05
						// Set strBNZei = 'SE'
						// 20.07.15 != -> =
						if (Int.PalZust(this.nA1) == Var.strBNZei) 
						{
							this.SetStatusBarText("PR-Nr.: " + this.nProzNr.ToString(0));
							// If nProzNr = 47098
							// Call SalMessageBeep( 0 )
							// 07.01.2000 lt. Fr. Kollay darf auch kein MG und KB mehr offen sein, da ja auch noch die MB-Kosten dazu kommen
							// bezahlt ?
							// Call SqlImmedSel('SELECT amgausbuchen, akleinbetrag
							// INTO :dlgMBKalenderVor.nMGausbuchen, :dlgMBKalenderVor.nKleinbetrag
							// FROM a WHERE aarztnr = :dlgMBKalenderVor.nA1  ')
							// 20.12.99, vorher
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn) INTO :dlgMBKalenderVor.nHF
							// FROM rk WHERE (rkarztnr=:dlgMBKalenderVor.nA1 AND rkrechnr=:dlgMBKalenderVor.nR1)
							// AND  (rkarztnr=:dlgMBKalenderVor.nA1 AND rkrechnr=:dlgMBKalenderVor.nR1)
							// AND (rkarztnr=:dlgMBKalenderVor.nA1 AND rkrechnr=:dlgMBKalenderVor.nR1)
							// AND (rkarztnr=:dlgMBKalenderVor.nA1 AND rkrechnr=:dlgMBKalenderVor.nR1)
							// AND (rkarztnr=:dlgMBKalenderVor.nA1 AND rkrechnr=:dlgMBKalenderVor.nR1)
							// AND (rkarztnr=:dlgMBKalenderVor.nA1 AND rkrechnr=:dlgMBKalenderVor.nR1) ')
							// If nMGausbuchen = 1
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn) INTO :dlgMBKalenderVor.nHF1
							// FROM rk WHERE rkarztnr=:dlgMBKalenderVor.nA1 AND rkrechnr=:dlgMBKalenderVor.nR1')
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn) INTO :dlgMBKalenderVor.nHF2
							// FROM rk WHERE rkarztnr=:dlgMBKalenderVor.nA2 AND rkrechnr=:dlgMBKalenderVor.nR2')
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn) INTO :dlgMBKalenderVor.nHF3
							// FROM rk WHERE rkarztnr=:dlgMBKalenderVor.nA3 AND rkrechnr=:dlgMBKalenderVor.nR3')
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn) INTO :dlgMBKalenderVor.nHF4
							// FROM rk WHERE rkarztnr=:dlgMBKalenderVor.nA4 AND rkrechnr=:dlgMBKalenderVor.nR4')
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn) INTO :dlgMBKalenderVor.nHF5
							// FROM rk WHERE rkarztnr=:dlgMBKalenderVor.nA5 AND rkrechnr=:dlgMBKalenderVor.nR5')
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn) INTO :dlgMBKalenderVor.nHF6
							// FROM rk WHERE rkarztnr=:dlgMBKalenderVor.nA6 AND rkrechnr=:dlgMBKalenderVor.nR6')
							// Set nHF = nHF1 + nHF2 + nHF3 + nHF4 + nHF5 + nHF6
							// Else
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn) INTO :dlgMBKalenderVor.nHF1
							// FROM rk WHERE rkarztnr=:dlgMBKalenderVor.nA1 AND rkrechnr=:dlgMBKalenderVor.nR1')
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn) INTO :dlgMBKalenderVor.nHF2
							// FROM rk WHERE rkarztnr=:dlgMBKalenderVor.nA2 AND rkrechnr=:dlgMBKalenderVor.nR2')
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn) INTO :dlgMBKalenderVor.nHF3
							// FROM rk WHERE rkarztnr=:dlgMBKalenderVor.nA3 AND rkrechnr=:dlgMBKalenderVor.nR3')
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn) INTO :dlgMBKalenderVor.nHF4
							// FROM rk WHERE rkarztnr=:dlgMBKalenderVor.nA4 AND rkrechnr=:dlgMBKalenderVor.nR4')
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn) INTO :dlgMBKalenderVor.nHF5
							// FROM rk WHERE rkarztnr=:dlgMBKalenderVor.nA5 AND rkrechnr=:dlgMBKalenderVor.nR5')
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn) INTO :dlgMBKalenderVor.nHF6
							// FROM rk WHERE rkarztnr=:dlgMBKalenderVor.nA6 AND rkrechnr=:dlgMBKalenderVor.nR6')
							// Set nHF = nHF1 + nHF2 + nHF3 + nHF4 + nHF5 + nHF6
							// 02.04.19 F4480 auskommentiert
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn) INTO :dlgMBKalenderVor.nHF
							// FROM prd, rk WHERE prdnr = :dlgMBKalenderVor.nProzNr AND prdarztnr=rkarztnr AND prdhalternr=rkhalternr AND prdrechnr=rkrechnr AND rkdeaktiv IS NULL')

							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn) INTO :dlgMBKalenderVor.nHF1
							// FROM rk WHERE rkarztnr=:dlgMBKalenderVor.nA1 AND rkrechnr=:dlgMBKalenderVor.nR1')
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn) INTO :dlgMBKalenderVor.nHF2
							// FROM rk WHERE rkarztnr=:dlgMBKalenderVor.nA2 AND rkrechnr=:dlgMBKalenderVor.nR2')
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn) INTO :dlgMBKalenderVor.nHF3
							// FROM rk WHERE rkarztnr=:dlgMBKalenderVor.nA3 AND rkrechnr=:dlgMBKalenderVor.nR3')
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn) INTO :dlgMBKalenderVor.nHF4
							// FROM rk WHERE rkarztnr=:dlgMBKalenderVor.nA4 AND rkrechnr=:dlgMBKalenderVor.nR4')
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn) INTO :dlgMBKalenderVor.nHF5
							// FROM rk WHERE rkarztnr=:dlgMBKalenderVor.nA5 AND rkrechnr=:dlgMBKalenderVor.nR5')
							// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn) INTO :dlgMBKalenderVor.nHF6
							// FROM rk WHERE rkarztnr=:dlgMBKalenderVor.nA6 AND rkrechnr=:dlgMBKalenderVor.nR6')
							// Set nHF = nHF1 + nHF2 + nHF3 + nHF4 + nHF5 + nHF6
							// 09.08.18 Ä1662
							this.nLfdZins = 0;
							if (Int.PalFA(this.nProzNr, this.nA1, this.nHalterNr, "", 0, SalDateTime.Current, true, false, true)) 
							{
								// 02.04.19 F4480
								// Call SqlImmedSel('SELECT sum(fazinsdm) FROM fa INTO :dlgMBKalenderVor.nLfdZins WHERE faproznr=:dlgMBKalenderVor.nProzNr AND fauser = :strBNUser')
								// 05.04.19 + @NULLVALUE(,0)
								Int.SqlImmedSel(@"SELECT sum( @NULLVALUE(fadmhf, 0) + @NULLVALUE(fadmko, 0) + @NULLVALUE(faunvzdm, 0) + @NULLVALUE(fazinsdm, 0) + @NULLVALUE(faunvzdmtit, 0))
FROM fa
INTO :dlgMBKalenderVor.nLfdZins
WHERE faproznr=:dlgMBKalenderVor.nProzNr AND fauser = :strBNUser");
							}
							// 02.04.19 F4480
							// Set nHF = nHF + nLfdZins
							this.nHF = this.nLfdZins;

							if (this.nHF <= 0)  // 07.01.2000  vorher  < nKleinbetrag
							{
								Int.PalLog("MB-K Vorschlag: PR" + Int.PalStrNum(this.nProzNr, 5, 0) + " bez.");
							}
							else
							{
								// Proz HF
								Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hstr, hort
INTO :dlgMBKalenderVor.strHN1, :dlgMBKalenderVor.strHN2,
:dlgMBKalenderVor.strHS, :dlgMBKalenderVor.strHO
FROM h
WHERE harztnr = :dlgMBKalenderVor.nA1 AND hhalternr = :dlgMBKalenderVor.nHalterNr AND hdeaktiv IS NULL");
								// MB
								Int.SqlImmedSel(@"SELECT akzust
INTO :dlgMBKalenderVor.dtMBZust
FROM ak WHERE akproznr = :dlgMBKalenderVor.nProzNr
AND aktyp='MB' AND aktypdetail = 'MB' AND akdeaktiv IS NULL ");

								// 16.07.18 Ä1662 + mbkdmvb
								// 07.07.20 Ä1892
								Int.SqlImmedSel("SELECT badm1+badm3 INTO :dlgMBKalenderVor.nVBDM FROM ba WHERE banr=2");
								if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
								{
									this.nVBDM = this.nVBDM * 116m / 119;
									App.frmMain.strErloeskonto = "80101";
								}
								// 07.07.20 7.34 -> :dlgMBKalenderVor.nVBDM
								Int.SqlImmedX(@"INSERT INTO MBK
(mbkproznr, mbktyp, mbkzustmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkuser, mbkaz, mbkdmvb)
VALUES( :dlgMBKalenderVor.nProzNr, 'VB', :dlgMBKalenderVor.dtMBZust,
:dlgMBKalenderVor.strHN1, :dlgMBKalenderVor.strHN2, :dlgMBKalenderVor.strHS, :dlgMBKalenderVor.strHO, :strBNUser, :dlgMBKalenderVor.strAZ, :dlgMBKalenderVor.nVBDM)");
								Int.PalLog("MB-Kalender-Vorschlag: PR" + Int.PalStrNum(this.nProzNr, 5, 0));
							}
						}

						this.nFetch = this.hSqlMBKalender.FetchNext();
					}
				}
				this.hSqlMBKalender.Commit();
			}
			if (this.cbVA.Checked) 
			{
				this.SetStatusBarText("Alter MBKalendervorschlag wird gelöscht");
				this.nMahn = 0;
				Int.SqlImmedX("DELETE FROM mbk WHERE mbktyp=\'VA\'  AND mbkuser = :strBNUser ");
				this.SetStatusBarText("Neuer Vorschlag wird erstellt -  Bitte warten ...");
				// 25.03.19 Ä1838 + AND (prerledigt IS NULL or prerledigt=1)
				this.strSelect = @"select prnr, prgername, praz, prarztnr, prhalternr,
prdma + prdmc, prdmb, prdmhf, prprozhf, prdmmahn
INTO :dlgMBKalenderVor.nProzNr, :dlgMBKalenderVor.strGerName, :dlgMBKalenderVor.strAZ, :dlgMBKalenderVor.nA1, :dlgMBKalenderVor.nHalterNr,
:dlgMBKalenderVor.nMahn, :dlgMBKalenderVor.nMBDM, :dlgMBKalenderVor.nDMHF, :dlgMBKalenderVor.nProzHF, :dlgMBKalenderVor.nDMMahn
from pr
WHERE prterminva <= :dlgMBKalenderVor.dfMBKalenderDat AND (prerledigt IS NULL or prerledigt=0)
ORDER BY prnr";
				this.bOK = Int.SqlConnection(ref this.hSqlMBKalender);
				this.bOK = Int.SqlHandleExec(this.hSqlMBKalender, this.strSelect, "Erstellen Vorschlag", ref Var.nErr) == Sys.IDOK;
				Sal.WaitCursor(true);
				if (this.bOK) 
				{
					this.nFetch = this.hSqlMBKalender.FetchNext();
					while (this.nFetch != Sys.FETCH_EOF) 
					{
						// 14.04.05
						if (Int.PalZust(this.nA1) == Var.strBNZei) 
						{
							this.bOK = Int.SqlConnection(ref this.hSqlMBKalenderZa);
							this.SetStatusBarText("PR-Nr.: " + this.nProzNr.ToString(0));
							if (this.nDMHF == SalNumber.Null) 
							{
								this.nDMHF = 0;
							}
							// 10.01.03
							if (this.nDMMahn == SalNumber.Null) 
							{
								this.nDMMahn = 0;
							}
							this.bOK = Int.SqlHandleExec(this.hSqlMBKalenderZa, @"SELECT  prdarztnr, prdrechnr INTO  :dlgMBKalenderVor.nA1, :dlgMBKalenderVor.nR1
FROM prd
WHERE prdnr = :dlgMBKalenderVor.nProzNr", "Zahlungen holen", ref Var.nErr) == Sys.IDOK;
							this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
							this.nHF = 0;
							while (this.nFetchZa != Sys.FETCH_EOF) 
							{
								Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn), sum(rkdmmahn)
INTO :dlgMBKalenderVor.nHF1, :dlgMBKalenderVor.nMahn1
FROM rk
WHERE rkarztnr = :dlgMBKalenderVor.nA1 AND rkrechnr = :dlgMBKalenderVor.nR1 AND rkdeaktiv IS NULL");
								// 05.10.99
								if (this.nDMHF == 0)  // MB vor 05.10.99 gemacht
								{
									Int.SqlImmed(@"UPDATE za SET zaproznr = :dlgMBKalenderVor.nProzNr
WHERE zaarztnr = :dlgMBKalenderVor.nA1 AND zarechnr = :dlgMBKalenderVor.nR1");
									this.nHF = this.nHF + this.nHF1;
								}
								// If nDMMahn = 0
								// Set nMahn = nMahn + nMahn1
								// Else
								// Set nMahn = nDMMahn
								if (this.nDMMahn == 0) 
								{
									this.nMahn = this.nMahn + this.nMahn1;
								}
								else if (this.nDMMahn != -1) 
								{
									this.nMahn = this.nMahn + this.nDMMahn;
									this.nDMMahn = -1;
								}
								this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
							}
							// 05.10.99
							if (this.nDMHF == 0) 
							{
								this.nDMHF = this.nHF;
							}
							// Proz HF
							Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hstr, hort
INTO :dlgMBKalenderVor.strHN1, :dlgMBKalenderVor.strHN2,
:dlgMBKalenderVor.strHS, :dlgMBKalenderVor.strHO
FROM h
WHERE harztnr = :dlgMBKalenderVor.nA1 AND hhalternr = :dlgMBKalenderVor.nHalterNr AND hdeaktiv IS NULL");
							// GerName, wenn leer
							if (this.strGerName == "") 
							{
								this.strGerPLZ = this.strHO.Left(this.strHO.Scan(" "));
								Int.SqlImmedSel(@"SELECT gebez INTO :dlgMBKalenderVor.strGerName
FROM ge WHERE gelg=0 AND geplz = :dlgMBKalenderVor.strGerPLZ ");
							}
							// MB
							// #27: @ABS(akdm) >= 18
							if (this.nMBDM == 0) 
							{
								Int.SqlImmedSel(@"SELECT sum(akdm)
INTO :dlgMBKalenderVor.nMBDM
FROM ak WHERE akproznr = :dlgMBKalenderVor.nProzNr AND @ABS(akdm) >= 18
AND aktyp='MB' AND (aktypdetail = 'MB' or aktypdetail = 'MB-AG') AND akdeaktiv IS NULL");
							}
							Int.SqlImmedSel(@"SELECT akzust
INTO :dlgMBKalenderVor.dtMBZust
FROM ak WHERE akproznr = :dlgMBKalenderVor.nProzNr
AND aktyp='MB' AND (aktypdetail = 'MB' or aktypdetail = 'MB-AG') AND akdeaktiv IS NULL");
							// VB
							Int.SqlImmedSel(@"SELECT akdm, akzust
INTO :dlgMBKalenderVor.nVBDM, :dlgMBKalenderVor.dtVBZust
FROM ak WHERE akproznr = :dlgMBKalenderVor.nProzNr
AND aktyp='MB' AND aktypdetail = 'VB' AND akdeaktiv IS NULL ");
							// Frühere Vollstreckungsmaßnahmen
							Int.SqlImmedSel(@"SELECT sum(akdm)
INTO :dlgMBKalenderVor.nDMFrueh
FROM ak WHERE akproznr = :dlgMBKalenderVor.nProzNr
AND aktyp='MB' AND aktypdetail <> 'MB' AND aktypdetail <> 'MB-AG' AND aktypdetail <> 'VB' AND akdeaktiv IS NULL ");
							// VA-Kosten
							Int.SqlImmedSel(@"SELECT (badm1+badm2+badm3)
INTO :dlgMBKalenderVor.nVADM
FROM ba
WHERE babuart = 'VA' ");
							if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
							{
								this.nVADM = this.nVADM * 116m / 119;
							}
							// Zinsberechnung
							this.dtZaBuchDat = SalDateTime.Null;
							this.dtZaGrundDat = this.dtVBZust;
							this.nZinsBer = this.nDMFrueh + this.nMBDM + this.nVBDM;
							this.nZinsMB = 0;
							this.bOK = Int.SqlHandleExec(this.hSqlMBKalenderZa, @"SELECT  zabuchdat, zadm INTO  :dlgMBKalenderVor.dtZaBuchDat, :dlgMBKalenderVor.nZaDM
FROM za
WHERE zaproznr = :dlgMBKalenderVor.nProzNr AND zarechnr >= 999990 AND zadeaktiv IS NULL
ORDER BY zabuchdat", "Zahlungen holen", ref Var.nErr) == Sys.IDOK;
							this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
							while (this.nFetchZa != Sys.FETCH_EOF) 
							{
								this.nTage = this.dtZaBuchDat - this.dtZaGrundDat;
								this.nZinsMB = this.nZinsMB + (this.nZinsBer * (this.nTage / 360) * 4).Round() / 100;
								this.dtZaGrundDat = this.dtZaBuchDat;
								this.nZinsBer = this.nZinsBer - this.nZaDM;
								this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
							}
							this.nTage = this.dfMBKalenderDat.DateTime - this.dtZaGrundDat;
							this.nZinsMB = this.nZinsMB + (this.nZinsBer * (this.nTage / 360) * 4).Round() / 100;
							// nur Tageszins
							// Set nZinsMB = nZinsMB + SalNumberRound(nZinsBer / 360 * 4)  /100
							// nur Tageszins
							// Set nZinsHF = nZinsHF + SalNumberRound(nZinsBer / 360 * nProzHF)  /100

							// 04.06.99
							// bereits bezahlt ?
							Int.SqlImmedSel(@"SELECT  sum(zadm) INTO :dlgMBKalenderVor.nZaDM
FROM za
WHERE zaproznr = :dlgMBKalenderVor.nProzNr AND zadeaktiv IS NULL");
							// 05.10.99
							// 0 --> 11.6, da lt. Fr. Seil + Kollay nur für MB-Kosten kein VA gemacht wird.
							// Es fällt keiner durch, da Wiedervorlage lt. o.g. Damen
							if ((this.nDMHF + this.nMahn + this.nMBDM + this.nVBDM + this.nDMFrueh - this.nZaDM) > 5.931m) 
							{
								// 22.03.02
								if (this.nProzHF == 0 || this.nProzHF == SalNumber.Null) 
								{
									Var.ndlgDM = SalNumber.Null;
									if (1 == dlgDM.ModalDialog(this, "Bitte geben Sie für PR" + Int.PalStrNum(this.nProzNr, 6, 0) + "(" + this.strHN1.Trim() + ") den Zinssatz für die HF ein  (%) :", ref this.nProzHF)) 
									{
									}
									while (Var.ndlgDM == SalNumber.Null) 
									{
									}
									Int.SqlImmed("UPDATE pr SET prprozhf =  :dlgMBKalenderVor.nProzHF WHERE prnr =  :dlgMBKalenderVor.nProzNr");
								}

								this.dtZaBuchDat = SalDateTime.Null;
								this.dtZaGrundDat = this.dtMBZust;
								this.nZinsBer = this.nDMHF;
								this.nZinsHF = 0;
								this.bOK = Int.SqlHandleExec(this.hSqlMBKalenderZa, @"SELECT  zabuchdat, zadm INTO  :dlgMBKalenderVor.dtZaBuchDat, :dlgMBKalenderVor.nZaDM
FROM za
WHERE zaproznr = :dlgMBKalenderVor.nProzNr AND zarechnr < 999990 AND zadeaktiv IS NULL
ORDER BY zabuchdat", "Zahlungen holen", ref Var.nErr) == Sys.IDOK;
								this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
								while (this.nFetchZa != Sys.FETCH_EOF) 
								{
									this.nTage = this.dtZaBuchDat - this.dtZaGrundDat;
									this.nZinsHF = this.nZinsHF + (this.nZinsBer * (this.nTage / 360) * this.nProzHF).Round() / 100;
									this.dtZaGrundDat = this.dtZaBuchDat;
									this.nZinsBer = this.nZinsBer - this.nZaDM;
									this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
								}
								this.nTage = this.dfMBKalenderDat.DateTime - this.dtZaGrundDat;
								this.nZinsHF = this.nZinsHF + (this.nZinsBer * (this.nTage / 360) * this.nProzHF).Round() / 100;
								// 14.04.05
								Int.PalLog("MBKVorsch ZinsHF " + Int.PalDateToStrJJJJMMTT(this.dfMBKalenderDat.DateTime) + "-" + Int.PalDateToStrJJJJMMTT(this.dtZaGrundDat) + "=€" + Int.PalStrNum(this.nZinsHF, 5, 2));

								Int.SqlImmedX(@"INSERT INTO MBK
(mbkproznr, mbkgername, mbkzustmb, mbkzustvb, mbkaz, mbkdmhf, mbkprozhf, mbkdmmahn, mbkdmmb, mbkdmvb,
mbkprozmbvb, mbkdmva, mbktyp, mbkdmfrueh, mbkzinshf, mbkzinsmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkuser)
VALUES( :dlgMBKalenderVor.nProzNr, :dlgMBKalenderVor.strGerName, :dlgMBKalenderVor.dtMBZust,
:dlgMBKalenderVor.dtVBZust, :dlgMBKalenderVor.strAZ, :dlgMBKalenderVor.nDMHF, :dlgMBKalenderVor.nProzHF,
:dlgMBKalenderVor.nMahn, :dlgMBKalenderVor.nMBDM, :dlgMBKalenderVor.nVBDM,
4, :dlgMBKalenderVor.nVADM, 'VA', :dlgMBKalenderVor.nDMFrueh,
:dlgMBKalenderVor.nZinsHF, :dlgMBKalenderVor.nZinsMB,
:dlgMBKalenderVor.strHN1, :dlgMBKalenderVor.strHN2, :dlgMBKalenderVor.strHS, :dlgMBKalenderVor.strHO, :strBNUser)");
							}
							this.hSqlMBKalenderZa.Disconnect();

						}

						this.nFetch = this.hSqlMBKalender.FetchNext();
					}
				}
				this.hSqlMBKalender.Commit();
			}
			Sal.WaitCursor(false);
			this.SetStatusBarText(" ");
			this.hSqlMBKalender.Disconnect();
			this.EndDialog(0);
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.DestroyWindow();
			#endregion
		}
		#endregion
	}
}
