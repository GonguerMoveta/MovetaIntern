// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmGewinnErm : SalFormWindow
	{
		#region Window Variables
		public SalWindowHandle hWndCol = SalWindowHandle.Null;
		public SalString strSelect = "";
		public SalNumber nRgAnz = 0;
		public SalNumber nRgUms = 0;
		public SalNumber nRgGeb = 0;
		public SalNumber nMgAnz = 0;
		public SalNumber nMgUms = 0;
		public SalNumber nMgGeb = 0;
		public SalNumber nMgMB = 0;
		public SalNumber nMgVA = 0;
		public SalNumber nMgVB = 0;
		public SalNumber nMgEWA = 0;
		public SalNumber nMgIns = 0;
		public SalNumber nMgBr = 0;
		public SalNumber nMgAnz1 = 0;
		public SalNumber nSumRgE = 0;
		public SalNumber nSumRgA = 0;
		public SalNumber nSumMgE = 0;
		public SalNumber nSumMgA = 0;
		public SalNumber nPPorto = 0;
		public SalNumber nPPapRg = 0;
		public SalNumber nPPapA4 = 0;
		public SalNumber nPPapUm = 0;
		public SalNumber nPRgPers = 0;
		public SalNumber nPRgGem = 0;
		public SalNumber nPRgAll = 0;
		public SalNumber nPMgPers = 0;
		public SalNumber nPMgGem = 0;
		public SalNumber nPMgAll = 0;
		public SalNumber nPMgMB = 0;
		public SalNumber nPMgVA = 0;
		public SalNumber nPMgVB = 0;
		public SalNumber nPMgEWA = 0;
		public SalNumber nPMgIns = 0;
		public SalArray<SalNumber> nArray = new SalArray<SalNumber>(5);
		public MTblPrintParams PrintParams = new MTblPrintParams();
		public SalString strDevice = "";
		public SalNumber nResult = 0;
		public SalNumber nAnz = 0;
		public SalNumber nOff = 0;
		public SalArray<SalString> strPrinters = new SalArray<SalString>();
		public MTblPrintLine PrintHeader = new MTblPrintLine();
		public MTblPrintLinePosText PrintHeaderText = new MTblPrintLinePosText();
		public SalString strHeader = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmGewinnErm()
		{
			// Assign global reference.
			App.frmGewinnErm = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmGewinnErm CreateWindow(Control owner)
		{
			frmGewinnErm frm = new frmGewinnErm();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmGewinnErm FromHandle(SalWindowHandle handle)
		{
			return ((frmGewinnErm)SalWindow.FromHandle(handle, typeof(frmGewinnErm)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <param name="strEA"></param>
		/// <param name="strAbt"></param>
		/// <param name="strTyp"></param>
		/// <param name="strBez"></param>
		/// <param name="nAnz"></param>
		/// <param name="nEPr"></param>
		/// <param name="nGPr"></param>
		/// <returns></returns>
		public SalNumber PalMakeRow(SalString strEA, SalString strAbt, SalString strTyp, SalString strBez, SalNumber nAnz, SalNumber nEPr, SalNumber nGPr)
		{
			#region Local Variables
			SalNumber nabwEPr = 0;
			SalNumber nRow = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				nRow = tblGE.InsertRow(Sys.TBL_MaxRow);
				tblGE.colEA.Text = strEA;
				tblGE.colAbt.Text = strAbt;
				tblGE.colTyp.Text = strTyp;
				tblGE.colBez.Text = strBez;
				tblGE.colAnz.Number = nAnz;
				tblGE.colEPr.Number = nEPr;
				tblGE.colGPr.Number = nGPr;
				nabwEPr = Int.PalGetProfileInt("GewinnErmittlung", strEA + "|" + strAbt + "|" + strTyp, -1);
				if (-1 != nabwEPr) 
				{
					tblGE.colEPr.Number = nabwEPr;
					tblGE.colGPr.Number = nabwEPr * nAnz;
					MT.MTbl.SetCellFont(tblGE.colEPr, nRow, MT.MTbl.MTBL_FONT_UNDEF_NAME, MT.MTbl.MTBL_FONT_UNDEF_SIZE, Sys.FONT_EnhBold, MT.MTbl.MTSF_REDRAW);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalRechne()
		{
			#region Local Variables
			SalNumber nRRow = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				nSumRgE = 0;
				nSumRgA = 0;
				nSumMgE = 0;
				nSumMgA = 0;

				Sal.WaitCursor(true);
				tblGE.KillCellEdit();
				if (tblGE.AnyRows(0, 0)) 
				{
					nRRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblGE.FindNextRow(ref nRRow, 0, 0))) 
						{
							break;
						}
						tblGE.SetFocusRow(nRRow);

						if (tblGE.colTyp.Text != "Summe") 
						{
							if (tblGE.colEA.Text == "E") 
							{
								if (tblGE.colAbt.Text == "RG") 
								{
									nSumRgE = nSumRgE + tblGE.colGPr.Number;
								}
								if (tblGE.colAbt.Text == "MG") 
								{
									nSumMgE = nSumMgE + tblGE.colGPr.Number;
								}
							}
							else if (tblGE.colEA.Text == "A") 
							{
								if (tblGE.colAbt.Text == "RG") 
								{
									nSumRgA = nSumRgA + tblGE.colGPr.Number;
								}
								if (tblGE.colAbt.Text == "MG") 
								{
									nSumMgA = nSumMgA + tblGE.colGPr.Number;
								}
							}
						}

						tblGE.SetRowFlags(nRRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
				}

				tblGE.KillCellEdit();
				if (tblGE.AnyRows(0, 0)) 
				{
					nRRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblGE.FindNextRow(ref nRRow, 0, 0))) 
						{
							break;
						}
						tblGE.SetFocusRow(nRRow);

						if (tblGE.colTyp.Text == "Summe") 
						{
							if (tblGE.colEA.Text == "E") 
							{
								if (tblGE.colAbt.Text == "RG") 
								{
									tblGE.colGPr.Number = nSumRgE;
								}
								if (tblGE.colAbt.Text == "MG") 
								{
									tblGE.colGPr.Number = nSumMgE;
								}
							}
							else if (tblGE.colEA.Text == "A") 
							{
								if (tblGE.colAbt.Text == "RG") 
								{
									tblGE.colGPr.Number = nSumRgA;
								}
								if (tblGE.colAbt.Text == "MG") 
								{
									tblGE.colGPr.Number = nSumMgA;
								}
							}
							else if (tblGE.colEA.Text == "")  // Ergebnis
							{
								if (tblGE.colAbt.Text == "RG") 
								{
									tblGE.colGPr.Number = nSumRgE - nSumRgA;
								}
								if (tblGE.colAbt.Text == "MG") 
								{
									tblGE.colGPr.Number = nSumMgE - nSumMgA;
								}
								if (tblGE.colAbt.Text == "") 
								{
									tblGE.colGPr.Number = nSumMgE - nSumMgA + nSumRgE - nSumRgA;
								}
							}
							tblGE.colAnz.Number = 1;
							tblGE.colEPr.Number = tblGE.colGPr.Number;
						}

						tblGE.SetRowFlags(nRRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
				}

				Sal.WaitCursor(false);
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmGewinnErm WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmGewinnErm_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmGewinnErm_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmGewinnErm_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmGewinnErm_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nPPorto = Sal.GetProfileInt("GewinnErm", "Porto", 56, "TVN.INI") / 100;
			this.nPPapRg = Sal.GetProfileInt("GewinnErm", "PapRg", 4, "TVN.INI") / 100;
			this.nPPapA4 = Sal.GetProfileInt("GewinnErm", "PapA4", 1, "TVN.INI") / 100;
			this.nPPapUm = Sal.GetProfileInt("GewinnErm", "PapUm", 3, "TVN.INI") / 100;
			this.nPRgPers = Sal.GetProfileInt("GewinnErm", "RgPers", 156, "TVN.INI") / 100;
			this.nPRgGem = Sal.GetProfileInt("GewinnErm", "RgGem", 196, "TVN.INI") / 100;
			this.nPRgAll = Sal.GetProfileInt("GewinnErm", "RgAll", 188, "TVN.INI") / 100;
			this.nPMgPers = Sal.GetProfileInt("GewinnErm", "MgPers", 282, "TVN.INI") / 100;
			this.nPMgGem = Sal.GetProfileInt("GewinnErm", "MgGem", 160, "TVN.INI") / 100;
			this.nPMgAll = Sal.GetProfileInt("GewinnErm", "MgAll", 153, "TVN.INI") / 100;
			this.nPMgMB = Sal.GetProfileInt("GewinnErm", "MgMB", 1500, "TVN.INI") / 100;
			this.nPMgVA = Sal.GetProfileInt("GewinnErm", "MgVA", 500, "TVN.INI") / 100;
			this.nPMgVB = Sal.GetProfileInt("GewinnErm", "MgVB", 500, "TVN.INI") / 100;
			this.nPMgEWA = Sal.GetProfileInt("GewinnErm", "MgEWA", 500, "TVN.INI") / 100;
			this.nPMgIns = Sal.GetProfileInt("GewinnErm", "MgIns", 1000, "TVN.INI") / 100;
			// 01.09.15 Ä1239
			this.dfVon.Value = SalDateTime.Current.YearBegin();
			this.dfBis.Value = SalDateTime.Current;
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmGewinnErm_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.SetProfileString("GewinnErm", "Porto", (this.nPPorto * 100).ToString(0), "TVN.INI");
			Sal.SetProfileString("GewinnErm", "PapRg", (this.nPPapRg * 100).ToString(0), "TVN.INI");
			Sal.SetProfileString("GewinnErm", "PapA4", (this.nPPapA4 * 100).ToString(0), "TVN.INI");
			Sal.SetProfileString("GewinnErm", "PapUm", (this.nPPapUm * 100).ToString(0), "TVN.INI");
			Sal.SetProfileString("GewinnErm", "RgPers", (this.nPRgPers * 100).ToString(0), "TVN.INI");
			Sal.SetProfileString("GewinnErm", "RgGem", (this.nPRgGem * 100).ToString(0), "TVN.INI");
			Sal.SetProfileString("GewinnErm", "RgAll", (this.nPRgAll * 100).ToString(0), "TVN.INI");
			Sal.SetProfileString("GewinnErm", "MgPers", (this.nPMgPers * 100).ToString(0), "TVN.INI");
			Sal.SetProfileString("GewinnErm", "MgGem", (this.nPMgGem * 100).ToString(0), "TVN.INI");
			Sal.SetProfileString("GewinnErm", "MgAll", (this.nPMgAll * 100).ToString(0), "TVN.INI");
			Sal.SetProfileString("GewinnErm", "MgMB", (this.nPMgMB * 100).ToString(0), "TVN.INI");
			Sal.SetProfileString("GewinnErm", "MgVA", (this.nPMgVA * 100).ToString(0), "TVN.INI");
			Sal.SetProfileString("GewinnErm", "MgVB", (this.nPMgVB * 100).ToString(0), "TVN.INI");
			Sal.SetProfileString("GewinnErm", "MgEWA", (this.nPMgEWA * 100).ToString(0), "TVN.INI");
			Sal.SetProfileString("GewinnErm", "MgIns", (this.nPMgIns * 100).ToString(0), "TVN.INI");
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT aname1, aname2, anr2
into :frmGewinnErm.dfArztName, :frmGewinnErm.dfArztName2, :frmGewinnErm.dfArztNrA
from A where aarztnr=:frmGewinnErm.dfArztNr");
			if (this.dfArztNrA.Number == 0 || this.dfArztNrA.Number == Sys.NUMBER_Null) 
			{
				this.dfArztNrA.Number = this.dfArztNr.Number;
			}
			this.tblGE.ResetTable();
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblGE.ResetTable();
			if (Sal.IsNull(this.dfVon)) 
			{
				this.dfVon.Value = SalDateTime.Current.YearBegin();
			}
			if (Sal.IsNull(this.dfBis)) 
			{
				this.dfBis.Value = SalDateTime.Current;
			}

			if (this.dfArztNr.IsEmpty()) 
			{
				this.strSelect = "WHERE akdatum BETWEEN :frmGewinnErm.dfVon.Value AND :frmGewinnErm.dfBis.Value ";
			}
			else
			{
				this.strSelect = @"WHERE akarztnr IN (:frmGewinnErm.dfArztNr, :frmGewinnErm.dfArztNrA )
AND akdatum BETWEEN :frmGewinnErm.dfVon.Value AND :frmGewinnErm.dfBis.Value ";
			}
			Int.SqlImmedSel(@"SELECT sum(akanzahl), sum(akrechsumm), sum(akdm)
INTO :frmGewinnErm.nRgAnz, :frmGewinnErm.nRgUms, :frmGewinnErm.nRgGeb
FROM ak  " + this.strSelect + @"
AND aktyp = 'RG' AND aktypdetail LIKE 'UebOP%' AND akdeaktiv IS NULL  ");

			this.PalMakeRow(" ", "", "", "RECHNUNGSABTEILUNG", SalNumber.Null, SalNumber.Null, SalNumber.Null);
			this.PalMakeRow("E", "", "", "Erträge", SalNumber.Null, SalNumber.Null, SalNumber.Null);
			if (this.nRgAnz != 0 && this.nRgAnz != SalNumber.Null) 
			{
				this.PalMakeRow("E", "RG", "Rechg", Int.PalStrNum(this.nRgUms, 8, 2) + " € Umsatz", this.nRgAnz, this.nRgGeb / this.nRgAnz, this.nRgGeb);
			}
			this.PalMakeRow("E", "RG", "Porto", "Porto", this.nRgAnz, this.nPPorto, this.nRgAnz * this.nPPorto);
			this.PalMakeRow("E", "RG", "Sond", "Sondertätigkeiten (z.B. Jakobs)", 0, 0, 0);
			this.PalMakeRow("E", "RG", "AbgBl", "Abgabebelege", 0, 0, 0);
			this.PalMakeRow("E", "RG", "AbgBl", "Impferinnerungen", 0, 0, 0);
			this.PalMakeRow("E", "RG", "ZiVor", "Zinsabschlag-Vorschuß", 0, 0, 0);
			this.PalMakeRow("E", "RG", "Summe", "Erträge Rechnungsabtlg.", 0, 0, 0);
			this.PalMakeRow("", "", "", "", SalNumber.Null, SalNumber.Null, SalNumber.Null);
			this.PalMakeRow("A", "", "", "Aufwendungen", SalNumber.Null, SalNumber.Null, SalNumber.Null);
			this.PalMakeRow("A", "RG", "Compu", "Computer gestellt / AfA 4 Jahre", 0, 380, 0);
			this.PalMakeRow("A", "RG", "Porto", "Porto", this.nRgAnz, this.nPPorto, this.nRgAnz * this.nPPorto);
			this.PalMakeRow("A", "RG", "RgPap", "Rechnungspapier", this.nRgAnz, this.nPPapRg, this.nRgAnz * this.nPPapRg);
			this.PalMakeRow("A", "RG", "RgUm", "Umschläge", this.nRgAnz, this.nPPapUm, this.nRgAnz * this.nPPapUm);
			this.PalMakeRow("A", "RG", "RgJou", "Rechnungsjournal", this.nRgAnz / 2.81m, this.nPPapA4, this.nRgAnz * this.nPPapA4 / 2.81m);
			this.PalMakeRow("A", "RG", "Pers", "Personalkosten", this.nRgAnz, this.nPRgPers, this.nRgAnz * this.nPRgPers);
			this.PalMakeRow("A", "RG", "Gem", "Personal-Allgemeinkosten", this.nRgAnz, this.nPRgGem, this.nRgAnz * this.nPRgGem);
			this.PalMakeRow("A", "RG", "Allg", "Allgemeinkosten", this.nRgAnz, this.nPRgAll, this.nRgAnz * this.nPRgAll);
			this.PalMakeRow("A", "RG", "Summe", "Aufwendungen Rechnungsabtlg.", 0, 0, 0);
			this.PalMakeRow("", "RG", "Summe", "ERGEBNIS Rechnungsabtlg.", 0, 0, 0);
			this.PalMakeRow("", "", "", "", SalNumber.Null, SalNumber.Null, SalNumber.Null);

			Int.SqlImmedSel(@"SELECT sum(akanzahl), sum(akrechsumm), sum(akdm)
INTO :frmGewinnErm.nMgAnz, :frmGewinnErm.nMgUms, :frmGewinnErm.nMgGeb
FROM ak " + this.strSelect + @"
AND aktyp = 'MG' AND akdeaktiv IS NULL   ");
			Int.SqlImmedSel(@"SELECT count(*)
INTO :frmGewinnErm.nMgMB
FROM ak " + this.strSelect + @"
AND aktyp = 'MB'  AND aktypdetail = 'MB' AND akdeaktiv IS NULL  ");
			Int.SqlImmedSel(@"SELECT count(*)
INTO :frmGewinnErm.nMgVA
FROM ak " + this.strSelect + @"
AND aktyp = 'MB'  AND aktypdetail = 'VA' AND akdeaktiv IS NULL ");
			Int.SqlImmedSel(@"SELECT count(*)
INTO :frmGewinnErm.nMgVB
FROM ak " + this.strSelect + @"
AND aktyp = 'MB'  AND aktypdetail = 'VB' AND akdeaktiv IS NULL ");
			Int.SqlImmedSel(@"SELECT count(*)
INTO :frmGewinnErm.nMgEWA
FROM ak " + this.strSelect + @"
AND aktyp = 'MB'  AND aktypdetail = 'EWA' AND akdeaktiv IS NULL ");
			Int.SqlImmedSel(@"SELECT count(*)
INTO :frmGewinnErm.nMgBr
FROM ak " + this.strSelect + @"
AND aktyp = 'BR' AND akdeaktiv IS NULL  ");
			this.nMgIns = 0;
			this.nMgAnz1 = this.nMgAnz + this.nMgMB + this.nMgVA + this.nMgVB + this.nMgEWA + this.nMgIns + this.nMgBr;

			this.PalMakeRow(" ", "", "", "MAHNABTEILUNG", SalNumber.Null, SalNumber.Null, SalNumber.Null);
			this.PalMakeRow("E", "", "", "Erträge", SalNumber.Null, SalNumber.Null, SalNumber.Null);
			if (this.nMgAnz != 0 && this.nMgAnz != SalNumber.Null) 
			{
				this.PalMakeRow("E", "MG", "Mahng", "Mahnungen", this.nMgAnz, this.nMgGeb / this.nMgAnz, this.nMgGeb);
			}
			this.PalMakeRow("E", "MG", "MB", "Mahnbescheide", this.nMgMB, this.nPMgMB, this.nMgMB * this.nPMgMB);
			this.PalMakeRow("E", "MG", "VA", "Vollstreckungsaufträge", this.nMgVA, this.nPMgVA, this.nMgVA * this.nPMgVA);
			this.PalMakeRow("E", "MG", "VB", "Vollstreckungsbescheide", this.nMgVB, this.nPMgVB, this.nMgVB * this.nPMgVB);
			this.PalMakeRow("E", "MG", "EWA", "Einwohnermeldeamtsanfragen", this.nMgEWA, this.nPMgEWA, this.nMgEWA * this.nPMgEWA);
			this.PalMakeRow("E", "MG", "IPR", "Insolvenzprüfungen", SalNumber.Null, SalNumber.Null, SalNumber.Null);
			this.PalMakeRow("E", "MG", "BR", "Formbriefe", SalNumber.Null, SalNumber.Null, SalNumber.Null);
			this.PalMakeRow("E", "MG", "Summe", "Erträge Mahnabtlg.", 0, 0, 0);
			this.PalMakeRow("", "", "", "", SalNumber.Null, SalNumber.Null, SalNumber.Null);
			this.PalMakeRow("A", "", "", "Aufwendungen", SalNumber.Null, SalNumber.Null, SalNumber.Null);
			this.PalMakeRow("A", "MG", "Porto", "Porto", this.nMgAnz1, this.nPPorto, this.nMgAnz1 * this.nPPorto);
			this.PalMakeRow("A", "MG", "MgPap", "Mahnungspapier", this.nMgAnz, this.nPPapRg, this.nMgAnz * this.nPPapRg);
			this.PalMakeRow("A", "MG", "MgUm", "Umschläge", this.nMgAnz + this.nMgBr, this.nPPapUm, (this.nMgAnz + this.nMgBr) * this.nPPapUm);
			this.PalMakeRow("A", "MG", "MgPer", "Personalkosten", this.nMgAnz, this.nPMgPers, this.nMgAnz * this.nPMgPers);
			this.PalMakeRow("A", "MG", "MgGes", "Gesamtkosten", this.nMgAnz, this.nPMgGem, this.nMgAnz * this.nPMgGem);
			this.PalMakeRow("A", "MG", "Allg", "Allgemeinkosten", this.nMgAnz, this.nPMgAll, this.nMgAnz * this.nPMgAll);
			this.PalMakeRow("A", "MG", "Summe", "Aufwendungen Mahnabtlg.", 0, 0, 0);
			this.PalMakeRow("", "MG", "Summe", "ERGEBNIS Mahnabtlg.", 0, 0, 0);
			this.PalMakeRow("", "", "", "", SalNumber.Null, SalNumber.Null, SalNumber.Null);
			this.PalMakeRow("", "", "Summe", "GESAMTERGEBNIS", 0, 0, 0);

			this.PalRechne();
			#endregion
		}
		
		/// <summary>
		/// pbLeer WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLeer_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLeer_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLeer_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblGE.QueryFocusCell(ref Var.nRow, ref this.hWndCol);
			this.tblGE.InsertRow(Var.nRow + 1);
			#endregion
		}
		
		/// <summary>
		/// tblGE WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblGE_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblGE_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblGE_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 25.06.13
			// Call MTblSubClass( hWndItem )
			// Call MTblSetAltRowBackColors( hWndItem, FALSE, COLOR_White, 0xFFFFA8 )
			// Call MTblSetAltRowBackColors( hWndItem, FALSE, COLOR_White, 0xFFFFD8 )
			// Call MTblSetFlags( hWndItem, MTBL_FLAG_COLOR_ENTIRE_ROW, TRUE )
			// Call MTblSetFlags( hWndItem, MTBL_FLAG_VARIABLE_ROW_HEIGHT, TRUE )
			// Call MTblSetFlags( hWndItem, MTBL_FLAG_NO_FREE_COL_AREA_LINES, TRUE )
			// Call MTblSetFlags( hWndItem, MTBL_FLAG_NO_FREE_ROW_AREA_LINES, TRUE )
			// Call MTblSetFlags( hWndItem, MTBL_FLAG_NO_COLUMN_HEADER, TRUE )
			// Call MTblDefineRowLines( hWndItem, MTLS_DOT, COLOR_Gray )
			Int.PalPrepareMTbl(this.tblGE, 0xffffd8);

			#endregion
		}
		
		/// <summary>
		/// pbDrucken WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// On SAM_Click
				
				// Set nErr = 1
				
				// Set strReportName = 'TAGEBUCH'
				
				// Set hWndReport = SalReportTableView(tblTagebuch,hWndNULL,'TAGEBUCH.QRP',nErr)
				
				case Sys.SAM_Create:
					this.pbDrucken_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Click:
					this.pbDrucken_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nAnz = MT.MTbl.PrintGetPrinterNames(this.strPrinters);
			this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			this.nOff = -1;
			this.nResult = 0;
			while (this.nResult < this.nAnz) 
			{
				this.lbPrinters.AddListItem(this.strPrinters[this.nResult]);
				if (this.strPrinters[this.nResult] == this.strDevice) 
				{
					this.nOff = this.nResult;
				}
				this.nResult = this.nResult + 1;
			}
			if (this.nOff >= 0) 
			{
				this.lbPrinters.SetListSelectedIndex(this.nOff);
			}

			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PrintParams.Init();
			// 01.09.15 Ä1239
			this.strHeader = "Gewinnermittlung " + this.dfArztNr.Number.ToString(0);
			if (this.dfArztNrA.Number != Sys.NUMBER_Null && this.dfArztNrA.Number != 0 && this.dfArztNrA.Number != this.dfArztNr.Number) 
			{
				this.strHeader = this.strHeader + "/" + this.dfArztNrA.Number.ToString(0);
			}
			this.strHeader = this.strHeader + " " + Int.PalDateToStrDE(this.dfVon.Value) + " bis " + Int.PalDateToStrDE(this.dfBis.Value);
			this.PrintHeaderText.Init();
			this.PrintHeader.CenterText = this.strHeader;
			this.PrintParams.AddPageHeader(this.PrintHeader);
			this.PrintHeaderText.Init();
			this.strHeader = this.dfArztName.Text;
			if (this.dfArztNrA.Number != Sys.NUMBER_Null && this.dfArztNrA.Number != 0 && this.dfArztNrA.Number != this.dfArztNr.Number) 
			{
				this.strHeader = this.strHeader + "/" + this.dfArztName2.Text;
			}
			this.PrintHeader.CenterText = this.strHeader;
			this.PrintParams.AddPageHeader(this.PrintHeader);
			this.PrintHeaderText.Init();
			this.PrintHeader.CenterText = " ";
			this.PrintParams.AddPageHeader(this.PrintHeader);
			// !
			this.PrintParams.DocName = "Gewinnermittlung";
			this.PrintParams.Orientation = MT.MTbl.MTP_OR_PORTRAIT;
			// Set strDevice = MTblPrintGetDefPrinterName(  )
			this.nResult = this.lbPrinters.GetListSelectedIndex();
			if (this.nResult == Sys.LB_Err) 
			{
				this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			}
			else
			{
				this.strDevice = this.lbPrinters.GetListItemText(this.nResult);
			}
			this.PrintParams.PrinterName = this.strDevice;
			// 07.11.13 F1760
			this.PrintParams.Language = MT.MTbl.MTP_LNG_GERMAN;
			this.PrintParams.GridType = MT.MTbl.MTP_GT_STANDARD4;

			MT.MTbl.Print(this.tblGE, this.PrintParams);
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblGE
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblGETableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmGewinnErm _frmGewinnErm = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblGETableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmGewinnErm frmGewinnErm
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmGewinnErm == null) 
					{
						_frmGewinnErm = (frmGewinnErm)this.FindForm();
					}
					return _frmGewinnErm;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblGETableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblGETableWindow)SalWindow.FromHandle(handle, typeof(tblGETableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colAnz WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colAnz_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colAnz_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colAnz_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.colGPr.Number = this.colAnz.Number * this.colEPr.Number;
				this.frmGewinnErm.PalRechne();
				#endregion
			}
			
			/// <summary>
			/// colEPr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colEPr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colEPr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colEPr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.colGPr.Number = this.colAnz.Number * this.colEPr.Number;
				if (this.colTyp.Text != "ZiVor" && this.colTyp.Text != "Compu") 
				{
					Int.PalSetProfileString("GewinnErmittlung", this.colEA.Text + "|" + this.colAbt.Text + "|" + this.colTyp.Text, this.colEPr.Number.ToString(2));
				}
				this.frmGewinnErm.PalRechne();
				#endregion
			}
			#endregion
		}
		#endregion
	}
}
