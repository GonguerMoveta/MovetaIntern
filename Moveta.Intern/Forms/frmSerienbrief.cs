// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmSerienbrief : SalFormWindow
	{
		#region Window Variables
		public SalString strAuswahl = "";
		public SalString strPPfad = "";
		public SalString strDateiName = "";
		public SalString strDateiPfad = "";
		public SalFileHandle hDisk = SalFileHandle.Null;
		public SalString mlText = "";
		public SalNumber nBytes = 0;
		public SalString strPLayout = "";
		public SalNumber nColor = 0;
		public SalString strDateiNameAnlage = "";
		public SalString strDateiPfadAnlage = "";
		public SalArray<SalString> strArExtensions = new SalArray<SalString>(10);
		public SalNumber nIndex = 0;
		public SalBoolean bPOk = false;
		public SalSqlHandle hSqlCSV = SalSqlHandle.Null;
		public SalNumber nFetchCSV = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmSerienbrief()
		{
			// Assign global reference.
			App.frmSerienbrief = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmSerienbrief CreateWindow(Control owner)
		{
			frmSerienbrief frm = new frmSerienbrief();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmSerienbrief FromHandle(SalWindowHandle handle)
		{
			return ((frmSerienbrief)SalWindow.FromHandle(handle, typeof(frmSerienbrief)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalDateiWahl()
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(4);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strArExtensions[0] = "Texte - *.rtf";
				strArExtensions[1] = "*.rtf";
				strArExtensions[2] = "alle Dateien - *.*";
				strArExtensions[3] = "*.*";
				xOK = Sal.DlgOpenFile(this, "Texte", strArExtensions, 4, ref nIndex, ref strDateiName, ref strDateiPfad);
				if (xOK) 
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalDateiWahlAnlage()
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(4);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strArExtensions[0] = "Adobe PDF - *.pdf";
				strArExtensions[1] = "*.pdf";
				xOK = Sal.DlgOpenFile(this, "Adobe-Dokumente", strArExtensions, 2, ref nIndex, ref strDateiNameAnlage, ref strDateiPfadAnlage);
				if (xOK) 
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalDateiSpeich()
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(4);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strArExtensions[0] = "Texte - *.rtf";
				strArExtensions[1] = "*.rtf";
				strArExtensions[2] = "alle Dateien - *.*";
				strArExtensions[3] = "*.*";
				xOK = Sal.DlgSaveFile(this, "SELECT-Statements", strArExtensions, 4, ref nIndex, ref strDateiName, ref strDateiPfad);
				if (xOK) 
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalDateiCSV()
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(4);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strArExtensions[0] = "CSV-Datei - *.csv";
				strArExtensions[1] = "*.csv";
				strArExtensions[2] = "alle Dateien - *.*";
				strArExtensions[3] = "*.*";
				xOK = Sal.DlgSaveFile(this, "CSV-Datei", strArExtensions, 4, ref nIndex, ref strDateiName, ref strDateiPfad);
				if (xOK) 
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmSerienbrief WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmSerienbrief_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmSerienbrief_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmSerienbrief_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmSerienbrief_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfVon.Number = 1;
			this.dfBis.Number = 9999;
			Sal.MapEnterToTab(false);
			// 20.01.14 Ä1005
			// Set bOK = SqlCreateSession(hSqlSession,'')
			// Set bOK=SqlCreateStatement (hSqlSession, hSql)
			// Call SqlSetIsolationLevel(hSql,'RO')
			Int.SqlConnection(ref Var.hSql);

			this.cmbLC.PopulateList(Var.hSql, "SELECT lccode || \' \' || lcname FROM lc order by lccode");
			// 20.01.14 Ä1005
			Var.hSql.Disconnect();
			// Call SqlFreeSession( hSqlSession )
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmSerienbrief_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.MapEnterToTab(true);
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.strAuswahl = "";
			if (this.rbPegasus.Checked) 
			{
				this.strAuswahl = " aitbrief = 1 AND ";
				// 09.02.16
				if (this.cbPegVer.Checked) 
				{
					this.strAuswahl = this.strAuswahl + " aarztnr in (SELECT dbarztnr FROM db, pn WHERE dbguid=pnguid AND pnprogver BETWEEN :frmSerienbrief.dfPegVerVon AND  :frmSerienbrief.dfPegVerBis ) AND ";
				}
				// 17.01.19
				if (this.cbPegVerAusser.Checked) 
				{
					this.strAuswahl = this.strAuswahl + " aarztnr NOT IN ( " + this.mlPegAusser.Text + ") AND ";
				}
			}
			else if (this.rbPegasus4.Checked) 
			{
				this.strAuswahl = " aitbrief = 2 AND ";
			}
			else if (this.rbBeta.Checked) 
			{
				this.strAuswahl = " aarztnr In (591, 513, 692, 668, 671, 646, 1144, 591, 676) AND ";
			}
			else if (this.rbAK.Checked) 
			{
				this.strAuswahl = " aarztnr In (676, 646, 671, 668, 692, 1144, 1183) AND ";
			}
			else if (this.rbSa.Checked) 
			{
				this.strAuswahl = " arundschreiben = 1 AND ";
			}
			else if (this.rbEinzel.Checked) 
			{
				this.strAuswahl = " aarztnr IN ( " + this.mlEinzel.Text + ") AND ";
			}
			else if (this.rbSQL.Checked) 
			{
				this.strAuswahl = " " + this.mlSQL.Text + " AND ";
			}

			if (this.cbEintritt.Checked) 
			{
				this.strAuswahl = " aeintr >= :frmSerienbrief.dfEintritt AND ";
			}
			if (this.cbPLZ.Checked) 
			{
				this.strAuswahl = " aort >= \'" + this.dfPLZvon.Text + "\' AND aort <= \'" + this.dfPLZbis.Text + "ßßß\' AND ";
			}
			if (this.cbLand.Checked) 
			{
				this.strAuswahl = " aland =  \'" + ((SalString)this.cmbLC.Text).Left(2) + "\' AND ";
			}

			if (this.cbnurL.Checked) 
			{
				this.strAuswahl = this.strAuswahl + " akzpraxart < 2 AND ";
			}
			if (this.cbAktive.Checked) 
			{
				this.strAuswahl = this.strAuswahl + " aaktiv = 1 AND ";
			}
			this.strAuswahl = this.strAuswahl + " aarztnr BETWEEN :frmSerienbrief.dfVon AND :frmSerienbrief.dfBis AND ";
			// 11.12.17 Ä
			if (this.cbEti.Checked) 
			{
				this.strPLayout = "Mitglieder.lbl";
			}
			else
			{
				this.strPLayout = "Serienbrief.crd";
			}

			if (this.cbSV.Checked) 
			{
				dlgLlDruck.ModalDialog(App.frmMain, this.strPLayout, "1");
			}
			else
			{
				dlgLlDruck.ModalDialog(App.frmMain, this.strPLayout, "0");
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeu_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.axRTF.PropSetText("");
			#endregion
		}
		
		/// <summary>
		/// pbOeffne WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOeffne_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOeffne_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOeffne_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.PalDateiWahl()) 
			{
				this.hDisk.Open(this.strDateiPfad, Sys.OF_Read);
				this.mlText = this.hDisk.Read(32000000);
				this.hDisk.Close();
				this.axRTF.PropSetText(this.mlText);
			}
			#endregion
		}
		
		/// <summary>
		/// pbSpeich WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSpeich_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSpeich_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSpeich_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.PalDateiSpeich()) 
			{
				if (this.hDisk.Open(this.strDateiPfad, Sys.OF_Create)) 
				{
					this.hDisk.Close();
					if (this.hDisk.Open(this.strDateiPfad, Sys.OF_Write)) 
					{
						this.axRTF.PropGetText(ref this.mlText);
						this.nBytes = this.hDisk.Write(this.mlText, 32000000);
						if (this.nBytes >= 0) 
						{
							this.hDisk.Close();
						}
					}
					else
					{
						Sal.MessageBox("Die Datei " + this.strDateiPfad + " kann nicht geöffnet werden !", "Fehler", Sys.MB_Ok);
					}
				}
				else
				{
					Sal.MessageBox("Die Datei " + this.strDateiPfad + " kann nicht erstellt werden !", "Fehler", Sys.MB_Ok);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbPDF WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPDF_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbPDF_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPDF_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.strArExtensions[0] = "PDF-Dateien - *.pdf";
			this.strArExtensions[1] = "*.pdf";
			this.bPOk = Sal.DlgOpenFile(this, "Abrechnung einlesen", this.strArExtensions, 2, ref this.nIndex, ref this.strDateiNameAnlage, ref this.strDateiPfadAnlage);
			this.bkgdPDF.Text = this.strDateiPfadAnlage;
			#endregion
		}
		
		/// <summary>
		/// cbPegVer WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbPegVer_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbPegVer_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbPegVer_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfPegVerVon.Text == "") 
			{
				this.dfPegVerVon.Text = "3.08";
			}
			if (this.dfPegVerBis.Text == "") 
			{
				this.dfPegVerBis.Text = "3.99";
			}
			#endregion
		}
		
		/// <summary>
		/// cbPegVerAusser WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbPegVerAusser_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbPegVerAusser_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbPegVerAusser_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfPegVerVon.Text == "") 
			{
				this.dfPegVerVon.Text = "3.08";
			}
			if (this.dfPegVerBis.Text == "") 
			{
				this.dfPegVerBis.Text = "3.99";
			}
			#endregion
		}
		
		/// <summary>
		/// pbCSV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbCSV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbCSV_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbCSV_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.PalDateiCSV()) 
			{
				if (this.hDisk.Open(this.strDateiPfad, Sys.OF_Create)) 
				{
					this.hDisk.Close();
					if (this.hDisk.Open(this.strDateiPfad, Sys.OF_Write)) 
					{
						// 12.10.22
						this.strAuswahl = "";
						if (this.rbPegasus.Checked) 
						{
							this.strAuswahl = " aitbrief = 1 AND ";
							// 09.02.16
							if (this.cbPegVer.Checked) 
							{
								this.strAuswahl = this.strAuswahl + " aarztnr in (SELECT dbarztnr FROM db, pn WHERE dbguid=pnguid AND pnprogver BETWEEN :frmSerienbrief.dfPegVerVon AND  :frmSerienbrief.dfPegVerBis ) AND ";
							}
							// 17.01.19
							if (this.cbPegVerAusser.Checked) 
							{
								this.strAuswahl = this.strAuswahl + " aarztnr NOT IN ( " + this.mlPegAusser.Text + ") AND ";
							}
						}
						else if (this.rbPegasus4.Checked) 
						{
							this.strAuswahl = " aitbrief = 2 AND ";
						}
						else if (this.rbBeta.Checked) 
						{
							this.strAuswahl = " aarztnr In (591, 513, 692, 668, 671, 646, 1144, 591, 676) AND ";
						}
						else if (this.rbAK.Checked) 
						{
							this.strAuswahl = " aarztnr In (676, 646, 671, 668, 692, 1144, 1183) AND ";
						}
						else if (this.rbSa.Checked) 
						{
							this.strAuswahl = " arundschreiben = 1 AND ";
						}
						else if (this.rbEinzel.Checked) 
						{
							this.strAuswahl = " aarztnr IN ( " + this.mlEinzel.Text + ") AND ";
						}
						else if (this.rbSQL.Checked) 
						{
							this.strAuswahl = " " + this.mlSQL.Text + " AND ";
						}

						if (this.cbEintritt.Checked) 
						{
							this.strAuswahl = " aeintr >= :frmSerienbrief.dfEintritt AND ";
						}
						if (this.cbPLZ.Checked) 
						{
							this.strAuswahl = " aort >= \'" + this.dfPLZvon.Text + "\' AND aort <= \'" + this.dfPLZbis.Text + "ßßß\' AND ";
						}
						if (this.cbLand.Checked) 
						{
							this.strAuswahl = " aland =  \'" + ((SalString)this.cmbLC.Text).Left(2) + "\' AND ";
						}

						if (this.cbnurL.Checked) 
						{
							this.strAuswahl = this.strAuswahl + " akzpraxart < 2 AND ";
						}
						if (this.cbAktive.Checked) 
						{
							this.strAuswahl = this.strAuswahl + " aaktiv = 1 AND ";
						}
						this.strAuswahl = this.strAuswahl + " aarztnr BETWEEN :frmSerienbrief.dfVon AND :frmSerienbrief.dfBis AND ";
						Int.SqlConnection(ref this.hSqlCSV);
						if (this.cbSV.Checked) 
						{
							this.hSqlCSV.PrepareAndExecute(@"SELECT aarztnr, asvname1, asvname2, asvstr, asvort, asvland, aemail, atelfax
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.strTAEMail, :frmMain.strTAFax
			FROM a
			WHERE " + this.strAuswahl + @" aaustritt IS NULL AND agestorben IS NULL
			ORDER BY aarztnr");
						}
						else
						{
							this.hSqlCSV.PrepareAndExecute(@"SELECT aarztnr, aname1, aname2, astr, aort, aland, aemail, atelfax
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.strTAEMail, :frmMain.strTAFax
			FROM a
			WHERE " + this.strAuswahl + @" aaustritt IS NULL AND agestorben IS NULL
			ORDER BY aarztnr");
						}
						this.nFetchCSV = this.hSqlCSV.FetchNext();
						while (this.nFetchCSV != Sys.FETCH_EOF) 
						{
							if (App.frmMain.strTALand == "") 
							{
								App.frmMain.strTALand = "DE";
							}
							this.hDisk.PutString(Sal.NumberToStrX(App.frmMain.nTANr, 0) + ",\"" + App.frmMain.strTAN1 + "\",\"" + App.frmMain.strTAN2 + "\",\"" + App.frmMain.strTAStr + "\",\"" + App.frmMain.strTAOrt + "\",\"" + App.frmMain.strTALand + "\",\"" + 
								App.frmMain.strTAEMail + "\",\"" + App.frmMain.strTAFax + "\"");

							this.nFetchCSV = this.hSqlCSV.FetchNext();
						}
						this.hSqlCSV.Commit();
						this.hSqlCSV.Disconnect();

						this.hDisk.Close();
					}
					else
					{
						Sal.MessageBox("Die Datei " + this.strDateiPfad + " kann nicht geöffnet werden !", "Fehler", Sys.MB_Ok);
					}
				}
				else
				{
					Sal.MessageBox("Die Datei " + this.strDateiPfad + " kann nicht erstellt werden !", "Fehler", Sys.MB_Ok);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.DestroyWindow();
			#endregion
		}
		#endregion
	}
}
