// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmRechAusbRueck : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlZa = SalSqlHandle.Null;
		public SalSqlHandle hSqlBankZahl = SalSqlHandle.Null;
		public SalNumber nBuchDM = 0;
		public SalString strBuchText = "";
		public SalString strBankKonto = "";
		public SalNumber nIndex = 0;
		public SalNumber nRestL = 0;
		public SalNumber nRestA = 0;
		public SalNumber nRestM = 0;
		public SalNumber nRestZ = 0;
		public SalNumber nMahnstufe = 0;
		public SalString strErgebnis = "";
		public SalNumber nBatchDM = 0;
		public SalBoolean bOk = false;
		public SalNumber nZCount = 0;
		public SalNumber nProzNr = 0;
		public SalNumber nZeit = 0;
		public SalDateTime dt1 = SalDateTime.Null;
		public SalDateTime dt2 = SalDateTime.Null;
		public SalNumber nResult = 0;
		public SalNumber nLPeriode = 0;
		public SalDateTime dtLvon = SalDateTime.Null;
		public SalDateTime dtLbis = SalDateTime.Null;
		public SalNumber nFPeriode = 0;
		public SalDateTime dtFvon = SalDateTime.Null;
		public SalDateTime dtFbis = SalDateTime.Null;
		public SalNumber nJDruck = 0;
		public SalNumber nJManuell = 0;
		public SalNumber nJSperre = 0;
		public SalNumber nArztNr = 0;
		public SalNumber nArztNr2 = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmRechAusbRueck()
		{
			// Assign global reference.
			App.frmRechAusbRueck = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmRechAusbRueck CreateWindow(Control owner)
		{
			frmRechAusbRueck frm = new frmRechAusbRueck();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmRechAusbRueck FromHandle(SalWindowHandle handle)
		{
			return ((frmRechAusbRueck)SalWindow.FromHandle(handle, typeof(frmRechAusbRueck)));
		}
		#endregion
		
		#region Methods
		// Function: GetZettel
		// Description:
		// Returns
		// Boolean:
		// Parameters
		// Sql Handle: phSql
		// Number: pnArztNr
		// Number: pnHalterNr
		// Number: pnRechNr
		// Static Variables
		// Local variables
		// Number: nKZPraxArt
		// Number: nArztNr2
		// Number: nInd
		// Boolean: bExists
		// Actions
		// If SqlPrepareAndExecute( phSql, '
		// SELECT anr2, akzpraxart
		// FROM a
		// WHERE aarztnr = :pnArztNr
		// INTO :nArztNr2, :nKZPraxArt' )
		// Call SqlFetchNext( phSql, nInd )
		// If nKZPraxArt=0
		// Set nArztNr2 = pnArztNr
		// If pnHalterNr = 0
		// Call SqlExists( '
		// SELECT * FROM z
		// WHERE zarztnr IN ( :pnArztNr, :nArztNr2 )
		// AND zrechnr = :pnRechNr
		// AND zart not in (\'HS\', \'ZM\')', bExists )
		// Else
		// Call SqlExists( '
		// SELECT * FROM z
		// WHERE zarztnr IN ( :pnArztNr, :nArztNr2 )
		// AND zhalternr = :pnHalterNr
		// AND zrechnr = :pnRechNr
		// AND zart not in (\'HS\', \'ZM\')', bExists )
		// Return bExists
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="nDMLeis"></param>
		/// <param name="nDMArzn"></param>
		/// <param name="nDMMahn"></param>
		/// <param name="nDMZins"></param>
		/// <param name="nZaLeis"></param>
		/// <param name="nZaArzn"></param>
		/// <param name="nZaMahn"></param>
		/// <param name="nZaZins"></param>
		/// <param name="nRestDM"></param>
		/// <param name="nMahnstufe"></param>
		/// <param name="dtVerjDat"></param>
		/// <returns></returns>
		public SalBoolean GetRechnung(SalSqlHandle phSql, SalNumber pnArztNr, ref SalNumber pnHalterNr, SalNumber pnRechNr, ref SalNumber nDMLeis, ref SalNumber nDMArzn, ref SalNumber nDMMahn, ref SalNumber nDMZins, ref SalNumber nZaLeis, ref SalNumber nZaArzn, ref SalNumber nZaMahn, ref SalNumber nZaZins, ref SalNumber nRestDM, ref SalNumber nMahnstufe, ref SalDateTime dtVerjDat)
		{
			#region Local Variables
			SqlLocals.GetRechnungLocals locals = new SqlLocals.GetRechnungLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnHalterNr = pnHalterNr;
					locals.pnRechNr = pnRechNr;
					locals.nDMLeis = nDMLeis;
					locals.nDMArzn = nDMArzn;
					locals.nDMMahn = nDMMahn;
					locals.nDMZins = nDMZins;
					locals.nZaLeis = nZaLeis;
					locals.nZaArzn = nZaArzn;
					locals.nZaMahn = nZaMahn;
					locals.nZaZins = nZaZins;
					locals.nRestDM = nRestDM;
					locals.nMahnstufe = nMahnstufe;
					locals.dtVerjDat = dtVerjDat;

					if (locals.pnHalterNr != 0) 
					{
						locals.phSql.PrepareAndExecute(@"
SELECT rkdmleis, rkdmarzn, rkdmmahn + rkmbdmopl, rkdmzins,
rkzaleis, rkzaarzn, rkzamahn + rkmbzaopl , rkzazins,
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins), rkmahnstufe, rkverjaehr
FROM RK
INTO :nDMLeis, :nDMArzn, :nDMMahn, :nDMZins,
:nZaLeis, :nZaArzn, :nZaMahn, :nZaZins,
:nRestDM, :nMahnstufe, :dtVerjDat
WHERE rkarztnr = :pnArztNr
AND rkhalternr = :pnHalterNr
AND rkrechnr = :pnRechNr AND rkdeaktiv IS NULL");
					}
					else
					{
						locals.phSql.PrepareAndExecute(@"
SELECT rkdmleis, rkdmarzn, rkdmmahn + rkmbdmopl, rkdmzins,
rkzaleis, rkzaarzn, rkzamahn + rkmbzaopl , rkzazins, rkhalternr,
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins), rkmahnstufe, rkverjaehr
FROM RK
INTO :nDMLeis, :nDMArzn, :nDMMahn, :nDMZins,
:nZaLeis, :nZaArzn, :nZaMahn, :nZaZins, :pnHalterNr,
:nRestDM, :nMahnstufe, :dtVerjDat
WHERE rkarztnr = :pnArztNr
AND rkrechnr = :pnRechNr AND rkdeaktiv IS NULL");
					}
					if (locals.phSql.FetchNext(ref locals.nInd)) 
					{
						locals.bExists = true;
					}
					return locals.bExists;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnHalterNr = locals.pnHalterNr;
					nDMLeis = locals.nDMLeis;
					nDMArzn = locals.nDMArzn;
					nDMMahn = locals.nDMMahn;
					nDMZins = locals.nDMZins;
					nZaLeis = locals.nZaLeis;
					nZaArzn = locals.nZaArzn;
					nZaMahn = locals.nZaMahn;
					nZaZins = locals.nZaZins;
					nRestDM = locals.nRestDM;
					nMahnstufe = locals.nMahnstufe;
					dtVerjDat = locals.dtVerjDat;

				}
			}
			#endregion
		}
		// Function: GetGesamtOP		! 20.10.98
		// Description:
		// Returns
		// Boolean:
		// Parameters
		// Sql Handle: phSql
		// Number: pnArztNr
		// Receive Number: pnHalterNr
		// Receive Number: pnRestDM
		// Static Variables
		// Local variables
		// Boolean: bExists
		// Number: nInd
		// Number: nArzt2
		// Actions
		// Call SqlPrepareAndExecute( phSql, 'SELECT ANR2 INTO :nArzt2 FROM A WHERE AARZTNR = :pnArztNr')
		// If nArzt2 = 0
		// Set nArzt2 = pnArztNr
		// Call SqlPrepareAndExecute( phSql, 'SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
		// from rk into :pnRestDM where rkhalternr=:pnHalterNr
		// and rkarztnr in ( :pnArztNr, :nArzt2)
		// and rkkzzahl <2')
		// If SqlFetchNext( phSql, nInd )
		// Set bExists = TRUE
		// Return bExists
		// Function: GetAusbuchen
		// Description:
		// Returns
		// Parameters
		// Sql Handle: phSql
		// Number: pnArztNr
		// Receive Number: pnMGAusbuchen
		// Receive Number: pnKleinBetrag
		// Static Variables
		// Local variables
		// Number: nInd
		// Actions
		// If SqlPrepareAndExecute( phSql, '
		// SELECT amgausbuchen, akleinbetrag
		// FROM A
		// INTO :pnMGAusbuchen, :pnKleinBetrag
		// WHERE AARZTNR = :pnArztNr' )
		// Call SqlFetchNext( phSql, nInd )
		// Function: GetHalterAusbuchen
		// Description:
		// Returns
		// Parameters
		// Sql Handle: phSql
		// Number: pnArztNr
		// Number: pnHalterNr
		// Receive Number: pnSkonto
		// Static Variables
		// Local variables
		// Number: nInd
		// Actions
		// If SqlPrepareAndExecute( phSql, '
		// SELECT hskonto
		// FROM H
		// INTO :pnSkonto
		// WHERE HARZTNR = :pnArztNr
		// AND HHALTERNR = :pnHalterNr' )
		// Call SqlFetchNext( phSql, nInd )
		// Function: GetMahngeb
		// Description:
		// Returns
		// Parameters
		// Sql Handle: phSql
		// Number: pnArztNr
		// Receive Number: pnTVSMahnGeb
		// Static Variables
		// Local variables
		// Number: nInd
		// Actions
		// If SqlPrepareAndExecute( phSql, '
		// SELECT mgdmtvs
		// FROM MG
		// INTO :pnTVSMahnGeb
		// WHERE MGARZTNR = :pnArztNr' )
		// If NOT SqlFetchNext( phSql, nInd )
		// If SqlPrepareAndExecute( phSql, '
		// SELECT mgdmtvs
		// FROM MG
		// INTO :pnTVSMahnGeb
		// WHERE MGARZTNR = 0' )
		// Call SqlFetchNext( phSql, nInd )
		// Function: GetMehrwertsteuer
		// Description:
		// Returns
		// Parameters
		// Sql Handle: phSql
		// Number: pnArztNr
		// Number: pnHalterNr
		// Number: pnRechNr
		// Receive Number: pnKZMwSt
		// Static Variables
		// Local variables
		// Number: nInd
		// Actions
		// If SqlPrepareAndExecute( phSql, '
		// SELECT rkkzmwst
		// FROM RK
		// INTO :pnKZMwSt
		// WHERE rkarztnr = :pnArztNr
		// AND rkhalternr = :pnHalterNr
		// AND rkrechnr = :pnRechNr' )
		// Call SqlFetchNext( phSql, nInd )
		// Function: GetRest
		// Description:
		// Returns
		// Parameters
		// Sql Handle: phSql
		// Number: pnArztNr
		// Number: pnRechNr
		// Number: pnRestL
		// Number: pnRestA
		// Number: pnRestM
		// Number: pnRestZ
		// Static Variables
		// Local variables
		// Number: nInd
		// Actions
		// If SqlPrepareAndExecute( phSql, '
		// SELECT (rkdmleis-rkzaleis), (rkdmarzn-rkzaarzn), (rkdmmahn-rkzamahn), (rkdmzins-rkzazins)
		// FROM RK
		// INTO :pnRestL, :pnRestA, :pnRestM, :pnRestZ
		// WHERE  rkarztnr = :pnArztNr
		// AND rkrechnr = :pnRechNr' )
		// Call SqlFetchNext( phSql, nInd )
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnProzNr"></param>
		/// <returns></returns>
		public SalNumber GetProzNr(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, ref SalNumber pnProzNr)
		{
			#region Local Variables
			SqlLocals.GetProzNrLocals locals = new SqlLocals.GetProzNrLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.phSql = phSql;
					locals.pnArztNr = pnArztNr;
					locals.pnHalterNr = pnHalterNr;
					locals.pnRechNr = pnRechNr;
					locals.pnProzNr = pnProzNr;

					if (locals.pnRechNr >= 999990)  // 07.01.99
					{
						// If SqlPrepareAndExecute( phSql, '
						// SELECT prnr
						// FROM pr
						// INTO :pnProzNr
						// WHERE pra1 = :pnArztNr AND prhalternr = :pnHalterNr AND prrechnr = :pnRechNr')
						// Call SqlFetchNext( phSql, nInd )
					}
					else
					{
						if (locals.phSql.PrepareAndExecute(@"
SELECT prdnr
FROM prd
INTO :pnProzNr
WHERE prdarztnr = :pnArztNr AND prdrechnr = :pnRechNr")) 
						{
							locals.nInd = locals.phSql.FetchNext();
						}
					}

					return 0;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					pnProzNr = locals.pnProzNr;

				}
			}
			#endregion
		}
		// Function: GetProzOP		! 07.11.00
		// Description:
		// Returns
		// Parameters
		// Sql Handle: phSql
		// Number: pnProzNr
		// Receive Number: pnDMOP
		// Static Variables
		// Local variables
		// Number: nInd
		// String: strpSelect
		// Actions
		// If SqlPrepareAndExecute( phSql, '
		// SELECT prhalternr, pra1, prr1, pra2, prr2, pra3, prr3, pra4, prr4, pra5, prr5, pra6, prr6
		// FROM pr
		// INTO :frmRechAusbRueck.nH, :frmRechAusbRueck.nA1, :frmRechAusbRueck.nR1,
		// :frmRechAusbRueck.nA2, :frmRechAusbRueck.nR2,
		// :frmRechAusbRueck.nA3, :frmRechAusbRueck.nR3,
		// :frmRechAusbRueck.nA4, :frmRechAusbRueck.nR4,
		// :frmRechAusbRueck.nA5, :frmRechAusbRueck.nR5,
		// :frmRechAusbRueck.nA6, :frmRechAusbRueck.nR6
		// WHERE prnr = :pnProzNr')
		// Call SqlFetchNext( phSql, nInd )
		// Set strpSelect = 'SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
		// INTO :pnDMOP
		// FROM pr,rk
		// WHERE rkhalternr = :frmRechAusbRueck.nH AND rkkzzahl<2 and  prnr=:pnProzNr and  ('
		// If nR1 != NUMBER_Null
		// Set strpSelect = strpSelect || '(pra1 = :frmRechAusbRueck.nA1 AND prr1 = :frmRechAusbRueck.nR1) OR '
		// If nR2 != NUMBER_Null
		// Set strpSelect = strpSelect || '(pra2 = :frmRechAusbRueck.nA2 AND prr2 = :frmRechAusbRueck.nR2) OR '
		// If nR3 != NUMBER_Null
		// Set strpSelect = strpSelect || '(pra3 = :frmRechAusbRueck.nA3 AND prr3 = :frmRechAusbRueck.nR3) OR '
		// If nR4 != NUMBER_Null
		// Set strpSelect = strpSelect || '(pra4 = :frmRechAusbRueck.nA4 AND prr4 = :frmRechAusbRueck.nR4) OR '
		// If nR5 != NUMBER_Null
		// Set strpSelect = strpSelect || '(pra5 = :frmRechAusbRueck.nA5 AND prr5 = :frmRechAusbRueck.nR5) OR '
		// If nR6 != NUMBER_Null
		// Set strpSelect = strpSelect || '(pra6 = :frmRechAusbRueck.nA6 AND prr6 = :frmRechAusbRueck.nR6) OR '
		// Set strpSelect = SalStrLeftX(strpSelect, SalStrLength(strpSelect)-3) || ')'
		// If SqlPrepareAndExecute( phSql, strpSelect)
		// Call SqlFetchNext( phSql, nInd )
		// 12.03.02
		// Set strpSelect = 'SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
		// INTO :pnDMOP
		// FROM prd,rk
		// WHERE prdnr = :pnProzNr AND prdarztnr=rkarztnr AND prdhalternr=rkhalternr AND prdrechnr=rkrechnr AND rkkzzahl<2'
		// If SqlPrepareAndExecute( phSql, strpSelect)
		// Call SqlFetchNext( phSql, nInd )
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnProzNr"></param>
		/// <returns></returns>
		public SalNumber UpdateProzBez(SalSqlHandle phSql, SalNumber pnProzNr)
		{
			#region Local Variables
			SqlLocals.UpdateProzBezLocals locals = new SqlLocals.UpdateProzBezLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnProzNr = pnProzNr;

				locals.pdtDatum = SalDateTime.Current;
				if (locals.phSql.PrepareAndExecute(@"
UPDATE pr SET
prbezahlt = NULL
WHERE prnr = :pnProzNr")) 
				{
					locals.phSql.Commit();
				}

				return 0;
			}
			#endregion
		}
		// Function: GetMahnAnz
		// Description:
		// Returns
		// Parameters
		// Sql Handle: phSql
		// Number: pnArztNr
		// Number: pnRechNr
		// Receive Number: pnMahnAnz
		// Static Variables
		// Local variables
		// Number: nInd
		// Actions
		// If SqlPrepareAndExecute( phSql, '
		// SELECT COUNT(*)
		// FROM ma
		// INTO :pnMahnAnz
		// WHERE MAARZTNR = :pnArztNr
		// AND MARECHNR = :pnRechNr' )
		// Call SqlFetchNext( phSql, nInd )
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnFertig"></param>
		/// <param name="pnBankKonto"></param>
		/// <param name="pnHaben"></param>
		/// <param name="pnBelNr"></param>
		/// <param name="pdtBelDat"></param>
		/// <param name="pstrBuchText"></param>
		/// <param name="pnDiverse"></param>
		/// <param name="pnTyp"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <returns></returns>
		public SalNumber InsertFiBu(SalSqlHandle phSql, SalNumber pnFertig, SalNumber pnBankKonto, SalNumber pnHaben, SalNumber pnBelNr, SalDateTime pdtBelDat, SalString pstrBuchText, SalNumber pnDiverse, SalNumber pnTyp, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr)
		{
			#region Local Variables
			SqlLocals.InsertFiBuLocals locals = new SqlLocals.InsertFiBuLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnFertig = pnFertig;
				locals.pnBankKonto = pnBankKonto;
				locals.pnHaben = pnHaben;
				locals.pnBelNr = pnBelNr;
				locals.pdtBelDat = pdtBelDat;
				locals.pstrBuchText = pstrBuchText;
				locals.pnDiverse = pnDiverse;
				locals.pnTyp = pnTyp;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;

				if (locals.pnBelNr == SalNumber.Null) 
				{
					locals.pnBelNr = 0;
				}
				if (locals.phSql.PrepareAndExecute(@"
INSERT INTO FI
( fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiarztnr, fihalternr, firechnr )
VALUES
( :pnFertig, :pnBankKonto, :pnHaben, :pnBelNr, :pdtBelDat, :pstrBuchText, :pnDiverse, :pnTyp, :pnArztNr, :pnHalterNr, :pnRechNr )")) 
				{
					locals.phSql.Commit();
					Sal.MessageBox("Buchung erfolgt.", "", Sys.MB_Ok);
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnProzNr"></param>
		/// <param name="pnKZZahl"></param>
		/// <param name="pnBelNr"></param>
		/// <param name="pnBuchDM"></param>
		/// <param name="pdtBuchDat"></param>
		/// <returns></returns>
		public SalNumber InsertZahlung(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, SalNumber pnProzNr, SalNumber pnKZZahl, SalNumber pnBelNr, SalNumber pnBuchDM, SalDateTime pdtBuchDat)
		{
			#region Local Variables
			SqlLocals.InsertZahlungLocals locals = new SqlLocals.InsertZahlungLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;
				locals.pnProzNr = pnProzNr;
				locals.pnKZZahl = pnKZZahl;
				locals.pnBelNr = pnBelNr;
				locals.pnBuchDM = pnBuchDM;
				locals.pdtBuchDat = pdtBuchDat;

				// 13.05.14 F2027
				locals.pnHalterNr = Int.PalCheckNULL(locals.pnHalterNr);

				// 26.03.19 Ä1844 + , zaerfdat
				if (locals.phSql.PrepareAndExecute(@"
INSERT INTO ZA
( zaarztnr, zahalternr, zarechnr, zakz, zabuchdat, zabelegnr, zadm, zaproznr, zabuchtext, zaerfdat )
VALUES
( :pnArztNr, :pnHalterNr, :pnRechNr, :pnKZZahl, :pdtBuchDat, :pnBelNr, :pnBuchDM, :pnProzNr, 'Retoure', SYSDATETIME )")) 
				{
					locals.phSql.Commit();
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pstrBuchText"></param>
		/// <param name="pnBelNr"></param>
		/// <param name="pdtBuchDat"></param>
		/// <param name="pnZahlLeis"></param>
		/// <param name="pnZahlArzn"></param>
		/// <param name="pnZahlMahn"></param>
		/// <param name="pnZahlZins"></param>
		/// <param name="pnRPMwSt"></param>
		/// <param name="pnMwSatz"></param>
		/// <param name="pnKZZahl"></param>
		/// <param name="pnDummyHaben"></param>
		/// <param name="pnDMMahn"></param>
		/// <returns></returns>
		public SalNumber InsertKonto(
					SalSqlHandle phSql, 
					SalNumber pnArztNr, 
					SalNumber pnHalterNr, 
					SalNumber pnRechNr, 
					SalString pstrBuchText, 
					SalNumber pnBelNr, 
					SalDateTime pdtBuchDat, 
					SalNumber pnZahlLeis, 
					SalNumber pnZahlArzn, 
					SalNumber pnZahlMahn, 
					SalNumber pnZahlZins, 
					SalNumber pnRPMwSt, 
					SalNumber pnMwSatz, 
					SalNumber pnKZZahl, 
					SalNumber pnDummyHaben, 
					SalNumber pnDMMahn)
		{
			#region Local Variables
			SqlLocals.InsertKontoLocals locals = new SqlLocals.InsertKontoLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;
				locals.pstrBuchText = pstrBuchText;
				locals.pnBelNr = pnBelNr;
				locals.pdtBuchDat = pdtBuchDat;
				locals.pnZahlLeis = pnZahlLeis;
				locals.pnZahlArzn = pnZahlArzn;
				locals.pnZahlMahn = pnZahlMahn;
				locals.pnZahlZins = pnZahlZins;
				locals.pnRPMwSt = pnRPMwSt;
				locals.pnMwSatz = pnMwSatz;
				locals.pnKZZahl = pnKZZahl;
				locals.pnDummyHaben = pnDummyHaben;
				locals.pnDMMahn = pnDMMahn;

				// 10.04.08 F318 tksa von 1 auf 3 geändert
				// 14.03.16 F2653 tktavst: :pnMwSatz -> 0
				if (locals.phSql.PrepareAndExecute(@"
INSERT INTO TK
( tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkdmmahn )
VALUES
( :pnArztNr, 3, 0, :pstrBuchText, :pnHalterNr, :pnRechNr, :pnBelNr, :pdtBuchDat,
0, 0, 0, 0, 0, 0, 0, 0,
0, 0, :pnKZZahl, 0, :pnDummyHaben, 0, 0, :pnDMMahn )")) 
				{
					locals.phSql.Commit();
				}

				return 0;
			}
			#endregion
		}
		// Function: RatenZahlung
		// Description:
		// Returns
		// Parameters
		// Sql Handle: phSql
		// Number: pnArztNr
		// Number: pnHalterNr
		// Number: pnBuchDM
		// Static Variables
		// Local variables
		// Boolean: bExists
		// Date/Time: dtRatDat
		// Number: nRatMtl
		// Number: nIndRat
		// Number: nRestDM
		// Number: nArztNr2
		// Actions
		// 14.02.01
		// Call SqlExists( '
		// SELECT *
		// FROM r
		// WHERE rarztnr = :pnArztNr
		// AND rhalternr = :pnHalterNr', bExists )
		// If Not bExists
		// If SqlPrepareAndExecute( phSql, '
		// SELECT anr2
		// FROM a
		// WHERE aarztnr = :pnArztNr
		// INTO :nArztNr2')
		// Call SqlFetchNext( phSql, nIndRat )
		// Call SqlExists( '
		// SELECT *
		// FROM r
		// WHERE rarztnr = :nArztNr2
		// AND rhalternr = :pnHalterNr', bExists )
		// If bExists
		// Set pnArztNr = nArztNr2
		// If bExists
		// If GetGesamtOP( hSqlBankZahl, pnArztNr, pnHalterNr, nRestDM)
		// If nRestDM > pnBuchDM
		// If SqlPrepareAndExecute(phSql, '
		// SELECT rmtl INTO :nRatMtl FROM R
		// WHERE rarztnr = :pnArztNr
		// AND rhalternr = :pnHalterNr' )
		// Call SqlFetchNext( phSql, nIndRat )
		// Set dtRatDat = SalDateCurrent() + nRatMtl*30
		// If SqlPrepareAndExecute( phSql, '
		// UPDATE r SET
		// r1 = :dtRatDat
		// WHERE  rarztnr = :pnArztNr
		// AND rhalternr = :pnHalterNr' )
		// Call SqlCommit( phSql )
		// Else
		// Call PalLog('RaZa autom. gekündigt: Ha.'
		// || PalStrNum(pnArztNr, 4, 0) || '/' || PalStrNum(pnHalterNr, 5,0))
		// If SqlPrepareAndExecute( phSql, '
		// DELETE FROM r
		// WHERE  rarztnr = :pnArztNr
		// AND rhalternr = :pnHalterNr' )
		// Call SqlCommit( phSql )
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnKZZahl"></param>
		/// <param name="pnZaLeis"></param>
		/// <param name="pnZaArzn"></param>
		/// <param name="pnZaMahn"></param>
		/// <param name="pnZaZins"></param>
		/// <param name="pnMahnstufe"></param>
		/// <param name="pdtTeilzDat"></param>
		/// <param name="pdtVerjDat"></param>
		/// <returns></returns>
		public SalNumber UpdateRechnung(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, SalNumber pnKZZahl, SalNumber pnZaLeis, SalNumber pnZaArzn, SalNumber pnZaMahn, SalNumber pnZaZins, SalNumber pnMahnstufe, SalDateTime pdtTeilzDat, SalDateTime pdtVerjDat)
		{
			#region Local Variables
			SqlLocals.UpdateRechnungLocals locals = new SqlLocals.UpdateRechnungLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;
				locals.pnKZZahl = pnKZZahl;
				locals.pnZaLeis = pnZaLeis;
				locals.pnZaArzn = pnZaArzn;
				locals.pnZaMahn = pnZaMahn;
				locals.pnZaZins = pnZaZins;
				locals.pnMahnstufe = pnMahnstufe;
				locals.pdtTeilzDat = pdtTeilzDat;
				locals.pdtVerjDat = pdtVerjDat;

				if (locals.pnRechNr >= 999990) 
				{
					if (locals.phSql.PrepareAndExecute(@"
UPDATE RK SET
rkkzzahl = :pnKZZahl,
rkzaleis = :pnZaLeis,
rkzaarzn = :pnZaArzn,
rkmbzaopl = :pnZaMahn,
rkzazins = :pnZaZins,
rkteilzdat = :pdtTeilzDat
WHERE rkarztnr = :pnArztNr
AND rkhalternr = :pnHalterNr
AND rkrechnr = :pnRechNr")) 
					{
						locals.phSql.Commit();
					}
				}
				else
				{
					if (locals.phSql.PrepareAndExecute(@"
UPDATE RK SET
rkkzzahl = :pnKZZahl,
rkzaleis = :pnZaLeis,
rkzaarzn = :pnZaArzn,
rkzamahn = :pnZaMahn,
rkzazins = :pnZaZins,
rkteilzdat = :pdtTeilzDat,
rkmahnstufe = :pnMahnstufe,
rkverjaehr = :pdtVerjDat
WHERE rkarztnr = :pnArztNr
AND rkhalternr = :pnHalterNr
AND rkrechnr = :pnRechNr")) 
					{
						locals.phSql.Commit();
					}
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnProzMwSt"></param>
		/// <param name="pnDiverse"></param>
		/// <param name="pnRP1MwSt"></param>
		/// <param name="pstrLA"></param>
		/// <returns></returns>
		public SalNumber UpdateRechPosition(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnRechNr, SalNumber pnProzMwSt, SalNumber pnDiverse, SalNumber pnRP1MwSt, SalString pstrLA)
		{
			#region Local Variables
			SqlLocals.UpdateRechPositionLocals locals = new SqlLocals.UpdateRechPositionLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnRechNr = pnRechNr;
				locals.pnProzMwSt = pnProzMwSt;
				locals.pnDiverse = pnDiverse;
				locals.pnRP1MwSt = pnRP1MwSt;
				locals.pstrLA = pstrLA;

				if (locals.phSql.PrepareAndExecute(@"
SELECT ROWID
FROM RP
INTO :strROWIDLocal
WHERE rparztnr = :pnArztNr
AND rprechnr = :pnRechNr
AND rpmwst = :pnProzMwSt
AND rpla = :pstrLA
AND rpdmzahl > 0")) 
				{
					if (locals.phSql.FetchNext(ref locals.nInd)) 
					{
						if (locals.phSql.PrepareAndExecute(@"
UPDATE RP SET
rpdmzahl = rpdmzahl + ( :pnDiverse - :pnRP1MwSt )
WHERE ROWID = :strROWIDLocal")) 
						{
							locals.phSql.Commit();
						}
					}
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// buchen einer Zahlung
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="nHalterNr"></param>
		/// <param name="nRechNr"></param>
		/// <param name="nProzNrX"></param>
		/// <param name="nZahlLeisX"></param>
		/// <param name="nZahlArznX"></param>
		/// <param name="nZahlMahnX"></param>
		/// <param name="nZahlZinsX"></param>
		/// <param name="nZahlMBKoX"></param>
		/// <param name="nMwStX"></param>
		/// <param name="dtBuchDatX"></param>
		/// <param name="strBankKontoX"></param>
		/// <param name="nBelNrX"></param>
		/// <param name="dtVerjDatX"></param>
		/// <param name="dtTeilzDatX"></param>
		/// <returns></returns>
		public SalString RueckBuchen(SalNumber nArztNr, SalNumber nHalterNr, SalNumber nRechNr, SalNumber nProzNrX, SalNumber nZahlLeisX, SalNumber nZahlArznX, SalNumber nZahlMahnX, SalNumber nZahlZinsX, SalNumber nZahlMBKoX, SalNumber nMwStX, SalDateTime dtBuchDatX, SalString strBankKontoX, SalNumber nBelNrX, SalDateTime dtVerjDatX, SalDateTime dtTeilzDatX)
		{
			#region Local Variables
			SalBoolean bSonder = false;
			SalNumber nBuchDM = 0;
			SalNumber nAusbuchDM = 0;
			SalNumber nKZZahl = 0;
			SalNumber nDMLeis = 0;
			SalNumber nDMArzn = 0;
			SalNumber nDMMahn = 0;
			SalNumber nDMZins = 0;
			SalNumber nZaLeis = 0;
			SalNumber nZaArzn = 0;
			SalNumber nZaMahn = 0;
			SalNumber nZaZins = 0;
			SalNumber nRestDM = 0;
			SalNumber nMahnstufe = 0;
			SalDateTime dtVerjDat = SalDateTime.Null;
			SalNumber nMGAusbuchen = 0;
			SalNumber nKleinBetrag = 0;
			SalNumber nSkonto = 0;
			SalNumber nTVSMahnGeb = 0;
			SalNumber nTVSMahnDM = 0;
			SalNumber nMahnAnz = 0;
			SalNumber nDiverse = 0;
			SalNumber nRP1MwSt = 0;
			SalString strReturn = "";
			SalString strBuchText = "";
			SalString strBuchTextDummy = "";
			SalString strLA = "";
			SalDateTime dtTeilzDat = SalDateTime.Null;
			SalNumber nZahlDM = 0;
			SalDateTime dtBuchDat = SalDateTime.Null;
			SalString strBankKonto = "";
			SalNumber nBelNr = 0;
			SalNumber nKZMwSt = 0;
			SalNumber nProzMwSt = 0;
			SalNumber nZahlLeis = 0;
			SalNumber nZahlArzn = 0;
			SalNumber nZahlMahn = 0;
			SalNumber nZahlZins = 0;
			SalNumber nFetchRP = 0;
			SalNumber nRPDM = 0;
			SalNumber nRPZahl = 0;
			SalNumber nRPMwSt = 0;
			SalString strROWID = "";
			SalString strPalZahlROWID = ""; // nur für PalZahlung !
			SalNumber nRestL = 0;
			SalNumber nRestA = 0;
			SalNumber nRestM = 0;
			SalNumber nRestZ = 0;
			// Date/Time: dtRatDat
			// Number: nRatMtl
			SalNumber nProzNr = 0;
			SalNumber nProzOP = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				Sal.WaitCursor(true);
				this.SetStatusBarText("Rech-Nr.: " + nArztNr.ToString(0) + "/" + nHalterNr.ToString(0) + "/" + nRechNr.ToString(0));
				// Hole Rechnung
				if (!(GetRechnung(hSqlBankZahl, nArztNr, ref nHalterNr, nRechNr, ref nDMLeis, ref nDMArzn, ref nDMMahn, ref nDMZins, ref nZaLeis, ref nZaArzn, ref nZaMahn, ref nZaZins, ref nRestDM, ref nMahnstufe, ref dtVerjDat))) 
				{
					strReturn = "nicht gebucht / Rechnung nicht vorhanden";
					return strReturn;
				}
				// Hole ProzNr		10.12.98
				// 19.07.01
				nProzNr = nProzNrX;
				if (nRechNr < 999990) 
				{
					GetProzNr(hSqlBankZahl, nArztNr, nHalterNr, nRechNr, ref nProzNr);
				}
				// 15.05.00

				strBuchText = (dfBuchText.Text + Int.PalStrNum(nArztNr, 4, 0) + "/R" + Int.PalStrNum(nRechNr, 6, 0)).Left(50);
				// wg. Zinsen
				// Call SalStatusSetText(hWndForm,'Sachkonten-Buchungen')
				if (nTVSMahnDM > 0.00m) 
				{
					if (nRechNr >= 999990)  // 07.01.99 siehe unten
					{
						// Set strBuchTextDummy = 'MBc' || PalStrNum( nArztNr, 4, 0 ) || '/' || PalStrNum( nHalterNr, 5, 0 ) || '/' || PalStrNum( nRechNr, 6, 0 )
						// Set nDiverse =nTVSMahnDM
						// Call InsertFiBu( hSqlBankZahl, 0, strBankKontoX, 16510, nBelNrX, dtBuchDatX, strBuchTextDummy, nDiverse, 3, nArztNr, nHalterNr, nRechNr )
					}
					else
					{
						// Set strBuchTextDummy = 'MG TVS' || PalStrNum( nArztNr, 4, 0 ) || '/' || PalStrNum( nRechNr, 6, 0 )
						// Set nDiverse = SalNumberRound(nTVSMahnDM*10000/(100 + nMwStVoll)) / 100
						// Call InsertFiBu( hSqlBankZahl, 0, strBankKontoX, 80110, nBelNrX, dtBuchDatX, strBuchTextDummy, nDiverse, 3, NUMBER_Null, NUMBER_Null, NUMBER_Null )
						// Set nDiverse = nTVSMahnDM - nDiverse
						// Call InsertFiBu( hSqlBankZahl, 0, strBankKontoX, 18300, nBelNrX, dtBuchDatX, strBuchTextDummy, nDiverse, 3, NUMBER_Null, NUMBER_Null, NUMBER_Null )
					}
				}
				// 27.07.06 F22
				nKZZahl = 4;

				this.SetStatusBarText("Zahlungs-Datei");
				InsertZahlung(hSqlBankZahl, nArztNr, nHalterNr, nRechNr, nProzNr, nKZZahl, nBelNrX, nZahlLeisX + nZahlArznX + nZahlMahnX + nZahlZinsX + nZahlMBKoX, dtBuchDatX);
				// Call RatenZahlung( hSqlBankZahl, nArztNr, nHalterNr, nBuchDM )

				if (nRechNr >= 999990) 
				{
					nDiverse = nZahlLeisX + nZahlArznX + nZahlMahnX + nZahlZinsX;
				}
				else
				{
					nDiverse = nZahlLeisX + nZahlArznX + nZahlMahnX + nZahlZinsX + nZahlMBKoX;
				}
				// 28.03.08 F352 +  + nZahlMBKoX
				if ((nZahlMahnX + nZahlZinsX + nZahlMBKoX) != 0) 
				{
					if (nRechNr < 999990) 
					{
						nDiverse = nZahlMahnX + nZahlZinsX;
						InsertFiBu(hSqlBankZahl, 0, 16410, 16000, nBelNrX, dtBuchDatX, strBuchText, nDiverse, 5, nArztNr, nHalterNr, nRechNr);
					}
					else
					{
						// 03.05.10 OTÄ420
						Var.nCheckMwSt = Int.PalCheckAuslMwSt(nArztNr);
						// 14.04.14 Ä1046
						if (Int.PalCheckAuslTA(nArztNr) == "EU") 
						{
							App.frmMain.nErloeskonto = 82210;
						}
						else
						{
							App.frmMain.nErloeskonto = 82200;
							// 30.06.20 Ä1892
							if (dtBuchDatX >= new SalDateTime(2020, 7, 1) && dtBuchDatX <= new SalDateTime(2020, 12, 31)) 
							{
								App.frmMain.nErloeskonto = Int.PalKontenMwStSenkung(App.frmMain.nErloeskonto);
							}
						}


						// 28.03.08 F352 statt nZahlMahnX -> nZahlMahnX + nZahlMBKoX
						nDiverse = ((nZahlMahnX + nZahlMBKoX) * 10000 / (100 + Var.nCheckMwSt)).Round() / 100;
						InsertFiBu(hSqlBankZahl, 0, App.frmMain.nErloeskonto, 16510, nBelNrX, dtBuchDatX, strBuchText, nDiverse, 5, nArztNr, nHalterNr, nRechNr);
						nDiverse = (nZahlMahnX + nZahlMBKoX) - nDiverse;
						// 30.06.20 Ä1892
						Var.nMwStSenkung = 17760;
						if (dtBuchDatX >= new SalDateTime(2020, 7, 1) && dtBuchDatX <= new SalDateTime(2020, 12, 31)) 
						{
							Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
						}

						InsertFiBu(hSqlBankZahl, 0, Var.nMwStSenkung, 16510, nBelNrX, dtBuchDatX, strBuchText, nDiverse, 5, nArztNr, nHalterNr, nRechNr);
					}
				}
				nDiverse = nZahlLeisX + nZahlArznX;
				InsertFiBu(hSqlBankZahl, 0, 16420, 16000, nBelNrX, dtBuchDatX, strBuchText, nDiverse, 5, nArztNr, nHalterNr, nRechNr);

				// UPDATE rk	11.9.00 auf Wunsch von H. Sasse kommentiert, da Dr. henn sich beschwert hat
				// If nMahnstufe <= 5 And nKZZahl = 1
				// Set nMahnstufe = 0
				this.SetStatusBarText("Rechnungs-Datei");
				nZaLeis = nZaLeis + nZahlLeisX;
				nZaArzn = nZaArzn + nZahlArznX;
				nZaMahn = nZaMahn + nZahlMahnX + nZahlMBKoX;
				nZaZins = nZaZins + nZahlZinsX;
				UpdateRechnung(hSqlBankZahl, nArztNr, nHalterNr, nRechNr, 0, nZaLeis, nZaArzn, nZaMahn, nZaZins, nMahnstufe, dtTeilzDatX, dtVerjDatX);


				// Set nZahlLeis = nZahlLeis + nZahlMahn  Set nRPMwSt
				strBuchText = strBuchText.Left(20);
				// 10.02.03 laut Fr.Hennecke
				// Set nDummyHaben=(nZahlLeisX+nZahlArznX+nZahlMahnX+nZahlMBKoX+nZahlZinsX)
				// 22.08.22 Ä2015
				// Set nDummyHaben=(nZahlLeisX+nZahlArznX+nZahlMahnX+nZahlZinsX) * -1
				// Call InsertKonto( hSqlBankZahl, nArztNr, nHalterNr, nRechNr, strBuchText, nBelNrX,
				// dtBuchDatX, nZahlLeisX, nZahlArznX, nZahlMahnX, nZahlZinsX, nRPMwSt, nMwStX, 4, nDummyHaben )
				Var.nDummyHaben = (nZahlLeisX + nZahlArznX) * -1;
				InsertKonto(hSqlBankZahl, nArztNr, nHalterNr, nRechNr, strBuchText, nBelNrX, dtBuchDatX, nZahlLeisX, nZahlArznX, nZahlMahnX, nZahlZinsX, nRPMwSt, nMwStX, 4, Var.nDummyHaben, 0);
				Var.nDummyHaben = (nZahlMahnX + nZahlZinsX) * -1;
				InsertKonto(hSqlBankZahl, nArztNr, nHalterNr, nRechNr, strBuchText, nBelNrX, dtBuchDatX, nZahlLeisX, nZahlArznX, nZahlMahnX, nZahlZinsX, nRPMwSt, nMwStX, 4, 0, Var.nDummyHaben);

				if (nZahlLeisX != 0) 
				{
					nRPMwSt = (nZahlLeisX * nMwStX * 100 / (100 + nMwStX)).Round() / 100;
					UpdateRechPosition(hSqlBankZahl, nArztNr, nRechNr, nMwStX, nZahlLeisX, nRPMwSt, "L");
				}
				if (nZahlArznX != 0) 
				{
					nRPMwSt = (nZahlArznX * nMwStX * 100 / (100 + nMwStX)).Round() / 100;
					UpdateRechPosition(hSqlBankZahl, nArztNr, nRechNr, nMwStX, nZahlArznX, nRPMwSt, "A");
				}
				// 07.11.00
				if (nProzNr != SalNumber.Null) 
				{
					UpdateProzBez(hSqlBankZahl, nProzNr);
				}

				Sal.WaitCursor(false);
				return strReturn;
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmRechAusbRueck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRechAusbRueck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmRechAusbRueck_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmRechAusbRueck_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRechAusbRueck_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			Int.SqlConnection(ref this.hSqlZa);
			Int.SqlConnection(ref this.hSqlBankZahl);
			// Call SqlConnection(hSqlRp)
			// 24.4.97
			// Call SqlPrepare(hSqlRp,'SELECT rpmwst, rpla, sum(rpdm), sum(rpdmzahl)
			// INTO :nProzMwSt, :strLA,
			// :nRPDM, :nRPZahl
			// FROM RP
			// WHERE rparztnr= :nArzt
			// AND rprechnr = :nRech
			// AND rpmwst IS NOT NULL
			// GROUP BY 1,2
			// ORDER BY rpmwst desc, rpla desc')
			// Call SqlPrepare(hSqlRp,'SELECT rpmwst, rpla, sum(rpdm), sum(rpdmzahl)
			// INTO :nProzMwSt, :strLA,
			// :nRPDM, :nRPZahl
			// FROM RP
			// WHERE rparztnr= :nArzt
			// AND rprechnr = :nRech  GROUP BY 1,2
			// ORDER BY rpmwst desc, rpla desc')
			// Call SqlConnection(hSqlZX)
			// Call SqlPrepare(hSqlZX,'UPDATE RP SET rpdmzahl = (:nDiverse - :nRP1MwSt)
			// WHERE ROWID = :strPalZahlROWID')
			this.df1234.Number = 0;
			this.dfBuchDat.DateTime = SalDateTime.Current;
			// 28.05.21 Ä1962
			// Set dfBuchText = 'AusbRück'
			this.dfBuchText.Text = "Ausbuchung rückgängig gemacht";

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRechAusbRueck_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SqlDisconnect( hSqlRp )
			this.hSqlBankZahl.Disconnect();
			this.hSqlZa.Disconnect();
			// Call SqlDisconnect(hSqlZX)
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 24.11.99 ,anr2
			Int.SqlImmedSel(@"SELECT aname1, anr2
into :frmRechAusbRueck.dfArztName, :frmRechAusbRueck.nArztNr2
from A where aarztnr=:frmRechAusbRueck.dfArztNr");
			this.nArztNr = this.dfArztNr.Number;
			if (this.nArztNr2 == SalNumber.Null || this.nArztNr2 == 0) 
			{
				this.nArztNr2 = this.dfArztNr.Number;
			}

			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn
into :frmRechAusbRueck.dfHalterName
from H where  harztnr = :frmRechAusbRueck.dfArztNr AND hhalternr = :frmRechAusbRueck.dfHalterNr AND hdeaktiv IS NULL ");
			// 23.03.01 auf Anforderung von Fr. Hennecke rausgenommen.
			// Call SqlImmedSel('SELECT rkrechnr, rkrechdat, rkdmleis, rkdmarzn, rkdmmahn+rkmbdmopl, rkdmzins,
			// (rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins),rkmahnstufe
			// INTO
			// :frmRechAusbRueck.dfRechNr,
			// :frmRechAusbRueck.dfRechDat,
			// :frmRechAusbRueck.dfDMLeis,
			// :frmRechAusbRueck.dfDMArzn,
			// :frmRechAusbRueck.dfDMMahn,
			// :frmRechAusbRueck.dfDMZins,
			// :frmRechAusbRueck.dfDMRest,
			// :frmRechAusbRueck.dfMS
			// FROM RK
			// WHERE rkarztnr IN (:frmRechAusbRueck.nArztNr, :frmRechAusbRueck.nArztNr2) AND rkhalternr = :frmRechAusbRueck.dfHalterNr AND
			// rkkzzahl not in (2,3,4,5) AND
			// (rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)<>0
			// ORDER BY rkrechdat')
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// dfRechNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRechNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfRechNr.Number >= 999990 && this.dfHalterNr.IsEmpty()) 
			{
				Sal.MessageBox("Bitte geben Sie die Halter-Nr. ein!", "Achtung", (Sys.MB_Ok | Sys.MB_IconStop));
				this.dfHalterNr.SetFocus();
			}
			else
			{
				if (this.dfHalterNr.IsEmpty()) 
				{
					Int.SqlImmedSel(@"SELECT rkhalternr, rkdmleis, rkdmarzn, rkdmmahn, rkmbdmopl, rkdmzins, rkverjaehr
INTO :frmRechAusbRueck.dfHalterNr,
:frmRechAusbRueck.dfDMLeis,
:frmRechAusbRueck.dfDMArzn,
:frmRechAusbRueck.dfDMMahn,
:frmRechAusbRueck.dfDMMBKo,
:frmRechAusbRueck.dfDMZins,
:frmRechAusbRueck.dfVerjDat
FROM RK
WHERE rkarztnr = :frmRechAusbRueck.dfArztNr
AND rkrechnr = :frmRechAusbRueck.dfRechNr AND rkdeaktiv IS NULL ");
				}
				else
				{
					Int.SqlImmedSel(@"SELECT rkhalternr, rkdmleis, rkdmarzn, rkdmmahn, rkmbdmopl, rkdmzins, rkverjaehr
INTO :frmRechAusbRueck.dfHalterNr,
:frmRechAusbRueck.dfDMLeis,
:frmRechAusbRueck.dfDMArzn,
:frmRechAusbRueck.dfDMMahn,
:frmRechAusbRueck.dfDMMBKo,
:frmRechAusbRueck.dfDMZins,
:frmRechAusbRueck.dfVerjDat
FROM RK
WHERE rkarztnr = :frmRechAusbRueck.dfArztNr
AND rkhalternr = :frmRechAusbRueck.dfHalterNr
AND rkrechnr = :frmRechAusbRueck.dfRechNr AND rkdeaktiv IS NULL");
				}
				Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn
into :frmRechAusbRueck.dfHalterName
from H where  harztnr = :frmRechAusbRueck.dfArztNr AND hhalternr = :frmRechAusbRueck.dfHalterNr AND hdeaktiv IS NULL ");

				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalBoolean temp1 = this.cbZettel.Checked;
				Int.SqlIstDa(@" FROM Z WHERE zhalternr=:frmRechAusbRueck.dfHalterNr
and " + Int.PalArztNr("z", this.nArztNr, this.nArztNr2) + @"  and zrechnr=:frmRechAusbRueck.dfRechNr
AND zart not in ('HS', 'ZM') AND zdeaktiv IS NULL", ref temp1);
				this.cbZettel.Checked = temp1;

				if (this.cbZettel.Checked == true) 
				{
					Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
				}
				else
				{
					Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				}
			}
			// 16.07.01
			if (this.dfRechNr.Number >= 999990) 
			{
				// 29.06.01
				this.nZCount = 0;
				// 06.01.13 Ä1005
				// Call SqlImmedSel('SELECT count(*) INTO :frmRechAusbRueck.nZCount FROM prd WHERE prdarztnr = :frmRechAusbRueck.nArztNr AND prdhalternr = :frmRechAusbRueck.dfHalterNr')
				this.nZCount = Int.SqlGetAnzahl("FROM prd WHERE prdarztnr = :frmRechAusbRueck.nArztNr AND prdhalternr = :frmRechAusbRueck.dfHalterNr");

				if (this.nZCount > 0) 
				{
					if (this.cmbProzNr.Text == "") 
					{
						this.cmbProzNr.ClearList();
						this.cmbProzNr.PopulateList(this.hSqlZa, "SELECT DISTINCT prdnr FROM prd WHERE prdarztnr = :frmRechAusbRueck.nArztNr AND prdhalternr = :frmRechAusbRueck.dfHalterNr ORDER BY prdnr DESC ");
						this.cmbProzNr.Text = this.cmbProzNr.GetListItemText(0);
						this.dfProzDatum.Clear();
						this.nProzNr = Int.PalValNum(this.cmbProzNr.Text);
						if (this.nZCount == 1) 
						{
							if (Sys.IDYES != Sal.MessageBox("Das Feld \"PR-Nr.\" wurde mit der einzigen vorhandenen Nr. " + this.cmbProzNr.Text + @" gefüllt.
Ist dies in Ordnung ?", "Achtung", (Sys.MB_IconQuestion | Sys.MB_YesNo))) 
							{
								this.cmbProzNr.Text = "";
								this.nProzNr = 0;
							}
						}
						else
						{
							if (Sys.IDYES != Sal.MessageBox("Das Feld \"PR-Nr.\" wurde mit der jüngsten der " + Int.PalStrNum(this.nZCount, 2, 0) + " vorhandenen Nr. " + this.cmbProzNr.Text + @" gefüllt.
Ist dies in Ordnung ?", "Achtung", (Sys.MB_IconQuestion | Sys.MB_YesNo))) 
							{
								this.cmbProzNr.Text = "";
								this.nProzNr = 0;
							}
						}
						this.cmbProzNr.EnableWindowAndLabel();
					}
				}
				else
				{
					this.cmbProzNr.DisableWindowAndLabel();
				}
			}
			#endregion
		}
		
		/// <summary>
		/// cmbProzNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbProzNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.cmbProzNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbProzNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfProzDatum.Clear();
			this.nProzNr = Int.PalValNum(this.cmbProzNr.Text);
			Int.SqlImmedSel(@"SELECT prdatum, prarztnr, prhalternr
into :frmRechAusbRueck.dfProzDatum,  :frmRechAusbRueck.dfArztNr, :frmRechAusbRueck.dfHalterNr
from pr where prnr=:frmRechAusbRueck.nProzNr");
			// Call SalPostMsg(dfArztNr, SAM_Validate,0,0)
			// Call SalPostMsg(dfHalterNr, SAM_Validate,0,0)
			// Call SalSetFocus(dfHalterNr)
			// Call SqlIstDa(' from pr where prnr=:frmRechAusbRueck.nProzNr', bOk)
			// If bOk
			// Call SqlImmedSel('SELECT prdatum, prarztnr, prhalternr
			// into :frmRechAusbRueck.dfProzDatum,  :frmRechAusbRueck.dfArztNr, :frmRechAusbRueck.dfHalterNr
			// from pr where prnr=:frmRechAusbRueck.dfProzNr')
			// Call SalPostMsg(dfArztNr, SAM_Validate,0,0)
			// Call SalPostMsg(dfHalterNr, SAM_Validate,0,0)
			// Call SalSetFocus(dfHalterNr)
			// Else
			// Call SalMessageBox('angegebene PR-Nr.
			// ist nicht vorhanden !','PR falsch',MB_Ok|MB_IconStop)
			// Call SalClearField( dfProzNr )
			#endregion
		}
		
		/// <summary>
		/// dfMatch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMatch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfMatch_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMatch_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.SetStatusBarText("Suche läuft ...");
			tblHalter.CreateWindow(this, "frmRechAusbRueck", this.dfArztNr.Number, 0, this.dfMatch.Text, "", "", "", "");
			this.SetStatusBarText("");
			#endregion
		}
		
		/// <summary>
		/// pbSuchen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSuchen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSuchen_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSuchen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// If Not SalIsWindowEnabled( frmMain.pbSuchen )
			// If SalDestroyWindow(frmRgSuchen)
			// Call SalCreateWindow(frmRgSuchen,hWndForm, dfArztNr, dfHalterNr, dfRechNr)
			App.frmRgSuchen.PalFuelle(this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRechNr.Number);
			#endregion
		}
		
		/// <summary>
		/// cbZettel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZettel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbZettel_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZettel_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmZettel.CreateWindow(this, "frmRechAusbRueck", this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRechNr.Number);
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfBelNr.IsEmpty()) 
			{
				this.dfBelNr.Number = 0;
			}
			if (this.dfMwSt.IsEmpty()) 
			{
				Sal.MessageBox(@"Der MwSt-Satz muß eingetragen werden.
Ebenso muß die Buchung für jeden %-Satz einzeln durchgeführt werden.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				// 06.03.23 Ä2086
				Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
				if (this.dfBuchDat.DateTime < Var.dtINIMinBuchDat) 
				{
					this.dfBuchDat.DateTime = Var.dtINIMinBuchDat;
				}

				this.strErgebnis = this.RueckBuchen(this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRechNr.Number, this.nProzNr, this.dfDMLeis.Number * -1, this.dfDMArzn.Number * -1, this.dfDMMahn.Number * -1, this.dfDMZins.Number * -1, this.dfDMMBKo.Number * 
					-1, this.dfMwSt.Number, this.dfBuchDat.DateTime, this.strBankKonto, this.dfBelNr.Number, this.dfVerjDat.DateTime, this.dfTeilzDat.DateTime);
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetRechnungLocals
			{
				public SalBoolean bExists = false;
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber nDMLeis = 0;
				public SalNumber nDMArzn = 0;
				public SalNumber nDMMahn = 0;
				public SalNumber nDMZins = 0;
				public SalNumber nZaLeis = 0;
				public SalNumber nZaArzn = 0;
				public SalNumber nZaMahn = 0;
				public SalNumber nZaZins = 0;
				public SalNumber nRestDM = 0;
				public SalNumber nMahnstufe = 0;
				public SalDateTime dtVerjDat = SalDateTime.Null;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class GetProzNrLocals
			{
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnProzNr = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class UpdateProzBezLocals
			{
				public SalDateTime pdtDatum = SalDateTime.Null;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnProzNr = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class InsertFiBuLocals
			{
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnFertig = 0;
				public SalNumber pnBankKonto = 0;
				public SalNumber pnHaben = 0;
				public SalNumber pnBelNr = 0;
				public SalDateTime pdtBelDat = SalDateTime.Null;
				public SalString pstrBuchText = "";
				public SalNumber pnDiverse = 0;
				public SalNumber pnTyp = 0;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class InsertZahlungLocals
			{
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnProzNr = 0;
				public SalNumber pnKZZahl = 0;
				public SalNumber pnBelNr = 0;
				public SalNumber pnBuchDM = 0;
				public SalDateTime pdtBuchDat = SalDateTime.Null;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class InsertKontoLocals
			{
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalString pstrBuchText = "";
				public SalNumber pnBelNr = 0;
				public SalDateTime pdtBuchDat = SalDateTime.Null;
				public SalNumber pnZahlLeis = 0;
				public SalNumber pnZahlArzn = 0;
				public SalNumber pnZahlMahn = 0;
				public SalNumber pnZahlZins = 0;
				public SalNumber pnRPMwSt = 0;
				public SalNumber pnMwSatz = 0;
				public SalNumber pnKZZahl = 0;
				public SalNumber pnDummyHaben = 0;
				public SalNumber pnDMMahn = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class UpdateRechnungLocals
			{
				public SalDateTime pdtDatum = SalDateTime.Null;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnKZZahl = 0;
				public SalNumber pnZaLeis = 0;
				public SalNumber pnZaArzn = 0;
				public SalNumber pnZaMahn = 0;
				public SalNumber pnZaZins = 0;
				public SalNumber pnMahnstufe = 0;
				public SalDateTime pdtTeilzDat = SalDateTime.Null;
				public SalDateTime pdtVerjDat = SalDateTime.Null;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class UpdateRechPositionLocals
			{
				public SalString strROWIDLocal = "";
				public SalNumber nInd = 0;
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnProzMwSt = 0;
				public SalNumber pnDiverse = 0;
				public SalNumber pnRP1MwSt = 0;
				public SalString pstrLA = "";
			}
		}
		#endregion
	}
}
