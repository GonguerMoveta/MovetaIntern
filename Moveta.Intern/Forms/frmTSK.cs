// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmTSK : SalQuickTabsForm
	{
		#region Window Variables
		public SalDateTime dtDatum = SalDateTime.Null;
		public SalNumber nArzt = 0;
		public SalNumber nHalter = 0;
		public SalString strHalter = "";
		public SalString strZM = "";
		public SalBoolean bOk = false;
		public SalString strHVN = "";
		public SalString strHNN = "";
		public SalString strHS = "";
		public SalString strHO = "";
		public SalNumber nBankeinzug = 0;
		public SalSqlHandle hSqlTSK = SalSqlHandle.Null;
		public SalSqlHandle hSqlTSKPop = SalSqlHandle.Null;
		public SalSqlHandle hSqlTSKCheck = SalSqlHandle.Null;
		public SalNumber nFetchTSK = 0;
		public SalNumber nPos = 0;
		public SalNumber nWert = 0;
		public SalNumber hPic = 0;
		public SalNumber hPic2 = 0;
		public SalNumber hPic3 = 0;
		public SalNumber nAnzHalter = 0;
		public SalString strSelect = "";
		public SalDateTime dtPErfDat = SalDateTime.Null;
		public SalNumber nFetchTSKCheck = 0;
		public SalString strWert = "";
		public SalString strGUID = "";
		public SalString strTHReg = "";
		public SalArray<SalNumber> nTabStops = new SalArray<SalNumber>(10);
		public SalNumber nByte = 0;
		public SalNumber nBeBetrag = 0;
		public SalDateTime dtBeDatum = SalDateTime.Null;
		public SalString strTSKBeihText = "";
		public SalString strTyp = "";
		public SalString strGOT = "";
		public SalString strText = "";
		public SalString strEinheit = "";
		public SalString strHReg = "";
		public SalString strAReg = "";
		public SalString strBEGuid = "";
		public SalNumber nBetrag = 0;
		public SalNumber nBeihilfe = 0;
		public SalNumber nMwSt = 0;
		public SalNumber nEUR = 0;
		public SalNumber nTab = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmTSK()
		{
			// Assign global reference.
			App.frmTSK = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmTSK CreateWindow(Control owner)
		{
			frmTSK frm = new frmTSK();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmTSK FromHandle(SalWindowHandle handle)
		{
			return ((frmTSK)SalWindow.FromHandle(handle, typeof(frmTSK)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <param name="strPTyp"></param>
		/// <returns></returns>
		public SalNumber PalNewRow(SalString strPTyp)
		{
			#region Actions
			using (new SalContext(this))
			{
				if (strPTyp == "BT") 
				{
					dtDatum = tblBT.colDatum.DateTime;
					nArzt = tblBT.colArztNr.Number;
					if (nArzt == SalNumber.Null) 
					{
						nArzt = dfArztNr.Number;
					}
					nHalter = tblBT.colHalterNr.Number;
					strZM = tblBT.colZM.Text;
					if (strZM == "") 
					{
						strZM = "Z";
					}
					strHalter = tblBT.colHalter.Text;
					Var.nRow = tblBT.InsertRow(Sys.TBL_MaxRow);
					tblBT.colDatum.DateTime = dtDatum;
					tblBT.colHalterNr.Number = nHalter;
					tblBT.colZM.Text = strZM;
					tblBT.colHalter.Text = strHalter;
					tblBT.colArztNr.Number = nArzt;
					tblBT.colErfDat.DateTime = SalDateTime.Current;
					// Set colAnfahrt = 10
					tblBT.SetFocusCell(Var.nRow, tblBT.colArztNr, 0, -1);
				}
				else if (strPTyp == "BHVI") 
				{
					dtDatum = tblBHVI.colDatum.DateTime;
					nArzt = tblBHVI.colArztNr.Number;
					if (nArzt == SalNumber.Null) 
					{
						nArzt = dfArztNr.Number;
					}
					nHalter = tblBHVI.colHalterNr.Number;
					strZM = tblBHVI.colZM.Text;
					if (strZM == "") 
					{
						strZM = "Z";
					}
					strHalter = tblBHVI.colHalter.Text;
					Var.nRow = tblBHVI.InsertRow(Sys.TBL_MaxRow);
					tblBHVI.colDatum.DateTime = dtDatum;
					tblBHVI.colHalterNr.Number = nHalter;
					tblBHVI.colZM.Text = strZM;
					tblBHVI.colHalter.Text = strHalter;
					tblBHVI.colArztNr.Number = nArzt;
					tblBHVI.colErfDat.DateTime = SalDateTime.Current;
					// Set colAnfahrt = 10
					tblBHVI.SetFocusCell(Var.nRow, tblBHVI.colArztNr, 0, -1);
				}
				else if (strPTyp == "BVD") 
				{
					dtDatum = tblBVD.colDatum.DateTime;
					nArzt = tblBVD.colArztNr.Number;
					if (nArzt == SalNumber.Null) 
					{
						nArzt = dfArztNr.Number;
					}
					nHalter = tblBVD.colHalterNr.Number;
					strZM = tblBVD.colZM.Text;
					if (strZM == "") 
					{
						strZM = "Z";
					}
					strHalter = tblBVD.colHalter.Text;
					Var.nRow = tblBVD.InsertRow(Sys.TBL_MaxRow);
					tblBVD.colDatum.DateTime = dtDatum;
					tblBVD.colHalterNr.Number = nHalter;
					tblBVD.colZM.Text = strZM;
					tblBVD.colHalter.Text = strHalter;
					tblBVD.colArztNr.Number = nArzt;
					tblBVD.colErfDat.DateTime = SalDateTime.Current;
					// Set colAnfahrt = 10
					tblBVD.SetFocusCell(Var.nRow, tblBVD.colArztNr, 0, -1);
				}
				else if (strPTyp == "Tbc") 
				{
					dtDatum = tblTbc.colDatum.DateTime;
					nArzt = tblTbc.colArztNr.Number;
					if (nArzt == SalNumber.Null) 
					{
						nArzt = dfArztNr.Number;
					}
					nHalter = tblTbc.colHalterNr.Number;
					strZM = tblTbc.colZM.Text;
					if (strZM == "") 
					{
						strZM = "Z";
					}
					strHalter = tblTbc.colHalter.Text;
					Var.nRow = tblTbc.InsertRow(Sys.TBL_MaxRow);
					tblTbc.colDatum.DateTime = dtDatum;
					tblTbc.colHalterNr.Number = nHalter;
					tblTbc.colZM.Text = strZM;
					tblTbc.colHalter.Text = strHalter;
					tblTbc.colArztNr.Number = nArzt;
					tblTbc.colErfDat.DateTime = SalDateTime.Current;
					// Set colAnfahrt = 10
					tblTbc.SetFocusCell(Var.nRow, tblTbc.colArztNr, 0, -1);
				}
				else if (strPTyp == "BTBV") 
				{
					dtDatum = tblBTBV.colDatum.DateTime;
					nArzt = tblBTBV.colArztNr.Number;
					if (nArzt == SalNumber.Null) 
					{
						nArzt = dfArztNr.Number;
					}
					nHalter = tblBTBV.colHalterNr.Number;
					strZM = tblBTBV.colZM.Text;
					if (strZM == "") 
					{
						strZM = "Z";
					}
					strHalter = tblBTBV.colHalter.Text;
					Var.nRow = tblBTBV.InsertRow(Sys.TBL_MaxRow);
					tblBTBV.colDatum.DateTime = dtDatum;
					tblBTBV.colHalterNr.Number = nHalter;
					tblBTBV.colZM.Text = strZM;
					tblBTBV.colHalter.Text = strHalter;
					tblBTBV.colArztNr.Number = nArzt;
					tblBTBV.colErfDat.DateTime = SalDateTime.Current;
					// Set colAnfahrt = 10
					tblBTBV.SetFocusCell(Var.nRow, tblBTBV.colArztNr, 0, -1);
				}
				else if (strPTyp == "BHVIBV") 
				{
					dtDatum = tblBHVIBV.colDatum.DateTime;
					nArzt = tblBHVIBV.colArztNr.Number;
					if (nArzt == SalNumber.Null) 
					{
						nArzt = dfArztNr.Number;
					}
					nHalter = tblBHVIBV.colHalterNr.Number;
					strZM = tblBHVIBV.colZM.Text;
					if (strZM == "") 
					{
						strZM = "Z";
					}
					strHalter = tblBHVIBV.colHalter.Text;
					Var.nRow = tblBHVIBV.InsertRow(Sys.TBL_MaxRow);
					tblBHVIBV.colDatum.DateTime = dtDatum;
					tblBHVIBV.colHalterNr.Number = nHalter;
					tblBHVIBV.colZM.Text = strZM;
					tblBHVIBV.colHalter.Text = strHalter;
					tblBHVIBV.colArztNr.Number = nArzt;
					tblBHVIBV.colErfDat.DateTime = SalDateTime.Current;
					// Set colAnfahrt = 10
					tblBHVIBV.SetFocusCell(Var.nRow, tblBHVIBV.colArztNr, 0, -1);
				}
				else if (strPTyp == "BVDBV") 
				{
					dtDatum = tblBVDBV.colDatum.DateTime;
					nArzt = tblBVDBV.colArztNr.Number;
					if (nArzt == SalNumber.Null) 
					{
						nArzt = dfArztNr.Number;
					}
					nHalter = tblBVDBV.colHalterNr.Number;
					strZM = tblBVDBV.colZM.Text;
					if (strZM == "") 
					{
						strZM = "Z";
					}
					strHalter = tblBVDBV.colHalter.Text;
					Var.nRow = tblBVDBV.InsertRow(Sys.TBL_MaxRow);
					tblBVDBV.colDatum.DateTime = dtDatum;
					tblBVDBV.colHalterNr.Number = nHalter;
					tblBVDBV.colZM.Text = strZM;
					tblBVDBV.colHalter.Text = strHalter;
					tblBVDBV.colArztNr.Number = nArzt;
					tblBVDBV.colErfDat.DateTime = SalDateTime.Current;
					// Set colAnfahrt = 10
					tblBVDBV.SetFocusCell(Var.nRow, tblBVDBV.colArztNr, 0, -1);
				}
				else if (strPTyp == "Bruc") 
				{
					dtDatum = tblBruc.colDatum.DateTime;
					nArzt = tblBruc.colArztNr.Number;
					if (nArzt == SalNumber.Null) 
					{
						nArzt = dfArztNr.Number;
					}
					nHalter = tblBruc.colHalterNr.Number;
					strZM = tblBruc.colZM.Text;
					if (strZM == "") 
					{
						strZM = "Z";
					}
					strHalter = tblBruc.colHalter.Text;
					Var.nRow = tblBruc.InsertRow(Sys.TBL_MaxRow);
					tblBruc.colDatum.DateTime = dtDatum;
					tblBruc.colHalterNr.Number = nHalter;
					tblBruc.colZM.Text = strZM;
					tblBruc.colHalter.Text = strHalter;
					tblBruc.colArztNr.Number = nArzt;
					tblBruc.colErfDat.DateTime = SalDateTime.Current;
					// Set colAnfahrt = 10
					tblBruc.SetFocusCell(Var.nRow, tblBruc.colArztNr, 0, -1);
				}
				else if (strPTyp == "AK") 
				{
					dtDatum = tblAK.colDatum.DateTime;
					nArzt = tblAK.colArztNr.Number;
					if (nArzt == SalNumber.Null) 
					{
						nArzt = dfArztNr.Number;
					}
					nHalter = tblAK.colHalterNr.Number;
					strZM = tblAK.colZM.Text;
					if (strZM == "") 
					{
						strZM = "Z";
					}
					strHalter = tblAK.colHalter.Text;
					Var.nRow = tblAK.InsertRow(Sys.TBL_MaxRow);
					tblAK.colDatum.DateTime = dtDatum;
					tblAK.colHalterNr.Number = nHalter;
					tblAK.colZM.Text = strZM;
					tblAK.colHalter.Text = strHalter;
					tblAK.colArztNr.Number = nArzt;
					tblAK.colErfDat.DateTime = SalDateTime.Current;
					// Set colAnfahrt = 10
					tblAK.SetFocusCell(Var.nRow, tblAK.colArztNr, 0, -1);
				}
				else if (strPTyp == "BrucBV") 
				{
					dtDatum = tblBrucBV.colDatum.DateTime;
					nArzt = tblBrucBV.colArztNr.Number;
					if (nArzt == SalNumber.Null) 
					{
						nArzt = dfArztNr.Number;
					}
					nHalter = tblBrucBV.colHalterNr.Number;
					strZM = tblBrucBV.colZM.Text;
					if (strZM == "") 
					{
						strZM = "Z";
					}
					strHalter = tblBrucBV.colHalter.Text;
					Var.nRow = tblBrucBV.InsertRow(Sys.TBL_MaxRow);
					tblBrucBV.colDatum.DateTime = dtDatum;
					tblBrucBV.colHalterNr.Number = nHalter;
					tblBrucBV.colZM.Text = strZM;
					tblBrucBV.colHalter.Text = strHalter;
					tblBrucBV.colArztNr.Number = nArzt;
					tblBrucBV.colErfDat.DateTime = SalDateTime.Current;
					// Set colAnfahrt = 10
					tblBrucBV.SetFocusCell(Var.nRow, tblBrucBV.colArztNr, 0, -1);
				}
				else if (strPTyp == "AKBV") 
				{
					dtDatum = tblAKBV.colDatum.DateTime;
					nArzt = tblAKBV.colArztNr.Number;
					if (nArzt == SalNumber.Null) 
					{
						nArzt = dfArztNr.Number;
					}
					nHalter = tblAKBV.colHalterNr.Number;
					strZM = tblAKBV.colZM.Text;
					if (strZM == "") 
					{
						strZM = "Z";
					}
					strHalter = tblAKBV.colHalter.Text;
					Var.nRow = tblAKBV.InsertRow(Sys.TBL_MaxRow);
					tblAKBV.colDatum.DateTime = dtDatum;
					tblAKBV.colHalterNr.Number = nHalter;
					tblAKBV.colZM.Text = strZM;
					tblAKBV.colHalter.Text = strHalter;
					tblAKBV.colArztNr.Number = nArzt;
					tblAKBV.colErfDat.DateTime = SalDateTime.Current;
					// Set colAnfahrt = 10
					tblAKBV.SetFocusCell(Var.nRow, tblAKBV.colArztNr, 0, -1);
				}
				else if (strPTyp == "BVDv")  // 20.06.11 Ä583
				{
					dtDatum = tblBVDv.colDatum.DateTime;
					nArzt = tblBVDv.colArztNr.Number;
					if (nArzt == SalNumber.Null) 
					{
						nArzt = dfArztNr.Number;
					}
					nHalter = tblBVDv.colHalterNr.Number;
					// Set strZM = tblBVDv.colZM
					// If strZM = ''
					// Set strZM = 'Z'
					strHalter = tblBVDv.colHalter.Text;
					Var.nRow = tblBVDv.InsertRow(Sys.TBL_MaxRow);
					tblBVDv.colDatum.DateTime = dtDatum;
					tblBVDv.colHalterNr.Number = nHalter;
					// Set tblBVDv.colZM = strZM
					tblBVDv.colHalter.Text = strHalter;
					tblBVDv.colArztNr.Number = nArzt;
					tblBVDv.colErfDat.DateTime = SalDateTime.Current;
					// Set colAnfahrt = 10
					tblBVDv.SetFocusCell(Var.nRow, tblBVDv.colArztNr, 0, -1);
				}
				else if (strPTyp == "TSKF")  // 21.04.17 Ä1540
				{
					dtDatum = tblTSKF.colDatum.DateTime;
					nArzt = tblTSKF.colArztNr.Number;
					if (nArzt == SalNumber.Null) 
					{
						nArzt = dfArztNr.Number;
					}
					nHalter = tblTSKF.colHalterNr.Number;
					strHalter = tblTSKF.colHalter.Text;
					Var.nRow = tblTSKF.InsertRow(Sys.TBL_MaxRow);
					tblTSKF.colDatum.DateTime = dtDatum;
					tblTSKF.colHalterNr.Number = nHalter;
					tblTSKF.colHalter.Text = strHalter;
					tblTSKF.colArztNr.Number = nArzt;
					tblTSKF.colErfDat.DateTime = SalDateTime.Current;
					// Set colAnfahrt = 10
					tblTSKF.SetFocusCell(Var.nRow, tblTSKF.colArztNr, 0, -1);
				}
				else if (strPTyp == "ParaTB")  // 21.04.17 Ä1540
				{
					dtDatum = tblParaTB.colDatum.DateTime;
					nArzt = tblParaTB.colArztNr.Number;
					if (nArzt == SalNumber.Null) 
					{
						nArzt = dfArztNr.Number;
					}
					nHalter = tblParaTB.colHalterNr.Number;
					strHalter = tblParaTB.colHalter.Text;
					Var.nRow = tblParaTB.InsertRow(Sys.TBL_MaxRow);
					tblParaTB.colDatum.DateTime = dtDatum;
					tblParaTB.colHalterNr.Number = nHalter;
					tblParaTB.colHalter.Text = strHalter;
					tblParaTB.colArztNr.Number = nArzt;
					tblParaTB.colErfDat.DateTime = SalDateTime.Current;
					// Set colAnfahrt = 10
					tblParaTB.SetFocusCell(Var.nRow, tblParaTB.colArztNr, 0, -1);
				}
				picStop.ClearImage();
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bHalterstamm"></param>
		/// <param name="nPArztNr"></param>
		/// <param name="strPReg"></param>
		/// <param name="strPTyp"></param>
		/// <returns></returns>
		public SalString PalCheckReg(SalBoolean bHalterstamm, SalNumber nPArztNr, SalString strPReg, SalString strPTyp)
		{
			#region Local Variables
			SalString strPSelect = "";
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				if (strPReg == "") 
				{
				}
				else
				{
					strHVN = "";
					strHNN = "";
					strHS = "";
					strHO = "";
					strPSelect = "where ";
					if (nPArztNr != 0 && nPArztNr != SalNumber.Null) 
					{
						strPSelect = strPSelect + Int.PalArztNr("h", nPArztNr, 0) + " AND ";
					}

					// 22.09.23
					// Set strPSelect = strPSelect ||  ' hdeaktiv IS NULL AND (@RIGHT(hregnr, ' || SalNumberToStrX(SalStrLength(strPReg),0) || ') = \'' || strPReg || '\'
					// OR @lics(hnn) LIKE @LICS(\'%' || strPReg || '%\') OR @lics(hvn) LIKE @LICS(\'%' || strPReg || '%\') )'
					strPSelect = strPSelect + " hdeaktiv IS NULL AND hregnr = \'" + strPReg + "\'";
					Int.SqlImmedSel(@"SELECT COUNT(*) INTO :frmTSK.nAnzHalter
from H " + strPSelect);
					if (nAnzHalter == 1) 
					{
						// 22.09.23 Ä2129 + ArztNr
						if (strPTyp == "BT") 
						{
							tblBT.colHalter.Text = "";
							Int.SqlImmedSel(@"SELECT hregnr, harztnr, hhalternr, hvn, hnn, hstr, hort, hbankeinzug
INTO :frmTSK.tblBT.colRegNr,  :frmTSK.tblBT.colArztNr, :frmTSK.tblBT.colHalterNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO, :frmTSK.nBankeinzug
from H  " + strPSelect);
						}
						else if (strPTyp == "BHVI") 
						{
							tblBHVI.colHalter.Text = "";
							Int.SqlImmedSel(@"SELECT hregnr, harztnr, hhalternr, hvn, hnn, hstr, hort, hbankeinzug
INTO :frmTSK.tblBHVI.colRegNr,  :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO, :frmTSK.nBankeinzug
from H  " + strPSelect);
						}
						else if (strPTyp == "BVD") 
						{
							tblBVD.colHalter.Text = "";
							Int.SqlImmedSel(@"SELECT hregnr, harztnr, hhalternr, hvn, hnn, hstr, hort, hbankeinzug
INTO :frmTSK.tblBVD.colRegNr,  :frmTSK.tblBVD.colArztNr, :frmTSK.tblBVD.colHalterNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO, :frmTSK.nBankeinzug
from H  " + strPSelect);
						}
						else if (strPTyp == "Tbc") 
						{
							tblTbc.colHalter.Text = "";
							Int.SqlImmedSel(@"SELECT hregnr, harztnr, hhalternr, hvn, hnn, hstr, hort, hbankeinzug
INTO :frmTSK.tblTbc.colRegNr,  :frmTSK.tblTbc.colArztNr, :frmTSK.tblTbc.colHalterNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO, :frmTSK.nBankeinzug
from H  " + strPSelect);
						}
						else if (strPTyp == "BTBV") 
						{
							tblBTBV.colHalter.Text = "";
							Int.SqlImmedSel(@"SELECT hregnr, harztnr, harztnr, hhalternr, hvn, hnn, hstr, hort, hbankeinzug
INTO :frmTSK.tblBTBV.colRegNr,  :frmTSK.tblBTBV.colArztNr, :frmTSK.tblBTBV.colHalterNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO, :frmTSK.nBankeinzug
from H  " + strPSelect);
						}
						else if (strPTyp == "BHVIBV") 
						{
							tblBHVIBV.colHalter.Text = "";
							Int.SqlImmedSel(@"SELECT hregnr, harztnr, hhalternr, hvn, hnn, hstr, hort, hbankeinzug
INTO :frmTSK.tblBHVIBV.colRegNr,  :frmTSK.tblBHVIBV.colArztNr, :frmTSK.tblBHVIBV.colHalterNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO, :frmTSK.nBankeinzug
from H  " + strPSelect);
						}
						else if (strPTyp == "BVDBV") 
						{
							tblBVDBV.colHalter.Text = "";
							Int.SqlImmedSel(@"SELECT hregnr, harztnr, hhalternr, hvn, hnn, hstr, hort, hbankeinzug
INTO :frmTSK.tblBVDBV.colRegNr, :frmTSK.tblBVDBV.colHalterNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO, :frmTSK.nBankeinzug
from H  " + strPSelect);
						}
						else if (strPTyp == "Bruc") 
						{
							tblBruc.colHalter.Text = "";
							Int.SqlImmedSel(@"SELECT hregnr, harztnr, hhalternr, hvn, hnn, hstr, hort, hbankeinzug
INTO :frmTSK.tblBruc.colRegNr,  :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO, :frmTSK.nBankeinzug
from H  " + strPSelect);
						}
						else if (strPTyp == "AK") 
						{
							tblAK.colHalter.Text = "";
							Int.SqlImmedSel(@"SELECT hregnr, harztnr, hhalternr, hvn, hnn, hstr, hort, hbankeinzug
INTO :frmTSK.tblAK.colRegNr,  :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO, :frmTSK.nBankeinzug
from H  " + strPSelect);
						}
						else if (strPTyp == "BrucBV") 
						{
							tblBrucBV.colHalter.Text = "";
							Int.SqlImmedSel(@"SELECT hregnr, harztnr, hhalternr, hvn, hnn, hstr, hort, hbankeinzug
INTO :frmTSK.tblBrucBV.colRegNr,  :frmTSK.tblBrucBV.colArztNr, :frmTSK.tblBrucBV.colHalterNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO, :frmTSK.nBankeinzug
from H  " + strPSelect);
						}
						else if (strPTyp == "AKBV") 
						{
							tblAKBV.colHalter.Text = "";
							Int.SqlImmedSel(@"SELECT hregnr, harztnr, hhalternr, hvn, hnn, hstr, hort, hbankeinzug
INTO :frmTSK.tblAKBV.colRegNr,  :frmTSK.tblAKBV.colArztNr, :frmTSK.tblAKBV.colHalterNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO, :frmTSK.nBankeinzug
from H  " + strPSelect);
						}
						else if (strPTyp == "BVDv") 
						{
							tblBVDv.colHalter.Text = "";
							Int.SqlImmedSel(@"SELECT hregnr, harztnr, hhalternr, hvn, hnn, hstr, hort, hbankeinzug
INTO :frmTSK.tblBVDv.colRegNr,  :frmTSK.tblBVDv.colArztNr, :frmTSK.tblBVDv.colHalterNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO, :frmTSK.nBankeinzug
from H  " + strPSelect);
						}
						else if (strPTyp == "TSKF") 
						{
							tblTSKF.colHalter.Text = "";
							Int.SqlImmedSel(@"SELECT hregnr, harztnr, hhalternr, hvn, hnn, hstr, hort, hbankeinzug
INTO :frmTSK.tblTSKF.colRegNr, :frmTSK.tblTSKF.colHalterNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO, :frmTSK.nBankeinzug
from H  " + strPSelect);
						}
						else if (strPTyp == "ParaTB") 
						{
							tblParaTB.colHalter.Text = "";
							Int.SqlImmedSel(@"SELECT hregnr, harztnr, hhalternr, hvn, hnn, hstr, hort, hbankeinzug
INTO :frmTSK.tblParaTB.colRegNr,  :frmTSK.tblParaTB.colArztNr, :frmTSK.tblParaTB.colHalterNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO, :frmTSK.nBankeinzug
from H  " + strPSelect);
						}

						if (strHVN != "") 
						{
							strHNN = strHNN + ", " + strHVN;
						}
						if (strHO != "") 
						{
							strHNN = strHNN + ", " + strHO;
						}
						if (strHS != "") 
						{
							strHNN = strHNN + ", " + strHS;
						}
						if (nBankeinzug == 1) 
						{
							Sal.MessageBox("Halter hat Bankeinzug!", strHNN, (Sys.MB_Ok | Sys.MB_IconAsterisk));
						}

						if (strPTyp == "BT") 
						{
							tblBT.colHalter.Text = strHNN;
						}
						else if (strPTyp == "BHVI") 
						{
							tblBHVI.colHalter.Text = strHNN;
						}
						else if (strPTyp == "BVD") 
						{
							tblBVD.colHalter.Text = strHNN;
						}
						else if (strPTyp == "Tbc") 
						{
							tblTbc.colHalter.Text = strHNN;
						}
						else if (strPTyp == "BTBV") 
						{
							tblBTBV.colHalter.Text = strHNN;
						}
						else if (strPTyp == "BHVIBV") 
						{
							tblBHVIBV.colHalter.Text = strHNN;
						}
						else if (strPTyp == "BVDBV") 
						{
							tblBVDBV.colHalter.Text = strHNN;
						}
						else if (strPTyp == "Bruc") 
						{
							tblBrucBV.colHalter.Text = strHNN;
						}
						else if (strPTyp == "AK") 
						{
							tblAK.colHalter.Text = strHNN;
						}
						else if (strPTyp == "BrucBV") 
						{
							tblBrucBV.colHalter.Text = strHNN;
						}
						else if (strPTyp == "AKBV") 
						{
							tblAKBV.colHalter.Text = strHNN;
						}
						else if (strPTyp == "BVDv") 
						{
							tblBVDv.colHalter.Text = strHNN;
						}
						else if (strPTyp == "TSKF") 
						{
							tblTSKF.colHalter.Text = strHNN;
						}
						else if (strPTyp == "ParaTB") 
						{
							tblParaTB.colHalter.Text = strHNN;
						}
					}
					else if (nAnzHalter > 1) 
					{
						Sal.WaitCursor(true);
						tblHalter.CreateWindow(this, "frmTSK" + strPTyp, nPArztNr, 0, strPReg, "", "", "", "");
					}
					else
					{
						// If tblBTBV.colHalter = '' And bHalterstamm
						// 23.08.04
						if (Var.bfrmHalter) 
						{
							App.frmHalter.DestroyWindow();
						}

						frmHalter.CreateWindow(this, "frmTSK" + strPTyp, nPArztNr, 0);
						this.SetTimer(1, 500);
					}
				}
			}

			return "";
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bHalterstamm"></param>
		/// <param name="nPArztNr"></param>
		/// <param name="nPHalterNr"></param>
		/// <param name="strPTyp"></param>
		/// <returns></returns>
		public SalString PalCheckHalterNr(SalBoolean bHalterstamm, SalNumber nPArztNr, SalNumber nPHalterNr, SalString strPTyp)
		{
			#region Actions
			using (new SalContext(this))
			{
				if (nPHalterNr == SalNumber.Null) 
				{
				}
				else
				{
					if (strPTyp == "BT") 
					{
						tblBT.colHalter.Text = "";
						strHVN = "";
						strHNN = "";
						strHS = "";
						strHO = "";
						Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblBT.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where " + Int.PalArztNr("h", nPArztNr, 0) + " AND hdeaktiv IS NULL AND hhalternr = " + nPHalterNr.ToString(0));
						tblBT.colHalter.Text = strHNN;
					}
					else if (strPTyp == "BHVI") 
					{
						tblBHVI.colHalter.Text = "";
						strHVN = "";
						strHNN = "";
						strHS = "";
						strHO = "";
						Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblBHVI.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where " + Int.PalArztNr("h", nPArztNr, 0) + " AND hdeaktiv IS NULL AND hhalternr = " + nPHalterNr.ToString(0));
						tblBHVI.colHalter.Text = strHNN;
					}
					else if (strPTyp == "BVD") 
					{
						tblBVD.colHalter.Text = "";
						strHVN = "";
						strHNN = "";
						strHS = "";
						strHO = "";
						Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblBVD.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where " + Int.PalArztNr("h", nPArztNr, 0) + " AND hdeaktiv IS NULL AND hhalternr = " + nPHalterNr.ToString(0));
						tblBVD.colHalter.Text = strHNN;
					}
					else if (strPTyp == "Tbc") 
					{
						tblTbc.colHalter.Text = "";
						strHVN = "";
						strHNN = "";
						strHS = "";
						strHO = "";
						Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblTbc.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where " + Int.PalArztNr("h", nPArztNr, 0) + " AND hdeaktiv IS NULL AND hhalternr = " + nPHalterNr.ToString(0));
						tblTbc.colHalter.Text = strHNN;
					}
					else if (strPTyp == "BTBV") 
					{
						tblBTBV.colHalter.Text = "";
						strHVN = "";
						strHNN = "";
						strHS = "";
						strHO = "";
						Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblBTBV.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where " + Int.PalArztNr("h", nPArztNr, 0) + " AND hdeaktiv IS NULL AND hhalternr = " + nPHalterNr.ToString(0));
						tblBTBV.colHalter.Text = strHNN;
					}
					else if (strPTyp == "BHVIBV") 
					{
						tblBHVIBV.colHalter.Text = "";
						strHVN = "";
						strHNN = "";
						strHS = "";
						strHO = "";
						Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblBHVIBV.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where " + Int.PalArztNr("h", nPArztNr, 0) + " AND hdeaktiv IS NULL AND hhalternr = " + nPHalterNr.ToString(0));
						tblBHVIBV.colHalter.Text = strHNN;
					}
					else if (strPTyp == "BVDBV") 
					{
						tblBVDBV.colHalter.Text = "";
						strHVN = "";
						strHNN = "";
						strHS = "";
						strHO = "";
						Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblBVDBV.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where " + Int.PalArztNr("h", nPArztNr, 0) + " AND hdeaktiv IS NULL AND hhalternr = " + nPHalterNr.ToString(0));
						tblBVDBV.colHalter.Text = strHNN;
					}
					else if (strPTyp == "Bruc") 
					{
						tblBruc.colHalter.Text = "";
						strHVN = "";
						strHNN = "";
						strHS = "";
						strHO = "";
						Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblBruc.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where " + Int.PalArztNr("h", nPArztNr, 0) + " AND hdeaktiv IS NULL AND hhalternr = " + nPHalterNr.ToString(0));
						tblBruc.colHalter.Text = strHNN;
					}
					else if (strPTyp == "AK") 
					{
						tblAK.colHalter.Text = "";
						strHVN = "";
						strHNN = "";
						strHS = "";
						strHO = "";
						Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblAK.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where " + Int.PalArztNr("h", nPArztNr, 0) + " AND hdeaktiv IS NULL AND hhalternr = " + nPHalterNr.ToString(0));
						tblAK.colHalter.Text = strHNN;
					}
					else if (strPTyp == "BrucBV") 
					{
						tblBrucBV.colHalter.Text = "";
						strHVN = "";
						strHNN = "";
						strHS = "";
						strHO = "";
						Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblBrucBV.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where " + Int.PalArztNr("h", nPArztNr, 0) + " AND hdeaktiv IS NULL AND hhalternr = " + nPHalterNr.ToString(0));
						tblBrucBV.colHalter.Text = strHNN;
					}
					else if (strPTyp == "AKBV") 
					{
						tblAKBV.colHalter.Text = "";
						strHVN = "";
						strHNN = "";
						strHS = "";
						strHO = "";
						Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblAKBV.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where " + Int.PalArztNr("h", nPArztNr, 0) + " AND hdeaktiv IS NULL AND hhalternr = " + nPHalterNr.ToString(0));
						tblAKBV.colHalter.Text = strHNN;
					}
					else if (strPTyp == "BVDv") 
					{
						tblBVDv.colHalter.Text = "";
						strHVN = "";
						strHNN = "";
						strHS = "";
						strHO = "";
						Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblBVDv.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where " + Int.PalArztNr("h", nPArztNr, 0) + " AND hdeaktiv IS NULL AND hhalternr = " + nPHalterNr.ToString(0));
						tblBVDv.colHalter.Text = strHNN;
					}
					else if (strPTyp == "TSKF") 
					{
						tblTSKF.colHalter.Text = "";
						strHVN = "";
						strHNN = "";
						strHS = "";
						strHO = "";
						Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblTSKF.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where " + Int.PalArztNr("h", nPArztNr, 0) + " AND hdeaktiv IS NULL AND hhalternr = " + nPHalterNr.ToString(0));
						tblTSKF.colHalter.Text = strHNN;
					}
					else if (strPTyp == "ParaTB") 
					{
						tblParaTB.colHalter.Text = "";
						strHVN = "";
						strHNN = "";
						strHS = "";
						strHO = "";
						Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblParaTB.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where " + Int.PalArztNr("h", nPArztNr, 0) + " AND hdeaktiv IS NULL AND hhalternr = " + nPHalterNr.ToString(0));
						tblParaTB.colHalter.Text = strHNN;
					}

					if (strHVN != "") 
					{
						strHNN = strHNN + ", " + strHVN;
					}
					if (strHO != "") 
					{
						strHNN = strHNN + ", " + strHO;
					}
					if (strHS != "") 
					{
						strHNN = strHNN + ", " + strHS;
					}

					if (strPTyp == "BT") 
					{
						tblBT.colHalter.Text = strHNN;
					}
					else if (strPTyp == "BHVI") 
					{
						tblBHVI.colHalter.Text = strHNN;
					}
					else if (strPTyp == "BVD") 
					{
						tblBVD.colHalter.Text = strHNN;
					}
					else if (strPTyp == "Tbc") 
					{
						tblTbc.colHalter.Text = strHNN;
					}
					else if (strPTyp == "BTBV") 
					{
						tblBTBV.colHalter.Text = strHNN;
					}
					else if (strPTyp == "BHVIBV") 
					{
						tblBHVIBV.colHalter.Text = strHNN;
					}
					else if (strPTyp == "BVDBV") 
					{
						tblBVDBV.colHalter.Text = strHNN;
					}
					else if (strPTyp == "Bruc") 
					{
						tblBruc.colHalter.Text = strHNN;
					}
					else if (strPTyp == "AK") 
					{
						tblAK.colHalter.Text = strHNN;
					}
					else if (strPTyp == "BrucBV") 
					{
						tblBrucBV.colHalter.Text = strHNN;
					}
					else if (strPTyp == "AKBV") 
					{
						tblAKBV.colHalter.Text = strHNN;
					}
					else if (strPTyp == "BVDv") 
					{
						tblBVDv.colHalter.Text = strHNN;
					}
					else if (strPTyp == "TSKF") 
					{
						tblTSKF.colHalter.Text = strHNN;
					}
					else if (strPTyp == "ParaTB") 
					{
						tblParaTB.colHalter.Text = strHNN;
					}

					if (strHNN == "" && bHalterstamm) 
					{
						frmHalter.CreateWindow(this, "frmTSK" + strPTyp, nPArztNr, 0);
						this.SetTimer(1, 500);
					}
				}
			}

			return "";
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalTSKSave()
		{
			#region Local Variables
			SalBoolean bPOk = false;
			SalString strPBeihilfeText = "";
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				Sal.WaitCursor(true);
				// 22.09.23 Ä2129 + tskbeihilfeguid
				// Call SqlConnection( hSqlTSK)
				// BT
				tblBT.KillCellEdit();
				if (tblBT.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					Var.nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblBT.FindNextRow(ref Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblBT.SetFocusRow(Var.nRow);
						if (tblBT.colHalterNr.Number != Sys.NUMBER_Null) 
						{
							Int.SqlIstDa("FROM tsk WHERE tskarztnr= :frmTSK.tblBT.colArztNr AND tskerfdat = :frmTSK.tblBT.colErfDat AND tskdeaktiv IS NULL", ref Var.bExists);
							// 27.12.07 A186
							if (Var.bExists) 
							{
								Int.SqlImmed(@"UPDATE tsk SET
tskarztnr = :frmTSK.tblBT.colArztNr,
tskhalternr = :frmTSK.tblBT.colHalterNr,
tskregnr = :frmTSK.tblBT.colRegNr,
tskerfdat = :frmTSK.tblBT.colErfDat,
tskzm = :frmTSK.tblBT.colZM,
tskdatum = :frmTSK.tblBT.colDatum
WHERE tskarztnr= :frmTSK.tblBT.colArztNr AND tskerfdat = :frmTSK.tblBT.colErfDat");
								bPOk = Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr= :frmTSK.tblBT.colArztNr AND tskperfdat = :frmTSK.tblBT.colErfDat");
							}
							else
							{
								// 10.02.09 OTÄ172 + , tskbeihilfe, tskbeihdat, tskbeihtext
								// 18.06.09 OTÄ213 keine Beihilfe möglich -> Es wird keine Beihilfe mehr gewährt.
								bPOk = Int.SqlImmed(@"INSERT INTO tsk
(tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tsktyp, tskbeihilfe, tskbeihdat, tskbeihtext)
VALUES( :frmTSK.tblBT.colArztNr, :frmTSK.tblBT.colHalterNr, :frmTSK.tblBT.colRegNr, :frmTSK.tblBT.colErfDat, :frmTSK.tblBT.colZM,
:frmTSK.tblBT.colDatum, 'BT', 0, '2009-01-01', 'Es wird keine Beihilfe mehr gewährt.')");
							}
							// 22.09.23 Ä2129
							if (tblBT.colDatum.DateTime >= new SalDateTime(2023, 7, 1))  // 27.10.23 Ä2129
							{
								if (tblBT.colBEGuid.Text == "") 
								{
									nBeBetrag = 0;
								}
								Int.SqlImmedSel("SELECT bedate, bebetrag INTO :frmTSK.dtBeDatum, :frmTSK.nBeBetrag FROM be WHERE beguid = :frmTSK.tblBT.colBEGuid");
								if (nBeBetrag == 0) 
								{
									strTSKBeihText = "Es wurde keine Beihilfe gewährt.";
									// Set dtBeDatum = DATETIME_Null
								}
								else
								{
									strTSKBeihText = "Es wurde Beihilfe gewährt.";
								}
								Int.SqlImmed(@"UPDATE tsk SET tskbeihtext = :frmTSK.strTSKBeihText, tskbeihilfe = :frmTSK.nBeBetrag, tskbeihdat = :frmTSK.dtBeDatum, tskbeihilfeguid = :frmTSK.tblBT.colBEGuid
WHERE tskarztnr= :frmTSK.tblBT.colArztNr AND tskerfdat = :frmTSK.tblBT.colErfDat");
							}
							// 02.02.09
							if (bPOk) 
							{
								if (this.tblBT.colRinder.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBT.colArztNr, :frmTSK.tblBT.colHalterNr, :frmTSK.tblBT.colRegNr, :frmTSK.tblBT.colErfDat,
1, '602bb', 'BT-V.Impfungen Rinder', :frmTSK.tblBT.colRinder, 'x' )");
								}
								if (this.tblBT.colSchafe.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBT.colArztNr, :frmTSK.tblBT.colHalterNr, :frmTSK.tblBT.colRegNr, :frmTSK.tblBT.colErfDat,
2, '602d', 'BT-V.Impfungen Schafe/Ziegen', :frmTSK.tblBT.colSchafe, 'x' )");
								}
								if (this.tblBT.colAnfahrt.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBT.colArztNr, :frmTSK.tblBT.colHalterNr, :frmTSK.tblBT.colRegNr, :frmTSK.tblBT.colErfDat,
3, '§9(2)', 'Anfahrt', :frmTSK.tblBT.colAnfahrt, 'dkm' )");
								}
								if (this.tblBT.colBG.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBT.colArztNr, :frmTSK.tblBT.colHalterNr, :frmTSK.tblBT.colRegNr, :frmTSK.tblBT.colErfDat,
4, '602h', 'Bestandsgebühr', :frmTSK.tblBT.colBG, 'x' )");
								}
								if (this.tblBT.colIB.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBT.colArztNr, :frmTSK.tblBT.colHalterNr, :frmTSK.tblBT.colRegNr, :frmTSK.tblBT.colErfDat,
5, '101', 'Impfbescheinigung', :frmTSK.tblBT.colIB, 'x' )");
								}
								if (this.tblBT.colAufwand.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBT.colArztNr, :frmTSK.tblBT.colHalterNr, :frmTSK.tblBT.colRegNr, :frmTSK.tblBT.colErfDat,
6, '§7GOT/704', 'besonderer Zeitaufwand', :frmTSK.tblBT.colAufwand, 'x15 min' )");
								}
								if (this.tblBT.colVerbrauch.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBT.colArztNr, :frmTSK.tblBT.colHalterNr, :frmTSK.tblBT.colRegNr, :frmTSK.tblBT.colErfDat,
7, '§1(1)', 'Verbrauch', :frmTSK.tblBT.colVerbrauch, '€' )");
								}
								if (this.tblBT.colAuslagen.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBT.colArztNr, :frmTSK.tblBT.colHalterNr, :frmTSK.tblBT.colRegNr, :frmTSK.tblBT.colErfDat,
8, '§1(1)', 'Auslagen', :frmTSK.tblBT.colAuslagen, '€' )");
								}
							}
						}
						tblBT.SetRowFlags(Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
					hSqlTSK.Commit();
				}
				// BHVI
				tblBHVI.KillCellEdit();
				if (tblBHVI.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					Var.nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblBHVI.FindNextRow(ref Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblBHVI.SetFocusRow(Var.nRow);
						if (tblBHVI.colHalterNr.Number != Sys.NUMBER_Null) 
						{
							Int.SqlIstDa("FROM tsk WHERE tskarztnr= :frmTSK.tblBHVI.colArztNr AND tskerfdat = :frmTSK.tblBHVI.colErfDat AND tskdeaktiv IS NULL", ref Var.bExists);
							// 27.12.07 A186
							if (Var.bExists) 
							{
								Int.SqlImmed(@"UPDATE tsk SET
tskarztnr = :frmTSK.tblBHVI.colArztNr,
tskhalternr = :frmTSK.tblBHVI.colHalterNr,
tskregnr = :frmTSK.tblBHVI.colRegNr,
tskerfdat = :frmTSK.tblBHVI.colErfDat,
tskzm = :frmTSK.tblBHVI.colZM,
tskdatum = :frmTSK.tblBHVI.colDatum
WHERE tskarztnr= :frmTSK.tblBHVI.colArztNr AND tskerfdat = :frmTSK.tblBHVI.colErfDat");
								bPOk = Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr= :frmTSK.tblBHVI.colArztNr AND tskperfdat = :frmTSK.tblBHVI.colErfDat");
							}
							else
							{
								bPOk = Int.SqlImmed(@"INSERT INTO tsk
(tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tsktyp)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat, :frmTSK.tblBHVI.colZM,
:frmTSK.tblBHVI.colDatum, 'BHVI')");
							}
							// 22.09.23 Ä2129
							if (tblBHVI.colDatum.DateTime >= new SalDateTime(2023, 7, 1))  // 27.10.23 Ä2129
							{
								if (tblBHVI.colBEGuid.Text == "") 
								{
									nBeBetrag = 0;
								}
								Int.SqlImmedSel("SELECT bedate, bebetrag INTO :frmTSK.dtBeDatum, :frmTSK.nBeBetrag FROM be WHERE beguid = :frmTSK.tblBHVI.colBEGuid");
								if (nBeBetrag == 0) 
								{
									strTSKBeihText = "Es wurde keine Beihilfe gewährt.";
									// Set dtBeDatum = DATETIME_Null
								}
								else
								{
									strTSKBeihText = "Es wurde Beihilfe gewährt.";
								}
								Int.SqlImmed(@"UPDATE tsk SET tskbeihtext = :frmTSK.strTSKBeihText, tskbeihilfe = :frmTSK.nBeBetrag, tskbeihdat = :frmTSK.dtBeDatum, tskbeihilfeguid = :frmTSK.tblBHVI.colBEGuid
WHERE tskarztnr= :frmTSK.tblBHVI.colArztNr AND tskerfdat = :frmTSK.tblBHVI.colErfDat");
							}
							if (bPOk) 
							{
								// 27.02.23 Ä2083 neue GOT
								if (this.tblBHVI.colDatum.DateTime < new SalDateTime(2022, 11, 22)) 
								{
									if (this.tblBHVI.col11.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
11, '602bb', 'BHV I-Impfungen', :frmTSK.tblBHVI.col11, '' )");
									}
									// 24.05.17 Ä1549 + /ParaTB-
									if (this.tblBHVI.col12.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
12, 'Bl5b', 'BHV-I/ParaTB-Blutproben Milchkühe', :frmTSK.tblBHVI.col12, '' )");
									}
									if (this.tblBHVI.col13.Number != Sys.NUMBER_Null) 
									{
										// 13.09.10 OTÄ399 + /Rind Laufstall
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
13, 'Bl5bb', 'BHV I/ParaTB-Blutproben Ammenkühe/Rind Laufstall', :frmTSK.tblBHVI.col13, '' )");
									}
									if (this.tblBHVI.col14.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
14, 'G3.1', 'BHV I/ParaTB-Milchproben Einzelmilch', :frmTSK.tblBHVI.col14, '' )");
									}
									if (this.tblBHVI.col15.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
15, 'G3.1', 'BHV I/ParaTB-Milchproben Sammelmilch', :frmTSK.tblBHVI.col15, '' )");
									}
									if (this.tblBHVI.colAnfahrt.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
3, '§9(2)', 'Anfahrt', :frmTSK.tblBHVI.colAnfahrt, 'dkm' )");
									}
									if (this.tblBHVI.colBG.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
4, '602h', 'Bestandsgebühr', :frmTSK.tblBHVI.colBG, 'x' )");
									}
									if (this.tblBHVI.colIB.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
5, '101', 'Impfbescheinigung', :frmTSK.tblBHVI.colIB, 'x' )");
									}
									if (this.tblBHVI.colAufwand.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
6, '§7GOT/704', 'besonderer Zeitaufwand', :frmTSK.tblBHVI.colAufwand, 'x15 min' )");
									}
									if (this.tblBHVI.colVerbrauch.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
7, '§1(1)', 'Verbrauch', :frmTSK.tblBHVI.colVerbrauch, '€' )");
									}
									if (this.tblBHVI.colAuslagen.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
8, '§1(1)', 'Auslagen', :frmTSK.tblBHVI.colAuslagen, '€' )");
									}
									if (this.tblBHVI.col9.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
9, '302', 'Bearbeitung zum Versand', :frmTSK.tblBHVI.col9, '' )");
									}
									if (this.tblBHVI.col20.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
20, '705 §4 (3)', 'BHV I/ParaTB-Impfungen', :frmTSK.tblBHVI.col20, 'x15 min' )");
									}
									if (this.tblBHVI.col21.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
21, '705 §4 (3)', 'BHV I/ParaTB-Blutproben', :frmTSK.tblBHVI.col21, 'x15 min' )");
									}
									if (this.tblBHVI.col22.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
22, '705 §4 (3)', 'BHV I/ParaTB-Milchproben', :frmTSK.tblBHVI.col22, 'x15 min' )");
									}
								}
								else
								{
									if (this.tblBHVI.col11.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
11, '213', 'BHV I-Impfungen', :frmTSK.tblBHVI.col11, '' )");
									}
									// 24.05.17 Ä1549 + /ParaTB-
									if (this.tblBHVI.col16.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
16, '627', 'BHV-I/ParaTB-Blutproben bis 4 Rinder', :frmTSK.tblBHVI.col16, '' )");
									}
									if (this.tblBHVI.col17.Number != Sys.NUMBER_Null) 
									{
										// 13.09.10 OTÄ399 + /Rind Laufstall
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
17, '629', 'BHV I/ParaTB-Blutproben über 4 Rinder', :frmTSK.tblBHVI.col17, '' )");
									}
									if (this.tblBHVI.col18.Number != Sys.NUMBER_Null) 
									{
										// 13.09.10 OTÄ399 + /Rind Laufstall
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
18, '634,635', 'BHV I/ParaTB-Blutpr. unzureichend fixiert / Fleischrd.', :frmTSK.tblBHVI.col18, '' )");
									}
									if (this.tblBHVI.col14.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
14, '707', 'BHV I/ParaTB-Milchproben Einzelmilch', :frmTSK.tblBHVI.col14, '' )");
									}
									if (this.tblBHVI.col15.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
15, '§8, 707', 'BHV I/ParaTB-Milchproben Sammelmilch', :frmTSK.tblBHVI.col15, '' )");
									}
									if (this.tblBHVI.col20.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
20, '§5, 255', 'BHV I/ParaTB-Impfungen', :frmTSK.tblBHVI.col20, 'x15 min' )");
									}
									if (this.tblBHVI.col21.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
21, '§5, 255', 'BHV I/ParaTB-Blutproben', :frmTSK.tblBHVI.col21, 'x15 min' )");
									}
									if (this.tblBHVI.col22.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
22, '§5, 255', 'BHV I/ParaTB-Milchproben', :frmTSK.tblBHVI.col22, 'x15 min' )");
									}
									if (this.tblBHVI.colAnfahrt.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
3, '§10', 'Anfahrt', :frmTSK.tblBHVI.colAnfahrt, 'dkm' )");
									}
									if (this.tblBHVI.colBG.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
4, '44', 'Bestandsgebühr', :frmTSK.tblBHVI.colBG, 'x' )");
									}
									if (this.tblBHVI.colIB.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
5, '87', 'Impfbescheinigung', :frmTSK.tblBHVI.colIB, 'x' )");
									}
									if (this.tblBHVI.colDoku.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
19, '3', 'Dokumentation', :frmTSK.tblBHVI.colDoku, 'x' )");
									}
									if (this.tblBHVI.col9.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
9, '144', 'Bearbeitung zum Versand', :frmTSK.tblBHVI.col9, '' )");
									}
									if (this.tblBHVI.colVerbrauch.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
7, '§7', 'Verbrauch', :frmTSK.tblBHVI.colVerbrauch, '€' )");
									}
									if (this.tblBHVI.colAuslagen.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat,
8, '§7', 'Auslagen', :frmTSK.tblBHVI.colAuslagen, '€' )");
									}
								}
							}
						}
						tblBHVI.SetRowFlags(Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
					hSqlTSK.Commit();
				}
				// BVD
				tblBVD.KillCellEdit();
				if (tblBVD.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					Var.nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblBVD.FindNextRow(ref Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblBVD.SetFocusRow(Var.nRow);
						if (tblBVD.colHalterNr.Number != Sys.NUMBER_Null) 
						{
							Int.SqlIstDa("FROM tsk WHERE tskarztnr= :frmTSK.tblBVD.colArztNr AND tskerfdat = :frmTSK.tblBVD.colErfDat AND tskdeaktiv IS NULL", ref Var.bExists);
							// 27.12.07 A186
							if (Var.bExists) 
							{
								Int.SqlImmed(@"UPDATE tsk SET
tskarztnr = :frmTSK.tblBVD.colArztNr,
tskhalternr = :frmTSK.tblBVD.colHalterNr,
tskregnr = :frmTSK.tblBVD.colRegNr,
tskerfdat = :frmTSK.tblBVD.colErfDat,
tskzm = :frmTSK.tblBVD.colZM,
tskdatum = :frmTSK.tblBVD.colDatum
WHERE tskarztnr= :frmTSK.tblBVD.colArztNr AND tskerfdat = :frmTSK.tblBVD.colErfDat");
								bPOk = Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr= :frmTSK.tblBVD.colArztNr AND tskperfdat = :frmTSK.tblBVD.colErfDat");
							}
							else
							{
								// 09.03.09 OTÄ194 + , tskbeihilfe, tskbeihdat, tskbeihtext
								// 18.06.09 OTÄ213 keine Beihilfe möglich -> Es wird keine Beihilfe mehr gewährt.
								bPOk = Int.SqlImmed(@"INSERT INTO tsk
(tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tsktyp, tskbeihilfe, tskbeihdat, tskbeihtext)
VALUES( :frmTSK.tblBVD.colArztNr, :frmTSK.tblBVD.colHalterNr, :frmTSK.tblBVD.colRegNr, :frmTSK.tblBVD.colErfDat, :frmTSK.tblBVD.colZM,
:frmTSK.tblBVD.colDatum, 'BVD', 0, '2009-01-01', 'Es wird keine Beihilfe mehr gewährt.'  )");
							}
							// 22.09.23 Ä2129
							if (tblBVD.colDatum.DateTime >= new SalDateTime(2023, 7, 1))  // 27.10.23 Ä2129
							{
								if (tblBVD.colBEGuid.Text == "") 
								{
									nBeBetrag = 0;
								}
								Int.SqlImmedSel("SELECT bedate, bebetrag INTO :frmTSK.dtBeDatum, :frmTSK.nBeBetrag FROM be WHERE beguid = :frmTSK.tblBVD.colBEGuid");
								if (nBeBetrag == 0) 
								{
									strTSKBeihText = "Es wurde keine Beihilfe gewährt.";
									// Set dtBeDatum = DATETIME_Null
								}
								else
								{
									strTSKBeihText = "Es wurde Beihilfe gewährt.";
								}
								Int.SqlImmed(@"UPDATE tsk SET tskbeihtext = :frmTSK.strTSKBeihText, tskbeihilfe = :frmTSK.nBeBetrag, tskbeihdat = :frmTSK.dtBeDatum, tskbeihilfeguid = :frmTSK.tblBVD.colBEGuid
WHERE tskarztnr= :frmTSK.tblBVD.colArztNr AND tskerfdat = :frmTSK.tblBVD.colErfDat");
							}

							if (bPOk) 
							{
								if (this.tblBVD.col11.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVD.colArztNr, :frmTSK.tblBVD.colHalterNr, :frmTSK.tblBVD.colRegNr, :frmTSK.tblBVD.colErfDat,
11, '602bb', 'BVD-Impfungen', :frmTSK.tblBVD.col11, '' )");
								}
								if (this.tblBVD.col12.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVD.colArztNr, :frmTSK.tblBVD.colHalterNr, :frmTSK.tblBVD.colRegNr, :frmTSK.tblBVD.colErfDat,
12, 'Bl5b', 'BVD-Blutproben Milchkühe', :frmTSK.tblBVD.col12, '' )");
								}
								if (this.tblBVD.col13.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVD.colArztNr, :frmTSK.tblBVD.colHalterNr, :frmTSK.tblBVD.colRegNr, :frmTSK.tblBVD.colErfDat,
13, 'Bl5bb', 'BVD-Blutproben Ammenkühe', :frmTSK.tblBVD.col13, '' )");
								}
								if (this.tblBVD.colAnfahrt.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVD.colArztNr, :frmTSK.tblBVD.colHalterNr, :frmTSK.tblBVD.colRegNr, :frmTSK.tblBVD.colErfDat,
3, '§9(2)', 'Anfahrt', :frmTSK.tblBVD.colAnfahrt, 'dkm' )");
								}
								if (this.tblBVD.colBG.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVD.colArztNr, :frmTSK.tblBVD.colHalterNr, :frmTSK.tblBVD.colRegNr, :frmTSK.tblBVD.colErfDat,
4, '602h', 'Bestandsgebühr', :frmTSK.tblBVD.colBG, 'x' )");
								}
								if (this.tblBVD.colIB.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVD.colArztNr, :frmTSK.tblBVD.colHalterNr, :frmTSK.tblBVD.colRegNr, :frmTSK.tblBVD.colErfDat,
5, '101', 'Impfbescheinigung', :frmTSK.tblBVD.colIB, 'x' )");
								}
								if (this.tblBVD.colAufwand.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVD.colArztNr, :frmTSK.tblBVD.colHalterNr, :frmTSK.tblBVD.colRegNr, :frmTSK.tblBVD.colErfDat,
6, '§7GOT/704', 'besonderer Zeitaufwand', :frmTSK.tblBVD.colAufwand, 'x15 min' )");
								}
								if (this.tblBVD.col9.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVD.colArztNr, :frmTSK.tblBVD.colHalterNr, :frmTSK.tblBVD.colRegNr, :frmTSK.tblBVD.colErfDat,
9, '302', 'Bearbeitung zum Versand', :frmTSK.tblBVD.col9, '' )");
								}
								if (this.tblBVD.colVerbrauch.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVD.colArztNr, :frmTSK.tblBVD.colHalterNr, :frmTSK.tblBVD.colRegNr, :frmTSK.tblBVD.colErfDat,
7, '§1(1)', 'Verbrauch', :frmTSK.tblBVD.colVerbrauch, '€' )");
								}
								if (this.tblBVD.colAuslagen.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVD.colArztNr, :frmTSK.tblBVD.colHalterNr, :frmTSK.tblBVD.colRegNr, :frmTSK.tblBVD.colErfDat,
8, '§1(1)', 'Auslagen', :frmTSK.tblBVD.colAuslagen, '€' )");
								}
							}
						}
						tblBVD.SetRowFlags(Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
					hSqlTSK.Commit();
				}
				// Tbc
				tblTbc.KillCellEdit();
				if (tblTbc.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					Var.nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblTbc.FindNextRow(ref Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblTbc.SetFocusRow(Var.nRow);
						if (tblTbc.colHalterNr.Number != Sys.NUMBER_Null) 
						{
							Int.SqlIstDa("FROM tsk WHERE tskarztnr= :frmTSK.tblTbc.colArztNr AND tskerfdat = :frmTSK.tblTbc.colErfDat AND tskdeaktiv IS NULL", ref Var.bExists);
							// 27.12.07 A186
							if (Var.bExists) 
							{
								Int.SqlImmed(@"UPDATE tsk SET
tskarztnr = :frmTSK.tblTbc.colArztNr,
tskhalternr = :frmTSK.tblTbc.colHalterNr,
tskregnr = :frmTSK.tblTbc.colRegNr,
tskerfdat = :frmTSK.tblTbc.colErfDat,
tskzm = :frmTSK.tblTbc.colZM,
tskdatum = :frmTSK.tblTbc.colDatum
WHERE tskarztnr= :frmTSK.tblTbc.colArztNr AND tskerfdat = :frmTSK.tblTbc.colErfDat");
								bPOk = Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr= :frmTSK.tblTbc.colArztNr AND tskperfdat = :frmTSK.tblTbc.colErfDat");
							}
							else
							{
								// 08.12.09 OTÄ355 Beihilfe -> 2009-01-01
								bPOk = Int.SqlImmed(@"INSERT INTO tsk
(tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tsktyp, tskbeihilfe, tskbeihdat, tskbeihtext)
VALUES( :frmTSK.tblTbc.colArztNr, :frmTSK.tblTbc.colHalterNr, :frmTSK.tblTbc.colRegNr, :frmTSK.tblTbc.colErfDat, :frmTSK.tblTbc.colZM,
:frmTSK.tblTbc.colDatum, 'Tbc', 0, '2009-01-01', 'Es wird keine Beihilfe mehr gewährt.')");
							}
							// 22.09.23 Ä2129
							if (tblTbc.colDatum.DateTime >= new SalDateTime(2023, 7, 1))  // 27.10.23 Ä2129
							{
								if (tblTbc.colBEGuid.Text == "") 
								{
									nBeBetrag = 0;
								}
								Int.SqlImmedSel("SELECT bedate, bebetrag INTO :frmTSK.dtBeDatum, :frmTSK.nBeBetrag FROM be WHERE beguid = :frmTSK.tblTbc.colBEGuid");
								if (nBeBetrag == 0) 
								{
									strTSKBeihText = "Es wurde keine Beihilfe gewährt.";
									// Set dtBeDatum = DATETIME_Null
								}
								else
								{
									strTSKBeihText = "Es wurde Beihilfe gewährt.";
								}
								Int.SqlImmed(@"UPDATE tsk SET tskbeihtext = :frmTSK.strTSKBeihText, tskbeihilfe = :frmTSK.nBeBetrag, tskbeihdat = :frmTSK.dtBeDatum, tskbeihilfeguid = :frmTSK.tblTbc.colBEGuid
WHERE tskarztnr= :frmTSK.tblTbc.colArztNr AND tskerfdat = :frmTSK.tblTbc.colErfDat");
							}

							if (bPOk) 
							{
								if (this.tblTbc.col11.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblTbc.colArztNr, :frmTSK.tblTbc.colHalterNr, :frmTSK.tblTbc.colRegNr, :frmTSK.tblTbc.colErfDat,
11, '201', 'intrakutaner Tuberkulin-Test mono', :frmTSK.tblTbc.col11, '' )");
								}
								if (this.tblTbc.col12.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblTbc.colArztNr, :frmTSK.tblTbc.colHalterNr, :frmTSK.tblTbc.colRegNr, :frmTSK.tblTbc.colErfDat,
12, '201b', 'intrakutaner Tuberkulin-Test simultan', :frmTSK.tblTbc.col12, '' )");
								}
								if (this.tblTbc.colAnfahrt.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblTbc.colArztNr, :frmTSK.tblTbc.colHalterNr, :frmTSK.tblTbc.colRegNr, :frmTSK.tblTbc.colErfDat,
3, '§9(2)', 'Anfahrt', :frmTSK.tblTbc.colAnfahrt, 'dkm' )");
								}
								if (this.tblTbc.colBG.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblTbc.colArztNr, :frmTSK.tblTbc.colHalterNr, :frmTSK.tblTbc.colRegNr, :frmTSK.tblTbc.colErfDat,
4, '602h', 'Bestandsgebühr', :frmTSK.tblTbc.colBG, 'x' )");
								}
								if (this.tblTbc.colImpfbesch.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblTbc.colArztNr, :frmTSK.tblTbc.colHalterNr, :frmTSK.tblTbc.colRegNr, :frmTSK.tblTbc.colErfDat,
5, '101', 'Impfbescheinigung', :frmTSK.tblTbc.colImpfbesch, 'x' )");
								}
								if (this.tblTbc.colAufwand.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblTbc.colArztNr, :frmTSK.tblTbc.colHalterNr, :frmTSK.tblTbc.colRegNr, :frmTSK.tblTbc.colErfDat,
6, '§7GOT/704', 'besonderer Zeitaufwand', :frmTSK.tblTbc.colAufwand, 'x15 min' )");
								}
								if (this.tblTbc.colVersand.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblTbc.colArztNr, :frmTSK.tblTbc.colHalterNr, :frmTSK.tblTbc.colRegNr, :frmTSK.tblTbc.colErfDat,
9, '302', 'Bearbeitung zum Versand', :frmTSK.tblTbc.colVersand, 'x' )");
								}
								if (this.tblTbc.colVerbrauch.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblTbc.colArztNr, :frmTSK.tblTbc.colHalterNr, :frmTSK.tblTbc.colRegNr, :frmTSK.tblTbc.colErfDat,
7, '§1(1)', 'Verbrauch', :frmTSK.tblTbc.colVerbrauch, '€' )");
								}
								if (this.tblTbc.colAuslagen.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblTbc.colArztNr, :frmTSK.tblTbc.colHalterNr, :frmTSK.tblTbc.colRegNr, :frmTSK.tblTbc.colErfDat,
8, '§1(1)', 'Auslagen', :frmTSK.tblTbc.colAuslagen, '€' )");
								}
							}
						}
						tblTbc.SetRowFlags(Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
					hSqlTSK.Commit();
				}
				// BTBV
				tblBTBV.KillCellEdit();
				if (tblBTBV.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					Var.nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblBTBV.FindNextRow(ref Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblBTBV.SetFocusRow(Var.nRow);
						if (tblBTBV.colHalterNr.Number != Sys.NUMBER_Null) 
						{
							Int.SqlIstDa("FROM tsk WHERE tskarztnr= :frmTSK.tblBTBV.colArztNr AND tskerfdat = :frmTSK.tblBTBV.colErfDat AND tskdeaktiv IS NULL", ref Var.bExists);
							// 27.12.07 A186
							if (Var.bExists) 
							{
								Int.SqlImmed(@"UPDATE tsk SET
tskarztnr = :frmTSK.tblBTBV.colArztNr,
tskhalternr = :frmTSK.tblBTBV.colHalterNr,
tskregnr = :frmTSK.tblBTBV.colRegNr,
tskerfdat = :frmTSK.tblBTBV.colErfDat,
tskzm = :frmTSK.tblBTBV.colZM,
tskdatum = :frmTSK.tblBTBV.colDatum
WHERE tskarztnr= :frmTSK.tblBTBV.colArztNr AND tskerfdat = :frmTSK.tblBTBV.colErfDat");
								bPOk = Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr= :frmTSK.tblBTBV.colArztNr AND tskperfdat = :frmTSK.tblBTBV.colErfDat");
							}
							else
							{
								// 10.02.09 OTÄ172 + , tskbeihilfe, tskbeihdat, tskbeihtext
								// 18.06.09 OTÄ213 keine Beihilfe möglich -> Es wird keine Beihilfe mehr gewährt.
								bPOk = Int.SqlImmed(@"INSERT INTO tsk
(tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tsktyp, tskbeihilfe, tskbeihdat, tskbeihtext)
VALUES( :frmTSK.tblBTBV.colArztNr, :frmTSK.tblBTBV.colHalterNr, :frmTSK.tblBTBV.colRegNr, :frmTSK.tblBTBV.colErfDat, :frmTSK.tblBTBV.colZM,
:frmTSK.tblBTBV.colDatum, 'BTBV', 0, '2009-01-01','Es wird keine Beihilfe mehr gewährt.')");
							}
							if (bPOk) 
							{
								if (this.tblBTBV.colImpf.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBTBV.colArztNr, :frmTSK.tblBTBV.colHalterNr, :frmTSK.tblBTBV.colRegNr, :frmTSK.tblBTBV.colErfDat,
1, '705 §4(3)', 'BT-V.Impfungen', :frmTSK.tblBTBV.colImpf, 'x15 min' )");
								}
								if (this.tblBTBV.colAnfahrt.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBTBV.colArztNr, :frmTSK.tblBTBV.colHalterNr, :frmTSK.tblBTBV.colRegNr, :frmTSK.tblBTBV.colErfDat,
3, '§9(2)', 'Anfahrt', :frmTSK.tblBTBV.colAnfahrt, 'dkm' )");
								}
								if (this.tblBTBV.colBG.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBTBV.colArztNr, :frmTSK.tblBTBV.colHalterNr, :frmTSK.tblBTBV.colRegNr, :frmTSK.tblBTBV.colErfDat,
4, '602h', 'Bestandsgebühr', :frmTSK.tblBTBV.colBG, 'x' )");
								}
								if (this.tblBTBV.colIB.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBTBV.colArztNr, :frmTSK.tblBTBV.colHalterNr, :frmTSK.tblBTBV.colRegNr, :frmTSK.tblBTBV.colErfDat,
5, '101', 'Impfbescheinigung', :frmTSK.tblBTBV.colIB, 'x' )");
								}
								if (this.tblBTBV.colAufwand.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBTBV.colArztNr, :frmTSK.tblBTBV.colHalterNr, :frmTSK.tblBTBV.colRegNr, :frmTSK.tblBTBV.colErfDat,
6, '§7GOT/704', 'besonderer Zeitaufwand', :frmTSK.tblBTBV.colAufwand, 'x15 min' )");
								}
								if (this.tblBTBV.colVerbrauch.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBTBV.colArztNr, :frmTSK.tblBTBV.colHalterNr, :frmTSK.tblBTBV.colRegNr, :frmTSK.tblBTBV.colErfDat,
7, '§1(1)', 'Verbrauch', :frmTSK.tblBTBV.colVerbrauch, '€' )");
								}
								if (this.tblBTBV.colAuslagen.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBTBV.colArztNr, :frmTSK.tblBTBV.colHalterNr, :frmTSK.tblBTBV.colRegNr, :frmTSK.tblBTBV.colErfDat,
8, '§1(1)', 'Auslagen', :frmTSK.tblBTBV.colAuslagen, '€' )");
								}
							}
						}
						tblBTBV.SetRowFlags(Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
					hSqlTSK.Commit();
				}
				// BHVIBV
				tblBHVIBV.KillCellEdit();
				if (tblBHVIBV.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					Var.nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblBHVIBV.FindNextRow(ref Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblBHVIBV.SetFocusRow(Var.nRow);
						if (tblBHVIBV.colHalterNr.Number != Sys.NUMBER_Null) 
						{
							Int.SqlIstDa("FROM tsk WHERE tskarztnr= :frmTSK.tblBHVIBV.colArztNr AND tskerfdat = :frmTSK.tblBHVIBV.colErfDat AND tskdeaktiv IS NULL", ref Var.bExists);
							// 27.12.07 A186
							if (Var.bExists) 
							{
								Int.SqlImmed(@"UPDATE tsk SET
tskarztnr = :frmTSK.tblBHVIBV.colArztNr,
tskhalternr = :frmTSK.tblBHVIBV.colHalterNr,
tskregnr = :frmTSK.tblBHVIBV.colRegNr,
tskerfdat = :frmTSK.tblBHVIBV.colErfDat,
tskzm = :frmTSK.tblBHVIBV.colZM,
tskdatum = :frmTSK.tblBHVIBV.colDatum
WHERE tskarztnr= :frmTSK.tblBHVIBV.colArztNr AND tskerfdat = :frmTSK.tblBHVIBV.colErfDat");
								bPOk = Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr= :frmTSK.tblBHVIBV.colArztNr AND tskperfdat = :frmTSK.tblBHVIBV.colErfDat");
							}
							else
							{
								bPOk = Int.SqlImmed(@"INSERT INTO tsk
(tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tsktyp)
VALUES( :frmTSK.tblBHVIBV.colArztNr, :frmTSK.tblBHVIBV.colHalterNr, :frmTSK.tblBHVIBV.colRegNr, :frmTSK.tblBHVIBV.colErfDat, :frmTSK.tblBHVIBV.colZM,
:frmTSK.tblBHVIBV.colDatum, 'BHVIBV')");
							}
							if (bPOk) 
							{
								if (this.tblBHVIBV.col11.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVIBV.colArztNr, :frmTSK.tblBHVIBV.colHalterNr, :frmTSK.tblBHVIBV.colRegNr, :frmTSK.tblBHVIBV.colErfDat,
11, '705 §4(3)', 'BHV I-Impfungen', :frmTSK.tblBHVIBV.col11, 'x15 min' )");
								}
								if (this.tblBHVIBV.col12.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVIBV.colArztNr, :frmTSK.tblBHVIBV.colHalterNr, :frmTSK.tblBHVIBV.colRegNr, :frmTSK.tblBHVIBV.colErfDat,
12, '705 §4(3)', 'BHV I-Blutproben/ParaTB', :frmTSK.tblBHVIBV.col12, 'x15 min' )");
								}
								if (this.tblBHVIBV.col14.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVIBV.colArztNr, :frmTSK.tblBHVIBV.colHalterNr, :frmTSK.tblBHVIBV.colRegNr, :frmTSK.tblBHVIBV.colErfDat,
14, '705 §4(3)', 'BHV I-Milchproben/ParaTB Einzelmilch', :frmTSK.tblBHVIBV.col14, 'x15 min' )");
								}
								if (this.tblBHVIBV.col15.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVIBV.colArztNr, :frmTSK.tblBHVIBV.colHalterNr, :frmTSK.tblBHVIBV.colRegNr, :frmTSK.tblBHVIBV.colErfDat,
15, 'G3.1', 'BHV I-Milchproben/ParaTB Sammelmilch', :frmTSK.tblBHVIBV.col15, '' )");
								}
								if (this.tblBHVIBV.colAnfahrt.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVIBV.colArztNr, :frmTSK.tblBHVIBV.colHalterNr, :frmTSK.tblBHVIBV.colRegNr, :frmTSK.tblBHVIBV.colErfDat,
3, '§9(2)', 'Anfahrt', :frmTSK.tblBHVIBV.colAnfahrt, 'dkm' )");
								}
								if (this.tblBHVIBV.colBG.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVIBV.colArztNr, :frmTSK.tblBHVIBV.colHalterNr, :frmTSK.tblBHVIBV.colRegNr, :frmTSK.tblBHVIBV.colErfDat,
4, '602h', 'Bestandsgebühr', :frmTSK.tblBHVIBV.colBG, 'x' )");
								}
								if (this.tblBHVIBV.colIB.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVIBV.colArztNr, :frmTSK.tblBHVIBV.colHalterNr, :frmTSK.tblBHVIBV.colRegNr, :frmTSK.tblBHVIBV.colErfDat,
5, '101', 'Impfbescheinigung', :frmTSK.tblBHVIBV.colIB, 'x' )");
								}
								if (this.tblBHVIBV.colAufwand.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVIBV.colArztNr, :frmTSK.tblBHVIBV.colHalterNr, :frmTSK.tblBHVIBV.colRegNr, :frmTSK.tblBHVIBV.colErfDat,
6, '§7GOT/704', 'besonderer Zeitaufwand', :frmTSK.tblBHVIBV.colAufwand, 'x15 min' )");
								}
								if (this.tblBHVIBV.col9.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVIBV.colArztNr, :frmTSK.tblBHVIBV.colHalterNr, :frmTSK.tblBHVIBV.colRegNr, :frmTSK.tblBHVIBV.colErfDat,
9, '302', 'Bearbeitung zum Versand', :frmTSK.tblBHVIBV.col9, '' )");
								}
								if (this.tblBHVIBV.colVerbrauch.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVIBV.colArztNr, :frmTSK.tblBHVIBV.colHalterNr, :frmTSK.tblBHVIBV.colRegNr, :frmTSK.tblBHVIBV.colErfDat,
7, '§1(1)', 'Verbrauch', :frmTSK.tblBHVIBV.colVerbrauch, '€' )");
								}
								if (this.tblBHVIBV.colAuslagen.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBHVIBV.colArztNr, :frmTSK.tblBHVIBV.colHalterNr, :frmTSK.tblBHVIBV.colRegNr, :frmTSK.tblBHVIBV.colErfDat,
8, '§1(1)', 'Auslagen', :frmTSK.tblBHVIBV.colAuslagen, '€' )");
								}
							}
						}
						tblBHVIBV.SetRowFlags(Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
					hSqlTSK.Commit();
				}
				// BVDBV
				tblBVDBV.KillCellEdit();
				if (tblBVDBV.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					Var.nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblBVDBV.FindNextRow(ref Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblBVDBV.SetFocusRow(Var.nRow);
						if (tblBVDBV.colHalterNr.Number != Sys.NUMBER_Null) 
						{
							Int.SqlIstDa("FROM tsk WHERE tskarztnr= :frmTSK.tblBVDBV.colArztNr AND tskerfdat = :frmTSK.tblBVDBV.colErfDat AND tskdeaktiv IS NULL", ref Var.bExists);
							// 27.12.07 A186
							if (Var.bExists) 
							{
								Int.SqlImmed(@"UPDATE tsk SET
tskarztnr = :frmTSK.tblBVDBV.colArztNr,
tskhalternr = :frmTSK.tblBVDBV.colHalterNr,
tskregnr = :frmTSK.tblBVDBV.colRegNr,
tskerfdat = :frmTSK.tblBVDBV.colErfDat,
tskzm = :frmTSK.tblBVDBV.colZM,
tskdatum = :frmTSK.tblBVDBV.colDatum
WHERE tskarztnr= :frmTSK.tblBVDBV.colArztNr AND tskerfdat = :frmTSK.tblBVDBV.colErfDat");
								bPOk = Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr= :frmTSK.tblBVDBV.colArztNr AND tskperfdat = :frmTSK.tblBVDBV.colErfDat");
							}
							else
							{
								// 09.03.09 OTÄ194 + , tskbeihilfe, tskbeihdat, tskbeihtext
								// 18.06.09 OTÄ213 keine Beihilfe möglich -> Es wird keine Beihilfe mehr gewährt.
								bPOk = Int.SqlImmed(@"INSERT INTO tsk
(tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tsktyp, tskbeihilfe, tskbeihdat, tskbeihtext)
VALUES( :frmTSK.tblBVDBV.colArztNr, :frmTSK.tblBVDBV.colHalterNr, :frmTSK.tblBVDBV.colRegNr, :frmTSK.tblBVDBV.colErfDat, :frmTSK.tblBVDBV.colZM,
:frmTSK.tblBVDBV.colDatum, 'BVDBV', 0, '2009-01-01', 'Es wird keine Beihilfe mehr gewährt.')");
							}
							if (bPOk) 
							{
								if (this.tblBVDBV.col11.Number != Sys.NUMBER_Null) 
								{
									// 12.03.09 OTF231 16 Min  -> 15 Min
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVDBV.colArztNr, :frmTSK.tblBVDBV.colHalterNr, :frmTSK.tblBVDBV.colRegNr, :frmTSK.tblBVDBV.colErfDat,
11, '705 §4(3)', 'BVD-Impfungen', :frmTSK.tblBVDBV.col11, 'x15 Min' )");
								}
								if (this.tblBVDBV.col12.Number != Sys.NUMBER_Null) 
								{
									// 09.04.10 OTF417 + x15 min
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVDBV.colArztNr, :frmTSK.tblBVDBV.colHalterNr, :frmTSK.tblBVDBV.colRegNr, :frmTSK.tblBVDBV.colErfDat,
12, '705 §4(3)', 'BVD-Blutproben', :frmTSK.tblBVDBV.col12, 'x15 min' )");
								}
								if (this.tblBVDBV.colAnfahrt.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVDBV.colArztNr, :frmTSK.tblBVDBV.colHalterNr, :frmTSK.tblBVDBV.colRegNr, :frmTSK.tblBVDBV.colErfDat,
3, '§9(2)', 'Anfahrt', :frmTSK.tblBVDBV.colAnfahrt, 'dkm' )");
								}
								if (this.tblBVDBV.colBG.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVDBV.colArztNr, :frmTSK.tblBVDBV.colHalterNr, :frmTSK.tblBVDBV.colRegNr, :frmTSK.tblBVDBV.colErfDat,
4, '602h', 'Bestandsgebühr', :frmTSK.tblBVDBV.colBG, 'x' )");
								}
								if (this.tblBVDBV.colIB.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVDBV.colArztNr, :frmTSK.tblBVDBV.colHalterNr, :frmTSK.tblBVDBV.colRegNr, :frmTSK.tblBVDBV.colErfDat,
5, '101', 'Impfbescheinigung', :frmTSK.tblBVDBV.colIB, 'x' )");
								}
								if (this.tblBVDBV.colAufwand.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVDBV.colArztNr, :frmTSK.tblBVDBV.colHalterNr, :frmTSK.tblBVDBV.colRegNr, :frmTSK.tblBVDBV.colErfDat,
6, '§7GOT/704', 'besonderer Zeitaufwand', :frmTSK.tblBVDBV.colAufwand, 'x15 min' )");
								}
								if (this.tblBVDBV.col9.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVDBV.colArztNr, :frmTSK.tblBVDBV.colHalterNr, :frmTSK.tblBVDBV.colRegNr, :frmTSK.tblBVDBV.colErfDat,
9, '302', 'Bearbeitung zum Versand', :frmTSK.tblBVDBV.col9, '' )");
								}
								if (this.tblBVDBV.colVerbrauch.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVDBV.colArztNr, :frmTSK.tblBVDBV.colHalterNr, :frmTSK.tblBVDBV.colRegNr, :frmTSK.tblBVDBV.colErfDat,
7, '§1(1)', 'Verbrauch', :frmTSK.tblBVDBV.colVerbrauch, '€' )");
								}
								if (this.tblBVDBV.colAuslagen.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVDBV.colArztNr, :frmTSK.tblBVDBV.colHalterNr, :frmTSK.tblBVDBV.colRegNr, :frmTSK.tblBVDBV.colErfDat,
8, '§1(1)', 'Auslagen', :frmTSK.tblBVDBV.colAuslagen, '€' )");
								}
							}
						}
						tblBVDBV.SetRowFlags(Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
					hSqlTSK.Commit();
				}
				// Bruc
				tblBruc.KillCellEdit();
				if (tblBruc.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					Var.nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblBruc.FindNextRow(ref Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblBruc.SetFocusRow(Var.nRow);
						if (tblBruc.colHalterNr.Number != Sys.NUMBER_Null) 
						{
							Int.SqlIstDa("FROM tsk WHERE tskarztnr= :frmTSK.tblBruc.colArztNr AND tskerfdat = :frmTSK.tblBruc.colErfDat AND tskdeaktiv IS NULL", ref Var.bExists);
							// 27.12.07 A186
							if (Var.bExists) 
							{
								Int.SqlImmed(@"UPDATE tsk SET
tskarztnr = :frmTSK.tblBruc.colArztNr,
tskhalternr = :frmTSK.tblBruc.colHalterNr,
tskregnr = :frmTSK.tblBruc.colRegNr,
tskerfdat = :frmTSK.tblBruc.colErfDat,
tskzm = :frmTSK.tblBruc.colZM,
tskdatum = :frmTSK.tblBruc.colDatum
WHERE tskarztnr= :frmTSK.tblBruc.colArztNr AND tskerfdat = :frmTSK.tblBruc.colErfDat");
								bPOk = Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr= :frmTSK.tblBruc.colArztNr AND tskperfdat = :frmTSK.tblBruc.colErfDat");
							}
							else
							{
								bPOk = Int.SqlImmed(@"INSERT INTO tsk
(tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tsktyp)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat, :frmTSK.tblBruc.colZM,
:frmTSK.tblBruc.colDatum, 'Bruc')");
							}
							// 22.09.23 Ä2129
							if (tblBruc.colDatum.DateTime >= new SalDateTime(2023, 7, 1))  // 27.10.23 Ä2129
							{
								if (tblBruc.colBEGuid.Text == "") 
								{
									nBeBetrag = 0;
								}
								Int.SqlImmedSel("SELECT bedate, bebetrag INTO :frmTSK.dtBeDatum, :frmTSK.nBeBetrag FROM be WHERE beguid = :frmTSK.tblBruc.colBEGuid");
								if (nBeBetrag == 0) 
								{
									strTSKBeihText = "Es wurde keine Beihilfe gewährt.";
									// Set dtBeDatum = DATETIME_Null
								}
								else
								{
									strTSKBeihText = "Es wurde Beihilfe gewährt.";
								}
								Int.SqlImmed(@"UPDATE tsk SET tskbeihtext = :frmTSK.strTSKBeihText, tskbeihilfe = :frmTSK.nBeBetrag, tskbeihdat = :frmTSK.dtBeDatum, tskbeihilfeguid = :frmTSK.tblBruc.colBEGuid
WHERE tskarztnr= :frmTSK.tblBruc.colArztNr AND tskerfdat = :frmTSK.tblBruc.colErfDat");
							}

							if (bPOk) 
							{
								// If frmTSK.tblBruc.col11 != NUMBER_Null
								// Call SqlImmed('INSERT INTO tskp
								// (tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
								// VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
								// 11, \'602bb\', \'Bruc.-Impfungen\', :frmTSK.tblBruc.col11, \'\' )')
								// 30.01.18 Ä1647 + /ParaTB
								// 27.02.23 Ä2083 neue GOT
								if (this.tblBruc.colDatum.DateTime < new SalDateTime(2022, 11, 22)) 
								{
									if (this.tblBruc.col12.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
12, 'Bl5b', 'Bruc./ParaTB-Blutproben Milchkühe', :frmTSK.tblBruc.col12, '' )");
									}
									if (this.tblBruc.col13.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
13, 'Bl5bb', 'Bruc./ParaTB-Blutproben Ammenkühe', :frmTSK.tblBruc.col13, '' )");
									}
									if (this.tblBruc.col14.Number != Sys.NUMBER_Null)  // 06.02.18 F3097
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
14, 'G3.1', 'Bruc./ParaTB-Milchproben', :frmTSK.tblBruc.col14, '' )");
									}
									if (this.tblBruc.col16.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
16, 'Bl5b', 'Bruc./ParaTB-Blutproben Schafe', :frmTSK.tblBruc.col16, '' )");
									}
									if (this.tblBruc.colAnfahrt.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
3, '§9(2)', 'Anfahrt', :frmTSK.tblBruc.colAnfahrt, 'dkm' )");
									}
									if (this.tblBruc.colBG.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
4, '602h', 'Bestandsgebühr', :frmTSK.tblBruc.colBG, 'x' )");
									}
									if (this.tblBruc.colIB.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
5, '101', 'Impfbescheinigung', :frmTSK.tblBruc.colIB, 'x' )");
									}
									if (this.tblBruc.colAufwand.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
6, '§7GOT/704', 'besonderer Zeitaufwand', :frmTSK.tblBruc.colAufwand, 'x15 min' )");
									}
									if (this.tblBruc.colVerbrauch.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
7, '§1(1)', 'Verbrauch', :frmTSK.tblBruc.colVerbrauch, '€' )");
									}
									if (this.tblBruc.colAuslagen.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
8, '§1(1)', 'Auslagen', :frmTSK.tblBruc.colAuslagen, '€' )");
									}
									if (this.tblBruc.col9.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
9, '302', 'Bearbeitung zum Versand', :frmTSK.tblBruc.col9, '' )");
									}
									if (this.tblBruc.col22.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
22, '705 §4 (3)', 'Bruc./ParaTB-Blutproben', :frmTSK.tblBruc.col22, 'x15 min' )");
									}
									if (this.tblBruc.col23.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
23, '705 §4 (3)', 'Bruc./ParaTB-Milchproben', :frmTSK.tblBruc.col23, 'x15 min' )");
									}
								}
								else
								{
									if (this.tblBruc.col17.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
17, '627', 'Bruc./ParaTB-Blutproben bis 4 Rd./Schf.', :frmTSK.tblBruc.col17, '' )");
									}
									if (this.tblBruc.col18.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
18, '629', 'Bruc./ParaTB-Blutproben über 4 Rinder', :frmTSK.tblBruc.col18, '' )");
									}
									if (this.tblBruc.col20.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
20, '634', 'Bruc./ParaTB-Blutproben unzur. fixiert / Fleischrd.', :frmTSK.tblBruc.col20, '' )");
									}
									if (this.tblBruc.col21.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
21, '631', 'Bruc./ParaTB-Blutproben über 4 Schafe', :frmTSK.tblBruc.col21, '' )");
									}
									if (this.tblBruc.col14.Number != Sys.NUMBER_Null)  // 06.02.18 F3097
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
14, '707', 'Bruc./ParaTB-Milchproben', :frmTSK.tblBruc.col14, '' )");
									}
									if (this.tblBruc.colAnfahrt.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
3, '§10', 'Anfahrt', :frmTSK.tblBruc.colAnfahrt, 'dkm' )");
									}
									if (this.tblBruc.colBG.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
4, '44', 'Bestandsgebühr', :frmTSK.tblBruc.colBG, 'x' )");
									}
									if (this.tblBruc.colIB.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
5, '87', 'Impfbescheinigung', :frmTSK.tblBruc.colIB, 'x' )");
									}
									if (this.tblBruc.colDoku.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
19, '3', 'Dokumentation', :frmTSK.tblBruc.colDoku, 'x' )");
									}
									if (this.tblBruc.colVerbrauch.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
7, '§7', 'Verbrauch', :frmTSK.tblBruc.colVerbrauch, '€' )");
									}
									if (this.tblBruc.colAuslagen.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
8, '§7', 'Auslagen', :frmTSK.tblBruc.colAuslagen, '€' )");
									}
									if (this.tblBruc.col9.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
9, '144', 'Bearbeitung zum Versand', :frmTSK.tblBruc.col9, '' )");
									}
									if (this.tblBruc.col22.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
22, '§5, 255', 'Bruc./ParaTB-Blutproben', :frmTSK.tblBruc.col22, 'x15 min' )");
									}
									if (this.tblBruc.col23.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat,
23, '§5, 255', 'Bruc./ParaTB-Milchproben', :frmTSK.tblBruc.col23, 'x15 min' )");
									}
								}
							}
						}
						tblBruc.SetRowFlags(Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
					hSqlTSK.Commit();
				}
				// AK
				tblAK.KillCellEdit();
				if (tblAK.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					Var.nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblAK.FindNextRow(ref Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblAK.SetFocusRow(Var.nRow);
						if (tblAK.colHalterNr.Number != Sys.NUMBER_Null) 
						{
							Int.SqlIstDa("FROM tsk WHERE tskarztnr= :frmTSK.tblAK.colArztNr AND tskerfdat = :frmTSK.tblAK.colErfDat AND tskdeaktiv IS NULL", ref Var.bExists);
							// 27.12.07 A186
							if (Var.bExists) 
							{
								Int.SqlImmed(@"UPDATE tsk SET
tskarztnr = :frmTSK.tblAK.colArztNr,
tskhalternr = :frmTSK.tblAK.colHalterNr,
tskregnr = :frmTSK.tblAK.colRegNr,
tskerfdat = :frmTSK.tblAK.colErfDat,
tskzm = :frmTSK.tblAK.colZM,
tskdatum = :frmTSK.tblAK.colDatum
WHERE tskarztnr= :frmTSK.tblAK.colArztNr AND tskerfdat = :frmTSK.tblAK.colErfDat");
								bPOk = Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr= :frmTSK.tblAK.colArztNr AND tskperfdat = :frmTSK.tblAK.colErfDat");
							}
							else
							{
								bPOk = Int.SqlImmed(@"INSERT INTO tsk
(tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tsktyp)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat, :frmTSK.tblAK.colZM,
:frmTSK.tblAK.colDatum, 'AK')");
							}
							// 22.09.23 Ä2129
							if (tblAK.colDatum.DateTime >= new SalDateTime(2023, 7, 1))  // 27.10.23 Ä2129
							{
								if (tblAK.colBEGuid.Text == "") 
								{
									nBeBetrag = 0;
								}
								Int.SqlImmedSel("SELECT bedate, bebetrag INTO :frmTSK.dtBeDatum, :frmTSK.nBeBetrag FROM be WHERE beguid = :frmTSK.tblAK.colBEGuid");
								if (nBeBetrag == 0) 
								{
									strTSKBeihText = "Es wurde keine Beihilfe gewährt.";
									// Set dtBeDatum = DATETIME_Null
								}
								else
								{
									strTSKBeihText = "Es wurde Beihilfe gewährt.";
								}
								Int.SqlImmed(@"UPDATE tsk SET tskbeihtext = :frmTSK.strTSKBeihText, tskbeihilfe = :frmTSK.nBeBetrag, tskbeihdat = :frmTSK.dtBeDatum, tskbeihilfeguid = :frmTSK.tblAK.colBEGuid
WHERE tskarztnr= :frmTSK.tblAK.colArztNr AND tskerfdat = :frmTSK.tblAK.colErfDat");
							}

							if (bPOk) 
							{
								// If frmTSK.tblAK.col11 != NUMBER_Null
								// Call SqlImmed('INSERT INTO tskp
								// (tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
								// VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
								// 11, \'602bb\', \'AK.-Impfungen\', :frmTSK.tblAK.col11, \'\' )')
								// 27.02.23 Ä2083 neue GOT
								if (this.tblAK.colDatum.DateTime < new SalDateTime(2022, 11, 22)) 
								{
									if (this.tblAK.col17.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
17, 'Bl5b', 'AK/KSP.-Blutproben Schw./Ferkel', :frmTSK.tblAK.col17, '' )");
									}
									if (this.tblAK.colAnfahrt.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
3, '§9(2)', 'Anfahrt', :frmTSK.tblAK.colAnfahrt, 'dkm' )");
									}
									if (this.tblAK.colBG.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
4, '602h', 'Bestandsgebühr', :frmTSK.tblAK.colBG, 'x' )");
									}
									if (this.tblAK.colIB.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
5, '101', 'Impfbescheinigung', :frmTSK.tblAK.colIB, 'x' )");
									}
									if (this.tblAK.colAufwand.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
6, '§7GOT/704', 'besonderer Zeitaufwand', :frmTSK.tblAK.colAufwand, 'x15 min' )");
									}
									if (this.tblAK.colVerbrauch.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
7, '§1(1)', 'Verbrauch', :frmTSK.tblAK.colVerbrauch, '€' )");
									}
									if (this.tblAK.colAuslagen.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
8, '§1(1)', 'Auslagen', :frmTSK.tblAK.colAuslagen, '€' )");
									}
									if (this.tblAK.col9.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
9, '144', 'Bearbeitung zum Versand', :frmTSK.tblAK.col9, '' )");
									}
									if (this.tblAK.col23.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
23, '705 §4(3)', 'AK/KSP.-Blutproben Schwein/Ferkel', :frmTSK.tblAK.col23, 'x15 min' )");
									}
								}
								else
								{
									if (this.tblAK.col18.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
18, '627', 'AK/KSP.-Blutproben bis 4 Tiere', :frmTSK.tblAK.col18, '' )");
									}
									if (this.tblAK.col20.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
20, '629', 'AK/KSP.-Blutproben ab 5 Schweine', :frmTSK.tblAK.col20, '' )");
									}
									if (this.tblAK.col21.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
21, '630', 'AK/KSP.-Blutproben ab 5 Ferkel/Läufer', :frmTSK.tblAK.col21, '' )");
									}
									if (this.tblAK.col22.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
22, '634 / 635', 'AK/KSP.-Blutproben nicht fixiert / extensiv', :frmTSK.tblAK.col22, '' )");
									}
									if (this.tblAK.col23.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
23, '§5,255', 'AK/KSP.-Blutproben Schwein/Ferkel', :frmTSK.tblAK.col23, 'x15 min' )");
									}
									if (this.tblAK.colAnfahrt.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
3, '§10', 'Anfahrt', :frmTSK.tblAK.colAnfahrt, 'dkm' )");
									}
									if (this.tblAK.colBG.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
4, '44', 'Bestandsgebühr', :frmTSK.tblAK.colBG, 'x' )");
									}
									if (this.tblAK.colIB.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
5, '87', 'Impfbescheinigung', :frmTSK.tblAK.colIB, 'x' )");
									}
									if (this.tblAK.colDoku.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
19, '3', 'Dokumentation', :frmTSK.tblAK.colDoku, 'x' )");
									}
									if (this.tblAK.colVerbrauch.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
7, '§7', 'Verbrauch', :frmTSK.tblAK.colVerbrauch, '€' )");
									}
									if (this.tblAK.colAuslagen.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
8, '§7', 'Auslagen', :frmTSK.tblAK.colAuslagen, '€' )");
									}
									if (this.tblAK.col9.Number != Sys.NUMBER_Null) 
									{
										Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat,
9, '144', 'Bearbeitung zum Versand', :frmTSK.tblAK.col9, '' )");
									}
								}
							}
						}
						tblAK.SetRowFlags(Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
					hSqlTSK.Commit();
				}
				// BrucBV
				tblBrucBV.KillCellEdit();
				if (tblBrucBV.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					Var.nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblBrucBV.FindNextRow(ref Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblBrucBV.SetFocusRow(Var.nRow);
						if (tblBrucBV.colHalterNr.Number != Sys.NUMBER_Null) 
						{
							Int.SqlIstDa("FROM tsk WHERE tskarztnr= :frmTSK.tblBrucBV.colArztNr AND tskerfdat = :frmTSK.tblBrucBV.colErfDat AND tskdeaktiv IS NULL", ref Var.bExists);
							// 27.12.07 A186
							if (Var.bExists) 
							{
								Int.SqlImmed(@"UPDATE tsk SET
tskarztnr = :frmTSK.tblBrucBV.colArztNr,
tskhalternr = :frmTSK.tblBrucBV.colHalterNr,
tskregnr = :frmTSK.tblBrucBV.colRegNr,
tskerfdat = :frmTSK.tblBrucBV.colErfDat,
tskzm = :frmTSK.tblBrucBV.colZM,
tskdatum = :frmTSK.tblBrucBV.colDatum
WHERE tskarztnr= :frmTSK.tblBrucBV.colArztNr AND tskerfdat = :frmTSK.tblBrucBV.colErfDat");
								bPOk = Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr= :frmTSK.tblBrucBV.colArztNr AND tskperfdat = :frmTSK.tblBrucBV.colErfDat");
							}
							else
							{
								bPOk = Int.SqlImmed(@"INSERT INTO tsk
(tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tsktyp)
VALUES( :frmTSK.tblBrucBV.colArztNr, :frmTSK.tblBrucBV.colHalterNr, :frmTSK.tblBrucBV.colRegNr, :frmTSK.tblBrucBV.colErfDat, :frmTSK.tblBrucBV.colZM,
:frmTSK.tblBrucBV.colDatum, 'BrucBV')");
							}
							if (bPOk) 
							{
								// If frmTSK.tblBrucBV.col11 != NUMBER_Null
								// Call SqlImmed('INSERT INTO tskp
								// (tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
								// VALUES( :frmTSK.tblBrucBV.colArztNr, :frmTSK.tblBrucBV.colHalterNr, :frmTSK.tblBrucBV.colRegNr, :frmTSK.tblBrucBV.colErfDat,
								// 11, \'602bb\', \'BrucBV.-Impfungen\', :frmTSK.tblBrucBV.col11, \'\' )')
								if (this.tblBrucBV.col12.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBrucBV.colArztNr, :frmTSK.tblBrucBV.colHalterNr, :frmTSK.tblBrucBV.colRegNr, :frmTSK.tblBrucBV.colErfDat,
12, '705 §4(3)', 'Leuk./Bruc.-Blutproben Rind', :frmTSK.tblBrucBV.col12, '15 Min.' )");
								}
								if (this.tblBrucBV.col16.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBrucBV.colArztNr, :frmTSK.tblBrucBV.colHalterNr, :frmTSK.tblBrucBV.colRegNr, :frmTSK.tblBrucBV.colErfDat,
16, '705 §4(3)', 'Leuk./Bruc.-Blutproben Schaf', :frmTSK.tblBrucBV.col16, '15 Min.' )");
								}
								if (this.tblBrucBV.col14.Number != Sys.NUMBER_Null)  // 06.02.18 F3097
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBrucBV.colArztNr, :frmTSK.tblBrucBV.colHalterNr, :frmTSK.tblBrucBV.colRegNr, :frmTSK.tblBrucBV.colErfDat,
14, '705 §4(3)', 'Leuk./Bruc.-Milchproben', :frmTSK.tblBrucBV.col14, '15 Min.' )");
								}
								if (this.tblBrucBV.colAnfahrt.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBrucBV.colArztNr, :frmTSK.tblBrucBV.colHalterNr, :frmTSK.tblBrucBV.colRegNr, :frmTSK.tblBrucBV.colErfDat,
3, '§9(2)', 'Anfahrt', :frmTSK.tblBrucBV.colAnfahrt, 'dkm' )");
								}
								if (this.tblBrucBV.colBG.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBrucBV.colArztNr, :frmTSK.tblBrucBV.colHalterNr, :frmTSK.tblBrucBV.colRegNr, :frmTSK.tblBrucBV.colErfDat,
4, '602h', 'Bestandsgebühr', :frmTSK.tblBrucBV.colBG, 'x' )");
								}
								if (this.tblBrucBV.colIB.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBrucBV.colArztNr, :frmTSK.tblBrucBV.colHalterNr, :frmTSK.tblBrucBV.colRegNr, :frmTSK.tblBrucBV.colErfDat,
5, '101', 'Impfbescheinigung', :frmTSK.tblBrucBV.colIB, 'x' )");
								}
								if (this.tblBrucBV.colAufwand.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBrucBV.colArztNr, :frmTSK.tblBrucBV.colHalterNr, :frmTSK.tblBrucBV.colRegNr, :frmTSK.tblBrucBV.colErfDat,
6, '§7GOT/704', 'besonderer Zeitaufwand', :frmTSK.tblBrucBV.colAufwand, 'x15 min' )");
								}
								if (this.tblBrucBV.colVerbrauch.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBrucBV.colArztNr, :frmTSK.tblBrucBV.colHalterNr, :frmTSK.tblBrucBV.colRegNr, :frmTSK.tblBrucBV.colErfDat,
7, '§1(1)', 'Verbrauch', :frmTSK.tblBrucBV.colVerbrauch, '€' )");
								}
								if (this.tblBrucBV.colAuslagen.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBrucBV.colArztNr, :frmTSK.tblBrucBV.colHalterNr, :frmTSK.tblBrucBV.colRegNr, :frmTSK.tblBrucBV.colErfDat,
8, '§1(1)', 'Auslagen', :frmTSK.tblBrucBV.colAuslagen, '€' )");
								}
								if (this.tblBrucBV.col9.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBrucBV.colArztNr, :frmTSK.tblBrucBV.colHalterNr, :frmTSK.tblBrucBV.colRegNr, :frmTSK.tblBrucBV.colErfDat,
9, '302', 'Bearbeitung zum Versand', :frmTSK.tblBrucBV.col9, '' )");
								}
							}
						}
						tblBrucBV.SetRowFlags(Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
					hSqlTSK.Commit();
				}
				// AKBV
				tblAKBV.KillCellEdit();
				if (tblAKBV.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					Var.nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblAKBV.FindNextRow(ref Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblAKBV.SetFocusRow(Var.nRow);
						if (tblAKBV.colHalterNr.Number != Sys.NUMBER_Null) 
						{
							Int.SqlIstDa("FROM tsk WHERE tskarztnr= :frmTSK.tblAKBV.colArztNr AND tskerfdat = :frmTSK.tblAKBV.colErfDat AND tskdeaktiv IS NULL", ref Var.bExists);
							// 27.12.07 A186
							if (Var.bExists) 
							{
								Int.SqlImmed(@"UPDATE tsk SET
tskarztnr = :frmTSK.tblAKBV.colArztNr,
tskhalternr = :frmTSK.tblAKBV.colHalterNr,
tskregnr = :frmTSK.tblAKBV.colRegNr,
tskerfdat = :frmTSK.tblAKBV.colErfDat,
tskzm = :frmTSK.tblAKBV.colZM,
tskdatum = :frmTSK.tblAKBV.colDatum
WHERE tskarztnr= :frmTSK.tblAKBV.colArztNr AND tskerfdat = :frmTSK.tblAKBV.colErfDat");
								bPOk = Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr= :frmTSK.tblAKBV.colArztNr AND tskperfdat = :frmTSK.tblAKBV.colErfDat");
							}
							else
							{
								bPOk = Int.SqlImmed(@"INSERT INTO tsk
(tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tsktyp)
VALUES( :frmTSK.tblAKBV.colArztNr, :frmTSK.tblAKBV.colHalterNr, :frmTSK.tblAKBV.colRegNr, :frmTSK.tblAKBV.colErfDat, :frmTSK.tblAKBV.colZM,
:frmTSK.tblAKBV.colDatum, 'AKBV')");
							}
							if (bPOk) 
							{
								if (this.tblAKBV.col17.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAKBV.colArztNr, :frmTSK.tblAKBV.colHalterNr, :frmTSK.tblAKBV.colRegNr, :frmTSK.tblAKBV.colErfDat,
17, '705 §4(3)', 'AK/KSP.-Blutproben Schwein', :frmTSK.tblAKBV.col17, '15 min.' )");
								}
								if (this.tblAKBV.colAnfahrt.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAKBV.colArztNr, :frmTSK.tblAKBV.colHalterNr, :frmTSK.tblAKBV.colRegNr, :frmTSK.tblAKBV.colErfDat,
3, '§9(2)', 'Anfahrt', :frmTSK.tblAKBV.colAnfahrt, 'dkm' )");
								}
								if (this.tblAKBV.colBG.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAKBV.colArztNr, :frmTSK.tblAKBV.colHalterNr, :frmTSK.tblAKBV.colRegNr, :frmTSK.tblAKBV.colErfDat,
4, '602h', 'Bestandsgebühr', :frmTSK.tblAKBV.colBG, 'x' )");
								}
								if (this.tblAKBV.colIB.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAKBV.colArztNr, :frmTSK.tblAKBV.colHalterNr, :frmTSK.tblAKBV.colRegNr, :frmTSK.tblAKBV.colErfDat,
5, '101', 'Impfbescheinigung', :frmTSK.tblAKBV.colIB, 'x' )");
								}
								if (this.tblAKBV.colAufwand.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAKBV.colArztNr, :frmTSK.tblAKBV.colHalterNr, :frmTSK.tblAKBV.colRegNr, :frmTSK.tblAKBV.colErfDat,
6, '§7GOT/704', 'besonderer Zeitaufwand', :frmTSK.tblAKBV.colAufwand, 'x15 min' )");
								}
								if (this.tblAKBV.colVerbrauch.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAKBV.colArztNr, :frmTSK.tblAKBV.colHalterNr, :frmTSK.tblAKBV.colRegNr, :frmTSK.tblAKBV.colErfDat,
7, '§1(1)', 'Verbrauch', :frmTSK.tblAKBV.colVerbrauch, '€' )");
								}
								if (this.tblAKBV.colAuslagen.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAKBV.colArztNr, :frmTSK.tblAKBV.colHalterNr, :frmTSK.tblAKBV.colRegNr, :frmTSK.tblAKBV.colErfDat,
8, '§1(1)', 'Auslagen', :frmTSK.tblAKBV.colAuslagen, '€' )");
								}
								if (this.tblAKBV.col9.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblAKBV.colArztNr, :frmTSK.tblAKBV.colHalterNr, :frmTSK.tblAKBV.colRegNr, :frmTSK.tblAKBV.colErfDat,
9, '302', 'Bearbeitung zum Versand', :frmTSK.tblAKBV.col9, '' )");
								}
							}
						}
						tblAKBV.SetRowFlags(Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
					hSqlTSK.Commit();
				}
				// BVDv
				tblBVDv.KillCellEdit();
				if (tblBVDv.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					Var.nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblBVDv.FindNextRow(ref Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblBVDv.SetFocusRow(Var.nRow);
						if (tblBVDv.colHalterNr.Number != Sys.NUMBER_Null) 
						{
							Int.SqlIstDa("FROM tsk WHERE tskarztnr= :frmTSK.tblBVDv.colArztNr AND tskerfdat = :frmTSK.tblBVDv.colErfDat AND tskdeaktiv IS NULL", ref Var.bExists);
							// 27.12.07 A186
							if (Var.bExists) 
							{
								Int.SqlImmed(@"UPDATE tsk SET
tskarztnr = :frmTSK.tblBVDv.colArztNr,
tskhalternr = :frmTSK.tblBVDv.colHalterNr,
tskregnr = :frmTSK.tblBVDv.colRegNr,
tskerfdat = :frmTSK.tblBVDv.colErfDat,
tskzm = \M\,
tskdatum = :frmTSK.tblBVDv.colDatum
WHERE tskarztnr= :frmTSK.tblBVDv.colArztNr AND tskerfdat = :frmTSK.tblBVDv.colErfDat");
								bPOk = Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr= :frmTSK.tblBVDv.colArztNr AND tskperfdat = :frmTSK.tblBVDv.colErfDat");
							}
							else
							{
								// 09.03.09 OTÄ194 + , tskbeihilfe, tskbeihdat, tskbeihtext
								// 18.06.09 OTÄ213 keine Beihilfe möglich -> Es wird keine Beihilfe mehr gewährt.
								bPOk = Int.SqlImmed(@"INSERT INTO tsk
(tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tsktyp, tskbeihilfe, tskbeihdat, tskbeihtext, tskantrdat)
VALUES( :frmTSK.tblBVDv.colArztNr, :frmTSK.tblBVDv.colHalterNr, :frmTSK.tblBVDv.colRegNr, :frmTSK.tblBVDv.colErfDat, 'M',
:frmTSK.tblBVDv.colDatum, 'BVDv', 0, SYSDATE, 'Beihilfe wird später angerechnet', SYSDATE  )");
							}
							if (bPOk) 
							{
								if (this.tblBVDv.col20.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVDv.colArztNr, :frmTSK.tblBVDv.colHalterNr, :frmTSK.tblBVDv.colRegNr, :frmTSK.tblBVDv.colErfDat,
20, 'A 10', 'Beratung im Einzelfall ohne Untersuchung', :frmTSK.tblBVDv.col20, '' )");
								}
								if (this.tblBVDv.col21.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVDv.colArztNr, :frmTSK.tblBVDv.colHalterNr, :frmTSK.tblBVDv.colRegNr, :frmTSK.tblBVDv.colErfDat,
21, 'CZ 4.3b', 'Injektionsnarkosen', :frmTSK.tblBVDv.col21, '' )");
								}
								if (this.tblBVDv.col22.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVDv.colArztNr, :frmTSK.tblBVDv.colHalterNr, :frmTSK.tblBVDv.colRegNr, :frmTSK.tblBVDv.colErfDat,
22, 'B 502 d/e', 'Euthansie von Kälbern/Rindern per Injektion', :frmTSK.tblBVDv.col22, '' )");
								}
								if (this.tblBVDv.col23.Text != "") 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVDv.colArztNr, :frmTSK.tblBVDv.colHalterNr, :frmTSK.tblBVDv.colRegNr, :frmTSK.tblBVDv.colErfDat,
23, 'Identität', :frmTSK.tblBVDv.col23, 0, '' )");
								}
								if (this.tblBVDv.colAnfahrt.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVDv.colArztNr, :frmTSK.tblBVDv.colHalterNr, :frmTSK.tblBVDv.colRegNr, :frmTSK.tblBVDv.colErfDat,
3, '§9(2)', 'Anfahrt', :frmTSK.tblBVDv.colAnfahrt, 'dkm' )");
								}
								if (this.tblBVDv.colAufwand.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVDv.colArztNr, :frmTSK.tblBVDv.colHalterNr, :frmTSK.tblBVDv.colRegNr, :frmTSK.tblBVDv.colErfDat,
6, '§7GOT/704', 'besonderer Zeitaufwand', :frmTSK.tblBVDv.colAufwand, 'x15 min' )");
								}
								if (this.tblBVDv.colVerbrauch.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVDv.colArztNr, :frmTSK.tblBVDv.colHalterNr, :frmTSK.tblBVDv.colRegNr, :frmTSK.tblBVDv.colErfDat,
7, '§1(1)', 'Verbrauch', :frmTSK.tblBVDv.colVerbrauch, '€' )");
								}
								if (this.tblBVDv.colAuslagen.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblBVDv.colArztNr, :frmTSK.tblBVDv.colHalterNr, :frmTSK.tblBVDv.colRegNr, :frmTSK.tblBVDv.colErfDat,
8, '§1(1)', 'Auslagen', :frmTSK.tblBVDv.colAuslagen, '€' )");
								}
							}
						}
						tblBVDv.SetRowFlags(Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
					hSqlTSK.Commit();
				}
				// TSKF 21.04.17
				tblTSKF.KillCellEdit();
				if (tblTSKF.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					Var.nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblTSKF.FindNextRow(ref Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblTSKF.SetFocusRow(Var.nRow);
						if (tblTSKF.colHalterNr.Number != Sys.NUMBER_Null) 
						{
							Int.SqlIstDa("FROM tsk WHERE tskarztnr= :frmTSK.tblTSKF.colArztNr AND tskerfdat = :frmTSK.tblTSKF.colErfDat AND tskdeaktiv IS NULL", ref Var.bExists);
							// 27.12.07 A186
							if (Var.bExists) 
							{
								Int.SqlImmed(@"UPDATE tsk SET
tskarztnr = :frmTSK.tblTSKF.colArztNr,
tskhalternr = :frmTSK.tblTSKF.colHalterNr,
tskregnr = :frmTSK.tblTSKF.colRegNr,
tskerfdat = :frmTSK.tblTSKF.colErfDat,
tskdatum = :frmTSK.tblTSKF.colDatum
WHERE tskarztnr= :frmTSK.tblTSKF.colArztNr AND tskerfdat = :frmTSK.tblTSKF.colErfDat");
								bPOk = Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr= :frmTSK.tblTSKF.colArztNr AND tskperfdat = :frmTSK.tblTSKF.colErfDat");
							}
							else
							{
								// 08.12.09 OTÄ355 Beihilfe -> 2009-01-01
								bPOk = Int.SqlImmed(@"INSERT INTO tsk
(tskarztnr, tskhalternr, tskregnr, tskerfdat, tskdatum, tsktyp, tskbeihilfe, tskbeihdat, tskbeihtext)
VALUES( :frmTSK.tblTSKF.colArztNr, :frmTSK.tblTSKF.colHalterNr, :frmTSK.tblTSKF.colRegNr, :frmTSK.tblTSKF.colErfDat,
:frmTSK.tblTSKF.colDatum, 'TSKF', 0, '2009-01-01', 'Es wird keine Beihilfe mehr gewährt.')");
							}
							// 22.09.23 Ä2129
							if (tblTSKF.colDatum.DateTime >= new SalDateTime(2023, 7, 1))  // 27.10.23 Ä2129
							{
								if (tblTSKF.colBEGuid.Text == "") 
								{
									nBeBetrag = 0;
								}
								Int.SqlImmedSel("SELECT bedate, bebetrag INTO :frmTSK.dtBeDatum, :frmTSK.nBeBetrag FROM be WHERE beguid = :frmTSK.tblTSKF.colBEGuid");
								if (nBeBetrag == 0) 
								{
									strTSKBeihText = "Es wurde keine Beihilfe gewährt.";
									// Set dtBeDatum = DATETIME_Null
								}
								else
								{
									strTSKBeihText = "Es wurde Beihilfe gewährt.";
								}
								Int.SqlImmed(@"UPDATE tsk SET tskbeihtext = :frmTSK.strTSKBeihText, tskbeihilfe = :frmTSK.nBeBetrag, tskbeihdat = :frmTSK.dtBeDatum, tskbeihilfeguid = :frmTSK.tblTSKF.colBEGuid
WHERE tskarztnr= :frmTSK.tblTSKF.colArztNr AND tskerfdat = :frmTSK.tblTSKF.colErfDat");
							}

							if (bPOk) 
							{
								if (this.tblTSKF.colTagessatz.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblTSKF.colArztNr, :frmTSK.tblTSKF.colHalterNr, :frmTSK.tblTSKF.colRegNr, :frmTSK.tblTSKF.colErfDat,
3, '', 'Tagessatz für Maßnahmen im Tierseuchenkrisenfall', :frmTSK.tblTSKF.colTagessatz, 'x' )");
								}
								if (this.tblTSKF.colAnzStd.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblTSKF.colArztNr, :frmTSK.tblTSKF.colHalterNr, :frmTSK.tblTSKF.colRegNr, :frmTSK.tblTSKF.colErfDat,
4, '', 'Stunden > 10 h hinaus', :frmTSK.tblTSKF.colAnzStd, 'x' )");
								}
								if (this.tblTSKF.colTageKarenz.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblTSKF.colArztNr, :frmTSK.tblTSKF.colHalterNr, :frmTSK.tblTSKF.colRegNr, :frmTSK.tblTSKF.colErfDat,
5, '', 'Karenztage', :frmTSK.tblTSKF.colTageKarenz, 'x' )");
								}
								if (this.tblTSKF.colkmSatz.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblTSKF.colArztNr, :frmTSK.tblTSKF.colHalterNr, :frmTSK.tblTSKF.colRegNr, :frmTSK.tblTSKF.colErfDat,
6, '', 'km-Pauschale', :frmTSK.tblTSKF.colkmSatz, 'x' )");
								}
								if (this.tblTSKF.colAnreiseKosten.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblTSKF.colArztNr, :frmTSK.tblTSKF.colHalterNr, :frmTSK.tblTSKF.colRegNr, :frmTSK.tblTSKF.colErfDat,
7, '', 'An-Reisekosten', :frmTSK.tblTSKF.colAnreiseKosten, '€' )");
								}
								if (this.tblTSKF.colUebernacht.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblTSKF.colArztNr, :frmTSK.tblTSKF.colHalterNr, :frmTSK.tblTSKF.colRegNr, :frmTSK.tblTSKF.colErfDat,
8, '', 'Übernachtungskosten', :frmTSK.tblTSKF.colUebernacht, '€' )");
								}
							}
						}
						tblTSKF.SetRowFlags(Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
					hSqlTSK.Commit();
				}
				// ParaTB 21.04.17
				tblParaTB.KillCellEdit();
				if (tblParaTB.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					Var.nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblParaTB.FindNextRow(ref Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblParaTB.SetFocusRow(Var.nRow);
						if (tblParaTB.colHalterNr.Number != Sys.NUMBER_Null) 
						{
							Int.SqlIstDa("FROM tsk WHERE tskarztnr= :frmTSK.tblParaTB.colArztNr AND tskerfdat = :frmTSK.tblParaTB.colErfDat AND tskdeaktiv IS NULL", ref Var.bExists);
							// 27.12.07 A186
							if (Var.bExists) 
							{
								Int.SqlImmed(@"UPDATE tsk SET
tskarztnr = :frmTSK.tblParaTB.colArztNr,
tskhalternr = :frmTSK.tblParaTB.colHalterNr,
tskregnr = :frmTSK.tblParaTB.colRegNr,
tskerfdat = :frmTSK.tblParaTB.colErfDat,
tskdatum = :frmTSK.tblParaTB.colDatum
WHERE tskarztnr= :frmTSK.tblParaTB.colArztNr AND tskerfdat = :frmTSK.tblParaTB.colErfDat");
								bPOk = Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr= :frmTSK.tblParaTB.colArztNr AND tskperfdat = :frmTSK.tblParaTB.colErfDat");
							}
							else
							{
								// 08.12.09 OTÄ355 Beihilfe -> 2009-01-01
								// 23.05.17 Ä1540
								// Set bPOk = SqlImmed('INSERT INTO tsk
								// (tskarztnr, tskhalternr, tskregnr, tskerfdat, tskdatum, tsktyp, tskbeihilfe, tskbeihdat, tskbeihtext)
								// VALUES( :frmTSK.tblParaTB.colArztNr, :frmTSK.tblParaTB.colHalterNr, :frmTSK.tblParaTB.colRegNr, :frmTSK.tblParaTB.colErfDat,
								// :frmTSK.tblParaTB.colDatum, \'ParaTB\', 0, 2009-01-01, \'Es wird keine Beihilfe mehr gewährt.\')')
								bPOk = Int.SqlImmed(@"INSERT INTO tsk
(tskarztnr, tskhalternr, tskregnr, tskerfdat, tskdatum, tsktyp)
VALUES( :frmTSK.tblParaTB.colArztNr, :frmTSK.tblParaTB.colHalterNr, :frmTSK.tblParaTB.colRegNr, :frmTSK.tblParaTB.colErfDat,
:frmTSK.tblParaTB.colDatum, 'ParaTB')");
							}
							// 22.09.23 Ä2129
							if (tblParaTB.colDatum.DateTime >= new SalDateTime(2023, 7, 1))  // 27.10.23 Ä2129
							{
								if (tblParaTB.colBEGuid.Text == "") 
								{
									nBeBetrag = 0;
								}
								Int.SqlImmedSel("SELECT bedate, bebetrag INTO :frmTSK.dtBeDatum, :frmTSK.nBeBetrag FROM be WHERE beguid = :frmTSK.tblParaTB.colBEGuid");
								if (nBeBetrag == 0) 
								{
									strTSKBeihText = "Es wurde keine Beihilfe gewährt.";
									// Set dtBeDatum = DATETIME_Null
								}
								else
								{
									strTSKBeihText = "Es wurde Beihilfe gewährt.";
								}
								Int.SqlImmed(@"UPDATE tsk SET tskbeihtext = :frmTSK.strTSKBeihText, tskbeihilfe = :frmTSK.nBeBetrag, tskbeihdat = :frmTSK.dtBeDatum, tskbeihilfeguid = :frmTSK.tblBVD.colBEGuid
WHERE tskarztnr= :frmTSK.tblParaTB.colArztNr AND tskerfdat = :frmTSK.tblParaTB.colErfDat");
							}

							if (bPOk) 
							{
								if (this.tblParaTB.col3.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblParaTB.colArztNr, :frmTSK.tblParaTB.colHalterNr, :frmTSK.tblParaTB.colRegNr, :frmTSK.tblParaTB.colErfDat,
3, '', 'Biosicherheits-Analyse und Optimierungs-Beratung', :frmTSK.tblParaTB.col3, 'x' )");
								}
								if (this.tblParaTB.col4.Number != Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"INSERT INTO tskp
(tskparztnr, tskphalternr, tskpregnr, tskperfdat, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit)
VALUES( :frmTSK.tblParaTB.colArztNr, :frmTSK.tblParaTB.colHalterNr, :frmTSK.tblParaTB.colRegNr, :frmTSK.tblParaTB.colErfDat,
4, '', 'Anfertigung eines Dokumentes gem. TSK-Muster', :frmTSK.tblParaTB.col4, 'x' )");
								}
							}
						}
						tblParaTB.SetRowFlags(Var.nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
					hSqlTSK.Commit();
				}

				// Call SqlDisconnect( hSqlTSK)
				Sal.WaitCursor(false);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPPArzt"></param>
		/// <param name="nPPHalter"></param>
		/// <param name="nPPPos"></param>
		/// <param name="nPPWert"></param>
		/// <returns></returns>
		public SalString PalCheckPos(SalNumber nPPArzt, SalNumber nPPHalter, SalNumber nPPPos, SalNumber nPPWert)
		{
			#region Local Variables
			SalString strPPos = "";
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strPPos = "AND tskerfdat IN (select tskperfdat FROM tskp WHERE tskparztnr = " + nPPArzt.ToString(0) + " AND tskphalternr = " + nPPHalter.ToString(0) + " AND tskppos= " + nPPPos.ToString(0) + " AND tskpwert = " + nPPWert.ToString(0) + ") ";
				return strPPos;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPArzt"></param>
		/// <param name="nPHalter"></param>
		/// <param name="strPZM"></param>
		/// <param name="dtPDatum"></param>
		/// <param name="strPTyp"></param>
		/// <param name="nP1"></param>
		/// <param name="nP2"></param>
		/// <param name="nP11"></param>
		/// <param name="nP12"></param>
		/// <param name="nP13"></param>
		/// <param name="nP14"></param>
		/// <param name="nP15"></param>
		/// <returns></returns>
		public SalBoolean PalCheck(SalNumber nPArzt, SalNumber nPHalter, SalString strPZM, SalDateTime dtPDatum, SalString strPTyp, SalNumber nP1, SalNumber nP2, SalNumber nP11, SalNumber nP12, SalNumber nP13, SalNumber nP14, SalNumber nP15)
		{
			#region Local Variables
			SqlLocals.PalCheckLocals locals = new SqlLocals.PalCheckLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.nPArzt = nPArzt;
				locals.nPHalter = nPHalter;
				locals.strPZM = strPZM;
				locals.dtPDatum = dtPDatum;
				locals.strPTyp = strPTyp;
				locals.nP1 = nP1;
				locals.nP2 = nP2;
				locals.nP11 = nP11;
				locals.nP12 = nP12;
				locals.nP13 = nP13;
				locals.nP14 = nP14;
				locals.nP15 = nP15;

				dtPErfDat = SalDateTime.Null;
				locals.strPSelect = @"SELECT tskerfdat INTO :frmTSK.dtPErfDat FROM tsk
WHERE tskarztnr = " + locals.nPArzt.ToString(0) + @" AND tskdeaktiv IS NULL
AND tskhalternr = " + locals.nPHalter.ToString(0) + " AND tskzm = \'" + locals.strPZM + "\' AND tskdatum = " + Int.PalDateToStr(locals.dtPDatum) + " AND tsktyp = \'" + locals.strPTyp + "\' ";
				if (locals.nP1 != -1 && locals.nP1 != SalNumber.Null) 
				{
					locals.strPSelect = locals.strPSelect + PalCheckPos(locals.nPArzt, locals.nPHalter, 1, locals.nP1);
					// Set strPSelect = strPSelect || 'AND tskppos=1 AND tskpwert = ' || SalNumberToStrX(nP1,0) ||' '
				}
				if (locals.nP2 != -1 && locals.nP2 != SalNumber.Null) 
				{
					// Set strPSelect = strPSelect || 'AND tskppos=2 AND tskpwert = ' || SalNumberToStrX(nP2,0) ||' '
					locals.strPSelect = locals.strPSelect + PalCheckPos(locals.nPArzt, locals.nPHalter, 2, locals.nP2);
				}
				if (locals.nP11 != -1 && locals.nP11 != SalNumber.Null) 
				{
					// Set strPSelect = strPSelect || 'AND tskppos=11 AND tskpwert = ' || SalNumberToStrX(nP11,0) ||' '
					if (locals.strPTyp == "Bruc" || locals.strPTyp == "BrucBV") 
					{
						locals.strPSelect = locals.strPSelect + PalCheckPos(locals.nPArzt, locals.nPHalter, 16, locals.nP11);
					}
					else if (locals.strPTyp == "AK" || locals.strPTyp == "AKBV") 
					{
						locals.strPSelect = locals.strPSelect + PalCheckPos(locals.nPArzt, locals.nPHalter, 17, locals.nP11);
					}
					else
					{
						locals.strPSelect = locals.strPSelect + PalCheckPos(locals.nPArzt, locals.nPHalter, 11, locals.nP11);
					}
				}
				if (locals.nP12 != -1 && locals.nP12 != SalNumber.Null) 
				{
					// Set strPSelect = strPSelect || 'AND tskppos=12 AND tskpwert = ' || SalNumberToStrX(nP12,0) ||' '
					locals.strPSelect = locals.strPSelect + PalCheckPos(locals.nPArzt, locals.nPHalter, 12, locals.nP12);
				}
				if (locals.nP13 != -1 && locals.nP13 != SalNumber.Null) 
				{
					// Set strPSelect = strPSelect || 'AND tskppos=13 AND tskpwert = ' || SalNumberToStrX(nP13,0) ||' '
					locals.strPSelect = locals.strPSelect + PalCheckPos(locals.nPArzt, locals.nPHalter, 13, locals.nP13);
				}
				if (locals.nP14 != -1 && locals.nP14 != SalNumber.Null) 
				{
					// Set strPSelect = strPSelect || 'AND tskppos=14 AND tskpwert = ' || SalNumberToStrX(nP14,0) ||' '
					locals.strPSelect = locals.strPSelect + PalCheckPos(locals.nPArzt, locals.nPHalter, 14, locals.nP14);
				}
				if (locals.nP15 != -1 && locals.nP15 != SalNumber.Null) 
				{
					// Set strPSelect = strPSelect || 'AND tskppos=15 AND tskpwert = ' || SalNumberToStrX(nP15,0) ||' '
					locals.strPSelect = locals.strPSelect + PalCheckPos(locals.nPArzt, locals.nPHalter, 15, locals.nP15);
				}
				hSqlTSKCheck.PrepareAndExecute(locals.strPSelect);
				nFetchTSKCheck = hSqlTSKCheck.FetchNext();
				if (dtPErfDat == SalDateTime.Null) 
				{
					picStop.ClearImage();
					// Call SalDisableWindow( picStop )
					this.SetStatusBarText("");
					return true;
				}
				else
				{
					picStop.SetImageFile(Var.strTVNPath + "\\Icons\\bmp\\64\\sign_stop.bmp");
					// Call SalEnableWindow( picStop )
					this.SetStatusBarText("Maßnahme bereits vorhanden!");
					Sal.MessageBeep(0);
					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="hKenn"></param>
		/// <param name="strRegNr"></param>
		/// <returns></returns>
		public SalNumber PalBEDropDown(SalWindowHandle hKenn, SalString strRegNr)
		{
			#region Local Variables
			SqlLocals.PalBEDropDownLocals locals = new SqlLocals.PalBEDropDownLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.hKenn = hKenn;
				locals.strRegNr = strRegNr;

				locals.hSqlBE.Connect();
				strTHReg = Int.PalStringStrip(locals.strRegNr, "-");
				locals.nPCount = 0;
				locals.hKenn.ClearList();
				// 17.11.23 +AND beerldat IS NULL
				locals.strPSelect = @"SELECT @DATETOCHAR(bedate, 'dd-mm-yy') || ' - Anz.:'  || @STRING( beanzahl, 0) || ' - €:' || @STRING(bebetrag, 2)  ||
@CHAR(9) || beguid
INTO :frmTSK.strGUID
FROM be
WHERE bereghalter = :frmTSK.strTHReg AND beerldat IS NULL ORDER BY bedate";
				nTabStops[0] = 0.7m;
				nTabStops[1] = 1.3m;
				locals.hKenn.SetListTabStops(nTabStops);
				locals.hSqlBE.Prepare(locals.strPSelect);
				locals.hSqlBE.Execute();
				locals.nReturnBE = locals.hSqlBE.FetchNext();
				while (locals.nReturnBE != Sys.FETCH_EOF) 
				{
					locals.nPIndex = locals.hKenn.AddListItem(strGUID);

					locals.nPCount = locals.nPCount + 1;
					locals.nReturnBE = locals.hSqlBE.FetchNext();
				}

				locals.hSqlBE.Commit();
				locals.hSqlBE.Disconnect();
				// 11.04.14 F1980 Kommentierung aufgehoben:
				// While nPCount < 15
				// Call SalListAdd(hKenn, ' ')
				// Set nPCount = nPCount + 1

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPArztNr"></param>
		/// <param name="nPHalterNr"></param>
		/// <param name="dtPErfDat"></param>
		/// <param name="nPBeihilfe"></param>
		/// <param name="bBrief"></param>
		/// <returns></returns>
		public SalNumber PalBerechneBetrag(SalNumber nPArztNr, SalNumber nPHalterNr, SalDateTime dtPErfDat, ref SalNumber nPBeihilfe, SalBoolean bBrief)
		{
			#region Local Variables
			SqlLocals.PalBerechneBetragLocals locals = new SqlLocals.PalBerechneBetragLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				try
				{

					// PPJ: Assign parameters to the locals instance.
					locals.nPArztNr = nPArztNr;
					locals.nPHalterNr = nPHalterNr;
					locals.dtPErfDat = dtPErfDat;
					locals.nPBeihilfe = nPBeihilfe;
					locals.bBrief = bBrief;

					Int.SqlConnection(ref locals.hPSqlBerechne);
					App.frmMain.nA1 = locals.nPArztNr;
					App.frmMain.nA2 = locals.nPHalterNr;
					App.frmMain.dtErfDat = locals.dtPErfDat;
					if (locals.hPSqlBerechne.PrepareAndExecute(@"SELECT tsktyp, tskdatum, tskzm, tskbeihilfeguid,
tskppos, tskpgot, tskptext, tskpwert, tskpeinheit,
hvn, hnn, hstr, hort
INTO :frmTSK.strTyp, :frmTSK.dtDatum, :frmTSK.strZM, :frmTSK.strBEGuid,
:frmTSK.nPos, :frmTSK.strGOT, :frmTSK.strText, :frmTSK.nWert, :frmTSK.strEinheit,
:frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
FROM tsk, tskp, h
WHERE tskarztnr=harztnr AND tskhalternr=hhalternr AND tskarztnr=tskparztnr AND tskhalternr=tskhalternr AND tskerfdat=tskperfdat
AND tskparztnr = :frmMain.nA1 AND tskphalternr = :frmMain.nA2 AND tskperfdat = :frmMain.dtErfDat")) 
					{
						locals.nSum = 0;
						locals.nPFetchBerechne = locals.hPSqlBerechne.FetchNext();
						while (locals.nPFetchBerechne != Sys.FETCH_EOF) 
						{
							// Call PalTSKBerechnePos( dtDatum )
							nEUR = Int.PalTSKBerechnePositionen(dtDatum, strZM, strTyp, nPos, strGOT, strEinheit, nWert, ref strText, ref locals.nMwSt);
							locals.nSum = locals.nSum + nEUR + (nEUR * locals.nMwSt).Round() / 100;

							locals.nPFetchBerechne = locals.hPSqlBerechne.FetchNext();
						}
						locals.hPSqlBerechne.Commit();

						if (strBEGuid != "") 
						{
							Var.nBeihilfeDM = Int.PalGetBeiHilfeausGUID(strBEGuid);
							locals.nPBeihilfe = Var.nBeihilfeDM;
						}
						// 22.08.18 20 -> 10 nach Absprache mit Frau D.Sasse, von Herrn Sasse genehmigt
						if (locals.bBrief)  // 27.10.23
						{
							if (Var.nBeihilfeDM > (locals.nSum + 10)) 
							{
								if (Sys.IDYES == Sal.MessageBox("Die Beihilfe übersteigt den Rechnungsbetrag um € " + (Var.nBeihilfeDM - locals.nSum).ToString(2) + ". Soll Mitglied benachrichtigt werden?", "Nachricht an M?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
								{
									locals.strBrief = @"Sehr geehrte Damen und Herren,

die Beihilfe der Tierseuchenkasse für u.g. Maßnahme übersteigt den Rechnungsbetrag um € " + (Var.nBeihilfeDM - locals.nSum).ToString(2) + @".

Maßnahme vom " + Int.PalDateToStrDE(dtDatum) + ": ";
									if (strTyp == "BT") 
									{
										locals.strBrief = locals.strBrief + "Blauzunge";
									}
									else if (strTyp == "BTBV") 
									{
										locals.strBrief = locals.strBrief + "Blauzunge - Zeitabrechnung";
									}
									else if (strTyp == "BHVIBV") 
									{
										locals.strBrief = locals.strBrief + "BHVI - Zeitabrechnung";
									}
									else if (strTyp == "BVDBV") 
									{
										locals.strBrief = locals.strBrief + "BVD - Zeitabrechnung";
									}
									else
									{
										locals.strBrief = locals.strBrief + strTyp;
									}
									locals.strBrief = locals.strBrief + " bei " + strHVN + " " + strHNN + ", " + strHO;
									locals.strBrief = locals.strBrief + @"

Bitte prüfen Sie, ob die Forderungsliste korrigiert werden muß und teilen uns Änderungsbedarf bis zum " + Int.PalDateToStrDE(SalDateTime.Current + 14) + @" mit.
Falls wir bis zu diesem Datum (Posteingang moveta) nichts von Ihnen hören, rechnen wir die Forderung unverändert ab und überweisen € " + (Var.nBeihilfeDM - locals.nSum).ToString(2) + " an die Tierseuchenkasse zurück.";
									if (Var.bfrmBriefVari) 
									{
										while (!(App.frmBriefVari.DestroyWindow())) 
										{
										}
									}
									// 06.08.18 Ä1763 TRUE -> FALSE
									frmBriefVari.CreateWindow(this, locals.nPArztNr, locals.nPHalterNr, 0, "A", locals.strBrief, new SalDateTime(1900, 1, 1), "", "", "", "", "", false);
									// Call SalMessageBox('Ok wenn gedruckt','Druck Ok?',MB_Ok)
									// 26.01.10 OTF372
									// Call SqlImmed( 'INSERT INTO tskml (tskmlarztnr, tskmlhalternr, tskmlerfdat, tskmlmerktyp, tskmldat, tskmldm, tskmltyp )
									// VALUES(:frmTSKZahl.tblTSKZahl.colArztNr, :frmTSKZahl.tblTSKZahl.colHalterNr, :frmTSKZahl.tblTSKZahl.colErfDat, \'BEI20\', SYSDATETIME, :frmTSKZahl.tblTSKZahl.colBeihilfe , :frmTSKZahl.strTyp)')

									// Set colBeihText = 'Beihilfe zu hoch. Anfrage ' || PalDateToStrDE(SalDateCurrent())
									// Set colBeihilfe = NUMBER_Null
									// 12.04.10 OTF421
									// Call SqlImmed('UPDATE tsk SET
									// tskbeihilfe = :frmTSKZahl.tblTSKZahl.colBeihilfe,
									// tskbeihtext = :frmTSKZahl.tblTSKZahl.colBeihText,
									// tskbeihdat = NULL
									// WHERE tskarztnr= :frmTSKZahl.tblTSKZahl.colArztNr AND tskerfdat = :frmTSKZahl.tblTSKZahl.colErfDat ')
								}
								// Else
								// Set colBeihText = 'Beihilfe wurde gewährt'
							}
							// Else
							// Set colBeihText = 'Beihilfe wurde gewährt'
						}
					}
					locals.hPSqlBerechne.Disconnect();
					return locals.nSum;
				}
				finally
				{

					// PPJ: Assign back receive parameters.
					nPBeihilfe = locals.nPBeihilfe;

				}
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmTSK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmTSK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_CreateComplete:
					this.frmTSK_OnSAM_CreateComplete(sender, e);
					break;
                //FC:FINAL: use SAM_Close instead of SAM_Destroy
                case Sys.SAM_Close:
					this.frmTSK_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmTSK_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.bfrmTSK = true;
			Sal.WaitCursor(true);
			Int.SqlConnection(ref this.hSqlTSK);
			Int.SqlConnection(ref this.hSqlTSKPop);
			Int.SqlConnection(ref this.hSqlTSKCheck);

			this.hPic = MT.MImg.LoadFromFile(Const.PATH_ICONS + "normal\\bmp\\16x16\\Attach.bmp", MT.MImg.MIMG_TYPE_BMP, 0);
			this.hPic2 = MT.MImg.LoadFromFile(Const.PATH_ICONS + "normal\\bmp\\16x16\\Money4.bmp", MT.MImg.MIMG_TYPE_BMP, 0);
			// 20.10.23 Ä2129
			this.hPic3 = MT.MImg.LoadFromFile(Const.PATH_ICONS + "normal\\bmp\\16x16\\Single problem.bmp", MT.MImg.MIMG_TYPE_BMP, 0);

			// 20.10.23 Ä2129
			// Set hPic3= MImgLoadFromFile( Const.PATH_ICONS + 'normal\\bmp\\16x16\\Single problem.bmp', MIMG_TYPE_BMP, 0 )

			// Set hPic = VisPicLoad (PIC_LoadFile|PIC_FormatBitmap, Const.PATH_ICONS + 'normal\\bmp\\16x16\\Attach.bmp', '')
			// Set hPic2 = VisPicLoad (PIC_LoadFile|PIC_FormatBitmap, Const.PATH_ICONS + 'normal\\bmp\\16x16\\Money.bmp', '')
			// 14.02.11 OTÄ374
			this.picStop.ClearImage();

			MT.MTbl.SetRowFlagImage(this.tblBT, Vis.ROW_UserFlag1, this.hPic, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBT, Vis.ROW_UserFlag2, this.hPic2, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBT, Vis.ROW_UserFlag3, this.hPic3, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBHVI, Vis.ROW_UserFlag1, this.hPic, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBHVI, Vis.ROW_UserFlag2, this.hPic2, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBHVI, Vis.ROW_UserFlag3, this.hPic3, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBVD, Vis.ROW_UserFlag1, this.hPic, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBVD, Vis.ROW_UserFlag2, this.hPic2, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBVD, Vis.ROW_UserFlag3, this.hPic3, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblTbc, Vis.ROW_UserFlag1, this.hPic, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblTbc, Vis.ROW_UserFlag2, this.hPic2, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblTbc, Vis.ROW_UserFlag3, this.hPic3, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBTBV, Vis.ROW_UserFlag1, this.hPic, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBTBV, Vis.ROW_UserFlag2, this.hPic2, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBTBV, Vis.ROW_UserFlag3, this.hPic3, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBHVIBV, Vis.ROW_UserFlag1, this.hPic, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBHVIBV, Vis.ROW_UserFlag2, this.hPic2, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBHVIBV, Vis.ROW_UserFlag3, this.hPic3, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBVDBV, Vis.ROW_UserFlag1, this.hPic, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBVDBV, Vis.ROW_UserFlag2, this.hPic2, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBVDBV, Vis.ROW_UserFlag3, this.hPic3, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBruc, Vis.ROW_UserFlag1, this.hPic, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBruc, Vis.ROW_UserFlag2, this.hPic2, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBruc, Vis.ROW_UserFlag3, this.hPic3, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblAK, Vis.ROW_UserFlag1, this.hPic, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblAK, Vis.ROW_UserFlag2, this.hPic2, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblAK, Vis.ROW_UserFlag3, this.hPic3, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBrucBV, Vis.ROW_UserFlag1, this.hPic, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBrucBV, Vis.ROW_UserFlag2, this.hPic2, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBrucBV, Vis.ROW_UserFlag3, this.hPic3, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblAKBV, Vis.ROW_UserFlag1, this.hPic, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblAKBV, Vis.ROW_UserFlag2, this.hPic2, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblAKBV, Vis.ROW_UserFlag3, this.hPic3, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBVDv, Vis.ROW_UserFlag1, this.hPic, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBVDv, Vis.ROW_UserFlag2, this.hPic2, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblBVDv, Vis.ROW_UserFlag3, this.hPic3, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblTSKF, Vis.ROW_UserFlag1, this.hPic, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblTSKF, Vis.ROW_UserFlag2, this.hPic2, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblTSKF, Vis.ROW_UserFlag3, this.hPic3, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblParaTB, Vis.ROW_UserFlag1, this.hPic, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblParaTB, Vis.ROW_UserFlag2, this.hPic2, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			MT.MTbl.SetRowFlagImage(this.tblParaTB, Vis.ROW_UserFlag3, this.hPic3, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));
			// 20.10.23 Ä2129
			// Call MTblSetRowFlagImage( frmTSK.tblBT, ROW_UserFlag3, hPic, MTSI_REDRAW|MTSI_NOSELINV )
			// Call MTblSetRowFlagImage (frmTSK.tblBHVI, ROW_UserFlag3, hPic, MTSI_REDRAW|MTSI_NOSELINV )
			// Call MTblSetRowFlagImage (frmTSK.tblBVD, ROW_UserFlag3, hPic, MTSI_REDRAW|MTSI_NOSELINV )
			// Call MTblSetRowFlagImage (frmTSK.tblTbc, ROW_UserFlag3, hPic, MTSI_REDRAW|MTSI_NOSELINV )
			// Call MTblSetRowFlagImage (frmTSK.tblBTBV, ROW_UserFlag3, hPic, MTSI_REDRAW|MTSI_NOSELINV )
			// Call MTblSetRowFlagImage (frmTSK.tblBHVIBV, ROW_UserFlag3, hPic, MTSI_REDRAW|MTSI_NOSELINV )
			// Call MTblSetRowFlagImage (frmTSK.tblBVDBV, ROW_UserFlag3, hPic, MTSI_REDRAW|MTSI_NOSELINV )
			// Call MTblSetRowFlagImage (frmTSK.tblBruc, ROW_UserFlag3, hPic, MTSI_REDRAW|MTSI_NOSELINV )
			// Call MTblSetRowFlagImage (frmTSK.tblAK, ROW_UserFlag3, hPic, MTSI_REDRAW|MTSI_NOSELINV )
			// Call MTblSetRowFlagImage (frmTSK.tblBrucBV, ROW_UserFlag3, hPic, MTSI_REDRAW|MTSI_NOSELINV )
			// Call MTblSetRowFlagImage (frmTSK.tblAKBV, ROW_UserFlag3, hPic, MTSI_REDRAW|MTSI_NOSELINV )
			// Call MTblSetRowFlagImage (frmTSK.tblBVDv, ROW_UserFlag3, hPic, MTSI_REDRAW|MTSI_NOSELINV )
			// Call MTblSetRowFlagImage (frmTSK.tblTSKF, ROW_UserFlag3, hPic, MTSI_REDRAW|MTSI_NOSELINV )
			// Call MTblSetRowFlagImage (frmTSK.tblParaTB, ROW_UserFlag3, hPic, MTSI_REDRAW|MTSI_NOSELINV )

			this.tblBT.ResetTable();
			this.tblBT.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat, tskbeihilfeguid FROM tsk
INTO :frmTSK.tblBT.colArztNr, :frmTSK.tblBT.colHalterNr, :frmTSK.tblBT.colRegNr, :frmTSK.tblBT.colErfDat, :frmTSK.tblBT.colZM,
:frmTSK.tblBT.colDatum, :frmTSK.tblBT.colBeihilfe, :frmTSK.tblBT.colBeihDat , :frmTSK.tblBT.colAntrDat, :frmTSK.tblBT.colBEGuid
WHERE tskerldat IS NULL AND tsktyp='BT' AND tskdeaktiv IS NULL", Sys.TBL_FillAll);

			// Call SalTblReset(tblBHVI)
			// Call SalTblPopulate(tblBHVI, hSqlTSKPop,
			// 'SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat, tskbeihilfeguid FROM tsk
			// INTO :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat, :frmTSK.tblBHVI.colZM,
			// :frmTSK.tblBHVI.colDatum, :frmTSK.tblBHVI.colBeihilfe, :frmTSK.tblBHVI.colBeihDat , :frmTSK.tblBHVI.colAntrDat, :frmTSK.tblBHVI.colBEGuid
			// WHERE tskerldat IS NULL AND tsktyp=\'BHVI\' AND tskdeaktiv IS NULL', TBL_FillAll)

			// Call SalTblReset(tblBVD)
			// Call SalTblPopulate(tblBVD, hSqlTSKPop,
			// 'SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat, tskbeihilfeguid FROM tsk
			// INTO :frmTSK.tblBVD.colArztNr, :frmTSK.tblBVD.colHalterNr, :frmTSK.tblBVD.colRegNr, :frmTSK.tblBVD.colErfDat, :frmTSK.tblBVD.colZM,
			// :frmTSK.tblBVD.colDatum, :frmTSK.tblBVD.colBeihilfe, :frmTSK.tblBVD.colBeihDat , :frmTSK.tblBVD.colAntrDat, :frmTSK.tblBVD.colBEGuid
			// WHERE tskerldat IS NULL AND tsktyp=\'BVD\' AND tskdeaktiv IS NULL', TBL_FillAll)

			// Call SalTblReset(tblTbc)
			// Call SalTblPopulate(tblTbc, hSqlTSKPop,
			// 'SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat, tskbeihilfeguid FROM tsk
			// INTO :frmTSK.tblTbc.colArztNr, :frmTSK.tblTbc.colHalterNr, :frmTSK.tblTbc.colRegNr, :frmTSK.tblTbc.colErfDat, :frmTSK.tblTbc.colZM,
			// :frmTSK.tblTbc.colDatum, :frmTSK.tblTbc.colBeihilfe, :frmTSK.tblTbc.colBeihDat , :frmTSK.tblTbc.colAntrDat, :frmTSK.tblTbc.colBEGuid
			// WHERE tskerldat IS NULL AND tsktyp=\'Tbc\' AND tskdeaktiv IS NULL', TBL_FillAll)

			// Call SalTblReset(tblBTBV)
			// Call SalTblPopulate(tblBTBV, hSqlTSKPop,
			// 'SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
			// INTO :frmTSK.tblBTBV.colArztNr, :frmTSK.tblBTBV.colHalterNr, :frmTSK.tblBTBV.colRegNr, :frmTSK.tblBTBV.colErfDat, :frmTSK.tblBTBV.colZM,
			// :frmTSK.tblBTBV.colDatum, :frmTSK.tblBTBV.colBeihilfe, :frmTSK.tblBTBV.colBeihDat , :frmTSK.tblBTBV.colAntrDat
			// WHERE tskerldat IS NULL AND tsktyp=\'BTBV\' AND tskdeaktiv IS NULL', TBL_FillAll)

			// Call SalTblReset(tblBHVIBV)
			// Call SalTblPopulate(tblBHVIBV, hSqlTSKPop,
			// 'SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
			// INTO :frmTSK.tblBHVIBV.colArztNr, :frmTSK.tblBHVIBV.colHalterNr, :frmTSK.tblBHVIBV.colRegNr, :frmTSK.tblBHVIBV.colErfDat, :frmTSK.tblBHVIBV.colZM,
			// :frmTSK.tblBHVIBV.colDatum, :frmTSK.tblBHVIBV.colBeihilfe, :frmTSK.tblBHVIBV.colBeihDat , :frmTSK.tblBHVIBV.colAntrDat
			// WHERE tskerldat IS NULL AND tsktyp=\'BHVIBV\' AND tskdeaktiv IS NULL', TBL_FillAll)

			// Call SalTblReset(tblBVDBV)
			// Call SalTblPopulate(tblBVDBV, hSqlTSKPop,
			// 'SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
			// INTO :frmTSK.tblBVDBV.colArztNr, :frmTSK.tblBVDBV.colHalterNr, :frmTSK.tblBVDBV.colRegNr, :frmTSK.tblBVDBV.colErfDat, :frmTSK.tblBVDBV.colZM,
			// :frmTSK.tblBVDBV.colDatum, :frmTSK.tblBVDBV.colBeihilfe, :frmTSK.tblBVDBV.colBeihDat , :frmTSK.tblBVDBV.colAntrDat
			// WHERE tskerldat IS NULL AND tsktyp=\'BVDBV\' AND tskdeaktiv IS NULL', TBL_FillAll)

			// Call SalTblReset(tblBruc)
			// Call SalTblPopulate(tblBruc, hSqlTSKPop,
			// 'SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat, tskbeihilfeguid FROM tsk
			// INTO :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat, :frmTSK.tblBruc.colZM,
			// :frmTSK.tblBruc.colDatum, :frmTSK.tblBruc.colBeihilfe, :frmTSK.tblBruc.colBeihDat , :frmTSK.tblBruc.colAntrDat, :frmTSK.tblBruc.colBEGuid
			// WHERE tskerldat IS NULL AND tsktyp=\'Bruc\' AND tskdeaktiv IS NULL', TBL_FillAll)

			// Call SalTblReset(tblAK)
			// Call SalTblPopulate(tblAK, hSqlTSKPop,
			// 'SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat, tskbeihilfeguid FROM tsk
			// INTO :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat, :frmTSK.tblAK.colZM,
			// :frmTSK.tblAK.colDatum, :frmTSK.tblAK.colBeihilfe, :frmTSK.tblAK.colBeihDat , :frmTSK.tblAK.colAntrDat, :frmTSK.tblAK.colBEGuid
			// WHERE tskerldat IS NULL AND tsktyp=\'AK\' AND tskdeaktiv IS NULL', TBL_FillAll)

			// Call SalTblReset(tblBrucBV)
			// Call SalTblPopulate(tblBrucBV, hSqlTSKPop,
			// 'SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
			// INTO :frmTSK.tblBrucBV.colArztNr, :frmTSK.tblBrucBV.colHalterNr, :frmTSK.tblBrucBV.colRegNr, :frmTSK.tblBrucBV.colErfDat, :frmTSK.tblBrucBV.colZM,
			// :frmTSK.tblBrucBV.colDatum, :frmTSK.tblBrucBV.colBeihilfe, :frmTSK.tblBrucBV.colBeihDat , :frmTSK.tblBrucBV.colAntrDat
			// WHERE tskerldat IS NULL AND tsktyp=\'BrucBV\' AND tskdeaktiv IS NULL', TBL_FillAll)

			// Call SalTblReset(tblAKBV)
			// Call SalTblPopulate(tblAKBV, hSqlTSKPop,
			// 'SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
			// INTO :frmTSK.tblAKBV.colArztNr, :frmTSK.tblAKBV.colHalterNr, :frmTSK.tblAKBV.colRegNr, :frmTSK.tblAKBV.colErfDat, :frmTSK.tblAKBV.colZM,
			// :frmTSK.tblAKBV.colDatum, :frmTSK.tblAKBV.colBeihilfe, :frmTSK.tblAKBV.colBeihDat , :frmTSK.tblAKBV.colAntrDat
			// WHERE tskerldat IS NULL AND tsktyp=\'AKBV\' AND tskdeaktiv IS NULL', TBL_FillAll)

			// Call SalTblReset(tblBVDv)
			// Call SalTblPopulate(tblBVDv, hSqlTSKPop,
			// 'SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
			// INTO :frmTSK.tblBVDv.colArztNr, :frmTSK.tblBVDv.colHalterNr, :frmTSK.tblBVDv.colRegNr, :frmTSK.tblBVDv.colErfDat,
			// :frmTSK.tblBVDv.colDatum, :frmTSK.tblBVDv.colBeihilfe, :frmTSK.tblBVDv.colBeihDat , :frmTSK.tblBVDv.colAntrDat
			// WHERE tskerldat IS NULL AND tsktyp=\'BVDv\' AND tskdeaktiv IS NULL', TBL_FillAll)

			// Call SalTblReset(tblTSKF)
			// Call SalTblPopulate(tblTSKF, hSqlTSKPop,
			// 'SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat, tskbeihilfeguid FROM tsk
			// INTO :frmTSK.tblTSKF.colArztNr, :frmTSK.tblTSKF.colHalterNr, :frmTSK.tblTSKF.colRegNr, :frmTSK.tblTSKF.colErfDat,
			// :frmTSK.tblTSKF.colDatum, :frmTSK.tblTSKF.colBeihilfe, :frmTSK.tblTSKF.colBeihDat , :frmTSK.tblTSKF.colAntrDat, :frmTSK.tblTSKF.colBEGuid
			// WHERE tskerldat IS NULL AND tsktyp=\'TSKF\' AND tskdeaktiv IS NULL', TBL_FillAll)

			// Call SalTblReset(tblParaTB)
			// Call SalTblPopulate(tblParaTB, hSqlTSKPop,
			// 'SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat, tskbeihilfeguid FROM tsk
			// INTO :frmTSK.tblParaTB.colArztNr, :frmTSK.tblParaTB.colHalterNr, :frmTSK.tblParaTB.colRegNr, :frmTSK.tblParaTB.colErfDat,
			// :frmTSK.tblParaTB.colDatum, :frmTSK.tblParaTB.colBeihilfe, :frmTSK.tblParaTB.colBeihDat , :frmTSK.tblParaTB.colAntrDat, :frmTSK.tblParaTB.colBEGuid
			// WHERE tskerldat IS NULL AND tsktyp=\'ParaTB\' AND tskdeaktiv IS NULL', TBL_FillAll)

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmTSK_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.PalTSKSave()) 
			{
			}
			// Call VisPicFree(hPic)
			// Call VisPicFree(hPic2)
			this.hSqlTSKCheck.Disconnect();
			this.hSqlTSKPop.Disconnect();
			this.hSqlTSK.Disconnect();
			Var.bfrmTSK = false;
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 26.10.23
			this.PalTSKSave();

			this.dfAN1.Text = "";
			this.tblBT.ResetTable();
			this.tblBHVI.ResetTable();
			this.tblBVD.ResetTable();
			this.tblTbc.ResetTable();
			this.tblBTBV.ResetTable();
			this.tblBHVIBV.ResetTable();
			this.tblBVDBV.ResetTable();
			this.tblBruc.ResetTable();

			this.strSelect = "";
			if (this.dfArztNr.IsEmpty()) 
			{
			}
			else
			{
				Int.SqlImmedSel(@"SELECT aname1,aname2, astr, aort, aregnr
INTO :frmTSK.dfAN1,:frmTSK.dfAN2, :frmTSK.dfAS, :frmTSK.dfAO, :frmTSK.dfARegNr
from A where aarztnr=:frmTSK.dfArztNr");
				if (this.dfAN1.Text != "") 
				{
					// Call SalShowWindow(tblBT)
					this.strSelect = this.strSelect + " AND tskarztnr = :frmTSK.dfArztNr";
				}
			}
			this.tblBT.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
INTO :frmTSK.tblBT.colArztNr, :frmTSK.tblBT.colHalterNr, :frmTSK.tblBT.colRegNr, :frmTSK.tblBT.colErfDat, :frmTSK.tblBT.colZM,
:frmTSK.tblBT.colDatum, :frmTSK.tblBT.colBeihilfe, :frmTSK.tblBT.colBeihDat , :frmTSK.tblBT.colAntrDat
WHERE tskerldat IS NULL AND tsktyp='BT' AND tskdeaktiv IS NULL" + this.strSelect, Sys.TBL_FillAll);

			this.tblBHVI.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
INTO :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat, :frmTSK.tblBHVI.colZM,
:frmTSK.tblBHVI.colDatum, :frmTSK.tblBHVI.colBeihilfe, :frmTSK.tblBHVI.colBeihDat , :frmTSK.tblBHVI.colAntrDat
WHERE tskerldat IS NULL AND tsktyp='BHVI' AND tskdeaktiv IS NULL" + this.strSelect, Sys.TBL_FillAll);

			this.tblBVD.ResetTable();
			this.tblBVD.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
INTO :frmTSK.tblBVD.colArztNr, :frmTSK.tblBVD.colHalterNr, :frmTSK.tblBVD.colRegNr, :frmTSK.tblBVD.colErfDat, :frmTSK.tblBVD.colZM,
:frmTSK.tblBVD.colDatum, :frmTSK.tblBVD.colBeihilfe, :frmTSK.tblBVD.colBeihDat , :frmTSK.tblBVD.colAntrDat
WHERE tskerldat IS NULL AND tsktyp='BVD' AND tskdeaktiv IS NULL" + this.strSelect, Sys.TBL_FillAll);

			this.tblTbc.ResetTable();
			this.tblTbc.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
INTO :frmTSK.tblTbc.colArztNr, :frmTSK.tblTbc.colHalterNr, :frmTSK.tblTbc.colRegNr, :frmTSK.tblTbc.colErfDat, :frmTSK.tblTbc.colZM,
:frmTSK.tblTbc.colDatum, :frmTSK.tblTbc.colBeihilfe, :frmTSK.tblTbc.colBeihDat , :frmTSK.tblTbc.colAntrDat
WHERE tskerldat IS NULL AND tsktyp='Tbc' AND tskdeaktiv IS NULL" + this.strSelect, Sys.TBL_FillAll);

			this.tblBTBV.ResetTable();
			this.tblBTBV.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
INTO :frmTSK.tblBTBV.colArztNr, :frmTSK.tblBTBV.colHalterNr, :frmTSK.tblBTBV.colRegNr, :frmTSK.tblBTBV.colErfDat, :frmTSK.tblBTBV.colZM,
:frmTSK.tblBTBV.colDatum, :frmTSK.tblBTBV.colBeihilfe, :frmTSK.tblBTBV.colBeihDat , :frmTSK.tblBTBV.colAntrDat
WHERE tskerldat IS NULL AND tsktyp='BTBV' AND tskdeaktiv IS NULL" + this.strSelect, Sys.TBL_FillAll);

			this.tblBHVIBV.ResetTable();
			this.tblBHVIBV.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
INTO :frmTSK.tblBHVIBV.colArztNr, :frmTSK.tblBHVIBV.colHalterNr, :frmTSK.tblBHVIBV.colRegNr, :frmTSK.tblBHVIBV.colErfDat, :frmTSK.tblBHVIBV.colZM,
:frmTSK.tblBHVIBV.colDatum, :frmTSK.tblBHVIBV.colBeihilfe, :frmTSK.tblBHVIBV.colBeihDat , :frmTSK.tblBHVIBV.colAntrDat
WHERE tskerldat IS NULL AND tsktyp='BHVIBV' AND tskdeaktiv IS NULL" + this.strSelect, Sys.TBL_FillAll);

			this.tblBVDBV.ResetTable();
			this.tblBVDBV.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
INTO :frmTSK.tblBVDBV.colArztNr, :frmTSK.tblBVDBV.colHalterNr, :frmTSK.tblBVDBV.colRegNr, :frmTSK.tblBVDBV.colErfDat, :frmTSK.tblBVDBV.colZM,
:frmTSK.tblBVDBV.colDatum, :frmTSK.tblBVDBV.colBeihilfe, :frmTSK.tblBVDBV.colBeihDat , :frmTSK.tblBVDBV.colAntrDat
WHERE tskerldat IS NULL AND tsktyp='BVDBV' AND tskdeaktiv IS NULL" + this.strSelect, Sys.TBL_FillAll);

			this.tblBruc.ResetTable();
			this.tblBruc.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
INTO :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat, :frmTSK.tblBruc.colZM,
:frmTSK.tblBruc.colDatum, :frmTSK.tblBruc.colBeihilfe, :frmTSK.tblBruc.colBeihDat , :frmTSK.tblBruc.colAntrDat
WHERE tskerldat IS NULL AND tsktyp='Bruc' AND tskdeaktiv IS NULL" + this.strSelect, Sys.TBL_FillAll);

			this.tblAK.ResetTable();
			this.tblAK.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
INTO :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat, :frmTSK.tblAK.colZM,
:frmTSK.tblAK.colDatum, :frmTSK.tblAK.colBeihilfe, :frmTSK.tblAK.colBeihDat , :frmTSK.tblAK.colAntrDat
WHERE tskerldat IS NULL AND tsktyp='AK' AND tskdeaktiv IS NULL" + this.strSelect, Sys.TBL_FillAll);

			this.tblBrucBV.ResetTable();
			this.tblBrucBV.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
INTO :frmTSK.tblBrucBV.colArztNr, :frmTSK.tblBrucBV.colHalterNr, :frmTSK.tblBrucBV.colRegNr, :frmTSK.tblBrucBV.colErfDat, :frmTSK.tblBrucBV.colZM,
:frmTSK.tblBrucBV.colDatum, :frmTSK.tblBrucBV.colBeihilfe, :frmTSK.tblBrucBV.colBeihDat , :frmTSK.tblBrucBV.colAntrDat
WHERE tskerldat IS NULL AND tsktyp='BrucBV' AND tskdeaktiv IS NULL" + this.strSelect, Sys.TBL_FillAll);

			this.tblAKBV.ResetTable();
			this.tblAKBV.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
INTO :frmTSK.tblAKBV.colArztNr, :frmTSK.tblAKBV.colHalterNr, :frmTSK.tblAKBV.colRegNr, :frmTSK.tblAKBV.colErfDat, :frmTSK.tblAKBV.colZM,
:frmTSK.tblAKBV.colDatum, :frmTSK.tblAKBV.colBeihilfe, :frmTSK.tblAKBV.colBeihDat , :frmTSK.tblAKBV.colAntrDat
WHERE tskerldat IS NULL AND tsktyp='AKBV' AND tskdeaktiv IS NULL" + this.strSelect, Sys.TBL_FillAll);
			#endregion
		}
		
		/// <summary>
		/// pbArztSuche WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbArztSuche_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbArztSuche_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbArztSuche_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbArztSuche_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.SetStatusBarText("Suche läuft ...");
			this.pbArztSuche.DisableWindow();

			tblArzt.CreateWindow(this, "frmTSK", this.dfAN1.Text);
			this.SetStatusBarText("");
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbArztSuche_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbArztSuche, "Mitglied suchen");
			return;
			#endregion
		}
		
		/// <summary>
		/// picTabs WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case QO.TABSM_TabActivateStart:
					this.picTabs_OnTABSM_TabActivateStart(sender, e);
					break;
				
				case QO.TABSM_TabActivateFinish:
					this.picTabs_OnTABSM_TabActivateFinish(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// TABSM_TabActivateStart event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_OnTABSM_TabActivateStart(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalTSKSave();
			this.picTabs.SelectedIndex = this.picTabs.GetClicked();
			if (this.picTabs.SelectedIndex == 0) 
			{
				this.tblBT.ResetTable();
				this.tblBT.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat, tskbeihilfeguid FROM tsk
INTO :frmTSK.tblBT.colArztNr, :frmTSK.tblBT.colHalterNr, :frmTSK.tblBT.colRegNr, :frmTSK.tblBT.colErfDat, :frmTSK.tblBT.colZM,
:frmTSK.tblBT.colDatum, :frmTSK.tblBT.colBeihilfe, :frmTSK.tblBT.colBeihDat , :frmTSK.tblBT.colAntrDat, :frmTSK.tblBT.colBEGuid
WHERE tskerldat IS NULL AND tsktyp='BT' AND tskdeaktiv IS NULL", Sys.TBL_FillAll);
			}
			else if (this.picTabs.SelectedIndex == 1) 
			{
				this.tblBHVI.ResetTable();
				this.tblBHVI.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat, tskbeihilfeguid FROM tsk
INTO :frmTSK.tblBHVI.colArztNr, :frmTSK.tblBHVI.colHalterNr, :frmTSK.tblBHVI.colRegNr, :frmTSK.tblBHVI.colErfDat, :frmTSK.tblBHVI.colZM,
:frmTSK.tblBHVI.colDatum, :frmTSK.tblBHVI.colBeihilfe, :frmTSK.tblBHVI.colBeihDat , :frmTSK.tblBHVI.colAntrDat, :frmTSK.tblBHVI.colBEGuid
WHERE tskerldat IS NULL AND tsktyp='BHVI' AND tskdeaktiv IS NULL", Sys.TBL_FillAll);
			}
			else if (this.picTabs.SelectedIndex == 2) 
			{
				this.tblBVD.ResetTable();
				this.tblBVD.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat, tskbeihilfeguid FROM tsk
INTO :frmTSK.tblBVD.colArztNr, :frmTSK.tblBVD.colHalterNr, :frmTSK.tblBVD.colRegNr, :frmTSK.tblBVD.colErfDat, :frmTSK.tblBVD.colZM,
:frmTSK.tblBVD.colDatum, :frmTSK.tblBVD.colBeihilfe, :frmTSK.tblBVD.colBeihDat , :frmTSK.tblBVD.colAntrDat, :frmTSK.tblBVD.colBEGuid
WHERE tskerldat IS NULL AND tsktyp='BVD' AND tskdeaktiv IS NULL", Sys.TBL_FillAll);
			}
			else if (this.picTabs.SelectedIndex == 3) 
			{
				this.tblTbc.ResetTable();
				this.tblTbc.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat, tskbeihilfeguid FROM tsk
INTO :frmTSK.tblTbc.colArztNr, :frmTSK.tblTbc.colHalterNr, :frmTSK.tblTbc.colRegNr, :frmTSK.tblTbc.colErfDat, :frmTSK.tblTbc.colZM,
:frmTSK.tblTbc.colDatum, :frmTSK.tblTbc.colBeihilfe, :frmTSK.tblTbc.colBeihDat , :frmTSK.tblTbc.colAntrDat, :frmTSK.tblTbc.colBEGuid
WHERE tskerldat IS NULL AND tsktyp='Tbc' AND tskdeaktiv IS NULL", Sys.TBL_FillAll);
			}
			else if (this.picTabs.SelectedIndex == 4) 
			{
				this.tblBruc.ResetTable();
				this.tblBruc.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat, tskbeihilfeguid FROM tsk
INTO :frmTSK.tblBruc.colArztNr, :frmTSK.tblBruc.colHalterNr, :frmTSK.tblBruc.colRegNr, :frmTSK.tblBruc.colErfDat, :frmTSK.tblBruc.colZM,
:frmTSK.tblBruc.colDatum, :frmTSK.tblBruc.colBeihilfe, :frmTSK.tblBruc.colBeihDat , :frmTSK.tblBruc.colAntrDat, :frmTSK.tblBruc.colBEGuid
WHERE tskerldat IS NULL AND tsktyp='Bruc' AND tskdeaktiv IS NULL", Sys.TBL_FillAll);
			}
			else if (this.picTabs.SelectedIndex == 5) 
			{
				this.tblAK.ResetTable();
				this.tblAK.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat, tskbeihilfeguid FROM tsk
INTO :frmTSK.tblAK.colArztNr, :frmTSK.tblAK.colHalterNr, :frmTSK.tblAK.colRegNr, :frmTSK.tblAK.colErfDat, :frmTSK.tblAK.colZM,
:frmTSK.tblAK.colDatum, :frmTSK.tblAK.colBeihilfe, :frmTSK.tblAK.colBeihDat , :frmTSK.tblAK.colAntrDat, :frmTSK.tblAK.colBEGuid
WHERE tskerldat IS NULL AND tsktyp='AK' AND tskdeaktiv IS NULL", Sys.TBL_FillAll);
			}
			else if (this.picTabs.SelectedIndex == 6) 
			{
				this.tblBTBV.ResetTable();
				this.tblBTBV.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
INTO :frmTSK.tblBTBV.colArztNr, :frmTSK.tblBTBV.colHalterNr, :frmTSK.tblBTBV.colRegNr, :frmTSK.tblBTBV.colErfDat, :frmTSK.tblBTBV.colZM,
:frmTSK.tblBTBV.colDatum, :frmTSK.tblBTBV.colBeihilfe, :frmTSK.tblBTBV.colBeihDat , :frmTSK.tblBTBV.colAntrDat
WHERE tskerldat IS NULL AND tsktyp='BTBV' AND tskdeaktiv IS NULL", Sys.TBL_FillAll);
			}
			else if (this.picTabs.SelectedIndex == 7) 
			{
				this.tblBVDBV.ResetTable();
				this.tblBVDBV.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
INTO :frmTSK.tblBVDBV.colArztNr, :frmTSK.tblBVDBV.colHalterNr, :frmTSK.tblBVDBV.colRegNr, :frmTSK.tblBVDBV.colErfDat, :frmTSK.tblBVDBV.colZM,
:frmTSK.tblBVDBV.colDatum, :frmTSK.tblBVDBV.colBeihilfe, :frmTSK.tblBVDBV.colBeihDat , :frmTSK.tblBVDBV.colAntrDat
WHERE tskerldat IS NULL AND tsktyp='BVDBV' AND tskdeaktiv IS NULL", Sys.TBL_FillAll);
			}
			else if (this.picTabs.SelectedIndex == 8) 
			{
			}
			else if (this.picTabs.SelectedIndex == 9) 
			{
				this.tblBVDv.ResetTable();
				this.tblBVDv.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
INTO :frmTSK.tblBVDv.colArztNr, :frmTSK.tblBVDv.colHalterNr, :frmTSK.tblBVDv.colRegNr, :frmTSK.tblBVDv.colErfDat,
:frmTSK.tblBVDv.colDatum, :frmTSK.tblBVDv.colBeihilfe, :frmTSK.tblBVDv.colBeihDat , :frmTSK.tblBVDv.colAntrDat
WHERE tskerldat IS NULL AND tsktyp='BVDv' AND tskdeaktiv IS NULL", Sys.TBL_FillAll);
			}
			else if (this.picTabs.SelectedIndex == 10) 
			{
				this.tblTSKF.ResetTable();
				this.tblTSKF.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat, tskbeihilfeguid FROM tsk
INTO :frmTSK.tblTSKF.colArztNr, :frmTSK.tblTSKF.colHalterNr, :frmTSK.tblTSKF.colRegNr, :frmTSK.tblTSKF.colErfDat,
:frmTSK.tblTSKF.colDatum, :frmTSK.tblTSKF.colBeihilfe, :frmTSK.tblTSKF.colBeihDat , :frmTSK.tblTSKF.colAntrDat, :frmTSK.tblTSKF.colBEGuid
WHERE tskerldat IS NULL AND tsktyp='TSKF' AND tskdeaktiv IS NULL", Sys.TBL_FillAll);
			}
			else if (this.picTabs.SelectedIndex == 11) 
			{
				this.tblParaTB.ResetTable();
				this.tblParaTB.Populate(this.hSqlTSKPop, @"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat, tskbeihilfeguid FROM tsk
INTO :frmTSK.tblParaTB.colArztNr, :frmTSK.tblParaTB.colHalterNr, :frmTSK.tblParaTB.colRegNr, :frmTSK.tblParaTB.colErfDat,
:frmTSK.tblParaTB.colDatum, :frmTSK.tblParaTB.colBeihilfe, :frmTSK.tblParaTB.colBeihDat , :frmTSK.tblParaTB.colAntrDat, :frmTSK.tblParaTB.colBEGuid
WHERE tskerldat IS NULL AND tsktyp='ParaTB' AND tskdeaktiv IS NULL", Sys.TBL_FillAll);
			}

			// Call SalTblReset(tblBHVIBV)
			// Call SalTblPopulate(tblBHVIBV, hSqlTSKPop,
			// 'SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
			// INTO :frmTSK.tblBHVIBV.colArztNr, :frmTSK.tblBHVIBV.colHalterNr, :frmTSK.tblBHVIBV.colRegNr, :frmTSK.tblBHVIBV.colErfDat, :frmTSK.tblBHVIBV.colZM,
			// :frmTSK.tblBHVIBV.colDatum, :frmTSK.tblBHVIBV.colBeihilfe, :frmTSK.tblBHVIBV.colBeihDat , :frmTSK.tblBHVIBV.colAntrDat
			// WHERE tskerldat IS NULL AND tsktyp=\'BHVIBV\' AND tskdeaktiv IS NULL', TBL_FillAll)
			// Call SalTblReset(tblBrucBV)
			// Call SalTblPopulate(tblBrucBV, hSqlTSKPop,
			// 'SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
			// INTO :frmTSK.tblBrucBV.colArztNr, :frmTSK.tblBrucBV.colHalterNr, :frmTSK.tblBrucBV.colRegNr, :frmTSK.tblBrucBV.colErfDat, :frmTSK.tblBrucBV.colZM,
			// :frmTSK.tblBrucBV.colDatum, :frmTSK.tblBrucBV.colBeihilfe, :frmTSK.tblBrucBV.colBeihDat , :frmTSK.tblBrucBV.colAntrDat
			// WHERE tskerldat IS NULL AND tsktyp=\'BrucBV\' AND tskdeaktiv IS NULL', TBL_FillAll)
			// Call SalTblReset(tblAKBV)
			// Call SalTblPopulate(tblAKBV, hSqlTSKPop,
			// 'SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskdatum, tskbeihilfe, tskbeihdat, tskantrdat FROM tsk
			// INTO :frmTSK.tblAKBV.colArztNr, :frmTSK.tblAKBV.colHalterNr, :frmTSK.tblAKBV.colRegNr, :frmTSK.tblAKBV.colErfDat, :frmTSK.tblAKBV.colZM,
			// :frmTSK.tblAKBV.colDatum, :frmTSK.tblAKBV.colBeihilfe, :frmTSK.tblAKBV.colBeihDat , :frmTSK.tblAKBV.colAntrDat
			// WHERE tskerldat IS NULL AND tsktyp=\'AKBV\' AND tskdeaktiv IS NULL', TBL_FillAll)
			#endregion
		}
		
		/// <summary>
		/// TABSM_TabActivateFinish event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_OnTABSM_TabActivateFinish(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfInfo.Text = "";
			#endregion
		}
		
		/// <summary>
		/// tblBT WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBT_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblBT_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_EndCellTab:
					this.tblBT_OnSAM_EndCellTab(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.tblBT_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblBT_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblBT_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_RowSetContext:
					this.tblBT_OnSAM_RowSetContext(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBT_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblBT, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_EndCellTab event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBT_OnSAM_EndCellTab(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("BT");
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBT_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("BT");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBT_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.hSqlTSK.PrepareAndExecute(@"SELECT tskppos, tskpwert FROM tskp INTO :frmTSK.nPos :frmTSK.nWert
WHERE tskparztnr= :frmTSK.tblBT.colArztNr AND tskperfdat = :frmTSK.tblBT.colErfDat")) 
			{
				while (this.hSqlTSK.FetchNext(ref this.nFetchTSK)) 
				{
					if (this.nPos == 1) 
					{
						this.tblBT.colRinder.Number = this.nWert;
					}
					else if (this.nPos == 2) 
					{
						this.tblBT.colSchafe.Number = this.nWert;
					}
					else if (this.nPos == 3) 
					{
						this.tblBT.colAnfahrt.Number = this.nWert;
					}
					else if (this.nPos == 4) 
					{
						this.tblBT.colBG.Number = this.nWert;
					}
					else if (this.nPos == 5) 
					{
						this.tblBT.colIB.Number = this.nWert;
					}
					else if (this.nPos == 6) 
					{
						this.tblBT.colAufwand.Number = this.nWert;
					}
					else if (this.nPos == 7) 
					{
						this.tblBT.colVerbrauch.Number = this.nWert;
					}
					else if (this.nPos == 8) 
					{
						this.tblBT.colAuslagen.Number = this.nWert;
					}
				}
				this.hSqlTSK.Commit();
			}

			// Call SalTblSetRowFlags ( tblBT, lParam, ROW_UserFlag1, FALSE )
			// Call SalTblSetRowFlags ( tblBT, lParam, ROW_UserFlag2, FALSE )
			// If frmTSK.tblBT.colBeihDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblBT, lParam, ROW_UserFlag2, TRUE )
			// Else
			// If frmTSK.tblBT.colAntrDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblBT, lParam, ROW_UserFlag1, TRUE )
			// Else
			// Call SalTblSetRowFlags ( tblBT, lParam, ROW_UserFlag1, FALSE )

			this.strHVN = "";
			this.strHNN = "";
			this.strHS = "";
			this.strHO = "";
			Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblBT.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where harztnr = :frmTSK.tblBT.colArztNr AND hhalternr = :frmTSK.tblBT.colHalterNr AND hdeaktiv IS NULL");
			if (this.strHVN != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHVN;
			}
			if (this.strHO != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHO;
			}
			if (this.strHS != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHS;
			}
			this.tblBT.colHalter.Text = this.strHNN;
			// 22.09.23 Ä2129
			if (this.tblBT.colBEGuid.Text != "") 
			{
				Var.nBeihilfeDM = Int.PalGetBeiHilfeausGUID(this.tblBT.colBEGuid.Text);
				this.tblBT.colBeihilfeGUID.Text = Var.nBeihilfeDM.ToString(2);
				// 27.10.23 Ä2129
				this.nBetrag = this.PalBerechneBetrag(this.tblBT.colArztNr.Number, this.tblBT.colHalterNr.Number, this.tblBT.colErfDat.DateTime, ref this.nBeihilfe, false);
				this.tblBT.colSumme.Number = this.nBetrag;
				this.tblBT.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, false);
				if (this.nBeihilfe > this.nBetrag) 
				{
					this.tblBT.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, true);
					// Call SqlImmed( 'UPDATE tsk SET tsksperre=1
					// WHERE tskarztnr = :frmTSK.tblBT.colArztNr AND tskhalternr = :frmTSK.tblBT.colHalterNr AND tskerfdat = :frmTSK.tblBT.colErfDat' )
				}
				// Else
				// Call SqlImmed( 'UPDATE tsk SET tsksperre=0
				// WHERE tskarztnr = :frmTSK.tblBT.colArztNr AND tskhalternr = :frmTSK.tblBT.colHalterNr AND tskerfdat = :frmTSK.tblBT.colErfDat' )
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBT_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBT.colAntrDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfInfo.Text = "Antrag an VetAmt noch nicht versandt";
			}
			else
			{
				this.dfInfo.Text = "Antrag an VetAmt am " + Int.PalDateToStrDE(this.tblBT.colAntrDat.DateTime);
				if (this.tblBT.colBeihDat.DateTime == Sys.DATETIME_Null) 
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "noch keine Antwort von TSK";
				}
				else
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "Beihilfe gewährt am " + Int.PalDateToStrDE(this.tblBT.colBeihDat.DateTime) + " in Höhe von € " + Int.PalStrNum(this.tblBT.colBeihilfe.Number, 8, 2);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowSetContext event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBT_OnSAM_RowSetContext(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblBT.colBeihilfeGUID.ClearList();
			if (this.tblBT.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
			{
				this.PalBEDropDown(this.tblBT.colBeihilfeGUID, this.tblBT.colRegNr.Text);
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeuBT WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBT_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeuBT_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbNeuBT_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeuBT_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBT_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("BT");
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBT_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("BT");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBT_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeuBT, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbLoeBT WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBT_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoeBT_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbLoeBT_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBT_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBT.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblBT.FindNextRow(ref Var.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblBT.SetFocusRow(Var.nRow);
					if (Int.SqlImmed("DELETE FROM tsk WHERE tskarztnr = :frmTSK.tblBT.colArztNr AND tskerfdat = :frmTSK.tblBT.colErfDat")) 
					{
						if (Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr = :frmTSK.tblBT.colArztNr AND tskperfdat = :frmTSK.tblBT.colErfDat")) 
						{
							this.tblBT.DeleteRow(Var.nRow, Sys.TBL_NoAdjust);
						}
					}
				}
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBT_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbLoeBT, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// tblBHVI WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBHVI_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblBHVI_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_EndCellTab:
					this.tblBHVI_OnSAM_EndCellTab(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.tblBHVI_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblBHVI_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblBHVI_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_RowSetContext:
					this.tblBHVI_OnSAM_RowSetContext(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBHVI_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblBHVI, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_EndCellTab event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBHVI_OnSAM_EndCellTab(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("BHVI");
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBHVI_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("BHVI");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBHVI_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.hSqlTSK.PrepareAndExecute(@"SELECT tskppos, tskpwert FROM tskp INTO :frmTSK.nPos :frmTSK.nWert
WHERE tskparztnr= :frmTSK.tblBHVI.colArztNr AND tskperfdat = :frmTSK.tblBHVI.colErfDat")) 
			{
				while (this.hSqlTSK.FetchNext(ref this.nFetchTSK)) 
				{
					if (this.nPos == 11) 
					{
						this.tblBHVI.col11.Number = this.nWert;
					}
					else if (this.nPos == 12) 
					{
						this.tblBHVI.col12.Number = this.nWert;
					}
					else if (this.nPos == 13) 
					{
						this.tblBHVI.col13.Number = this.nWert;
					}
					else if (this.nPos == 14) 
					{
						this.tblBHVI.col14.Number = this.nWert;
					}
					else if (this.nPos == 15) 
					{
						this.tblBHVI.col15.Number = this.nWert;
					}
					else if (this.nPos == 3) 
					{
						this.tblBHVI.colAnfahrt.Number = this.nWert;
					}
					else if (this.nPos == 4) 
					{
						this.tblBHVI.colBG.Number = this.nWert;
					}
					else if (this.nPos == 5) 
					{
						this.tblBHVI.colIB.Number = this.nWert;
					}
					else if (this.nPos == 6) 
					{
						this.tblBHVI.colAufwand.Number = this.nWert;
					}
					else if (this.nPos == 7) 
					{
						this.tblBHVI.colVerbrauch.Number = this.nWert;
					}
					else if (this.nPos == 8) 
					{
						this.tblBHVI.colAuslagen.Number = this.nWert;
					}
					else if (this.nPos == 9) 
					{
						this.tblBHVI.col9.Number = this.nWert;
					}
					// 27.02.23 Ä2083 neue GOT
					else if (this.nPos == 16) 
					{
						this.tblBHVI.col16.Number = this.nWert;
					}
					else if (this.nPos == 17) 
					{
						this.tblBHVI.col17.Number = this.nWert;
					}
					else if (this.nPos == 18) 
					{
						this.tblBHVI.col18.Number = this.nWert;
					}
					else if (this.nPos == 19) 
					{
						this.tblBHVI.colDoku.Number = this.nWert;
					}
					else if (this.nPos == 20) 
					{
						this.tblBHVI.col20.Number = this.nWert;
					}
					else if (this.nPos == 21) 
					{
						this.tblBHVI.col21.Number = this.nWert;
					}
					else if (this.nPos == 22) 
					{
						this.tblBHVI.col22.Number = this.nWert;
					}
				}
				this.hSqlTSK.Commit();
			}

			// Call SalTblSetRowFlags ( tblBHVI, lParam, ROW_UserFlag1, FALSE )
			// Call SalTblSetRowFlags ( tblBHVI, lParam, ROW_UserFlag2, FALSE )
			// If frmTSK.tblBHVI.colBeihDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblBHVI, lParam, ROW_UserFlag2, TRUE )
			// Else
			// If frmTSK.tblBHVI.colAntrDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblBHVI, lParam, ROW_UserFlag1, TRUE )
			// Else
			// Call SalTblSetRowFlags ( tblBHVI, lParam, ROW_UserFlag1, FALSE )

			this.strHVN = "";
			this.strHNN = "";
			this.strHS = "";
			this.strHO = "";
			Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblBHVI.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where harztnr = :frmTSK.tblBHVI.colArztNr AND hhalternr = :frmTSK.tblBHVI.colHalterNr AND hdeaktiv IS NULL");
			if (this.strHVN != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHVN;
			}
			if (this.strHO != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHO;
			}
			if (this.strHS != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHS;
			}
			this.tblBHVI.colHalter.Text = this.strHNN;
			// 22.09.23 Ä2129
			if (this.tblBHVI.colBEGuid.Text != "") 
			{
				Var.nBeihilfeDM = Int.PalGetBeiHilfeausGUID(this.tblBHVI.colBEGuid.Text);
				this.tblBHVI.colBeihilfeGUID.Text = Var.nBeihilfeDM.ToString(2);
				// 27.10.23 Ä2129
				this.nBetrag = this.PalBerechneBetrag(this.tblBHVI.colArztNr.Number, this.tblBHVI.colHalterNr.Number, this.tblBHVI.colErfDat.DateTime, ref this.nBeihilfe, false);
				this.tblBHVI.colSumme.Number = this.nBetrag;
				this.tblBHVI.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, false);
				if (this.nBeihilfe > this.nBetrag) 
				{
					this.tblBHVI.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, true);
					// Call SqlImmed( 'UPDATE tsk SET tsksperre=1
					// WHERE tskarztnr = :frmTSK.tblBT.colArztNr AND tskhalternr = :frmTSK.tblBT.colHalterNr AND tskerfdat = :frmTSK.tblBT.colErfDat' )
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBHVI_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBHVI.colAntrDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfInfo.Text = "Antrag an VetAmt noch nicht versandt";
			}
			else
			{
				this.dfInfo.Text = "Antrag an VetAmt am " + Int.PalDateToStrDE(this.tblBHVI.colAntrDat.DateTime);
				if (this.tblBHVI.colBeihDat.DateTime == Sys.DATETIME_Null) 
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "noch keine Antwort von TSK";
				}
				else
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "Beihilfe gewährt am " + Int.PalDateToStrDE(this.tblBHVI.colBeihDat.DateTime) + " in Höhe von € " + Int.PalStrNum(this.tblBHVI.colBeihilfe.Number, 8, 2);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowSetContext event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBHVI_OnSAM_RowSetContext(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblBHVI.colBeihilfeGUID.ClearList();
			if (this.tblBHVI.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
			{
				this.PalBEDropDown(this.tblBHVI.colBeihilfeGUID, this.tblBHVI.colRegNr.Text);
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeuBHVI WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBHVI_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeuBHVI_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbNeuBHVI_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeuBHVI_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBHVI_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("BHVI");
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBHVI_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("BHVI");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBHVI_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeuBHVI, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbLoeBHVI WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBHVI_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoeBHVI_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbLoeBHVI_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBHVI_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBHVI.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblBHVI.FindNextRow(ref Var.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblBHVI.SetFocusRow(Var.nRow);
					if (Int.SqlImmed("DELETE FROM tsk WHERE tskarztnr = :frmTSK.tblBHVI.colArztNr AND tskerfdat = :frmTSK.tblBHVI.colErfDat")) 
					{
						if (Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr = :frmTSK.tblBHVI.colArztNr AND tskperfdat = :frmTSK.tblBHVI.colErfDat")) 
						{
							this.tblBHVI.DeleteRow(Var.nRow, Sys.TBL_NoAdjust);
						}
					}
				}
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBHVI_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbLoeBHVI, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// tblBVD WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVD_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblBVD_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_EndCellTab:
					this.tblBVD_OnSAM_EndCellTab(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.tblBVD_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblBVD_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblBVD_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_RowSetContext:
					this.tblBVD_OnSAM_RowSetContext(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVD_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblBVD, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_EndCellTab event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVD_OnSAM_EndCellTab(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("BVD");
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVD_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("BVD");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVD_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.hSqlTSK.PrepareAndExecute(@"SELECT tskppos, tskpwert FROM tskp INTO :frmTSK.nPos :frmTSK.nWert
WHERE tskparztnr= :frmTSK.tblBVD.colArztNr AND tskperfdat = :frmTSK.tblBVD.colErfDat")) 
			{
				while (this.hSqlTSK.FetchNext(ref this.nFetchTSK)) 
				{
					if (this.nPos == 11) 
					{
						this.tblBVD.col11.Number = this.nWert;
					}
					else if (this.nPos == 12) 
					{
						this.tblBVD.col12.Number = this.nWert;
					}
					else if (this.nPos == 13) 
					{
						this.tblBVD.col13.Number = this.nWert;
					}
					else if (this.nPos == 3) 
					{
						this.tblBVD.colAnfahrt.Number = this.nWert;
					}
					else if (this.nPos == 4) 
					{
						this.tblBVD.colBG.Number = this.nWert;
					}
					else if (this.nPos == 5) 
					{
						this.tblBVD.colIB.Number = this.nWert;
					}
					else if (this.nPos == 6) 
					{
						this.tblBVD.colAufwand.Number = this.nWert;
					}
					else if (this.nPos == 7) 
					{
						this.tblBVD.colVerbrauch.Number = this.nWert;
					}
					else if (this.nPos == 8) 
					{
						this.tblBVD.colAuslagen.Number = this.nWert;
					}
					else if (this.nPos == 9) 
					{
						this.tblBVD.col9.Number = this.nWert;
					}
				}
				this.hSqlTSK.Commit();
			}

			// Call SalTblSetRowFlags ( tblBVD, lParam, ROW_UserFlag1, FALSE )
			// Call SalTblSetRowFlags ( tblBVD, lParam, ROW_UserFlag2, FALSE )
			// If frmTSK.tblBVD.colBeihDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblBVD, lParam, ROW_UserFlag2, TRUE )
			// Else
			// If frmTSK.tblBVD.colAntrDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblBVD, lParam, ROW_UserFlag1, TRUE )
			// Else
			// Call SalTblSetRowFlags ( tblBVD, lParam, ROW_UserFlag1, FALSE )

			this.strHVN = "";
			this.strHNN = "";
			this.strHS = "";
			this.strHO = "";
			Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblBVD.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where harztnr = :frmTSK.tblBVD.colArztNr AND hhalternr = :frmTSK.tblBVD.colHalterNr AND hdeaktiv IS NULL");
			if (this.strHVN != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHVN;
			}
			if (this.strHO != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHO;
			}
			if (this.strHS != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHS;
			}
			this.tblBVD.colHalter.Text = this.strHNN;
			// 22.09.23 Ä2129
			if (this.tblBVD.colBEGuid.Text != "") 
			{
				Var.nBeihilfeDM = Int.PalGetBeiHilfeausGUID(this.tblBVD.colBEGuid.Text);
				this.tblBVD.colBeihilfeGUID.Text = Var.nBeihilfeDM.ToString(2);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVD_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBVD.colAntrDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfInfo.Text = "Antrag an VetAmt noch nicht versandt";
			}
			else
			{
				this.dfInfo.Text = "Antrag an VetAmt am " + Int.PalDateToStrDE(this.tblBVD.colAntrDat.DateTime);
				if (this.tblBVD.colBeihDat.DateTime == Sys.DATETIME_Null) 
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "noch keine Antwort von TSK";
				}
				else
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "Beihilfe gewährt am " + Int.PalDateToStrDE(this.tblBVD.colBeihDat.DateTime) + " in Höhe von € " + Int.PalStrNum(this.tblBVD.colBeihilfe.Number, 8, 2);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowSetContext event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVD_OnSAM_RowSetContext(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblBVD.colBeihilfeGUID.ClearList();
			if (this.tblBVD.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
			{
				this.PalBEDropDown(this.tblBVD.colBeihilfeGUID, this.tblBVD.colRegNr.Text);
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeuBVD WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBVD_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeuBVD_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbNeuBVD_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeuBVD_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBVD_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("BVD");
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBVD_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("BVD");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBVD_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeuBVD, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbLoeBVD WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBVD_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoeBVD_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbLoeBVD_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBVD_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBVD.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblBVD.FindNextRow(ref Var.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblBVD.SetFocusRow(Var.nRow);
					if (Int.SqlImmed("DELETE FROM tsk WHERE tskarztnr = :frmTSK.tblBVD.colArztNr AND tskerfdat = :frmTSK.tblBVD.colErfDat")) 
					{
						if (Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr = :frmTSK.tblBVD.colArztNr AND tskperfdat = :frmTSK.tblBVD.colErfDat")) 
						{
							this.tblBVD.DeleteRow(Var.nRow, Sys.TBL_NoAdjust);
						}
					}
				}
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBVD_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbLoeBVD, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// tblTbc WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTbc_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblTbc_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_EndCellTab:
					this.tblTbc_OnSAM_EndCellTab(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.tblTbc_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblTbc_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblTbc_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_RowSetContext:
					this.tblTbc_OnSAM_RowSetContext(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTbc_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblTbc, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_EndCellTab event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTbc_OnSAM_EndCellTab(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("Tbc");
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTbc_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("Tbc");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTbc_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.hSqlTSK.PrepareAndExecute(@"SELECT tskppos, tskpwert FROM tskp INTO :frmTSK.nPos :frmTSK.nWert
WHERE tskparztnr= :frmTSK.tblTbc.colArztNr AND tskperfdat = :frmTSK.tblTbc.colErfDat")) 
			{
				while (this.hSqlTSK.FetchNext(ref this.nFetchTSK)) 
				{
					if (this.nPos == 11) 
					{
						this.tblTbc.col11.Number = this.nWert;
					}
					else if (this.nPos == 12) 
					{
						this.tblTbc.col12.Number = this.nWert;
					}
					else if (this.nPos == 3) 
					{
						this.tblTbc.colAnfahrt.Number = this.nWert;
					}
					else if (this.nPos == 4) 
					{
						this.tblTbc.colBG.Number = this.nWert;
					}
					else if (this.nPos == 6) 
					{
						this.tblTbc.colAufwand.Number = this.nWert;
					}
					else if (this.nPos == 7) 
					{
						this.tblTbc.colVerbrauch.Number = this.nWert;
					}
					else if (this.nPos == 8) 
					{
						this.tblTbc.colAuslagen.Number = this.nWert;
					}
				}
				this.hSqlTSK.Commit();
			}

			// Call SalTblSetRowFlags ( tblTbc, lParam, ROW_UserFlag1, FALSE )
			// Call SalTblSetRowFlags ( tblTbc, lParam, ROW_UserFlag2, FALSE )
			// If frmTSK.tblTbc.colBeihDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblTbc, lParam, ROW_UserFlag2, TRUE )
			// Else
			// If frmTSK.tblTbc.colAntrDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblTbc, lParam, ROW_UserFlag1, TRUE )
			// Else
			// Call SalTblSetRowFlags ( tblTbc, lParam, ROW_UserFlag1, FALSE )

			this.strHVN = "";
			this.strHNN = "";
			this.strHS = "";
			this.strHO = "";
			Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblTbc.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where harztnr = :frmTSK.tblTbc.colArztNr AND hhalternr = :frmTSK.tblTbc.colHalterNr AND hdeaktiv IS NULL");
			if (this.strHVN != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHVN;
			}
			if (this.strHO != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHO;
			}
			if (this.strHS != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHS;
			}
			this.tblTbc.colHalter.Text = this.strHNN;
			// 22.09.23 Ä2129
			if (this.tblTbc.colBEGuid.Text != "") 
			{
				Var.nBeihilfeDM = Int.PalGetBeiHilfeausGUID(this.tblTbc.colBEGuid.Text);
				this.tblTbc.colBeihilfeGUID.Text = Var.nBeihilfeDM.ToString(2);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTbc_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblTbc.colAntrDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfInfo.Text = "Antrag an VetAmt noch nicht versandt";
			}
			else
			{
				this.dfInfo.Text = "Antrag an VetAmt am " + Int.PalDateToStrDE(this.tblTbc.colAntrDat.DateTime);
				if (this.tblTbc.colBeihDat.DateTime == Sys.DATETIME_Null) 
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "noch keine Antwort von TSK";
				}
				else
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "Beihilfe gewährt am " + Int.PalDateToStrDE(this.tblTbc.colBeihDat.DateTime) + " in Höhe von € " + Int.PalStrNum(this.tblTbc.colBeihilfe.Number, 8, 2);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowSetContext event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTbc_OnSAM_RowSetContext(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblTbc.colBeihilfeGUID.ClearList();
			if (this.tblTbc.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
			{
				this.PalBEDropDown(this.tblTbc.colBeihilfeGUID, this.tblTbc.colRegNr.Text);
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeuTbc WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuTbc_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeuTbc_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbNeuTbc_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeuTbc_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuTbc_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("Tbc");
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuTbc_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("Tbc");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuTbc_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeuTbc, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbLoeTbc WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeTbc_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoeTbc_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbLoeTbc_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeTbc_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblTbc.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblTbc.FindNextRow(ref Var.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblTbc.SetFocusRow(Var.nRow);
					if (Int.SqlImmed("DELETE FROM tsk WHERE tskarztnr = :frmTSK.tblTbc.colArztNr AND tskerfdat = :frmTSK.tblTbc.colErfDat")) 
					{
						if (Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr = :frmTSK.tblTbc.colArztNr AND tskperfdat = :frmTSK.tblTbc.colErfDat")) 
						{
							this.tblTbc.DeleteRow(Var.nRow, Sys.TBL_NoAdjust);
						}
					}
				}
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeTbc_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbLoeTbc, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// tblBTBV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBTBV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblBTBV_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_EndCellTab:
					this.tblBTBV_OnSAM_EndCellTab(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.tblBTBV_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblBTBV_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblBTBV_OnSAM_RowHeaderClick(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBTBV_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblBTBV, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_EndCellTab event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBTBV_OnSAM_EndCellTab(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("BTBV");
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBTBV_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("BTBV");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBTBV_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.hSqlTSK.PrepareAndExecute(@"SELECT tskppos, tskpwert FROM tskp INTO :frmTSK.nPos :frmTSK.nWert
WHERE tskparztnr= :frmTSK.tblBTBV.colArztNr AND tskperfdat = :frmTSK.tblBTBV.colErfDat")) 
			{
				while (this.hSqlTSK.FetchNext(ref this.nFetchTSK)) 
				{
					if (this.nPos == 1) 
					{
						this.tblBTBV.colImpf.Number = this.nWert;
					}
					else if (this.nPos == 3) 
					{
						this.tblBTBV.colAnfahrt.Number = this.nWert;
					}
					else if (this.nPos == 4) 
					{
						this.tblBTBV.colBG.Number = this.nWert;
					}
					else if (this.nPos == 5) 
					{
						this.tblBTBV.colIB.Number = this.nWert;
					}
					else if (this.nPos == 6) 
					{
						this.tblBTBV.colAufwand.Number = this.nWert;
					}
					else if (this.nPos == 7) 
					{
						this.tblBTBV.colVerbrauch.Number = this.nWert;
					}
					else if (this.nPos == 8) 
					{
						this.tblBTBV.colAuslagen.Number = this.nWert;
					}
				}
				this.hSqlTSK.Commit();
			}

			// Call SalTblSetRowFlags ( tblBTBV, lParam, ROW_UserFlag1, FALSE )
			// Call SalTblSetRowFlags ( tblBTBV, lParam, ROW_UserFlag2, FALSE )
			// If frmTSK.tblBTBV.colBeihDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblBTBV, lParam, ROW_UserFlag2, TRUE )
			// Else
			// If frmTSK.tblBTBV.colAntrDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblBTBV, lParam, ROW_UserFlag1, TRUE )
			// Else
			// Call SalTblSetRowFlags ( tblBTBV, lParam, ROW_UserFlag1, FALSE )

			this.strHVN = "";
			this.strHNN = "";
			this.strHS = "";
			this.strHO = "";
			Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblBTBV.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where harztnr = :frmTSK.tblBTBV.colArztNr AND hhalternr = :frmTSK.tblBTBV.colHalterNr AND hdeaktiv IS NULL");
			if (this.strHVN != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHVN;
			}
			if (this.strHO != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHO;
			}
			if (this.strHS != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHS;
			}
			this.tblBTBV.colHalter.Text = this.strHNN;
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBTBV_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBTBV.colAntrDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfInfo.Text = "Antrag an VetAmt noch nicht versandt";
			}
			else
			{
				this.dfInfo.Text = "Antrag an VetAmt am " + Int.PalDateToStrDE(this.tblBTBV.colAntrDat.DateTime);
				if (this.tblBTBV.colBeihDat.DateTime == Sys.DATETIME_Null) 
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "noch keine Antwort von TSK";
				}
				else
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "Beihilfe gewährt am " + Int.PalDateToStrDE(this.tblBTBV.colBeihDat.DateTime) + " in Höhe von € " + Int.PalStrNum(this.tblBTBV.colBeihilfe.Number, 8, 2);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeuBTBV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBTBV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeuBTBV_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbNeuBTBV_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeuBTBV_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBTBV_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("BTBV");
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBTBV_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("BTBV");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBTBV_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeuBTBV, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbLoeBTBV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBTBV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoeBTBV_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbLoeBTBV_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBTBV_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBTBV.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblBTBV.FindNextRow(ref Var.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblBTBV.SetFocusRow(Var.nRow);
					if (Int.SqlImmed("DELETE FROM tsk WHERE tskarztnr = :frmTSK.tblBTBV.colArztNr AND tskerfdat = :frmTSK.tblBTBV.colErfDat")) 
					{
						if (Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr = :frmTSK.tblBTBV.colArztNr AND tskperfdat = :frmTSK.tblBTBV.colErfDat")) 
						{
							this.tblBTBV.DeleteRow(Var.nRow, Sys.TBL_NoAdjust);
						}
					}
				}
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBTBV_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbLoeBTBV, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// tblBHVIBV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBHVIBV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblBHVIBV_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_EndCellTab:
					this.tblBHVIBV_OnSAM_EndCellTab(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.tblBHVIBV_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblBHVIBV_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblBHVIBV_OnSAM_RowHeaderClick(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBHVIBV_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblBHVIBV, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_EndCellTab event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBHVIBV_OnSAM_EndCellTab(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("BHVIBV");
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBHVIBV_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("BHVIBV");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBHVIBV_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.hSqlTSK.PrepareAndExecute(@"SELECT tskppos, tskpwert FROM tskp INTO :frmTSK.nPos :frmTSK.nWert
WHERE tskparztnr= :frmTSK.tblBHVIBV.colArztNr AND tskperfdat = :frmTSK.tblBHVIBV.colErfDat")) 
			{
				while (this.hSqlTSK.FetchNext(ref this.nFetchTSK)) 
				{
					if (this.nPos == 11) 
					{
						this.tblBHVIBV.col11.Number = this.nWert;
					}
					else if (this.nPos == 12) 
					{
						this.tblBHVIBV.col12.Number = this.nWert;
					}
					else if (this.nPos == 14) 
					{
						this.tblBHVIBV.col14.Number = this.nWert;
					}
					else if (this.nPos == 15) 
					{
						this.tblBHVIBV.col15.Number = this.nWert;
					}
					else if (this.nPos == 3) 
					{
						this.tblBHVIBV.colAnfahrt.Number = this.nWert;
					}
					else if (this.nPos == 4) 
					{
						this.tblBHVIBV.colBG.Number = this.nWert;
					}
					else if (this.nPos == 5) 
					{
						this.tblBHVIBV.colIB.Number = this.nWert;
					}
					else if (this.nPos == 6) 
					{
						this.tblBHVIBV.colAufwand.Number = this.nWert;
					}
					else if (this.nPos == 7) 
					{
						this.tblBHVIBV.colVerbrauch.Number = this.nWert;
					}
					else if (this.nPos == 8) 
					{
						this.tblBHVIBV.colAuslagen.Number = this.nWert;
					}
					else if (this.nPos == 9) 
					{
						this.tblBHVIBV.col9.Number = this.nWert;
					}
				}
				this.hSqlTSK.Commit();
			}

			// Call SalTblSetRowFlags ( tblBHVIBV, lParam, ROW_UserFlag1, FALSE )
			// Call SalTblSetRowFlags ( tblBHVIBV, lParam, ROW_UserFlag2, FALSE )
			// If frmTSK.tblBHVIBV.colBeihDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblBHVIBV, lParam, ROW_UserFlag2, TRUE )
			// Else
			// If frmTSK.tblBHVIBV.colAntrDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblBHVIBV, lParam, ROW_UserFlag1, TRUE )
			// Else
			// Call SalTblSetRowFlags ( tblBHVIBV, lParam, ROW_UserFlag1, FALSE )

			this.strHVN = "";
			this.strHNN = "";
			this.strHS = "";
			this.strHO = "";
			Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblBHVIBV.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where harztnr = :frmTSK.tblBHVIBV.colArztNr AND hhalternr = :frmTSK.tblBHVIBV.colHalterNr AND hdeaktiv IS NULL");
			if (this.strHVN != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHVN;
			}
			if (this.strHO != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHO;
			}
			if (this.strHS != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHS;
			}
			this.tblBHVIBV.colHalter.Text = this.strHNN;
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBHVIBV_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBHVIBV.colAntrDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfInfo.Text = "Antrag an VetAmt noch nicht versandt";
			}
			else
			{
				this.dfInfo.Text = "Antrag an VetAmt am " + Int.PalDateToStrDE(this.tblBHVIBV.colAntrDat.DateTime);
				if (this.tblBHVIBV.colBeihDat.DateTime == Sys.DATETIME_Null) 
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "noch keine Antwort von TSK";
				}
				else
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "Beihilfe gewährt am " + Int.PalDateToStrDE(this.tblBHVIBV.colBeihDat.DateTime) + " in Höhe von € " + Int.PalStrNum(this.tblBHVIBV.colBeihilfe.Number, 8, 2);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeuBVHIBV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBVHIBV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeuBVHIBV_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbNeuBVHIBV_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeuBVHIBV_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBVHIBV_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("BHVIBV");
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBVHIBV_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("BHVIBV");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBVHIBV_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeuBVHIBV, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbLoeBVHIBV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBVHIBV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoeBVHIBV_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbLoeBVHIBV_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBVHIBV_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBHVIBV.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblBHVIBV.FindNextRow(ref Var.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblBHVIBV.SetFocusRow(Var.nRow);
					if (Int.SqlImmed("DELETE FROM tsk WHERE tskarztnr = :frmTSK.tblBHVIBV.colArztNr AND tskerfdat = :frmTSK.tblBHVIBV.colErfDat")) 
					{
						if (Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr = :frmTSK.tblBHVIBV.colArztNr AND tskperfdat = :frmTSK.tblBHVIBV.colErfDat")) 
						{
							this.tblBHVIBV.DeleteRow(Var.nRow, Sys.TBL_NoAdjust);
						}
					}
				}
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBVHIBV_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbLoeBVHIBV, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// tblBVDBV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVDBV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblBVDBV_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_EndCellTab:
					this.tblBVDBV_OnSAM_EndCellTab(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.tblBVDBV_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblBVDBV_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblBVDBV_OnSAM_RowHeaderClick(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVDBV_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblBVDBV, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_EndCellTab event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVDBV_OnSAM_EndCellTab(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("BVDBV");
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVDBV_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("BVDBV");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVDBV_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.hSqlTSK.PrepareAndExecute(@"SELECT tskppos, tskpwert FROM tskp INTO :frmTSK.nPos :frmTSK.nWert
WHERE tskparztnr= :frmTSK.tblBVDBV.colArztNr AND tskperfdat = :frmTSK.tblBVDBV.colErfDat")) 
			{
				while (this.hSqlTSK.FetchNext(ref this.nFetchTSK)) 
				{
					if (this.nPos == 11) 
					{
						this.tblBVDBV.col11.Number = this.nWert;
					}
					else if (this.nPos == 12) 
					{
						this.tblBVDBV.col12.Number = this.nWert;
					}
					else if (this.nPos == 3) 
					{
						this.tblBVDBV.colAnfahrt.Number = this.nWert;
					}
					else if (this.nPos == 4) 
					{
						this.tblBVDBV.colBG.Number = this.nWert;
					}
					else if (this.nPos == 5) 
					{
						this.tblBVDBV.colIB.Number = this.nWert;
					}
					else if (this.nPos == 6) 
					{
						this.tblBVDBV.colAufwand.Number = this.nWert;
					}
					else if (this.nPos == 7) 
					{
						this.tblBVDBV.colVerbrauch.Number = this.nWert;
					}
					else if (this.nPos == 8) 
					{
						this.tblBVDBV.colAuslagen.Number = this.nWert;
					}
					else if (this.nPos == 9) 
					{
						this.tblBVDBV.col9.Number = this.nWert;
					}
				}
				this.hSqlTSK.Commit();
			}

			// Call SalTblSetRowFlags ( tblBVDBV, lParam, ROW_UserFlag1, FALSE )
			// Call SalTblSetRowFlags ( tblBVDBV, lParam, ROW_UserFlag2, FALSE )
			// If frmTSK.tblBVDBV.colBeihDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblBVDBV, lParam, ROW_UserFlag2, TRUE )
			// Else
			// If frmTSK.tblBVDBV.colAntrDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblBVDBV, lParam, ROW_UserFlag1, TRUE )
			// Else
			// Call SalTblSetRowFlags ( tblBVDBV, lParam, ROW_UserFlag1, FALSE )

			this.strHVN = "";
			this.strHNN = "";
			this.strHS = "";
			this.strHO = "";
			Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblBVDBV.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where harztnr = :frmTSK.tblBVDBV.colArztNr AND hhalternr = :frmTSK.tblBVDBV.colHalterNr AND hdeaktiv IS NULL");
			if (this.strHVN != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHVN;
			}
			if (this.strHO != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHO;
			}
			if (this.strHS != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHS;
			}
			this.tblBVDBV.colHalter.Text = this.strHNN;
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVDBV_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBVDBV.colAntrDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfInfo.Text = "Antrag an VetAmt noch nicht versandt";
			}
			else
			{
				this.dfInfo.Text = "Antrag an VetAmt am " + Int.PalDateToStrDE(this.tblBVDBV.colAntrDat.DateTime);
				if (this.tblBVDBV.colBeihDat.DateTime == Sys.DATETIME_Null) 
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "noch keine Antwort von TSK";
				}
				else
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "Beihilfe gewährt am " + Int.PalDateToStrDE(this.tblBVDBV.colBeihDat.DateTime) + " in Höhe von € " + Int.PalStrNum(this.tblBVDBV.colBeihilfe.Number, 8, 2);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeuBVDBV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBVDBV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeuBVDBV_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbNeuBVDBV_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeuBVDBV_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBVDBV_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("BVDBV");
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBVDBV_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("BVDBV");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBVDBV_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeuBVDBV, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbLoeBVDBV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBVDBV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoeBVDBV_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbLoeBVDBV_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBVDBV_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBVDBV.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblBVDBV.FindNextRow(ref Var.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblBVDBV.SetFocusRow(Var.nRow);
					if (Int.SqlImmed("DELETE FROM tsk WHERE tskarztnr = :frmTSK.tblBVDBV.colArztNr AND tskerfdat = :frmTSK.tblBVDBV.colErfDat")) 
					{
						if (Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr = :frmTSK.tblBVDBV.colArztNr AND tskperfdat = :frmTSK.tblBVDBV.colErfDat")) 
						{
							this.tblBVDBV.DeleteRow(Var.nRow, Sys.TBL_NoAdjust);
						}
					}
				}
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBVDBV_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbLoeBVDBV, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// tblBruc WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBruc_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblBruc_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_EndCellTab:
					this.tblBruc_OnSAM_EndCellTab(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.tblBruc_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblBruc_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblBruc_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_RowSetContext:
					this.tblBruc_OnSAM_RowSetContext(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBruc_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblBruc, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_EndCellTab event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBruc_OnSAM_EndCellTab(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("Bruc");
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBruc_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("Bruc");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBruc_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.hSqlTSK.PrepareAndExecute(@"SELECT tskppos, tskpwert FROM tskp INTO :frmTSK.nPos :frmTSK.nWert
WHERE tskparztnr= :frmTSK.tblBruc.colArztNr AND tskperfdat = :frmTSK.tblBruc.colErfDat")) 
			{
				while (this.hSqlTSK.FetchNext(ref this.nFetchTSK)) 
				{
					if (this.nPos == 12) 
					{
						this.tblBruc.col12.Number = this.nWert;
					}
					else if (this.nPos == 13) 
					{
						this.tblBruc.col13.Number = this.nWert;
					}
					else if (this.nPos == 16) 
					{
						this.tblBruc.col16.Number = this.nWert;
					}
					else if (this.nPos == 3) 
					{
						this.tblBruc.colAnfahrt.Number = this.nWert;
					}
					else if (this.nPos == 4) 
					{
						this.tblBruc.colBG.Number = this.nWert;
					}
					else if (this.nPos == 5) 
					{
						this.tblBruc.colIB.Number = this.nWert;
					}
					else if (this.nPos == 6) 
					{
						this.tblBruc.colAufwand.Number = this.nWert;
					}
					else if (this.nPos == 7) 
					{
						this.tblBruc.colVerbrauch.Number = this.nWert;
					}
					else if (this.nPos == 8) 
					{
						this.tblBruc.colAuslagen.Number = this.nWert;
					}
					else if (this.nPos == 9) 
					{
						this.tblBruc.col9.Number = this.nWert;
					}
					// 27.02.23 Ä2083 neue GOT
					else if (this.nPos == 17) 
					{
						this.tblBruc.col17.Number = this.nWert;
					}
					else if (this.nPos == 18) 
					{
						this.tblBruc.col18.Number = this.nWert;
					}
					else if (this.nPos == 19) 
					{
						this.tblBruc.colDoku.Number = this.nWert;
					}
					else if (this.nPos == 20) 
					{
						this.tblBruc.col20.Number = this.nWert;
					}
					else if (this.nPos == 21) 
					{
						this.tblBruc.col21.Number = this.nWert;
					}
				}
				this.hSqlTSK.Commit();
			}

			// Call SalTblSetRowFlags ( tblBruc, lParam, ROW_UserFlag1, FALSE )
			// Call SalTblSetRowFlags ( tblBruc, lParam, ROW_UserFlag2, FALSE )
			// If frmTSK.tblBruc.colBeihDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblBruc, lParam, ROW_UserFlag2, TRUE )
			// Else
			// If frmTSK.tblBruc.colAntrDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblBruc, lParam, ROW_UserFlag1, TRUE )
			// Else
			// Call SalTblSetRowFlags ( tblBruc, lParam, ROW_UserFlag1, FALSE )

			this.strHVN = "";
			this.strHNN = "";
			this.strHS = "";
			this.strHO = "";
			Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblBruc.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where harztnr = :frmTSK.tblBruc.colArztNr AND hhalternr = :frmTSK.tblBruc.colHalterNr AND hdeaktiv IS NULL");
			if (this.strHVN != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHVN;
			}
			if (this.strHO != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHO;
			}
			if (this.strHS != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHS;
			}
			this.tblBruc.colHalter.Text = this.strHNN;
			// 22.09.23 Ä2129
			if (this.tblBruc.colBEGuid.Text != "") 
			{
				Var.nBeihilfeDM = Int.PalGetBeiHilfeausGUID(this.tblBruc.colBEGuid.Text);
				this.tblBruc.colBeihilfeGUID.Text = Var.nBeihilfeDM.ToString(2);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBruc_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBruc.colAntrDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfInfo.Text = "Antrag an VetAmt noch nicht versandt";
			}
			else
			{
				this.dfInfo.Text = "Antrag an VetAmt am " + Int.PalDateToStrDE(this.tblBruc.colAntrDat.DateTime);
				if (this.tblBruc.colBeihDat.DateTime == Sys.DATETIME_Null) 
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "noch keine Antwort von TSK";
				}
				else
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "Beihilfe gewährt am " + Int.PalDateToStrDE(this.tblBruc.colBeihDat.DateTime) + " in Höhe von € " + Int.PalStrNum(this.tblBruc.colBeihilfe.Number, 8, 2);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowSetContext event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBruc_OnSAM_RowSetContext(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblBruc.colBeihilfeGUID.ClearList();
			if (this.tblBruc.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
			{
				this.PalBEDropDown(this.tblBruc.colBeihilfeGUID, this.tblBruc.colRegNr.Text);
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeuBruc WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBruc_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeuBruc_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbNeuBruc_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeuBruc_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBruc_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("Bruc");
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBruc_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("Bruc");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBruc_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeuBruc, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbLoeBruc WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBruc_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoeBruc_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbLoeBruc_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBruc_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBruc.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblBruc.FindNextRow(ref Var.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblBruc.SetFocusRow(Var.nRow);
					if (Int.SqlImmed("DELETE FROM tsk WHERE tskarztnr = :frmTSK.tblBruc.colArztNr AND tskerfdat = :frmTSK.tblBruc.colErfDat")) 
					{
						if (Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr = :frmTSK.tblBruc.colArztNr AND tskperfdat = :frmTSK.tblBruc.colErfDat")) 
						{
							this.tblBruc.DeleteRow(Var.nRow, Sys.TBL_NoAdjust);
						}
					}
				}
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBruc_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbLoeBruc, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// tblAK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblAK_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_EndCellTab:
					this.tblAK_OnSAM_EndCellTab(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.tblAK_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblAK_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblAK_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_RowSetContext:
					this.tblAK_OnSAM_RowSetContext(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAK_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblAK, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_EndCellTab event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAK_OnSAM_EndCellTab(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("AK");
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAK_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("AK");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAK_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.hSqlTSK.PrepareAndExecute(@"SELECT tskppos, tskpwert FROM tskp INTO :frmTSK.nPos :frmTSK.nWert
WHERE tskparztnr= :frmTSK.tblAK.colArztNr AND tskperfdat = :frmTSK.tblAK.colErfDat")) 
			{
				while (this.hSqlTSK.FetchNext(ref this.nFetchTSK)) 
				{
					if (this.nPos == 17) 
					{
						this.tblAK.col17.Number = this.nWert;
					}
					else if (this.nPos == 3) 
					{
						this.tblAK.colAnfahrt.Number = this.nWert;
					}
					else if (this.nPos == 4) 
					{
						this.tblAK.colBG.Number = this.nWert;
					}
					else if (this.nPos == 5) 
					{
						this.tblAK.colIB.Number = this.nWert;
					}
					else if (this.nPos == 6) 
					{
						this.tblAK.colAufwand.Number = this.nWert;
					}
					else if (this.nPos == 7) 
					{
						this.tblAK.colVerbrauch.Number = this.nWert;
					}
					else if (this.nPos == 8) 
					{
						this.tblAK.colAuslagen.Number = this.nWert;
					}
					else if (this.nPos == 9) 
					{
						this.tblAK.col9.Number = this.nWert;
					}
					// 27.02.23 Ä2083 neue GOT
					else if (this.nPos == 18) 
					{
						this.tblAK.col18.Number = this.nWert;
					}
					else if (this.nPos == 19) 
					{
						this.tblAK.colDoku.Number = this.nWert;
					}
					else if (this.nPos == 20) 
					{
						this.tblAK.col20.Number = this.nWert;
					}
					else if (this.nPos == 21) 
					{
						this.tblAK.col21.Number = this.nWert;
					}
					else if (this.nPos == 22) 
					{
						this.tblAK.col22.Number = this.nWert;
					}
					else if (this.nPos == 23) 
					{
						this.tblAK.col23.Number = this.nWert;
					}
				}
				this.hSqlTSK.Commit();
			}

			// Call SalTblSetRowFlags ( tblAK, lParam, ROW_UserFlag1, FALSE )
			// Call SalTblSetRowFlags ( tblAK, lParam, ROW_UserFlag2, FALSE )
			// If frmTSK.tblAK.colBeihDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblAK, lParam, ROW_UserFlag2, TRUE )
			// Else
			// If frmTSK.tblAK.colAntrDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblAK, lParam, ROW_UserFlag1, TRUE )
			// Else
			// Call SalTblSetRowFlags ( tblAK, lParam, ROW_UserFlag1, FALSE )

			this.strHVN = "";
			this.strHNN = "";
			this.strHS = "";
			this.strHO = "";
			Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblAK.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where harztnr = :frmTSK.tblAK.colArztNr AND hhalternr = :frmTSK.tblAK.colHalterNr AND hdeaktiv IS NULL");
			if (this.strHVN != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHVN;
			}
			if (this.strHO != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHO;
			}
			if (this.strHS != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHS;
			}
			this.tblAK.colHalter.Text = this.strHNN;
			// 22.09.23 Ä2129
			if (this.tblAK.colBEGuid.Text != "") 
			{
				Var.nBeihilfeDM = Int.PalGetBeiHilfeausGUID(this.tblAK.colBEGuid.Text);
				this.tblAK.colBeihilfeGUID.Text = Var.nBeihilfeDM.ToString(2);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAK_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblAK.colAntrDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfInfo.Text = "Antrag an VetAmt noch nicht versandt";
			}
			else
			{
				this.dfInfo.Text = "Antrag an VetAmt am " + Int.PalDateToStrDE(this.tblAK.colAntrDat.DateTime);
				if (this.tblAK.colBeihDat.DateTime == Sys.DATETIME_Null) 
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "noch keine Antwort von TSK";
				}
				else
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "Beihilfe gewährt am " + Int.PalDateToStrDE(this.tblAK.colBeihDat.DateTime) + " in Höhe von € " + Int.PalStrNum(this.tblAK.colBeihilfe.Number, 8, 2);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowSetContext event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAK_OnSAM_RowSetContext(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblAK.colBeihilfeGUID.ClearList();
			if (this.tblAK.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
			{
				this.PalBEDropDown(this.tblAK.colBeihilfeGUID, this.tblAK.colRegNr.Text);
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeuAK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuAK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeuAK_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbNeuAK_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeuAK_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuAK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("AK");
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuAK_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("AK");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuAK_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeuAK, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbLoeAK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeAK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoeAK_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbLoeAK_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeAK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblAK.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblAK.FindNextRow(ref Var.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblAK.SetFocusRow(Var.nRow);
					if (Int.SqlImmed("DELETE FROM tsk WHERE tskarztnr = :frmTSK.tblAK.colArztNr AND tskerfdat = :frmTSK.tblAK.colErfDat")) 
					{
						if (Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr = :frmTSK.tblAK.colArztNr AND tskperfdat = :frmTSK.tblAK.colErfDat")) 
						{
							this.tblAK.DeleteRow(Var.nRow, Sys.TBL_NoAdjust);
						}
					}
				}
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeAK_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbLoeAK, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// tblBrucBV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBrucBV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblBrucBV_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_EndCellTab:
					this.tblBrucBV_OnSAM_EndCellTab(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.tblBrucBV_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblBrucBV_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblBrucBV_OnSAM_RowHeaderClick(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBrucBV_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblBrucBV, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_EndCellTab event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBrucBV_OnSAM_EndCellTab(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("BrucBV");
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBrucBV_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("BrucBV");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBrucBV_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.hSqlTSK.PrepareAndExecute(@"SELECT tskppos, tskpwert FROM tskp INTO :frmTSK.nPos :frmTSK.nWert
WHERE tskparztnr= :frmTSK.tblBrucBV.colArztNr AND tskperfdat = :frmTSK.tblBrucBV.colErfDat")) 
			{
				while (this.hSqlTSK.FetchNext(ref this.nFetchTSK)) 
				{
					if (this.nPos == 12) 
					{
						this.tblBrucBV.col12.Number = this.nWert;
					}
					else if (this.nPos == 16) 
					{
						this.tblBrucBV.col16.Number = this.nWert;
					}
					else if (this.nPos == 3) 
					{
						this.tblBrucBV.colAnfahrt.Number = this.nWert;
					}
					else if (this.nPos == 4) 
					{
						this.tblBrucBV.colBG.Number = this.nWert;
					}
					else if (this.nPos == 5) 
					{
						this.tblBrucBV.colIB.Number = this.nWert;
					}
					else if (this.nPos == 6) 
					{
						this.tblBrucBV.colAufwand.Number = this.nWert;
					}
					else if (this.nPos == 7) 
					{
						this.tblBrucBV.colVerbrauch.Number = this.nWert;
					}
					else if (this.nPos == 8) 
					{
						this.tblBrucBV.colAuslagen.Number = this.nWert;
					}
					else if (this.nPos == 9) 
					{
						this.tblBrucBV.col9.Number = this.nWert;
					}
				}
				this.hSqlTSK.Commit();
			}

			// Call SalTblSetRowFlags ( tblBrucBV, lParam, ROW_UserFlag1, FALSE )
			// Call SalTblSetRowFlags ( tblBrucBV, lParam, ROW_UserFlag2, FALSE )
			// If frmTSK.tblBrucBV.colBeihDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblBrucBV, lParam, ROW_UserFlag2, TRUE )
			// Else
			// If frmTSK.tblBrucBV.colAntrDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblBrucBV, lParam, ROW_UserFlag1, TRUE )
			// Else
			// Call SalTblSetRowFlags ( tblBrucBV, lParam, ROW_UserFlag1, FALSE )

			this.strHVN = "";
			this.strHNN = "";
			this.strHS = "";
			this.strHO = "";
			Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblBrucBV.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where harztnr = :frmTSK.tblBrucBV.colArztNr AND hhalternr = :frmTSK.tblBrucBV.colHalterNr AND hdeaktiv IS NULL");
			if (this.strHVN != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHVN;
			}
			if (this.strHO != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHO;
			}
			if (this.strHS != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHS;
			}
			this.tblBrucBV.colHalter.Text = this.strHNN;
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBrucBV_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBrucBV.colAntrDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfInfo.Text = "Antrag an VetAmt noch nicht versandt";
			}
			else
			{
				this.dfInfo.Text = "Antrag an VetAmt am " + Int.PalDateToStrDE(this.tblBrucBV.colAntrDat.DateTime);
				if (this.tblBrucBV.colBeihDat.DateTime == Sys.DATETIME_Null) 
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "noch keine Antwort von TSK";
				}
				else
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "Beihilfe gewährt am " + Int.PalDateToStrDE(this.tblBrucBV.colBeihDat.DateTime) + " in Höhe von € " + Int.PalStrNum(this.tblBrucBV.colBeihilfe.Number, 8, 2);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeuLeukBV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuLeukBV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeuLeukBV_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbNeuLeukBV_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeuLeukBV_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuLeukBV_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("BrucBV");
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuLeukBV_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("BrucBV");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuLeukBV_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeuLeukBV, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbLoeLeukBV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeLeukBV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoeLeukBV_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbLoeLeukBV_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeLeukBV_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBrucBV.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblBrucBV.FindNextRow(ref Var.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblBrucBV.SetFocusRow(Var.nRow);
					if (Int.SqlImmed("DELETE FROM tsk WHERE tskarztnr = :frmTSK.tblBrucBV.colArztNr AND tskerfdat = :frmTSK.tblBrucBV.colErfDat")) 
					{
						if (Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr = :frmTSK.tblBrucBV.colArztNr AND tskperfdat = :frmTSK.tblBrucBV.colErfDat")) 
						{
							this.tblBrucBV.DeleteRow(Var.nRow, Sys.TBL_NoAdjust);
						}
					}
				}
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeLeukBV_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbLoeLeukBV, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// tblAKBV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAKBV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblAKBV_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_EndCellTab:
					this.tblAKBV_OnSAM_EndCellTab(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.tblAKBV_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblAKBV_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblAKBV_OnSAM_RowHeaderClick(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAKBV_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblAKBV, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_EndCellTab event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAKBV_OnSAM_EndCellTab(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("AKBV");
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAKBV_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("AKBV");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAKBV_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.hSqlTSK.PrepareAndExecute(@"SELECT tskppos, tskpwert FROM tskp INTO :frmTSK.nPos :frmTSK.nWert
WHERE tskparztnr= :frmTSK.tblAKBV.colArztNr AND tskperfdat = :frmTSK.tblAKBV.colErfDat")) 
			{
				while (this.hSqlTSK.FetchNext(ref this.nFetchTSK)) 
				{
					if (this.nPos == 17) 
					{
						this.tblAKBV.col17.Number = this.nWert;
					}
					else if (this.nPos == 3) 
					{
						this.tblAKBV.colAnfahrt.Number = this.nWert;
					}
					else if (this.nPos == 4) 
					{
						this.tblAKBV.colBG.Number = this.nWert;
					}
					else if (this.nPos == 5) 
					{
						this.tblAKBV.colIB.Number = this.nWert;
					}
					else if (this.nPos == 6) 
					{
						this.tblAKBV.colAufwand.Number = this.nWert;
					}
					else if (this.nPos == 7) 
					{
						this.tblAKBV.colVerbrauch.Number = this.nWert;
					}
					else if (this.nPos == 8) 
					{
						this.tblAKBV.colAuslagen.Number = this.nWert;
					}
					else if (this.nPos == 9) 
					{
						this.tblAKBV.col9.Number = this.nWert;
					}
				}
				this.hSqlTSK.Commit();
			}

			// Call SalTblSetRowFlags ( tblAKBV, lParam, ROW_UserFlag1, FALSE )
			// Call SalTblSetRowFlags ( tblAKBV, lParam, ROW_UserFlag2, FALSE )
			// If frmTSK.tblAKBV.colBeihDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblAKBV, lParam, ROW_UserFlag2, TRUE )
			// Else
			// If frmTSK.tblAKBV.colAntrDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblAKBV, lParam, ROW_UserFlag1, TRUE )
			// Else
			// Call SalTblSetRowFlags ( tblAKBV, lParam, ROW_UserFlag1, FALSE )

			this.strHVN = "";
			this.strHNN = "";
			this.strHS = "";
			this.strHO = "";
			Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblAKBV.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where harztnr = :frmTSK.tblAKBV.colArztNr AND hhalternr = :frmTSK.tblAKBV.colHalterNr AND hdeaktiv IS NULL");
			if (this.strHVN != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHVN;
			}
			if (this.strHO != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHO;
			}
			if (this.strHS != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHS;
			}
			this.tblAKBV.colHalter.Text = this.strHNN;
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAKBV_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblAKBV.colAntrDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfInfo.Text = "Antrag an VetAmt noch nicht versandt";
			}
			else
			{
				this.dfInfo.Text = "Antrag an VetAmt am " + Int.PalDateToStrDE(this.tblAKBV.colAntrDat.DateTime);
				if (this.tblAKBV.colBeihDat.DateTime == Sys.DATETIME_Null) 
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "noch keine Antwort von TSK";
				}
				else
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "Beihilfe gewährt am " + Int.PalDateToStrDE(this.tblAKBV.colBeihDat.DateTime) + " in Höhe von € " + Int.PalStrNum(this.tblAKBV.colBeihilfe.Number, 8, 2);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeuAKBV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuAKBV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeuAKBV_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbNeuAKBV_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeuAKBV_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuAKBV_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("AKBV");
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuAKBV_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("AKBV");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuAKBV_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeuAKBV, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbLoeAkBV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeAkBV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoeAkBV_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbLoeAkBV_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeAkBV_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblAKBV.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblAKBV.FindNextRow(ref Var.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblAKBV.SetFocusRow(Var.nRow);
					if (Int.SqlImmed("DELETE FROM tsk WHERE tskarztnr = :frmTSK.tblAKBV.colArztNr AND tskerfdat = :frmTSK.tblAKBV.colErfDat")) 
					{
						if (Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr = :frmTSK.tblAKBV.colArztNr AND tskperfdat = :frmTSK.tblAKBV.colErfDat")) 
						{
							this.tblAKBV.DeleteRow(Var.nRow, Sys.TBL_NoAdjust);
						}
					}
				}
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeAkBV_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbLoeAkBV, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbNeuTbcBV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuTbcBV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeuTbcBV_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbNeuTbcBV_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeuTbcBV_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuTbcBV_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("BVDBV");
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuTbcBV_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("BVDBV");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuTbcBV_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeuTbcBV, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbLoeTbcBV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeTbcBV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoeTbcBV_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbLoeTbcBV_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeTbcBV_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBVDBV.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblBVDBV.FindNextRow(ref Var.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblBVDBV.SetFocusRow(Var.nRow);
					if (Int.SqlImmed("DELETE FROM tsk WHERE tskarztnr = :frmTSK.tblBVDBV.colArztNr AND tskerfdat = :frmTSK.tblBVDBV.colErfDat")) 
					{
						if (Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr = :frmTSK.tblBVDBV.colArztNr AND tskperfdat = :frmTSK.tblBVDBV.colErfDat")) 
						{
							this.tblBVDBV.DeleteRow(Var.nRow, Sys.TBL_NoAdjust);
						}
					}
				}
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeTbcBV_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbLoeTbcBV, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// tblBVDv WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVDv_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblBVDv_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_EndCellTab:
					this.tblBVDv_OnSAM_EndCellTab(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.tblBVDv_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblBVDv_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblBVDv_OnSAM_RowHeaderClick(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVDv_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblBVDv, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_EndCellTab event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVDv_OnSAM_EndCellTab(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("BVDv");
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVDv_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("BVDv");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVDv_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.hSqlTSK.PrepareAndExecute(@"SELECT tskppos, tskpwert, tskptext FROM tskp INTO :frmTSK.nPos :frmTSK.nWert, :frmTSK.strWert
WHERE tskparztnr= :frmTSK.tblBVDv.colArztNr AND tskperfdat = :frmTSK.tblBVDv.colErfDat")) 
			{
				while (this.hSqlTSK.FetchNext(ref this.nFetchTSK)) 
				{
					if (this.nPos == 20) 
					{
						this.tblBVDv.col20.Number = this.nWert;
					}
					else if (this.nPos == 21) 
					{
						this.tblBVDv.col21.Number = this.nWert;
					}
					else if (this.nPos == 22) 
					{
						this.tblBVDv.col22.Number = this.nWert;
					}
					else if (this.nPos == 23) 
					{
						this.tblBVDv.col23.Text = this.strWert;
					}
					else if (this.nPos == 3) 
					{
						this.tblBVDv.colAnfahrt.Number = this.nWert;
					}
					else if (this.nPos == 6) 
					{
						this.tblBVDv.colAufwand.Number = this.nWert;
					}
					else if (this.nPos == 7) 
					{
						this.tblBVDv.colVerbrauch.Number = this.nWert;
					}
					else if (this.nPos == 8) 
					{
						this.tblBVDv.colAuslagen.Number = this.nWert;
					}
				}
				this.hSqlTSK.Commit();
			}

			// Call SalTblSetRowFlags ( tblBVDv, lParam, ROW_UserFlag1, FALSE )
			// Call SalTblSetRowFlags ( tblBVDv, lParam, ROW_UserFlag2, FALSE )
			// If frmTSK.tblBVDv.colBeihDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblBVDv, lParam, ROW_UserFlag2, TRUE )
			// Else
			// If frmTSK.tblBVDv.colAntrDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblBVDv, lParam, ROW_UserFlag1, TRUE )
			// Else
			// Call SalTblSetRowFlags ( tblBVDv, lParam, ROW_UserFlag1, FALSE )

			this.strHVN = "";
			this.strHNN = "";
			this.strHS = "";
			this.strHO = "";
			Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblBVDv.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where harztnr = :frmTSK.tblBVDv.colArztNr AND hhalternr = :frmTSK.tblBVDv.colHalterNr AND hdeaktiv IS NULL");
			if (this.strHVN != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHVN;
			}
			if (this.strHO != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHO;
			}
			if (this.strHS != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHS;
			}
			this.tblBVDv.colHalter.Text = this.strHNN;
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblBVDv_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBVDv.colAntrDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfInfo.Text = "Antrag an VetAmt noch nicht versandt";
			}
			else
			{
				this.dfInfo.Text = "Antrag an VetAmt am " + Int.PalDateToStrDE(this.tblBVDv.colAntrDat.DateTime);
				if (this.tblBVDv.colBeihDat.DateTime == Sys.DATETIME_Null) 
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "noch keine Antwort von TSK";
				}
				else
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "Beihilfe gewährt am " + Int.PalDateToStrDE(this.tblBVDv.colBeihDat.DateTime) + " in Höhe von € " + Int.PalStrNum(this.tblBVDv.colBeihilfe.Number, 8, 2);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeuBVDv WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBVDv_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeuBVDv_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbNeuBVDv_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeuBVDv_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBVDv_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("BVDv");
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBVDv_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("BVDv");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuBVDv_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeuBVDv, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbLoeBVDv WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBVDv_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoeBVDv_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbLoeBVDv_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBVDv_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBVDv.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblBVDv.FindNextRow(ref Var.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblBVDv.SetFocusRow(Var.nRow);
					if (Int.SqlImmed("DELETE FROM tsk WHERE tskarztnr = :frmTSK.tblBVDv.colArztNr AND tskerfdat = :frmTSK.tblBVDv.colErfDat")) 
					{
						if (Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr = :frmTSK.tblBVDv.colArztNr AND tskperfdat = :frmTSK.tblBVDv.colErfDat")) 
						{
							this.tblBVDv.DeleteRow(Var.nRow, Sys.TBL_NoAdjust);
						}
					}
				}
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeBVDv_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbLoeBVDv, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// tblTSKF WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTSKF_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblTSKF_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_EndCellTab:
					this.tblTSKF_OnSAM_EndCellTab(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.tblTSKF_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblTSKF_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblTSKF_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_RowSetContext:
					this.tblTSKF_OnSAM_RowSetContext(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTSKF_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblTSKF, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_EndCellTab event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTSKF_OnSAM_EndCellTab(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("TSKF");
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTSKF_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("TSKF");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTSKF_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.hSqlTSK.PrepareAndExecute(@"SELECT tskppos, tskpwert FROM tskp INTO :frmTSK.nPos :frmTSK.nWert
WHERE tskparztnr= :frmTSK.tblTSKF.colArztNr AND tskperfdat = :frmTSK.tblTSKF.colErfDat")) 
			{
				while (this.hSqlTSK.FetchNext(ref this.nFetchTSK)) 
				{
					if (this.nPos == 3) 
					{
						this.tblTSKF.colTagessatz.Number = this.nWert;
					}
					else if (this.nPos == 4) 
					{
						this.tblTSKF.colAnzStd.Number = this.nWert;
					}
					else if (this.nPos == 5) 
					{
						this.tblTSKF.colTageKarenz.Number = this.nWert;
					}
					else if (this.nPos == 6) 
					{
						this.tblTSKF.colkmSatz.Number = this.nWert;
					}
					else if (this.nPos == 7) 
					{
						this.tblTSKF.colAnreiseKosten.Number = this.nWert;
					}
					else if (this.nPos == 8) 
					{
						this.tblTSKF.colUebernacht.Number = this.nWert;
					}
				}
				this.hSqlTSK.Commit();
			}

			// Call SalTblSetRowFlags ( tblTSKF, lParam, ROW_UserFlag1, FALSE )
			// Call SalTblSetRowFlags ( tblTSKF, lParam, ROW_UserFlag2, FALSE )
			// If frmTSK.tblTSKF.colBeihDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblTSKF, lParam, ROW_UserFlag2, TRUE )
			// Else
			// If frmTSK.tblTSKF.colAntrDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblTSKF, lParam, ROW_UserFlag1, TRUE )
			// Else
			// Call SalTblSetRowFlags ( tblTSKF, lParam, ROW_UserFlag1, FALSE )

			this.strHVN = "";
			this.strHNN = "";
			this.strHS = "";
			this.strHO = "";
			Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblTSKF.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where harztnr = :frmTSK.tblTSKF.colArztNr AND hhalternr = :frmTSK.tblTSKF.colHalterNr AND hdeaktiv IS NULL");
			if (this.strHVN != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHVN;
			}
			if (this.strHO != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHO;
			}
			if (this.strHS != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHS;
			}
			this.tblTSKF.colHalter.Text = this.strHNN;
			// 22.09.23 Ä2129
			if (this.tblTSKF.colBEGuid.Text != "") 
			{
				Var.nBeihilfeDM = Int.PalGetBeiHilfeausGUID(this.tblTSKF.colBEGuid.Text);
				this.tblTSKF.colBeihilfeGUID.Text = Var.nBeihilfeDM.ToString(2);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTSKF_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblTSKF.colAntrDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfInfo.Text = "Antrag an VetAmt noch nicht versandt";
			}
			else
			{
				this.dfInfo.Text = "Antrag an VetAmt am " + Int.PalDateToStrDE(this.tblTSKF.colAntrDat.DateTime);
				if (this.tblTSKF.colBeihDat.DateTime == Sys.DATETIME_Null) 
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "noch keine Antwort von TSK";
				}
				else
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "Beihilfe gewährt am " + Int.PalDateToStrDE(this.tblTSKF.colBeihDat.DateTime) + " in Höhe von € " + Int.PalStrNum(this.tblTSKF.colBeihilfe.Number, 8, 2);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowSetContext event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTSKF_OnSAM_RowSetContext(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblTSKF.colBeihilfeGUID.ClearList();
			if (this.tblTSKF.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
			{
				this.PalBEDropDown(this.tblTSKF.colBeihilfeGUID, this.tblTSKF.colRegNr.Text);
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeuTSKF WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuTSKF_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeuTSKF_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbNeuTSKF_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeuTSKF_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuTSKF_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("TSKF");
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuTSKF_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("TSKF");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuTSKF_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeuTSKF, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbLoeTSKF WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeTSKF_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoeTSKF_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbLoeTSKF_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeTSKF_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblTSKF.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblTSKF.FindNextRow(ref Var.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblTSKF.SetFocusRow(Var.nRow);
					if (Int.SqlImmed("DELETE FROM tsk WHERE tskarztnr = :frmTSK.tblTSKF.colArztNr AND tskerfdat = :frmTSK.tblTSKF.colErfDat")) 
					{
						if (Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr = :frmTSK.tblTSKF.colArztNr AND tskperfdat = :frmTSK.tblTSKF.colErfDat")) 
						{
							this.tblTSKF.DeleteRow(Var.nRow, Sys.TBL_NoAdjust);
						}
					}
				}
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeTSKF_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbLoeTSKF, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// tblParaTB WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblParaTB_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblParaTB_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_EndCellTab:
					this.tblParaTB_OnSAM_EndCellTab(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.tblParaTB_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblParaTB_OnSAM_FetchRowDone(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblParaTB_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_RowSetContext:
					this.tblParaTB_OnSAM_RowSetContext(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblParaTB_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblParaTB, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_EndCellTab event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblParaTB_OnSAM_EndCellTab(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("TSKF");
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblParaTB_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("TSKF");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblParaTB_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.hSqlTSK.PrepareAndExecute(@"SELECT tskppos, tskpwert FROM tskp INTO :frmTSK.nPos :frmTSK.nWert
WHERE tskparztnr= :frmTSK.tblParaTB.colArztNr AND tskperfdat = :frmTSK.tblParaTB.colErfDat")) 
			{
				while (this.hSqlTSK.FetchNext(ref this.nFetchTSK)) 
				{
					if (this.nPos == 3) 
					{
						this.tblParaTB.col3.Number = this.nWert;
					}
					else if (this.nPos == 4) 
					{
						this.tblParaTB.col4.Number = this.nWert;
					}
				}
				this.hSqlTSK.Commit();
			}

			// Call SalTblSetRowFlags ( tblParaTB, lParam, ROW_UserFlag1, FALSE )
			// Call SalTblSetRowFlags ( tblParaTB, lParam, ROW_UserFlag2, FALSE )
			// If frmTSK.tblParaTB.colBeihDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblParaTB, lParam, ROW_UserFlag2, TRUE )
			// Else
			// If frmTSK.tblParaTB.colAntrDat != DATETIME_Null
			// Call SalTblSetRowFlags ( tblParaTB, lParam, ROW_UserFlag1, TRUE )
			// Else
			// Call SalTblSetRowFlags ( tblParaTB, lParam, ROW_UserFlag1, FALSE )

			this.strHVN = "";
			this.strHNN = "";
			this.strHS = "";
			this.strHO = "";
			Int.SqlImmedSel(@"SELECT hregnr, hvn, hnn, hstr, hort
INTO :frmTSK.tblParaTB.colRegNr, :frmTSK.strHVN, :frmTSK.strHNN, :frmTSK.strHS, :frmTSK.strHO
from H where harztnr = :frmTSK.tblParaTB.colArztNr AND hhalternr = :frmTSK.tblParaTB.colHalterNr AND hdeaktiv IS NULL");
			if (this.strHVN != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHVN;
			}
			if (this.strHO != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHO;
			}
			if (this.strHS != "") 
			{
				this.strHNN = this.strHNN + ", " + this.strHS;
			}
			this.tblParaTB.colHalter.Text = this.strHNN;
			// 22.09.23 Ä2129
			if (this.tblParaTB.colBEGuid.Text != "") 
			{
				Var.nBeihilfeDM = Int.PalGetBeiHilfeausGUID(this.tblParaTB.colBEGuid.Text);
				this.tblParaTB.colBeihilfeGUID.Text = Var.nBeihilfeDM.ToString(2);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblParaTB_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblParaTB.colAntrDat.DateTime == Sys.DATETIME_Null) 
			{
				this.dfInfo.Text = "Antrag an VetAmt noch nicht versandt";
			}
			else
			{
				this.dfInfo.Text = "Antrag an VetAmt am " + Int.PalDateToStrDE(this.tblParaTB.colAntrDat.DateTime);
				if (this.tblParaTB.colBeihDat.DateTime == Sys.DATETIME_Null) 
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "noch keine Antwort von TSK";
				}
				else
				{
					this.dfInfo.Text = this.dfInfo.Text + " - " + "Beihilfe gewährt am " + Int.PalDateToStrDE(this.tblParaTB.colBeihDat.DateTime) + " in Höhe von € " + Int.PalStrNum(this.tblParaTB.colBeihilfe.Number, 8, 2);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowSetContext event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblParaTB_OnSAM_RowSetContext(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblParaTB.colBeihilfeGUID.ClearList();
			if (this.tblParaTB.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
			{
				this.PalBEDropDown(this.tblParaTB.colBeihilfeGUID, this.tblParaTB.colRegNr.Text);
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeuParaTB WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuParaTB_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeuParaTB_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbNeuParaTB_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeuParaTB_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuParaTB_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow("ParaTB");
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuParaTB_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow("ParaTB");
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeuParaTB_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeuParaTB, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbLoeParaTB WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeParaTB_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoeParaTB_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbLoeParaTB_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeParaTB_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblParaTB.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				Var.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblParaTB.FindNextRow(ref Var.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblParaTB.SetFocusRow(Var.nRow);
					if (Int.SqlImmed("DELETE FROM tsk WHERE tskarztnr = :frmTSK.tblParaTB.colArztNr AND tskerfdat = :frmTSK.tblParaTB.colErfDat")) 
					{
						if (Int.SqlImmed("DELETE FROM tskp WHERE tskparztnr = :frmTSK.tblParaTB.colArztNr AND tskperfdat = :frmTSK.tblParaTB.colErfDat")) 
						{
							this.tblParaTB.DeleteRow(Var.nRow, Sys.TBL_NoAdjust);
						}
					}
				}
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoeParaTB_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbLoeParaTB, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
			this.DestroyWindow();
			#endregion
		}
		#endregion
		
		#region tblBT
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblBTTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTSK _frmTSK = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblBTTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTSK frmTSK
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTSK == null) 
					{
						_frmTSK = (frmTSK)this.FindForm();
					}
					return _frmTSK;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblBTTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblBTTableWindow)SalWindow.FromHandle(handle, typeof(tblBTTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colHalterNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colHalterNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckHalterNr(true, this.colArztNr.Number, this.colHalterNr.Number, "BT");
				this.colBeihilfeGUID.ClearList();
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				#endregion
			}
			
			/// <summary>
			/// colRegNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colRegNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckReg(true, this.colArztNr.Number, this.colRegNr.Text, "BT");
				this.colBeihilfeGUID.ClearList();
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				#endregion
			}
			
			/// <summary>
			/// colDatum WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colDatum_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				else
				{
					this.colBeihilfeGUID.ClearList();
				}
				#endregion
			}
			
			/// <summary>
			/// colRinder WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRinder_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colRinder_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRinder_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BT", this.colRinder.Number, this.colSchafe.Number, -1, -1, -1, -1, -1))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// colSchafe WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colSchafe_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colSchafe_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colSchafe_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BT", this.colRinder.Number, this.colSchafe.Number, -1, -1, -1, -1, -1))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// colBeihilfeGUID WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfeGUID_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					// On SAM_SetFocus
					
					case Sys.SAM_Validate:
						this.colBeihilfeGUID_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfeGUID_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.nByte = ((SalString)this.colBeihilfeGUID.Text).Scan(((SalNumber)9).ToCharacter());
				if (this.frmTSK.nByte != -1) 
				{
					this.colBEGuid.Text = ((SalString)this.colBeihilfeGUID.Text).Mid(this.frmTSK.nByte + 1, 255);
					// 27.10.23 Ä2129
					this.frmTSK.PalTSKSave();

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalNumber temp1 = this.frmTSK.nBeihilfe;
					this.frmTSK.nBetrag = this.frmTSK.PalBerechneBetrag(this.colArztNr.Number, this.colHalterNr.Number, this.colErfDat.DateTime, ref temp1, true);
					this.frmTSK.nBeihilfe = temp1;

					this.colSumme.Number = this.frmTSK.nBetrag;
					this.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, false);
					if (this.frmTSK.nBeihilfe > this.frmTSK.nBetrag) 
					{
						this.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, true);
						// Call SqlImmed( 'UPDATE tsk SET tsksperre=1
						// WHERE tskarztnr = :frmTSK.tblBT.colArztNr AND tskhalternr = :frmTSK.tblBT.colHalterNr AND tskerfdat = :frmTSK.tblBT.colErfDat' )
					}
					// Else
					// Call SqlImmed( 'UPDATE tsk SET tsksperre=0
					// WHERE tskarztnr = :frmTSK.tblBT.colArztNr AND tskhalternr = :frmTSK.tblBT.colHalterNr AND tskerfdat = :frmTSK.tblBT.colErfDat' )

				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblBHVI
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblBHVITableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTSK _frmTSK = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblBHVITableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTSK frmTSK
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTSK == null) 
					{
						_frmTSK = (frmTSK)this.FindForm();
					}
					return _frmTSK;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblBHVITableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblBHVITableWindow)SalWindow.FromHandle(handle, typeof(tblBHVITableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colArztNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colArztNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				#endregion
			}
			
			/// <summary>
			/// colHalterNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colHalterNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckHalterNr(true, this.colArztNr.Number, this.colHalterNr.Number, "BHVI");
				this.colBeihilfeGUID.ClearList();
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				#endregion
			}
			
			/// <summary>
			/// colRegNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colRegNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckReg(true, this.colArztNr.Number, this.colRegNr.Text, "BHVI");
				this.colBeihilfeGUID.ClearList();
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				#endregion
			}
			
			/// <summary>
			/// colDatum WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					// 27.02.23 Ä2083 neue GOT
					
					case Sys.SAM_Validate:
						this.colDatum_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				else
				{
					this.colBeihilfeGUID.ClearList();
				}
				if (this.colDatum.DateTime < new SalDateTime(2022, 11, 22)) 
				{
					this.col16.DisableWindow();
					this.col17.DisableWindow();
					this.col18.DisableWindow();
					this.colDoku.DisableWindow();
					this.col12.EnableWindow();
					this.col13.EnableWindow();
					this.colAufwand.EnableWindow();
				}
				else
				{
					this.col12.DisableWindow();
					this.col13.DisableWindow();
					this.colAufwand.DisableWindow();
					this.col16.EnableWindow();
					this.col17.EnableWindow();
					this.col18.EnableWindow();
					this.colDoku.EnableWindow();
				}
				#endregion
			}
			
			/// <summary>
			/// col11 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col11_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col11_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col11_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BHVI", -1, -1, this.col11.Number, this.col12.Number, this.col13.Number, this.col14.Number, this.col15.Number))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col16 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col16_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col16_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col16_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BHVI", -1, -1, this.col11.Number, this.col12.Number, this.col13.Number, this.col14.Number, this.col15.Number))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col17 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col17_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col17_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col17_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BHVI", -1, -1, this.col11.Number, this.col12.Number, this.col13.Number, this.col14.Number, this.col15.Number))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col18 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col18_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col18_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col18_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BHVI", -1, -1, this.col11.Number, this.col12.Number, this.col13.Number, this.col14.Number, this.col15.Number))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col12 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col12_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col12_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col12_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BHVI", -1, -1, this.col11.Number, this.col12.Number, this.col13.Number, this.col14.Number, this.col15.Number))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col13 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col13_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col13_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col13_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BHVI", -1, -1, this.col11.Number, this.col12.Number, this.col13.Number, this.col14.Number, this.col15.Number))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col14 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col14_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col14_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col14_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BHVI", -1, -1, this.col11.Number, this.col12.Number, this.col13.Number, this.col14.Number, this.col15.Number))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col15 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col15_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col15_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col15_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BHVI", -1, -1, this.col11.Number, this.col12.Number, this.col13.Number, this.col14.Number, this.col15.Number))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col20 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col20_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col20_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col20_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BHVI", -1, -1, this.col11.Number, this.col12.Number, this.col13.Number, this.col14.Number, this.col15.Number))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col21 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col21_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col21_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col21_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BHVI", -1, -1, this.col11.Number, this.col12.Number, this.col13.Number, this.col14.Number, this.col15.Number))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col22 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col22_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col22_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col22_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BHVI", -1, -1, this.col11.Number, this.col12.Number, this.col13.Number, this.col14.Number, this.col15.Number))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// colBeihilfeGUID WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfeGUID_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					// On SAM_SetFocus
					
					case Sys.SAM_Validate:
						this.colBeihilfeGUID_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfeGUID_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.nByte = ((SalString)this.colBeihilfeGUID.Text).Scan(((SalNumber)9).ToCharacter());
				if (this.frmTSK.nByte != -1) 
				{
					this.colBEGuid.Text = ((SalString)this.colBeihilfeGUID.Text).Mid(this.frmTSK.nByte + 1, 255);
					// 27.10.23 Ä2129
					this.frmTSK.PalTSKSave();

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalNumber temp1 = this.frmTSK.nBeihilfe;
					this.frmTSK.nBetrag = this.frmTSK.PalBerechneBetrag(this.colArztNr.Number, this.colHalterNr.Number, this.colErfDat.DateTime, ref temp1, true);
					this.frmTSK.nBeihilfe = temp1;

					this.colSumme.Number = this.frmTSK.nBetrag;
					this.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, false);
					if (this.frmTSK.nBeihilfe > this.frmTSK.nBetrag) 
					{
						this.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, true);
					}
				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblBVD
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblBVDTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTSK _frmTSK = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblBVDTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTSK frmTSK
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTSK == null) 
					{
						_frmTSK = (frmTSK)this.FindForm();
					}
					return _frmTSK;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblBVDTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblBVDTableWindow)SalWindow.FromHandle(handle, typeof(tblBVDTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colArztNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colArztNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				#endregion
			}
			
			/// <summary>
			/// colHalterNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colHalterNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckHalterNr(true, this.colArztNr.Number, this.colHalterNr.Number, "BVD");
				this.colBeihilfeGUID.ClearList();
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				#endregion
			}
			
			/// <summary>
			/// colRegNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colRegNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckReg(true, this.colArztNr.Number, this.colRegNr.Text, "BVD");
				this.colBeihilfeGUID.ClearList();
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				#endregion
			}
			
			/// <summary>
			/// colDatum WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colDatum_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				else
				{
					this.colBeihilfeGUID.ClearList();
				}
				#endregion
			}
			
			/// <summary>
			/// col11 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col11_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col11_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col11_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BVD", -1, -1, this.col11.Number, this.col12.Number, this.col13.Number, -1, -1))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col12 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col12_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col12_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col12_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BVD", -1, -1, this.col11.Number, this.col12.Number, this.col13.Number, -1, -1))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col13 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col13_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col13_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col13_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BVD", -1, -1, this.col11.Number, this.col12.Number, this.col13.Number, -1, -1))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// colBeihilfeGUID WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfeGUID_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					// On SAM_SetFocus
					
					case Sys.SAM_Validate:
						this.colBeihilfeGUID_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfeGUID_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.nByte = ((SalString)this.colBeihilfeGUID.Text).Scan(((SalNumber)9).ToCharacter());
				if (this.frmTSK.nByte != -1) 
				{
					this.colBEGuid.Text = ((SalString)this.colBeihilfeGUID.Text).Mid(this.frmTSK.nByte + 1, 255);
					// 13.11.23 Ä2129
					this.frmTSK.PalTSKSave();

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalNumber temp1 = this.frmTSK.nBeihilfe;
					this.frmTSK.nBetrag = this.frmTSK.PalBerechneBetrag(this.colArztNr.Number, this.colHalterNr.Number, this.colErfDat.DateTime, ref temp1, true);
					this.frmTSK.nBeihilfe = temp1;

					this.colSumme.Number = this.frmTSK.nBetrag;
					this.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, false);
					if (this.frmTSK.nBeihilfe > this.frmTSK.nBetrag) 
					{
						this.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, true);
					}

				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblTbc
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblTbcTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTSK _frmTSK = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblTbcTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTSK frmTSK
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTSK == null) 
					{
						_frmTSK = (frmTSK)this.FindForm();
					}
					return _frmTSK;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblTbcTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblTbcTableWindow)SalWindow.FromHandle(handle, typeof(tblTbcTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colArztNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colArztNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				#endregion
			}
			
			/// <summary>
			/// colHalterNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colHalterNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckHalterNr(true, this.colArztNr.Number, this.colHalterNr.Number, "Tbc");
				this.colBeihilfeGUID.ClearList();
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				#endregion
			}
			
			/// <summary>
			/// colRegNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colRegNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckReg(true, this.colArztNr.Number, this.colRegNr.Text, "Tbc");
				this.colBeihilfeGUID.ClearList();
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				#endregion
			}
			
			/// <summary>
			/// colDatum WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colDatum_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				else
				{
					this.colBeihilfeGUID.ClearList();
				}
				#endregion
			}
			
			/// <summary>
			/// col11 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col11_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col11_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col11_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "Tbc", -1, -1, this.col11.Number, this.col12.Number, -1, -1, -1))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col12 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col12_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col12_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col12_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "Tbc", -1, -1, this.col11.Number, this.col12.Number, -1, -1, -1))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// colBeihilfeGUID WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfeGUID_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					// On SAM_SetFocus
					
					case Sys.SAM_Validate:
						this.colBeihilfeGUID_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfeGUID_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.nByte = ((SalString)this.colBeihilfeGUID.Text).Scan(((SalNumber)9).ToCharacter());
				if (this.frmTSK.nByte != -1) 
				{
					this.colBEGuid.Text = ((SalString)this.colBeihilfeGUID.Text).Mid(this.frmTSK.nByte + 1, 255);
					// 13.11.23 Ä2129
					this.frmTSK.PalTSKSave();

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalNumber temp1 = this.frmTSK.nBeihilfe;
					this.frmTSK.nBetrag = this.frmTSK.PalBerechneBetrag(this.colArztNr.Number, this.colHalterNr.Number, this.colErfDat.DateTime, ref temp1, true);
					this.frmTSK.nBeihilfe = temp1;

					this.colSumme.Number = this.frmTSK.nBetrag;
					this.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, false);
					if (this.frmTSK.nBeihilfe > this.frmTSK.nBetrag) 
					{
						this.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, true);
					}

				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblBTBV
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblBTBVTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTSK _frmTSK = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblBTBVTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTSK frmTSK
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTSK == null) 
					{
						_frmTSK = (frmTSK)this.FindForm();
					}
					return _frmTSK;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblBTBVTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblBTBVTableWindow)SalWindow.FromHandle(handle, typeof(tblBTBVTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colArztNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colArztNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				#endregion
			}
			
			/// <summary>
			/// colHalterNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colHalterNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckHalterNr(true, this.colArztNr.Number, this.colHalterNr.Number, "BTBV");
				#endregion
			}
			
			/// <summary>
			/// colRegNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colRegNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckReg(true, this.colArztNr.Number, this.colRegNr.Text, "BTBV");
				#endregion
			}
			
			/// <summary>
			/// colImpf WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colImpf_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colImpf_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colImpf_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BTBV", this.colImpf.Number, -1, -1, -1, -1, -1, -1))) 
				{
				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblBHVIBV
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblBHVIBVTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTSK _frmTSK = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblBHVIBVTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTSK frmTSK
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTSK == null) 
					{
						_frmTSK = (frmTSK)this.FindForm();
					}
					return _frmTSK;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblBHVIBVTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblBHVIBVTableWindow)SalWindow.FromHandle(handle, typeof(tblBHVIBVTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colArztNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colArztNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				#endregion
			}
			
			/// <summary>
			/// colHalterNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colHalterNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckHalterNr(true, this.colArztNr.Number, this.colHalterNr.Number, "BHVIBV");
				#endregion
			}
			
			/// <summary>
			/// colRegNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colRegNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckReg(true, this.colArztNr.Number, this.colRegNr.Text, "BHVIBV");
				#endregion
			}
			
			/// <summary>
			/// col11 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col11_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col11_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col11_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BHVIBV", -1, -1, this.col11.Number, this.col12.Number, -1, this.col14.Number, this.col15.Number))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col12 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col12_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col12_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col12_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BHVIBV", -1, -1, this.col11.Number, this.col12.Number, -1, this.col14.Number, this.col15.Number))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col14 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col14_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col14_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col14_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BHVIBV", -1, -1, this.col11.Number, this.col12.Number, -1, this.col14.Number, this.col15.Number))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col15 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col15_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col15_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col15_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BHVIBV", -1, -1, this.col11.Number, this.col12.Number, -1, this.col14.Number, this.col15.Number))) 
				{
				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblBVDBV
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblBVDBVTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTSK _frmTSK = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblBVDBVTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTSK frmTSK
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTSK == null) 
					{
						_frmTSK = (frmTSK)this.FindForm();
					}
					return _frmTSK;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblBVDBVTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblBVDBVTableWindow)SalWindow.FromHandle(handle, typeof(tblBVDBVTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colArztNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colArztNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				#endregion
			}
			
			/// <summary>
			/// colHalterNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colHalterNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckHalterNr(true, this.colArztNr.Number, this.colHalterNr.Number, "BVDBV");
				#endregion
			}
			
			/// <summary>
			/// colRegNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colRegNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckReg(true, this.colArztNr.Number, this.colRegNr.Text, "BVDBV");
				#endregion
			}
			
			/// <summary>
			/// col11 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col11_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col11_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col11_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BVDBV", -1, -1, this.col11.Number, this.col12.Number, -1, -1, -1))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col12 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col12_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col12_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col12_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BVDBV", -1, -1, this.col11.Number, this.col12.Number, -1, -1, -1))) 
				{
				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblBruc
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblBrucTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTSK _frmTSK = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblBrucTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTSK frmTSK
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTSK == null) 
					{
						_frmTSK = (frmTSK)this.FindForm();
					}
					return _frmTSK;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblBrucTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblBrucTableWindow)SalWindow.FromHandle(handle, typeof(tblBrucTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colArztNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colArztNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				#endregion
			}
			
			/// <summary>
			/// colHalterNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colHalterNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckHalterNr(true, this.colArztNr.Number, this.colHalterNr.Number, "Bruc");
				this.colBeihilfeGUID.ClearList();
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				#endregion
			}
			
			/// <summary>
			/// colRegNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colRegNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckReg(true, this.colArztNr.Number, this.colRegNr.Text, "Bruc");
				this.colBeihilfeGUID.ClearList();
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				#endregion
			}
			
			/// <summary>
			/// colDatum WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					// 27.02.23 Ä2083 neue GOT
					
					case Sys.SAM_Validate:
						this.colDatum_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				else
				{
					this.colBeihilfeGUID.ClearList();
				}
				if (this.colDatum.DateTime < new SalDateTime(2022, 11, 22)) 
				{
					this.col17.DisableWindow();
					this.col18.DisableWindow();
					this.colDoku.DisableWindow();
					this.col20.DisableWindow();
					this.col21.DisableWindow();
					this.col12.EnableWindow();
					this.col13.EnableWindow();
					this.colAufwand.EnableWindow();
				}
				else
				{
					this.col12.DisableWindow();
					this.col13.DisableWindow();
					this.colAufwand.DisableWindow();
					this.col17.EnableWindow();
					this.col18.EnableWindow();
					this.colDoku.EnableWindow();
					this.col20.EnableWindow();
					this.col21.EnableWindow();
				}
				#endregion
			}
			
			/// <summary>
			/// col12 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col12_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col12_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col12_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "Bruc", -1, -1, this.col16.Number, this.col12.Number, this.col13.Number, -1, -1))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col13 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col13_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col13_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col13_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "Bruc", -1, -1, this.col16.Number, this.col12.Number, this.col13.Number, -1, -1))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col16 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col16_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col16_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col16_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "Bruc", -1, -1, this.col16.Number, this.col12.Number, this.col13.Number, -1, -1))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col14 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col14_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col14_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col14_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "Bruc", -1, -1, this.col16.Number, this.col12.Number, this.col13.Number, -1, -1))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// colBeihilfeGUID WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfeGUID_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					// On SAM_SetFocus
					
					case Sys.SAM_Validate:
						this.colBeihilfeGUID_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfeGUID_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.nByte = ((SalString)this.colBeihilfeGUID.Text).Scan(((SalNumber)9).ToCharacter());
				if (this.frmTSK.nByte != -1) 
				{
					this.colBEGuid.Text = ((SalString)this.colBeihilfeGUID.Text).Mid(this.frmTSK.nByte + 1, 255);
					// 13.11.23 Ä2129
					this.frmTSK.PalTSKSave();

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalNumber temp1 = this.frmTSK.nBeihilfe;
					this.frmTSK.nBetrag = this.frmTSK.PalBerechneBetrag(this.colArztNr.Number, this.colHalterNr.Number, this.colErfDat.DateTime, ref temp1, true);
					this.frmTSK.nBeihilfe = temp1;

					this.colSumme.Number = this.frmTSK.nBetrag;
					this.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, false);
					if (this.frmTSK.nBeihilfe > this.frmTSK.nBetrag) 
					{
						this.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, true);
					}

				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblAK
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblAKTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTSK _frmTSK = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblAKTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTSK frmTSK
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTSK == null) 
					{
						_frmTSK = (frmTSK)this.FindForm();
					}
					return _frmTSK;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblAKTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblAKTableWindow)SalWindow.FromHandle(handle, typeof(tblAKTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colArztNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colArztNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				#endregion
			}
			
			/// <summary>
			/// colHalterNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colHalterNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckHalterNr(true, this.colArztNr.Number, this.colHalterNr.Number, "AK");
				this.colBeihilfeGUID.ClearList();
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				#endregion
			}
			
			/// <summary>
			/// colRegNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colRegNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckReg(true, this.colArztNr.Number, this.colRegNr.Text, "AK");
				this.colBeihilfeGUID.ClearList();
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				#endregion
			}
			
			/// <summary>
			/// colDatum WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					// 27.02.23 Ä2083 neue GOT
					
					case Sys.SAM_Validate:
						this.colDatum_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				else
				{
					this.colBeihilfeGUID.ClearList();
				}
				if (this.colDatum.DateTime < new SalDateTime(2022, 11, 22)) 
				{
					this.col18.DisableWindow();
					this.colDoku.DisableWindow();
					this.col20.DisableWindow();
					this.col21.DisableWindow();
					this.col22.DisableWindow();
					// Call SalDisableWindow( col23 )
					this.col17.EnableWindow();
					this.colAufwand.EnableWindow();
				}
				else
				{
					this.col17.DisableWindow();
					this.colAufwand.DisableWindow();
					this.col18.EnableWindow();
					this.colDoku.EnableWindow();
					this.col20.EnableWindow();
					this.col21.EnableWindow();
					this.col22.EnableWindow();
					this.col23.EnableWindow();
				}
				#endregion
			}
			
			/// <summary>
			/// col17 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col17_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col17_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col17_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "AK", -1, -1, this.col17.Number, -1, -1, -1, -1))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// colBeihilfeGUID WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfeGUID_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					// On SAM_SetFocus
					
					case Sys.SAM_Validate:
						this.colBeihilfeGUID_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfeGUID_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.nByte = ((SalString)this.colBeihilfeGUID.Text).Scan(((SalNumber)9).ToCharacter());
				if (this.frmTSK.nByte != -1) 
				{
					this.colBEGuid.Text = ((SalString)this.colBeihilfeGUID.Text).Mid(this.frmTSK.nByte + 1, 255);
					// 13.11.23 Ä2129
					this.frmTSK.PalTSKSave();

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalNumber temp1 = this.frmTSK.nBeihilfe;
					this.frmTSK.nBetrag = this.frmTSK.PalBerechneBetrag(this.colArztNr.Number, this.colHalterNr.Number, this.colErfDat.DateTime, ref temp1, true);
					this.frmTSK.nBeihilfe = temp1;

					this.colSumme.Number = this.frmTSK.nBetrag;
					this.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, false);
					if (this.frmTSK.nBeihilfe > this.frmTSK.nBetrag) 
					{
						this.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, true);
					}

				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblBrucBV
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblBrucBVTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTSK _frmTSK = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblBrucBVTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTSK frmTSK
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTSK == null) 
					{
						_frmTSK = (frmTSK)this.FindForm();
					}
					return _frmTSK;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblBrucBVTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblBrucBVTableWindow)SalWindow.FromHandle(handle, typeof(tblBrucBVTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colArztNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colArztNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				#endregion
			}
			
			/// <summary>
			/// colHalterNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colHalterNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckHalterNr(true, this.colArztNr.Number, this.colHalterNr.Number, "BrucBV");
				#endregion
			}
			
			/// <summary>
			/// colRegNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colRegNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckReg(true, this.frmTSK.tblBruc.colArztNr.Number, this.frmTSK.tblBruc.colRegNr.Text, "Bruc");
				#endregion
			}
			
			/// <summary>
			/// col12 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col12_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col12_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col12_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BrucBV", -1, -1, this.col16.Number, this.col12.Number, -1, -1, -1))) 
				{
				}
				#endregion
			}
			
			/// <summary>
			/// col16 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col16_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col16_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col16_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "BrucBV", -1, -1, this.col16.Number, this.col12.Number, -1, -1, -1))) 
				{
				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblAKBV
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblAKBVTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTSK _frmTSK = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblAKBVTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTSK frmTSK
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTSK == null) 
					{
						_frmTSK = (frmTSK)this.FindForm();
					}
					return _frmTSK;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblAKBVTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblAKBVTableWindow)SalWindow.FromHandle(handle, typeof(tblAKBVTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colArztNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colArztNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				#endregion
			}
			
			/// <summary>
			/// colHalterNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colHalterNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckHalterNr(true, this.colArztNr.Number, this.colHalterNr.Number, "AKBV");
				#endregion
			}
			
			/// <summary>
			/// colRegNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colRegNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckReg(true, this.colArztNr.Number, this.colRegNr.Text, "AKBV");
				#endregion
			}
			
			/// <summary>
			/// col17 WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col17_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.col17_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void col17_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (!(this.frmTSK.PalCheck(this.colArztNr.Number, this.colHalterNr.Number, this.colZM.Text, this.colDatum.DateTime, "AKBV", -1, -1, this.col17.Number, -1, -1, -1, -1))) 
				{
				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblBVDv
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblBVDvTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTSK _frmTSK = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblBVDvTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTSK frmTSK
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTSK == null) 
					{
						_frmTSK = (frmTSK)this.FindForm();
					}
					return _frmTSK;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblBVDvTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblBVDvTableWindow)SalWindow.FromHandle(handle, typeof(tblBVDvTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colArztNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colArztNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				#endregion
			}
			
			/// <summary>
			/// colHalterNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colHalterNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckHalterNr(true, this.colArztNr.Number, this.colHalterNr.Number, "BVDv");
				#endregion
			}
			
			/// <summary>
			/// colRegNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colRegNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckReg(true, this.colArztNr.Number, this.colRegNr.Text, "BVDv");
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblTSKF
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblTSKFTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTSK _frmTSK = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblTSKFTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTSK frmTSK
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTSK == null) 
					{
						_frmTSK = (frmTSK)this.FindForm();
					}
					return _frmTSK;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblTSKFTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblTSKFTableWindow)SalWindow.FromHandle(handle, typeof(tblTSKFTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colArztNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colArztNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				#endregion
			}
			
			/// <summary>
			/// colHalterNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colHalterNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckHalterNr(true, this.colArztNr.Number, this.colHalterNr.Number, "TSKF");
				this.colBeihilfeGUID.ClearList();
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				#endregion
			}
			
			/// <summary>
			/// colRegNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colRegNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckReg(true, this.colArztNr.Number, this.colRegNr.Text, "TSKF");
				this.colBeihilfeGUID.ClearList();
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				#endregion
			}
			
			/// <summary>
			/// colDatum WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colDatum_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				else
				{
					this.colBeihilfeGUID.ClearList();
				}
				#endregion
			}
			
			/// <summary>
			/// colBeihilfeGUID WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfeGUID_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					// On SAM_SetFocus
					
					case Sys.SAM_Validate:
						this.colBeihilfeGUID_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfeGUID_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.nByte = ((SalString)this.colBeihilfeGUID.Text).Scan(((SalNumber)9).ToCharacter());
				if (this.frmTSK.nByte != -1) 
				{
					this.colBEGuid.Text = ((SalString)this.colBeihilfeGUID.Text).Mid(this.frmTSK.nByte + 1, 255);
					// 13.11.23 Ä2129
					this.frmTSK.PalTSKSave();

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalNumber temp1 = this.frmTSK.nBeihilfe;
					this.frmTSK.nBetrag = this.frmTSK.PalBerechneBetrag(this.colArztNr.Number, this.colHalterNr.Number, this.colErfDat.DateTime, ref temp1, true);
					this.frmTSK.nBeihilfe = temp1;

					this.colSumme.Number = this.frmTSK.nBetrag;
					this.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, false);
					if (this.frmTSK.nBeihilfe > this.frmTSK.nBetrag) 
					{
						this.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, true);
					}

				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblParaTB
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblParaTBTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTSK _frmTSK = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblParaTBTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTSK frmTSK
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTSK == null) 
					{
						_frmTSK = (frmTSK)this.FindForm();
					}
					return _frmTSK;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblParaTBTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblParaTBTableWindow)SalWindow.FromHandle(handle, typeof(tblParaTBTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colArztNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colArztNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				#endregion
			}
			
			/// <summary>
			/// colHalterNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colHalterNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckHalterNr(true, this.colArztNr.Number, this.colHalterNr.Number, "ParaTB");
				this.colBeihilfeGUID.ClearList();
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				#endregion
			}
			
			/// <summary>
			/// colRegNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colRegNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRegNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.PalCheckReg(true, this.colArztNr.Number, this.colRegNr.Text, "ParaTB");
				this.colBeihilfeGUID.ClearList();
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				#endregion
			}
			
			/// <summary>
			/// colDatum WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colDatum_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (this.colDatum.DateTime >= new SalDateTime(2023, 7, 1)) 
				{
					this.frmTSK.PalBEDropDown(this.colBeihilfeGUID, this.colRegNr.Text);
				}
				else
				{
					this.colBeihilfeGUID.ClearList();
				}
				#endregion
			}
			
			/// <summary>
			/// colBeihilfeGUID WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfeGUID_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					// On SAM_SetFocus
					
					case Sys.SAM_Validate:
						this.colBeihilfeGUID_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfeGUID_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSK.nByte = ((SalString)this.colBeihilfeGUID.Text).Scan(((SalNumber)9).ToCharacter());
				if (this.frmTSK.nByte != -1) 
				{
					this.colBEGuid.Text = ((SalString)this.colBeihilfeGUID.Text).Mid(this.frmTSK.nByte + 1, 255);
					// 13.11.23 Ä2129
					this.frmTSK.PalTSKSave();

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalNumber temp1 = this.frmTSK.nBeihilfe;
					this.frmTSK.nBetrag = this.frmTSK.PalBerechneBetrag(this.colArztNr.Number, this.colHalterNr.Number, this.colErfDat.DateTime, ref temp1, true);
					this.frmTSK.nBeihilfe = temp1;

					this.colSumme.Number = this.frmTSK.nBetrag;
					this.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, false);
					if (this.frmTSK.nBeihilfe > this.frmTSK.nBetrag) 
					{
						this.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag3, true);
					}

				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalCheckLocals
			{
				public SalString strPSelect = "";
				public SalNumber nPArzt = 0;
				public SalNumber nPHalter = 0;
				public SalString strPZM = "";
				public SalDateTime dtPDatum = SalDateTime.Null;
				public SalString strPTyp = "";
				public SalNumber nP1 = 0;
				public SalNumber nP2 = 0;
				public SalNumber nP11 = 0;
				public SalNumber nP12 = 0;
				public SalNumber nP13 = 0;
				public SalNumber nP14 = 0;
				public SalNumber nP15 = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalBEDropDownLocals
			{
				public SalString strPSelect = "";
				public SalNumber nPCount = 0;
				public SalString strPLM = "";
				public SalNumber nPIndex = 0;
				public SalSqlHandle hSqlBE = SalSqlHandle.Null;
				public SalNumber nReturnBE = 0;
				public SalWindowHandle hKenn = SalWindowHandle.Null;
				public SalString strRegNr = "";
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalBerechneBetragLocals
			{
				public SalSqlHandle hPSqlBerechne = SalSqlHandle.Null;
				public SalNumber nPFetchBerechne = 0;
				public SalNumber nSum = 0;
				public SalString strBrief = "";
				public SalNumber nMwSt = 0;
				public SalNumber nPArztNr = 0;
				public SalNumber nPHalterNr = 0;
				public SalDateTime dtPErfDat = SalDateTime.Null;
				public SalNumber nPBeihilfe = 0;
				public SalBoolean bBrief = false;
			}
		}
		#endregion
	}
}
