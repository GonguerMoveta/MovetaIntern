// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;
using Dart.Ftp;

namespace Moveta.Intern
{
	
	/// <summary>
	/// Disketten einlesen
	/// </summary>
	/// <param name="strPathName"></param>
	/// <param name="strFileName"></param>
	/// <param name="strParent"></param>
	/// <param name="strProjekt"></param>
	public partial class frmDiskEin : SalFormWindow
	{
		#region Window Parameters
		public SalString strPathName;
		public SalString strFileName;
		public SalString strParent;
		public SalString strProjekt;
		#endregion
		
		#region Window Variables
		public SalNumber nErr = 0;
		public SalNumber nFetch = 0;
		public SalBoolean bOk = false;
		public SalWindowHandle hWndReport = SalWindowHandle.Null;
		public SalString strReportName = "";
		public SalString strLine = "";
		public SalString strLine2 = "";
		public SalNumber nLength = 0;
		public SalString strTANr = "";
		public SalNumber nTAL = 0;
		public SalNumber nTAA = 0;
		public SalNumber nTA = 0;
		public SalNumber nTADatei2 = 0;
		public SalNumber nPraxArt = 0;
		public SalDateTime dtDisk = SalDateTime.Null;
		public SalString strDateiName = "";
		public SalString strDateiPfad = "";
		public SalString strUrDateiPfad = "";
		public SalDateTime dtDatei = SalDateTime.Null;
		public SalFileHandle hDisk = SalFileHandle.Null;
		public SalFileHandle hFile = SalFileHandle.Null;
		public SalSqlHandle hSqlDisk = SalSqlHandle.Null;
		public SalSqlHandle hSqlHalter = SalSqlHandle.Null;
		public SalSqlHandle hSqlBK = SalSqlHandle.Null;
		public SalSqlHandle hSqlBP = SalSqlHandle.Null;
		public SalSqlHandle hSqlK = SalSqlHandle.Null;
		public SalString strKennungTA = "";
		public SalString strKennungTAalt = "";
		public SalString strTier = "";
		public SalString strTieralt = "";
		public SalNumber nArztNr = 0;
		public SalNumber nHalterNr = 0;
		public SalNumber nHalterNrAlt = 0;
		public SalNumber nHalterNrOri = 0;
		public SalNumber nRechNrL = 0;
		public SalNumber nRechNrA = 0;
		public SalNumber nPosNr = 0;
		public SalNumber nPosNr1 = 0;
		public SalString strName1 = "";
		public SalString strName2 = "";
		public SalString strTi = "";
		public SalString strVN = "";
		public SalString strNN = "";
		public SalString strStr = "";
		public SalString strOrt = "";
		public SalString strLand = "";
		public SalNumber nEinzug = 0;
		public SalString strBLZ = "";
		public SalString strKonto = "";
		public SalNumber nReverse = 0;
		public SalNumber nReverseAlt = 0;
		public SalString strUStID = "";
		public SalString strSteuernummer = "";
		public SalString strHTel = "";
		public SalString strHTel2 = "";
		public SalString strHTelHandy = "";
		public SalString strHTelFax = "";
		public SalString strHEmail = "";
		public SalString strHDigitalRg = "";
		public SalString strHLeitwegID = "";
		public SalString strHDigitalMail = "";
		public SalString strTNA = "";
		public SalString strTRS = "";
		public SalString strTGS = "";
		public SalDateTime dtTGB = SalDateTime.Null;
		public SalString strPLA = "";
		public SalString strPLAalt = "";
		public SalString strPLAOri = "";
		public SalNumber nPMwSt = 0;
		public SalNumber nPMwStOri = 0;
		public SalNumber nPAnz = 0;
		public SalNumber nPAnzOri = 0;
		public SalString strPRechText = "";
		public SalString strPRechOri = "";
		public SalDateTime dtPDatum = SalDateTime.Null;
		public SalDateTime dtPDatumalt = SalDateTime.Null;
		public SalDateTime dtPDatumInit = SalDateTime.Null;
		public SalDateTime dtPDatumBeginn = SalDateTime.Null;
		public SalDateTime dtPErfDat = SalDateTime.Null;
		public SalDateTime dtPErfDatalt = SalDateTime.Null;
		public SalDateTime dtPosDat = SalDateTime.Null;
		public SalNumber nPDM = 0;
		public SalNumber nPDMOri = 0;
		public SalNumber nPZah = 0;
		public SalNumber nPText = 0;
		public SalNumber nPPosNr = 0;
		public SalString strSelect = "";
		public SalString strSelect1 = "";
		public SalNumber nFetchLe = 0;
		public SalNumber nAnz = 0;
		public SalNumber nAnzL = 0;
		public SalNumber nAnzA = 0;
		public SalNumber nSumL = 0;
		public SalNumber nSumA = 0;
		public SalNumber nStatus = 0;
		public SalNumber nZahL = 0;
		public SalNumber nZahA = 0;
		public SalNumber nStaffel = 0;
		public SalString strHeader = "";
		public SalNumber nLenHalter = 0;
		public SalNumber nColor = 0;
		public SalString strTAN1 = "";
		public SalString strTAN2 = "";
		public SalString strTAStr = "";
		public SalString strTAOrt = "";
		public SalNumber nTAArztNr = 0;
		public SalString strTHKenn = "";
		public SalNumber nTHNr = 0;
		public SalString strTHN1 = "";
		public SalString strTHN2 = "";
		public SalString strTHStr = "";
		public SalString strTHPlz = "";
		public SalString strTHOrt = "";
		public SalString strEtiOrt = "";
		public SalDateTime dtErfDat = SalDateTime.Null;
		public SalBoolean bHalter30 = false;
		public SalString strDateiName1 = "";
		public SalString strDateiPfad1 = "";
		public SalString strDateiName2 = "";
		public SalString strDateiPfad2 = "";
		public SalNumber nCount = 0;
		public SalString strTHUStID = "";
		public SalString strTAName = "";
		public SalString strGUID = "";
		public SalSqlHandle hSqlZettel = SalSqlHandle.Null;
		public SalString strTALand = "";
		public SalString strRepBehArt = "";
		public SalString strRepRechBez = "";
		public SalNumber nRepAnz1 = 0;
		public SalDateTime dtRepDat = SalDateTime.Null;
		public SalString strRepTNA = "";
		public SalString strRepTRS = "";
		public SalString strRepTGS = "";
		public SalDateTime dtRepTGB = SalDateTime.Null;
		public SalString strRepAken = "";
		public SalString strRepTyp = "";
		public SalString strRepCharge = "";
		public SalNumber nRepWartezeit = 0;
		public SalNumber nRepWartemilch = 0;
		public SalString strRepZATiere = "";
		public SalString strRepIndikation = "";
		public SalString strRepDosierung = "";
		public SalString strRepDauer = "";
		public SalString strRepADosierung = "";
		public SalString strRepADauer = "";
		public SalString strRepAABIdent = "";
		public SalString strRepAABArt = "";
		public SalString strRepAABDiagnose = "";
		public SalNumber nRepAABWH = 0;
		public SalString strRepAABWH = "";
		public SalString strRepAABOrt = "";
		public SalString strRepAABPreNr = "";
		public SalNumber nRepAABNr = 0;
		public SalString strRepAABPreNrAlt = "";
		public SalNumber nRepAABNrAlt = 0;
		public SalString strRepAABVerabreichung = "";
		public SalNumber nRepAABWZF = 0;
		public SalNumber nRepAABWZM = 0;
		public SalString strRepAnzA = "";
		public SalString strRepAnzK = "";
		public SalString strRepAnz = "";
		public SalString strRepAABZeit = "";
		public SalString BKEN = "";
		public SalDateTime BDAT = SalDateTime.Null;
		public SalDateTime BERFDAT = SalDateTime.Null;
		public SalString BBEHART = "";
		public SalString BARZT = "";
		public SalString BREC = "";
		public SalString BTGS = "";
		public SalString BTNA = "";
		public SalDateTime BTGB = SalDateTime.Null;
		public SalString BTRS = "";
		public SalString BPKEN = "";
		public SalDateTime BPERFDAT = SalDateTime.Null;
		public SalString BPAKEN = "";
		public SalString BPTYP = "";
		public SalNumber BPLFD = 0;
		public SalNumber BPANZ = 0;
		public SalString BPBEZ = "";
		public SalNumber BPPRE = 0;
		public SalNumber BPMWST = 0;
		public SalNumber BPZAH = 0;
		public SalNumber BPRAB = 0;
		public SalString KKEN1 = "";
		public SalString KNAM1 = "";
		public SalString KNAM2 = "";
		public SalString KSTR = "";
		public SalString KPLZ = "";
		public SalString KORT = "";
		public SalString KTEL = "";
		public SalNumber KTVS = 0;
		public SalDateTime KGEBDAT = SalDateTime.Null;
		public SalNumber nLeJahr = 0;
		public SalNumber nHITWirkTage = 0;
		public SalString strVVVONr = "";
		public SalString strNutzungsart = "";
		public SalString strZulassung = "";
		public SalNumber nPReverseVersion = 0;
		public SalString strAABOriNr = "";
		public SalNumber nPosJahr = 0;
		public SalBoolean bPFTPOk = false;
		public SalNumber nKorr = 0;
		public SalString strUStId2 = "";
		public SalNumber nNeueNr = 0;
		public SalString lsWZHinweis = "";
		public SalNumber nPFormat = 0;
		public SalNumber nEPost = 0;
		public SalString strEPostMail = "";
		public SalDateTime dtEPostAenDat = SalDateTime.Null;
		public SalNumber nLenIndikation = 0;
		public SalNumber nRepGewicht = 0;
		public SalDateTime dtRepUntersDatum = SalDateTime.Null;
		public SalNumber nRepHITBehTage = 0;
		public SalDateTime dtRepVerfallsdatum = SalDateTime.Null;
		public SalString lsWirkstoffe = "";
		public SalString lsWarnhinweise = "";
		public SalString strUPM = "";
		public SalNumber nByte9 = 0;
		public SalString lsRead = "";
		public SalString strMOId = "";
		public SalDateTime dtPZeiDat = SalDateTime.Null;
		public SalString strROWID = "";
		public SalString strROWIDalt = "";
		public SalNumber nFormatalt = 0;
		public SalNumber nPosNralt = 0;
		public SalString strFremdRechnungsnr = "";
		public Ftp axFTP = new Ftp();
        #endregion

        #region Constructors/Destructors

        /// <summary>
        /// Default Constructor.
        /// </summary>
        public frmDiskEin(SalString strPathName, SalString strFileName, SalString strParent, SalString strProjekt)
		{
			// Assign global reference.
			App.frmDiskEin = this;
			// Window Parameters initialization.
			this.strPathName = strPathName;
			this.strFileName = strFileName;
			this.strParent = strParent;
			this.strProjekt = strProjekt;
			// This call is required by the Windows Form Designer.
			InitializeComponent();

            //FC:FINAL:
            this.axFTP.Progress += AxFTP_Progress; ;
        }

        private void AxFTP_Progress(object sender, ProgressEventArgs e)
        {
            //throw new NotImplementedException();
        }
        #endregion

        #region System Methods/Properties

        /// <summary>
        /// Shows the form window.
        /// </summary>
        /// <param name="owner"></param>
        /// <returns></returns>
        public static frmDiskEin CreateWindow(Control owner, SalString strPathName, SalString strFileName, SalString strParent, SalString strProjekt)
		{
			frmDiskEin frm = new frmDiskEin(strPathName, strFileName, strParent, strProjekt);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmDiskEin FromHandle(SalWindowHandle handle)
		{
			return ((frmDiskEin)SalWindow.FromHandle(handle, typeof(frmDiskEin)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// ändert  Ascii 0 in 32 im String
		/// </summary>
		/// <param name="strConv"></param>
		/// <returns></returns>
		public SalString Pal00To32(SalString strConv)
		{
			#region Local Variables
			SalString strScan = "";
			SalNumber nScan = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				nScan = strConv.Scan(((SalNumber)0).ToCharacter());
				while (nScan != -1) 
				{
					strConv = strConv.Left(nScan) + " " + strConv.Mid(nScan + 1, 1024);
					nScan = strConv.Scan(((SalNumber)0).ToCharacter());
				}
				return strConv;
			}
			#endregion
		}
		
		/// <summary>
		/// liest TA-Abrech-Disk ein
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalAbrDiskeinlesen()
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(6);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			SalString strEE = "";
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strArExtensions[0] = "Abrechnungen - *.abr";
				strArExtensions[1] = "*.abr";
				strArExtensions[4] = "alle Dateien - *.*";
				strArExtensions[5] = "*.*";
				xOK = Sal.DlgOpenFile(this, "Abrechnung einlesen", strArExtensions, 4, ref nIndex, ref strDateiName, ref strDateiPfad);
				if (xOK) 
				{
					// 16.03.15 F2304
					strEE = "";
					hDisk.Open(strDateiPfad, Sys.OF_Read);
					while (hDisk.GetString(ref strLine, 2048)) 
					{
						if (strLine.Left(2) == "EE") 
						{
							strEE = "EE";
						}
					}
					hDisk.Close();
					if (strEE == "EE") 
					{
						return true;
					}
					else
					{
						Sal.MessageBox("Die Datei " + strDateiName + @" ist nicht komplett.
Eventuell ist bei der Übertragung an moveta die Internetverbindung abgebrochen oder der Datenträger ist defekt.", "Datei nicht i.O.", (Sys.MB_Ok | Sys.MB_IconExclamation));

						return false;
					}
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bDatei2"></param>
		/// <returns></returns>
		public SalBoolean PalNeuKO(SalBoolean bDatei2)
		{
			#region Local Variables
			SalBoolean bAbrOk = false;
			SalBoolean bPExists = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				// If SalStrScan( strNN, 'Kramer') != -1
				// Call SalMessageBeep( 0 )
				if (!(cbRP.Checked)) 
				{
					// Call PalSplitName(strName1, strNN, strVN, strTi, strName2)
					// Call PalTrimFeld(strName2)
					// Call PalTrimOrt(strStr)
					// Call PalTrimOrt(strOrt)
					// Set strName2 = SalStrLeftX(strName2,30)
					// Set strStr = SalStrLeftX(strStr,30)
					// Set strOrt = SalStrLeftX(strOrt,30)
					if (dfTAL.Number != dfTAA.Number) 
					{
						// 17.10.02
						// If nAnzL > 0 and nAnzA > 0
						// Call SqlImmedSel(' SELECT sum(lepdm) INTO :frmDiskEin.nSumL FROM le,lep WHERE lebearbeiter = :frmDiskEin.dfBearb AND le.lebearbdatum = :frmDiskEin.dfBearbDatum
						// AND learztnr = :frmDiskEin.dfTAL AND lekennungta = :frmDiskEin.strKennungTAalt
						// AND lebearbeiter=lepbearbeiter AND le.lebearbdatum=lep.lebearbdatum')
						// Call SqlImmedSel(' SELECT sum(lepdm) INTO :frmDiskEin.nSumA FROM le,lep WHERE lebearbeiter = :frmDiskEin.dfBearb AND le.lebearbdatum = :frmDiskEin.dfBearbDatum
						// AND learztnr = :frmDiskEin.dfTAA AND lekennungta = :frmDiskEin.strKennungTAalt
						// AND lebearbeiter=lepbearbeiter AND le.lebearbdatum=lep.lebearbdatum')
						// If nSumL = 0 or nSumL = NUMBER_Null
						// Call SqlImmedSel(' SELECT leposnr INTO :frmDiskEin.nPosNr1 FROM le WHERE lebearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
						// AND learztnr = :frmDiskEin.dfTAL AND lekennungta = :frmDiskEin.strKennungTAalt')
						// Call SqlImmed(' UPDATE lep SET leparztnr = :frmDiskEin.dfTAA WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
						// AND leparztnr = :frmDiskEin.dfTAL AND lepposnr = :frmDiskEin.nPosNr1')
						// Set nAnzL = 0
						// If nSumA = 0 or nSumA = NUMBER_Null
						// Call SqlImmedSel(' SELECT leposnr INTO :frmDiskEin.nPosNr1 FROM le WHERE lebearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
						// AND learztnr = :frmDiskEin.dfTAA AND lekennungta = :frmDiskEin.strKennungTAalt')
						// Call SqlImmed(' UPDATE lep SET leparztnr = :frmDiskEin.dfTAL WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
						// AND leparztnr = :frmDiskEin.dfTAA AND lepposnr = :frmDiskEin.nPosNr1')
						// Set nAnzA = 0
						if (nAnzL > 0) 
						{
							nTA = dfTAL.Number;
							// If bDatei2
							// Set nPosNr1 = -1
							// Call SqlImmedSel(' SELECT leposnr INTO :frmDiskEin.nPosNr1 FROM le WHERE lebearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
							// AND learztnr = :frmDiskEin.dfTAA AND levn = :frmDiskEin.strVN AND leNN = :frmDiskEin.strNN
							//  AND lestr = :frmDiskEin.strStr AND leort = :frmDiskEin.strOrt AND lekennungta = :frmDiskEin.strKennungTAalt
							// AND lereverse = :frmDiskEin.nReverseAlt')
							// If nPosNr != nPosNr1 And nPosNr1 != -1
							// Set nPosNr = nPosNr1
							// 17.03.10 OTÄ397 + AND lereverse = :frmDiskEin.nReverse
							// 07.09.10 OTF757 +  AND leposnr = :frmDiskEin.nPosNr
							strSelect1 = @"FROM le WHERE lebearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND learztnr = :frmDiskEin.nTA AND lekennungta = :frmDiskEin.strKennungTAalt   ";
							if (strVN != "") 
							{
								strSelect1 = strSelect1 + @"
 AND levn = :frmDiskEin.strVN ";
							}
							else
							{
								strSelect1 = strSelect1 + @"
 AND levn IS NULL ";
							}
							if (strNN != "") 
							{
								strSelect1 = strSelect1 + @"
 AND lenn = :frmDiskEin.strNN ";
							}
							else
							{
								strSelect1 = strSelect1 + @"
 AND lenn IS NULL ";
							}
							if (strStr != "") 
							{
								strSelect1 = strSelect1 + @"
 AND lestr = :frmDiskEin.strStr ";
							}
							else
							{
								strSelect1 = strSelect1 + @"
 AND lestr IS NULL ";
							}
							if (strOrt != "") 
							{
								strSelect1 = strSelect1 + @"
 AND leort = :frmDiskEin.strOrt ";
							}
							else
							{
								strSelect1 = strSelect1 + @"
 AND leort IS NULL ";
							}
							strSelect1 = strSelect1 + "AND lereverse = :frmDiskEin.nReverseAlt AND leposnr = :frmDiskEin.nPosNr";
							Int.SqlIstDa(strSelect1, ref bPExists);
							if (!(bPExists)) 
							{
								// 25.07.08 A190 + LEEINZUG, LEBLZ, LEKONTO
								// 15.12.10 OTÄ519 + LEGUID
								// 09.07.13 Ä848 HTel /Email
								// 03.08.15 Ä1052 + kgebdat
								// 17.05.17 Ä1378 + ledateiname
								// 30.11.20 Ä1922 + Digitalrechnung
								// 04.12.20 Ä1925 + leepost
								// 04.12.20 Ä'1925 + kepost
								// 11.03.21 Ä1925 / Ä1944 + kepostmail, kepostaenddat
								strDateiName = strDateiName.Left(250);
								Int.SqlHandleExecuteXError(hSqlHalter, @"INSERT INTO LE (LEBEARBEITER, LEARZTNR, LEHALTERNR,
LEPOSNR, LETI, LEVN, LENN, LENAME2, LESTR, LEORT, LEKENNUNGTA, LEBEARBDATUM, LEMANDISK, LEHERFDAT,
LEEINZUG, LEBLZ, LEKONTO, LEREVERSE, LEUSTID, LEGUID,
LEHTEL, LEHTEL2, LEHTELHANDY, LEHTELFAX, LEHEMAIL, LEGEBDAT, LEDATEINAME, LEDIGITALRG, LELEITWEGID, LEDIGITALMAIL,
LEEPOST, LEEPOSTMAIL, LEEPOSTAENDDAT)
VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
:frmDiskEin.strTi, :frmDiskEin.strVN, :frmDiskEin.strNN,:frmDiskEin.strName2,:frmDiskEin.strStr,:frmDiskEin.strOrt,:frmDiskEin.strKennungTAalt,
:frmDiskEin.dfBearbDatum,:strDisk, :frmDiskEin.dtErfDat,
:frmDiskEin.nEinzug, :frmDiskEin.strBLZ, :frmDiskEin.strKonto, :frmDiskEin.nReverseAlt, :frmDiskEin.strTHUStID, :frmDiskEin.strGUID,
:frmDiskEin.strHTel, :frmDiskEin.strHTel2, :frmDiskEin.strHTelHandy, :frmDiskEin.strHTelFax, :frmDiskEin.strHEmail, :frmDiskEin.KGEBDAT,
:frmDiskEin.strDateiName, :frmDiskEin.strHDigitalRg, :frmDiskEin.strHLeitwegID, :frmDiskEin.strHDigitalMail,
:frmDiskEin.nEPost, :frmDiskEin.strEPostMail, :frmDiskEin.dtEPostAenDat )", "Fehler Einlesen Kopf-Zeile");
								if (strHeader == "HDX") 
								{
									strPLA = Var.strL;
									nPMwSt = Var.nMwStVoll;
									dtPDatum = SalDateTime.Current;
									nPDM = 0;
									nPText = 1;

									// 14.10.22 Ä2044 Inkasso -> Einzug
									strPRechText = "Die o.g. Tierarztpraxis hat uns mit dem Einzug";
									dtPosDat = new SalDateTime(1980, 1, 2);
									Int.SqlHandleExecuteXError(hSqlDisk, @"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
:frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
:frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )", "Fehler Einlesen Positions-Zeile");

									// 14.10.22 Ä2044 oben weg, beauftragt hinzu
									strPRechText = "aufgeführter offener Posten beauftragt.";
									dtPosDat = new SalDateTime(1980, 1, 3);
									Int.SqlHandleExecuteXError(hSqlDisk, @"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
:frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
:frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )", "Fehler Einlesen Positions-Zeile");

									// 14.10.22 Ä2044 entfernt
									// Set strPRechText = 'beauftragt. Dies ist KEINE Rechnung im'
									// Set dtPosDat = 1980-01-04
									// Call SqlHandleExecuteXError( hSqlDisk,'INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
									// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
									// LEBEARBDATUM, LEPZEIDAT)
									// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
									// :frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
									// :frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )' ,'Fehler Einlesen Positions-Zeile')

									// Set strPRechText = 'rechtlichen Sinne.'
									// Set dtPosDat = 1980-01-05
									// Call SqlHandleExecuteXError( hSqlDisk,'INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
									// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
									// LEBEARBDATUM, LEPZEIDAT)
									// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
									// :frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
									// :frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )' ,'Fehler Einlesen Positions-Zeile')
								}
							}
						}
						if (nAnzA > 0) 
						{
							nTA = dfTAA.Number;
							// If bDatei2
							// Set nPosNr1 = -1
							// Call SqlImmedSel(' SELECT leposnr INTO :frmDiskEin.nPosNr1 FROM le WHERE lebearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
							// AND learztnr = :frmDiskEin.dfTAL AND levn = :frmDiskEin.strVN AND leNN = :frmDiskEin.strNN
							//  AND lestr = :frmDiskEin.strStr AND leort = :frmDiskEin.strOrt AND lekennungta = :frmDiskEin.strKennungTAalt')
							// Call SqlImmedSel(' SELECT leposnr INTO :frmDiskEin.nPosNr1 FROM le WHERE lebearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
							// AND learztnr IN (:frmDiskEin.dfTAL, :frmDiskEin.nTAA) AND lekennungta = :frmDiskEin.strKennungTAalt')
							// If nPosNr != nPosNr1 And nPosNr1 != -1
							// Call SqlImmed(' UPDATE lep SET lepposnr = :frmDiskEin.nPosNr1 WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
							// AND leparztnr = :frmDiskEin.nTA AND lepposnr =  :frmDiskEin.nPosNr')
							// Set nPosNr = nPosNr1
							// Else
							// Call SqlImmed(' UPDATE lep SET lepposnr = lepposnr + 10000000 WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
							// AND leparztnr = :frmDiskEin.nTA AND lepposnr =  :frmDiskEin.nPosNr')
							// Set nPosNr = nPosNr + 10000000
							// 07.09.10 OTF757 +  AND leposnr = :frmDiskEin.nPosNr
							// 10.02.15
							// Call SqlIstDa('FROM le WHERE lebearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
							// AND learztnr = :frmDiskEin.nTA AND lekennungta = :frmDiskEin.strKennungTAalt
							// AND levn = :frmDiskEin.strVN AND leNN = :frmDiskEin.strNN
							//  AND lestr = :frmDiskEin.strStr AND leort = :frmDiskEin.strOrt
							// AND lereverse = :frmDiskEin.nReverseAlt AND leposnr = :frmDiskEin.nPosNr', bPExists)
							strSelect1 = @"FROM le WHERE lebearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND learztnr = :frmDiskEin.nTA AND lekennungta = :frmDiskEin.strKennungTAalt   ";
							if (strVN != "") 
							{
								strSelect1 = strSelect1 + @"
 AND levn = :frmDiskEin.strVN ";
							}
							else
							{
								strSelect1 = strSelect1 + @"
 AND levn IS NULL ";
							}
							if (strNN != "") 
							{
								strSelect1 = strSelect1 + @"
 AND lenn = :frmDiskEin.strNN ";
							}
							else
							{
								strSelect1 = strSelect1 + @"
 AND lenn IS NULL ";
							}
							if (strStr != "") 
							{
								strSelect1 = strSelect1 + @"
 AND lestr = :frmDiskEin.strStr ";
							}
							else
							{
								strSelect1 = strSelect1 + @"
 AND lestr IS NULL ";
							}
							if (strOrt != "") 
							{
								strSelect1 = strSelect1 + @"
 AND leort = :frmDiskEin.strOrt ";
							}
							else
							{
								strSelect1 = strSelect1 + @"
 AND leort IS NULL ";
							}
							strSelect1 = strSelect1 + "AND lereverse = :frmDiskEin.nReverseAlt AND leposnr = :frmDiskEin.nPosNr";
							Int.SqlIstDa(strSelect1, ref bPExists);
							if (!(bPExists)) 
							{
								// 25.07.08 A190 + LEEINZUG, LEBLZ, LEKONTO
								// 15.12.10 OTÄ519 + LEGUID
								// 09.07.13 Ä848 HTel /Email
								// 17.05.17 Ä1378 + ledateiname
								// 30.11.20 Ä1922 + Digitalrechnung
								// 04.12.20 Ä1925 + leepost
								// 11.03.21 Ä1925 / Ä1944 + kepostmail, kepostaenddat
								strDateiName = strDateiName.Left(250);
								Int.SqlHandleExecuteXError(hSqlHalter, @"INSERT INTO LE (LEBEARBEITER, LEARZTNR, LEHALTERNR,
LEPOSNR, LETI, LEVN, LENN, LENAME2, LESTR, LEORT, LEKENNUNGTA, LEBEARBDATUM, LEMANDISK, LEHERFDAT,
LEEINZUG, LEBLZ, LEKONTO, LEREVERSE, LEUSTID, LEGUID,
LEHTEL, LEHTEL2, LEHTELHANDY, LEHTELFAX, LEHEMAIL, LEGEBDAT, LEDATEINAME, LEDIGITALRG, LELEITWEGID, LEDIGITALMAIL,
LEEPOST, LEEPOSTMAIL, LEEPOSTAENDDAT)
VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
:frmDiskEin.strTi, :frmDiskEin.strVN, :frmDiskEin.strNN,:frmDiskEin.strName2,:frmDiskEin.strStr,:frmDiskEin.strOrt,:frmDiskEin.strKennungTAalt,
:frmDiskEin.dfBearbDatum,:strDisk, :frmDiskEin.dtErfDat,
:frmDiskEin.nEinzug, :frmDiskEin.strBLZ, :frmDiskEin.strKonto, :frmDiskEin.nReverseAlt, :frmDiskEin.strTHUStID, :frmDiskEin.strGUID,
:frmDiskEin.strHTel, :frmDiskEin.strHTel2, :frmDiskEin.strHTelHandy, :frmDiskEin.strHTelFax, :frmDiskEin.strHEmail, :frmDiskEin.KGEBDAT,
:frmDiskEin.strDateiName, :frmDiskEin.strHDigitalRg, :frmDiskEin.strHLeitwegID, :frmDiskEin.strHDigitalMail,
:frmDiskEin.nEPost, :frmDiskEin.strEPostMail, :frmDiskEin.dtEPostAenDat)", "Fehler Einlesen Kopf-Zeile");
								if (strHeader == "HDX") 
								{
									strPLA = Var.strA;
									nPMwSt = Var.nMwStVoll;
									dtPDatum = SalDateTime.Current;
									nPDM = 0;
									nPText = 1;

									// 14.10.22 Ä2044 Inkasso -> Einzug
									strPRechText = "Die o.g. Tierarztpraxis hat uns mit dem Einzug";
									dtPosDat = new SalDateTime(1980, 1, 2);
									Int.SqlHandleExecuteXError(hSqlDisk, @"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
:frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
:frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )", "Fehler Einlesen Positions-Zeile");

									// 14.10.22 Ä2044 oben weg, beauftragt hinzu
									strPRechText = "aufgeführter offener Posten beauftragt.";
									dtPosDat = new SalDateTime(1980, 1, 3);
									Int.SqlHandleExecuteXError(hSqlDisk, @"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
:frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
:frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )", "Fehler Einlesen Positions-Zeile");

									// 14.10.22 Ä2044 entfernt
									// Set strPRechText = 'beauftragt. Dies ist KEINE Rechnung im'
									// Set dtPosDat = 1980-01-04
									// Call SqlHandleExecuteXError( hSqlDisk,'INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
									// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
									// LEBEARBDATUM, LEPZEIDAT)
									// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
									// :frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
									// :frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )' ,'Fehler Einlesen Positions-Zeile')

									// Set strPRechText = 'rechtlichen Sinne.'
									// Set dtPosDat = 1980-01-05
									// Call SqlHandleExecuteXError( hSqlDisk,'INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
									// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
									// LEBEARBDATUM, LEPZEIDAT)
									// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
									// :frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
									// :frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )' ,'Fehler Einlesen Positions-Zeile')
								}
								// Sonderfall Entschuldigung Gaus 2009-01-12
								// Set strPLA = strA
								// Set nPMwSt = nMwStVoll
								// Set dtPDatum = DATETIME_Null
								// Set nPDM = 0
								// Set nPText = 1
								// Set strPRechText = 'Leider wurde durch einen softwaretechnischen'
								// Set dtPosDat = 1980-01-02
								// Call SqlHandleExecuteXError( hSqlDisk,'INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
								// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
								// LEBEARBDATUM, LEPZEIDAT)
								// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
								// :frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
								// :frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )' ,'Fehler Einlesen Positions-Zeile')
								// Set strPRechText = 'Fehler der TVN ab 21.11.08 nur ein'
								// Set dtPosDat = 1980-01-03
								// Call SqlHandleExecuteXError( hSqlDisk,'INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
								// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
								// LEBEARBDATUM, LEPZEIDAT)
								// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
								// :frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
								// :frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )' ,'Fehler Einlesen Positions-Zeile')
								// Set strPRechText = 'Teilbetrag der abgegebenen Arzneien berechnet.'
								// Set dtPosDat = 1980-01-04
								// Call SqlHandleExecuteXError( hSqlDisk,'INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
								// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
								// LEBEARBDATUM, LEPZEIDAT)
								// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
								// :frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
								// :frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )' ,'Fehler Einlesen Positions-Zeile')
								// Set strPRechText = 'Wir erlauben uns, den fehlenden Betrag'
								// Set dtPosDat = 1980-01-05
								// Call SqlHandleExecuteXError( hSqlDisk,'INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
								// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
								// LEBEARBDATUM, LEPZEIDAT)
								// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
								// :frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
								// :frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )' ,'Fehler Einlesen Positions-Zeile')
								// Set strPRechText = 'nachzuberechnen.'
								// Set dtPosDat = 1980-01-06
								// Call SqlHandleExecuteXError( hSqlDisk,'INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
								// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
								// LEBEARBDATUM, LEPZEIDAT)
								// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
								// :frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
								// :frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )' ,'Fehler Einlesen Positions-Zeile')
								// Set strPRechText = 'Für die enstandenen Unannehmlichkeiten'
								// Set dtPosDat = 1980-01-07
								// Call SqlHandleExecuteXError( hSqlDisk,'INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
								// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
								// LEBEARBDATUM, LEPZEIDAT)
								// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
								// :frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
								// :frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )' ,'Fehler Einlesen Positions-Zeile')
								// Set strPRechText = 'entschuldigen wir uns bei Ihnen.'
								// Set dtPosDat = 1980-01-08
								// Call SqlHandleExecuteXError( hSqlDisk,'INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
								// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
								// LEBEARBDATUM, LEPZEIDAT)
								// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
								// :frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
								// :frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )' ,'Fehler Einlesen Positions-Zeile')
								// Set strPRechText = ' '
								// Set dtPosDat = 1980-01-09
								// Call SqlHandleExecuteXError( hSqlDisk,'INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
								// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
								// LEBEARBDATUM, LEPZEIDAT)
								// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
								// :frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
								// :frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )' ,'Fehler Einlesen Positions-Zeile')
								// Set strPRechText = 'Fehlender Teilbetrag:'
								// Set dtPosDat = 1980-01-10
								// Call SqlHandleExecuteXError( hSqlDisk,'INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
								// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
								// LEBEARBDATUM, LEPZEIDAT)
								// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
								// :frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
								// :frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )' ,'Fehler Einlesen Positions-Zeile')
							}
						}
					}
					else
					{
						if ((nAnzL + nAnzA) > 0) 
						{
							nTA = dfTAL.Number;
							// If bDatei2
							// Set nPosNr1 = -1
							// Call SqlImmedSel(' SELECT leposnr INTO :frmDiskEin.nPosNr1 FROM le WHERE lebearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
							// AND learztnr = :frmDiskEin.nTA AND levn = :frmDiskEin.strVN AND leNN = :frmDiskEin.strNN
							//  AND lestr = :frmDiskEin.strStr AND leort = :frmDiskEin.strOrt  AND lekennungta = :frmDiskEin.strKennungTAalt')
							// If nPosNr != nPosNr1 And nPosNr1 != -1
							// Set nPosNr = nPosNr1
							// 07.09.10 OTF757 +  AND leposnr = :frmDiskEin.nPosNr
							// Call SqlIstDa('FROM le WHERE lebearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
							// AND learztnr = :frmDiskEin.nTA AND levn = :frmDiskEin.strVN AND leNN = :frmDiskEin.strNN
							//  AND lestr = :frmDiskEin.strStr AND leort = :frmDiskEin.strOrt  AND lekennungta = :frmDiskEin.strKennungTAalt
							// AND lereverse = :frmDiskEin.nReverseAlt AND leposnr = :frmDiskEin.nPosNr', bPExists)
							strSelect1 = @"FROM le WHERE lebearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND learztnr = :frmDiskEin.nTA AND lekennungta = :frmDiskEin.strKennungTAalt   ";
							if (strVN != "") 
							{
								strSelect1 = strSelect1 + @"
 AND levn = :frmDiskEin.strVN ";
							}
							else
							{
								strSelect1 = strSelect1 + @"
 AND levn IS NULL ";
							}
							if (strNN != "") 
							{
								strSelect1 = strSelect1 + @"
 AND lenn = :frmDiskEin.strNN ";
							}
							else
							{
								strSelect1 = strSelect1 + @"
 AND lenn IS NULL ";
							}
							if (strStr != "") 
							{
								strSelect1 = strSelect1 + @"
 AND lestr = :frmDiskEin.strStr ";
							}
							else
							{
								strSelect1 = strSelect1 + @"
 AND lestr IS NULL ";
							}
							if (strOrt != "") 
							{
								strSelect1 = strSelect1 + @"
 AND leort = :frmDiskEin.strOrt ";
							}
							else
							{
								strSelect1 = strSelect1 + @"
 AND leort IS NULL ";
							}
							strSelect1 = strSelect1 + "AND lereverse = :frmDiskEin.nReverseAlt AND leposnr = :frmDiskEin.nPosNr";
							Int.SqlIstDa(strSelect1, ref bPExists);
							if (!(bPExists)) 
							{
								// 25.07.08 A190 + LEEINZUG, LEBLZ, LEKONTO
								// 15.12.10 OTÄ519 + LEGUID
								// 09.07.13 Ä848 HTel /Email
								// 17.05.17 Ä1378 + ledateiname
								// 30.11.20 Ä1922 + Digitalrechnung
								// 04.12.20 Ä1925 + leepost
								// 11.03.21 Ä1925 / Ä1944 + kepostmail, kepostaenddat
								strDateiName = strDateiName.Left(250);
								Int.SqlHandleExecuteXError(hSqlHalter, @"INSERT INTO LE (LEBEARBEITER, LEARZTNR, LEHALTERNR,
LEPOSNR, LETI, LEVN, LENN, LENAME2, LESTR, LEORT, LEKENNUNGTA, LEBEARBDATUM, LEMANDISK, LEHERFDAT,
LEEINZUG, LEBLZ, LEKONTO, LEREVERSE, LEUSTID, LEGUID,
LEHTEL, LEHTEL2, LEHTELHANDY, LEHTELFAX, LEHEMAIL, LEGEBDAT, LEDATEINAME, LEDIGITALRG, LELEITWEGID, LEDIGITALMAIL,
LEEPOST, LEEPOSTMAIL, LEEPOSTAENDDAT)
VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
:frmDiskEin.strTi, :frmDiskEin.strVN, :frmDiskEin.strNN,:frmDiskEin.strName2,:frmDiskEin.strStr,:frmDiskEin.strOrt,:frmDiskEin.strKennungTAalt,
:frmDiskEin.dfBearbDatum,:strDisk, :frmDiskEin.dtErfDat,
:frmDiskEin.nEinzug, :frmDiskEin.strBLZ, :frmDiskEin.strKonto, :frmDiskEin.nReverseAlt, :frmDiskEin.strTHUStID, :frmDiskEin.strGUID,
:frmDiskEin.strHTel, :frmDiskEin.strHTel2, :frmDiskEin.strHTelHandy, :frmDiskEin.strHTelFax, :frmDiskEin.strHEmail, :frmDiskEin.KGEBDAT,
:frmDiskEin.strDateiName, :frmDiskEin.strHDigitalRg, :frmDiskEin.strHLeitwegID, :frmDiskEin.strHDigitalMail,
:frmDiskEin.nEPost, :frmDiskEin.strEPostMail, :frmDiskEin.dtEPostAenDat)", "Fehler Einlesen Kopf-Zeile");
								if (strHeader == "HDX") 
								{
									strPLA = Var.strL;
									nPMwSt = Var.nMwStVoll;
									dtPDatum = SalDateTime.Current;
									nPDM = 0;
									nPText = 1;

									// 14.10.22 Ä2044 Inkasso -> Einzug
									strPRechText = "Die o.g. Tierarztpraxis hat uns mit dem Einzug";
									dtPosDat = new SalDateTime(1980, 1, 2);
									Int.SqlHandleExecuteXError(hSqlDisk, @"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
:frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
:frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )", "Fehler Einlesen Positions-Zeile");

									// 14.10.22 Ä2044 oben weg, beauftragt hinzu
									strPRechText = "aufgeführter offener Posten beauftragt.";
									dtPosDat = new SalDateTime(1980, 1, 3);
									Int.SqlHandleExecuteXError(hSqlDisk, @"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
:frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
:frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )", "Fehler Einlesen Positions-Zeile");

									// 14.10.22 Ä2044 entfernt
									// Set strPRechText = 'beauftragt. Dies ist KEINE Rechnung im'
									// Set dtPosDat = 1980-01-04
									// Call SqlHandleExecuteXError( hSqlDisk,'INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
									// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
									// LEBEARBDATUM, LEPZEIDAT)
									// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
									// :frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
									// :frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )' ,'Fehler Einlesen Positions-Zeile')

									// Set strPRechText = 'rechtlichen Sinne.'
									// Set dtPosDat = 1980-01-05
									// Call SqlHandleExecuteXError( hSqlDisk,'INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
									// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
									// LEBEARBDATUM, LEPZEIDAT)
									// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
									// :frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
									// :frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat )' ,'Fehler Einlesen Positions-Zeile')
								}
							}
						}
					}
					hSqlHalter.Commit();
				}
				nRechNrL = 0;
				nRechNrA = 0;
				return true;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPOLA"></param>
		/// <returns></returns>
		public SalNumber PalNeuPO(SalString strPOLA)
		{
			#region Actions
			using (new SalContext(this))
			{
				if (cbRP.Checked)  // 07.04.99
				{
					if (nRechNrL == 0 || nRechNrA == 0) 
					{
						dlgDiskEinRechNr.ModalDialog(this);
						Int.SqlImmed("DELETE FROM RP WHERE rparztnr = :frmDiskEin.dfTAL AND rprechnr = :frmDiskEin.nRechNrL");
						Int.PalLog("RP von Diskette " + Int.PalStrNum(dfTAL.Number, 4, 0) + "/" + Int.PalStrNum(nRechNrL, 6, 0));
						if (dfTAL.Number != dfTAA.Number) 
						{
							Int.SqlImmed("DELETE FROM RP WHERE rparztnr = :frmDiskEin.dfTAA AND rprechnr = :frmDiskEin.nRechNrA");
							Int.PalLog("RP von Diskette " + Int.PalStrNum(dfTAA.Number, 4, 0) + "/" + Int.PalStrNum(nRechNrA, 6, 0));
						}
					}
				}
				// 30.06.14 Ä961
				nLeJahr = dtPDatum.Year();

				// Set dtPosDat = SalDateCurrent() + nPPosNr * 0.002
				dtPosDat = SalDateTime.Current + (nPPosNr / 24 / 60m / 600);
				// 03.04.12 F1270
				if (nPDM == SalNumber.Null) 
				{
					nPDM = 0;
				}

				if (nPDM != 0) 
				{
					nPText = 0;
				}
				// 03.11.14 Ä1067 + LEPREVERSEVERSION
				if (strPOLA == "L") 
				{
					nAnzL = nAnzL + 1;
					nTA = dfTAL.Number;
					if (cbRP.Checked) 
					{
						Int.SqlImmed(@"INSERT INTO RP (RPARZTNR, RPHALTERNR, RPRECHNR,
RPLA, RPMWST, RPRECHTEXT, RPDATUM, RPDM, RPTEXT, RPZEIDAT, RPFORMAT)
VALUES (:frmDiskEin.nTA,:frmDiskEin.nHalterNr, :frmDiskEin.nRechNrL,
:frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
:frmDiskEin.nPText, :frmDiskEin.dtPosDat, :frmDiskEin.nPFormat )");
					}
					else
					{
						// 06.02.18 Ä1698 + leprabatt
						// 26.07.22 Ä2030 + lepmoid
						// 27.09.23 Ä2140 + LEPFREMDRECHNUNGSNR
						Int.SqlHandleExecuteXError(hSqlDisk, @"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT, LEPREVERSEVERSION, LEPRABATT, LEPFORMAT,
LEPMOID, LEPFREMDRECHNUNGSNR)
VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
:frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
:frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat, :frmDiskEin.nPReverseVersion, :frmDiskEin.BPRAB, :frmDiskEin.nPFormat,
:frmDiskEin.in.strMOId, :frmDiskEin.strFremdRechnungsnr )", "Fehler Einlesen Positions-Zeile");
						// 20.03.23 F4977
						// If dfTAL != dfTAA
						// If nPFormat > 0
						// Set nTA = dfTAA
						// Set strPLA = 'A'
						// Call SqlHandleExecuteXError( hSqlDisk,'INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
						// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
						// LEBEARBDATUM, LEPZEIDAT, LEPREVERSEVERSION, LEPRABATT, LEPFORMAT,
						// LEPMOID)
						// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
						// :frmDiskEin.strPLA, :frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,0,
						// :frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat, :frmDiskEin.nPReverseVersion, :frmDiskEin.BPRAB, :frmDiskEin.nPFormat,
						// :frmDiskE03.in.strMOId )' ,'Fehler Einlesen Positions-Zeile')
						// Set nTA = dfTAL
						// Set strPLA = 'L'
					}
				}
				else
				{
					nAnzA = nAnzA + 1;
					nTA = dfTAA.Number;
					if (cbRP.Checked) 
					{
						Int.SqlImmed(@"INSERT INTO RP (RPARZTNR, RPHALTERNR, RPRECHNR,
RPLA, RPMWST, RPRECHTEXT, RPDATUM, RPDM, RPTEXT, RPZEIDAT, RPFORMAT)
VALUES (:frmDiskEin.nTA,:frmDiskEin.nHalterNr, :frmDiskEin.nRechNrA,
:frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
:frmDiskEin.nPText, :frmDiskEin.dtPosDat, :frmDiskEin.nPFormat )");
					}
					else
					{
						// 06.02.18 Ä1698 + lprabatt
						// 26.07.22 Ä2030 + lepmoid
						// 27.09.23 Ä2140 + LEPFREMDRECHNUNGSNR
						Int.SqlHandleExecuteXError(hSqlDisk, @"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT, LEPREVERSEVERSION, LEPRABATT, LEPFORMAT,
LEPMOID, LEPFREMDRECHNUNGSNR)
VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
:frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
:frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat, :frmDiskEin.nPReverseVersion, :frmDiskEin.BPRAB, :frmDiskEin.nPFormat,
:frmDiskEin.strMOId, :frmDiskEin.strFremdRechnungsnr )", "Fehler Einlesen Positions-Zeile");
						// 20.03.23 F4977
						// If dfTAL != dfTAA
						// If nPFormat > 0
						// Set nTA = dfTAL
						// Set strPLA = 'L'
						// Call SqlHandleExecuteXError( hSqlDisk,'INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
						// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
						// LEBEARBDATUM, LEPZEIDAT, LEPREVERSEVERSION, LEPRABATT, LEPFORMAT,
						// LEPMOID)
						// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
						// :frmDiskEin.strPLA, :frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,0,
						// :frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat, :frmDiskEin.nPReverseVersion, :frmDiskEin.BPRAB, :frmDiskEin.nPFormat,
						// :frmDiskE03.in.strMOId )' ,'Fehler Einlesen Positions-Zeile')
						// Set nTA = dfTAA
						// Set strPLA = 'A'
					}
				}
				hSqlDisk.Commit();
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strDatei"></param>
		/// <returns></returns>
		public SalString PalPfad(SalString strDatei)
		{
			#region Local Variables
			SalNumber nByte = 0;
			SalNumber nLen = 0;
			SalString strReturn = "";
			SalString strDummy = "";
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				nLen = strDatei.Length;
				nByte = 1;
				while (nByte <= nLen) 
				{
					strDummy = strDatei.Left(nByte);
					if (strDummy.Right(1) == "\\") 
					{
						strReturn = strDummy;
					}
					nByte = nByte + 1;
				}
				return strReturn;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalEinlesen()
		{
			#region Actions
			using (new SalContext(this))
			{
				// Neu ?
				strUrDateiPfad = strDateiPfad;
				if (strDateiName.Left(1) != "A" && strDateiName.Left(1) != "I") 
				{
					// 06.02.18 Ä1698 + lprabatt
					// 26.07.22 Ä2030 + lepmoid
					// 27.09.23 Ä2140 + LEPFREMDRECHNUNGSNR
					hSqlDisk.Prepare(@"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT, LEPREVERSEVERSION, LEPRABATT, LEPFORMAT,
LEPMOID, LEPFREMDRECHNUNGSNR)
VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
:frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
:frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat, :frmDiskEin.nPReverseVersion, :frmDiskEin.BPRAB, :frmDiskEin.nPFormat,
:frmDiskEin.strMOId, :frmDiskEin.strFremdRechnungsnr )");
					// 17.05.17 Ä1378 + ledateiname
					// 30.11.20 Ä1922 + Digitalrechnung
					// 04.12.20 Ä1925 + leepost
					// 11.03.21 Ä1925 / Ä1944 + kepostmail, kepostaenddat
					hSqlHalter.Prepare(@"INSERT INTO LE (LEBEARBEITER, LEARZTNR, LEHALTERNR,
LEPOSNR, LETI, LEVN, LENN, LENAME2, LESTR, LEORT, LEKENNUNGTA, LEBEARBDATUM, LEMANDISK, LEHERFDAT,
LEEINZUG, LEBLZ, LEKONTO, LEREVERSE, LEUSTID, LEGUID,
LEHTEL, LEHTEL2, LEHTELHANDY, LEHTELFAX, LEHEMAIL, LEGEBDAT, LEDATEINAME, LEDIGITALRG, LELEITWEGID, LEDIGITALMAIL,
LEEPOST, LEEPOSTMAIL, LEEPOSTAENDDAT)
VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
:frmDiskEin.strTi, :frmDiskEin.strVN, :frmDiskEin.strNN,:frmDiskEin.strName2,:frmDiskEin.strStr,:frmDiskEin.strOrt,
:frmDiskEin.strKennungTAalt,:frmDiskEin.dfBearbDatum,:strDisk, :frmDiskEin.dtErfDat,
:frmDiskEin.nEinzug, :frmDiskEin.strBLZ, :frmDiskEin.strKonto, :frmDiskEin.nReverseAlt, :frmDiskEin.strTHUStID, :frmDiskEin.strGUID,
:frmDiskEin.strHTel, :frmDiskEin.strHTel2, :frmDiskEin.strHTelHandy, :frmDiskEin.strHTelFax, :frmDiskEin.strHEmail, :frmDiskEin.KGEBDAT,
:frmDiskEin.strDateiName, :frmDiskEin.strHDigitalRg, :frmDiskEin.strHLeitwegID, :frmDiskEin.strHDigitalMail,
:frmDiskEin.nEPost, :frmDiskEin.strEPostMail, :frmDiskEin.dtEPostAenDat)");
				}
				Sal.WaitCursor(true);
				Sal.FileGetDateTime(strDateiPfad, ref dtDisk);
				if (strDateiPfad.ToUpper().Left(17) != Const.PATH_ABR_ALT) 
				{
					nStatus = Sal.FileCopy(strDateiPfad, Const.PATH_ABR_ALT + strDateiName, true);
				}
				else
				{
					nStatus = Sys.FILE_CopyOK;
				}
				if (nStatus == Sys.FILE_CopyDest) 
				{
					// Call SalMessageBox('Fehler', 'Fehler beim Erstellen
					// der Zieldatei', MB_IconStop)
					this.SetStatusBarText("Fehler beim Erstellen der Zieldatei");
				}
				else if (nStatus == Sys.FILE_CopyRead) 
				{
					// Call SalMessageBox('Fehler', 'Fehler beim Lesen
					// der Diskette', MB_IconStop)
					this.SetStatusBarText("Fehler beim Lesen der Datei");
				}
				else if (nStatus == Sys.FILE_CopySrc) 
				{
					// Call SalMessageBox('Fehler', 'Fehler beim Erkennen
					// der Diskette', MB_IconStop)
					this.SetStatusBarText("Fehler beim Erkennen der Datei");
				}
				else if (nStatus == Sys.FILE_CopyWrite) 
				{
					// Call SalMessageBox('Fehler', 'Fehler beim Schreiben
					// der Zieldatei', MB_IconStop)
					this.SetStatusBarText("Fehler beim Schreiben der Zieldatei");
				}
				else if (nStatus == Sys.FILE_CopyOK) 
				{
					Sal.FileSetCurrentDirectory(Const.PATH_TVN32);
					Sal.FileSetDrive(Const.PATH_DRIVE);
					strDateiPfad = Const.PATH_ABR_ALT + strDateiName;
					Sal.FileGetDateTime(strDateiPfad, ref dtDatei);
					hDisk.Open(strDateiPfad, Sys.OF_Read);
					strLine = hDisk.GetString(2048);
					// Call SalFileClose( hDisk )
					strHeader = strLine.Mid(0, 3);
					if (strHeader == "HDA")  // altes Format
					{
						strTANr = strLine.Mid(3, 3);
						nTAL = strTANr.ToNumber();
						strTANr = strLine.Mid(6, 3);
						nTAA = strTANr.ToNumber();
						// 16.07.99
						dfDatum.DateTime = dtDisk;
					}
					else
					{
						strTANr = strLine.Mid(3, 6);
						// If strHeader != 'HDD' and  strHeader != 'HDE' And strHeader != 'HDE' And strHeader != 'HDF' And strHeader != 'HDG' And strHeader != 'HDX'	! 30.08.16 entfernt
						// Call SalMessageBox('Die DM-Werte werden automatisch in € umgerechnet !','Achtung !  DM-Abrechnung',MB_Ok)
						if (strHeader == "HDX") 
						{
							// Call SalMessageBox('Abrechnung alter Tierarzt-OPs. KEIN Vorschuß !','Achtung !',MB_Ok)
							this.SetStatusBarText("Abrechnung alter Tierarzt-OPs. KEIN Vorschuß !");
						}
						nTAL = strTANr.ToNumber();
						// 15.12.10 OTÄ519
						strGUID = strLine.Mid(22, 36);
						// 21.12.10 OTÄ519 20.08.12 nach frmUebOP verschoben
						// If strGUID != ''
						// Call SqlIstDa( 'FROM db WHERE dbarztnr = :frmDiskEin.nTAL AND dbguid = :frmDiskEin.strGUID' , bExists )
						// If Not bExists
						// Call SqlImmed( 'INSERT INTO db (dbarztnr, dbguid) VALUES (:frmDiskEin.nTAL, :frmDiskEin.strGUID)' )
						// Call SqlImmedSel('SELECT anr2, akzpraxart
						// INTO :frmDiskEin.nTAA, :frmDiskEin.nPraxArt
						// FROM a WHERE aarztnr=:frmDiskEin.nTAL')
						// If nPraxArt = 0
						// Set nTAA = nTAL
						// Else If nPraxArt = 2
						// Set nTA = nTAL
						// Set nTAL = nTAA
						// Set nTAA = nTA
						dfText.Text = "Abrechnung vom : " + strLine.Mid(14, 8);
						dfText1.Text = "Datei erstellt am : " + Int.SalDateToStrX(dtDatei);
						// 16.07.99
						dfDatum.DateTime = strLine.Mid(14, 8).ToDate();
					}
					// 13.05.02
					strLine = hDisk.GetString(2048);
					if (strLine.Left(2) == "NO") 
					{
						dfText3.Text = strLine.Mid(2, 126);
					}
					strLine = hDisk.GetString(2048);
					if (strLine.Left(5) == "NOBB1") 
					{
						dfText4.Text = "Bestandsbuchdruck";
					}
					hDisk.Close();

					App.frmMain.SetStatusBarText("Datei OK");
					dfDateiName.Text = strDateiPfad;
					dfTAL.Number = nTAL;
					// Set dfTAA = nTAA
					// 13.05.02
					Sal.PostMsg(dfTAL, Sys.SAM_Validate, 0, 0);

					// Große lembeck ?
					if (nTAL == 530) 
					{
						cb530.Checked = true;
					}
					if (nTAL == 497 || nTAL == 167 || nTAL == 567) 
					{
						cb497.Checked = true;
					}
					// Windows - Format der Abr. Diskette ?
					// 08.03.22 Ä2005
					if (hDisk.Open(dfDateiName.Text, Sys.OF_Read)) 
					{
						while (true)
						{
							Var.bOK = hDisk.GetString(ref strLine, 2048);
							if (!(Var.bOK)) 
							{
								break;
							}
							else
							{
								if (strLine.Scan("Ä") >= 0) 
								{
									cbWinForm.Checked = true;
									break;
								}
								if (strLine.Scan("Ö") >= 0) 
								{
									cbWinForm.Checked = true;
									break;
								}
								if (strLine.Scan("Ü") >= 0) 
								{
									cbWinForm.Checked = true;
									break;
								}
								if (strLine.Scan("ä") >= 0) 
								{
									cbWinForm.Checked = true;
									break;
								}
								if (strLine.Scan("ö") >= 0) 
								{
									cbWinForm.Checked = true;
									break;
								}
								if (strLine.Scan("ü") >= 0) 
								{
									cbWinForm.Checked = true;
									break;
								}
								if (strLine.Scan("ß") >= 0) 
								{
									cbWinForm.Checked = true;
									break;
								}
								// 07.08.08 auskommentiert, da auch in DOS-Format-Dateien vorhanden
								// If SalStrScan(strLine, '€' ) >=0
								// Set cbWinForm=TRUE
								// Break
							}
						}
						hDisk.Close();
					}
					// Set cbWinForm=TRUE

					if (SalDateTime.Current > (dfDatum.DateTime + 14)) 
					{
						Sal.ColorSet(dfDatum, Sys.COLOR_IndexWindow, Sys.COLOR_Red);
						Sal.ColorSet(dfDatum, Sys.COLOR_IndexWindowText, Sys.COLOR_White);
						// Call SalMessageBox( 'Achtung:
						// Die Abrechnung ist alt !!!','Altes Abrechnungsdatum!',
						// MB_Ok|MB_IconExclamation)
					}
					else if (SalDateTime.Current > (dfDatum.DateTime + 7)) 
					{
						Sal.ColorSet(dfDatum, Sys.COLOR_IndexWindow, Sys.COLOR_Yellow);
						Sal.ColorSet(dfDatum, Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
					}
					else
					{
						Sal.ColorSet(dfDatum, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
						Sal.ColorSet(dfDatum, Sys.COLOR_IndexWindowText, Sys.COLOR_White);
					}
					dfBearb.Text = Var.strBNUser;
					pbOK.EnableWindow();
				}
				if (nStatus != Sys.FILE_CopyOK) 
				{
					this.DestroyWindow();
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalFTPLogin()
		{
			#region Actions
			using (new SalContext(this))
			{
				//bPFTPOk = axFTP.Login("abr.tvn-elze.de", "ftptvn", "Ep9vyRsr8", "", 21);
                this.axFTP.Connect("abr.tvn-elze.de");
                this.axFTP.Authenticate("ftptvn", "Ep9vyRsr8");
                //FC:FINAL:#44 setze bPFTPOk auf den Wert, ob die Verbindung zum Server erfolgreich war
                this.bPFTPOk = this.axFTP.Connected;
                if (this.bPFTPOk) 
				{
				}
				else
				{
					this.SetStatusBarText("Keine Internetverbindung zum Server abr.tvn-elze.de");
				}
				return bPFTPOk;
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmDiskEin WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmDiskEin_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmDiskEin_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmDiskEin_OnSAM_Destroy(sender, e);
					break;
				
				// On SAM_ReportStart
				
				// 30.04.03
				
				// If (hWndfrmReport)
				
				// Call SalBringWindowToTop(hWndfrmReport)
				
				// If strReportName = 'ABGBEL'
				
				// Call SalReportDlgOptions(SalNumberToWindowHandle(wParam),
				
				// 'Abgabebelege','Abgabebelege','werden gedruckt','Abgabebelege')
				
				// If strReportName = 'IMPFBRF'
				
				// Call SalReportDlgOptions(SalNumberToWindowHandle(wParam),
				
				// 'Impferinnerungen','Impferinnerungen','werden gedruckt','Impferinnerungen')
				
				// On SAM_ReportFetchInit
				
				// If strReportName = 'ABGBEL' or strReportName = 'BESTBUCH'
				
				// Call SqlImmedSel('SELECT aname1, aname2, astr, aort
				
				// INTO :frmDiskEin.strTAN1, :frmDiskEin.strTAN2, :frmDiskEin.strTAStr, :frmDiskEin.strTAOrt
				
				// from A where aarztnr=:frmDiskEin.dfTAA')
				
				// If SalFileOpen( hDisk,dfDateiName,OF_Read )
				
				// Return TRUE
				
				// Else
				
				// Return FALSE
				
				// If strReportName = 'IMPFBRF'
				
				// Call SqlImmedSel('SELECT aname1, aname2, astr, aort
				
				// INTO :frmDiskEin.strTAN1, :frmDiskEin.strTAN2, :frmDiskEin.strTAStr, :frmDiskEin.strTAOrt
				
				// from A where aarztnr=:frmDiskEin.dfTAA')
				
				// If SalFileOpen( hDisk,dfDateiName,OF_Read )
				
				// Return TRUE
				
				// Else
				
				// Return FALSE
				
				// On SAM_ReportFetchNext
				
				// If strReportName = 'ABGBEL' or strReportName = 'BESTBUCH'
				
				// Set strLine = '    '
				
				// While SalStrMidX(strLine,0,2) !='PO'
				
				// Set bOK= SalFileGetStr(hDisk,strLine,32767)
				
				// Set strLine = Pal00To32(strLine)
				
				// If Not cbWinForm
				
				// Set strLine = PalDosToWin(strLine)
				
				// If Not bOK Or SalStrMidX(strLine,0,2) ='EE'
				
				// Call SalStatusSetText(hWndForm,'Diskette fertig eingelesen')
				
				// Call SalFileClose( hDisk )
				
				// Return FALSE
				
				// Else
				
				// If SalStrMidX(strLine,0,2)='KO'
				
				// Set strTHKenn=SalStrMidX(strLine,2,8)
				
				// If (strHeader = 'HDC' or  strHeader = 'HDD') and not cb27
				
				// Set nLenHalter = 30
				
				// Else
				
				// Set nLenHalter = 27
				
				// Set strTHN1=SalStrMidX(strLine,15,nLenHalter)
				
				// Set strTHN2=SalStrMidX(strLine,16+nLenHalter,nLenHalter)
				
				// Set dfKennung = strName1
				
				// Set strTHStr=SalStrMidX(strLine,17+nLenHalter+nLenHalter,nLenHalter)
				
				// Set strTHPlz=SalStrMidX(strLine,18+nLenHalter+nLenHalter+nLenHalter,5)
				
				// Set strTHOrt=SalStrMidX(strLine,24+nLenHalter+nLenHalter+nLenHalter,nLenHalter)
				
				// Set strTHN1=SalStrMidX(strLine,15,30)
				
				// Set strTHN2=SalStrMidX(strLine,46,30)
				
				// Set dfKennung = strName1
				
				// Set strTHStr=SalStrMidX(strLine,77,30)
				
				// Set strTHPlz=SalStrMidX(strLine,108,5)
				
				// Set strTHOrt=SalStrMidX(strLine,114,25)
				
				// If cbEti
				
				// Set strEtiOrt = SalStrLeftX(strTHPlz || ' ' || strTHOrt,30)
				
				// Call SqlImmed('INSERT INTO ed (edn1,edn2,eds,edo) VALUES( :frmDiskEin.strTHN1, :frmDiskEin.strTHN2, :frmDiskEin.strTHStr, :frmDiskEin.strEtiOrt )')
				
				// Else If SalStrMidX(strLine,0,2)='NA'
				
				// Set strRepTNA=SalStrMidX(strLine,2,50)
				
				// Else If SalStrMidX(strLine,0,2)='RS'
				
				// Set strRepTRS=SalStrMidX(strLine,2,50)
				
				// Else If SalStrMidX(strLine,0,2)='PO'
				
				// Pegasus-Code ------ANFANG-------
				
				// If nRepAABWZF>0  Or nRepAABWZM>0
				
				// Set nRepWartezeit = nRepAABWZF
				
				// Set nRepWartemilch = nRepAABWZM
				
				// Call PalWriteFile('PO' || PalDateToStrTTMMJJ( dtRepDat )  ||  PalStrNumDecPoint( nRepAnz1, 5,3)
				
				// || PalLF(strRepRechBez,45) || PalLF(strRepCharge,20)
				
				// || PalStrNumDecPoint( nRepWartezeit, 3,0) || PalStrNumDecPoint( nRepWartemilch, 3,0)
				
				// || PalLF( strRepZATiere, 50) || PalLF(strRepIndikation,50) || PalLF(strRepDosierung,25) || PalLF(strRepDauer,20)
				
				// || PalLF(strRepAABIdent,250) || PalLF(strRepAABArt,20) || PalLF(strRepAABDiagnose,50) || PalStrNumDecPoint(nRepAABWH,1,0)
				
				// || PalLF(strRepAABOrt,30) || PalLF(strRepAABPreNr,10) || PalStrNumDecPoint(nRepAABNr,10,0)
				
				// || PalLF(strRepAABVerabreichung,15))
				
				// Pegasus-Code ------ENDE-----
				
				// Set dtRepDat = SalStrToDate(
				
				// SalStrMidX(strLine,2,2)||'.'||SalStrMidX(strLine,4,2)||'.'||SalStrMidX(strLine,6,2))
				
				// aus Pegasus-Code
				
				// ! Set strRepCharge = ''
				
				// Set nRepAnz1=PalValNum(SalStrMidX(strLine,8,9))
				
				// If nRepAnz1 = 0
				
				// Set nRepAnz1 = NUMBER_Null
				
				// Set strRepRechBez=SalStrMidX(strLine,17,45)
				
				// Set strRepCharge=SalStrMidX(strLine,62,20)
				
				// Set nRepWartezeit=PalValNum(SalStrMidX(strLine,82,3))
				
				// Set nRepWartemilch=PalValNum(SalStrMidX(strLine,85,3))
				
				// If nRepWartezeit = 0
				
				// Set nRepWartezeit = NUMBER_Null
				
				// If nRepWartemilch = 0
				
				// Set nRepWartemilch = NUMBER_Null
				
				// Set strRepZATiere=SalStrMidX(strLine,88,50)
				
				// Set strRepIndikation=SalStrMidX(strLine,138,50)
				
				// Set strRepDosierung=SalStrMidX(strLine,188,25)
				
				// Set strRepDauer=SalStrMidX(strLine,213,20)
				
				// Set strRepAABIdent = SalStrMidX(strLine,233,250)
				
				// Set strRepAABArt = SalStrMidX(strLine,483,20)
				
				// Set strRepAABDiagnose = SalStrMidX(strLine,503,50)
				
				// Set nRepAABWH = PalValNum(SalStrMidX(strLine,553,1))
				
				// Set strRepAABOrt = SalStrMidX(strLine,554,30)
				
				// Set strRepAABPreNr = SalStrMidX(strLine,584,10)
				
				// Set nRepAABNr = PalValNum(SalStrMidX(strLine,594,10))
				
				// Set strRepAABVerabreichung = SalStrMidX(strLine,604,15)
				
				// Set strRepTyp = SalStrMidX(strLine,619,1)
				
				// Set strRepAABPreNr = strRepAABPreNr || ' / ' || PalStrNum(nRepAABNr,5,0)
				
				// If nRepAABWH = 1
				
				// Set strRepAABWH = 'Nachbehandlung'
				
				// Else
				
				// Set strRepAABWH = 'Erstbehandlung'
				
				// If SalStrTrimX(strRepAABOrt) = ''
				
				// Set strRepAABOrt = 'siehe Tierhalter-Adresse'
				
				// Set strRepAABOrt = strTHN1
				
				// If strTHN2 != ''
				
				// Set strRepAABOrt = strRepAABOrt || ', ' || strTHN2
				
				// Set strRepAABOrt = strRepAABOrt || ', ' || strTHStr
				
				// Set strRepAABOrt = strRepAABOrt || ', ' || strTHPlz
				
				// Set strRepAABOrt = strRepAABOrt || ' ' || strTHOrt
				
				// Set strRepAnz = PalStrNum(nRepAnz1,6,2)
				
				// If strRepTyp = 'A' or strRepTyp = 'M'
				
				// Set strRepAnzA = PalStrNum(nRepAnz1,6,2)
				
				// Set strRepAnzK = ''
				
				// Else
				
				// Set strRepAnzK = PalStrNum(nRepAnz1,6,2)
				
				// Set strRepAnzA = ''
				
				// 08.05.06  AAB-Ident > 250 Bytes (max. 32767 Bytes)
				
				// If SalStrLeftX(strRepAABIdent,5) = '~Ext~'
				
				// Set strRepAABIdent = ''
				
				// Set bOK= SalFileGetStr(hDisk,strLine,2048)
				
				// While bOK and SalStrLeftX(strLine,2) != '~E'
				
				// Set bOK= SalFileGetStr(hDisk,strLine,32767)
				
				// Set strRepAABIdent = strRepAABIdent || strLine
				
				// Return TRUE
				
				// If strReportName = 'IMPFBRF'
				
				// Set strLine = '    '
				
				// While SalStrMidX(strLine,0,2) !='PO'
				
				// Set bOK= SalFileGetStr(hDisk,strLine,128)
				
				// Set strLine = Pal00To32(strLine)
				
				// If Not cbWinForm
				
				// Set strLine = PalDosToWin(strLine)
				
				// If Not bOK Or SalStrMidX(strLine,0,2) ='EE'
				
				// Call SalStatusSetText(hWndForm,'Diskette fertig eingelesen')
				
				// Call SalFileClose( hDisk )
				
				// Return FALSE
				
				// Else
				
				// If SalStrMidX(strLine,0,2)='KO'
				
				// 06.04.04
				
				// Set strRepTNA=''
				
				// Set strRepTGS=''
				
				// Set strRepTRS=''
				
				// Set dtRepTGB=DATETIME_Null
				
				// Set strTHKenn=SalStrMidX(strLine,2,8)
				
				// If (strHeader = 'HDC' or  strHeader = 'HDD') and not cb27
				
				// Set nLenHalter = 30
				
				// Else
				
				// Set nLenHalter = 27
				
				// Set strTHN1=SalStrMidX(strLine,15,nLenHalter)
				
				// Set strTHN2=SalStrMidX(strLine,16+nLenHalter,nLenHalter)
				
				// Set dfKennung = strName1
				
				// Set strTHStr=SalStrMidX(strLine,17+nLenHalter+nLenHalter,nLenHalter)
				
				// Set strTHPlz=SalStrMidX(strLine,18+nLenHalter+nLenHalter+nLenHalter,5)
				
				// Set strTHOrt=SalStrMidX(strLine,24+nLenHalter+nLenHalter+nLenHalter,nLenHalter)
				
				// If cbEti
				
				// Set strEtiOrt = strTHPlz || ' ' || strTHOrt
				
				// Call SqlImmed('INSERT INTO ed (edn1,edn2,eds,edo) VALUES( :frmDiskEin.strTHN1, :frmDiskEin.strTHN2, :frmDiskEin.strTHStr, :frmDiskEin.strEtiOrt )')
				
				// Else If SalStrMidX(strLine,0,2)='NA'
				
				// Set strRepTNA=SalStrMidX(strLine,2,50)
				
				// Else If SalStrMidX(strLine,0,2)='GS'
				
				// Set strRepTGS=SalStrMidX(strLine,2,2)
				
				// Else If SalStrMidX(strLine,0,2)='RS'
				
				// Set strRepTRS=SalStrMidX(strLine,2,50)
				
				// Else If SalStrMidX(strLine,0,2)='GB'
				
				// Set dtRepTGB=SalStrToDate(SalStrMidX(strLine,2,50))
				
				// Else If SalStrMidX(strLine,0,2)='PO'
				
				// Set dtRepDat = SalStrToDate(
				
				// SalStrMidX(strLine,2,2)||'.'||SalStrMidX(strLine,4,2)||'.'||SalStrMidX(strLine,6,2))
				
				// Set nRepAnz1=PalValNum(SalStrMidX(strLine,8,9))
				
				// If nRepAnz1 = 0
				
				// Set nRepAnz1 = NUMBER_Null
				
				// Set strRepRechBez=SalStrMidX(strLine,17,45)
				
				// Return TRUE
				
				// On SAM_ReportFinish
				
				// Call SalWaitCursor( FALSE )
				
				// Call SalEnableWindow( pbOK )
				
				// Call SalFileClose(hFile)
				
				// If SalStrLeftX(strDateiPfad, 2) != 'A:' And (dfText4 != 'Bestandsbuchdruck' or strReportName = 'BESTBUCH')
				
				// If IDYES = SalMessageBox('Soll die Abrechnungsdatei jetzt
				
				// gelöscht werden ?','ISDN-Abrechnung', MB_YesNo )
				
				// Call SalFileOpen(hDisk, dfDateiName, OF_Delete)
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmDiskEin_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 22.12.15 Ä1304
			Var.bfrmDiskEin = true;

			this.dfDatei2.Text = "";
			// 13.05.02
			this.nColor = this.GetWindowColor(Sys.COLOR_IndexWindow);
			this.dfText.SetWindowColor(Sys.COLOR_IndexWindow, this.nColor);
			this.dfText1.SetWindowColor(Sys.COLOR_IndexWindow, this.nColor);
			this.dfText2.SetWindowColor(Sys.COLOR_IndexWindow, this.nColor);
			this.dfText3.SetWindowColor(Sys.COLOR_IndexWindow, this.nColor);
			this.dfText4.SetWindowColor(Sys.COLOR_IndexWindow, this.nColor);
			this.dfBearb.SetWindowColor(Sys.COLOR_IndexWindow, this.nColor);
			this.dfKennung.SetWindowColor(Sys.COLOR_IndexWindow, this.nColor);
			this.dfBearbDatum.SetWindowColor(Sys.COLOR_IndexWindow, this.nColor);
			// 14.02.22 Ä2000
			App.frmRgSuchen.oBase64.InitBase64Lookups();

			Int.SqlConnection(ref this.hSqlDisk);
			Int.SqlConnection(ref this.hSqlHalter);
			Int.SqlConnection(ref this.hSqlZettel);
			this.pbOK.DisableWindow();
			if (this.strFileName == "") 
			{
				this.strDateiPfad = Const.PATH_ABR;
				Sal.WaitCursor(false);
				if (this.PalAbrDiskeinlesen()) 
				{
					// Neu ?
					// Set strUrDateiPfad = strDateiPfad
					// If SalStrLeftX(strDateiName,1) != 'A' And SalStrLeftX(strDateiName,1) != 'I'
					// Call SqlPrepare( hSqlDisk, 'INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR,
					// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
					// LEBEARBDATUM, LEPZEIDAT, LEPREVERSEVERSION)
					// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
					// :frmDiskEin.strPLA,:frmDiskEin.nPMwSt,:frmDiskEin.strPRechText,:frmDiskEin.dtPDatum,:frmDiskEin.nPDM,
					// :frmDiskEin.nPText,:frmDiskEin.dfBearbDatum, :frmDiskEin.dtPosDat, :frmDiskEin.nPReverseVersion )')
					// Call SqlPrepare( hSqlHalter, 'INSERT INTO LE (LEBEARBEITER, LEARZTNR, LEHALTERNR,
					// LEPOSNR, LETI, LEVN, LENN, LENAME2, LESTR, LEORT, LEKENNUNGTA, LEBEARBDATUM, LEMANDISK, LEHERFDAT,
					// LEEINZUG, LEBLZ, LEKONTO, LEREVERSE, LEUSTID, LEGUID,
					// LEHTEL, LEHTEL2, LEHTELHANDY, LEHTELFAX, LEHEMAIL, LEGEBDAT)
					// VALUES (:frmDiskEin.dfBearb,:frmDiskEin.nTA,:frmDiskEin.nHalterNr,:frmDiskEin.nPosNr,
					// :frmDiskEin.strTi, :frmDiskEin.strVN, :frmDiskEin.strNN,:frmDiskEin.strName2,:frmDiskEin.strStr,:frmDiskEin.strOrt,
					// :frmDiskEin.strKennungTAalt,:frmDiskEin.dfBearbDatum,:strDisk, :frmDiskEin.dtErfDat,
					// :frmDiskEin.nEinzug, :frmDiskEin.strBLZ, :frmDiskEin.strKonto, :frmDiskEin.nReverseAlt, :frmDiskEin.strTHUStID, :frmDiskEin.strGUID,
					// :frmDiskEin.strHTel, :frmDiskEin.strHTel2, :frmDiskEin.strHTelHandy, :frmDiskEin.strHTelFax, :frmDiskEin.strHEmail, :frmDiskEin.KGEBDAT)')
					// Call SalWaitCursor(TRUE)
					// Call SalFileGetDateTime( strDateiPfad, dtDisk )
					// If SalStrLeftX(SalStrUpperX(strDateiPfad), 17) != Const.PATH_ABR_ALT)
					// Set nStatus = SalFileCopy(strDateiPfad, Const.PATH_ABR_ALT || strDateiName, TRUE)
					// Else
					// Set nStatus = FILE_CopyOK
					// If nStatus = FILE_CopyDest
					// Call SalMessageBox('Fehler', 'Fehler beim Erstellen
					// der Zieldatei', MB_IconStop)
					// Else If nStatus = FILE_CopyRead
					// Call SalMessageBox('Fehler', 'Fehler beim Lesen
					// der Diskette', MB_IconStop)
					// Else If nStatus = FILE_CopySrc
					// Call SalMessageBox('Fehler', 'Fehler beim Erkennen
					// der Diskette', MB_IconStop)
					// Else If nStatus = FILE_CopyWrite
					// Call SalMessageBox('Fehler', 'Fehler beim Schreiben
					// der Zieldatei', MB_IconStop)
					// Else If nStatus = FILE_CopyOK
					// Call SalFileSetCurrentDirectory( Const.TVN32_PATH )
					// Call SalFileSetDrive( 'F:' )
					// Set strDateiPfad = Const.PATH_ABR_ALT || strDateiName
					// Call SalFileGetDateTime ( strDateiPfad, dtDatei )
					// Call SalFileOpen( hDisk,strDateiPfad,OF_Read )
					// Call SalFileGetStr(hDisk,strLine,2048)
					// Call SalFileClose( hDisk )
					// Set strHeader = SalStrMidX(strLine,0,3)
					// If strHeader = 'HDA'		! altes Format
					// Set strTANr = SalStrMidX(strLine,3,3)
					// Set nTAL = SalStrToNumber(strTANr)
					// Set strTANr = SalStrMidX(strLine,6,3)
					// Set nTAA = SalStrToNumber(strTANr)
					// 16.07.99
					// Set dfDatum = dtDisk
					// Else ! neues Format
					// Set strTANr = SalStrMidX(strLine,3,6)
					// If strHeader != 'HDD' and  strHeader != 'HDE' And strHeader != 'HDE' And strHeader != 'HDX'
					// Call SalMessageBox('Die DM-Werte werden automatisch in € umgerechnet !','Achtung !  DM-Abrechnung',MB_Ok)
					// If strHeader = 'HDX'
					// Call SalMessageBox('Abrechnung alter Tierarzt-OPs. KEIN Vorschuß !','Achtung !',MB_Ok)
					// Set nTAL = SalStrToNumber(strTANr)
					// 15.12.10 OTÄ519
					// Set strGUID = SalStrMidX( strLine, 22, 36 )
					// 21.12.10 OTÄ519 20.08.12 nach frmUebOP verschoben
					// If strGUID != ''
					// Call SqlIstDa( 'FROM db WHERE dbarztnr = :frmDiskEin.nTAL AND dbguid = :frmDiskEin.strGUID' , bExists )
					// If Not bExists
					// Call SqlImmed( 'INSERT INTO db (dbarztnr, dbguid) VALUES (:frmDiskEin.nTAL, :frmDiskEin.strGUID)' )
					// Call SqlImmedSel('SELECT anr2, akzpraxart
					// INTO :frmDiskEin.nTAA, :frmDiskEin.nPraxArt
					// FROM a WHERE aarztnr=:frmDiskEin.nTAL')
					// If nPraxArt = 0
					// Set nTAA = nTAL
					// Else If nPraxArt = 2
					// Set nTA = nTAL
					// Set nTAL = nTAA
					// Set nTAA = nTA
					// Set dfText = 'Abrechnung vom : ' || SalStrMidX(strLine, 14, 8)
					// Set dfText1 = 'Datei erstellt am : ' || SalDateToStrX(dtDatei)
					// 16.07.99
					// Set dfDatum = SalStrToDate(SalStrMidX(strLine, 14, 8))
					// 13.05.02
					// Call SalFileGetStr(hDisk,strLine,2048)
					// If SalStrLeftX(strLine,2)='NO'
					// Set dfText3 = SalStrMidX(strLine, 2, 126)
					// Call SalFileGetStr(hDisk,strLine,2048)
					// If SalStrLeftX(strLine,5)='NOBB1'
					// Set dfText4 = 'Bestandsbuchdruck'
					// Call SalFileClose( hDisk )
					// Call SalStatusSetText(frmMain,'Datei OK')
					// Set dfDateiName = strDateiPfad
					// Set dfTAL = nTAL
					// Set dfTAA = nTAA
					// 13.05.02
					// Call SalPostMsg(dfTAL, SAM_Validate, 0, 0)
					// Große lembeck ?
					// If nTAL = 530
					// Set cb530 = TRUE
					// If nTAL = 497 Or nTAL = 167 or nTAL = 567
					// Set cb497 = TRUE
					// Windows - Format der Abr. Diskette ?
					// If SalFileOpen( hDisk,dfDateiName,OF_Read )
					// Loop
					// Set bOK= SalFileGetStr(hDisk,strLine,2048)
					// If Not bOK
					// Break
					// Else
					// If SalStrScan(strLine, 'Ä' ) >=0
					// Set cbWinForm=TRUE
					// Break
					// If SalStrScan(strLine, 'Ö' ) >=0
					// Set cbWinForm=TRUE
					// Break
					// If SalStrScan(strLine, 'Ü' ) >=0
					// Set cbWinForm=TRUE
					// Break
					// If SalStrScan(strLine, 'ä' ) >=0
					// Set cbWinForm=TRUE
					// Break
					// If SalStrScan(strLine, 'ö' ) >=0
					// Set cbWinForm=TRUE
					// Break
					// If SalStrScan(strLine, 'ü' ) >=0
					// Set cbWinForm=TRUE
					// Break
					// If SalStrScan(strLine, 'ß' ) >=0
					// Set cbWinForm=TRUE
					// Break
					// 07.08.08 auskommentiert, da auch in DOS-Format-Dateien vorhanden
					// If SalStrScan(strLine, '€' ) >=0
					// Set cbWinForm=TRUE
					// Break
					// Call SalFileClose(hDisk)
					// If SalDateCurrent() > (dfDatum + 14)
					// Call SalColorSet( dfDatum, COLOR_IndexWindow, COLOR_Red )
					// Call SalColorSet( dfDatum, COLOR_IndexWindowText, COLOR_White )
					// Call SalMessageBox( 'Achtung:
					// Die Abrechnung ist alt !!!','Altes Abrechnungsdatum!',
					// MB_Ok|MB_IconExclamation)
					// Else If SalDateCurrent() > (dfDatum + 7)
					// Call SalColorSet( dfDatum, COLOR_IndexWindow, COLOR_Yellow )
					// Call SalColorSet( dfDatum, COLOR_IndexWindowText, COLOR_Black )
					// Else
					// Call SalColorSet( dfDatum, COLOR_IndexWindow, COLOR_DarkGreen )
					// Call SalColorSet( dfDatum, COLOR_IndexWindowText, COLOR_White )
					// Set dfBearb = strBNUser
					// Call SalEnableWindow( pbOK )
					// If nStatus != FILE_CopyOK
					// Call SalDestroyWindow(frmDiskEin)
					this.PalEinlesen();
					Sal.WaitCursor(false);
				}
				else
				{
					this.DestroyWindow();
				}
			}
			else
			{
				this.strDateiPfad = this.strPathName;
				this.strDateiName = this.strFileName;
				this.PalEinlesen();
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmDiskEin_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.EnableWindow(App.frmMain.pbDiskAbr);
			this.hSqlDisk.Disconnect();
			this.hSqlHalter.Disconnect();
			this.hSqlZettel.Disconnect();
			Int.SqlImmedX("COMMIT");
			Sal.WaitCursor(false);
			Sal.FileSetDrive(Const.PATH_DRIVE);
			// 22.12.15 Ä1304
			Var.bfrmDiskEin = false;

			#endregion
		}
		
		/// <summary>
		/// dfTAL WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfTAL_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfTAL_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfTAL_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 02.06.14 Ä1066 + aland
			// 07.11.16 Ä1421 + aneuenr
			// 19.11.19 Ä1872 + asteuernummer
			Int.SqlImmedSel(@"SELECT anr2, akzpraxart, austid, aland, aneuenr, asteuernr
INTO :frmDiskEin.dfTAA, :frmDiskEin.nPraxArt, :frmDiskEin.strUStID, :frmDiskEin.strTALand, :frmDiskEin.nNeueNr, :frmDiskEin.strSteuernummer
FROM a WHERE aarztnr=:frmDiskEin.dfTAL");
			if (this.strUStID == "" && this.strSteuernummer == "") 
			{
				Sal.MessageBox("Die Arzt-Nr." + Int.PalStrNum(this.dfTAL.Number, 4, 0) + @" hat keine Steuer-Nr..

Bitte bei Tierarzt erfragen, bevor Rechnungen gedruckt werden!", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			if (this.nPraxArt == 0) 
			{
				this.dfTAA.Number = this.dfTAL.Number;
			}
			else if (this.nPraxArt == 2) 
			{
				this.nTA = this.dfTAL.Number;
				this.dfTAL.Number = this.dfTAA.Number;
				this.dfTAA.Number = this.nTA;
				// 25.10.16 Ä1426 + austid2
				// 19.11.19 Ä1872 + asteuernummer
				Int.SqlImmedSel(@"SELECT austid, austid2, asteuernr
INTO :frmDiskEin.strUStID, :frmDiskEin.strUStId2, :frmDiskEin.strSteuernummer
FROM a WHERE aarztnr=:frmDiskEin.dfTAA");
				if (this.strUStID == "" && this.strUStId2 == "" && this.strSteuernummer == "") 
				{
					Sal.MessageBox("Die Arzt-Nr." + Int.PalStrNum(this.dfTAL.Number, 4, 0) + @" hat keine Steuer-Nr..

Bitte bei Tierarzt erfragen, bevor Rechnungen gedruckt werden!", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
			}
			// 10.09.13 Ä970
			// 13.05.14 (zhalternr IS NULL OR zhalternr = 0) -> zhalternr = 0
			this.tblAZettel.Populate(this.hSqlZettel, @"SELECT zvon,zan,zrechnr,zbemerk,zdatum FROM Z
INTO :frmDiskEin.tblAZettel.colsVon, :frmDiskEin.tblAZettel.colsAn,
:frmDiskEin.tblAZettel.colnRechNr, :frmDiskEin.tblAZettel.collsBemerk,
:frmDiskEin.tblAZettel.coldtDatum
WHERE zarztnr IN (:frmDiskEin.dfTAL, :frmDiskEin.dfTAA) AND zhalternr = 0
AND zart='RA' AND zdeaktiv IS NULL ORDER BY zdatum DESC", Sys.TBL_FillAll);
			// 07.11.16 Ä1421 + aneuenr
			if (this.nNeueNr > 0) 
			{
				Sal.MessageBox(@"Diese Mitglied-Nr. ist nicht mehr gültig.
Die neue Nummer lautet: " + this.nNeueNr.ToString(0), "Mitglied nicht mehr aktuell", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfBearbDatum.DateTime = SalDateTime.Current;
			this.strKennungTAalt = "";
			this.nReverseAlt = 0;
			this.nAnzL = 0;
			this.nAnzA = 0;
			this.pbOK.DisableWindow();
			Sal.WaitCursor(true);
			if (this.strDateiName.Left(1) == "A") 
			{
				this.SetStatusBarText("Erstelle Abgabebelege -  Bitte warten !");
				// Set nErr = 1
				// Set strReportName = 'ABGBEL'
				// Call SalReportPrint(frmDiskEin, 'AAB.QRP',
				// ':frmDiskEin.strTAN1, :frmDiskEin.strTAN2, :frmDiskEin.strTAStr,
				// :frmDiskEin.strTAOrt,
				// :frmDiskEin.strTHKenn, :frmDiskEin.strTHN1, :frmDiskEin.strTHN2, :frmDiskEin.strTHStr, :frmDiskEin.strTHPlz,
				// :frmDiskEin.strTHOrt,
				// :frmDiskEin.dtRepDat,
				// :frmDiskEin.strRepRechBez,
				// :frmDiskEin.strRepAnzA, :frmDiskEin.strRepAnzK, :frmDiskEin.strRepCharge, :frmDiskEin.nRepWartezeit,
				// :frmDiskEin.nRepWartemilch,
				// :frmDiskEin.strRepDosierung, :frmDiskEin.strRepDauer,
				// :frmDiskEin.strRepAABIdent, :frmDiskEin.strRepAABArt, :frmDiskEin.strRepAABDiagnose,
				// :frmDiskEin.strRepAABWH, :frmDiskEin.strRepAABOrt, :frmDiskEin.strRepAABPreNr,
				// :frmDiskEin.strRepAABVerabreichung',
				// 'Z1, Z2, Z3, Z4,
				// Kenn1, N1, N2, Str, PLZ, Ort,
				// Dat,
				// RechBez, AnzA, AnzK, Charge, Wartezeit, Wartemilch,
				// Dosierung, Dauer,
				// AABIdent, AABArt, AABDiagnose, AABWH, AABOrt, AABNr, AABVerabreichung' ,
				// 1, RPT_PrintAll,1 ,1 , nErr)
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "AAB.lst", "");
				// 02.03.06 Pegasus #6 Bestandsbuch
				if (this.dfText4.Text == "Bestandsbuchdruck") 
				{
					// Call SalStatusSetText(hWndForm,'Erstelle Bestandsbuch -  Bitte warten !')
					// Set nErr = 1
					// Set strReportName = 'BESTBUCH'
					// Call SalReportPrint(frmDiskEin, 'Bestandsbuch.QRP',
					// ':frmDiskEin.strTAN1, :frmDiskEin.strTAN2, :frmDiskEin.strTAStr, :frmDiskEin.strTAOrt,
					// :frmDiskEin.strTHKenn, :frmDiskEin.strTHN1, :frmDiskEin.strTHN2, :frmDiskEin.strTHStr, :frmDiskEin.strTHPlz, :frmDiskEin.strTHOrt,
					// :frmDiskEin.dtRepDat,
					// :frmDiskEin.strRepRechBez,
					// :frmDiskEin.strRepAnz, :frmDiskEin.strRepAnzK, :frmDiskEin.strRepCharge, :frmDiskEin.nRepWartezeit, :frmDiskEin.nRepWartemilch,
					// :frmDiskEin.strRepDosierung, :frmDiskEin.strRepDauer,
					// :frmDiskEin.strRepAABIdent, :frmDiskEin.strRepAABArt, :frmDiskEin.strRepAABDiagnose,
					// :frmDiskEin.strRepAABWH, :frmDiskEin.strRepAABOrt, :frmDiskEin.strRepAABPreNr,
					// :frmDiskEin.strRepAABVerabreichung',
					// 'Z1, Z2, Z3, Z4,
					// Kenn1, N1, N2, Str, PLZ, Ort,
					// Dat,
					// RechBez, Anz, AnzK, Charge, Wartezeit, Wartemilch,
					// Dosierung, Dauer,
					// AABIdent, AABArt, AABDiagnose, AABWH, AABOrt, AABNr, AABVerabreichung' ,
					// 1, RPT_PrintAll,1 ,1 , nErr)
					// LL
					dlgLlDruck.ModalDialog(App.frmMain, "Bestandsbuch.lst", "");
				}
				// 30.08.16
				if (this.strPathName != "")  // 22.12.15 Ä1304		!
				{
					if (Sys.IDYES == Sal.MessageBox("Soll die Abrechnung jetzt auf dem Server gelöscht werden ?", "Rechnungen", Sys.MB_YesNo)) 
					{
						this.hDisk.Open(this.strUrDateiPfad, Sys.OF_Delete);
						if (!(this.PalFTPLogin())) 
						{
							Sal.MessageBox("Keine verbindung zum Abrechnungsserver abr.tvn-elze.de.", "Verbindungsfehler", (Sys.MB_Ok | Sys.MB_IconStop));
						}
						else
						{
							// 11.05.23 Ä2106
							// Call axFTP.Delete( '/Pegasus/' || strFileName)
							this.axFTP.Delete("/" + this.strProjekt + " /" + this.strFileName);

							this.axFTP.Close();
						}
					}
				}
				else
				{
					if (this.strDateiPfad.Left(16) != Const.PATH_ABR_ALT) 
					{
						if (Sys.IDYES == Sal.MessageBox(@"Soll die Abrechnungsdatei jetzt
gelöscht werden ?", "Abrechnung löschen?", Sys.MB_YesNo)) 
						{
							this.hDisk.Open(this.dfDateiName.Text, Sys.OF_Delete);
						}
					}
				}

			}
			else if (this.strDateiName.Left(1) == "I") 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Impferinnerungen -  Bitte warten !')
				// Set nErr = 1
				// Set strReportName = 'IMPFBRF'
				// Call SalReportPrint(frmDiskEin,'IMPFBRF.QRP',
				// ':frmDiskEin.strTAN1, :frmDiskEin.strTAN2, :frmDiskEin.strTAStr,
				// :frmDiskEin.strTAOrt,
				// :frmDiskEin.strTHKenn, :frmDiskEin.strTHN1, :frmDiskEin.strTHN2, :frmDiskEin.strTHStr, :frmDiskEin.strTHPlz,
				// :frmDiskEin.strTHOrt,
				// :frmDiskEin.dtRepDat,
				// :frmDiskEin.strRepBehArt,
				// :frmDiskEin.strRepTGS, :frmDiskEin.strRepTNA, :frmDiskEin.dtRepTGB, :frmDiskEin.strRepTRS,
				// :frmDiskEin.strRepAken, :frmDiskEin.strRepTyp,
				// :frmDiskEin.strRepRechBez,
				// :frmDiskEin.nRepAnz1',
				// 'Z1, Z2, Z3, Z4,
				// Kenn1, N1, N2, Str, PLZ, Ort,
				// Dat, BehArt, TGS, TNA, TGB, TRS, AKen, Typ,
				// RechBez, Anz1',
				// 1, RPT_PrintAll,1 ,1 , nErr )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Impferinnerungen.lst", "");
				// 30.08.16
				if (this.strPathName != "")  // 22.12.15 Ä1304		!
				{
					if (Sys.IDYES == Sal.MessageBox("Soll die Abrechnung jetzt auf dem Server gelöscht werden ?", "Rechnungen", Sys.MB_YesNo)) 
					{
						this.hDisk.Open(this.strUrDateiPfad, Sys.OF_Delete);
						if (!(this.PalFTPLogin())) 
						{
							Sal.MessageBox("Keine verbindung zum Abrechnungsserver abr.tvn-elze.de.", "Verbindungsfehler", (Sys.MB_Ok | Sys.MB_IconStop));
						}
						else
						{
							// 11.05.23 Ä2106
							// Call axFTP.Delete( '/Pegasus/' || strFileName)
							this.axFTP.Delete("/" + this.strProjekt + " /" + this.strFileName);

							this.axFTP.Close();
						}
					}
				}
				else
				{
					if (this.strDateiPfad.Left(16) != Const.PATH_ABR_ALT) 
					{
						if (Sys.IDYES == Sal.MessageBox(@"Soll die Abrechnungsdatei jetzt
gelöscht werden ?", "Abrechnung löschen?", Sys.MB_YesNo)) 
						{
							this.hDisk.Open(this.dfDateiName.Text, Sys.OF_Delete);
						}
					}
				}
			}
			else
			{
				this.bOk = false;
				if (!(this.cbRP.Checked)) 
				{
					this.bOk = true;
					// 22.09.99
					Int.SqlImmedSel(@"SELECT astaffel
INTO :frmDiskEin.nStaffel
FROM a WHERE aarztnr=:frmDiskEin.dfTAL");
					if (this.nStaffel != 902 && this.nStaffel != 903) 
					{
						if (Sys.IDNO == Sal.MessageBox("Arzt " + Int.PalStrNum(this.dfTAL.Number, 4, 0) + " hat Staffel " + Int.PalStrNum(this.nStaffel, 4, 0) + @".

Ist das in Ordnung ?", "Achtung", Sys.MB_YesNo)) 
						{
							this.bOk = false;
						}
						else
						{
							if (this.dfTAL.Number != this.dfTAA.Number) 
							{
								Int.SqlImmedSel(@"SELECT astaffel
INTO :frmDiskEin.nStaffel
FROM a WHERE aarztnr=:frmDiskEin.dfTAA");
								if (this.nStaffel != 902 && this.nStaffel != 903) 
								{
									if (Sys.IDNO == Sal.MessageBox("Arzt " + Int.PalStrNum(this.dfTAA.Number, 4, 0) + " hat Staffel " + Int.PalStrNum(this.nStaffel, 4, 0) + @".

Ist das in Ordnung ?", "Achtung", Sys.MB_YesNo)) 
									{
										this.bOk = false;
									}
								}
							}
						}
					}
				}
				else
				{
					if (Sys.IDYES == Sal.MessageBox(@"Sie haben ""in Kopie"" angekreuzt.

Dieser Punkt dient zum erneuten Einlesen von
Rechnungsdaten in eine Rechnungskopie,
z.B. wenn aufgrund eines Fehlers keine
Rechnungskopie vorhanden ist.

Achtung: Es werden keine Abrechnungsgebühren aufgeschlagen !

Fortfahren ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
					{
						this.bOk = true;
					}
				}
				if (this.bOk) 
				{
					this.hDisk.Open(this.dfDateiName.Text, Sys.OF_Read);
					while (true)
					{
						Var.bOK = this.hDisk.GetString(ref this.strLine, 1024);
						this.strLine = this.Pal00To32(this.strLine);
						// 07.04.22
						this.strLine = Int.PalStrReplace(this.strLine, "ÿ", " ");
						// 05.10.22
						this.strLine = Int.PalStrReplace(this.strLine, "ő", "§");
						// 05.10.23 F5047
						this.strLine = Int.PalStrReplace(this.strLine, "õ", "§");
						// If SalStrScan( strLine, 'Kramer') != -1
						// Call SalMessageBeep( 0 )
						// 26.07.22 Ä2030
						this.strMOId = "";

						// 08.03.22 Ä2005 auskommentiert	18.05.22 wieder rein
						if (!(this.cbWinForm.Checked)) 
						{
							this.strLine = Int.PalDosToWin(this.strLine);
						}
						if (!(Var.bOK)) 
						{
							if (this.PalNeuKO(false)) 
							{
							}
							this.hDisk.Close();
							break;
						}
						else
						{
							if (this.strLine.Mid(0, 2) == "KO") 
							{
								// 30.06.14 Ä961
								// Set nLeJahr = 0
								// If strKennungTA != strKennungTAalt	! 18.12.14 Ä961 klappt sonst bei Göbes nicht
								// Set nLeJahr = 0
								// Set nPosNr1 = 0
								// Call SqlImmedSel(' SELECT leposnr INTO :frmDiskEin.nPosNr1 FROM le WHERE lebearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
								// AND learztnr = :frmDiskEin.nTA AND levn = :frmDiskEin.strVN AND leNN = :frmDiskEin.strNN
								//  AND lestr = :frmDiskEin.strStr AND leort = :frmDiskEin.strOrt  AND lekennungta = :frmDiskEin.strKennungTAalt')

								this.strKennungTA = this.strLine.Mid(2, 8);
                                // 13.01.15 Ä961
                                // If strKennungTA != strKennungTAalt
                                // Set nLeJahr = 0

                                // 28.05.24 ###
                                if ((this.strHeader == "HDC" || this.strHeader == "HDD" || this.strHeader == "HDE" || this.strHeader == "HDX") && !(this.cb27.Checked))
                                {
                                    this.nLenHalter = 30;
                                }
                                else if (this.strHeader == "HDF" || this.strHeader == "HD0" || this.strHeader == "HD1")  // 08.08.16 Ä1339	19.06.20 Pegasus 4 + or strHeader = 'HD0'
                                {
                                    this.nLenHalter = 50;
                                    this.nKorr = 86;
                                }
                                else
                                {
                                    this.nLenHalter = 27;
                                }
                                // ### bis hier
                                // 22.06.20 F4598 + + nKorr
                                this.nReverse = Int.PalValNum(this.strLine.Mid(187 + this.nKorr, 1));
								// 17.03.10 OTÄ297 +  or nReverse != PalValNum(SalStrMidX(strLine, 187,1))
								if (this.strKennungTA != this.strKennungTAalt || this.nReverse != this.nReverseAlt)  // 11.11.02
								{
									if (this.strKennungTAalt != "") 
									{
										if (this.PalNeuKO(false)) 
										{
										}
									}
									if (this.cbTVSNr.Checked) 
									{
										this.nHalterNr = this.strKennungTA.ToNumber();
									}
									if (this.cbHalter0.Checked) 
									{
										this.nHalterNr = 0;
									}
									else
									{
										this.nHalterNr = this.strLine.Mid(10, 5).ToNumber();
									}
									// 08.08.16 Ä1339
									this.nKorr = 0;

									if ((this.strHeader == "HDC" || this.strHeader == "HDD" || this.strHeader == "HDE" || this.strHeader == "HDX") && !(this.cb27.Checked)) 
									{
										this.nLenHalter = 30;
									}
									else if (this.strHeader == "HDF" || this.strHeader == "HD0" || this.strHeader == "HD1")  // 08.08.16 Ä1339	19.06.20 Pegasus 4 + or strHeader = 'HD0'
									{
										this.nLenHalter = 50;
										this.nKorr = 86;
									}
									else
									{
										this.nLenHalter = 27;
									}
									// 07.04.22
									if (this.cb27.Checked) 
									{
										this.nLenHalter = 27;
									}

									if (this.cb497.Checked) 
									{
										this.strName1 = this.strLine.Mid(16 + this.nLenHalter, this.nLenHalter);
										this.strName2 = "";
									}
									else
									{
										this.strName1 = this.strLine.Mid(15, this.nLenHalter);
										this.strName2 = this.strLine.Mid(16 + this.nLenHalter, this.nLenHalter);
									}
									this.dfKennung.Text = this.strName1;
									// 29.11.22
									if (this.cbohneName2.Checked) 
									{
										this.strStr = this.strLine.Mid(17 + this.nLenHalter, this.nLenHalter);
										this.strOrt = this.strLine.Mid(18 + this.nLenHalter + this.nLenHalter, this.nLenHalter);
										this.nKorr = 35;
									}
									else
									{
										this.strStr = this.strLine.Mid(17 + this.nLenHalter + this.nLenHalter, this.nLenHalter);
										this.strOrt = this.strLine.Mid(18 + this.nLenHalter + this.nLenHalter + this.nLenHalter, this.nLenHalter);
									}

									this.strLand = this.strLine.Mid(139 + this.nKorr, 2);
									this.dtErfDat = this.strLine.Mid(142 + this.nKorr, 26).ToDate();
									// 25.07.08 A190
									if (this.strLine.Mid(168 + this.nKorr, 1) == "" || this.strLine.Mid(168 + this.nKorr, 1) == " ") 
									{
										this.nEinzug = SalNumber.Null;
									}
									else
									{
										this.nEinzug = Int.PalValNum(this.strLine.Mid(168 + this.nKorr, 1));
									}
									this.strBLZ = this.strLine.Mid(169 + this.nKorr, 8).Trim();
									this.strKonto = this.strLine.Mid(177 + this.nKorr, 10).Trim();
									// 17.03.10 OTÄ397
									// Set nReverse = PalValNum(SalStrMidX(strLine, 187,1))
									if (this.nReverse == SalNumber.Null) 
									{
										this.nReverse = 0;
									}
									this.strTHUStID = this.strLine.Mid(188 + this.nKorr, 20).Trim();
									// 09.07.13 Ä848
									this.strHTel = this.strLine.Mid(208 + this.nKorr, 50).Trim();
									this.strHTel2 = this.strLine.Mid(258 + this.nKorr, 50).Trim();
									this.strHTelHandy = this.strLine.Mid(308 + this.nKorr, 50).Trim();
									this.strHTelFax = this.strLine.Mid(358 + this.nKorr, 50).Trim();
									this.strHEmail = this.strLine.Mid(408 + this.nKorr, 50).Trim();
									// ! 03.08.15 Ä1052 + kgebdat
									this.KGEBDAT = this.strLine.Mid(458 + this.nKorr, 26).ToDate();
									if (this.KGEBDAT < new SalDateTime(1900,1, 1))  // 12.05.21
									{
										this.KGEBDAT = SalDateTime.Null;
									}
									// 30.11.20 Ä1922 + Digitalrechnung
									this.strHDigitalRg = this.strLine.Mid(484 + this.nKorr, 3).Trim();
									this.strHLeitwegID = this.strLine.Mid(487 + this.nKorr, 50).Trim();
									this.strHDigitalMail = this.strLine.Mid(537 + this.nKorr, 100).Trim();
									// 04.12.20 Ä1925
									this.nEPost = Int.PalValNum(this.strLine.Mid(637 + this.nKorr, 1));
									if (this.nEPost == SalNumber.Null) 
									{
										this.nEPost = 0;
									}
									// 11.03.21 Ä1925 / Ä1944
									this.strEPostMail = this.strLine.Mid(638 + this.nKorr, 50).Trim();
									this.dtEPostAenDat = this.strLine.Mid(688 + this.nKorr, 26).ToDate();

									// 10.04.02
									// 02.11.07 Ä175 auskommentiert
									// If cbEti
									// Set strLand = PalPruefeLC(strLand, 0)
									// Call SqlImmed('INSERT INTO ed (eda, edn1,edn2,eds,edo) VALUES( :frmDiskEin.strName1, :frmDiskEin.strName2, :frmDiskEin.strStr, :frmDiskEin.strOrt, :frmDiskEin.strLand )')
									// Set strLand = SalStrMidX(strLine,139,2)

									// 16.02.15
									Int.PalSplitName(this.strName1, ref this.strNN, ref this.strVN, ref this.strTi, ref this.strName2);
									Int.PalTrimFeld(ref this.strName2);
									Int.PalTrimOrt(ref this.strStr);
									Int.PalTrimOrtUK(ref this.strOrt, this.strLand); // 01.02.16 Ä1168
									// 08.08.16 Ä1339 30 -> 50
									this.strName2 = this.strName2.Left(50);
									this.strStr = this.strStr.Left(50);
									this.strOrt = this.strOrt.Left(50);
									// #29 07.07.06	! 01.02.16 Ä1168 von oben hierher
									if (this.strLand != "  " && this.strLand != "") 
									{
										this.strOrt = (this.strLand + " " + this.strOrt).Left(56);
									}
									// 04.12.00
									if (this.dtErfDat.Hour() == 0 && this.dtErfDat.Minute() == 0 && this.dtErfDat.Second() == 0) 
									{
										this.dtErfDat = SalDateTime.Null;
									}
									else
									{
										// 06.11.00
										// Call SqlImmedSel('SELECT HHALTERNR FROM H
										// INTO :frmDiskEin.nHalterNr
										// WHERE harztnr = :frmDiskEin.nTA AND herfdat = :frmDiskEin.dtErfDat')
										// 10.01.03
										this.dtErfDat = SalDateTime.Null;
									}

									this.nPosNr = this.hDisk.Tell();
									this.strKennungTAalt = this.strKennungTA;
									this.nReverseAlt = this.nReverse;
									this.nAnzL = 0;
									this.nAnzA = 0;
									this.dtPDatum = SalDateTime.Null;
								}
							}
							if (this.strLine.Mid(0, 2) == "PO") 
							{
								// 16.6.98
								this.nPPosNr = this.hDisk.Tell();
								// 06.11.23 F5048
								this.strLine2 = "";
								if (this.strLine.Length < 120) 
								{
									Var.bOK = this.hDisk.GetString(ref this.strLine2, 1024);
									while (Var.bOK && this.strLine2 == "") 
									{
										Var.bOK = this.hDisk.GetString(ref this.strLine2, 1024);
									}
									this.strLine2 = this.Pal00To32(this.strLine2);
									this.strLine2 = Int.PalStrReplace(this.strLine2, "ÿ", " ");
									this.strLine2 = Int.PalStrReplace(this.strLine2, "ő", "§");
									this.strLine2 = Int.PalStrReplace(this.strLine2, "õ", "§");
									this.nLength = this.strLine.Length;
									this.strLine = this.strLine.Left(this.nLength - 1);
									this.strLine = this.strLine + "  " + this.strLine2;
								}

								if (this.strLine.Mid(2, 1) == "A") 
								{
									this.strPLA = "A";
								}
								else
								{
									this.strPLA = "L";
								}
								// 12.10.20 Ä1903
								if (this.strLine.Mid(3, 1) == "-") 
								{
									this.nPFormat = 0;
								}
								else
								{
									this.nPFormat = Int.PalValNum(this.strLine.Mid(3, 1));
								}

								// 21.01.22 F4866 If
								if (this.strLine.Mid(11, 3) == "01.") 
								{
									this.nPMwSt = Int.PalValNum(this.strLine.Mid(14, 2));
								}
								else
								{
									this.nPMwSt = Int.PalValNum(this.strLine.Mid(11, 5));
								}
								if (this.strHeader != "HDX")  // 26.10.20 F4643
								{
									if (!(Int.PalMwStOkAbr(this.nPMwSt)))  // prüft nur 19,16,15,14,7 und 0%
									{
										this.nPMwSt = Var.nMwStVoll;
									}
								}
								// 29.09.23 F5046 70 -> 90
								this.strPRechText = this.strLine.Mid(16, 90);
								if (this.strLine.Mid(112, 6) != "      ") 
								{
									this.dtPDatum = (this.strLine.Mid(112, 2) + "." + this.strLine.Mid(114, 2) + "." + this.strLine.Mid(116, 2)).ToDate();
								}
								// 10.03.14 Ä980
								if (this.strHeader == "HDX") 
								{
									this.dtPDatum = (this.strLine.Mid(127, 6) + this.strLine.Mid(135, 2)).ToDate();
								}
								// 11.06.20 Ä1892
								if (this.strHeader != "HDX")  // 26.10.20 F4643
								{
									if (this.strTALand == "DE" && this.dtPDatum >= new SalDateTime(2020, 7, 1) && this.dtPDatum <= new SalDateTime(2020, 12, 31)) 
									{
										if (this.nPMwSt == 19) 
										{
											this.nPMwSt = 16;
										}
										else if (this.nPMwSt == 7) 
										{
											this.nPMwSt = 5;
										}
									}
									else
									{
										// 8.4.98
										// 21.11.06 Ä48	28.03.14 auskommentiert wegen Luxemburg	02.06.14 auf Anweisung von H.Sasse wieder reingenommen
										if (this.strTALand == "DE")  // 23.01.23 Ä2066 Luxemburg
										{
											if (this.dtPDatum >= new SalDateTime(2007, 1, 1) && (this.nPMwSt == 15 || this.nPMwSt == 14 || this.nPMwSt == 16)) 
											{
												this.nPMwSt = Var.nMwStVoll;
											}
											else if (this.dtPDatum >= new SalDateTime(1998, 4, 1) && (this.nPMwSt == 15 || this.nPMwSt == 14)) 
											{
												this.nPMwSt = Var.nMwStVoll;
											}

											// 21.11.06 Ä48	02.06.14 auf Anweisung von H.Sasse wieder reingenommen
											if ((this.dtPDatum < new SalDateTime(1998, 4, 1) && this.dtPDatum != SalDateTime.Null) && this.nPMwSt == Var.nMwStVoll) 
											{
												this.nPMwSt = 15;
											}
											else if ((this.dtPDatum < new SalDateTime(2007, 1, 1) && this.dtPDatum != SalDateTime.Null) && this.nPMwSt == Var.nMwStVoll) 
											{
												this.nPMwSt = 16;
											}
											else
											{
												// 09.07.20 Ä1892 nach Anweisung telf. Sa
												if (this.strTALand == "DE" && (this.dtPDatum < new SalDateTime(2020, 7, 1) || this.dtPDatum > new SalDateTime(2020, 12, 31))) 
												{
													if (this.nPMwSt == 16) 
													{
														this.nPMwSt = 19;
													}
													else if (this.nPMwSt == 5) 
													{
														this.nPMwSt = 7;
													}
												}
											}
										}
										else if (this.strTALand == "LU") 
										{
											if ((this.dtPDatum >= new SalDateTime(2023, 1, 1) && this.dtPDatum <= new SalDateTime(2023, 12, 31)) && this.nPMwSt == 17) 
											{
												this.nPMwSt = 16;
											}
										}
									}
								}

								// 30.06.14 Ä961
								this.nPosJahr = this.dtPDatum.Year();
								// 16.12.16 F2807 +  and strHeader < 'HDX'
								if (this.nLeJahr != 0 && this.nLeJahr != this.nPosJahr && this.strHeader < "HDX") 
								{
									this.PalNeuKO(false);
									// 08.01.15 F2211
									this.nPosNr = -1;
									this.strSelect1 = @"SELECT leposnr INTO :frmDiskEin.nPosNr FROM le, lep WHERE lebearbeiter = :frmDiskEin.dfBearb AND le.lebearbdatum = :frmDiskEin.dfBearbDatum
AND learztnr = :frmDiskEin.nTA AND lekennungta = :frmDiskEin.strKennungTAalt ";
									if (this.strVN != "") 
									{
										this.strSelect1 = this.strSelect1 + @"
 AND levn = :frmDiskEin.strVN ";
									}
									else
									{
										this.strSelect1 = this.strSelect1 + @"
 AND levn IS NULL ";
									}
									if (this.strNN != "") 
									{
										this.strSelect1 = this.strSelect1 + @"
 AND lenn = :frmDiskEin.strNN ";
									}
									else
									{
										this.strSelect1 = this.strSelect1 + @"
 AND lenn IS NULL ";
									}
									if (this.strStr != "") 
									{
										this.strSelect1 = this.strSelect1 + @"
 AND lestr = :frmDiskEin.strStr ";
									}
									else
									{
										this.strSelect1 = this.strSelect1 + @"
 AND lestr IS NULL ";
									}
									if (this.strOrt != "") 
									{
										this.strSelect1 = this.strSelect1 + @"
 AND leort = :frmDiskEin.strOrt ";
									}
									else
									{
										this.strSelect1 = this.strSelect1 + @"
 AND leort IS NULL ";
									}
									this.strSelect1 = this.strSelect1 + @"AND lereverse = :frmDiskEin.nReverseAlt AND @YEAR(lepdatum)+1900 = :frmDiskEin.nPosJahr
AND learztnr=leparztnr AND lehalternr=lephalternr AND leposnr=lepposnr
AND lebearbeiter=lepbearbeiter AND le.lebearbdatum=lep.lebearbdatum";
									Int.SqlImmedSel(this.strSelect1);
									if (this.nPosNr == -1) 
									{
										this.nPosNr = this.nPPosNr;
									}

									// 08.01.15 F2230
									this.nAnzL = 0;
									this.nAnzA = 0;
								}
								// 03.11.14 Ä1067
								if (this.strHeader == "HDX") 
								{
									this.nPReverseVersion = 0;
									// 06.02.18 Ä1698
									this.BPRAB = 0;
								}
								else
								{
									// 16.06.23 F5020 1 -> 5
									this.nPReverseVersion = Int.PalValNum(this.strLine.Mid(133, 5));
									// 06.02.18 Ä1698
									this.BPRAB = Int.PalValNum(this.strLine.Mid(130, 3));
									// 26.07.22 Ä2030
									this.strMOId = this.strLine.Mid(134, 19);
									this.strMOId = Int.PalDelNonNum(this.strMOId, false);
								}


								if (this.strLine.Mid(122, 4) == "*.00" || this.strLine.Mid(125, 4) == "*.00") 
								{
									this.nPDM = 0.00m;
									this.nPText = 1;
								}
								else
								{
									if ((this.strHeader >= "HDE" && this.strHeader < "HDX") || this.strHeader == "HD0") 
									{
										this.nPDM = Int.PalValNum(this.strLine.Mid(118, 11));
										// 02.11.12 F1434
										if (this.nPDM == 0 || this.nPDM == SalNumber.Null && this.strPRechText.Left(5) == "Summe") 
										{
											this.nPDM = Int.PalValNum(this.strLine.Mid(118, 8));
										}
									}
									else
									{
										this.nPDM = Int.PalValNum(this.strLine.Mid(118, 8));
									}
									// If strHeader != 'HDD'  and  strHeader != 'HDE' and strHeader != 'HDX' and strHeader != 'HDA'	! 30.08.16 entfernt
									// Set nPDM = SalNumberRound(nPDM / 1.95583 * 100) / 100
									// 13.01.09 Sonderfall Gaus Entschuldigung
									// Set nPDM = nPDM - SalNumberRound(nPDM / 1.95583 * 100) / 100

									this.nPText = 0;
								}

								// 29.11.22 Ä2056
								Var.strDummy = this.strLine.Mid(145, 1);
								if (this.strLine.Mid(141, 4) == "*.00" || this.strLine.Mid(144, 1) == " " || this.strLine.Mid(144, 1) == "") 
								{
								}
								else
								{
									this.nPDM = Int.PalValNum(this.strLine.Mid(134, 11));
									this.nPDM = (this.nPDM * 100 * 100 / (100 + this.nPMwSt)).Round() / 100;
									// If strHeader != 'HDD'  and  strHeader != 'HDE' and strHeader != 'HDX' and strHeader != 'HDA'	! 30.08.16 entfernt
									// Set nPDM = SalNumberRound(nPDM / 1.95583 * 100) / 100
									// 13.01.09 Sonderfall Gaus Entschuldigung
									// Set nPDM = nPDM - SalNumberRound(nPDM / 1.95583 * 100) / 100

									this.nPText = 0;
								}
								// 27.09.23 Ä2140
								this.strFremdRechnungsnr = "";
								this.strFremdRechnungsnr = this.strLine.Mid(657, 50);

								if (this.strPLA == "L") 
								{
									this.PalNeuPO("L");
								}
								else
								{
									this.PalNeuPO("A");
								}
							}
						}
					}
					this.hFile.Close();
					// 15.10.02 zweite datei einmischen
					this.strKennungTAalt = "";
					this.nReverseAlt = 0;
					if (this.dfDatei2.Text != "") 
					{
						this.SetStatusBarText("Datei 2 ...");
						this.hDisk.Open(this.dfDatei2.Text, Sys.OF_Read);
						while (true)
						{
							Var.bOK = this.hDisk.GetString(ref this.strLine, 1024);
							this.strLine = this.Pal00To32(this.strLine);
							// 08.03.22 Ä2005 auskommentiert	18.05.22 wieder rein
							if (!(this.cbWinForm.Checked)) 
							{
								this.strLine = Int.PalDosToWin(this.strLine);
							}
							// 06.11.23
							this.strLine = Int.PalStrReplace(this.strLine, "ÿ", " ");
							this.strLine = Int.PalStrReplace(this.strLine, "ő", "§");
							this.strLine = Int.PalStrReplace(this.strLine, "õ", "§");

							// 12.01.09 OTF161 + If SalStrMidX(strLine,0,2) ='HD'
							if (this.strLine.Mid(0, 2) == "HD") 
							{
								this.strHeader = this.strLine.Mid(0, 3);
							}

							if (this.strHeader == "HDA")  // altes Format
							{
								this.nTADatei2 = this.strLine.Mid(3, 3).ToNumber();
							}
							else
							{
								this.nTADatei2 = this.strLine.Mid(3, 6).ToNumber();
							}

							if (!(Var.bOK)) 
							{
								if (this.PalNeuKO(true)) 
								{
								}
								this.SetStatusBarText("Diskette fertig eingelesen");
								this.hDisk.Close();
								break;
							}
							else
							{
								if (this.strLine.Mid(0, 2) == "KO") 
								{
									this.strKennungTA = this.strLine.Mid(2, 8);
									// If strKennungTA = '402617  '
									// Call SalMessageBeep( 0 )
									this.nReverse = Int.PalValNum(this.strLine.Mid(187, 1));
									// 17.03.10 OTÄ297 +  or nReverse != PalValNum(SalStrMidX(strLine, 187,1))
									if (this.strKennungTA != this.strKennungTAalt || this.nReverse != this.nReverseAlt)  // 11.11.02
									{
										if (this.strKennungTAalt != "") 
										{
											if (this.PalNeuKO(true)) 
											{
											}
										}
										if (this.cbTVSNr.Checked) 
										{
											this.nHalterNr = this.strKennungTA.ToNumber();
										}
										if (this.cbHalter0.Checked) 
										{
											this.nHalterNr = 0;
										}
										else
										{
											this.nHalterNr = this.strLine.Mid(10, 5).ToNumber();
										}
										if ((this.strHeader == "HDC" || this.strHeader == "HDD" || this.strHeader == "HDE" || this.strHeader == "HDX") && !(this.cb27.Checked)) 
										{
											this.nLenHalter = 30;
										}
										else if (this.strHeader == "HDF" || this.strHeader == "HD0")  // 08.08.16 Ä1339	19.06.19 Pegasus 4 + or strHeader = 'HD0'
										{
											this.nLenHalter = 50;
											this.nKorr = 86;
										}
										else
										{
											this.nLenHalter = 27;
										}
										if (this.cb497.Checked) 
										{
											this.strName1 = this.strLine.Mid(16 + this.nLenHalter, this.nLenHalter);
											this.strName2 = "";
										}
										else
										{
											this.strName1 = this.strLine.Mid(15, this.nLenHalter);
											this.strName2 = this.strLine.Mid(16 + this.nLenHalter, this.nLenHalter);
										}
										this.dfKennung.Text = this.strName1;
										this.strStr = this.strLine.Mid(17 + this.nLenHalter + this.nLenHalter, this.nLenHalter);
										this.strOrt = this.strLine.Mid(18 + this.nLenHalter + this.nLenHalter + this.nLenHalter, this.nLenHalter);
										this.strLand = this.strLine.Mid(139, 2);
										this.dtErfDat = this.strLine.Mid(142, 26).ToDate();
										// 25.07.08 A190
										if (this.strLine.Mid(168, 1) == "" || this.strLine.Mid(168, 1) == " ") 
										{
											this.nEinzug = SalNumber.Null;
										}
										else
										{
											this.nEinzug = Int.PalValNum(this.strLine.Mid(168, 1));
										}
										this.strBLZ = this.strLine.Mid(169, 8).Trim();
										this.strKonto = this.strLine.Mid(177, 10).Trim();
										// 17.03.10 OTÄ397
										// Set nReverse = PalValNum(SalStrMidX(strLine, 187,1))
										if (this.nReverse == SalNumber.Null) 
										{
											this.nReverse = 0;
										}
										this.strTHUStID = this.strLine.Mid(188, 20).Trim();
										// 09.07.13 Ä848
										this.strHTel = this.strLine.Mid(208, 50).Trim();
										this.strHTel2 = this.strLine.Mid(258, 50).Trim();
										this.strHTelHandy = this.strLine.Mid(308, 50).Trim();
										this.strHTelFax = this.strLine.Mid(358, 50).Trim();
										this.strHEmail = this.strLine.Mid(408, 50).Trim();
										// ! 03.08.15 Ä1052 + kgebdat
										this.KGEBDAT = this.strLine.Mid(458, 26).ToDate();
										if (this.KGEBDAT < new SalDateTime(1900, 1, 1))  // 12.05.21
										{
											this.KGEBDAT = SalDateTime.Null;
										}
										// 30.11.20 Ä1922 + Digitalrechnung
										this.strHDigitalRg = this.strLine.Mid(484 + this.nKorr, 3).Trim();
										this.strHLeitwegID = this.strLine.Mid(487 + this.nKorr, 50).Trim();
										this.strHDigitalMail = this.strLine.Mid(537 + this.nKorr, 100).Trim();
										// 04.12.20 Ä1925
										this.nEPost = Int.PalValNum(this.strLine.Mid(637 + this.nKorr, 1));
										if (this.nEPost == SalNumber.Null) 
										{
											this.nEPost = 0;
										}
										// 11.03.21 Ä1925 / Ä1944
										this.strEPostMail = this.strLine.Mid(638 + this.nKorr, 50).Trim();
										this.dtEPostAenDat = this.strLine.Mid(688 + this.nKorr, 26).ToDate();

										// 10.04.02
										// 02.11.07 Ä175 auskommentiert
										// If cbEti
										// Set strLand = PalPruefeLC(strLand, 0)
										// Call SqlImmed('INSERT INTO ed (eda, edn1,edn2,eds,edo) VALUES( :frmDiskEin.strName1, :frmDiskEin.strName2, :frmDiskEin.strStr, :frmDiskEin.strOrt, :frmDiskEin.strLand )')
										// Set strLand = SalStrMidX(strLine,139,2)

										// #29 07.07.06
										if (this.strLand != "  " && this.strLand != "") 
										{
											this.strOrt = (this.strLand + " " + this.strOrt).Left(33);
										}
										// 16.02.15
										Int.PalSplitName(this.strName1, ref this.strNN, ref this.strVN, ref this.strTi, ref this.strName2);
										Int.PalTrimFeld(ref this.strName2);
										Int.PalTrimOrt(ref this.strStr);
										Int.PalTrimOrtUK(ref this.strOrt, this.strLand); // 01.02.16 Ä1168
										this.strName2 = this.strName2.Left(30);
										this.strStr = this.strStr.Left(30);
										this.strOrt = this.strOrt.Left(30);
										// 04.12.00
										if (this.dtErfDat.Hour() == 0 && this.dtErfDat.Minute() == 0 && this.dtErfDat.Second() == 0) 
										{
											this.dtErfDat = SalDateTime.Null;
										}
										else
										{
											// 06.11.00
											// Call SqlImmedSel('SELECT HHALTERNR FROM H
											// INTO :frmDiskEin.nHalterNr
											// WHERE harztnr = :frmDiskEin.nTA AND herfdat = :frmDiskEin.dtErfDat')
											// 10.01.03
											this.dtErfDat = SalDateTime.Null;
										}

										this.nPosNr = this.hDisk.Tell() + 1000000000;
										this.strKennungTAalt = this.strKennungTA;
										this.nReverseAlt = this.nReverse;
										this.nAnzL = 0;
										this.nAnzA = 0;
										this.dtPDatum = SalDateTime.Null;
									}
								}
								if (this.strLine.Mid(0, 2) == "PO") 
								{
									// 16.6.98
									this.nPPosNr = this.hDisk.Tell() + 1000000000;
									// 06.11.23 F5048
									this.strLine2 = "";
									if (this.strLine.Length < 120) 
									{
										Var.bOK = this.hDisk.GetString(ref this.strLine2, 1024);
										while (Var.bOK && this.strLine2 == "") 
										{
											Var.bOK = this.hDisk.GetString(ref this.strLine2, 1024);
										}
										this.strLine2 = this.Pal00To32(this.strLine2);
										this.strLine2 = Int.PalStrReplace(this.strLine2, "ÿ", " ");
										this.strLine2 = Int.PalStrReplace(this.strLine2, "ő", "§");
										this.strLine2 = Int.PalStrReplace(this.strLine2, "õ", "§");
										this.nLength = this.strLine.Length;
										this.strLine = this.strLine.Left(this.nLength - 1);
										this.strLine = this.strLine + "  " + this.strLine2;
									}
									// 11.11.08 F425
									// If SalStrMidX(strLine,2,1)='A'
									// Set strPLA = 'A'
									// Else
									// Set strPLA = 'L'
									if (this.nTADatei2 == this.dfTAL.Number) 
									{
										this.strPLA = "L";
									}
									else
									{
										this.strPLA = "A";
									}

									// 21.01.22 F4866 If
									if (this.strLine.Mid(11, 3) == "01.") 
									{
										this.nPMwSt = Int.PalValNum(this.strLine.Mid(14, 2));
									}
									else
									{
										this.nPMwSt = Int.PalValNum(this.strLine.Mid(11, 5));
									}
									if (!(Int.PalMwStOkAbr(this.nPMwSt)))  // prüft nur 19,16,15,14,7 und 0%
									{
										this.nPMwSt = Var.nMwStVoll;
									}
									this.strPRechText = this.strLine.Mid(16, 70);
									if (this.strLine.Mid(112, 6) != "      ") 
									{
										this.dtPDatum = (this.strLine.Mid(112, 2) + "." + this.strLine.Mid(114, 2) + "." + this.strLine.Mid(116, 2)).ToDate();
									}
									// 10.03.14 Ä980
									if (this.strHeader == "HDX") 
									{
										this.dtPDatum = (this.strLine.Mid(127, 6) + this.strLine.Mid(135, 2)).ToDate();
									}

									// 02.06.14 Ä1066 + If strTALand = 'DE'
									if (this.strTALand == "DE") 
									{
										// 11.06.20 Ä1892
										if (this.dtPDatum >= new SalDateTime(2020, 7, 1) && this.dtPDatum <= new SalDateTime(2020, 12, 31)) 
										{
											if (this.nPMwSt == 19) 
											{
												this.nPMwSt = 16;
											}
											else if (this.nPMwSt == 7) 
											{
												this.nPMwSt = 5;
											}
										}
										else
										{
											// 8.4.98
											// 21.11.06 Ä48	28.03.14 auskommentiert wegen Luxemburg	02.06.14 auf Anweisung von H.Sasse wieder reingenommen
											if (this.dtPDatum >= new SalDateTime(2007, 1, 1) && (this.nPMwSt == 15 || this.nPMwSt == 14 || this.nPMwSt == 16)) 
											{
												this.nPMwSt = Var.nMwStVoll;
											}
											else if (this.dtPDatum >= new SalDateTime(1998, 4, 1) && (this.nPMwSt == 15 || this.nPMwSt == 14)) 
											{
												this.nPMwSt = Var.nMwStVoll;
											}

											// 21.11.06 Ä48	02.06.14 auf Anweisung von H.Sasse wieder reingenommen
											if ((this.dtPDatum < new SalDateTime(1998, 4, 1) && this.dtPDatum != SalDateTime.Null) && this.nPMwSt == Var.nMwStVoll) 
											{
												this.nPMwSt = 15;
											}
											else if ((this.dtPDatum < new SalDateTime(2007, 1, 1) && this.dtPDatum != SalDateTime.Null) && this.nPMwSt == Var.nMwStVoll) 
											{
												this.nPMwSt = 16;
											}
											else
											{
												// 09.07.20 Ä1892 nach Anweisung telf. Sa
												if (this.strTALand == "DE" && (this.dtPDatum < new SalDateTime(2020, 7, 1) || this.dtPDatum > new SalDateTime(2020, 12, 31))) 
												{
													if (this.nPMwSt == 16) 
													{
														this.nPMwSt = 19;
													}
													else if (this.nPMwSt == 5) 
													{
														this.nPMwSt = 7;
													}
												}
											}
										}
									}

									// 30.06.14 Ä961
									this.nPosJahr = this.dtPDatum.Year();
									if (this.nLeJahr != 0 && this.nLeJahr != this.nPosJahr) 
									{
										this.PalNeuKO(false);
										// 08.01.15 F2230
										this.nAnzL = 0;
										this.nAnzA = 0;
									}
									// 08.01.15 F2211
									this.nPosNr = -1;
									// Call SqlImmedSel('SELECT leposnr INTO :frmDiskEin.nPosNr FROM le, lep WHERE lebearbeiter = :frmDiskEin.dfBearb AND le.lebearbdatum = :frmDiskEin.dfBearbDatum
									// AND learztnr = :frmDiskEin.nTA AND lekennungta = :frmDiskEin.strKennungTAalt
									//  AND levn = :frmDiskEin.strVN AND leNN = :frmDiskEin.strNN
									//  AND lestr = :frmDiskEin.strStr AND leort = :frmDiskEin.strOrt
									// AND lereverse = :frmDiskEin.nReverseAlt AND @YEAR(lepdatum)+1900 = :frmDiskEin.nPosJahr
									// AND learztnr=leparztnr AND lehalternr=lephalternr AND leposnr=lepposnr
									// AND lebearbeiter=lepbearbeiter AND le.lebearbdatum=lep.lebearbdatum')
									this.strSelect1 = @"SELECT leposnr INTO :frmDiskEin.nPosNr FROM le, lep WHERE lebearbeiter = :frmDiskEin.dfBearb AND le.lebearbdatum = :frmDiskEin.dfBearbDatum
AND " + Int.PalArztNr("le", this.dfTAL.Number, this.dfTAA.Number) + " AND lekennungta = :frmDiskEin.strKennungTAalt ";
									if (this.strVN != "") 
									{
										this.strSelect1 = this.strSelect1 + @"
 AND levn = :frmDiskEin.strVN ";
									}
									else
									{
										this.strSelect1 = this.strSelect1 + @"
 AND levn IS NULL ";
									}
									if (this.strNN != "") 
									{
										this.strSelect1 = this.strSelect1 + @"
 AND lenn = :frmDiskEin.strNN ";
									}
									else
									{
										this.strSelect1 = this.strSelect1 + @"
 AND lenn IS NULL ";
									}
									if (this.strStr != "") 
									{
										this.strSelect1 = this.strSelect1 + @"
 AND lestr = :frmDiskEin.strStr ";
									}
									else
									{
										this.strSelect1 = this.strSelect1 + @"
 AND lestr IS NULL ";
									}
									if (this.strOrt != "") 
									{
										this.strSelect1 = this.strSelect1 + @"
 AND leort = :frmDiskEin.strOrt ";
									}
									else
									{
										this.strSelect1 = this.strSelect1 + @"
 AND leort IS NULL ";
									}
									this.strSelect1 = this.strSelect1 + @"AND lereverse = :frmDiskEin.nReverseAlt AND @YEAR(lepdatum)+1900 = :frmDiskEin.nPosJahr
AND learztnr=leparztnr AND lehalternr=lephalternr AND leposnr=lepposnr
AND lebearbeiter=lepbearbeiter AND le.lebearbdatum=lep.lebearbdatum";
									Int.SqlImmedSel(this.strSelect1);
									if (this.nPosNr == -1) 
									{
										this.nPosNr = this.nPPosNr;
										if ((this.nAnzA + this.nAnzL) == 0) 
										{
											if (this.strPLA == "L") 
											{
												this.nAnzL = 1;
											}
											else
											{
												this.nAnzA = 1;
											}
										}
										this.PalNeuKO(false);
									}

									// 03.11.14 Ä1067
									if (this.strHeader == "HDX") 
									{
										this.nPReverseVersion = 0;
										// 06.02.18 Ä1698
										this.BPRAB = 0;
									}
									else
									{
										this.nPReverseVersion = Int.PalValNum(this.strLine.Mid(133, 5));
										// 06.02.18 Ä1698
										this.BPRAB = Int.PalValNum(this.strLine.Mid(130, 3));
									}

									if (this.strLine.Mid(122, 4) == "*.00" || this.strLine.Mid(125, 4) == "*.00") 
									{
										this.nPDM = 0.00m;
										this.nPText = 1;
									}
									else
									{
										if (this.strHeader >= "HDE" || this.strHeader == "HD0") 
										{
											this.nPDM = Int.PalValNum(this.strLine.Mid(118, 11));
										}
										else
										{
											this.nPDM = Int.PalValNum(this.strLine.Mid(118, 8));
										}
										// If strHeader != 'HDD' and  strHeader != 'HDE' and strHeader != 'HDX' and strHeader != 'HDA'	! 30.08.16 entfernt
										// Set nPDM = SalNumberRound(nPDM / 1.95583 * 100) / 100
										this.nPText = 0;
									}
									// 29.11.22 Ä2056
									Var.strDummy = this.strLine.Mid(145, 1);
									if (this.strLine.Mid(141, 4) == "*.00" || this.strLine.Mid(144, 1) == " " || this.strLine.Mid(144, 1) == "") 
									{
									}
									else
									{
										this.nPDM = Int.PalValNum(this.strLine.Mid(134, 11));
										this.nPDM = (this.nPDM * 100 * 100 / (100 + this.nPMwSt)).Round() / 100;
										// If strHeader != 'HDD'  and  strHeader != 'HDE' and strHeader != 'HDX' and strHeader != 'HDA'	! 30.08.16 entfernt
										// Set nPDM = SalNumberRound(nPDM / 1.95583 * 100) / 100
										// 13.01.09 Sonderfall Gaus Entschuldigung
										// Set nPDM = nPDM - SalNumberRound(nPDM / 1.95583 * 100) / 100

										this.nPText = 0;
									}
									// 27.09.23 Ä2140
									this.strFremdRechnungsnr = "";
									this.strFremdRechnungsnr = this.strLine.Mid(657, 50);

									if (this.strPLA == "L") 
									{
										this.PalNeuPO("L");
									}
									else
									{
										this.PalNeuPO("A");
									}
								}
							}
						}
						this.hFile.Close();
						Int.SqlImmed(@"DELETE FROM le WHERE lebearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND learztnr = :frmDiskEin.dfTAA AND leposnr NOT IN
(SELECT lepposnr FROM lep WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND leparztnr = :frmDiskEin.dfTAA)");
					}
					// 16.01.03
					this.SetStatusBarText("Prüfe, ob ganzes Datum ohne Preis...");
					if (this.dfTAL.Number != this.dfTAA.Number) 
					{
						this.hSqlDisk.Commit();
						// 14.11.05 +  AND lepzeidat>=1990-01-01
						Int.SqlHandleExec(this.hSqlDisk, @"SELECT lepposnr, lepdatum, lephalternr INTO :frmDiskEin.nPosNr, :frmDiskEin.dtPosDat, :frmDiskEin.nHalterNr
FROM lep WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND leparztnr = :frmDiskEin.dfTAL AND lepzeidat>='1990-01-01' GROUP BY 1,2,3 HAVING sum(lepdm)=0", "DiskEin-0 Euro-Kontrolle", ref this.nErr);
						this.nFetch = this.hSqlDisk.FetchNext();
						while (this.nFetch != Sys.FETCH_EOF) 
						{
							this.nCount = 0;
							Int.SqlImmedSel(@"SELECT count(*) INTO :frmDiskEin.nCount FROM lep
WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND leparztnr = :frmDiskEin.dfTAA AND lepposnr=:frmDiskEin.nPosNr AND lepdatum=:frmDiskEin.dtPosDat
AND lephalternr = :frmDiskEin.nHalterNr");
							if (this.nCount > 0) 
							{
								Int.SqlImmed(@"UPDATE lep SET leparztnr=:frmDiskEin.dfTAA, lepla= 'A'
WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND leparztnr = :frmDiskEin.dfTAL AND lepposnr=:frmDiskEin.nPosNr AND lepdatum=:frmDiskEin.dtPosDat");
							}
							this.nFetch = this.hSqlDisk.FetchNext();
						}
						this.hSqlDisk.Commit();
						// 06.03.03
						Int.SqlImmed(@"DELETE FROM le WHERE lebearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND learztnr = :frmDiskEin.dfTAL AND leposnr NOT IN
(SELECT lepposnr FROM lep WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND leparztnr = :frmDiskEin.dfTAL)");

					}
					// 08.03.23 F4977
					this.SetStatusBarText("Prüfe, ob Tiername zur anderen Nr. kopiert werden muss...");
					if (this.dfTAL.Number != this.dfTAA.Number) 
					{
						this.hSqlDisk.Commit();
						// 14.11.05 +  AND lepzeidat>=1990-01-01
						Int.SqlHandleExec(this.hSqlDisk, @"SELECT lepposnr, lepdatum, lephalternr, lepla, lepmwst, leprechtext,lepdm, leptext,
lepzeidat, lepformat, leparztnr
INTO :frmDiskEin.nPosNr, :frmDiskEin.dtPosDat, :frmDiskEin.nHalterNr, :frmDiskEin.strPLA, :frmDiskEin.nPMwSt, :frmDiskEin.strPRechText, :frmDiskEin.nPDM, :frmDiskEin.nPText,
:frmDiskEin.dtPZeiDat, :frmDiskEin.nPFormat, :frmDiskEin.nArztNr
FROM lep WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND " + Int.PalArztNr("lep", this.dfTAL.Number, this.dfTAA.Number) + " AND lepformat>0", "Überschriften kopieren?", ref this.nErr);
						this.nFetch = this.hSqlDisk.FetchNext();
						while (this.nFetch != Sys.FETCH_EOF) 
						{
							this.nCount = 0;
							if (this.nArztNr == this.dfTAL.Number) 
							{
								Int.SqlImmedSel(@"SELECT count(*) INTO :frmDiskEin.nCount FROM lep
WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND leparztnr = :frmDiskEin.dfTAA AND lepposnr=:frmDiskEin.nPosNr AND lepdatum=:frmDiskEin.dtPosDat AND lepzeidat = :frmDiskEin.dtPZeiDat AND lepformat = :frmDiskEin.nPFormat
AND lephalternr = :frmDiskEin.nHalterNr");
								if (this.nCount == 0) 
								{
									// Call SqlImmedSel('SELECT count(*) INTO :frmDiskEin.nCount FROM lep
									// WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
									// AND leparztnr = :frmDiskEin.dfTAA AND lephalternr = :frmDiskEin.nHalterNr' )
									// If nCount > 0
									if (this.nArztNr == this.dfTAL.Number) 
									{
										Int.SqlImmed(@"INSERT INTO lep
(lepbearbeiter, lebearbdatum, lepposnr, lepdatum, lephalternr, lepla, lepmwst, leprechtext,lepdm, leptext, lepzeidat, lepformat, leparztnr)
VALUES(:frmDiskEin.dfBearb, :frmDiskEin.dfBearbDatum, :frmDiskEin.nPosNr, :frmDiskEin.dtPosDat, :frmDiskEin.nHalterNr, 'A',
:frmDiskEin.nPMwSt, :frmDiskEin.strPRechText, :frmDiskEin.nPDM, :frmDiskEin.nPText, :frmDiskEin.dtPZeiDat, :frmDiskEin.nPFormat, :frmDiskEin.dfTAA )");
									}
									else
									{
										Int.SqlImmed(@"INSERT INTO lep
(lepbearbeiter, lebearbdatum, lepposnr, lepdatum, lephalternr, lepla, lepmwst, leprechtext,lepdm, leptext, lepzeidat, lepformat, leparztnr)
VALUES(:frmDiskEin.dfBearb, :frmDiskEin.dfBearbDatum, :frmDiskEin.nPosNr, :frmDiskEin.dtPosDat, :frmDiskEin.nHalterNr, 'L',
:frmDiskEin.nPMwSt, :frmDiskEin.strPRechText, :frmDiskEin.nPDM, :frmDiskEin.nPText, :frmDiskEin.dtPZeiDat, :frmDiskEin.nPFormat, :frmDiskEin.dfTAL )");
									}
								}
							}
							else
							{
								Int.SqlImmedSel(@"SELECT count(*) INTO :frmDiskEin.nCount FROM lep
WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND leparztnr = :frmDiskEin.dfTAL AND lepposnr=:frmDiskEin.nPosNr AND lepdatum=:frmDiskEin.dtPosDat AND lepzeidat = :frmDiskEin.dtPZeiDat AND lepformat = :frmDiskEin.nPFormat
AND lephalternr = :frmDiskEin.nHalterNr");
								if (this.nCount == 0) 
								{
									// Call SqlImmedSel('SELECT count(*) INTO :frmDiskEin.nCount FROM lep
									// WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
									// AND leparztnr = :frmDiskEin.dfTAL AND lephalternr = :frmDiskEin.nHalterNr' )
									// If nCount > 0
									if (this.nArztNr == this.dfTAL.Number) 
									{
										Int.SqlImmed(@"INSERT INTO lep
(lepbearbeiter, lebearbdatum, lepposnr, lepdatum, lephalternr, lepla, lepmwst, leprechtext,lepdm, leptext, lepzeidat, lepformat, leparztnr)
VALUES(:frmDiskEin.dfBearb, :frmDiskEin.dfBearbDatum, :frmDiskEin.nPosNr, :frmDiskEin.dtPosDat, :frmDiskEin.nHalterNr, 'A',
:frmDiskEin.nPMwSt, :frmDiskEin.strPRechText, :frmDiskEin.nPDM, :frmDiskEin.nPText, :frmDiskEin.dtPZeiDat, :frmDiskEin.nPFormat, :frmDiskEin.dfTAA )");
									}
									else
									{
										Int.SqlImmed(@"INSERT INTO lep
(lepbearbeiter, lebearbdatum, lepposnr, lepdatum, lephalternr, lepla, lepmwst, leprechtext,lepdm, leptext, lepzeidat, lepformat, leparztnr)
VALUES(:frmDiskEin.dfBearb, :frmDiskEin.dfBearbDatum, :frmDiskEin.nPosNr, :frmDiskEin.dtPosDat, :frmDiskEin.nHalterNr, 'L',
:frmDiskEin.nPMwSt, :frmDiskEin.strPRechText, :frmDiskEin.nPDM, :frmDiskEin.nPText, :frmDiskEin.dtPZeiDat, :frmDiskEin.nPFormat, :frmDiskEin.dfTAL )");
									}
								}
							}
							this.nFetch = this.hSqlDisk.FetchNext();
						}
						this.hSqlDisk.Commit();
						this.nFormatalt = -1;
						this.strROWIDalt = "";
						this.nPosNralt = -1;
						Int.SqlHandleExec(this.hSqlDisk, @"SELECT lepposnr, lepdatum, lephalternr, lepla, lepmwst, leprechtext,lepdm, leptext,
lepzeidat, lepformat, leparztnr, ROWID
INTO :frmDiskEin.nPosNr, :frmDiskEin.dtPosDat, :frmDiskEin.nHalterNr, :frmDiskEin.strPLA, :frmDiskEin.nPMwSt, :frmDiskEin.strPRechText, :frmDiskEin.nPDM, :frmDiskEin.nPText,
:frmDiskEin.dtPZeiDat, :frmDiskEin.nPFormat, :frmDiskEin.nArztNr, :frmDiskEin.strROWID
FROM lep WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND " + Int.PalArztNr("lep", this.dfTAL.Number, this.dfTAA.Number) + " ORDER BY leparztnr, lepposnr, lepzeidat", "Überschriften kopieren?", ref this.nErr);
						this.nFetch = this.hSqlDisk.FetchNext();
						while (this.nFetch != Sys.FETCH_EOF) 
						{
							// ### fecher
							//if (this.strPRechText.Left(8) == "Hund Aju") 
							//{
							//	Sal.MessageBeep(0);
							//}
							if (this.nPosNr != this.nPosNralt && this.nPosNralt != -1) 
							{
								if (this.nFormatalt > 0) 
								{
									Int.SqlImmed(@"DELETE FROM lep WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND " + Int.PalArztNr("lep", this.dfTAL.Number, this.dfTAA.Number) + " AND ROWID = :frmDiskEin.strROWIDalt");
								}
								// Set nFormatalt = -1
								// Set strROWIDalt = ''
								// Set nPosNralt = -1
								this.strROWIDalt = this.strROWID;
								this.nFormatalt = this.nPFormat;
								this.nPosNralt = this.nPosNr;
							}
							else
							{
								if (this.nFormatalt > 0 && this.nFormatalt == this.nPFormat) 
								{
									Int.SqlImmed(@"DELETE FROM lep WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND " + Int.PalArztNr("lep", this.dfTAL.Number, this.dfTAA.Number) + " AND ROWID = :frmDiskEin.strROWIDalt");
								}
								this.strROWIDalt = this.strROWID;
								this.nFormatalt = this.nPFormat;
								this.nPosNralt = this.nPosNr;
							}

							this.nFetch = this.hSqlDisk.FetchNext();
						}
						this.hSqlDisk.Commit();
						// Call SqlImmed( 'DELETE FROM lep WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
						// AND leparztnr = :frmDiskEin.dfTAL AND lepformat > 0 AND lepposnr NOT IN
						// (SELECT leposnr FROM le WHERE lebearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
						// AND learztnr = :frmDiskEin.dfTAL)')
						// Call SqlImmed( 'DELETE FROM lep WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
						// AND leparztnr = :frmDiskEin.dfTAA AND lepformat > 0 AND lepposnr NOT IN
						// (SELECT leposnr FROM le WHERE lebearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
						// AND learztnr = :frmDiskEin.dfTAA)')
						// 06.03.03
						Int.SqlImmed(@"DELETE FROM le WHERE lebearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND learztnr = :frmDiskEin.dfTAL AND leposnr NOT IN
(SELECT lepposnr FROM lep WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND leparztnr = :frmDiskEin.dfTAL)");
						Int.SqlHandleExec(this.hSqlDisk, @"SELECT lepposnr, lepdatum, lephalternr, lepla, lepmwst, leprechtext,lepdm, leptext,
lepzeidat, lepformat, leparztnr, ROWID
INTO :frmDiskEin.nPosNr, :frmDiskEin.dtPosDat, :frmDiskEin.nHalterNr, :frmDiskEin.strPLA, :frmDiskEin.nPMwSt, :frmDiskEin.strPRechText, :frmDiskEin.nPDM, :frmDiskEin.nPText,
:frmDiskEin.dtPZeiDat, :frmDiskEin.nPFormat, :frmDiskEin.nArztNr, :frmDiskEin.strROWID
FROM lep WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND " + Int.PalArztNr("lep", this.dfTAL.Number, this.dfTAA.Number) + " AND lepformat>0 ORDER BY leparztnr, lepposnr, lepzeidat", "Überschriften kopieren?", ref this.nErr);
						this.nFetch = this.hSqlDisk.FetchNext();
						while (this.nFetch != Sys.FETCH_EOF) 
						{

							// If SalStrLeftX( strPRechText, 8) = 'Hund Aju'
							// Call SalMessageBeep( 0 )
							Int.SqlIstDa(@"FROM lep WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND leparztnr = :frmDiskEin.nArztNr AND lepformat=0 AND lepdatum = :frmDiskEin.dtPosDat
AND lepposnr = :frmDiskEin.nPosNr AND lephalternr = :frmDiskEin.nHalterNr ", ref Var.bExists);
							if (Var.bExists) 
							{
								Sal.MessageBeep(0);
							}
							else
							{
								Int.SqlImmed(@"DELETE FROM lep WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
AND leparztnr = :frmDiskEin.nArztNr AND ROWID = :frmDiskEin.strROWID
AND lepposnr = :frmDiskEin.nPosNr AND lephalternr = :frmDiskEin.nHalterNr");
							}

							this.nFetch = this.hSqlDisk.FetchNext();
						}
						this.hSqlDisk.Commit();

					}

					this.pbOK.EnableWindow();
					this.SetStatusBarText("Datei fertig eingelesen");
					if (this.strPathName != "")  // 22.12.15 Ä1304		!
					{
						if (Sys.IDYES == Sal.MessageBox("Soll die Abrechnung jetzt auf dem Server gelöscht werden ?", "Rechnungen", Sys.MB_YesNo)) 
						{
							this.hDisk.Open(this.strUrDateiPfad, Sys.OF_Delete);
							if (!(this.PalFTPLogin())) 
							{
								Sal.MessageBox("Keine verbindung zum Abrechnungsserver abr.tvn-elze.de.", "Verbindungsfehler", (Sys.MB_Ok | Sys.MB_IconStop));
							}
							else
							{
								// 30.08.22
								// Call axFTP.Delete( '/Pegasus/' || strFileName)
								this.axFTP.Delete("/" + this.strProjekt + "/" + this.strFileName);

								this.axFTP.Close();
							}
						}
					}
					else
					{
						if (this.strUrDateiPfad.Left(16).ToUpper() != Const.PATH_ABR_ALT) 
						{
							if (Sys.IDYES == Sal.MessageBox("Soll die Abrechnungsdatei jetzt gelöscht werden ?", "Rechnungen", Sys.MB_YesNo)) 
							{
								this.hDisk.Open(this.strUrDateiPfad, Sys.OF_Delete);
								if (this.dfDatei2.Text != "") 
								{
									this.hDisk.Open(this.dfDatei2.Text, Sys.OF_Delete);
								}
							}
						}
					}
					// 13.08.02
					// Set dfBearb = ''
					// Call SqlImmedSel('SELECT lebearbeiter, lebearbdatum INTO :frmDiskEin.dfBearb, :frmDiskEin.dfBearbDatum
					// FROM le WHERE learztnr IN (:frmDiskEin.dfTAL, :frmDiskEin.dfTAA)
					// and lestatus=\'Eing.\' ')
					// If dfBearb != ''
					// Call SqlImmed('DELETE FROM lep WHERE lepbearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
					// AND leparztnr IN (:frmDiskEin.dfTAL, :frmDiskEin.dfTAA) ')
					// Call SqlImmed('DELETE FROM le WHERE lebearbeiter = :frmDiskEin.dfBearb AND lebearbdatum = :frmDiskEin.dfBearbDatum
					// AND learztnr IN (:frmDiskEin.dfTAL, :frmDiskEin.dfTAA) AND lestatus=\'Eing.\' ')
				}
			}
			Sal.WaitCursor(false);
			this.DestroyWindow();
			// 14.03.19 Ä1829
			// If strParent = 'D'
			// Call frmDiskAbr.PalHoleTabelle(  )
			#endregion
		}
		
		/// <summary>
		/// pb1 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pb1_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pb1_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pb1_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.strDateiPfad2 = this.strDateiPfad;
			this.strDateiName2 = this.strDateiName;
			this.strDateiPfad = Const.PATH_ABR;
			if (this.PalAbrDiskeinlesen()) 
			{
				if (this.strDateiPfad.ToUpper().Left(17) != Const.PATH_ABR_ALT) 
				{
					this.nStatus = Sal.FileCopy(this.strDateiPfad, Const.PATH_ABR_ALT + this.strDateiName, true);
				}
				else
				{
					this.nStatus = Sys.FILE_CopyOK;
				}
				if (this.nStatus == Sys.FILE_CopyOK) 
				{
					Sal.FileSetCurrentDirectory(Const.PATH_TVN32);
					Sal.FileSetDrive(Const.PATH_DRIVE);
					this.strDateiPfad1 = this.strDateiPfad;
					this.strDateiName1 = this.strDateiName;
					this.dfDatei2.Text = this.strDateiPfad1;

					// Windows - Format der Abr. Diskette ?
				}
				else
				{
					Sal.MessageBox("Datei konnte nicht kopiert werden !", "Fehler", (Sys.MB_Ok | Sys.MB_IconStop));
				}
				this.strDateiPfad = this.strDateiPfad2;
				this.strDateiName = this.strDateiName2;
			}
			#endregion
		}
		
		/// <summary>
		/// tblAZettel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAZettel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// On SAM_FetchRowDone
				
				// 18.09.02
				
				// If bPFarbe
				
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xFFBFBF )
				
				// Set bPFarbe = FALSE
				
				// Else
				
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xFFEFEF )
				
				// Set bPFarbe = TRUE
				
				case Sys.SAM_Create:
					this.tblAZettel_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAZettel_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblAZettel, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
			this.DestroyWindow();
			#endregion
		}
		#endregion
		
		#region tblAZettel
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblAZettelTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmDiskEin _frmDiskEin = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblAZettelTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmDiskEin frmDiskEin
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmDiskEin == null) 
					{
						_frmDiskEin = (frmDiskEin)this.FindForm();
					}
					return _frmDiskEin;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblAZettelTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblAZettelTableWindow)SalWindow.FromHandle(handle, typeof(tblAZettelTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
