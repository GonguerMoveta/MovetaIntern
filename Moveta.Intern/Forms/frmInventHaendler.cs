// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmInventHaendler : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlIK = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalNumber nColor = 0;
		public SalNumber nRow = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmInventHaendler()
		{
			// Assign global reference.
			App.frmInventHaendler = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmInventHaendler CreateWindow(Control owner)
		{
			frmInventHaendler frm = new frmInventHaendler();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmInventHaendler FromHandle(SalWindowHandle handle)
		{
			return ((frmInventHaendler)SalWindow.FromHandle(handle, typeof(frmInventHaendler)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalNewRow()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (PalSave()) 
				{
				}
				tblIVk.Populate(hSqlIK, strSelect, Sys.TBL_FillAll);
				nRow = tblIVk.InsertRow(Sys.TBL_MaxRow);
				tblIVk.SetFocusCell(nRow, tblIVk.colCode, 0, -1);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalSave()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.WaitCursor(true);
				// Call SqlConnection( hSqlLogBugUpd)
				tblIVk.KillCellEdit();
				if (tblIVk.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblIVk.FindNextRow(ref nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblIVk.SetFocusRow(nRow);

						if (this.tblIVk.colCode.Text != "") 
						{
							Int.SqlIstDa("FROM ia WHERE iacode = :frmInventHaendler.tblIVk.colCode", ref Var.bExists);
							if (Var.bExists) 
							{
								Int.SqlImmed("DELETE FROM ia WHERE iacode = :frmInventHaendler.tblIVk.colCode");
								Var.bExists = false;
							}
							if (!(Var.bExists)) 
							{
								Int.SqlImmed(@"INSERT INTO ia
( iacode, iakdnr, ian1, ian2, ias, iap, iao, ialand, iatelbest, iatelsupp, iaemail, iawertung, iaansprech )
VALUES(:frmInventHaendler.tblIVk.colCode, :frmInventHaendler.tblIVk.colKundNr,
:frmInventHaendler.tblIVk.colN1, :frmInventHaendler.tblIVk.colN2, :frmInventHaendler.tblIVk.colS, :frmInventHaendler.tblIVk.colP, :frmInventHaendler.tblIVk.colO, :frmInventHaendler.tblIVk.colLand,
:frmInventHaendler.tblIVk.colTelBest, :frmInventHaendler.tblIVk.colTelSupp, :frmInventHaendler.tblIVk.colEMail, :frmInventHaendler.tblIVk.colWertung, :frmInventHaendler.tblIVk.colAnsprech  )");
							}
						}
						tblIVk.SetRowFlags(nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
				}
				Sal.WaitCursor(false);
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmInventHaendler WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmInventHaendler_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmInventHaendler_OnSAM_Create(sender, e);
					break;
                //FC:FINAL: use SAM_Close instead of SAM_Destroy
                case Sys.SAM_Close:
					this.frmInventHaendler_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmInventHaendler_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			this.strSelect = @"SELECT iacode, iakdnr, ian1, ian2, ias, iap, iao, ialand, iatelbest, iatelsupp, iaemail, iawertung, iaansprech
INTO :frmInventHaendler.tblIVk.colCode, :frmInventHaendler.tblIVk.colKundNr,
:frmInventHaendler.tblIVk.colN1, :frmInventHaendler.tblIVk.colN2, :frmInventHaendler.tblIVk.colS, :frmInventHaendler.tblIVk.colP, :frmInventHaendler.tblIVk.colO, :frmInventHaendler.tblIVk.colLand,
:frmInventHaendler.tblIVk.colTelBest, :frmInventHaendler.tblIVk.colTelSupp, :frmInventHaendler.tblIVk.colEMail, :frmInventHaendler.tblIVk.colWertung, :frmInventHaendler.tblIVk.colAnsprech
FROM ia ORDER BY iacode";
			Int.SqlConnection(ref this.hSqlIK);
			this.tblIVk.Populate(this.hSqlIK, this.strSelect, Sys.TBL_FillAll);

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmInventHaendler_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlIK.Disconnect();
			this.PalSave();
			#endregion
		}
		
		/// <summary>
		/// tblIVk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblIVk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_EndCellTab:
					this.tblIVk_OnSAM_EndCellTab(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.tblIVk_OnWM_KEYUP(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_EndCellTab event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblIVk_OnSAM_EndCellTab(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow();
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblIVk_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow();
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeu_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbNeu_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeu_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow();
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow();
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeu, "Neue Zeile hinzuf√ºgen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbLoe WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoe_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoe_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbLoe_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoe_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblIVk.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				this.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblIVk.FindNextRow(ref this.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblIVk.SetFocusRow(this.nRow);
					Int.SqlImmed("DELETE FROM ia WHERE iacode = :frmInventHaendler.tblIVk.colCode");
				}
				this.PalSave();
				this.tblIVk.ResetTable();
				this.tblIVk.Populate(this.hSqlIK, this.strSelect, Sys.TBL_FillAll);
			}
			else
			{
				Sal.MessageBox(@"Vorher m√ºssen die zu l√∂schenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoe_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbLoe, "Schwarz markierte Zeilen l√∂schen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.DestroyWindow();
			#endregion
		}
		#endregion
		
		#region tblIVk
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblIVkTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmInventHaendler _frmInventHaendler = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblIVkTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmInventHaendler frmInventHaendler
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmInventHaendler == null) 
					{
						_frmInventHaendler = (frmInventHaendler)this.FindForm();
					}
					return _frmInventHaendler;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblIVkTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblIVkTableWindow)SalWindow.FromHandle(handle, typeof(tblIVkTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
