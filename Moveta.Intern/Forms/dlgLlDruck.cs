// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="strPBericht"></param>
	/// <param name="strPSpezial"></param>
	public partial class dlgLlDruck : SalDialogBox
	{
		#region Window Parameters
		public SalString strPBericht;
		public SalString strPSpezial;
		#endregion
		
		#region Window Variables
		public SalNumber nRet = 0;
		public SalNumber nHandle = 0;
		public SalString strFileName = "";
		public SalString strTargetFormat = "";
		public SalNumber nCount = 0;
		public SalNumber nCountRD = 0;
		public SalNumber nCountRec = 0;
		public SalNumber nCountKunden = 0;
		public SalNumber nFetch = 0;
		public SalNumber nFetch2 = 0;
		public SalSqlHandle hSqlLlDruck = SalSqlHandle.Null;
		public SalSqlHandle hSqlLlDruck2 = SalSqlHandle.Null;
		public SalSqlHandle hSqlLlRW = SalSqlHandle.Null;
		public SalBoolean bFetchEnd = false;
		public SalNumber nProjectType = 0;
		public SalString strSelect = "";
		public SalBoolean bLlPrintResetProjectState = false;
		public SalNumber nRow = 0;
		public SalNumber nCopies = 0;
		public SalString pstrLA = "";
		public SalNumber pnMwSt = 0;
		public SalNumber pnEUR = 0;
		public SalNumber pnNetto = 0;
		public SalNumber pnBrutto = 0;
		public SalNumber pnMwStEUR = 0;
		public SalNumber pnDummy = 0;
		public SalDateTime pdtAltDatum = SalDateTime.Null;
		public SalString plsMemo = "";
		public SalString plsMemo1 = "";
		public SalNumber nArztNrL = 0;
		public SalString strN1 = "";
		public SalString strN2 = "";
		public SalString strS = "";
		public SalString strO = "";
		public SalString strLand = "";
		public SalNumber ANTANZ = 0;
		public SalNumber SANZ = 0;
		public SalNumber SKATNR = 0;
		public SalNumber SUASP = 0;
		public SalNumber ASPANZ = 0;
		public SalString strEDAID = "";
		public SalNumber nPageCount = 0;
		public SalNumber nPages = 0;
		public SalBoolean bDrucken = false;
		public SalBoolean bWithBox = false;
		public SalString strMitarbeiter = "";
		public SalString strTSK = "";
		public SalNumber nTSK = 0;
		public SalNumber nMahnTage = 0;
		public SalNumber nMahnInt = 0;
		public SalDateTime dtMin = SalDateTime.Null;
		public SalDateTime dtMinScheck = SalDateTime.Null;
		public SalDateTime dtMax = SalDateTime.Null;
		public SalDateTime dtMinAlt = SalDateTime.Null;
		public SalNumber nDM = 0;
		public SalNumber nPMArzt = 0;
		public SalNumber nPMHalter = 0;
		public SalString strPMEmail = "";
		public SalBoolean nMS = false;
		public SalString strHVirtKonto = "";
		public SalNumber nMaxVirtKonto = 0;
		public SalNumber nRZOffen = 0;
		public SalNumber nRZOffen2 = 0;
		public SalDateTime dtRZDat = SalDateTime.Null;
		public SalNumber nRZZins = 0;
		public SalNumber nRZTilgung = 0;
		public SalNumber nRZfrei = 0;
		public SalBoolean bRZ = false;
		public SalString strPrn = "";
		public SalString strPort = "";
		public SalString strAltLand = "";
		public SalString strName = "";
		public SalNumber nMin = 0;
		public SalNumber nMax = 0;
		public SalString strError = "";
		public SalNumber nBufferSize = 0;
		public SalDateTime dt1 = SalDateTime.Null;
		public SalDateTime dt2 = SalDateTime.Null;
		public SalNumber nFAZins = 0;
		public SalString strMin = "";
		public SalString strMax = "";
		public SalString strOriLand = "";
		public SalString strRaZaNr = "";
		public SalDateTime dtDDErfDat = SalDateTime.Null;
		public SalNumber nPicture = 0;
		public SalString strTemp = "";
		public SalString strPLogo = "";
		public SalBoolean bArchiv = false;
		public SalString strGUID = "";
		public SalString strCustomerNumber = "";
		public SalString strCustomerNumberAlt = "";
		public SalFileHandle hUebFile = SalFileHandle.Null;
		public SalString strArztHalter = "";
		public SalString strIBAN = "";
		public SalString strAllUsersProfile = "";
		public SalSqlHandle hSqlLogo = SalSqlHandle.Null;
		public SalString lsBildAlt = "";
		public SalString strBildDatei = "";
		public SalDateTime dtDummy = SalDateTime.Null;
		public SalString strSVTi = "";
		public SalString strSVN1 = "";
		public SalString strSVN2 = "";
		public SalString strSVS = "";
		public SalString strSVO = "";
		public SalString strSVLand = "";
		public SalNumber nPProzNr = 0;
		public SalString strPProzNr = "";
		public SalNumber nLenAdd1 = 0;
		public SalNumber nLenAdd2 = 0;
		public SalString strRRUser = "";
		public SalDateTime dtRRDatum = SalDateTime.Null;
		public SalDateTime dtRRErlDat = SalDateTime.Null;
		public SalNumber nRRMin = 0;
		public SalNumber nRRJahr = 0;
		public SalString strRRDummy = "";
		public SalNumber nDBArztNr = 0;
		public SalNumber nPNArztNr = 0;
		public SalString strPNCN = "";
		public SalString strPNPraxis = "";
		public SalString strPNProgVer = "";
		public SalDateTime dtPNLetztDat = SalDateTime.Null;
		public SalString strPNGUID = "";
		public SalNumber nKorr = 0;
		public SalNumber nEWAabEUR = 0;
		public SalNumber nEWAVariante = 0;
		public SalDateTime dtEWAAbDatum = SalDateTime.Null;
		public SalNumber nEWAGeb = 0;
		public SalNumber nArztNr2 = 0;
		public SalNumber nLLMajor = 0;
		public SalNumber nLLMinor = 0;
		public SalNumber nRPMwSt = 0;
		public SalNumber nRPDM = 0;
		public SalNumber nRPDMZahl = 0;
		public SalNumber nAlter = 0;
		public SalNumber nAnzahl = 0;
		public SalString strGeschlecht = "";
		public SalString strZei = "";
		public SalNumber nArztNr = 0;
		public SalNumber nSoll = 0;
		public SalNumber nHaben = 0;
		public SalNumber nMwSt = 0;
		public SalDateTime dtErfDat = SalDateTime.Null;
		public SalString strAName1 = "";
		public SalString strBuchText = "";
		public SalNumber nRabattSum = 0;
		public SalBoolean bePost = false;
		public SalNumber nePostArztNr = 0;
		public SalString strePostFileName = "";
		public SalNumber nStatAnz = 0;
		public SalNumber nStatUms = 0;
		public SalString strGirocode = "";
		public SalDateTime dtReferenz = SalDateTime.Null;
		public SalBoolean bVorschalt = false;
		public SalNumber nSumme = 0;
		public SalNumber nVorschussDM = 0;
		public SalDateTime dtVorschussDat = SalDateTime.Null;
		public SalNumber nVorschussRueckDM = 0;
		public SalDateTime dtVorschussRueckDat = SalDateTime.Null;
		public SalString strVorschussRueckGrund = "";
		public SalNumber nRechNr = 0;
		public SalNumber nHalterNr = 0;
		public SalNumber nAnzLLPrint = 0;
		public SalNumber nRechNrAlt = 0;
		public SalString strPfadAppData = "";
		public SalNumber nRecordNo = 0;
		public SalNumber nFormatAlt = 0;
		public SalString strPMMail = "";
		public SalNumber nPfueGK = 0;
		public SalString strReset = "";
		public SalNumber nAnzahlL = 0;
		public SalNumber nAnzahlA = 0;
		public SalNumber nAnzahlLSperr = 0;
		public SalNumber nAnzahlASperr = 0;
		public SalDateTime dtOPDatum = SalDateTime.Null;
		public SalSqlHandle hSqlPRID = SalSqlHandle.Null;
		public SalNumber nPRIDArzt = 0;
		public SalNumber nPRIDHalter = 0;
		public SalString strPRIDDoku = "";
		public SalString strVeN1 = "";
		public SalString strVeN2 = "";
		public SalString strVeStr = "";
		public SalString strVeO = "";
		public SalString strVeLand = "";
		public SalString strAHR = "";
		public SalBoolean bExtraDruck = false;
		public SalString strHVN = "";
		public SalString strHNN = "";
		//FC:FINAL:
		public SalDateTime dtMahnDate = SalDateTime.Null;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public dlgLlDruck(SalString strPBericht, SalString strPSpezial)
		{
			// Assign global reference.
			App.dlgLlDruck = this;
			// Window Parameters initialization.
			this.strPBericht = strPBericht;
			this.strPSpezial = strPSpezial;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the modal dialog.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static SalNumber ModalDialog(Control owner, SalString strPBericht, SalString strPSpezial)
		{
			dlgLlDruck dlg = new dlgLlDruck(strPBericht, strPSpezial);
			SalNumber ret = dlg.ShowDialog(owner);
			return ret;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static dlgLlDruck FromHandle(SalWindowHandle handle)
		{
			return ((dlgLlDruck)SalWindow.FromHandle(handle, typeof(dlgLlDruck)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <param name="bAsField"></param>
		/// <returns></returns>
		public SalNumber PalDefineCurrentRecord(SalBoolean bAsField)
		{
			#region Local Variables
			SqlLocals.PalDefineCurrentRecordLocals locals = new SqlLocals.PalDefineCurrentRecordLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.bAsField = bAsField;

				if (!(locals.bAsField)) 
				{
					App.frmMain.axLL.LlDefineVariableExt("LayoutName", strFileName, Const.LL_TEXT, ref locals.nRet);
					App.frmMain.axLL.LlDefineVariableExt("Benutzer.Name", Var.strBNName, Const.LL_TEXT, ref locals.nRet);
					App.frmMain.axLL.LlDefineVariableExt("Benutzer.Zeichen", Var.strBNZei, Const.LL_TEXT, ref locals.nRet);
					App.frmMain.axLL.LlDefineVariableExt("Benutzer.Abteilung", Var.strBNAbtlg, Const.LL_TEXT, ref locals.nRet);
					App.frmMain.axLL.LlDefineVariableExt("Benutzer.Durchwahl", Var.strBNTel, Const.LL_TEXT, ref locals.nRet);
					App.frmMain.axLL.LlDefineVariableExt("Benutzer.EMail", Var.strBNEMail, Const.LL_TEXT, ref locals.nRet);
					if (strPBericht == "Brief Fiskaly.crd")  // 19.08.20
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name", "BriefVariabel.crd", Const.LL_TEXT, ref locals.nRet);
					}
					else if (strPBericht == "TSK-Beihilfen-Erinnerung.lst") 
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name", "BriefVariabel.crd", Const.LL_TEXT, ref locals.nRet);
					}
					else if (strPBericht == "TSK-Waisen Rückzahlung.lst") 
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name", "BriefVariabel.crd", Const.LL_TEXT, ref locals.nRet);
					}
                    else if (strPBericht.Left(8) == "Brief_OP")  // 04.03.24 F5076 ###
                    {
                        App.frmMain.axLL.LlDefineVariableExt("Bericht.Name", "BriefVariabel.crd", Const.LL_TEXT, ref locals.nRet);
                    }
                    else
					{
						// 14.01.08 Ä203
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name", strPBericht, Const.LL_TEXT, ref locals.nRet);
					}
					// Call axLL.LlDefineVariableExt( 'Bericht.Exemplar', SalNumberToStrX(nPageCount, 0), LL_NUMERIC, nRet )
					// 15.10.10
					App.frmMain.axLL.LlDefineVariableExt("Bericht.ProgVer", Var.strProgVer, Const.LL_TEXT, ref locals.nRet);
					// 02.01.12
					App.frmMain.axLL.LlDefineVariableExt("RTFUmbruch", "{\\rtf1{\\page}}", Const.LL_RTF, ref locals.nRet);
					// 21.06.13 Ä902
					// Set strCustomerNumber = 'X'
					// 03.09.18
					if (bePost) 
					{
						App.frmMain.axLL.LlDefineVariableExt("ePost", "1", Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("ePost", "0", Const.LL_NUMERIC, ref locals.nRet);
					}
				}
				else
				{
					// Call axLL.LlDefineFieldExt( 'Bericht-Exemplar', SalNumberToStrX(nPageCount, 0), LL_NUMERIC, nRet )
				}
				// 19.02.08
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNr', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.HalterNr', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.RechnungNr', '0', LL_NUMERIC, nRet )
				// 30.03.10

				// 28.04.10 OTÄ420
				// 01.11.13 If strPBericht = 'Rechnungen.lst' or strPBericht = 'Überweisung A4.lst' or strPBericht = 'Rechnung A4.lst' or strPBericht = 'Überweisung AT.lst' or strPBericht = 'Vorab-Rechnung.lst'
				// 21.08.14 F2121 rausgenommen
				// If strPBericht = 'Rechnungen.lst' or strPBericht = 'Überweisung A4.lst' or strPBericht = 'Rechnung A4.lst' or strPBericht = 'Überweisung AT.lst' or strPBericht = 'Vorab-Rechnung.lst'
				// Else
				if (App.frmMain.strTALand != "") 
				{
					if (App.frmMain.strTALand.Length <= 2) 
					{
						if (App.frmMain.strTALand != strAltLand) 
						{
							strAltLand = App.frmMain.strTALand;
						}
						App.frmMain.strTALand = Int.PalPruefeLC(App.frmMain.strTALand, 0);
					}
				}
				// 05.08.09 OTÄ298 PalHolePMArzt
				// 08.09.23 F5039
				bExtraDruck = false;

				if (strPBericht == "Mitglieder.lst" || strPBericht == "KA-Zu-abgänge.lst") 
				{
					// Call PalReport(frmMain,'TALISTE.QRP',
					// ':frmMain.nTANr,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt,
					// :frmMain.strBank, :frmMain.strBLZ, :frmMain.strKonto, :frmMain.dtEintritt, :frmMain.strZust',
					// 'ArztNr, AName1, AName2, AStr, AOrt,
					// Bank, BLZ, Konto, Eintritt, Zust',nErr)

					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("ArztNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 18.01.17 + anr2
						App.frmMain.axLL.LlDefineFieldExt("ArztNr2", Sal.NumberToStrX(App.frmMain.nTANr2, 0), Const.LL_NUMERIC, ref locals.nRet);

						App.frmMain.axLL.LlDefineFieldExt("Adresse.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Adresse.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Adresse.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Adresse.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Adresse.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Eintritt", Int.PalDateToStrJJJJMMTT(App.frmMain.dtEintritt), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						if (strPBericht == "KA-Zu-abgänge.lst") 
						{
							App.frmMain.axLL.LlDefineFieldExt("Gestorben", Int.PalDateToStrJJJJMMTT(dt1), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("Austritt", Int.PalDateToStrJJJJMMTT(dt2), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineFieldExt("Bankverbindung.Name", App.frmMain.strBank, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("Bankverbindung.BLZ", App.frmMain.strBLZ, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("Bankverbindung.Konto", App.frmMain.strKonto, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("Zuständig", App.frmMain.strZust, Const.LL_TEXT, ref locals.nRet);
							// 29.07.14 Ä1089
							App.frmMain.axLL.LlDefineFieldExt("Kommunikation.TelPraxis", App.frmMain.strTATelPraxis, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("Kommunikation.TelHandy", App.frmMain.strTATelHandy, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("Kommunikation.TelPrivat", App.frmMain.strTATelPrivat, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("Kommunikation.TelFax", App.frmMain.strTAFax, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("Kommunikation.EMail", App.frmMain.strTAEMail, Const.LL_TEXT, ref locals.nRet);
						}
					}
					else
					{
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						if (strPBericht == "KA-Zu-abgänge.lst") 
						{
							App.frmMain.axLL.LlDefineVariableExt("von", Int.PalDateToStrJJJJMMTT(App.frmMain.dtDatVon), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("bis", Int.PalDateToStrJJJJMMTT(App.frmMain.dtDatBis), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						}
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}

				}
				else if (strPBericht == "Mitglieder.lbl" || strPBericht == "SerienbriefEti.lbl")  // 03.01.13
				{
					// Call PalReport(frmMain,'ETITA.QRP',
					// ':frmMain.nTANr,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt',
					// 'ArztNr, AName1, AName2, AStr, AOrt',nErr)

					if (!(locals.bAsField)) 
					{
						App.frmMain.axLL.LlDefineVariableExt("ArztNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Halter.lbl" || strPBericht == "Halter14.lbl") 
				{
					// Call PalReport(frmMain,'ETITH.QRP',
					// ':frmMain.nTANr,:frmMain.nTHNr,:frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand',
					// 'ArztNr, HalterNr, HName1, HName2, HStr, HOrt, HLand',nErr)

					if (!(locals.bAsField)) 
					{
						App.frmMain.axLL.LlDefineVariableExt("ArztNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						// 19.11.13 Ä902
						strCustomerNumber = Int.PalStrNum0(App.frmMain.nTANrL, 4, 0);
					}
				}
				else if (strPBericht == "Halter.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("ArztNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Adresse.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Adresse.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Adresse.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Adresse.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Adresse.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						// 10.03.14 Ä1006
						App.frmMain.axLL.LlDefineFieldExt("BEZ.Signaturdatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtTHBEZSignDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("BEZ.IBAN", App.frmMain.strTHBEZIBAN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("BEZ.BIC", App.frmMain.strTHBEZBIC, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmMain.nTANr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(App.frmMain.nTANrL, 4, 0);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 10.03.14 Ä1006
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Spezial", strPSpezial, Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Kontoauszug.lst" || strPBericht == "Schuldsaldoermittlung.lst" || strPBericht == "KontoauszugNF.lst" || strPBericht == "Zahlungsliste.lst" || strPBericht == "Pharmaliste.lst")  // 09.12.21 Ä1984		! 21.11.11 Ä659
				{
					if (locals.bAsField) 
					{
						// Call PalReport( frmMain,'KONTOAUS.QRP',
						// ':frmMain.nTANr,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt,
						// :frmMain.nTHNr,:frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand,
						// :frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nRechNr,
						// :frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins,
						// :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll, :frmMain.nDMHaben,  :frmMain.nSoll, :frmMain.nHaben,
						// :frmMain.strLA, :frmMain.nProz, :frmMain.nDMUeberw, :frmMain.nDMmitVorstV,
						// :frmMain.nDMmitVorstS, :frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
						// :frmMain.nVorVSt, :frmMain.nVorMwSt, :frmMain.nAussenst,
						// :frmMain.nSuDM16L, :frmMain.nSuDM15L, :frmMain.nSuDM7L, :frmMain.nSuDM0L, :frmMain.nSuDMaL,
						// :frmMain.nSuSt16L, :frmMain.nSuSt15L, :frmMain.nSuSt7L, :frmMain.nSuSt0L, :frmMain.nSuStaL,
						// :frmMain.nSuDM16A, :frmMain.nSuDM15A, :frmMain.nSuDM7A, :frmMain.nSuDM0A, :frmMain.nSuDMaA,
						// :frmMain.nSuSt16A, :frmMain.nSuSt15A, :frmMain.nSuSt7A, :frmMain.nSuSt0A, :frmMain.nSuStaA,
						// :frmMain.nSuDM16MB, :frmMain.nSuDM15MB, :frmMain.nSuDM7MB, :frmMain.nSuDM0MB, :frmMain.nSuDMaMB,
						// :frmMain.nSuSt16MB, :frmMain.nSuSt15MB, :frmMain.nSuSt7MB, :frmMain.nSuSt0MB, :frmMain.nSuStaMB,
						// :frmMain.nSuDMRg, :frmMain.nSuDMMg, :frmMain.nSuDMa, :frmMain.nSuDMaSt, :frmMain.nSuVSt, :frmMain.nSuStorno,
						// , :frmMain.dtCurrentDate',
						// 'ArztNr, AName1, AName2, AStr, AOrt,
						// HalterNr, HName1, HName2, HStr, HOrt, HLand,
						// BuchDat, BuchText, RechNr,
						// DMRech, DMPorto, DMMahn, DMZins, DMMwSt, DMVorst, DMSoll, DMHaben, Soll, Haben,
						// LA, Proz, DMUeberw, DMmitVorstV, DMmitVorstS, VorRech, VorSoll, VorHaben, VorVSt, VorMwSt, Auss,
						// SuDM16L, SuDM15L, SuDM7L, SuDM0L, SuDMaL,
						// SuSt16L, SuSt15L, SuSt7L, SuSt0L, SuStaL,
						// SuDM16A, SuDM15A, SuDM7A, SuDM0A, SuDMaA,
						// SuSt16A, SuSt15A, SuSt7A, SuSt0A, SuStaA,
						// SuDM16MB, SuDM15MB, SuDM7MB, SuDM0MB, SuDMaMB,
						// SuSt16MB, SuSt15MB, SuSt7MB, SuSt0MB, SuStaMB,
						// SuDMRg, SuDMMg, SuDMa, SuDMaSt, SuVSt, SuStorno, Druckdatum',
						// nErr)

						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						// 15.10.13 Ä978 + USt-ID
						App.frmMain.axLL.LlDefineFieldExt("Halter.USt-ID", App.frmMain.strTHUStID, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Text", App.frmMain.strBuchText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("RechNr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_TEXT, ref locals.nRet);
						// 14.01.15 F2236
						if (App.frmMain.nReverse == SalNumber.Null) 
						{
							App.frmMain.nReverse = 0;
						}

						App.frmMain.axLL.LlDefineFieldExt("UStReverse", Sal.NumberToStrX(App.frmMain.nReverse, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 02.12.14 Ä104 + reverseversion
						if (App.frmMain.nReverseVersion == SalNumber.Null) 
						{
							App.frmMain.nReverseVersion = 0;
						}
						App.frmMain.axLL.LlDefineFieldExt("UStReverseVersion", Sal.NumberToStrX(App.frmMain.nReverseVersion, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.12.11
						// If frmMain.dtBuchDat < 2002-01-01 And strPBericht = 'Schuldsaldoermittlung.lst'
						// Set frmMain.nDMRech = frmMain.nDMRech / 1.95583
						// Set frmMain.nDMPorto = frmMain.nDMPorto / 1.95583
						// Set frmMain.nDMMahn = frmMain.nDMMahn / 1.95583
						// Set frmMain.nDMZins = frmMain.nDMZins / 1.95583
						// Set frmMain.nDMMwSt = frmMain.nDMMwSt / 1.95583
						// Set frmMain.nDMVorsch = frmMain.nDMVorsch / 1.95583
						// Set frmMain.nDMSoll = frmMain.nDMSoll / 1.95583
						// Set frmMain.nDMHaben = frmMain.nDMHaben / 1.95583
						// Set frmMain.nSoll = frmMain.nSoll / 1.95583
						// Set frmMain.nHaben = frmMain.nHaben / 1.95583

						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURRechng", Sal.NumberToStrX(App.frmMain.nDMRech, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURPorto", Sal.NumberToStrX(App.frmMain.nDMPorto, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURMahng", Sal.NumberToStrX(App.frmMain.nDMMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURZinsen", Sal.NumberToStrX(App.frmMain.nDMZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURMwSt", Sal.NumberToStrX(App.frmMain.nDMMwSt, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURVorSt", Sal.NumberToStrX(App.frmMain.nDMVorst, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURSoll", Sal.NumberToStrX(App.frmMain.nDMSoll, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURHaben", Sal.NumberToStrX(App.frmMain.nDMHaben, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Soll", Sal.NumberToStrX(App.frmMain.nSoll, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Haben", Sal.NumberToStrX(App.frmMain.nHaben, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.LA", App.frmMain.strLA, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Proz", Sal.NumberToStrX(App.frmMain.nProz, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.SatzArt", Sal.NumberToStrX(App.frmMain.nSA, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EURÜberw", Sal.NumberToStrX(App.frmMain.nDMUeberw, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EURmit VorSt", Sal.NumberToStrX(App.frmMain.nDMmitVorstS, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 22.08.22 Ä2015 + tkdmmahn
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURMGZi", Sal.NumberToStrX(App.frmMain.nMahnEUR, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 04.10.23 Ä2134 + tkfall
						if (App.frmMain.nTKFall == SalNumber.Null) 
						{
							App.frmMain.nTKFall = 0;
						}
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Fall", Sal.NumberToStrX(App.frmMain.nTKFall, 0), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						nArztNrL = Int.PalCheckLarztnr(App.frmMain.nTANr);
						// 22.02.12 F1212 auskommentiert, da in Fields bereits enthalten
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						if (strPSpezial.Scan("ED") != -1) 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "-" + Int.PalDateToStrJJJJMMTThhmmss(dtDDErfDat).Right(8), Const.LL_NUMERIC, ref locals.nRet);
							// 21.06.13 Ä902
							strCustomerNumber = Int.PalDateToStrJJJJMMTThhmmss(dtDDErfDat).Right(8);
							// 08.09.23 F5039
							bExtraDruck = true;
							// 19.05.22 Ä2019
							strArztHalter = Int.PalStrNum0(nArztNrL, 4, 0);
							// 24.10.18 F3145 + ddemail
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", App.frmMain.strDDEMail, Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
							// 21.06.13 Ä902
							strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0);
							// 06.05.13 Ä943
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);
						}
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Vortrag.Rechng", Sal.NumberToStrX(App.frmMain.nVorRech, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Vortrag.Soll", Sal.NumberToStrX(App.frmMain.nVorSoll, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Vortrag.Haben", Sal.NumberToStrX(App.frmMain.nVorHaben, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Vortrag.VorSt", Sal.NumberToStrX(App.frmMain.nVorVSt, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Vortrag.MwSt", Sal.NumberToStrX(App.frmMain.nVorMwSt, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Vortrag.Aussenstände", Sal.NumberToStrX(App.frmMain.nAussenst, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Druckdatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtCurrentDate), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 22.08.22 Ä2015 + tkdmmahn
						App.frmMain.axLL.LlDefineVariableExt("Vortrag.MGZi", Sal.NumberToStrX(App.frmMain.nVorMahn, 2), Const.LL_NUMERIC, ref locals.nRet);

						// Call axLL.LlDefineVariableExt( 'Summen.SuDM19L', SalNumberToStrX(frmMain.nSuDM19L,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuDM16L', SalNumberToStrX(frmMain.nSuDM16L,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuDM15L', SalNumberToStrX(frmMain.nSuDM15L,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuDM7L', SalNumberToStrX(frmMain.nSuDM7L,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuDM0L', SalNumberToStrX(frmMain.nSuDM0L,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuDMaL', SalNumberToStrX(frmMain.nSuDMaL,2), LL_NUMERIC, nRet )

						// Call axLL.LlDefineVariableExt( 'Summen.SuSt19L', SalNumberToStrX(frmMain.nSuSt19L,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuSt16L', SalNumberToStrX(frmMain.nSuSt16L,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuSt15L', SalNumberToStrX(frmMain.nSuSt15L,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuSt7L', SalNumberToStrX(frmMain.nSuSt7L,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuSt0L', SalNumberToStrX(frmMain.nSuSt0L,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuStaL', SalNumberToStrX(frmMain.nSuStaL,2), LL_NUMERIC, nRet )

						// Call axLL.LlDefineVariableExt( 'Summen.SuDM19A', SalNumberToStrX(frmMain.nSuDM19A,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuDM16A', SalNumberToStrX(frmMain.nSuDM16A,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuDM15A', SalNumberToStrX(frmMain.nSuDM15A,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuDM7A', SalNumberToStrX(frmMain.nSuDM7A,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuDM0A', SalNumberToStrX(frmMain.nSuDM0A,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuDMaA', SalNumberToStrX(frmMain.nSuDMaA,2), LL_NUMERIC, nRet )

						// Call axLL.LlDefineVariableExt( 'Summen.SuSt19A', SalNumberToStrX(frmMain.nSuSt19A,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuSt16A', SalNumberToStrX(frmMain.nSuSt16A,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuSt15A', SalNumberToStrX(frmMain.nSuSt15A,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuSt7A', SalNumberToStrX(frmMain.nSuSt7A,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuSt0A', SalNumberToStrX(frmMain.nSuSt0A,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuStaA', SalNumberToStrX(frmMain.nSuStaA,2), LL_NUMERIC, nRet )

						// Call axLL.LlDefineVariableExt( 'Summen.SuDM19MB', SalNumberToStrX(frmMain.nSuDM19MB,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuDM16MB', SalNumberToStrX(frmMain.nSuDM16MB,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuDM15MB', SalNumberToStrX(frmMain.nSuDM15MB,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuDM7MB', SalNumberToStrX(frmMain.nSuDM7MB,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuDM0MB', SalNumberToStrX(frmMain.nSuDM0MB,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuDMaMB', SalNumberToStrX(frmMain.nSuDMaMB,2), LL_NUMERIC, nRet )

						// Call axLL.LlDefineVariableExt( 'Summen.SuSt19MB', SalNumberToStrX(frmMain.nSuSt19MB,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuSt16MB', SalNumberToStrX(frmMain.nSuSt16MB,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuSt15MB', SalNumberToStrX(frmMain.nSuSt15MB,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuSt7MB', SalNumberToStrX(frmMain.nSuSt7MB,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuSt0MB', SalNumberToStrX(frmMain.nSuSt0MB,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuStaMB', SalNumberToStrX(frmMain.nSuStaMB,2), LL_NUMERIC, nRet )

						// Call axLL.LlDefineVariableExt( 'Summen.SuDMRg', SalNumberToStrX(frmMain.nSuDMRg,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuDMMg', SalNumberToStrX(frmMain.nSuDMMg,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuDMa', SalNumberToStrX(frmMain.nSuDMa,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuDMaSt', SalNumberToStrX(frmMain.nSuDMaSt,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuVSt', SalNumberToStrX(frmMain.nSuVSt,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Summen.SuStorno', SalNumberToStrX(frmMain.nSuStorno,2), LL_NUMERIC, nRet )
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Kontomitteilung.lst") 
				{
					if (locals.bAsField) 
					{

						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Text", App.frmMain.strBuchText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("RechNr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURRechng", Sal.NumberToStrX(App.frmMain.nDMRech, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURPorto", Sal.NumberToStrX(App.frmMain.nDMPorto, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURMahng", Sal.NumberToStrX(App.frmMain.nDMMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURZinsen", Sal.NumberToStrX(App.frmMain.nDMZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURMwSt", Sal.NumberToStrX(App.frmMain.nDMMwSt, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURVorSt", Sal.NumberToStrX(App.frmMain.nDMVorst, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURSoll", Sal.NumberToStrX(App.frmMain.nDMSoll, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURHaben", (App.frmMain.nDMZaL + App.frmMain.nDMZaA).ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Soll", Sal.NumberToStrX(App.frmMain.nSoll, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Haben", Sal.NumberToStrX(App.frmMain.nHaben, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.LA", App.frmMain.strLA, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Proz", Sal.NumberToStrX(App.frmMain.nProz, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.SatzArt", Sal.NumberToStrX(App.frmMain.nSA, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EURÜberw", Sal.NumberToStrX(App.frmMain.nDMUeberw, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EURmit VorSt", Sal.NumberToStrX(App.frmMain.nDMmitVorstS, 2), Const.LL_NUMERIC, ref locals.nRet);
						// If dtMin != DATETIME_Null And dtMax != DATETIME_Null
						// If dtMin != dtMax
						// Call axLL.LlDefineFieldExt( 'MinMax', 'Maßnahmen vom ' || PalDateToStrDE(dtMin) || ' bis ' || PalDateToStrDE(dtMax), LL_TEXT, nRet )
						// Else
						// Call axLL.LlDefineFieldExt( 'MinMax', 'Maßnahme vom ' || PalDateToStrDE(dtMin), LL_TEXT, nRet )
						// Else
						// Call axLL.LlDefineFieldExt( 'MinMax', '', LL_TEXT, nRet )
						App.frmMain.axLL.LlDefineFieldExt("Details", plsMemo, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						nArztNrL = Int.PalCheckLarztnr(App.frmMain.nTANr);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Druckdatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtCurrentDate), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Vortrag.Rechng", Sal.NumberToStrX(App.frmMain.nVorRech, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Vortrag.Soll", Sal.NumberToStrX(App.frmMain.nVorSoll, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Vortrag.Haben", Sal.NumberToStrX(App.frmMain.nVorHaben, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Vortrag.VorSt", Sal.NumberToStrX(App.frmMain.nVorVSt, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Vortrag.MwSt", Sal.NumberToStrX(App.frmMain.nVorMwSt, 2), Const.LL_NUMERIC, ref locals.nRet);

						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "TVN-Rechnungen.lst") 
				{
					// Set strSelect ='SELECT tkaarztnr, aname1, aname2, astr, aort, tkabeldat, tkabuchtext, tkadmporto, tkatavst, (tkarechdm-tkatavst), tkaprozmwst, tksoll, tkadruckdatum
					// 			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt,
					// 			:frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nDMPorto, :frmMain.nDMVorst, :frmMain.nDMRech, :frmMain.nProz, :frmMain.nSoll, :dtCurrentDate
					// 			FROM tka, a
					// 			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
					// 			AND tkadruckdatum = :frmMain.dtDatVM
					// 			AND tksoll<>0 AND tkabuchtext not like :frmMain.strLike
					// 			AND tkaarztnr = aarztnr
					// 			ORDER BY tkaarztnr, tkabeldat'
					if (locals.bAsField) 
					{

						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Text", App.frmMain.strBuchText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURNetto", Sal.NumberToStrX(App.frmMain.nDMRech, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURPorto", Sal.NumberToStrX(App.frmMain.nDMPorto, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURMwSt", Sal.NumberToStrX(App.frmMain.nDMVorst, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURSoll", Sal.NumberToStrX(App.frmMain.nDMSoll, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURHaben", Sal.NumberToStrX(App.frmMain.nDMHaben, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Soll", Sal.NumberToStrX(App.frmMain.nSoll, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.LA", App.frmMain.strLA, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Proz", Sal.NumberToStrX(App.frmMain.nProz, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						nArztNrL = Int.PalCheckLarztnr(App.frmMain.nTANr);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strLand, Const.LL_TEXT, ref locals.nRet);
						if (strPSpezial == "VormonateED" || strPSpezial == "ED") 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "-" + Int.PalDateToStrJJJJMMTThhmmss(dtDDErfDat).Right(8), Const.LL_NUMERIC, ref locals.nRet);
							// 21.06.13 Ä902
							strCustomerNumber = Int.PalDateToStrJJJJMMTThhmmss(dtDDErfDat).Right(8);
							// 19.05.22 Ä2019
							strArztHalter = Int.PalStrNum0(nArztNrL, 4, 0);
							// 08.09.23 F5039
							bExtraDruck = true;

							App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
							// 24.10.18 F3145 + ddemail
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", App.frmMain.strDDEMail, Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
							// 21.06.13 Ä902
							strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0);

							App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
							// 06.05.13 Ä943
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);
						}
						App.frmMain.axLL.LlDefineVariableExt("Steuernummer", App.frmMain.strTAUStID, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("UStID", App.frmMain.strTAUStID2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("DruckDatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtCurrentDate), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "zus.Meldung.lst") 
				{
					if (locals.bAsField) 
					{

						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.LandISO", this.strOriLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.UStID", App.frmMain.strTAUStID, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.UStID2", App.frmMain.strTAUStID2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Soll", Sal.NumberToStrX(App.frmMain.nSoll, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						nArztNrL = Int.PalCheckLarztnr(App.frmMain.nTANr);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Steuernummer", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("DruckDatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtCurrentDate), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "AAB.lst" || strPBericht == "Bestandsbuch.lst") 
				{
					if (locals.bAsField) 
					{
						// Call SalReportPrint(frmDiskEin, 'AAB.QRP',
						// ':frmDiskEin.strTAN1, :frmDiskEin.strTAN2, :frmDiskEin.strTAStr,
						// :frmDiskEin.strTAOrt,
						// :frmDiskEin.strTHKenn, :frmDiskEin.strTHN1, :frmDiskEin.strTHN2, :frmDiskEin.strTHStr, :frmDiskEin.strTHPlz,
						// :frmDiskEin.strTHOrt,
						// :frmDiskEin.dtRepDat,
						// :frmDiskEin.strRepRechBez,
						// :frmDiskEin.strRepAnzA, :frmDiskEin.strRepAnzK, :frmDiskEin.strRepCharge, :frmDiskEin.nRepWartezeit,
						// :frmDiskEin.nRepWartemilch,
						// :frmDiskEin.strRepDosierung, :frmDiskEin.strRepDauer,
						// :frmDiskEin.strRepAABIdent, :frmDiskEin.strRepAABArt, :frmDiskEin.strRepAABDiagnose,
						// :frmDiskEin.strRepAABWH, :frmDiskEin.strRepAABOrt, :frmDiskEin.strRepAABPreNr,
						// :frmDiskEin.strRepAABVerabreichung',
						// 'Z1, Z2, Z3, Z4,
						// Kenn1, N1, N2, Str, PLZ, Ort,
						// Dat,
						// RechBez, AnzA, AnzK, Charge, Wartezeit, Wartemilch,
						// Dosierung, Dauer,
						// AABIdent, AABArt, AABDiagnose, AABWH, AABOrt, AABNr, AABVerabreichung' ,
						// 1, RPT_PrintAll,1 ,1 , nErr)

						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmDiskEin.dtRepDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Bezeichnung", App.frmDiskEin.strRepRechBez, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("AnzahlA", App.frmDiskEin.strRepAnzA, Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("AnzahlK", App.frmDiskEin.strRepAnzK, Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Charge", App.frmDiskEin.strRepCharge, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Wartezeit.Fleisch", Sal.NumberToStrX(App.frmDiskEin.nRepWartezeit, 1), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Wartezeit.Milch", Sal.NumberToStrX(App.frmDiskEin.nRepWartemilch, 1), Const.LL_NUMERIC, ref locals.nRet);
						// 19.12.16 Ä1229
						App.frmMain.axLL.LlDefineFieldExt("Wartezeit.Hinweis", App.frmDiskEin.lsWZHinweis, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineFieldExt("Dosierung", App.frmDiskEin.strRepDosierung, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Dauer", App.frmDiskEin.strRepDauer, Const.LL_TEXT, ref locals.nRet);
						// 06.09.11 Ä581 (Pegasus)
						App.frmMain.axLL.LlDefineFieldExt("Zeit", App.frmDiskEin.strRepAABZeit, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineFieldExt("Dauer", App.frmDiskEin.strRepDauer, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Identitäten", App.frmDiskEin.strRepAABIdent, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Art", App.frmDiskEin.strRepAABArt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Diagnose", App.frmDiskEin.strRepAABDiagnose, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Wiederholung", App.frmDiskEin.strRepAABWH, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ort", App.frmDiskEin.strRepAABOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Nr", App.frmDiskEin.strRepAABPreNr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Verabreichung", App.frmDiskEin.strRepAABVerabreichung, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Kennung", App.frmDiskEin.strTHKenn, Const.LL_TEXT, ref locals.nRet);
						// 13.03.07 Ä92
						App.frmMain.axLL.LlDefineFieldExt("TAName", App.frmDiskEin.strTAName, Const.LL_TEXT, ref locals.nRet);
						// 30.10.14 Ä1086
						App.frmMain.axLL.LlDefineFieldExt("Wirktage", Sal.NumberToStrX(App.frmDiskEin.nHITWirkTage, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Nutzungsart", App.frmDiskEin.strNutzungsart, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("VVVONr", App.frmDiskEin.strVVVONr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("ZulassungNr", App.frmDiskEin.strZulassung, Const.LL_TEXT, ref locals.nRet);
						// 18.11.14 Ä1051 + AABOriNr
						App.frmMain.axLL.LlDefineFieldExt("AABOriNr", App.frmDiskEin.strAABOriNr, Const.LL_TEXT, ref locals.nRet);
						// Set frmDiskEin.nRepGewicht = PalValNum(SalStrMidX(frmDiskEin.strLine,840+nDummy,9))
						// Set frmDiskEin.dtRepUntersDatum = SalStrToDate(
						// SalStrMidX(frmDiskEin.strLine, 849+nDummy, 2)||'.'||SalStrMidX(frmDiskEin.strLine, 851+nDummy, 2)||'.'||SalStrMidX(frmDiskEin.strLine, 853+nDummy, 2))
						// Set frmDiskEin.nRepHITBehTage = PalValNum(SalStrMidX(frmDiskEin.strLine,855+nDummy,10))
						App.frmMain.axLL.LlDefineFieldExt("Gewicht", Sal.NumberToStrX(App.frmDiskEin.nRepGewicht, 3), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("UntersDatum", Int.PalDateToStrJJJJMMTT(App.frmDiskEin.dtRepUntersDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("BehTage", Sal.NumberToStrX(App.frmDiskEin.nRepHITBehTage, 3), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("VerfallsDatum", Int.PalDateToStrJJJJMMTT(App.frmDiskEin.dtRepVerfallsdatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 08.03.22 Ä2005
						App.frmMain.axLL.LlDefineFieldExt("Wirkstoffe", App.frmDiskEin.lsWirkstoffe, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Warnhinweise", App.frmDiskEin.lsWarnhinweise, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("UPM", App.frmDiskEin.strUPM, Const.LL_TEXT, ref locals.nRet);

						// 09.07.07
						if (nCount > 100) 
						{
							nCount = 0;
						}
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmDiskEin.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmDiskEin.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmDiskEin.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmDiskEin.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						// Call axLL.LlDefineVariableExt( 'Halter.Kennung', frmDiskEin.strTHKenn, LL_NUMERIC, nRet )
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name1", App.frmDiskEin.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmDiskEin.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmDiskEin.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.PLZ", App.frmDiskEin.strTHPlz, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmDiskEin.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						if (App.frmDiskEin.dfText4.Text == "Bestandsbuchdruck") 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bestandsbuch", "1", Const.LL_NUMERIC, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bestandsbuch", "0", Const.LL_NUMERIC, ref locals.nRet);
						}
						// 29.01.08 Ä203
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmDiskEin.dfTAL.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmDiskEin.dfTAL.Number);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						// 14.11.13
						// 21.06.13 Ä902
						// Set strCustomerNumber = PalStrNum0( PalHolePMArzt(nArztNrL),4,0)
						strCustomerNumber = App.frmDiskEin.strTHKenn;
						// 19.05.22 Ä2019
						strArztHalter = Int.PalStrNum0(PalHolePMArzt(App.frmDiskEin.dfTAL.Number), 4, 0);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmDiskEin.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmDiskEin.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmDiskEin.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmDiskEin.strTHPlz + " " + App.frmDiskEin.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
					// 03.01.18
					App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
				}
				else if (strPBericht == "Deckblatt.crd") 
				{
					// Call PalReport( frmMain,'DECKBLATT.QRP',
					// ':frmMain.nTANr,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt, :frmMain.dtCurrentDate',
					// 'ArztNr, AName1, AName2, AStr, AOrt, Druckdatum', nErr)
					if (!(locals.bAsField)) 
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Druckdatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtCurrentDate), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(App.frmMain.nTANr, 4, 0);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmMain.nTANr);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Saldenliste.lst" || strPBericht == "KA-Statusliste.lst") 
				{
					// Call PalReport( frmMain,'SALDEN.QRP',
					// ':frmMain.nTANr,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt,
					// :frmMain.nDMRech,
					// :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll, :frmMain.nDMHaben,  :frmMain.nDMSoll, :frmMain.nDMHaben,
					// :frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
					// :frmMain.nVorVSt, :frmMain.nVorMwSt, :frmMain.nAussenst',
					// 'ArztNr, AName1, AName2, AStr, AOrt,
					// DMRech, DMMwSt, DMVorst, DMSoll, DMHaben, Soll, Haben,
					//  VorRech, VorSoll, VorHaben, VorVSt, VorMwSt, Auss',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Vorträge.Rechnungen", Sal.NumberToStrX(App.frmMain.nVorRech, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Vorträge.Soll", Sal.NumberToStrX(App.frmMain.nVorSoll, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Vorträge.Haben", Sal.NumberToStrX(App.frmMain.nVorHaben, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Vorträge.VSt", Sal.NumberToStrX(App.frmMain.nVorVSt, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Vorträge.MwSt", Sal.NumberToStrX(App.frmMain.nVorMwSt, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Aussenstände", Sal.NumberToStrX(App.frmMain.nAussenst, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Rechnungen", Sal.NumberToStrX(App.frmMain.nDMRech, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.MwSt", Sal.NumberToStrX(App.frmMain.nDMMwSt, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.VSt", Sal.NumberToStrX(App.frmMain.nDMVorst, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Soll", Sal.NumberToStrX(App.frmMain.nDMSoll, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Haben", Sal.NumberToStrX(App.frmMain.nDMHaben, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmMain.nTANr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(App.frmMain.nTANr), 4, 0);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
						// 15.03.22 Sasse
						if (App.frmMain.dtSaldenOP != SalDateTime.Null && App.frmMain.dtSaldenOP != SalDateTime.Current && App.frmMain.bSaldenOP) 
						{
							App.frmMain.axLL.LlDefineVariableExt("OP.BisDatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtSaldenOP), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("OP.Aktuell", "0", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("OP.BisDatum", Int.PalDateToStrJJJJMMTT(SalDateTime.Current), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("OP.Aktuell", "1", Const.LL_TEXT, ref locals.nRet);
						}
					}
				}
				else if (strPBericht == "Saldenmitteilung.crd" || strPBericht == "Pegasus-Mahnung.crd") 
				{
					if (locals.bAsField) 
					{
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						// 06.08.10 F737 .Ort - .Land
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Vorträge.Soll", Sal.NumberToStrX(App.frmMain.nVorSoll, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Vorträge.Haben", Sal.NumberToStrX(App.frmMain.nVorHaben, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmMain.nTANr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(App.frmMain.nTANr), 4, 0);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Ausbuchungen.lst") 
				{
					// Call PalReport( frmMain,'AUSBUCH.QRP',
					// ':frmMain.nTANr,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt,
					// :frmMain.nTHNr,:frmMain.strTHN1,
					// :frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nRechNr,
					// :frmMain.nDMRech',
					// 'ArztNr, AName1, AName2, AStr, AOrt,
					// HalterNr, HName1,
					// BuchDat, BuchText, RechNr,
					// DMRech',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Text", App.frmMain.strBuchText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.RechNr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Betrag", Sal.NumberToStrX(App.frmMain.nDMRech, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.BetragMahn", Sal.NumberToStrX(App.frmMain.nDMMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 21.10.14 Ä948 + MwSt
						App.frmMain.axLL.LlDefineFieldExt("Buchung.MwSt", Sal.NumberToStrX(App.frmMain.nProzMwSt, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied-Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						// 14.01.08 Ä203
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);

						nArztNrL = Int.PalCheckLarztnr(App.frmMain.nTANr);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						if (strPSpezial == "VormonateED" || strPSpezial == "ED") 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "-" + Int.PalDateToStrJJJJMMTThhmmss(dtDDErfDat).Right(8), Const.LL_NUMERIC, ref locals.nRet);
							// 21.06.13 Ä902
							strCustomerNumber = Int.PalDateToStrJJJJMMTThhmmss(dtDDErfDat);
							// 19.05.22 Ä2019
							strArztHalter = Int.PalStrNum0(nArztNrL, 4, 0);
							// 08.09.23 F5039
							bExtraDruck = true;

							App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
							// 24.10.18 F3145 + ddemail
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", App.frmMain.strDDEMail, Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
							// 21.06.13 Ä902
							strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0);

							App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
							// 06.05.13 Ä943
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);
						}
						// If strN1!=frmMain.strTAN1 or strN2!=frmMain.strTAN2 or strS!=frmMain.strTAStr or strO!=frmMain.strTAOrt
						// Call axLL.LlDefineVariableExt( 'Bericht.Deckblatt', '1', LL_TEXT, nRet )
						// Else
						// Call axLL.LlDefineVariableExt( 'Bericht.Deckblatt', '0', LL_TEXT, nRet )


						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Erinnerungsliste.lst") 
				{
					// Call PalReport( frmMain,'EL.QRP',
					// ':frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.strVon,
					// :frmMain.dtDatum, :frmMain.strText
					// , :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt',
					// 'ArztNr, HalterNr, RechNr, Von, Datum, Text, N1, N2, Str, Ort',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Zeichen", App.frmMain.strVon, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Nr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Text", App.frmMain.strText, Const.LL_TEXT, ref locals.nRet);
						// 01.02.16 Ä1139
						App.frmMain.axLL.LlDefineFieldExt("GesamtOP", Sal.NumberToStrX(App.frmMain.nDMOP, 2), Const.LL_NUMERIC, ref locals.nRet);

					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied-Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 14.01.08 Ä203
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmMain.nTANr);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				// Else If strPBericht = 'MB-Bezahlt.lst'
				// Call PalReport( frmMain,'MBBEZ.QRP',
				// ':frmMain.nProzNr, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nA1, :frmMain.nR1, :frmMain.nA2, :frmMain.nR2, :frmMain.nA3, :frmMain.nR3, :frmMain.nA4, :frmMain.nR4,
				// :frmMain.nA5, :frmMain.nR5, :frmMain.nA6, :frmMain.nR6,
				// :frmMain.strAZ, :frmMain.strGerName, :frmMain.nDMa, :frmMain.nDMb, :frmMain.nDMc, :frmMain.nDMHF, :frmMain.dtBezahlt,
				// :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
				// :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.nAussenst',
				// 'ProzNr, ArztNr, HalterNr, A1, R1, A2, R2, A3, R3, A4, R4, A5, R5, A6, R6,
				// AZ, GerName, DMa, DMb, DMc, DMHF, Bezahlt,
				// N1, N2, Str, Ort, HLand,
				// AN1, AN2, AStr, AOrt, Aussenst',
				// nErr)
				// If bAsField
				// Call axLL.LlDefineFieldExt( 'Mitglied-Nr', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'ProzNr', SalNumberToStrX(frmMain.nProzNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Aussenstände', SalNumberToStrX(frmMain.nAussenst,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Nr', SalNumberToStrX(frmMain.nTHNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Name1', frmMain.strTHN1, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Ort', frmMain.strTHOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Land', frmMain.strTHLand, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Aktenzeichen', frmMain.strAZ, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Gericht', frmMain.strGerName, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Datum', PalDateToStrJJJJMMTT(frmMain.dtDatum), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineFieldExt( 'EUR a', SalNumberToStrX(frmMain.nDMa,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'EUR b', SalNumberToStrX(frmMain.nDMb,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'EUR c', SalNumberToStrX(frmMain.nDMc,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'EUR HF', SalNumberToStrX(frmMain.nDMHF,2), LL_NUMERIC, nRet )
				// Else
				// Call axLL.LlDefineVariableExt( 'Mitglied.Nr', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Name1', frmMain.strTAN1, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Name2', frmMain.strTAN2, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Strasse', frmMain.strTAStr, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Ort', frmMain.strTAOrt, LL_TEXT, nRet )
				// 19.02.08
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNr', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNrL', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.HalterNr', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.RechnungNr', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name1', strN1, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name2', strN2, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Strasse', strS, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Ort', strO, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Land', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Deckblatt', '0', LL_TEXT, nRet )
				else if (strPBericht == "Negativliste.lst") 
				{
					// Call SalStatusSetText(hWndForm,'Erstelle Negativliste -  Bitte warten !')
					// Set frmMain.strPLZ = dfNegativ || '%'
					// Set frmMain.nErr = 1
					// Set frmMain.strReportName = 'NEGLISTE'
					// Call PalReport(frmMain,'NEGLISTE.QRP',
					// ':frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strPLZ',
					// 'Name1, Name2, Str, Ort, PLZ',nErr)
					// Call SalWaitCursor( FALSE )
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("PLZ-Bereich", App.frmMain.strPLZ, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "MB-Kosten.lst") 
				{
					// Call PalReport( frmMain,'MBK.QRP',
					// ':frmMain.strLA, :frmMain.nTANr,:frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat,
					// :frmMain.nDMa, :frmMain.nDMb, :frmMain.nDMc,
					// :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTHN1, :frmMain.strabc',
					// 'Typ, Arzt, Halter, Rechnung, BuchDat, DMa, DMb, DMc, AN1, AN2, HN1, ABC',nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Nr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchungs-Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("DMa", Sal.NumberToStrX(App.frmMain.nDMa, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("DMb", Sal.NumberToStrX(App.frmMain.nDMb, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("DMc", Sal.NumberToStrX(App.frmMain.nDMc, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Typ", App.frmMain.strLA, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("abc", App.frmMain.strabc, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Verjährungen.lst") 
				{
					// Set strSelect = 'SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkbuchtext,
					// (rkdmleis+rkdmarzn+rkmbdmopl), rkdmmahn, rkdmzins,   (rkzaleis+rkzaarzn+rkmbzaopl), rkzamahn, rkzazins,
					// rkmahnstufe, rkmahnltzt, rkverjaehr, aname1, hti || hvn || \' \' || hnn, hname2, hstr, hort, hland
					// INTO :nTANr, :nTHNr, :nRechNr, :dtBuchDat, :strBuchText,
					// :nDMRech, :nDMMahn, :nDMZins, :nZaRech, :nZaMahn, :nZaZins,
					// :nMS, :dtMahnDat, :dtVerjDat, :strTAN1, :strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strTHLand
					// FROM rk,a,h
					// WHERE rkarztnr BETWEEN :nArztVon AND :nArztBis
					// AND rkkzzahl<2 AND rkmahnstufe<>9 and rkverjaehr <=  :dtDatBis
					// AND rkrechnr<999990 AND (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)>0
					// AND rkarztnr=aarztnr AND rkarztnr=harztnr AND rkhalternr=hhalternr
					// ORDER BY rkarztnr, hnn, hhalternr, rkrechnr'
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Nr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchungsdatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mahndatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtMahnDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Verjährungsdatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtVerjDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchungstext", App.frmMain.strBuchText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Rech", Sal.NumberToStrX(App.frmMain.nDMRech, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Mahn", Sal.NumberToStrX(App.frmMain.nDMMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Zins", Sal.NumberToStrX(App.frmMain.nDMZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Zahlg-Rech", Sal.NumberToStrX(App.frmMain.nZaRech, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Zahlg-Mahn", Sal.NumberToStrX(App.frmMain.nZaMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Zahlg-Zins", Sal.NumberToStrX(App.frmMain.nZaZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mahnstufe", Sal.NumberToStrX(App.frmMain.nMS, 0), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						// 29.01.08 Ä203
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmMain.nTANr);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmMain.nTANr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						// 04.09.12 Ä815
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Spezial", strPSpezial, Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);

						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Ärzte mit Verjährungen.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmMain.nTANr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "BankClearing.lst") 
				{
					// Call PalReport( frmMain,'BANKCLEA.QRP',
					// ':frmMain.nTANr,:frmMain.nTHNr, :frmMain.nRechNr, :frmMain.nZahlDM, :frmMain.nBuchDM, :frmMain.dtBuchDat, :frmMain.nRestL, :frmMain.nRestA, :frmMain.nRestM, :frmMain.nRestZ, :frmMain.strKonto,
					// :frmMain.strErgebnis, :frmMain.nAuszug, :frmMain.strRef, :frmMain.nTextSchl, :frmMain.strVZ1, :frmMain.strVZ2, :frmMain.strAuftr1, :frmMain.strAuftr2',
					//  'Arzt, Halter, Rechnung, ZahlDM, BuchDM, BuchDat, RestL, RestA, RestM, RestZ, Konto, Ergebnis, Auszug, Ref, TextSchl, VZ1, VZ2, A1, A2' ,
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Nr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchungsdatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ueberweisung.VZ1", App.frmMain.strVZ1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ueberweisung.VZ2", App.frmMain.strVZ2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ueberweisung.VZ3", App.frmMain.strVZ3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ueberweisung.VZ4", App.frmMain.strVZ4, Const.LL_TEXT, ref locals.nRet);
						// 18.06.15 Ä1215
						App.frmMain.axLL.LlDefineFieldExt("Ueberweisung.VZ5", App.frmMain.strVZ5, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ueberweisung.VZ6", App.frmMain.strVZ6, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineFieldExt("Ueberweisung.A1", App.frmMain.strAuftr1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ueberweisung.A2", App.frmMain.strAuftr2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ueberweisung.EUR-Zahl", Sal.NumberToStrX(App.frmMain.nZahlDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ueberweisung.EUR-Buch", Sal.NumberToStrX(App.frmMain.nBuchDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ueberweisung.RestL", Sal.NumberToStrX(App.frmMain.nRestL, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ueberweisung.RestA", Sal.NumberToStrX(App.frmMain.nRestA, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ueberweisung.RestM", Sal.NumberToStrX(App.frmMain.nRestM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ueberweisung.RestZ", Sal.NumberToStrX(App.frmMain.nRestZ, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ueberweisung.Auszug", Sal.NumberToStrX(App.frmMain.nAuszug, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ueberweisung.Konto", App.frmMain.strKonto, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ergebnis", App.frmMain.strErgebnis, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ref", App.frmMain.strRef, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("fTyp", App.frmMain.strabc, Const.LL_TEXT, ref locals.nRet);
						// 15.02.16 Ä1342 + bcrznr
						App.frmMain.axLL.LlDefineFieldExt("RZNr", Sal.NumberToStrX(App.frmMain.nRZNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 13.11.17 F3045 + bcvwz
						App.frmMain.axLL.LlDefineFieldExt("Ueberweisung.VWZ", App.frmMain.lsVWZ, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vTyp", App.frmMain.strabc, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Batchprotokoll.lst") 
				{
					// Call PalReport( frmMain,'BATCHPRO.QRP',
					// ':frmMain.nTANr,:frmMain.nTHNr, :frmMain.nRechNr, :frmMain.nZahlDM, :frmMain.nBuchDM, :frmMain.dtBuchDat, :frmMain.nRestL, :frmMain.nRestA, :frmMain.nRestM, :frmMain.nRestZ, :frmMain.strKonto,
					// :frmMain.strErgebnis',
					//  'Arzt, Halter, Rechnung, ZahlDM, BuchDM, BuchDat, RestL, RestA, RestM, RestZ, Konto, Ergebnis' ,
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Nr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchungsdatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Zahl", Sal.NumberToStrX(App.frmMain.nZahlDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Buch", Sal.NumberToStrX(App.frmMain.nBuchDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-RestL", Sal.NumberToStrX(App.frmMain.nRestL, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-RestA", Sal.NumberToStrX(App.frmMain.nRestA, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-RestM", Sal.NumberToStrX(App.frmMain.nRestM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-RestZ", Sal.NumberToStrX(App.frmMain.nRestZ, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ueberweisung.Konto", App.frmMain.strKonto, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ergebnis", App.frmMain.strErgebnis, Const.LL_TEXT, ref locals.nRet);
						// 20.11.07 Ä178
						App.frmMain.axLL.LlDefineFieldExt("Beleg-Nr", Sal.NumberToStrX(App.frmMain.nBelNr, 0), Const.LL_NUMERIC, ref locals.nRet);

					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				// Else If strPBericht = 'Bankeinzüge.lst'
				// Call PalReport( frmMain,'BEZ.QRP',
				// ':frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr,
				// :frmMain.dtDatum, :frmMain.nZMDM,
				// , :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strBLZ, :frmMain.strKonto',
				// 'ArztNr, HalterNr, RechNr, Datum, DM, N1, N2, Str, Ort, BLZ, Konto',
				// nErr)
				// If bAsField
				// Call axLL.LlDefineFieldExt( 'Mitglied-Nr', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Nr', SalNumberToStrX(frmMain.nTHNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Rechnung.Nr', SalNumberToStrX(frmMain.nRechNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Datum', PalDateToStrJJJJMMTT(frmMain.dtDatum), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineFieldExt( 'EUR', SalNumberToStrX(frmMain.nZMDM,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'BLZ', frmMain.strBLZ, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Konto', frmMain.strKonto, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Name1', frmMain.strTHN1, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Name2', frmMain.strTHN2, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Strasse', frmMain.strTHStr, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Ort', frmMain.strTHOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Land', frmMain.strTHLand, LL_TEXT, nRet )
				// Else
				// Call axLL.LlDefineVariableExt( 'Mitglied.Nr', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
				// 19.02.08
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNr', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNrL', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.HalterNr', SalNumberToStrX(frmMain.nTHNr,0), LL_NUMERIC, nRet )
				// 06.05.13 Ä943
				// Call axLL.LlDefineVariableExt( 'PMEmail', PalHoleEMail( frmMain.nTANr, 0), LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.RechnungNr', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name1', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name2', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Strasse', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Ort', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Land', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Deckblatt', '0', LL_TEXT, nRet )
				// 03.01.18
				// Call axLL.LlDefineVariableExt( 'Bericht.auf_blanco', '1', LL_TEXT, nRet )
				else if (strPBericht == "Rückerstattungen.lst") 
				{
					// Call PalReport( frmMain,'RUECKER.QRP',
					// ':frmMain.nTANr, :frmMain.strTAN1,  :frmMain.nGebDM, :frmMain.nUebersch,
					// :frmMain.nGesGebDM, :frmMain.nDM, :frmMain.nJahr, :frmMain.dtZahlDat',
					// 'ArztNr, AName1, GebDM, Uebersch, GesGebDM, DM, Jahr, ZahlDat',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Zahl-Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtZahlDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Ueberschuss", Sal.NumberToStrX(App.frmMain.nUebersch, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Geb", Sal.NumberToStrX(App.frmMain.nGebDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Gesamt-Geb", Sal.NumberToStrX(App.frmMain.nGesGebDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR", Sal.NumberToStrX(App.frmMain.nDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Jahr", Sal.NumberToStrX(App.frmMain.nJahr, 0), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Buchungsbelege.lst") 
				{
					// Call PalReport( frmMain,'BUB.QRP',
					// ':frmMain.nTANr, :frmMain.dtDatum, :frmMain.nSoll, :frmMain.nHaben, :frmMain.nDM, :frmMain.strBuchText',
					// 'ArztNr, Datum, Soll, Haben, DM, BuchText',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Soll", Sal.NumberToStrX(App.frmMain.nSoll, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Haben", Sal.NumberToStrX(App.frmMain.nHaben, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR", Sal.NumberToStrX(App.frmMain.nDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchungstext", App.frmMain.strBuchText, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "OP-Liste.lst" || strPBericht == "OP-ListeOP.lst") 
				{
					// Call PalReport( frmMain,'OPLISTE.QRP',
					// ':frmMain.nTANr,:frmMain.strTAN1,
					// :frmMain.nTHNr,:frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand, :frmMain.strTHText,
					// :frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nRechNr,
					// :frmMain.nDMRechL,  :frmMain.nDMRechA,  :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRechL, :frmMain.nZaRechA,
					// :frmMain.nZaMahn, :frmMain.nZaZins,
					// :frmMain.nMS, :frmMain.dtMahnDat, :frmMain.strInkasso',
					// 'ArztNr, AName1,
					// HalterNr, HName1, HName2, HStr, HOrt, HLand, HText,
					// RechDat, BuchText, RechNr,
					// DMRechL, DMRechA,  DMMahn, DMZins, ZaRechL, ZaRechA, ZaMahn, ZaZins,
					// MS, MahnDat, Inkasso',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Text", App.frmMain.strTHText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rech-Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchungstext", App.frmMain.strBuchText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Nr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-RechL", Sal.NumberToStrX(App.frmMain.nDMRechL, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-RechA", Sal.NumberToStrX(App.frmMain.nDMRechA, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Mahn", Sal.NumberToStrX(App.frmMain.nDMMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Zins", Sal.NumberToStrX(App.frmMain.nDMZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-ZahlL", Sal.NumberToStrX(App.frmMain.nZaRechL, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-ZahlA", Sal.NumberToStrX(App.frmMain.nZaRechA, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-ZahlMahn", Sal.NumberToStrX(App.frmMain.nZaMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-ZahlZins", Sal.NumberToStrX(App.frmMain.nZaZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mahn-Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtMahnDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mahnstufe", Sal.NumberToStrX(App.frmMain.nMS, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Inkasso", App.frmMain.strInkasso, Const.LL_TEXT, ref locals.nRet);
						// 07.04.10 OTÄ135
						App.frmMain.axLL.LlDefineFieldExt("Halter.HalterkontoSaldo", nRZOffen.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						// 13.11.17 Ä1657 + rpmwst, rpdm, rpdmzahl
						if (strPBericht == "OP-ListeOP.lst") 
						{
							App.frmMain.axLL.LlDefineFieldExt("RechPos.MwSt", this.nRPMwSt.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("RechPos.DM", this.nRPDM.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("RechPos.DMZahl", this.nRPDMZahl.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						}
						// 02.01.18 Ä1673
						if (strPSpezial == "RA") 
						{
							// Set strSelect = 'SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkbuchtext,
							// (rkdmleis+rkmbdmopl), rkdmarzn, rkdmmahn, rkdmzins,    (rkzaleis+rkmbzaopl), rkzaarzn, rkzamahn, rkzazins,
							// rkmahnstufe, rkmahnltzt, aname1, aname2, astr, aort, aland, hti || hvn || \' \' || hnn, hname2, hstr, hort, hland,
							// radatum, razeichen, raan1, raan2, raan3
							// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
							// :frmMain.nDMRechL, :frmMain.nDMRechA, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRechL, :frmMain.nZaRechA, :frmMain.nZaMahn, :frmMain.nZaZins,
							// :frmMain.nMS, :frmMain.dtMahnDat, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
							// :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
							// :frmMain.dtRADatum, :frmMain.strRAZeichen, :frmMain.strRAN1, :frmMain.strRAN2, :frmMain.strRAN3
							// FROM rk,a,h,ra
							// WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
							// AND rkrechdat BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
							// AND rkarztnr=raarztnr AND rkhalternr=rahalternr AND rkrechnr=rarechnr '
							App.frmMain.axLL.LlDefineFieldExt("RA.Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtRADatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("RA.Zeichen", App.frmMain.strRAZeichen, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("RA.N1", App.frmMain.strRAN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("RA.N2", App.frmMain.strRAN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("RA.N3", App.frmMain.strRAN3, Const.LL_TEXT, ref locals.nRet);
							// 18.01.22 Ä1987 + , raan4, raan5
							App.frmMain.axLL.LlDefineFieldExt("RA.N4", App.frmMain.strRAN4, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("RA.N5", App.frmMain.strRAN5, Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineFieldExt("RA.Datum", Int.PalDateToStrJJJJMMTT(SalDateTime.Null), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("RA.Zeichen", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("RA.N1", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("RA.N2", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("RA.N3", "", Const.LL_TEXT, ref locals.nRet);
							// 18.01.22 Ä1987 + , raan4, raan5
							App.frmMain.axLL.LlDefineFieldExt("RA.N4", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineFieldExt("RA.N5", "", Const.LL_TEXT, ref locals.nRet);
						}
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						// 29.01.08 Ä203
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmMain.nTANr);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						if (strPSpezial == "ED") 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "-" + Int.PalDateToStrJJJJMMTThhmmss(dtDDErfDat).Right(8), Const.LL_NUMERIC, ref locals.nRet);
							// 21.06.13 Ä902
							strCustomerNumber = Int.PalDateToStrJJJJMMTThhmmss(dtDDErfDat);
							// 19.05.22 Ä2019
							strArztHalter = Int.PalStrNum0(nArztNrL, 4, 0);
							// 08.09.23 F5039
							bExtraDruck = true;

							App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
							// 24.10.18 F3145 + ddemail
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", App.frmMain.strDDEMail, Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
							// 21.06.13 Ä902
							strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0);

							App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
							// 06.05.13 Ä943
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);
						}
						// 15.02.22 Ä1999
						if (strPSpezial.Left(6) == "Datum:") 
						{
							App.frmMain.axLL.LlDefineVariableExt("OPDatum", Int.PalDateToStrJJJJMMTT(this.dtOPDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("OPDatum", "", Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						}
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
						// 31.08.22
						if (App.frmMain.nOPMS == 99) 
						{
							App.frmMain.axLL.LlDefineVariableExt("nurOP", "1", Const.LL_NUMERIC, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("nurOP", "0", Const.LL_NUMERIC, ref locals.nRet);
						}
					}
				}
				else if (strPBericht == "MB-Info.lst") 
				{
					// Call PalReport( frmMain,'MBINFO.QRP',
					// ':frmMain.nTANr,:frmMain.strTAN1,
					// :frmMain.nTHNr,:frmMain.strTHN1,:frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand,
					// :frmMain.dtBuchDat, :frmMain.strTypDetail, :frmMain.strBuchText,
					// :frmMain.nRechNr, :frmMain.nRkDMHF, :frmMain.nRkDMMa, :frmMain.nRkZaHF, :frmMain.nRkZaMa,
					// :frmMain.nDMGK, :frmMain.nZaDM, :frmMain.nMS',
					// 'ArztNr, AName1,
					// HalterNr, HName1, HName2, HStr, HOrt, HLand,
					// Datum, TypDetail, BuchText,
					// RechNr, RkDMHF, RkDMMa, RkZaHF, RkZaMa,
					// GK, Za, MS', nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("TypDetail", App.frmMain.strTypDetail, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchungstext", App.frmMain.strBuchText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Nr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-HF", Sal.NumberToStrX(App.frmMain.nRkDMHF, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Mahn", Sal.NumberToStrX(App.frmMain.nRkDMMa, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-ZahlHF", Sal.NumberToStrX(App.frmMain.nRkZaHF, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-ZahlMahn", Sal.NumberToStrX(App.frmMain.nRkZaMa, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Zahl", Sal.NumberToStrX(App.frmMain.nZaDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Gk", Sal.NumberToStrX(App.frmMain.nDMGK, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mahnstufe", Sal.NumberToStrX(App.frmMain.nMS, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Inkasso", App.frmMain.strInkasso, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmMain.nTANr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Partien-Info.lst") 
				{
					// Call PalReport( frmMain,'OPPARTIE.QRP',
					// ':frmMain.nTANr,:frmMain.strTAN1,
					// :frmMain.dtBuchDat, :frmMain.nRechJahr,
					// :frmMain.nDMRech,  :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRech,
					// :frmMain.nZaMahn, :frmMain.nZaZins,
					// :frmMain.nAnzRech, :frmMain.nDMAusbuch, :frmMain.strBezeichnung',
					// 'ArztNr, AName1,
					// RechDat, Jahr,
					// DMRech,  DMMahn, DMZins, ZaRech, ZaMahn, ZaZins,
					// AnzRech, DMAusbuch, Bezeichnung',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnungs-Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Jahr", Sal.NumberToStrX(App.frmMain.nRechJahr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Bezeichnung", App.frmMain.strBezeichnung, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Rech", Sal.NumberToStrX(App.frmMain.nDMRech, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Mahn", Sal.NumberToStrX(App.frmMain.nDMMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Zins", Sal.NumberToStrX(App.frmMain.nDMZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-ZahlRech", Sal.NumberToStrX(App.frmMain.nZaRech, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-ZahlMahn", Sal.NumberToStrX(App.frmMain.nZaMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-ZahlZins", Sal.NumberToStrX(App.frmMain.nZaZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Ausbuch", Sal.NumberToStrX(App.frmMain.nDMAusbuch, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("AnzRg", Sal.NumberToStrX(App.frmMain.nAnzRech, 0), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("abc", App.frmMain.strabc, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmMain.nTANr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				// Else If strPBericht = 'Ratenzahler-Checkliste.lst'
				// Call PalReport(frmMain,'RATCHECK.QRP',
				// ':frmMain.nTANr, :frmMain.nTHNr,:frmMain.strTHN1,
				// :frmMain.dtRatDat, :frmMain.dtRechDat,
				// :frmMain.nDMRat, :frmMain.nMtl, :frmMain.nDMRech',
				// 'ArztNr, HalterNr, HName1,
				// RatDat, RechDat,
				// DMRat, Mtl, DMRech',nErr)
				// If bAsField
				// Call axLL.LlDefineFieldExt( 'Mitglied.Nr', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Nr', SalNumberToStrX(frmMain.nTHNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Name1', frmMain.strTHN1, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Name2', frmMain.strTHN2, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Strasse', frmMain.strTHStr, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Ort', frmMain.strTHOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Land', frmMain.strTHLand, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Raten-Datum', PalDateToStrJJJJMMTT(frmMain.dtRatDat), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineFieldExt( 'Rech-Datum', PalDateToStrJJJJMMTT(frmMain.dtRechDat), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineFieldExt( 'Rech-EUR', SalNumberToStrX(frmMain.nDMRech,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Rate-EUR', SalNumberToStrX(frmMain.nDMRat,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Monate', SalNumberToStrX(frmMain.nMtl,0), LL_NUMERIC, nRet )
				// Else
				// 19.02.08
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNr', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNrL', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.HalterNr', '0', LL_NUMERIC, nRet )
				// 06.05.13 Ä943
				// Call axLL.LlDefineVariableExt( 'PMEmail', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.RechnungNr', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name1', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name2', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Strasse', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Ort', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Land', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Deckblatt', '0', LL_TEXT, nRet )
				// Else If strPBericht = 'Ratenzahlerliste.lst'
				// Call PalReport(frmMain,'RATLIST.QRP',
				// ':frmMain.nTANr, :frmMain.nTHNr,:frmMain.strTHN1,
				// :frmMain.dtRatDat, :frmMain.dtRechDat,
				// :frmMain.nDMRat, :frmMain.nMtl, :frmMain.nDMRech',
				// 'ArztNr, HalterNr, HName1,
				// RatDat, RechDat,
				// DMRat, Mtl, DMRech',nErr)
				// If bAsField
				// Call axLL.LlDefineFieldExt( 'Mitglied.Nr', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Nr', SalNumberToStrX(frmMain.nTHNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Name1', frmMain.strTHN1, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Name2', frmMain.strTHN2, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Strasse', frmMain.strTHStr, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Ort', frmMain.strTHOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Land', frmMain.strTHLand, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Raten-Datum', PalDateToStrJJJJMMTT(frmMain.dtRatDat), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineFieldExt( 'Rech-Datum', PalDateToStrJJJJMMTT(frmMain.dtRechDat), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineFieldExt( 'Rech-EUR', SalNumberToStrX(frmMain.nDMRech,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Rate-EUR', SalNumberToStrX(frmMain.nDMRat,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Monate', SalNumberToStrX(frmMain.nMtl,0), LL_NUMERIC, nRet )
				// Else
				// 19.02.08
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNr', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNrL', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.HalterNr', '0', LL_NUMERIC, nRet )
				// 06.05.13 Ä943
				// Call axLL.LlDefineVariableExt( 'PMEmail', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.RechnungNr', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name1', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name2', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Strasse', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Ort', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Land', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Deckblatt', '0', LL_TEXT, nRet )
				else if (strPBericht == "70-Checkliste.lst") 
				{
					// Call PalReport( frmMain,'70CHECK.QRP',
					// ':frmMain.nTANr,:frmMain.strTAN1,
					// :frmMain.dtBuchDat, :frmMain.nRechJahr,
					// :frmMain.nDMRech,  :frmMain.nTage70, :frmMain.nTage30,  :frmMain.nProz70, :frmMain.nProz30,
					// :frmMain.nAnzRech,  :frmMain.nBankZins, :frmMain.nTVZins',
					// 'ArztNr, AName1, RechDat, Jahr,
					// DMRech, Tage70, Tage30, Proz70, Proz30, AnzRech, BankZins, TVZins',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rech-Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rech-EUR", Sal.NumberToStrX(App.frmMain.nDMRech, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Jahr", Sal.NumberToStrX(App.frmMain.nRechJahr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Tage70", Sal.NumberToStrX(App.frmMain.nTage70, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Proz70", Sal.NumberToStrX(App.frmMain.nProz70, 1), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Tage30", Sal.NumberToStrX(App.frmMain.nTage30, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Proz30", Sal.NumberToStrX(App.frmMain.nProz30, 1), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Tage90", Sal.NumberToStrX(App.frmMain.nTage90, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Proz90", Sal.NumberToStrX(App.frmMain.nProz90, 1), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Tage95", Sal.NumberToStrX(App.frmMain.nTage95, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Proz95", Sal.NumberToStrX(App.frmMain.nProz95, 1), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("AnzRech", Sal.NumberToStrX(App.frmMain.nAnzRech, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("BankZins", Sal.NumberToStrX(App.frmMain.nBankZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("TVZins", Sal.NumberToStrX(App.frmMain.nTVZins, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 15.10.09
						if (strPSpezial == "90") 
						{
							App.frmMain.axLL.LlDefineVariableExt("Prozent", "90", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Prozent", "70", Const.LL_TEXT, ref locals.nRet);
						}
						// 19.11.13 Ä902
						strCustomerNumber = "X";
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Buchungsabgleich.crd") 
				{
					if (locals.bAsField) 
					{
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("TK.Soll", Sal.NumberToStrX(App.frmMain.nTKSoll, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("TK.Haben", Sal.NumberToStrX(App.frmMain.nTKHaben, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("FI.Soll", Sal.NumberToStrX(App.frmMain.nFISoll, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("FI.Haben", Sal.NumberToStrX(App.frmMain.nFIHaben, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Datum.von", Int.PalDateToStrJJJJMMTT(App.frmMain.dtDatVon), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Datum.bis", Int.PalDateToStrJJJJMMTT(App.frmMain.dtDatBis), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Hitliste Rechnungen.lst") 
				{
					// Call PalReport( frmMain,'HITLISTE.QRP',
					// ':frmMain.nTANr,:frmMain.strTAN1,
					// :frmMain.nAnzRech, :frmMain.nRechGeb, :frmMain.nBuchDM, :frmMain.nRechDM, :frmMain.nZahlDM',
					// 'ArztNr, AName1,
					// Anzahl, SummGeb, SchnGeb, SummRech, SchnRech',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("AnzRech", Sal.NumberToStrX(App.frmMain.nAnzRech, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("SchnGeb", Sal.NumberToStrX(App.frmMain.nBuchDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("SummGeb", Sal.NumberToStrX(App.frmMain.nRechGeb, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("SummRech", Sal.NumberToStrX(App.frmMain.nRechDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("SchnRech", Sal.NumberToStrX(App.frmMain.nZahlDM, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Hitliste Mahnungen.lst") 
				{
					// Call PalReport( frmMain,'MAHNHIT.QRP',
					// ':frmMain.nTANr,:frmMain.strTAN1,
					// :frmMain.nAnzRech, :frmMain.nRechGeb, :frmMain.nBuchDM, :frmMain.nRechDM, :frmMain.nZahlDM',
					// 'ArztNr, AName1,
					// Anzahl, SummGeb, SchnGeb, SummRech, SchnRech',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("AnzRech", Sal.NumberToStrX(App.frmMain.nAnzRech, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("SchnGeb", Sal.NumberToStrX(App.frmMain.nBuchDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("SummGeb", Sal.NumberToStrX(App.frmMain.nRechGeb, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("SummRech", Sal.NumberToStrX(App.frmMain.nRechDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("SchnRech", Sal.NumberToStrX(App.frmMain.nZahlDM, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "TA-Statistik.lst") 
				{
					// Call PalReport(frmMain,'TASTATIS.QRP',
					// ':frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strGKTyp, :frmMain.nRechJahr,
					// :frmMain.nGeb1, :frmMain.nRech1, :frmMain.nProz1,
					// :frmMain.nGeb2, :frmMain.nRech2, :frmMain.nProz2,
					// :frmMain.nGeb3, :frmMain.nRech3, :frmMain.nProz3,
					// :frmMain.nGeb4, :frmMain.nRech4, :frmMain.nProz4',
					// 'ArztNr, AName1, AName2, GKTyp, Jahr, Geb1, Rech1, Proz1, Geb2, Rech2, Proz2,
					// Geb3, Rech3, Proz3, Geb4, Rech4, Proz4',nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("GKTyp", App.frmMain.strGKTyp, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Jahr", Sal.NumberToStrX(App.frmMain.nRechJahr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Geb1", Sal.NumberToStrX(App.frmMain.nGeb1, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rech1", Sal.NumberToStrX(App.frmMain.nRech1, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Proz1", Sal.NumberToStrX(App.frmMain.nProz1, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Geb2", Sal.NumberToStrX(App.frmMain.nGeb2, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rech2", Sal.NumberToStrX(App.frmMain.nRech2, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Proz2", Sal.NumberToStrX(App.frmMain.nProz2, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Geb3", Sal.NumberToStrX(App.frmMain.nGeb3, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rech3", Sal.NumberToStrX(App.frmMain.nRech3, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Proz3", Sal.NumberToStrX(App.frmMain.nProz3, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Geb4", Sal.NumberToStrX(App.frmMain.nGeb4, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rech4", Sal.NumberToStrX(App.frmMain.nRech4, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Proz4", Sal.NumberToStrX(App.frmMain.nProz4, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "TA-StatistikVARI.lst") 
				{
					// Call PalReport(frmMain,'TASTATIS1.QRP',
					// ':frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strGKTyp, :frmMain.nRechJahr,
					// :frmMain.nGeb1, :frmMain.nRech1, :frmMain.nProz1,
					// :frmMain.dtDatVon, :frmMain.dtDatBis',
					// 'ArztNr, AName1, AName2, GKTyp, Jahr, Geb1, Rech1, Proz1, von, bis',nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("GKTyp", App.frmMain.strGKTyp, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Jahr", Sal.NumberToStrX(App.frmMain.nRechJahr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Geb1", Sal.NumberToStrX(App.frmMain.nGeb1, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rech1", Sal.NumberToStrX(App.frmMain.nRech1, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Proz1", Sal.NumberToStrX(App.frmMain.nProz1, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Datum.von", Int.PalDateToStrJJJJMMTT(App.frmMain.dtDatVon), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Datum.bis", Int.PalDateToStrJJJJMMTT(App.frmMain.dtDatBis), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				// Else If strPBericht = 'Mahnsperre2.lst'
				// Call PalReport( frmMain,'MASP2.QRP',
				// ':frmMain.nTANr, :frmMain.nTHNr,
				// :frmMain.strTAN1, :frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt,
				// :frmMain.strTHN1, :frmMain.strTHN2,:frmMain.strTHStr,:frmMain.strTHOrt, :frmMain.strTHLand,
				// :frmMain.dtRechDat, :frmMain.nRechNr,
				// :frmMain.nDMOP',
				// 'ArztNr, HalterNr,
				// AName1, AName2, AStr, AOrt,
				// HName1, HName2, HStr, HOrt, HLand,
				// RechDat, RechNr,
				// DMOP',
				// nErr)
				// If bAsField
				// Call axLL.LlDefineFieldExt( 'Mitglied.Nr', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Mitglied.Name1', frmMain.strTAN1, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Mitglied.Name2', frmMain.strTAN2, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Mitglied.Strasse', frmMain.strTAStr, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Mitglied.Ort', frmMain.strTAOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Mitglied.Land', frmMain.strTALand, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Nr', SalNumberToStrX(frmMain.nTHNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Name1', frmMain.strTHN1, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Name2', frmMain.strTHN2, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Strasse', frmMain.strTHStr, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Ort', frmMain.strTHOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Land', frmMain.strTHLand, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Rech-Datum', PalDateToStrJJJJMMTT(frmMain.dtRechDat), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineFieldExt( 'Rechnung.Nr', SalNumberToStrX(frmMain.nRechNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'EUR-offen', SalNumberToStrX(frmMain.nDMOP,2), LL_NUMERIC, nRet )
				// Else
				// Call axLL.LlDefineVariableExt( 'vMitglied.Nr', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'vMitglied.Name1', frmMain.strTAN1, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'vMitglied.Name2', frmMain.strTAN2, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'vMitglied.Strasse', frmMain.strTAStr, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'vMitglied.Ort', frmMain.strTAOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'vMitglied.Land', frmMain.strTALand, LL_TEXT, nRet )
				// 19.02.08
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNr', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
				// Set nArztNrL = PalCheckLarztnr(frmMain.nTANr)
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNrL', SalNumberToStrX(PalHolePMArzt(nArztNrL),0), LL_NUMERIC, nRet )
				// 21.06.13 Ä902
				// Set strCustomerNumber = PalStrNum0( PalHolePMArzt(nArztNrL),4,0)
				// Call axLL.LlDefineVariableExt( 'Bericht.HalterNr', '0', LL_NUMERIC, nRet )
				// 06.05.13 Ä943
				// Call axLL.LlDefineVariableExt( 'PMEmail', PalHoleEMail( frmMain.nTANr, 0), LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.RechnungNr', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name1', frmMain.strTAN1, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name2', frmMain.strTAN2, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Strasse', frmMain.strTAStr, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Ort', frmMain.strTAOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Land', frmMain.strTALand, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Deckblatt', '0', LL_TEXT, nRet )
				else if (strPBericht == "Wiedervorlageliste.lst") 
				{
					// Call PalReport( frmMain,'ZETTEL.QRP',
					// ':frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.strVon, :frmMain.strAn,
					// :frmMain.dtDatum, :frmMain.dtWieVor, :frmMain.lsBemerk
					// , :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt',
					// 'ArztNr, HalterNr, RechNr, Von, An, Datum, WieVor, Text, N1, N2, Str, Ort',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Nr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Von", App.frmMain.strVon, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("An", App.frmMain.strAn, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Wiedervorlagedatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtWieVor), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Bemerkungen", App.frmMain.lsBemerk, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "MYCO-Zettel_LEER.crd") 
				{
					// Call PalReport(frmMain,'MYCOLEER.QRP',
					// ':frmMain.nTANr,:frmMain.strTAN1,:frmMain.strTAN2,:frmMain.strTAStr,:frmMain.strTAOrt',
					// 'ArztNr, AName1, AName2, AStr, AOrt',nErr)
					if (locals.bAsField) 
					{
						// Call axLL.LlDefineFieldExt( 'Mitglied.Nr', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineFieldExt( 'Mitglied.Name1', frmMain.strTAN1, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Mitglied.Name2', frmMain.strTAN2, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Mitglied.Strasse', frmMain.strTAStr, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Mitglied.Ort', frmMain.strTAOrt, LL_TEXT, nRet )
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						// 14.01.08 Ä203
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmMain.nTANr);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "MYCO-Zettel.lst") 
				{
					// Call PalReport(frmManAbr,'MYCOHA.QRP',
					// ':frmManAbr.nTANr,:frmManAbr.nTHNr,:frmManAbr.strTHN1,:frmManAbr.strTHN2,:frmManAbr.strTHStr,:frmManAbr.strTHOrt, :frmManAbr.strTHLand,
					// :frmManAbr.strTAN1,:frmManAbr.strTAN2,:frmManAbr.strTAStr,:frmManAbr.strTAOrt',
					// 'ArztNr, HalterNr, HName1, HName2, HStr, HOrt, HLand, AName1, AName2, AStr, AOrt',nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmManAbr.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmManAbr.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name1", App.frmManAbr.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmManAbr.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmManAbr.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmManAbr.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Land", App.frmManAbr.strTHLand, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Nr", Sal.NumberToStrX(App.frmManAbr.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name1", App.frmManAbr.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name2", App.frmManAbr.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Strasse", App.frmManAbr.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Ort", App.frmManAbr.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Land", App.frmManAbr.strTALand, Const.LL_TEXT, ref locals.nRet);
						// 14.01.08 Ä203
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmManAbr.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmManAbr.nTANr);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmManAbr.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmManAbr.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmManAbr.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmManAbr.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmManAbr.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);

						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmManAbr.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Zahlungsmeldungen.lst" || strPBericht == "Zahlungsinfos.lst")  // 19.01.11 Ä498 + Zahlungsinfos
				{
					// Call PalReport( frmMain,'ZM.QRP',
					// ':frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.strVon, :frmMain.strAn,
					// :frmMain.dtDatum, :frmMain.strMeldung, :frmMain.nZMDM, :frmMain.lsBemerk
					// , :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt',
					// 'ArztNr, HalterNr, RechNr, Von, An, Datum, Meldung, ZMDM, Text, N1, N2, Str, Ort',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Nr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("PRNr", Sal.NumberToStrX(App.frmMain.nProzNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Von", App.frmMain.strVon, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("An", App.frmMain.strAn, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Bemerkungen", App.frmMain.lsBemerk, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Meldung", App.frmMain.strMeldung, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Zahlart", App.frmMain.strZahlArt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR", Sal.NumberToStrX(App.frmMain.nZMDM, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Solvenzliste.lst") 
				{
					// Call PalReport( frmMain,'SOLVENZ.QRP',
					// ':frmMain.nTANr,:frmMain.strTAN1,
					// :frmMain.dtBuchDat, :frmMain.nDMVorsch, :frmMain.nDMZahl, :frmMain.nDMRest, :frmMain.nDMZins,
					// :frmMain.nTage, :frmMain.nZinsProz',
					// 'ArztNr, AName1, Datum, DMVorsch, DMZahl, DMRest, DMZins, Tage, ZinsProz',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Vorschuss", Sal.NumberToStrX(App.frmMain.nDMVorsch, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Zahlg", Sal.NumberToStrX(App.frmMain.nDMZahl, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Rest", Sal.NumberToStrX(App.frmMain.nDMRest, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Zins", Sal.NumberToStrX(App.frmMain.nDMZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Tage", Sal.NumberToStrX(App.frmMain.nTage, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("ZinsProz", Sal.NumberToStrX(App.frmMain.nZinsProz, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Rechnungsabgaben.lst") 
				{
					// Call PalReport( frmMain,'RechAbListe.QRP',
					// ':frmMain.nTANr,:frmMain.strTAN1,
					// :frmMain.nTHNr,:frmMain.strTHN1,
					// :frmMain.dtBuchDat, :frmMain.nRechNr,
					// :frmMain.strBuchText, :frmMain.strZeichen, :frmMain.nDMRech',
					// 'ArztNr, AName1,
					// HalterNr, HName1,
					// Datum, RechNr,
					// RA, Zeichen, DMRech',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Nr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("RA", App.frmMain.strBuchText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Zeichen", App.frmMain.strZeichen, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR", Sal.NumberToStrX(App.frmMain.nDMRech, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmMain.nTANr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(App.frmMain.nTANr), 4, 0);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Impferinnerungen.lst") 
				{
					// Call SalReportPrint(frmDiskEin,'IMPFBRF.QRP',
					// ':frmDiskEin.strTAN1, :frmDiskEin.strTAN2, :frmDiskEin.strTAStr,
					// :frmDiskEin.strTAOrt,
					// :frmDiskEin.strTHKenn, :frmDiskEin.strTHN1, :frmDiskEin.strTHN2, :frmDiskEin.strTHStr, :frmDiskEin.strTHPlz,
					// :frmDiskEin.strTHOrt,
					// :frmDiskEin.dtRepDat,
					// :frmDiskEin.strRepBehArt,
					// :frmDiskEin.strRepTGS, :frmDiskEin.strRepTNA, :frmDiskEin.dtRepTGB, :frmDiskEin.strRepTRS,
					// :frmDiskEin.strRepAken, :frmDiskEin.strRepTyp,
					// :frmDiskEin.strRepRechBez,
					// :frmDiskEin.nRepAnz1',
					// 'Z1, Z2, Z3, Z4,
					// Kenn1, N1, N2, Str, PLZ, Ort,
					// Dat, BehArt, TGS, TNA, TGB, TRS, AKen, Typ,
					// RechBez, Anz1',
					// 1, RPT_PrintAll,1 ,1 , nErr )
					if (locals.bAsField) 
					{

						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmDiskEin.dtRepDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Bezeichnung", App.frmDiskEin.strRepRechBez, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("BehArt", App.frmDiskEin.strRepBehArt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Tier.Geschlecht", App.frmDiskEin.strRepTGS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Tier.Name", App.frmDiskEin.strRepTNA, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Tier.Rasse", App.frmDiskEin.strRepTRS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Tier.Geburtsdatum", Int.PalDateToStrJJJJMMTT(App.frmDiskEin.dtRepTGB), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Detail.Kennung", App.frmDiskEin.strRepAken, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Detail.Typ", App.frmDiskEin.strRepTyp, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Detail.Bezeichnung", App.frmDiskEin.strRepRechBez, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Detail.Anz1", Sal.NumberToStrX(App.frmDiskEin.nRepAnz1, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("fHalter.Kennung", App.frmDiskEin.strTHKenn, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("fHalter.Name1", App.frmDiskEin.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("fHalter.Name2", App.frmDiskEin.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("fHalter.Strasse", App.frmDiskEin.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("fHalter.PLZ", App.frmDiskEin.strTHPlz, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("fHalter.Ort", App.frmDiskEin.strTHOrt, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmDiskEin.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmDiskEin.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmDiskEin.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmDiskEin.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Kennung", App.frmDiskEin.strTHKenn, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name1", App.frmDiskEin.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmDiskEin.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmDiskEin.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.PLZ", App.frmDiskEin.strTHPlz, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmDiskEin.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						if (App.frmDiskEin.dfText4.Text == "Bestandsbuchdruck") 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bestandsbuch", "1", Const.LL_NUMERIC, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bestandsbuch", "0", Const.LL_NUMERIC, ref locals.nRet);
						}
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmDiskEin.dfTAL.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmDiskEin.dfTAL.Number);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmDiskEin.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmDiskEin.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmDiskEin.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmDiskEin.strTHPlz + " " + App.frmDiskEin.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						// 24.07.09 OTF299
						// Call axLL.LlDefineVariableExt( 'Bericht.Deckblatt', '1', LL_TEXT, nRet )
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.12.13
						strCustomerNumber = App.frmDiskEin.strTHKenn;
						// 19.05.22 Ä2019
						strArztHalter = Int.PalStrNum0(PalHolePMArzt(App.frmDiskEin.dfTAL.Number), 4, 0);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Brief TVSNr-Diskette.crd") 
				{
					// Call PalReport(frmTVSNrLw, 'TVSNR.QRP',
					// ':frmTVSNrLw.nArztNr,:frmTVSNrLw.strTAN1, :frmTVSNrLw.strTAN2,:frmTVSNrLw.strTAStr,:frmTVSNrLw.strTAOrt',
					// 'ArztNr, AName1, AName2, AStr, AOrt', nErr)
					if (locals.bAsField) 
					{
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmTVSNrLw.nArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmTVSNrLw.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmTVSNrLw.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmTVSNrLw.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmTVSNrLw.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmTVSNrLw.strTALand, Const.LL_TEXT, ref locals.nRet);
						// 14.01.08 Ä203
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmTVSNrLw.nArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmTVSNrLw.nArztNr);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmTVSNrLw.nArztNr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmTVSNrLw.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmTVSNrLw.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmTVSNrLw.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmTVSNrLw.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmTVSNrLw.strTALand, Const.LL_TEXT, ref locals.nRet);

						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmTVSNrLw.nArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Übergabe FiBu.lst") 
				{
					// Call PalReport(frmUebFibuBH, 'UEBFIBU.QRP',
					// ':frmUebFibuBH.nSoll, :frmUebFibuBH.nHaben, :frmUebFibuBH.strBelNr, :frmUebFibuBH.dtBelDat, :frmUebFibuBH.strBuchText, :frmUebFibuBH.nDM, :frmUebFibuBH.nTyp',
					// 'Soll, Haben, BelNr, BelDat, Text, DM, Typ',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Soll", Sal.NumberToStrX(App.frmUebFibuBH.nSoll, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Haben", Sal.NumberToStrX(App.frmUebFibuBH.nHaben, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.BelegNr", App.frmUebFibuBH.strBelNr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Datum", Int.PalDateToStrJJJJMMTT(App.frmUebFibuBH.dtBelDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Text", App.frmUebFibuBH.strBuchText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Typ", Sal.NumberToStrX(App.frmUebFibuBH.nTyp, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Betrag", Sal.NumberToStrX(App.frmUebFibuBH.nDM, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Mahnprotokoll.lst") 
				{
					// Call PalReport(frmMahn,'MAHNPROT.QRP',
					// ':frmMahn.nTANr,:frmMahn.strTAN1,:frmMahn.strTAN2,:frmMahn.strTAStr,:frmMahn.strTAOrt,
					// :frmMahn.nTHNr,:frmMahn.strTHN1,
					// :frmMahn.dtRechDat, :frmMahn.dtMahnDat, :frmMahn.nRechNr,
					// :frmMahn.nDMRech, :frmMahn.nDMMahn, :frmMahn.nDMZins,
					// :frmMahn.nMS',
					// 'ArztNr, AName1, AName2, AStr, AOrt,
					// HalterNr, HName1,
					// RechDat, MahnDat, RechNr,
					// DMRech, DMMahn, DMZins, MS',nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMahn.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMahn.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMahn.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMahn.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMahn.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMahn.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name", App.frmMahn.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Datum", Int.PalDateToStrJJJJMMTT(App.frmMahn.dtRechDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mahnung.Datum", Int.PalDateToStrJJJJMMTT(App.frmMahn.dtMahnDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.RechNr", Sal.NumberToStrX(App.frmMahn.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EUR-Rech", Sal.NumberToStrX(App.frmMahn.nDMRech, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EUR-Mahn", Sal.NumberToStrX(App.frmMahn.nDMMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EUR-Zins", Sal.NumberToStrX(App.frmMahn.nDMZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mahnstufe", Sal.NumberToStrX(App.frmMahn.nMS, 0), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Nr", Sal.NumberToStrX(App.frmMahn.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name1", App.frmMahn.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name2", App.frmMahn.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Strasse", App.frmMahn.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Ort", App.frmMahn.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						// 14.01.08 Ä203
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMahn.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmMahn.nTANr);
						if (strPSpezial.Scan("ED") != -1) 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "-" + Int.PalDateToStrJJJJMMTThhmmss(dtDDErfDat).Right(8), Const.LL_NUMERIC, ref locals.nRet);
							// 21.06.13 Ä902
							strCustomerNumber = Int.PalDateToStrJJJJMMTThhmmss(dtDDErfDat).Right(8);
							// 19.05.22 Ä2019
							strArztHalter = Int.PalStrNum0(nArztNrL, 4, 0);
							// 08.09.23 F5039
							bExtraDruck = true;
							// 24.10.18 F3145 + ddemail
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", App.frmMain.strDDEMail, Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
							// 21.06.13 Ä902
							strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0);
							// 06.05.13 Ä943
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMahn.nTANr, 0), Const.LL_TEXT, ref locals.nRet);
						}

						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strLand, Const.LL_TEXT, ref locals.nRet);

						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMahn.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMahn.strTAN1;
						if (App.frmMahn.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMahn.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "MB-Anfragen.lst") 
				{
					// Call PalReport(frmMahn,'AUFTRKAR.QRP',
					// ':frmMahn.nTANr,:frmMahn.strTAN1,:frmMahn.strTAN2,:frmMahn.strTAStr,:frmMahn.strTAOrt,
					// :frmMahn.nTHNr,:frmMahn.strTHAnr, :frmMahn.strTHN1, :frmMahn.strTHN2, :frmMahn.strTHStr, :frmMahn.strTHOrt, :frmMahn.strTHLand,
					// :frmMahn.dtRechDat, :frmMahn.nRechNr,
					// :frmMahn.nDMRech, :frmMahn.nDMMahn, :frmMahn.nDMZins, :frmMahn.strSolvenzprf',
					// 'ArztNr, AName1, AName2, AStr, AOrt,
					// HalterNr, HAnr, HName1,  HName2, HStr, HOrt, HLand,
					// RechDat,  RechNr,
					// DMRech, DMMahn, DMZins, Solvenzprf',nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMahn.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMahn.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMahn.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMahn.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMahn.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMahn.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name", App.frmMahn.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmMahn.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMahn.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMahn.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Land", App.frmMahn.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Datum", Int.PalDateToStrJJJJMMTT(App.frmMahn.dtRechDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Nr", Sal.NumberToStrX(App.frmMahn.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Rech", Sal.NumberToStrX(App.frmMahn.nDMRech, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Mahn", Sal.NumberToStrX(App.frmMahn.nDMMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Zins", Sal.NumberToStrX(App.frmMahn.nDMZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Solvenzprüfung", App.frmMahn.strSolvenzprf, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Nr", Sal.NumberToStrX(App.frmMahn.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name1", App.frmMahn.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name2", App.frmMahn.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Strasse", App.frmMahn.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Ort", App.frmMahn.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Nr", Sal.NumberToStrX(App.frmMahn.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name", App.frmMahn.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmMahn.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmMahn.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmMahn.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Land", App.frmMahn.strTHLand, Const.LL_TEXT, ref locals.nRet);
						// 25.06.15 Ä1225 + hgebdat
						App.frmMain.axLL.LlDefineVariableExt("Halter.GebDat", Int.PalDateToStrJJJJMMTT(App.frmMahn.dtTHGebDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Rechnung.Datum", Int.PalDateToStrJJJJMMTT(App.frmMahn.dtRechDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Rechnung.Nr", Sal.NumberToStrX(App.frmMahn.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-Rech", Sal.NumberToStrX(App.frmMahn.nDMRech, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-Mahn", Sal.NumberToStrX(App.frmMahn.nDMMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-Zins", Sal.NumberToStrX(App.frmMahn.nDMZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Solvenzprüfung", App.frmMahn.strSolvenzprf, Const.LL_TEXT, ref locals.nRet);
						// 15.02.10 OTF359
						nArztNrL = Int.PalCheckLarztnr(App.frmMahn.nTANr);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMahn.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMahn.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMahn.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMahn.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMahn.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMahn.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMahn.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Summenblatt.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mahnstufe", Sal.NumberToStrX(App.frmMahn.nMS, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Anzahl", Sal.NumberToStrX(App.frmMahn.nMahnAnz, 0), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "MB-Deckblatt.lst") 
				{
					// Call PalReport(frmMahn,'MBDECKBL.QRP',
					// ':frmMahn.nTANr,:frmMahn.strTAN1,:frmMahn.strTAN2,:frmMahn.strTAStr,:frmMahn.strTAOrt,
					// :frmMahn.nTHNr,:frmMahn.strTHN1,:frmMahn.strTHN2,:frmMahn.strTHStr,:frmMahn.strTHOrt,:frmMahn.strTHLand,
					// :frmMahn.nRg1,
					// :frmMahn.nHF1,
					// :frmMahn.nMG1,
					// :frmMahn.nZI1,
					// :frmMahn.dtDat1,
					// :frmMahn.dtMBDatum, :frmMahn.nGerKosten, :frmMahn.nMBNr, :frmMahn.strZust',
					// 'ArztNr, AName1, AName2, AStr, AOrt,
					// HalterNr, HName1, HName2, HStr, HOrt, HLand,
					// Rg1,
					// HF1,
					// MG1,
					// ZI1,
					// Dat1,
					// MBDATUM, GERKOSTEN, MBNr, Zei',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMahn.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMahn.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMahn.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMahn.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMahn.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMahn.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name", App.frmMahn.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmMahn.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMahn.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMahn.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Land", App.frmMahn.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Datum", Int.PalDateToStrJJJJMMTT(App.frmMahn.dtDat1), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Nr", Sal.NumberToStrX(App.frmMahn.nRg1, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-HF", Sal.NumberToStrX(App.frmMahn.nHF1, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Mahn", Sal.NumberToStrX(App.frmMahn.nMG1, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Zins", Sal.NumberToStrX(App.frmMahn.nZI1, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Gerichtskosten", Sal.NumberToStrX(App.frmMahn.nGerKosten, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 28.07.20 MB-Kosten
						App.frmMain.axLL.LlDefineFieldExt("EUR-MB-Kosten", (App.frmMahn.nDM1 + App.frmMahn.nDM3).ToString(2), Const.LL_NUMERIC, ref locals.nRet);

						App.frmMain.axLL.LlDefineFieldExt("MB-Datum", Int.PalDateToStrJJJJMMTT(App.frmMahn.dtMBDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("PR-Nr", Sal.NumberToStrX(App.frmMahn.nMBNr, 0), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Nr", Sal.NumberToStrX(App.frmMahn.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name1", App.frmMahn.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name2", App.frmMahn.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Strasse", App.frmMahn.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Ort", App.frmMahn.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Nr", Sal.NumberToStrX(App.frmMahn.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Name", App.frmMahn.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Name2", App.frmMahn.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Strasse", App.frmMahn.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Ort", App.frmMahn.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Land", App.frmMahn.strTHLand, Const.LL_TEXT, ref locals.nRet);
						// 20.03.19 Ä1726 + GebDat
						App.frmMain.axLL.LlDefineVariableExt("vHalter.GebDat", Int.PalDateToStrJJJJMMTT(App.frmMahn.dtGebDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.GebDat2", Int.PalDateToStrJJJJMMTT(App.frmMahn.dtGebDat2), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.GebDatText", App.frmMahn.strGebDatText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.GebDatText2", App.frmMahn.strGebDatText2, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("vPR-Nr", Sal.NumberToStrX(App.frmMahn.nMBNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zust", App.frmMahn.strZust, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMahn.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmMahn.nTANr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(App.frmMahn.nTANr), 4, 0);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMahn.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMahn.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Gerichtskosten.lst") 
				{
					// Call PalReport(frmMahn,'GERKOST.QRP',
					// ':frmMahn.nTANr, :frmMahn.nTHNr, :frmMahn.strTHN1,
					// :frmMahn.nRechNr, :frmMahn.nGerKosten, :frmMahn.nMBNr, :frmMahn.strZust',
					// 'ArztNr, HalterNr, HName1, RechNr, MBKosten, MBNr, Zei',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMahn.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMahn.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name", App.frmMahn.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Nr", Sal.NumberToStrX(App.frmMahn.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Gerichtskosten", Sal.NumberToStrX(App.frmMahn.nGerKosten, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("PR-Nr", Sal.NumberToStrX(App.frmMahn.nMBNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Zeichen", App.frmMahn.strZust, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Begleitschreiben.crd") 
				{
					// Call PalReport(frmUeberwListe, 'BEGLEIT.QRP',
					// ':frmUeberwListe.strAbsBLZ, :frmUeberwListe.strAbsKonto,
					// :frmUeberwListe.nSumSatz, :frmUeberwListe.nSumDM,
					// :frmUeberwListe.nSumKonto, :frmUeberwListe.nSumBLZ',
					// 'BLZ, Konto, Anzahl, Gesamt, KontrollKto, KontrollBLZ', nErr)
					if (locals.bAsField) 
					{
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Absender.BLZ", App.frmUeberwListe.strAbsBLZ, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Absender.Konto", App.frmUeberwListe.strAbsKonto, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("AnzSätze", Sal.NumberToStrX(App.frmUeberwListe.nSumSatz, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("SumSätze", Sal.NumberToStrX(App.frmUeberwListe.nSumDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Kontroll.Konto", Sal.NumberToStrX(App.frmUeberwListe.nSumKonto, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Kontroll.BLZ", Sal.NumberToStrX(App.frmUeberwListe.nSumBLZ, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Überweisungen.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Nummer", Sal.NumberToStrX(App.frmUeberwListe.tblUeberw.colnNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR", Sal.NumberToStrX(App.frmUeberwListe.tblUeberw.colnDM.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Name", App.frmUeberwListe.tblUeberw.colsTAName.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Art", App.frmUeberwListe.tblUeberw.colsStern.Text, Const.LL_TEXT, ref locals.nRet);
						// 16.11.07
						App.frmMain.axLL.LlDefineFieldExt("Verwendungszweck1", App.frmUeberwListe.tblUeberw.colsVerw1.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Verwendungszweck2", App.frmUeberwListe.tblUeberw.colsVerw2.Text, Const.LL_TEXT, ref locals.nRet);

					}
					else
					{
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				// Else If strPBericht = 'Ratenzahler-Kündigung.crd'
				// Call PalReport(frmRaten, 'RaKün.QRP',
				// ':frmRaten.strZei, :frmRaten.dfArztNr,
				// :frmRaten.dfHalterNr,:frmRaten.strTHN1,:frmRaten.strTHN2,:frmRaten.strTHStr,:frmRaten.strTHOrt, :frmRaten.strTHLand, :frmRaten.nFax, :frmRaten.nAussenst',
				// 'Zei, ArztNr,  HalterNr, HName1, HName2, HStr, HOrt, HLand, Fax, Aussenst', nErr)
				// If bAsField
				// Else
				// Call axLL.LlDefineVariableExt( 'Mitglied.Nr', SalNumberToStrX(frmRaten.dfArztNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Halter.Nr', SalNumberToStrX(frmRaten.dfHalterNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Halter.Name1', frmRaten.strTHN1, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Halter.Name2', frmRaten.strTHN2, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Halter.Strasse', frmRaten.strTHStr, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Halter.Ort', frmRaten.strTHOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Halter.Land', frmRaten.strTHLand, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Aussenstände', SalNumberToStrX(frmRaten.nAussenst,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'alsFax', SalNumberToStrX(frmRaten.nFax,0), LL_NUMERIC, nRet )
				// 19.02.08
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNr', SalNumberToStrX(frmRaten.dfArztNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNrL', SalNumberToStrX(PalHolePMArzt(frmRaten.dfArztNr),0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.HalterNr', SalNumberToStrX(frmRaten.dfHalterNr,0), LL_NUMERIC, nRet )
				// 21.06.13 Ä902
				// Set strCustomerNumber = PalStrNum0( PalHolePMArzt(frmRaten.dfArztNr),4,0) || PalStrNum0( PalHolePMArzt(frmRaten.dfHalterNr),6,0)
				// 06.05.13 Ä943
				// Call axLL.LlDefineVariableExt( 'PMEmail', PalHoleEMail( frmRaten.dfArztNr, frmRaten.dfHalterNr), LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.RechnungNr', '0', LL_NUMERIC, nRet )
				// 03.08.15 Ä1235
				// If PalIsSVAdresse( frmRaten.dfArztNr, frmRaten.dfHalterNr )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name1', strSVN1, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name2', strSVN2, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Strasse', strSVS, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Ort', strSVO, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Land', strSVLand, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Deckblatt', '1', LL_TEXT, nRet )
				// Else
				// Call axLL.LlDefineVariableExt( 'Bericht.Name1', frmRaten.strTHN1, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name2', frmRaten.strTHN2, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Strasse', frmRaten.strTHStr, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Ort', frmRaten.strTHOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Land', frmRaten.strTHLand, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Deckblatt', '0', LL_TEXT, nRet )
				// 24.04.09
				// Call axLL.LlDefineVariableExt( 'Bericht.anDritte', '0', LL_NUMERIC, nRet )
				else if (strPBericht == "Rechnungsabgabe.crd") 
				{
					// Call PalReport(frmRechAb, 'RechAb.QRP',
					// ':frmRechAb.strZei, :frmRechAb.dfArztNr,:frmRechAb.strTAN1, :frmRechAb.strTAN2,:frmRechAb.strTAStr,:frmRechAb.strTAOrt,
					// :frmRechAb.dfHalterNr,:frmRechAb.strTHN1,:frmRechAb.strTHN2,:frmRechAb.strTHStr,:frmRechAb.strTHOrt,:frmRechAb.strTHLand,
					// :frmRechAb.dfRechNr, :frmRechAb.dfRA1, :frmRechAb.dfRA2, :frmRechAb.dfRA3',
					// 'Zei, ArztNr, AName1, AName2, AStr, AOrt,
					// HalterNr, HName1, HName2, HStr, HOrt,HLand,
					// RechNr, RA1, RA2, RA3', nErr)
					if (locals.bAsField) 
					{
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmRechAb.dfArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmRechAb.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmRechAb.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmRechAb.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmRechAb.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmRechAb.strTALand, Const.LL_TEXT, ref locals.nRet);
                        // 10.04.24 ### +, atelpraxis, aemail
                        App.frmMain.axLL.LlDefineVariableExt("Mitglied.Telefon", App.frmRechAb.strTATel, Const.LL_TEXT, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("Mitglied.EMail", App.frmRechAb.strTAEMail, Const.LL_TEXT, ref locals.nRet);

                        App.frmMain.axLL.LlDefineVariableExt("Halter.Nr", Sal.NumberToStrX(App.frmRechAb.dfHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name1", App.frmRechAb.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmRechAb.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmRechAb.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmRechAb.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Land", App.frmRechAb.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Kanzlei.Zeile1", App.frmRechAb.dfRA1.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Kanzlei.Zeile2", App.frmRechAb.dfRA2.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Kanzlei.Zeile3", App.frmRechAb.dfRA3.Text, Const.LL_TEXT, ref locals.nRet);
						// 18.01.22 Ä1987 + , raan4, raan5
						App.frmMain.axLL.LlDefineVariableExt("Kanzlei.Zeile4", App.frmRechAb.dfRA4.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Kanzlei.Zeile5", App.frmRechAb.dfRA5.Text, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Rechnung.Nr", Sal.NumberToStrX(App.frmRechAb.dfRechNr.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmRechAb.dfArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmRechAb.dfArztNr.Number).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmRechAb.dfHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmRechAb.dfArztNr.Number, App.frmRechAb.dfHalterNr.Number), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 18.01.22 Ä1987 + , raan4, raan5
						// Call axLL.LlDefineVariableExt( 'Bericht.Name1', 'Kanzlei/Firma', LL_TEXT, nRet )
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmRechAb.dfRA1.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmRechAb.dfRA2.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmRechAb.dfRA3.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmRechAb.dfRA4.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmRechAb.dfRA5.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 24.04.09
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 09.05.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Vollstreckungsbescheidliste.lst") 
				{
					// Call PalReport(frmMBKalender,'VB.QRP',
					// ':frmMBKalender.nProzNr, :frmMBKalender.dtZustMB,
					// :frmMBKalender.strHN1, :frmMBKalender.strHN2, :frmMBKalender.strHS, :frmMBKalender.strHO',
					// 'ProzNr, ZustMB, HN1, HN2, HS, HO',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("PR-Nr", Sal.NumberToStrX(App.frmMBKalender.nProzNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Zustellungsdatum", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtZustMB), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name", App.frmMBKalender.strHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmMBKalender.strHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMBKalender.strHS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMBKalender.strHO, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Vollstreckungsauftrag.crd" || strPBericht == "Vollstreckungsauftrag2023.crd" || strPBericht == "Aufstellung der Forderungen für VA.crd" || strPBericht == "Aufstellung der Forderungen für Pfü.crd") 
				{
					// Call PalReport(frmMBKalender,'VA.QRP',
					// ':frmMBKalender.nProzNr, :frmMBKalender.strGerName, :frmMBKalender.dtZustMB, :frmMBKalender.dtZustVB,
					// :frmMBKalender.strAZ, :frmMBKalender.nDMHF, :frmMBKalender.nProzHF, :frmMBKalender.nDMMahn,
					// :frmMBKalender.nDMMB, :frmMBKalender.nDMVB, :frmMBKalender.nProzMBVB, :frmMBKalender.nDMVA,
					// :frmMBKalender.nDMFrueh, :frmMBKalender.nZinsHF, :frmMBKalender.nZinsMB,
					// :frmMBKalender.strHN1, :frmMBKalender.strHN2, :frmMBKalender.strHS, :frmMBKalender.strHO,
					// :frmMBKalender.nVAa, :frmMBKalender.nVAb, :frmMBKalender.nVAc,
					// :frmMBKalender.strZeichen, :frmMBKalender.strGerOrt,
					// :frmMBKalender.dtZaBuchDat, , :frmMBKalender.nZaDM,
					// :frmMBKalender.nVA0, :frmMBKalender.nVA1, :frmMBKalender.nVA2, :frmMBKalender.nVA2a, :frmMBKalender.nVA2b, :frmMBKalender.nVA2b1,
					// :frmMBKalender.nVA2b2, :frmMBKalender.nVA2b3, :frmMBKalender.nVA2b4, :frmMBKalender.nVA3,
					// :frmMBKalender.strVA3in, :frmMBKalender.dtVA3vom, :frmMBKalender.strVA3AZ, :frmMBKalender.strVAText',
					// 'ProzNr, GerName, ZustMB, ZustVB, AZ, DMHF, ProzHF, DMMahn, DMMB, DMVB, ProzMBVB, DMVA,
					// DMFrueh, ZinsHF, ZinsMB, HN1, HN2, HS, HO,VAa, VAb, VAc,
					// Zeichen, GerOrt, ZaBuchDat, ZaDM, VA0, VA1, VA2, VA2a, VA2b, VA2b1, VA2b2, VA2b3, VA2b4, VA3, VA3in, VA3vom, VA3AZ, Text',
					// nErr)
					// Set frmMBKalender.nZaDM = frmMBKalender.nZaDM * -1
					if (locals.bAsField) 
					{
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Proz.Nr", Sal.NumberToStrX(App.frmMBKalender.nProzNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Gericht", App.frmMBKalender.strGerName, Const.LL_TEXT, ref locals.nRet);
						// 13.05.19 Ä1852
						App.frmMain.axLL.LlDefineVariableExt("GerichtStrasse", App.frmMBKalender.strGerStrasse, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Zustellung.MB", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtZustMB), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zustellung.VB", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtZustVB), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Aktenzeichen", App.frmMBKalender.strAZ, Const.LL_TEXT, ref locals.nRet);
						// 29.09.21 F4815 + ,preazb, preazc, preazd
						App.frmMain.axLL.LlDefineVariableExt("AktenzeichenB", App.frmMBKalender.strAZb, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("AktenzeichenC", App.frmMBKalender.strAZc, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("AktenzeichenD", App.frmMBKalender.strAZd, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("EUR-HF", Sal.NumberToStrX(App.frmMBKalender.nDMHF, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Proz-HF", Sal.NumberToStrX(App.frmMBKalender.nProzHF, 1), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-Mahn", Sal.NumberToStrX(App.frmMBKalender.nDMMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-MB", Sal.NumberToStrX(App.frmMBKalender.nDMMB, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-VB", Sal.NumberToStrX(App.frmMBKalender.nDMVB, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Proz-MBVB", Sal.NumberToStrX(App.frmMBKalender.nProzMBVB, 1), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-VA", Sal.NumberToStrX(App.frmMBKalender.nDMVA, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-Früher", Sal.NumberToStrX(App.frmMBKalender.nDMFrueh, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zins-HF", Sal.NumberToStrX(App.frmMBKalender.nZinsHF, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zins-MB", Sal.NumberToStrX(App.frmMBKalender.nZinsMB, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name", App.frmMBKalender.strHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmMBKalender.strHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmMBKalender.strHS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmMBKalender.strHO, Const.LL_TEXT, ref locals.nRet);
						// 24.07.23 Ä2082
						App.frmMain.axLL.LlDefineVariableExt("Halter.Anrede", App.frmMBKEinzeldruck.strHTitel, Const.LL_TEXT, ref locals.nRet);
						// 12.03.13 Ä 894
						App.frmMain.axLL.LlDefineVariableExt("Halter.GebDat", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtHGebDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 02.07.20
						// Call axLL.LlDefineVariableExt( 'EUR-734', SalNumberToStrX(frmMBKalender.nVA734,2), LL_NUMERIC, nRet )

						// 25.07.13 F1679 Zust.Benutzer statt akt.Benutzer
						App.frmMain.axLL.LlDefineVariableExt("Zeichen", Int.PalZust(App.frmMBKalender.nArztNr), Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("GerOrt", App.frmMBKalender.strGerOrt, Const.LL_TEXT, ref locals.nRet);
						// Call axLL.LlDefineVariableExt( 'Text', frmMBKalender.strVAText, LL_TEXT, nRet )
						App.frmMain.axLL.LlDefineVariableExt("Zins-Lfd", Sal.NumberToStrX(App.frmMBKalender.nLfdZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 29.03.16
						App.frmMain.axLL.LlDefineVariableExt("Zins-LfdAlles", Sal.NumberToStrX(App.frmMBKalender.nLfdZinsAlles, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("HF-Alles", Sal.NumberToStrX(App.frmMBKalender.nHFAlles, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("VZAlles", Sal.NumberToStrX(App.frmMBKalender.nVZAlles, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("UVZAlles", Sal.NumberToStrX(App.frmMBKalender.nUVZAlles, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("UVZTit", Sal.NumberToStrX(App.frmMBKalender.nUVZTit, 2), Const.LL_NUMERIC, ref locals.nRet);
                        // 19.06.24 F5127
                        App.frmMain.axLL.LlDefineVariableExt("UVZPfue", Sal.NumberToStrX(App.frmMBKalender.nUVZPfue, 2), Const.LL_NUMERIC, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("UVZPfueGK", Sal.NumberToStrX(App.frmMBKalender.nUVZPfueGK, 2), Const.LL_NUMERIC, ref locals.nRet);

                        App.frmMain.axLL.LlDefineVariableExt("Zins-LfdVZ", Sal.NumberToStrX(App.frmMBKalender.nLfdZinsVZ, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 15.04.13 Ä927
						App.frmMain.axLL.LlDefineVariableExt("Zins-Vorg", Sal.NumberToStrX(App.frmMBKalender.nVorgZinsen, 2), Const.LL_NUMERIC, ref locals.nRet);
						// Set frmMBKalender.nLfdZins = frmMBKalender.nLfdZins + frmMBKalender.nVorgZinsen
						App.frmMain.axLL.LlDefineVariableExt("Rechnung.RechDat", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtRechDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMBKalender.nArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMBKalender.nHalterNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "Amtsgericht", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "Gerichtsvollzieherverteilungsstelle", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMBKalender.strGerOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 20.12.10 OTF366
						App.frmMain.axLL.LlDefineVariableExt("Auftrag", Sal.NumberToStrX(App.frmMBKalender.nVA0, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "1", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						if (App.frmMBKalender.nZaDM == SalNumber.Null) 
						{
							App.frmMBKalender.nZaDM = 0;
						}
						if (App.frmMBKalender.nLfdZins == SalNumber.Null) 
						{
							App.frmMBKalender.nLfdZins = 0;
						}
						App.frmMain.axLL.LlDefineVariableExt("lfdZins", Sal.NumberToStrX(App.frmMBKalender.nLfdZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zahlungen", (App.frmMBKalender.nZaDM * -1).ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						// 05.01.11
						App.frmMain.axLL.LlDefineVariableExt("Zusatzkosten", Sal.NumberToStrX(App.frmMBKalender.nZusatzkosten, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("ZusatzkostenText", App.frmMBKalender.strZusatzkosten, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Extra", App.frmMBKalender.strExtra, Const.LL_TEXT, ref locals.nRet);
						// 22.12.11 Ä697
						App.frmMain.axLL.LlDefineVariableExt("RaZaNr", strRaZaNr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("RaZaSaldo", nRZOffen.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä905
						Int.SqlImmedSel("SELECT prarztnr, prhalternr INTO :frmMain.nTANr, :frmMain.nTHNr FROM pr WHERE prnr = :frmMBKalender.nProzNr");
						App.frmMain.axLL.LlDefineVariableExt("ArztNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
                        // 29.01.13 Ä877
                        // If strPBericht = 'Vollstreckungsauftrag.crd'
                        // Call axLL.LlDefineVariableExt( 'cbBa1', SalNumberToStrX( frmMBKEinzeldruck.cbBa1 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBa2', SalNumberToStrX( frmMBKEinzeldruck.cbBa2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfBa1', frmMBKEinzeldruck.dfBa1, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBb1', SalNumberToStrX( frmMBKEinzeldruck.cbBb1 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBb2', SalNumberToStrX( frmMBKEinzeldruck.cbBb2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfBb1', frmMBKEinzeldruck.dfBb1, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBc1', SalNumberToStrX( frmMBKEinzeldruck.cbBc1 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBc2', SalNumberToStrX( frmMBKEinzeldruck.cbBc2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfBc1', frmMBKEinzeldruck.dfBc1, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBd1', SalNumberToStrX( frmMBKEinzeldruck.cbBd1 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBd2', SalNumberToStrX( frmMBKEinzeldruck.cbBd2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfBd1', frmMBKEinzeldruck.dfBd1, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBe', SalNumberToStrX( frmMBKEinzeldruck.cbBe , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBf', SalNumberToStrX( frmMBKEinzeldruck.cbBf , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBg', SalNumberToStrX( frmMBKEinzeldruck.cbBg , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfBg', frmMBKEinzeldruck.dfBg, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbC', SalNumberToStrX( frmMBKEinzeldruck.cbC , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfC', frmMBKEinzeldruck.mlC, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbD', SalNumberToStrX( frmMBKEinzeldruck.cbD , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbE', SalNumberToStrX( frmMBKEinzeldruck.cbE , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbF', SalNumberToStrX( frmMBKEinzeldruck.cbF , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbF1', SalNumberToStrX( frmMBKEinzeldruck.cbF1 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfF1', SalNumberToStrX(  frmMBKEinzeldruck.dfF1, 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbF2', SalNumberToStrX( frmMBKEinzeldruck.cbF2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbF3', SalNumberToStrX( frmMBKEinzeldruck.cbF3 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfF3', SalNumberToStrX(  frmMBKEinzeldruck.dfF3, 0 ), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbF4', SalNumberToStrX( frmMBKEinzeldruck.cbF4 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbF5', SalNumberToStrX( frmMBKEinzeldruck.cbF5 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG1', SalNumberToStrX( frmMBKEinzeldruck.cbG1 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG2', SalNumberToStrX( frmMBKEinzeldruck.cbG2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG3', SalNumberToStrX( frmMBKEinzeldruck.cbG3 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG4', SalNumberToStrX( frmMBKEinzeldruck.cbG4 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG5', SalNumberToStrX( frmMBKEinzeldruck.cbG5 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG6', SalNumberToStrX( frmMBKEinzeldruck.cbG6 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG7', SalNumberToStrX( frmMBKEinzeldruck.cbG7 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG8', SalNumberToStrX( frmMBKEinzeldruck.cbG8 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG9', SalNumberToStrX( frmMBKEinzeldruck.cbG9 , 0), LL_NUMERIC, nRet )
                        // Task:
                        // Inserted: 2016-02-23-08.55
                        // Symbol is undefined or unable to be referenced from current location: cbH1
                        // Call axLL.LlDefineVariableExt( 'cbH1', SalNumberToStrX( frmMBKEinzeldruck.cbH1 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbH2', SalNumberToStrX( frmMBKEinzeldruck.cbH2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbH3', SalNumberToStrX( frmMBKEinzeldruck.cbH3 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbH4', SalNumberToStrX( frmMBKEinzeldruck.cbH4 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbH5', SalNumberToStrX( frmMBKEinzeldruck.cbH5 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbH6', SalNumberToStrX( frmMBKEinzeldruck.cbH6 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbI', SalNumberToStrX( frmMBKEinzeldruck.cbI , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbI1', SalNumberToStrX( frmMBKEinzeldruck.cbI1 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbI2', SalNumberToStrX( frmMBKEinzeldruck.cbI2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbI3', SalNumberToStrX( frmMBKEinzeldruck.cbI3 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfI', frmMBKEinzeldruck.mlI, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbJ1', SalNumberToStrX( frmMBKEinzeldruck.cbJ1 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbJ2', SalNumberToStrX( frmMBKEinzeldruck.cbJ2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbJ3', SalNumberToStrX( frmMBKEinzeldruck.cbJ3 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbJ4', SalNumberToStrX( frmMBKEinzeldruck.cbJ4 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbK', SalNumberToStrX( frmMBKEinzeldruck.cbK , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfK', frmMBKEinzeldruck.mlK, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbL1', SalNumberToStrX( frmMBKEinzeldruck.cbL1 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbL2', SalNumberToStrX( frmMBKEinzeldruck.cbL2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfL1', frmMBKEinzeldruck.dfL1, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfL2', frmMBKEinzeldruck.dfL2, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfL3', frmMBKEinzeldruck.dfL3, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbL3', SalNumberToStrX( frmMBKEinzeldruck.cbL3 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbL4', SalNumberToStrX( frmMBKEinzeldruck.cbL4 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbL5', SalNumberToStrX( frmMBKEinzeldruck.cbL5 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbM1', SalNumberToStrX( frmMBKEinzeldruck.cbM1 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbM2', SalNumberToStrX( frmMBKEinzeldruck.cbM2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbM3', SalNumberToStrX( frmMBKEinzeldruck.cbM3 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbM4', SalNumberToStrX( frmMBKEinzeldruck.cbM4 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfM4', frmMBKEinzeldruck.mlM4, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbM5', SalNumberToStrX( frmMBKEinzeldruck.cbM5 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbN1', SalNumberToStrX( frmMBKEinzeldruck.cbN1 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbN2', SalNumberToStrX( frmMBKEinzeldruck.cbN2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbN3', SalNumberToStrX( frmMBKEinzeldruck.cbN3 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbN4', SalNumberToStrX( frmMBKEinzeldruck.cbN4 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbN5', SalNumberToStrX( frmMBKEinzeldruck.cbN5 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbN6', SalNumberToStrX( frmMBKEinzeldruck.cbN6 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbN7', SalNumberToStrX( frmMBKEinzeldruck.cbN7 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbN8', SalNumberToStrX( frmMBKEinzeldruck.cbN8 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbN9', SalNumberToStrX( frmMBKEinzeldruck.cbN9 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbO', SalNumberToStrX( frmMBKEinzeldruck.cbO , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPa', SalNumberToStrX( frmMBKEinzeldruck.cbPa , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPa1', SalNumberToStrX( frmMBKEinzeldruck.cbPa1 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPa2', SalNumberToStrX( frmMBKEinzeldruck.cbPa2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPa3', SalNumberToStrX( frmMBKEinzeldruck.cbPa3 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPa4', SalNumberToStrX( frmMBKEinzeldruck.cbPa4 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfPa4', PalDateToStrJJJJMMTT( frmMBKEinzeldruck.dfPa4 ), LL_DATE_YYYYMMDD, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPa5', SalNumberToStrX( frmMBKEinzeldruck.cbPa5 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfPa5', PalDateToStrJJJJMMTT( frmMBKEinzeldruck.dfPa5 ), LL_DATE_YYYYMMDD, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPb', SalNumberToStrX( frmMBKEinzeldruck.cbPb , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPc', SalNumberToStrX( frmMBKEinzeldruck.cbPc , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfPc', PalDateToStrJJJJMMTT( frmMBKEinzeldruck.dfPc ), LL_DATE_YYYYMMDD, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPd', SalNumberToStrX( frmMBKEinzeldruck.cbPd , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPe', SalNumberToStrX( frmMBKEinzeldruck.cbPe , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbQ1', SalNumberToStrX( frmMBKEinzeldruck.cbQ1 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbQ2', SalNumberToStrX( frmMBKEinzeldruck.cbQ2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbR1', SalNumberToStrX( frmMBKEinzeldruck.cbR1 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbR2', SalNumberToStrX( frmMBKEinzeldruck.cbR2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfR2', frmMBKEinzeldruck.mlR2, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbR3', SalNumberToStrX( frmMBKEinzeldruck.cbR3 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbR4', SalNumberToStrX( frmMBKEinzeldruck.cbR4 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbR5', SalNumberToStrX( frmMBKEinzeldruck.cbR5 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbR6', SalNumberToStrX( frmMBKEinzeldruck.cbR6 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbR7', SalNumberToStrX( frmMBKEinzeldruck.cbR7 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbR8', SalNumberToStrX( frmMBKEinzeldruck.cbR8 , 0), LL_NUMERIC, nRet )
                        // 12.03.13 Ä894 ersetzt durch HGEBDAT
                        // Call axLL.LlDefineVariableExt( 'GebDat', PalDateToStrJJJJMMTT( frmMBKEinzeldruck.dfVASchuldner ), LL_DATE_YYYYMMDD, nRet )
                        // Else If strPBericht = 'VollstreckungsauftragEinzel.crd'
                        // Call axLL.LlDefineVariableExt( 'cbBa1', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBa2', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfBa1', 'Vollstreckungsbescheid des Amtsgerichtes Uelzen vom ' || PalDateToStrDE( frmMBKalender.dtZustVB ), LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBb1', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBb2', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfBb1', '', LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBc1', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBc2', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfBc1', '', LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBd1', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBd2', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfBd1', '', LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBe', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBf', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbBg', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfBg', '', LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbC', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfC', '', LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbD', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbE', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbF', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbF1', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfF1', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbF2', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbF3', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfF3', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbF4', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbF5', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG1', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG2', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG3', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG4', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG5', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG6', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG7', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG8', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG9', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbH1', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbH2', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbH3', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbH4', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbH5', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbH6', '0', LL_NUMERIC, nRet )
                        // If frmMBKalender.nDMHF<500
                        // Call axLL.LlDefineVariableExt( 'cbI', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbI1', '0', LL_NUMERIC, nRet )
                        // Else
                        // Call axLL.LlDefineVariableExt( 'cbI', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbI1', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbI2', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbI3', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfI', '', LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbJ1', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbJ2', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbJ3', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbJ4', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbK', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfK', '', LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbL1', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbL2', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfL2', '', LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfL3', '', LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbL3', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbL4', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbL5', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbM1', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbM2', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbM3', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbM4', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfM4', '', LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbM5', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbN1', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbN2', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbN3', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbN4', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbN5', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbN6', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbN7', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbN8', '1', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbN9', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbO', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPa', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPa1', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPa2', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPa3', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPa4', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfPa4', '', LL_DATE_YYYYMMDD, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPa5', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfPa5', '', LL_DATE_YYYYMMDD, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPb', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPc', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfPc', '', LL_DATE_YYYYMMDD, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPd', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbPe', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbQ1', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbQ2', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbR1', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbR2', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfR2', '', LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbR3', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbR4', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbR5', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbR6', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbR7', '0', LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbR8', '0', LL_NUMERIC, nRet )
                        // 04.11.14 Ä1130
                        // Call axLL.LlDefineVariableExt( 'cbgemAnlage', SalNumberToStrX( frmMBKEinzeldruck.cbgemAnlage , 0), LL_NUMERIC, nRet )
                        // 23.02.16 Ä1334
                        // Call axLL.LlDefineVariableExt( 'cbNeuC2', SalNumberToStrX( frmMBKEinzeldruck.cbC2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuC3', SalNumberToStrX( frmMBKEinzeldruck.cbC3 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfNeuC3', frmMBKEinzeldruck.dfC3 , LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfNeuL3', frmMBKEinzeldruck.dfL3, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfNeuI2', frmMBKEinzeldruck.mlI2, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfNeuG3', frmMBKEinzeldruck.dfG3, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuH1a', SalNumberToStrX( frmMBKEinzeldruck.cbH1a , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuH1b', SalNumberToStrX( frmMBKEinzeldruck.cbH1b , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuH7', SalNumberToStrX( frmMBKEinzeldruck.cbH7 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfNeuH7', frmMBKEinzeldruck.dfH7, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuJ5', SalNumberToStrX( frmMBKEinzeldruck.cbJ5 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuJ6', SalNumberToStrX( frmMBKEinzeldruck.cbJ6 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuJ7', SalNumberToStrX( frmMBKEinzeldruck.cbJ7 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuJ8', SalNumberToStrX( frmMBKEinzeldruck.cbJ8 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuO1', SalNumberToStrX( frmMBKEinzeldruck.cbO1 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfNeuO1', frmMBKEinzeldruck.dfO1, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuO2', SalNumberToStrX( frmMBKEinzeldruck.cbO2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfNeuO2', frmMBKEinzeldruck.dfO2, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuO3', SalNumberToStrX( frmMBKEinzeldruck.cbO3 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfNeuO3', frmMBKEinzeldruck.dfO3, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuN5', SalNumberToStrX( frmMBKEinzeldruck.cbN5 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfNeuN5', frmMBKEinzeldruck.dfN5, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuN10', SalNumberToStrX( frmMBKEinzeldruck.cbN10 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfNeuN10', frmMBKEinzeldruck.dfN10, LL_TEXT, nRet )
                        // 16.03.16
                        // Call axLL.LlDefineVariableExt( 'cbNeuH', SalNumberToStrX( frmMBKEinzeldruck.cbNeuH , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuH1', SalNumberToStrX( frmMBKEinzeldruck.cbNeuH1 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuH2', SalNumberToStrX( frmMBKEinzeldruck.cbNeuH2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuH3', SalNumberToStrX( frmMBKEinzeldruck.cbNeuH3 , 0), LL_NUMERIC, nRet )
                        // 09.01.17 Ä1470
                        // Call axLL.LlDefineVariableExt( 'cbJ4', SalNumberToStrX( frmMBKEinzeldruck.cbJ4 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuL8', SalNumberToStrX( frmMBKEinzeldruck.cbneuL8 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuL7', SalNumberToStrX( frmMBKEinzeldruck.cbneuL7 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbNeuM5', SalNumberToStrX( frmMBKEinzeldruck.cbneuM5 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfNeuM5', frmMBKEinzeldruck.dfneuM5, LL_TEXT, nRet )
                        // 27.03.18 Ä1724
                        // Call axLL.LlDefineVariableExt( 'cbI4', SalNumberToStrX( frmMBKEinzeldruck.cbI4 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'dfI4', frmMBKEinzeldruck.mlI4, LL_TEXT, nRet )
                        // 01.11.19 Ä1877
                        // Call axLL.LlDefineVariableExt( 'cbNeuL3', SalNumberToStrX( frmMBKEinzeldruck.cbNeuL3 , 0), LL_NUMERIC, nRet )
                        // 05.04.23 Ä2095
                        // Call axLL.LlDefineVariableExt( 'cb754', SalNumberToStrX( frmMBKEinzeldruck.cb754 , 0), LL_NUMERIC, nRet )
                        if (strPBericht == "Vollstreckungsauftrag2023.crd") 
						{
                            // 24.07.23 Ä2082
                            App.frmMain.axLL.LlDefineVariableExt("cbE1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnE1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbG2", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnG2.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbG2b", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnG2b.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbG3", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnG3.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbH1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnH1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbH1a", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnH1a.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("dfH1a1", App.frmMBKEinzeldruck.mlVAnH1a.Text, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("dfH1a2", App.frmMBKEinzeldruck.mlVAnH1a2.Text, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbH2", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnH2.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbH3", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnH3.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbH3a", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnH3a.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbI1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnI1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("dfVAnJa", App.frmMBKEinzeldruck.dfVAnJa.Text, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("dfVAnJb", App.frmMBKEinzeldruck.dfVAnJb.Text, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("dfVAnJc", App.frmMBKEinzeldruck.dfVAnJc.Text, Const.LL_TEXT, ref locals.nRet);
                            // 09.10.24
                            App.frmMain.axLL.LlDefineVariableExt("cbL1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnL1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbL1a", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnL1a.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbL1b", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnL1b.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbL1c", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnL1c.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbL1d", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnL1d.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbL1e", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnL1e.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("dfL1f", App.frmMBKEinzeldruck.dfVAnL1f.Text, Const.LL_TEXT, ref locals.nRet);

                            App.frmMBKEinzeldruck.cbVAnL1.Checked = false;
                            App.frmMBKEinzeldruck.cbVAnL1a.Checked = false;
                            App.frmMBKEinzeldruck.cbVAnL1b.Checked = false;
                            App.frmMBKEinzeldruck.cbVAnL1c.Checked = false;
                            App.frmMBKEinzeldruck.cbVAnL1d.Checked = false;
                            App.frmMBKEinzeldruck.cbVAnL1e.Checked = false;
                            App.frmMBKEinzeldruck.dfVAnL1f.Text = "";

                            App.frmMain.axLL.LlDefineVariableExt("cbL3", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnL3.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbL4", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnL4.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbM1b", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnM1b.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbM1c", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnM1c.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbM2", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnM2.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbM2a", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnM2a.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbM2b", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnM2b.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbM2b1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnM2b1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbM2b2", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnM2b2.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbM2b3", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnM2b3.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbM3", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnM3.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("dfM3", App.frmMBKEinzeldruck.dfVAnM3.Text, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("dfM2b2.Bezeichnung", App.frmMBKEinzeldruck.dfVAnM2b2Bezeichnung.Text, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("dfM2b2.Hausnr", App.frmMBKEinzeldruck.dfVAnM2b2Hausnr.Text, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("dfM2b2.Ort", App.frmMBKEinzeldruck.dfVAnM2b2Ort.Text, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("dfM2b2.PLZ", App.frmMBKEinzeldruck.dfVAnM2b2PLZ.Text, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("dfM2b2.Postfach", App.frmMBKEinzeldruck.dfVAnM2b2Postfach.Text, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("dfM2b2.Strasse", App.frmMBKEinzeldruck.dfVAnM2b2Strasse.Text, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("dfM2b2.Anhaltspunkte", App.frmMBKEinzeldruck.dfVAnM2b2Anhaltspunkte.Text, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbM1b", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnM2b.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbN1a", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnN1a.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbN2", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnN2.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbN3", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnN3.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbN5", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnN5.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("mlN5", App.frmMBKEinzeldruck.mlVAnN5.Text, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbO1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnO1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("mlO1", App.frmMBKEinzeldruck.mlVAnO1.Text, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbO2", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnO2.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("mlO2", App.frmMBKEinzeldruck.mlVAnO2.Text, Const.LL_TEXT, ref locals.nRet);
                            // 09.10.24 ###
                            App.frmMain.axLL.LlDefineVariableExt("cbQ1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnQ1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbQ1a", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnQ1a.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbQ1b", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnQ1b.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbQ2", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnQ2.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbQ3", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnQ3.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbQ4", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnQ4.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("cbQ5", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbVAnQ5.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("dfQ3", App.frmMBKEinzeldruck.dfVAnQ3.Text, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("dfQ4", App.frmMBKEinzeldruck.dfVAnQ4.Text, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("dfQ5", App.frmMBKEinzeldruck.dfVAnQ5.Text, Const.LL_TEXT, ref locals.nRet);

                            // 24.07.23 Ä2082
                            // Call SqlImmed('SELECT
                            // preaganra, preagn1a, preagn2a, preagn3a, preagrfa, preagsha, preagplza, preagoa, preagala, prepgma, prepgplza, prepgoa,
                            // preaganrb, preagn1b, preagn2b, preagn3b, preagrfb, preagshb, preagplzb, preagob, preagalb, prepgmb, prepgplzb, prepgob,
                            // preaganrc, preagn1c, preagn2c, preagn3c, preagrfc, preagshc, preagplzc, preagoc, preagalc, prepgmc, prepgplzc, prepgoc,
                            // preaganrd, preagn1d, preagn2d, preagn3d, preagrfd, preagshd, preagplzd, preagod, preagald, prepgmd, prepgplzd, prepgod,
                            // preaggvfua, preaggvvna, preaggvsha, preaggvplza, preaggvoa, preaggvala,
                            // preaggvfub, preaggvvnb, preaggvshb, preaggvplzb, preaggvob, preaggvalb,
                            // preaggvfuc, preaggvvnc, preaggvshc, preaggvplzc, preaggvoc, preaggvalc,
                            // preaggvfud, preaggvvnd, preaggvshd, preaggvplzd, preaggvod, preaggvald,
                            // preaggvfua2, preaggvvna2, preaggvsha2, preaggvplza2, preaggvoa2, preaggvala2,
                            // preaggvfub2, preaggvvnb2, preaggvshb2, preaggvplzb2, preaggvob2, preaggvalb2,
                            // preaggvfuc2, preaggvvnc2, preaggvshc2, preaggvplzc2, preaggvoc2, preaggvalc2,
                            // preaggvfud2, preaggvvnd2, preaggvshd2, preaggvplzd2, preaggvod2, preaggvald2,
                            // preaggvfua3, preaggvvna3, preaggvsha3, preaggvplza3, preaggvoa3, preaggvala3,
                            // preaggvfub3, preaggvvnb3, preaggvshb3, preaggvplzb3, preaggvob3, preaggvalb3,
                            // preaggvfuc3, preaggvvnc3, preaggvshc3, preaggvplzc3, preaggvoc3, preaggvalc3,
                            // preaggvfud3, preaggvvnd3, preaggvshd3, preaggvplzd3, preaggvod3, preaggvald3,
                            // preaggvfua4, preaggvvna4, preaggvsha4, preaggvplza4, preaggvoa4, preaggvala4,
                            // preaggvfub4, preaggvvnb4, preaggvshb4, preaggvplzb4, preaggvob4, preaggvalb4,
                            // preaggvfuc4, preaggvvnc4, preaggvshc4, preaggvplzc4, preaggvoc4, preaggvalc4,
                            // preaggvfud4, preaggvvnd4, preaggvshd4, preaggvplzd4, preaggvod4, preaggvald4)
                            // INTO
                            // :frmMBKEinzeldruck.strAGANRa, :frmMBKEinzeldruck.strAGN1a, :frmMBKEinzeldruck.strAGN2a, :frmMBKEinzeldruck.strAGN3a, :frmMBKEinzeldruck.strAGRFa,
                            // :frmMBKEinzeldruck.strAGSHa, :frmMBKEinzeldruck.strAGPLZa, :frmMBKEinzeldruck.strAGOa, :frmMBKEinzeldruck.strAGALa, :frmMBKEinzeldruck.dfPGMa, :frmMBKEinzeldruck.dfPGPLZa, :frmMBKEinzeldruck.dfPGOa,
                            // :frmMBKEinzeldruck.strAGANRb, :frmMBKEinzeldruck.strAGN1b, :frmMBKEinzeldruck.strAGN2b, :frmMBKEinzeldruck.strAGN3b, :frmMBKEinzeldruck.strAGRFb,
                            // :frmMBKEinzeldruck.strAGSHb, :frmMBKEinzeldruck.strAGPLZb, :frmMBKEinzeldruck.strAGOb, :frmMBKEinzeldruck.strAGALb, :frmMBKEinzeldruck.dfPGMb, :frmMBKEinzeldruck.dfPGPLZb, :frmMBKEinzeldruck.dfPGOb,
                            // :frmMBKEinzeldruck.strAGANRc, :frmMBKEinzeldruck.strAGN1c, :frmMBKEinzeldruck.strAGN2c, :frmMBKEinzeldruck.strAGN3c, :frmMBKEinzeldruck.strAGRFc,
                            // :frmMBKEinzeldruck.strAGSHc, :frmMBKEinzeldruck.strAGPLZc, :frmMBKEinzeldruck.strAGOc, :frmMBKEinzeldruck.strAGALc, :frmMBKEinzeldruck.dfPGMc, :frmMBKEinzeldruck.dfPGPLZc, :frmMBKEinzeldruck.dfPGOc,
                            // :frmMBKEinzeldruck.strAGANRd, :frmMBKEinzeldruck.strAGN1d, :frmMBKEinzeldruck.strAGN2d, :frmMBKEinzeldruck.strAGN3d, :frmMBKEinzeldruck.strAGRFd,
                            // :frmMBKEinzeldruck.strAGSHd, :frmMBKEinzeldruck.strAGPLZd, :frmMBKEinzeldruck.strAGOd, :frmMBKEinzeldruck.strAGALd, :frmMBKEinzeldruck.dfPGMd, :frmMBKEinzeldruck.dfPGPLZd, :frmMBKEinzeldruck.dfPGOd,
                            // :frmMBKEinzeldruck.strAGGVFUa, :frmMBKEinzeldruck.strAGGVVNa, :frmMBKEinzeldruck.strAGGVSHa, :frmMBKEinzeldruck.strAGGVPLZa, :frmMBKEinzeldruck.strAGGVOa, :frmMBKEinzeldruck.strAGGVALa,
                            // :frmMBKEinzeldruck.strAGGVFUb, :frmMBKEinzeldruck.strAGGVVNb, :frmMBKEinzeldruck.strAGGVSHb, :frmMBKEinzeldruck.strAGGVPLZb, :frmMBKEinzeldruck.strAGGVOb, :frmMBKEinzeldruck.strAGGVALb,
                            // :frmMBKEinzeldruck.strAGGVFUc, :frmMBKEinzeldruck.strAGGVVNc, :frmMBKEinzeldruck.strAGGVSHc, :frmMBKEinzeldruck.strAGGVPLZc, :frmMBKEinzeldruck.strAGGVOc, :frmMBKEinzeldruck.strAGGVALc,
                            // :frmMBKEinzeldruck.strAGGVFUd, :frmMBKEinzeldruck.strAGGVVNd, :frmMBKEinzeldruck.strAGGVSHd, :frmMBKEinzeldruck.strAGGVPLZd, :frmMBKEinzeldruck.strAGGVOd, :frmMBKEinzeldruck.strAGGVALd,
                            // :frmMBKEinzeldruck.strAGGVFUa2, :frmMBKEinzeldruck.strAGGVVNa2, :frmMBKEinzeldruck.strAGGVSHa2, :frmMBKEinzeldruck.strAGGVPLZa2, :frmMBKEinzeldruck.strAGGVOa2, :frmMBKEinzeldruck.strAGGVALa2,
                            // :frmMBKEinzeldruck.strAGGVFUb2, :frmMBKEinzeldruck.strAGGVVNb2, :frmMBKEinzeldruck.strAGGVSHb2, :frmMBKEinzeldruck.strAGGVPLZb2, :frmMBKEinzeldruck.strAGGVOb2, :frmMBKEinzeldruck.strAGGVALb2,
                            // :frmMBKEinzeldruck.strAGGVFUc2, :frmMBKEinzeldruck.strAGGVVNc2, :frmMBKEinzeldruck.strAGGVSHc2, :frmMBKEinzeldruck.strAGGVPLZc2, :frmMBKEinzeldruck.strAGGVOc2, :frmMBKEinzeldruck.strAGGVALc2,
                            // :frmMBKEinzeldruck.strAGGVFUd2, :frmMBKEinzeldruck.strAGGVVNd2, :frmMBKEinzeldruck.strAGGVSHd2, :frmMBKEinzeldruck.strAGGVPLZd2, :frmMBKEinzeldruck.strAGGVOd2, :frmMBKEinzeldruck.strAGGVALd2,
                            // :frmMBKEinzeldruck.strAGGVFUa3, :frmMBKEinzeldruck.strAGGVVNa3, :frmMBKEinzeldruck.strAGGVSHa3, :frmMBKEinzeldruck.strAGGVPLZa3, :frmMBKEinzeldruck.strAGGVOa3, :frmMBKEinzeldruck.strAGGVALa3,
                            // :frmMBKEinzeldruck.strAGGVFUb3, :frmMBKEinzeldruck.strAGGVVNb3, :frmMBKEinzeldruck.strAGGVSHb3, :frmMBKEinzeldruck.strAGGVPLZb3, :frmMBKEinzeldruck.strAGGVOb3, :frmMBKEinzeldruck.strAGGVALb3,
                            // :frmMBKEinzeldruck.strAGGVFUc3, :frmMBKEinzeldruck.strAGGVVNc3, :frmMBKEinzeldruck.strAGGVSHc3, :frmMBKEinzeldruck.strAGGVPLZc3, :frmMBKEinzeldruck.strAGGVOc3, :frmMBKEinzeldruck.strAGGVALc3,
                            // :frmMBKEinzeldruck.strAGGVFUd3, :frmMBKEinzeldruck.strAGGVVNd3, :frmMBKEinzeldruck.strAGGVSHd3, :frmMBKEinzeldruck.strAGGVPLZd3, :frmMBKEinzeldruck.strAGGVOd3, :frmMBKEinzeldruck.strAGGVALd3,
                            // :frmMBKEinzeldruck.strAGGVFUa4, :frmMBKEinzeldruck.strAGGVVNa4, :frmMBKEinzeldruck.strAGGVSHa4, :frmMBKEinzeldruck.strAGGVPLZa4, :frmMBKEinzeldruck.strAGGVOa4, :frmMBKEinzeldruck.strAGGVALa4,
                            // :frmMBKEinzeldruck.strAGGVFUb4, :frmMBKEinzeldruck.strAGGVVNb4, :frmMBKEinzeldruck.strAGGVSHb4, :frmMBKEinzeldruck.strAGGVPLZb4, :frmMBKEinzeldruck.strAGGVOb4, :frmMBKEinzeldruck.strAGGVALb4,
                            // :frmMBKEinzeldruck.strAGGVFUc4, :frmMBKEinzeldruck.strAGGVVNc4, :frmMBKEinzeldruck.strAGGVSHc4, :frmMBKEinzeldruck.strAGGVPLZc4, :frmMBKEinzeldruck.strAGGVOc4, :frmMBKEinzeldruck.strAGGVALc4,
                            // :frmMBKEinzeldruck.strAGGVFUd4, :frmMBKEinzeldruck.strAGGVVNd4, :frmMBKEinzeldruck.strAGGVSHd4, :frmMBKEinzeldruck.strAGGVPLZd4, :frmMBKEinzeldruck.strAGGVOd4, :frmMBKEinzeldruck.strAGGVALd4
                            // FROM pre WHERE preproznr = :frmMBKEinzeldruck.dfPR1')
                            App.frmMain.axLL.LlDefineVariableExt("PRE.AGANRa", Sal.NumberToStrX(App.frmMBKEinzeldruck.nAGANRa, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("PRE.AGANRb", Sal.NumberToStrX(App.frmMBKEinzeldruck.nAGANRb, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("PRE.AGANRc", Sal.NumberToStrX(App.frmMBKEinzeldruck.nAGANRc, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("PRE.AGANRd", Sal.NumberToStrX(App.frmMBKEinzeldruck.nAGANRd, 0), Const.LL_NUMERIC, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("PRE.AGN1a", App.frmMBKEinzeldruck.strAGN1a, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("PRE.AGN2a", App.frmMBKEinzeldruck.strAGN2a, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("PRE.AGRFa", App.frmMBKEinzeldruck.strAGRFa, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("PRE.AGSHa", App.frmMBKEinzeldruck.strAGSHa, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("PRE.AGPLZa", App.frmMBKEinzeldruck.strAGPLZa, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("PRE.AGOa", App.frmMBKEinzeldruck.strAGOa, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("PRE.AGALa", App.frmMBKEinzeldruck.strAGALa, Const.LL_TEXT, ref locals.nRet);
                            // Call axLL.LlDefineVariableExt( 'PRE.AGGV', frmMBKEinzeldruck.strAGALa, LL_TEXT, nRet )
                            // 13.10.23 Ä2029
                            App.frmMain.axLL.LlDefineVariableExt("Halter.VN", strHVN, Const.LL_TEXT, ref locals.nRet);
                            App.frmMain.axLL.LlDefineVariableExt("Halter.NN", strHNN, Const.LL_TEXT, ref locals.nRet);
                        }
                        // 15.04.13 Ä920
                        // Call axLL.LlDefineVariableExt( 'GebDatEheP', PalDateToStrJJJJMMTT( frmMBKEinzeldruck.dfVAGebDatEheP ), LL_DATE_YYYYMMDD, nRet )
                        // 03.09.21 Ä1968
                        App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
                        // 03.01.18
                        App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
                        // 02.10.24 KN ###
                        App.frmMain.axLL.LlDefineVariableExt("SeitKo", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtSeitKo), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("PfueErlass", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtPfueErlass), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("VAErlass", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtVAErlass), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
                        // 09.10.24 ###
                        App.frmMBKalender.strZustZei = Int.PalZust(App.frmMain.nTANr);
                        Int.SqlImmedSel(@"SELECT bnname, bntel, bnemail INTO :frmMBKalender.strZuName, :frmMBKalender.strZuTel, :frmMBKalender.strZuEMail
FROM bn WHERE bnzei = :frmMBKalender.strZustZei");
                        App.frmMain.axLL.LlDefineVariableExt("Zust.Name", App.frmMBKalender.strZuName, Const.LL_TEXT, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("Zust.EMail", App.frmMBKalender.strZuEMail, Const.LL_TEXT, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("Zust.Tel", App.frmMBKalender.strZuTel, Const.LL_TEXT, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("Zust.Zei", App.frmMBKalender.strZustZei, Const.LL_TEXT, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("ZinsBisVA.Ko", Sal.NumberToStrX(App.frmMBKalender.nZinsKobisVA, 2), Const.LL_NUMERIC, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("ZinsBisVA.HF", Sal.NumberToStrX(App.frmMBKalender.nZinsHFbisVA, 2), Const.LL_NUMERIC, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("PfueErlass", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtPfueErlass), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("ZinsBisPfue.Ko", Sal.NumberToStrX(App.frmMBKalender.nZinsKobisPfue, 2), Const.LL_NUMERIC, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("ZinsBisPfue.HF", Sal.NumberToStrX(App.frmMBKalender.nZinsHFbisPfue, 2), Const.LL_NUMERIC, ref locals.nRet);
                    }
				}
				else if (strPBericht == "Pfü.crd" || strPBericht == "Pfü2023.crd" || strPBericht == "Pfü2023Beschluss.crd") 
				{
					if (locals.bAsField) 
					{
						// Call axLL.LlDefineFieldExt( 'Zahlung.EUR', SalNumberToStrX(frmMBKalender.nZaDM,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineFieldExt( 'Zahlung.Datum', PalDateToStrJJJJMMTT(frmMBKalender.dtZaBuchDat), LL_DATE_YYYYMMDD, nRet )
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Proz.Nr", Sal.NumberToStrX(App.frmMBKalender.nProzNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Gericht", App.frmMBKalender.strGerName, Const.LL_TEXT, ref locals.nRet);
						// 13.05.19 Ä1852
						App.frmMain.axLL.LlDefineVariableExt("GerichtStrasse", App.frmMBKalender.strGerStrasse, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Zustellung.MB", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtZustMB), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zustellung.VB", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtZustVB), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Aktenzeichen", App.frmMBKalender.strAZ, Const.LL_TEXT, ref locals.nRet);
						// 29.09.21 F4815 + ,preazb, preazc, preazd
						App.frmMain.axLL.LlDefineVariableExt("AktenzeichenB", App.frmMBKalender.strAZb, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("AktenzeichenC", App.frmMBKalender.strAZc, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("AktenzeichenD", App.frmMBKalender.strAZd, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("EUR-HF", Sal.NumberToStrX(App.frmMBKalender.nDMHF, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Proz-HF", Sal.NumberToStrX(App.frmMBKalender.nProzHF, 1), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-Mahn", Sal.NumberToStrX(App.frmMBKalender.nDMMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-MB", Sal.NumberToStrX(App.frmMBKalender.nDMMB, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-VB", Sal.NumberToStrX(App.frmMBKalender.nDMVB, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Proz-MBVB", Sal.NumberToStrX(App.frmMBKalender.nProzMBVB, 1), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-VA", Sal.NumberToStrX(App.frmMBKalender.nDMVA, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-Früher", Sal.NumberToStrX(App.frmMBKalender.nDMFrueh, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zins-HF", Sal.NumberToStrX(App.frmMBKalender.nZinsHF, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zins-MB", Sal.NumberToStrX(App.frmMBKalender.nZinsMB, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zins-Lfd", Sal.NumberToStrX(App.frmMBKalender.nLfdZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 29.03.16
						App.frmMain.axLL.LlDefineVariableExt("Zins-LfdAlles", Sal.NumberToStrX(App.frmMBKalender.nLfdZinsAlles, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("HF-Alles", Sal.NumberToStrX(App.frmMBKalender.nHFAlles, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("VZAlles", Sal.NumberToStrX(App.frmMBKalender.nVZAlles, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("UVZAlles", Sal.NumberToStrX(App.frmMBKalender.nUVZAlles, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("UVZTit", Sal.NumberToStrX(App.frmMBKalender.nUVZTit, 2), Const.LL_NUMERIC, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Zins-LfdVZ", Sal.NumberToStrX(App.frmMBKalender.nLfdZinsVZ, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name", App.frmMBKalender.strHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmMBKalender.strHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmMBKalender.strHS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmMBKalender.strHO, Const.LL_TEXT, ref locals.nRet);
						// 18.07.22 Ä2026
						App.frmMain.axLL.LlDefineVariableExt("Halter.GebDat", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtHGebDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.GebDat2", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtHGebDat2), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.GebDatText", App.frmMBKalender.strHGebDatText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.GebDat2Text", App.frmMBKalender.strHGebDat2Text, Const.LL_TEXT, ref locals.nRet);
						// 25.07.13 F1679 Zust.Benutzer statt akt.Benutzer
						App.frmMain.axLL.LlDefineVariableExt("Zeichen", Int.PalZust(App.frmMBKalender.nArztNr), Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("GerOrt", App.frmMBKalender.strGerOrt, Const.LL_TEXT, ref locals.nRet);
						// Call axLL.LlDefineVariableExt( 'Pfüa', SalNumberToStrX(frmMBKalender.nPFÜa,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüa1', SalNumberToStrX(frmMBKalender.nPFÜa1,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüa2', SalNumberToStrX(frmMBKalender.nPFÜa2,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüb', SalNumberToStrX(frmMBKalender.nPFÜb,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüb1', SalNumberToStrX(frmMBKalender.nPFÜb1,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüb2', SalNumberToStrX(frmMBKalender.nPFÜb2,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüc', SalNumberToStrX(frmMBKalender.nPFÜc,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd', SalNumberToStrX(frmMBKalender.nPFÜd,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd1', SalNumberToStrX(frmMBKalender.nPFÜd1,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd2', SalNumberToStrX(frmMBKalender.nPFÜd2,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd2a', SalNumberToStrX(frmMBKalender.nPFÜd2a,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd2b', SalNumberToStrX(frmMBKalender.nPFÜd2b,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd2c', SalNumberToStrX(frmMBKalender.nPFÜd2c,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd3', SalNumberToStrX(frmMBKalender.nPFÜd3,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd41', SalNumberToStrX(frmMBKalender.nPFÜd41,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd42', SalNumberToStrX(frmMBKalender.nPFÜd42,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd5', SalNumberToStrX(frmMBKalender.nPFÜd5,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd6', SalNumberToStrX(frmMBKalender.nPFÜd6,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüe', SalNumberToStrX(frmMBKalender.nPFÜe,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfü0dritt', frmMBKalender.strPFÜ0dritt, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfü0vari', frmMBKalender.strPFÜ0vari, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüa2vari', frmMBKalender.strPFÜa2vari, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüb2v1', frmMBKalender.strPFÜb2v1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüb2v2', frmMBKalender.strPFÜb2v2, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfücv1', frmMBKalender.strPFÜcv1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfücv2', frmMBKalender.strPFÜcv2, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfücv3', frmMBKalender.strPFÜcv3, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfücv4', frmMBKalender.strPFÜcv4, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd1v1', frmMBKalender.strPFÜd1v1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd2v1', frmMBKalender.strPFÜd2v1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd3v1', frmMBKalender.strPFÜd3v1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd41v1', frmMBKalender.strPFÜd41v1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd5v1', frmMBKalender.strPFÜd5v1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd6v1', frmMBKalender.strPFÜd6v1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüev1', frmMBKalender.strPFÜev1, LL_TEXT, nRet )
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMBKalender.nArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMBKalender.nHalterNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "Amtsgericht", Const.LL_TEXT, ref locals.nRet);
						// 10.12.12 Ä851
						// Call axLL.LlDefineVariableExt( 'Bericht.Name2', 'Gerichtsvollzieherverteilungsstelle', LL_TEXT, nRet )
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "Vollstreckungsgericht", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						// 01.12.11
						if (strPBericht == "VZ.crd") 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "31008 Elze", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMBKalender.strGerOrt, Const.LL_TEXT, ref locals.nRet);
							// 13.12.11 Ä687
							App.frmMain.axLL.LlDefineVariableExt("RaZaNr", strRaZaNr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("RaZaSaldo", nRZOffen.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						}

						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 20.12.10 OTF366
						App.frmMain.axLL.LlDefineVariableExt("Auftrag", Sal.NumberToStrX(App.frmMBKalender.nPFÜa, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "1", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						if (App.frmMBKalender.nZaDM == SalNumber.Null) 
						{
							App.frmMBKalender.nZaDM = 0;
						}
						if (App.frmMBKalender.nLfdZins == SalNumber.Null) 
						{
							App.frmMBKalender.nLfdZins = 0;
						}
						App.frmMain.axLL.LlDefineVariableExt("lfdZins", Sal.NumberToStrX(App.frmMBKalender.nLfdZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zahlungen", (App.frmMBKalender.nZaDM * -1).ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Drittschuldner", App.frmMBKalender.strDritt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Extra", App.frmMBKalender.strExtra, Const.LL_TEXT, ref locals.nRet);
						// 05.01.11
						App.frmMain.axLL.LlDefineVariableExt("Zusatzkosten", Sal.NumberToStrX(App.frmMBKalender.nZusatzkosten, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("ZusatzkostenText", App.frmMBKalender.strZusatzkosten, Const.LL_TEXT, ref locals.nRet);
						// 02.05.13 Ä928
						App.frmMain.axLL.LlDefineVariableExt("Zins-Vorg", Sal.NumberToStrX(App.frmMBKalender.nVorgZinsen, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Rechnung.RechDat", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtRechDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 06.05.13 Ä905
						Int.SqlImmedSel("SELECT prarztnr, prhalternr INTO :frmMain.nTANr, :frmMain.nTHNr FROM pr WHERE prnr = :frmMBKalender.nProzNr");
						App.frmMain.axLL.LlDefineVariableExt("ArztNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
                        // 05.02.13 Ä877
                        // Call axLL.LlDefineVariableExt( 'VSTitel', frmMBKEinzeldruck.mlVSTitel, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'DrittSchudner', frmMBKEinzeldruck.mlDrittSchuldner, LL_TEXT, nRet )
                        if (strPBericht == "Pfü2023.crd" || strPBericht == "Pfü2023Beschluss.crd")  // 06.11.23 Ä2082
						{
							// 13.10.23 Ä2029
							App.frmMain.axLL.LlDefineVariableExt("Halter.Anrede", App.frmMBKEinzeldruck.strHTitel, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Halter.VN", strHVN, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Halter.NN", strHNN, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("B1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnB1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("C1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnC1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("ElektrKostenmarke", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnelektrKostenmarke.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("ElektrKM.Nummer", App.frmMBKEinzeldruck.dfPnEKNr.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("ElektrKM.Wert", App.frmMBKEinzeldruck.dfPnEKWert.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("ElektrKM.Datum", App.frmMBKEinzeldruck.dfPnEKDatum.Text, Const.LL_TEXT, ref locals.nRet);
							// 08.12.23
							App.frmMain.axLL.LlDefineVariableExt("Pn.AntrAufstVollstrKo", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnAntrAufstVollstrKo.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Pn.AntrAufstZahlg", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnAntrAufstZahlg.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							// Call axLL.LlDefineVariableExt( 'Pn.AntrKostenmarke', SalNumberToStrX(frmMBKEinzeldruck.cbPnAntrKostenmarke,0), LL_NUMERIC, nRet )
							App.frmMain.axLL.LlDefineVariableExt("Pn.AntrVerVorliegen", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnAntrVerVorliegen.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Pn.AntrZahlVerbot", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnAntrZahlVerbot.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Pn.PnAntrZustGS", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnAntrZustGS.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Pn.AntrZustGSDs", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnAntrZustGSDs.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							// Drittschuldner
							// 1
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1Herrn", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDrS1Herrn.Checked, 0), Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1Frau", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDrS1Frau.Checked, 0), Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1Unternehmen", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDrS1Unternehmen.Checked, 0), Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1Sonstige", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDrS1sonst.Checked, 0), Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1zuZiffer", App.frmMBKEinzeldruck.dfDrS1zuZiffer.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1Anrede", App.frmMBKEinzeldruck.dfDrS1Anrede.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1Name", App.frmMBKEinzeldruck.dfDrS1Name.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1Vorname", App.frmMBKEinzeldruck.dfDrS1Vornamen.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1Strasse", App.frmMBKEinzeldruck.dfDrS1Strasse.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1Hausnr", App.frmMBKEinzeldruck.dfDrS1Hausnummer.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1PLZ", App.frmMBKEinzeldruck.dfDrS1PLZ.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1Ort", App.frmMBKEinzeldruck.dfDrS1Ort.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1Land", App.frmMBKEinzeldruck.dfDrS1Land.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1RegGericht", App.frmMBKEinzeldruck.dfDrS1RegGericht.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1RegNr", App.frmMBKEinzeldruck.dfDrS1RegNr.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1GeschZeichen", App.frmMBKEinzeldruck.dfDrS1GeschZeichen.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1elektrZust", App.frmMBKEinzeldruck.dfDrS1elektrZust.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1zuZuZiff", App.frmMBKEinzeldruck.dfDrS1zuZuZiffer.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.1Module", App.frmMBKEinzeldruck.dfDrS1Module.Text, Const.LL_TEXT, ref locals.nRet);
							// 2
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2Herrn", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDrS2Herrn.Checked, 0), Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2Frau", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDrS2Frau.Checked, 0), Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2Unternehmen", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDrS2Unternehmen.Checked, 0), Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2Sonstige", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDrS2sonst.Checked, 0), Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2zuZiffer", App.frmMBKEinzeldruck.dfDrS2zuZiffer.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2Anrede", App.frmMBKEinzeldruck.dfDrS2Anrede.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2Name", App.frmMBKEinzeldruck.dfDrS2Name.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2Vorname", App.frmMBKEinzeldruck.dfDrS2Vornamen.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2Strasse", App.frmMBKEinzeldruck.dfDrS2Strasse.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2Hausnr", App.frmMBKEinzeldruck.dfDrS2Hausnummer.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2PLZ", App.frmMBKEinzeldruck.dfDrS2PLZ.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2Ort", App.frmMBKEinzeldruck.dfDrS2Ort.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2Land", App.frmMBKEinzeldruck.dfDrS2Land.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2RegGericht", App.frmMBKEinzeldruck.dfDrS2RegGericht.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2RegNr", App.frmMBKEinzeldruck.dfDrS2RegNr.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2GeschZeichen", App.frmMBKEinzeldruck.dfDrS2GeschZeichen.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2elektrZust", App.frmMBKEinzeldruck.dfDrS2elektrZust.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2zuZuZiff", App.frmMBKEinzeldruck.dfDrS2zuZuZiffer.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.2Module", App.frmMBKEinzeldruck.dfDrS2Module.Text, Const.LL_TEXT, ref locals.nRet);
							// 3
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3Herrn", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDrS3Herrn.Checked, 0), Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3Frau", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDrS3Frau.Checked, 0), Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3Unternehmen", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDrS3Unternehmen.Checked, 0), Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3Sonstige", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDrS3sonst.Checked, 0), Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3zuZiffer", App.frmMBKEinzeldruck.dfDrS3zuZiffer.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3Anrede", App.frmMBKEinzeldruck.dfDrS3Anrede.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3Name", App.frmMBKEinzeldruck.dfDrS3Name.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3Vorname", App.frmMBKEinzeldruck.dfDrS3Vornamen.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3Strasse", App.frmMBKEinzeldruck.dfDrS3Strasse.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3Hausnr", App.frmMBKEinzeldruck.dfDrS3Hausnummer.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3PLZ", App.frmMBKEinzeldruck.dfDrS3PLZ.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3Ort", App.frmMBKEinzeldruck.dfDrS3Ort.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3Land", App.frmMBKEinzeldruck.dfDrS3Land.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3RegGericht", App.frmMBKEinzeldruck.dfDrS3RegGericht.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3RegNr", App.frmMBKEinzeldruck.dfDrS3RegNr.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3GeschZeichen", App.frmMBKEinzeldruck.dfDrS3GeschZeichen.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3elektrZust", App.frmMBKEinzeldruck.dfDrS3elektrZust.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3zuZuZiff", App.frmMBKEinzeldruck.dfDrS3zuZuZiffer.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.3Module", App.frmMBKEinzeldruck.dfDrS3Module.Text, Const.LL_TEXT, ref locals.nRet);

							App.frmMain.axLL.LlDefineVariableExt("Drittschuldner.WeitereAnlage", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDrSweitereAnlage.Checked, 0), Const.LL_TEXT, ref locals.nRet);

							App.frmMain.axLL.LlDefineVariableExt("EJahr", App.frmMBKEinzeldruck.dfPnEJahr.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("E1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnE1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("E1Text", App.frmMBKEinzeldruck.dfPnE1Text.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("F1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnF1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("F2", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnF2.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("F3", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnF3.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("FBez", App.frmMBKEinzeldruck.dfPnFBez.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("FKonto", App.frmMBKEinzeldruck.dfPnFKonto.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("F4", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnF4.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("F4Text", App.frmMBKEinzeldruck.dfPnF4Text.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("GJahr", App.frmMBKEinzeldruck.dfPnGJahr.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("G1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnG1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("G2", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnG2.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("G2Text", App.frmMBKEinzeldruck.dfPnG2Text.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("H1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnH1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("H2", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnH2.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("H3", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnH3.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("H3Text", App.frmMBKEinzeldruck.dfPnH3Text.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("IEuro", App.frmMBKEinzeldruck.dfPnIEuro.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("IVertragsnr", App.frmMBKEinzeldruck.dfPnIVertrag.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("I1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnI1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("I1Text", App.frmMBKEinzeldruck.dfPnI1Text.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("J1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnJ1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("J1Text", App.frmMBKEinzeldruck.dfPnJ1Text.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("KText", App.frmMBKEinzeldruck.dfPnKText.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnM1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M1Ziff", App.frmMBKEinzeldruck.dfPnM1Ziff.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M1ZiffDS", App.frmMBKEinzeldruck.dfPnM1ZiffDS.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M2", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnM2.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M2Ziff", App.frmMBKEinzeldruck.dfPnM2Ziff.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M2ZiffDS", App.frmMBKEinzeldruck.dfPnM2ZiffDS.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M3", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnM3.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M3Ziff", App.frmMBKEinzeldruck.dfPnM3Ziff.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M3ZiffDS", App.frmMBKEinzeldruck.dfPnM3ZiffDS.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M4", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnM4.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M4Ziff", App.frmMBKEinzeldruck.dfPnM4Ziff.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M4ZiffDS", App.frmMBKEinzeldruck.dfPnM4ZiffDS.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M5", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnM5.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M5Ziff", App.frmMBKEinzeldruck.dfPnM5Ziff.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M6", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnM6.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M6Ziff", App.frmMBKEinzeldruck.dfPnM6Ziff.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M6ZiffDS", App.frmMBKEinzeldruck.dfPnM6ZiffDS.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M7", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnM7.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M7Text", App.frmMBKEinzeldruck.dfPnM7Text.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M8", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnM8.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("M8Text", App.frmMBKEinzeldruck.dfPnM8Text.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("NZiff", App.frmMBKEinzeldruck.dfPnNZiff.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("N1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnN1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("N1ZiffA", App.frmMBKEinzeldruck.dfPnN1ZiffA.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("N1EuroA", App.frmMBKEinzeldruck.dfPnN1EuroA.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("N1ZiffB", App.frmMBKEinzeldruck.dfPnN1ZiffB.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("N1EuroB", App.frmMBKEinzeldruck.dfPnN1EuroB.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("N1ZiffC", App.frmMBKEinzeldruck.dfPnN1ZiffC.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("N2", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnN2.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("N2ZiffA", App.frmMBKEinzeldruck.dfPnN2ZiffA.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("N2Sozial", App.frmMBKEinzeldruck.dfPnN2Sozial.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("N2ZiffB", App.frmMBKEinzeldruck.dfPnN2ZiffB.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("N3", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnN3.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("N4", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnN4.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("PZiff", App.frmMBKEinzeldruck.dfPnPZiff.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("PName", App.frmMBKEinzeldruck.dfPnPName.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("PVorname", App.frmMBKEinzeldruck.dfPnPVorname.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("PK.1Name", App.frmMBKEinzeldruck.dfPnPK1Name.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("PK.1Vorname", App.frmMBKEinzeldruck.dfPnPK1Vorname.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("PK.1GebDat", App.frmMBKEinzeldruck.dfPnPK1GebDat.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("PK.1Eink", App.frmMBKEinzeldruck.dfPnPK1Eink.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("PK.2Name", App.frmMBKEinzeldruck.dfPnPK2Name.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("PK.2Vorname", App.frmMBKEinzeldruck.dfPnPK2Vorname.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("PK.2GebDat", App.frmMBKEinzeldruck.dfPnPK2GebDat.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("PK.2Eink", App.frmMBKEinzeldruck.dfPnPK2Eink.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("PK.3Name", App.frmMBKEinzeldruck.dfPnPK3Name.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("PK.3Vorname", App.frmMBKEinzeldruck.dfPnPK3Vorname.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("PK.3GebDat", App.frmMBKEinzeldruck.dfPnPK3GebDat.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("PK.3Eink", App.frmMBKEinzeldruck.dfPnPK3Eink.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("P1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnP1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("P1Text", App.frmMBKEinzeldruck.dfPnP1Text.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("R1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnR1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("S1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbPnS1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
						}
                        // Else
                        // Call axLL.LlDefineVariableExt( 'cbA', SalNumberToStrX( frmMBKEinzeldruck.cbVAA , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'A1', frmMBKEinzeldruck.dfVAA1, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'A2', frmMBKEinzeldruck.dfVAA2, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbB', SalNumberToStrX( frmMBKEinzeldruck.cbVAB , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'B1', frmMBKEinzeldruck.dfVAB1, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'B2', frmMBKEinzeldruck.dfVAB2, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbC', SalNumberToStrX( frmMBKEinzeldruck.cbVAC , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'C1', frmMBKEinzeldruck.dfVAC1, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'C2', frmMBKEinzeldruck.dfVAC2, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'C3', frmMBKEinzeldruck.dfVAC3, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbD', SalNumberToStrX( frmMBKEinzeldruck.cbVAD , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'D1', frmMBKEinzeldruck.dfVAD1, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'D2', frmMBKEinzeldruck.dfVAD2, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'D4', frmMBKEinzeldruck.dfVAD4, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'D5', frmMBKEinzeldruck.dfVAD5, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'D6', frmMBKEinzeldruck.dfVAD6, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbE', SalNumberToStrX( frmMBKEinzeldruck.cbVAE , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'E', frmMBKEinzeldruck.dfVAE, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbF', SalNumberToStrX( frmMBKEinzeldruck.cbVAF , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'F1', frmMBKEinzeldruck.dfVAF1, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'F2', frmMBKEinzeldruck.dfVAF2, LL_TEXT, nRet )
                        // 27.10.14 Ä1094
                        // Call axLL.LlDefineVariableExt( 'F5', frmMBKEinzeldruck.dfVAF5, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbInkasso', SalNumberToStrX( frmMBKEinzeldruck.cbInkKosten , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cbG', SalNumberToStrX( frmMBKEinzeldruck.cbVAG , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'G', frmMBKEinzeldruck.dfVAG, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb1', SalNumberToStrX( frmMBKEinzeldruck.cbVA1 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb1a', SalNumberToStrX( frmMBKEinzeldruck.cbVA1a , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb1b', SalNumberToStrX( frmMBKEinzeldruck.cbVA1b , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'df1a', frmMBKEinzeldruck.dfVA1a, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'df1b', frmMBKEinzeldruck.dfVA1b, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'df1c', frmMBKEinzeldruck.dfVA1c, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb2', SalNumberToStrX( frmMBKEinzeldruck.cbVA2 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb2a', SalNumberToStrX( frmMBKEinzeldruck.cbVA2a , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'df2a', frmMBKEinzeldruck.dfVA2a, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb2b', SalNumberToStrX( frmMBKEinzeldruck.cbVA2b , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'df2b', frmMBKEinzeldruck.dfVA2b, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb3', SalNumberToStrX( frmMBKEinzeldruck.cbVA3 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb3a', SalNumberToStrX( frmMBKEinzeldruck.cbVA3a , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb3b', SalNumberToStrX( frmMBKEinzeldruck.cbVA3b , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb3c', SalNumberToStrX( frmMBKEinzeldruck.cbVA3c , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb3d', SalNumberToStrX( frmMBKEinzeldruck.cbVA3d , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb3e', SalNumberToStrX( frmMBKEinzeldruck.cbVA3e , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'df3', frmMBKEinzeldruck.dfVA3, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb4', SalNumberToStrX( frmMBKEinzeldruck.cbVA4 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb4a', SalNumberToStrX( frmMBKEinzeldruck.cbVA4a , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb4b', SalNumberToStrX( frmMBKEinzeldruck.cbVA4b , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb4c', SalNumberToStrX( frmMBKEinzeldruck.cbVA4c , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb4d', SalNumberToStrX( frmMBKEinzeldruck.cbVA4d , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb4e', SalNumberToStrX( frmMBKEinzeldruck.cbVA4e , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb4f', SalNumberToStrX( frmMBKEinzeldruck.cbVA4f , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'df4f', frmMBKEinzeldruck.dfVA4f, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb5', SalNumberToStrX( frmMBKEinzeldruck.cbVA5 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'df5', frmMBKEinzeldruck.dfVA5, LL_TEXT, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb6', SalNumberToStrX( frmMBKEinzeldruck.cbVA6 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb6a', SalNumberToStrX( frmMBKEinzeldruck.cbVA6a , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb6b', SalNumberToStrX( frmMBKEinzeldruck.cbVA6b , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'cb7', SalNumberToStrX( frmMBKEinzeldruck.cbVA7 , 0), LL_NUMERIC, nRet )
                        // Call axLL.LlDefineVariableExt( 'df7', frmMBKEinzeldruck.dfVA7, LL_TEXT, nRet )
                        // 04.11.14 Ä1130
                        // Call axLL.LlDefineVariableExt( 'cbgemAnlage', SalNumberToStrX( frmMBKEinzeldruck.cbgemAnlage , 0), LL_NUMERIC, nRet )
                        // 12.01.21 Ä1932
                        Int.SqlImmedSel(@"SELECT badm2
INTO :dlgLlDruck.nPfueGK
FROM ba
WHERE banr=16");
						App.frmMain.axLL.LlDefineVariableExt("PfüGK", nPfueGK.ToString(2), Const.LL_NUMERIC, ref locals.nRet);

						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
                        // 09.10.24 ###
                        App.frmMBKalender.strZustZei = Int.PalZust(App.frmMain.nTANr);
                        Int.SqlImmedSel(@"SELECT bnname, bntel, bnemail INTO :frmMBKalender.strZuName, :frmMBKalender.strZuTel, :frmMBKalender.strZuEMail
FROM bn WHERE bnzei = :frmMBKalender.strZustZei");
                        App.frmMain.axLL.LlDefineVariableExt("Zust.Name", App.frmMBKalender.strZuName, Const.LL_TEXT, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("Zust.EMail", App.frmMBKalender.strZuEMail, Const.LL_TEXT, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("Zust.Tel", App.frmMBKalender.strZuTel, Const.LL_TEXT, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("Zust.Zei", App.frmMBKalender.strZustZei, Const.LL_TEXT, ref locals.nRet);
                    }
				}
				else if (strPBericht == "VZ.crd") 
				{
					// Set frmMBKalender.nZaDM = frmMBKalender.nZaDM * -1
					if (locals.bAsField) 
					{
						// Call axLL.LlDefineFieldExt( 'Zahlung.EUR', SalNumberToStrX(frmMBKalender.nZaDM,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineFieldExt( 'Zahlung.Datum', PalDateToStrJJJJMMTT(frmMBKalender.dtZaBuchDat), LL_DATE_YYYYMMDD, nRet )
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Proz.Nr", Sal.NumberToStrX(App.frmMBKalender.nProzNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Gericht", App.frmMBKalender.strGerName, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zustellung.MB", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtZustMB), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zustellung.VB", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtZustVB), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Aktenzeichen", App.frmMBKalender.strAZ, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-HF", Sal.NumberToStrX(App.frmMBKalender.nDMHF, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Proz-HF", Sal.NumberToStrX(App.frmMBKalender.nProzHF, 1), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-Mahn", Sal.NumberToStrX(App.frmMBKalender.nDMMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-MB", Sal.NumberToStrX(App.frmMBKalender.nDMMB, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-VB", Sal.NumberToStrX(App.frmMBKalender.nDMVB, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Proz-MBVB", Sal.NumberToStrX(App.frmMBKalender.nProzMBVB, 1), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-VA", Sal.NumberToStrX(App.frmMBKalender.nDMVA, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-Früher", Sal.NumberToStrX(App.frmMBKalender.nDMFrueh, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zins-HF", Sal.NumberToStrX(App.frmMBKalender.nZinsHF, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zins-MB", Sal.NumberToStrX(App.frmMBKalender.nZinsMB, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMBKalender.nLfdZins = App.frmMBKalender.nLfdZins + App.frmMBKalender.nLfdZinsVZ;
						App.frmMain.axLL.LlDefineVariableExt("Zins-Lfd", Sal.NumberToStrX(App.frmMBKalender.nLfdZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name", App.frmMBKalender.strHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmMBKalender.strHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmMBKalender.strHS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmMBKalender.strHO, Const.LL_TEXT, ref locals.nRet);
						// 25.07.13 F1679 Zust.Benutzer statt akt.Benutzer
						App.frmMain.axLL.LlDefineVariableExt("Zeichen", Int.PalZust(App.frmMBKalender.nArztNr), Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("GerOrt", App.frmMBKalender.strGerOrt, Const.LL_TEXT, ref locals.nRet);
						// 03.07.23
						App.frmMain.axLL.LlDefineVariableExt("GerichtStrasse", App.frmMBKalender.strGerStrasse, Const.LL_TEXT, ref locals.nRet);

						// Call axLL.LlDefineVariableExt( 'Pfüa', SalNumberToStrX(frmMBKalender.nPFÜa,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüa1', SalNumberToStrX(frmMBKalender.nPFÜa1,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüa2', SalNumberToStrX(frmMBKalender.nPFÜa2,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüb', SalNumberToStrX(frmMBKalender.nPFÜb,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüb1', SalNumberToStrX(frmMBKalender.nPFÜb1,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüb2', SalNumberToStrX(frmMBKalender.nPFÜb2,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüc', SalNumberToStrX(frmMBKalender.nPFÜc,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd', SalNumberToStrX(frmMBKalender.nPFÜd,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd1', SalNumberToStrX(frmMBKalender.nPFÜd1,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd2', SalNumberToStrX(frmMBKalender.nPFÜd2,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd2a', SalNumberToStrX(frmMBKalender.nPFÜd2a,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd2b', SalNumberToStrX(frmMBKalender.nPFÜd2b,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd2c', SalNumberToStrX(frmMBKalender.nPFÜd2c,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd3', SalNumberToStrX(frmMBKalender.nPFÜd3,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd41', SalNumberToStrX(frmMBKalender.nPFÜd41,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd42', SalNumberToStrX(frmMBKalender.nPFÜd42,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd5', SalNumberToStrX(frmMBKalender.nPFÜd5,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd6', SalNumberToStrX(frmMBKalender.nPFÜd6,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüe', SalNumberToStrX(frmMBKalender.nPFÜe,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfü0dritt', frmMBKalender.strPFÜ0dritt, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfü0vari', frmMBKalender.strPFÜ0vari, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüa2vari', frmMBKalender.strPFÜa2vari, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüb2v1', frmMBKalender.strPFÜb2v1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüb2v2', frmMBKalender.strPFÜb2v2, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfücv1', frmMBKalender.strPFÜcv1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfücv2', frmMBKalender.strPFÜcv2, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfücv3', frmMBKalender.strPFÜcv3, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfücv4', frmMBKalender.strPFÜcv4, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd1v1', frmMBKalender.strPFÜd1v1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd2v1', frmMBKalender.strPFÜd2v1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd3v1', frmMBKalender.strPFÜd3v1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd41v1', frmMBKalender.strPFÜd41v1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd5v1', frmMBKalender.strPFÜd5v1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüd6v1', frmMBKalender.strPFÜd6v1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Pfüev1', frmMBKalender.strPFÜev1, LL_TEXT, nRet )
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMBKalender.nArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMBKalender.nHalterNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "Amtsgericht", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "Gerichtsvollzieherverteilungsstelle", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						// 01.12.11
						if (strPBericht == "VZ.crd") 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "31008 Elze", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMBKalender.strGerOrt, Const.LL_TEXT, ref locals.nRet);
							// 13.12.11 Ä687
							App.frmMain.axLL.LlDefineVariableExt("RaZaNr", strRaZaNr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("RaZaSaldo", nRZOffen.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						}

						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 20.12.10 OTF366
						App.frmMain.axLL.LlDefineVariableExt("Auftrag", Sal.NumberToStrX(App.frmMBKalender.nPFÜa, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "1", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// Bericht.auf_blanco="1"
						if (App.frmMBKalender.nZaDM == SalNumber.Null) 
						{
							App.frmMBKalender.nZaDM = 0;
						}
						if (App.frmMBKalender.nLfdZins == SalNumber.Null) 
						{
							App.frmMBKalender.nLfdZins = 0;
						}
						App.frmMain.axLL.LlDefineVariableExt("lfdZins", Sal.NumberToStrX(App.frmMBKalender.nLfdZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zahlungen", (App.frmMBKalender.nZaDM * -1).ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Drittschuldner", App.frmMBKalender.strDritt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Extra", App.frmMBKalender.strExtra, Const.LL_TEXT, ref locals.nRet);
						// 05.01.11
						App.frmMain.axLL.LlDefineVariableExt("Zusatzkosten", Sal.NumberToStrX(App.frmMBKalender.nZusatzkosten, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("ZusatzkostenText", App.frmMBKalender.strZusatzkosten, Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
					// Call PalReport(frmMBKalender,'PFÜ.QRP',
					// ':frmMBKalender.nProzNr, :frmMBKalender.strGerName, :frmMBKalender.dtZustMB, :frmMBKalender.dtZustVB,
					// :frmMBKalender.strAZ, :frmMBKalender.nDMHF, :frmMBKalender.nProzHF, :frmMBKalender.nDMMahn,
					// :frmMBKalender.nDMMB, :frmMBKalender.nDMVB, :frmMBKalender.nProzMBVB, :frmMBKalender.nDMVA,
					// :frmMBKalender.nDMFrueh, :frmMBKalender.nZinsHF, :frmMBKalender.nZinsMB,
					// :frmMBKalender.strHN1, :frmMBKalender.strHN2, :frmMBKalender.strHS, :frmMBKalender.strHO,
					// :frmMBKalender.strZeichen, :frmMBKalender.strGerOrt,
					// :frmMBKalender.dtZaBuchDat, , :frmMBKalender.nZaDM,
					// :frmMBKalender.nPFÜa, :frmMBKalender.nPFÜa1, :frmMBKalender.nPFÜa2, :frmMBKalender.nPFÜb,
					// :frmMBKalender.nPFÜb1, :frmMBKalender.nPFÜb2, :frmMBKalender.nPFÜc,
					// :frmMBKalender.nPFÜd, :frmMBKalender.nPFÜd1, :frmMBKalender.nPFÜd2,
					// :frmMBKalender.nPFÜd2a, :frmMBKalender.nPFÜd2b, :frmMBKalender.nPFÜd2c,
					// :frmMBKalender.nPFÜd3, :frmMBKalender.nPFÜd41, :frmMBKalender.nPFÜd42,
					// :frmMBKalender.nPFÜd5, :frmMBKalender.nPFÜd6, :frmMBKalender.nPFÜe,
					// :frmMBKalender.strPFÜ0dritt, :frmMBKalender.strPFÜ0vari, :frmMBKalender.strPFÜa2vari,
					// :frmMBKalender.strPFÜb2v1, :frmMBKalender.strPFÜb2v2, :frmMBKalender.strPFÜcv1,
					// :frmMBKalender.strPFÜcv2, :frmMBKalender.strPFÜcv3, :frmMBKalender.strPFÜcv4,
					// :frmMBKalender.strPFÜd1v1, :frmMBKalender.strPFÜd2v1, :frmMBKalender.strPFÜd3v1, :frmMBKalender.strPFÜd41v1,
					// :frmMBKalender.strPFÜd5v1, :frmMBKalender.strPFÜd6v1, :frmMBKalender.strPFÜev1',
					// 'ProzNr, GerName, ZustMB, ZustVB, AZ, DMHF, ProzHF, DMMahn, DMMB, DMVB, ProzMBVB, DMVA,
					// DMFrueh, ZinsHF, ZinsMB, HN1, HN2, HS, HO,
					// Zeichen, GerOrt, ZaBuchDat, ZaDM, a, a1, a2, b, b1, b2,
					// c, d, d1, d2, d2a, d2b, d2c, d3, d41, d42, d5, d6, e,
					// odritt, ovari, a2vari, b2v1, b2v2, cv1, cv2, cv3, cv4, d1v1, d2v1,
					// d3v1, d41v1, d5v1, d6v1, ev1',
					// nErr)
				}
				// Else If strPBericht = 'DS-Beschluss.crd'
				// If bAsField
				// Else
				// Call axLL.LlDefineVariableExt( 'Proz.Nr', SalNumberToStrX(frmMBKalender.nProzNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Gericht', frmMBKalender.strGerName, LL_TEXT, nRet )
				// 13.05.19 Ä1852
				// Call axLL.LlDefineVariableExt( 'GerichtStrasse', frmMBKalender.strGerStrasse, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Zustellung.MB', PalDateToStrJJJJMMTT(frmMBKalender.dtZustMB), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineVariableExt( 'Zustellung.VB', PalDateToStrJJJJMMTT(frmMBKalender.dtZustVB), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineVariableExt( 'Aktenzeichen', frmMBKalender.strAZ, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'EUR-HF', SalNumberToStrX(frmMBKalender.nDMHF,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Proz-HF', SalNumberToStrX(frmMBKalender.nProzHF,1), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'EUR-Mahn', SalNumberToStrX(frmMBKalender.nDMMahn,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'EUR-MB', SalNumberToStrX(frmMBKalender.nDMMB,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'EUR-VB', SalNumberToStrX(frmMBKalender.nDMVB,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Proz-MBVB', SalNumberToStrX(frmMBKalender.nProzMBVB,1), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'EUR-VA', SalNumberToStrX(frmMBKalender.nDMVA,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'EUR-Früher', SalNumberToStrX(frmMBKalender.nDMFrueh,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Zins-HF', SalNumberToStrX(frmMBKalender.nZinsHF,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Zins-MB', SalNumberToStrX(frmMBKalender.nZinsMB,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Zins-LfdVZ', SalNumberToStrX(frmMBKalender.nLfdZinsVZ,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Zins-Vorg', SalNumberToStrX(frmMBKalender.nVorgZinsen,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Halter.Name', frmMBKalender.strHN1, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Halter.Name2', frmMBKalender.strHN2, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Halter.Strasse', frmMBKalender.strHS, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Halter.Ort', frmMBKalender.strHO, LL_TEXT, nRet )
				// 25.07.13 F1679 Zust.Benutzer statt akt.Benutzer
				// Call axLL.LlDefineVariableExt( 'Zeichen', PalZust(  frmMBKalender.nArztNr ), LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'GerOrt', frmMBKalender.strGerOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Text', frmMBKalender.strVAText, LL_TEXT, nRet )
				// 19.02.08
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNr', SalNumberToStrX( frmMBKalender.nArztNr, 0 ), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNrL', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.HalterNr', SalNumberToStrX(frmMBKalender.nHalterNr, 0) , LL_NUMERIC, nRet )
				// 06.05.13 Ä943
				// Call axLL.LlDefineVariableExt( 'PMEmail', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.RechnungNr', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name1', 'Amtsgericht', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name2', 'Gerichtsvollzieherverteilungsstelle', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Strasse', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Ort', frmMBKalender.strGerOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Land', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Deckblatt', '0', LL_TEXT, nRet )
				// 20.12.10 OTF366
				// Call axLL.LlDefineVariableExt( 'Auftrag', SalNumberToStrX( frmMBKalender.nVA0, 0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.anDritte', '1', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'alsFax', '1', LL_NUMERIC, nRet )
				// If frmMBKalender.nZaDM = NUMBER_Null
				// Set frmMBKalender.nZaDM = 0
				// If frmMBKalender.nLfdZins = NUMBER_Null
				// Set frmMBKalender.nLfdZins = 0
				// Call axLL.LlDefineVariableExt( 'lfdZins', SalNumberToStrX( frmMBKalender.nLfdZins, 2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Zahlungen', SalNumberToStrX( frmMBKalender.nZaDM*-1, 2), LL_NUMERIC, nRet )
				// 05.01.11
				// Call axLL.LlDefineVariableExt( 'Zusatzkosten', SalNumberToStrX( frmMBKalender.nZusatzkosten, 2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'ZusatzkostenText', frmMBKalender.strZusatzkosten, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Extra', frmMBKalender.strExtra, LL_TEXT, nRet )
				// 22.12.11 Ä697
				// Call axLL.LlDefineVariableExt( 'RaZaNr', strRaZaNr, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'RaZaSaldo', SalNumberToStrX( nRZOffen , 2), LL_NUMERIC, nRet )
				// 18.02.13 Ä877
				// Call axLL.LlDefineVariableExt( 'Arbeit', SalNumberToStrX( frmMBKEinzeldruck.cbDSArbeit, 0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Gesamt', SalNumberToStrX( frmMBKEinzeldruck.cbDSGesamt, 0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Privat', SalNumberToStrX( frmMBKEinzeldruck.cbDSPrivat, 0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Teil', SalNumberToStrX( frmMBKEinzeldruck.cbDSTeil, 0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Rest', SalNumberToStrX( frmMBKEinzeldruck.cbDSRest, 0), LL_NUMERIC, nRet )
				// 03.09.21 Ä1968
				// Call axLL.LlDefineVariableExt( 'Mitglied.Namenszeile', '', LL_TEXT, nRet )
				// Else If strPBericht = 'DSNacht-Beschluss.crd'	! 18.04.16 Ä1353
				// If bAsField
				// Else
				// Call axLL.LlDefineVariableExt( 'Proz.Nr', SalNumberToStrX(frmMBKalender.nProzNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Gericht', frmMBKalender.strGerName, LL_TEXT, nRet )
				// 13.05.19 Ä1852
				// Call axLL.LlDefineVariableExt( 'GerichtStrasse', frmMBKalender.strGerStrasse, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Zustellung.MB', PalDateToStrJJJJMMTT(frmMBKalender.dtZustMB), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineVariableExt( 'Zustellung.VB', PalDateToStrJJJJMMTT(frmMBKalender.dtZustVB), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineVariableExt( 'Aktenzeichen', frmMBKalender.strAZ, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'EUR-HF', SalNumberToStrX(frmMBKalender.nDMHF,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Proz-HF', SalNumberToStrX(frmMBKalender.nProzHF,1), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'EUR-Mahn', SalNumberToStrX(frmMBKalender.nDMMahn,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'EUR-MB', SalNumberToStrX(frmMBKalender.nDMMB,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'EUR-VB', SalNumberToStrX(frmMBKalender.nDMVB,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Proz-MBVB', SalNumberToStrX(frmMBKalender.nProzMBVB,1), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'EUR-VA', SalNumberToStrX(frmMBKalender.nDMVA,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'EUR-Früher', SalNumberToStrX(frmMBKalender.nDMFrueh,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Zins-HF', SalNumberToStrX(frmMBKalender.nZinsHF,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Zins-MB', SalNumberToStrX(frmMBKalender.nZinsMB,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Zins-LfdVZ', SalNumberToStrX(frmMBKalender.nLfdZinsVZ,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Zins-Vorg', SalNumberToStrX(frmMBKalender.nVorgZinsen,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Halter.Name', frmMBKalender.strHN1, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Halter.Name2', frmMBKalender.strHN2, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Halter.Strasse', frmMBKalender.strHS, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Halter.Ort', frmMBKalender.strHO, LL_TEXT, nRet )
				// 25.07.13 F1679 Zust.Benutzer statt akt.Benutzer
				// Call axLL.LlDefineVariableExt( 'Zeichen', PalZust(  frmMBKalender.nArztNr ), LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'GerOrt', frmMBKalender.strGerOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Text', frmMBKalender.strVAText, LL_TEXT, nRet )
				// 19.02.08
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNr', SalNumberToStrX( frmMBKalender.nArztNr, 0 ), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNrL', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.HalterNr', SalNumberToStrX(frmMBKalender.nHalterNr, 0) , LL_NUMERIC, nRet )
				// 06.05.13 Ä943
				// Call axLL.LlDefineVariableExt( 'PMEmail', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.RechnungNr', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name1', 'Amtsgericht', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name2', 'Gerichtsvollzieherverteilungsstelle', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Strasse', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Ort', frmMBKalender.strGerOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Land', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Deckblatt', '0', LL_TEXT, nRet )
				// 20.12.10 OTF366
				// Call axLL.LlDefineVariableExt( 'Auftrag', SalNumberToStrX( frmMBKalender.nVA0, 0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.anDritte', '1', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'alsFax', '1', LL_NUMERIC, nRet )
				// If frmMBKalender.nZaDM = NUMBER_Null
				// Set frmMBKalender.nZaDM = 0
				// If frmMBKalender.nLfdZins = NUMBER_Null
				// Set frmMBKalender.nLfdZins = 0
				// Call axLL.LlDefineVariableExt( 'lfdZins', SalNumberToStrX( frmMBKalender.nLfdZins, 2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Zahlungen', SalNumberToStrX( frmMBKalender.nZaDM*-1, 2), LL_NUMERIC, nRet )
				// 05.01.11
				// Call axLL.LlDefineVariableExt( 'Zusatzkosten', SalNumberToStrX( frmMBKalender.nZusatzkosten, 2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'ZusatzkostenText', frmMBKalender.strZusatzkosten, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Extra', frmMBKalender.strExtra, LL_TEXT, nRet )
				// 22.12.11 Ä697
				// Call axLL.LlDefineVariableExt( 'RaZaNr', strRaZaNr, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'RaZaSaldo', SalNumberToStrX( nRZOffen , 2), LL_NUMERIC, nRet )
				// 18.02.13 Ä877
				// Call axLL.LlDefineVariableExt( 'cbA', SalNumberToStrX( frmMBKEinzeldruck.cbDSNa, 0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'cbB', SalNumberToStrX( frmMBKEinzeldruck.cbDSNb, 0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'cbC', SalNumberToStrX( frmMBKEinzeldruck.cbDSNc, 0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'cbD', SalNumberToStrX( frmMBKEinzeldruck.cbDSNd, 0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'cbE', SalNumberToStrX( frmMBKEinzeldruck.cbDSNe, 0), LL_NUMERIC, nRet )
				// 03.09.21 Ä1968
				// Call axLL.LlDefineVariableExt( 'Mitglied.Namenszeile', '', LL_TEXT, nRet )
				else if (strPBericht == "PRs je Benutzer.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Zuständig", App.frmMain.strZust, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Jahr", Sal.NumberToStrX(App.frmMain.nRechJahr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("AnzUnbezahlt", Sal.NumberToStrX(App.frmMain.nAnzBezahlt, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("AnzAlle", Sal.NumberToStrX(App.frmMain.nAnzAlle, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-HF", Sal.NumberToStrX(App.frmMain.nDMRech, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-MG", Sal.NumberToStrX(App.frmMain.nDMMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Zahl", Sal.NumberToStrX(App.frmMain.nDMZahl, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Ausbuch", Sal.NumberToStrX(App.frmMain.nDMAusbuch, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 11.10.16
						App.frmMain.axLL.LlDefineFieldExt("EUR-MBKosten", Sal.NumberToStrX(App.frmMain.nMahnEUR, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 28.09.20 Ä1899
						App.frmMain.axLL.LlDefineFieldExt("EUR-Offen", Sal.NumberToStrX(App.frmMain.nMahnOffen, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "MB-Aktionen je Benutzer.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Zuständig", App.frmMain.strZust, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Jahr", Sal.NumberToStrX(App.frmMain.nRechJahr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("AnzAlle", Sal.NumberToStrX(App.frmMain.nAnzAlle, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("TypDetail", App.frmMain.strTypDetail, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht.Left(6) == "Brief_" && strPBericht.Right(4) == ".crd") 
				{
					// Call PalReport(frmBrAktiErf, strTyp || '.QRP',
					// ':frmBrAktiErf.strZei, :frmBrAktiErf.dfArztNr,:frmBrAktiErf.strTAN1, :frmBrAktiErf.strTAN2,:frmBrAktiErf.strTAStr,:frmBrAktiErf.strTAOrt,
					// :frmBrAktiErf.dfHalterNr,:frmBrAktiErf.strTHN1,:frmBrAktiErf.strTHN2,:frmBrAktiErf.strTHStr,:frmBrAktiErf.strTHOrt, :frmBrAktiErf.strTHLand,
					// :frmBrAktiErf.dfRechNr, :frmBrAktiErf.dfAussenst, :frmBrAktiErf.dfRaten, :frmBrAktiErf.nFax, :frmBrAktiErf.nPRNr',
					// 'Zei, ArztNr, AName1, AName2, AStr, AOrt,
					// HalterNr, HName1, HName2, HStr, HOrt, HLand,
					// RechNr, Aussenst, Raten, Fax, PRNr', nErr)
					if (locals.bAsField) 
					{
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmBrAktiErf.dfArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 14.01.08 Ä203
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmBrAktiErf.dfArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmBrAktiErf.dfHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmBrAktiErf.dfArztNr.Number, App.frmBrAktiErf.dfHalterNr.Number), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", Sal.NumberToStrX(App.frmBrAktiErf.dfRechNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 11.07.23
						if (App.frmBrAktiErf.strTALand != "") 
						{
							if (App.frmBrAktiErf.strTALand.Length <= 2) 
							{
								if (App.frmBrAktiErf.strTALand != strAltLand) 
								{
									strAltLand = App.frmBrAktiErf.strTALand;
								}
								App.frmBrAktiErf.strTALand = Int.PalPruefeLC(App.frmBrAktiErf.strTALand, 0);
							}
						}

						if (strPBericht == "Brief_RZGem.crd" || strPBericht == "Brief_RZGemBrief.crd" || strPBericht == "Brief_RZoS.crd") 
						{
							// Call PalReport(frmBrAktiErf, strTyp || '.QRP',
							// ':frmBrAktiErf.strZei, :frmBrAktiErf.dfArztNr,:frmBrAktiErf.dfEWA1, :frmBrAktiErf.strEWA,:frmBrAktiErf.dfEWA2,:frmBrAktiErf.dfEWA3,
							// :frmBrAktiErf.dfHalterNr,:frmBrAktiErf.strTHN1,:frmBrAktiErf.strTHN2,:frmBrAktiErf.strTHStr,:frmBrAktiErf.strTHOrt, :frmBrAktiErf.strTHLand,
							// :frmBrAktiErf.dfRechNr, :frmBrAktiErf.dfDM, :frmBrAktiErf.nFax',
							// 'Zei, ArztNr, AName1, AName2, AStr, AOrt,
							// HalterNr, HName1, HName2, HStr, HOrt, HLand,
							// RechNr, DM, Fax', nErr)
							nArztNrL = Int.PalCheckLarztnr(App.frmBrAktiErf.dfArztNr.Number);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmBrAktiErf.dfEWA1.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmBrAktiErf.strEWA, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmBrAktiErf.dfEWA2.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmBrAktiErf.dfEWA3.Text, Const.LL_TEXT, ref locals.nRet);
							// 14.01.08 Ä203
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmBrAktiErf.dfEWA1.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmBrAktiErf.strEWA, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmBrAktiErf.dfEWA2.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmBrAktiErf.dfEWA3.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
							// ! 13.08.10
							App.frmMain.axLL.LlDefineVariableExt("EURWorte", PalNumberToWords(App.frmBrAktiErf.dfDM.Number), Const.LL_TEXT, ref locals.nRet);
							// ! 19.08.10 OTÄ443
							App.frmMain.axLL.LlDefineVariableExt("Scheck-Nr", Sal.NumberToStrX(App.frmBrAktiErf.nMaxScheckNr, 0), Const.LL_NUMERIC, ref locals.nRet);
							// 19.02.08
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
							// 15.01.18 Ä1678
							App.frmMain.axLL.LlDefineVariableExt("Voranschriften", App.frmBrAktiErf.mlVoranschriften.Text, Const.LL_TEXT, ref locals.nRet);
							// 28.04.21 F4764
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);
						}
						else if (strPBericht == "Brief_OPErl.crd" || strPBericht == "Brief_OPRuh.crd" || strPBericht == "Brief_OPRuR.crd" || strPBericht == "Brief_OPIns.crd")  // 28.04.21 F4764 + or strPBericht = Brief_OPRuR.crd or strPBericht = Brief_OPIns.crd
						{
							nArztNrL = 0;
							App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", nArztNrL.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmBrAktiErf.dfDrittE.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", "", Const.LL_TEXT, ref locals.nRet);
							// 14.01.08 Ä203
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmBrAktiErf.dfDrittE.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
							// 19.02.08
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
							// 28.04.21 F4764
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);
						}
						else if ((strPBericht.Left(8) == "Brief_OP" || strPBericht.Left(11) == "Brief_TitZu" || strPBericht.Left(10) == "Brief_Unzu" || strPBericht.Left(9) == "Brief_RgA") && strPBericht != "Brief_OPAnz.crd")  // 28.04.21 F4764 + And strPBericht != Brief_OPAnz.crd
						{
							nArztNrL = Int.PalCheckLarztnr(App.frmBrAktiErf.dfArztNr.Number);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
							// 21.06.13 Ä902
							strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0) + Int.PalStrNum0(App.frmBrAktiErf.dfHalterNr.Number, 6, 0);

							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmBrAktiErf.strTAN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmBrAktiErf.strTAN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmBrAktiErf.strTAStr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmBrAktiErf.strTAOrt, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmBrAktiErf.strTALand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Halter.Land", App.frmBrAktiErf.strTHLand, Const.LL_TEXT, ref locals.nRet);
							// 27.07.15 Ä1235
							if (PalIsSVAdresse(App.frmBrAktiErf.dfArztNr.Number, App.frmBrAktiErf.dfHalterNr.Number)) 
							{
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strSVN1, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strSVN2, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strSVS, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strSVO, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strSVLand, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
							}
							else
							{
								// 14.01.08 Ä203
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmBrAktiErf.strTHN1, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmBrAktiErf.strTHN2, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmBrAktiErf.strTHStr, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmBrAktiErf.strTHOrt, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmBrAktiErf.strTHLand, Const.LL_TEXT, ref locals.nRet);
								// 19.02.08
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
							}
							// 11.12.17 Ä1638
							Int.SqlImmedSel("SELECT sum(hbdm) INTO :dlgLlDruck.pnDummy FROM hb WHERE " + Int.PalArztNr("hb", App.frmBrAktiErf.dfArztNr.Number, App.frmBrAktiErf.nArztNr2) + " AND hbhalternr = " + Sal.NumberToStrX(App.frmBrAktiErf.dfHalterNr.Number, 
									0));
							pnDummy = pnDummy * -1;
							App.frmMain.axLL.LlDefineVariableExt("HaBu-offen", pnDummy.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
							// 28.04.21 F4764
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmBrAktiErf.dfArztNr.Number, App.frmBrAktiErf.dfHalterNr.Number), Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							nArztNrL = Int.PalCheckLarztnr(App.frmBrAktiErf.dfArztNr.Number);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
							// 21.06.13 Ä902
							strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0);

							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmBrAktiErf.strTAN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmBrAktiErf.strTAN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmBrAktiErf.strTAStr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmBrAktiErf.strTAOrt, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmBrAktiErf.strTALand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Anrede", App.frmBrAktiErf.strTAAnrede, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Halter.Land", App.frmBrAktiErf.strTHLand, Const.LL_TEXT, ref locals.nRet);
							// 14.01.08 Ä203
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmBrAktiErf.strTAN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmBrAktiErf.strTAN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmBrAktiErf.strTAStr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmBrAktiErf.strTAOrt, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmBrAktiErf.strTALand, Const.LL_TEXT, ref locals.nRet);
							// 19.02.08
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
							// 28.04.21 F4764
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", App.frmBrAktiErf.strTAMail, Const.LL_TEXT, ref locals.nRet);
						}
						App.frmMain.axLL.LlDefineVariableExt("Halter.Nr", Sal.NumberToStrX(App.frmBrAktiErf.dfHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name1", App.frmBrAktiErf.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmBrAktiErf.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmBrAktiErf.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmBrAktiErf.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Land", App.frmBrAktiErf.strTHLand, Const.LL_TEXT, ref locals.nRet);
						// 15.04.13 Ä923
						App.frmMain.axLL.LlDefineVariableExt("Halter.GebDat", Int.PalDateToStrJJJJMMTT(App.frmBrAktiErf.dtTHGebDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Rechnung.Nr", Sal.NumberToStrX(App.frmBrAktiErf.dfRechNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Aussenstände", Sal.NumberToStrX(App.frmBrAktiErf.dfAussenst.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 18.07.18 Ä1763
						if (bePost) 
						{
							App.frmBrAktiErf.nFax = 1;
						}

						App.frmMain.axLL.LlDefineVariableExt("alsFax", Sal.NumberToStrX(App.frmBrAktiErf.nFax, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Raten", Sal.NumberToStrX(App.frmBrAktiErf.dfRaten.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Ratenhoehe", Sal.NumberToStrX(App.frmBrAktiErf.dfRatenhoehe.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRNr", Sal.NumberToStrX(App.frmBrAktiErf.nPRNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR", Sal.NumberToStrX(App.frmBrAktiErf.dfDM.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Vermerk", App.frmBrAktiErf.dfVermerk.Text, Const.LL_TEXT, ref locals.nRet);
						if (strPBericht.Scan("WidM2") != -1 && App.frmBrAktiErf.dfvom.DateTime == Sys.DATETIME_Null) 
						{
							Int.SqlImmedSel("SELECT MAX(akdatum) INTO :frmBrAktiErf.dfvom FROM ak WHERE " + Int.PalArztNr("ak", App.frmBrAktiErf.dfArztNr.Number, App.frmBrAktiErf.nArztNr2) + " AND akhalternr = :frmBrAktiErf.dfHalterNr AND aktyp = \'BR\' AND aktypdetail = \'WidM1\'");
						}
						App.frmMain.axLL.LlDefineVariableExt("vom", Int.PalDateToStrJJJJMMTT(App.frmBrAktiErf.dfvom.DateTime), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 14.11.11 Ä658
						App.frmMain.axLL.LlDefineVariableExt("Variabel", App.frmBrAktiErf.dfVariabel.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("DrittEmpfängerl", App.frmBrAktiErf.dfDrittE.Text, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmBrAktiErf.dfArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmBrAktiErf.dfHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943	28.04.21 F4764 auskommentiert und nach oben in If Else
						// Call axLL.LlDefineVariableExt( 'PMEmail', PalHoleEMail( frmBrAktiErf.dfArztNr, frmBrAktiErf.dfHalterNr), LL_TEXT, nRet )

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", Sal.NumberToStrX(App.frmBrAktiErf.dfRechNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 27.04.09 OTÄ212
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "1", Const.LL_NUMERIC, ref locals.nRet);
						// 04.02.10 OTÄ376
						// If SalStrLeftX(strPBericht,9) = 'Brief_TSK'
						// Call axLL.LlDefineVariableExt( 'TSK-Unklarheiten', frmBrAktiErf.strTSKFehler, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'TSK-Kunde', frmBrAktiErf.dfTSKKunde, LL_TEXT, nRet )
						// 08.12.16 Ä1437
						App.frmMain.axLL.LlDefineVariableExt("EWAabDatum", Int.PalDateToStrJJJJMMTT(dtEWAAbDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EWAVariante", nEWAVariante.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EWAabEUR", nEWAabEUR.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", Sal.NumberToStrX(App.frmBrAktiErf.nFax, 0), Const.LL_TEXT, ref locals.nRet);
						// 16.11.20
						App.frmMain.axLL.LlDefineVariableExt("Anrede", App.frmBrAktiErf.dfAnrede.Text, Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "BriefVariabel.crd") 
				{
					// Call PalReport(frmBriefVari, strPReport,
					// ':frmBriefVari.strZei, :frmBriefVari.dfArztNr, :frmBriefVari.dfHalterNr, :frmBriefVari.dfRechNr,
					// :frmBriefVari.dfRA0, :frmBriefVari.dfRA1, :frmBriefVari.dfRA2, :frmBriefVari.dfRA3, :frmBriefVari.dfRA4, :frmBriefVari.mlText, :frmBriefVari.dtDruckDat,
					// :frmBriefVari.strTHN1, :frmBriefVari.dfBetreff, :frmBriefVari.nPRNr, :frmBriefVari.dfAnrede, :frmBriefVari.strName',
					// 'Zei, ArztNr, HalterNr, RechNr,
					// An0, An1, An2, An3, An4, Text, Datum, HName1, Betreff, PRNr, Anrede, Name', nErr)
					if (locals.bAsField) 
					{
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmBriefVari.dfArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Nr", Sal.NumberToStrX(App.frmBriefVari.dfHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Rechnung.Nr", Sal.NumberToStrX(App.frmBriefVari.dfRechNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 14.01.08 Ä203
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmBriefVari.dfArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmBriefVari.dfArztNr.Number);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						// 13.01.09 OTF163
						// 21.04.09 OTÄ212
						// If strPSpezial = 'A'
						// Call axLL.LlDefineVariableExt( 'Bericht.HalterNr', '0', LL_NUMERIC, nRet )
						// Else
						// Call axLL.LlDefineVariableExt( 'Bericht.HalterNr', SalNumberToStrX(frmBriefVari.dfHalterNr,0), LL_NUMERIC, nRet )
						if (App.frmBriefVari.rbPMa.Checked) 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "1", Const.LL_NUMERIC, ref locals.nRet);
							// 14.01.08 Ä203
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmBriefVari.dfRA0.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmBriefVari.dfRA1.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmBriefVari.dfRA2.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmBriefVari.dfRA3.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmBriefVari.dfRA4.Text, Const.LL_TEXT, ref locals.nRet);
							// 19.02.08
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
							// 04.07.18 F3174 von unten
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						}
						else if (App.frmBriefVari.rbPMA.Checked) 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "2", Const.LL_NUMERIC, ref locals.nRet);
							// 21.06.13 Ä902
							strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0);
							// 14.01.08 Ä203
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmBriefVari.dfRA0.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmBriefVari.dfRA1.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmBriefVari.dfRA2.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmBriefVari.dfRA3.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmBriefVari.dfRA4.Text, Const.LL_TEXT, ref locals.nRet);
							// 19.02.08
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);

							// 04.07.18 F3174 von unten
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmBriefVari.dfArztNr.Number, 0), Const.LL_TEXT, ref locals.nRet);

						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "0", Const.LL_NUMERIC, ref locals.nRet);
							// 21.06.13 Ä902
							strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0) + Int.PalStrNum0(App.frmBriefVari.dfHalterNr.Number, 5, 0);
							// 27.07.15 Ä1235
							if (PalIsSVAdresse(App.frmBriefVari.dfArztNr.Number, App.frmBriefVari.dfHalterNr.Number)) 
							{
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strSVN1, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strSVN2, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strSVS, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strSVO, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strSVLand, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
							}
							else
							{
								// 14.01.08 Ä203
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmBriefVari.dfRA0.Text, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmBriefVari.dfRA1.Text, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmBriefVari.dfRA2.Text, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmBriefVari.dfRA3.Text, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmBriefVari.dfRA4.Text, Const.LL_TEXT, ref locals.nRet);
								// 19.02.08
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
							}
							// 04.07.18 F3174 von unten
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmBriefVari.dfArztNr.Number, App.frmBriefVari.dfHalterNr.Number), Const.LL_TEXT, ref locals.nRet);


						}
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmBriefVari.dfHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943 F3174 auskommentiert, nach oben verschoben
						// Call axLL.LlDefineVariableExt( 'PMEmail', PalHoleEMail( frmBriefVari.dfArztNr, frmBriefVari.dfHalterNr), LL_TEXT, nRet )


						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", Sal.NumberToStrX(App.frmBriefVari.dfRechNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Anschrift.Zeile1", App.frmBriefVari.dfRA0.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Anschrift.Zeile2", App.frmBriefVari.dfRA1.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Anschrift.Zeile3", App.frmBriefVari.dfRA2.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Anschrift.Zeile4", App.frmBriefVari.dfRA3.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Anschrift.Zeile5", App.frmBriefVari.dfRA4.Text, Const.LL_TEXT, ref locals.nRet);
						// 15.05.09
						App.frmMain.axLL.LlDefineVariableExt("Text", App.frmBriefVari.mlText.Text, Const.LL_TEXT, ref locals.nRet);
						// Call frmBriefVari.axTXText.PropSetSelStart( 0 )
						// Call frmBriefVari.axTXText.PropSetSelLength( 99999999 )
						// Call frmBriefVari.axTXText.PropGetRTFSelText( plsMemo )
						// Call axLL.LlDefineVariableExt( 'Text', plsMemo, LL_RTF, nRet )

						// 18.07.18 Ä1763
						if (bePost) 
						{
							App.frmBriefVari.nFax = 1;
						}

						App.frmMain.axLL.LlDefineVariableExt("alsFax", Sal.NumberToStrX(App.frmBriefVari.nFax, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("DruckDatum", Int.PalDateToStrJJJJMMTT(App.frmBriefVari.dtDruckDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRNr", Sal.NumberToStrX(App.frmBriefVari.nPRNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name", App.frmBriefVari.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Anrede", App.frmBriefVari.dfAnrede.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Betreff", App.frmBriefVari.dfBetreff.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Name", App.frmBriefVari.strName, Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", Sal.NumberToStrX(App.frmBriefVari.nFax, 0), Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmBriefVari.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmBriefVari.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "BriefRTF.crd") 
				{
					if (locals.bAsField) 
					{
					}
					else
					{

						App.frmMain.axLL.LlDefineVariableExt("Anschrift.Zeile1", "Zeile1", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Anschrift.Zeile2", "Zeile2", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Anschrift.Zeile3", "Zeile3", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Anschrift.Zeile4", "Zeile4", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Anschrift.Zeile5", "Zeile5", Const.LL_TEXT, ref locals.nRet);
						// Call frmLoad.axTXText.PropGetText( plsMemo )
						App.frmLoad.axTXText.PropSetSelStart(0);
						App.frmLoad.axTXText.PropSetSelLength(99999999);
						App.frmLoad.axTXText.PropGetRTFSelText(ref plsMemo);
						App.frmMain.axLL.LlDefineVariableExt("Text", plsMemo, Const.LL_RTF, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "BriefEDA.crd") 
				{
					// Call PalReport(frmEDA, 'EDA.QRP',
					// ':frmEDA.dfBez, :frmEDA.ANTANZ, :frmEDA.SANZ, :frmEDA.SKATNR, :frmEDA.SUASP, :frmEDA.ASPANZ',
					// 'EDAID, ANTANZ, SANZ, SKATNR, SUASP, ASPANZ', nErr)
					if (locals.bAsField) 
					{
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("ID", App.frmEDA.dfBez.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("ANTANZ", Sal.NumberToStrX(App.frmEDA.ANTANZ, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("SANZ", Sal.NumberToStrX(App.frmEDA.SANZ, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("SKATNR", Sal.NumberToStrX(App.frmEDA.SKATNR, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("SUASP", Sal.NumberToStrX(App.frmEDA.SUASP, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("ASPANZ", Sal.NumberToStrX(App.frmEDA.ASPANZ, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "Amtsgericht Uelzen ", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "- Zentrales Mahngericht -", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "Rosenmauer 2", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "29525 Uelzen", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "1", Const.LL_NUMERIC, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				// Else If strPBericht = 'Halter prüfen.lst'
				// Call PalReport(frmDiskAbr,'HPRUEF.QRP',
				// ':frmDiskAbr.nTANr,:frmDiskAbr.strTAN1,:frmDiskAbr.strTAN2,:frmDiskAbr.strTAStr,:frmDiskAbr.strTAOrt,
				// :frmDiskAbr.nTVNr,:frmDiskAbr.strTVN1,:frmDiskAbr.strTVN2,:frmDiskAbr.strTVStr,:frmDiskAbr.strTVOrt,
				// :frmDiskAbr.nTAArztNr,:frmDiskAbr.strBearbeiter,:frmDiskAbr.dtBearbDatum, :frmDiskAbr.strFehler,
				// :frmDiskAbr.strZVon, :frmDiskAbr.dtZDatum, :frmDiskAbr.lsZBemerk',
				// 'TAHALTERNR,TANAME1,TANAME2,TASTR,TAORT,
				// TVHALTERNR,TVNAME1,TVNAME2,TVSTR,TVORT,
				// TAARZTNR,BEARBEITER,BEARBDATUM, FEHLER,
				// ZVON, ZDATUM, ZBEMERK',
				// nErr)
				// If bAsField
				// Call axLL.LlDefineFieldExt( 'Mitglied.Nr', SalNumberToStrX(frmDiskAbr.nTAArztNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'TA.Halter-Nr', SalNumberToStrX(frmDiskAbr.nTANr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'TA.Name1', frmDiskAbr.strTAN1, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'TA.Name2', frmDiskAbr.strTAN2, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'TA.Strasse', frmDiskAbr.strTAStr, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'TA.Ort', frmDiskAbr.strTAOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'TV.Halter-Nr', SalNumberToStrX(frmDiskAbr.nTVNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'TV.Name1', frmDiskAbr.strTVN1, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'TV.Name2', frmDiskAbr.strTVN2, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'TV.Strasse', frmDiskAbr.strTVStr, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'TV.Ort', frmDiskAbr.strTVOrt, LL_TEXT, nRet )
				// 18.03.10 OTÄ397
				// Call axLL.LlDefineFieldExt( 'TA.Reverse', SalNumberToStrX(frmDiskAbr.nTAReverse,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'TA.UStID', frmDiskAbr.strTAUStID, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'TV.Reverse', SalNumberToStrX(frmDiskAbr.nTVReverse,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'TV.UStID', frmDiskAbr.strTVUStID, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Bearbeiter', frmDiskAbr.strBearbeiter, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Bearbeitungs-Datum', PalDateToStrJJJJMMTT(frmDiskAbr.dtBearbDatum), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineFieldExt( 'Fehler', frmDiskAbr.strFehler, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Zettel.von', frmDiskAbr.strZVon, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Zettel.Datum', PalDateToStrJJJJMMTT(frmDiskAbr.dtZDatum), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineFieldExt( 'Bemerkung', frmDiskAbr.lsZBemerk, LL_TEXT, nRet )
				// Else
				// Call axLL.LlDefineVariableExt( 'vMitglied.Nr', SalNumberToStrX(frmDiskAbr.nTAArztNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'vBearbeiter', frmDiskAbr.strBearbeiter, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'vBearbeitungs-Datum', PalDateToStrJJJJMMTT(frmDiskAbr.dtBearbDatum), LL_DATE_YYYYMMDD, nRet )
				// 19.02.08
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNr', SalNumberToStrX(frmDiskAbr.nTAArztNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNrL', SalNumberToStrX(PalHolePMArzt(frmDiskAbr.nTAArztNr),0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.HalterNr', '0', LL_NUMERIC, nRet )
				// 06.05.13 Ä943
				// Call axLL.LlDefineVariableExt( 'PMEmail', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.RechnungNr', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name1', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name2', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Strasse', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Ort', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Land', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Deckblatt', '0', LL_TEXT, nRet )
				// 17.10.17
				// Call axLL.LlDefineVariableExt( 'Bericht.auf_blanco', '1', LL_TEXT, nRet )
				else if (strPBericht == "Halter prüfen.lst") 
				{
					// Call PalReport(frmDiskAbr,'HPRUEF.QRP',
					// ':frmDiskAbr.nTANr,:frmDiskAbr.strTAN1,:frmDiskAbr.strTAN2,:frmDiskAbr.strTAStr,:frmDiskAbr.strTAOrt,
					// :frmDiskAbr.nTVNr,:frmDiskAbr.strTVN1,:frmDiskAbr.strTVN2,:frmDiskAbr.strTVStr,:frmDiskAbr.strTVOrt,
					// :frmDiskAbr.nTAArztNr,:frmDiskAbr.strBearbeiter,:frmDiskAbr.dtBearbDatum, :frmDiskAbr.strFehler,
					// :frmDiskAbr.strZVon, :frmDiskAbr.dtZDatum, :frmDiskAbr.lsZBemerk',
					// 'TAHALTERNR,TANAME1,TANAME2,TASTR,TAORT,
					// TVHALTERNR,TVNAME1,TVNAME2,TVSTR,TVORT,
					// TAARZTNR,BEARBEITER,BEARBDATUM, FEHLER,
					// ZVON, ZDATUM, ZBEMERK',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmDiskAbr.nTAArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("TA.Halter-Nr", Sal.NumberToStrX(App.frmDiskAbr.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("TA.Name1", App.frmDiskAbr.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("TA.Name2", App.frmDiskAbr.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("TA.Strasse", App.frmDiskAbr.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("TA.Ort", App.frmDiskAbr.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("TV.Halter-Nr", Sal.NumberToStrX(App.frmDiskAbr.nTVNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("TV.Name1", App.frmDiskAbr.strTVN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("TV.Name2", App.frmDiskAbr.strTVN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("TV.Strasse", App.frmDiskAbr.strTVStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("TV.Ort", App.frmDiskAbr.strTVOrt, Const.LL_TEXT, ref locals.nRet);
						// 18.03.10 OTÄ397
						App.frmMain.axLL.LlDefineFieldExt("TA.Reverse", Sal.NumberToStrX(App.frmDiskAbr.nTAReverse, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("TA.UStID", App.frmDiskAbr.strTAUStID, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("TV.Reverse", Sal.NumberToStrX(App.frmDiskAbr.nTVReverse, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("TV.UStID", App.frmDiskAbr.strTVUStID, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineFieldExt("Bearbeiter", App.frmDiskAbr.strBearbeiter, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Bearbeitungs-Datum", Int.PalDateToStrJJJJMMTT(App.frmDiskAbr.dtBearbDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Fehler", App.frmDiskAbr.strFehler, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Zettel.von", App.frmDiskAbr.strZVon, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Zettel.Datum", Int.PalDateToStrJJJJMMTT(App.frmDiskAbr.dtZDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Bemerkung", App.frmDiskAbr.lsZBemerk, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Nr", Sal.NumberToStrX(App.frmDiskAbr.nTAArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vBearbeiter", App.frmDiskAbr.strBearbeiter, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vBearbeitungs-Datum", Int.PalDateToStrJJJJMMTT(App.frmDiskAbr.dtBearbDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmDiskAbr.nTAArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmDiskAbr.nTAArztNr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Mahnungen.lst" || strPBericht == "Mahnung A4.lst" || strPBericht == "MahnUeberw.lst" || strPBericht == "Mahnung A4 tvn.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("ArztNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mahnung-Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtMahnDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// Call axLL.LlDefineFieldExt( 'Halter.Anrede', frmMain.strTHAnr, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Titel', frmMain.strTHTi, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Vorname', frmMain.strTHVN, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Nachname', frmMain.strTHNN, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Name2', frmMain.strTHN2, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Strasse', frmMain.strTHStr, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Ort', frmMain.strTHOrt, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Land', frmMain.strTHLand, LL_TEXT, nRet )
						App.frmMain.axLL.LlDefineFieldExt("Mahnung.Bereich", Sal.NumberToStrX(App.frmMain.nMahnBereich, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mahnung.Text", App.frmMain.strMahnText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mahnung.Mahnstufe", Sal.NumberToStrX(App.frmMain.nMahnStufe, 0), Const.LL_NUMERIC, ref locals.nRet);
						// Call axLL.LlDefineFieldExt( 'Mahnung.MZF', frmMain.strMahnMZF, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Mahnung.EUR', SalNumberToStrX(frmMain.nMahnEUR,2), LL_NUMERIC, nRet )
						// 12.11.18 Ä1807 + mdgirocodedm
						App.frmMain.axLL.LlDefineFieldExt("Mahnung.GirocodeEUR", Sal.NumberToStrX(App.frmMain.nMahnGirocodeDM, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Memo", App.frmMain.lsMemo, Const.LL_TEXT, ref locals.nRet);
						// 17.07.12 Ä792
						// 08.09.14 F2131
						// Set nPicture = 0
						// Set nPicture = MImgLoadFromString( frmMain.lsBild, MIMG_TYPE_BMP, 0 )
						// If nPicture != 0
						// 08.08.14 F2044 + If lsBildAlt != frmMain.lsBild
						// If lsBildAlt != frmMain.lsBild
						// 18.03.12 F1549 strTVNPath -> strTemp 	25.03.13 + ' || PalDateToStrJJJJMMTThhmmsst( SalDateCurrent(  ) ) || '
						// If NOT MImgSave( nPicture, strTemp || '\\Logo' || strPLogo || '.bmp', MIMG_TYPE_BMP )
						// Call SalStatusSetText(hWndForm, 'Das Logo für Mitglied ' || SalNumberToStrX( frmMain.nTANr, 0) || ' kann nicht nach ' || strTVNPath || ' gespeichert werden.')
						// Set nPicture = 0
						// 13.02.13 F1549
						// Call PalLog( 'Logo MG Fehler ' || SalNumberToStrX( frmMain.nTANr, 0) )
						// Else
						// Call axLL.LlDefineVariableExt('Mitglied.Logo', strTVNPath || '\\Layouts\\Logo.bmp', LL_DRAWING, nRet)
						// Set strBildDatei = strTemp || '\\Logo' || strPLogo || '.bmp'
						// 13.02.13 F1549
						// Call PalLog( 'Logo MG Ok ' || SalNumberToStrX( frmMain.nTANr, 0) )
						// 08.08.14 F2044
						// Set lsBildAlt = frmMain.lsBild
						// Else
						// Call PalLog( 'Logo MG identisch ' || SalNumberToStrX( frmMain.nTANr, 0) )
						// If nPicture = 0
						// If frmMain.strLogo!= ''
						// Set strPDummy = strTVNPath || '\\' || frmMain.strLogo || '.BMP'
						// Set strBildDatei = Const.PATH_IMAGES || frmMain.strLogo || '.BMP'
						// 13.02.13 F1549
						// Call PalLog( 'Logo MG Datei ' || SalNumberToStrX( frmMain.nTANr, 0) )
						// Else
						// Set strBildDatei = ''
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Logo", strBildDatei, Const.LL_DRAWING, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Anrede", App.frmMain.strTHAnr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Titel", App.frmMain.strTHTi, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Vorname", App.frmMain.strTHVN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Nachname", App.frmMain.strTHNN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						// 05.06.07 A101
						App.frmMain.axLL.LlDefineVariableExt("Mahnung.TextO", App.frmMain.lsMahnMTO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mahnung.TextU", App.frmMain.lsMahnMTU, Const.LL_TEXT, ref locals.nRet);
						// Call axLL.LlDefineVariableExt( 'Mahnung.TextO1', frmMain.strMahnMTO1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Mahnung.TextO2', frmMain.strMahnMTO2, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Mahnung.TextO3', frmMain.strMahnMTO3, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Mahnung.TextO4', frmMain.strMahnMTO4, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Mahnung.TextO5', frmMain.strMahnMTO5, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Mahnung.TextO6', frmMain.strMahnMTO6, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Mahnung.TextU1', frmMain.strMahnMTU1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Mahnung.TextU2', frmMain.strMahnMTU2, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Mahnung.TextU3', frmMain.strMahnMTU3, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Mahnung.TextU4', frmMain.strMahnMTU4, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Mahnung.TextU5', frmMain.strMahnMTU5, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Mahnung.TextU6', frmMain.strMahnMTU6, LL_TEXT, nRet )
						// 06.11.18 Ä1806 + mvnr

						App.frmMain.axLL.LlDefineVariableExt("Mahnung.MZF", App.frmMain.strMahnMZF, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mahnung.EUR", Sal.NumberToStrX(App.frmMain.nMahnEUR, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mahnung.Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtMahnDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mahnung.Zahlungseingang", Int.PalDateToStrJJJJMMTT(App.frmMain.dtMahnZahlEing), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 19.10.18 Ä1802
						strGirocode = "BCD";
						strGirocode = strGirocode + "~d010" + "001";
						strGirocode = strGirocode + "~d010" + "1";
						strGirocode = strGirocode + "~d010" + "SCT";
						strGirocode = strGirocode + "~d010" + "NOLADE21HIK";
						strGirocode = strGirocode + "~d010" + "moveta r.V.k.V. Elze";
						strGirocode = strGirocode + "~d010" + strIBAN;
						strGirocode = strGirocode + "~d010" + "EUR" + Int.PalStrReplace(Sal.NumberToStrX(App.frmMain.nMahnGirocodeDM, 2), ",", ".");
						strGirocode = strGirocode + "~d010" + "";
						strGirocode = strGirocode + "~d010" + "";
						strGirocode = strGirocode + "~d010" + App.frmMain.strMahnMZF.Left(2) + "." + App.frmMain.strMahnMZF.Mid(2, 4) + "." + App.frmMain.strMahnMZF.Mid(6, 8) + "." + App.frmMain.strMahnMZF.Right(1);
						App.frmMain.axLL.LlDefineVariableExt("Rechnung.Girocode", strGirocode, Const.LL_TEXT, ref locals.nRet);
						// 13.09.10 OTÄ437
						if (strPBericht == "MahnUeberw.lst") 
						{
							Int.SqlImmedSel("SELECT count(*) FROM rk INTO :dlgLlDruck.nCount WHERE rkarztnr = :frmMain.nTANr AND rkhalternr = :frmMain.nTHNr AND rkkzzahl<2 AND rkdeaktiv IS NULL");
							if (nCount == 1) 
							{
								App.frmMain.axLL.LlDefineVariableExt("Bericht.SummeaufUeTraeger", "1", Const.LL_TEXT, ref locals.nRet);
							}
							else
							{
								App.frmMain.axLL.LlDefineVariableExt("Bericht.SummeaufUeTraeger", "0", Const.LL_TEXT, ref locals.nRet);
							}
						}
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmMain.nTANr);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNrL', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0) + Int.PalStrNum0(App.frmMain.nTHNr, 5, 0);

						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, App.frmMain.nTHNr), Const.LL_TEXT, ref locals.nRet);
						// 22.10.13 Ä903
						App.frmMain.axLL.LlDefineVariableExt("IBAN", strIBAN, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 27.07.15 Ä1235
						if (PalIsSVAdresse(App.frmMain.nTANr, App.frmMain.nTHNr)) 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strSVN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strSVN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strSVS, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strSVO, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strSVLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", (App.frmMain.strTHTi + App.frmMain.strTHVN + " " + App.frmMain.strTHNN).Trim(), Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						}
						// 17.02.17 Ä1504 + Zahlungserinnerungen
						App.frmMain.axLL.LlDefineVariableExt("Mahnung.MaxMahnstufe", Sal.NumberToStrX(App.frmMain.nMahnStufe, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
						// 08.10.21 Ä1969
						App.frmMain.axLL.LlDefineVariableExt("vHalter.FaellTg", Sal.NumberToStrX(App.frmMain.nTHFaellTg, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 19.05.22 Ä2019
						strArztHalter = Int.PalStrNum0(App.frmMain.nTANr, 4, 0) + Int.PalStrNum0(App.frmMain.nTHNr, 5, 0);
					}
				}
				else if (strPBericht == "Rechnungen.lst" || strPBericht == "Überweisung A4.lst" || strPBericht == "Rechnung A4.lst" || strPBericht == "Überweisung AT.lst" || strPBericht == "Vorab-Rechnung.lst" || strPBericht == "Rechnung A4 tvn.lst") 
				{
					if (locals.bAsField) 
					{
						// 23.10.20
						App.frmMain.axLL.LlDefineFieldExt("RecordNo", nRecordNo.ToString(0), Const.LL_NUMERIC, ref locals.nRet);

						App.frmMain.axLL.LlDefineFieldExt("ArztNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// Call axLL.LlDefineFieldExt( 'Rechnung-Datum', PalDateToStrJJJJMMTT(frmMain.dtMahnDat), LL_DATE_YYYYMMDD, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Anrede', frmMain.strTHAnr, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Titel', frmMain.strTHTi, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Vorname', frmMain.strTHVN, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Nachname', frmMain.strTHNN, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Name2', frmMain.strTHN2, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Strasse', frmMain.strTHStr, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Ort', frmMain.strTHOrt, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Land', frmMain.strTHLand, LL_TEXT, nRet )
						App.frmMain.axLL.LlDefineFieldExt("Rechnung-Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtRepRechDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.LA", App.frmMain.strRepRechLA, Const.LL_TEXT, ref locals.nRet);
						// 25.03.19 Ä1845
						// If bVorschalt
						// Call axLL.LlDefineFieldExt( 'Rechnung.Text', SalNumberToStrX( frmSpeRg.nArztNr, 0 ) || ' (' || frmSpeRg.strBearbeiter || '/' || PalDateToStrSQLBase( frmSpeRg.dtBearbDatum ) || ') : '
						// || SalNumberToStrX( nAnzahl, 0 ) || ' Rg. mit € ' || SalNumberToStrX( nSumme,2 ), LL_TEXT, nRet )
						// Else
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Text", App.frmMain.strRepRechText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.MwSt", Sal.NumberToStrX(App.frmMain.nRepRechMwSt, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.EUR", Sal.NumberToStrX(App.frmMain.nRepRechDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 06.02.18 Ä1698 + leprebatt
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Rabatt", Sal.NumberToStrX(App.frmMain.nRabatt, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 12.10.20 Ä1903 + lepformat
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Format", Sal.NumberToStrX(App.frmMain.nFormat, 0), Const.LL_NUMERIC, ref locals.nRet);

						// Call axLL.LlDefineFieldExt( 'Rechnung.Zeilendatum', PalDateToStrJJJJMMTT(frmMain.dtRepRechZeiDat), LL_DATE_YYYYMMDD, nRet )
						// Call axLL.LlDefineFieldExt( 'Rechnung.MZF', frmMain.strMahnMZF, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Rechnung.EUR', SalNumberToStrX(frmMain.nMahnEUR,2), LL_NUMERIC, nRet )
						// 25.04.12
						App.frmMain.axLL.LlDefineFieldExt("RechDatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtMahnDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 03.11.14 Ä1067 + reverseversion
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.ReverseVersion", Sal.NumberToStrX(App.frmMain.nReverseVersion, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Reverse", Sal.NumberToStrX(App.frmMain.nReverse, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 13.02.18 Ä1698
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.RabattSum", nRabattSum.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						// 27.08.18 Ä1769 + strPfadArchiv || SqlDatabase || '-Rechnungen' ||
						if (App.frmMain.strBarcode == "") 
						{
							App.frmMain.axLL.LlDefineFieldExt("Rechnung.BarcodeDateiname", "", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineFieldExt("Rechnung.BarcodeDateiname", Var.strPfadArchiv + Sql.Database + "-Rechnungen\\" + "A" + Int.PalStrNullen(Sal.NumberToStrX(App.frmMain.nTANr, 0), 4) + "\\" + "R" + Int.PalStrNullen(Sal.NumberToStrX(App.frmMain.nRechNr, 
										0), 6) + "\\" + App.frmMain.strBarcode + ".pdf", Const.LL_TEXT, ref locals.nRet);
						}

					}
					else
					{
						// 13.02.18 Ä1698
						// Call axLL.LlDefineVariableExt( 'Rechnung.Rabatt', SalNumberToStrX( nRabatt,0), LL_NUMERIC, nRet )

						// 25.03.19 Ä1845
						if (bVorschalt && strPSpezial == "LE") 
						{
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", "0", Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", "", Const.LL_TEXT, ref locals.nRet);
							// Call frm1.axText.PropGetRTFSelText( frmMain.lsMemo )
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Memo", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.UStID", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.UStID2", "", Const.LL_TEXT, ref locals.nRet);
							// 06.03.17 Ä1515 + arechtext
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.RechTextO", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.Nr", "0", Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.Anrede", "Firma", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.Titel", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.Vorname", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.Nachname", "Moveta r.V.k.V.", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.Name2", "Rechnungsabteilung", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.Strasse", "Danziger Str.1", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.Ort", "31008 Elze", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.Land", "", Const.LL_TEXT, ref locals.nRet);
							// 27.11.20 Ä1922 + DigitalRg
							App.frmMain.axLL.LlDefineVariableExt("vHalter.DigitalRg", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.LeitwegID", "", Const.LL_TEXT, ref locals.nRet);
							// 08.10.21 Ä1973
							// Call SqlImmedSel( 'SELECT SUM( lebrutto ), COUNT( DISTINCT lerechnr )
							// INTO :dlgLlDruck.nSumme, :dlgLlDruck.nAnzahl
							//  FROM le, h
							// WHERE learztnr = harztnr AND lehalternr = hhalternr AND hdeaktiv IS NULL
							// AND lebearbeiter = :frmSpeRg.strBearbeiter AND lebearbdatum = :frmSpeRg.dtBearbDatum
							// AND ((learztnr = :frmSpeRg.nArztNr AND lerechnr BETWEEN :frmSpeRg.dfA1von AND :frmSpeRg.dfA1bis))')
							Int.SqlImmedSel(@"SELECT SUM( lebrutto ), COUNT( DISTINCT lerechnr )
INTO :dlgLlDruck.nSumme, :dlgLlDruck.nAnzahl
 FROM le, h
WHERE learztnr = harztnr AND lehalternr = hhalternr AND hdeaktiv IS NULL
AND lebearbeiter = :frmSpeRg.strBearbeiter AND lebearbdatum = :frmSpeRg.dtBearbDatum
AND ((learztnr = :frmSpeRg.nArztNr AND lerechnr BETWEEN :frmSpeRg.dfA1von AND :frmSpeRg.dfA1bis)
OR (learztnr = :frmSpeRg.nArztNr2 AND lerechnr BETWEEN :frmSpeRg.dfA2von AND :frmSpeRg.dfA2bis))");
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.Anzeige", "1", Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.Mitglied", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.Anzahl", nAnzahl.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.Summe", nSumme.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.Bearbeiter", App.frmSpeRg.strBearbeiter, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.BearbeitDatum", Int.PalDateToStrSQLBase(App.frmSpeRg.dtBearbDatum), Const.LL_TEXT, ref locals.nRet);
							// 08.10.21 Ä1973
							nAnzahlA = 0;
							nAnzahlL = 0;
							nAnzahlASperr = 0;
							nAnzahlLSperr = 0;
							Int.SqlImmedSel(@"SELECT COUNT( DISTINCT lerechnr )
INTO :dlgLlDruck.nAnzahlLSperr
 FROM le, h
WHERE learztnr = harztnr AND lehalternr = hhalternr AND hdeaktiv IS NULL AND hsperrdatum IS NOT NULL
AND lebearbeiter = :frmSpeRg.strBearbeiter AND lebearbdatum = :frmSpeRg.dtBearbDatum
AND ((learztnr = :frmSpeRg.nArztNr AND lerechnr BETWEEN :frmSpeRg.dfA1von AND :frmSpeRg.dfA1bis))");
							Int.SqlImmedSel(@"SELECT akzpraxart, anr2
		INTO :frmMain.nKZPraxArt, :dlgLlDruck.nArztNr2
		FROM A
		WHERE a.aarztnr = :frmSpeRg.nArztNr");
							if (nArztNr2 > 0) 
							{
								Int.SqlImmedSel(@"SELECT COUNT( DISTINCT lerechnr )
INTO :dlgLlDruck.nAnzahlL
 FROM le, h
WHERE learztnr = harztnr AND lehalternr = hhalternr AND hdeaktiv IS NULL
AND lebearbeiter = :frmSpeRg.strBearbeiter AND lebearbdatum = :frmSpeRg.dtBearbDatum
AND ((learztnr = :frmSpeRg.nArztNr))");
								Int.SqlImmedSel(@"SELECT COUNT( DISTINCT lerechnr )
INTO :dlgLlDruck.nAnzahlA
 FROM le, h
WHERE learztnr = harztnr AND lehalternr = hhalternr AND hdeaktiv IS NULL
AND lebearbeiter = :frmSpeRg.strBearbeiter AND lebearbdatum = :frmSpeRg.dtBearbDatum
AND ((learztnr = :frmSpeRg.nArztNr2))");
								Int.SqlImmedSel(@"SELECT COUNT( DISTINCT lerechnr )
INTO :dlgLlDruck.nAnzahlASperr
 FROM le, h
WHERE learztnr = harztnr AND lehalternr = hhalternr AND hdeaktiv IS NULL AND hsperrdatum IS NOT NULL
AND lebearbeiter = :frmSpeRg.strBearbeiter AND lebearbdatum = :frmSpeRg.dtBearbDatum
AND ((learztnr = :frmSpeRg.nArztNr2))");
							}
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.AnzahlL", nAnzahlL.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.AnzahlA", nAnzahlA.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.AnzahlLSperr", nAnzahlLSperr.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.AnzahlASperr", nAnzahlASperr.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.DigitalMail", "", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.Anzeige", "0", Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.Mitglied", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
							// Call frm1.axText.PropGetRTFSelText( frmMain.lsMemo )
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.Memo", App.frmMain.lsMemo, Const.LL_TEXT, ref locals.nRet);
							// 12.11.19 Ä1872 + asteuernummer
							if (App.frmMain.strTAUStID == "") 
							{
								App.frmMain.strTAUStID = App.frmMain.strSteuerNr;
							}

							App.frmMain.axLL.LlDefineVariableExt("Mitglied.UStID", App.frmMain.strTAUStID, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.UStID2", App.frmMain.strTAUStID2, Const.LL_TEXT, ref locals.nRet);
							// 06.03.17 Ä1515 + arechtext
							App.frmMain.axLL.LlDefineVariableExt("Mitglied.RechTextO", App.frmMain.lsRechTextO, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.Anrede", App.frmMain.strTHAnr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.Titel", App.frmMain.strTHTi, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.Vorname", App.frmMain.strTHVN, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.Nachname", App.frmMain.strTHNN, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
							// 27.11.20 Ä1922 + DigitalRg
							App.frmMain.axLL.LlDefineVariableExt("vHalter.DigitalRg", App.frmMain.strDigitalRg, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.LeitwegID", App.frmMain.strLeitwegID, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("vHalter.DigitalMail", App.frmMain.strDigitalMail, Const.LL_TEXT, ref locals.nRet);

							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.Anzahl", "0", Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.Summe", "0", Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.Bearbeiter", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.BearbeitDatum", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.AnzahlL", "0", Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.AnzahlA", "0", Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.AnzahlLSperr", "0", Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Vorschalt.AnzahlASperr", "0", Const.LL_NUMERIC, ref locals.nRet);
							// 19.05.22 Ä2019
							strArztHalter = Int.PalStrNum0(App.frmMain.nTANr, 4, 0) + Int.PalStrNum0(App.frmMain.nTHNr, 5, 0);
						}
						// 17.07.12 Ä792
						nPicture = 0;
						nPicture = MT.MImg.LoadFromString(App.frmMain.lsBild, MT.MImg.MIMG_TYPE_BMP, 0);
						// 21.08.14F2121 + and strPLogo != ''
						if (strBildDatei != "") 
						{
							// Call VisFileDelete( strBildDatei )
							strBildDatei = "";
						}
						if (nPicture != 0 && strPLogo != "") 
						{
							// 08.08.14 F2044 + If lsBildAlt != frmMain.lsBild
							if (lsBildAlt != App.frmMain.lsBild || !(Var.hFile.Open(strTemp + "\\Logo" + strPLogo + ".bmp", Sys.OF_Exist))) 
							{
								// 18.03.12 F1549 strTVNPath -> strTemp 	25.03.13 + ' || PalDateToStrJJJJMMTThhmmsst( SalDateCurrent(  ) ) || '
								if (!(MT.MImg.Save(nPicture, strTemp + "\\Logo" + strPLogo + ".bmp", MT.MImg.MIMG_TYPE_BMP))) 
								{
									this.SetStatusBarText("Das Logo für Mitglied " + Sal.NumberToStrX(App.frmMain.nTANr, 0) + " kann nicht nach " + Var.strTVNPath + "\\Logo.bmp gespeichert werden.");
									nPicture = 0;
									// 13.02.13 F1549
									Int.PalLog("Logo RG Fehler " + Sal.NumberToStrX(App.frmMain.nTANr, 0));
								}
								else
								{
									// Call axLL.LlDefineVariableExt('Mitglied.Logo', strTVNPath || '\\Layouts\\Logo.bmp', LL_DRAWING, nRet)
									strBildDatei = strTemp + "\\Logo" + strPLogo + ".bmp";
									// 13.02.13 F1549
									Int.PalLog("Logo RG Ok " + Sal.NumberToStrX(App.frmMain.nTANr, 0));
									// 08.08.14 F2044
									lsBildAlt = App.frmMain.lsBild;
								}
							}
							else
							{
								Int.PalLog("Logo RG identisch " + Sal.NumberToStrX(App.frmMain.nTANr, 0));
								// 22.08.14
								strBildDatei = strTemp + "\\Logo" + strPLogo + ".bmp";
							}
						}
						// !
						if (nPicture == 0) 
						{
							if (App.frmMain.strLogo != "") 
							{
								// Set strPDummy = strTVNPath || '\\' || frmMain.strLogo || '.BMP'
								strBildDatei = Const.PATH_IMAGES + App.frmMain.strLogo + ".BMP";
								// 13.02.13 F1549
								Int.PalLog("Logo RG Datei " + Sal.NumberToStrX(App.frmMain.nTANr, 0));
							}
							else
							{
								strBildDatei = "";
							}
						}

						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Logo", strBildDatei, Const.LL_DRAWING, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Bankeinzug", Sal.NumberToStrX(App.frmMain.nTHBankeinzug, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.FaellTg", Sal.NumberToStrX(App.frmMain.nTHFaellTg, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.SperrDatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtRepSperrDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.UStID", App.frmMain.strTHUStID, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Rechnung.Nr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Rechnung.MZF", App.frmMain.strMahnMZF, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Rechnung.Brutto", Sal.NumberToStrX(App.frmMain.nMahnEUR, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Rechnung.Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtMahnDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// Call axLL.LlDefineVariableExt( 'Position.Datum', PalDateToStrJJJJMMTT(frmMain.dtMahnDat), LL_DATE_YYYYMMDD, nRet )
						App.frmMain.axLL.LlDefineVariableExt("Kreuztabelle", App.frmMain.lsBemerk, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Rechnung.nurOPs", pnDummy.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Rechnung.Reverse", Sal.NumberToStrX(App.frmMain.nReverse, 0), Const.LL_NUMERIC, ref locals.nRet);
                        // 07.08.24 F5141 ###
                        if (nTSK == SalNumber.Null)
                        {
                            nTSK = 0;
                        }
                        // 19.10.18 Ä1802
                        strGirocode = "BCD";
						strGirocode = strGirocode + "~d010" + "001";
						strGirocode = strGirocode + "~d010" + "1";
						strGirocode = strGirocode + "~d010" + "SCT";
						strGirocode = strGirocode + "~d010" + "NOLADE21HIK";
						strGirocode = strGirocode + "~d010" + "moveta r.V.k.V. Elze";
						strGirocode = strGirocode + "~d010" + strIBAN;
                        // 07.08.24 F5141 ### + - nTSK
                        strGirocode = strGirocode + "~d010" + "EUR" + Int.PalStrReplace((App.frmMain.nMahnEUR - nTSK).ToString(2), ",", ".");
                        strGirocode = strGirocode + "~d010" + "";
						strGirocode = strGirocode + "~d010" + "";
						strGirocode = strGirocode + "~d010" + App.frmMain.strMahnMZF.Left(2) + "." + App.frmMain.strMahnMZF.Mid(2, 4) + "." + App.frmMain.strMahnMZF.Mid(6, 6) + "." + App.frmMain.strMahnMZF.Right(1);
						App.frmMain.axLL.LlDefineVariableExt("Rechnung.Girocode", strGirocode, Const.LL_TEXT, ref locals.nRet);
						// 29.01.08 A194
						if (strPBericht == "Überweisung A4.lst" || strPBericht == "Überweisung AT.lst") 
						{
							App.frmMain.axLL.LlDefineVariableExt("Barcode", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.nRepBeilage = 0;
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Barcode", App.frmMain.strBarcode, Const.LL_TEXT, ref locals.nRet);
						}
						// 03.12.08 A290
						App.frmMain.axLL.LlDefineVariableExt("Mitarbeiter", strMitarbeiter, Const.LL_TEXT, ref locals.nRet);


						// 06.05.13 Ä943
						// 25.03.19 Ä1845
						if (bVorschalt) 
						{
							// 29.01.08 Ä203
							App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
							// 21.06.13 Ä902
							strCustomerNumber = Int.PalStrNum0(0, 4, 0) + Int.PalStrNum0(0, 5, 0);
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", "rechnung@moveta.de", Const.LL_TEXT, ref locals.nRet);

							App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);

							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "Moveta r.V.k.V.", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "Rechnungsabteilung", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "Danziger Str.1", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "31008 Elze", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
							// 01.08.23 Ä2107 Versicherung
							strVeN1 = "";
							strVeN2 = "";
							strVeStr = "";
							strVeO = "";
							strVeLand = "";
							App.frmMain.axLL.LlDefineVariableExt("Versicherung.Code", App.frmMain.strVeCode, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Versicherung.Nachname", this.strVeN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Versicherung.Name2", this.strVeN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Versicherung.Strasse", this.strVeStr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Versicherung.Ort", this.strVeO, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Versicherung.Land", this.strVeLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Versicherung.VSNr", App.frmMain.strVeVSNr, Const.LL_TEXT, ref locals.nRet);

							bVorschalt = false;
						}
						else
						{
							// 29.01.08 Ä203
							App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
							nArztNrL = Int.PalCheckLarztnr(App.frmMain.nTANr);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
							// 21.06.13 Ä902
							strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0) + Int.PalStrNum0(App.frmMain.nTHNr, 5, 0);
							// 30.11.20 Ä1922
							// Call axLL.LlDefineVariableExt( 'PMEmail', PalHoleEMail( frmMain.nTANr, frmMain.nTHNr), LL_TEXT, nRet )
							strPMMail = PalHoleEMail(App.frmMain.nTANr, App.frmMain.nTHNr);
							if (App.frmMain.strDigitalMail != "") 
							{
								strPMMail = App.frmMain.strDigitalMail;
							}
							App.frmMain.axLL.LlDefineVariableExt("PMEmail", strPMMail, Const.LL_TEXT, ref locals.nRet);

							App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
							// 01.08.23 Ä2107 Versicherung
							if (App.frmMain.strVeCode == "") 
							{
								strVeN1 = "";
								strVeN2 = "";
								strVeStr = "";
								strVeO = "";
								strVeLand = "";
								// 27.07.15 Ä1235
								if (PalIsSVAdresse(App.frmMain.nTANr, App.frmMain.nTHNr)) 
								{
									App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strSVN1, Const.LL_TEXT, ref locals.nRet);
									App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strSVN2, Const.LL_TEXT, ref locals.nRet);
									App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strSVS, Const.LL_TEXT, ref locals.nRet);
									App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strSVO, Const.LL_TEXT, ref locals.nRet);
									App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strSVLand, Const.LL_TEXT, ref locals.nRet);
									App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
								}
								else
								{
									App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", (App.frmMain.strTHTi + App.frmMain.strTHVN + " " + App.frmMain.strTHNN).Trim(), Const.LL_TEXT, ref locals.nRet);
									App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
									App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
									App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
									App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
									App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
								}
							}
							else
							{
								Int.SqlImmedSel(@"SELECT vename1, vename2, vestrasse, veort, lcname
INTO :dlgLlDruck.strVeN1, :dlgLlDruck.strVeN2, :dlgLlDruck.strVeStr, :dlgLlDruck.strVeO, :dlgLlDruck.strVeLand
FROM ve, lc
WHERE vecode = :frmMain.strVeCode AND lccode(+)=veland");
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strVeN1, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strVeN2, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strVeStr, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strVeO, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strVeLand, Const.LL_TEXT, ref locals.nRet);
								App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
							}
							App.frmMain.axLL.LlDefineVariableExt("Versicherung.Code", App.frmMain.strVeCode, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Versicherung.Nachname", this.strVeN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Versicherung.Name2", this.strVeN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Versicherung.Strasse", this.strVeStr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Versicherung.Ort", this.strVeO, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Versicherung.Land", this.strVeLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Versicherung.VSNr", App.frmMain.strVeVSNr, Const.LL_TEXT, ref locals.nRet);
						}
						// Beilage (unter Deckblatt): 0=keine, 1=Schacht 1, 2=Schacht 2, 3=Schacht 1+2
						// 20.07.10
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Beilage", Sal.NumberToStrX(App.frmMain.nRepBeilage, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 19.03.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// If strPSpezial = 'RK' And frmRechPos.cbBlanco
						// Call axLL.LlDefineVariableExt( 'Bericht.auf blanco', '1', LL_TEXT, nRet )
						// Else
						// Call axLL.LlDefineVariableExt( 'Bericht.auf blanco', '0', LL_TEXT, nRet )
						// 25.06.09 OTÄ255
						App.frmMain.axLL.LlDefineVariableExt("Rechnung.TSK", nTSK.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						// 31.08.09 OTÄ295 + hvirtkonto
						// 14.11.17 Ä1637 Abschaltung Virtkonto
						strHVirtKonto = "7006573";
						// If strHVirtKonto = ''
						// Else
						// 05.11.13 auskommentiert, da bereits in PalFetchNext Prüfziffer angehängt
						// Set strHVirtKonto = strHVirtKonto || PalPruefZifferB1(strHVirtKonto,9)
						App.frmMain.axLL.LlDefineVariableExt("vHalter.VirtKonto", strHVirtKonto, Const.LL_TEXT, ref locals.nRet);
						// 22.10.13 Ä903
						App.frmMain.axLL.LlDefineVariableExt("IBAN", strIBAN, Const.LL_TEXT, ref locals.nRet);
						// DE13259501300007006573

						// 09.04.10 OTÄ135
						App.frmMain.axLL.LlDefineVariableExt("vHalter.RZfrei", nRZfrei.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						// 25.06.10 OTÄ134
						if (App.frmMain.bRepKopie) 
						{
							App.frmMain.axLL.LlDefineVariableExt("Rechnung.Zweitschrift", "1", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Rechnung.Zweitschrift", "0", Const.LL_TEXT, ref locals.nRet);
						}
						// 27.10.14 Ä1115 + Papierrg
						App.frmMain.axLL.LlDefineVariableExt("Rechnung.PapierRg", Sal.NumberToStrX(App.frmMain.nPapierRg, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Mahnungen-RaZa.lst" || strPBericht == "Mahnungen-RaZa A4.lst" || strPBericht == "Mahn-RaZa-Ueberw.lst") 
				{
					// Set strSelect = 'SELECT rarztnr, rhalternr, rdat, rdm, r1, rmtl,
					// aname1, aname2, astr, aort, amemo, alogo,
					// htitel, hti, hvn, hnn, hname2, hstr, hort, hland
					// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.dtRatDat, :frmMain.nDMRat, :frmMain.nMahnDat, :frmMain.nMtl,
					// :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.lsMemo, :frmMain.strLogo,
					// :frmMain.strTHAnr, :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand
					// FROM mv, r,a,h
					// WHERE mvarztnr = aarztnr
					// AND mvarztnr = harztnr AND mvhalternr = hhalternr
					// AND mvarztnr = rarztnr AND mvhalternr = rhalternr
					// AND (rarztnr = aarztnr OR rarztnr = anr2) '
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("ArztNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Memo", App.frmMain.lsMemo, Const.LL_TEXT, ref locals.nRet);
						// 17.07.12 Ä792
						nPicture = 0;
						nPicture = MT.MImg.LoadFromString(App.frmMain.lsBild, MT.MImg.MIMG_TYPE_BMP, 0);
						if (nPicture != 0) 
						{
							if (!(MT.MImg.Save(nPicture, Var.strTVNPath + "\\Logo.bmp", MT.MImg.MIMG_TYPE_BMP))) 
							{
								this.SetStatusBarText("Das Logo für Mitglied " + Sal.NumberToStrX(App.frmMain.nTANr, 0) + " kann nicht nach " + Var.strTVNPath + "\\Logo.bmp gespeichert werden.");
								nPicture = 0;
							}
							else
							{
								// Call axLL.LlDefineVariableExt('Mitglied.Logo', strTVNPath || '\\Layouts\\Logo.bmp', LL_DRAWING, nRet)
								locals.strPDummy = Var.strTVNPath + "\\Logo.bmp";
							}
						}
						// !
						if (nPicture == 0) 
						{
							if (App.frmMain.strLogo != "") 
							{
								// Set strPDummy = strTVNPath || '\\' || frmMain.strLogo || '.BMP'
								locals.strPDummy = Const.PATH_IMAGES + App.frmMain.strLogo + ".BMP";
							}
							else
							{
								strBildDatei = "";
							}
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Logo", locals.strPDummy, Const.LL_DRAWING, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Anrede", App.frmMain.strTHAnr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Titel", App.frmMain.strTHTi, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Vorname", App.frmMain.strTHVN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Nachname", App.frmMain.strTHNN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Rest-EUR", (App.frmMain.nMahnEUR + pnDummy).ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mahn-Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtMahnDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Naechst-Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtNaechstDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Vereinb-Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtRatDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Monate", Sal.NumberToStrX(App.frmMain.nMtl, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Rat-EUR", Sal.NumberToStrX(App.frmMain.nDMRat, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Rechnung-Nr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mahnung.MZF", App.frmMain.strMahnMZF, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmMain.nTANr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(App.frmMain.nTANr), 4, 0) + Int.PalStrNum0(App.frmMain.nTHNr, 5, 0);

						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, App.frmMain.nTHNr), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 27.07.15 Ä1235
						if (PalIsSVAdresse(App.frmMain.nTANr, App.frmMain.nTHNr)) 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strSVN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strSVN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strSVS, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strSVO, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strSVLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", (App.frmMain.strTHTi + App.frmMain.strTHVN + " " + App.frmMain.strTHNN).Trim(), Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						}
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "EU-Überweisungen.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("ArztNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung-Nr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Memo", App.frmMain.lsMemo, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.UStID", App.frmMain.strTAUStID, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.UStID2", App.frmMain.strTAUStID2, Const.LL_TEXT, ref locals.nRet);

						if (App.frmMain.strLogo != "") 
						{
							// Set strPDummy = strTVNPath || '\\' || frmMain.strLogo || '.BMP'
							locals.strPDummy = Const.PATH_IMAGES + App.frmMain.strLogo + ".BMP";
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Logo", locals.strPDummy, Const.LL_DRAWING, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Anrede", App.frmMain.strTHAnr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Titel", App.frmMain.strTHTi, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Vorname", App.frmMain.strTHVN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Nachname", App.frmMain.strTHNN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.Bankeinzug", Sal.NumberToStrX(App.frmMain.nTHBankeinzug, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.FaellTg", Sal.NumberToStrX(App.frmMain.nTHFaellTg, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Rechnung.Nr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Rechnung.MZF", App.frmMain.strMahnMZF, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Rechnung.Brutto", Sal.NumberToStrX(App.frmMain.nMahnEUR, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Rechnung.Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtMahnDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmMain.nTANr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(App.frmMain.nTANr), 4, 0) + Int.PalStrNum0(App.frmMain.nTHNr, 5, 0);

						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, App.frmMain.nTHNr), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				// Else If strPBericht = 'Rechnungs-Check.lst'
				// Set strSelect = 'SELECT learztnr, lehalternr,
				// aname1, aname2, astr, aort,
				// htitel, hti, hvn, hnn, hname2, hstr, hort, hland,
				// lepla, lepmwst, sum(lepdm), sum(@round(lepdm*lepmwst/100,2)), min(lepdatum)
				// INTO :frmMain.nTANr, :frmMain.nTHNr,
				// :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt,
				// :frmMain.strTHAnr, :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
				// :frmMain.strRepRechLA, :frmMain.nRepRechMwSt, , :frmMain.nRepRechDM, :frmMain.nRepRechBrutto, :frmMain.dtRepRechDatum
				// FROM le, lep, a,h
				// WHERE learztnr=harztnr AND lehalternr=hhalternr AND learztnr=aarztnr
				// 			AND lebearbeiter = :frmManAbr.strBearbeiter AND le.lebearbdatum = :frmManAbr.dtBearbDatum
				// 			AND learztnr=leparztnr AND lehalternr=lephalternr AND leposnr=lepposnr AND lebearbeiter=lepbearbeiter
				// 			AND le.lebearbdatum=lep.lebearbdatum
				// 			GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16'
				// If bAsField
				// Call axLL.LlDefineFieldExt( 'ArztNr', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Nr', SalNumberToStrX(frmMain.nTHNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Anrede', frmMain.strTHAnr, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Titel', frmMain.strTHTi, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Vorname', frmMain.strTHVN, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Nachname', frmMain.strTHNN, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Name2', frmMain.strTHN2, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Strasse', frmMain.strTHStr, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Ort', frmMain.strTHOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Land', frmMain.strTHLand, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Rechnung.PosNr', SalNumberToStrX(frmMain.nRepRechPos,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Rechnung.Datum', PalDateToStrJJJJMMTT(frmMain.dtRepRechDatum), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineFieldExt( 'Rechnung.LA', frmMain.strRepRechLA, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Rechnung.MwSt', SalNumberToStrX(frmMain.nRepRechMwSt,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Rechnung.EURNetto', SalNumberToStrX(frmMain.nRepRechDM,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Rechnung.EURbrutto', SalNumberToStrX(frmMain.nRepRechBrutto,2), LL_NUMERIC, nRet )
				// Else
				// Call axLL.LlDefineVariableExt( 'Mitglied.Nr', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Name1', frmMain.strTAN1, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Name2', frmMain.strTAN2, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Strasse', frmMain.strTAStr, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Ort', frmMain.strTAOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Land', frmMain.strTALand, LL_TEXT, nRet )
				// 19.02.08
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNr', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNrL', SalNumberToStrX(PalHolePMArzt(frmMain.nTANr),0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.HalterNr', '0', LL_NUMERIC, nRet )
				// 06.05.13 Ä943
				// Call axLL.LlDefineVariableExt( 'PMEmail', PalHoleEMail( frmMain.nTANr, 0), LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.RechnungNr', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name1', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name2', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Strasse', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Ort', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Land', '', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Deckblatt', '0', LL_TEXT, nRet )
				else if (strPBericht == "OP-Liste Halter.lst") 
				{
					// Set strSelect = 'SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkbuchtext, rkkzzahl,
					// (rkdmleis+rkdmarzn+rkmbdmopl), rkdmmahn, rkdmzins,   (rkzaleis+rkzaarzn+rkmbzaopl), rkzamahn, rkzazins,
					// rkmahnstufe, rkmahnltzt, aname1, hti || hvn || \' \' || hnn, hname2, hstr, hort, hland,
					// (rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl),
					// @IF(@ISNA(zakz),NULL,@CHOOSE(zakz, NULL, \'Teilzahlung\', \'Vollzahlung\', \'Vollzahlung, Mahngeb.ausgebucht\', \'ausgebucht\', \'ausgebucht bei MB-Erst.\')),
					// zabuchdat, zadm, zabuchtext
					// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nKZZahl,
					// :frmMain.nDMRechL, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRechL, :frmMain.nZaMahn, :frmMain.nZaZins,
					// :frmMain.nMS, :frmMain.dtMahnDat, :frmMain.strTAN1, :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
					// :frmMain.nRepDMOP, :frmMain.strRepZahlKZ, :frmMain.dtRepZahlDat, :frmMain.nRepZahlDM, :frmMain.strRepBuchText
					// FROM rk,a,h, za
					// WHERE rkarztnr IN (:frmRgSuchen.nArztNr, :frmRgSuchen.nArztNr2) AND rkhalternr=:frmRgSuchen.dfHalterNr
					// AND rkarztnr=aarztnr AND rkarztnr=harztnr AND rkhalternr=hhalternr
					// AND rkarztnr=zaarztnr (+) AND rkhalternr=zahalternr (+) AND rkrechnr=zarechnr (+)
					// AND rkkzzahl<2 and (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)>0
					// ORDER BY rkrechdat, rkrechnr, zabuchdat'
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Nr", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rech-Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchungstext", App.frmMain.strBuchText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Rech", Sal.NumberToStrX(App.frmMain.nDMRechL, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Mahn", Sal.NumberToStrX(App.frmMain.nDMMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Zins", Sal.NumberToStrX(App.frmMain.nDMZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Zahl", Sal.NumberToStrX(App.frmMain.nZaRechL, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-ZahlMahn", Sal.NumberToStrX(App.frmMain.nZaMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-ZahlZins", Sal.NumberToStrX(App.frmMain.nZaZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mahn-Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtMahnDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mahnstufe", Sal.NumberToStrX(App.frmMain.nMS, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-offen", Sal.NumberToStrX(App.frmMain.nRepDMOP, 2), Const.LL_NUMERIC, ref locals.nRet);
						// Call axLL.LlDefineFieldExt( 'Zahlg.EUR', SalNumberToStrX(frmMain.nRepZahlDM,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineFieldExt( 'Zahlg.Kennzeichen', frmMain.strRepZahlKZ, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Zahlg.BuchText', frmMain.strRepBuchText, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Zahlg.Datum', PalDateToStrJJJJMMTT(frmMain.dtRepZahlDat), LL_DATE_YYYYMMDD, nRet )
						App.frmMain.axLL.LlDefineFieldExt("ZahlgInfo", App.frmMain.lsBemerk, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						if (strPSpezial == "alle") 
						{
							App.frmMain.axLL.LlDefineVariableExt("Listenname", "Rechnungsliste", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Listenname", "Liste der offenen Rechnungen", Const.LL_TEXT, ref locals.nRet);
						}
						// 07.04.10 OTÄ135
						App.frmMain.axLL.LlDefineVariableExt("vHalter.HalterkontoSaldo", nRZOffen.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vHalter.FAZins", nFAZins.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmMain.nTANr);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0) + Int.PalStrNum0(App.frmMain.nTHNr, 5, 0);

						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, App.frmMain.nTHNr), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 27.07.15 Ä1235
						if (PalIsSVAdresse(App.frmMain.nTANr, App.frmMain.nTHNr)) 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strSVN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strSVN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strSVS, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strSVO, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strSVLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						}
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Forderungsaufstellung.lst" || strPBericht == "Liste der Kosten.lst") 
				{
					// Call PalReport(frmRgSuchen,'FORDAUFS.QRP',
					// ':frmRgSuchen.nProzNr, :frmRgSuchen.dtFADate, :frmRgSuchen.strAZ, :frmRgSuchen.nZinsen, :frmRgSuchen.nDMRech,
					// :frmRgSuchen.nZinsKo, :frmRgSuchen.nDMKo, :frmRgSuchen.dtSeit, :frmRgSuchen.nUnvzDM, :frmRgSuchen.nZinsDM,
					// :frmRgSuchen.dfSHalterName,:frmRgSuchen.dfSHalterName2,:frmRgSuchen.dfSHalterStr,:frmRgSuchen.dfSHalterOrt, :frmRgSuchen.strZust',
					// 'ProzNr, Datum, Text, ZinsHF, DMHF, ZinsKo, DMKo, Seit, UnvzDM, ZinsDM,
					// N1, N2, S, O, Zei',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("ProzNr", Var.nProzNr.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(Var.dtFADate), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchungstext", Var.strAZ, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Zins-HF", Var.nZinsen.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-HF", Var.nDMRech.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Zins-Ko", Var.nZinsKo.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Ko", Var.nDMKo.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Seit-Datum", Int.PalDateToStrJJJJMMTT(Var.dtSeit), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Unvz", (Var.nUnvzDM + Var.nUnvzDMTit).ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR-Zins", Var.nZinsDM.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						// 04.12.07
						Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hstr, hort, harztnr, hhalternr
INTO :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.nTANr, :frmMain.nTHNr
FROM pr,h
WHERE prnr= :nProzNr
AND prarztnr=harztnr AND prhalternr=hhalternr AND hdeaktiv IS NULL");
						App.frmMain.strZust = Int.PalZust(App.frmMain.nTANr);
						// 18.10.23 Ä2082
						if (strPBericht == "Liste der Kosten.lst") 
						{
							App.frmMain.axLL.LlDefineVariableExt("Titel", "Liste der Kosten", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Titel", "Forderungsaufstellung", Const.LL_TEXT, ref locals.nRet);
						}

						// Call axLL.LlDefineVariableExt( 'Halter.Name1', dfSHalterName, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Halter.Name2', dfSHalterName2, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Halter.Strasse', dfSHalterStr, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Halter.Ort', dfSHalterOrt, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Zuständig', strZust, LL_TEXT, nRet )
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zuständig", App.frmMain.strZust, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Proz-Nr", Var.nProzNr.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmMain.nTANr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(App.frmMain.nTANr), 4, 0) + Int.PalStrNum0(App.frmMain.nTHNr, 5, 0);

						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, App.frmMain.nTHNr), Const.LL_TEXT, ref locals.nRet);

						// 27.07.15 Ä1235
						if (PalIsSVAdresse(App.frmMain.nTANr, App.frmMain.nTHNr)) 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strSVN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strSVN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strSVS, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strSVO, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strSVLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
							// 22.10.18 F3406
							// Call axLL.LlDefineVariableExt( 'Bericht.Deckblatt', '0', LL_TEXT, nRet )
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						}
						// 08.09.10 OTÄ468
						App.frmMain.axLL.LlDefineVariableExt("RechNummern", Var.strDummy1, Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Rechnungsprotokoll.lst" || strPBericht == "RP-Sperrinfo.lst") 
				{
					// Call PalReport(frmRechProtneu,'RECHPROT.QRP',
					// ':frmRechProtneu.nTANr,:frmRechProtneu.strTATitel,:frmRechProtneu.strTAN1,:frmRechProtneu.strTAN2,:frmRechProtneu.strTAStr,:frmRechProtneu.strTAOrt,
					// :frmRechProtneu.nTHNr,:frmRechProtneu.strTHN1,:frmRechProtneu.strTHN2,:frmRechProtneu.strTHStr,:frmRechProtneu.strTHOrt, :frmRechProtneu.strKennungTA,
					// :frmRechProtneu.strBearbeiter,:frmRechProtneu.dtBearbDatum,
					// :frmRechProtneu.nRechNr,  :frmRechProtneu.nMwSt, :frmRechProtneu.nNetto, :frmRechProtneu.nDMMwSt,
					// :frmRechProtneu.strLA, :frmRechProtneu.nRgL, :frmRechProtneu.nRgZ, :frmRechProtneu.nProz,
					// :nMwStVoll, :frmRechProtneu.nBearbGeb, :frmRechProtneu.nAbrSumme,
					// :frmRechProtneu.nPorto1, :frmRechProtneu.nPorto2, :frmRechProtneu.nMehrporto,
					// :frmRechProtneu.nGesNettoL, :frmRechProtneu.nGesNettoA,
					// :frmRechProtneu.nGesMwStL, :frmRechProtneu.nGesMwStA,
					// :frmRechProtneu.nMwNettoGL[0], :frmRechProtneu.nMwMwStGL[0],
					// :frmRechProtneu.nMwNettoGL[1], :frmRechProtneu.nMwMwStGL[1],
					// :frmRechProtneu.nMwNettoGL[2], :frmRechProtneu.nMwMwStGL[2],
					// :frmRechProtneu.nMwNettoGL[3], :frmRechProtneu.nMwMwStGL[3],
					// :frmRechProtneu.nMwNettoGL[4], :frmRechProtneu.nMwMwStGL[4],
					// :frmRechProtneu.nMwNettoGL[5], :frmRechProtneu.nMwMwStGL[5],
					// :frmRechProtneu.nMwNettoGL[6], :frmRechProtneu.nMwMwStGL[6],
					// :frmRechProtneu.nMwNettoGL[7], :frmRechProtneu.nMwMwStGL[7],
					// :frmRechProtneu.nMwNettoGL[8], :frmRechProtneu.nMwMwStGL[8],
					// :frmRechProtneu.nMwNettoGL[9], :frmRechProtneu.nMwMwStGL[9],
					// :frmRechProtneu.nMwNettoGL[10], :frmRechProtneu.nMwMwStGL[10],
					// :frmRechProtneu.nMwNettoGL[11], :frmRechProtneu.nMwMwStGL[11],
					// :frmRechProtneu.nMwNettoGA[0], :frmRechProtneu.nMwMwStGA[0],
					// :frmRechProtneu.nMwNettoGA[1], :frmRechProtneu.nMwMwStGA[1],
					// :frmRechProtneu.nMwNettoGA[2], :frmRechProtneu.nMwMwStGA[2],
					// :frmRechProtneu.nMwNettoGA[3], :frmRechProtneu.nMwMwStGA[3],
					// :frmRechProtneu.nMwNettoGA[4], :frmRechProtneu.nMwMwStGA[4],
					// :frmRechProtneu.nMwNettoGA[5], :frmRechProtneu.nMwMwStGA[5],
					// :frmRechProtneu.nMwNettoGA[6], :frmRechProtneu.nMwMwStGA[6],
					// :frmRechProtneu.nMwNettoGA[7], :frmRechProtneu.nMwMwStGA[7],
					// :frmRechProtneu.nMwNettoGA[8], :frmRechProtneu.nMwMwStGA[8],
					// :frmRechProtneu.nMwNettoGA[9], :frmRechProtneu.nMwMwStGA[9],
					// :frmRechProtneu.nMwNettoGA[10], :frmRechProtneu.nMwMwStGA[10],
					// :frmRechProtneu.nMwNettoGA[11], :frmRechProtneu.nMwMwStGA[11],
					// :nMwSatz[0], :nMwSatz[1], :nMwSatz[2], :nMwSatz[3], :nMwSatz[4], :nMwSatz[5], :nMwSatz[6],
					// :nMwSatz[7], :nMwSatz[8], :nMwSatz[9], :nMwSatz[10], :nMwSatz[11]',
					// 'TANR,TATITEL, TANAME1,TANAME2,TASTR,TAORT,
					// THNR,THNAME1,THNAME2,THSTR,THORT, KENNUNGTA,
					// BEARBEITER,BEARBDATUM,
					// nRechNr,  nMwPr, nNetto, nDMMwSt,
					// strLA, nRgL, nRgZ, nProz,
					// nMwStVoll, nBearbGeb, nAbrSumme,
					// nPorto1, nPorto2, nMehrporto,
					// nGesNettoL, nGesNettoA,
					// nGesMwStL, nGesMwStA,
					// Netto0, MwSt0,
					// Netto1, MwSt1,
					// Netto2, MwSt2,
					// Netto3, MwSt3,
					// Netto4, MwSt4,
					// Netto5, MwSt5,
					// Netto6, MwSt6,
					// Netto7, MwSt7,
					// Netto8, MwSt8,
					// Netto9, MwSt9,
					// Netto10, MwSt10,
					// Netto11, MwSt11,
					// NettoA0, MwStA0,
					// NettoA1, MwStA1,
					// NettoA2, MwStA2,
					// NettoA3, MwStA3,
					// NettoA4, MwStA4,
					// NettoA5, MwStA5,
					// NettoA6, MwStA6,
					// NettoA7, MwStA7,
					// NettoA8, MwStA8,
					// NettoA9, MwStA9,
					// NettoA10, MwStA10,
					// NettoA11, MwStA11,
					// MwPr0, MwPr1, MwPr2, MwPr3, MwPr4, MwPr5, MwPr6, MwPr7, MwPr8, MwPr9, MwPr10, MwPr11',
					// nErr)
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmRechProtneu.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmRechProtneu.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmRechProtneu.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmRechProtneu.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmRechProtneu.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmRechProtneu.strTALand, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmRechProtneu.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name", App.frmRechProtneu.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmRechProtneu.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmRechProtneu.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmRechProtneu.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.KennungTA", App.frmRechProtneu.strKennungTA, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.UStID", App.frmRechProtneu.strTHUStID, Const.LL_TEXT, ref locals.nRet);
						// 20.10.15 Ä1252 + hsperrdatum
						App.frmMain.axLL.LlDefineFieldExt("Halter.Sperrdatum", Int.PalDateToStrJJJJMMTT(this.dtDummy), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 23.10.18 Ä1798 + hpmemail
						if (App.frmRechProtneu.strDigitalMail != "") 
						{
							App.frmRechProtneu.strHPMEMail = App.frmRechProtneu.strDigitalMail;
						}
						App.frmMain.axLL.LlDefineFieldExt("Halter.PePost-Adresse", App.frmRechProtneu.strHPMEMail, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineFieldExt("Bearbeiter", App.frmRechProtneu.strBearbeiter, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Bearbeitungsdatum", Int.PalDateToStrJJJJMMTT(App.frmRechProtneu.dtBearbDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);

						App.frmMain.axLL.LlDefineFieldExt("Buchung.RechNr", Sal.NumberToStrX(App.frmRechProtneu.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.MwProz", Sal.NumberToStrX(App.frmRechProtneu.nMwSt, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EUR-Netto", Sal.NumberToStrX(App.frmRechProtneu.nNetto, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EUR-MwSt", Sal.NumberToStrX(App.frmRechProtneu.nDMMwSt, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.LA", App.frmRechProtneu.strLA, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchung.Reverse", Sal.NumberToStrX(App.frmRechProtneu.nReverse, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 13.09.10 OTÄ393
						App.frmMain.axLL.LlDefineFieldExt("Buchung.EURBeihilfe", Sal.NumberToStrX(App.frmRechProtneu.nRPBeihilfe, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 17.05.17 Ä1378 + Dateiname
						// Call axLL.LlDefineFieldExt( 'Dateiname', frmRechProtneu.strDateiName, LL_TEXT, nRet )
						// 27.09.23 Ä2140 + LEPFREMDRECHNUNGSNR
						App.frmMain.axLL.LlDefineFieldExt("Fremdrechnungsnr.Min", App.frmRechProtneu.strFremdrechnungsnrMin, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Fremdrechnungsnr.Max", App.frmRechProtneu.strFremdrechnungsnrMax, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Nr", Sal.NumberToStrX(App.frmRechProtneu.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name1", App.frmRechProtneu.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Name2", App.frmRechProtneu.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Strasse", App.frmRechProtneu.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Ort", App.frmRechProtneu.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vMitglied.Land", App.frmRechProtneu.strTALand, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmRechProtneu.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmRechProtneu.nTANr);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmRechProtneu.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 21.04.08
						// Call axLL.LlDefineVariableExt( 'Bericht.Name1', frmRechProtneu.strTAN1, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Bericht.Name2', frmRechProtneu.strTAN2, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Bericht.Strasse', frmRechProtneu.strTAStr, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Bericht.Ort', frmRechProtneu.strTAOrt, LL_TEXT, nRet )
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);

						// 23.05.08 F371 statt mit 0 NK jetzt mit 1 NK-Stellen
						App.frmMain.axLL.LlDefineVariableExt("Fuss.Anzahl-Einzelrechnung", Sal.NumberToStrX(App.frmRechProtneu.nRgL, 1), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Fuss.Anzahl-Doppelrechnung", Sal.NumberToStrX(App.frmRechProtneu.nRgZ, 1), Const.LL_NUMERIC, ref locals.nRet);
						// 16.12.20 Ä1858
						// Call axLL.LlDefineVariableExt( 'Fuss.Anzahl-Einzelrechnung3', SalNumberToStrX(frmRechProtneu.nRgL3,1), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Fuss.Anzahl-Einzelrechnung9', SalNumberToStrX(frmRechProtneu.nRgL9,1), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Fuss.Anzahl-EinzelrechnungG', SalNumberToStrX(frmRechProtneu.nRgLG,1), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Fuss.Anzahl-Doppelrechnung3', SalNumberToStrX(frmRechProtneu.nRgZ3,1), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Fuss.Anzahl-Doppelrechnung9', SalNumberToStrX(frmRechProtneu.nRgZ9,1), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Fuss.Anzahl-DoppelrechnungG', SalNumberToStrX(frmRechProtneu.nRgZG,1), LL_NUMERIC, nRet )
						// 23.10.18 Ä1798
						App.frmMain.axLL.LlDefineVariableExt("Fuss.Anzahl-ePost-Einzelrechnung", Sal.NumberToStrX(App.frmRechProtneu.nRgLePost, 1), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Fuss.Anzahl-ePost-Doppelrechnung", Sal.NumberToStrX(App.frmRechProtneu.nRgZePost, 1), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Fuss.GebuehrProz", Sal.NumberToStrX(App.frmRechProtneu.nProz, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 04.05.10 OTÄ420
						// Call axLL.LlDefineVariableExt( 'Fuss.MwStVoll', SalNumberToStrX(nMwStVoll,2), LL_NUMERIC, nRet )
						App.frmMain.axLL.LlDefineVariableExt("Fuss.MwStVoll", Sal.NumberToStrX(App.frmRechProtneu.nUFMwSt, 2), Const.LL_NUMERIC, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Fuss.BearbGeb", Sal.NumberToStrX(App.frmRechProtneu.nBearbGeb, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Fuss.AbrSumme", Sal.NumberToStrX(App.frmRechProtneu.nAbrSumme, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Fuss.Porto1", Sal.NumberToStrX(App.frmRechProtneu.nPorto1, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Fuss.Porto2", Sal.NumberToStrX(App.frmRechProtneu.nPorto2, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 16.12.20 Ä1858
						// Call axLL.LlDefineVariableExt( 'Fuss.PortoG', SalNumberToStrX(frmRechProtneu.nPortoG,2), LL_NUMERIC, nRet )

						App.frmMain.axLL.LlDefineVariableExt("Fuss.Mehrporto", Sal.NumberToStrX(App.frmRechProtneu.nMehrporto, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Fuss.GesNettoL", Sal.NumberToStrX(App.frmRechProtneu.nGesNettoL, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Fuss.GesNettoA", Sal.NumberToStrX(App.frmRechProtneu.nGesNettoA, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Fuss.GesMwStL", Sal.NumberToStrX(App.frmRechProtneu.nGesMwStL, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Fuss.GesMwStA", Sal.NumberToStrX(App.frmRechProtneu.nGesMwStA, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);

					}
					// 12.07.17 Ä2944 hier lassen, sonst wird nur die erste Zeile der Summen gedruckt!
					App.frmMain.axLL.LlDefineVariableExt("Fuss.AnzMwSt", (Var.nAnzMwSt + 2).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
					nCount = 0;
					while (nCount < (Var.nAnzMwSt + 2)) 
					{
						App.frmMain.axLL.LlDefineVariableExt("Fuss.Mw.NettoL" + (nCount + 1).ToString(0), App.frmRechProtneu.nMwNettoGL[nCount].ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Fuss.Mw.MwStL" + (nCount + 1).ToString(0), App.frmRechProtneu.nMwMwStGL[nCount].ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Fuss.Mw.NettoA" + (nCount + 1).ToString(0), App.frmRechProtneu.nMwNettoGA[nCount].ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Fuss.Mw.MwStA" + (nCount + 1).ToString(0), App.frmRechProtneu.nMwMwStGA[nCount].ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Fuss.Mw.Proz" + (nCount + 1).ToString(0), Var.nMwSatz[nCount].ToString(2), Const.LL_NUMERIC, ref locals.nRet);

						nCount = nCount + 1;
					}
					// 17.05.17 Ä1378 + Dateiname
					App.frmMain.axLL.LlDefineVariableExt("Dateiname", App.frmRechProtneu.strDateiName, Const.LL_TEXT, ref locals.nRet);
					// 11.07.17
					App.frmMain.axLL.LlDefineVariableExt("Bericht.auf blanco", "1", Const.LL_TEXT, ref locals.nRet);
					// 03.09.21 Ä1968
					App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
				}
				else if (strPBericht == "Mahnvorschlag.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied", Sal.NumberToStrX(App.frmMahnVor.tblMahnVor.colnArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter", Sal.NumberToStrX(App.frmMahnVor.tblMahnVor.colnHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Name", App.frmMahnVor.tblMahnVor.colsName.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("RechNr", Sal.NumberToStrX(App.frmMahnVor.tblMahnVor.colnRechNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("RechDat", Int.PalDateToStrJJJJMMTT(App.frmMahnVor.tblMahnVor.coldtRechDat.DateTime), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("MS", Sal.NumberToStrX(App.frmMahnVor.tblMahnVor.colnMS.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rest-EUR", Sal.NumberToStrX(App.frmMahnVor.tblMahnVor.colnDMRest.Number, 2), Const.LL_NUMERIC, ref locals.nRet);

						if (App.frmMahnVor.tblMahnVor.colnRechNr.Number >= 999990) 
						{
							nMS = 9;
						}
						else
						{
							Int.SqlImmedSel(@"SELECT rkmahnstufe
INTO :dlgLlDruck.nMS
FROM rk
WHERE rkarztnr = :frmMahnVor.tblMahnVor.colnArztNr
AND rkhalternr = :frmMahnVor.tblMahnVor.colnHalterNr
AND rkrechnr = :frmMahnVor.tblMahnVor.colnRechNr");
						}
						App.frmMain.axLL.LlDefineFieldExt("Mahnstufe", nMS.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Portooptimierung.lst") 
				{
					if (!(locals.bAsField)) 
					{
						App.frmMain.axLL.LlDefineVariableExt("Druckdatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtCurrentDate), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "0", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "0", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "0", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "VetAmt-Antrag.crd") 
				{
					if (locals.bAsField) 
					{
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("VetAmt.Code", App.frmMain.strVACode, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "1", Const.LL_NUMERIC, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				// Else If strPBericht = 'TSK-Beihilfen.lst'
				// Set strSelect = 'SELECT tskarztnr, tskhalternr, tskbeihdat, tskbeihilfe, tskbeihtext, tskregnr, tskerfdat,
				// hti || hvn || \' \' || hnn, hname2, hstr, hland, hort
				// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.dtDatum, :frmMain.nBeihilfe, :frmMain.strBeihText, :frmMain.strRegNr, :frmMain.dtErfDat,
				// :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHLand, :frmMain.strTHOrt
				// FROM tsk, h
				// WHERE (tsktadruckdat IS NULL Or tsktadruckdat ='1900-1-1')
				// AND tslarztnr = harztnr AND tskhalternr = hhalternr
				// ORDER BY tskarztnr'
				// If bAsField
				// Call axLL.LlDefineFieldExt( 'Mitglied-Nr', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Mitglied-Name1', frmMain.strTAN1, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Mitglied-Name2', frmMain.strTAN2, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Mitglied-Strasse', frmMain.strTAStr, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Mitglied-Ort', frmMain.strTAOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Mitglied-Land', frmMain.strTALand, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Nr', SalNumberToStrX(frmMain.nTHNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Name1', frmMain.strTHN1, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Name2', frmMain.strTHN2, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Strasse', frmMain.strTHStr, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Ort', frmMain.strTHOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Land', frmMain.strTHLand, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Beihilfedatum', PalDateToStrJJJJMMTT(frmMain.dtDatum), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineFieldExt( 'Beihilfetext', frmMain.strBeihText, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'RegNr', frmMain.strRegNr, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'EUR-Beihilfe', SalNumberToStrX(frmMain.nBeihilfe,2), LL_NUMERIC, nRet )
				// Else
				// Call axLL.LlDefineVariableExt( 'Mitglied.Nr', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Name1', frmMain.strTAN1, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Name2', frmMain.strTAN2, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Strasse', frmMain.strTAStr, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Ort', frmMain.strTAOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Land', frmMain.strTALand, LL_TEXT, nRet )
				// 29.01.08 Ä203
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNr', SalNumberToStrX(frmMain.nTANr,0), LL_NUMERIC, nRet )
				// Set nArztNrL = PalCheckLarztnr(frmMain.nTANr)
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNrL', SalNumberToStrX(PalHolePMArzt(nArztNrL),0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.HalterNr', '0', LL_NUMERIC, nRet )
				// 06.05.13 Ä943
				// Call axLL.LlDefineVariableExt( 'PMEmail', PalHoleEMail( frmMain.nTANr, 0), LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.RechnungNr', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name1', frmMain.strTAN1, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name2', frmMain.strTAN2, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Strasse', frmMain.strTAStr, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Ort', frmMain.strTAOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Land', frmMain.strTALand, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Deckblatt', '1', LL_TEXT, nRet )
				else if (strPBericht == "Ratenzahler-Vereinbarung.lst" || strPBericht == "RaZaVerBrief.crd" || strPBericht == "RaZaReakt.crd") 
				{
					// Set strSelect = 'SELECT rznr, rzarztnr, rzhalternr, rzzins, rzerfdat, rzparztnr, rzphalternr, rzprechnr,
					// hti || hvn || \' \' || hnn, hname2, hstr, hland, hort,
					// aname1, aname2, astr, aort,
					// rkdmleis, rkdmarzn, rkdmmahn, rkdmzins, rkmbdmopl
					// INTO :frmMain.nRZNr, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRZZins, :frmMain.dtErfDat, :frmMain.nRZArztNr, :frmMain.nRZHalterNr, :frmMain.nRZRechNr,
					// :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHLand, :frmMain.strTHOrt,
					// :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt,
					// :frmMain.nRZLeis, :frmMain.nRZArzn, :frmMain.nRZMahn, :frmMain.nRZZins, :frmMain.nRZMBOpl
					// FROM rz, rzp, rk, h, a
					// WHERE rzarztnr = harztnr AND rzhalternr = hhalternr AND rzarztnr=aarztnr AND rznr = rzpnr
					// AND rzparztnr=rkarztnr AND rzphalternr=rkhalternr AND rzprechnr=rkrechnr ' || strPSpezial || '
					// ORDER BY rznr, rzarztnr, rzhalternr'
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("RZ-Nr", Sal.NumberToStrX(App.frmMain.nRZNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.ArztNr", Sal.NumberToStrX(App.frmMain.nRZArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.HalterNr", Sal.NumberToStrX(App.frmMain.nRZHalterNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.RechnungNr", Sal.NumberToStrX(App.frmMain.nRZRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.ArztNr", Sal.NumberToStrX(App.frmMain.nRZArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Leis", Sal.NumberToStrX(App.frmMain.nRZLeis, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Arzn", Sal.NumberToStrX(App.frmMain.nRZArzn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Mahn", Sal.NumberToStrX(App.frmMain.nRZMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Zins", Sal.NumberToStrX(App.frmMain.nRZZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.MBOpl", Sal.NumberToStrX(App.frmMain.nRZMBOpl, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung.Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtRechDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtErfDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("PauseBis", Int.PalDateToStrJJJJMMTT(App.frmMain.dtRZPauseBis), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rate", Sal.NumberToStrX(App.frmMain.nRZRate, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Tag", Sal.NumberToStrX(App.frmMain.nRZTag, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						// 30.03.21 Ä1953 + , rzopdm, rzaktivdat
						App.frmMain.axLL.LlDefineFieldExt("RZ-Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("RZ-OP", Sal.NumberToStrX(App.frmMain.nDMOP, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 27.02.19 F2957
						dtReferenz = App.frmMain.dtErfDat;
						if (App.frmMain.dtRZPauseBis > dtReferenz) 
						{
							dtReferenz = App.frmMain.dtRZPauseBis;
						}
						if (dtReferenz.Day() >= App.frmMain.nRZTag) 
						{
							if (dtReferenz.Month() == 12) 
							{
								dtReferenz = new SalDateTime(dtReferenz.Year() + 1, 1, App.frmMain.nRZTag, 0, 0, 0);
							}
							else
							{
								dtReferenz = new SalDateTime(dtReferenz.Year(), dtReferenz.Month() + 1, App.frmMain.nRZTag, 0, 0, 0);
							}
						}
						else
						{
							dtReferenz = new SalDateTime(dtReferenz.Year(), dtReferenz.Month(), App.frmMain.nRZTag, 0, 0, 0);
						}
						App.frmMain.axLL.LlDefineFieldExt("Beginn", Int.PalDateToStrJJJJMMTT(dtReferenz), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("RZNr", Sal.NumberToStrX(App.frmMain.nRZNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PauseBis", Int.PalDateToStrJJJJMMTT(App.frmMain.dtRZPauseBis), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						// 29.01.08 Ä203
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmMain.nTANr);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0) + Int.PalStrNum0(App.frmMain.nTHNr, 5, 0);

						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, App.frmMain.nTHNr), Const.LL_TEXT, ref locals.nRet);

						// 27.07.15 Ä1235
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						if (PalIsSVAdresse(App.frmMain.nTANr, App.frmMain.nTHNr)) 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strSVN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strSVN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strSVS, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strSVO, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strSVLand, Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						}
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 08.04.13 F1624
						App.frmMain.axLL.LlDefineVariableExt("KuendDat", Int.PalDateToStrJJJJMMTT(App.frmMain.dtRZKuendDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vTag", Sal.NumberToStrX(App.frmMain.nRZTag, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vRate", Sal.NumberToStrX(App.frmMain.nRZRate, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 14.124.10 OTÄ507
						if (strPBericht == "RaZaVerBrief.crd") 
						{
							Int.SqlImmedSel("SELECT sum(hbdm) INTO :dlgLlDruck.pnDummy FROM hb WHERE " + Int.PalArztNr("hb", App.frmMain.nTANr, App.frmMain.nTANr2) + " AND hbhalternr = " + Sal.NumberToStrX(App.frmMain.nTHNr, 0));
							pnDummy = pnDummy * -1;
							App.frmMain.axLL.LlDefineVariableExt("HaBu-offen", pnDummy.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						}
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 30.03.21 Ä1953 + , rzopdm, rzaktivdat
						App.frmMain.axLL.LlDefineVariableExt("vRZ-Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("vRZ-OP", Sal.NumberToStrX(App.frmMain.nDMOP, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				// Else If strPBericht = 'RaZaReakt.crd'
				// If bAsField
				// Call axLL.LlDefineFieldExt( 'RZ-Nr', SalNumberToStrX(frmRaZa.tblTagebuch.colnRZNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Mitglied-Nr', SalNumberToStrX(frmRaZa.tblTagebuch.colnArztNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Mitglied-Name1', frmMain.strTAN1, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Mitglied-Name2', frmMain.strTAN2, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Mitglied-Strasse', frmMain.strTAStr, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Mitglied-Ort', frmMain.strTAOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Mitglied-Land', frmMain.strTALand, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Rechnung.ArztNr', SalNumberToStrX(frmRaZa.tblTagebuch.colnArztNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Rechnung.HalterNr', SalNumberToStrX(frmRaZa.tblTagebuch.colnHalterNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'KündDatum', PalDateToStrJJJJMMTT(frmRaZa.tblTagebuch.coldtKuendDat), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineFieldExt( 'PauseBis', PalDateToStrJJJJMMTT(frmRaZa.tblTagebuch.coldtPauseBis), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineFieldExt( 'Rate', SalNumberToStrX(frmRaZa.tblTagebuch.colnRate,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Tag', SalNumberToStrX(frmRaZa.tblTagebuch.colnTag,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Nr', SalNumberToStrX(frmRaZa.tblTagebuch.colnHalterNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Name1', frmMain.strTHN1, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Name2', frmMain.strTHN2, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Strasse', frmMain.strTHStr, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Ort', frmMain.strTHOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineFieldExt( 'Halter.Land', frmMain.strTHLand, LL_TEXT, nRet )
				// Else
				// Call axLL.LlDefineVariableExt( 'RZNr', SalNumberToStrX(frmRaZa.tblTagebuch.colnRZNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'PauseBis', PalDateToStrJJJJMMTT(frmRaZa.tblTagebuch.coldtPauseBis), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Nr', SalNumberToStrX(frmRaZa.tblTagebuch.colnArztNr, 0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Name1', frmMain.strTAN1, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Name2', frmMain.strTAN2, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Strasse', frmMain.strTAStr, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Ort', frmMain.strTAOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Mitglied.Land', frmMain.strTALand, LL_TEXT, nRet )
				// 29.01.08 Ä203
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNr', SalNumberToStrX(frmRaZa.tblTagebuch.colnArztNr,0), LL_NUMERIC, nRet )
				// Set nArztNrL = PalCheckLarztnr(frmRaZa.tblTagebuch.colnArztNr)
				// Call axLL.LlDefineVariableExt( 'Bericht.MitgliedNrL', SalNumberToStrX(PalHolePMArzt(nArztNrL),0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.HalterNr', SalNumberToStrX(frmRaZa.tblTagebuch.colnHalterNr,0), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.RechnungNr', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name1', frmMain.strTHN1, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Name2', frmMain.strTHN2, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Strasse', frmMain.strTHStr, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Ort', frmMain.strTHOrt, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Land', frmMain.strTHLand, LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.Deckblatt', '1', LL_TEXT, nRet )
				// Call axLL.LlDefineVariableExt( 'alsFax', '1', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Bericht.anDritte', '0', LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'KündDatum', PalDateToStrJJJJMMTT(frmRaZa.tblTagebuch.coldtKuendDat), LL_DATE_YYYYMMDD, nRet )
				// Call axLL.LlDefineVariableExt( 'Rate', SalNumberToStrX(frmRaZa.tblTagebuch.colnRate,2), LL_NUMERIC, nRet )
				// Call axLL.LlDefineVariableExt( 'Tag', SalNumberToStrX(frmRaZa.tblTagebuch.colnTag,0), LL_NUMERIC, nRet )
				else if (strPBericht == "Ratenzahler-Tilgungsplan.lst") 
				{
					// Set dtRZDat = dtRZDat - 30
					// Set dtRZDat = SalDateConstruct( SalDateYear(dtRZDat), SalDateMonth( dtRZDat ), frmMain.nRZTag, 0, 0, 0 )
					// Set nRZZins = (nRZOffen * frmMain.nRZZins / 12)
					// Set nRZTilgung = frmMain.nRZRate - nRZZins
					// Set nRZOffen2 = nRZOffen - nRZTilgung
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("RZ-Nr", Sal.NumberToStrX(App.frmMain.nRZNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rate.Datum", Int.PalDateToStrJJJJMMTT(dtRZDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rate.Zins", nRZZins.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rate.Tilgung", nRZTilgung.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rate.Offen", nRZOffen.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rate.Offen2", nRZOffen2.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("RZNr", Sal.NumberToStrX(App.frmMain.nRZNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PauseBis", Int.PalDateToStrJJJJMMTT(App.frmMain.dtRZPauseBis), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtErfDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtErfDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Rate", Sal.NumberToStrX(App.frmMain.nRZRate, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Tag", Sal.NumberToStrX(App.frmMain.nRZTag, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						// 29.01.08 Ä203
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmMain.nTANr);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 06.10.21 Ä1968 +, aname1, aname2, astr, aort, aland
						Int.SqlImmedSel(@"SELECT asvname1, asvname2, asvstr, asvort, anr2, asvland, aname1, aname2, astr, aort, aland
		INTO :dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.nArztNr2, :frmMain.strTALand,
		:frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand
		FROM A
		WHERE a.aarztnr = :frmMain.nTANr");
						if (App.frmMain.strTALand != "") 
						{
							if (App.frmMain.strTALand.Length <= 2) 
							{
								if (App.frmMain.strTALand != strAltLand) 
								{
									strAltLand = App.frmMain.strTALand;
								}
								App.frmMain.strTALand = Int.PalPruefeLC(App.frmMain.strTALand, 0);
							}
						}

						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0) + Int.PalStrNum0(App.frmMain.nTHNr, 5, 0);

						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, App.frmMain.nTHNr), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 27.07.15 Ä1235
						if (PalIsSVAdresse(App.frmMain.nTANr, App.frmMain.nTHNr)) 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strSVN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strSVN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strSVS, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strSVO, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strSVLand, Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						}
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "RaZa-Kündigung.crd") 
				{
					if (locals.bAsField) 
					{
					}
					else
					{
						// 10.10.18 von PalFetchNext
						// 06.10.21 Ä1968 +, aname1, aname2, astr, aort, aland
						Int.SqlImmedSel(@"SELECT asvname1, asvname2, asvstr, asvort, anr2, asvland, aname1, aname2, astr, aort, aland
		INTO :dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.nArztNr2, :frmMain.strTALand,
		:frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand
		FROM A
		WHERE a.aarztnr = :frmRaZa.tblPruef.colnArztNr");
						if (App.frmMain.strTALand != "") 
						{
							if (App.frmMain.strTALand.Length <= 2) 
							{
								if (App.frmMain.strTALand != strAltLand) 
								{
									strAltLand = App.frmMain.strTALand;
								}
								App.frmMain.strTALand = Int.PalPruefeLC(App.frmMain.strTALand, 0);
							}
						}

						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", strN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", strN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", strS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", strO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Nr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("RaZaNr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnRZNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Aussenstände", Sal.NumberToStrX(App.frmRaZa.nAussenst, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 18.07.18 Ä1763
						if (bePost) 
						{
							App.frmRaZa.cbFax.Checked = true;
						}

						App.frmMain.axLL.LlDefineVariableExt("alsFax", Sal.NumberToStrX(App.frmRaZa.cbFax.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmRaZa.tblPruef.colnArztNr.Number).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(App.frmRaZa.tblPruef.colnArztNr.Number), 4, 0) + Int.PalStrNum0(App.frmRaZa.tblPruef.colnHalterNr.Number, 5, 0);

						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmRaZa.tblPruef.colnArztNr.Number, App.frmRaZa.tblPruef.colnHalterNr.Number), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 27.07.15 Ä1235
						if (PalIsSVAdresse(App.frmRaZa.tblPruef.colnArztNr.Number, App.frmRaZa.tblPruef.colnHalterNr.Number)) 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strSVN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strSVN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strSVS, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strSVO, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strSVLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						}
						// Call axLL.LlDefineVariableExt( 'Bericht.Deckblatt', '1', LL_TEXT, nRet )
						// 24.04.09
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 08.12.15 Ä1293 + , MIN(rkmahnstufe)
						App.frmMain.axLL.LlDefineVariableExt("MinMS", Sal.NumberToStrX(App.frmRaZa.nMinMS, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "RaZa-Aktivierung.crd") 
				{
					// !!CB!! 73
					// Call SqlImmedSel( 'SELECT rzrate INTO :frmMain.nRZRate FROM rz WHERE rznr = :frmRaZa.dfRZNr' )
					// !
					// Call SqlImmedSel('SELECT anr2
					// 		INTO :frmRaZa.nArztNr2
					// 		FROM a WHERE aarztnr=:frmRaZa.dfArztNr')
					// Call SqlImmedSel( 'SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl) INTO :frmRaZa.nOP FROM rk,rzp
					// 		WHERE ' || PalArztNr('rk', dfArztNr, nArztNr2) || ' AND rkhalternr = :frmRaZa.dfHalterNr AND rzpnr = :frmRaZa.dfRZNr AND rkarztnr=rzparztnr AND rkhalternr=rzphalternr AND rkrechnr=rzprechnr' )
					// Call SqlImmedSel( 'SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl) INTO :frmRaZa.nOPGesamt FROM rk
					// 		WHERE ' || PalArztNr('rk', dfArztNr, nArztNr2) || ' AND rkhalternr = :frmRaZa.dfHalterNr' )
					// !
					// Set strTHLand = PalPruefeLC(dfHLC,0)
					// Call SalCreateWindow(frmBriefVari, hWndNULL, dfArztNr, dfHalterNr, 0, 'A',
					// 		'Sehr geehrte Damen und Herren,
					// 
					// 		heute wurde mit Halter-Nr. '  || SalNumberToStrX( dfArztNr, 0 ) || '/H' || SalNumberToStrX( dfHalterNr, 0 ) || '
					// 		eine Ratenzahlungsvereinbarung in Höhe von EUR '  || SalNumberToStrX( frmMain.nRZRate, 2 ) || ' im Monat geschlossen.
					// 
					// 		Der Schuldner ist :
					// 
					// 		' || dfHN1 || '
					// 		' || dfHO || '
					// 		' || strTHLand || '
					// 
					// 		Der Umfang der offenen Posten dieser Vereinbarung beläuft sich auf € ' || SalNumberToStrX( nOP, 2 ) || '.
					// 		Insgesamt hat der Schulden noch offene Posten in Höhe von € ' || SalNumberToStrX( nOPGesamt, 2 ) || '.
					// 
					// 
					// 		Wir bitten um Beachtung !' , '1900-01-01', '', '', '', '', '')
					if (locals.bAsField) 
					{
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmRaZa.dfArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Nr", Sal.NumberToStrX(App.frmRaZa.dfHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("RaZaNr", Sal.NumberToStrX(App.frmRaZa.dfRZNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PauseBis", Int.PalDateToStrJJJJMMTT(App.frmMain.dtRZPauseBis), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name1", App.frmRaZa.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmRaZa.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmRaZa.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmRaZa.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Land", App.frmRaZa.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmRaZa.dfArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmRaZa.dfArztNr.Number).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmRaZa.dfHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(App.frmRaZa.dfArztNr.Number), 4, 0) + Int.PalStrNum0(App.frmRaZa.dfHalterNr.Number, 5, 0);

						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmRaZa.dfArztNr.Number, App.frmRaZa.dfHalterNr.Number), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 27.07.15 Ä1235
						if (PalIsSVAdresse(App.frmRaZa.dfArztNr.Number, App.frmRaZa.dfHalterNr.Number)) 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strSVN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strSVN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strSVS, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strSVO, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strSVLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmRaZa.strTHN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmRaZa.strTHN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmRaZa.strTHStr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmRaZa.strTHOrt, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmRaZa.strTHLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						}
						// 24.04.09
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "RaZa-KündInfoM.crd" || strPBericht == "RaZa-KündInfoM-MS4und5.crd" || strPBericht == "RaZa-MS5TAInfo.crd") 
				{
					if (locals.bAsField) 
					{
					}
					else
					{
						// 10.10.18 von PalFetchNext
						Int.SqlImmedSel(@"SELECT asvname1, asvname2, asvstr, asvort, anr2, asvland
		INTO :dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.nArztNr2, :frmMain.strTALand
		FROM A
		WHERE a.aarztnr = :frmRaZa.tblPruef.colnArztNr");
						if (App.frmMain.strTALand != "") 
						{
							if (App.frmMain.strTALand.Length <= 2) 
							{
								if (App.frmMain.strTALand != strAltLand) 
								{
									strAltLand = App.frmMain.strTALand;
								}
								App.frmMain.strTALand = Int.PalPruefeLC(App.frmMain.strTALand, 0);
							}
						}

						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Nr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("RaZaNr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnRZNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", strN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", strN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", strS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", strO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Aussenstände", Sal.NumberToStrX(App.frmRaZa.nAussenst, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 18.07.18 Ä1763
						if (bePost) 
						{
							App.frmRaZa.cbFax.Checked = true;
						}

						App.frmMain.axLL.LlDefineVariableExt("alsFax", Sal.NumberToStrX(App.frmRaZa.cbFax.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 05.10.15 Ä1248
						// If strPBericht = 'RaZa-KündInfoM-MS4und5.crd' or strPBericht = 'RaZa-MS5TAInfo.crd'
						App.frmMain.axLL.LlDefineVariableExt("Rechnungen", App.frmRaZa.tblPruef.colsMS45.Text, Const.LL_TEXT, ref locals.nRet);
						// 07.11.16 Ä1439
						App.frmMain.axLL.LlDefineVariableExt("AussenständeGesamt", Sal.NumberToStrX(App.frmRaZa.nAussenstGes, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmRaZa.tblPruef.colnArztNr.Number).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(App.frmRaZa.tblPruef.colnArztNr.Number), 4, 0);

						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmRaZa.tblPruef.colnArztNr.Number, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 24.04.09
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 08.12.15 Ä1293 + , MIN(rkmahnstufe)
						App.frmMain.axLL.LlDefineVariableExt("MinMS", Sal.NumberToStrX(App.frmRaZa.nMinMS, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "RaZa-Schlußbrief.crd") 
				{
					if (locals.bAsField) 
					{
					}
					else
					{
						// 10.10.18 von PalFetchNext
						// 06.10.21 Ä1968 +, aname1, aname2, astr, aort, aland
						Int.SqlImmedSel(@"SELECT asvname1, asvname2, asvstr, asvort, anr2, asvland, aname1, aname2, astr, aort, aland
		INTO :dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.nArztNr2, :frmMain.strTALand,
		:frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand
		FROM A
		WHERE a.aarztnr = :frmRaZa.tblPruef.colnArztNr");
						if (App.frmMain.strTALand != "") 
						{
							if (App.frmMain.strTALand.Length <= 2) 
							{
								if (App.frmMain.strTALand != strAltLand) 
								{
									strAltLand = App.frmMain.strTALand;
								}
								App.frmMain.strTALand = Int.PalPruefeLC(App.frmMain.strTALand, 0);
							}
						}

						Int.SqlImmedSel(@"SELECT asvname1, asvname2, asvstr, asvort, anr2, asvland
		INTO :dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.nArztNr2, :frmMain.strTALand
		FROM A
		WHERE a.aarztnr = :frmRaZa.tblPruef.colnArztNr");

						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name1", strN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Name2", strN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Strasse", strS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Ort", strO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Nr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("RaZaNr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnRZNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 05.06.12 Ä760
						Int.SqlImmedSel("SELECT rztag INTO :dlgLlDruck.nRet FROM rz WHERE rznr = :frmRaZa.tblPruef.colnRZNr AND rzdeaktiv IS NULL");
						App.frmMain.axLL.LlDefineVariableExt("RaZaTag", this.nRet.ToString(0), Const.LL_NUMERIC, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Aussenstände", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnEUR2.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 08.12.21 Ä1983 entfernt
						// Call axLL.LlDefineVariableExt( 'AussenständeAndere', SalNumberToStrX(frmRaZa.tblPruef.colnEUR3,2), LL_NUMERIC, nRet )
						// 07.06.12 F1313
						App.frmMain.axLL.LlDefineVariableExt("AussenstandFA", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnEUR.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						// 08.12.21 Ä1983
						App.frmMain.axLL.LlDefineVariableExt("AussenstandHaBu", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnEURHaBu.Number, 2), Const.LL_NUMERIC, ref locals.nRet);

						// 18.07.18 Ä1763
						if (bePost) 
						{
							App.frmRaZa.cbFax.Checked = true;
						}

						App.frmMain.axLL.LlDefineVariableExt("alsFax", Sal.NumberToStrX(App.frmRaZa.cbFax.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmRaZa.tblPruef.colnArztNr.Number).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(App.frmRaZa.tblPruef.colnArztNr.Number), 4, 0) + Int.PalStrNum0(App.frmRaZa.tblPruef.colnHalterNr.Number, 5, 0);

						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmRaZa.tblPruef.colnArztNr.Number, App.frmRaZa.tblPruef.colnHalterNr.Number), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 27.07.15 Ä1235
						if (PalIsSVAdresse(App.frmRaZa.tblPruef.colnArztNr.Number, App.frmRaZa.tblPruef.colnHalterNr.Number)) 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strSVN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strSVN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strSVS, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strSVO, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strSVLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						}
						// 24.04.09
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						locals.strPDummy = App.frmMain.strTAN1;
						if (App.frmMain.strTAN2 != "") 
						{
							locals.strPDummy = locals.strPDummy + " - " + App.frmMain.strTAN2;
						}
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", locals.strPDummy, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Historie.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.tblHistorie.colDatum.DateTime), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rech-Nr", Sal.NumberToStrX(App.tblHistorie.colRgNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 14.11.17 F3010 Rech-Nr -> Betrag
						App.frmMain.axLL.LlDefineFieldExt("Betrag", Sal.NumberToStrX(App.tblHistorie.colDM.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Typ", App.tblHistorie.colTyp.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Bezeichnung", App.tblHistorie.colBez.Text, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.tblHistorie.nArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Nr", Sal.NumberToStrX(App.tblHistorie.nHalterNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "PM-Kontrolle.lst") 
				{
					// Set strSelect = 'SELECT dkdatum, dkdruck, dkuser, dkarztnr, dkhalternr, dkrechnr, dkname, dkort, dkland
					// INTO :frmMain.dtDatum, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.strTHN1, :frmMain.strTHOrt, :frmMain.strTHLand
					// FROM dk
					// WHERE dkerldat IS NULL Or dkerldat ='1900-1-1'
					// ORDER BY dkland, dkort'
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Druck", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Benutzer", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter-Name", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rech-Nr", Sal.NumberToStrX(App.frmMain.nRechNr, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 08.03.11 Ä465
						Int.SqlImmedSel("SELECT rkrechdat INTO :dlgLlDruck.dtMin FROM rk WHERE rkarztnr = :frmMain.nTANr AND rkrechnr = :frmMain.nRechNr AND rkdeaktiv IS NULL");
						Int.SqlImmedSel(@"SELECT MIN(rkrechnr), MAX(rkrechnr), MIN(hnn), MAX(hnn) INTO :dlgLlDruck.nMin, :dlgLlDruck.nMax, :dlgLlDruck.strMin, :dlgLlDruck.strMax
FROM rk, h WHERE rkarztnr = :frmMain.nTANr AND rkrechdat = :dlgLlDruck.dtMin AND rkarztnr=harztnr and rkhalternr=hhalternr
 AND rkdeaktiv IS NULL AND hdeaktiv IS NULL");
						App.frmMain.axLL.LlDefineFieldExt("Info.Rech-NrMin", this.nMin.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Info.Rech-NrMax", this.nMax.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Info.HalterMin", this.strMin, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Info.HalterMax", this.strMax, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Info.RechDatum", Int.PalDateToStrJJJJMMTT(this.dtMin), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf blanco", "1", Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Scheckliste.lst") 
				{
					// Set strSelect = 'SELECT dlerfdat, dlname, dlid, dldm
					// INTO :frmMain.dtDatum, :frmMain.strTAN2, :frmMain.nTANr, :frmMain.nTHNr
					// FROM dl
					// WHERE dlcode = \'SCHK\' AND dlerldat IS NULL Or dlerldat ='1900-1-1'
					// ORDER BY dlerfdat'
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Code", App.frmMain.strBezeichnung, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Name", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Scheck-Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Betrag", Sal.NumberToStrX(App.frmMain.nTHNr, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "KA-Kontroll1.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied", Sal.NumberToStrX(App.frmKA.tblKA.colArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Saldo", Sal.NumberToStrX(App.frmKA.tblKA.colSaldo.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("OP", Sal.NumberToStrX(App.frmKA.tblKA.colOP.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("OP2", Sal.NumberToStrX(App.frmKA.tblKA.colOP2.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Proz", Sal.NumberToStrX(App.frmKA.tblKA.colProz.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Bemerkung", App.frmKA.tblKA.colBemerk.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("GFBemerkung", App.frmKA.tblKA.colGFBemerk.Text, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "KA-Kontroll2.lst") 
				{
					if (locals.bAsField) 
					{
						// Set tblKA2.colArztNr = nArztNr
						// Set tblKA2.colBuchort = 'KAa'
						// Set tblKA2.colBuchtext = strText
						// Set tblKA2.colDatum = dtDatum
						// Set tblKA2.colEUR = nSaldo
						// Set tblKA2.colPrio = 5
						// Set tblKA2.colBemerk = ''
						App.frmMain.axLL.LlDefineFieldExt("Mitglied", Sal.NumberToStrX(App.frmKA.tblKA2.colArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Saldo", Sal.NumberToStrX(App.frmKA.tblKA2.colEUR.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Bemerkung", App.frmKA.tblKA2.colBemerk.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("BuchText", App.frmKA.tblKA2.colBuchtext.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("BuchOrt", App.frmKA.tblKA2.colBuchort.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmKA.tblKA2.colDatum.DateTime), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "KA-Kontroll3.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied", Sal.NumberToStrX(App.frmKA.tblKA3.colArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Vorschuß", Sal.NumberToStrX(App.frmKA.tblKA3.colVorsch.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("VorschußProz", Sal.NumberToStrX(App.frmKA.tblKA3.colVorschProz.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Bemerkung", App.frmKA.tblKA3.colBemerk.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Name", App.frmKA.tblKA3.colName.Text, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "KA-Kontroll4.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmKA.tblKA4.colDatum.DateTime), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ausbuchungen", Sal.NumberToStrX(App.frmKA.tblKA4.colAusb.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Bezahlt", Sal.NumberToStrX(App.frmKA.tblKA4.colBezahlt.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("BezProz", Sal.NumberToStrX(App.frmKA.tblKA4.colBezProz.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("BezProzK", Sal.NumberToStrX(App.frmKA.tblKA4.colBezProzK.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Gesamt", Sal.NumberToStrX(App.frmKA.tblKA4.colGes.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Kosten", Sal.NumberToStrX(App.frmKA.tblKA4.colKosten.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Abrechnungen", Sal.NumberToStrX(App.frmKA.tblKA4.colRech.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Saldo", Sal.NumberToStrX(App.frmKA.tblKA4.colSaldo.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						// Call axLL.LlDefineFieldExt( 'SaldoTK', SalNumberToStrX(frmKA.tblKA4.colSaldoTK ,2), LL_NUMERIC, nRet )
						App.frmMain.axLL.LlDefineFieldExt("Vorschuss", Sal.NumberToStrX(App.frmKA.tblKA4.colVorsch.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bezeichnung", "Vorschußauswertung für " + Sal.NumberToStrX(App.frmKA.dfArztNr4.Number, 0) + " vom " + Int.PalDateToStrDE(App.frmKA.dfvon2.DateTime) + " bis " + Int.PalDateToStrDE(App.frmKA.dfbis2.DateTime), 
							Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("VorschussProz", Sal.NumberToStrX(App.frmKA.dfVorsch5.Number, 2), Const.LL_NUMERIC, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Logbuch.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmLogbuch.tblLogbuch.colDatum.DateTime), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Text", App.frmLogbuch.tblLogbuch.colText.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Name", App.frmLogbuch.tblLogbuch.colName.Text, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Zettel.lst" || strPBericht == "ZettelListeErl.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmZettel.tblZettel.coldtDatum.DateTime), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Wiedervorlage", Int.PalDateToStrJJJJMMTT(App.frmZettel.tblZettel.coldtWv.DateTime), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Art", App.frmZettel.tblZettel.colsArt.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("von", App.frmZettel.tblZettel.colsVon.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("an", App.frmZettel.tblZettel.colsAn.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Bemrkung", App.frmZettel.tblZettel.collsBemerk.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("MitgliedNr", Sal.NumberToStrX(App.frmZettel.tblZettel.colnArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmZettel.tblZettel.colnHalterNr.Number, 0), Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("PRNr", Sal.NumberToStrX(App.frmZettel.tblZettel.colnProzNr.Number, 0), Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("RechNr", Sal.NumberToStrX(App.frmZettel.tblZettel.colnRechNr.Number, 0), Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Erledigt", App.frmZettel.tblZettel.colsErl.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "RaZa-Kündigungsliste.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", strN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", strN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", strS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", strO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("RaZaNr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnRZNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Aussenstände", Sal.NumberToStrX(App.frmRaZa.nAussenst, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmRaZa.tblPruef.colnArztNr.Number).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmRaZa.tblPruef.colnHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 24.04.09
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "TKSuch.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmTKSuch.tblTK.coldtBelDat.DateTime), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Arzt-Nr", Sal.NumberToStrX(App.frmTKSuch.tblTK.colnArzt.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter-Nr", Sal.NumberToStrX(App.frmTKSuch.tblTK.colnHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rech-Nr", Sal.NumberToStrX(App.frmTKSuch.tblTK.colnRechNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Beleg-Nr", Sal.NumberToStrX(App.frmTKSuch.tblTK.colnBelegNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Konto-Nr", Sal.NumberToStrX(App.frmTKSuch.tblTK.colnKontoNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Soll", Sal.NumberToStrX(App.frmTKSuch.tblTK.colnSoll.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Haben", Sal.NumberToStrX(App.frmTKSuch.tblTK.colnHaben.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Saldo", Sal.NumberToStrX(App.frmTKSuch.tblTK.colnSaldo.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchtext", App.frmTKSuch.tblTK.colsBuchText.Text, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "TSK-InfoH.crd") 
				{
					if (locals.bAsField) 
					{
					}
					else
					{
						if (App.frmMain.strTHLand != "") 
						{
							if (App.frmMain.strTHLand.Length <= 2) 
							{
								App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);
							}
						}

						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmMain.nTANr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(App.frmMain.nTANr), 4, 0) + Int.PalStrNum0(App.frmMain.nTHNr, 5, 0);

						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, App.frmMain.nTHNr), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 03.08.15 Ä1235
						if (PalIsSVAdresse(App.frmMain.nTANr, App.frmMain.nTHNr)) 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strSVN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strSVN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strSVS, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strSVO, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strSVLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						}
						// 24.04.09
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "TSK-Erinnerungen.lst") 
				{
					// Set strSelect = 'SELECT tskarztnr, tskhalternr, tskbeihdat, tskbeihilfe, tskbeihtext, tskregnr, tskerfdat,
					// tskptext, tskpwert,
					// hti || hvn || \' \' || hnn, hname2, hstr, hland, hort,
					// aname1, aname2, astr, aort, aland
					// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.dtDatum, :frmMain.nBeihilfe, :frmMain.strBeihText, :frmMain.strRegNr, :frmMain.dtErfDat,
					// :frmMain.strText, :frmMain.nDM,
					// :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHLand, :frmMain.strTHOrt,
					// :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand
					// FROM tsk, tskp, h, a
					// WHERE tskerldat IS NULL AND tskerfdat BETWEEN :dlgLlDruck.dt1 AND :dlgLlDruck.dt2
					// AND tskarztnr=tskparztnr AND tskhalternr=tskphalternr AND tskerfdat=tskperfdat
					// AND (tskpwert LIKE \'%mpfu%\' OR tskpwert LIKE \'%probe%\')
					// AND tskarztnr = harztnr AND tskhalternr = hhalternr AND tskarztnr=aarztnr
					// ORDER BY tskarztnr, tskhalternr'
					if (App.frmMain.strTHLand != "") 
					{
						if (App.frmMain.strTHLand.Length <= 2) 
						{
							App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);
						}
					}
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name1", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.RegNr", App.frmMain.strRegNr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Text", App.frmMain.strText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Wert", Sal.NumberToStrX(App.frmMain.nDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Typ", App.frmMain.strBeihText, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{

						App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmMain.nTANr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(App.frmMain.nTANr), 4, 0) + Int.PalStrNum0(App.frmMain.nTHNr, 5, 0);

						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, App.frmMain.nTHNr), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 24.04.09
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "0", Const.LL_NUMERIC, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Datum2", Int.PalDateToStrJJJJMMTT(dt2), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "BEZ-Buchungen.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("ErlDatum", Int.PalDateToStrJJJJMMTT(App.frmBEZDaten.tblBEZD.colErlDat.DateTime), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Arzt-Nr", Sal.NumberToStrX(App.frmBEZDaten.tblBEZD.colArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter-Nr", Sal.NumberToStrX(App.frmBEZDaten.tblBEZD.colHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rech-Nr", Sal.NumberToStrX(App.frmBEZDaten.tblBEZD.colRechNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR", Sal.NumberToStrX(App.frmBEZDaten.tblBEZD.colDM.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("BLZ", App.frmBEZDaten.tblBEZD.colBLZ.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Konto", App.frmBEZDaten.tblBEZD.colKonto.Text, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "InfoZahlungen.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmRgSuchen.tblHZahlungen.coldtZADat.DateTime), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Arzt-Nr", Sal.NumberToStrX(App.frmRgSuchen.tblHZahlungen.colnZAArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Beleg-Nr", Sal.NumberToStrX(App.frmRgSuchen.tblHZahlungen.colnZABelNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rech-Nr", Sal.NumberToStrX(App.frmRgSuchen.tblHZahlungen.colnZARechNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR", Sal.NumberToStrX(App.frmRgSuchen.tblHZahlungen.colnZADM.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("PR-Nr", Sal.NumberToStrX(App.frmRgSuchen.tblHZahlungen.colnZAProzNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Zahl-Kz", Sal.NumberToStrX(App.frmRgSuchen.tblHZahlungen.colnZAKZ.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("BuchText", App.frmRgSuchen.tblHZahlungen.colsZABuchtext.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("ZahlArt", App.frmRgSuchen.tblHZahlungen.colsZAZahlArt.Text, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmRgSuchen.dfArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmRgSuchen.dfArztNr.Number).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmRgSuchen.dfHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(App.frmRgSuchen.dfArztNr.Number), 4, 0) + Int.PalStrNum0(App.frmRgSuchen.dfHalterNr.Number, 5, 0);

						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmRgSuchen.dfArztNr.Number, App.frmRgSuchen.dfHalterNr.Number), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 03.08.15 Ä1235
						if (PalIsSVAdresse(App.frmRgSuchen.dfArztNr.Number, App.frmRgSuchen.dfHalterNr.Number)) 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strSVN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strSVN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strSVS, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strSVO, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strSVLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmRgSuchen.dfSHalterName.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmRgSuchen.dfSHalterName2.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmRgSuchen.dfSHalterStr.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmRgSuchen.dfSHalterOrt.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmRgSuchen.dfSHalterLand.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						}
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "KreuztabelleRG.lst" || strPBericht == "KreuztabelleMG.lst") 
				{
					// If NOT SqlPrepare(hSqlDisk,'SELECT akdatum, akdm, akrechsumm
					// 			INTO :dtRechDat, :nRechGeb, :nRechDM
					// 			FROM ak
					// 			WHERE aktyp=\'RG\' AND akdatum>=@YEARBEG(SYSDATE - 7 YEARS)')
					// Return FALSE
					if (locals.bAsField) 
					{
						// Call axLL.LlDefineFieldExt( 'Datum', PalDateToStrJJJJMMTT(frmMain.dtRechDat), LL_DATE_YYYYMMDD, nRet )
						App.frmMain.axLL.LlDefineFieldExt("Jahr", Sal.NumberToStrX(App.frmMain.nJahr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Monat", Sal.NumberToStrX(App.frmMain.nKonto, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Geb-EUR", Sal.NumberToStrX(App.frmMain.nRechGeb, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Umsatz-EUR", Sal.NumberToStrX(App.frmMain.nRechDM, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
						// 06.05.22
						if (strPSpezial == "YTD") 
						{
							App.frmMain.axLL.LlDefineVariableExt("Titelzusatz", "( YearToDate bis " + SalDateTime.Current.Day().ToString(0) + "." + SalDateTime.Current.Month().ToString(0) + " )", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Titelzusatz", "", Const.LL_TEXT, ref locals.nRet);
						}

					}
				}
				else if (strPBericht == "DublPruef.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Arzt-Nr", Sal.NumberToStrX(App.frmDublPruef.tblDubl.colArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("BehDatum", Int.PalDateToStrJJJJMMTT(App.frmDublPruef.tblDubl.colDatum.DateTime), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rech-Nr", Sal.NumberToStrX(App.frmDublPruef.tblDubl.colRechNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Bez", App.frmDublPruef.tblDubl.colBez.Text, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmDublPruef.nArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmDublPruef.nArztNr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineFieldExt("AbrDatum", Int.PalDateToStrJJJJMMTT(App.frmDublPruef.dtBearbDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Bearbeiter", App.frmDublPruef.strBearbeiter, Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "DublPruef2.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Arzt-Nr", Sal.NumberToStrX(App.frmDublPruef2.tblDubl.colArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("BehDatum", Int.PalDateToStrJJJJMMTT(App.frmDublPruef2.tblDubl.colDatum.DateTime), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rech-Nr", Sal.NumberToStrX(App.frmDublPruef2.tblDubl.colRechNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Summe", Sal.NumberToStrX(App.frmDublPruef2.tblDubl.colSumme.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmDublPruef2.nArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmDublPruef2.nArztNr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineFieldExt("AbrDatum", Int.PalDateToStrJJJJMMTT(App.frmDublPruef2.dtBearbDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Bearbeiter", App.frmDublPruef2.strBearbeiter, Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "VKZ-Mg.lst")  // 05.09.12 Ä814
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Jahr", Sal.NumberToStrX(App.frmVKZ.tblMahn.colJahr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Stufe", App.frmVKZ.tblMahn.colStufe.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Anzahl", Sal.NumberToStrX(App.frmVKZ.tblMahn.colAnzahl.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "VKZ-MBaus.lst")  // 05.09.12 Ä814
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Jahr", Sal.NumberToStrX(App.frmVKZ.tblMBAus.colJahr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Summe", Sal.NumberToStrX(App.frmVKZ.tblMBAus.colSumme.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Anzahl", Sal.NumberToStrX(App.frmVKZ.tblMBAus.colAnzahl.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "VKZ-Insol.lst")  // 05.09.12 Ä814
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Jahr", Sal.NumberToStrX(App.frmVKZ.tblInsol.colJahr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Summe", Sal.NumberToStrX(App.frmVKZ.tblInsol.colSumme.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Anzahl", Sal.NumberToStrX(App.frmVKZ.tblInsol.colAnzahl.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "VKZ-RaZa.lst")  // 05.09.12 Ä814
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Jahr", Sal.NumberToStrX(App.frmVKZ.tblRaZa.colJahr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Stufe", App.frmVKZ.tblRaZa.colStufe.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Anzahl", Sal.NumberToStrX(App.frmVKZ.tblRaZa.colAnzahl.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "VKZ-RgInfo.lst")  // 18.09.12 Ä820
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Jahr", Sal.NumberToStrX(App.frmVKZ.tblRgInfo.colJahr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Stufe", App.frmVKZ.tblRgInfo.colStufe.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Anzahl", Sal.NumberToStrX(App.frmVKZ.tblRgInfo.colAnzahl.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Summe", Sal.NumberToStrX(App.frmVKZ.tblRgInfo.colSumme.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("HF", Sal.NumberToStrX(App.frmVKZ.tblRgInfo.colHF.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "VKZ-RgInfoa.lst")  // 07.08.14 F2108
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Jahr", Sal.NumberToStrX(App.frmVKZ.tblRgInfoa.colJahr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Stufe", App.frmVKZ.tblRgInfoa.colStufe.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Anzahl", Sal.NumberToStrX(App.frmVKZ.tblRgInfoa.colAnzahl.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Summe", Sal.NumberToStrX(App.frmVKZ.tblRgInfoa.colSumme.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("HF", Sal.NumberToStrX(App.frmVKZ.tblRgInfoa.colHF.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "StatAbrg.lst")  // 10.12.12 Ä854
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Zeichen", App.frmStatAbrg.tblAbr.colBenutzer.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Anzahl", Sal.NumberToStrX(App.frmStatAbrg.tblAbr.colAnzahl.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Gebuehren", Sal.NumberToStrX(App.frmStatAbrg.tblAbr.colGeb.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("RechSumme", Sal.NumberToStrX(App.frmStatAbrg.tblAbr.colRechSum.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Serienbrief.crd") 
				{
					if (!(locals.bAsField)) 
					{
						App.frmMain.axLL.LlDefineVariableExt("ArztNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.EMail", App.frmMain.strTAEMail, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Fax", App.frmMain.strTAFax, Const.LL_TEXT, ref locals.nRet);
						// Call axLL.LlDefineVariableExt( 'Text', frmSerienbrief.rtcText, LL_RTF, nRet )
						if (strPBericht == "Serienbrief.crd") 
						{
							App.frmMain.axLL.LlDefineVariableExt("Text", Var.strDummy1, Const.LL_RTF, ref locals.nRet);
						}
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmMain.nTANr);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						if (App.frmSerienbrief.rbBrief.Checked && !(bePost))  // 18.07.18 Ä1763
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "0", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.alsFax", "0", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						}
						// 03.01.18
						// Call axLL.LlDefineVariableExt( 'Bericht.auf_blanco', '1', LL_TEXT, nRet )
						// 08.05.18
						if (App.frmSerienbrief.rbFax.Checked || bePost)  // 18.07.18 Ä1763
						{
							App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("alsFax", "0", Const.LL_NUMERIC, ref locals.nRet);
						}
						// 25.10.18
						// If frmSerienbrief.cbAnlage
						// Call axLL.LlDefineVariableExt( 'PDFAnlage', '2', LL_NUMERIC, nRet )
						// Else
						// Call axLL.LlDefineVariableExt( 'PDFAnlage', '0', LL_NUMERIC, nRet )
						App.frmMain.axLL.LlDefineVariableExt("PDFAnlage", App.frmSerienbrief.strDateiPfadAnlage, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "BuchAbgleich.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Belegnummer", Sal.NumberToStrX(App.frmBuchAbgleich.tblDat.colBelNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Soll", Sal.NumberToStrX(App.frmBuchAbgleich.tblDat.colSoll.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Haben", Sal.NumberToStrX(App.frmBuchAbgleich.tblDat.colHaben.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchtext", App.frmBuchAbgleich.tblDat.colBuchText.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmBuchAbgleich.tblDat.colDatum.DateTime), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);

						if (App.frmBuchAbgleich.rbDatum.Checked) 
						{
							if (App.frmBuchAbgleich.rbTKlfd.Checked) 
							{
								App.frmMain.axLL.LlDefineVariableExt("Titel", "Tierarztkonto, lfd.Monat - nach Datum", Const.LL_TEXT, ref locals.nRet);
							}
							else if (App.frmBuchAbgleich.rbTKVor.Checked) 
							{
								App.frmMain.axLL.LlDefineVariableExt("Titel", "Tierarztkonto, Vormonate - nach Datum", Const.LL_TEXT, ref locals.nRet);
							}
							else if (App.frmBuchAbgleich.rbFISoll.Checked) 
							{
								App.frmMain.axLL.LlDefineVariableExt("Titel", "KHK, Soll - nach Datum", Const.LL_TEXT, ref locals.nRet);
							}
							else if (App.frmBuchAbgleich.rbFIHaben.Checked) 
							{
								App.frmMain.axLL.LlDefineVariableExt("Titel", "KHK Haben - nach Datum", Const.LL_TEXT, ref locals.nRet);
							}
						}
						else if (App.frmBuchAbgleich.rbBelNr.Checked) 
						{
							if (App.frmBuchAbgleich.rbTKlfd.Checked) 
							{
								App.frmMain.axLL.LlDefineVariableExt("Titel", "Tierarztkonto, lfd. Monat - nach Belegnummern", Const.LL_TEXT, ref locals.nRet);
							}
							else if (App.frmBuchAbgleich.rbTKVor.Checked) 
							{
								App.frmMain.axLL.LlDefineVariableExt("Titel", "Tierarztkonto, Voronate - nach Belegnummern", Const.LL_TEXT, ref locals.nRet);
							}
							else if (App.frmBuchAbgleich.rbFISoll.Checked) 
							{
								App.frmMain.axLL.LlDefineVariableExt("Titel", "KHK, Soll - nach Belegnummern", Const.LL_TEXT, ref locals.nRet);
							}
							else if (App.frmBuchAbgleich.rbFIHaben.Checked) 
							{
								App.frmMain.axLL.LlDefineVariableExt("Titel", "KHK, Haben - nach Belegnummern", Const.LL_TEXT, ref locals.nRet);
							}
						}
						else if (App.frmBuchAbgleich.rbEnzel.Checked) 
						{
							if (App.frmBuchAbgleich.rbTKlfd.Checked) 
							{
								App.frmMain.axLL.LlDefineVariableExt("Titel", "Tierarztkonto, lfd. Monat - Einzeln", Const.LL_TEXT, ref locals.nRet);
							}
							else if (App.frmBuchAbgleich.rbTKVor.Checked) 
							{
								App.frmMain.axLL.LlDefineVariableExt("Titel", "Tierarztkonto, Vormonate - Einzeln", Const.LL_TEXT, ref locals.nRet);
							}
							else if (App.frmBuchAbgleich.rbFISoll.Checked) 
							{
								App.frmMain.axLL.LlDefineVariableExt("Titel", "KHK, Soll - Einzeln", Const.LL_TEXT, ref locals.nRet);
							}
							else if (App.frmBuchAbgleich.rbFIHaben.Checked) 
							{
								App.frmMain.axLL.LlDefineVariableExt("Titel", "KHK, Haben - Einzeln", Const.LL_TEXT, ref locals.nRet);
							}
						}
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "SerienbriefH.crd")  // 03.01.13
				{
					if (!(locals.bAsField)) 
					{
						App.frmMain.axLL.LlDefineVariableExt("ArztNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Titel", App.frmMain.strTHTi, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Vorname", App.frmMain.strTHVN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Nachname", App.frmMain.strTHNN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.EMail", App.frmMain.strTAEMail, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Text", Var.strDummy1, Const.LL_RTF, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmMain.nTANr);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0) + Int.PalStrNum0(App.frmMain.nTHNr, 5, 0);

						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, App.frmMain.nTHNr), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 27.07.15 Ä1235
						if (PalIsSVAdresse(App.frmMain.nTANr, App.frmMain.nTHNr)) 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strSVN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strSVN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strSVS, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strSVO, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strSVLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTHTi + App.frmMain.strTHVN + " " + App.frmMain.strTHNN, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTHN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
							// 08.10.13
							App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);

							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTHLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						}
						// 17.10.17
						if (App.frmSerienbriefH.rbBrief.Checked && !(bePost))  // 18.07.18 Ä1763
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "0", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						}
						// 25.10.18
						if (App.frmSerienbriefH.cbAnlage.Checked) 
						{
							App.frmMain.axLL.LlDefineVariableExt("PDFAnlage", "2", Const.LL_NUMERIC, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("PDFAnlage", "0", Const.LL_NUMERIC, ref locals.nRet);
						}
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Brief-Mandatsanfrage.crd") 
				{
					if (locals.bAsField) 
					{
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Gläubigeridentifikation", "DE41ZZZ00000248909", Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmHalter.dfArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", Int.PalCheckLarztnr(App.frmHalter.dfArztNr.Number).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmHalter.dfHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 22.10.13 Ä902
						nArztNrL = Int.PalCheckLarztnr(App.frmHalter.dfArztNr.Number);
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0) + Int.PalStrNum0(App.frmHalter.dfHalterNr.Number, 5, 0);

						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", App.frmHalter.dfeMailPM.Text, Const.LL_TEXT, ref locals.nRet);
						// 12.09.13
						if (strLand == "Deutschland") 
						{
							strLand = "";
						}

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 27.07.15 Ä1235
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name1", App.frmHalter.dfTi.Text + App.frmHalter.dfVN.Text + " " + App.frmHalter.dfNN.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmHalter.dfName2.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmHalter.dfStr.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmHalter.dfOrt.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Land", strLand, Const.LL_TEXT, ref locals.nRet);
						if (PalIsSVAdresse(App.frmHalter.dfArztNr.Number, App.frmHalter.dfHalterNr.Number)) 
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strSVN1, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strSVN2, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strSVS, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strSVO, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strSVLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmHalter.dfTi.Text + App.frmHalter.dfVN.Text + " " + App.frmHalter.dfNN.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmHalter.dfName2.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmHalter.dfStr.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmHalter.dfOrt.Text, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strLand, Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						}
						if ((strPrn.Scan("PrintMachine") != -1 || strPrn.Scan("Tagespost") != -1) && !(bePost))  // 18.07.18 Ä1763 and not bePost
						{
							App.frmMain.axLL.LlDefineVariableExt("alsFax", "0", Const.LL_NUMERIC, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						}
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmHalter.dfnam
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Rückrufliste.lst") 
				{
					// Set strSelect = 'SELECT rrdatum, rruser, rrpraxis, rrname, rrbemerk, rrrufnr, rrerluser, rrerldat
					// INTO :frmMain.dtDatum, :frmMain.strUser, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.lsBemerk, :frmMain.strTAFax, :frmMain.strTAOrt, :frmMain.dtRepZahlDat
					// FROM rr
					// WHERE rrdatum BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
					// ORDER BY rrdatum'
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Benutzer", App.frmMain.strUser, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Praxis", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Name", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Bemerkung", App.frmMain.lsBemerk, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Ruf-Nr", App.frmMain.strTAFax, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("ErlDurch", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("ErlDatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtRepZahlDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Wartezeit", ((App.frmMain.dtRepZahlDat - App.frmMain.dtDatum) * 24 * 60).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "BriefM-MwSt-0.lst")  // 03.11.14 Ä1067
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("ReverseVersion", Sal.NumberToStrX(App.frmAbrBearb.tblAbrPosi.colnReverseVersion.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR", Sal.NumberToStrX(App.frmAbrBearb.tblAbrPosi.colnDM.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("MwStProz", Sal.NumberToStrX(App.frmAbrBearb.tblAbrPosi.colnMwSt.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("RechText", App.frmAbrBearb.tblAbrPosi.colsRechText.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmAbrBearb.tblAbrPosi.coldtDatum.DateTime), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("LA", App.frmAbrBearb.tblAbrPosi.colsLA.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("ArztNr", Sal.NumberToStrX(App.frmAbrBearb.tblAbrHalter.colnArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("HalterNr", Sal.NumberToStrX(App.frmAbrBearb.tblAbrHalter.colnHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.NN", App.frmMain.strTHNN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.VN", App.frmMain.strTHVN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						// 14.03.16
						// 19.10.16 Ä1422 jetzt in Gruppen -> DE13 2595 0130 0007 0065 73
						App.frmMain.axLL.LlDefineVariableExt("IBAN", "DE13 2595 0130 0007 0065 73", Const.LL_TEXT, ref locals.nRet);

						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmAbrBearb.tblAbrHalter.colnArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmAbrBearb.tblAbrHalter.colnArztNr.Number).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", App.frmMain.strTAEMail, Const.LL_TEXT, ref locals.nRet);
						if ((strPrn.Scan("PrintMachine") != -1 || strPrn.Scan("Tagespost") != -1) && !(bePost))  // 18.07.18 Ä1763 and not bePost
						{
							App.frmMain.axLL.LlDefineVariableExt("alsFax", "0", Const.LL_NUMERIC, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						}

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "RR je Benutzer.lst")  // 16.01.16 F2603
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(this.dtRRDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("ErlDatum", Int.PalDateToStrJJJJMMTT(this.dtRRErlDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("User", this.strRRUser, Const.LL_TEXT, ref locals.nRet);
						nRRMin = Int.PalTimeDiffWorkDay(dtRRDatum, dtRRErlDat);
						App.frmMain.axLL.LlDefineFieldExt("Minuten", this.nRRMin.ToString(0), Const.LL_NUMERIC, ref locals.nRet);

					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Jahr", strRRDummy, Const.LL_NUMERIC, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Pegasus-Nutzer je Monat.lst" || strPBericht == "Pegasus-Nutzer.lst")  // 26.01.16 Ä1322
				{
					// If Not SqlPrepareAndExecute( hSqlLlDruck, 'SELECT pnddatum, COUNT( DISTINCT pnguid ) INTO :dlgLlDruck.strRRDummy, :dlgLlDruck.nRRMin
					// FROM pnd GROUP BY 1')
					// Return FALSE
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(this.dtRRDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Mitglied", this.nRRJahr.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Anzahl", this.nRRMin.ToString(0), Const.LL_NUMERIC, ref locals.nRet);

					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Pegasus-NutzerTab.lst")  // 26.01.16 Ä1322
				{
					// If Not SqlPrepareAndExecute( hSqlLlDruck, 'SELECT dbarztnr, pnarztnr, pncomputername, pnpraxis, pnprogver, pnletztdat, pnguid
					// INTO :dlgLlDruck.nDBArztNr, :dlgLlDruck.nPNArztNr, :dlgLlDruck.strPNCN, :dlgLlDruck.strPNPraxis, :dlgLlDruck.strPNProgVer, :dlgLlDruck.dtPNLetztDat, :dlgLlDruck.strPNGUID
					// FROM pnd, db WHERE pndguid = dbguid(+)')
					// Return FALSE
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("DB.Mitglied", this.nDBArztNr.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("PN.LetztDat", Int.PalDateToStrJJJJMMTT(this.dtPNLetztDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("PN.Mitglied", this.nPNArztNr.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("PN.Praxis", this.strPNPraxis, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("PN.ComputerName", this.strPNCN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("PN.ProgVer", this.strPNProgVer, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("PN.GUID", this.strPNGUID, Const.LL_TEXT, ref locals.nRet);

					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "TVN-Online.lst")  // 09.05.16
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(this.dtRRDatum), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Anzahl", this.nRRMin.ToString(0), Const.LL_NUMERIC, ref locals.nRet);

					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Jahr", strRRDummy, Const.LL_NUMERIC, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "BEZ-RetoureHalter.crd" || strPBericht == "BEZ-RetoureHalterKL.crd")  // 31.10.16 Ä1436	KL: 10.12.18 Ä1809
				{
					if (locals.bAsField) 
					{
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.dlgBEZRetoure.dfArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", Int.PalCheckLarztnr(App.dlgBEZRetoure.dfArztNr.Number).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.dlgBEZRetoure.dfHalterNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 22.10.13 Ä902
						nArztNrL = Int.PalCheckLarztnr(App.dlgBEZRetoure.dfArztNr.Number);
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0) + Int.PalStrNum0(App.dlgBEZRetoure.dfHalterNr.Number, 5, 0);

						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", App.dlgBEZRetoure.strTHPMEmail, Const.LL_TEXT, ref locals.nRet);
						// 12.09.13
						if (App.dlgBEZRetoure.strTHLand == "Deutschland") 
						{
							App.dlgBEZRetoure.strTHLand = "";
						}
						App.frmMain.axLL.LlDefineVariableExt("Gebuehren", Sal.NumberToStrX(App.dlgBEZRetoure.dfGebuehren.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EinzugDatum", Int.PalDateToStrJJJJMMTT(App.dlgBEZRetoure.dfEinzug.DateTime), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						if (App.dlgBEZRetoure.dfRechnungNr.Number == 0 || App.dlgBEZRetoure.dfRechnungNr.Number == Sys.NUMBER_Null) 
						{
							Int.SqlImmedSel(@"SELECT SUM(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
INTO :frmRgSuchen.nSaldo
FROM rk
WHERE " + Int.PalArztNr("rk", App.dlgBEZRetoure.dfArztNr.Number, App.dlgBEZRetoure.nTANr2) + @" AND rkhalternr = :dlgBEZRetoure.dfHalterNr AND rkkzzahl < 2
 AND rkdeaktiv IS NULL");
							// 24.04.19 F4487
							Int.SqlImmedSel(@"SELECT bezsmaxdm
INTO :frmRgSuchen.nDM
FROM bezs
WHERE bezserfdat = :dlgBEZRetoure.dtPErfDat
AND bezsarztnr = :dlgBEZRetoure.dfArztNr AND bezshalternr = :dlgBEZRetoure.dfHalterNr AND bezsrechnr IS NULL");
						}
						else
						{
							Int.SqlImmedSel(@"SELECT SUM(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
INTO :frmRgSuchen.nSaldo
FROM rk
WHERE rkarztnr = :dlgBEZRetoure.dfArztNr AND rkhalternr = :dlgBEZRetoure.dfHalterNr AND rkrechnr = :dlgBEZRetoure.dfRechnungNr AND rkkzzahl < 2 AND rkdeaktiv IS NULL");
							// 24.04.19 F4487
							Int.SqlImmedSel(@"SELECT bezsmaxdm
INTO :frmRgSuchen.nDM
FROM bezs
WHERE bezserfdat = :dlgBEZRetoure.dtPErfDat
AND bezsarztnr = :dlgBEZRetoure.dfArztNr AND bezshalternr = :dlgBEZRetoure.dfHalterNr AND bezsrechnr = :dlgBEZRetoure.dfRechnungNr");
						}
						// 24.04.19 F4487
						if (App.frmRgSuchen.nDM == SalNumber.Null || App.frmRgSuchen.nDM == 0) 
						{
							App.frmRgSuchen.nDM = App.frmRgSuchen.nSaldo;
						}
						if (App.frmRgSuchen.nSaldo > 0 && App.frmRgSuchen.nSaldo > App.frmRgSuchen.nDM)  // 08.05.19 "<" -> ">"
						{
							App.frmRgSuchen.nSaldo = App.frmRgSuchen.nDM;
						}
						// 28.11.16
						// 24.04.18 F4487 + AND hbhalternr = :dlgBEZRetoure.dfHalterNr
						// 26.07.21 F4791
						// Call SqlImmedSel( 'SELECT SUM(hbdm) INTO :dlgLlDruck.nDM FROM hb WHERE ' || PalArztNr('hb', dlgBEZRetoure.dfArztNr, dlgBEZRetoure.nTANr2) || ' AND hbhalternr = :dlgBEZRetoure.dfHalterNr AND hbcode LIKE \'BEZ%\'' )
						Int.SqlImmedSel("SELECT SUM(hbdm) INTO :dlgLlDruck.nDM FROM hb WHERE hbarztnr = :dlgBEZRetoure.dfArztNr AND hbhalternr = :dlgBEZRetoure.dfHalterNr AND hbcode LIKE \'BEZ%\'");

						App.frmRgSuchen.nSaldo = App.frmRgSuchen.nSaldo - nDM; // -, da Forderungen im Minus

						App.frmMain.axLL.LlDefineVariableExt("OP", Sal.NumberToStrX(App.frmRgSuchen.nSaldo, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("AnzRetouren", Sal.NumberToStrX(App.dlgBEZRetoure.nRetAnz, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("BelegNr", Sal.NumberToStrX(App.dlgBEZRetoure.dfBelegNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", Sal.NumberToStrX(App.dlgBEZRetoure.dfRechnungNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 27.07.15 Ä1235
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name1", App.dlgBEZRetoure.strTHTi + App.dlgBEZRetoure.strTHVN + " " + App.dlgBEZRetoure.strTHNN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.dlgBEZRetoure.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.dlgBEZRetoure.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.dlgBEZRetoure.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Land", App.dlgBEZRetoure.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.dlgBEZRetoure.strTHTi + App.dlgBEZRetoure.strTHVN + " " + App.dlgBEZRetoure.strTHNN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.dlgBEZRetoure.strTHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.dlgBEZRetoure.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.dlgBEZRetoure.strTHOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.dlgBEZRetoure.strTHLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						if ((strPrn.Scan("PrintMachine") != -1 || strPrn.Scan("Tagespost") != -1) && !(bePost))  // 18.07.18 Ä1763 and not bePost
						{
							App.frmMain.axLL.LlDefineVariableExt("alsFax", "0", Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "0", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						}
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "EWA-Liste.lst")  // 28.11.16 Ä1437
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Mitglied-Nr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Nr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("abDatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Konto", App.frmMain.strZeichen, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Altersstruktur.lst")  // 14.11.17 Ä1648
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Alter", nAlter.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Anzahl", nAnzahl.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Geschlecht", strGeschlecht, Const.LL_TEXT, ref locals.nRet);
						// 03.09.18 Ä1648 +, SUM(apumsatz)
						App.frmMain.axLL.LlDefineFieldExt("Umsatz", nRPDM.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						// Call axLL.LlDefineFieldExt( 'Umsatz', '2', LL_NUMERIC, nRet )
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bereich", strPSpezial, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 05.09.18 Ä1648
						App.frmMain.axLL.LlDefineVariableExt("GesamtAnzahl", nStatAnz.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("GesamtUmsatz", nStatUms.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("von", Int.PalDateToStrJJJJMMTT(App.frmMain.dtDatVon), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("bis", Int.PalDateToStrJJJJMMTT(App.frmMain.dtDatBis), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Anweisungsbelege.lst")  // 05.12.17 Ä1428
				{
					// If NOT SqlPrepareAndExecute(hSqlLlDruck,'SELECT abzei, abarztnr, absoll, abhaben, abdm, aberfdat, abmwst, aname1
					// 			INTO :dlgLlDruck.strZei, :dlgLlDruck.nArztNr, :dlgLlDruck.nSoll, :dlgLlDruck.nHaben, :dlgLlDruck.nDM,
					// 			:dlgLlDruck.dtErfDat, :dlgLlDruck.nMwSt, :dlgLlDruck.strAName1
					// 			FROM ab, a WHERE abarztnr=aarztnr AND abdrudat IS NULL ORDER BY aberfdat DESC'')
					// Return FALSE
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Zeichen", strZei, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("ArztNr", nArztNr.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Soll", nSoll.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Haben", nHaben.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EURBetrag", nDM.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("MwSt", nMwSt.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("ErfDat", Int.PalDateToStrJJJJMMTT(dtErfDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchtext", strBuchText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Praxis", strAName1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Gruppe", nAlter.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Vorschussminderungen.lst")  // 28.06.19 Ä1854
				{
					// If NOT SqlPrepare(hSqlLlDruck,'SELECT rkvorschussdm, rkvorschussdat, rkvorschussrueckdm, rkvorschussrueckdat, rkvorschussruechgrund
					// INTO :dlgLlDruck.nVorschussDM, :dlgLlDruck.dtVorschussDat, :dlgLlDruck.nVorschussRueckDM, :dlgLlDruck.dtVorschussRueckDat, :dlgLlDruck.strVorschussRueckGrund
					// FROM rk
					// WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis  AND rkvorschussrueckdat BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
					// ORDER BY rkarztnr, rkhalternr, rkvorschussrueckdat')
					// Return FALSE
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("ArztNr", nArztNr.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("HalterNr", nHalterNr.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("RechNr", nRechNr.ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Vorschuss.Betrag", nVorschussDM.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Vorschuss.RueckBetrag", nVorschussRueckDM.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Vorschuss.Datum", Int.PalDateToStrJJJJMMTT(dtVorschussDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Vorschuss.RueckDatum", Int.PalDateToStrJJJJMMTT(dtVorschussRueckDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Vorschuss.RueckGrund", strVorschussRueckGrund, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.VN", strN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.NN", strN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Str", strS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", strO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Land", strLand, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Nr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Brief Fiskaly.crd") 
				{
					if (!(locals.bAsField)) 
					{
						App.frmMain.axLL.LlDefineVariableExt("ArztNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.EMail", App.frmMain.strTAEMail, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Adresse.Fax", App.frmMain.strTAFax, Const.LL_TEXT, ref locals.nRet);
						// 30.07.20 Ä 1896
						App.frmMain.axLL.LlDefineVariableExt("API.Key", App.frmMain.strTAAPIKey, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("API.Secret", App.frmMain.strTAAPISecret, Const.LL_TEXT, ref locals.nRet);
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						nArztNrL = Int.PalCheckLarztnr(App.frmMain.nTANr);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(nArztNrL).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						// 21.06.13 Ä902
						strCustomerNumber = Int.PalStrNum0(PalHolePMArzt(nArztNrL), 4, 0);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						if (App.frmAerzte.rbBrief.Checked && !(bePost))  // 18.07.18 Ä1763
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "0", Const.LL_TEXT, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Bericht.alsFax", "0", Const.LL_TEXT, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						}
						// 08.05.18
						if (App.frmAerzte.rbFax.Checked || bePost)  // 18.07.18 Ä1763
						{
							App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("alsFax", "0", Const.LL_NUMERIC, ref locals.nRet);
						}
						// 25.10.18
						App.frmMain.axLL.LlDefineVariableExt("PDFAnlage", "0", Const.LL_NUMERIC, ref locals.nRet);
					}
					else
					{
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "DYMO-Alternative.crd" || strPBericht == "DYMO-AlternativeBarcode.crd") 
				{
					if (!(locals.bAsField)) 
					{
						App.frmMain.axLL.LlDefineVariableExt("Adresse", strPSpezial, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "FordInsol.crd")  // 13.12.21 Ä1979
				{
					if (locals.bAsField) 
					{
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Proz.Nr", Sal.NumberToStrX(App.frmMBKalender.nProzNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Gericht", App.frmMBKalender.strGerName, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Geschaeftsnr", App.frmMBKEinzeldruck.dfGeschaeftsnr.Text, Const.LL_TEXT, ref locals.nRet);
						if (strPSpezial == "RI")  // 01.08.23 Ä2120
						{
							// Call SqlImmedSel( 'SELECT SUM(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn), SUM(rkdmmahn-rkzamahn), SUM(rkdmzins-rkzazins)
							// INTO :frmMBKEinzeldruck.nHF, :frmMBKEinzeldruck.nMG, :frmMBKEinzeldruck.nZI
							// FROM rk WHERE ' || PalArztNr( 'rk', frmMBKEinzeldruck.nA1, frmMBKEinzeldruck.nArztNr2 ) || ' AND rkhalternr = :frmMBKEinzeldruck.nHalterNr AND rkdeaktiv IS NULL AND rkkzzahl < 2
							// AND (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)<>0' )
							App.frmMain.axLL.LlDefineVariableExt("Betrag 1", Sal.NumberToStrX(App.frmMBKEinzeldruck.nHF, 2), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Betrag 2", Sal.NumberToStrX(App.frmMBKEinzeldruck.nZI, 2), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Betrag 3", Sal.NumberToStrX(App.frmMBKEinzeldruck.nMG, 2), Const.LL_NUMERIC, ref locals.nRet);
						}
						else
						{
							if (App.frmMBKalender.nHFAlles == SalNumber.Null) 
							{
								App.frmMBKalender.nHFAlles = 0;
							}
							if (App.frmMBKalender.nLfdZinsAlles == SalNumber.Null) 
							{
								App.frmMBKalender.nLfdZinsAlles = 0;
							}
							if (App.frmMBKalender.nVZAlles == SalNumber.Null) 
							{
								App.frmMBKalender.nVZAlles = 0;
							}
							if (App.frmMBKalender.nUVZAlles == SalNumber.Null) 
							{
								App.frmMBKalender.nUVZAlles = 0;
							}
							if (App.frmMBKalender.nUVZTit == SalNumber.Null) 
							{
								App.frmMBKalender.nUVZTit = 0;
							}
							App.frmMain.axLL.LlDefineVariableExt("Betrag 1", Sal.NumberToStrX(App.frmMBKalender.nHFAlles, 2), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Betrag 2", Sal.NumberToStrX(App.frmMBKalender.nLfdZinsAlles, 2), Const.LL_NUMERIC, ref locals.nRet);
							App.frmMain.axLL.LlDefineVariableExt("Betrag 3", (App.frmMBKalender.nVZAlles + App.frmMBKalender.nUVZAlles + App.frmMBKalender.nUVZTit).ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						}
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name", App.frmMBKEinzeldruck.strHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmMBKEinzeldruck.strHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmMBKEinzeldruck.strHS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmMBKEinzeldruck.strHO, Const.LL_TEXT, ref locals.nRet);
						// Call axLL.LlDefineVariableExt( 'Zeichen', PalZust(  frmMBKalender.nArztNr ), LL_TEXT, nRet )
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMBKalender.nArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMBKalender.nHalterNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 10.12.12 Ä851
						// Call axLL.LlDefineVariableExt( 'Bericht.Name2', 'Gerichtsvollzieherverteilungsstelle', LL_TEXT, nRet )
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "1", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("ArztNr", Sal.NumberToStrX(App.frmMBKalender.nArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("HalterNr", Sal.NumberToStrX(App.frmMBKalender.nHalterNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Haftbefehl-Antrag.crd") 
				{
					// Set frmMBKalender.nZaDM = frmMBKalender.nZaDM * -1
					if (locals.bAsField) 
					{
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Proz.Nr", Sal.NumberToStrX(App.frmMBKalender.nProzNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Gericht", App.frmMBKalender.strGerName, Const.LL_TEXT, ref locals.nRet);
						// 13.05.19 Ä1852
						App.frmMain.axLL.LlDefineVariableExt("GerichtStrasse", App.frmMBKalender.strGerStrasse, Const.LL_TEXT, ref locals.nRet);

						// Call axLL.LlDefineVariableExt( 'Zustellung.MB', PalDateToStrJJJJMMTT(frmMBKalender.dtZustMB), LL_DATE_YYYYMMDD, nRet )
						// Call axLL.LlDefineVariableExt( 'Zustellung.VB', PalDateToStrJJJJMMTT(frmMBKalender.dtZustVB), LL_DATE_YYYYMMDD, nRet )
						// Call axLL.LlDefineVariableExt( 'Aktenzeichen', frmMBKalender.strAZ, LL_TEXT, nRet )

						App.frmMain.axLL.LlDefineVariableExt("Halter.Name", App.frmMBKalender.strHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmMBKalender.strHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmMBKalender.strHS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmMBKalender.strHO, Const.LL_TEXT, ref locals.nRet);
						// 12.03.13 Ä 894
						App.frmMain.axLL.LlDefineVariableExt("Halter.GebDat", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtHGebDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 02.07.20
						// Call axLL.LlDefineVariableExt( 'EUR-734', SalNumberToStrX(frmMBKalender.nVA734,2), LL_NUMERIC, nRet )

						// 25.07.13 F1679 Zust.Benutzer statt akt.Benutzer
						App.frmMain.axLL.LlDefineVariableExt("Zeichen", Int.PalZust(App.frmMBKalender.nArztNr), Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("GerOrt", App.frmMBKalender.strGerOrt, Const.LL_TEXT, ref locals.nRet);
						// Call axLL.LlDefineVariableExt( 'Zins-Lfd', SalNumberToStrX(frmMBKalender.nLfdZins,2), LL_NUMERIC, nRet )
						// 29.03.16
						// Call axLL.LlDefineVariableExt( 'Zins-LfdAlles', SalNumberToStrX(frmMBKalender.nLfdZinsAlles,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'HF-Alles', SalNumberToStrX(frmMBKalender.nHFAlles,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'VZAlles', SalNumberToStrX(frmMBKalender.nVZAlles,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'UVZAlles', SalNumberToStrX(frmMBKalender.nUVZAlles,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'UVZTit', SalNumberToStrX(frmMBKalender.nUVZTit,2), LL_NUMERIC, nRet )

						// Call axLL.LlDefineVariableExt( 'Zins-LfdVZ', SalNumberToStrX(frmMBKalender.nLfdZinsVZ,2), LL_NUMERIC, nRet )
						// 15.04.13 Ä927
						// Call axLL.LlDefineVariableExt( 'Zins-Vorg', SalNumberToStrX(frmMBKalender.nVorgZinsen,2), LL_NUMERIC, nRet )
						// Set frmMBKalender.nLfdZins = frmMBKalender.nLfdZins + frmMBKalender.nVorgZinsen
						// Call axLL.LlDefineVariableExt( 'Rechnung.RechDat', PalDateToStrJJJJMMTT(frmMBKalender.dtRechDat), LL_DATE_YYYYMMDD, nRet )
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMBKalender.nArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMBKalender.nHalterNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "Amtsgericht", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "Gerichtsvollzieherverteilungsstelle", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMBKalender.strGerOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 20.12.10 OTF366
						App.frmMain.axLL.LlDefineVariableExt("Auftrag", Sal.NumberToStrX(App.frmMBKalender.nVA0, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "1", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						if (App.frmMBKalender.nZaDM == SalNumber.Null) 
						{
							App.frmMBKalender.nZaDM = 0;
						}
						if (App.frmMBKalender.nLfdZins == SalNumber.Null) 
						{
							App.frmMBKalender.nLfdZins = 0;
						}
						// Call axLL.LlDefineVariableExt( 'lfdZins', SalNumberToStrX( frmMBKalender.nLfdZins, 2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Zahlungen', SalNumberToStrX( frmMBKalender.nZaDM*-1, 2), LL_NUMERIC, nRet )
						// 05.01.11
						// Call axLL.LlDefineVariableExt( 'Zusatzkosten', SalNumberToStrX( frmMBKalender.nZusatzkosten, 2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'ZusatzkostenText', frmMBKalender.strZusatzkosten, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Extra', frmMBKalender.strExtra, LL_TEXT, nRet )
						// 22.12.11 Ä697
						// Call axLL.LlDefineVariableExt( 'RaZaNr', strRaZaNr, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'RaZaSaldo', SalNumberToStrX( nRZOffen , 2), LL_NUMERIC, nRet )
						// 06.05.13 Ä905
						Int.SqlImmedSel("SELECT prarztnr, prhalternr INTO :frmMain.nTANr, :frmMain.nTHNr FROM pr WHERE prnr = :frmMBKalender.nProzNr");
						App.frmMain.axLL.LlDefineVariableExt("ArztNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
                        // 29.01.13 Ä877
                        // 15.04.13 Ä920
                        // Call axLL.LlDefineVariableExt( 'GebDatEheP', PalDateToStrJJJJMMTT( frmMBKEinzeldruck.dfVAGebDatEheP ), LL_DATE_YYYYMMDD, nRet )

                        App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);

						// 03.09.21 Ä1968
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
                else if (strPBericht == "Liste weiterer Schuldner zum VA.crd")  // 25.07.24 Ä2082 ###
                {
					// Set strSelect ='SELECT
					// preaganra, preagn1a, preagn2a, preagn3a, preagrfa, preagsha, preagplza, preagoa, preagala,
					// preaganrb, preagn1b, preagn2b, preagn3b, preagrfb, preagshb, preagplzb, preagob, preagalb,
					// preaganrc, preagn1c, preagn2c, preagn3c, preagrfc, preagshc, preagplzc, preagoc, preagalc,
					// preaganrd, preagn1d, preagn2d, preagn3d, preagrfd, preagshd, preagplzd, preagod, preagald,
					// preaggvfua, preaggvvna, preaggvsha, preaggvplza, preaggvoa, preaggvala,
					// preaggvfub, preaggvvnb, preaggvshb, preaggvplzb, preaggvob, preaggvalb,
					// preaggvfuc, preaggvvnc, preaggvshc, preaggvplzc, preaggvoc, preaggvalc,
					// preaggvfud, preaggvvnd, preaggvshd, preaggvplzd, preaggvod, preaggvald
					// INTO
					// :frmMBKEinzeldruck.nAGANRa, :frmMBKEinzeldruck.strAGN1a, :frmMBKEinzeldruck.strAGN2a, :frmMBKEinzeldruck.strAGN3a, :frmMBKEinzeldruck.strAGRFa,
					// :frmMBKEinzeldruck.strAGSHa, :frmMBKEinzeldruck.strAGPLZa, :frmMBKEinzeldruck.strAGOa, :frmMBKEinzeldruck.strAGALa,
					// :frmMBKEinzeldruck.nAGANRb, :frmMBKEinzeldruck.strAGN1b, :frmMBKEinzeldruck.strAGN2b, :frmMBKEinzeldruck.strAGN3b, :frmMBKEinzeldruck.strAGRFb,
					// :frmMBKEinzeldruck.strAGSHb, :frmMBKEinzeldruck.strAGPLZb, :frmMBKEinzeldruck.strAGOb, :frmMBKEinzeldruck.strAGALb,
					// :frmMBKEinzeldruck.nAGANRc, :frmMBKEinzeldruck.strAGN1c, :frmMBKEinzeldruck.strAGN2c, :frmMBKEinzeldruck.strAGN3c, :frmMBKEinzeldruck.strAGRFc,
					// :frmMBKEinzeldruck.strAGSHc, :frmMBKEinzeldruck.strAGPLZc, :frmMBKEinzeldruck.strAGOc, :frmMBKEinzeldruck.strAGALc,
					// :frmMBKEinzeldruck.nAGANRd, :frmMBKEinzeldruck.strAGN1d, :frmMBKEinzeldruck.strAGN2d, :frmMBKEinzeldruck.strAGN3d, :frmMBKEinzeldruck.strAGRFd,
					// :frmMBKEinzeldruck.strAGSHd, :frmMBKEinzeldruck.strAGPLZd, :frmMBKEinzeldruck.strAGOd, :frmMBKEinzeldruck.strAGALd,
					// :frmMBKEinzeldruck.strAGGVFUa, :frmMBKEinzeldruck.strAGGVVNa, :frmMBKEinzeldruck.strAGGVSHa, :frmMBKEinzeldruck.strAGGVPLZa, :frmMBKEinzeldruck.strAGGVOa, :frmMBKEinzeldruck.strAGGVALa,
					// :frmMBKEinzeldruck.strAGGVFUb, :frmMBKEinzeldruck.strAGGVVNb, :frmMBKEinzeldruck.strAGGVSHb, :frmMBKEinzeldruck.strAGGVPLZb, :frmMBKEinzeldruck.strAGGVOb, :frmMBKEinzeldruck.strAGGVALb,
					// :frmMBKEinzeldruck.strAGGVFUc, :frmMBKEinzeldruck.strAGGVVNc, :frmMBKEinzeldruck.strAGGVSHc, :frmMBKEinzeldruck.strAGGVPLZc, :frmMBKEinzeldruck.strAGGVOc, :frmMBKEinzeldruck.strAGGVALc,
					// :frmMBKEinzeldruck.strAGGVFUd, :frmMBKEinzeldruck.strAGGVVNd, :frmMBKEinzeldruck.strAGGVSHd, :frmMBKEinzeldruck.strAGGVPLZd, :frmMBKEinzeldruck.strAGGVOd, :frmMBKEinzeldruck.strAGGVALd,
					// :frmMBKEinzeldruck.strAGSHd, :frmMBKEinzeldruck.strAGPLZd, :frmMBKEinzeldruck.strAGOd, :frmMBKEinzeldruck.strAGALd,
					// :frmMBKEinzeldruck.strAGGVFUa, :frmMBKEinzeldruck.strAGGVVNa, :frmMBKEinzeldruck.strAGGVSHa, :frmMBKEinzeldruck.strAGGVPLZa, :frmMBKEinzeldruck.strAGGVOa, :frmMBKEinzeldruck.strAGGVALa,
					// :frmMBKEinzeldruck.strAGGVFUb, :frmMBKEinzeldruck.strAGGVVNb, :frmMBKEinzeldruck.strAGGVSHb, :frmMBKEinzeldruck.strAGGVPLZb, :frmMBKEinzeldruck.strAGGVOb, :frmMBKEinzeldruck.strAGGVALb,
					// :frmMBKEinzeldruck.strAGGVFUc, :frmMBKEinzeldruck.strAGGVVNc, :frmMBKEinzeldruck.strAGGVSHc, :frmMBKEinzeldruck.strAGGVPLZc, :frmMBKEinzeldruck.strAGGVOc, :frmMBKEinzeldruck.strAGGVALc,
					// :frmMBKEinzeldruck.strAGGVFUd, :frmMBKEinzeldruck.strAGGVVNd, :frmMBKEinzeldruck.strAGGVSHd, :frmMBKEinzeldruck.strAGGVPLZd, :frmMBKEinzeldruck.strAGGVOd, :frmMBKEinzeldruck.strAGGVALd,
					// :frmMBKEinzeldruck.strAGGVFUa2, :frmMBKEinzeldruck.strAGGVVNa2, :frmMBKEinzeldruck.strAGGVSHa2, :frmMBKEinzeldruck.strAGGVPLZa2, :frmMBKEinzeldruck.strAGGVOa2, :frmMBKEinzeldruck.strAGGVALa2,
					// :frmMBKEinzeldruck.strAGGVFUb2, :frmMBKEinzeldruck.strAGGVVNb2, :frmMBKEinzeldruck.strAGGVSHb2, :frmMBKEinzeldruck.strAGGVPLZb2, :frmMBKEinzeldruck.strAGGVOb2, :frmMBKEinzeldruck.strAGGVALb2,
					// :frmMBKEinzeldruck.strAGGVFUc2, :frmMBKEinzeldruck.strAGGVVNc2, :frmMBKEinzeldruck.strAGGVSHc2, :frmMBKEinzeldruck.strAGGVPLZc2, :frmMBKEinzeldruck.strAGGVOc2, :frmMBKEinzeldruck.strAGGVALc2,
					// :frmMBKEinzeldruck.strAGGVFUd2, :frmMBKEinzeldruck.strAGGVVNd2, :frmMBKEinzeldruck.strAGGVSHd2, :frmMBKEinzeldruck.strAGGVPLZd2, :frmMBKEinzeldruck.strAGGVOd2, :frmMBKEinzeldruck.strAGGVALd2,
					// :frmMBKEinzeldruck.strAGGVFUa3, :frmMBKEinzeldruck.strAGGVVNa3, :frmMBKEinzeldruck.strAGGVSHa3, :frmMBKEinzeldruck.strAGGVPLZa3, :frmMBKEinzeldruck.strAGGVOa3, :frmMBKEinzeldruck.strAGGVALa3,
					// :frmMBKEinzeldruck.strAGGVFUb3, :frmMBKEinzeldruck.strAGGVVNb3, :frmMBKEinzeldruck.strAGGVSHb3, :frmMBKEinzeldruck.strAGGVPLZb3, :frmMBKEinzeldruck.strAGGVOb3, :frmMBKEinzeldruck.strAGGVALb3,
					// :frmMBKEinzeldruck.strAGGVFUc3, :frmMBKEinzeldruck.strAGGVVNc3, :frmMBKEinzeldruck.strAGGVSHc3, :frmMBKEinzeldruck.strAGGVPLZc3, :frmMBKEinzeldruck.strAGGVOc3, :frmMBKEinzeldruck.strAGGVALc3,
					// :frmMBKEinzeldruck.strAGGVFUd3, :frmMBKEinzeldruck.strAGGVVNd3, :frmMBKEinzeldruck.strAGGVSHd3, :frmMBKEinzeldruck.strAGGVPLZd3, :frmMBKEinzeldruck.strAGGVOd3, :frmMBKEinzeldruck.strAGGVALd3,
					// :frmMBKEinzeldruck.strAGGVFUa4, :frmMBKEinzeldruck.strAGGVVNa4, :frmMBKEinzeldruck.strAGGVSHa4, :frmMBKEinzeldruck.strAGGVPLZa4, :frmMBKEinzeldruck.strAGGVOa4, :frmMBKEinzeldruck.strAGGVALa4,
					// :frmMBKEinzeldruck.strAGGVFUb4, :frmMBKEinzeldruck.strAGGVVNb4, :frmMBKEinzeldruck.strAGGVSHb4, :frmMBKEinzeldruck.strAGGVPLZb4, :frmMBKEinzeldruck.strAGGVOb4, :frmMBKEinzeldruck.strAGGVALb4,
					// :frmMBKEinzeldruck.strAGGVFUc4, :frmMBKEinzeldruck.strAGGVVNc4, :frmMBKEinzeldruck.strAGGVSHc4, :frmMBKEinzeldruck.strAGGVPLZc4, :frmMBKEinzeldruck.strAGGVOc4, :frmMBKEinzeldruck.strAGGVALc4,
					// :frmMBKEinzeldruck.strAGGVFUd4, :frmMBKEinzeldruck.strAGGVVNd4, :frmMBKEinzeldruck.strAGGVSHd4, :frmMBKEinzeldruck.strAGGVPLZd4, :frmMBKEinzeldruck.strAGGVOd4, :frmMBKEinzeldruck.strAGGVALd4
					// FROM pre WHERE preproznr = :frmMBKEinzeldruck.dfPR1'
					if (locals.bAsField) 
					{
						// Call axLL.LlDefineFieldExt( 'ArztNr', SalNumberToStrX(nArztNr,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineFieldExt( 'HalterNr', SalNumberToStrX(nHalterNr ,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineFieldExt( 'RechNr', SalNumberToStrX(nRechNr ,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineFieldExt( 'Vorschuss.Betrag', SalNumberToStrX(nVorschussDM ,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineFieldExt( 'Vorschuss.RueckBetrag', SalNumberToStrX(nVorschussRueckDM ,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineFieldExt( 'Vorschuss.Datum', PalDateToStrJJJJMMTT(dtVorschussDat), LL_DATE_YYYYMMDD, nRet )
						// Call axLL.LlDefineFieldExt( 'Vorschuss.RueckDatum', PalDateToStrJJJJMMTT(dtVorschussRueckDat), LL_DATE_YYYYMMDD, nRet )
						// Call axLL.LlDefineFieldExt( 'Vorschuss.RueckGrund', strVorschussRueckGrund, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Name', frmMBKalender.strHN1, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Name2', frmMBKalender.strHN2, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Strasse', frmMBKalender.strHS, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Halter.Ort', frmMBKalender.strHO, LL_TEXT, nRet )
						// 24.07.23 Ä2082
						// Call axLL.LlDefineFieldExt( 'Halter.Anrede', frmMBKEinzeldruck.strHTitel, LL_TEXT, nRet )
					}
					else
					{
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Proz.Nr", Sal.NumberToStrX(App.frmMBKalender.nProzNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Gericht", App.frmMBKalender.strGerName, Const.LL_TEXT, ref locals.nRet);
						// 13.05.19 Ä1852
						App.frmMain.axLL.LlDefineVariableExt("GerichtStrasse", App.frmMBKalender.strGerStrasse, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Aktenzeichen", App.frmMBKalender.strAZ, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("AktenzeichenB", App.frmMBKalender.strAZb, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("AktenzeichenC", App.frmMBKalender.strAZc, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("AktenzeichenD", App.frmMBKalender.strAZd, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Halter.Name", App.frmMBKalender.strHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmMBKalender.strHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmMBKalender.strHS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmMBKalender.strHO, Const.LL_TEXT, ref locals.nRet);
						// 24.07.23 Ä2082
						App.frmMain.axLL.LlDefineVariableExt("Halter.Anrede", App.frmMBKEinzeldruck.strHTitel, Const.LL_TEXT, ref locals.nRet);
						// 12.03.13 Ä 894
						App.frmMain.axLL.LlDefineVariableExt("Halter.GebDat", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtHGebDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						// 02.07.20
						// Call axLL.LlDefineVariableExt( 'EUR-734', SalNumberToStrX(frmMBKalender.nVA734,2), LL_NUMERIC, nRet )

						// 25.07.13 F1679 Zust.Benutzer statt akt.Benutzer
						App.frmMain.axLL.LlDefineVariableExt("Zeichen", Int.PalZust(App.frmMBKalender.nArztNr), Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("GerOrt", App.frmMBKalender.strGerOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMBKalender.nArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMBKalender.nHalterNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "Amtsgericht", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "Gerichtsvollzieherverteilungsstelle", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMBKalender.strGerOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 20.12.10 OTF366
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "1", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						Int.SqlImmedSel("SELECT prarztnr, prhalternr INTO :frmMain.nTANr, :frmMain.nTHNr FROM pr WHERE prnr = :frmMBKalender.nProzNr");
						App.frmMain.axLL.LlDefineVariableExt("ArztNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
						// PRE
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGANRb", Sal.NumberToStrX(App.frmMBKEinzeldruck.nAGANRb, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGANRc", Sal.NumberToStrX(App.frmMBKEinzeldruck.nAGANRc, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGANRd", Sal.NumberToStrX(App.frmMBKEinzeldruck.nAGANRd, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGN1b", App.frmMBKEinzeldruck.strAGN1b, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGN2b", App.frmMBKEinzeldruck.strAGN2b, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGRFb", App.frmMBKEinzeldruck.strAGRFb, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGSHb", App.frmMBKEinzeldruck.strAGSHb, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGPLZb", App.frmMBKEinzeldruck.strAGPLZb, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGOb", App.frmMBKEinzeldruck.strAGOb, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGALb", App.frmMBKEinzeldruck.strAGALb, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGN1c", App.frmMBKEinzeldruck.strAGN1c, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGN2c", App.frmMBKEinzeldruck.strAGN2c, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGRFc", App.frmMBKEinzeldruck.strAGRFc, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGSHc", App.frmMBKEinzeldruck.strAGSHc, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGPLZc", App.frmMBKEinzeldruck.strAGPLZc, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGOc", App.frmMBKEinzeldruck.strAGOc, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGALc", App.frmMBKEinzeldruck.strAGALc, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGN1d", App.frmMBKEinzeldruck.strAGN1d, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGN2d", App.frmMBKEinzeldruck.strAGN2d, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGRFd", App.frmMBKEinzeldruck.strAGRFd, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGSHd", App.frmMBKEinzeldruck.strAGSHd, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGPLZd", App.frmMBKEinzeldruck.strAGPLZd, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGOd", App.frmMBKEinzeldruck.strAGOd, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGALd", App.frmMBKEinzeldruck.strAGALd, Const.LL_TEXT, ref locals.nRet);
						// Gesetzl. Vertreter
						// a
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVFua", App.frmMBKEinzeldruck.strAGGVFUa, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVFua2", App.frmMBKEinzeldruck.strAGGVFUa2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVFua3", App.frmMBKEinzeldruck.strAGGVFUa3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVFua4", App.frmMBKEinzeldruck.strAGGVFUa4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVVNa", App.frmMBKEinzeldruck.strAGGVVNa, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVVNa2", App.frmMBKEinzeldruck.strAGGVVNa2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVVNa3", App.frmMBKEinzeldruck.strAGGVVNa3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVVNa4", App.frmMBKEinzeldruck.strAGGVVNa4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVSHa", App.frmMBKEinzeldruck.strAGGVSHa, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVSHa2", App.frmMBKEinzeldruck.strAGGVSHa2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVSHa3", App.frmMBKEinzeldruck.strAGGVSHa3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVSHa4", App.frmMBKEinzeldruck.strAGGVSHa4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVPLZa", App.frmMBKEinzeldruck.strAGGVPLZa, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVPLZa2", App.frmMBKEinzeldruck.strAGGVPLZa2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVPLZa3", App.frmMBKEinzeldruck.strAGGVPLZa3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVPLZa4", App.frmMBKEinzeldruck.strAGGVPLZa4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVOa", App.frmMBKEinzeldruck.strAGGVOa, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVOa2", App.frmMBKEinzeldruck.strAGGVOa2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVOa3", App.frmMBKEinzeldruck.strAGGVOa3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVOa4", App.frmMBKEinzeldruck.strAGGVOa4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVALa", App.frmMBKEinzeldruck.strAGGVALa, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVALa2", App.frmMBKEinzeldruck.strAGGVALa2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVALa3", App.frmMBKEinzeldruck.strAGGVALa3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVALa4", App.frmMBKEinzeldruck.strAGGVALa4, Const.LL_TEXT, ref locals.nRet);
						// b
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVFub", App.frmMBKEinzeldruck.strAGGVFUb, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVFub2", App.frmMBKEinzeldruck.strAGGVFUb2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVFub3", App.frmMBKEinzeldruck.strAGGVFUb3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVFub4", App.frmMBKEinzeldruck.strAGGVFUb4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVVNb", App.frmMBKEinzeldruck.strAGGVVNb, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVVNb2", App.frmMBKEinzeldruck.strAGGVVNb2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVVNb3", App.frmMBKEinzeldruck.strAGGVVNb3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVVNb4", App.frmMBKEinzeldruck.strAGGVVNb4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVSHb", App.frmMBKEinzeldruck.strAGGVSHb, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVSHb2", App.frmMBKEinzeldruck.strAGGVSHb2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVSHb3", App.frmMBKEinzeldruck.strAGGVSHb3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVSHb4", App.frmMBKEinzeldruck.strAGGVSHb4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVPLZb", App.frmMBKEinzeldruck.strAGGVPLZb, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVPLZb2", App.frmMBKEinzeldruck.strAGGVPLZb2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVPLZb3", App.frmMBKEinzeldruck.strAGGVPLZb3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVPLZb4", App.frmMBKEinzeldruck.strAGGVPLZb4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVOb", App.frmMBKEinzeldruck.strAGGVOb, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVOb2", App.frmMBKEinzeldruck.strAGGVOb2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVOb3", App.frmMBKEinzeldruck.strAGGVOb3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVOb4", App.frmMBKEinzeldruck.strAGGVOb4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVALb", App.frmMBKEinzeldruck.strAGGVALb, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVALb2", App.frmMBKEinzeldruck.strAGGVALb2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVALb3", App.frmMBKEinzeldruck.strAGGVALb3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVALb4", App.frmMBKEinzeldruck.strAGGVALb4, Const.LL_TEXT, ref locals.nRet);
						// c
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVFuc", App.frmMBKEinzeldruck.strAGGVFUc, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVFuc2", App.frmMBKEinzeldruck.strAGGVFUc2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVFuc3", App.frmMBKEinzeldruck.strAGGVFUc3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVFuc4", App.frmMBKEinzeldruck.strAGGVFUc4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVVNc", App.frmMBKEinzeldruck.strAGGVVNc, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVVNc2", App.frmMBKEinzeldruck.strAGGVVNc2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVVNc3", App.frmMBKEinzeldruck.strAGGVVNc3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVVNc4", App.frmMBKEinzeldruck.strAGGVVNc4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVSHc", App.frmMBKEinzeldruck.strAGGVSHc, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVSHc2", App.frmMBKEinzeldruck.strAGGVSHc2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVSHc3", App.frmMBKEinzeldruck.strAGGVSHc3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVSHc4", App.frmMBKEinzeldruck.strAGGVSHc4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVPLZc", App.frmMBKEinzeldruck.strAGGVPLZc, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVPLZc2", App.frmMBKEinzeldruck.strAGGVPLZc2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVPLZc3", App.frmMBKEinzeldruck.strAGGVPLZc3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVPLZc4", App.frmMBKEinzeldruck.strAGGVPLZc4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVOc", App.frmMBKEinzeldruck.strAGGVOc, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVOc2", App.frmMBKEinzeldruck.strAGGVOc2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVOc3", App.frmMBKEinzeldruck.strAGGVOc3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVOc4", App.frmMBKEinzeldruck.strAGGVOc4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVALc", App.frmMBKEinzeldruck.strAGGVALc, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVALc2", App.frmMBKEinzeldruck.strAGGVALc2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVALc3", App.frmMBKEinzeldruck.strAGGVALc3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVALc4", App.frmMBKEinzeldruck.strAGGVALc4, Const.LL_TEXT, ref locals.nRet);
						// d
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVFud", App.frmMBKEinzeldruck.strAGGVFUd, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVFud2", App.frmMBKEinzeldruck.strAGGVFUd2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVFud3", App.frmMBKEinzeldruck.strAGGVFUd3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVFud4", App.frmMBKEinzeldruck.strAGGVFUd4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVVNd", App.frmMBKEinzeldruck.strAGGVVNd, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVVNd2", App.frmMBKEinzeldruck.strAGGVVNd2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVVNd3", App.frmMBKEinzeldruck.strAGGVVNd3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVVNd4", App.frmMBKEinzeldruck.strAGGVVNd4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVSHd", App.frmMBKEinzeldruck.strAGGVSHd, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVSHd2", App.frmMBKEinzeldruck.strAGGVSHd2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVSHd3", App.frmMBKEinzeldruck.strAGGVSHd3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVSHd4", App.frmMBKEinzeldruck.strAGGVSHd4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVPLZd", App.frmMBKEinzeldruck.strAGGVPLZd, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVPLZd2", App.frmMBKEinzeldruck.strAGGVPLZd2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVPLZd3", App.frmMBKEinzeldruck.strAGGVPLZd3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVPLZd4", App.frmMBKEinzeldruck.strAGGVPLZd4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVOd", App.frmMBKEinzeldruck.strAGGVOd, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVOd2", App.frmMBKEinzeldruck.strAGGVOd2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVOd3", App.frmMBKEinzeldruck.strAGGVOd3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVOd4", App.frmMBKEinzeldruck.strAGGVOd4, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVALd", App.frmMBKEinzeldruck.strAGGVALd, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVALd2", App.frmMBKEinzeldruck.strAGGVALd2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVALd3", App.frmMBKEinzeldruck.strAGGVALd3, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PRE.AGGVALd4", App.frmMBKEinzeldruck.strAGGVALd4, Const.LL_TEXT, ref locals.nRet);
					}
				}
                else if (strPBericht == "Liste der Zahlungen für den VA.lst")  // 26.07.24 Ä2082 ###
                {
					// 26.07.23 Ä2082
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("BelegNr", Sal.NumberToStrX(App.frmMain.nBelNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Betrag", Sal.NumberToStrX(App.frmMain.nDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Buchtext", App.frmMain.strBuchText, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 17.10.17
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Proz.Nr", Sal.NumberToStrX(App.frmMBKEinzeldruck.dfPR1.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zeichen", Int.PalZust(App.frmMBKalender.nArztNr), Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 20.12.10 OTF366
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "1", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
					}
				}
				else if (strPBericht == "Halterkonto.lst") 
				{
					// 31.07.23 Ä2123
					// Call SqlImmedSel( 'SELECT aarztnr, aname1, aname2, astr, aort, aland,
					// 			abank, ablz, akonto, aeintr, atelpraxis, atelhandy, atelprivat, atelfax, aemail
					// 			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
					// 			:frmMain.strBank, :frmMain.strBLZ, :frmMain.strKonto, :frmMain.dtEintritt,
					// 			:frmMain.strTATelPraxis, :frmMain.strTATelHandy, :frmMain.strTATelPrivat, :frmMain.strTAFax, :frmMain.strTAEMail
					// 			FROM a
					// 			WHERE aarztnr = :frmRgSuchen.dfArztNr')
					// Set strSelect = 'SELECT hbarztnr, hbhalternr, hbrechnr, hbproznr, hbbuchdat, hbdm, hbbuchtext, hbrznr,
					// hti, hvn, hnn, hname2, hstr, hort
					// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.nProzNr, :frmMain.dtBuchDat, :frmMain.nDM, :frmMain.strBuchText, :frmMain.nRZNr,
					// :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt
					// FROM hb, h
					// WHERE ' || PalArztNr('hb', nArztNr, nArztNr2) || ' AND hbhalternr = :frmRgSuchen.dfHalterNr AND hbdeaktiv IS NULL
					// AND hbarztnr=hhalternr AND hbhalternr=hhalternr
					// ORDER BY hbproznr, hbbuchdat'
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("ArztNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Rechnung", Sal.NumberToStrX(App.frmMain.nRechNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("ProzNr", Sal.NumberToStrX(App.frmMain.nProzNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("RaZaNr", Sal.NumberToStrX(App.frmMain.nRZNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("EUR", Sal.NumberToStrX(App.frmMain.nDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("BuchText", App.frmMain.strBuchText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("BuchDatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.NN", App.frmMain.strTHNN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.VN", App.frmMain.strTHVN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmRgSuchen.dfArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmRgSuchen.dfArztNr.Number).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmRgSuchen.dfArztNr.Number, 0), Const.LL_TEXT, ref locals.nRet);
						if ((strPrn.Scan("PrintMachine") != -1 || strPrn.Scan("Tagespost") != -1) && !(bePost))  // 18.07.18 Ä1763 and not bePost
						{
							App.frmMain.axLL.LlDefineVariableExt("alsFax", "0", Const.LL_NUMERIC, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						}

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
						// Halter
						App.frmMain.axLL.LlDefineVariableExt("Halter.NN", App.frmMain.strTHNN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.VN", App.frmMain.strTHVN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmMain.strTHStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmMain.strTHOrt, Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "Brief BitteUmAusgleich.crd") 
				{
					if (locals.bAsField) 
					{
					}
					else
					{
						Int.SqlImmedSel(@"SELECT aarztnr, aname1, aname2, astr, aort, aland,
			abank, ablz, akonto, aeintr, atelpraxis, atelhandy, atelprivat, atelfax, apmemail
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
			:frmMain.strBank, :frmMain.strBLZ, :frmMain.strKonto, :frmMain.dtEintritt,
			:frmMain.strTATelPraxis, :frmMain.strTATelHandy, :frmMain.strTATelPrivat, :frmMain.strTAFax, :frmMain.strTAEMail
			FROM a
			WHERE aarztnr = :frmNegativerSaldo.tblNeg.colArztNr");
						App.frmMain.strTALand = Int.PalPruefeLC(App.frmMain.strTALand, 0);
						// Call axLL.LlDefineVariableExt( 'IBAN', 'DE13 2595 0130 0007 0065 73', LL_TEXT, nRet )

						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmNegativerSaldo.tblNeg.colArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmNegativerSaldo.tblNeg.colArztNr.Number).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmNegativerSaldo.tblNeg.colArztNr.Number, 0), Const.LL_TEXT, ref locals.nRet);
						if ((strPrn.Scan("PrintMachine") != -1 || strPrn.Scan("Tagespost") != -1) && !(bePost))  // 18.07.18 Ä1763 and not bePost
						{
							App.frmMain.axLL.LlDefineVariableExt("alsFax", "0", Const.LL_NUMERIC, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						}
						App.frmMain.axLL.LlDefineVariableExt("BelastungEUR", Sal.NumberToStrX(App.frmNegativerSaldo.tblNeg.colDM.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
                        // 25.01.24 ###
                        App.frmMain.axLL.LlDefineVariableExt("BelastungEURbrutto", Sal.NumberToStrX(App.frmNegativerSaldo.tblNeg.colDMBrutto.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
                        // Call axLL.LlDefineVariableExt( 'SaldoEUR', SalNumberToStrX( frmNegativerSaldo.tblNeg.colSaldo ,2), LL_NUMERIC, nRet )
                        App.frmMain.axLL.LlDefineVariableExt("SaldoEUR", Sal.NumberToStrX(App.frmNegativerSaldo.tblNeg.colSaldomitBelastung.Number, 2), Const.LL_NUMERIC, ref locals.nRet);

                        App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						// 03.09.21 Ä1968
						// Set strPDummy = frmMain.strTAN1
						// If frmMain.strTAN2 != ''
						// Set strPDummy = strPDummy || ' - ' || frmMain.strTAN2
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "TSK-Beihilfen-Erinnerung.lst") 
				{
					// Set strSelect = 'SELECT bereghalter, bename, bedate, beanzahl, bebetrag, aarztnr
					// INTO :frmMain.strRegNr, :frmMain.strTHN1, :frmMain.dtBuchDat, :frmMain.nAnz, :frmMain.nDM, :frmMain.nTANr
					// FROM be, a
					// WHERE beregarzt=aregnr AND bedate < SYSDATE - ' || strPSpezial || ' MONTHS
					// ORDER BY aarztnr'
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("ArztNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Betrag", Sal.NumberToStrX(App.frmMain.nDM, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.Name", App.frmMain.strTHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Anzahl", Sal.NumberToStrX(App.frmMain.nAnz, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("BuchDatum", Int.PalDateToStrJJJJMMTT(App.frmMain.dtBuchDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter.RegNr", App.frmMain.strRegNr, Const.LL_TEXT, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmMain.nTANr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);
						if ((strPrn.Scan("PrintMachine") != -1 || strPrn.Scan("Tagespost") != -1) && !(bePost))  // 18.07.18 Ä1763 and not bePost
						{
							App.frmMain.axLL.LlDefineVariableExt("alsFax", "0", Const.LL_NUMERIC, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						}

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", App.frmMain.strTAN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", App.frmMain.strTAN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", App.frmMain.strTAStr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMain.strTAOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", App.frmMain.strTALand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "TSK-Waisen Rückzahlung.lst") 
				{
					if (locals.bAsField) 
					{
						App.frmMain.axLL.LlDefineFieldExt("ArztNr", Sal.NumberToStrX(App.frmTSKWaisen.tblWaisen.colArztNr.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Halter", App.frmTSKWaisen.tblWaisen.colHaltername.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Betrag", Sal.NumberToStrX(App.frmTSKWaisen.tblWaisen.colBeihilfe.Number, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Anzahl", Sal.NumberToStrX(App.frmTSKWaisen.tblWaisen.colAnzahl.Number, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineFieldExt("Datum", Int.PalDateToStrJJJJMMTT(App.frmTSKWaisen.tblWaisen.colDate.DateTime), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", PalHolePMArzt(App.frmMain.nTANr).ToString(0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", PalHoleEMail(App.frmMain.nTANr, 0), Const.LL_TEXT, ref locals.nRet);
						if ((strPrn.Scan("PrintMachine") != -1 || strPrn.Scan("Tagespost") != -1) && !(bePost))  // 18.07.18 Ä1763 and not bePost
						{
							App.frmMain.axLL.LlDefineVariableExt("alsFax", "0", Const.LL_NUMERIC, ref locals.nRet);
						}
						else
						{
							App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						}

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", strN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", strN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", strS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", strO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", strLand, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 03.01.18
						App.frmMain.axLL.LlDefineVariableExt("Bericht.auf_blanco", "1", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
					}
				}
				else if (strPBericht == "DS-Antrag2023.crd" || strPBericht == "DS-Beschluss2023.crd") 
				{
					if (locals.bAsField) 
					{
					}
					else
					{
						App.frmMain.axLL.LlDefineVariableExt("Proz.Nr", Sal.NumberToStrX(App.frmMBKalender.nProzNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Gericht", App.frmMBKalender.strGerName, Const.LL_TEXT, ref locals.nRet);
						// 13.05.19 Ä1852
						App.frmMain.axLL.LlDefineVariableExt("GerichtStrasse", App.frmMBKalender.strGerStrasse, Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Zustellung.MB", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtZustMB), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zustellung.VB", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtZustVB), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Aktenzeichen", App.frmMBKalender.strAZ, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-HF", Sal.NumberToStrX(App.frmMBKalender.nDMHF, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Proz-HF", Sal.NumberToStrX(App.frmMBKalender.nProzHF, 1), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-Mahn", Sal.NumberToStrX(App.frmMBKalender.nDMMahn, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-MB", Sal.NumberToStrX(App.frmMBKalender.nDMMB, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-VB", Sal.NumberToStrX(App.frmMBKalender.nDMVB, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Proz-MBVB", Sal.NumberToStrX(App.frmMBKalender.nProzMBVB, 1), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-VA", Sal.NumberToStrX(App.frmMBKalender.nDMVA, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("EUR-Früher", Sal.NumberToStrX(App.frmMBKalender.nDMFrueh, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zins-HF", Sal.NumberToStrX(App.frmMBKalender.nZinsHF, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zins-MB", Sal.NumberToStrX(App.frmMBKalender.nZinsMB, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zins-LfdVZ", Sal.NumberToStrX(App.frmMBKalender.nLfdZinsVZ, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zins-Vorg", Sal.NumberToStrX(App.frmMBKalender.nVorgZinsen, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name", App.frmMBKalender.strHN1, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Name2", App.frmMBKalender.strHN2, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Strasse", App.frmMBKalender.strHS, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Ort", App.frmMBKalender.strHO, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.Anrede", App.frmMBKEinzeldruck.strHTitel, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.VN", strHVN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.NN", strHNN, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.GebDat", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtHGebDat), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.GebDat2", Int.PalDateToStrJJJJMMTT(App.frmMBKalender.dtHGebDat2), Const.LL_DATE_YYYYMMDD, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.GebDatText", App.frmMBKalender.strHGebDatText, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Halter.GebDat2Text", App.frmMBKalender.strHGebDat2Text, Const.LL_TEXT, ref locals.nRet);
						// 25.07.13 F1679 Zust.Benutzer statt akt.Benutzer
						App.frmMain.axLL.LlDefineVariableExt("Zeichen", Int.PalZust(App.frmMBKalender.nArztNr), Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("GerOrt", App.frmMBKalender.strGerOrt, Const.LL_TEXT, ref locals.nRet);
						// Call axLL.LlDefineVariableExt( 'Text', frmMBKalender.strVAText, LL_TEXT, nRet )
						// 19.02.08
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNr", Sal.NumberToStrX(App.frmMBKalender.nArztNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.MitgliedNrL", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.HalterNr", Sal.NumberToStrX(App.frmMBKalender.nHalterNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 06.05.13 Ä943
						App.frmMain.axLL.LlDefineVariableExt("PMEmail", "", Const.LL_TEXT, ref locals.nRet);

						App.frmMain.axLL.LlDefineVariableExt("Bericht.RechnungNr", "0", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name1", "Amtsgericht", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Name2", "Gerichtsvollzieherverteilungsstelle", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Strasse", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Ort", App.frmMBKalender.strGerOrt, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Land", "", Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.Deckblatt", "0", Const.LL_TEXT, ref locals.nRet);
						// 20.12.10 OTF366
						App.frmMain.axLL.LlDefineVariableExt("Auftrag", Sal.NumberToStrX(App.frmMBKalender.nVA0, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Bericht.anDritte", "1", Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("alsFax", "1", Const.LL_NUMERIC, ref locals.nRet);
						if (App.frmMBKalender.nZaDM == SalNumber.Null) 
						{
							App.frmMBKalender.nZaDM = 0;
						}
						if (App.frmMBKalender.nLfdZins == SalNumber.Null) 
						{
							App.frmMBKalender.nLfdZins = 0;
						}
						App.frmMain.axLL.LlDefineVariableExt("lfdZins", Sal.NumberToStrX(App.frmMBKalender.nLfdZins, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Zahlungen", (App.frmMBKalender.nZaDM * -1).ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						// 05.01.11
						App.frmMain.axLL.LlDefineVariableExt("Zusatzkosten", Sal.NumberToStrX(App.frmMBKalender.nZusatzkosten, 2), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("ZusatzkostenText", App.frmMBKalender.strZusatzkosten, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Extra", App.frmMBKalender.strExtra, Const.LL_TEXT, ref locals.nRet);
						// 22.12.11 Ä697
						App.frmMain.axLL.LlDefineVariableExt("RaZaNr", strRaZaNr, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("RaZaSaldo", nRZOffen.ToString(2), Const.LL_NUMERIC, ref locals.nRet);
						// 18.02.13 Ä877
						App.frmMain.axLL.LlDefineVariableExt("Tag", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDSnTag.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Nacht", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDSnNacht.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("TagNacht", App.frmMBKEinzeldruck.mlDSnTagNacht.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("elektron.MittAZ", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDSnelektrMittAZ.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("elektron.Postweg", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDSnelektrPostweg.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Anlagen.MittVollstrOrg", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDSnAnlagenMittVollstrOrg.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Anlagen.Anlage1", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDSnAnla1.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Anlagen.Anlage2", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDSnAnla2.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Anlagen.Text1", App.frmMBKEinzeldruck.dfDSnAnla1.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("Anlagen.Text2", App.frmMBKEinzeldruck.dfDSnAnla2.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("DandereOertlichkeit", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDSnDAndere.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("DandOert.Bez", App.frmMBKEinzeldruck.dfDsnDandereOertlichkeit.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("DandOert.Name", App.frmMBKEinzeldruck.dfDSnDOName.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("DandOert.Vorname", App.frmMBKEinzeldruck.dfDSnDOVorname.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("DandOert.Strasse", App.frmMBKEinzeldruck.dfDSnDOStr.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("DandOert.Hausnr", App.frmMBKEinzeldruck.dfDSnDOHausnr.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("DandOert.PLZ", App.frmMBKEinzeldruck.dfDSnDOPLZ.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("DandOert.Ort", App.frmMBKEinzeldruck.dfDSnDOOrt.Text, Const.LL_TEXT, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("DandOert.Gleichzeitig", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDSnDGleichzeitig.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("DandOert.Privat", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDSnDPrivat.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("DandOert.Andere", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDSnDAndere.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("DandOert.AndereBez", App.frmMBKEinzeldruck.dfDSnDAndere.Text, Const.LL_TEXT, ref locals.nRet);
                        // 23.05.24 F5113 ###
                        App.frmMain.axLL.LlDefineVariableExt("Versicherung", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDSnVers.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("Beschluss.DSAnordnung", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDSnBeschlDuch.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("Beschluss.DSUnd", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDSnBeschlUnd.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("Beschluss.DSNachtFeier", Sal.NumberToStrX(App.frmMBKEinzeldruck.cbDSnBeschlSonnFeier.Checked, 0), Const.LL_NUMERIC, ref locals.nRet);
                        App.frmMain.axLL.LlDefineVariableExt("E.Text", App.frmMBKEinzeldruck.dfDSnEText.Text, Const.LL_TEXT, ref locals.nRet);
                        // 03.09.21 Ä1968
                        App.frmMain.axLL.LlDefineVariableExt("Mitglied.Namenszeile", "", Const.LL_TEXT, ref locals.nRet);
						// 12.12.23
						Int.SqlImmedSel("SELECT prarztnr, prhalternr INTO :frmMain.nTANr, :frmMain.nTHNr FROM pr WHERE prnr = :frmMBKalender.nProzNr");
						App.frmMain.axLL.LlDefineVariableExt("ArztNr", Sal.NumberToStrX(App.frmMain.nTANr, 0), Const.LL_NUMERIC, ref locals.nRet);
						App.frmMain.axLL.LlDefineVariableExt("HalterNr", Sal.NumberToStrX(App.frmMain.nTHNr, 0), Const.LL_NUMERIC, ref locals.nRet);
						// 13.12.23 Ä2082
						App.frmMain.axLL.LlDefineVariableExt("GesamtOP", Sal.NumberToStrX(App.frmMBKEinzeldruck.nGesamtOP, 2), Const.LL_NUMERIC, ref locals.nRet);
					}
				}
				// 21.06.13 Ä902
				// 14.08.17
				// If Not bAsField
				// If strCustomerNumber != strCustomerNumberAlt
				// If hUebFile
				// Set strGUID = GetGUID(  )
				// If not SalFilePutStr( hUebFile, strGUID  || SalNumberToChar( 9 ) || strCustomerNumber || SalStrRepeatX( '0', 9 - SalStrLength( strCustomerNumber ) ))
				// Call SalMessageBeep( 0 )
				// Call SalStatusSetText( frmRgSuchen, 'Es kann nicht in die Printmachine-Kontrolldatei geschrieben werden!' )
				// Set strCustomerNumberAlt = strCustomerNumber
				// If hUebFile
				// Call axLL.LlDefineVariableExt( 'Bericht.GUID', strGUID, LL_TEXT, nRet )
				// Else
				// Call axLL.LlDefineVariableExt( 'Bericht.GUID', '', LL_TEXT, nRet )
				if (!(locals.bAsField)) 
				{
					if (strCustomerNumber != strCustomerNumberAlt) 
					{
						strGUID = Int.GetGUID();
						if (hUebFile) 
						{
							// 07.09.23 F5039
							strAHR = strCustomerNumber;
							if (bExtraDruck) 
							{
								if (strArztHalter != "") 
								{
									strAHR = strArztHalter + ((SalString)"0").Repeat(9 - strArztHalter.Length);
								}
							}
							// 19.05.22 Ä2019
							if (strArztHalter == "") 
							{
								strArztHalter = strCustomerNumber;
							}
							// 19.05.22 Ä2019 + strArztHalter
							// 07.09.23 F5039 strCustomerNumber -> strAHR
							if (!(hUebFile.PutString(strGUID + ((SalNumber)9).ToCharacter() + strAHR + ((SalString)"0").Repeat(9 - strCustomerNumber.Length) + ((SalNumber)9).ToCharacter() + strArztHalter + ((SalString)"0").Repeat(9 - strArztHalter.Length)))) 
							{
								Sal.MessageBeep(0);
								App.frmRgSuchen.SetStatusBarText("Es kann nicht in die Intensio-Kontrolldatei geschrieben werden!");
							}
							else
							{
								nPRIDArzt = Int.PalValNum(strCustomerNumber.Left(4));
								nPRIDHalter = Int.PalValNum(strCustomerNumber.Right(5));
								if (!(hSqlPRID.Execute())) 
								{
									Sal.MessageBox("Print-ID kann nicht in Datenbank gespeichert werden", "Execute der Print-IDs nicht möglich", (Sys.MB_Ok | Sys.MB_IconStop));
								}
							}
						}
						strCustomerNumberAlt = strCustomerNumber;
					}
					App.frmMain.axLL.LlDefineVariableExt("Bericht.GUID", strGUID, Const.LL_TEXT, ref locals.nRet);
				}
				// Call axLL.LlDefineVariableExt( 'Bericht.GUID', '', LL_TEXT, nRet )

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalHoleDaten()
		{
			#region Actions
			using (new SalContext(this))
			{
				// 06.01.14 Ä1005 RO
				// Call SqlCreateSession(hSession,'')
				// Call SqlCreateStatement (hSession, hSqlLlDruck)
				// Call SqlSetIsolarazationLevel(hSqlLlDruck,'RO')
				// Call SqlCreateStatement (hSession, hSqlLlDruck2)
				// Call SqlSetIsolationLevel(hSqlLlDruck2,'RO')
				// 15.10.07 F283
				strReset = "";
				App.frmMain.strTALand = "";
				// 03.09.21 Ä1968
				App.frmMain.strTAN1 = "";
				App.frmMain.strTAN2 = "";
				App.frmMain.strTAStr = "";
				App.frmMain.strTAOrt = "";
				// 23.10.20
				nRecordNo = -1;

				// 16.11.07
				// 26.04.10
				App.frmMain.axLL.LlPrintGetPrinterInfo(ref strPrn, ref strPort, ref nRet);
				// 27.08.18 Ä1766 + Bericht
				Int.PalLog("Druck " + strPBericht + " via " + strTargetFormat + ": " + strPBericht + " auf " + strPrn + " an " + strPort);
				// 27.08.18 Ä1767 + nePostArztNr
				nePostArztNr = 0;
				// 29.07.14 '1089 + Kommunikationsdaten
				if (strPBericht == "Mitglieder.lst") 
				{
					// 18.01.17 + anr2
					if (!(hSqlLlDruck.Prepare(@"SELECT aarztnr, aname1, aname2, astr, aort, aland,
			abank, ablz, akonto, aeintr, atelpraxis, atelhandy, atelprivat, atelfax, aemail, anr2
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
			:frmMain.strBank, :frmMain.strBLZ, :frmMain.strKonto, :frmMain.dtEintritt,
			:frmMain.strTATelPraxis, :frmMain.strTATelHandy, :frmMain.strTATelPrivat, :frmMain.strTAFax, :frmMain.strTAEMail, :frmMain.nTANr2
			FROM a
			WHERE aarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND aaustritt IS NULL AND agestorben IS NULL
			ORDER BY aarztnr"))) 
					{
						return false;
					}
					// If NOT SqlPrepareAndExecute(hSqlLlDruck,'SELECT aarztnr, aname1, aname2, astr, aort, aland,
					// 			abank, ablz, akonto, aeintr, atelpraxis, atelhandy, atelprivat, atelfax, aemail, anr2
					// 			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
					// 			:frmMain.strBank, :frmMain.strBLZ, :frmMain.strKonto, :frmMain.dtEintritt,
					// 			:frmMain.strTATelPraxis, :frmMain.strTATelHandy, :frmMain.strTATelPrivat, :frmMain.strTAFax, :frmMain.strTAEMail, :frmMain.nTANr2
					// 			FROM a
					// 			WHERE aarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
					// 			AND aaustritt IS NULL AND agestorben IS NULL AND akzpraxart<2
					// 			ORDER BY aarztnr')
					// Return FALSE
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Mitglieder.lbl") 
				{
					if (strPSpezial == "Kontoauszug") 
					{
						if (!(Int.SqlPrepar(hSqlLlDruck, @"SELECT aarztnr, asvname1, asvname2, asvstr, asvort, asvland
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand
			FROM a
			WHERE aarztnr in
			(SELECT DISTINCT tkarztnr from tk)
			ORDER BY aarztnr"))) 
						{
							return false;
						}
						else
						{
							if (!(hSqlLlDruck.Execute())) 
							{
								return false;
							}
							else
							{
								// Call SqlCommit(hSqlLlDruck)
								return true;
							}
						}
					}
					else if (strPSpezial == "Mahnungen") 
					{
						if (!(Int.SqlPrepar(hSqlLlDruck, @"SELECT aarztnr, asvname1, asvname2, asvstr, asvort, asvland
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand
			FROM a
			WHERE aarztnr in
			(SELECT DISTINCT mvarztnr from mv)
			ORDER BY aarztnr"))) 
						{
							return false;
						}
						else
						{
							if (!(hSqlLlDruck.Execute())) 
							{
								return false;
							}
							else
							{
								// Call SqlCommit(hSqlLlDruck)
								return true;
							}
						}
					}
					else
					{
						if (strPSpezial == "1" || strPSpezial == "0") 
						{
							if (strPSpezial == "1") 
							{
								Var.strDummy = "asvname1, asvname2, asvstr, asvort, asvland";
							}
							else
							{
								Var.strDummy = "aname1, aname2, astr, aort, aland";
							}
							if (!(Int.SqlPrepar(hSqlLlDruck, "SELECT aarztnr, " + Var.strDummy + @", aemail, atelfax
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.strTAEMail, :frmMain.strTAFax
			FROM a
			WHERE " + App.frmSerienbrief.strAuswahl + @" aaustritt IS NULL AND agestorben IS NULL
			ORDER BY aarztnr"))) 
							{
								return false;
							}
						}
						else
						{
							// 11.12.18 Ä1813
							Var.strDummy = "";
							if (strPSpezial == "RSSa") 
							{
								Var.strDummy = " arundschreiben = 1 AND ";
							}

							if (!(Int.SqlPrepar(hSqlLlDruck, @"SELECT aarztnr, asvname1, asvname2, asvstr, asvort, asvland
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand
			FROM a
			WHERE" + Var.strDummy + @" aarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND aaustritt IS NULL AND agestorben IS NULL
			ORDER BY aarztnr"))) 
							{
								return false;
							}
						}
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Halter.lbl" || strPBericht == "Halter14.lbl") 
				{
					if (strPSpezial == "RechProt") 
					{
						strSelect = @"SELECT harztnr, hhalternr, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
			INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand
			FROM le,h
			WHERE learztnr=harztnr AND lehalternr=hhalternr AND learztnr = :frmMain.nArztVon
			ORDER BY hnn, hvn";
					}
					else if (strPSpezial == "frmManAbr") 
					{
						// If NOT SqlPrepare(hSqlDisk,'SELECT harztnr, hhalternr, hti || hvn || \' \' || hnn, hname2, hstr, hort,hland
						// 			INTO :nTANr, :nTHNr, :strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strTHLand
						// 			FROM le,h
						// 			WHERE learztnr=harztnr AND lehalternr=hhalternr AND learztnr = :nArztNr
						// 			ORDER BY hnn, hvn')
						strSelect = @"SELECT harztnr, hhalternr, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
			INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand
			FROM le,h
			WHERE learztnr=harztnr AND lehalternr=hhalternr
			AND learztnr = :frmManAbr.nArztNr
			AND lebearbeiter = :frmManAbr.strBearbeiter
			AND lebearbdatum = :frmManAbr.dtBearbDatum
			ORDER BY hnn, hvn";
					}
					else
					{
						strSelect = @"SELECT harztnr, hhalternr, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
			INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand
			FROM h
			WHERE harztnr = " + Sal.NumberToStrX(App.frmMain.nArztVon, 0) + @"
			AND  hhalternr BETWEEN " + Sal.NumberToStrX(App.frmMain.nHalterVon, 0) + @"
			 AND " + Sal.NumberToStrX(App.frmMain.nHalterBis, 0) + @"
			AND hetikett<10 AND hdeaktiv IS NULL
			ORDER BY harztnr, hnn, hvn";
						// Set strSelect = 'SELECT harztnr, hhalternr, hti || hvn || \' \' || hnn, hname2, hstr, hort, hland
						// 			INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand
						// 			FROM h
						// 			WHERE harztnr = ' || SalNumberToStrX(nArztVon,0) || '
						// 			AND  hhalternr IN (select distinct rkhalternr from rk where rkarztnr=589)
						// 			ORDER BY harztnr, hnn, hvn'
					}
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Halter.lst") 
				{
					if (strPSpezial == "BEZ") 
					{
						Var.strDummy = @"SELECT harztnr, hhalternr, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland, hbezsigndat, hbeziban, hbezbic
			INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
			:frmMain.dtTHBEZSignDat, :frmMain.strTHBEZIBAN, :frmMain.strTHBEZBIC
			FROM h
			WHERE harztnr = " + Sal.NumberToStrX(App.frmMain.nArztVon, 0) + @"
			AND  hhalternr BETWEEN " + Sal.NumberToStrX(App.frmMain.nHalterVon, 0) + @"
			 AND " + Sal.NumberToStrX(App.frmMain.nHalterBis, 0) + @"
			AND hbezsigndat IS NOT NULL AND hdeaktiv IS NULL
			ORDER BY harztnr, hnn, hvn";
					}
					else
					{
						Var.strDummy = @"SELECT harztnr, hhalternr, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland, hbezsigndat, hbeziban, hbezbic
			INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
			:frmMain.dtTHBEZSignDat, :frmMain.strTHBEZIBAN, :frmMain.strTHBEZBIC
			FROM h
			WHERE harztnr = " + Sal.NumberToStrX(App.frmMain.nArztVon, 0) + @"
			AND  hhalternr BETWEEN " + Sal.NumberToStrX(App.frmMain.nHalterVon, 0) + @"
			 AND " + Sal.NumberToStrX(App.frmMain.nHalterBis, 0) + @"
			AND hetikett<10 AND hdeaktiv IS NULL
			ORDER BY harztnr, hnn, hvn";
					}
					if (!(Int.SqlPrepar(hSqlLlDruck, Var.strDummy))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Kontoauszug.lst" || strPBericht == "KontoauszugNF.lst") 
				{
					// 22.02.12 F1212
					nArztNrL = 0;
					App.frmMain.strTAN1 = "";
					App.frmMain.strTAN2 = "";
					App.frmMain.strTAOrt = "";
					App.frmMain.strTAStr = "";
					App.frmMain.strTALand = "";

					// 22.08.22 Ä2015 + tkdmmahn
					if (strPSpezial.Scan("Vormonate") != -1) 
					{
						dtDDErfDat = new SalDateTime(1900, 1, 1);
						this.dt1 = App.frmMain.dtDatVM;
						// 18.08.11 Ä620
						// 02.12.14 Ä104 + reverseversion
						// 04.10.23 Ä2134 + tkfall
						if (App.frmMain.dtDatVon != new SalDateTime(1900, 1, 1)) 
						{
							if (strPSpezial.Scan("ED") != -1) 
							{
								// 24.10.18 F3145 + ddemail
								strSelect = @"SELECT tkasa, tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
			tkadmabr, tkadmporto, tkadmzamahn, tkadmzazins, tkadmzamwst, tkatavst, tkarechdm,
			tkadmzaleis, tkadmzaarzn, tkaprozmwst, tksoll, tkhaben, dderfdat, tkareverseversion, ddemail,
			tkadmmahn, tkafall
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben, :dlgLlDruck.dtDDErfDat, :frmMain.nReverseVersion, :frmMain.strDDEMail,
			:frmMain.nMahnEUR, :frmMain.nTKFall
			FROM tka, dd
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tkadruckdatum BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
			AND ddcode = 'KA' AND ddarztnr=tkaarztnr AND tkadeaktiv IS NULL
			ORDER BY tkaarztnr, dderfdat, tkabeldat, tkahalternr";
							}
							else
							{
								strSelect = @"SELECT tkasa, tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
			tkadmabr, tkadmporto, tkadmzamahn, tkadmzazins, tkadmzamwst, tkatavst, tkarechdm,
			tkadmzaleis, tkadmzaarzn, tkaprozmwst, tksoll, tkhaben, tkareverseversion, tkadmmahn, tkafall
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben, :frmMain.nReverseVersion,
			:frmMain.nMahnEUR, :frmMain.nTKFall
			FROM tka
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tkadruckdatum BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis AND tkadeaktiv IS NULL
			ORDER BY tkaarztnr, tkabeldat, tkahalternr";
							}
							// 04.09.14 F2130 + + 15 DAYS
							Int.SqlImmedSel("SELECT MIN(vodatum) INTO :dlgLlDruck.dt1 FROM vo WHERE vodatum >= :frmMain.dtDatVon + 15 DAYS AND vodeaktiv IS NULL");
						}
						else
						{
							// Set strSelect ='SELECT tkasa, tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
							// 			tkadmabr, tkadmporto, tkadmzamahn, tkadmzazins, tkadmzamwst, tkatavst, tkarechdm,
							// 			tkadmzaleis, tkadmzaarzn, tkaprozmwst, tksoll, tkhaben
							// 			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
							// 			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
							// 			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben
							// 			FROM tka
							// 			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
							// 			AND tkadruckdatum = :frmMain.dtDatVM
							// 			ORDER BY tkaarztnr, tkabeldat'
							if (strPSpezial.Scan("ED") != -1) 
							{
								// 24.10.18 F3145 + ddemail
								strSelect = @"SELECT tkasa, tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
			tkadmabr, tkadmporto, tkadmzamahn, tkadmzazins, tkadmzamwst, tkatavst, tkarechdm,
			tkadmzaleis, tkadmzaarzn, tkaprozmwst, tksoll, tkhaben, dderfdat, tkareverseversion, ddemail,
			tkadmmahn, tkafall
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben, :dlgLlDruck.dtDDErfDat, :frmMain.nReverseVersion, :frmMain.strDDEMail,
			:frmMain.nMahnEUR, :frmMain.nTKFall
			FROM tka, dd
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tkadruckdatum = :frmMain.dtDatVM
			AND ddcode = 'KA' AND ddarztnr=tkaarztnr AND tkadeaktiv IS NULL
			ORDER BY tkaarztnr, dderfdat, tkabeldat, tkahalternr";
							}
							else
							{
								strSelect = @"SELECT tkasa, tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
			tkadmabr, tkadmporto, tkadmzamahn, tkadmzazins, tkadmzamwst, tkatavst, tkarechdm,
			tkadmzaleis, tkadmzaarzn, tkaprozmwst, tksoll, tkhaben, tkareverseversion,
			tkadmmahn, tkafall
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben, :frmMain.nReverseVersion ,
			:frmMain.nMahnEUR, :frmMain.nTKFall
			FROM tka
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tkadruckdatum = :frmMain.dtDatVM AND tkadeaktiv IS NULL
			ORDER BY tkaarztnr, tkabeldat, tkahalternr";
							}
						}
					}
					else
					{
						if (strPSpezial.Scan("ED") != -1) 
						{
							// 24.10.18 F3145 + ddemail
							strSelect = @"SELECT tksa, tkarztnr, tkhalternr, tkrechnr, tkbeldat, tkbuchtext,
			tkdmabr, tkdmporto, tkdmzamahn, tkdmzazins, tkdmzamwst, tktavst, tkrechdm,
			tkdmzaleis, tkdmzaarzn, tkprozmwst, tksoll, tkhaben, dderfdat, tkreverseversion, ddemail,
			tkdmmahn, tkfall
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben, :dlgLlDruck.dtDDErfDat, :frmMain.nReverseVersion, :frmMain.strDDEMail,
			:frmMain.nMahnEUR, :frmMain.nTKFall
			FROM tk, dd
			WHERE tkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND ddcode = 'KA' AND ddarztnr=tkarztnr
			ORDER BY tkarztnr, dderfdat, tkbeldat, tkhalternr";
						}
						else
						{
							strSelect = @"SELECT tksa, tkarztnr, tkhalternr, tkrechnr, tkbeldat, tkbuchtext,
			tkdmabr, tkdmporto, tkdmzamahn, tkdmzazins, tkdmzamwst, tktavst, tkrechdm,
			tkdmzaleis, tkdmzaarzn, tkprozmwst, tksoll, tkhaben, tkreverseversion, tkdmmahn, tkfall
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben, :frmMain.nReverseVersion,
			:frmMain.nMahnEUR, :frmMain.nTKFall
			FROM tk
			WHERE tkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			ORDER BY tkarztnr, tkbeldat, tkhalternr";
						}
					}
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							App.frmMain.nTANrAlt = 0;
							// 22.02.12 F1212
							App.frmMain.bNoFetch = false;

							return true;
						}
					}
				}
				else if (strPBericht == "Zahlungsliste.lst") 
				{
					// 22.02.12 F1212
					nArztNrL = 0;
					App.frmMain.strTAN1 = "";
					App.frmMain.strTAN2 = "";
					App.frmMain.strTAOrt = "";
					App.frmMain.strTAStr = "";
					App.frmMain.strTALand = "";

					if (strPSpezial.Scan("Vormonate") != -1) 
					{
						dtDDErfDat = new SalDateTime(1900, 1, 1);
						this.dt1 = App.frmMain.dtDatVM;
						// 18.08.11 Ä620
						// 02.12.14 Ä104 + reverseversion
						if (App.frmMain.dtDatVon != new SalDateTime(1900, 1, 1)) 
						{
							strSelect = @"SELECT tkasa, tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
			tkadmabr, tkadmporto, tkadmzamahn, tkadmzazins, tkadmzamwst, tkatavst, tkarechdm,
			tkadmzaleis, tkadmzaarzn, tkaprozmwst, tksoll, tkhaben, tkareverseversion
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben, :frmMain.nReverseVersion
			FROM tka
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tkadruckdatum BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
			AND tkasa = 1  AND tkadeaktiv IS NULL
			ORDER BY tkaarztnr, tkabeldat, tkahalternr";
						}
						else
						{
							strSelect = @"SELECT tkasa, tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
			tkadmabr, tkadmporto, tkadmzamahn, tkadmzazins, tkadmzamwst, tkatavst, tkarechdm,
			tkadmzaleis, tkadmzaarzn, tkaprozmwst, tksoll, tkhaben, tkareverseversion
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben, :frmMain.nReverseVersion
			FROM tka
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tkadruckdatum = :frmMain.dtDatVM
			AND tkasa = 1 AND tkadeaktiv IS NULL
			ORDER BY tkaarztnr, tkabeldat, tkahalternr";
						}
					}
					else
					{
						strSelect = @"SELECT tksa, tkarztnr, tkhalternr, tkrechnr, tkbeldat, tkbuchtext,
			tkdmabr, tkdmporto, tkdmzamahn, tkdmzazins, tkdmzamwst, tktavst, tkrechdm,
			tkdmzaleis, tkdmzaarzn, tkprozmwst, tksoll, tkhaben, tkreverseversion
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben, :frmMain.nReverseVersion
			FROM tk, a
			WHERE tkarztnr=aarztnr
			AND tkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tksa = 1 AND (@MID(adrucke, 7,1) = 'X' OR :frmMain.nImmer = 1)
			ORDER BY tkarztnr, tkbeldat, tkhalternr";
						// Set strSelect = strSelect || 'AND (@MID(adrucke, 0,1) = \'X\' OR :frmMain.nImmer = 1)
						// AND rkkzzahl<2 and (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)<>0 '
					}
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							App.frmMain.nTANrAlt = 0;

							return true;
						}
					}
				}
				else if (strPBericht == "Schuldsaldoermittlung.lst")  // 21.11.11 Ä659
				{
					if (App.frmMain.dtDatVM == SalDateTime.Null) 
					{
						strSelect = @"SELECT tkasa, tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
			tkadmabr, tkadmporto, tkadmzamahn, tkadmzazins, tkadmzamwst, tkatavst, tkarechdm,
			tkadmzaleis, tkadmzaarzn, tkaprozmwst, tksoll, tkhaben
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben
			FROM tka
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tkadruckdatum BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis AND tkadeaktiv IS NULL
			ORDER BY tkaarztnr, tkabeldat, tkabuchtext";
						// 16.09.14 F2130
						if (Sal.DateDay(App.frmMain.dtDatVon) == 1) 
						{
							App.frmMain.dtDatVon = App.frmMain.dtDatVon + 15;
						}
						if (Sal.DateDay(App.frmMain.dtDatBis) == 31) 
						{
							App.frmMain.dtDatBis = App.frmMain.dtDatBis + 15;
						}
						// 01.12.11
						// 04.09.14 F2130 + + 15 DAYS
						Int.SqlImmedSel("SELECT MIN(vodatum) INTO :dlgLlDruck.dt1 FROM vo WHERE vodatum >= :frmMain.dtDatVon + 15 DAYS AND vodeaktiv IS NULL");
					}
					else
					{
						strSelect = @"SELECT tkasa, tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
			tkadmabr, tkadmporto, tkadmzamahn, tkadmzazins, tkadmzamwst, tkatavst, tkarechdm,
			tkadmzaleis, tkadmzaarzn, tkaprozmwst, tksoll, tkhaben
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben
			FROM tka
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tkadruckdatum = :frmMain.dtDatVM AND tkadeaktiv IS NULL
			ORDER BY tkaarztnr, tkabeldat, tkabuchtext";
						dt1 = App.frmMain.dtDatVM;
					}
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							App.frmMain.nTANrAlt = 0;
							return true;
						}
					}
				}
				else if (strPBericht == "Kontomitteilung.lst") 
				{
					if (strPSpezial == "Vormonate") 
					{
						strSelect = @"SELECT tkasa, tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
			tkadmabr, tkadmporto, tkadmzamahn, tkadmzazins, tkadmzamwst, tkatavst, tkarechdm,
			tkadmzaleis, tkadmzaarzn, tkaprozmwst, tksoll, tkhaben, ROWID
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben, :frmMain.strROWID
			FROM tka
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis AND tkadeaktiv IS NULL
			AND tkadruckdatum = :frmMain.dtDatVM
			ORDER BY tkaarztnr, tkabeldat";
					}
					else
					{
						strSelect = @"SELECT tksa, tkarztnr, tkhalternr, tkrechnr, tkbeldat, tkbuchtext,
			tkdmabr, tkdmporto, tkdmzamahn, tkdmzazins, tkdmzamwst, tktavst, tkrechdm,
			tkdmzaleis, tkdmzaarzn, tkprozmwst, tksoll, tkhaben, ROWID
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben, :frmMain.strROWID
			FROM tk
			WHERE tkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis AND tkdruckdatum2 IS NULL
			ORDER BY tkarztnr, tkbeldat";
					}
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							App.frmMain.nTANrAlt = 0;
							return true;
						}
					}
				}
				else if (strPBericht == "TVN-Rechnungen.lst") 
				{
					App.frmMain.strLike = "+%";
					dtDDErfDat = new SalDateTime(1900, 1, 1);
					// 01.10.21 Ä1974 + AND tksa <> 4
					// 25.10.16 Ä1426 + austid2
					if (strPSpezial == "Vormonate") 
					{
						if (App.frmMain.dtDatVon != new SalDateTime(1900, 1, 1)) 
						{
							strSelect = @"SELECT tkasa, tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
			tkadmabr, tkadmporto, tkadmzamahn, tkadmzazins, tkadmzamwst, tkatavst, tkarechdm,
			tkadmzaleis, tkadmzaarzn, tkaprozmwst, tksoll, tkhaben
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben
			FROM tka
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tksoll<>0 AND tkabuchtext not like :frmMain.strLike AND tkasa <> 4
			AND tkadruckdatum BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis AND tkadeaktiv IS NULL
			ORDER BY tkaarztnr, tkabeldat, tkahalternr";
						}
						else
						{
							strSelect = @"SELECT tkaarztnr, aname1, aname2, astr, aort, aland, austid, austid2, tkabeldat, tkabuchtext, tkadmporto, tkatavst, (tkarechdm-tkatavst), tkaprozmwst, tksoll, tkadruckdatum
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.strTAUStID, :frmMain.strTAUStID2,
			:frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nDMPorto, :frmMain.nDMVorst, :frmMain.nDMRech, :frmMain.nProz, :frmMain.nSoll, :dtCurrentDate
			FROM tka, a
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tkadruckdatum = :frmMain.dtDatVM
			AND tksoll<>0 AND tkabuchtext not like :frmMain.strLike AND tkadeaktiv IS NULL AND tkasa <> 4
			AND tkaarztnr = aarztnr
			ORDER BY tkaarztnr, tkabeldat";
						}
					}
					else if (strPSpezial == "VormonateED") 
					{
						strSelect = @"SELECT tkaarztnr, aname1, aname2, astr, aort, aland, austid, austid2, tkabeldat, tkabuchtext, tkadmporto, tkatavst, (tkarechdm-tkatavst), tkaprozmwst, tksoll,
			tkadruckdatum, dderfdat
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.strTAUStID, :frmMain.strTAUStID2,
			:frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nDMPorto, :frmMain.nDMVorst, :frmMain.nDMRech, :frmMain.nProz, :frmMain.nSoll,
			:dtCurrentDate, :dlgLlDruck.dtDDErfDat
			FROM tka, a, dd
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tkadruckdatum = :frmMain.dtDatVM
			AND tksoll<>0 AND tkabuchtext not like :frmMain.strLike AND tkasa <> 4
			AND tkaarztnr = aarztnr AND tkaarztnr=ddarztnr AND ddcode = 'TR' AND tkadeaktiv IS NULL
			ORDER BY tkaarztnr, dderfdat, tkabeldat";
					}
					else if (strPSpezial == "ED") 
					{
						App.frmMain.dtCurrentDate = SalDateTime.Current;
						// 24.10.18 F3145 + ddemail
						strSelect = @"SELECT tkarztnr, aname1, aname2, astr, aort, aland, austid, austid2, tkbeldat, tkbuchtext, tkdmporto, tktavst, (tkrechdm-tktavst), tkprozmwst, tksoll, dderfdat, ddemail
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.strTAUStID, :frmMain.strTAUStID2,
			:frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nDMPorto, :frmMain.nDMVorst, :frmMain.nDMRech, :frmMain.nProz, :frmMain.nSoll, :dlgLlDruck.dtDDErfDat, :frmMain.strDDEMail
			FROM tk, a, dd
			WHERE tkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tksoll<>0 AND tkbuchtext not like :frmMain.strLike AND tksa <> 4
			AND tkarztnr = aarztnr AND tkarztnr=ddarztnr AND ddcode = 'TR'
			ORDER BY tkarztnr, dderfdat, tkbeldat";
					}
					else
					{
						App.frmMain.dtCurrentDate = SalDateTime.Current;
						strSelect = @"SELECT tkarztnr, aname1, aname2, astr, aort, aland, austid, austid2, tkbeldat, tkbuchtext, tkdmporto, tktavst, (tkrechdm-tktavst), tkprozmwst, tksoll
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.strTAUStID, :frmMain.strTAUStID2,
			:frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nDMPorto, :frmMain.nDMVorst, :frmMain.nDMRech, :frmMain.nProz, :frmMain.nSoll
			FROM tk, a
			WHERE tkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tksoll<>0 AND tkbuchtext not like :frmMain.strLike AND tksa <> 4
			AND tkarztnr = aarztnr
			ORDER BY tkarztnr, tkbeldat";
					}
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							App.frmMain.nTANrAlt = 0;
							return true;
						}
					}
				}
				else if (strPBericht == "zus.Meldung.lst") 
				{
					if (strPSpezial == "Vormonate") 
					{
						strSelect = @"SELECT aland, austid, austid2, tkaarztnr, aname1, aname2, astr, aort, sum( tksoll )
			INTO :dlgLlDruck.strOriLand, :frmMain.strTAUStID, :frmMain.strTAUStID2, :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt,
			:frmMain.nSoll
			FROM tka, a
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tkadruckdatum = :frmMain.dtDatVM
			AND tksoll<>0 AND tkareverse = 1 AND tkadeaktiv IS NULL
			AND tkaarztnr = aarztnr
			GROUP BY 1,2,3,4,5,6,7,8";
					}
					else
					{
						App.frmMain.dtCurrentDate = SalDateTime.Current;
						strSelect = @"SELECT aland, austid, austid2, tkarztnr, aname1, aname2, astr, aort, sum( tksoll )
			INTO :dlgLlDruck.strOriLand, :frmMain.strTAUStID, :frmMain.strTAUStID2, :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt,
			:frmMain.nSoll
			FROM tk, a
			WHERE tkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tksoll<>0 AND tkreverse = 1
			AND tkarztnr = aarztnr
			GROUP BY 1,2,3,4,5,6,7,8";
					}
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							App.frmMain.nTANrAlt = 0;
							return true;
						}
					}
				}
				else if (strPBericht == "AAB.lst" || strPBericht == "Bestandsbuch.lst" || strPBericht == "Impferinnerungen.lst") 
				{
					Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, aland
INTO :frmDiskEin.strTAN1, :frmDiskEin.strTAN2, :frmDiskEin.strTAStr, :frmDiskEin.strTAOrt, :frmMain.strTALand
from A where aarztnr=:frmDiskEin.dfTAA");
					// 04.01.16 Ä1257
					nLenAdd1 = 0;
					nLenAdd2 = 0;
					if (strPBericht == "AAB.lst" || strPBericht == "Bestandsbuch.lst") 
					{
						if (App.frmDiskEin.strHeader > "HDF") 
						{
							nLenAdd1 = 25;
							nLenAdd2 = 100;
						}
						if (App.frmDiskEin.strHeader >= "HDH") 
						{
							nLenAdd2 = 204;
						}
					}

					nCountRec = 100;
					nCountKunden = 0;

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalFileHandle temp1 = App.frmDiskEin.hDisk;
					SalBoolean temp2 = Sal.FileOpen(ref temp1, App.frmDiskEin.dfDateiName.Text, Sys.OF_Read);
					App.frmDiskEin.hDisk = temp1;

					if (temp2) 
					{
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "Deckblatt.crd") 
				{
					App.frmMain.strLike = "+%";
					App.frmMain.dtCurrentDate = SalDateTime.Current;
					if (!(Int.SqlPrepar(hSqlLlDruck, @"SELECT aarztnr, akaname1, akaname2, akastr, akaort, akaland
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand
			FROM a
			WHERE aarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND (akaname1 IS NOT NULL AND akastr IS NOT NULL AND akaort IS NOT NULL)
			ORDER BY aarztnr"))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Saldenliste.lst" || strPBericht == "KA-Statusliste.lst") 
				{
					if (strPBericht == "Saldenliste.lst") 
					{
						if (!(Int.SqlPrepar(hSqlLlDruck, @"SELECT aarztnr, aname1, aname2, astr, aort, aland,  akzpraxart,
		avorrech, avorsoll, avorhaben, avorvst, avormwst
		INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
		:frmMain.nKZPraxArt,
		:frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
		:frmMain.nVorVSt, :frmMain.nVorMwSt
		FROM A
		WHERE aarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis "))) 
						{
							return false;
						}
						else
						{
							if (!(hSqlLlDruck.Execute())) 
							{
								return false;
							}
							else
							{
								nCountRec = hSqlLlDruck.GetResultSetCount();
								App.frmMain.nDMUeberw = 0;
								App.frmMain.nDMmitVorstV = 0;
								App.frmMain.nDMmitVorstS = 0;
								App.frmMain.bNoFetch = false;
								return true;
							}
						}
					}
					else if (strPBericht == "KA-Statusliste.lst") 
					{
						// 25.02.11 Ä487 +  WHERE avorsoll <> 0 OR avorhaben <> 0
						if (!(Int.SqlPrepar(hSqlLlDruck, @"SELECT aarztnr, aname1, aname2, astr, aort, aland,  akzpraxart,
		avorrech, avorsoll, avorhaben, avorvst, avormwst
		INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
		:frmMain.nKZPraxArt,
		:frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
		:frmMain.nVorVSt, :frmMain.nVorMwSt
		FROM A WHERE avorsoll <> 0 OR avorhaben <> 0"))) 
						{
							return false;
						}
						// 03.01.12
						// If NOT SqlPrepare(hSqlLlDruck,'SELECT aarztnr, aname1, aname2, astr, aort, aland, akzpraxart,
						// 		SUM(tkarechdm), SUM(tksoll), SUM(tkhaben), SUM(tkatavst), SUM(tkadmzamwst)
						// 		INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
						// 		:frmMain.nKZPraxArt,
						// 		:frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
						// 		:frmMain.nVorVSt, :frmMain.nVorMwSt
						// 		FROM A, TKA WHERE tkaarztnr=aarztnr AND tkabeldat>=SYSDATE - 1 YEAR GROUP BY 1,2,3,4,5,6,7 HAVING sum(tksoll)<>0 OR SUM(tkhaben)<>0')
						// Return FALSE
						else
						{
							if (!(hSqlLlDruck.Execute())) 
							{
								return false;
							}
							else
							{
								nCountRec = hSqlLlDruck.GetResultSetCount();
								App.frmMain.nDMUeberw = 0;
								App.frmMain.nDMmitVorstV = 0;
								App.frmMain.nDMmitVorstS = 0;
								App.frmMain.bNoFetch = false;
								return true;
							}
						}
					}
				}
				else if (strPBericht == "Saldenmitteilung.crd") 
				{
					// 16.04.21 Ä1955 entfernt: AND aarztnr not in (SELECT tkaarztnr FROM tka WHERE tkabeldat>=SYSDATE - 1 YEAR and tkhaben>0 AND tkadeaktiv IS NULL)
					if (!(Int.SqlPrepar(hSqlLlDruck, @"SELECT aarztnr, aname1, aname2, astr, aort, aland,  akzpraxart,
		avorrech, avorsoll, avorhaben, avorvst, avormwst, avorsoll, avorhaben
		INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
		:frmMain.nKZPraxArt,
		:frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
		:frmMain.nVorVSt, :frmMain.nVorMwSt,
		:frmMain.nVorSoll, :frmMain.nVorHaben
		FROM A
		WHERE avorsoll-avorhaben>0 AND (aeintr is null or aeintr < SYSDATE - 1 YEAR)
		AND aarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis "))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				// Else If strPBericht = 'Pegasus-Mahnung.crd'		! 27.06.11 Ä592
				// If NOT SqlPrepare(hSqlLlDruck,'SELECT aarztnr, aname1, aname2, astr, aort, aland,  akzpraxart,
				// 		avorrech, avorsoll, avorhaben, avorvst, avormwst, avorsoll, avorhaben
				// 		INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
				// 		:frmMain.nKZPraxArt,
				// 		:frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
				// 		:frmMain.nVorVSt, :frmMain.nVorMwSt,
				// 		:frmMain.nVorSoll, :frmMain.nVorHaben
				// 		FROM A
				// 		WHERE avorsoll-avorhaben>200 AND (aeintr is null or aeintr < SYSDATE - 1 YEAR) AND aitbrief=1')
				// Return FALSE
				// Else
				// If NOT SqlExecute(hSqlLlDruck)
				// Return FALSE
				// Else
				// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
				// Return TRUE
				else if (strPBericht == "Ausbuchungen.lst") 
				{
					dtDDErfDat = new SalDateTime(1900, 1, 1);
					// 03.01.12
					if (strPSpezial.Scan("Vormonate") != -1) 
					{
						dtDDErfDat = new SalDateTime(1900, 1, 1);
						// 21.10.14 Ä948 + MwSt
						// 18.08.11 Ä620
						if (App.frmMain.dtDatVon != new SalDateTime(1900, 1, 1)) 
						{
							if (strPSpezial.Scan("ED") != -1) 
							{
								// 24.10.18 F3145 + ddemail
								// 07.10.22 Ä2015 + tkdmmahn / tkadmmahn
								// 14.10.22 tkdmabr -> (tkadmabr+tkdmmahn)
								strSelect = @"SELECT tkasa, tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
			tkadmabr, dderfdat, tkatavst, tkaprozmwst, ddemail, tkadmmahn
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :dlgLlDruck.dtDDErfDat, :frmMain.nDMVorst, :frmMain.nProzMwSt, :frmMain.strDDEMail, :frmMain.nDMMahn
			FROM tka, dd
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tkadruckdatum BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
			AND ((tkadmabr+tkdammahn) < 0 OR tkabuchtext LIKE 'AusbRück%'  OR tkabuchtext LIKE 'Ausbuchung rück%' OR tkasa=3)
			AND tkabuchtext NOT LIKE 'GEBV%' AND tkabuchtext NOT LIKE 'Gebühren von%' AND tkadeaktiv IS NULL
			AND ddcode = 'AU' AND ddarztnr=tkaarztnr
			ORDER BY tkaarztnr, dderfdat, tkabeldat, tkahalternr";
							}
							else
							{
								strSelect = @"SELECT tkasa, tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
			tkadmabr, tkatavst, tkaprozmwst, tkadmmahn
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMVorst, :frmMain.nProzMwSt, :frmMain.nDMMahn
			FROM tka
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND ((tkadmabr+tkadmmahn) < 0 OR tkabuchtext LIKE 'AusbRück%'  OR tkabuchtext LIKE 'Ausbuchung rück%' OR tkasa=3)
			AND tkabuchtext NOT LIKE 'GEBV%'  AND tkabuchtext NOT LIKE 'Gebühren von%' AND tkadeaktiv IS NULL
			AND tkadruckdatum BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
			ORDER BY tkaarztnr, tkabeldat, tkahalternr";
							}
						}
						else
						{
							if (strPSpezial.Scan("ED") != -1) 
							{
								// 24.10.18 F3145 + ddemail
								strSelect = @"SELECT tkasa, tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
			tkadmabr, dderfdat, tkatavst, tkaprozmwst, ddemail, tkadmmahn
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :dlgLlDruck.dtDDErfDat, :frmMain.nDMVorst, :frmMain.nProzMwSt, :frmMain.strDDEMail, :frmMain.nDMMahn
			FROM tka, dd
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tkadruckdatum = :frmMain.dtDatVM
			AND ((tkadmabr+tkadmmahn) < 0 OR tkabuchtext LIKE 'AusbRück%'  OR tkabuchtext LIKE 'Ausbuchung rück%' OR tkasa=3)
			AND tkabuchtext NOT LIKE 'GEBV%'  AND tkabuchtext NOT LIKE 'Gebühren von%' AND tkadeaktiv IS NULL
			AND ddcode = 'AU' AND ddarztnr=tkaarztnr
			ORDER BY tkaarztnr, dderfdat, tkabeldat, tkahalternr";
							}
							else
							{
								strSelect = @"SELECT tkasa, tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
			tkadmabr, tkatavst, tkaprozmwst, tkadmmahn
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMVorst, :frmMain.nProzMwSt, :frmMain.nDMMahn
			FROM tka
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND ((tkadmabr+tkadmmahn) < 0 OR tkabuchtext LIKE 'AusbRück%'  OR tkabuchtext LIKE 'Ausbuchung rück%' OR tkasa=3)
			AND tkabuchtext NOT LIKE 'GEBV%'  AND tkabuchtext NOT LIKE 'Gebühren von%' AND tkadeaktiv IS NULL
			AND tkadruckdatum = :frmMain.dtDatVM
			ORDER BY tkaarztnr, tkabeldat, tkahalternr";
							}
						}
					}
					else
					{
						if (strPSpezial.Scan("ED") != -1) 
						{
							// 24.10.18 F3145 + ddemail
							// 02.02.22 +, dderfdat
							strSelect = @"SELECT tkarztnr, tkhalternr, tkrechnr, tkbeldat, tkbuchtext,
			tkdmabr, dderfdat, tktavst, tkprozmwst, ddemail, tkdmmahn
			INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :dlgLlDruck.dtDDErfDat, :frmMain.nDMVorst, :frmMain.nProzMwSt, :frmMain.strDDEMail, :frmMain.nDMMahn
			FROM tk, dd
			WHERE tkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND ((tkdmabr+tkdmmahn) < 0 OR tkbuchtext LIKE 'AusbRück%'  OR tkbuchtext LIKE 'Ausbuchung rück%' OR tksa=3)
			AND tkbuchtext NOT LIKE 'GEBV%' AND tkbuchtext NOT LIKE 'Gebühren von%'
			AND ddcode = 'AU' AND ddarztnr=tkarztnr
			ORDER BY tkarztnr, dderfdat, tkbeldat";
						}
						else
						{
							strSelect = @"SELECT tkarztnr, tkhalternr, tkrechnr, tkbeldat, tkbuchtext,
			tkdmabr, tktavst, tkprozmwst, tkdmmahn
			INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMVorst, :frmMain.nProzMwSt, :frmMain.nDMMahn
			FROM tk
			WHERE tkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND ((tkdmabr+tkdmmahn) < 0 OR tkbuchtext LIKE 'AusbRück%' OR tkbuchtext LIKE 'Ausbuchung rück%' OR tksa=3)
			AND tkbuchtext NOT LIKE 'GEBV%' AND tkbuchtext NOT LIKE 'Gebühren von%'
			ORDER BY tkarztnr, tkbeldat";
							// Set strSelect = 'SELECT tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
							// 			tkadmabr
							// 			INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
							// 			:frmMain.nDMRech
							// 			FROM tka
							// 			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
							// 			AND tkadruckdatum = :frmMain.dtDatVM
							// 			AND (tkadmabr < 0 OR tkabuchtext LIKE \'AusbRück%\' OR tkasa=3) AND tkabuchtext NOT LIKE \'GEBV%\'
							// 			ORDER BY tkaarztnr, tkabeldat'
						}
					}
					// 17.12.07 F318: + OR tksa=3
					// 20.12.07 + AND tkbuchtext NOT LIKE \'GEBV%\'
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Erinnerungsliste.lst") 
				{
					// 16.10.07 Ä170 + tkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis AND
					strSelect = @"SELECT elarztnr, elhalternr, elrechnr, elzeichen,
eldatum, eltext, hti || hvn || ' ' || hnn, hname2, hstr, hland || ' ' || hort
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.strVon,
:frmMain.dtDatum, :frmMain.strText, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt
FROM el, h
WHERE elarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis AND elerledigt = 'N' AND hdeaktiv IS NULL  ";
					// If strDummy != ''	! 10.03.15 raus
					// Set strSelect = strSelect || '
					// AND elzeichen = :strDummy '
					// 14.03.22 Ä1910
					if (App.frmMain.strMitarb != "") 
					{
						strSelect = strSelect + @"
AND elzeichen = :frmMain.strMitarb ";
					}

					strSelect = strSelect + @"
AND elarztnr=harztnr(+) AND elhalternr=hhalternr(+)
ORDER BY elarztnr, eldatum ";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				// Else If strPBericht = 'MB-Bezahlt.lst'
				// Set frmMain.dtCurrentDate = SalDateCurrent()
				// Set strSelect = 'SELECT prnr, prarztnr, prhalternr,
				// praz, prgername, prdma, prdmb, prdmc, prdmhf, prbezahlt,
				// hti || hvn || \' \' || hnn, hname2, hstr, hort, hland,
				// anr2, aname1, aname2, astr, aort, pr.ROWID
				// INTO :frmMain.nProzNr, :frmMain.nTANr, :frmMain.nTHNr,
				// :frmMain.strAZ, :frmMain.strGerName, :frmMain.nDMa, :frmMain.nDMb, :frmMain.nDMc, :frmMain.nDMHF, :frmMain.dtBezahlt,
				// :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand, :frmMain.nTANr2, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strROWID
				// FROM pr, h, a
				// WHERE prarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
				// AND prdruckdatum IS NULL AND prbezahlt IS NOT NULL
				// AND prarztnr = aarztnr AND prarztnr = harztnr AND prhalternr = hhalternr
				// ORDER BY prarztnr'
				// If NOT SqlPrepare(hSqlLlDruck,strSelect)
				// Return FALSE
				// Else
				// If NOT SqlExecute(hSqlLlDruck)
				// Return FALSE
				// Else
				// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
				// Return TRUE
				else if (strPBericht == "Negativliste.lst") 
				{
					strSelect = @"SELECT hort, rkarztnr, rkhalternr
			INTO :dlgLlDruck.strO, :frmMain.nTANr, :frmMain.nTHNr
			FROM h, rk
			WHERE rkmahnstufe=9 and rkrechdat >= SYSDATE - 1095 AND rkdeaktiv IS NULL AND hdeaktiv IS NULL
			AND hort LIKE :frmMain.strPLZ
			AND rkarztnr=harztnr AND rkhalternr=hhalternr
			GROUP BY 1,2,3";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "MB-Kosten.lst") 
				{
					if (App.frmMain.strabc == "a+c") 
					{
						strSelect = @"SELECT mkarztnr, mkhalternr,mkrechnr,
mkbuchdat, mkdma, mkdmb, mkdmc, ROWID
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr,
:frmMain.dtBuchDat, :frmMain.nDMa, :frmMain.nDMb, :frmMain.nDMc, :frmMain.strROWID
FROM mk
WHERE mktyp = :frmMain.strLA AND (mkdma+mkdmc) <> 0 AND mkdruck IS NULL
ORDER BY mkrechnr";
					}
					else
					{
						strSelect = @"SELECT mkarztnr, mkhalternr,mkrechnr,
mkbuchdat, mkdma, mkdmb, mkdmc, ROWID
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr,
:frmMain.dtBuchDat, :frmMain.nDMa, :frmMain.nDMb, :frmMain.nDMc, :frmMain.strROWID
FROM mk
WHERE mktyp = :frmMain.strLA AND mkdmb <> 0 AND mkdruck IS NULL
ORDER BY mkrechnr";
					}
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Verjährungen.lst") 
				{
					// 26.11.07 F307 hinzugefügt: , :frmMain.strTAN2	29.01.08 A194 astr, aort hinzugefügt
					strSelect = @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkbuchtext,
(rkdmleis+rkdmarzn+rkmbdmopl), rkdmmahn, rkdmzins,   (rkzaleis+rkzaarzn+rkmbzaopl), rkzamahn, rkzazins,
rkmahnstufe, rkmahnltzt, rkverjaehr, aname1, aname2, astr, aort, aland, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
:frmMain.nDMRech, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRech, :frmMain.nZaMahn, :frmMain.nZaZins,
:frmMain.nMS, :frmMain.dtMahnDat, :frmMain.dtVerjDat, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
:frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand
FROM rk,a,h
WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND rkkzzahl<2 AND rkmahnstufe<>9 and rkverjaehr <=  :frmMain.dtDatBis
AND rkrechnr<999990 AND (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)>0 AND rkdeaktiv IS NULL AND hdeaktiv IS NULL
AND rkarztnr=aarztnr AND rkarztnr=harztnr AND rkhalternr=hhalternr
";
					// 04.09.12 Ä815
					if (strPSpezial == "DE") 
					{
						strSelect = strSelect + @"AND (aland = 'DE' OR aland IS NULL)
ORDER BY rkarztnr, hnn, hhalternr, rkrechnr";
					}
					else
					{
						strSelect = strSelect + @"AND aland <> 'DE' AND aland IS NOT NULL
ORDER BY rkarztnr, hnn, hhalternr, rkrechnr";
					}

					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Ärzte mit Verjährungen.lst") 
				{
					strSelect = @"SELECT DISTINCT rkarztnr, aname1, aname2, astr, aort, aland
INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand
FROM rk,a
WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND rkkzzahl<2 AND rkmahnstufe<>9 and rkverjaehr <=  :frmMain.dtDatBis
AND rkrechnr<999990 AND (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)>0
AND rkarztnr=aarztnr AND rkdeaktiv IS NULL";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "BankClearing.lst") 
				{
					// 18.06.15 Ä1215 + vz5, vz6
					// 15.02.16 Ä1342 + bcrznr
					// 13.11.17 F3045 + bcvwz
					if (App.frmMain.strabc == "NG") 
					{
						App.frmMain.strGebuchtVZ = "gebucht / VZ";
						strSelect = @"SELECT bcarztnr, bchalternr, bcrechnr,
bczahldm, bcbuchdm, bcbuchdat, bcrestl, bcresta, bcrestm, bcrestz, bckonto, bcergebnis,
bcauszug, bcref, bctextschl, bcvz1, bcvz2, bcauftr1, bcauftr2, bcvz3, bcvz4, bcvz5, bcvz6, bcrznr, bcvwz
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr,
:frmMain.nZahlDM, :frmMain.nBuchDM, :frmMain.dtBuchDat, :frmMain.nRestL, :frmMain.nRestA, :frmMain.nRestM, :frmMain.nRestZ, :frmMain.strKonto, :frmMain.strErgebnis,
:frmMain.nAuszug, :frmMain.strRef, :frmMain.nTextSchl, :frmMain.strVZ1, :frmMain.strVZ2, :frmMain.strAuftr1, :frmMain.strAuftr2, :frmMain.strVZ3, :frmMain.strVZ4, :frmMain.strVZ5, :frmMain.strVZ6,
:frmMain.nRZNr, :frmMain.lsVWZ
FROM bc
WHERE bcergebnis<>:frmMain.strGebuchtVZ
ORDER BY bcauszug, bcergebnis, bcarztnr, bcrechnr";
					}
					else
					{
						strSelect = @"SELECT bcarztnr, bchalternr, bcrechnr,
bczahldm, bcbuchdm, bcbuchdat, bcrestl, bcresta, bcrestm, bcrestz, bckonto, bcergebnis,
bcauszug, bcref, bctextschl, bcvz1, bcvz2, bcauftr1, bcauftr2, bcvz3, bcvz4, bcvz5, bcvz6, bcrznr, bcvwz
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr,
:frmMain.nZahlDM, :frmMain.nBuchDM, :frmMain.dtBuchDat, :frmMain.nRestL, :frmMain.nRestA, :frmMain.nRestM, :frmMain.nRestZ, :frmMain.strKonto, :frmMain.strErgebnis,
:frmMain.nAuszug, :frmMain.strRef, :frmMain.nTextSchl, :frmMain.strVZ1, :frmMain.strVZ2, :frmMain.strAuftr1, :frmMain.strAuftr2, :frmMain.strVZ3, :frmMain.strVZ4, :frmMain.strVZ5, :frmMain.strVZ6,
:frmMain.nRZNr, :frmMain.lsVWZ
FROM bc ORDER BY bcauszug, bcarztnr, bcrechnr";
					}
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Batchprotokoll.lst") 
				{
					// 20.11.07 Ä178 Belegnummer hinzugefügt
					strSelect = @"SELECT bparztnr, bphalternr, bprechnr,
bpzahldm, bpbuchdm, bpbuchdat, bprestl, bpresta, bprestm, bprestz, bpkonto, bpergebnis, bpbelnr
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr,
:frmMain.nZahlDM, :frmMain.nBuchDM, :frmMain.dtBuchDat, :frmMain.nRestL, :frmMain.nRestA, :frmMain.nRestM, :frmMain.nRestZ, :frmMain.strKonto, :frmMain.strErgebnis, :frmMain.nBelNr
FROM bp ORDER BY bparztnr, bprechnr";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				// Else If strPBericht = 'Bankeinzüge.lst'
				// 22.11.06 F86
				// Set frmMain.dtCurrentDate = SalDateCurrent()
				// Set strSelect = 'SELECT bezarztnr, bezhalternr, bezrechnr, bezbearbdatum, bezdm,
				// hti || hvn || \' \' || hnn, hname2, hstr, hland, hort, hblz, hkonto, bez.ROWID
				// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtDatum, :frmMain.nZMDM, :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHLand, :frmMain.strTHOrt, :frmMain.strBLZ, :frmMain.strKonto, :frmMain.strROWID
				// FROM bez, h
				// WHERE (bezerldat IS NULL Or bezerldat ='1900-1-1')
				// AND bezarztnr = harztnr AND bezhalternr = hhalternr
				// ORDER BY bezarztnr'
				// If NOT SqlPrepar(hSqlLlDruck,strSelect)
				// Return FALSE
				// Else
				// If NOT SqlExecute(hSqlLlDruck)
				// Return FALSE
				// Else
				// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
				// Return TRUE
				else if (strPBericht == "Rückerstattungen.lst") 
				{
					strSelect = @"SELECT rearztnr, aname1, regebdm, reuebersch, regesgebdm, redm, rejahr, rezahldat
INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.nGebDM, :frmMain.nUebersch, :frmMain.nGesGebDM, :frmMain.nDM, :frmMain.nJahr, :frmMain.dtZahlDat
FROM re, a
WHERE rearztnr = aarztnr
ORDER BY rearztnr, rejahr";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Buchungsbelege.lst") 
				{
					App.frmMain.dtCurrentDate = SalDateTime.Current;
					strSelect = @"SELECT bubarztnr, bubbearbdatum, bubsoll, bubhaben, bubdm, bubbuchtext, bub.ROWID
INTO :frmMain.nTANr, :frmMain.dtDatum, :frmMain.nSoll, :frmMain.nHaben, :frmMain.nDM, :frmMain.strBuchText, :frmMain.strROWID
FROM bub
WHERE buberldat IS NULL
ORDER BY bubhaben, bubarztnr, bubbearbdatum";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "OP-Liste.lst") 
				{
					App.frmMain.strTAN1 = "";
					App.frmMain.strTAN2 = "";
					App.frmMain.strTAStr = "";
					App.frmMain.strTAOrt = "";
					App.frmMain.strTALand = "";
					App.frmMain.nTANrAlt = 0;
					App.frmMain.nTHNrAlt = 0;
					dtDDErfDat = new SalDateTime(1900, 1, 1);
					dtOPDatum = SalDateTime.Null;
					// 04.09.17 +
					// AND rkrechdat BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
					if (strPSpezial == "ED") 
					{
						// 24.10.18 F3145 + ddemail
						strSelect = @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkbuchtext,
(rkdmleis+rkmbdmopl), rkdmarzn, rkdmmahn, rkdmzins,    (rkzaleis+rkmbzaopl), rkzaarzn, rkzamahn, rkzazins,
rkmahnstufe, rkmahnltzt, aname1, aname2, astr, aort, aland, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland, dderfdat, ddemail
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
:frmMain.nDMRechL, :frmMain.nDMRechA, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRechL, :frmMain.nZaRechA, :frmMain.nZaMahn, :frmMain.nZaZins,
:frmMain.nMS, :frmMain.dtMahnDat, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
:frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand, :dlgLlDruck.dtDDErfDat, :frmMain.strDDEMail
FROM rk,a,h, dd
WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND rkrechdat BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
AND ddcode = 'OP' AND ddarztnr=rkarztnr AND rkdeaktiv IS NULL AND hdeaktiv IS NULL ";
					}
					else if (strPSpezial == "RA")  // 02.01.18 Ä1673
					{
						// 18.01.22 Ä1987 + , raan4, raan5
						strSelect = @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkbuchtext,
(rkdmleis+rkmbdmopl), rkdmarzn, rkdmmahn, rkdmzins,    (rkzaleis+rkmbzaopl), rkzaarzn, rkzamahn, rkzazins,
rkmahnstufe, rkmahnltzt, aname1, aname2, astr, aort, aland, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland,
radatum, razeichen, raan1, raan2, raan3, raan4, raan5
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
:frmMain.nDMRechL, :frmMain.nDMRechA, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRechL, :frmMain.nZaRechA, :frmMain.nZaMahn, :frmMain.nZaZins,
:frmMain.nMS, :frmMain.dtMahnDat, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
:frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
:frmMain.dtRADatum, :frmMain.strRAZeichen, :frmMain.strRAN1, :frmMain.strRAN2, :frmMain.strRAN3, :frmMain.strRAN4, :frmMain.strRAN5
FROM rk,a,h,ra
WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND rkrechdat BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
AND rkarztnr=raarztnr AND rkhalternr=rahalternr AND rkrechnr=rarechnr AND rkdeaktiv IS NULL AND hdeaktiv IS NULL ";
					}
					else if (strPSpezial.Left(6) == "Datum:") 
					{
						dtOPDatum = strPSpezial.Mid(6, 255).ToDate();
						strSelect = @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkbuchtext,
(rkdmleis+rkmbdmopl), rkdmarzn, rkdmmahn, rkdmzins,    (rkzaleis+rkmbzaopl), rkzaarzn, rkzamahn, rkzazins,
rkmahnstufe, rkmahnltzt, aname1, aname2, astr, aort, aland, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
:frmMain.nDMRechL, :frmMain.nDMRechA, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRechL, :frmMain.nZaRechA, :frmMain.nZaMahn, :frmMain.nZaZins,
:frmMain.nMS, :frmMain.dtMahnDat, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
:frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand
FROM rk,a,h
WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND rkrechdat < :dlgLlDruck.dtOPDatum
AND rkdeaktiv IS NULL AND hdeaktiv IS NULL ";
					}
					else
					{
						strSelect = @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkbuchtext,
(rkdmleis+rkmbdmopl), rkdmarzn, rkdmmahn, rkdmzins,    (rkzaleis+rkmbzaopl), rkzaarzn, rkzamahn, rkzazins,
rkmahnstufe, rkmahnltzt, aname1, aname2, astr, aort, aland, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
:frmMain.nDMRechL, :frmMain.nDMRechA, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRechL, :frmMain.nZaRechA, :frmMain.nZaMahn, :frmMain.nZaZins,
:frmMain.nMS, :frmMain.dtMahnDat, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
:frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand
FROM rk,a,h
WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND rkrechdat BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis AND rkdeaktiv IS NULL AND hdeaktiv IS NULL ";
					}
					// 29.01.08 A194 + , aname2, astr, aort
					// 29.11.23 F5065 +If nOPMSbis = 9
					// If nOPMS = 0 And nOPMSbis = 9
					// Set strSelect = strSelect || 'AND rkkzzahl<2 and (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)<>0 '
					// 06.04.21 F4733
					// If strPSpezial != 'ED' and SalStrLeftX( strPSpezial, 6 ) != 'Datum:'
					// Set strSelect = strSelect || 'AND (@MID(adrucke, 0,1) = \'X\' OR :frmMain.nImmer = 1)  '
					if (App.frmMain.nOPMSbis == 9) 
					{
						if (App.frmMain.nOPMSbis == 9) 
						{
							// 22.01.09 OTF174 + and (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)<>0
							strSelect = strSelect + @"
AND (rkmahnstufe BETWEEN :frmMain.nOPMS AND :frmMain.nOPMSbis Or rkrechnr >= 999990)
AND rkkzzahl<2 AND (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)<>0 ";
							// 06.04.21 F4733
							if (strPSpezial != "ED") 
							{
								strSelect = strSelect + "AND (@MID(adrucke, 0,1) = \'X\' OR :frmMain.nImmer = 1)  ";
							}
						}
						else if (App.frmMain.nOPMS == 0) 
						{
							strSelect = strSelect + "AND rkkzzahl<2 and (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)<>0 ";
						}
						// 06.04.21 F4733
						if (strPSpezial != "ED" && strPSpezial.Left(6) != "Datum:") 
						{
							strSelect = strSelect + "AND (@MID(adrucke, 0,1) = \'X\' OR :frmMain.nImmer = 1)  ";
						}
					}
					else if (App.frmMain.nOPMS == 9) 
					{
						// 22.01.09 OTF174 + and (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)<>0
						strSelect = strSelect + @"
AND (rkmahnstufe = :frmMain.nOPMS Or rkrechnr >= 999990)
AND rkkzzahl<2 AND (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)<>0 ";
						// 06.04.21 F4733
						if (strPSpezial != "ED") 
						{
							strSelect = strSelect + "AND (@MID(adrucke, 0,1) = \'X\' OR :frmMain.nImmer = 1)  ";
						}
					}
					else if (App.frmMain.nOPMS == 99)  // 18.10.00) 	nur Mahngebühren (Röcken)	! 03.03.03  + AND (rkdmmahn+rkdmzins-rkzamahn-rkzazins)>0 AND rkzaleis=rkdmleis AND rkzaarzn=rkdmarzn
					{
						strSelect = strSelect + @"
AND rkkzzahl<2 AND (rkdmmahn+rkdmzins-rkzamahn-rkzazins)>0 AND rkzaleis=rkdmleis AND rkzaarzn=rkdmarzn ";
						// 06.04.21 F4733
						if (strPSpezial != "ED") 
						{
							strSelect = strSelect + "AND (@MID(adrucke, 5,1) = \'X\' OR :frmMain.nImmer = 1)  ";
						}
					}
					else if (strPSpezial == "RA")  // 08.02.18 Ä1673
					{
					}
					else
					{
						strSelect = strSelect + @"
AND (rkmahnstufe BETWEEN :frmMain.nOPMS AND :frmMain.nOPMSbis)
AND rkkzzahl<2 ";
						// 06.04.21 F4733
						if (strPSpezial != "ED") 
						{
							strSelect = strSelect + "AND (@MID(adrucke, 0,1) = \'X\' OR :frmMain.nImmer = 1)  ";
						}
					}
					if (strPSpezial == "ED") 
					{
						strSelect = strSelect + @" AND rkarztnr=aarztnr AND rkarztnr=harztnr AND rkhalternr=hhalternr
ORDER BY rkarztnr, dderfdat, hnn, hhalternr, rkrechnr";
					}
					else
					{
						strSelect = strSelect + @" AND rkarztnr=aarztnr AND rkarztnr=harztnr AND rkhalternr=hhalternr
ORDER BY rkarztnr, hnn, hhalternr, rkrechnr";
					}
					// 19.02.07 Ä79
					App.frmMain.nTANrAlt = 0;

					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							// Call axLL.LlSetOption( LL_OPTION_USECHARTFIELDS, TRUE, nRet )
							return true;
						}
					}
				}
				else if (strPBericht == "OP-ListeOP.lst")  // 06.12.17 Ä1657
				{
					App.frmMain.strTAN1 = "";
					App.frmMain.strTAN2 = "";
					App.frmMain.strTAStr = "";
					App.frmMain.strTAOrt = "";
					App.frmMain.strTALand = "";
					App.frmMain.nTANrAlt = 0;
					App.frmMain.nTHNrAlt = 0;
					dtDDErfDat = new SalDateTime(1900, 1, 1);
					// 04.09.17 +
					// AND rkrechdat BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
					// 13.11.17 Ä1657 + rpmwst, rpdm, rpdmzahl
					if (strPSpezial == "ED") 
					{
						// 24.10.18 F3145 + ddemail
						strSelect = @"SELECT rkarztnr, dderfdat, rkhalternr, rkrechnr, rkrechdat, rkbuchtext,
(rkdmleis+rkmbdmopl), rkdmarzn, rkdmmahn, rkdmzins,    (rkzaleis+rkmbzaopl), rkzaarzn, rkzamahn, rkzazins,
rkmahnstufe, rkmahnltzt, aname1, aname2, astr, aort, aland, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland, rpmwst, ddemail, sum(rpdm), sum(rpdmzahl)
INTO :frmMain.nTANr, :dlgLlDruck.dtDDErfDat, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
:frmMain.nDMRechL, :frmMain.nDMRechA, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRechL, :frmMain.nZaRechA, :frmMain.nZaMahn, :frmMain.nZaZins,
:frmMain.nMS, :frmMain.dtMahnDat, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
:frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
:dlgLlDruck.nRPMwSt, :frmMain.strDDEMail, :dlgLlDruck.nRPDM, :dlgLlDruck.nRPDMZahl
FROM rk,a,h, dd, rp
WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND rkrechdat BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
AND ddcode = 'OP' AND ddarztnr=rkarztnr AND rkdeaktiv IS NULL AND hdeaktiv IS NULL ";
						// Set strSelect = strSelect || ' AND rkarztnr=aarztnr AND rkarztnr=harztnr AND rkhalternr=hhalternr
						// ORDER BY rkarztnr, dderfdat, hnn, hhalternr, rkrechnr'
					}
					else
					{
						strSelect = @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkbuchtext,
(rkdmleis+rkmbdmopl), rkdmarzn, rkdmmahn, rkdmzins,    (rkzaleis+rkmbzaopl), rkzaarzn, rkzamahn, rkzazins,
rkmahnstufe, rkmahnltzt, aname1, aname2, astr, aort, aland, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland, rpmwst, sum(rpdm), sum(rpdmzahl)
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
:frmMain.nDMRechL, :frmMain.nDMRechA, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRechL, :frmMain.nZaRechA, :frmMain.nZaMahn, :frmMain.nZaZins,
:frmMain.nMS, :frmMain.dtMahnDat, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
:frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
:dlgLlDruck.nRPMwSt, :dlgLlDruck.nRPDM, :dlgLlDruck.nRPDMZahl
FROM rk,a,h, rp
WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND rkrechdat BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis AND rkdeaktiv IS NULL AND hdeaktiv IS NULL ";
					}
					// 29.01.08 A194 + , aname2, astr, aort
					if (App.frmMain.nOPMS == 0 && App.frmMain.nOPMSbis == 9) 
					{
						strSelect = strSelect + @"AND (@MID(adrucke, 4,1) = 'X' OR :frmMain.nImmer = 1)
AND rkkzzahl<2 and (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)<>0 ";
					}
					else if (App.frmMain.nOPMS == 9) 
					{
						// 22.01.09 OTF174 + and (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)<>0
						strSelect = strSelect + @"
AND (rkmahnstufe = :frmMain.nOPMS Or rkrechnr >= 999990)
AND (@MID(adrucke, 4,1) = 'X' OR :frmMain.nImmer = 1)
AND rkkzzahl<2 AND (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)<>0 ";
					}
					else if (App.frmMain.nOPMS == 99)  // 18.10.00) 	nur Mahngebühren (Röcken)	! 03.03.03  + AND (rkdmmahn+rkdmzins-rkzamahn-rkzazins)>0 AND rkzaleis=rkdmleis AND rkzaarzn=rkdmarzn
					{
						strSelect = strSelect + @"
AND (@MID(adrucke, 5,1) = 'X' OR :frmMain.nImmer = 1)
AND rkkzzahl<2 AND (rkdmmahn+rkdmzins-rkzamahn-rkzazins)>0 AND rkzaleis=rkdmleis AND rkzaarzn=rkdmarzn ";
					}
					else
					{
						strSelect = strSelect + @"
AND (rkmahnstufe BETWEEN :frmMain.nOPMS AND :frmMain.nOPMSbis)
AND (@MID(adrucke, 4,1) = 'X' OR :frmMain.nImmer = 1)
AND rkkzzahl<2 ";
					}
					strSelect = strSelect + @" AND rkarztnr=aarztnr AND rkarztnr=harztnr AND rkhalternr=hhalternr AND rkarztnr=rparztnr AND rkrechnr=rprechnr
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26";
					if (strPSpezial == "ED") 
					{
						strSelect = strSelect + ",27,28";
					}
					else
					{
					}
					// 19.02.07 Ä79
					App.frmMain.nTANrAlt = 0;

					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							// Call axLL.LlSetOption( LL_OPTION_USECHARTFIELDS, TRUE, nRet )
							return true;
						}
					}
				}
				else if (strPBericht == "MB-Info.lst") 
				{
					Int.SqlImmed("DELETE FROM mbtemp");
					// 14.01.13 AND rkkzzahl<2 ->|| strPSpezial
					if (strPSpezial == "A") 
					{
						Int.SqlImmed(@"INSERT INTO mbtemp
(tarztnr, thalternr, trechnr, tdatum, ttyp, ttyptext, tdmhf, tdmma, tzahf, tzama, tms)
SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, 'RG', 'Rechnungserstellung',
(rkdmleis+rkdmarzn), (rkdmmahn+rkdmzins+rkmbdmopl), (rkzaleis+rkzaarzn+rkmbzaopl), (rkzamahn+rkzazins), rkmahnstufe
FROM rk WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND (rkarztnr*100000+rkhalternr) IN (SELECT rkarztnr*100000+rkhalternr FROM rk,a
WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND (rkmahnstufe = 9 OR rkrechnr>=999990) ) AND rkkzzahl<2");
						Int.SqlImmed(@"INSERT INTO mbtemp
(tarztnr, thalternr, trechnr, tdatum, ttyp, ttyptext, tdmza)
SELECT rkarztnr, rkhalternr, rkrechnr, zabuchdat, 'ZA',
@CHOOSE(zakz, NULL, 'Teilzahlung', 'Vollzahlung', 'Vollzahlung, Mahngeb.ausgebucht', 'ausgebucht', 'ausgebucht bei MB-Erst.'),
zadm
FROM rk,za WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND rkrechnr<999990
AND (rkarztnr*100000+rkhalternr) IN (SELECT rkarztnr*100000+rkhalternr FROM rk,a
WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND (rkmahnstufe = 9 OR rkrechnr>=999990) AND rkkzzahl<2)
AND rkarztnr=zaarztnr AND rkhalternr=zahalternr AND rkrechnr=zarechnr");
					}
					else
					{
						Int.SqlImmed(@"INSERT INTO mbtemp
(tarztnr, thalternr, trechnr, tdatum, ttyp, ttyptext, tdmhf, tdmma, tzahf, tzama, tms)
SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, 'RG', 'Rechnungserstellung',
(rkdmleis+rkdmarzn), (rkdmmahn+rkdmzins+rkmbdmopl), (rkzaleis+rkzaarzn+rkmbzaopl), (rkzamahn+rkzazins), rkmahnstufe
FROM rk WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND (rkarztnr*100000+rkhalternr) IN (SELECT rkarztnr*100000+rkhalternr FROM rk,a
WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND (rkmahnstufe = 9 OR rkrechnr>=999990) AND rkkzzahl<2
AND (@MID(adrucke, 1,1) = 'X' OR :frmMain.nImmer = 1)
AND rkarztnr=aarztnr  ) AND rkkzzahl<2");
						Int.SqlImmed(@"INSERT INTO mbtemp
(tarztnr, thalternr, trechnr, tdatum, ttyp, ttyptext, tdmza)
SELECT rkarztnr, rkhalternr, rkrechnr, zabuchdat, 'ZA',
@CHOOSE(zakz, NULL, 'Teilzahlung', 'Vollzahlung', 'Vollzahlung, Mahngeb.ausgebucht', 'ausgebucht', 'ausgebucht bei MB-Erst.'),
zadm
FROM rk,za WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND rkrechnr<999990
AND (rkarztnr*100000+rkhalternr) IN (SELECT rkarztnr*100000+rkhalternr FROM rk,a
WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND (rkmahnstufe = 9 OR rkrechnr>=999990) AND rkkzzahl<2
AND (@MID(adrucke, 1,1) = 'X' OR :frmMain.nImmer = 1)
AND rkarztnr=aarztnr  )
AND rkarztnr=zaarztnr AND rkhalternr=zahalternr AND rkrechnr=zarechnr AND rkkzzahl<2");
					}
					Int.SqlImmed(@"INSERT INTO mbtemp
(tarztnr, thalternr, trechnr, tdatum, ttyp, ttyptext, tdmgk)
SELECT akarztnr, akhalternr, akrechnr, akdatum, aktypdetail, vbez,
akdm
FROM ak,v WHERE akarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND (aktyp = 'MB' OR aktyp = 'BR')
AND aktypdetail = vcode
AND (akarztnr*100000+akhalternr) IN
(SELECT (tarztnr*100000+thalternr) FROM mbtemp) ");
					App.frmMain.strTyp = "MB";
					strSelect = @"SELECT tarztnr, thalternr, trechnr, tdatum, ttyp, ttyptext,
tdmhf, tdmma, tzahf, tzama, tdmgk, tdmza, tms,
aname1, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strTypDetail, :frmMain.strBuchText,
:frmMain.nRkDMHF, :frmMain.nRkDMMa, :frmMain.nRkZaHF, :frmMain.nRkZaMa,
:frmMain.nDMGK, :frmMain.nZaDM, :frmMain.nMS, :frmMain.strTAN1, :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand
FROM mbtemp,a,h
WHERE tarztnr=aarztnr AND tarztnr=harztnr AND thalternr=hhalternr AND hdeaktiv IS NULL
ORDER BY tarztnr, hnn, hhalternr, tdatum";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Partien-Info.lst") 
				{
					// 10.08.18 F3220: @choose(rkkzzahl,0,0,
					// (rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl))
					// ->
					//  @choose(rkkzzahl,0,0,0,0 ,(rkzaleis+rkzaarzn+rkzamahn+rkzazins+rkmbzaopl) ,(rkzaleis+rkzaarzn+rkzamahn+rkzazins+rkmbzaopl))
					App.frmMain.dtZahlDatAlt = SalDateTime.Null;
					App.frmMain.nTANrAlt = 0;
					if (App.frmMain.strabc == "MB") 
					{
						// Set strSelect = 'SELECT rkarztnr, rkrechdat, min(rkrechnr), sum(rkdmleis+rkdmarzn+rkmbdmopl),
						// sum(rkdmmahn), sum(rkdmzins),
						// sum(rkzaleis+rkzaarzn+rkmbzaopl),
						// sum(rkzamahn), sum(rkzazins), count(rkrechdat),
						// sum( @choose(rkkzzahl,0,0,0,0 ,(rkzaleis+rkzaarzn+rkzamahn+rkzazins+rkmbzaopl) ,(rkzaleis+rkzaarzn+rkzamahn+rkzazins+rkmbzaopl))),
						// sum(rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins - rkzaleis - rkzaarzn - rkzamahn - rkzazins - rkmbzaopl),
						// sum( @CHOOSE( rkkzzahl, 0,0, rkdmleis+rkdmarzn+rkdmmahn+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkzazins))
						// INTO :frmMain.nTANr, :frmMain.dtBuchDat, :frmMain.nMinRechNr,
						// :frmMain.nDMRech, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRech, :frmMain.nZaMahn, :frmMain.nZaZins,
						// :frmMain.nAnzRech, :frmMain.nDMAusbuch, :frmMain.nDMOP, :frmMain.nDM
						// from rk,a
						// WHERE rkarztnr=zaarztnr(+) AND rkhalternr=zahalternr(+) AND rkrechnr=zarechnr(+)
						// AND rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
						// AND (@MID(adrucke, 3,1) = \'X\' OR :frmMain.nImmer = 1)
						// AND rkarztnr=aarztnr
						// AND rkrechnr<999990
						// GROUP BY 1,2
						// ORDER BY rkarztnr, rkrechdat'
						strSelect = @"SELECT rkarztnr, rkrechdat, min(rkrechnr), sum( rkdmleis+rkdmarzn+rkmbdmopl),
sum( rkdmmahn), sum( rkdmzins),
sum( rkzaleis+rkzaarzn+rkmbzaopl),
sum( rkzamahn), sum( rkzazins), count(rkrechdat),
sum(rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins - rkzaleis - rkzaarzn - rkzamahn - rkzazins - rkmbzaopl),
sum( @CHOOSE( rkkzzahl, 0,0, rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl))
INTO :frmMain.nTANr, :frmMain.dtBuchDat, :frmMain.nMinRechNr,
:frmMain.nDMRech, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRech, :frmMain.nZaMahn, :frmMain.nZaZins,
:frmMain.nAnzRech, :frmMain.nDMOP, :frmMain.nDM
from rk,a
WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND rkrechdat BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
AND (@MID(adrucke, 2,1) = 'X' OR :frmMain.nImmer = 1) AND rkdeaktiv IS NULL
AND rkarztnr=aarztnr
GROUP BY 1,2
ORDER BY rkarztnr, rkrechdat";
					}
					else
					{
						// Set strSelect = 'SELECT rkarztnr, rkrechdat, min(rkrechnr), sum( rkdmleis+rkdmarzn+rkmbdmopl),
						// sum( rkdmmahn), sum(distnct rkdmzins),
						// sum( rkzaleis+rkzaarzn+rkmbzaopl),
						// sum( rkzamahn), sum( rkzazins), count(rkrechdat),
						// sum( @choose(rkkzzahl,0,0,0,0 ,(rkzaleis+rkzaarzn+rkzamahn+rkzazins+rkmbzaopl) ,(rkzaleis+rkzaarzn+rkzamahn+rkzazins+rkmbzaopl)))
						// INTO :frmMain.nTANr, :frmMain.dtBuchDat, :frmMain.nMinRechNr,
						// :frmMain.nDMRech, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRech, :frmMain.nZaMahn, :frmMain.nZaZins,
						// :frmMain.nAnzRech, :frmMain.nDMAusbuch
						// from rk,a,za
						// WHERE rkarztnr=zaarztnr(+) AND rkhalternr=zahalternr(+) AND rkrechnr=zarechnr(+)
						// AND rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
						// AND (@MID(adrucke, 2,1) = \'X\' OR :frmMain.nImmer = 1)
						// AND rkrechnr < 999990
						// AND rkarztnr=aarztnr
						// GROUP BY 1,2
						// ORDER BY rkarztnr, rkrechdat'
						strSelect = @"SELECT rkarztnr, rkrechdat, min(rkrechnr), sum( rkdmleis+rkdmarzn),
sum( rkdmmahn), sum( rkdmzins),
sum( rkzaleis+rkzaarzn),
sum( rkzamahn), sum( rkzazins), count(rkrechdat),
sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins - rkzaleis - rkzaarzn - rkzamahn - rkzazins),
sum( @CHOOSE( rkkzzahl, 0,0, rkdmleis+rkdmarzn+rkdmmahn+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkzazins))
INTO :frmMain.nTANr, :frmMain.dtBuchDat, :frmMain.nMinRechNr,
:frmMain.nDMRech, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRech, :frmMain.nZaMahn, :frmMain.nZaZins,
:frmMain.nAnzRech, :frmMain.nDMOP, :frmMain.nDM
from rk,a
WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND rkrechdat BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
AND (@MID(adrucke, 2,1) = 'X' OR :frmMain.nImmer = 1) AND rkdeaktiv IS NULL
AND rkrechnr < 999990
AND rkarztnr=aarztnr
GROUP BY 1,2
ORDER BY rkarztnr, rkrechdat";
					}
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				// Else If strPBericht = 'Ratenzahler-Checkliste.lst'
				// Set strSelect = '
				// SELECT rarztnr, rhalternr, hti || hvn || \' \' || hnn, rdm, rmtl, r1, anr2, max(rkrechdat),
				// sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-
				// rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
				// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.strTHN1, :frmMain.nDMRat, :frmMain.nMtl, :frmMain.dtRatDat, :frmMain.nTANrAlt,
				// :frmMain.dtRechDat, :frmMain.nDMRech
				// FROM r,h,a, rk
				// WHERE  rarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
				// AND rarztnr=aarztnr AND rarztnr=harztnr and rhalternr=hhalternr
				// AND rarztnr=rkarztnr AND rhalternr=rkhalternr and rkkzzahl<2
				// GROUP BY 1,2,3,4,5,6,7'
				// If NOT SqlPrepar(hSqlLlDruck,strSelect)
				// Return FALSE
				// Else
				// If NOT SqlExecute(hSqlLlDruck)
				// Return FALSE
				// Else
				// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
				// Return TRUE
				// Else If strPBericht = 'Ratenzahlerliste.lst'
				// Set strSelect = '
				// SELECT rarztnr, rhalternr, hti || hvn || \' \' || hnn, rdm, rmtl, r1, anr2
				// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.strTHN1, :frmMain.nDMRat, :frmMain.nMtl, :frmMain.dtRatDat, :frmMain.nTANrAlt
				// FROM r,h,a
				// WHERE  rarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
				// AND (@MID(adrucke, 4,1) = \'X\' OR :frmMain.nImmer = 1)
				// AND rarztnr=aarztnr AND rarztnr=harztnr AND rhalternr=hhalternr
				// ORDER BY rarztnr, hnn'
				// If NOT SqlPrepar(hSqlLlDruck,strSelect)
				// Return FALSE
				// Else
				// If NOT SqlExecute(hSqlLlDruck)
				// Return FALSE
				// Else
				// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
				// Return TRUE
				else if (strPBericht == "70-Checkliste.lst") 
				{

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalSqlHandle temp3 = App.frmMain.hSql70;
					Int.SqlConnection(ref temp3);
					App.frmMain.hSql70 = temp3;

					strSelect = @"SELECT rkarztnr, rkrechdat, min(rkrechnr), sum(rkdmleis+rkdmarzn),
count(rkrechdat)
INTO :frmMain.nTANr, :frmMain.dtBuchDat, :frmMain.nMinRechNr,
:frmMain.nDMRech, :frmMain.nAnzRech
from rk
WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND rkrechnr < 999990 AND rkrechdat>='1994-9-1'
AND rkrechdat BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis AND rkdeaktiv IS NULL
GROUP BY 1,2
ORDER BY rkarztnr, rkrechdat";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Buchungsabgleich.crd") 
				{
					Int.SqlImmedSel(@"SELECT sum(tksoll), sum(tkhaben) INTO :frmMain.nTKSoll, :frmMain.nTKHaben
FROM tk
WHERE tkbeldat BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis");
					Int.SqlImmedSel(@"SELECT sum(fidm) INTO :frmMain.nFISoll
FROM fi
WHERE fibeldat BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
and fisoll in (16000, 16100, 16200, 16420, 16450, 16500, 17300, 16400, 16410)
and not fihaben in (16000, 16100, 16200, 16420, 16450, 16500, 17300, 16400, 16410)");
					Int.SqlImmedSel(@"SELECT sum(fidm) INTO :frmMain.nFIHaben
FROM fi
WHERE fibeldat BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
and fihaben in (16000, 16100, 16200, 16420, 16450, 16500, 17300, 16400, 16410)
and not fisoll  in (16000, 16100, 16200, 16420, 16450, 16500, 17300, 16400, 16410)");
					App.frmMain.bNoFetch = false;
					return true;
				}
				else if (strPBericht == "Hitliste Rechnungen.lst") 
				{
					// 02.01.09 OTÄ74
					// Set strSelect = '
					// SELECT aarztnr, aname1, sum(akanzahl), sum(akdm), avg(akdm),
					// sum(akrechsumm), avg(akrechsumm)
					// INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.nAnzRech, :frmMain.nRechGeb, :frmMain.nBuchDM, :frmMain.nRechDM, :frmMain.nZahlDM
					// FROM ak,a
					// WHERE aktyp=\'RG\' AND aktypdetail LIKE \'UebOP%\' AND akdatum>=@YEARBEG(@NOW)
					// AND (akarztnr = aarztnr OR (akarztnr = anr2 AND anr2 >= 1)) AND akzpraxart<2
					// GROUP BY 1,2 ORDER BY 4 DESC'
					// 01.09.10 OTÄ466 + rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis AND
					strSelect = @"
SELECT aarztnr, aname1, sum(akanzahl), sum(akdm), avg(akdm),
sum(akrechsumm), avg(akrechsumm)
INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.nAnzRech, :frmMain.nRechGeb, :frmMain.nBuchDM, :frmMain.nRechDM, :frmMain.nZahlDM
FROM ak, a
WHERE akarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis AND aktyp='RG' AND aktypdetail LIKE 'UebOP%' AND akdatum BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
AND (akarztnr = aarztnr OR (akarztnr = anr2 AND anr2 >= 1)) AND akzpraxart<2 AND akdeaktiv IS NULL
GROUP BY 1,2 ORDER BY 4 DESC";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Hitliste Mahnungen.lst") 
				{
					// 02.01.09 OTÄ74
					// Set strSelect = '
					// SELECT aarztnr, aname1, sum(akanzahl), sum(akdm), avg(akdm),
					// sum(akrechsumm), avg(akrechsumm)
					// INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.nAnzRech, :frmMain.nRechGeb, :frmMain.nBuchDM, :frmMain.nRechDM, :frmMain.nZahlDM
					// FROM ak,a
					// WHERE aktyp=\'MG\' AND akdatum>=@YEARBEG(@NOW)
					// AND akarztnr IN (aarztnr, anr2) AND akzpraxart<2
					// GROUP BY 1,2 ORDER BY 4 DESC'
					// 01.09.10 OTÄ466 + rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis AND
					strSelect = @"
SELECT aarztnr, aname1, sum(akanzahl), sum(akdm), avg(akdm),
sum(akrechsumm), avg(akrechsumm)
INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.nAnzRech, :frmMain.nRechGeb, :frmMain.nBuchDM, :frmMain.nRechDM, :frmMain.nZahlDM
FROM ak,a
WHERE akarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis AND aktyp='MG' AND akdatum BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
AND akarztnr IN (aarztnr, anr2) AND akzpraxart<2 AND akdeaktiv IS NULL
GROUP BY 1,2 ORDER BY 4 DESC";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "TA-Statistik.lst") 
				{
					strSelect = @"
SELECT aarztnr, aname1, aname2, agktyp, @YEAR(akdatum),
SUM(@CHOOSE( @quarter(akdatum), 0, akdm, NULL)),
SUM(@CHOOSE( @quarter(akdatum), 0, akrechsumm, NULL)),
SUM(@CHOOSE( @quarter(akdatum),0,0, akdm, NULL)),
SUM(@CHOOSE( @quarter(akdatum),0,0, akrechsumm, NULL)),
SUM(@CHOOSE( @quarter(akdatum),0,0,0, akdm, NULL)),
SUM(@CHOOSE( @quarter(akdatum),0,0,0, akrechsumm, NULL)),
SUM(@CHOOSE( @quarter(akdatum),0,0,0,0, akdm, NULL)),
SUM(@CHOOSE( @quarter(akdatum),0,0,0,0, akrechsumm, NULL))
INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strGKTyp, :frmMain.nRechJahr,  :frmMain.nGeb1, :frmMain.nRech1,
:frmMain.nGeb2, :frmMain.nRech2,  :frmMain.nGeb3, :frmMain.nRech3,  :frmMain.nGeb4, :frmMain.nRech4
FROM ak,a
WHERE aarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND aktyp='RG' AND aktypdetail LIKE 'UebOP%'
AND akarztnr IN (aarztnr, anr2) AND akzpraxart<2
AND @YEARNO(akdatum) > @YEARNO(SYSDATE)-3 AND akdeaktiv IS NULL
GROUP BY 1,2,3,4,5";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							App.frmMain.nRechJahrAlt = 0;
							App.frmMain.nTANrAlt = 0;
							return true;
						}
					}
				}
				else if (strPBericht == "TA-StatistikVARI.lst") 
				{
					strSelect = @"
SELECT aarztnr, aname1, aname2, agktyp, @YEAR(akdatum), SUM(akdm), SUM(akrechsumm)
INTO  :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strGKTyp, :frmMain.nRechJahr, :frmMain.nGeb1, :frmMain.nRech1
FROM ak,a
WHERE aarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND aktyp='RG' AND aktypdetail LIKE 'UebOP%'
AND akarztnr IN (aarztnr, anr2) AND akzpraxart<2 AND akdeaktiv IS NULL
AND (akdatum BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
Or akdatum BETWEEN :frmMain.dtDatVon - 1 YEAR AND :frmMain.dtDatBis - 1 YEAR
Or akdatum BETWEEN :frmMain.dtDatVon - 2 YEAR AND :frmMain.dtDatBis - 2 YEAR)
GROUP BY 1,2,3,4,5";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							App.frmMain.nTANrAlt = 0;
							return true;
						}
					}
				}
				// Else If strPBericht = 'Mahnsperre2.lst'
				// Set strSelect = 'SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat,
				// (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins),
				//  asvname1, asvname2, asvstr, asvort, asvland,
				//  hti || hvn || \' \' || hnn, hname2, hstr, hort, hland
				// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtRechDat,
				// :frmMain.nDMOP, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
				// :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand
				// FROM rk,a, h
				// WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
				// AND rkmahnsperr = 2 AND rkrechdat<@QUARTERBEG(SYSDATE)
				// AND rkkzzahl<2 AND (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)>0
				// AND rkarztnr=aarztnr AND rkarztnr=harztnr AND rkhalternr=hhalternr
				// ORDER BY rkarztnr, rkrechdat'
				// If NOT SqlPrepar(hSqlLlDruck,strSelect)
				// Return FALSE
				// Else
				// If NOT SqlExecute(hSqlLlDruck)
				// Return FALSE
				// Else
				// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
				// Return TRUE
				else if (strPBericht == "Wiedervorlageliste.lst") 
				{
					strSelect = @"SELECT zarztnr, zhalternr, zrechnr, zvon, zan,
zdatum, zwiedervor, zbemerk, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.strVon, :frmMain.strAn,
:frmMain.dtDatum, :frmMain.dtWieVor, :frmMain.lsBemerk, :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand
FROM z, h
WHERE zwiedervor BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis AND zdeaktiv IS NULL AND hdeaktiv IS NULL
AND zarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis ";
					// Set strBNZei = 'KN'
					if (App.frmMain.strMitarb != "") 
					{
						// 12.02.18 Ä1704
						Var.strBNLeseberechtigung = "";
						if (strPSpezial == "UV") 
						{
							// 29.11.05
							Int.PalCheckLeseberechtigung();
						}
						Var.strBNLeseberechtigung = "\'" + App.frmMain.strMitarb + "\'" + Var.strBNLeseberechtigung;

						strSelect = strSelect + " AND zan IN (" + Var.strBNLeseberechtigung + ") ";
					}
					strSelect = strSelect + @" AND zarztnr=harztnr(+) AND zhalternr=hhalternr(+)
ORDER BY zarztnr, zwiedervor";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "MYCO-Zettel_LEER.crd") 
				{
					strSelect = @"SELECT aarztnr, aname1, aname2, astr, aort, aland
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand
			FROM a
			WHERE aarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND aaustritt IS NULL AND agestorben IS NULL
			ORDER BY aarztnr";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "MYCO-Zettel.lst") 
				{
					strSelect = @"SELECT harztnr, hhalternr, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland,
			aname1, aname2, astr, aort, aland
			INTO :frmManAbr.nTANr, :frmManAbr.nTHNr, :frmManAbr.strTHN1, :frmManAbr.strTHN2, :frmManAbr.strTHStr, :frmManAbr.strTHOrt, :frmManAbr.strTHLand ,
			:frmManAbr.strTAN1, :frmManAbr.strTAN2, :frmManAbr.strTAStr, :frmManAbr.strTAOrt, :frmManAbr.strTALand
			FROM le,h,a
			WHERE learztnr=harztnr AND lehalternr=hhalternr AND learztnr=aarztnr AND learztnr = :frmManAbr.nArztNr AND hdeaktiv IS NULL
			ORDER BY hnn, hvn";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Solvenzliste.lst") 
				{
					strSelect = @"SELECT tkaarztnr, tkabeldat, sum(tksoll), sum(tkhaben)
INTO :frmMain.nTANr, :frmMain.dtBuchDat, :frmMain.nDMVorsch, :frmMain.nDMZahl
from tka
WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND tkabeldat BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
AND (tksoll<>0  OR tkhaben <>0) AND tkadeaktiv IS NULL
GROUP BY 1,2";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							App.frmMain.nDMRestAlt = 0;
							App.frmMain.nDMZahlAlt = 0;
							App.frmMain.dtZahlDatAlt = SalDateTime.Null;
							App.frmMain.nTANrAlt = 0;
							App.frmMain.nZinsProz = App.frmMain.nBankProz;
							return true;
						}
					}
				}
				else if (strPBericht == "Rechnungsabgaben.lst") 
				{
					// 18.01.22 Ä1987 + , raan4, raan5
					strSelect = @"SELECT raarztnr, rahalternr, rarechnr, radatum, razeichen, raan1 || ', ' || raan2 || ', ' || raan3 || ', ' || raan4 || ', ' || raan5 || ' (' || @STRING(raarztnr,0) || ')',
aname1, hti || hvn || ' ' || hnn || ', ' || hname2 || ', ' || hstr || ', ' || hland || ' ' || hort,
(rkdmleis+rkdmarzn)
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strZeichen, :frmMain.strBuchText, :frmMain.strTAN1, :frmMain.strTHN1, :frmMain.nDMRech
FROM ra,a,h, rk
WHERE raarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
AND radatum BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
AND (@MID(adrucke, 6,1) = 'X' OR :frmMain.nImmer = 1) AND rkdeaktiv IS NULL AND hdeaktiv IS NULL
AND raarztnr=aarztnr AND raarztnr=harztnr AND rahalternr=hhalternr AND raarztnr=rkarztnr AND rahalternr=rkhalternr AND rarechnr=rkrechnr
ORDER BY raarztnr, raan1, hnn, hhalternr, rarechnr";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Brief TVSNr-Diskette.crd" || strPBericht == "Begleitschreiben.crd" || strPBericht == "Rechnungsabgabe.crd" || strPBericht == "Brief-Mandatsanfrage.crd") 
				{
					App.frmMain.bNoFetch = false;
					return true;
				}
				else if (strPBericht == "Zahlungsmeldungen.lst") 
				{
					App.frmMain.dtCurrentDate = SalDateTime.Current;
					strSelect = @"SELECT zarztnr, zhalternr, zrechnr, zvon, zan,
zdatum, zzm, zzahlart, zzmdm, zbemerk, hti || hvn || ' ' || hnn, hname2, hstr, hland || ' ' || hort, z.ROWID, zproznr
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.strVon, :frmMain.strAn,
:frmMain.dtDatum, :frmMain.strMeldung, :frmMain.strZahlArt, :frmMain.nZMDM, :frmMain.lsBemerk, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strROWID, :frmMain.nProzNr
FROM z, h
WHERE zart = 'ZM'
AND zerledigt <> 'J' AND zdeaktiv IS NULL AND hdeaktiv IS NULL ";
					strSelect = strSelect + @" AND zarztnr=harztnr AND zhalternr=hhalternr
ORDER BY zarztnr, zwiedervor";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Übergabe FiBu.lst") 
				{
					strSelect = @"SELECT fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp
			INTO :frmUebFibuBH.nSoll, :frmUebFibuBH.nHaben, :frmUebFibuBH.strBelNr, :frmUebFibuBH.dtBelDat, :frmUebFibuBH.strBuchText, :frmUebFibuBH.nDM, :frmUebFibuBH.nTyp
			FROM fi
			WHERE fifertig = 0
			ORDER BY fityp, ROWID";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Mahnprotokoll.lst") 
				{
					dtDDErfDat = new SalDateTime(1900, 1, 1);
					if (App.frmMahn.dtDat1 != SalDateTime.Null) 
					{
						if (strPSpezial.Scan("ED") != -1)  // 25.07.13 Ä938
						{
							// 24.10.18 F3145 + ddemail
							strSelect = @"SELECT maarztnr, rkhalternr, hnn || ', ' || hvn, marechnr, rkrechdat,
			madatum, mams, madmrest, madmgeb, madmzins, dderfdat, ddemail
			INTO :frmMahn.nTANr, :frmMahn.nTHNr, :frmMahn.strTHN1, :frmMahn.nRechNr, :frmMahn.dtRechDat,
			:frmMahn.dtMahnDat, :frmMahn.nMS, :frmMahn.nDMRech, :frmMahn.nDMMahn, :frmMahn.nDMZins, :dlgLlDruck.dtDDErfDat, :frmMain.strDDEMail
			from ma, h, rk, dd
			WHERE maarztnr=rkarztnr AND marechnr=rkrechnr AND harztnr=rkarztnr AND hhalternr=rkhalternr
			AND ddcode = 'MP' AND ddarztnr=maarztnr
			AND madatum = :frmMahn.dtDat1 AND rkdeaktiv IS NULL AND madeaktiv IS NULL AND hdeaktiv IS NULL ";
						}
						else
						{
							strSelect = @"SELECT maarztnr, rkhalternr, hnn || ', ' || hvn, marechnr, rkrechdat,
			madatum, mams, madmrest, madmgeb, madmzins
			INTO :frmMahn.nTANr, :frmMahn.nTHNr, :frmMahn.strTHN1, :frmMahn.nRechNr, :frmMahn.dtRechDat,
			:frmMahn.dtMahnDat, :frmMahn.nMS, :frmMahn.nDMRech, :frmMahn.nDMMahn, :frmMahn.nDMZins
			from ma, h, rk
			WHERE maarztnr=rkarztnr AND marechnr=rkrechnr AND harztnr=rkarztnr AND hhalternr=rkhalternr
			AND madatum = :frmMahn.dtDat1 AND rkdeaktiv IS NULL AND madeaktiv IS NULL AND hdeaktiv IS NULL ";
						}
					}
					else
					{
						if (strPSpezial.Scan("ED") != -1)  // 25.07.13 Ä938
						{
							// 24.10.18 F3145 + ddemail
							strSelect = @"SELECT maarztnr, rkhalternr, hnn || ', ' || hvn, marechnr, rkrechdat,
			madatum, mams, madmrest, madmgeb, madmzins, dderfdat, ddemail
			INTO :frmMahn.nTANr, :frmMahn.nTHNr, :frmMahn.strTHN1, :frmMahn.nRechNr, :frmMahn.dtRechDat,
			:frmMahn.dtMahnDat, :frmMahn.nMS, :frmMahn.nDMRech, :frmMahn.nDMMahn, :frmMahn.nDMZins, :dlgLlDruck.dtDDErfDat, :frmMain.strDDEMail
			from ma, h, rk, dd
			WHERE maarztnr=rkarztnr AND marechnr=rkrechnr AND harztnr=rkarztnr AND hhalternr=rkhalternr
			AND ddcode = 'MP' AND ddarztnr=maarztnr
			AND madatum BETWEEN :frmMahn.dtMahnDatVon AND (:frmMahn.dtMahnDatBis + 1 DAY) AND rkdeaktiv IS NULL AND madeaktiv IS NULL AND hdeaktiv IS NULL  ";
						}
						else
						{
							strSelect = @"SELECT maarztnr, rkhalternr, hnn || ', ' || hvn, marechnr, rkrechdat,
			madatum, mams, madmrest, madmgeb, madmzins
			INTO :frmMahn.nTANr, :frmMahn.nTHNr, :frmMahn.strTHN1, :frmMahn.nRechNr, :frmMahn.dtRechDat,
			:frmMahn.dtMahnDat, :frmMahn.nMS, :frmMahn.nDMRech, :frmMahn.nDMMahn, :frmMahn.nDMZins
			from ma, h, rk
			WHERE maarztnr=rkarztnr AND marechnr=rkrechnr AND harztnr=rkarztnr AND hhalternr=rkhalternr
			AND madatum BETWEEN :frmMahn.dtMahnDatVon AND (:frmMahn.dtMahnDatBis + 1 DAY) AND rkdeaktiv IS NULL AND madeaktiv IS NULL AND hdeaktiv IS NULL  ";
						}
					}
					if (App.frmMahn.nArztNr != SalNumber.Null) 
					{
						strSelect = strSelect + " AND maarztnr = :frmMahn.nArztNr ";
					}
					if (App.frmMahn.nHalterNr != SalNumber.Null) 
					{
						strSelect = strSelect + " AND mahalternr = :frmMahn.nHalterNr ";
					}
					strSelect = strSelect + " ORDER BY maarztnr, madatum, rkhalternr";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "MB-Anfragen.lst") 
				{
					// 25.06.15 Ä1225 + hgebdat
					strSelect = @"
SELECT mvarztnr, mvhalternr,
asvname1, asvname2, asvstr, asvort, asvland,
htitel, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland, hgebdat,
mvrechnr, mvrechdat,  mvdmrest, mvdmmahngeb, mvdmzins
INTO :frmMahn.nTANr, :frmMahn.nTHNr,
:frmMahn.strTAN1, :frmMahn.strTAN2, :frmMahn.strTAStr, :frmMahn.strTAOrt, :frmMain.strTALand,
:frmMahn.strTHAnr, :frmMahn.strTHN1, :frmMahn.strTHN2, :frmMahn.strTHStr, :frmMahn.strTHOrt, :frmMahn.strTHLand, :frmMahn.dtTHGebDat,
:frmMahn.nRechNr, :frmMahn.dtRechDat, :frmMahn.nDMRech, :frmMahn.nDMMahn, :frmMahn.nDMZins
FROM mv,h,a
WHERE mvarztnr=harztnr and mvhalternr=hhalternr AND hdeaktiv IS NULL
AND mvarztnr=aarztnr
ORDER BY mvarztnr,mvhalternr";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Summenblatt.lst") 
				{
					strSelect = @"
SELECT mvms, count(*)
INTO :frmMahn.nMS, :frmMahn.nMahnAnz
FROM mv
GROUP BY 1";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "MB-Deckblatt.lst") 
				{
					// 04.08.15 Ä1237
					if (strPSpezial == "ND") 
					{
						// 20.03.19 Ä1726 + GebDat
						if (1 == dlgEinString.ModalDialog(this, "PR-Nummer, für die das MB-Deckblatt nachgedruckt werden soll", ref strPProzNr)) 
						{
							nPProzNr = Int.PalValNum(strPProzNr);
							strSelect = @"
SELECT prarztnr, prhalternr, prnr,
aname1, aname2, astr, aort, aland,anr2,
hti || hvn || ' ' || hnn, hname2, hstr, hort, hland, hgebdat, hgebdat2, hgebdattext, hgebdat2text,
prdatum, 0, prdarztnr, prdrechnr
INTO :frmMahn.nTANr, :frmMahn.nTHNr, :frmMahn.nMBNr,
:frmMahn.strTAN1, :frmMahn.strTAN2, :frmMahn.strTAStr, :frmMahn.strTAOrt, :frmMain.strTALand, :frmMahn.nTANr2,
:frmMahn.strTHN1, :frmMahn.strTHN2, :frmMahn.strTHStr, :frmMahn.strTHOrt, :frmMahn.strTHLand,
:frmMahn.dtGebDat, :frmMahn.dtGebDat2, :frmMahn.strGebDatText, :frmMahn.strGebDatText2,
:frmMahn.dtMBDatum, :frmMahn.nGerKosten, :frmMahn.nA1, :frmMahn.nRg1
FROM pr,h,a,prd
WHERE prarztnr=harztnr and prhalternr=hhalternr
AND prarztnr=aarztnr AND prnr=prdnr
AND prnr = :dlgLlDruck.nPProzNr AND hdeaktiv IS NULL
ORDER BY prnr";
						}
						else
						{
							return false;
						}
					}
					else
					{
						strSelect = @"
SELECT mbarztnr, mbhalternr, mbnr,
aname1, aname2, astr, aort, aland,anr2,
hti || hvn || ' ' || hnn, hname2, hstr, hort, hland,hgebdat, hgebdat2, hgebdattext, hgebdat2text,
mbdatum, mbgerkosten, prdarztnr, prdrechnr
INTO :frmMahn.nTANr, :frmMahn.nTHNr, :frmMahn.nMBNr,
:frmMahn.strTAN1, :frmMahn.strTAN2, :frmMahn.strTAStr, :frmMahn.strTAOrt, :frmMain.strTALand, :frmMahn.nTANr2,
:frmMahn.strTHN1, :frmMahn.strTHN2, :frmMahn.strTHStr, :frmMahn.strTHOrt, :frmMahn.strTHLand,
:frmMahn.dtGebDat, :frmMahn.dtGebDat2, :frmMahn.strGebDatText, :frmMahn.strGebDatText2,
:frmMahn.dtMBDatum, :frmMahn.nGerKosten, :frmMahn.nA1, :frmMahn.nRg1
FROM mb,h,a,prd
WHERE mbarztnr=harztnr and mbhalternr=hhalternr
AND mbarztnr=aarztnr AND mbnr=prdnr AND hdeaktiv IS NULL
ORDER BY mbnr";
					}
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Gerichtskosten.lst") 
				{
					strSelect = @"
SELECT mbarztnr, mbnr,  mbhalternr, mbrg1, hti || hvn || ' ' || hnn, mbgerkosten
INTO :frmMahn.nTANr, :frmMahn.nMBNr, :frmMahn.nTHNr, :frmMahn.nRechNr, :frmMahn.strTHN1, :frmMahn.nGerKosten
FROM mb,h
WHERE mbarztnr=harztnr and mbhalternr=hhalternr AND hdeaktiv IS NULL
ORDER BY mbnr";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Überweisungen.lst" || strPBericht == "KA-Kontroll1.lst" || strPBericht == "KA-Kontroll2.lst" || strPBericht == "KA-Kontroll3.lst" || strPBericht == "KA-Kontroll4.lst" || strPBericht == "Logbuch.lst" || strPBericht == 
				"Zettel.lst" || strPBericht == "BuchAbgleich.lst" || strPBericht == "ZettelListeErl.lst") 
				{
					nRow = Sys.TBL_MinRow;
					return true;
				}
				else if (strPBericht == "Vollstreckungsbescheidliste.lst") 
				{
					strSelect = @"
SELECT mbkproznr, mbkzustmb, mbkhname1, mbkhname2, mbkhstr, mbkhort
INTO :frmMBKalender.nProzNr, :frmMBKalender.dtZustMB, :frmMBKalender.strHN1, :frmMBKalender.strHN2, :frmMBKalender.strHS, :frmMBKalender.strHO
FROM mbk
WHERE mbktyp = :frmMBKalender.strReportName AND mbkuser = :strBNUser
ORDER BY mbkproznr";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Vollstreckungsauftrag.crd" || strPBericht == "Vollstreckungsauftrag2023.crd" || strPBericht == "Aufstellung der Forderungen für VA.crd" || strPBericht == "Aufstellung der Forderungen für Pfü.crd") 
				{
					// 17.06.19 F4506 + mbkagal, prepgma
					// 29.09.21 F4815 + ,preazb, preazc, preazd
					strSelect = @"
SELECT mbkproznr, mbkgername, mbkzustmb, mbkzustvb, mbkaz, mbkdmhf, mbkprozhf, mbkdmmahn, mbkdmmb, mbkdmvb,
mbkprozmbvb, mbkdmva, mbkdmfrueh, mbkzinshf, mbkzinsmb,
mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkagal, prepgma ,preazb, preazc, preazd, sum(zadm)
INTO :frmMBKalender.nProzNr, :frmMBKalender.strGerName, :frmMBKalender.dtZustMB, :frmMBKalender.dtZustVB, :frmMBKalender.strAZ, :frmMBKalender.nDMHF, :frmMBKalender.nProzHF, :frmMBKalender.nDMMahn, :frmMBKalender.nDMMB,
:frmMBKalender.nDMVB,
:frmMBKalender.nProzMBVB, :frmMBKalender.nDMVA, :frmMBKalender.nDMFrueh, :frmMBKalender.nZinsHF, :frmMBKalender.nZinsMB,
:frmMBKalender.strHN1, :frmMBKalender.strHN2, :frmMBKalender.strHS, :frmMBKalender.strHO, :frmMBKalender.strHLand, :frmMBKalender.nPGM ,
:frmMBKalender.strAZb, :frmMBKalender.strAZc, :frmMBKalender.strAZd, :frmMBKalender.nZaDM
FROM mbk, za, pre
WHERE mbktyp = :frmMBKalender.strReportName AND mbkuser = :strBNUser  AND mbkproznr = zaproznr (+) AND zadeaktiv  IS NULL
AND mbkproznr = preproznr
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19, 20, 21,22,23,24";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							// 24.07.23 Ä2082
							App.frmMain.nTANrAlt = 0;
							strReset = "";
							App.frmMBKalender.nProzNrAlt = 0;

							return true;
						}
					}
				}
				else if (strPBericht == "Pfü.crd" || strPBericht == "Pfü2023.crd" || strPBericht == "VZ.crd" || strPBericht == "Pfü2023Beschluss.crd") 
				{
					// 08.12.23
					App.frmMBKalender.nProzNrAlt = 0;
					// Set strSelect = '
					// SELECT mbkproznr, mbkgername, mbkzustmb, mbkzustvb, mbkaz, mbkdmhf, mbkprozhf, mbkdmmahn, mbkdmmb, mbkdmvb,
					// mbkprozmbvb, mbkdmva, mbkdmfrueh, mbkzinshf, mbkzinsmb,
					// mbkhname1, mbkhname2, mbkhstr, mbkhort, zabuchdat, sum(zadm)
					// INTO :frmMBKalender.nProzNr, :frmMBKalender.strGerName, :frmMBKalender.dtZustMB, :frmMBKalender.dtZustVB, :frmMBKalender.strAZ, :frmMBKalender.nDMHF, :frmMBKalender.nProzHF, :frmMBKalender.nDMMahn, :frmMBKalender.nDMMB,
					// :frmMBKalender.nDMVB,
					// :frmMBKalender.nProzMBVB, :frmMBKalender.nDMVA, :frmMBKalender.nDMFrueh, :frmMBKalender.nZinsHF, :frmMBKalender.nZinsMB,
					// :frmMBKalender.strHN1, :frmMBKalender.strHN2, :frmMBKalender.strHS, :frmMBKalender.strHO, :frmMBKalender.dtZaBuchDat, :frmMBKalender.nZaDM
					// FROM mbk, za
					// WHERE mbktyp = :frmMBKalender.strReportName AND mbkuser = :strBNUser  AND mbkproznr = zaproznr (+)
					// GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20'
					// 17.06.19 F4506 + mbkagal, prepgma
					// 17.06.19 F4506 + mbkagal, prepgma
					// 29.09.21 F4815 + ,preazb, preazc, preazd
					strSelect = @"
SELECT mbkproznr, mbkgername, mbkzustmb, mbkzustvb, mbkaz, mbkdmhf, mbkprozhf, mbkdmmahn, mbkdmmb, mbkdmvb,
mbkprozmbvb, mbkdmva, mbkdmfrueh, mbkzinshf, mbkzinsmb,
mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkagal, prepgma, preazb, preazc, preazd, sum(zadm)
INTO :frmMBKalender.nProzNr, :frmMBKalender.strGerName, :frmMBKalender.dtZustMB, :frmMBKalender.dtZustVB, :frmMBKalender.strAZ, :frmMBKalender.nDMHF, :frmMBKalender.nProzHF, :frmMBKalender.nDMMahn, :frmMBKalender.nDMMB,
:frmMBKalender.nDMVB,
:frmMBKalender.nProzMBVB, :frmMBKalender.nDMVA, :frmMBKalender.nDMFrueh, :frmMBKalender.nZinsHF, :frmMBKalender.nZinsMB,
:frmMBKalender.strHN1, :frmMBKalender.strHN2, :frmMBKalender.strHS, :frmMBKalender.strHO, :frmMBKalender.strHLand, :frmMBKalender.nPGM,
:frmMBKalender.strAZb, :frmMBKalender.strAZc, :frmMBKalender.strAZd, :frmMBKalender.nZaDM
FROM mbk, za, pre
WHERE mbktyp = :frmMBKalender.strReportName AND mbkuser = :strBNUser  AND mbkproznr = zaproznr (+) AND zadeaktiv IS NULL
AND mbkproznr = preproznr
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							App.frmMain.nTANrAlt = 0;
							strReset = "";
							App.frmMBKalender.nProzNrAlt = 0;

							return true;
						}
					}
				}
				else if (strPBericht == "DS-Beschluss.crd" || strPBericht == "DSNacht-Beschluss.crd" || strPBericht == "DS-Antrag2023.crd" || strPBericht == "DS-Beschluss2023.crd") 
				{
					// 17.06.19 F4506 + mbkagal, prepgma
					strSelect = @"
SELECT mbkproznr, mbkgername, mbkzustmb, mbkzustvb, mbkaz, mbkdmhf, mbkprozhf, mbkdmmahn, mbkdmmb, mbkdmvb,
mbkprozmbvb, mbkdmva, mbkdmfrueh, mbkzinshf, mbkzinsmb,
mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkagal, prepgma
INTO :frmMBKalender.nProzNr, :frmMBKalender.strGerName, :frmMBKalender.dtZustMB, :frmMBKalender.dtZustVB, :frmMBKalender.strAZ, :frmMBKalender.nDMHF, :frmMBKalender.nProzHF, :frmMBKalender.nDMMahn, :frmMBKalender.nDMMB,
:frmMBKalender.nDMVB,
:frmMBKalender.nProzMBVB, :frmMBKalender.nDMVA, :frmMBKalender.nDMFrueh, :frmMBKalender.nZinsHF, :frmMBKalender.nZinsMB,
:frmMBKalender.strHN1, :frmMBKalender.strHN2, :frmMBKalender.strHS, :frmMBKalender.strHO, :frmMBKalender.strHLand, :frmMBKalender.nPGM
FROM mbk, pre
WHERE mbktyp = :frmMBKalender.strReportName AND mbkuser = :strBNUser
AND mbkproznr = preproznr";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							App.frmMain.nTANrAlt = 0;
							strReset = "";
							App.frmMBKalender.nProzNrAlt = 0;

							return true;
						}
					}
				}
				// Else If strPBericht = 'PRs je Benutzer.lst'
				// If SalStrLeftX(strZMatch,1) <= 'F' or SalStrLeftX(strZMatch,1) = 'Z'
				// Set strResult = 'KO'
				// Else If (SalStrLeftX(strZMatch,1) >= 'G' And SalStrLeftX(strZMatch,1) <= 'J')  or SalStrLeftX(strZMatch,1) = 'V'
				// Set strResult = 'SE'
				// Else If (SalStrLeftX(strZMatch,1) >= 'K' And SalStrLeftX(strZMatch,1) <= 'M')
				// Set strResult = 'YI'
				// Else If (SalStrLeftX(strZMatch,1) >= 'N' And SalStrLeftX(strZMatch,1) <= 'R')
				// Set strResult = 'KN'
				// Else
				// Set strResult = 'ZK'
				// 04.01.13 F1495
				// Set frmMain.strZust = 'KO'
				// Set strSelect = '
				// SELECT @year(prdatum)+1900, sum(@isna(prbezahlt)), count(*) INTO :frmMain.nRechJahr, :frmMain.nAnzBezahlt, :frmMain.nAnzAlle FROM pr,a WHERE prdatum>=2001-01-01 AND prarztnr=aarztnr
				// and (@UPPER(@LEFT(amatch,1))<=\'G\' and @UPPER(@LEFT(amatch,1))<>\'F\') group
				// by 1'
				// Set frmMain.strZust = 'TO'
				// 10.10.16 F2770 prbezahlt -> prerledigt
				// Set strSelect = '
				// SELECT @year(prdatum)+1900, sum(@isna(prerledigt)), count(*) INTO :frmMain.nRechJahr, :frmMain.nAnzBezahlt, :frmMain.nAnzAlle FROM pr,a WHERE prdatum>=2001-01-01 AND prarztnr=aarztnr
				// and ((@UPPER(@LEFT(amatch,1))>=\'N\' and @UPPER(@LEFT(amatch,1))<=\'R\') OR @UPPER(@LEFT(amatch,1))=\'A\') group by 1'
				// If NOT SqlPrepar(hSqlLlDruck,strSelect)
				// Return FALSE
				// Else
				// If NOT SqlExecute(hSqlLlDruck)
				// Return FALSE
				// Else
				// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
				// Set nCountRec = nCountRec * 4
				// Return TRUE
				else if (strPBericht == "PRs je Benutzer.lst") 
				{
					// 26.10.22
					App.frmMain.bNoFetch = false;
					// 22.06.22 Ä2023
					strSelect = @"
SELECT zuzei, @year(prdatum)+1900, sum(@isna(prerledigt)), count(*) INTO :frmMain.strZust, :frmMain.nRechJahr, :frmMain.nAnzBezahlt, :frmMain.nAnzAlle FROM pr,a,zu WHERE prdatum>='2001-01-01' AND prarztnr=aarztnr
and  @UPPER(@LEFT(amatch,1))= zuabc group by 1,2";

					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							// Set nCountRec = nCountRec * 4
							return true;
						}
					}
				}
				else if (strPBericht == "MB-Aktionen je Benutzer.lst") 
				{
					strSelect = @"SELECT aktypdetail, @year(akdatum)+1900, akarztnr, count(*)
INTO :frmMain.strTypDetail, :frmMain.nRechJahr, :frmMain.nTANr, :frmMain.nAnzAlle
FROM ak
WHERE aktyp = 'MB' AND akdatum>='2000-01-01' AND akdeaktiv IS NULL
GROUP BY 1,2,3";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht.Left(6) == "Brief_" && strPBericht.Right(4) == ".crd") 
				{
					App.frmBrAktiErf.dfAussenst.Number = App.frmBrAktiErf.dfAussenst.Number + App.frmBrAktiErf.dfZusatz.Number;
					App.frmBrAktiErf.dfZusatz.Number = 0;
					App.frmMain.bNoFetch = false;
					// ! 19.08.10 OTÄ443
					// 21.10.10 OTÄ496 + If frmBrAktiErf.dfDM != 0		02.02.11: nach frmBrAktiErf verschoben
					// If frmBrAktiErf.dfDM != 0
					// If strPBericht = 'Brief_RZGem.crd'
					// Call SqlImmedSel('SELECT MAX(nrmax) INTO :frmBrAktiErf.nMaxScheckNr FROM nr WHERE nrcode = \'SCHK\'')
					// If frmBrAktiErf.nMaxScheckNr = NUMBER_Null
					// Set frmBrAktiErf.nMaxScheckNr = 0
					// Set frmBrAktiErf.nMaxScheckNr = frmBrAktiErf.nMaxScheckNr + 1
					// 12.01.11 F824
					// Call SqlImmed('UPDATE nr SET nrmax = :frmBrAktiErf.nMaxScheckNr WHERE nrcode = \'SCHK\'')
					// 01.11.16 Ä1437 + , aewaabeur, aewavariante
					// 03.09.21 Ä1968 + , aname1, aname2, astr, aort, aland
					// 11.07.23 strTA* frmMain -> frmBrAktiErf
					Int.SqlImmedSel(@"SELECT anr2, aewaabeur, aewavariante,
aname1, aname2, astr, aort, aland
INTO :frmBrAktiErf.nArztNr2, :dlgLlDruck.nEWAabEUR, :dlgLlDruck.nEWAVariante,
:frmBrAktiErf.strTAN1, :frmBrAktiErf.strTAN2, :frmBrAktiErf.strTAStr, :frmBrAktiErf.strTAOrt, :frmBrAktiErf.strTALand
FROM a WHERE aarztnr=:frmBrAktiErf.dfArztNr");

					return true;
				}
				else if (strPBericht == "BriefVariabel.crd" || strPBericht == "BriefEDA.crd" || strPBericht == "BriefRTF.crd") 
				{
					App.frmMain.bNoFetch = false;
					return true;
				}
				// Else If strPBericht = 'Halter prüfen.lst'
				// 26.02.19 Ä1829
				// Set frmDiskAbr.nTAArztNrAlt = 0
				// Set strDummy1 = ''
				// Set nRow = TBL_MinRow
				// While SalTblFindNextRow( frmDiskAbr.tblOffeneAbr, nRow, ROW_Selected, 0)
				// Call SalTblSetFocusRow( frmDiskAbr.tblOffeneAbr, nRow )
				// Call SqlImmedSel('SELECT anr2 INTO :frmDiskAbr.nArztNr2 FROM a WHERE aarztnr=:frmDiskAbr.tblOffeneAbr.colnArztNr')
				// Set strDummy1 = strDummy1 || 'OR ('  || PalArztNr('le', frmDiskAbr.tblOffeneAbr.colnArztNr, frmDiskAbr.nArztNr2) || '
				// AND lebearbdatum = ' || PalDateToStrSQLBase( frmDiskAbr.tblOffeneAbr.coldtBearbDatum ) || ') '
				// Set strDummy1 = SalStrMidX( strDummy1, 2, 32000 )
				// If NOT SqlPrepare(hSqlLlDruck,strSelect)
				// Return FALSE
				// Else
				// If NOT SqlExecute(hSqlLlDruck)
				// Return FALSE
				// Else
				// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
				// Return TRUE
				// 18.03.10 OTÄ397 + lereverse, leustid
				// If SqlHandleExec(hSqlLlDruck,'SELECT lehalternr,leti, levn, lenn, leti || levn || \' \' || lenn,lename2,lestr,leort,
				// 			learztnr, lebearbeiter,lebearbdatum, leherfdat, leposnr, lereverse, leustid, leeinzug, ROWID
				// 			INTO :frmDiskAbr.nTANr,:frmDiskAbr.strTATi,:frmDiskAbr.strTAVN,:frmDiskAbr.strTANN,
				// 			:frmDiskAbr.strTAN1, :frmDiskAbr.strTAN2,:frmDiskAbr.strTAStr,:frmDiskAbr.strTAOrt,
				// 			:frmDiskAbr.nTAArztNr,:frmDiskAbr.strBearbeiter,:frmDiskAbr.dtBearbDatum,
				// 			:frmDiskAbr.dtTAErfDat, :frmDiskAbr.nPosNr,  :frmDiskAbr.nTAReverse,  :frmDiskAbr.strTAUStID, :frmDiskAbr.nTAEinzug,  :frmDiskAbr.strROWIDLe
				// 			from le
				// 			WHERE ' || PalArztNr('le', frmDiskAbr.nArztNr, frmDiskAbr.nArztNr2) || '
				// 			AND lebearbeiter=:frmDiskAbr.strBearbeiter
				// 			AND lebearbdatum=:frmDiskAbr.dtBearbDatum
				// 			ORDER BY le.leposnr','Report INIT', nErr) != IDOK
				// Return FALSE
				// If SqlHandleExec(hSqlLlDruck,'SELECT lehalternr,leti, levn, lenn, leti || levn || \' \' || lenn,lename2,lestr,leort,
				// 			learztnr, lebearbeiter,lebearbdatum, leherfdat, leposnr, lereverse, leustid, leeinzug, ROWID
				// 			INTO :frmDiskAbr.nTANr,:frmDiskAbr.strTATi,:frmDiskAbr.strTAVN,:frmDiskAbr.strTANN,
				// 			:frmDiskAbr.strTAN1, :frmDiskAbr.strTAN2,:frmDiskAbr.strTAStr,:frmDiskAbr.strTAOrt,
				// 			:frmDiskAbr.nTAArztNr,:frmDiskAbr.strBearbeiter,:frmDiskAbr.dtBearbDatum,
				// 			:frmDiskAbr.dtTAErfDat, :frmDiskAbr.nPosNr,  :frmDiskAbr.nTAReverse,  :frmDiskAbr.strTAUStID, :frmDiskAbr.nTAEinzug,  :frmDiskAbr.strROWIDLe
				// 			from le
				// 			WHERE (' || strDummy1 || ')
				// 			ORDER BY learztnr, lebearbeiter, lebearbdatum, le.leposnr','Report INIT', nErr) != IDOK
				// Return FALSE
				// Else
				// Call SqlCommit(hSqlLlDruck)
				// Set frmDiskAbr.bZettel = FALSE
				// Set frmDiskAbr.bZettel0 = FALSE
				// Set frmDiskAbr.nTANrAlt = 0
				// Call SqlConnection(frmDiskAbr.hSql2)
				// 04.08.10 OTÄ447 + zerfdat DESC
				// 13.05.14 (zhalternr IS NULL OR zhalternr = 0) -> zhalternr = 0
				// Call SqlPrepareAndExecute(frmDiskAbr.hSql2, 'SELECT zvon, zdatum, zbemerk
				// INTO :frmDiskAbr.strZVon, :frmDiskAbr.dtZDatum, :frmDiskAbr.lsZBemerk
				// FROM z WHERE ' || PalArztNr('z', frmDiskAbr.nArztNr, frmDiskAbr.nArztNr2) || '
				// AND zhalternr = 0 AND zdeaktiv IS NULL
				// AND zart = \'RA\' order by zdatum DESC, zerfdat DESC')
				// Set frmDiskAbr.bZettel0 = TRUE
				// Set frmDiskAbr.strTAN1 = ''
				// Set frmDiskAbr.strTATi = ''
				// Set frmDiskAbr.strTAVN = ''
				// Set frmDiskAbr.strTANN = ''
				// Set frmDiskAbr.strTAN1 = ''
				// Set frmDiskAbr.strTAN2 = ''
				// Set frmDiskAbr.strTAStr = ''
				// Set frmDiskAbr.strTAOrt = ''
				// Set frmDiskAbr.strTALand = '--'
				// Set frmDiskAbr.strTVN1 = ''
				// Set frmDiskAbr.strTVTi = ''
				// Set frmDiskAbr.strTVVN = ''
				// Set frmDiskAbr.strTVNN = ''
				// Set frmDiskAbr.strTVN1 = ''
				// Set frmDiskAbr.strTVN2 = ''
				// Set frmDiskAbr.strTVStr = ''
				// Set frmDiskAbr.strTVOrt = ''
				// Set frmDiskAbr.strTVLand = '--'
				// Return TRUE
				else if (strPBericht == "Halter prüfen.lst") 
				{
					// If NOT SqlPrepare(hSqlLlDruck,strSelect)
					// Return FALSE
					// Else
					// If NOT SqlExecute(hSqlLlDruck)
					// Return FALSE
					// Else
					// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
					// Return TRUE
					// 18.03.10 OTÄ397 + lereverse, leustid
					// 31.01.23 Ä2070 +
					// 			leepost, leepostmail, leepostaenddat,
					if (Int.SqlHandleExec(hSqlLlDruck, @"SELECT lehalternr,leti, levn, lenn, leti || levn || ' ' || lenn,lename2,lestr,leort,
			learztnr, lebearbeiter,lebearbdatum, leherfdat, leposnr, lereverse, leustid, leeinzug,
			leepost, leepostmail, leepostaenddat,
			ROWID
			INTO :frmDiskAbr.nTANr,:frmDiskAbr.strTATi,:frmDiskAbr.strTAVN,:frmDiskAbr.strTANN,
			:frmDiskAbr.strTAN1, :frmDiskAbr.strTAN2,:frmDiskAbr.strTAStr,:frmDiskAbr.strTAOrt,
			:frmDiskAbr.nTAArztNr,:frmDiskAbr.strBearbeiter,:frmDiskAbr.dtBearbDatum,
			:frmDiskAbr.dtTAErfDat, :frmDiskAbr.nPosNr,  :frmDiskAbr.nTAReverse,  :frmDiskAbr.strTAUStID, :frmDiskAbr.nTAEinzug,
			:frmDiskAbr.LEEPOST, :frmDiskAbr.LEEPOSTMAIL, :frmDiskAbr.LEEPOSTAENDDAT,
			:frmDiskAbr.strROWIDLe
			from le
			WHERE " + Int.PalArztNr("le", App.frmDiskAbr.nArztNr, App.frmDiskAbr.nArztNr2) + @"
			AND lebearbeiter=:frmDiskAbr.strBearbeiter
			AND lebearbdatum=:frmDiskAbr.dtBearbDatum
			ORDER BY le.leposnr", "Report INIT", ref Var.nErr) != Sys.IDOK) 
					{
						return false;
					}
					else
					{
						// Call SqlCommit(hSqlLlDruck)
						App.frmDiskAbr.bZettel = false;
						App.frmDiskAbr.bZettel0 = false;
						App.frmDiskAbr.nTANrAlt = 0;

						// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
						SalSqlHandle temp4 = App.frmDiskAbr.hSql2;
						Int.SqlConnection(ref temp4);
						App.frmDiskAbr.hSql2 = temp4;

						// 04.08.10 OTÄ447 + zerfdat DESC
						// 13.05.14 (zhalternr IS NULL OR zhalternr = 0) -> zhalternr = 0
						Sql.PrepareAndExecute(App.frmDiskAbr.hSql2, @"SELECT zvon, zdatum, zbemerk
INTO :frmDiskAbr.strZVon, :frmDiskAbr.dtZDatum, :frmDiskAbr.lsZBemerk
FROM z WHERE " + Int.PalArztNr("z", App.frmDiskAbr.nArztNr, App.frmDiskAbr.nArztNr2) + @"
AND zhalternr = 0
AND zart = 'RA' order by zdatum DESC, zerfdat DESC");
						App.frmDiskAbr.bZettel0 = true;
						App.frmDiskAbr.strTAN1 = "";
						App.frmDiskAbr.strTATi = "";
						App.frmDiskAbr.strTAVN = "";
						App.frmDiskAbr.strTANN = "";
						App.frmDiskAbr.strTAN1 = "";
						App.frmDiskAbr.strTAN2 = "";
						App.frmDiskAbr.strTAStr = "";
						App.frmDiskAbr.strTAOrt = "";
						App.frmDiskAbr.strTALand = "--";
						App.frmDiskAbr.strTVN1 = "";
						App.frmDiskAbr.strTVTi = "";
						App.frmDiskAbr.strTVVN = "";
						App.frmDiskAbr.strTVNN = "";
						App.frmDiskAbr.strTVN1 = "";
						App.frmDiskAbr.strTVN2 = "";
						App.frmDiskAbr.strTVStr = "";
						App.frmDiskAbr.strTVOrt = "";
						App.frmDiskAbr.strTVLand = "--";
						return true;
					}
				}
				else if (strPBericht == "Mahnungen.lst" || strPBericht == "Mahnung A4.lst" || strPBericht == "MahnUeberw.lst" || strPBericht == "Mahnung A4 tvn.lst") 
				{
					// 07.05.14 Ä1163
					// Set strSelect = 'SELECT mdarztnr, mdhalternr, mddatum, mdmzf, mddm, mdms,  mdtext, mdzahleing
					// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.dtMahnDat, :frmMain.strMahnMZF, :frmMain.nMahnEUR, :frmMain.nMahnStufe, :frmMain.strMahnText, :frmMain.dtMahnZahlEing
					// FROM md, h
					// WHERE mdarztnr=harztnr AND mdhalternr=hhalternr AND mddatum = :frmDruMa.cmbMahnDat '
					// 06.11.18 Ä1806 + mvnr
					// 12.11.18 Ä1807 + mdgirocodedm
					strSelect = @"SELECT mdarztnr, mdhalternr, mddatum, mdmzf, mddm, mdms,  mdtext, mdzahleing, mdnr, mdgirocodedm
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.dtMahnDat, :frmMain.strMahnMZF, :frmMain.nMahnEUR, :frmMain.nMahnStufe, :frmMain.strMahnText, :frmMain.dtMahnZahlEing, :frmMain.nMahnNr,
:frmMain.nMahnGirocodeDM
FROM md, h
WHERE mdarztnr=harztnr AND mdhalternr=hhalternr AND mddeaktiv IS NULL AND hdeaktiv IS NULL ";
					if (App.frmDruMa.dfMDvon.DateTime != Sys.DATETIME_Null || App.frmDruMa.dfMDbis.DateTime != Sys.DATETIME_Null) 
					{
						if (App.frmDruMa.dfMDvon.DateTime == Sys.DATETIME_Null) 
						{
							App.frmDruMa.dfMDvon.DateTime = new SalDateTime(1900, 1, 1);
						}
						if (App.frmDruMa.dfMDbis.DateTime == Sys.DATETIME_Null) 
						{
							App.frmDruMa.dfMDbis.DateTime = new SalDateTime(2199, 12, 31);
						}
						strSelect = strSelect + " AND mddatum BETWEEN :frmDruMa.dfMDvon AND :frmDruMa.dfMDbis ";
					}
					else
					{
						//FC:FINAL: Convert to DateTime
						//strSelect = strSelect + " AND mddatum = :frmDruMa.cmbMahnDat ";
						dtMahnDate = ((SalString)App.frmDruMa.cmbMahnDat.Text).ToDate();
						strSelect = strSelect + " AND mddatum = :dtMahnDate ";
					}
					// 27.12.12 F1493
					// 14.06.17 Anweisung Sasse in drei aufgeteilt: 0-1000, 1001-1200, Rest (Zahlen habe ich mir ausgedacht)
					// If frmDruMa.rb500
					// Set strSelect = strSelect || ' AND mdarztnr <= 1100 '	! 22.05.17 500 -> 800
					if (App.frmDruMa.rbVariabel.Checked) 
					{
						strSelect = strSelect + " AND mdarztnr BETWEEN :frmDruMa.dfVon AND :frmDruMa.dfBis "; // 22.05.17 500 -> 800
					}
					// Else If frmDruMa.rb1400
					// Set strSelect = strSelect || ' AND mdarztnr BETWEEN 1001 AND 1200 '	! 22.05.17 500 -> 800
					// Else If frmDruMa.rbRest
					// Set strSelect = strSelect || ' AND mdarztnr > 1200'	! 22.05.17 500 -> 800
					// Set strSelect = strSelect || ' AND mdarztnr >700 '
					// 19.03.08
					if (strPBericht == "MahnUeberw.lst") 
					{
						strSelect = strSelect + " AND hland IN (\'DE\', \'\') ";
					}
					if (App.frmDruMa.dfArztNr.Number != 0 && App.frmDruMa.dfArztNr.Number != Sys.NUMBER_Null) 
					{
						strSelect = strSelect + " AND mdarztnr = :frmDruMa.dfArztNr ";
					}
					if (App.frmDruMa.dfA1von.Number != 0 && App.frmDruMa.dfA1von.Number != Sys.NUMBER_Null) 
					{
						strSelect = strSelect + " AND mdhalternr = :frmDruMa.dfA1von ";
					}
					// Set strSelect = strSelect || ' AND ((mdarztnr=1254 and mdhalternr >=2643) or mdarztnr>1254) '
					// 11.05.14 Ä1163 + mddatum,
					strSelect = strSelect + " ORDER BY mdarztnr, mddatum, mdhalternr, mdlfd";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				// Else If strPBericht = 'Mahnungen-RaZa.lst' or strPBericht = 'Mahnungen-RaZa A4.lst' or strPBericht = 'Mahn-RaZa-Ueberw.lst'
				// 17.07.12 Ä792 + abild
				// Set strSelect = 'SELECT rarztnr, rhalternr, mvrechnr, rdat, rdm, r1, rmtl, mvdmrest, mvdmmahngeb, mvmahndat,
				// aname1, aname2, astr, aort, aland, amemo, alogo, abild,
				// htitel, hti, hvn, hnn, hname2, hstr, hort, hland
				// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtRatDat, :frmMain.nDMRat, :frmMain.dtNaechstDat, :frmMain.nMtl, :frmMain.nMahnEUR, :dlgLlDruck.pnDummy, :frmMain.dtMahnDat,
				// :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.lsMemo, :frmMain.strLogo, :frmMain.lsBild,
				// :frmMain.strTHAnr, :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand
				// FROM mv, r,a,h
				// WHERE mvarztnr = aarztnr
				// AND mvarztnr = harztnr AND mvhalternr = hhalternr
				// AND mvarztnr = rarztnr AND mvhalternr = rhalternr
				// AND (rarztnr = aarztnr OR rarztnr = anr2) '
				// If frmDruRaZaMa.dfArztNr != 0 And frmDruRaZaMa.dfArztNr != NUMBER_Null
				// Set strSelect = strSelect || ' AND mvarztnr = :frmDruRaZaMa.dfArztNr '
				// If frmDruRaZaMa.dfA1von != 0 And frmDruRaZaMa.dfA1von != NUMBER_Null
				// Set strSelect = strSelect || ' AND mvhalternr = :frmDruRaZaMa.dfA1von '
				// Set strSelect = strSelect || ' ORDER BY mvarztnr, mvhalternr '
				// If NOT SqlPrepar(hSqlLlDruck,strSelect)
				// Return FALSE
				// Else
				// If NOT SqlExecute(hSqlLlDruck)
				// Return FALSE
				// Else
				// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
				// Return TRUE
				else if (strPBericht == "Rechnungen.lst" || strPBericht == "Überweisung A4.lst" || strPBericht == "Rechnung A4.lst" || strPBericht == "Überweisung AT.lst" || strPBericht == "Rechnung A4 tvn.lst") 
				{
					plsMemo = "";
					// 25.03.19 Ä1845
					bVorschalt = false;
					// 27.10.20 Ä1901
					nFormatAlt = 0;
					// 29.01.08 + strBarcode
					if (strPSpezial == "LE") 
					{
						// 26.03.08 + AND hsperrdatum IS NULL
						// 31.08.09 OTÄ295 + hvirtkonto
						// 16.03.10 OTÄ397 + lereverse + hustid
						// 17.07.12 Ä792 + abild
						// 27.10.14 Ä1115 + Papierrg
						// 03.11.14 Ä1067 + lereverseversion
						// 06.03.17 Ä1515 + arechtext
						// 06.02.18 Ä1698 + leprebatt
						// 11.10.19 F4529
						// Call axLL.LlDefineVariableExt( 'Vorschalt.Mitglied', SalNumberToStrX( frmMain.nTANr,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Vorschalt.Anzahl', SalNumberToStrX( nAnzahl,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Vorschalt.Summe', SalNumberToStrX( nSumme,2), LL_NUMERIC, nRet )
						// Call axLL.LlDefineVariableExt( 'Vorschalt.Bearbeiter', frmSpeRg.strBearbeiter, LL_TEXT, nRet )
						// Call axLL.LlDefineVariableExt( 'Vorschalt.BearbeitDatum', PalDateToStrSQLBase( frmSpeRg.dtBearbDatum ), LL_TEXT, nRet )
						App.frmMain.nTANr = 0;
						nAnzahl = 0;
						nSumme = 0;
						// Set frmSpeRg.strBearbeiter = ''
						// Set frmSpeRg.dtBearbDatum = DATETIME_Null

						// 12.11.19 Ä1872 + asteuernummer
						// 12.10.20 Ä1903 + lepformat
						// 27.11.20 Ä1922 + DigitalRg
						// 01.08.23 Ä2107 Versicherung
						strSelect = @"SELECT learztnr, lehalternr, lerechnr, lerechdat, lemzf, lebrutto, lebarcode, lereverse, lepapierrg,
aname1, aname2, astr, aort, aland, amemo, alogo, austid, austid2, asteuernr, arechtext,
htitel, hti, hvn, hnn, hname2, hstr, hort, hland, hbankeinzug, hfaelltg, hsperrdatum, ledigitalrg, leleitwegid, ledigitalmail,
lepla, lepmwst, leprechtext, lepdatum, lepdm, lepzeidat, lepreverseversion, leprabatt, lepformat, levecode, levevsnr,
hvirtkonto, hustid
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtMahnDat, :frmMain.strMahnMZF, :frmMain.nMahnEUR, :frmMain.strBarcode, :frmMain.nReverse, :frmMain.nPapierRg,
:frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.lsMemo, :frmMain.strLogo, :frmMain.strTAUStID, :frmMain.strTAUStID2, :frmMain.strSteuerNr, :frmMain.lsRechTextO,
:frmMain.strTHAnr, :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
:frmMain.nTHBankeinzug, :frmMain.nTHFaellTg, :frmMain.dtRepSperrDatum, :frmMain.strDigitalRg, :frmMain.strLeitwegID, :frmMain.strDigitalMail,
:frmMain.strRepRechLA, :frmMain.nRepRechMwSt, :frmMain.strRepRechText, :frmMain.dtRepRechDatum, :frmMain.nRepRechDM, :frmMain.dtRepRechZeiDat, :frmMain.nReverseVersion, :frmMain.nRabatt, :frmMain.nFormat,
:frmMain.strVeCode, :frmMain.strVeVSNr,
:dlgLlDruck.strHVirtKonto, :frmMain.strTHUStID
FROM le, lep,a,h
WHERE learztnr = aarztnr AND learztnr = harztnr AND lehalternr = hhalternr AND hdeaktiv IS NULL
AND learztnr=leparztnr AND lehalternr=lephalternr AND lerechnr=leprechnr AND leposnr=lepposnr
AND lebearbeiter = lepbearbeiter AND le.lebearbdatum = lep.lebearbdatum
AND lebearbeiter = :frmSpeRg.strBearbeiter AND le.lebearbdatum = :frmSpeRg.dtBearbDatum
AND ((learztnr = :frmSpeRg.nArztNr AND lerechnr BETWEEN :frmSpeRg.dfA1von AND :frmSpeRg.dfA1bis)
";
						// 25.03.19 Ä1845
						bVorschalt = true;
						// 03.06.08
						if (App.frmSpeRg.nArztNr2 != SalNumber.Null && App.frmSpeRg.nArztNr2 > 0) 
						{
							strSelect = strSelect + "OR (learztnr = :frmSpeRg.nArztNr2 AND lerechnr BETWEEN :frmSpeRg.dfA2von AND :frmSpeRg.dfA2bis)";
						}

						strSelect = strSelect + @" )
AND hsperrdatum IS NULL ";
						// 10.04.08
						if (strPBericht == "Überweisung A4.lst") 
						{
							// 23.04.08 Ä238 + AND hbankeinzug=0
							strSelect = strSelect + " AND hland IN (\'DE\', \'\') AND hbankeinzug=0";
						}
						else if (strPBericht == "Überweisung AT.lst")  // 12.08.10 OTÄ420
						{
							strSelect = strSelect + " AND hland = \'AT\' AND hbankeinzug=0";
						}
						// 12.02.10 OTÄ384
						// Set strSelect = strSelect || 'ORDER BY learztnr, lerechnr, lepdatum, lepzeidat '
						strSelect = strSelect + "ORDER BY learztnr, lerechnr,  lepzeidat ";
						// 03.12.08 A290
						// 05.12.16 Anweisung Sasse
						// Set strMitarbeiter = strBNName || ' ('
						// If strBNTel != ''
						// Set strMitarbeiter = strMitarbeiter || 'Tel. +49 (0) 50 68 / 93 07- ' || strBNTel
						// Set strMitarbeiter = strMitarbeiter || ')'
						strMitarbeiter = Var.strBNName;
						// 15.04.19 Ä1845
						Int.SqlImmedSel(strSelect);

					}
					else if (strPSpezial == "RK" || strPSpezial == "RK2" || strPSpezial == "RS")  // 08.12.20 RS_ Ä1897
					{
						// 30.07.08 :frmMain.strBarcode,  rausgenommen
						App.frmMain.strBarcode = "";

						// 31.08.09 OTÄ295 + hvirtkonto
						// 16.03.10 OTÄ397 + rkreverse + hustid
						// 27.10.14 Ä1115 + Papierrg
						// 06.03.17 Ä1515 + arechtext
						// 06.02.18 Ä1698 + leprebatt
						// 12.11.19 Ä1872 + asteuernummer
						// 12.10.20 Ä1903 + rpformat
						// 27.11.20 Ä1922 + DigitalRg
						// 01.08.23 Ä2107 Versicherung
						strSelect = @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat,  rkreverse, rkpapierrg, rkbarcode, rkvecode, rkvevsnr,
aname1, aname2, astr, aort, aland, amemo, alogo, austid, austid2, asteuernr, arechtext,
htitel, hti, hvn, hnn, hname2, hstr, hort, hland,
hvirtkonto, hbankeinzug, hfaelltg, hsperrdatum, hustid, hdigitalrg, hleitwegid, hdigitalmail,
rpla, rpmwst, rprechtext, rpdatum, rpdm, rpzeidat, rpreverseversion, rprabatt, rpformat
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtMahnDat, :frmMain.nReverse, :frmMain.nPapierRg, :frmMain.strBarcode, :frmMain.strVeCode, :frmMain.strVeVSNr,
:frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.lsMemo, :frmMain.strLogo, :frmMain.strTAUStID, :frmMain.strTAUStID2, :frmMain.strSteuerNr, :frmMain.lsRechTextO,
:frmMain.strTHAnr, :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
:dlgLlDruck.strHVirtKonto ,
:frmMain.nTHBankeinzug, :frmMain.nTHFaellTg, :frmMain.dtRepSperrDatum, :frmMain.strTHUStID, :frmMain.strDigitalRg, :frmMain.strLeitwegID, :frmMain.strDigitalMail,
:frmMain.strRepRechLA, :frmMain.nRepRechMwSt, :frmMain.strRepRechText, :frmMain.dtRepRechDatum, :frmMain.nRepRechDM, :frmMain.dtRepRechZeiDat, :frmMain.nReverseVersion, :frmMain.nRabatt, :frmMain.nFormat
FROM rk, rp,a,h
WHERE rkarztnr = aarztnr AND rkarztnr = harztnr AND rkhalternr = hhalternr
AND rkarztnr=rparztnr AND rkhalternr=rphalternr AND rkrechnr=rprechnr
 AND rkdeaktiv IS NULL AND hdeaktiv IS NULL AND ";
						if (strPSpezial == "RS") 
						{
							strSelect = strSelect + App.frmRechVonBisStorno.strLLQuery;
						}
						else
						{
							strSelect = strSelect + App.frmRechPos.strLLQuery;
						}
						// Set strSelect = 'SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat,
						// aname1, aname2, astr, aort, amemo, alogo, austid,
						// htitel, hti, hvn, hnn, hname2, hstr, hort, hland, hbankeinzug, hfaelltg, hsperrdatum,
						// rpla, rpmwst, rprechtext, rpdatum, rpdm, rpzeidat
						// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtMahnDat,
						// :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.lsMemo, :frmMain.strLogo, :frmMain.strTAUStID,
						// :frmMain.strTHAnr, :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
						// :frmMain.nTHBankeinzug, :frmMain.nTHFaellTg, :frmMain.dtRepSperrDatum,
						// :frmMain.strRepRechLA, :frmMain.nRepRechMwSt, :frmMain.strRepRechText, :frmMain.dtRepRechDatum, :frmMain.nRepRechDM, :frmMain.dtRepRechZeiDat
						// FROM rk, rp,a,h
						// WHERE rkarztnr = aarztnr AND rkarztnr = harztnr AND rkhalternr = hhalternr
						// AND rkarztnr=rparztnr AND rkhalternr=rphalternr AND rkrechnr=rprechnr
						// AND rkarztnr in (261,265) and rkrechdat=2008-10-13 '
						// 25.07.08 war fälschlicherweise unsortiert
						// 08.07.10
						if (strPBericht == "Überweisung A4.lst") 
						{
							// 23.04.08 Ä238 + AND hbankeinzug=0
							strSelect = strSelect + " AND hland IN (\'DE\', \'\') AND hbankeinzug=0";
						}
						// 19.06.15 F2415 + AND hsperrdatum IS NULL
						if (strPSpezial == "RK2" || strPSpezial == "RS")  // 08.12.20 RS_ Ä1897
						{
							strSelect = strSelect + @"
AND hsperrdatum IS NULL ";
						}

						// 12.02.10 OTÄ384
						// Set strSelect = strSelect || 'ORDER BY rkarztnr, rkrechnr, rpdatum, rpzeidat '
						strSelect = strSelect + "ORDER BY rkarztnr, rkrechnr, rpzeidat ";

						strMitarbeiter = "";
					}
					else if (strPSpezial == "RN")  // 11.12.08 Ä346
					{
						App.frmMain.strBarcode = "";

						// 31.08.09 OTÄ295 + hvirtkonto
						// 17.07.12 Ä792 + abild
						// 27.10.14 Ä1115 + Papierrg
						// 03.11.14 Ä1067 + lereverseversion
						// 06.03.17 Ä1515 + arechtext
						// 12.11.19 Ä1872 + asteuernummer
						// 12.10.20 Ä1903 + rpformat
						// 27.11.20 Ä1922 + DigitalRg
						// 04.03.21 F4725 + Rabatt
						// 01.08.23 Ä2107 Versicherung
						strSelect = @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat,  rkreverse, rkpapierrg, rkbarcode, rkvecode,
aname1, aname2, astr, aort, aland, amemo, alogo, austid, austid2, asteuernr, arechtext,
htitel, hti, hvn, hnn, hname2, hstr, hort, hland,
hvirtkonto, hbankeinzug, hfaelltg, hsperrdatum, hustid, hdigitalrg, hleitwegid, hdigitalmail,
rpla, rpmwst, rprechtext, rpdatum, rpdm, rpzeidat, rpreverseversion, rprabatt, rpformat
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtMahnDat,  :frmMain.nReverse, :frmMain.nPapierRg, :frmMain.strBarcode, :frmMain.strVeCode,
:frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.lsMemo, :frmMain.strLogo, :frmMain.strTAUStID, :frmMain.strTAUStID2, :frmMain.strSteuerNr, :frmMain.lsRechTextO,
:frmMain.strTHAnr, :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
:dlgLlDruck.strHVirtKonto ,
:frmMain.nTHBankeinzug, :frmMain.nTHFaellTg, :frmMain.dtRepSperrDatum, :frmMain.strTHUStID, :frmMain.strDigitalRg, :frmMain.strLeitwegID, :frmMain.strDigitalMail,
:frmMain.strRepRechLA, :frmMain.nRepRechMwSt, :frmMain.strRepRechText, :frmMain.dtRepRechDatum, :frmMain.nRepRechDM, :frmMain.dtRepRechZeiDat, :frmMain.nReverseVersion, :frmMain.nRabatt, :frmMain.nFormat
FROM rk, rp,a,h
WHERE rkarztnr = aarztnr AND rkarztnr = harztnr AND rkhalternr = hhalternr
AND rkarztnr=rparztnr AND rkhalternr=rphalternr AND rkrechnr=rprechnr
 AND hdeaktiv IS NULL  AND rkdeaktiv IS NULL AND " + App.frmRechNachdruck.strLLQuery;
						// 08.07.10
						if (strPBericht == "Überweisung A4.lst") 
						{
							// 23.04.08 Ä238 + AND hbankeinzug=0
							strSelect = strSelect + " AND hland IN (\'DE\', \'\') AND hbankeinzug=0";
						}
						// 25.07.08 war fälschlicherweise unsortiert
						// 19.08.15 Ä1240
						// If SalStrScan( strFileName, 'protokoll') != -1
						// Set strSelect = strSelect || 'ORDER BY rkarztnr, rkrechnr, rpmwst, rpla '
						// Else
						// 21.11.18 F3649
						// Set strSelect = strSelect || 'ORDER BY rkarztnr, rkrechnr, rpdatum, rpzeidat '
						strSelect = strSelect + "ORDER BY rkarztnr, rkrechnr, rpzeidat ";

						strMitarbeiter = "";
					}
					else if (strPSpezial == "RI")  // 01.08.23 Ä2120
					{
						App.frmMain.strBarcode = "";

						strSelect = @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat,  rkreverse, rkpapierrg, rkbarcode,
aname1, aname2, astr, aort, aland, amemo, alogo, austid, austid2, asteuernr, arechtext,
htitel, hti, hvn, hnn, hname2, hstr, hort, hland,
hvirtkonto, hbankeinzug, hfaelltg, hsperrdatum, hustid, hdigitalrg, hleitwegid, hdigitalmail,
rpla, rpmwst, rprechtext, rpdatum, rpdm, rpzeidat, rpreverseversion, rprabatt, rpformat
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtMahnDat,  :frmMain.nReverse, :frmMain.nPapierRg, :frmMain.strBarcode,
:frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.lsMemo, :frmMain.strLogo, :frmMain.strTAUStID, :frmMain.strTAUStID2, :frmMain.strSteuerNr, :frmMain.lsRechTextO,
:frmMain.strTHAnr, :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
:dlgLlDruck.strHVirtKonto ,
:frmMain.nTHBankeinzug, :frmMain.nTHFaellTg, :frmMain.dtRepSperrDatum, :frmMain.strTHUStID, :frmMain.strDigitalRg, :frmMain.strLeitwegID, :frmMain.strDigitalMail,
:frmMain.strRepRechLA, :frmMain.nRepRechMwSt, :frmMain.strRepRechText, :frmMain.dtRepRechDatum, :frmMain.nRepRechDM, :frmMain.dtRepRechZeiDat, :frmMain.nReverseVersion, :frmMain.nRabatt, :frmMain.nFormat
FROM rk, rp,a,h
WHERE rkarztnr = aarztnr AND rkarztnr = harztnr AND rkhalternr = hhalternr
AND rkarztnr=rparztnr AND rkhalternr=rphalternr AND rkrechnr=rprechnr
 AND hdeaktiv IS NULL  AND rkdeaktiv IS NULL AND " + App.frmMBKEinzeldruck.strLLQuery;
						strSelect = strSelect + "ORDER BY rkarztnr, rkrechnr, rpzeidat ";

						strMitarbeiter = "";
					}
					// If IDOK = SqlHandleExec(hSqlLlDruck,strSelect, 'Druck: PalHoleDaten', nErr)
					// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
					// If strPBericht = 'Überweisung AT.lst' and nCountRec>0	! 12.08.10 OTÄ420
					// Call SalMessageBox( 'Bitte legen Sie Formulare "Zahlungsanweisung Österreich" ein.', 'Papier wechseln', MB_Ok|MB_IconAsterisk )
					// Return TRUE
					// Else
					// Return FALSE
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							if (strPBericht == "Überweisung AT.lst" && nCountRec > 0)  // 12.08.10 OTÄ420
							{
								Sal.MessageBox("Bitte legen Sie Formulare \"Zahlungsanweisung Österreich\" ein.", "Papier wechseln", (Sys.MB_Ok | Sys.MB_IconAsterisk));
							}
							return true;
						}
					}
				}
				else if (strPBericht == "Vorab-Rechnung.lst") 
				{
					plsMemo = "";
					// 29.01.08 + strBarcode
					if (strPSpezial == "D") 
					{
						// 26.03.08 + AND hsperrdatum IS NULL
						// 31.08.09 OTÄ295 + hvirtkonto
						// 16.03.10 OTÄ397 + lereverse + hustid
						// 17.07.12 Ä792 + abild
						// 06.03.17 Ä1515 + arechtext
						// 12.11.19 Ä1872 + asteuernummer
						strSelect = @"SELECT learztnr, lehalternr, leposnr, lerechdat, lemzf, lebrutto, lebarcode, lereverse,
aname1, aname2, astr, aort, aland, amemo, alogo, austid, austid2, asteuernr, abild, arechtext,
htitel, hti, hvn, hnn, hname2, hstr, hort, hland, hbankeinzug, hfaelltg, hsperrdatum,
lepla, lepmwst, leprechtext, lepdatum, lepdm, lepzeidat, hvirtkonto, hustid
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtMahnDat, :frmMain.strMahnMZF, :frmMain.nMahnEUR, :frmMain.strBarcode, :frmMain.nReverse,
:frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.lsMemo, :frmMain.strLogo, :frmMain.strTAUStID,  :frmMain.strTAUStID2, :frmMain.strSteuerNr, :frmMain.lsBild, :frmMain.lsRechTextO,
:frmMain.strTHAnr, :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
:frmMain.nTHBankeinzug, :frmMain.nTHFaellTg, :frmMain.dtRepSperrDatum,
:frmMain.strRepRechLA, :frmMain.nRepRechMwSt, :frmMain.strRepRechText, :frmMain.dtRepRechDatum, :frmMain.nRepRechDM, :frmMain.dtRepRechZeiDat,
:dlgLlDruck.strHVirtKonto, :frmMain.strTHUStID
FROM le, lep,a,h
WHERE learztnr = aarztnr AND learztnr = harztnr AND lehalternr = hhalternr
AND learztnr=leparztnr AND lehalternr=lephalternr AND leposnr=lepposnr
AND lebearbeiter = lepbearbeiter AND le.lebearbdatum = lep.lebearbdatum
AND lebearbeiter = :frmDiskAbr.strBearbeiter AND le.lebearbdatum = :frmDiskAbr.dtBearbDatum AND hdeaktiv IS NULL
AND (learztnr = :frmDiskAbr.nArztNr OR learztnr = :frmDiskAbr.nArztNr2 )
";

						// 12.02.10 OTÄ384
						// Set strSelect = strSelect || 'ORDER BY learztnr, lerechnr, lepdatum, lepzeidat '
						// 12.05.15 F2407 + leposnr,
						strSelect = strSelect + "ORDER BY learztnr, lerechnr, leposnr, lepzeidat ";
						// 03.12.08 A290
						strMitarbeiter = Var.strBNName + " (";
						if (Var.strBNTel != "") 
						{
							strMitarbeiter = strMitarbeiter + "Tel. +49 (0) 50 68 / 93 07- " + Var.strBNTel;
						}
						// If strBNEMail != ''
						// Set strMitarbeiter = strMitarbeiter || ' - EMail: ' || strBNEMail
						strMitarbeiter = strMitarbeiter + ")";

					}
					else if (strPSpezial == "M")  // 18.04.12 Ä751
					{
						// 26.03.08 + AND hsperrdatum IS NULL
						// 31.08.09 OTÄ295 + hvirtkonto
						// 16.03.10 OTÄ397 + lereverse + hustid
						// 06.03.17 Ä1515 + arechtext
						// 12.11.19 Ä1872 + asteuernummer
						strSelect = @"SELECT learztnr, lehalternr, leposnr*100000+lehalternr, lerechdat, lemzf, lebrutto, lebarcode, lereverse,
aname1, aname2, astr, aort, aland, amemo, alogo, austid, austid2, asteuernr, abild, arechtext,
htitel, hti, hvn, hnn, hname2, hstr, hort, hland, hbankeinzug, hfaelltg, hsperrdatum,
lepla, lepmwst, leprechtext, lepdatum, lepdm, lepzeidat, hvirtkonto, hustid
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtMahnDat, :frmMain.strMahnMZF, :frmMain.nMahnEUR, :frmMain.strBarcode, :frmMain.nReverse,
:frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.lsMemo, :frmMain.strLogo, :frmMain.strTAUStID, :frmMain.strTAUStID2, :frmMain.strSteuerNr, :frmMain.lsBild, :frmMain.lsRechTextO,
:frmMain.strTHAnr, :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
:frmMain.nTHBankeinzug, :frmMain.nTHFaellTg, :frmMain.dtRepSperrDatum,
:frmMain.strRepRechLA, :frmMain.nRepRechMwSt, :frmMain.strRepRechText, :frmMain.dtRepRechDatum, :frmMain.nRepRechDM, :frmMain.dtRepRechZeiDat,
:dlgLlDruck.strHVirtKonto, :frmMain.strTHUStID
FROM le, lep,a,h
WHERE learztnr = aarztnr AND learztnr = harztnr AND lehalternr = hhalternr
AND learztnr=leparztnr AND lehalternr=lephalternr AND leposnr=lepposnr
AND lebearbeiter = lepbearbeiter AND le.lebearbdatum = lep.lebearbdatum
AND lebearbeiter = :frmManAbr.strBearbeiter AND le.lebearbdatum = :frmManAbr.dtBearbDatum AND hdeaktiv IS NULL
AND (learztnr = :frmManAbr.nArztNr OR learztnr = :frmManAbr.nArztNr2 )
";

						// 12.02.10 OTÄ384
						// Set strSelect = strSelect || 'ORDER BY learztnr, lerechnr, lepdatum, lepzeidat '
						strSelect = strSelect + "ORDER BY learztnr, lerechnr,  lepzeidat ";
						// 03.12.08 A290
						strMitarbeiter = Var.strBNName + " (";
						if (Var.strBNTel != "") 
						{
							strMitarbeiter = strMitarbeiter + "Tel. +49 (0) 50 68 / 93 07- " + Var.strBNTel;
						}
						// If strBNEMail != ''
						// Set strMitarbeiter = strMitarbeiter || ' - EMail: ' || strBNEMail
						strMitarbeiter = strMitarbeiter + ")";

					}
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							if (strPBericht == "Überweisung AT.lst" && nCountRec > 0)  // 12.08.10 OTÄ420
							{
								Sal.MessageBox("Bitte legen Sie Formulare \"Zahlungsanweisung Österreich\" ein.", "Papier wechseln", (Sys.MB_Ok | Sys.MB_IconAsterisk));
							}
							return true;
						}
					}
				}
				else if (strPBericht == "EU-Überweisungen.lst") 
				{
					strSelect = @"SELECT learztnr, lehalternr, lerechnr, lerechdat, lemzf,
aname1, aname2, astr, aort, aland, amemo, alogo, austid, austid2,
htitel, hti, hvn, hnn, hname2, hstr, hort, hland, hbankeinzug, hfaelltg
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtMahnDat, :frmMain.strMahnMZF,
:frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.lsMemo, :frmMain.strLogo, :frmMain.strTAUStID, :frmMain.strTAUStID2,
:frmMain.strTHAnr, :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
:frmMain.nTHBankeinzug, :frmMain.nTHFaellTg
FROM le, a,h
WHERE learztnr = aarztnr AND learztnr = harztnr AND lehalternr = hhalternr
AND lebearbeiter = :frmEUUeberw.strBearbeiter AND le.lebearbdatum = :frmEUUeberw.dtBearbDatum
AND ((learztnr = :frmEUUeberw.dfArztNr AND lerechnr BETWEEN :frmEUUeberw.dfA1von AND :frmEUUeberw.dfA1bis)
OR (learztnr = :frmEUUeberw.dfArztNr2 AND lerechnr BETWEEN :frmEUUeberw.dfA2von AND :frmEUUeberw.dfA2bis)) AND hdeaktiv IS NULL
AND hland NOT IN ('CH','DE','--')
ORDER BY learztnr, lerechnr ";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				// Else If strPBericht = 'Rechnungs-Check.lst'
				// If NOT SqlPrepare(hSqlDisk,'SELECT harztnr, hnn, hvn, hhalternr, hti || hvn || \' \' || hnn, hname2, hstr, hort, hland,
				// 			aname1, aname2, astr, aort, leposnr, lepla, lepmwst, sum(lepdm), sum(@round(lepdm*lepmwst/100,2)), min(lepdatum)
				// 			INTO :nTANr, :strNN, :strVN, :nTHNr, :strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strTHLand ,
				// 			:strTAN1, :strTAN2, :strTAStr, :strTAOrt, :nPosNr, :strLA, :nMwStProz, :nNetto, :nMwSt, :dtDatum
				// 			FROM le,lep,h,a
				// 			WHERE learztnr=harztnr AND lehalternr=hhalternr AND learztnr=aarztnr
				// 			AND lebearbeiter = :frmManAbr.strBearbeiter AND le.lebearbdatum = :frmManAbr.dtBearbDatum
				// 			AND learztnr=leparztnr AND lehalternr=lephalternr AND leposnr=lepposnr AND lebearbeiter=lepbearbeiter
				// 			AND le.lebearbdatum=lep.lebearbdatum
				// 			GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16')
				// Set strSelect = 'SELECT learztnr, lehalternr,
				// aname1, aname2, astr, aort, aland,
				// htitel, hti, hvn, hnn, hname2, hstr, hort, hland,
				// lepposnr, lepla, lepmwst, sum(lepdm), sum(@round(lepdm*lepmwst/100,2)), min(lepdatum)
				// INTO :frmMain.nTANr, :frmMain.nTHNr,
				// :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
				// :frmMain.strTHAnr, :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
				// :frmMain.nRepRechPos, :frmMain.strRepRechLA, :frmMain.nRepRechMwSt, , :frmMain.nRepRechDM, :frmMain.nRepRechBrutto, :frmMain.dtRepRechDatum
				// FROM le, lep, a,h
				// WHERE learztnr=harztnr AND lehalternr=hhalternr AND learztnr=aarztnr
				// 			AND lebearbeiter = :frmManAbr.strBearbeiter AND le.lebearbdatum = :frmManAbr.dtBearbDatum
				// 			AND learztnr=leparztnr AND lehalternr=lephalternr AND leposnr=lepposnr AND lebearbeiter=lepbearbeiter
				// 			AND le.lebearbdatum=lep.lebearbdatum
				// 			AND lepdm <> 0
				// 			GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18'
				// If NOT SqlPrepar(hSqlLlDruck,strSelect)
				// Return FALSE
				// Else
				// If NOT SqlExecute(hSqlLlDruck)
				// Return FALSE
				// Else
				// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
				// Return TRUE
				else if (strPBericht == "OP-Liste Halter.lst") 
				{
					strSelect = @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkbuchtext, rkkzzahl,
(rkdmleis+rkdmarzn+rkmbdmopl), rkdmmahn, rkdmzins,   (rkzaleis+rkzaarzn+rkmbzaopl), rkzamahn, rkzazins,
rkmahnstufe, rkmahnltzt, aname1, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland,
(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nKZZahl,
:frmMain.nDMRechL, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRechL, :frmMain.nZaMahn, :frmMain.nZaZins,
:frmMain.nMS, :frmMain.dtMahnDat, :frmMain.strTAN1, :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
:frmMain.nRepDMOP
FROM rk,a,h
WHERE rkarztnr IN (:frmRgSuchen.nArztNr, :frmRgSuchen.nArztNr2) AND rkhalternr=:frmRgSuchen.dfHalterNr AND rkdeaktiv IS NULL AND hdeaktiv IS NULL
AND rkarztnr=aarztnr AND rkarztnr=harztnr AND rkhalternr=hhalternr
";
					if (strPSpezial == "RI")  // 01.08.23 Ä2120 RechInsol
					{
						strSelect = @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkbuchtext, rkkzzahl,
(rkdmleis+rkdmarzn+rkmbdmopl), rkdmmahn, rkdmzins,   (rkzaleis+rkzaarzn+rkmbzaopl), rkzamahn, rkzazins,
rkmahnstufe, rkmahnltzt, aname1, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland,
(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText, :frmMain.nKZZahl,
:frmMain.nDMRechL, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRechL, :frmMain.nZaMahn, :frmMain.nZaZins,
:frmMain.nMS, :frmMain.dtMahnDat, :frmMain.strTAN1, :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
:frmMain.nRepDMOP
FROM rk,a,h
WHERE rkarztnr IN (:frmMBKEinzeldruck.nA1, :frmMBKEinzeldruck.nArztNr2) AND rkhalternr=:frmMBKEinzeldruck.nHalterNr AND rkdeaktiv IS NULL AND rkkzzahl < 2
AND (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)<>0
AND rkarztnr=aarztnr AND rkarztnr=harztnr AND rkhalternr=hhalternr
";
					}
					else if (strPSpezial == "") 
					{
						// 30.07.12 F1376
						// Set strSelect = strSelect || 'AND rkkzzahl<2 and (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)>0
						// '
						strSelect = strSelect + @"AND rkkzzahl<2 and (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)<>0
";
					}
					// 06.07.07 F198
					// Set strSelect = strSelect || 'ORDER BY rkrechdat, rkrechnr'
					strSelect = strSelect + "ORDER BY rkarztnr, rkrechnr";
					// Set frmMain.nTHNrAlt = 0
					// Set frmMain.nTANrAlt = 0
					// 07.04.10 OTÄ135
					Int.SqlImmedSel(@"SELECT sum(hbdm)
		INTO :dlgLlDruck.nRZOffen
		FROM hb
		WHERE hbarztnr IN (:frmRgSuchen.nArztNr, :frmRgSuchen.nArztNr2) AND hbhalternr=:frmRgSuchen.dfHalterNr");
					// 19.10.16 Ä1408
					// If PalFA(0, frmRgSuchen.nArztNr, frmRgSuchen.dfHalterNr, '', 0, SalDateCurrent(  ), TRUE, TRUE, TRUE)
					// Call SqlImmedSel('SELECT sum(fazinsdm) FROM fa INTO :dlgLlDruck.nFAZins
					// WHERE faproznr in (SELECT prnr FROM pr WHERE prarztnr IN (:frmRgSuchen.nArztNr, :frmRgSuchen.nArztNr2) AND prhalternr=:frmRgSuchen.dfHalterNr)
					// AND fauser = :strBNUser')
					if (Int.PalFA(0, App.frmRgSuchen.nArztNr, App.frmRgSuchen.dfHalterNr.Number, "", 0, SalDateTime.Current, true, false, true)) 
					{
						Int.SqlImmedSel(@"SELECT sum(fazinsdm) FROM fa INTO :dlgLlDruck.nFAZins
WHERE faproznr in (SELECT prnr FROM pr WHERE prarztnr IN (:frmRgSuchen.nArztNr, :frmRgSuchen.nArztNr2) AND prhalternr=:frmRgSuchen.dfHalterNr)
AND fauser = :strBNUser");
					}


					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Forderungsaufstellung.lst" || strPBericht == "Liste der Kosten.lst") 
				{
					strSelect = @"SELECT faproznr, fadatum, fatext, fazinshf, fadmhf, fazinsko, fadmko, faseitko, faunvzdm, faunvzdmtit, fazinsdm
INTO :nProzNr, :dtFADate, :strAZ, :nZinsen, :nDMRech,
:nZinsKo, :nDMKo, :dtSeit, :nUnvzDM, :nUnvzDMTit, :nZinsDM
FROM fa WHERE fauser = :strBNUser  ";
					if (strPBericht == "Liste der Kosten.lst") 
					{
                        // 14.03.24 ### + AND fatext <> \'Nebenforderung\' AND fatext <> \'Mahnbescheid\'
                        strSelect = strSelect + "AND (faunvzdm<>0 OR faunvzdmtit<>0) AND fatext <> \'Zahlung\' AND fatext <> \'Nebenforderung\' AND fatext <> \'Mahnbescheid\' ";
                    }
					strSelect = strSelect + "ORDER BY faproznr, fadatum, fazinsdm";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Rechnungsprotokoll.lst") 
				{
					if (App.frmRechProtneu.PalAnfang()) 
					{
					}
					// 13.09.10 OTÄ393 + , sum(lepbeihilfe)
					// 20.10.15 Ä1252 + hsperrdatum
					// 17.05.17 Ä1378 + Dateiname
					// 23.10.18 Ä1798 + hpmemail
					// 27.09.23 Ä2140 + LEPFREMDRECHNUNGSNR
					App.frmRechProtneu.strSelect = @"SELECT akzpraxart, learztnr, hnn || ', ' || hti || hvn,HNAME2,HSTR,hland || ' ' || HORT, hustid, hsperrdatum, hpmemail, ledigitalmail,
lekennungta, lehalternr,leposnr,lerechnr, lereverse, ledateiname,
lepmwst, lepla, sum(lepdm), sum(lepbeihilfe), min(lepfremdrechnungsnr), max(lepfremdrechnungsnr)
INTO :frmRechProtneu.nKZPraxArt, :frmRechProtneu.nTANr,
:frmRechProtneu.strTHN1, :frmRechProtneu.strTHN2, :frmRechProtneu.strTHStr, :frmRechProtneu.strTHOrt, :frmRechProtneu.strTHUStID, :dlgLlDruck.dtDummy, :frmRechProtneu.strHPMEMail, :frmRechProtneu.strDigitalMail,
:frmRechProtneu.strKennungTA, :frmRechProtneu.nTHNr,:frmRechProtneu.nPosNr,:frmRechProtneu.nRechNr, , :frmRechProtneu.nReverse, :frmRechProtneu.strDateiName,
:frmRechProtneu.nMwSt, :frmRechProtneu.strLA, :frmRechProtneu.nNetto, :frmRechProtneu.nRPBeihilfe, :frmRechProtneu.strFremdrechnungsnrMin, :frmRechProtneu.strFremdrechnungsnrMax
FROM le, lep, h, a  WHERE " + Int.PalArztNr("le", App.frmRechProtneu.nArztNr, App.frmRechProtneu.nArztNr2) + @"
AND lebearbeiter=:frmRechProtneu.strBearbeiter
AND le.lebearbdatum=:frmRechProtneu.dtBearbDatum
AND learztnr = leparztnr AND lehalternr=lephalternr AND lebearbeiter=lepbearbeiter AND le.lebearbdatum = lep.lebearbdatum
 AND leposnr=lepposnr AND learztnr=harztnr AND lehalternr=hhalternr AND learztnr=aarztnr AND hdeaktiv IS NULL
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18";
					// If SqlHandleExec(frmRechProtneu.hSqlLe,frmRechProtneu.strSelect,'Rechnungsprotokoll', nErr) != IDOK
					// Return FALSE
					if (!(Sql.PrepareAndExecute(App.frmRechProtneu.hSqlLe, App.frmRechProtneu.strSelect))) 
					{
						return false;
					}
					else
					{
						Sql.GetResultSetCount(App.frmRechProtneu.hSqlLe, ref nCountRec);
						// Call SqlCommit(frmRechProtneu.hSqlLe)
						return true;
					}
				}
				else if (strPBericht == "Mahnvorschlag.lst") 
				{
					nRow = Sys.TBL_MinRow;
					return true;
				}
				else if (strPBericht == "Portooptimierung.lst") 
				{
					nCountRec = 1;
					return true;
				}
				else if (strPBericht == "VetAmt-Antrag.crd") 
				{
					if (Int.SqlImmed("UPDATE tsk SET tskantrdat = '1900-01-01' WHERE tskantrdat IS NULL")) 
					{
					}
					strSelect = @"SELECT DISTINCT vacode, vaname1, vaname2, vastr, vaort
			INTO :frmMain.strVACode, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt
			FROM va, tsk
			WHERE tskantrdat = '1900-01-01' and vacode=@LEFT(tskregnr,5)
			ORDER BY vacode";
					// If NOT SqlPrepar(hSqlLlDruck,strSelect)
					// Return FALSE
					// Else
					// If NOT SqlExecute(hSqlLlDruck)
					// Return FALSE
					// Else
					// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
					// Return TRUE
					Var.nErr = Int.SqlHandleExec(hSqlLlDruck, strSelect, "Druck", ref nCount);
					nCount = hSqlLlDruck.GetResultSetCount();
					if (Var.nErr == Sys.IDOK) 
					{
						return true;
					}
					else
					{
						return false;
					}
				}
				// Else If strPBericht = 'TSK-Beihilfen.lst'
				// Set strSelect = 'SELECT tskarztnr, tskhalternr, tskbeihdat, tskbeihilfe, tskbeihtext, tskregnr, tskerfdat,
				// hti || hvn || \' \' || hnn, hname2, hstr, hland, hort,
				// aname1, aname2, astr, aort, aland
				// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.dtDatum, :frmMain.nBeihilfe, :frmMain.strBeihText, :frmMain.strRegNr, :frmMain.dtErfDat,
				// :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHLand, :frmMain.strTHOrt,
				// :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand
				// FROM tsk, h, a
				// WHERE (tsktadruckdat IS NULL Or tsktadruckdat ='1900-1-1') AND tskbeihdat IS NOT NULL
				// AND tskarztnr = harztnr AND tskhalternr = hhalternr AND tskarztnr=aarztnr
				// ORDER BY tskarztnr'
				// If NOT SqlPrepar(hSqlLlDruck,strSelect)
				// Return FALSE
				// Else
				// If NOT SqlExecute(hSqlLlDruck)
				// Return FALSE
				// Else
				// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
				// Return TRUE
				else if (strPBericht == "Ratenzahler-Vereinbarung.lst" || strPBericht == "RaZaVerBrief.crd" || strPBericht == "RaZaReakt.crd") 
				{
					// 30.03.21 Ä1953 + , rzopdm, rzaktivdat
					App.frmMain.dtBuchDat = SalDateTime.Null;
					App.frmMain.nDMOP = SalNumber.Null;
					if (strPBericht == "Ratenzahler-Vereinbarung.lst") 
					{
						strSelect = @"SELECT rznr, rzarztnr, rzhalternr, rzzins, rzerfdat, rzrate, rztag, rzparztnr, rzphalternr, rzprechnr, rzpausebis,
rzkuenddat, rzopdm, rzaktivdat,
hti || hvn || ' ' || hnn, hname2, hstr, hland, hort,
aname1, aname2, astr, aort, aland, anr2,
rkdmleis-rkzaleis, rkdmarzn-rkzaarzn, rkdmmahn-rkzamahn, rkdmzins-rkzazins, rkmbdmopl-rkmbzaopl, rkrechdat
INTO :frmMain.nRZNr, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRZZins, :frmMain.dtErfDat, :frmMain.nRZRate, :frmMain.nRZTag, :frmMain.nRZArztNr, :frmMain.nRZHalterNr, :frmMain.nRZRechNr, :frmMain.dtRZPauseBis,
:frmMain.dtRZKuendDat, :frmMain.nDMOP, :frmMain.dtBuchDat,
:frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHLand, :frmMain.strTHOrt,
:frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.nTANr2,
:frmMain.nRZLeis, :frmMain.nRZArzn, :frmMain.nRZMahn, :frmMain.nRZZins, :frmMain.nRZMBOpl, :frmMain.dtRechDat
FROM rz, rzp, rk, h, a
WHERE rzarztnr = harztnr AND rzhalternr = hhalternr AND rzarztnr=aarztnr AND rznr = rzpnr AND rkdeaktiv IS NULL  AND rzdeaktiv IS NULL  AND hdeaktiv IS NULL
AND rzparztnr=rkarztnr AND rzphalternr=rkhalternr AND rzprechnr=rkrechnr " + strPSpezial + @"
ORDER BY rznr, rzarztnr, rzhalternr";
					}
					else if (strPBericht == "RaZaVerBrief.crd" || strPBericht == "RaZaReakt.crd") 
					{
						strSelect = @"SELECT rznr, rzarztnr, rzhalternr, rzzins, rzerfdat, rzrate, rztag, rzpausebis, rzkuenddat, rzopdm, rzaktivdat,
hti || hvn || ' ' || hnn, hname2, hstr, hland, hort,
aname1, aname2, astr, aort, aland, anr2
INTO :frmMain.nRZNr, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRZZins, :frmMain.dtErfDat, :frmMain.nRZRate, :frmMain.nRZTag, :frmMain.dtRZPauseBis, :frmMain.dtRZKuendDat, :frmMain.nDMOP, :frmMain.dtBuchDat,
:frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHLand, :frmMain.strTHOrt,
:frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.nTANr2
FROM rz, h, a
WHERE rzarztnr = harztnr AND rzhalternr = hhalternr AND rzarztnr=aarztnr " + strPSpezial + @" AND hdeaktiv IS NULL AND rzdeaktiv IS NULL
ORDER BY rznr, rzarztnr, rzhalternr";
					}
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Ratenzahler-Tilgungsplan.lst") 
				{
					// 30.03.21 Ä1953 + , rzopdm, rzaktivdat
					App.frmMain.dtBuchDat = SalDateTime.Null;
					App.frmMain.nDMOP = SalNumber.Null;
					strSelect = @"SELECT rznr, rzarztnr, rzhalternr, rzzins, rzerfdat, rzrate, rztag, rzpausebis, rzopdm, rzaktivdat,
hti || hvn || ' ' || hnn, hname2, hstr, hland, hort,
sum(rkdmleis-rkzaleis+ rkdmarzn-rkzaarzn+ rkdmmahn-rkzamahn+ rkdmzins-rkzazins+ rkmbdmopl-rkmbzaopl)
INTO :frmMain.nRZNr, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRZZins, :frmMain.dtErfDat, :frmMain.nRZRate, :frmMain.nRZTag, :frmMain.dtRZPauseBis, :frmMain.nDMOP, :frmMain.dtBuchDat,
:frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHLand, :frmMain.strTHOrt,
:dlgLlDruck.nRZOffen
FROM rz, rzp, rk, h
WHERE rzarztnr = harztnr AND rzhalternr = hhalternr AND rznr = rzpnr AND hdeaktiv IS NULL  AND rzdeaktiv IS NULL  AND rkdeaktiv IS NULL
AND rzparztnr=rkarztnr AND rzphalternr=rkhalternr AND rzprechnr=rkrechnr " + strPSpezial + @"
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							nRZOffen = SalNumber.Null;
							return true;
						}
					}
				}
				else if (strPBericht == "RaZa-Kündigung.crd" || strPBericht == "RaZa-KündInfoM.crd" || strPBericht == "RaZa-Kündigungsliste.lst" || strPBericht == "RaZa-Schlußbrief.crd" || strPBericht == "RaZa-MS5TAInfo.crd") 
				{
					nRow = Sys.TBL_MinRow;
					return true;
				}
				else if (strPBericht == "RaZa-Aktivierung.crd") 
				{
					App.frmMain.bNoFetch = false;
					return true;
				}
				else if (strPBericht == "Historie.lst" || strPBericht == "TKSuch.lst" || strPBericht == "BEZ-Buchungen.lst") 
				{
					nRow = Sys.TBL_MinRow;
					return true;
				}
				else if (strPBericht == "PM-Kontrolle.lst") 
				{
					Int.SqlImmed("UPDATE dk SET dkerldat = NULL  WHERE dkerldat ='1900-1-1'");
					dtMin = SalDateTime.Current;
					strSelect = @"SELECT dkarztnr, min(dkrechnr), max(dkrechnr)
INTO :frmMain.nTANr, :dlgLlDruck.nMin, :dlgLlDruck.nMax
FROM dk
WHERE dkerldat IS NULL AND dkdruck LIKE 'Rechnung%'
GROUP BY dkarztnr";
					if (!(Int.SqlPrepar(hSqlLlDruck2, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck2.Execute())) 
						{
							return false;
						}
						else
						{
							nFetch = hSqlLlDruck2.FetchNext();
							while (nFetch != Sys.FETCH_EOF) 
							{
								// 15.10.10 OTÄ465 + dkrechnr BETWEEN :dlgLlDruck.nMin AND :dlgLlDruck.nMax AND
								// (dkerldat IS NULL Or dkerldat ='1900-1-1') AND
								// 07.05.12 F1301
								// Call SqlImmed('UPDATE dk SET dkerldat = :dlgLlDruck.dtMin
								// WHERE dkrechnr BETWEEN :dlgLlDruck.nMin AND :dlgLlDruck.nMax AND
								// (dkerldat IS NULL Or dkerldat ='1900-1-1') AND
								// dkdruck LIKE \'Rechnung%\' AND dkarztnr = :frmMain.nTANr ')
								Int.SqlImmed(@"UPDATE dk SET dkerldat = '1900-01-01'
WHERE dkrechnr BETWEEN :dlgLlDruck.nMin AND :dlgLlDruck.nMax AND dkerldat IS NULL  AND dkdruck LIKE 'Rechnung%' AND dkarztnr = :frmMain.nTANr ");

								this.nCountKunden = nMin;
								// 15.10.10 OTÄ465 +  AND dkerldat = :dlgLlDruck.dtMin
								Int.SqlImmed("UPDATE dk SET dkinkl=1 WHERE dkdruck LIKE \'Rechnung%\' AND dkarztnr = :frmMain.nTANr And dkrechnr = :dlgLlDruck.nCountKunden AND dkerldat = '1900-01-01'");
								this.nCountKunden = nMax;
								Int.SqlImmed("UPDATE dk SET dkinkl=1 WHERE dkdruck LIKE \'Rechnung%\' AND dkarztnr = :frmMain.nTANr And dkrechnr = :dlgLlDruck.nCountKunden  AND dkerldat = '1900-01-01'");
								this.nCountKunden = ((nMax - nMin) * 0.25m + nMin).Round();
								Int.SqlImmed("UPDATE dk SET dkinkl=1 WHERE dkdruck LIKE \'Rechnung%\' AND dkarztnr = :frmMain.nTANr And dkrechnr = :dlgLlDruck.nCountKunden  AND dkerldat = '1900-01-01'");
								this.nCountKunden = ((nMax - nMin) * 0.75m + nMin).Round();
								Int.SqlImmed("UPDATE dk SET dkinkl=1 WHERE dkdruck LIKE \'Rechnung%\' AND dkarztnr = :frmMain.nTANr And dkrechnr = :dlgLlDruck.nCountKunden  AND dkerldat = '1900-01-01'");

								nFetch = hSqlLlDruck2.FetchNext();
							}
						}
					}
					// 10.02.14
					// Call SqlDisconnect( hSqlLlDruck2)
					// Call SqlDisconnect(hSqlLlDruck)
					// Call SqlFreeSession( hSession )
					// Call SqlCreateSession(hSession,'')
					// Call SqlCreateStatement (hSession, hSqlLlDruck)
					// Call SqlSetIsolationLevel(hSqlLlDruck,'RO')
					// Call SqlCreateStatement (hSession, hSqlLlDruck2)
					// Call SqlSetIsolationLevel(hSqlLlDruck2,'RO')

					strSelect = @"SELECT dkdatum, dkdruck, dkuser, dkarztnr, dkhalternr, dkrechnr, dkname, dkort, dkland, ROWID
INTO :frmMain.dtDatum, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.strTHN1, :frmMain.strTHOrt, :frmMain.strTHLand, :frmMain.strROWID
FROM dk
WHERE dkerldat = '1900-01-01' AND dkinkl=1
ORDER BY dkland, dkort";
					// If NOT SqlPrepar(hSqlLlDruck,strSelect)
					// Return FALSE
					// Else
					// If NOT SqlExecute(hSqlLlDruck)
					// Return FALSE
					// Else
					// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
					// Return TRUE
					Var.nErr = Int.SqlHandleExec(hSqlLlDruck, strSelect, "Druck", ref nCount);
					nCount = hSqlLlDruck.GetResultSetCount();
					if (Var.nErr == Sys.IDOK) 
					{
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "Scheckliste.lst") 
				{
					strSelect = @"SELECT dlcode, dlerfdat, dlname, dlid, dldm
INTO :frmMain.strBezeichnung, :frmMain.dtDatum, :frmMain.strTAN2, :frmMain.nTANr, :frmMain.nTHNr
FROM dl
WHERE dlcode LIKE 'SCH%' AND dlerldat IS NULL Or dlerldat ='1900-1-1'
ORDER BY dlerfdat";
					dtMinScheck = SalDateTime.Current;
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "KA-Zu-abgänge.lst") 
				{
					if (!(hSqlLlDruck.Prepare(@"SELECT aarztnr, aname1, aname2, astr, aort, aland, aeintr, agestorben, aaustritt
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.dtEintritt,
			:dlgLlDruck.dt1, :dlgLlDruck.dt2
			FROM a
			WHERE (aeintr BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis)
			OR (agestorben BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis)
			OR (aaustritt BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis)
			ORDER BY aarztnr"))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Zahlungsinfos.lst")  // 19.01.11 Ä498
				{
					// 13.09.11 Ä593 zan = :strBNZei  -> (zan = :strBNZei OR zan IN (SELECT bncode FROM bn WHERE bnvertr = :strBNZei) )
					strSelect = @"SELECT zarztnr, zhalternr, zrechnr, zvon, zan,
zdatum, zzm, zzmdm, zbemerk, hti || hvn || ' ' || hnn, hname2, hstr, hland || ' ' || hort, zproznr
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.strVon, :frmMain.strAn,
:frmMain.dtDatum, :frmMain.strMeldung, :frmMain.nZMDM, :frmMain.lsBemerk, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.nProzNr
FROM z, h
WHERE zart = 'ZI'
AND zerledigt <> 'J'  AND (zan = :strBNZei OR zan IN (SELECT bnzei FROM bn WHERE bnvertr = :strBNZei) ) AND hdeaktiv IS NULL  AND zdeaktiv IS NULL
AND zarztnr=harztnr AND zhalternr=hhalternr
ORDER BY zarztnr, zdatum";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "TSK-InfoH.crd")  // 21.06.11 Ä583
				{
					strSelect = @"SELECT  harztnr, hhalternr, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
			INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand
			FROM h
			WHERE harztnr*1000000+hhalternr IN (" + strPSpezial + @") AND hdeaktiv IS NULL
			ORDER BY harztnr, hhalternr";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "TSK-Erinnerungen.lst")  // 04.07.11 Ä600
				{
					if (1 == dlgEinDat2.ModalDialog(this, "Bitte den Stichtag (Erfassungsdatum) für die Erinnerungen wählen:", ref dt2)) 
					{
						strSelect = @"SELECT tskarztnr, tskhalternr, tskdatum, tsktyp, tskregnr, tskerfdat,
tskptext, tskpwert,
hti || hvn || ' ' || hnn, hname2, hstr, hland, hort,
aname1, aname2, astr, aort, aland
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.dtDatum, :frmMain.strBeihText, :frmMain.strRegNr, :frmMain.dtErfDat,
:frmMain.strText, :frmMain.nDM,
:frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHLand, :frmMain.strTHOrt,
:frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand
FROM tsk, tskp, h, a
WHERE tskerldat IS NULL AND tskerfdat <= :dlgLlDruck.dt2
AND tskarztnr=tskparztnr AND tskhalternr=tskphalternr AND tskerfdat=tskperfdat
AND (tskptext LIKE '%mpfu%' OR tskptext LIKE '%probe%') AND hdeaktiv IS NULL  AND tskdeaktiv IS NULL
AND tskarztnr = harztnr AND tskhalternr = hhalternr AND tskarztnr=aarztnr
ORDER BY tskarztnr, tskhalternr";
						if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
						{
							return false;
						}
						else
						{
							if (!(hSqlLlDruck.Execute())) 
							{
								return false;
							}
							else
							{
								nCountRec = hSqlLlDruck.GetResultSetCount();
								return true;
							}
						}
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "KreuztabelleRG.lst")  // 30.12.11
				{
					// If NOT SqlPrepare(hSqlDisk,'SELECT akdatum, akdm, akrechsumm
					// 			INTO :dtRechDat, :nRechGeb, :nRechDM
					// 			FROM ak
					// 			WHERE aktyp=\'RG\' AND akdatum>=@YEARBEG(SYSDATE - 7 YEARS)')
					// Return FALSE
					strSelect = @"SELECT @YEAR(akdatum), @MONTH(akdatum), SUM(akdm), SUM(akrechsumm) INTO :frmMain.nJahr, :frmMain.nKonto, :frmMain.nRechGeb, :frmMain.nRechDM
FROM ak WHERE aktyp='RG' AND akdatum>=@YEARBEG(SYSDATE - 7 YEARS) AND akdeaktiv IS NULL ";
					// 06.05.22
					if (strPSpezial == "YTD") 
					{
						strSelect = strSelect + @"
AND (@MONTH(akdatum) < @MONTH( SYSDATE ) OR (@MONTH(akdatum) = @MONTH( SYSDATE ) AND @DAY( akdatum ) <= @DAY( SYSDATE ))) ";
					}

					strSelect = strSelect + " GROUP BY 1,2";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "KreuztabelleMG.lst")  // 30.12.11
				{
					strSelect = @"SELECT @YEAR(akdatum), @MONTH(akdatum), SUM(akdm), SUM(akrechsumm) INTO :frmMain.nJahr, :frmMain.nKonto, :frmMain.nRechGeb, :frmMain.nRechDM
FROM ak WHERE aktyp='MG' AND akdatum>=@YEARBEG(SYSDATE - 7 YEARS) AND akdeaktiv IS NULL ";
					// 06.05.22
					if (strPSpezial == "YTD") 
					{
						strSelect = strSelect + @"
AND (@MONTH(akdatum) < @MONTH( SYSDATE ) OR (@MONTH(akdatum) = @MONTH( SYSDATE ) AND @DAY( akdatum ) <= @DAY( SYSDATE ))) ";
					}

					strSelect = strSelect + " GROUP BY 1,2";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "InfoZahlungen.lst")  // 14.08.12 Ä796
				{
					Sal.TblKillEdit(App.frmRgSuchen.tblHZahlungen);
					if (Sal.TblAnyRows(App.frmRgSuchen.tblHZahlungen, 0, 0)) 
					{
						nRow = Sys.TBL_MinRow;
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "DublPruef.lst")  // 20.08.12 F1394
				{
					Sal.TblKillEdit(App.frmDublPruef.tblDubl);
					if (Sal.TblAnyRows(App.frmDublPruef.tblDubl, 0, 0)) 
					{
						nRow = Sys.TBL_MinRow;
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "DublPruef2.lst")  // 20.08.12 F1394
				{
					Sal.TblKillEdit(App.frmDublPruef2.tblDubl);
					if (Sal.TblAnyRows(App.frmDublPruef2.tblDubl, 0, 0)) 
					{
						nRow = Sys.TBL_MinRow;
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "VKZ-Mg.lst")  // 05.09.12 Ä814
				{
					Sal.TblKillEdit(App.frmVKZ.tblMahn);
					if (Sal.TblAnyRows(App.frmVKZ.tblMahn, 0, 0)) 
					{
						nRow = Sys.TBL_MinRow;
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "VKZ-MBaus.lst")  // 05.09.12 Ä814
				{
					Sal.TblKillEdit(App.frmVKZ.tblMBAus);
					if (Sal.TblAnyRows(App.frmVKZ.tblMBAus, 0, 0)) 
					{
						nRow = Sys.TBL_MinRow;
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "VKZ-Insol.lst")  // 05.09.12 Ä814
				{
					Sal.TblKillEdit(App.frmVKZ.tblInsol);
					if (Sal.TblAnyRows(App.frmVKZ.tblInsol, 0, 0)) 
					{
						nRow = Sys.TBL_MinRow;
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "VKZ-RaZa.lst")  // 05.09.12 Ä814
				{
					Sal.TblKillEdit(App.frmVKZ.tblRaZa);
					if (Sal.TblAnyRows(App.frmVKZ.tblRaZa, 0, 0)) 
					{
						nRow = Sys.TBL_MinRow;
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "VKZ-RgInfo.lst")  // 18.09.12 Ä820
				{
					Sal.TblKillEdit(App.frmVKZ.tblRgInfo);
					if (Sal.TblAnyRows(App.frmVKZ.tblRgInfo, 0, 0)) 
					{
						nRow = Sys.TBL_MinRow;
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "VKZ-RgInfoa.lst")  // 07.08.14 F2108
				{
					Sal.TblKillEdit(App.frmVKZ.tblRgInfoa);
					if (Sal.TblAnyRows(App.frmVKZ.tblRgInfoa, 0, 0)) 
					{
						nRow = Sys.TBL_MinRow;
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "StatAbrg.lst")  // 10.12.12 Ä854
				{
					Sal.TblKillEdit(App.frmStatAbrg.tblAbr);
					if (Sal.TblAnyRows(App.frmStatAbrg.tblAbr, 0, 0)) 
					{
						nRow = Sys.TBL_MinRow;
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "Serienbrief.crd") 
				{
					// Call SalRTFTextSelectAll( frmSerienbrief.rtcText )
					// Set nErr = SalRTFTextCopy( frmSerienbrief.rtcText, strDummy1, 32000000 )
					if (strPBericht == "Serienbrief.crd") 
					{
						App.frmSerienbrief.axRTF.PropGetText(ref Var.strDummy1);
					}
					if (strPSpezial == "1") 
					{
						Var.strDummy = "asvname1, asvname2, asvstr, asvort, asvland";
					}
					else
					{
						Var.strDummy = "aname1, aname2, astr, aort, aland";
					}
					if (!(Int.SqlPrepar(hSqlLlDruck, "SELECT aarztnr, " + Var.strDummy + @", aemail, atelfax
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.strTAEMail, :frmMain.strTAFax
			FROM a
			WHERE " + App.frmSerienbrief.strAuswahl + @" aaustritt IS NULL AND agestorben IS NULL
			ORDER BY aarztnr"))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "SerienbriefH.crd")  // 03.01.13
				{
					App.frmSerienbriefH.axRTF.PropGetText(ref Var.strDummy1);
					if (!(Int.SqlPrepar(hSqlLlDruck, @"SELECT harztnr, hhalternr, hti, hvn, hnn, hname2, hstr, hort, hland, hemail
			INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand, :frmMain.strTAEMail
			FROM h
			WHERE " + App.frmSerienbriefH.strAuswahl + @" harztnr>0 AND hdeaktiv IS NULL
			ORDER BY harztnr, hhalternr"))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Rückrufliste.lst")  // 19.01.11 Ä498
				{
					strSelect = @"SELECT rrdatum, rruser, rrpraxis, rrname, rrbemerk, rrrufnr, rrerluser, rrerldat
INTO :frmMain.dtDatum, :frmMain.strUser, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.lsBemerk, :frmMain.strTAFax, :frmMain.strTAOrt, :frmMain.dtRepZahlDat
FROM rr
WHERE rrdatum BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
ORDER BY rrdatum";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "BriefM-MwSt-0.lst") 
				{
					// 03.11.14 Ä1067
					Int.SqlImmedSel(@"SELECT aarztnr, aname1, aname2, astr, aort, aland,
			abank, ablz, akonto, aeintr, atelpraxis, atelhandy, atelprivat, atelfax, aemail
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
			:frmMain.strBank, :frmMain.strBLZ, :frmMain.strKonto, :frmMain.dtEintritt,
			:frmMain.strTATelPraxis, :frmMain.strTATelHandy, :frmMain.strTATelPrivat, :frmMain.strTAFax, :frmMain.strTAEMail
			FROM a
			WHERE aarztnr = :frmAbrBearb.tblAbrHalter.colnArztNr");
					nRow = Sys.TBL_MinRow;
					return true;

				}
				else if (strPBericht == "RP-Sperrinfo.lst") 
				{
					if (!(hSqlLlDruck.PrepareAndExecute(@"SELECT learztnr, hnn || ', ' || hti || hvn,HNAME2,HSTR,hland || ' ' || HORT, hustid,
lehalternr,leposnr,lerechnr, lereverse
INTO  :frmRechProtneu.nTANr,
:frmRechProtneu.strTHN1, :frmRechProtneu.strTHN2, :frmRechProtneu.strTHStr, :frmRechProtneu.strTHOrt, :frmRechProtneu.strTHUStID,
:frmRechProtneu.nTHNr,:frmRechProtneu.nPosNr,:frmRechProtneu.nRechNr, :frmRechProtneu.nReverse
FROM le, h, a  WHERE " + Int.PalArztNr("le", App.frmRechProtneu.nArztNr, App.frmRechProtneu.nArztNr2) + @"
AND lebearbeiter=:frmRechProtneu.strBearbeiter
AND le.lebearbdatum=:frmRechProtneu.dtBearbDatum
AND learztnr=harztnr AND lehalternr=hhalternr AND learztnr=aarztnr
AND hsperrdatum IS NOT NULL"))) 
					{
						return false;
					}
					else
					{
						nCountRec = hSqlLlDruck.GetResultSetCount();
						// Call SqlCommit(frmRechProtneu.hSqlLe)
						return true;
					}
				}
				else if (strPBericht == "RR je Benutzer.lst")  // 16.01.16 F2603
				{
					strRRDummy = SalDateTime.Current.Year().ToString(0);
					if (1 == dlgEinString.ModalDialog(this, "Für welches Jahr soll die Auswertung durchgeführt werden?", ref strRRDummy)) 
					{
						nRRJahr = Int.PalValNum(strRRDummy) - 1900;

						if (!(Int.SqlPrepar(hSqlLlDruck, @"SELECT rrdatum, rrerluser, rrerldat  INTO :dlgLlDruck.dtRRDatum, :dlgLlDruck.strRRUser, :dlgLlDruck.dtRRErlDat
FROM rr WHERE @YEAR(rrdatum) = :dlgLlDruck.nRRJahr AND rrerluser IS NOT NULL ORDER BY rrerluser"))) 
						{
							return false;
						}
						else
						{
							if (!(hSqlLlDruck.Execute())) 
							{
								return false;
							}
							else
							{
								nCountRec = hSqlLlDruck.GetResultSetCount();
								return true;
							}
						}
					}
				}
				else if (strPBericht == "Pegasus-Nutzer je Monat.lst")  // 26.01.16 Ä1322
				{
					if (!(hSqlLlDruck.PrepareAndExecute(@"SELECT pnddatum, COUNT( DISTINCT pndguid ) INTO :dlgLlDruck.dtRRDatum, :dlgLlDruck.nRRMin
FROM pnd GROUP BY 1"))) 
					{
						return false;
					}
					else
					{
						nCountRec = hSqlLlDruck.GetResultSetCount();
						// Call SqlCommit(frmRechProtneu.hSqlLe)
						return true;
					}
				}
				else if (strPBericht == "Pegasus-Nutzer.lst")  // 26.01.16 Ä1322
				{
					if (!(hSqlLlDruck.PrepareAndExecute(@"SELECT dbarztnr, COUNT( DISTINCT pndguid ) INTO :dlgLlDruck.nRRJahr, :dlgLlDruck.nRRMin
FROM pnd, db WHERE pndguid = dbguid(+) GROUP BY 1"))) 
					{
						return false;
					}
					else
					{
						nCountRec = hSqlLlDruck.GetResultSetCount();
						// Call SqlCommit(frmRechProtneu.hSqlLe)
						return true;
					}
				}
				else if (strPBericht == "Pegasus-NutzerTab.lst")  // 26.01.16 Ä1322
				{
					if (!(hSqlLlDruck.PrepareAndExecute(@"SELECT dbarztnr, pnarztnr, pncomputername, pnpraxis, pnprogver, pnletztdat, pnguid
INTO :dlgLlDruck.nDBArztNr, :dlgLlDruck.nPNArztNr, :dlgLlDruck.strPNCN, :dlgLlDruck.strPNPraxis, :dlgLlDruck.strPNProgVer, :dlgLlDruck.dtPNLetztDat, :dlgLlDruck.strPNGUID
FROM pn, db WHERE pnguid = dbguid(+) ORDER BY dbarztnr, pnarztnr, pnpraxis"))) 
					{
						return false;
					}
					else
					{
						nCountRec = hSqlLlDruck.GetResultSetCount();
						// Call SqlCommit(frmRechProtneu.hSqlLe)
						return true;
					}
				}
				else if (strPBericht == "TVN-Online.lst")  // 09.05.16
				{
					strRRDummy = "2005";
					if (1 == dlgEinString.ModalDialog(this, "Ab welchem Jahr soll die Auswertung durchgeführt werden?", ref strRRDummy)) 
					{
						nRRJahr = Int.PalValNum(strRRDummy) - 1900;

						if (!(Int.SqlPrepar(hSqlLlDruck, @"SELECT @MONTHBEG(LOG.LOGDATE), COUNT(LOG.LOGDATE)
INTO :dlgLlDruck.dtRRDatum, :dlgLlDruck.nRRMin
FROM SYSADM.LOG
WHERE @YEAR(LOG.LOGDATE) >= :dlgLlDruck.nRRJahr AND LOGDATE < @MONTHBEG(SYSDATE) AND  LOG.LOGTEXT = 'LogWeb1' GROUP BY 1"))) 
						{
							return false;
						}
						else
						{
							if (!(hSqlLlDruck.Execute())) 
							{
								return false;
							}
							else
							{
								nCountRec = hSqlLlDruck.GetResultSetCount();
								return true;
							}
						}
					}
				}
				else if (strPBericht == "BEZ-RetoureHalter.crd" || strPBericht == "BEZ-RetoureHalterKL.crd")  // 31.10.16 Ä1436
				{
					App.frmMain.bNoFetch = false;
					return true;
				}
				else if (strPBericht == "EWA-Liste.lst")  // 28.11.16 Ä1437
				{
					// 23.01.17 Ä1476 + ,h und AND harztnr=ewaarztnr AND hhalternr=ewahalternr AND hsperrdatum IS NULL
					if (!(hSqlLlDruck.Prepare(@"SELECT ewaarztnr, ewahalternr, ewazei, ewaabdatum, ewa.ROWID
			INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.strZeichen, :frmMain.dtBuchDat, :frmMain.strROWID
			FROM ewa, h
			WHERE ewaerldat IS NULL AND (ewaabdatum IS NULL or ewaabdatum <= SYSDATE)
			AND harztnr=ewaarztnr AND hhalternr=ewahalternr AND hsperrdatum IS NOT NULL AND hdeaktiv IS NULL
			ORDER BY ewaarztnr, ewahalternr"))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Altersstruktur.lst")  // 14.11.17 Ä1648
				{
					// 18.01.17 + anr2
					// 03.09.18 Ä1648 +, SUM(apumsatz)
					strSelect = @"SELECT COUNT(*), SUM(apumsatz)
			INTO :dlgLlDruck.nStatAnz, :dlgLlDruck.nStatUms
			FROM a, ap
			WHERE aarztnr=aparztnr
			AND aaustritt IS NULL AND agestorben IS NULL ";
					if (strPSpezial != "- Alles -") 
					{
						strSelect = strSelect + @"
			AND apart = :dlgLlDruck.strPSpezial ";
					}
					Int.SqlImmedSel(strSelect);
					strSelect = @"SELECT @CHOOSE( @ISNA(apgebdat), @INT( (@YEAR(SYSDATE) - @YEAR(apgebdat))/5), -1), apgeschlecht, count(*), SUM(apumsatz)
			INTO :dlgLlDruck.nAlter, :dlgLlDruck.strGeschlecht, :dlgLlDruck.nAnzahl, :dlgLlDruck.nRPDM
			FROM a, ap
			WHERE aarztnr=aparztnr
			AND aaustritt IS NULL AND agestorben IS NULL ";
					if (strPSpezial != "- Alles -") 
					{
						strSelect = strSelect + @"
			AND apart = :dlgLlDruck.strPSpezial ";
					}
					strSelect = strSelect + @"
			GROUP BY 1,2";
					if (!(hSqlLlDruck.Prepare(strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							App.frmMain.bNoFetch = true; // 26.04.19 Ä1648 mündlich Sasse
							return true;
						}
					}
				}
				else if (strPBericht == "Anweisungsbelege.lst")  // 05.12.17 Ä1428
				{
					// Set strSelect = 'SELECT abzei, abarztnr, absoll, abhaben, abdm, aberfdat, abdrudat, abmwst, aname1
					// INTO :frmAnwBeleg.tblAB.colZei, :frmAnwBeleg.tblAB.colArztNr, :frmAnwBeleg.tblAB.colSoll, :frmAnwBeleg.tblAB.colHaben,
					// :frmAnwBeleg.tblAB.colDM, :frmAnwBeleg.tblAB.colErfDat, :frmAnwBeleg.tblAB.colDruDat, :frmAnwBeleg.tblAB.colMwSt, :frmAnwBeleg.tblAB.colArztName
					// FROM ab, a WHERE abarztnr=aarztnr ' || strWhere || ' ORDER BY aberfdat DESC'
					if (!(hSqlLlDruck.Prepare(@"SELECT @DECODE( abhaben, 15400,1,0 ), abzei, abarztnr, absoll, abhaben, abdm, aberfdat, abmwst, aname1, abbuchtext
			INTO :dlgLlDruck.nAlter, :dlgLlDruck.strZei, :dlgLlDruck.nArztNr, :dlgLlDruck.nSoll, :dlgLlDruck.nHaben, :dlgLlDruck.nDM,
			:dlgLlDruck.dtErfDat, :dlgLlDruck.nMwSt, :dlgLlDruck.strAName1, :dlgLlDruck.strBuchText
			FROM ab, a WHERE abarztnr=aarztnr(+) AND abdrudat IS NULL ORDER BY 1, abarztnr DESC"))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Vorschussminderungen.lst")  // 28.06.19 Ä1854
				{
					if (!(hSqlLlDruck.Prepare(@"SELECT rkarztnr, rkhalternr, rkrechnr, rkvorschussdm, rkvorschussdat, rkvorschussrueckdm, rkvorschussrueckdat, rkvorschussrueckgrund,
hvn, hnn, hstr, hort, hland
INTO :dlgLlDruck.nArztNr, :dlgLlDruck.nHalterNr, :dlgLlDruck.nRechNr, :dlgLlDruck.nVorschussDM, :dlgLlDruck.dtVorschussDat, :dlgLlDruck.nVorschussRueckDM, :dlgLlDruck.dtVorschussRueckDat, :dlgLlDruck.strVorschussRueckGrund,
:dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.strLand
FROM rk, h
WHERE rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis  AND rkvorschussrueckdat BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
AND harztnr = rkarztnr AND hhalternr = rkhalternr
ORDER BY rkarztnr, rkhalternr, rkvorschussrueckdat"))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Brief Fiskaly.crd")  // 30.07.20 Ä1896
				{
					if (strPSpezial == "1") 
					{
						Var.strDummy = "asvname1, asvname2, asvstr, asvort, asvland";
					}
					else
					{
						Var.strDummy = "aname1, aname2, astr, aort, aland";
					}
					if (!(Int.SqlPrepar(hSqlLlDruck, @"SELECT aarztnr, asvname1, asvname2, asvstr, asvort, asvland, aemail, atelfax, aapikey, aapisecret
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :frmMain.strTAEMail, :frmMain.strTAFax, :frmMain.strTAAPIKey, :frmMain.strTAAPISecret
			FROM a
			WHERE aarztnr = :frmAerzte.dfArztNr"))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "DYMO-Alternative.crd" || strPBericht == "DYMO-AlternativeBarcode.crd") 
				{
					App.frmMain.bNoFetch = false;
					return true;
				}
				else if (strPBericht == "Pharmaliste.lst") 
				{
					// 22.02.12 F1212
					nArztNrL = 0;
					App.frmMain.strTAN1 = "";
					App.frmMain.strTAN2 = "";
					App.frmMain.strTAOrt = "";
					App.frmMain.strTAStr = "";
					App.frmMain.strTALand = "";

					if (strPSpezial.Scan("Vormonate") != -1) 
					{
						dtDDErfDat = new SalDateTime(1900, 1, 1);
						this.dt1 = App.frmMain.dtDatVM;
						// 18.08.11 Ä620
						// 02.12.14 Ä104 + reverseversion
						strSelect = @"SELECT tkasa, tkaarztnr, tkahalternr, tkarechnr, tkabeldat, tkabuchtext,
			tkadmabr, tkadmporto, tkadmzamahn, tkadmzazins, tkadmzamwst, tkatavst, tkarechdm,
			tkadmzaleis, tkadmzaarzn, tkaprozmwst, tksoll, tkhaben, tkareverseversion
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben, :frmMain.nReverseVersion
			FROM tka
			WHERE tkaarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
			AND tkadruckdatum = :frmMain.dtDatVM AND tkadeaktiv IS NULL AND tkasa=4
			ORDER BY tkaarztnr, tkabeldat, tkahalternr";
					}
					else
					{
						strSelect = @"SELECT tksa, tkarztnr, tkhalternr, tkrechnr, tkbeldat, tkbuchtext,
			tkdmabr, tkdmporto, tkdmzamahn, tkdmzazins, tkdmzamwst, tktavst, tkrechdm,
			tkdmzaleis, tkdmzaarzn, tkprozmwst, tksoll, tkhaben, tkreverseversion
			INTO :frmMain.nSA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat, :frmMain.strBuchText,
			:frmMain.nDMRech, :frmMain.nDMPorto, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nDMMwSt, :frmMain.nDMVorst, :frmMain.nDMSoll,
			:frmMain.nDMZaL, ,:frmMain.nDMZaA, :frmMain.nProz, :frmMain.nSoll, :frmMain.nHaben, :frmMain.nReverseVersion
			FROM tk
			WHERE tkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis AND tksa=4
			ORDER BY tkarztnr, tkbeldat, tkhalternr";
					}
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							App.frmMain.nTANrAlt = 0;
							// 22.02.12 F1212
							App.frmMain.bNoFetch = false;

							return true;
						}
					}
				}
				else if (strPBericht == "FordInsol.crd")  // 13.12.21 Ä1979
				{
					App.frmMain.bNoFetch = false;
					return true;
				}
				else if (strPBericht == "Haftbefehl-Antrag.crd")  // 18.04.23 Ä2100
				{
					// 17.06.19 F4506 + mbkagal, prepgma
					// 29.09.21 F4815 + ,preazb, preazc, preazd
					strSelect = @"
SELECT mbkproznr, mbkgername, mbkzustmb, mbkzustvb, mbkaz, mbkdmhf, mbkprozhf, mbkdmmahn, mbkdmmb, mbkdmvb,
mbkprozmbvb, mbkdmva, mbkdmfrueh, mbkzinshf, mbkzinsmb,
mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkagal, prepgma ,preazb, preazc, preazd, sum(zadm)
INTO :frmMBKalender.nProzNr, :frmMBKalender.strGerName, :frmMBKalender.dtZustMB, :frmMBKalender.dtZustVB, :frmMBKalender.strAZ, :frmMBKalender.nDMHF, :frmMBKalender.nProzHF, :frmMBKalender.nDMMahn, :frmMBKalender.nDMMB,
:frmMBKalender.nDMVB,
:frmMBKalender.nProzMBVB, :frmMBKalender.nDMVA, :frmMBKalender.nDMFrueh, :frmMBKalender.nZinsHF, :frmMBKalender.nZinsMB,
:frmMBKalender.strHN1, :frmMBKalender.strHN2, :frmMBKalender.strHS, :frmMBKalender.strHO, :frmMBKalender.strHLand, :frmMBKalender.nPGM ,
:frmMBKalender.strAZb, :frmMBKalender.strAZc, :frmMBKalender.strAZd, :frmMBKalender.nZaDM
FROM mbk, za, pre
WHERE mbktyp = :frmMBKalender.strReportName AND mbkuser = :strBNUser  AND mbkproznr = zaproznr (+) AND zadeaktiv  IS NULL
AND mbkproznr = preproznr
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19, 20, 21,22,23,24";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
                else if (strPBericht == "Liste weiterer Schuldner zum VA.crd")  // 25.07.24 Ä2082 ###
                {
					strSelect = @"
SELECT mbarztnr, mbhalternr, mbnr,
aname1, aname2, astr, aort, anr2,
mbprozhf,
mbdatum, mbgerkosten, mbgername,
mbeheleute, mbehepartner,
preaggm,
preaganra, preagn1a, preagn2a, preagn3a, preagrfa, preagsha, preagplza, preagoa, preagala, prepgma, prepgplza, prepgoa,
preaganrb, preagn1b, preagn2b, preagn3b, preagrfb, preagshb, preagplzb, preagob, preagalb, prepgmb, prepgplzb, prepgob,
preaganrc, preagn1c, preagn2c, preagn3c, preagrfc, preagshc, preagplzc, preagoc, preagalc, prepgmc, prepgplzc, prepgoc,
preaganrd, preagn1d, preagn2d, preagn3d, preagrfd, preagshd, preagplzd, preagod, preagald, prepgmd, prepgplzd, prepgod,
preaggvfua, preaggvvna, preaggvsha, preaggvplza, preaggvoa, preaggvala,
preaggvfub, preaggvvnb, preaggvshb, preaggvplzb, preaggvob, preaggvalb,
preaggvfuc, preaggvvnc, preaggvshc, preaggvplzc, preaggvoc, preaggvalc,
preaggvfud, preaggvvnd, preaggvshd, preaggvplzd, preaggvod, preaggvald,
preaggvfua2, preaggvvna2, preaggvsha2, preaggvplza2, preaggvoa2, preaggvala2,
preaggvfub2, preaggvvnb2, preaggvshb2, preaggvplzb2, preaggvob2, preaggvalb2,
preaggvfuc2, preaggvvnc2, preaggvshc2, preaggvplzc2, preaggvoc2, preaggvalc2,
preaggvfud2, preaggvvnd2, preaggvshd2, preaggvplzd2, preaggvod2, preaggvald2,
preaggvfua3, preaggvvna3, preaggvsha3, preaggvplza3, preaggvoa3, preaggvala3,
preaggvfub3, preaggvvnb3, preaggvshb3, preaggvplzb3, preaggvob3, preaggvalb3,
preaggvfuc3, preaggvvnc3, preaggvshc3, preaggvplzc3, preaggvoc3, preaggvalc3,
preaggvfud3, preaggvvnd3, preaggvshd3, preaggvplzd3, preaggvod3, preaggvald3,
preaggvfua4, preaggvvna4, preaggvsha4, preaggvplza4, preaggvoa4, preaggvala4,
preaggvfub4, preaggvvnb4, preaggvshb4, preaggvplzb4, preaggvob4, preaggvalb4,
preaggvfuc4, preaggvvnc4, preaggvshc4, preaggvplzc4, preaggvoc4, preaggvalc4,
preaggvfud4, preaggvvnd4, preaggvshd4, preaggvplzd4, preaggvod4, preaggvald4
INTO :frmEDA.nTANr, :frmEDA.nTHNr, :frmEDA.nMBNr,
:frmEDA.strTAN1, :frmEDA.strTAN2, :frmEDA.strTAStr, :frmEDA.strTAOrt, :frmEDA.nTANr2,
:frmEDA.nZinsProz,
:frmEDA.dtMBDatum, :frmEDA.nGerKosten, :frmEDA.strGerName,
:frmEDA.nEheleute, :frmEDA.strEhepartner,
:frmEDA.PREAGGM,
:frmEDA.PREAGANRA, :frmEDA.PREAGN1A, :frmEDA.PREAGN2A, :frmEDA.PREAGN3A, :frmEDA.PREAGRFA, :frmEDA.PREAGSHA, :frmEDA.PREAGPLZA, :frmEDA.PREAGOA, :frmEDA.PREAGALA,
:frmEDA.PREPGMA, :frmEDA.PREPGPLZA, :frmEDA.PREPGOA,
:frmEDA.PREAGANRB, :frmEDA.PREAGN1B, :frmEDA.PREAGN2B, :frmEDA.PREAGN3B, :frmEDA.PREAGRFB, :frmEDA.PREAGSHB, :frmEDA.PREAGPLZB, :frmEDA.PREAGOB, :frmEDA.PREAGALB,
:frmEDA.PREPGMB, :frmEDA.PREPGPLZB, :frmEDA.PREPGOB,
:frmEDA.PREAGANRC, :frmEDA.PREAGN1C, :frmEDA.PREAGN2C, :frmEDA.PREAGN3C, :frmEDA.PREAGRFC, :frmEDA.PREAGSHC, :frmEDA.PREAGPLZC, :frmEDA.PREAGOC, :frmEDA.PREAGALC,
:frmEDA.PREPGMC, :frmEDA.PREPGPLZC, :frmEDA.PREPGOC,
:frmEDA.PREAGANRD, :frmEDA.PREAGN1D, :frmEDA.PREAGN2D, :frmEDA.PREAGN3D, :frmEDA.PREAGRFD, :frmEDA.PREAGSHD, :frmEDA.PREAGPLZD, :frmEDA.PREAGOD, :frmEDA.PREAGALD,
:frmEDA.PREPGMD, :frmEDA.PREPGPLZD, :frmEDA.PREPGOD,
:frmEDA.PREAGGVFUa, :frmEDA.PREAGGVVNa, :frmEDA.PREAGGVSHa, :frmEDA.PREAGGVPLZa, :frmEDA.PREAGGVOa, :frmEDA.PREAGGVALa,
:frmEDA.PREAGGVFUb, :frmEDA.PREAGGVVNb, :frmEDA.PREAGGVSHb, :frmEDA.PREAGGVPLZb, :frmEDA.PREAGGVOb, :frmEDA.PREAGGVALb,
:frmEDA.PREAGGVFUc, :frmEDA.PREAGGVVNc, :frmEDA.PREAGGVSHc, :frmEDA.PREAGGVPLZc, :frmEDA.PREAGGVOc, :frmEDA.PREAGGVALc,
:frmEDA.PREAGGVFUd, :frmEDA.PREAGGVVNd, :frmEDA.PREAGGVSHd, :frmEDA.PREAGGVPLZd, :frmEDA.PREAGGVOd, :frmEDA.PREAGGVALd,
:frmEDA.PREAGGVFUa2, :frmEDA.PREAGGVVNa2, :frmEDA.PREAGGVSHa2, :frmEDA.PREAGGVPLZa2, :frmEDA.PREAGGVOa2, :frmEDA.PREAGGVALa2,
:frmEDA.PREAGGVFUb2, :frmEDA.PREAGGVVNb2, :frmEDA.PREAGGVSHb2, :frmEDA.PREAGGVPLZb2, :frmEDA.PREAGGVOb2, :frmEDA.PREAGGVALb2,
:frmEDA.PREAGGVFUc2, :frmEDA.PREAGGVVNc2, :frmEDA.PREAGGVSHc2, :frmEDA.PREAGGVPLZc2, :frmEDA.PREAGGVOc2, :frmEDA.PREAGGVALc2,
:frmEDA.PREAGGVFUd2, :frmEDA.PREAGGVVNd2, :frmEDA.PREAGGVSHd2, :frmEDA.PREAGGVPLZd2, :frmEDA.PREAGGVOd2, :frmEDA.PREAGGVALd2,
:frmEDA.PREAGGVFUa3, :frmEDA.PREAGGVVNa3, :frmEDA.PREAGGVSHa3, :frmEDA.PREAGGVPLZa3, :frmEDA.PREAGGVOa3, :frmEDA.PREAGGVALa3,
:frmEDA.PREAGGVFUb3, :frmEDA.PREAGGVVNb3, :frmEDA.PREAGGVSHb3, :frmEDA.PREAGGVPLZb3, :frmEDA.PREAGGVOb3, :frmEDA.PREAGGVALb3,
:frmEDA.PREAGGVFUc3, :frmEDA.PREAGGVVNc3, :frmEDA.PREAGGVSHc3, :frmEDA.PREAGGVPLZc3, :frmEDA.PREAGGVOc3, :frmEDA.PREAGGVALc3,
:frmEDA.PREAGGVFUd3, :frmEDA.PREAGGVVNd3, :frmEDA.PREAGGVSHd3, :frmEDA.PREAGGVPLZd3, :frmEDA.PREAGGVOd3, :frmEDA.PREAGGVALd3,
:frmEDA.PREAGGVFUa4, :frmEDA.PREAGGVVNa4, :frmEDA.PREAGGVSHa4, :frmEDA.PREAGGVPLZa4, :frmEDA.PREAGGVOa4, :frmEDA.PREAGGVALa4,
:frmEDA.PREAGGVFUb4, :frmEDA.PREAGGVVNb4, :frmEDA.PREAGGVSHb4, :frmEDA.PREAGGVPLZb4, :frmEDA.PREAGGVOb4, :frmEDA.PREAGGVALb4,
:frmEDA.PREAGGVFUc4, :frmEDA.PREAGGVVNc4, :frmEDA.PREAGGVSHc4, :frmEDA.PREAGGVPLZc4, :frmEDA.PREAGGVOc4, :frmEDA.PREAGGVALc4,
:frmEDA.PREAGGVFUd4, :frmEDA.PREAGGVVNd4, :frmEDA.PREAGGVSHd4, :frmEDA.PREAGGVPLZd4, :frmEDA.PREAGGVOd4, :frmEDA.PREAGGVALd4
FROM mb,h,a, pre
WHERE mbarztnr=harztnr and mbhalternr=hhalternr
AND mbarztnr=aarztnr
AND mbnr=preproznr AND hdeaktiv IS NULL
ORDER BY mbnr";
					strSelect = @"SELECT
preaganra, preagn1a, preagn2a, preagn3a, preagrfa, preagsha, preagplza, preagoa, preagala,
preaganrb, preagn1b, preagn2b, preagn3b, preagrfb, preagshb, preagplzb, preagob, preagalb,
preaganrc, preagn1c, preagn2c, preagn3c, preagrfc, preagshc, preagplzc, preagoc, preagalc,
preaganrd, preagn1d, preagn2d, preagn3d, preagrfd, preagshd, preagplzd, preagod, preagald,
preaggvfua, preaggvvna, preaggvsha, preaggvplza, preaggvoa, preaggvala,
preaggvfub, preaggvvnb, preaggvshb, preaggvplzb, preaggvob, preaggvalb,
preaggvfuc, preaggvvnc, preaggvshc, preaggvplzc, preaggvoc, preaggvalc,
preaggvfud, preaggvvnd, preaggvshd, preaggvplzd, preaggvod, preaggvald,
preaggvfua2, preaggvvna2, preaggvsha2, preaggvplza2, preaggvoa2, preaggvala2,
preaggvfub2, preaggvvnb2, preaggvshb2, preaggvplzb2, preaggvob2, preaggvalb2,
preaggvfuc2, preaggvvnc2, preaggvshc2, preaggvplzc2, preaggvoc2, preaggvalc2,
preaggvfud2, preaggvvnd2, preaggvshd2, preaggvplzd2, preaggvod2, preaggvald2,
preaggvfua3, preaggvvna3, preaggvsha3, preaggvplza3, preaggvoa3, preaggvala3,
preaggvfub3, preaggvvnb3, preaggvshb3, preaggvplzb3, preaggvob3, preaggvalb3,
preaggvfuc3, preaggvvnc3, preaggvshc3, preaggvplzc3, preaggvoc3, preaggvalc3,
preaggvfud3, preaggvvnd3, preaggvshd3, preaggvplzd3, preaggvod3, preaggvald3,
preaggvfua4, preaggvvna4, preaggvsha4, preaggvplza4, preaggvoa4, preaggvala4,
preaggvfub4, preaggvvnb4, preaggvshb4, preaggvplzb4, preaggvob4, preaggvalb4,
preaggvfuc4, preaggvvnc4, preaggvshc4, preaggvplzc4, preaggvoc4, preaggvalc4,
preaggvfud4, preaggvvnd4, preaggvshd4, preaggvplzd4, preaggvod4, preaggvald4
INTO
:frmMBKEinzeldruck.nAGANRa, :frmMBKEinzeldruck.strAGN1a, :frmMBKEinzeldruck.strAGN2a, :frmMBKEinzeldruck.strAGN3a, :frmMBKEinzeldruck.strAGRFa,
:frmMBKEinzeldruck.strAGSHa, :frmMBKEinzeldruck.strAGPLZa, :frmMBKEinzeldruck.strAGOa, :frmMBKEinzeldruck.strAGALa,
:frmMBKEinzeldruck.nAGANRb, :frmMBKEinzeldruck.strAGN1b, :frmMBKEinzeldruck.strAGN2b, :frmMBKEinzeldruck.strAGN3b, :frmMBKEinzeldruck.strAGRFb,
:frmMBKEinzeldruck.strAGSHb, :frmMBKEinzeldruck.strAGPLZb, :frmMBKEinzeldruck.strAGOb, :frmMBKEinzeldruck.strAGALb,
:frmMBKEinzeldruck.nAGANRc, :frmMBKEinzeldruck.strAGN1c, :frmMBKEinzeldruck.strAGN2c, :frmMBKEinzeldruck.strAGN3c, :frmMBKEinzeldruck.strAGRFc,
:frmMBKEinzeldruck.strAGSHc, :frmMBKEinzeldruck.strAGPLZc, :frmMBKEinzeldruck.strAGOc, :frmMBKEinzeldruck.strAGALc,
:frmMBKEinzeldruck.nAGANRd, :frmMBKEinzeldruck.strAGN1d, :frmMBKEinzeldruck.strAGN2d, :frmMBKEinzeldruck.strAGN3d, :frmMBKEinzeldruck.strAGRFd,
:frmMBKEinzeldruck.strAGSHd, :frmMBKEinzeldruck.strAGPLZd, :frmMBKEinzeldruck.strAGOd, :frmMBKEinzeldruck.strAGALd,
:frmMBKEinzeldruck.strAGGVFUa, :frmMBKEinzeldruck.strAGGVVNa, :frmMBKEinzeldruck.strAGGVSHa, :frmMBKEinzeldruck.strAGGVPLZa, :frmMBKEinzeldruck.strAGGVOa, :frmMBKEinzeldruck.strAGGVALa,
:frmMBKEinzeldruck.strAGGVFUb, :frmMBKEinzeldruck.strAGGVVNb, :frmMBKEinzeldruck.strAGGVSHb, :frmMBKEinzeldruck.strAGGVPLZb, :frmMBKEinzeldruck.strAGGVOb, :frmMBKEinzeldruck.strAGGVALb,
:frmMBKEinzeldruck.strAGGVFUc, :frmMBKEinzeldruck.strAGGVVNc, :frmMBKEinzeldruck.strAGGVSHc, :frmMBKEinzeldruck.strAGGVPLZc, :frmMBKEinzeldruck.strAGGVOc, :frmMBKEinzeldruck.strAGGVALc,
:frmMBKEinzeldruck.strAGGVFUd, :frmMBKEinzeldruck.strAGGVVNd, :frmMBKEinzeldruck.strAGGVSHd, :frmMBKEinzeldruck.strAGGVPLZd, :frmMBKEinzeldruck.strAGGVOd, :frmMBKEinzeldruck.strAGGVALd,
:frmMBKEinzeldruck.strAGGVFUa2, :frmMBKEinzeldruck.strAGGVVNa2, :frmMBKEinzeldruck.strAGGVSHa2, :frmMBKEinzeldruck.strAGGVPLZa2, :frmMBKEinzeldruck.strAGGVOa2, :frmMBKEinzeldruck.strAGGVALa2,
:frmMBKEinzeldruck.strAGGVFUb2, :frmMBKEinzeldruck.strAGGVVNb2, :frmMBKEinzeldruck.strAGGVSHb2, :frmMBKEinzeldruck.strAGGVPLZb2, :frmMBKEinzeldruck.strAGGVOb2, :frmMBKEinzeldruck.strAGGVALb2,
:frmMBKEinzeldruck.strAGGVFUc2, :frmMBKEinzeldruck.strAGGVVNc2, :frmMBKEinzeldruck.strAGGVSHc2, :frmMBKEinzeldruck.strAGGVPLZc2, :frmMBKEinzeldruck.strAGGVOc2, :frmMBKEinzeldruck.strAGGVALc2,
:frmMBKEinzeldruck.strAGGVFUd2, :frmMBKEinzeldruck.strAGGVVNd2, :frmMBKEinzeldruck.strAGGVSHd2, :frmMBKEinzeldruck.strAGGVPLZd2, :frmMBKEinzeldruck.strAGGVOd2, :frmMBKEinzeldruck.strAGGVALd2,
:frmMBKEinzeldruck.strAGGVFUa3, :frmMBKEinzeldruck.strAGGVVNa3, :frmMBKEinzeldruck.strAGGVSHa3, :frmMBKEinzeldruck.strAGGVPLZa3, :frmMBKEinzeldruck.strAGGVOa3, :frmMBKEinzeldruck.strAGGVALa3,
:frmMBKEinzeldruck.strAGGVFUb3, :frmMBKEinzeldruck.strAGGVVNb3, :frmMBKEinzeldruck.strAGGVSHb3, :frmMBKEinzeldruck.strAGGVPLZb3, :frmMBKEinzeldruck.strAGGVOb3, :frmMBKEinzeldruck.strAGGVALb3,
:frmMBKEinzeldruck.strAGGVFUc3, :frmMBKEinzeldruck.strAGGVVNc3, :frmMBKEinzeldruck.strAGGVSHc3, :frmMBKEinzeldruck.strAGGVPLZc3, :frmMBKEinzeldruck.strAGGVOc3, :frmMBKEinzeldruck.strAGGVALc3,
:frmMBKEinzeldruck.strAGGVFUd3, :frmMBKEinzeldruck.strAGGVVNd3, :frmMBKEinzeldruck.strAGGVSHd3, :frmMBKEinzeldruck.strAGGVPLZd3, :frmMBKEinzeldruck.strAGGVOd3, :frmMBKEinzeldruck.strAGGVALd3,
:frmMBKEinzeldruck.strAGGVFUa4, :frmMBKEinzeldruck.strAGGVVNa4, :frmMBKEinzeldruck.strAGGVSHa4, :frmMBKEinzeldruck.strAGGVPLZa4, :frmMBKEinzeldruck.strAGGVOa4, :frmMBKEinzeldruck.strAGGVALa4,
:frmMBKEinzeldruck.strAGGVFUb4, :frmMBKEinzeldruck.strAGGVVNb4, :frmMBKEinzeldruck.strAGGVSHb4, :frmMBKEinzeldruck.strAGGVPLZb4, :frmMBKEinzeldruck.strAGGVOb4, :frmMBKEinzeldruck.strAGGVALb4,
:frmMBKEinzeldruck.strAGGVFUc4, :frmMBKEinzeldruck.strAGGVVNc4, :frmMBKEinzeldruck.strAGGVSHc4, :frmMBKEinzeldruck.strAGGVPLZc4, :frmMBKEinzeldruck.strAGGVOc4, :frmMBKEinzeldruck.strAGGVALc4,
:frmMBKEinzeldruck.strAGGVFUd4, :frmMBKEinzeldruck.strAGGVVNd4, :frmMBKEinzeldruck.strAGGVSHd4, :frmMBKEinzeldruck.strAGGVPLZd4, :frmMBKEinzeldruck.strAGGVOd4, :frmMBKEinzeldruck.strAGGVALd4
FROM pre WHERE preproznr = :frmMBKEinzeldruck.dfPR1";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
                else if (strPBericht == "Liste der Zahlungen für den VA.lst")  // 26.07.24 Ä2082 ###
                {
                    // 28.05.24 ### Mail Tamara
                    // Set strSelect ='SELECT
                    // zabuchdat, zabelegnr, zadm, @DECODE(zabuchtext, zabuchtext, \'Zahlung\')
                    // INTO
                    // :frmMain.dtBuchDat, :frmMain.nBelNr, :frmMain.nDM, :frmMain.strBuchText
                    // FROM za WHERE zaproznr = :frmMBKEinzeldruck.dfPR1'
                    strSelect = @"SELECT
zabuchdat, zabelegnr, @DECODE(zabuchtext, zabuchtext, 'Zahlung'), SUM(zadm)
INTO
:frmMain.dtBuchDat, :frmMain.nBelNr, :frmMain.strBuchText, :frmMain.nDM
FROM za WHERE zaproznr = :frmMBKEinzeldruck.dfPR1 GROUP BY 1,2,3";
                    ;
                    if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Halterkonto.lst") 
				{
					// 31.07.23 Ä2123
					Int.SqlImmedSel(@"SELECT aarztnr, aname1, aname2, astr, aort, aland,
			abank, ablz, akonto, aeintr, atelpraxis, atelhandy, atelprivat, atelfax, aemail
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
			:frmMain.strBank, :frmMain.strBLZ, :frmMain.strKonto, :frmMain.dtEintritt,
			:frmMain.strTATelPraxis, :frmMain.strTATelHandy, :frmMain.strTATelPrivat, :frmMain.strTAFax, :frmMain.strTAEMail
			FROM a
			WHERE aarztnr = :frmRgSuchen.dfArztNr");
					// Call SqlImmedSel('SELECT hti, hvn, hnn, hname2, hstr, hort
					// 			INTO :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt
					// 			FROM h
					// 			WHERE harztnr = :frmRgSuchen.tblHaBu.colArzt AND hhalternr = :frmRgSuchen.tblHaBu.colHalter')

					// Set nRow = TBL_MinRow
					// Return TRUE
					if (!(Sal.IsNull(App.frmRgSuchen.dfArztNr))) 
					{
						App.frmRgSuchen.nArztNr = App.frmRgSuchen.dfArztNr.Number;
						Int.SqlImmedSel("SELECT ANR2 INTO :frmRgSuchen.nArztNr2 FROM A WHERE AARZTNR = :frmRgSuchen.dfArztNr");
						if (App.frmRgSuchen.nArztNr2 == 0) 
						{
							App.frmRgSuchen.nArztNr2 = App.frmRgSuchen.dfArztNr.Number;
						}
					}
					else
					{
						App.frmRgSuchen.nArztNr2 = App.frmRgSuchen.dfArztNr.Number;
					}
					strSelect = @"SELECT hbarztnr, hbhalternr, hbrechnr, hbproznr, hbbuchdat, hbdm, hbbuchtext, hbrznr,
hti, hvn, hnn, hname2, hstr, hort
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.nProzNr, :frmMain.dtBuchDat, :frmMain.nDM, :frmMain.strBuchText, :frmMain.nRZNr,
:frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt
FROM hb, h
WHERE " + Int.PalArztNr("hb", App.frmRgSuchen.nArztNr, App.frmRgSuchen.nArztNr2) + @" AND hbhalternr = :frmRgSuchen.dfHalterNr
AND hbarztnr=harztnr AND hbhalternr=hhalternr
ORDER BY hbproznr, hbbuchdat";
					if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "Brief BitteUmAusgleich.crd") 
				{
					nRow = Sys.TBL_MinRow;
					return true;

				}
				else if (strPBericht == "TSK-Beihilfen-Erinnerung.lst") 
				{
                    // 24.01.24 ### +AND beerldat IS NULL
                    strSelect = @"SELECT bereghalter, bename, bedate, beanzahl, bebetrag, beguid, aarztnr
INTO :frmMain.strRegNr, :frmMain.strTHN1, :frmMain.dtBuchDat, :frmMain.nAnz, :frmMain.nDM, :frmMain.strBeihilfeGUID, :frmMain.nTANr
FROM be, a
WHERE beregarzt=aregnr AND bedate < SYSDATE - " + strPSpezial + @" MONTHS AND aneuenr IS NULL AND beerldat IS NULL
ORDER BY aarztnr";
                    if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
					{
						return false;
					}
					else
					{
						if (!(hSqlLlDruck.Execute())) 
						{
							return false;
						}
						else
						{
							nCountRec = hSqlLlDruck.GetResultSetCount();
							return true;
						}
					}
				}
				else if (strPBericht == "TSK-Waisen Rückzahlung.lst") 
				{
					nRow = Sys.TBL_MinRow;
					return true;

				}

				// 0
				// If NOT SqlPrepare(hSqlLlDruck,strSelect)
				// Return FALSE
				// Else
				// If NOT SqlExecute(hSqlLlDruck)
				// Return FALSE
				// Else
				// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
				// Return TRUE
			}

			return false;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bFirst"></param>
		/// <returns></returns>
		public SalBoolean PalFetchNext(SalBoolean bFirst)
		{
			#region Local Variables
			SqlLocals.PalFetchNextLocals locals = new SqlLocals.PalFetchNextLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.bFirst = bFirst;

				// 23.10.20
				nRecordNo = nRecordNo + 1;

				if (strPBericht != "Serienbrief.crd" && strPBericht != "SerienbriefEti.lbl") 
				{
					App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);
				}

				if (strPBericht == "Mitglieder.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							App.frmMain.strZust = Int.PalZust(App.frmMain.nTANr);
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Halter.lbl" || strPBericht == "Halter14.lbl" || strPBericht == "Halter.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							// ! 21.04.06 Ländercodes
							App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);
							// !
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Kontoauszug.lst" || strPBericht == "Schuldsaldoermittlung.lst" || strPBericht == "KontoauszugNF.lst")  // 21.11.11 Ä659
				{
					// ! ! 10.04.06 Ländercodes
					App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);
					// !
					if (App.frmMain.bNoFetch) 
					{
						App.frmMain.nDMMwSt = 0;
						App.frmMain.nDMVorst = 0;

						App.frmMain.bNoFetch = false;
						App.frmMain.nDMMahn = 0;
						// 22.08.22 Ä2015 + tkdmmahn
						App.frmMain.nMahnEUR = 0;
						// 15.06.05
						App.frmMain.nDMZins = 0;

						App.frmMain.nDMHaben = App.frmMain.nDMZaA;
						// am 31.10.96 rausgenommen, da bei Buchungen,
						// die ZALEIS und ZAARZN hatten, die MwSt falsch war
						// Set nDMMwSt = nDMHaben  -
						// SalNumberRound(nDMHaben * 100 / (1 + (nProz/100))) /100
						if (App.frmMain.strLA != "MB")  // 30.01.01
						{
							App.frmMain.strLA = Var.strA;
						}
						if (App.frmMain.nRechNr >= 999990) 
						{
							App.frmMain.nProz = 0;
						}
						if (App.frmMain.nSA == 2) 
						{
							App.frmMain.nDMUeberw = App.frmMain.nDMSoll - App.frmMain.nDMHaben;
						}
						else
						{
							App.frmMain.nDMUeberw = 0.00m;
						}
						if (App.frmMain.nDMVorst > 0.00m) 
						{
							App.frmMain.nDMmitVorstV = App.frmMain.nDMVorst;
							App.frmMain.nDMmitVorstS = App.frmMain.nDMSoll - App.frmMain.nDMHaben;
						}
						else
						{
							App.frmMain.nDMmitVorstV = 0.00m;
							App.frmMain.nDMmitVorstS = 0.00m;
						}
						// Summenblatt-Ermittlung
						// Call PalSummenblatt()
						if (strPBericht == "KontoauszugNF.lst")  // 21.11.11 Ä659
						{
							if (App.frmMain.nProz == 19 || App.frmMain.nProz == 16) 
							{
								App.frmMain.strLA = "L";
							}
						}
						return true;
					}
					else
					{
						if (hSqlLlDruck.FetchNext(ref nFetch)) 
						{
							if (nFetch == Sys.FETCH_Ok) 
							{
								if (Sal.NumberToStrX(App.frmMain.nTANr, 0) + Int.PalDateToStrJJJJMMTThhmmsst(dtDDErfDat) != strReset) 
								{
									// 24.09.21 F4812 strPSpezial = 'Vormonate' -> SalStrLeftX( strPSpezial, 9 ) = 'Vormonate'
									if (strPSpezial.Left(9) == "Vormonate") 
									{
										Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, aland,  akzpraxart, asvname1, asvname2, asvstr, asvort, asvland, austid, austid2
		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
		:frmMain.nKZPraxArt,
		:dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.strLand, :frmMain.strTAUStID, :frmMain.strTAUStID2
		FROM A
		WHERE a.aarztnr = :frmMain.nTANr");
										// 22.08.22 Ä2015 + tkdmmahn
										Int.SqlImmedSel(@"SELECT vodatum, vovorrech, vovorsoll, vovorhaben, vovorvst, vovormwst, voop, vovormahn
		INTO :frmMain.dtCurrentDate, :frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
		:frmMain.nVorVSt, :frmMain.nVorMwSt, :frmMain.nAussenst, :frmMain.nVorMahn
		FROM vo
		WHERE voarztnr = :frmMain.nTANr
		AND vodatum = :dlgLlDruck.dt1");
									}
									else
									{
										// 22.08.22 Ä2015 + tkdmmahn
										Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, aland,  akzpraxart, asvname1, asvname2, asvstr, asvort,  asvland,
		avorrech, avorsoll, avorhaben, avorvst, avormwst, austid, austid2, avormahn
		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
		:frmMain.nKZPraxArt,
		:dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.strLand,
		:frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
		:frmMain.nVorVSt, :frmMain.nVorMwSt, :frmMain.strTAUStID, :frmMain.strTAUStID2, :frmMain.nVorMahn
		FROM A
		WHERE a.aarztnr = :frmMain.nTANr");
										Int.SqlImmedSel(@"SELECT
sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
INTO :frmMain.nAussenst FROM rk WHERE rkarztnr = :frmMain.nTANr
AND rkkzzahl <2 AND rkdeaktiv IS NULL ");
										App.frmMain.dtCurrentDate = SalDateTime.Current;
									}
									// 03.01.12
									if (strPSpezial == "VormonateED" || strPSpezial == "ED") 
									{
										Int.SqlImmedSel(@"SELECT ddz1, ddz2, ddstr, ddort, ddland
		INTO :dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.strLand
		FROM A, DD
		WHERE aarztnr = :frmMain.nTANr AND aarztnr = ddarztnr AND ddcode = 'KA' AND dderfdat = :dlgLlDruck.dtDDErfDat");
									}

									// 03.01.12
									this.strLand = Int.PalPruefeLC(this.strLand, 0);

									App.frmMain.nTANrAlt = App.frmMain.nTANr;

									// Set frmMain.nSuDM16L = 0
									// Set frmMain.nSuDM15L = 0
									// Set frmMain.nSuDM7L = 0
									// Set frmMain.nSuDM0L = 0
									// Set frmMain.nSuDMaL = 0
									// Set frmMain.nSuSt16L = 0
									// Set frmMain.nSuSt15L = 0
									// Set frmMain.nSuSt7L = 0
									// Set frmMain.nSuSt0L = 0
									// Set frmMain.nSuStaL = 0
									// Set frmMain.nSuDM16A = 0
									// Set frmMain.nSuDM15A = 0
									// Set frmMain.nSuDM7A = 0
									// Set frmMain.nSuDM0A = 0
									// Set frmMain.nSuDMaA = 0
									// Set frmMain.nSuSt15A = 0
									// Set frmMain.nSuSt16A = 0
									// Set frmMain.nSuSt7A = 0
									// Set frmMain.nSuSt0A = 0
									// Set frmMain.nSuStaA = 0
									// Set frmMain.nSuDM16MB = 0
									// Set frmMain.nSuDM15MB = 0
									// Set frmMain.nSuDM7MB = 0
									// Set frmMain.nSuDM0MB = 0
									// Set frmMain.nSuDMaMB = 0
									// Set frmMain.nSuSt16MB = 0
									// Set frmMain.nSuSt15MB = 0
									// Set frmMain.nSuSt7MB = 0
									// Set frmMain.nSuSt0MB = 0
									// Set frmMain.nSuStaMB = 0
									// Set frmMain.nSuDMRg = 0
									// Set frmMain.nSuDMMg = 0
									// Set frmMain.nSuDMa = 0
									// Set frmMain.nSuDMaSt = 0
									// Set frmMain.nSuVSt = 0
									// Set frmMain.nSuStorno = 0
									// 17.04.08
									if (!(locals.bFirst)) 
									{
										bLlPrintResetProjectState = true;
									}
									strReset = Sal.NumberToStrX(App.frmMain.nTANr, 0) + Int.PalDateToStrJJJJMMTThhmmsst(dtDDErfDat);
								}
								if (App.frmMain.strBuchText.Left(1) == "+") 
								{
									App.frmMain.nSA = 2;
								}
								// 17.12.07 F318 + or nSA=3
								// If frmMain.nSA = 1 or frmMain.nSA = 3
								// Else
								// Set frmMain.strTHN1 = ''
								// Set frmMain.strTHN2 = ''
								// Set frmMain.strTHStr = ''
								// Set frmMain.strTHOrt = ''
								// Set frmMain.strTHLand = ''
								App.frmMain.nReverse = 0;
								if (App.frmMain.nTHNr != 0) 
								{
									// 15.10.13 Ä978 + USt-ID
									Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hstr, hort, hland, hustid
		INTO :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand, :frmMain.strTHUStID
		FROM H
		WHERE h.harztnr = :frmMain.nTANr AND h.hhalternr = :frmMain.nTHNr AND hdeaktiv IS NULL");
									// 10.04.06 Ländercodes
									App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);
									// 26.05.10 OTÄ397
									if (App.frmMain.nRechNr != 0 && App.frmMain.nRechNr != SalNumber.Null) 
									{
										Int.SqlImmedSel("SELECT rkreverse INTO :frmMain.nReverse FROM rk WHERE rkarztnr = :frmMain.nTANr AND rkhalternr = :frmMain.nTHNr AND rkrechnr = :frmMain.nRechNr AND rkdeaktiv IS NULL");
										if (App.frmMain.nReverse == SalNumber.Null) 
										{
											App.frmMain.nReverse = 0;
										}
									}

								}
								else
								{
									App.frmMain.strTHN1 = "";
									App.frmMain.strTHN2 = "";
									App.frmMain.strTHStr = "";
									App.frmMain.strTHOrt = "";
									App.frmMain.strTHLand = "";
								}
								if (App.frmMain.nDMZaL != 0.00m && App.frmMain.nDMZaA != 0.00m) 
								{
									App.frmMain.bNoFetch = true;
									App.frmMain.nDMHaben = App.frmMain.nDMZaL;
									App.frmMain.strLA = Var.strL;
								}
								else
								{
									App.frmMain.bNoFetch = false;
									App.frmMain.nDMHaben = App.frmMain.nDMZaL + App.frmMain.nDMZaA;
									if (App.frmMain.nDMZaL != 0.00m) 
									{
										App.frmMain.strLA = Var.strL;
									}
									else if (App.frmMain.nDMZaL == 0.00m && App.frmMain.nDMZaA == 0.00m)  // 09.10.09 OTF323
									{
										// 09.11.10 OTF790
										// Set strLA = ''
										// 09.08.11 F989 + Or nKZPraxArt = 0
										if (App.frmMain.nKZPraxArt == 1 || App.frmMain.nKZPraxArt == 0) 
										{
											App.frmMain.strLA = Var.strL;
										}
										else if (App.frmMain.nKZPraxArt == 2) 
										{
											App.frmMain.strLA = Var.strA;
										}
									}
									else
									{
										App.frmMain.strLA = Var.strA;
									}
								}
								if (App.frmMain.nSA != 1) 
								{
									App.frmMain.strLA = "";
								}
								if (App.frmMain.nSA == 2) 
								{
									App.frmMain.nDMUeberw = App.frmMain.nDMSoll - App.frmMain.nDMHaben;
								}
								else
								{
									App.frmMain.nDMUeberw = 0.00m;
								}
								if (App.frmMain.nSA == 1) 
								{
									// Set nDMMwSt = nDMHaben + nDMMahn -
									// SalNumberRound((nDMHaben+nDMMahn) * 100 / (1 + (nProz/100))) /100
									App.frmMain.nDMHaben = App.frmMain.nDMHaben + App.frmMain.nDMMahn + App.frmMain.nDMZins;
								}
								else
								{
									App.frmMain.nDMSoll = App.frmMain.nDMSoll + App.frmMain.nDMPorto;
								}
								if (App.frmMain.nDMVorst > 0.00m) 
								{
									App.frmMain.nDMmitVorstV = App.frmMain.nDMVorst;
									App.frmMain.nDMmitVorstS = App.frmMain.nDMSoll - App.frmMain.nDMHaben;
								}
								else
								{
									App.frmMain.nDMmitVorstV = 0.00m;
									App.frmMain.nDMmitVorstS = 0.00m;
								}
								if (App.frmMain.nRechNr >= 999990) 
								{
									// 30.01.01 kommentiert
									// Set bNoFetch = FALSE
									// Set nDMHaben = nDMZaL + nDMZaA

									App.frmMain.nDMMahn = 0;
									App.frmMain.strLA = "MB";
									// If nDMZaL != 0.00
									// Set frmMain.strLA = frmMain.strL
									// Else
									// Set frmMain.strLA = frmMain.strA
								}

								if (App.frmMain.nKZPraxArt == 1) 
								{
									if (App.frmMain.strLA == Var.strA) 
									{
										App.frmMain.strLA = Var.strL;
									}
								}
								else if (App.frmMain.nKZPraxArt == 2) 
								{
									if (App.frmMain.strLA == Var.strL) 
									{
										App.frmMain.strLA = Var.strA;
									}
								}
								// Summenblatt-Ermittlung
								// Call frmMain.PalSummenblatt()
								if (strPBericht == "KontoauszugNF.lst")  // 21.11.11 Ä659
								{
									if (App.frmMain.nProz == 19 || App.frmMain.nProz == 16) 
									{
										App.frmMain.strLA = "L";
									}
								}
								return true;
							}
							else
							{
								return false;
							}
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Zahlungsliste.lst") 
				{
					// ! ! 10.04.06 Ländercodes
					App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);
					// !
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							if (Sal.NumberToStrX(App.frmMain.nTANr, 0) + Int.PalDateToStrJJJJMMTThhmmsst(dtDDErfDat) != strReset) 
							{
								if (strPSpezial == "Vormonate") 
								{
									Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, aland,  akzpraxart, asvname1, asvname2, asvstr, asvort, asvland, austid, austid2
		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
		:frmMain.nKZPraxArt,
		:dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.strLand, :frmMain.strTAUStID, :frmMain.strTAUStID2
		FROM A
		WHERE a.aarztnr = :frmMain.nTANr");
								}
								else
								{
									Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, aland,  akzpraxart, asvname1, asvname2, asvstr, asvort,  asvland,
		avorrech, avorsoll, avorhaben, avorvst, avormwst, austid, austid2
		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
		:frmMain.nKZPraxArt,
		:dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.strLand,
		:frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
		:frmMain.nVorVSt, :frmMain.nVorMwSt, :frmMain.strTAUStID, :frmMain.strTAUStID2
		FROM A
		WHERE a.aarztnr = :frmMain.nTANr");
									// Call SqlImmedSel('SELECT
									// sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
									// INTO :frmMain.nAussenst FROM rk WHERE rkarztnr = :frmMain.nTANr
									// AND rkkzzahl <2')
									App.frmMain.dtCurrentDate = SalDateTime.Current;
								}
								// 03.01.12
								// If strPSpezial = 'VormonateED' or strPSpezial = 'ED'
								// Call SqlImmedSel('SELECT ddz1, ddz2, ddstr, ddort, ddland
								// 		INTO :dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.strLand
								// 		FROM A, DD
								// 		WHERE aarztnr = :frmMain.nTANr AND aarztnr = ddarztnr AND ddcode = \'KA\' AND dderfdat = :dlgLlDruck.dtDDErfDat')

								// 03.01.12
								this.strLand = Int.PalPruefeLC(this.strLand, 0);

								App.frmMain.nTANrAlt = App.frmMain.nTANr;

								// Set frmMain.nSuDM16L = 0
								// Set frmMain.nSuDM15L = 0
								// Set frmMain.nSuDM7L = 0
								// Set frmMain.nSuDM0L = 0
								// Set frmMain.nSuDMaL = 0
								// Set frmMain.nSuSt16L = 0
								// Set frmMain.nSuSt15L = 0
								// Set frmMain.nSuSt7L = 0
								// Set frmMain.nSuSt0L = 0
								// Set frmMain.nSuStaL = 0
								// Set frmMain.nSuDM16A = 0
								// Set frmMain.nSuDM15A = 0
								// Set frmMain.nSuDM7A = 0
								// Set frmMain.nSuDM0A = 0
								// Set frmMain.nSuDMaA = 0
								// Set frmMain.nSuSt15A = 0
								// Set frmMain.nSuSt16A = 0
								// Set frmMain.nSuSt7A = 0
								// Set frmMain.nSuSt0A = 0
								// Set frmMain.nSuStaA = 0
								// Set frmMain.nSuDM16MB = 0
								// Set frmMain.nSuDM15MB = 0
								// Set frmMain.nSuDM7MB = 0
								// Set frmMain.nSuDM0MB = 0
								// Set frmMain.nSuDMaMB = 0
								// Set frmMain.nSuSt16MB = 0
								// Set frmMain.nSuSt15MB = 0
								// Set frmMain.nSuSt7MB = 0
								// Set frmMain.nSuSt0MB = 0
								// Set frmMain.nSuStaMB = 0
								// Set frmMain.nSuDMRg = 0
								// Set frmMain.nSuDMMg = 0
								// Set frmMain.nSuDMa = 0
								// Set frmMain.nSuDMaSt = 0
								// Set frmMain.nSuVSt = 0
								// Set frmMain.nSuStorno = 0
								// 17.04.08
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								strReset = Sal.NumberToStrX(App.frmMain.nTANr, 0) + Int.PalDateToStrJJJJMMTThhmmsst(dtDDErfDat);
							}
							if (App.frmMain.strBuchText.Left(1) == "+") 
							{
								App.frmMain.nSA = 2;
							}
							// 17.12.07 F318 + or nSA=3
							// If frmMain.nSA = 1 or frmMain.nSA = 3
							// Else
							// Set frmMain.strTHN1 = ''
							// Set frmMain.strTHN2 = ''
							// Set frmMain.strTHStr = ''
							// Set frmMain.strTHOrt = ''
							// Set frmMain.strTHLand = ''
							App.frmMain.nReverse = 0;
							if (App.frmMain.nTHNr != 0) 
							{
								// 15.10.13 Ä978 + USt-ID
								Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hstr, hort, hland, hustid
		INTO :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand, :frmMain.strTHUStID
		FROM H
		WHERE h.harztnr = :frmMain.nTANr AND h.hhalternr = :frmMain.nTHNr AND hdeaktiv IS NULL");
								// 10.04.06 Ländercodes
								App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);
								// 26.05.10 OTÄ397
								// If frmMain.nRechNr != 0 And frmMain.nRechNr != NUMBER_Null
								// Call SqlImmedSel('SELECT rkreverse INTO :frmMain.nReverse FROM rk WHERE rkarztnr = :frmMain.nTANr AND rkhalternr = :frmMain.nTHNr AND rkrechnr = :frmMain.nRechNr')
								// If frmMain.nReverse = NUMBER_Null
								// Set frmMain.nReverse = 0

							}
							else
							{
								App.frmMain.strTHN1 = "";
								App.frmMain.strTHN2 = "";
								App.frmMain.strTHStr = "";
								App.frmMain.strTHOrt = "";
								App.frmMain.strTHLand = "";
							}
							if (App.frmMain.nDMZaL != 0.00m && App.frmMain.nDMZaA != 0.00m) 
							{
								App.frmMain.bNoFetch = true;
								App.frmMain.nDMHaben = App.frmMain.nDMZaL;
								App.frmMain.strLA = Var.strL;
							}
							else
							{
								App.frmMain.bNoFetch = false;
								App.frmMain.nDMHaben = App.frmMain.nDMZaL + App.frmMain.nDMZaA;
								if (App.frmMain.nDMZaL != 0.00m) 
								{
									App.frmMain.strLA = Var.strL;
								}
								else if (App.frmMain.nDMZaL == 0.00m && App.frmMain.nDMZaA == 0.00m)  // 09.10.09 OTF323
								{
									// 09.11.10 OTF790
									// Set strLA = ''
									// 09.08.11 F989 + Or nKZPraxArt = 0
									if (App.frmMain.nKZPraxArt == 1 || App.frmMain.nKZPraxArt == 0) 
									{
										App.frmMain.strLA = Var.strL;
									}
									else if (App.frmMain.nKZPraxArt == 2) 
									{
										App.frmMain.strLA = Var.strA;
									}
								}
								else
								{
									App.frmMain.strLA = Var.strA;
								}
							}
							if (App.frmMain.nSA != 1) 
							{
								App.frmMain.strLA = "";
							}
							if (App.frmMain.nSA == 2) 
							{
								App.frmMain.nDMUeberw = App.frmMain.nDMSoll - App.frmMain.nDMHaben;
							}
							else
							{
								App.frmMain.nDMUeberw = 0.00m;
							}
							if (App.frmMain.nSA == 1) 
							{
								// Set nDMMwSt = nDMHaben + nDMMahn -
								// SalNumberRound((nDMHaben+nDMMahn) * 100 / (1 + (nProz/100))) /100
								App.frmMain.nDMHaben = App.frmMain.nDMHaben + App.frmMain.nDMMahn + App.frmMain.nDMZins;
							}
							else
							{
								App.frmMain.nDMSoll = App.frmMain.nDMSoll + App.frmMain.nDMPorto;
							}
							if (App.frmMain.nDMVorst > 0.00m) 
							{
								App.frmMain.nDMmitVorstV = App.frmMain.nDMVorst;
								App.frmMain.nDMmitVorstS = App.frmMain.nDMSoll - App.frmMain.nDMHaben;
							}
							else
							{
								App.frmMain.nDMmitVorstV = 0.00m;
								App.frmMain.nDMmitVorstS = 0.00m;
							}
							if (App.frmMain.nRechNr >= 999990) 
							{
								// 30.01.01 kommentiert
								// Set bNoFetch = FALSE
								// Set nDMHaben = nDMZaL + nDMZaA

								App.frmMain.nDMMahn = 0;
								App.frmMain.strLA = "MB";
								// If nDMZaL != 0.00
								// Set frmMain.strLA = frmMain.strL
								// Else
								// Set frmMain.strLA = frmMain.strA
							}

							if (App.frmMain.nKZPraxArt == 1) 
							{
								if (App.frmMain.strLA == Var.strA) 
								{
									App.frmMain.strLA = Var.strL;
								}
							}
							else if (App.frmMain.nKZPraxArt == 2) 
							{
								if (App.frmMain.strLA == Var.strL) 
								{
									App.frmMain.strLA = Var.strA;
								}
							}
							// Summenblatt-Ermittlung
							// Call frmMain.PalSummenblatt()
							return true;
						}
						else
						{
							return false;
						}
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "Kontomitteilung.lst") 
				{
					// ! ! 10.04.06 Ländercodes
					App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);
					// !
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							if (Sal.NumberToStrX(App.frmMain.nTANr, 0) != strReset) 
							{
								if (strPSpezial == "Vormonate") 
								{
									Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, aland,  akzpraxart, asvname1, asvname2, asvstr, asvort
		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
		:frmMain.nKZPraxArt,
		:dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO
		FROM A
		WHERE a.aarztnr = :frmMain.nTANr");
									Int.SqlImmedSel(@"SELECT vodatum, vovorrech, vovorsoll, vovorhaben, vovorvst, vovormwst, voop
		INTO :frmMain.dtCurrentDate, :frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
		:frmMain.nVorVSt, :frmMain.nVorMwSt, :frmMain.nAussenst
		FROM vo
		WHERE voarztnr = :frmMain.nTANr
		AND vodatum = :dtDatVM");
								}
								else
								{
									Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, aland,  akzpraxart, asvname1, asvname2, asvstr, asvort,
		avorrech, avorsoll, avorhaben, avorvst, avormwst
		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
		:frmMain.nKZPraxArt,
		:dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO,
		:frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
		:frmMain.nVorVSt, :frmMain.nVorMwSt
		FROM A
		WHERE a.aarztnr = :frmMain.nTANr");
									App.frmMain.dtCurrentDate = SalDateTime.Current;
								}
								App.frmMain.nTANrAlt = App.frmMain.nTANr;

								// 17.04.08
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								strReset = Sal.NumberToStrX(App.frmMain.nTANr, 0);
							}
							// If SalStrLeftX(frmMain.strBuchText,1) = '+'
							// Set frmMain.nSA = 2
							if (App.frmMain.nTHNr != 0) 
							{
								Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
		INTO :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand
		FROM H
		WHERE h.harztnr = :frmMain.nTANr AND h.hhalternr = :frmMain.nTHNr AND hdeaktiv IS NULL");
								// 10.04.06 Ländercodes
								App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);

							}
							else
							{
								App.frmMain.strTHN1 = "";
								App.frmMain.strTHN2 = "";
								App.frmMain.strTHStr = "";
								App.frmMain.strTHOrt = "";
								App.frmMain.strTHLand = "";
							}
							if (App.frmMain.nSA == 2) 
							{
								App.frmMain.nDMUeberw = App.frmMain.nDMSoll - App.frmMain.nDMHaben;
							}
							else
							{
								App.frmMain.nDMUeberw = 0.00m;
							}
							if (App.frmMain.nSA == 1) 
							{
								// Set nDMMwSt = nDMHaben + nDMMahn -
								// SalNumberRound((nDMHaben+nDMMahn) * 100 / (1 + (nProz/100))) /100
								App.frmMain.nDMHaben = App.frmMain.nDMHaben + App.frmMain.nDMMahn + App.frmMain.nDMZins;
							}
							else
							{
								App.frmMain.nDMSoll = App.frmMain.nDMSoll + App.frmMain.nDMPorto;
							}
							if (App.frmMain.nDMVorst > 0.00m) 
							{
								App.frmMain.nDMmitVorstV = App.frmMain.nDMVorst;
								App.frmMain.nDMmitVorstS = App.frmMain.nDMSoll - App.frmMain.nDMHaben;
							}
							else
							{
								App.frmMain.nDMmitVorstV = 0.00m;
								App.frmMain.nDMmitVorstS = 0.00m;
							}
							if (App.frmMain.nRechNr >= 999990) 
							{
								// 30.01.01 kommentiert
								// Set bNoFetch = FALSE
								// Set nDMHaben = nDMZaL + nDMZaA

								App.frmMain.nDMMahn = 0;
								App.frmMain.strLA = "MB";
								// If nDMZaL != 0.00
								// Set frmMain.strLA = frmMain.strL
								// Else
								// Set frmMain.strLA = frmMain.strA
							}
							// 16.07.09 OTÄ287
							dtMin = SalDateTime.Null;
							dtMax = SalDateTime.Null;
							// 19.05.11 F926
							plsMemo = "";

							if (App.frmMain.nTANr != 0 && App.frmMain.nTHNr != 0 && App.frmMain.nRechNr < 999990 && App.frmMain.nRechNr >= 1) 
							{
								// Call SqlImmedSel('SELECT min(rpdatum), max(rpdatum)
								// 		INTO :dlgLlDruck.dtMin, :dlgLlDruck.dtMax
								// 		FROM rp
								// 		WHERE rparztnr = :frmMain.nTANr AND rphalternr = :frmMain.nTHNr AND rprechnr = :frmMain.nRechNr')
								// 21.12.10 OTÄ509
								// 19.05.11 F926 plsMemo nach oben verschoben
								// Set plsMemo = ''
								dtMinAlt = new SalDateTime(1980, 1, 1);
								// 14.02.11 OTÄ509
								// Call SqlHandleExecX(hSqlLlDruck2,'SELECT rpdatum, rprechtext
								// 			INTO :dlgLlDruck.dtMin, :dlgLlDruck.strTSK
								// 			FROM  rp
								// 			WHERE rparztnr= :frmMain.nTANr AND rprechnr = :frmMain.nRechNr AND rpdm<>0
								// 			ORDER BY 1','RechDetails Kontomitteilung')
								Int.SqlHandleExec(hSqlLlDruck2, @"SELECT rpdatum, rprechtext, rpdm
			INTO :dlgLlDruck.dtMin, :dlgLlDruck.strTSK, :dlgLlDruck.nDM
			FROM  rp
			WHERE rparztnr= :frmMain.nTANr AND rprechnr = :frmMain.nRechNr
			ORDER BY 1", "RechDetails Kontomitteilung", ref Var.nErr);

								nFetch2 = hSqlLlDruck2.FetchNext();
								while (nFetch2 != Sys.FETCH_EOF) 
								{
									// 14.02.11 OTÄ509
									if (strTSK.Left(5) == ">>TSK") 
									{
										nDM = Int.PalValNum(strTSK.Mid(5, 11)) * -1;
										strTSK = "TSK-Beihilfe";
									}

									if (dtMin != dtMinAlt) 
									{
										plsMemo = plsMemo + @"
" + Int.PalDateToStrDE(dtMin) + " " + strTSK;
									}
									else
									{
										plsMemo = plsMemo + @"
           " + strTSK;
									}
									dtMinAlt = dtMin;
									if (nDM != 0 && nDM != SalNumber.Null) 
									{
										plsMemo = plsMemo + " (€ " + nDM.ToString(2) + ")";
										if (strTSK != "TSK-Beihilfe") 
										{
											plsMemo = plsMemo + " netto";
										}
									}
									nFetch2 = hSqlLlDruck2.FetchNext();
								}
								// Call SqlCommit(hSqlLlDruck2)
								// 10.04.06 Ländercodes
								App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);

							}
							if (strPSpezial != "Vormonate") 
							{
								Int.SqlImmed("UPDATE tk SET tkdruckdatum2 = :frmMain.dtDatum WHERE ROWID = :frmMain.strROWID");
							}

							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "TVN-Rechnungen.lst") 
				{
					// !
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							if ((Sal.NumberToStrX(App.frmMain.nTANr, 0) + Int.PalDateToStrJJJJMMTThhmmss(dtDDErfDat)) != strReset) 
							{
								if (strPSpezial == "VormonateED" || strPSpezial == "ED") 
								{
									Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, aland,  akzpraxart, ddz1, ddz2, ddstr, ddort, ddland, austid, austid2
		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
		:frmMain.nKZPraxArt,
		:dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.strLand, :frmMain.strTAUStID, :frmMain.strTAUStID2
		FROM A, DD
		WHERE aarztnr = :frmMain.nTANr AND aarztnr = ddarztnr AND ddcode = 'TR' AND dderfdat = :dlgLlDruck.dtDDErfDat");
								}
								else
								{
									Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, aland,  akzpraxart, asvname1, asvname2, asvstr, asvort, asvland, austid, austid2
		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
		:frmMain.nKZPraxArt,
		:dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.strLand, :frmMain.strTAUStID, :frmMain.strTAUStID2
		FROM A
		WHERE aarztnr = :frmMain.nTANr");
								}
								// 03.01.12
								this.strLand = Int.PalPruefeLC(this.strLand, 0);

								App.frmMain.nTANrAlt = App.frmMain.nTANr;
								// 17.04.08
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								strReset = Sal.NumberToStrX(App.frmMain.nTANr, 0) + Int.PalDateToStrJJJJMMTThhmmss(dtDDErfDat);
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "zus.Meldung.lst") 
				{
					// !
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							// If SalNumberToStrX(frmMain.nTANr,0) != strDummy
							// Call SqlImmedSel('SELECT aname1, aname2, astr, aort, aland,  akzpraxart, asvname1, asvname2, asvstr, asvort, austid
							// 		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
							// 		:frmMain.nKZPraxArt,
							// 		:dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :frmMain.strTAUStID
							// 		FROM A
							// 		WHERE aarztnr = :frmMain.nTANr')
							// Set frmMain.nTANrAlt = frmMain.nTANr
							// 17.04.08
							// If Not bFirst
							// Set bLlPrintResetProjectState = TRUE
							// Set strDummy = SalNumberToStrX(frmMain.nTANr,0)
							App.frmMain.strTALand = strOriLand;
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Verjährungen.lst") 
				{
					// !
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							if (Sal.NumberToStrX(App.frmMain.nTANr, 0) != strReset) 
							{
								// 29.09.08
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								strReset = Sal.NumberToStrX(App.frmMain.nTANr, 0);
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "AAB.lst" || strPBericht == "Bestandsbuch.lst") 
				{
					App.frmDiskEin.strLine = "    ";
					while (App.frmDiskEin.strLine.Mid(0, 2) != "PO") 
					{
						// Set bOK= SalFileGetStr(frmDiskEin.hDisk,frmDiskEin.strLine,999999999)

						// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
						SalString temp1 = App.frmDiskEin.strLine;
						Var.bOK = Vis.VTERR_Ok == Vis.FileReadString(App.frmDiskEin.hDisk, ref temp1);
						App.frmDiskEin.strLine = temp1;

						App.frmDiskEin.strLine = App.frmDiskEin.Pal00To32(App.frmDiskEin.strLine);
						if (!(App.frmDiskEin.cbWinForm.Checked)) 
						{
							App.frmDiskEin.strLine = Int.PalDosToWin(App.frmDiskEin.strLine);
						}
						if (!(Var.bOK) || App.frmDiskEin.strLine.Mid(0, 2) == "EE") 
						{
							App.frmDiskEin.SetStatusBarText("Diskette fertig eingelesen");

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalFileHandle temp2 = App.frmDiskEin.hDisk;
							Sal.FileClose(ref temp2);
							App.frmDiskEin.hDisk = temp2;

							return false;
						}
						else
						{
							if (App.frmDiskEin.strLine.Mid(0, 2) == "KO") 
							{
								// 16.04.08
								nCountKunden = nCountKunden + 1;

								App.frmDiskEin.strTHKenn = App.frmDiskEin.strLine.Mid(2, 8);
								// 18.03.13 F1515 +  or  frmDiskEin.strHeader = 'HDE'
								if ((App.frmDiskEin.strHeader == "HDC" || App.frmDiskEin.strHeader == "HDD" || App.frmDiskEin.strHeader == "HDE" || App.frmDiskEin.strHeader == "HDF") && !(App.frmDiskEin.cb27.Checked)) 
								{
									App.frmDiskEin.nLenHalter = 30;
								}
								else if (App.frmDiskEin.strHeader >= "HDG")  // 08.08.16 Ä1339
								{
									App.frmDiskEin.nLenHalter = 50;
								}
								else
								{
									App.frmDiskEin.nLenHalter = 27;
								}
								// 14.02.22 Ä2003
								if (App.frmDiskEin.strHeader == "HDH") 
								{
									App.frmDiskEin.nLenIndikation = 254;
								}
								else
								{
									App.frmDiskEin.nLenIndikation = 150;
								}

								App.frmDiskEin.strTHN1 = App.frmDiskEin.strLine.Mid(15, App.frmDiskEin.nLenHalter);
								App.frmDiskEin.strTHN2 = App.frmDiskEin.strLine.Mid(16 + App.frmDiskEin.nLenHalter, App.frmDiskEin.nLenHalter);
								App.frmDiskEin.dfKennung.Text = App.frmDiskEin.strName1;
								App.frmDiskEin.strTHStr = App.frmDiskEin.strLine.Mid(17 + App.frmDiskEin.nLenHalter + App.frmDiskEin.nLenHalter, App.frmDiskEin.nLenHalter);
								App.frmDiskEin.strTHPlz = App.frmDiskEin.strLine.Mid(18 + App.frmDiskEin.nLenHalter + App.frmDiskEin.nLenHalter + App.frmDiskEin.nLenHalter, 5);
								App.frmDiskEin.strTHOrt = App.frmDiskEin.strLine.Mid(24 + App.frmDiskEin.nLenHalter + App.frmDiskEin.nLenHalter + App.frmDiskEin.nLenHalter, App.frmDiskEin.nLenHalter);
								// Set frmDiskEin.strTHN1=SalStrMidX(frmDiskEin.strLine,15,30)
								// Set frmDiskEin.strTHN2=SalStrMidX(frmDiskEin.strLine,46,30)
								// Set frmDiskEin.dfKennung = strName1
								// Set frmDiskEin.strTHStr=SalStrMidX(frmDiskEin.strLine,77,30)
								// Set frmDiskEin.strTHPlz=SalStrMidX(frmDiskEin.strLine,108,5)
								// Set frmDiskEin.strTHOrt=SalStrMidX(frmDiskEin.strLine,114,25)
								// 02.11.07 Ä175 auskommentiert
								// If cbEti
								// Set frmDiskEin.strEtiOrt = SalStrLeftX(frmDiskEin.strTHPlz || ' ' || frmDiskEin.strTHOrt,30)
								// Call SqlImmed('INSERT INTO ed (edn1,edn2,eds,edo) VALUES( :frmDiskEin.strTHN1, :frmDiskEin.strTHN2, :frmDiskEin.strTHStr, :frmDiskEin.strEtiOrt )')

								// 02.11.06 gemäß L&L Support E-Mail
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
							}
							else if (App.frmDiskEin.strLine.Mid(0, 2) == "NA") 
							{
								App.frmDiskEin.strRepTNA = App.frmDiskEin.strLine.Mid(2, 50);
							}
							else if (App.frmDiskEin.strLine.Mid(0, 2) == "RS") 
							{
								App.frmDiskEin.strRepTRS = App.frmDiskEin.strLine.Mid(2, 50);
							}
							else if (App.frmDiskEin.strLine.Mid(0, 2) == "PO") 
							{
								App.frmDiskEin.dtRepDat = (App.frmDiskEin.strLine.Mid(2, 2) + "." + App.frmDiskEin.strLine.Mid(4, 2) + "." + App.frmDiskEin.strLine.Mid(6, 2)).ToDate();
								// aus Pegasus-Code
								// ! Set frmDiskEin.strRepCharge = ''
								App.frmDiskEin.nRepAnz1 = Int.PalValNum(App.frmDiskEin.strLine.Mid(8, 9));
								if (App.frmDiskEin.nRepAnz1 == 0) 
								{
									App.frmDiskEin.nRepAnz1 = SalNumber.Null;
								}
								App.frmDiskEin.strRepRechBez = App.frmDiskEin.strLine.Mid(17, 45);
								App.frmDiskEin.strRepCharge = App.frmDiskEin.strLine.Mid(62, 20);
								App.frmDiskEin.nRepWartezeit = Int.PalValNumBlankMinus1(App.frmDiskEin.strLine.Mid(82, 3));
								App.frmDiskEin.nRepWartemilch = Int.PalValNumBlankMinus1(App.frmDiskEin.strLine.Mid(85, 3));
								// 20.12.16 entfernt
								// If nRepWartezeit = 0
								// Set frmDiskEin.nRepWartezeit = NUMBER_Null
								// If nRepWartemilch = 0
								// Set frmDiskEin.nRepWartemilch = NUMBER_Null
								App.frmDiskEin.strRepZATiere = App.frmDiskEin.strLine.Mid(88, 50);
								App.frmDiskEin.strRepIndikation = App.frmDiskEin.strLine.Mid(138, 50);

								App.frmDiskEin.strRepDosierung = App.frmDiskEin.strLine.Mid(188, 25 + nLenAdd1);
								App.frmDiskEin.strRepDauer = App.frmDiskEin.strLine.Mid(213 + nLenAdd1, 20);
								App.frmDiskEin.strRepAABIdent = App.frmDiskEin.strLine.Mid(233 + nLenAdd1, 250);
								App.frmDiskEin.strRepAABArt = App.frmDiskEin.strLine.Mid(483 + nLenAdd1, 20);
								App.frmDiskEin.strRepAABDiagnose = App.frmDiskEin.strLine.Mid(503 + nLenAdd1, 50 + nLenAdd2);
								App.frmDiskEin.nRepAABWH = Int.PalValNum(App.frmDiskEin.strLine.Mid(553 + nLenAdd1 + nLenAdd2, 1));
								App.frmDiskEin.strRepAABOrt = App.frmDiskEin.strLine.Mid(554 + nLenAdd1 + nLenAdd2, 30);
								// 23.07.07 A121
								if (App.frmDiskEin.strHeader >= "HDE") 
								{
									locals.nDummy = 50 + nLenAdd1 + nLenAdd2;
								}
								else
								{
									locals.nDummy = 0 + nLenAdd1 + nLenAdd2;
								}
								App.frmDiskEin.strRepAABPreNr = App.frmDiskEin.strLine.Mid(584 + locals.nDummy, 10);
								App.frmDiskEin.nRepAABNr = Int.PalValNum(App.frmDiskEin.strLine.Mid(594 + locals.nDummy, 10));
								App.frmDiskEin.strRepAABVerabreichung = App.frmDiskEin.strLine.Mid(604 + locals.nDummy, 15);
								App.frmDiskEin.strRepTyp = App.frmDiskEin.strLine.Mid(619 + locals.nDummy, 1);
								// 13.03.07 Ä92
								App.frmDiskEin.strTAName = App.frmDiskEin.strLine.Mid(620 + locals.nDummy, 50);
								// ! 28.05.08 Ä250 + Zulassung
								if (App.frmDiskEin.strLine.Mid(670 + locals.nDummy, 50) != "") 
								{
									App.frmDiskEin.strRepRechBez = App.frmDiskEin.strRepRechBez;
								}
								// 06.09.11 Ä581 (Pegasus) + AABZeit
								App.frmDiskEin.strRepAABZeit = App.frmDiskEin.strLine.Mid(720 + locals.nDummy, 20);
								// 30.10.14 Ä1086
								App.frmDiskEin.nHITWirkTage = Int.PalValNum(App.frmDiskEin.strLine.Mid(740 + locals.nDummy, 10));
								App.frmDiskEin.strNutzungsart = App.frmDiskEin.strLine.Mid(750 + locals.nDummy, 50);
								if (App.frmDiskEin.strNutzungsart == Int.PalLF(" ", 50)) 
								{
									App.frmDiskEin.strNutzungsart = "";
								}
								App.frmDiskEin.strVVVONr = App.frmDiskEin.strLine.Mid(800 + locals.nDummy, 20);
								if (App.frmDiskEin.strVVVONr == Int.PalLF(" ", 20)) 
								{
									App.frmDiskEin.strVVVONr = "";
								}
								// 18.11.14 Ä1051 + AABOriNr
								App.frmDiskEin.strAABOriNr = App.frmDiskEin.strLine.Mid(820 + locals.nDummy, 20);
								if (App.frmDiskEin.strAABOriNr == Int.PalLF(" ", 20)) 
								{
									App.frmDiskEin.strAABOriNr = "";
								}
								// 19.12.16 Ä1229
								if (App.frmDiskEin.strHeader >= "HDH")  // 14.02.22 Ä2000 frmBehErf.oBase64.DecodeBase64( strArrToken[4] )
								{
									App.frmDiskEin.nRepGewicht = Int.PalValNum(App.frmDiskEin.strLine.Mid(840 + locals.nDummy, 9));
									App.frmDiskEin.dtRepUntersDatum = (App.frmDiskEin.strLine.Mid(849 + locals.nDummy, 2) + "." + App.frmDiskEin.strLine.Mid(851 + locals.nDummy, 2) + "." + App.frmDiskEin.strLine.Mid(853 + locals.nDummy, 2)).ToDate();
									App.frmDiskEin.nRepHITBehTage = Int.PalValNum(App.frmDiskEin.strLine.Mid(855 + locals.nDummy, 10));
									App.frmDiskEin.dtRepVerfallsdatum = (App.frmDiskEin.strLine.Mid(865 + locals.nDummy, 2) + "." + App.frmDiskEin.strLine.Mid(867 + locals.nDummy, 2) + "." + App.frmDiskEin.strLine.Mid(869 + locals.nDummy, 2)).ToDate();
									locals.nDummy = locals.nDummy + 31;
									App.frmDiskEin.lsWZHinweis = App.frmDiskEin.strLine.Mid(840 + locals.nDummy, 999999999);
									// 08.03.22 Ä2005
									App.frmDiskEin.lsWirkstoffe = "";
									App.frmDiskEin.lsWarnhinweise = "";
									App.frmDiskEin.strUPM = "";
									App.frmDiskEin.nByte9 = Sal.StrScan(App.frmDiskEin.lsWZHinweis, ((SalNumber)9).ToCharacter());
									if (App.frmDiskEin.nByte9 != -1) 
									{
										App.frmDiskEin.lsRead = Sal.StrMidX(App.frmDiskEin.lsWZHinweis, App.frmDiskEin.nByte9 + 1, 999999999);
										App.frmDiskEin.strUPM = Sal.StrLeftX(App.frmDiskEin.lsRead, 3);
										App.frmDiskEin.lsWZHinweis = Sal.StrLeftX(App.frmDiskEin.lsWZHinweis, App.frmDiskEin.nByte9);

										App.frmDiskEin.nByte9 = Sal.StrScan(App.frmDiskEin.lsRead, ((SalNumber)9).ToCharacter() + "1");
										if (App.frmDiskEin.nByte9 != -1) 
										{
											App.frmDiskEin.lsRead = Sal.StrMidX(App.frmDiskEin.lsRead, App.frmDiskEin.nByte9 + 2, 999999999);
											App.frmDiskEin.lsWirkstoffe = Sal.StrLeftX(App.frmDiskEin.lsRead, 999999999);
											App.frmDiskEin.nByte9 = Sal.StrScan(App.frmDiskEin.lsWirkstoffe, ((SalNumber)9).ToCharacter() + "2");
											if (App.frmDiskEin.nByte9 != -1) 
											{
												App.frmDiskEin.lsWirkstoffe = Sal.StrLeftX(App.frmDiskEin.lsWirkstoffe, App.frmDiskEin.nByte9);
											}
											App.frmDiskEin.lsWirkstoffe = App.frmRgSuchen.oBase64.DecodeBase64(App.frmDiskEin.lsWirkstoffe);

											App.frmDiskEin.nByte9 = Sal.StrScan(App.frmDiskEin.lsRead, ((SalNumber)9).ToCharacter() + "2");
											if (App.frmDiskEin.nByte9 != -1) 
											{
												App.frmDiskEin.lsWarnhinweise = Sal.StrMidX(App.frmDiskEin.lsRead, App.frmDiskEin.nByte9 + 2, 999999999);
												App.frmDiskEin.lsWarnhinweise = App.frmRgSuchen.oBase64.DecodeBase64(App.frmDiskEin.lsWarnhinweise);
											}
										}
									}

									App.frmDiskEin.lsWZHinweis = App.frmRgSuchen.oBase64.DecodeBase64(App.frmDiskEin.lsWZHinweis);
								}
								else
								{
									App.frmDiskEin.lsWZHinweis = App.frmDiskEin.strLine.Mid(840 + locals.nDummy, 1000);
								}
								if (App.frmDiskEin.lsWZHinweis == Int.PalLF(" ", 1000)) 
								{
									App.frmDiskEin.lsWZHinweis = "";
								}

								App.frmDiskEin.strZulassung = App.frmDiskEin.strLine.Mid(670 + locals.nDummy, 50);
								if (App.frmDiskEin.strZulassung == Int.PalLF(" ", 50)) 
								{
									App.frmDiskEin.strZulassung = "";
								}

								App.frmDiskEin.strRepAABPreNr = App.frmDiskEin.strRepAABPreNr + " / " + Int.PalStrNum(App.frmDiskEin.nRepAABNr, 5, 0);
								if (App.frmDiskEin.nRepAABWH == 1) 
								{
									App.frmDiskEin.strRepAABWH = "Nachbehandlung";
								}
								else
								{
									App.frmDiskEin.strRepAABWH = "Erstbehandlung";
								}
								// If SalStrTrimX(strRepAABOrt) = ''
								// Set frmDiskEin.strRepAABOrt = 'siehe Tierhalter-Adresse'
								// Set frmDiskEin.strRepAABOrt = strTHN1
								// If strTHN2 != ''
								// Set frmDiskEin.strRepAABOrt = strRepAABOrt || ', ' || strTHN2
								// Set frmDiskEin.strRepAABOrt = strRepAABOrt || ', ' || strTHStr
								// Set frmDiskEin.strRepAABOrt = strRepAABOrt || ', ' || strTHPlz
								// Set frmDiskEin.strRepAABOrt = strRepAABOrt || ' ' || strTHOrt
								App.frmDiskEin.strRepAnz = Int.PalStrNum(App.frmDiskEin.nRepAnz1, 6, 2);
								if (App.frmDiskEin.strRepTyp == "A" || App.frmDiskEin.strRepTyp == "M") 
								{
									App.frmDiskEin.strRepAnzA = Int.PalStrNum(App.frmDiskEin.nRepAnz1, 6, 2);
									App.frmDiskEin.strRepAnzK = "";
								}
								else
								{
									App.frmDiskEin.strRepAnzK = Int.PalStrNum(App.frmDiskEin.nRepAnz1, 6, 2);
									App.frmDiskEin.strRepAnzA = "";
								}
								// 08.05.06  AAB-Ident > 250 Bytes (max. 32767 Bytes)
								if (Sal.StrLeftX(App.frmDiskEin.strRepAABIdent, 5) == "~Ext~") 
								{
									App.frmDiskEin.strRepAABIdent = "";

									// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
									SalString temp3 = App.frmDiskEin.strLine;
									Var.bOK = Sal.FileGetStr(App.frmDiskEin.hDisk, ref temp3, 2048);
									App.frmDiskEin.strLine = temp3;

									while (Var.bOK && App.frmDiskEin.strLine.Left(2) != "~E") 
									{
										// 21.11.06 F85
										App.frmDiskEin.strRepAABIdent = App.frmDiskEin.strRepAABIdent + App.frmDiskEin.strLine;

										// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
										SalString temp4 = App.frmDiskEin.strLine;
										Var.bOK = Sal.FileGetStr(App.frmDiskEin.hDisk, ref temp4, 32767);
										App.frmDiskEin.strLine = temp4;

									}
								}
								// Einfügen vom Leerzeichen hinter Komma, damit LL Zeilenumbruch machen kann
								App.frmDiskEin.strRepAABIdent = Int.PalStrReplace(App.frmDiskEin.strRepAABIdent, ",", ", ");

								return true;
							}
						}
					}
				}
				else if (strPBericht == "Impferinnerungen.lst") 
				{
					App.frmDiskEin.strLine = "    ";
					while (App.frmDiskEin.strLine.Mid(0, 2) != "PO") 
					{

						// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
						SalString temp5 = App.frmDiskEin.strLine;
						Var.bOK = Sal.FileGetStr(App.frmDiskEin.hDisk, ref temp5, 32767);
						App.frmDiskEin.strLine = temp5;

						App.frmDiskEin.strLine = App.frmDiskEin.Pal00To32(App.frmDiskEin.strLine);
						if (!(App.frmDiskEin.cbWinForm.Checked)) 
						{
							App.frmDiskEin.strLine = Int.PalDosToWin(App.frmDiskEin.strLine);
						}
						if (!(Var.bOK) || App.frmDiskEin.strLine.Mid(0, 2) == "EE") 
						{
							this.SetStatusBarText("Diskette fertig eingelesen");

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalFileHandle temp6 = App.frmDiskEin.hDisk;
							Sal.FileClose(ref temp6);
							App.frmDiskEin.hDisk = temp6;

							return false;
						}
						else
						{
							if (App.frmDiskEin.strLine.Mid(0, 2) == "KO") 
							{
								// 16.04.08
								nCountKunden = nCountKunden + 1;

								// 06.04.04
								App.frmDiskEin.strRepTNA = "";
								App.frmDiskEin.strRepTGS = "";
								App.frmDiskEin.strRepTRS = "";
								App.frmDiskEin.dtRepTGB = SalDateTime.Null;

								App.frmDiskEin.strTHKenn = App.frmDiskEin.strLine.Mid(2, 8);
								if ((App.frmDiskEin.strHeader == "HDC" || App.frmDiskEin.strHeader == "HDD") && !(App.frmDiskEin.cb27.Checked)) 
								{
									App.frmDiskEin.nLenHalter = 30;
								}
								else if (App.frmDiskEin.strHeader == "HDE")  // 08.08.16 Ä1339
								{
									App.frmDiskEin.nLenHalter = 50;
								}
								else
								{
									App.frmDiskEin.nLenHalter = 27;
								}
								App.frmDiskEin.strTHN1 = App.frmDiskEin.strLine.Mid(15, App.frmDiskEin.nLenHalter);
								App.frmDiskEin.strTHN2 = App.frmDiskEin.strLine.Mid(16 + App.frmDiskEin.nLenHalter, App.frmDiskEin.nLenHalter);
								App.frmDiskEin.dfKennung.Text = App.frmDiskEin.strName1;
								App.frmDiskEin.strTHStr = App.frmDiskEin.strLine.Mid(17 + App.frmDiskEin.nLenHalter + App.frmDiskEin.nLenHalter, App.frmDiskEin.nLenHalter);
								App.frmDiskEin.strTHPlz = App.frmDiskEin.strLine.Mid(18 + App.frmDiskEin.nLenHalter + App.frmDiskEin.nLenHalter + App.frmDiskEin.nLenHalter, 5);
								App.frmDiskEin.strTHOrt = App.frmDiskEin.strLine.Mid(24 + App.frmDiskEin.nLenHalter + App.frmDiskEin.nLenHalter + App.frmDiskEin.nLenHalter, App.frmDiskEin.nLenHalter);
								// 02.11.07 Ä175 auskommentiert
								// If frmDiskEin.cbEti
								// Set frmDiskEin.strEtiOrt = frmDiskEin.strTHPlz || ' ' || frmDiskEin.strTHOrt
								// Call SqlImmed('INSERT INTO ed (edn1,edn2,eds,edo) VALUES( :frmDiskEin.strTHN1, :frmDiskEin.strTHN2, :frmDiskEin.strTHStr, :frmDiskEin.strEtiOrt )')

								// 16.06.08
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
							}
							else if (App.frmDiskEin.strLine.Mid(0, 2) == "NA") 
							{
								App.frmDiskEin.strRepTNA = App.frmDiskEin.strLine.Mid(2, 50);
							}
							else if (App.frmDiskEin.strLine.Mid(0, 2) == "GS") 
							{
								App.frmDiskEin.strRepTGS = App.frmDiskEin.strLine.Mid(2, 2);
							}
							else if (App.frmDiskEin.strLine.Mid(0, 2) == "RS") 
							{
								App.frmDiskEin.strRepTRS = App.frmDiskEin.strLine.Mid(2, 50);
							}
							else if (App.frmDiskEin.strLine.Mid(0, 2) == "GB") 
							{
								App.frmDiskEin.dtRepTGB = App.frmDiskEin.strLine.Mid(2, 50).ToDate();
							}
							else if (App.frmDiskEin.strLine.Mid(0, 2) == "PO") 
							{
								App.frmDiskEin.dtRepDat = (App.frmDiskEin.strLine.Mid(2, 2) + "." + App.frmDiskEin.strLine.Mid(4, 2) + "." + App.frmDiskEin.strLine.Mid(6, 2)).ToDate();
								App.frmDiskEin.nRepAnz1 = Int.PalValNum(App.frmDiskEin.strLine.Mid(8, 9));
								if (App.frmDiskEin.nRepAnz1 == 0) 
								{
									App.frmDiskEin.nRepAnz1 = SalNumber.Null;
								}
								App.frmDiskEin.strRepRechBez = App.frmDiskEin.strLine.Mid(17, 45);

								return true;
							}
						}
					}
				}
				else if (strPBericht == "Saldenliste.lst" || strPBericht == "KA-Statusliste.lst") 
				{
					while (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							Int.SqlImmedSel(@"SELECT 	sum(tkdmabr), sum(tkdmporto), sum( tkdmzamwst), sum(tktavst),
			 sum(tksoll), sum(tkhaben)
			INTO  :frmMain.nDMRech, :frmMain.nDMPorto,  :frmMain.nDMMwSt, :frmMain.nDMVorst,
			:frmMain.nDMSoll, :frmMain.nDMHaben
			FROM tk
			WHERE tkarztnr = :frmMain.nTANr");
							// 18.06.09 OTÄ207
							if (App.frmMain.nVorRech == SalNumber.Null) 
							{
								App.frmMain.nVorRech = 0;
							}
							if (App.frmMain.nVorSoll == SalNumber.Null) 
							{
								App.frmMain.nVorSoll = 0;
							}
							if (App.frmMain.nVorHaben == SalNumber.Null) 
							{
								App.frmMain.nVorHaben = 0;
							}
							if (App.frmMain.nDMRech == SalNumber.Null) 
							{
								App.frmMain.nDMRech = 0;
							}
							if (App.frmMain.nDMSoll == SalNumber.Null) 
							{
								App.frmMain.nDMSoll = 0;
							}
							if (App.frmMain.nDMHaben == SalNumber.Null) 
							{
								App.frmMain.nDMHaben = 0;
							}
							if ((App.frmMain.bSaldenSch == false && (App.frmMain.nVorRech != 0 || App.frmMain.nVorSoll != 0 || App.frmMain.nVorHaben != 0 || App.frmMain.nDMRech != 0 || App.frmMain.nDMSoll != 0 || App.frmMain.nDMHaben != 0)) || (App.frmMain.bSaldenSch == 
							true && (App.frmMain.nDMSoll - App.frmMain.nDMHaben + App.frmMain.nVorSoll - App.frmMain.nVorHaben) > 0) || strPBericht == "KA-Statusliste.lst") 
							{
								if (App.frmMain.bSaldenOP || strPBericht == "KA-Statusliste.lst") 
								{
									// 15.03.22 Sasse
									// Call SqlImmedSel('SELECT
									// sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
									// INTO :frmMain.nAussenst FROM rk WHERE rkarztnr = :frmMain.nTANr
									// AND rkkzzahl <2 AND rkdeaktiv IS NULL')
									strSelect = @"SELECT
sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
INTO :frmMain.nAussenst FROM rk WHERE rkarztnr = :frmMain.nTANr
AND rkkzzahl <2 AND rkdeaktiv IS NULL";
									if (App.frmMain.dtSaldenOP != SalDateTime.Null) 
									{
										strSelect = strSelect + @"
AND rkrechdat < :frmMain.dtSaldenOP ";
									}
									Int.SqlImmedSel(strSelect);
								}
								else
								{
									App.frmMain.nAussenst = SalNumber.Null;
								}
								return true;
							}

						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Ausbuchungen.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							// 29.01.08 A194
							// Call SqlImmedSel('SELECT aname1, aname2, astr, aort
							// 		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt
							// 		FROM A
							// 		WHERE a.aarztnr = :frmMain.nTANr')
							if (strPSpezial == "ED") 
							{
								Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, aland, ddz1, ddz2, ddstr, ddort, ddland
		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.strLand
		FROM A, DD
		WHERE a.aarztnr = :frmMain.nTANr AND aarztnr=ddarztnr");
							}
							else
							{
								// 09.11.15 NULL -> asvland
								Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, aland, asvname1, asvname2, asvstr, asvort, asvland
		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.strLand
		FROM A
		WHERE a.aarztnr = :frmMain.nTANr");
							}
							// 03.01.12
							this.strLand = Int.PalPruefeLC(this.strLand, 0);


							if (App.frmMain.nTHNr != 0) 
							{
								Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn
		INTO :frmMain.strTHN1
		FROM H
		WHERE h.harztnr = :frmMain.nTANr AND h.hhalternr = :frmMain.nTHNr AND hdeaktiv IS NULL");
							}
							else
							{
								App.frmMain.strTHN1 = "";
							}
							// 31.07.07 F214
							if ((Int.PalStrNum(App.frmMain.nTANr, 5, 0) + Int.PalDateToStrJJJJMMTThhmmss(dtDDErfDat)) != strReset) 
							{
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								// 03.01.12
								if (strPSpezial == "VormonateED" || strPSpezial == "ED") 
								{
									Int.SqlImmedSel(@"SELECT ddz1, ddz2, ddstr, ddort, ddland, austid, austid2
		INTO :dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.strLand, :frmMain.strTAUStID, :frmMain.strTAUStID2
		FROM A, DD
		WHERE aarztnr = :frmMain.nTANr AND aarztnr = ddarztnr AND ddcode = 'AU' AND dderfdat = :dlgLlDruck.dtDDErfDat");
									this.strLand = Int.PalPruefeLC(this.strLand, 0);
								}

								strReset = Int.PalStrNum(App.frmMain.nTANr, 5, 0) + Int.PalDateToStrJJJJMMTThhmmss(dtDDErfDat);
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Rechnungsabgaben.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							// 29.01.08 A194
							// Call SqlImmedSel('SELECT aname1, aname2, astr, aort
							// 		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt
							// 		FROM A
							// 		WHERE a.aarztnr = :frmMain.nTANr')
							Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, aland, asvname1, asvname2, asvstr, asvort
		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand, :dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO
		FROM A
		WHERE a.aarztnr = :frmMain.nTANr");

							if (Int.PalStrNum(App.frmMain.nTANr, 5, 0) != strReset) 
							{
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								strReset = Int.PalStrNum(App.frmMain.nTANr, 5, 0);
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Erinnerungsliste.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							// 01.02.16 Ä1139
							Int.SqlImmedSel(@"SELECT SUM(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
INTO :frmMain.nDMOP FROM rk WHERE rkarztnr= :frmMain.nTANr AND rkhalternr = :frmMain.nTHNr AND rkdeaktiv IS NULL");

							if (Int.PalStrNum(App.frmMain.nTANr, 5, 0) != strReset) 
							{
								Int.SqlImmedSel(@"SELECT asvname1, asvname2, asvstr, asvort, asvland
		INTO :dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :frmMain.strTALand
		FROM A
		WHERE a.aarztnr = :frmMain.nTANr");
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								strReset = Int.PalStrNum(App.frmMain.nTANr, 5, 0);
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				// Else If strPBericht = 'MB-Bezahlt.lst'
				// If SqlFetchNext(hSqlLlDruck,nFetch)
				// If nFetch = FETCH_Ok
				// If frmMain.nTANr2 = 0 Or frmMain.nTANr2 = NUMBER_Null
				// Set frmMain.nTANr2 = frmMain.nTANr
				// Call SqlImmedSel('SELECT
				// sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
				// INTO :frmMain.nAussenst FROM rk WHERE rkarztnr IN  (:frmMain.nTANr, :frmMain.nTANr2)
				// AND rkhalternr = :frmMain.nTHNr AND rkkzzahl <2')
				// If frmMain.nAussenst = NUMBER_Null
				// Set frmMain.nAussenst = 0
				// Call SqlImmed('UPDATE pr SET prdruckdatum = '1900-1-1' WHERE ROWID = :frmMain.strROWID')
				// Return TRUE
				// Else
				// Return FALSE
				else if (strPBericht == "Negativliste.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							Int.SqlImmedSel(@"SELECT hti, hvn, hnn, hname2, hstr, hort
			INTO :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt
			FROM h
			WHERE harztnr = :frmMain.nTANr AND hhalternr = :frmMain.nTHNr AND hdeaktiv IS NULL");
							App.frmMain.strTHN1 = App.frmMain.strTHTi + App.frmMain.strTHVN + " " + App.frmMain.strTHNN;
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "MB-Kosten.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							Int.SqlImmedSel(@"SELECT aname1, aname2
		INTO :frmMain.strTAN1, :frmMain.strTAN2
		FROM A
		WHERE a.aarztnr = :frmMain.nTANr");
							Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn
		INTO :frmMain.strTHN1
		FROM h
		WHERE h.harztnr = :frmMain.nTANr AND h.hhalternr = :frmMain.nTHNr AND hdeaktiv IS NULL");
							if ((strTargetFormat == "PRN" || bePost) && !(bArchiv)) 
							{
								Int.SqlImmed("UPDATE mk SET mkdruck = :frmMain.dtDatum WHERE ROWID = :frmMain.strROWID");
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				// Else If strPBericht = 'Bankeinzüge.lst'
				// If SqlFetchNext(hSqlLlDruck,nFetch)
				// If nFetch = FETCH_Ok
				// Set frmMain.strTHLand = PalPruefeLC(frmMain.strTHLand,0)
				// Call SqlImmed('UPDATE bez SET bezerldat = '1900-1-1' WHERE ROWID = :frmMain.strROWID')
				// Return TRUE
				// Else
				// Return FALSE
				else if (strPBericht == "Buchungsbelege.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							Int.SqlImmed("UPDATE bub SET buberldat = '1900-1-1' WHERE ROWID = :frmMain.strROWID");
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "OP-Liste.lst" || strPBericht == "OP-ListeOP.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							// If frmMain.nOPMS = 99
							// Set frmMain.strTAN1 = frmMain.strTAN1 || '   NUR OFFENE MAHNGEB. UND ZINSEN !!!'
							// 13.02.01
							// Call SqlIstDa('FROM r,a WHERE aarztnr = :frmMain.nTANr AND rhalternr = :frmMain.nTHNr and (rarztnr=aarztnr or rarztnr=anr2)', bRepOk)
							// If frmMain.bRepOk
							// Set frmMain.strTHText = 'Ratenzahler'
							// Else
							// 19.04.10 OTÄ135

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalBoolean temp7 = App.frmMain.bRepOk;
							Int.SqlIstDa("FROM rz,a WHERE rzarztnr = :frmMain.nTANr AND rzhalternr = :frmMain.nTHNr and (rzarztnr=aarztnr or rzarztnr=anr2) AND rzaktivdat IS NOT NULL AND rzkuenddat IS NULL AND rzdeaktiv IS NULL", ref temp7);
							App.frmMain.bRepOk = temp7;

							if (App.frmMain.bRepOk) 
							{
								App.frmMain.strTHText = "Ratenzahler";
							}
							else
							{
								App.frmMain.strTHText = "";
							}
							// 17.12.04
							App.frmMain.strInkasso = "";
							// 16.01.07 F109
							// Call SqlImmedSel('SELECT \'von \' || razeichen || \'  am \' || @DATETOCHAR( radatum, \'dd.mm.yyyy\') || \' abgegeben an \' || raan1 INTO :frmMain.strInkasso
							// FROM ra WHERE raarztnr = :frmMain.nTANr AND rarechnr = :frmMain.nRechNr')
							Int.SqlImmedSel(@"SELECT 'von ' || razeichen || '  am ' || @DATETOCHAR( radatum, 'dd.mm.yyyy') || ' abgegeben an ' || raan1 INTO :frmMain.strInkasso
FROM ra WHERE raarztnr = :frmMain.nTANr AND rahalternr  = :frmMain.nTHNr AND rarechnr = :frmMain.nRechNr");
							// 07.04.10 OTÄ135
							if (App.frmMain.nTHNr != App.frmMain.nTHNrAlt) 
							{
								Int.SqlImmedSel(@"SELECT sum(hbdm)
		INTO :dlgLlDruck.nRZOffen
		FROM hb
		WHERE hbarztnr = :frmMain.nTANr AND hbhalternr = :frmMain.nTHNr");
							}
							App.frmMain.nTHNrAlt = App.frmMain.nTHNr;

							// 19.02.07 Ä79
							if (App.frmMain.nTANr != App.frmMain.nTANrAlt || dtDDErfDat != Var.dtHFSeitAlt) 
							{
								if (strPSpezial == "ED") 
								{
									Int.SqlImmedSel(@"SELECT ddz1, ddz2, ddstr, ddort, ddland
		INTO :dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.strLand
		FROM dd
		WHERE ddarztnr = :frmMain.nTANr AND dderfdat = :dlgLlDruck.dtDDErfDat");
								}
								else
								{
									Int.SqlImmedSel(@"SELECT asvname1, asvname2, asvstr, asvort, asvland
		INTO :dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.strLand
		FROM A
		WHERE a.aarztnr = :frmMain.nTANr");
								}
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
							}
							// 03.01.12
							this.strLand = Int.PalPruefeLC(this.strLand, 0);

							App.frmMain.nTANrAlt = App.frmMain.nTANr;
							Var.dtHFSeitAlt = dtDDErfDat;

							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Partien-Info.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							// If frmMain.nTANr != frmMain.nTANrAlt or frmMain.dtBuchDat != frmMain.dtZahlDatAlt
							// Set frmMain.dtZahlDatAlt = frmMain.dtBuchDat
							// Call SqlImmedSel( 'SELECT SUM( zadm)
							// FROM za, rk
							// INTO :frmMain.nErr
							// WHERE rkarztnr=zaarztnr AND rkhalternr=zahalternr AND rkrechnr=zarechnr
							// AND zaarztnr = :frmMain.nTANr AND rkrechdat = :frmMain.dtBuchDat AND rkrechnr<999990 AND zakz>=4' )
							Int.SqlImmedSel(@"SELECT SUM(@decode(zakz, 0, zadm, 1, zadm, 2, zadm, 3, zadm, 0)), SUM(@decode(zakz, 0, 0, 1, 0, 2, 0, 3, 0, zadm))
INTO :frmMain.nZahlDM, :frmMain.nErr
FROM za,rk WHERE rkarztnr=zaarztnr AND rkhalternr=zahalternr AND rkrechnr=zarechnr
AND zaarztnr = :frmMain.nTANr AND rkrechdat = :frmMain.dtBuchDat AND rkrechnr<999990 AND zadeaktiv IS NULL AND rkdeaktiv IS NULL");
							// Set strSelect = 'SELECT rkarztnr, rkrechdat, min(rkrechnr), sum(rkdmleis+rkdmarzn+rkmbdmopl),
							// sum(rkdmmahn), sum(rkdmzins),
							// sum(rkzaleis+rkzaarzn+rkmbzaopl),
							// sum(rkzamahn), sum(rkzazins), count(rkrechdat),
							// sum( @choose(rkkzzahl,0,0,0,0 ,(rkzaleis+rkzaarzn+rkzamahn+rkzazins+rkmbzaopl) ,(rkzaleis+rkzaarzn+rkzamahn+rkzazins+rkmbzaopl)))
							// INTO :frmMain.nTANr, :frmMain.dtBuchDat, :frmMain.nMinRechNr,
							// :frmMain.nDMRech, :frmMain.nDMMahn, :frmMain.nDMZins, :frmMain.nZaRech, :frmMain.nZaMahn, :frmMain.nZaZins,
							// :frmMain.nAnzRech, :frmMain.nDMAusbuch
							// from rk,a
							// WHERE rkarztnr=zaarztnr(+) AND rkhalternr=zahalternr(+) AND rkrechnr=zarechnr(+)
							// AND rkarztnr BETWEEN :frmMain.nArztVon AND :frmMain.nArztBis
							// AND (@MID(adrucke, 3,1) = \'X\' OR :frmMain.nImmer = 1)
							// AND rkarztnr=aarztnr
							// AND rkrechnr<999990
							// GROUP BY 1,2
							// ORDER BY rkarztnr, rkrechdat'
							if (App.frmMain.nErr == SalNumber.Null) 
							{
								App.frmMain.nErr = 0;
							}

							if (App.frmMain.nZahlDM == SalNumber.Null) 
							{
								App.frmMain.nZahlDM = 0;
							}
							App.frmMain.nErr = App.frmMain.nErr + (App.frmMain.nDMRech + App.frmMain.nDMMahn + App.frmMain.nDMZins - App.frmMain.nErr - App.frmMain.nZahlDM - App.frmMain.nDMOP);
							App.frmMain.nDMOP = App.frmMain.nDMOP - App.frmMain.nDM;
							if (App.frmMain.nDMRech < 0 && (App.frmMain.nErr == 0 && App.frmMain.nZaRech == 0)) 
							{
								App.frmMain.nZaRech = App.frmMain.nDMRech;
								App.frmMain.nZaMahn = App.frmMain.nDMMahn;
								App.frmMain.nZaZins = App.frmMain.nDMZins;
							}
							// Set frmMain.nErr = (frmMain.nDMRech + frmMain.nDMMahn + frmMain.nDMZins) - frmMain.nDMOP - frmMain.nZahlDM

							// Set frmVKZ.tblZM.colAusbuchDM = frmVKZ.tblZM.colAusbuchDM + (frmVKZ.tblZM.colRechDM - frmVKZ.tblZM.colAusbuchDM - frmVKZ.tblZM.colZahlDM - frmVKZ.tblZM.colUnbezahltDM)
							// If frmVKZ.tblZM.colRechDM < 0 and (frmVKZ.tblZM.colAusbuchDM = 0 and frmVKZ.tblZM.colZahlDM = 0)
							// Set frmVKZ.tblZM.colZahlDM = frmVKZ.tblZM.colRechDM
							// Set frmVKZ.tblZM.colAusbuchDM = frmVKZ.tblZM.colRechDM - frmVKZ.tblZM.colUnbezahltDM - frmVKZ.tblZM.colZahlDM
							// If frmVKZ.tblZM.colUnbezahltDM != NUMBER_Null and frmVKZ.tblZM.colUnbezahltDM != 0
							// Set frmVKZ.tblZM.colUnbezahltTage = SalDateCurrent(  ) - frmVKZ.tblZM.colDatum

							App.frmMain.nZaRech = App.frmMain.nZaRech - App.frmMain.nErr;
							App.frmMain.nDMAusbuch = App.frmMain.nErr + App.frmMain.nDM;
							if (App.frmMain.nTANr != App.frmMain.nTANrAlt) 
							{
								Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, aland
INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand
FROM a
WHERE aarztnr = :frmMain.nTANr");
								App.frmMain.nTANrAlt = App.frmMain.nTANr;
							}
							App.frmMain.nRechJahr = Sal.DateYear(App.frmMain.dtBuchDat);
							if (App.frmMain.nMinRechNr >= 999990) 
							{
								App.frmMain.strBezeichnung = "MB letzte Aktivität.";
							}
							else
							{
								App.frmMain.strBezeichnung = "Rechnungspartie";
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				// Else If strPBericht = 'Ratenzahler-Checkliste.lst'
				// While SqlFetchNext(hSqlLlDruck,nFetch)
				// If nFetch = FETCH_Ok
				// Set frmMain.bRepOk = FALSE
				// If frmMain.nDMRech > (frmMain.nDMRat / frmMain.nMtl * 24)
				// Set frmMain.bRepOk = TRUE
				// Else
				// Set frmMain.dtTeilzDat = '1900-01-01'
				// Set frmMain.dtMahnDat = '1900-01-01'
				// Call SqlImmedSel('SELECT max(zabuchdat) INTO :frmMain.dtTeilzDat FROM za
				// WHERE zaarztnr = :frmMain.nTANr AND zahalternr = :frmMain.nTHNr')
				// Call SqlImmedSel('SELECT max(madatum) INTO :frmMain.dtMahnDat FROM rk,ma
				// WHERE rkarztnr = :frmMain.nTANr AND rkhalternr = :frmMain.nTHNr AND rkarztnr=maarztnr AND rkrechnr=marechnr  AND mams IS NULL')
				// If frmMain.dtTeilzDat = DATETIME_Null
				// Set frmMain.dtTeilzDat = '1900-01-01'
				// If frmMain.dtMahnDat = DATETIME_Null
				// Set frmMain.dtMahnDat = '1900-01-01'
				// If frmMain.dtMahnDat > frmMain.dtTeilzDat And SalDateCurrent() > frmMain.dtRatDat + 5
				// Set frmMain.bRepOk = TRUE
				// If frmMain.bRepOk
				// Return TRUE
				// Else
				// Return FALSE
				// Else If strPBericht = 'Ratenzahlerliste.lst'
				// While SqlFetchNext(hSqlLlDruck,nFetch)
				// If nFetch = FETCH_Ok
				// Call SqlImmedSel('
				// SELECT
				// sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl),
				// max(rkrechdat)
				// INTO :frmMain.nDMRech, :frmMain.dtRechDat
				// FROM rk
				// WHERE rkarztnr IN (:frmMain.nTANr, :frmMain.nTANrAlt)
				// AND rkhalternr = :frmMain.nTHNr
				// AND rkkzzahl<2')
				// If frmMain.nDMRech > 0
				// Return TRUE
				// Else
				// Return FALSE
				// Return FALSE
				else if (strPBericht == "70-Checkliste.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							if (App.frmMain.nTANr != App.frmMain.nTANrAlt) 
							{
								Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, aland
INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand
FROM a
WHERE aarztnr = :frmMain.nTANr");
								App.frmMain.nTANrAlt = App.frmMain.nTANr;
							}
							App.frmMain.nZaDM = 0;
							App.frmMain.nTage30 = 0;
							App.frmMain.nTage70 = 0;
							App.frmMain.nTage90 = 0;
							App.frmMain.nTage95 = 0;
							App.frmMain.nProz70 = 0;
							App.frmMain.nProz30 = 0;
							App.frmMain.nProz90 = 0;
							App.frmMain.nProz95 = 0;
							App.frmMain.nBankZins = 0;
							App.frmMain.nRechJahr = Sal.DateYear(App.frmMain.dtBuchDat);
							App.frmMain.dtZahlDatAlt = App.frmMain.dtBuchDat;

							App.frmMain.dtZahlDat = SalDateTime.Null;
							// 15.10.09
							if (strPSpezial == "90") 
							{
								Int.SqlHandleExec(App.frmMain.hSql70, @"SELECT zabuchdat, sum(zadm) INTO :frmMain.dtZahlDat, :frmMain.nZahlDM
FROM rk,za
WHERE rkarztnr = :frmMain.nTANr AND rkrechdat = :frmMain.dtBuchDat
AND rkrechnr < 999990 AND rkrechdat>='1994-9-1' AND zadeaktiv IS NULL AND rkdeaktiv IS NULL
AND rkarztnr=zaarztnr AND rkrechnr=zarechnr
GROUP BY 1", "Lesen ZA bei 70%-Checkliste", ref Var.nErr);
							}
							else
							{
								Int.SqlHandleExec(App.frmMain.hSql70, @"SELECT zabuchdat, sum(zadm) INTO :frmMain.dtZahlDat, :frmMain.nZahlDM
FROM rk,za
WHERE rkarztnr = :frmMain.nTANr AND rkrechdat = :frmMain.dtBuchDat
AND rkrechnr < 999990 AND rkrechdat>='1994-9-1' AND zakz<4 AND zadeaktiv IS NULL AND rkdeaktiv IS NULL
AND rkarztnr=zaarztnr AND rkrechnr=zarechnr
GROUP BY 1", "Lesen ZA bei 70%-Checkliste", ref Var.nErr);
							}


							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalNumber temp8 = App.frmMain.nFetch70;
							Sql.FetchNext(App.frmMain.hSql70, ref temp8);
							App.frmMain.nFetch70 = temp8;

							while (App.frmMain.nFetch70 != Sys.FETCH_EOF) 
							{
								this.SetStatusBarText("TA " + Int.PalStrNum(App.frmMain.nTANr, 4, 0) + ": " + "  Partie: " + Int.SalDateToStrX(App.frmMain.dtBuchDat) + "  Zahlung: " + Int.SalDateToStrX(App.frmMain.dtZahlDat));

								if (App.frmMain.nTage70 == 0) 
								{
									// 15.10.09
									if (strPSpezial == "90") 
									{
									}
									else
									{
										App.frmMain.nBankZins = App.frmMain.nBankZins + ((App.frmMain.nDMRech * 0.7m - App.frmMain.nZaDM) * (App.frmMain.dtZahlDat - App.frmMain.dtZahlDatAlt) * App.frmMain.nBankProz) / (100 * 360);
									}
								}
								// If frmMain.nTage90 = 0
								// Set frmMain.nBankZins = frmMain.nBankZins +
								// ((frmMain.nDMRech*0.9-frmMain.nZaDM) * (frmMain.dtZahlDat-frmMain.dtZahlDatAlt) * frmMain.nBankProz) / (100 *360)
								if (App.frmMain.nTage95 == 0) 
								{
									// 15.10.09
									if (strPSpezial == "90") 
									{
										App.frmMain.nBankZins = App.frmMain.nBankZins + ((App.frmMain.nDMRech * 0.95m - App.frmMain.nZaDM) * (App.frmMain.dtZahlDat - App.frmMain.dtZahlDatAlt) * App.frmMain.nBankProz) / (100 * 360);
									}
								}

								App.frmMain.nZaDM = App.frmMain.nZaDM + App.frmMain.nZahlDM;
								App.frmMain.dtZahlDatAlt = App.frmMain.dtZahlDat;

								if (App.frmMain.nZaDM >= (App.frmMain.nDMRech * 0.3m) && App.frmMain.nTage30 == 0) 
								{
									App.frmMain.nTage30 = App.frmMain.dtZahlDat - App.frmMain.dtBuchDat;
									if (App.frmMain.nDMRech > 0) 
									{
										App.frmMain.nProz30 = App.frmMain.nZaDM / App.frmMain.nDMRech * 100;
									}
								}
								if (App.frmMain.nZaDM >= (App.frmMain.nDMRech * 0.7m) && App.frmMain.nTage70 == 0) 
								{
									App.frmMain.nTage70 = App.frmMain.dtZahlDat - App.frmMain.dtBuchDat;
									if (App.frmMain.nDMRech > 0) 
									{
										App.frmMain.nProz70 = App.frmMain.nZaDM / App.frmMain.nDMRech * 100;
									}
								}
								if (App.frmMain.nZaDM >= (App.frmMain.nDMRech * 0.9m) && App.frmMain.nTage90 == 0) 
								{
									App.frmMain.nTage90 = App.frmMain.dtZahlDat - App.frmMain.dtBuchDat;
									if (App.frmMain.nDMRech > 0) 
									{
										App.frmMain.nProz90 = App.frmMain.nZaDM / App.frmMain.nDMRech * 100;
									}
								}
								if (App.frmMain.nZaDM >= (App.frmMain.nDMRech * 0.95m) && App.frmMain.nTage95 == 0) 
								{
									App.frmMain.nTage95 = App.frmMain.dtZahlDat - App.frmMain.dtBuchDat;
									if (App.frmMain.nDMRech > 0) 
									{
										App.frmMain.nProz95 = App.frmMain.nZaDM / App.frmMain.nDMRech * 100;
									}
								}

								// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
								SalNumber temp9 = App.frmMain.nFetch70;
								Sql.FetchNext(App.frmMain.hSql70, ref temp9);
								App.frmMain.nFetch70 = temp9;

							}
							// Call SqlCommit( frmMain.hSql70 )
							if (App.frmMain.nTage30 == 0) 
							{
								App.frmMain.nTage30 = App.frmMain.dtZahlDat - App.frmMain.dtBuchDat;
								if (App.frmMain.nDMRech > 0) 
								{
									App.frmMain.nProz30 = App.frmMain.nZaDM / App.frmMain.nDMRech * 100;
								}
							}
							if (App.frmMain.nTage70 == 0) 
							{
								App.frmMain.nTage70 = App.frmMain.dtZahlDat - App.frmMain.dtBuchDat;
								if (App.frmMain.nDMRech > 0) 
								{
									App.frmMain.nProz70 = App.frmMain.nZaDM / App.frmMain.nDMRech * 100;
								}
								// 15.10.09
								if (strPSpezial == "90") 
								{
								}
								else
								{
									App.frmMain.nBankZins = App.frmMain.nBankZins + ((App.frmMain.nDMRech * 0.7m - App.frmMain.nZaDM) * (SalDateTime.Current - App.frmMain.dtZahlDat) * App.frmMain.nBankProz) / (100 * 360);
								}
							}
							if (App.frmMain.nTage90 == 0) 
							{
								App.frmMain.nTage90 = App.frmMain.dtZahlDat - App.frmMain.dtBuchDat;
								if (App.frmMain.nDMRech > 0) 
								{
									App.frmMain.nProz90 = App.frmMain.nZaDM / App.frmMain.nDMRech * 100;
								}
								// Set frmMain.nBankZins = frmMain.nBankZins +
								// ((frmMain.nDMRech*0.9-frmMain.nZaDM) * (SalDateCurrent() - frmMain.dtZahlDat) * frmMain.nBankProz) / (100 *360)
							}
							if (App.frmMain.nTage95 == 0) 
							{
								App.frmMain.nTage95 = App.frmMain.dtZahlDat - App.frmMain.dtBuchDat;
								if (App.frmMain.nDMRech > 0) 
								{
									App.frmMain.nProz95 = App.frmMain.nZaDM / App.frmMain.nDMRech * 100;
								}
								// 15.10.09
								if (strPSpezial == "90") 
								{
									App.frmMain.nBankZins = App.frmMain.nBankZins + ((App.frmMain.nDMRech * 0.95m - App.frmMain.nZaDM) * (SalDateTime.Current - App.frmMain.dtZahlDat) * App.frmMain.nBankProz) / (100 * 360);
								}
							}

							// 15.10.09
							if (strPSpezial == "90") 
							{
								App.frmMain.nTVZins = App.frmMain.nDMRech * 0.9m * App.frmMain.nTVProz / 100;
							}
							else
							{
								App.frmMain.nTVZins = App.frmMain.nDMRech * 0.7m * App.frmMain.nTVProz / 100;
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Buchungsabgleich.crd" || strPBericht == "Brief-Mandatsanfrage.crd" || strPBericht == "Brief TVSNr-Diskette.crd" || strPBericht == "Begleitschreiben.crd" || strPBericht == "Rechnungsabgabe.crd" || (strPBericht.Left(
					6) == "Brief_" && strPBericht.Right(4) == ".crd") || strPBericht == "BriefVariabel.crd" || strPBericht == "BriefEDA.crd" || strPBericht == "BriefRTF.crd") 
				{
					if (App.frmMain.bNoFetch) 
					{
						return false;
					}
					else
					{
						App.frmMain.bNoFetch = true;
						// 24.07.13 Ä903
						if (strPBericht == "Brief-Mandatsanfrage.crd") 
						{
							strLand = Sal.StrMidX(App.frmHalter.cmbLC.Text, 3, 255);
						}
						else
						{
							// 28.04.10 OTÄ420
							if (strPBericht.Left(6) == "Brief_" && strPBericht.Right(4) == ".crd") 
							{
								if (App.frmBrAktiErf.strTALand != "") 
								{
									if (App.frmBrAktiErf.strTALand.Length <= 2) 
									{
										if (App.frmBrAktiErf.strTALand != strAltLand) 
										{
											strAltLand = App.frmBrAktiErf.strTALand;
											App.frmBrAktiErf.strTALand = Int.PalPruefeLC(App.frmBrAktiErf.strTALand, 0);
										}
									}
								}
							}
						}

						return true;
					}
				}
				else if (strPBericht == "TA-Statistik.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							App.frmMain.nRechJahr = App.frmMain.nRechJahr + 1900;
							if (App.frmMain.nTANr != App.frmMain.nTANrAlt) 
							{
								App.frmMain.nRech1Alt = 0;
								App.frmMain.nRech2Alt = 0;
								App.frmMain.nRech3Alt = 0;
								App.frmMain.nRech4Alt = 0;
								App.frmMain.nTANrAlt = App.frmMain.nTANr;
							}
							App.frmMain.nProz1 = SalNumber.Null;
							App.frmMain.nProz2 = SalNumber.Null;
							App.frmMain.nProz3 = SalNumber.Null;
							App.frmMain.nProz4 = SalNumber.Null;

							App.frmMain.nRech2 = App.frmMain.nRech1 + App.frmMain.nRech2;
							App.frmMain.nRech3 = App.frmMain.nRech2 + App.frmMain.nRech3;
							App.frmMain.nRech4 = App.frmMain.nRech3 + App.frmMain.nRech4;

							// Set frmMain.nRech2Alt = frmMain.nRech1Alt + frmMain.nRech2Alt
							// Set frmMain.nRech3Alt = frmMain.nRech2Alt + frmMain.nRech3Alt
							// Set frmMain.nRech4Alt =nRech3Alt + frmMain.nRech4Alt

							if (App.frmMain.nRech1Alt != 0 && App.frmMain.nRech1 != SalNumber.Null && App.frmMain.nRech1Alt != SalNumber.Null) 
							{
								App.frmMain.nProz1 = App.frmMain.nRech1 / App.frmMain.nRech1Alt - 1;
							}
							if (App.frmMain.nRech2Alt != 0 && App.frmMain.nRech2 != SalNumber.Null && App.frmMain.nRech2Alt != SalNumber.Null) 
							{
								App.frmMain.nProz2 = App.frmMain.nRech2 / App.frmMain.nRech2Alt - 1;
							}
							if (App.frmMain.nRech3Alt != 0 && App.frmMain.nRech3 != SalNumber.Null && App.frmMain.nRech3Alt != SalNumber.Null) 
							{
								App.frmMain.nProz3 = App.frmMain.nRech3 / App.frmMain.nRech3Alt - 1;
							}
							if (App.frmMain.nRech4Alt != 0 && App.frmMain.nRech4 != SalNumber.Null && App.frmMain.nRech4Alt != SalNumber.Null) 
							{
								App.frmMain.nProz4 = App.frmMain.nRech4 / App.frmMain.nRech4Alt - 1;
							}
							App.frmMain.nRech1Alt = App.frmMain.nRech1;
							App.frmMain.nRech2Alt = App.frmMain.nRech2;
							App.frmMain.nRech3Alt = App.frmMain.nRech3;
							App.frmMain.nRech4Alt = App.frmMain.nRech4;
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "TA-StatistikVARI.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{

							App.frmMain.nRechJahr = App.frmMain.nRechJahr + 1900;
							if (App.frmMain.nTANr != App.frmMain.nTANrAlt) 
							{
								App.frmMain.nRech1Alt = 0;
								App.frmMain.nTANrAlt = App.frmMain.nTANr;
							}
							App.frmMain.nProz1 = SalNumber.Null;


							if (App.frmMain.nRech1Alt != 0 && App.frmMain.nRech1 != SalNumber.Null && App.frmMain.nRech1Alt != SalNumber.Null) 
							{
								App.frmMain.nProz1 = App.frmMain.nRech1 / App.frmMain.nRech1Alt - 1;
							}
							App.frmMain.nRech1Alt = App.frmMain.nRech1;
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Solvenzliste.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							if (App.frmMain.nTANr != App.frmMain.nTANrAlt) 
							{
								Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, aland
INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand
FROM a
WHERE aarztnr = :frmMain.nTANr");
								App.frmMain.nTANrAlt = App.frmMain.nTANr;
							}
							App.frmMain.nDMZins = 0;
							App.frmMain.nDMRest = 0;
							App.frmMain.nTage = 0;

							if (App.frmMain.dtZahlDatAlt != SalDateTime.Null) 
							{
								App.frmMain.nTage = App.frmMain.dtBuchDat - App.frmMain.dtZahlDatAlt;
							}
							App.frmMain.nDMRest = App.frmMain.nDMRestAlt + App.frmMain.nDMVorsch - App.frmMain.nDMZahl;
							if (App.frmMain.nTage > 0) 
							{
								App.frmMain.nDMZins = (App.frmMain.nDMRestAlt * App.frmMain.nTage * App.frmMain.nBankProz) / (100 * 360);
							}

							App.frmMain.dtZahlDatAlt = App.frmMain.dtBuchDat;
							App.frmMain.nDMRestAlt = App.frmMain.nDMRest;
							App.frmMain.nDMZahlAlt = App.frmMain.nDMZahl;

							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Zahlungsmeldungen.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							Int.SqlImmed("UPDATE z SET zerledigt = \'Z\'  WHERE ROWID = :frmMain.strROWID");
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Mahnprotokoll.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							// 26.07.13 Ä938
							// 31.07.07 F214
							// If PalStrNum(frmMahn.nTANr,5,0) != strDummy
							// Call SqlImmedSel('SELECT asvname1, asvname2, asvstr, asvort, asvland
							// 		INTO :frmMahn.strTAN1, :frmMahn.strTAN2, :frmMahn.strTAStr, :frmMahn.strTAOrt, :frmMain.strTALand
							// 		FROM A
							// 		WHERE a.aarztnr = :frmMahn.nTANr')
							// If Not bFirst
							// Set bLlPrintResetProjectState = TRUE
							// Set strDummy = PalStrNum(frmMahn.nTANr,5,0)
							if ((Int.PalStrNum(App.frmMahn.nTANr, 5, 0) + Int.PalDateToStrJJJJMMTThhmmss(dtDDErfDat)) != strReset) 
							{
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								Int.SqlImmedSel(@"SELECT asvname1, asvname2, asvstr, asvort, asvland
		INTO :frmMahn.strTAN1, :frmMahn.strTAN2, :frmMahn.strTAStr, :frmMahn.strTAOrt, :frmMain.strTALand
		FROM A
		WHERE a.aarztnr = :frmMahn.nTANr");
								if (strPSpezial == "ED") 
								{
									Int.SqlImmedSel(@"SELECT ddz1, ddz2, ddstr, ddort, ddland, austid, austid2
		INTO :dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.strLand, :frmMain.strTAUStID, :frmMain.strTAUStID2
		FROM A, DD
		WHERE aarztnr = :frmMahn.nTANr AND aarztnr = ddarztnr AND ddcode = 'MP' AND dderfdat = :dlgLlDruck.dtDDErfDat");
								}
								else
								{
									strN1 = App.frmMahn.strTAN1;
									strN2 = App.frmMahn.strTAN2;
									strS = App.frmMahn.strTAStr;
									strO = App.frmMahn.strTAOrt;
									strLand = App.frmMain.strTALand;
								}

								this.strLand = Int.PalPruefeLC(this.strLand, 0);

								strReset = Int.PalStrNum(App.frmMahn.nTANr, 5, 0) + Int.PalDateToStrJJJJMMTThhmmss(dtDDErfDat);
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "MB-Anfragen.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							App.frmMahn.strSolvenzprf = "";
							// 06.10.08
							App.frmMahn.dtSolvenzprf = SalDateTime.Null;
							// 31.07.08
							if (Sal.NumberToStrX(App.frmMahn.nTANr, 0) + Sal.NumberToStrX(App.frmMahn.nTHNr, 0) != strReset) 
							{
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								strReset = Sal.NumberToStrX(App.frmMahn.nTANr, 0) + Sal.NumberToStrX(App.frmMahn.nTHNr, 0);
							}
							// 10.04.06 Ländercodes
							App.frmMahn.strTHLand = Int.PalPruefeLC(App.frmMahn.strTHLand, 0);

							Int.SqlImmedSel(@"SELECT akdatum, vbez INTO :frmMahn.dtSolvenzprf, :frmMahn.strSolvenzprf
FROM ak, v WHERE aktyp='MG' AND aktypdetail LIKE 'CRED%' and vcode = aktypdetail AND akdeaktiv IS NULL
AND akarztnr = :frmMahn.nTANr AND akhalternr = :frmMahn.nTHNr ORDER BY akdatum DESC");
							if (App.frmMahn.dtSolvenzprf != SalDateTime.Null) 
							{
								App.frmMahn.strSolvenzprf = "Letzte Solvenzprüfung: " + Int.SalDateToStrX(App.frmMahn.dtSolvenzprf) + " " + App.frmMahn.strSolvenzprf;
							}
							return true;
						}
						else
						{
							App.frmMahn.strSolvenzprf = "";
							return false;
						}
					}
				}
				else if (strPBericht == "MB-Deckblatt.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							// 09.04.09 OTF2247
							// If SalNumberToStrX(frmMahn.nTANr* 1000000 + frmMahn.nTHNr ,0) != strDummy
							// If Not bFirst
							// Set bLlPrintResetProjectState = TRUE
							// Set strDummy = SalNumberToStrX(frmMahn.nTANr* 1000000 + frmMahn.nTHNr ,0)
							if (Sal.NumberToStrX(App.frmMahn.nMBNr, 0) != strReset) 
							{

								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								strReset = Sal.NumberToStrX(App.frmMahn.nMBNr, 0);
							}

							App.frmMahn.nHF1 = 0;
							// 10.04.06 Ländercodes
							App.frmMahn.strTHLand = Int.PalPruefeLC(App.frmMahn.strTHLand, 0);
							// 28.08.06 Aufgabe 7
							App.frmMahn.strZust = Int.PalZust(App.frmMahn.nTANr);

							App.frmMahn.nMG1 = 0;
							App.frmMahn.nZI1 = 0;
							App.frmMahn.dtDat1 = SalDateTime.Null;
							App.frmMahn.dtFaell1 = SalDateTime.Null;
							App.frmMahn.nAnzRech = 0;
							App.frmMahn.nMaxNebenko = 99999999;
							Int.SqlImmedSel(@"SELECT (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn),
(rkdmmahn-rkzamahn), (rkdmzins-rkzazins), rkrechDat,  rkfaelldat
INTO :frmMahn.nHF1, :frmMahn.nMG1, :frmMahn.nZI1, :frmMahn.dtDat1, :frmMahn.dtFaell1
FROM rk
WHERE rkarztnr = :frmMahn.nA1 AND rkhalternr = :frmMahn.nTHNr
AND rkrechnr = :frmMahn.nRg1 AND rkdeaktiv IS NULL");
							// 28.07.20
							Int.SqlImmedSel(@"SELECT badm1, badm3
INTO :frmMahn.nDM1, :frmMahn.nDM3
FROM ba
WHERE banr = 1");
							if (App.frmMahn.dtMBDatum >= new SalDateTime(2020, 7, 1) && App.frmMahn.dtMBDatum <= new SalDateTime(2020, 12, 31)) 
							{
								App.frmMahn.nDM1 = (App.frmMahn.nDM1 * 116 / 119 * 100).Round() / 100;
								App.frmMahn.nDM3 = (App.frmMahn.nDM3 * 116 / 119 * 100).Round() / 100;
							}

							App.frmMahn.nAnzRech = 0;
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Gerichtskosten.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							// 28.08.06 Aufgabe 7
							App.frmMahn.strZust = Int.PalZust(App.frmMahn.nTANr);

							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Überweisungen.lst") 
				{
					if (Sal.TblFindNextRow(App.frmUeberwListe.tblUeberw, ref nRow, 0, 0)) 
					{
						Sal.TblSetFocusRow(App.frmUeberwListe.tblUeberw, nRow);
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "Vollstreckungsauftrag.crd" || strPBericht == "Pfü.crd" || strPBericht == "Pfü2023.crd" || strPBericht == "VZ.crd" || strPBericht == "DS-Beschluss.crd" || strPBericht == "DSNacht-Beschluss.crd" || strPBericht == "Haftbefehl-Antrag.crd" || 
				strPBericht == "Vollstreckungsauftrag2023.crd" || strPBericht == "Aufstellung der Forderungen für VA.crd" || strPBericht == "Pfü2023Beschluss.crd" || strPBericht == "Aufstellung der Forderungen für Pfü.crd" || strPBericht == "DS-Antrag2023.crd" || 
				strPBericht == "DS-Beschluss2023.crd") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							if (Sal.NumberToStrX(App.frmMBKalender.nProzNr, 0) != strReset) 
							{
								App.frmMain.nTANrAlt = App.frmMBKalender.nProzNr;

								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								strReset = Sal.NumberToStrX(App.frmMBKalender.nProzNr, 0);
							}

							App.frmMBKalender.strGerOrt = App.frmMBKalender.strGerName.Mid(App.frmMBKalender.strGerName.Scan(" ") + 1, 255);
							// 13.05.19 Ä1852
							if (strPBericht != "VZ.crd") 
							{
								// 17.06.19 F4506
								if (App.frmMBKalender.strGerName.Left(2) == "AG") 
								{
									App.frmMBKalender.nDiverse = 1;
								}
								else
								{
									App.frmMBKalender.nDiverse = 9999999999m;
								}

								// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
								SalString temp10 = App.frmMBKalender.strGerStrasse;
								Var.strDummy = Int.PalHoleGericht(App.frmMBKalender.strHO.Trim().Left(App.frmMBKalender.strHO.Trim().Scan(" ")), App.frmMBKalender.nDiverse, App.frmMBKalender.strHLand.Left(2), ref temp10);
								App.frmMBKalender.strGerStrasse = temp10;

								// Call SqlImmedSel( 'SELECT gestr INTO :frmMBKalender.strGerStrasse FROM ge WHERE gebez = :frmMBKalender.strGerName AND gestr IS NOT NULL' )
								Int.SqlImmedSel("SELECT gestr INTO :frmMBKalender.strGerStrasse FROM ge WHERE gebez = :frmMBKalender.strGerName AND gestr IS NOT NULL");
							}
							// 15.04.13 Ä927 + RKRECHDAT
							Int.SqlImmedSel(@"SELECT prdarztnr, prdrechnr, prdhalternr, rkrechdat
INTO :frmMBKalender.nArztNr, :frmMBKalender.nRechNr, :frmMBKalender.nHalterNr, :frmMBKalender.dtRechDat
FROM prd, rk
WHERE prdnr = :frmMBKalender.nProzNr AND rkdeaktiv IS NULL
AND prdarztnr=rkarztnr AND prdhalternr=rkhalternr AND prdrechnr=rkrechnr");

							// 29.08.06 Aufgabe 7 +  || '/ ' || PalZust(nArztNr)
							App.frmMBKalender.strZeichen = Int.PalStrNum(App.frmMBKalender.nArztNr, 4, 0) + "/" + Int.PalStrNum(App.frmMBKalender.nRechNr, 6, 0) + " Ha" + Int.PalStrNum(App.frmMBKalender.nHalterNr, 5, 0) + " PR" + Int.PalStrNum(App.frmMBKalender.nProzNr, 
								5, 0) + "/ " + Int.PalZust(App.frmMBKalender.nArztNr);
							// 29.02.08 F342 If nProzNr != nProzNrAlt
							if (App.frmMBKalender.nProzNr != App.frmMBKalender.nProzNrAlt) 
							{
								// 13.12.11 Ä687
								// If strPBericht = 'Pfü.crd'
								strRaZaNr = "";
								nRZOffen = 0;
								Int.SqlImmedSel("SELECT anr2 INTO :frmMBKalender.nDiverse FROM a WHERE aarztnr = :frmMBKalender.nArztNr");
								if (App.frmMBKalender.nDiverse == 0 || App.frmMBKalender.nDiverse == SalNumber.Null) 
								{
									App.frmMBKalender.nDiverse = App.frmMBKalender.nArztNr;
								}
								// 18.12.07 Ä164
								App.frmMBKalender.nLfdZins = 0;
								if (strPBericht != "Haftbefehl-Antrag.crd") 
								{
									if (Int.PalFA(App.frmMBKalender.nProzNr, App.frmMBKalender.nArztNr, App.frmMBKalender.nHalterNr, App.frmMBKalender.strZusatzkosten, App.frmMBKalender.nZusatzkosten, SalDateTime.Current, false, true, true)) 
									{
                                        // 15.02.12
                                        // Call SqlImmedSel('SELECT sum(fazinsdm) FROM fa INTO :frmMBKalender.nLfdZins WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser')
                                        // 15.04.13 Ä927
                                        // Call SqlImmedSel('SELECT sum(fazinsdm) FROM fa INTO :frmMBKalender.nLfdZins WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser AND fatext NOT LIKE
                                        // \'%€ VZ%\'')
                                        Int.SqlImmedSel(@"SELECT sum(fazinsdm) FROM fa INTO :frmMBKalender.nLfdZins WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser
AND fatext NOT LIKE '%Kosten €%' AND fatext NOT LIKE '%vorgerichtliche Zinsen%'");
                                        // 29.03.16
                                        Int.SqlImmedSel(@"SELECT sum(fazinsdm), sum(fadmhf), sum(fadmko), sum(faunvzdm), sum(faunvzdmtit)
FROM fa
INTO :frmMBKalender.nLfdZinsAlles, :frmMBKalender.nHFAlles, :frmMBKalender.nVZAlles, :frmMBKalender.nUVZAlles, :frmMBKalender.nUVZTit
WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser");
                                        // 19.06.24 F5127
                                        Int.SqlImmedSel(@"SELECT sum(faunvzdm)
FROM fa
INTO :frmMBKalender.nUVZPfue
WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser AND fatext = 'Pfändungs-Überweisungsbeschluss'");
                                        Int.SqlImmedSel(@"SELECT sum(faunvzdm)
FROM fa
INTO :frmMBKalender.nUVZPfueGK
WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser AND fatext = 'Pfändung Gerichtskosten'");

                                        Int.SqlImmedSel(@"SELECT sum(fazinsdm) FROM fa INTO :frmMBKalender.nVorgZinsen WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser AND fatext LIKE
'%vorgerichtliche Zinsen%'");

                                        Int.SqlImmedSel(@"SELECT sum(fazinsdm) FROM fa INTO :frmMBKalender.nLfdZinsVZ WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser AND fatext LIKE
'%Kosten €%'");
                                        // 02.10.24 KN ###
                                        Int.SqlImmedSel(@"SELECT fadmhf, faseitko FROM fa INTO :frmMBKalender.nDMHF, :frmMBKalender.dtSeitKo
WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser AND fatext LIKE 'Mahnbescheid AZ%' AND fadmhf>0");
                                        Int.SqlImmedSel(@"SELECT fadatum INTO :frmMBKalender.dtVAErlass
FROM fa
WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser AND fatext = 'Vollstreckungsauftrag'");
                                        // 23.10.24 laut KN ###
                                        // Call SqlImmedSel('SELECT fadatum INTO :frmMBKalender.dtPfueErlass
                                        // FROM fa
                                        // WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser AND fatext = \'Pfändungs-Überweisungsbeschluss\'')
                                        // If frmMBKalender.dtPfueErlass = DATETIME_Null
                                        App.frmMBKalender.dtPfueErlass = SalDateTime.Current;

                                        App.frmMBKalender.dtPfueErlass = Int.PalAddDay(App.frmMBKalender.dtPfueErlass, -1);
                                        // 23.10.24 ###
                                        if (strPBericht.Scan("Pfü") != -1)
                                        {
                                            App.frmMBKalender.dtVAErlass = SalDateTime.Current;
                                        }
                                        else
                                        {
                                            if (App.frmMBKalender.dtVAErlass == SalDateTime.Null)
                                            {
                                                App.frmMBKalender.dtVAErlass = SalDateTime.Current;
                                            }
                                            App.frmMBKalender.dtVAErlassYMD = new SalDateTime(Sal.DateYear(App.frmMBKalender.dtVAErlass), Sal.DateMonth(App.frmMBKalender.dtVAErlass), Sal.DateDay(App.frmMBKalender.dtVAErlass), 0, 0, 0);
                                            if (App.frmMBKalender.dtVAErlassYMD == SalDateTime.Null || Sal.DateYear(App.frmMBKalender.dtVAErlassYMD) == 0)
                                            {
                                                App.frmMBKalender.dtVAErlassYMD = new SalDateTime(1900, 1, 2);
                                            }
                                        }

                                        Int.SqlImmedSel(@"SELECT sum(fazinsdm) FROM fa INTO :frmMBKalender.nZinsKobisVA WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser
AND fatext LIKE '%auf Kosten €%' and fazinsvon < :frmMBKalender.dtVAErlassYMD");
                                        Int.SqlImmedSel(@"SELECT sum(fazinsdm) FROM fa INTO :frmMBKalender.nZinsHFbisVA WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser
AND fatext LIKE '%auf HF €%' and fazinsvon < :frmMBKalender.dtVAErlassYMD");
                                        App.frmMBKalender.dtPfueErlassYMD = new SalDateTime(Sal.DateYear(App.frmMBKalender.dtPfueErlass), Sal.DateMonth(App.frmMBKalender.dtPfueErlass), Sal.DateDay(App.frmMBKalender.dtPfueErlass), 0, 0, 0);
                                        if (App.frmMBKalender.dtPfueErlassYMD == SalDateTime.Null)
                                        {
                                            App.frmMBKalender.dtPfueErlassYMD = new SalDateTime(1900, 1, 1);
                                        }
                                        Int.SqlImmedSel(@"SELECT sum(fazinsdm) FROM fa INTO :frmMBKalender.nZinsKobisPfue WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser
AND fatext LIKE '%auf Kosten €%' and fazinsvon < :frmMBKalender.dtPfueErlassYMD");
                                        Int.SqlImmedSel(@"SELECT sum(fazinsdm) FROM fa INTO :frmMBKalender.nZinsHFbisPfue WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser
AND fatext LIKE '%auf HF €%' and fazinsvon < :frmMBKalender.dtPfueErlassYMD");
                                    }
									// 13.12.11 Ä678
									// 13.12.11 Ä687
									// If strPBericht = 'Pfü.crd'
									Int.SqlHandleExec(hSqlLlDruck2, @"SELECT hbrznr, sum(hbdm) INTO :dlgLlDruck.nRZfrei, :dlgLlDruck.nDM
FROM hb WHERE hbarztnr IN (:frmMBKalender.nArztNr, :frmMBKalender.nDiverse) AND hbhalternr = :frmMBKalender.nHalterNr
AND @LEFT(hbcode,2) = 'Zi' GROUP BY 1", "Fehler", ref nCount);
									nFetch2 = hSqlLlDruck2.FetchNext();
									while (nFetch2 != Sys.FETCH_EOF) 
									{
										if (strRaZaNr != "") 
										{
											strRaZaNr = strRaZaNr + ", ";
										}
										strRaZaNr = strRaZaNr + nRZfrei.ToString(0);
										nRZOffen = nRZOffen - nDM;
										nFetch2 = hSqlLlDruck2.FetchNext();
									}
								}
								// 12.03.13 Ä 894
								// 18.07.22 Ä2026 +, hgebdat2, hgebdattext, hgebdat2text
								// 13.10.23 Ä2029+ VN, NN
								Int.SqlImmedSel(@"SELECT hgebdat, hgebdat2, hgebdattext, hgebdat2text, hvn, hnn
INTO :frmMBKalender.dtHGebDat, :frmMBKalender.dtHGebDat2, :frmMBKalender.strHGebDatText, :frmMBKalender.strHGebDat2Text,
:dlgLlDruck.strHVN, :dlgLlDruck.strHNN
FROM h
WHERE harztnr = :frmMBKalender.nArztNr AND hhalternr = :frmMBKalender.nHalterNr AND hdeaktiv IS NULL");


								App.frmMBKalender.nProzNrAlt = App.frmMBKalender.nProzNr;
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				// Else If strPBericht = 'PRs je Benutzer.lst'
				// If SqlFetchNext(hSqlLlDruck,nFetch)
				// If nFetch = FETCH_Ok
				// Call PalFetchNextDetail()
				// Return TRUE
				// Else
				// Set nFetch = FETCH_EOF
				// Else
				// Set nFetch = FETCH_EOF
				// While nFetch != FETCH_Ok
				// If SalStrLeftX(strZMatch,1) <= 'F' or SalStrLeftX(strZMatch,1) = 'Z'
				// Set strResult = 'KO'
				// Else If (SalStrLeftX(strZMatch,1) >= 'G' And SalStrLeftX(strZMatch,1) <= 'J')  or SalStrLeftX(strZMatch,1) = 'V'
				// Set strResult = 'SE'
				// Else If (SalStrLeftX(strZMatch,1) >= 'K' And SalStrLeftX(strZMatch,1) <= 'M')
				// Set strResult = 'YI'
				// Else If (SalStrLeftX(strZMatch,1) >= 'N' And SalStrLeftX(strZMatch,1) <= 'R')
				// Set strResult = 'KN'
				// Else
				// Set strResult = 'ZK'
				// 04.01.13 F1495
				// If frmMain.strZust = 'TO'
				// Set frmMain.strZust = 'KO'
				// 10.10.16 F2770 prbezahlt -> prerledigt
				// Set strSelect = '
				// SELECT @year(prdatum)+1900, sum(@isna(prerledigt)), count(*) INTO :frmMain.nRechJahr, :frmMain.nAnzBezahlt, :frmMain.nAnzAlle FROM pr,a
				// WHERE prdatum>=2001-01-01 AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) BETWEEN \'B\' AND \'F\' OR @UPPER(@LEFT(amatch,1))=\'Z\' OR @UPPER(@LEFT(amatch,1))=\'J\' OR @UPPER(@LEFT(amatch,1))=\'V\') group by 1'
				// If NOT SqlPrepar(hSqlLlDruck,strSelect)
				// Return FALSE
				// Else
				// If NOT SqlExecute(hSqlLlDruck)
				// Return FALSE
				// Else
				// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
				// Set nCountRec = nCountRec * 4
				// If SqlFetchNext(hSqlLlDruck,nFetch)
				// If nFetch = FETCH_Ok
				// Call PalFetchNextDetail()
				// Return TRUE
				// Else
				// Set nFetch = FETCH_EOF
				// Else
				// Set nFetch = FETCH_EOF
				// If frmMain.strZust = 'KO'
				// Set frmMain.strZust = 'SE'
				// 10.10.16 F2770 prbezahlt -> prerledigt
				// Set strSelect = '
				// SELECT @year(prdatum)+1900, sum(@isna(prerledigt)), count(*) INTO :frmMain.nRechJahr, :frmMain.nAnzBezahlt, :frmMain.nAnzAlle FROM pr,a
				// WHERE prdatum>=2001-01-01 AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) >=\'G\' and @UPPER(@LEFT(amatch,1))<=\'I\' ) group by 1'
				// If NOT SqlPrepar(hSqlLlDruck,strSelect)
				// Return FALSE
				// Else
				// If NOT SqlExecute(hSqlLlDruck)
				// Return FALSE
				// Else
				// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
				// Set nCountRec = nCountRec * 4
				// If SqlFetchNext(hSqlLlDruck,nFetch)
				// If nFetch = FETCH_Ok
				// Call PalFetchNextDetail()
				// Return TRUE
				// Else
				// Set nFetch = FETCH_EOF
				// Else
				// Set nFetch = FETCH_EOF
				// Else If frmMain.strZust = 'SE'
				// Set frmMain.strZust = 'YI'
				// 10.10.16 F2770 prbezahlt -> prerledigt
				// Set strSelect = '
				// SELECT @year(prdatum)+1900, sum(@isna(prerledigt)), count(*) INTO :frmMain.nRechJahr, :frmMain.nAnzBezahlt, :frmMain.nAnzAlle FROM pr,a WHERE prdatum>=2001-01-01 AND prarztnr=aarztnr
				// and ((@UPPER(@LEFT(amatch,1)) >=\'K\' and @UPPER(@LEFT(amatch,1))<=\'M\'))
				// group by
				// 1'
				// If NOT SqlPrepar(hSqlLlDruck,strSelect)
				// Return FALSE
				// Else
				// If NOT SqlExecute(hSqlLlDruck)
				// Return FALSE
				// Else
				// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
				// Set nCountRec = nCountRec * 4
				// If SqlFetchNext(hSqlLlDruck,nFetch)
				// If nFetch = FETCH_Ok
				// Call PalFetchNextDetail()
				// Return TRUE
				// Else
				// Set nFetch = FETCH_EOF
				// Else
				// Set nFetch = FETCH_EOF
				// Else If frmMain.strZust = 'YI'
				// Set frmMain.strZust = 'ZK'
				// 10.10.16 F2770 prbezahlt -> prerledigt
				// Set strSelect = '
				// SELECT @year(prdatum)+1900, sum(@isna(prerledigt)), count(*) INTO :frmMain.nRechJahr, :frmMain.nAnzBezahlt, :frmMain.nAnzAlle FROM pr,a
				// WHERE prdatum>=2001-01-01 AND prarztnr=aarztnr and @UPPER(@LEFT(amatch,1)) >=\'S\' AND @UPPER(@LEFT(amatch,1)) <=\'Y\' and @UPPER(@LEFT(amatch,1))<>\'V\' group by 1'
				// If NOT SqlPrepar(hSqlLlDruck,strSelect)
				// Return FALSE
				// Else
				// If NOT SqlExecute(hSqlLlDruck)
				// Return FALSE
				// Else
				// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
				// Set nCountRec = nCountRec * 4
				// If SqlFetchNext(hSqlLlDruck,nFetch)
				// If nFetch = FETCH_Ok
				// Call PalFetchNextDetail()
				// Return TRUE
				// Else
				// Set nFetch = FETCH_EOF
				// Else
				// Set nFetch = FETCH_EOF
				// Else If frmMain.strZust = 'ZK'	! 18.07.07 A113
				// Set frmMain.strZust = '<alle>'
				// 10.10.16 F2770 prbezahlt -> prerledigt
				// Set strSelect = '
				// SELECT @year(prdatum)+1900, sum(@isna(prerledigt)), count(*) INTO :frmMain.nRechJahr, :frmMain.nAnzBezahlt, :frmMain.nAnzAlle FROM pr WHERE prdatum>=2001-01-01 GROUP BY 1'
				// If NOT SqlPrepar(hSqlLlDruck,strSelect)
				// Return FALSE
				// Else
				// If NOT SqlExecute(hSqlLlDruck)
				// Return FALSE
				// Else
				// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
				// Set nCountRec = nCountRec * 4
				// If SqlFetchNext(hSqlLlDruck,nFetch)
				// If nFetch = FETCH_Ok
				// Call PalFetchNextDetail()
				// Return TRUE
				// Else
				// Set nFetch = FETCH_EOF
				// Else
				// Set nFetch = FETCH_EOF
				// Else
				// Return FALSE
				else if (strPBericht == "PRs je Benutzer.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							PalFetchNextDetail();
							return true;
						}
						else
						{
							nFetch = Sys.FETCH_EOF;
						}
					}
					else
					{
						// 26.10.22
						if (!(App.frmMain.bNoFetch)) 
						{
							App.frmMain.bNoFetch = true;

							App.frmMain.strZust = "<alle>";
							// 10.10.16 F2770 prbezahlt -> prerledigt
							strSelect = @"
SELECT @year(prdatum)+1900, sum(@isna(prerledigt)), count(*) INTO :frmMain.nRechJahr, :frmMain.nAnzBezahlt, :frmMain.nAnzAlle FROM pr WHERE prdatum>='2001-01-01' GROUP BY 1";
							if (!(Int.SqlPrepar(hSqlLlDruck, strSelect))) 
							{
								return false;
							}
							else
							{
								if (!(hSqlLlDruck.Execute())) 
								{
									return false;
								}
								else
								{
									nCountRec = hSqlLlDruck.GetResultSetCount();
									nCountRec = nCountRec * 4;
									if (hSqlLlDruck.FetchNext(ref nFetch)) 
									{
										if (nFetch == Sys.FETCH_Ok) 
										{
											PalFetchNextDetail();
											return true;
										}
										else
										{
											nFetch = Sys.FETCH_EOF;
										}
									}
									else
									{
										nFetch = Sys.FETCH_EOF;
									}
								}
							}
						}
						else
						{
							nFetch = Sys.FETCH_EOF;
						}
					}
					// While nFetch != FETCH_Ok
					// If SalStrLeftX(strZMatch,1) <= 'F' or SalStrLeftX(strZMatch,1) = 'Z'
					// Set strResult = 'KO'
					// Else If (SalStrLeftX(strZMatch,1) >= 'G' And SalStrLeftX(strZMatch,1) <= 'J')  or SalStrLeftX(strZMatch,1) = 'V'
					// Set strResult = 'SE'
					// Else If (SalStrLeftX(strZMatch,1) >= 'K' And SalStrLeftX(strZMatch,1) <= 'M')
					// Set strResult = 'YI'
					// Else If (SalStrLeftX(strZMatch,1) >= 'N' And SalStrLeftX(strZMatch,1) <= 'R')
					// Set strResult = 'KN'
					// Else
					// Set strResult = 'ZK'
					// 04.01.13 F1495
					// If frmMain.strZust = 'TO'
					// Set frmMain.strZust = 'KO'
					// 10.10.16 F2770 prbezahlt -> prerledigt
					// Set strSelect = '
					// SELECT @year(prdatum)+1900, sum(@isna(prerledigt)), count(*) INTO :frmMain.nRechJahr, :frmMain.nAnzBezahlt, :frmMain.nAnzAlle FROM pr,a
					// WHERE prdatum>=2001-01-01 AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) BETWEEN \'B\' AND \'F\' OR @UPPER(@LEFT(amatch,1))=\'Z\' OR @UPPER(@LEFT(amatch,1))=\'J\' OR @UPPER(@LEFT(amatch,1))=\'V\') group by 1'
					// If NOT SqlPrepar(hSqlLlDruck,strSelect)
					// Return FALSE
					// Else
					// If NOT SqlExecute(hSqlLlDruck)
					// Return FALSE
					// Else
					// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
					// Set nCountRec = nCountRec * 4
					// If SqlFetchNext(hSqlLlDruck,nFetch)
					// If nFetch = FETCH_Ok
					// Call PalFetchNextDetail()
					// Return TRUE
					// Else
					// Set nFetch = FETCH_EOF
					// Else
					// Set nFetch = FETCH_EOF
					// If frmMain.strZust = 'KO'
					// Set frmMain.strZust = 'SE'
					// 10.10.16 F2770 prbezahlt -> prerledigt
					// Set strSelect = '
					// SELECT @year(prdatum)+1900, sum(@isna(prerledigt)), count(*) INTO :frmMain.nRechJahr, :frmMain.nAnzBezahlt, :frmMain.nAnzAlle FROM pr,a
					// WHERE prdatum>=2001-01-01 AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) >=\'G\' and @UPPER(@LEFT(amatch,1))<=\'I\' ) group by 1'
					// If NOT SqlPrepar(hSqlLlDruck,strSelect)
					// Return FALSE
					// Else
					// If NOT SqlExecute(hSqlLlDruck)
					// Return FALSE
					// Else
					// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
					// Set nCountRec = nCountRec * 4
					// If SqlFetchNext(hSqlLlDruck,nFetch)
					// If nFetch = FETCH_Ok
					// Call PalFetchNextDetail()
					// Return TRUE
					// Else
					// Set nFetch = FETCH_EOF
					// Else
					// Set nFetch = FETCH_EOF
					// Else If frmMain.strZust = 'SE'
					// Set frmMain.strZust = 'YI'
					// 10.10.16 F2770 prbezahlt -> prerledigt
					// Set strSelect = '
					// SELECT @year(prdatum)+1900, sum(@isna(prerledigt)), count(*) INTO :frmMain.nRechJahr, :frmMain.nAnzBezahlt, :frmMain.nAnzAlle FROM pr,a WHERE prdatum>=2001-01-01 AND prarztnr=aarztnr
					// and ((@UPPER(@LEFT(amatch,1)) >=\'K\' and @UPPER(@LEFT(amatch,1))<=\'M\'))
					// group by
					// 1'
					// If NOT SqlPrepar(hSqlLlDruck,strSelect)
					// Return FALSE
					// Else
					// If NOT SqlExecute(hSqlLlDruck)
					// Return FALSE
					// Else
					// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
					// Set nCountRec = nCountRec * 4
					// If SqlFetchNext(hSqlLlDruck,nFetch)
					// If nFetch = FETCH_Ok
					// Call PalFetchNextDetail()
					// Return TRUE
					// Else
					// Set nFetch = FETCH_EOF
					// Else
					// Set nFetch = FETCH_EOF
					// Else If frmMain.strZust = 'YI'
					// Set frmMain.strZust = 'ZK'
					// 10.10.16 F2770 prbezahlt -> prerledigt
					// Set strSelect = '
					// SELECT @year(prdatum)+1900, sum(@isna(prerledigt)), count(*) INTO :frmMain.nRechJahr, :frmMain.nAnzBezahlt, :frmMain.nAnzAlle FROM pr,a
					// WHERE prdatum>=2001-01-01 AND prarztnr=aarztnr and @UPPER(@LEFT(amatch,1)) >=\'S\' AND @UPPER(@LEFT(amatch,1)) <=\'Y\' and @UPPER(@LEFT(amatch,1))<>\'V\' group by 1'
					// If NOT SqlPrepar(hSqlLlDruck,strSelect)
					// Return FALSE
					// Else
					// If NOT SqlExecute(hSqlLlDruck)
					// Return FALSE
					// Else
					// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
					// Set nCountRec = nCountRec * 4
					// If SqlFetchNext(hSqlLlDruck,nFetch)
					// If nFetch = FETCH_Ok
					// Call PalFetchNextDetail()
					// Return TRUE
					// Else
					// Set nFetch = FETCH_EOF
					// Else
					// Set nFetch = FETCH_EOF
					// Else If frmMain.strZust = 'ZK'	! 18.07.07 A113
					// Set frmMain.strZust = '<alle>'
					// 10.10.16 F2770 prbezahlt -> prerledigt
					// Set strSelect = '
					// SELECT @year(prdatum)+1900, sum(@isna(prerledigt)), count(*) INTO :frmMain.nRechJahr, :frmMain.nAnzBezahlt, :frmMain.nAnzAlle FROM pr WHERE prdatum>=2001-01-01 GROUP BY 1'
					// If NOT SqlPrepar(hSqlLlDruck,strSelect)
					// Return FALSE
					// Else
					// If NOT SqlExecute(hSqlLlDruck)
					// Return FALSE
					// Else
					// Call SqlGetResultSetCount( hSqlLlDruck, nCountRec )
					// Set nCountRec = nCountRec * 4
					// If SqlFetchNext(hSqlLlDruck,nFetch)
					// If nFetch = FETCH_Ok
					// Call PalFetchNextDetail()
					// Return TRUE
					// Else
					// Set nFetch = FETCH_EOF
					// Else
					// Set nFetch = FETCH_EOF
					// Else
					// Return FALSE
				}
				else if (strPBericht == "MB-Aktionen je Benutzer.lst") 
				{
					while (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							if (App.frmMain.strZust == Int.PalZust(App.frmMain.nTANr)) 
							{
								return true;
							}
						}
						else
						{
							return false;
						}
					}
				}
				// Else If strPBericht = 'Halter prüfen.lst'
				// Loop
				// Set frmDiskAbr.dtZDatum = DATETIME_Null
				// Set frmDiskAbr.strZVon = ''
				// Set frmDiskAbr.lsZBemerk = ' '
				// If frmDiskAbr.bZettel0
				// Set frmDiskAbr.strFehler = 'Arzt-Info (nur RA-Infos)'
				// Set frmDiskAbr.nTAArztNr = frmDiskAbr.nArztNr
				// Set frmDiskAbr.nTANr = NUMBER_Null
				// If SqlFetchNext(frmDiskAbr.hSql2,frmDiskAbr.nFetch)
				// If frmDiskAbr.nFetch = FETCH_Ok
				// Return TRUE
				// Else
				// Set frmDiskAbr.bZettel0 = FALSE
				// Else
				// Set frmDiskAbr.bZettel0 = FALSE
				// If Not frmDiskAbr.bZettel0
				// 04.08.10 OTÄ447 + zerfdat DESC
				// 13.05.14 raus: AND zhalternr <>0
				// 29.01.16 Ä1323 + AND zart IN (\'HS\',\'RA\')
				// Call SqlPrepar(frmDiskAbr.hSql2, 'SELECT zvon, zdatum, zbemerk
				// INTO :frmDiskAbr.strZVon, :frmDiskAbr.dtZDatum, :frmDiskAbr.lsZBemerk
				// FROM z WHERE ' || PalArztNr('z', frmDiskAbr.nArztNr, frmDiskAbr.nArztNr2) || '
				// AND zart IN (\'HS\',\'RA\') AND zhalternr = :frmDiskAbr.nTVNr AND zdeaktiv IS NULL order by zdatum DESC, zerfdat DESC')
				// If frmDiskAbr.bZettel
				// If SqlFetchNext(frmDiskAbr.hSql2, frmDiskAbr.nFetch)
				// If frmDiskAbr.nFetch = FETCH_Ok
				// Return TRUE
				// Else
				// Set frmDiskAbr.bZettel = FALSE
				// Else
				// Set frmDiskAbr.bZettel = FALSE
				// Else
				// If SqlFetchNext(hSqlLlDruck,nFetch)
				// If nFetch = FETCH_Ok
				// 27.08.07 F240 + frmDiskAbr.nPosNrAlt = frmDiskAbr.nPosNr
				// 26.02.19 Ä1829
				// If frmDiskAbr.nTAArztNrAlt != frmDiskAbr.nTAArztNr
				// Set frmDiskAbr.bZettel = FALSE
				// Set frmDiskAbr.bZettel0 = FALSE
				// Set frmDiskAbr.nTAArztNrAlt = frmDiskAbr.nTAArztNr
				// If frmDiskAbr.nTANrAlt = frmDiskAbr.nTANr And frmDiskAbr.nTANr != 0 And frmDiskAbr.nPosNrAlt = frmDiskAbr.nPosNr
				// Else
				// If frmDiskAbr.nTANr = 0 And frmDiskAbr.dtTAErfDat != DATETIME_Null
				// Call SqlImmedSel('SELECT HHALTERNR FROM H
				// INTO :frmDiskAbr.nTANr
				// WHERE harztnr=:frmDiskAbr.nArztNr AND herfdat = :frmDiskAbr.dtTAErfDat AND hdeaktiv IS NULL')
				// Set frmDiskAbr.strFehler = ''
				// 13.04.06
				// Set frmDiskAbr.strTALand = PalGetLand(frmDiskAbr.strTAOrt)
				// If frmDiskAbr.strTALand = '--'
				// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || '- Land nicht erkannt'
				// 23.04.12 Ä737
				// Call SqlIstDa( 'FROM lep WHERE ' || PalArztNr('lep', frmDiskAbr.nArztNr, frmDiskAbr.nArztNr2) || '
				// AND lepposnr = :frmDiskAbr.nPosNr
				// AND lepbearbeiter=:frmDiskAbr.strBearbeiter
				// AND lebearbdatum=:frmDiskAbr.dtBearbDatum
				// AND lepdm<0 AND lepmwst<>0 And leprechtext NOT LIKE \'%abatt%\'', bExists)
				// If bExists
				// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || '- Halter hat evtl. Zahlung mit MwSt!'
				// 16.07.12 F1349
				// Call SqlIstDa( 'FROM lep WHERE ' || PalArztNr('lep', frmDiskAbr.nArztNr, frmDiskAbr.nArztNr2) || '
				// AND lepposnr = :frmDiskAbr.nPosNr
				// AND lepbearbeiter=:frmDiskAbr.strBearbeiter
				// AND lebearbdatum=:frmDiskAbr.dtBearbDatum
				// AND lepdatum>SYSDATETIME', bExists)
				// If bExists
				// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || '- Datum liegt in der Zukunft'
				// 15.10.13 Ä978 + 979
				// If SqlHandleExecX(hSqlLlDruck,'SELECT lehalternr,leti, levn, lenn, leti || levn || \' \' || lenn,lename2,lestr,leort,
				// 			learztnr, lebearbeiter,lebearbdatum, leherfdat, leposnr, lereverse, leustid, leeinzug, ROWID
				// 			INTO :frmDiskAbr.nTANr,:frmDiskAbr.strTATi,:frmDiskAbr.strTAVN,:frmDiskAbr.strTANN,
				// 			:frmDiskAbr.strTAN1, :frmDiskAbr.strTAN2,:frmDiskAbr.strTAStr,:frmDiskAbr.strTAOrt,
				// 			:frmDiskAbr.nTAArztNr,:frmDiskAbr.strBearbeiter,:frmDiskAbr.dtBearbDatum,
				// 			:frmDiskAbr.dtTAErfDat, :frmDiskAbr.nPosNr,  :frmDiskAbr.nTAReverse,  :frmDiskAbr.strTAUStID, :frmDiskAbr.nTAEinzug,  :frmDiskAbr.strROWIDLe
				// 			from le
				// 			WHERE ' || PalArztNr('le', frmDiskAbr.nArztNr, frmDiskAbr.nArztNr2) || '
				// 			AND lebearbeiter=:frmDiskAbr.strBearbeiter
				// 			AND lebearbdatum=:frmDiskAbr.dtBearbDatum
				// 			ORDER BY le.leposnr','Report INIT') != IDOK
				// Return FALSE
				// Call SqlIstDa( 'FROM lep WHERE ' || PalArztNr('lep', frmDiskAbr.nArztNr, frmDiskAbr.nArztNr2) || '
				// AND lepposnr = :frmDiskAbr.nPosNr
				// AND lepbearbeiter=:frmDiskAbr.strBearbeiter
				// AND lebearbdatum=:frmDiskAbr.dtBearbDatum
				// AND lepdatum>2010-01-01
				// AND lepmwst = 0
				// AND lepla = \'A\'
				// AND lepdm > 0 AND (lepreverseversion IS NULL OR lepreverseversion = 0)', bExists)
				// If bExists
				// If frmDiskAbr.nTAReverse = 1
				// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || '- Voraussetzungen für MwSt-Freiheit liegen nicht vor. Abrechnung darf erst nach schriftlicher Bestätigung durch M erfolgen!'
				// Else
				// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || '- Der Kunde nimmt nicht am Charge Reverse-Verfahren teil. Daher darf auf die MwSt nicht verzichtet werden. Bitte mit M abklären!'
				// If frmDiskAbr.nTANr = 0
				// Set frmDiskAbr.strSelect2 = 'SELECT HHALTERNR FROM H INTO :frmDiskAbr.nTANr
				// WHERE harztnr=:frmDiskAbr.nArztNr AND hvn = :frmDiskAbr.strTAVN
				//  AND hnn = :frmDiskAbr.strTANN
				// AND @LICS(@TRIM(hstr)) = @LICS(@TRIM(:frmDiskAbr.strTAStr))
				// AND @LICS(@TRIM(hort)) = @LICS(@TRIM(:frmDiskAbr.strTAOrt))'
				// If frmDiskAbr.strTATi != ''
				// Set frmDiskAbr.strSelect2 = frmDiskAbr.strSelect2 || '  AND hti = :frmDiskAbr.strTATi '
				// If frmDiskAbr.strTAN2 = ''
				// Set frmDiskAbr.strSelect2 = frmDiskAbr.strSelect2 || ' AND hname2 IS NULL'
				// Else
				// Set frmDiskAbr.strSelect2 = frmDiskAbr.strSelect2 || ' AND @LICS(@TRIM(hname2)) = @LICS(@TRIM(:frmDiskAbr.strTAN2))'
				// Call SqlImmedSel(frmDiskAbr.strSelect2)
				// If frmDiskAbr.nTANr != 0
				// Call SqlImmedX('UPDATE LE SET LEHALTERNR = :frmDiskAbr.nTANr
				// WHERE ROWID = :frmDiskAbr.strROWIDLe')
				// 09.10.00  	leparztnr IN (:frmDiskAbr.nArztNr, :frmDiskAbr.nArztNr2)
				// Call SqlImmedX('UPDATE LEP SET LEPHALTERNR = :frmDiskAbr.nTANr
				// WHERE ' || PalArztNr('lep', frmDiskAbr.nArztNr, frmDiskAbr.nArztNr2) || '
				// AND lepposnr = :frmDiskAbr.nPosNr
				// AND lepbearbeiter=:frmDiskAbr.strBearbeiter
				// AND lebearbdatum=:frmDiskAbr.dtBearbDatum')
				// If frmDiskAbr.dtTAErfDat != DATETIME_Null
				// Call SqlImmedX('UPDATE H SET
				// herfdat = :frmDiskAbr.dtTAErfDat
				// WHERE harztnr=:frmDiskAbr.nArztNr AND hhalternr = :frmDiskAbr.nTANr')
				// If frmDiskAbr.nArztNr2 != frmDiskAbr.nArztNr
				// Call SqlImmedX('UPDATE H SET
				// herfdat = :frmDiskAbr.dtTAErfDat
				// WHERE harztnr=:frmDiskAbr.nArztNr2 AND hhalternr = :frmDiskAbr.nTANr')
				// Call SalStatusSetText(frmDiskAbr,'alte Nr. '||SalNumberToStrX(frmDiskAbr.nTANr,0))
				// Set frmDiskAbr.nTANrAlt = frmDiskAbr.nTANr
				// 27.08.07 F240
				// Set frmDiskAbr.nPosNrAlt = frmDiskAbr.nPosNr
				// Set frmDiskAbr.strTAxTi = SalStrUpperX(PalDelBlank(frmDiskAbr.strTATi))
				// Set frmDiskAbr.strTAxVN = SalStrUpperX(PalDelBlank(frmDiskAbr.strTAVN))
				// Set frmDiskAbr.strTAxNN = SalStrUpperX(PalDelBlank(frmDiskAbr.strTANN))
				// Set frmDiskAbr.strTAxN2 = SalStrUpperX(PalDelBlank(frmDiskAbr.strTAN2))
				// Set frmDiskAbr.strTAxStr = SalStrUpperX(PalDelBlank(frmDiskAbr.strTAStr))
				// Set frmDiskAbr.strTAxOrt = SalStrUpperX(PalDelBlank(frmDiskAbr.strTAOrt))
				// Set frmDiskAbr.nTVNr = 999999
				// Set frmDiskAbr.strTVTi = ''
				// Set frmDiskAbr.strTVVN = ''
				// Set frmDiskAbr.strTVNN = ''
				// Set frmDiskAbr.strTVN1 = ''
				// Set frmDiskAbr.strTVN2 = ''
				// Set frmDiskAbr.strTVStr = ''
				// Set frmDiskAbr.strTVOrt = ''
				// Set frmDiskAbr.strTVLand = '--'
				// If frmDiskAbr.nTANr != 0
				// 05.02.18 F3100
				// Call SqlIstDa( 'FROM h
				// 		WHERE harztnr=:frmDiskAbr.nArztNr
				// 		AND hhalternr = :frmDiskAbr.nTANr', bExists )
				// If not bExists
				// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || '- angegebene Halternr. ist nicht vorhanden'
				// Else
				// Call SqlImmedSel('SELECT hhalternr,hti, hvn, hnn,hti || hvn || \' \' || hnn, hname2,hstr,hort, hland, herfdat, hhalternein, handerehalter, hsperrdatum, hreverse, hustid, hbankeinzug
				// 			INTO :frmDiskAbr.nTVNr,:frmDiskAbr.strTVTi,:frmDiskAbr.strTVVN,:frmDiskAbr.strTVNN,
				// 			:frmDiskAbr.strTVN1, :frmDiskAbr.strTVN2,:frmDiskAbr.strTVStr,:frmDiskAbr.strTVOrt,:frmDiskAbr.strTVLand, :frmDiskAbr.dtTVErfDat,
				// 			:frmDiskAbr.nHalterNein, :frmDiskAbr.strAndererHalter,:frmDiskAbr.dtSperrDatum,  :frmDiskAbr.nTVReverse,  :frmDiskAbr.strTVUStID, :frmDiskAbr.nTVEinzug
				// 			from h
				// 			WHERE harztnr=:frmDiskAbr.nArztNr
				// 			AND hhalternr = :frmDiskAbr.nTANr')
				// If frmDiskAbr.nHalterNein = 1
				// Set frmDiskAbr.strFehler = strFehler || '- G E S P E R R T  !!! siehe Halter ' || frmDiskAbr.strAndererHalter
				// 18.11.03
				// Call SqlExecute(frmDiskAbr.hSql2)
				// If SqlFetchNext(frmDiskAbr.hSql2,frmDiskAbr.nFetch)
				// If frmDiskAbr.nFetch = FETCH_Ok
				// Set frmDiskAbr.bZettel = TRUE
				// 13.04.06
				// Return TRUE
				// 03.04.07 Ä102
				// If frmDiskAbr.dtSperrDatum != DATETIME_Null
				// Set frmDiskAbr.strFehler = strFehler ||  'Postausgang an Halter gesperrt seit ' || SalStrMidX(PalDateToStrJJJJMMTT(frmDiskAbr.dtSperrDatum),6,2) || '.' || SalStrMidX(PalDateToStrJJJJMMTT(frmDiskAbr.dtSperrDatum),4,2) || '.' ||
				// SalStrMidX(PalDateToStrJJJJMMTT(frmDiskAbr.dtSperrDatum),0,4)
				// 02.03.15 Ä1172
				// Call SqlIstDa( 'FROM el WHERE elarztnr = :frmDiskAbr.nArztNr AND elhalternr = :frmDiskAbr.nTANr AND elerledigt = \'N\'', bExists )
				// If not bExists
				// Call SqlImmed( 'INSERT INTO el (elarztnr, elhalternr, elzeichen, eltext, eldatum, elabtlg, elerledigt)
				// VALUES(:frmDiskAbr.nArztNr, :frmDiskAbr.nTANr, :strBNZei, \'Bitte Name/Anschrift mitteilen wegen neuer Rechnung\', SYSDATE, :strBNAbtlg, \'N\')' )
				// 26.08.13 Ä903 12.02.19: mit Ä1833 entfernt
				// If frmDiskAbr.nTAEinzug = 1 or frmDiskAbr.nTVEinzug = 1
				// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || '- BEZ: '
				// If frmDiskAbr.nTAEinzug = 1
				// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || ' TA ja'
				// Else
				// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || ' TA nein'
				// If frmDiskAbr.nTVEinzug = 1
				// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || ' TV ja'
				// Else
				// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || ' TV nein'
				// If frmDiskAbr.nTVNr != 999999
				// Set frmDiskAbr.strTVxTi = SalStrUpperX(PalDelBlank(frmDiskAbr.strTVTi))
				// Set frmDiskAbr.strTVxVN = SalStrUpperX(PalDelBlank(frmDiskAbr.strTVVN))
				// Set frmDiskAbr.strTVxNN = SalStrUpperX(PalDelBlank(frmDiskAbr.strTVNN))
				// Set frmDiskAbr.strTVxN2 = SalStrUpperX(PalDelBlank(frmDiskAbr.strTVN2))
				// Set frmDiskAbr.strTVxStr = SalStrUpperX(PalDelBlank(frmDiskAbr.strTVStr))
				// Set frmDiskAbr.strTVxOrt = SalStrUpperX(PalDelBlank(frmDiskAbr.strTVOrt))
				// 13.04.06
				// Set frmDiskAbr.strTVOrt = frmDiskAbr.strTVLand || ' ' || frmDiskAbr.strTVOrt
				// Set frmDiskAbr.strTAOrt = frmDiskAbr.strTALand || ' ' || frmDiskAbr.strTAOrt
				// 09.07.01  rausgenommen, weil TA-Änderungen nicht durchgeführt worden sind :"(dtTAErfDat != DATETIME_Null And dtTAErfDat=dtTVErfDat) Or"
				// 16.01.02 rausgenommen und ersetzt: If (strTAxN1=strTVxN1 and strTAxN2=strTVxN2 and strTAxStr=strTVxStr and strTAxOrt=strTVxOrt)
				// 18.03.10 OTÄ397
				// If frmDiskAbr.nTAReverse =  NUMBER_Null
				// Set frmDiskAbr.nTAReverse = 0
				// If frmDiskAbr.nTVReverse =  NUMBER_Null
				// Set frmDiskAbr.nTVReverse = 0
				// 06.11.18 Ä1799
				// If (frmDiskAbr.strTALand = 'DE' or frmDiskAbr.strTALand='' or frmDiskAbr.strTALand='--')
				// If PalValNum( SalStrLeftX( frmDiskAbr.strTAxOrt, 5 ) ) > 0 And SalStrMidX( frmDiskAbr.strTAxOrt, 5, 1 ) >= 'A'	! alles ok
				// Else
				// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || '- PLZ der Adresse von TA nicht 5-stellig'
				// If (frmDiskAbr.strTVLand = 'DE' or frmDiskAbr.strTVLand='' or frmDiskAbr.strTALand='--')
				// If PalValNum( SalStrLeftX( frmDiskAbr.strTVxOrt, 5 ) ) > 0 And SalStrMidX( frmDiskAbr.strTVxOrt, 5, 1 ) >= 'A'	! alles ok
				// Else
				// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || '- PLZ unserer Adresse nicht 5-stellig'
				// If frmDiskAbr.strTAxOrt = ''
				// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || '- Ort fehlt'
				// 14.12.06 F97
				// Set frmDiskAbr.nTVNr = 0
				// Set frmDiskAbr.strTVTi = ''
				// Set frmDiskAbr.strTVVN = ''
				// Set frmDiskAbr.strTVNN = ''
				// Set frmDiskAbr.strTVN1 = ''
				// Set frmDiskAbr.strTVN2 = ''
				// Set frmDiskAbr.strTVStr = ''
				// Set frmDiskAbr.strTVOrt = ''
				// Call SqlExecute(hSql2)
				// If SqlFetchNext(hSql2,nFetch)
				// If nFetch = FETCH_Ok
				// Set frmDiskAbr.bZettel = TRUE
				// Return TRUE
				// Else If (frmDiskAbr.strTAxTi=frmDiskAbr.strTVxTi and frmDiskAbr.strTAxVN=frmDiskAbr.strTVxVN and frmDiskAbr.strTAxNN=frmDiskAbr.strTVxNN and frmDiskAbr.strTAxN2=frmDiskAbr.strTVxN2 and frmDiskAbr.strTAxStr=frmDiskAbr.strTVxStr
				// and frmDiskAbr.strTAxOrt=frmDiskAbr.strTVxOrt and frmDiskAbr.strTALand=frmDiskAbr.strTVLand And frmDiskAbr.nTAReverse=frmDiskAbr.nTVReverse And frmDiskAbr.strTAUStID=frmDiskAbr.strTVUStID)
				// Set frmDiskAbr.strPLZ = SalStrLeftX(strTAOrt,5)
				// Set frmDiskAbr.strStrasse = PalTrimStrPhon(strTAStr)
				// Set frmDiskAbr.nByte = SalStrLength(strStrasse)
				// If strStrasse != '' And strStrasse != 'Nr'
				// Call SqlIstDa( 'FROM mcs WHERE plz = :frmDiskAbr.strPLZ AND strphon = :frmDiskAbr.strStrasse', bMCOk)
				// If Not bMCOk
				// Set frmDiskAbr.strStrasse = PalTrimStr(strTAStr)
				// Set frmDiskAbr.nByte = SalStrLength(strStrasse)
				// Call SqlIstDa( 'FROM mcot WHERE plz = :frmDiskAbr.strPLZ AND @LICS(@LEFT(ort, :frmDiskAbr.nByte)) = @LICS(:frmDiskAbr.strStrasse)', bMCOk)
				// If Not bMCOk
				// Set frmDiskAbr.strFehler = 'PLZ/Straße'
				// Return TRUE
				// Else
				// If frmDiskAbr.nTANr != frmDiskAbr.nTVNr		! im Halterstamm nicht gefunden
				// If frmDiskAbr.dtTAErfDat != DATETIME_Null
				// Set frmDiskAbr.nTVNr = 0
				// Call SqlImmedSel('SELECT hhalternr,hti, hvn, hnn,hti || hvn || \' \' || hnn, hname2,hstr,hort, hland, hreverse, hustid
				// 			INTO :frmDiskAbr.nTVNr,:frmDiskAbr.strTVTi,:frmDiskAbr.strTVVN,:frmDiskAbr.strTVNN,
				// 			:frmDiskAbr.strTVN1, :frmDiskAbr.strTVN2,:frmDiskAbr.strTVStr,:frmDiskAbr.strTVOrt, :frmDiskAbr.strTVLand,  :frmDiskAbr.nTVReverse,  :frmDiskAbr.strTVUStID
				// 			from h
				// 			WHERE harztnr=:frmDiskAbr.nArztNr
				// 			AND herfdat = :frmDiskAbr.dtTAErfDat')
				// If frmDiskAbr.nTVReverse =  NUMBER_Null
				// Set frmDiskAbr.nTVReverse = 0
				// If frmDiskAbr.nTVNr = 0	! im Halterstamm unter ErfDat nicht gefunden
				// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || '- von M angegebene Halter ist bei uns nicht vorhanden'
				// Set frmDiskAbr.strTVTi = ''
				// Set frmDiskAbr.strTVVN = ''
				// Set frmDiskAbr.strTVNN = ''
				// Set frmDiskAbr.strTVN1 = ''
				// Set frmDiskAbr.strTVN2 = ''
				// Set frmDiskAbr.strTVStr = ''
				// Set frmDiskAbr.strTVOrt = ''
				// Set frmDiskAbr.nTVReverse = 0
				// Set frmDiskAbr.strTVUStID = ''
				// Call SqlExecute(frmDiskAbr.hSql2)
				// If SqlFetchNext(frmDiskAbr.hSql2,frmDiskAbr.nFetch)
				// If frmDiskAbr.nFetch = FETCH_Ok
				// Set frmDiskAbr.bZettel = TRUE
				// Return TRUE
				// Else
				// If frmDiskAbr.nTANr = 0
				// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || '- fehlt'
				// Else
				// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || '- von M angegebene Halter-Nr. ist bei uns nicht vorhanden'
				// Set frmDiskAbr.nTVNr = 0
				// Set frmDiskAbr.strTVTi = ''
				// Set frmDiskAbr.strTVVN = ''
				// Set frmDiskAbr.strTVNN = ''
				// Set frmDiskAbr.strTVN1 = ''
				// Set frmDiskAbr.strTVN2 = ''
				// Set frmDiskAbr.strTVStr = ''
				// Set frmDiskAbr.strTVOrt = ''
				// Set frmDiskAbr.nTVReverse = 0
				// Set frmDiskAbr.strTVUStID = ''
				// Call SqlExecute(hSql2)
				// If SqlFetchNext(hSql2,nFetch)
				// If nFetch = FETCH_Ok
				// Set frmDiskAbr.bZettel = TRUE
				// Return TRUE
				// Else
				// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || '- Änderung'
				// Call SqlExecute(frmDiskAbr.hSql2)
				// If SqlFetchNext(frmDiskAbr.hSql2,frmDiskAbr.nFetch)
				// If frmDiskAbr.nFetch = FETCH_Ok
				// Set frmDiskAbr.bZettel = TRUE
				// Return TRUE
				// If frmDiskAbr.strFehler != ''
				// Set frmDiskAbr.strFehler = SalStrMidX(frmDiskAbr.strFehler,2,255)
				// 18.12.06 F98
				// If frmDiskAbr.nTVNr = 999999
				// Set frmDiskAbr.nTVNr = 0
				// Return TRUE
				// Else
				// Return FALSE
				// Else
				// Break
				else if (strPBericht == "Halter prüfen.lst") 
				{
					while (true)
					{
						App.frmDiskAbr.dtZDatum = SalDateTime.Null;
						App.frmDiskAbr.strZVon = "";
						App.frmDiskAbr.lsZBemerk = " ";
						if (App.frmDiskAbr.bZettel0) 
						{
							App.frmDiskAbr.strFehler = "Arzt-Info (nur RA-Infos)";
							App.frmDiskAbr.nTAArztNr = App.frmDiskAbr.nArztNr;
							App.frmDiskAbr.nTANr = SalNumber.Null;

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalNumber temp11 = App.frmDiskAbr.nFetch;
							SalBoolean temp12 = Sql.FetchNext(App.frmDiskAbr.hSql2, ref temp11);
							App.frmDiskAbr.nFetch = temp11;

							if (temp12) 
							{
								if (App.frmDiskAbr.nFetch == Sys.FETCH_Ok) 
								{
									return true;
								}
								else
								{
									App.frmDiskAbr.bZettel0 = false;
								}
							}
							else
							{
								App.frmDiskAbr.bZettel0 = false;
							}
							if (!(App.frmDiskAbr.bZettel0)) 
							{
								// 04.08.10 OTÄ447 + zerfdat DESC
								// 13.05.14 raus: AND zhalternr <>0
								// 29.01.16 Ä1323 + AND zart IN (\'HS\',\'RA\')
								Int.SqlPrepar(App.frmDiskAbr.hSql2, @"SELECT zvon, zdatum, zbemerk
INTO :frmDiskAbr.strZVon, :frmDiskAbr.dtZDatum, :frmDiskAbr.lsZBemerk
FROM z WHERE " + Int.PalArztNr("z", App.frmDiskAbr.nArztNr, App.frmDiskAbr.nArztNr2) + @"
AND zart IN ('HS','RA') AND zhalternr = :frmDiskAbr.nTVNr order by zdatum DESC, zerfdat DESC");
							}
						}
						if (App.frmDiskAbr.bZettel) 
						{

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalNumber temp13 = App.frmDiskAbr.nFetch;
							SalBoolean temp14 = Sql.FetchNext(App.frmDiskAbr.hSql2, ref temp13);
							App.frmDiskAbr.nFetch = temp13;

							if (temp14) 
							{
								if (App.frmDiskAbr.nFetch == Sys.FETCH_Ok) 
								{
									return true;
								}
								else
								{
									App.frmDiskAbr.bZettel = false;
								}
							}
							else
							{
								App.frmDiskAbr.bZettel = false;
							}
						}
						else
						{
							if (hSqlLlDruck.FetchNext(ref nFetch)) 
							{
								// If frmDiskAbr.strTAVN='Heinrich' and frmDiskAbr.strTANN='Schmidt'
								// Call SalMessageBeep( 0 )
								if (nFetch == Sys.FETCH_Ok) 
								{
									// 27.08.07 F240 + frmDiskAbr.nPosNrAlt = frmDiskAbr.nPosNr
									if (App.frmDiskAbr.nTANrAlt == App.frmDiskAbr.nTANr && App.frmDiskAbr.nTANr != 0 && App.frmDiskAbr.nPosNrAlt == App.frmDiskAbr.nPosNr) 
									{
									}
									else
									{
										if (App.frmDiskAbr.nTANr == 0 && App.frmDiskAbr.dtTAErfDat != SalDateTime.Null) 
										{
											Int.SqlImmedSel(@"SELECT HHALTERNR FROM H
INTO :frmDiskAbr.nTANr
WHERE harztnr=:frmDiskAbr.nArztNr AND herfdat = :frmDiskAbr.dtTAErfDat");
										}
										App.frmDiskAbr.strFehler = "";
										// 13.04.06

										// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
										SalString temp15 = App.frmDiskAbr.strTAOrt;
										App.frmDiskAbr.strTALand = Int.PalGetLand(ref temp15);
										App.frmDiskAbr.strTAOrt = temp15;

										if (App.frmDiskAbr.strTALand == "--") 
										{
											App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + "- Land nicht erkannt";
										}
										// 23.04.12 Ä737
										Int.SqlIstDa("FROM lep WHERE " + Int.PalArztNr("lep", App.frmDiskAbr.nArztNr, App.frmDiskAbr.nArztNr2) + @"
AND lepposnr = :frmDiskAbr.nPosNr
AND lepbearbeiter=:frmDiskAbr.strBearbeiter
AND lebearbdatum=:frmDiskAbr.dtBearbDatum
AND lepdm<0 AND lepmwst<>0 And leprechtext NOT LIKE '%abatt%'", ref Var.bExists);
										if (Var.bExists) 
										{
											App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + "- Halter hat evtl. Zahlung mit MwSt!";
										}

										// 16.07.12 F1349
										Int.SqlIstDa("FROM lep WHERE " + Int.PalArztNr("lep", App.frmDiskAbr.nArztNr, App.frmDiskAbr.nArztNr2) + @"
AND lepposnr = :frmDiskAbr.nPosNr
AND lepbearbeiter=:frmDiskAbr.strBearbeiter
AND lebearbdatum=:frmDiskAbr.dtBearbDatum
AND lepdatum>SYSDATETIME", ref Var.bExists);
										if (Var.bExists) 
										{
											App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + "- Datum liegt in der Zukunft";
										}
										// 15.10.13 Ä978 + 979
										// If SqlHandleExecX(hSqlLlDruck,'SELECT lehalternr,leti, levn, lenn, leti || levn || \' \' || lenn,lename2,lestr,leort,
										// 			learztnr, lebearbeiter,lebearbdatum, leherfdat, leposnr, lereverse, leustid, leeinzug, ROWID
										// 			INTO :frmDiskAbr.nTANr,:frmDiskAbr.strTATi,:frmDiskAbr.strTAVN,:frmDiskAbr.strTANN,
										// 			:frmDiskAbr.strTAN1, :frmDiskAbr.strTAN2,:frmDiskAbr.strTAStr,:frmDiskAbr.strTAOrt,
										// 			:frmDiskAbr.nTAArztNr,:frmDiskAbr.strBearbeiter,:frmDiskAbr.dtBearbDatum,
										// 			:frmDiskAbr.dtTAErfDat, :frmDiskAbr.nPosNr,  :frmDiskAbr.nTAReverse,  :frmDiskAbr.strTAUStID, :frmDiskAbr.nTAEinzug,  :frmDiskAbr.strROWIDLe
										// 			from le
										// 			WHERE ' || PalArztNr('le', frmDiskAbr.nArztNr, frmDiskAbr.nArztNr2) || '
										// 			AND lebearbeiter=:frmDiskAbr.strBearbeiter
										// 			AND lebearbdatum=:frmDiskAbr.dtBearbDatum
										// 			ORDER BY le.leposnr','Report INIT') != IDOK
										// Return FALSE
										Int.SqlIstDa("FROM lep WHERE " + Int.PalArztNr("lep", App.frmDiskAbr.nArztNr, App.frmDiskAbr.nArztNr2) + @"
AND lepposnr = :frmDiskAbr.nPosNr
AND lepbearbeiter=:frmDiskAbr.strBearbeiter
AND lebearbdatum=:frmDiskAbr.dtBearbDatum
AND lepdatum>'2010-01-01'
AND lepmwst = 0
AND lepla = 'A'
AND lepdm > 0 AND (lepreverseversion IS NULL OR lepreverseversion = 0)", ref Var.bExists);
										if (Var.bExists) 
										{
											if (App.frmDiskAbr.nTAReverse == 1) 
											{
												App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + "- Voraussetzungen für MwSt-Freiheit liegen nicht vor. Abrechnung darf erst nach schriftlicher Bestätigung durch M erfolgen!";
											}
											else
											{
												App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + "- Der Kunde nimmt nicht am Charge Reverse-Verfahren teil. Daher darf auf die MwSt nicht verzichtet werden. Bitte mit M abklären!";
											}
										}

										if (App.frmDiskAbr.nTANr == 0) 
										{
											App.frmDiskAbr.strSelect2 = @"SELECT HHALTERNR FROM H INTO :frmDiskAbr.nTANr
WHERE harztnr=:frmDiskAbr.nArztNr AND hvn = :frmDiskAbr.strTAVN
 AND hnn = :frmDiskAbr.strTANN
AND @LICS(@TRIM(hstr)) = @LICS(@TRIM(:frmDiskAbr.strTAStr))
AND @LICS(@TRIM(hort)) = @LICS(@TRIM(:frmDiskAbr.strTAOrt))";
											if (App.frmDiskAbr.strTATi != "") 
											{
												App.frmDiskAbr.strSelect2 = App.frmDiskAbr.strSelect2 + "  AND hti = :frmDiskAbr.strTATi ";
											}
											if (App.frmDiskAbr.strTAN2 == "") 
											{
												App.frmDiskAbr.strSelect2 = App.frmDiskAbr.strSelect2 + " AND hname2 IS NULL";
											}
											else
											{
												App.frmDiskAbr.strSelect2 = App.frmDiskAbr.strSelect2 + " AND @LICS(@TRIM(hname2)) = @LICS(@TRIM(:frmDiskAbr.strTAN2))";
											}
											Int.SqlImmedSel(App.frmDiskAbr.strSelect2);
											if (App.frmDiskAbr.nTANr != 0) 
											{
												Int.SqlImmedX(@"UPDATE LE SET LEHALTERNR = :frmDiskAbr.nTANr
WHERE ROWID = :frmDiskAbr.strROWIDLe");
												// 09.10.00  	leparztnr IN (:frmDiskAbr.nArztNr, :frmDiskAbr.nArztNr2)
												Int.SqlImmedX(@"UPDATE LEP SET LEPHALTERNR = :frmDiskAbr.nTANr
WHERE " + Int.PalArztNr("lep", App.frmDiskAbr.nArztNr, App.frmDiskAbr.nArztNr2) + @"
AND lepposnr = :frmDiskAbr.nPosNr
AND lepbearbeiter=:frmDiskAbr.strBearbeiter
AND lebearbdatum=:frmDiskAbr.dtBearbDatum");
												if (App.frmDiskAbr.dtTAErfDat != SalDateTime.Null) 
												{
													Int.SqlImmedX(@"UPDATE H SET
herfdat = :frmDiskAbr.dtTAErfDat
WHERE harztnr=:frmDiskAbr.nArztNr AND hhalternr = :frmDiskAbr.nTANr");
													if (App.frmDiskAbr.nArztNr2 != App.frmDiskAbr.nArztNr) 
													{
														Int.SqlImmedX(@"UPDATE H SET
herfdat = :frmDiskAbr.dtTAErfDat
WHERE harztnr=:frmDiskAbr.nArztNr2 AND hhalternr = :frmDiskAbr.nTANr");
													}
												}
												App.frmDiskAbr.SetStatusBarText("alte Nr. " + Sal.NumberToStrX(App.frmDiskAbr.nTANr, 0));
											}
										}
										App.frmDiskAbr.nTANrAlt = App.frmDiskAbr.nTANr;
										// 27.08.07 F240
										App.frmDiskAbr.nPosNrAlt = App.frmDiskAbr.nPosNr;

										App.frmDiskAbr.strTAxTi = Int.PalDelBlank(App.frmDiskAbr.strTATi).ToUpper();
										App.frmDiskAbr.strTAxVN = Int.PalDelBlank(App.frmDiskAbr.strTAVN).ToUpper();
										App.frmDiskAbr.strTAxNN = Int.PalDelBlank(App.frmDiskAbr.strTANN).ToUpper();
										App.frmDiskAbr.strTAxN2 = Int.PalDelBlank(App.frmDiskAbr.strTAN2).ToUpper();
										App.frmDiskAbr.strTAxStr = Int.PalDelBlank(App.frmDiskAbr.strTAStr).ToUpper();
										App.frmDiskAbr.strTAxOrt = Int.PalDelBlank(App.frmDiskAbr.strTAOrt).ToUpper();
										App.frmDiskAbr.nTVNr = 999999;
										App.frmDiskAbr.strTVTi = "";
										App.frmDiskAbr.strTVVN = "";
										App.frmDiskAbr.strTVNN = "";
										App.frmDiskAbr.strTVN1 = "";
										App.frmDiskAbr.strTVN2 = "";
										App.frmDiskAbr.strTVStr = "";
										App.frmDiskAbr.strTVOrt = "";
										App.frmDiskAbr.strTVLand = "--";

										if (App.frmDiskAbr.strTANN.Scan("Schmidt") != -1) 
										{
											Sal.MessageBeep(0);
										}

										if (App.frmDiskAbr.nTANr != 0) 
										{
											// 05.02.18 F3100
											// Call SqlIstDa( 'FROM h
											// 		WHERE harztnr=:frmDiskAbr.nArztNr
											// 		AND hhalternr = :frmDiskAbr.nTANr', bExists )
											// If not bExists
											// Set frmDiskAbr.strFehler = frmDiskAbr.strFehler || '- angegebene Halternr. ist nicht vorhanden'
											// Else
											// 31.01.23 Ä2070 +,
											// 			hpmemail, hepostaenddat
											Int.SqlImmedSel(@"SELECT hhalternr,hti, hvn, hnn,hti || hvn || ' ' || hnn, hname2,hstr,hort, hland, herfdat, hhalternein, handerehalter, hsperrdatum, hreverse, hustid, hbankeinzug,
			hpmemail, hepostaenddat
			INTO :frmDiskAbr.nTVNr,:frmDiskAbr.strTVTi,:frmDiskAbr.strTVVN,:frmDiskAbr.strTVNN,
			:frmDiskAbr.strTVN1, :frmDiskAbr.strTVN2,:frmDiskAbr.strTVStr,:frmDiskAbr.strTVOrt,:frmDiskAbr.strTVLand, :frmDiskAbr.dtTVErfDat,
			:frmDiskAbr.nHalterNein, :frmDiskAbr.strAndererHalter,:frmDiskAbr.dtSperrDatum,  :frmDiskAbr.nTVReverse,  :frmDiskAbr.strTVUStID, :frmDiskAbr.nTVEinzug,
			:frmDiskAbr.HPMEMAIL, :frmDiskAbr.HEPOSTAENDDAT
			from h
			WHERE harztnr=:frmDiskAbr.nArztNr
			AND hhalternr = :frmDiskAbr.nTANr");
											if (App.frmDiskAbr.nHalterNein == 1) 
											{
												App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + "- G E S P E R R T  !!! siehe Halter " + App.frmDiskAbr.strAndererHalter;
												// 31.01.23 Ä2070
												if (App.frmDiskAbr.LEEPOST == 1 && App.frmDiskAbr.LEEPOSTMAIL != App.frmDiskAbr.HPMEMAIL) 
												{
													App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + "- E-Mail-Adresse in Abrg.: " + App.frmDiskAbr.LEEPOSTMAIL + " (Stand:" + Int.PalDateToStrDE(App.frmDiskAbr.LEEPOSTAENDDAT) + ")";
												}

												// 18.11.03
												Sql.Execute(App.frmDiskAbr.hSql2);

												// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
												SalNumber temp16 = App.frmDiskAbr.nFetch;
												SalBoolean temp17 = Sql.FetchNext(App.frmDiskAbr.hSql2, ref temp16);
												App.frmDiskAbr.nFetch = temp16;

												if (temp17) 
												{
													if (App.frmDiskAbr.nFetch == Sys.FETCH_Ok) 
													{
														App.frmDiskAbr.bZettel = true;
													}
												}
												// 13.04.06
												// Return TRUE
											}
											// 03.04.07 Ä102
											if (App.frmDiskAbr.dtSperrDatum != SalDateTime.Null) 
											{
												App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + "Postausgang an Halter gesperrt seit " + Int.PalDateToStrJJJJMMTT(App.frmDiskAbr.dtSperrDatum).Mid(6, 2) + "." + Int.PalDateToStrJJJJMMTT(App.frmDiskAbr.dtSperrDatum).Mid(4, 2) + 
												"." + Int.PalDateToStrJJJJMMTT(App.frmDiskAbr.dtSperrDatum).Mid(0, 4);
												// 31.01.23 Ä2070
												if (App.frmDiskAbr.LEEPOST == 1 && App.frmDiskAbr.LEEPOSTMAIL != App.frmDiskAbr.HPMEMAIL) 
												{
													App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + "- E-Mail-Adresse in Abrg.: " + App.frmDiskAbr.LEEPOSTMAIL + " (Stand:" + Int.PalDateToStrDE(App.frmDiskAbr.LEEPOSTAENDDAT) + ")";
												}

												// 02.03.15 Ä1172
												Int.SqlIstDa("FROM el WHERE elarztnr = :frmDiskAbr.nArztNr AND elhalternr = :frmDiskAbr.nTANr AND elerledigt = \'N\'", ref Var.bExists);
												if (!(Var.bExists)) 
												{
													Int.SqlImmed(@"INSERT INTO el (elarztnr, elhalternr, elzeichen, eltext, eldatum, elabtlg, elerledigt)
VALUES(:frmDiskAbr.nArztNr, :frmDiskAbr.nTANr, :strBNZei, 'Bitte Name/Anschrift mitteilen wegen neuer Rechnung', SYSDATE, :strBNAbtlg, 'N')");
												}
											}
											// 26.08.13 Ä903
											if (App.frmDiskAbr.nTAEinzug == 1 || App.frmDiskAbr.nTVEinzug == 1) 
											{
												App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + "- BEZ: ";
												if (App.frmDiskAbr.nTAEinzug == 1) 
												{
													App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + " TA ja";
												}
												else
												{
													App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + " TA nein";
												}
												if (App.frmDiskAbr.nTVEinzug == 1) 
												{
													App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + " TV ja";
												}
												else
												{
													App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + " TV nein";
												}
											}


										}
										if (App.frmDiskAbr.nTVNr != 999999) 
										{
											App.frmDiskAbr.strTVxTi = Int.PalDelBlank(App.frmDiskAbr.strTVTi).ToUpper();
											App.frmDiskAbr.strTVxVN = Int.PalDelBlank(App.frmDiskAbr.strTVVN).ToUpper();
											App.frmDiskAbr.strTVxNN = Int.PalDelBlank(App.frmDiskAbr.strTVNN).ToUpper();
											App.frmDiskAbr.strTVxN2 = Int.PalDelBlank(App.frmDiskAbr.strTVN2).ToUpper();
											App.frmDiskAbr.strTVxStr = Int.PalDelBlank(App.frmDiskAbr.strTVStr).ToUpper();
											App.frmDiskAbr.strTVxOrt = Int.PalDelBlank(App.frmDiskAbr.strTVOrt).ToUpper();
										}
										// 13.04.06
										App.frmDiskAbr.strTVOrt = App.frmDiskAbr.strTVLand + " " + App.frmDiskAbr.strTVOrt;
										App.frmDiskAbr.strTAOrt = App.frmDiskAbr.strTALand + " " + App.frmDiskAbr.strTAOrt;

										// 09.07.01  rausgenommen, weil TA-Änderungen nicht durchgeführt worden sind :"(dtTAErfDat != DATETIME_Null And dtTAErfDat=dtTVErfDat) Or"
										// 16.01.02 rausgenommen und ersetzt: If (strTAxN1=strTVxN1 and strTAxN2=strTVxN2 and strTAxStr=strTVxStr and strTAxOrt=strTVxOrt)
										// 18.03.10 OTÄ397
										if (App.frmDiskAbr.nTAReverse == SalNumber.Null) 
										{
											App.frmDiskAbr.nTAReverse = 0;
										}
										if (App.frmDiskAbr.nTVReverse == SalNumber.Null) 
										{
											App.frmDiskAbr.nTVReverse = 0;
										}

										if (App.frmDiskAbr.strTAxOrt == "") 
										{
											App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + "- Ort fehlt";
											// 14.12.06 F97
											// Set frmDiskAbr.nTVNr = 0
											// Set frmDiskAbr.strTVTi = ''
											// Set frmDiskAbr.strTVVN = ''
											// Set frmDiskAbr.strTVNN = ''
											// Set frmDiskAbr.strTVN1 = ''
											// Set frmDiskAbr.strTVN2 = ''
											// Set frmDiskAbr.strTVStr = ''
											// Set frmDiskAbr.strTVOrt = ''

											// Call SqlExecute(hSql2)
											// If SqlFetchNext(hSql2,nFetch)
											// If nFetch = FETCH_Ok
											// Set frmDiskAbr.bZettel = TRUE
											// Return TRUE
										}
										else if (App.frmDiskAbr.strTAxTi == App.frmDiskAbr.strTVxTi && App.frmDiskAbr.strTAxVN == App.frmDiskAbr.strTVxVN && App.frmDiskAbr.strTAxNN == App.frmDiskAbr.strTVxNN && App.frmDiskAbr.strTAxN2 == App.frmDiskAbr.strTVxN2 && App.frmDiskAbr.strTAxStr == 
										App.frmDiskAbr.strTVxStr && App.frmDiskAbr.strTAxOrt == App.frmDiskAbr.strTVxOrt && App.frmDiskAbr.strTALand == App.frmDiskAbr.strTVLand && App.frmDiskAbr.nTAReverse == App.frmDiskAbr.nTVReverse && App.frmDiskAbr.strTAUStID == App.frmDiskAbr.strTVUStID) 
										{
											// Set frmDiskAbr.strPLZ = SalStrLeftX(strTAOrt,5)

											// Set frmDiskAbr.strStrasse = PalTrimStrPhon(strTAStr)
											// Set frmDiskAbr.nByte = SalStrLength(strStrasse)

											// If strStrasse != '' And strStrasse != 'Nr'
											// Call SqlIstDa( 'FROM mcs WHERE plz = :frmDiskAbr.strPLZ AND strphon = :frmDiskAbr.strStrasse', bMCOk)
											// If Not bMCOk
											// Set frmDiskAbr.strStrasse = PalTrimStr(strTAStr)
											// Set frmDiskAbr.nByte = SalStrLength(strStrasse)
											// Call SqlIstDa( 'FROM mcot WHERE plz = :frmDiskAbr.strPLZ AND @LICS(@LEFT(ort, :frmDiskAbr.nByte)) = @LICS(:frmDiskAbr.strStrasse)', bMCOk)
											// If Not bMCOk
											// Set frmDiskAbr.strFehler = 'PLZ/Straße'
											// Return TRUE
										}
										else
										{
											if (App.frmDiskAbr.nTANr != App.frmDiskAbr.nTVNr)  // im Halterstamm nicht gefunden
											{
												if (App.frmDiskAbr.dtTAErfDat != SalDateTime.Null) 
												{
													App.frmDiskAbr.nTVNr = 0;
													Int.SqlImmedSel(@"SELECT hhalternr,hti, hvn, hnn,hti || hvn || ' ' || hnn, hname2,hstr,hort, hland, hreverse, hustid
			INTO :frmDiskAbr.nTVNr,:frmDiskAbr.strTVTi,:frmDiskAbr.strTVVN,:frmDiskAbr.strTVNN,
			:frmDiskAbr.strTVN1, :frmDiskAbr.strTVN2,:frmDiskAbr.strTVStr,:frmDiskAbr.strTVOrt, :frmDiskAbr.strTVLand,  :frmDiskAbr.nTVReverse,  :frmDiskAbr.strTVUStID
			from h
			WHERE harztnr=:frmDiskAbr.nArztNr
			AND herfdat = :frmDiskAbr.dtTAErfDat");
													if (App.frmDiskAbr.nTVReverse == SalNumber.Null) 
													{
														App.frmDiskAbr.nTVReverse = 0;
													}
													if (App.frmDiskAbr.nTVNr == 0)  // im Halterstamm unter ErfDat nicht gefunden
													{
														App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + "- von M angegebene Halter ist bei uns nicht vorhanden";
														App.frmDiskAbr.strTVTi = "";
														App.frmDiskAbr.strTVVN = "";
														App.frmDiskAbr.strTVNN = "";
														App.frmDiskAbr.strTVN1 = "";
														App.frmDiskAbr.strTVN2 = "";
														App.frmDiskAbr.strTVStr = "";
														App.frmDiskAbr.strTVOrt = "";
														App.frmDiskAbr.nTVReverse = 0;
														App.frmDiskAbr.strTVUStID = "";
														Sql.Execute(App.frmDiskAbr.hSql2);

														// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
														SalNumber temp18 = App.frmDiskAbr.nFetch;
														SalBoolean temp19 = Sql.FetchNext(App.frmDiskAbr.hSql2, ref temp18);
														App.frmDiskAbr.nFetch = temp18;

														if (temp19) 
														{
															if (App.frmDiskAbr.nFetch == Sys.FETCH_Ok) 
															{
																App.frmDiskAbr.bZettel = true;
															}
														}
														// Return TRUE
													}
												}
												else
												{
													if (App.frmDiskAbr.nTANr == 0) 
													{
														App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + "- fehlt";
													}
													else
													{
														App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + "- von M angegebene Halter-Nr. ist bei uns nicht vorhanden";
													}
													App.frmDiskAbr.nTVNr = 0;
													App.frmDiskAbr.strTVTi = "";
													App.frmDiskAbr.strTVVN = "";
													App.frmDiskAbr.strTVNN = "";
													App.frmDiskAbr.strTVN1 = "";
													App.frmDiskAbr.strTVN2 = "";
													App.frmDiskAbr.strTVStr = "";
													App.frmDiskAbr.strTVOrt = "";
													App.frmDiskAbr.nTVReverse = 0;
													App.frmDiskAbr.strTVUStID = "";
													// Call SqlExecute(hSql2)
													// If SqlFetchNext(hSql2,nFetch)
													// If nFetch = FETCH_Ok
													// Set frmDiskAbr.bZettel = TRUE
													// Return TRUE
												}
											}
											else
											{
												App.frmDiskAbr.strFehler = App.frmDiskAbr.strFehler + "- Änderung";
												Sql.Execute(App.frmDiskAbr.hSql2);

												// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
												SalNumber temp20 = App.frmDiskAbr.nFetch;
												SalBoolean temp21 = Sql.FetchNext(App.frmDiskAbr.hSql2, ref temp20);
												App.frmDiskAbr.nFetch = temp20;

												if (temp21) 
												{
													if (App.frmDiskAbr.nFetch == Sys.FETCH_Ok) 
													{
														App.frmDiskAbr.bZettel = true;
													}
												}
												// Return TRUE
											}
										}
										if (App.frmDiskAbr.strFehler != "") 
										{
											// Set frmDiskAbr.strFehler = SalStrMidX(frmDiskAbr.strFehler,2,255)	! 31.01.23 auskommentiert
											// 18.12.06 F98
											if (App.frmDiskAbr.nTVNr == 999999) 
											{
												App.frmDiskAbr.nTVNr = 0;
											}

											return true;
										}
									}
								}
								else
								{
									return false;
								}
							}
							else
							{
								break;
							}
						}
					}
				}
				else if (strPBericht == "Mahnungen.lst" || strPBericht == "Mahnung A4.lst" || strPBericht == "MahnUeberw.lst" || strPBericht == "Mahnung A4 tvn.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{

							App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);
							// 11.05.14 Ä1163 +  + PalDateToStrJJJJMMTThhmmsst( frmMain.dtMahnDat )
							// 04.05.07
							if (Int.PalStrNum(App.frmMain.nTANr * 1000000 + App.frmMain.nTHNr, 10, 0) + Int.PalDateToStrJJJJMMTThhmmsst(App.frmMain.dtMahnDat) != strReset) 
							{
								// 17.07.07 in diesen Zweig verschoben, muß nur einmal je Kunde gemacht werden.
								PalFetchNextDetail();

								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								// 11.05.14 Ä1163 +  + PalDateToStrJJJJMMTThhmmsst( frmMain.dtMahnDat )
								strReset = Int.PalStrNum(App.frmMain.nTANr * 1000000 + App.frmMain.nTHNr, 10, 0) + Int.PalDateToStrJJJJMMTThhmmsst(App.frmMain.dtMahnDat);
								// 25.10.13 Ä903
								// 14.03.16
								// 19.10.16 Ä1422
								// Set strIBAN = PalIBAN( 'DE', '25950130', '7006573'  )
								strIBAN = "DE13 2595 0130 0007 0065 73";

								// 08-09.14 F2131
								Int.SqlConnection(ref hSqlLogo);
								hSqlLogo.PrepareAndExecute("SELECT abild INTO :frmMain.lsBild  FROM a WHERE aarztnr = :frmMain.nTANr");
								// TODO: Obsolete functions or constants used: SetLongBindDatatype.
								Sql.SetLongBindDatatype(1, 23); // 23 = BINARY
								nFetch2 = hSqlLogo.FetchNext();
								hSqlLogo.Commit();
								hSqlLogo.Disconnect();
								if (App.frmMain.lsBild != "") 
								{

									// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
									SalString temp22 = App.frmMain.lsBild;
									Sal.StrUncompress(ref temp22);
									App.frmMain.lsBild = temp22;

								}
								// 08.09.14 F2131
								nPicture = 0;
								nPicture = MT.MImg.LoadFromString(App.frmMain.lsBild, MT.MImg.MIMG_TYPE_BMP, 0);
								// 18.03.12 F1549 strTVNPath -> strTemp 	25.03.13 + ' || PalDateToStrJJJJMMTThhmmsst( SalDateCurrent(  ) ) || '
								// 08.09.14 F2131
								// Set strPLogo = PalDateToStrJJJJMMTThhmmsst( SalDateCurrent(  ) )
								strPLogo = Sal.NumberToStrX(App.frmMain.nTANr, 0);
								// 21.08.14F2121 + and strPLogo != ''
								if (strBildDatei != "") 
								{
									strBildDatei = "";
								}
								if (nPicture != 0 && strPLogo != "") 
								{
									// 08.08.14 F2044 + If lsBildAlt != frmMain.lsBild
									// 18.03.12 F1549 strTVNPath -> strTemp 	25.03.13 + ' || PalDateToStrJJJJMMTThhmmsst( SalDateCurrent(  ) ) || '
									if (!(MT.MImg.Save(nPicture, strTemp + "\\Logo" + strPLogo + ".bmp", MT.MImg.MIMG_TYPE_BMP))) 
									{
										this.SetStatusBarText("Das Logo für Mitglied " + Sal.NumberToStrX(App.frmMain.nTANr, 0) + " kann nicht nach " + Var.strTVNPath + "\\Logo.bmp gespeichert werden.");
										nPicture = 0;
										// 13.02.13 F1549
										Int.PalLog("Logo MG Fehler " + Sal.NumberToStrX(App.frmMain.nTANr, 0));
									}
									else
									{
										// Call axLL.LlDefineVariableExt('Mitglied.Logo', strTVNPath || '\\Layouts\\Logo.bmp', LL_DRAWING, nRet)
										strBildDatei = strTemp + "\\Logo" + strPLogo + ".bmp";
										// 13.02.13 F1549
										Int.PalLog("Logo MG Ok " + Sal.NumberToStrX(App.frmMain.nTANr, 0));
										// 08.08.14 F2044
										lsBildAlt = App.frmMain.lsBild;
									}
									// Else
									// Call PalLog( 'Logo MG identisch ' || SalNumberToStrX( frmMain.nTANr, 0) )
									// 22.08.14
									// Set strBildDatei = strTemp || '\\Logo' || strPLogo || '.bmp'
								}
								// !
								if (nPicture == 0) 
								{
									if (App.frmMain.strLogo != "") 
									{
										// Set strPDummy = strTVNPath || '\\' || frmMain.strLogo || '.BMP'
										strBildDatei = Const.PATH_IMAGES + App.frmMain.strLogo + ".BMP";
										// 13.02.13 F1549
										Int.PalLog("Logo MG Datei " + Sal.NumberToStrX(App.frmMain.nTANr, 0));
									}
									else
									{
										strBildDatei = "";
									}
								}
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "MYCO-Zettel.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							// ! 10.04.06 Ländercodes
							App.frmManAbr.strTHLand = Int.PalPruefeLC(App.frmManAbr.strTHLand, 0);
							// !
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Rechnungen.lst" || strPBericht == "Überweisung A4.lst" || strPBericht == "Rechnung A4.lst" || strPBericht == "Überweisung AT.lst" || strPBericht == "Vorab-Rechnung.lst" || strPBericht == "Rechnung A4 tvn.lst") 
				{
					// 25.03.19 Ä1845
					if (bVorschalt) 
					{
						App.frmMain.strMahnMZF = "";
						return true;
					}
					else
					{
						if (hSqlLlDruck.FetchNext(ref nFetch)) 
						{
							if (nFetch == Sys.FETCH_Ok) 
							{
								// Set frmMain.strTHLand = PalPruefeLC(frmMain.strTHLand,0)

								// 04.05.07
								if (Int.PalStrNum(App.frmMain.nTANr * 1000000 + App.frmMain.nRechNr, 10, 0) != strReset) 
								{
									App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);
									// 27.10.20 Ä1901
									nFormatAlt = 0;
									nRecordNo = 1;
									// 30.10.13
									if (bArchiv) 
									{
										this.SetStatusBarText("Archiv: " + Sal.NumberToStrX(App.frmMain.nTANr, 0) + "/R" + Sal.NumberToStrX(App.frmMain.nRechNr, 0));
									}
									else
									{
										this.SetStatusBarText("Druck: " + Sal.NumberToStrX(App.frmMain.nTANr, 0) + "/R" + Sal.NumberToStrX(App.frmMain.nRechNr, 0));
									}
									// 31.08.09 OTÄ295 + hvirtkonto	01.11 13 wegen Perfomance-Problemen entfernt
									// If strHVirtKonto = ''
									// If PalNextVirtKonto()
									// Call SqlImmed('UPDATE h SET hvirtkonto = :dlgLlDruck.strHVirtKonto WHERE harztnr = :frmMain.nTANr AND hhalternr = :frmMain.nTHNr')
									// 19.10.22 Ä2044 + or SalStrLeftX(frmMain.strRepRechText,47) = 'Die o.g. Tierarztpraxis hat uns mit dem Einzug'
									if (App.frmMain.strRepRechText.Left(47) == "Die o.g. Tierarztpraxis hat uns mit dem Inkasso" || App.frmMain.strRepRechText.Left(47) == "Die o.g. Tierarztpraxis hat uns mit dem Einzug") 
									{
										pnDummy = 1;
									}
									else
									{
										pnDummy = 0;
									}
									// 09.04.10 OTÄ135
									Int.SqlIstDa("FROM rzp WHERE rzparztnr = :frmMain.nTANr AND rzphalternr = :frmMain.nTHNr AND rzprechnr = :frmMain.nRechNr", ref bRZ);
									if (bRZ) 
									{
										nRZfrei = 0;
									}
									else
									{
										Int.SqlIstDa("FROM rzp WHERE rzparztnr = :frmMain.nTANr AND rzphalternr = :frmMain.nTHNr AND rzprechnr <> :frmMain.nRechNr", ref bRZ);
										if (bRZ) 
										{
											nRZfrei = 1;
										}
										else
										{
											nRZfrei = 0;
										}
									}

									pdtAltDatum = App.frmMain.dtRepRechDatum;
									// 27.10.20 Ä1901
									nFormatAlt = App.frmMain.nFormat;

									if (!(locals.bFirst)) 
									{
										// 19.08.15 Ä1240
										if (strPSpezial == "RN" && strFileName.Scan("protokoll") != -1) 
										{
										}
										else
										{
											bLlPrintResetProjectState = true;
										}
									}
									if (strPSpezial == "LE" || strPSpezial == "D" || strPSpezial == "M") 
									{
										App.frmMain.strMahnMZF = "11" + Int.PalNullen(App.frmMain.nTANr, 4) + Int.PalNullen(App.frmMain.nRechNr, 6);
										App.frmMain.strMahnMZF = App.frmMain.strMahnMZF + Int.PalPruefZiffer(App.frmMain.strMahnMZF);

										App.frmMain.nMahnEUR = 0;

										if (strPSpezial == "LE") 
										{
											Int.SqlHandleExec(hSqlLlDruck2, @"SELECT lepla, lepmwst, sum(lepdm)
			INTO :dlgLlDruck.pstrLA, :dlgLlDruck.pnMwSt, :dlgLlDruck.pnEUR
			FROM  lep
			WHERE leparztnr= :frmMain.nTANr AND leprechnr = :frmMain.nRechNr
			AND lepbearbeiter = :frmSpeRg.strBearbeiter AND lebearbdatum = :frmSpeRg.dtBearbDatum
			GROUP BY 1,2 ORDER BY lepla desc, lepmwst", "Kreuztabelle RechDruck", ref Var.nErr);
										}
										else if (strPSpezial == "D") 
										{
											// 22.09.11 F1036 +  AND lepbearbeiter = :frmDiskAbr.strBearbeiter AND lebearbdatum = :frmDiskAbr.dtBearbDatum
											Int.SqlHandleExec(hSqlLlDruck2, @"SELECT lepla, lepmwst, sum(lepdm)
			INTO :dlgLlDruck.pstrLA, :dlgLlDruck.pnMwSt, :dlgLlDruck.pnEUR
			FROM  lep
			WHERE leparztnr= :frmMain.nTANr AND lepposnr = :frmMain.nRechNr AND lepbearbeiter = :frmDiskAbr.strBearbeiter AND lebearbdatum = :frmDiskAbr.dtBearbDatum
			GROUP BY 1,2 ORDER BY lepla desc, lepmwst", "Kreuztabelle RechDruck", ref Var.nErr);
										}
										else if (strPSpezial == "M")  // 18.04.12 Ä751
										{
											// 22.09.11 F1036 +  AND lepbearbeiter = :frmDiskAbr.strBearbeiter AND lebearbdatum = :frmDiskAbr.dtBearbDatum
											Int.SqlHandleExec(hSqlLlDruck2, @"SELECT lepla, lepmwst, sum(lepdm)
			INTO :dlgLlDruck.pstrLA, :dlgLlDruck.pnMwSt, :dlgLlDruck.pnEUR
			FROM  lep
			WHERE leparztnr = :frmMain.nTANr AND (lepposnr*100000+lephalternr) = :frmMain.nRechNr AND lepbearbeiter = :frmManAbr.strBearbeiter AND lebearbdatum = :frmManAbr.dtBearbDatum
			GROUP BY 1,2 ORDER BY lepla desc, lepmwst", "Kreuztabelle RechDruck", ref Var.nErr);
										}
										else
										{
											Int.SqlHandleExec(hSqlLlDruck2, @"SELECT lepla, lepmwst, sum(lepdm)
			INTO :dlgLlDruck.pstrLA, :dlgLlDruck.pnMwSt, :dlgLlDruck.pnEUR
			FROM  lep
			WHERE leparztnr= :frmMain.nTANr AND lepposnr = :frmMain.nRechNr
			GROUP BY 1,2 ORDER BY lepla desc, lepmwst", "Kreuztabelle RechDruck", ref Var.nErr);
										}
										nFetch2 = hSqlLlDruck2.FetchNext();
										App.frmMain.lsBemerk = Int.PalLF("", 37) + Int.PalRF("MwSt €", 13) + Int.PalRF("Netto €", 14) + Int.PalRF("Brutto €", 14) + @"
";
										while (nFetch2 != Sys.FETCH_EOF) 
										{
											pnMwStEUR = (pnEUR * pnMwSt).Round() / 100.00m;
											pnBrutto = pnEUR + pnMwStEUR;
											// Set frmMain.nMahnEUR =  frmMain.nMahnEUR + pnBrutto
											if (pstrLA == "A") 
											{
												pstrLA = Int.PalLF("Abgegebene Arzneien", 30);
											}
											else
											{
												pstrLA = Int.PalLF("Leistungen", 30);
											}
											// 20.03.08 F351 pnMwStEUR ersetzt durch pnEUR
											if (pnEUR != 0) 
											{
												App.frmMain.lsBemerk = App.frmMain.lsBemerk + pstrLA + Int.PalStrNum(pnMwSt, 2, 1) + " % " + Int.PalStrNum(pnMwStEUR, 10, 2) + " " + Int.PalStrNum(pnEUR, 10, 2) + " " + Int.PalStrNum(pnBrutto, 10, 2) + @"
";
												App.frmMain.nMahnEUR = App.frmMain.nMahnEUR + pnBrutto;
											}
											// 12.09.07 A151
											// If frmMain.dtRepSperrDatum != DATETIME_Null
											// Set plsMemo = plsMemo || SalNumberToStrX(frmMain.nTANr,0) || '/H ' || SalNumberToStrX(frmMain.nTHNr,0) || '/R ' || SalNumberToStrX(frmMain.nRechNr,0) || ': ' || frmMain.strTHVN || ' ' || frmMain.strTHNN || '
											// '
											nFetch2 = hSqlLlDruck2.FetchNext();
										}
										// Call SqlCommit(hSqlLlDruck2)
										// 25.06.09 OTÄ255
										// Set strDummy = '>>TSK' || PalStrNum(nBeihilfe,8,2) || '<<'
										nTSK = 0;
										// 13.12.16 entfernt:
										// 			AND lepbearbeiter = :frmSpeRg.strBearbeiter AND lebearbdatum = :frmSpeRg.dtBearbDatum
										Int.SqlHandleExec(hSqlLlDruck2, @"SELECT leprechtext
			INTO :dlgLlDruck.strTSK
			FROM  lep
			WHERE leparztnr= :frmMain.nTANr AND leprechnr = :frmMain.nRechNr
			AND leprechtext LIKE '>>TSK%'", "TSK RechDruck", ref Var.nErr);
										nFetch2 = hSqlLlDruck2.FetchNext();
										while (nFetch2 != Sys.FETCH_EOF) 
										{
											nTSK = nTSK + Int.PalValNum(strTSK.Mid(5, 11));
											nFetch2 = hSqlLlDruck2.FetchNext();
										}
										// Call SqlCommit(hSqlLlDruck2)
										// 13.02.18 Ä1698
										if (App.frmMain.nTANr == 0 || strPBericht == "Vorab-Rechnung.lst") 
										{
											nRabattSum = 0;
										}
										else
										{
											Int.SqlImmedSel(@"SELECT sum(lepdm) INTO :dlgLlDruck.nRabattSum FROM  lep
			WHERE leparztnr= :frmMain.nTANr AND leprechnr = :frmMain.nRechNr
			AND lepbearbeiter = :frmSpeRg.strBearbeiter AND lebearbdatum = :frmSpeRg.dtBearbDatum
			AND leprabatt IS NOT NULL AND leprabatt > 0");
										}

									}
									else if (strPSpezial == "RK" || strPSpezial == "RN" || strPSpezial == "RK2" || strPSpezial == "RS" || strPSpezial == "RI")  // 08.12.20 RS_ Ä1897  01.08.23 RI Ä2120
									{
										App.frmMain.nMahnEUR = 0;
										App.frmMain.strMahnMZF = "11" + Int.PalNullen(App.frmMain.nTANr, 4) + Int.PalNullen(App.frmMain.nRechNr, 6);
										App.frmMain.strMahnMZF = App.frmMain.strMahnMZF + Int.PalPruefZiffer(App.frmMain.strMahnMZF);

										Int.SqlHandleExec(hSqlLlDruck2, @"SELECT rpla, rpmwst, sum(rpdm)
			INTO :dlgLlDruck.pstrLA, :dlgLlDruck.pnMwSt, :dlgLlDruck.pnEUR
			FROM  rp
			WHERE rparztnr= :frmMain.nTANr AND rprechnr = :frmMain.nRechNr
			GROUP BY 1,2 ORDER BY rpla desc, rpmwst", "Kreuztabelle RechDruck", ref Var.nErr);
										nFetch2 = hSqlLlDruck2.FetchNext();
										App.frmMain.lsBemerk = Int.PalLF("", 37) + Int.PalRF("MwSt €", 13) + Int.PalRF("Netto €", 14) + Int.PalRF("Brutto €", 14) + @"
";
										while (nFetch2 != Sys.FETCH_EOF) 
										{
											pnMwStEUR = (pnEUR * pnMwSt).Round() / 100.00m;
											pnBrutto = pnEUR + pnMwStEUR;
											App.frmMain.nMahnEUR = App.frmMain.nMahnEUR + pnBrutto;
											if (pstrLA == "A") 
											{
												pstrLA = Int.PalLF("Abgegebene Arzneien", 30);
											}
											else
											{
												pstrLA = Int.PalLF("Leistungen", 30);
											}
											// 20.03.08 F351 pnMwStEUR ersetzt durch pnEUR
											if (pnEUR != 0) 
											{
												App.frmMain.lsBemerk = App.frmMain.lsBemerk + pstrLA + Int.PalStrNum(pnMwSt, 2, 1) + " % " + Int.PalStrNum(pnMwStEUR, 10, 2) + " " + Int.PalStrNum(pnEUR, 10, 2) + " " + Int.PalStrNum(pnBrutto, 10, 2) + @"
";
											}
											nFetch2 = hSqlLlDruck2.FetchNext();
										}
										// Call SqlCommit(hSqlLlDruck2)
										// 25.06.09 OTÄ255
										// Set strDummy = '>>TSK' || PalStrNum(nBeihilfe,8,2) || '<<'
										nTSK = 0;
										Int.SqlHandleExec(hSqlLlDruck2, @"SELECT rprechtext
			INTO :dlgLlDruck.strTSK
			FROM  rp
			WHERE rparztnr= :frmMain.nTANr AND rprechnr = :frmMain.nRechNr
			AND rprechtext LIKE '>>TSK%'", "TSK RechDruck", ref Var.nErr);
										nFetch2 = hSqlLlDruck2.FetchNext();
										while (nFetch2 != Sys.FETCH_EOF) 
										{
											nTSK = nTSK + Int.PalValNum(strTSK.Mid(5, 11));
											nFetch2 = hSqlLlDruck2.FetchNext();
										}
										// Call SqlCommit(hSqlLlDruck2)
										// 13.02.18 Ä1698
										if (App.frmMain.nTANr == 0) 
										{
											nRabattSum = 0;
										}
										else
										{
											Int.SqlImmedSel(@"SELECT sum(rpdm) INTO :dlgLlDruck.nRabattSum FROM  rp
			WHERE rparztnr= :frmMain.nTANr AND rprechnr = :frmMain.nRechNr
			AND rprabatt IS NOT NULL AND rprabatt > 0");
										}

									}
									// 18.02.14
									// 12.05.14
									// Call SqlDisconnect( hSqlLlDruck2 )
									// Call SqlConnection( hSqlLlDruck2 )
									Int.SqlConnection(ref hSqlLogo);

									// 17.07.12 Ä792
									hSqlLogo.PrepareAndExecute("SELECT abild INTO :frmMain.lsBild  FROM a WHERE aarztnr = :frmMain.nTANr");
									// TODO: Obsolete functions or constants used: SetLongBindDatatype.
									Sql.SetLongBindDatatype(1, 23); // 23 = BINARY
									nFetch2 = hSqlLogo.FetchNext();
									// 18.02.14
									hSqlLogo.Commit();
									// 12.05.14
									hSqlLogo.Disconnect();

									if (App.frmMain.lsBild != "") 
									{

										// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
										SalString temp23 = App.frmMain.lsBild;
										Sal.StrUncompress(ref temp23);
										App.frmMain.lsBild = temp23;

									}

									strReset = Int.PalStrNum(App.frmMain.nTANr * 1000000 + App.frmMain.nRechNr, 10, 0);
									// 09.10.17 Ä1637
									strIBAN = "DE13 2595 0130 0007 0065 73";
									// 23.12.09 OTÄ295 + hvirtkonto
									// If strHVirtKonto != ''
									// Call SqlImmedSel('SELECT COUNT(*) INTO :dlgLlDruck.nMaxVirtKonto FROM h WHERE hvirtkonto = :dlgLlDruck.strHVirtKonto')
									// If nMaxVirtKonto > 1
									// If PalNextVirtKonto()
									// Call SqlImmed('UPDATE h SET hvirtkonto = :dlgLlDruck.strHVirtKonto WHERE harztnr = :frmMain.nTANr AND hhalternr = :frmMain.nTHNr')
									// 22.10.13 Ä903
									// If strHVirtKonto = ''
									// 19.10.16 Ä1422
									// Set strIBAN = PalIBAN( 'DE', '25950130', '7006573'  )
									// Set strIBAN = 'DE13 2595 0130 0007 0065 73'
									// Else
									// 31.10.13
									// Set strHVirtKonto = strHVirtKonto || PalPruefZifferB1(strHVirtKonto ,9)
									// Set strIBAN = PalIBAN( 'DE', '25950130', strHVirtKonto  )
									// 26.10.16 Ä1422
									// Set strIBAN = SalStrLeftX( strIBAN, 4 ) || ' ' || SalStrMidX( strIBAN, 4, 4 ) || ' ' || SalStrMidX( strIBAN, 8,4 ) || ' ' || SalStrMidX( strIBAN, 12,4 ) || ' ' || SalStrMidX( strIBAN, 16,4 ) || ' ' || SalStrMidX( strIBAN, 20, 2 )
									// Call SalMessageBox( '-' || strIBAN || '-', '-' || strHVirtKonto || '-', MB_Ok )

									// 31.08.10 OTÄ465 15.10.10 + If strPSpezial = 'LE'
									// 07.05.18Ä1734 +  or bePost
									if (strPSpezial == "LE") 
									{
										if (strPrn.Scan("PrintMachine") != -1 || strPrn.Scan("Tagespost") != -1 || bePost) 
										{
											// 02.11.10 OTF783 + SalStrLeftX
											strName = (App.frmMain.strTHNN + ", " + App.frmMain.strTHVN).Left(50);
											Int.SqlImmed(@"INSERT INTO dk (dkdruck, dkuser, dkarztnr, dkhalternr, dkrechnr, dkname, dkort, dkland, dkdatum)
VALUES(:dlgLlDruck.strPBericht, :strBNUser, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :dlgLlDruck.strName, :frmMain.strTHOrt, :frmMain.strTHLand, SYSDATETIME)");
										}
									}
									// 18.03.12 F1549 strTVNPath -> strTemp 	25.03.13 + ' || PalDateToStrJJJJMMTThhmmsst( SalDateCurrent(  ) ) || '
									// 12.05.14 F2024
									// Set strPLogo = PalDateToStrJJJJMMTThhmmsst( SalDateCurrent(  ) )
									strPLogo = Sal.NumberToStrX(App.frmMain.nTANr, 0);

								}
								else
								{
									// 13.10.20 Ä1903 + and frmMain.nFormat != 1
									if (App.frmMain.dtRepRechDatum == pdtAltDatum && nFormatAlt != 1 && nFormatAlt != 2) 
									{
										App.frmMain.dtRepRechDatum = SalDateTime.Null;
									}
									else
									{
										pdtAltDatum = App.frmMain.dtRepRechDatum;
									}
									// 27.10.20 Ä1901
									nFormatAlt = App.frmMain.nFormat;
								}
								// 07.09.11 F898
								if (App.frmMain.nTHFaellTg == SalNumber.Null) 
								{
									App.frmMain.nTHFaellTg = 0;
								}
								if (App.frmMain.dtMahnDat == SalDateTime.Null) 
								{
									App.frmMain.dtMahnDat = SalDateTime.Current;
								}
								return true;
							}
							else
							{
								return false;
							}
						}
					}
				}
				else if (strPBericht == "EU-Überweisungen.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);

							// 04.05.07
							if (Int.PalStrNum(App.frmMain.nTANr * 1000000 + App.frmMain.nRechNr, 10, 0) != strReset) 
							{

								App.frmMain.nMahnEUR = 0;
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								App.frmMain.strMahnMZF = "11" + Int.PalNullen(App.frmMain.nTANr, 4) + Int.PalNullen(App.frmMain.nRechNr, 6);
								App.frmMain.strMahnMZF = App.frmMain.strMahnMZF + Int.PalPruefZiffer(App.frmMain.strMahnMZF);

								Int.SqlHandleExec(hSqlLlDruck2, @"SELECT lepla, lepmwst, sum(lepdm)
			INTO :dlgLlDruck.pstrLA, :dlgLlDruck.pnMwSt, :dlgLlDruck.pnEUR
			FROM  lep
			WHERE leparztnr= :frmMain.nTANr AND leprechnr = :frmMain.nRechNr
			GROUP BY 1,2 ORDER BY lepla desc, lepmwst", "Kreuztabelle RechDruck", ref Var.nErr);
								nFetch2 = hSqlLlDruck2.FetchNext();
								while (nFetch2 != Sys.FETCH_EOF) 
								{
									pnMwStEUR = (pnEUR * pnMwSt).Round() / 100.00m;
									pnBrutto = pnEUR + pnMwStEUR;
									App.frmMain.nMahnEUR = App.frmMain.nMahnEUR + pnEUR + pnMwStEUR;
									nFetch2 = hSqlLlDruck2.FetchNext();
								}
								// Call SqlCommit(hSqlLlDruck2)
								strReset = Int.PalStrNum(App.frmMain.nTANr * 1000000 + App.frmMain.nRechNr, 10, 0);
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Mahnungen-RaZa.lst" || strPBericht == "Mahnungen-RaZa A4.lst" || strPBericht == "Mahn-RaZa-Ueberw.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);

							if (Int.PalStrNum(App.frmMain.nTANr * 1000000 + App.frmMain.nTHNr, 10, 0) != strReset) 
							{
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								App.frmMain.strMahnMZF = "11" + Int.PalNullen(App.frmMain.nTANr, 4) + Int.PalNullen(App.frmMain.nRechNr, 6);
								App.frmMain.strMahnMZF = App.frmMain.strMahnMZF + Int.PalPruefZiffer(App.frmMain.strMahnMZF);
								// 18.02.14
								hSqlLlDruck2.Disconnect();
								Int.SqlConnection(ref hSqlLlDruck2);

								// 18.02.14
								// 12.05.14
								// Call SqlDisconnect( hSqlLlDruck2 )
								// Call SqlConnection( hSqlLlDruck2 )
								Int.SqlConnection(ref hSqlLogo);


								// 17.07.12 Ä792
								hSqlLogo.PrepareAndExecute("SELECT abild INTO :frmMain.lsBild  FROM a WHERE aarztnr = :frmMain.nTANr");
								// TODO: Obsolete functions or constants used: SetLongBindDatatype.
								Sql.SetLongBindDatatype(1, 23); // 23 = BINARY
								nFetch2 = hSqlLogo.FetchNext();
								// 18.02.14
								hSqlLogo.Commit();
								// 12.05.14
								hSqlLogo.Disconnect();

								if (App.frmMain.lsBild != "") 
								{

									// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
									SalString temp24 = App.frmMain.lsBild;
									Sal.StrUncompress(ref temp24);
									App.frmMain.lsBild = temp24;

								}


								strReset = Int.PalStrNum(App.frmMain.nTANr * 1000000 + App.frmMain.nTHNr, 10, 0);
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "OP-Liste Halter.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);

							Int.SqlHandleExec(hSqlLlDruck2, @"SELECT zabuchdat, zadm, zabuchtext,
			@IF(@ISNA(zakz),NULL,@CHOOSE(zakz, NULL, 'Teilzahlung', 'Vollzahlung', 'Vollzahlung, Mahngeb.ausgebucht', 'ausgebucht', 'ausgebucht bei MB-Erst.'))
			INTO :frmMain.dtRepZahlDat, :frmMain.nRepZahlDM, :frmMain.strRepBuchText, :frmMain.strRepZahlKZ
			FROM  za
			WHERE zaarztnr= :frmMain.nTANr AND zahalternr = :frmMain.nTHNr AND zarechnr = :frmMain.nRechNr AND zadeaktiv IS NULL
			ORDER BY zabuchdat", "Zahlungen holen RechDruck", ref Var.nErr);
							nFetch2 = hSqlLlDruck2.FetchNext();
							App.frmMain.lsBemerk = "";
							while (nFetch2 != Sys.FETCH_EOF) 
							{
								if (App.frmMain.strRepBuchText != "") 
								{
									App.frmMain.strRepZahlKZ = App.frmMain.strRepZahlKZ + "\"" + App.frmMain.strRepBuchText + "\"";
								}
								if (App.frmMain.nKZZahl >= 2) 
								{
									App.frmMain.nRepDMOP = 0;
								}
								App.frmMain.lsBemerk = App.frmMain.lsBemerk + App.frmMain.strRepZahlKZ + " am " + Int.PalDateToStrDE(App.frmMain.dtRepZahlDat) + " in Höhe von € " + Int.PalStrNum(App.frmMain.nRepZahlDM, 10, 2) + @"
";
								nFetch2 = hSqlLlDruck2.FetchNext();
							}
							// Call SqlCommit(hSqlLlDruck2)

							// 07.04.10 OTÄ135
							// If frmMain.nTHNr != frmMain.nTHNrAlt or frmMain.nTANr != frmMain.nTANrAlt
							// Call SqlImmedSel('SELECT sum(hbdm)
							// 		INTO :dlgLlDruck.nRZOffen
							// 		FROM hb
							// 		WHERE hbarztnr = :frmMain.nTANr AND hbhalternr = :frmMain.nTHNr')
							// Set frmMain.nTHNrAlt = frmMain.nTHNr
							// Set frmMain.nTANrAlt = frmMain.nTANr

							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Forderungsaufstellung.lst" || strPBericht == "Liste der Kosten.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							// 06.08.08
							if (Var.nProzNr.ToString(0) != strReset) 
							{
								// 08.09.10 OTÄ468
								Var.strDummy1 = "";
								strSelect = @"SELECT prdarztnr, prdrechnr
INTO :frmMain.nTANr, :frmMain.nRechNr
FROM prd
WHERE prdnr = :nProzNr
ORDER BY prdarztnr, prdrechnr";
								if (!(Int.SqlPrepar(hSqlLlDruck2, strSelect))) 
								{
									return false;
								}
								else
								{
									if (!(hSqlLlDruck2.Execute())) 
									{
										return false;
									}
									else
									{
										if (hSqlLlDruck2.FetchNext(ref nFetch2)) 
										{
											while (nFetch2 == Sys.FETCH_Ok) 
											{
												Var.strDummy1 = Var.strDummy1 + Int.PalStrNum(App.frmMain.nTANr, 4, 0) + "/R" + Int.PalStrNum(App.frmMain.nRechNr, 6, 0) + " - ";
												nFetch2 = hSqlLlDruck2.FetchNext();
											}
										}
									}
								}

								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								strReset = Var.nProzNr.ToString(0);
							}

							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Rechnungsprotokoll.lst") 
				{
					if (Sql.FetchNext(App.frmRechProtneu.hSqlLe, ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							if (App.frmRechProtneu.PalFetchNext()) 
							{
							}
							if (Sal.NumberToStrX(App.frmRechProtneu.nTANr, 0) != strReset) 
							{
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								// 21.04.08
								Int.SqlImmedSel(@"SELECT asvname1, asvname2, asvstr, asvort, asvland
		INTO :dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :frmMain.strTALand
		FROM A
		WHERE a.aarztnr = :frmRechProtneu.nTANr");

								strReset = Sal.NumberToStrX(App.frmRechProtneu.nTANr, 0);
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Mahnvorschlag.lst") 
				{
					if (Sal.TblFindNextRow(App.frmMahnVor.tblMahnVor, ref nRow, 0, 0)) 
					{
						Sal.TblSetFocusRow(App.frmMahnVor.tblMahnVor, nRow);
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "Portooptimierung.lst") 
				{
					if (!(locals.bFirst)) 
					{
						return false;
					}
					else
					{
						locals.bFirst = false;
						return true;
					}
				}
				// Else If strPBericht = 'TSK-Beihilfen.lst'
				// Set strSelect = 'SELECT tskarztnr, tskhalternr, tskbeihdat, tskbeihilfe, tskbeihtext, tskregnr, tskerfdat,
				// hti || hvn || \' \' || hnn, hname2, hstr, hland, hort
				// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.dtDatum, :frmMain.nBeihilfe, :frmMain.strBeihText, :frmMain.strRegNr, :frmMain.dtErfDat,
				// :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHLand, :frmMain.strTHOrt
				// FROM tsk, h
				// WHERE (tsktadruckdat IS NULL Or tsktadruckdat ='1900-1-1')
				// AND tslarztnr = harztnr AND tskhalternr = hhalternr
				// ORDER BY tskarztnr'
				// If SqlFetchNext(hSqlLlDruck,nFetch)
				// If nFetch = FETCH_Ok
				// Set frmMain.strTHLand = PalPruefeLC(frmMain.strTHLand,0)
				// Call SqlImmed('UPDATE tsk SET tsktadruckdat = '1900-1-1' WHERE tskarztnr=:frmMain.nTANr AND tskhalternr = :frmMain.nTHNr AND tskerfdat = :frmMain.dtErfDat ')
				// Return TRUE
				// Else
				// Return FALSE
				else if (strPBericht == "Ratenzahler-Vereinbarung.lst" || strPBericht == "RaZaVerBrief.crd" || strPBericht == "RaZaReakt.crd") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							if (strReset != Sal.NumberToStrX(App.frmMain.nRZNr, 0)) 
							{
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								strReset = Sal.NumberToStrX(App.frmMain.nRZNr, 0);
							}
							App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Ratenzahler-Tilgungsplan.lst") 
				{
					// Set strSelect = 'SELECT rznr, rzarztnr, rzhalternr, rzzins, rzerfdat, rzrate, rztag, rzparztnr, rzphalternr, rzprechnr,
					// hti || hvn || \' \' || hnn, hname2, hstr, hland, hort,
					// sum(rkdmleis-rkzaleis+ rkdmarzn-rkzaarzn+ rkdmmahn-rkzamahn+ rkdmzins-rkzazins+ rkmbdmopl-rkmbzaopl)
					// INTO :frmMain.nRZNr, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRZZins, :frmMain.dtErfDat, :frmMain.nRZRate, :frmMain.nRZTag, :frmMain.nRZArztNr, :frmMain.nRZHalterNr, :frmMain.nRZRechNr,
					// :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHLand, :frmMain.strTHOrt,
					// :frmMain.nRZLeis
					// FROM rz, rzp, rk, h
					// WHERE rzarztnr = harztnr AND rzhalternr = hhalternr AND rznr = rzpnr
					// AND rzparztnr=rkarztnr AND rzphalternr=rkhalternr AND rzprechnr=rkrechnr ' || strPSpezial || '
					// GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15'
					if (nRZOffen <= 0 || nRZOffen2 <= 0) 
					{
						nRZOffen = SalNumber.Null;
					}

					if (nRZOffen == SalNumber.Null) 
					{
						if (hSqlLlDruck.FetchNext(ref nFetch)) 
						{
							if (nFetch == Sys.FETCH_Ok) 
							{
								if (strReset != Sal.NumberToStrX(App.frmMain.nRZNr, 0)) 
								{
									if (!(locals.bFirst)) 
									{
										bLlPrintResetProjectState = true;
									}
									// 01.02.11 Ä533
									if (App.frmMain.dtRZPauseBis != SalDateTime.Null) 
									{
										dtRZDat = App.frmMain.dtRZPauseBis;
									}
									else
									{
										// 30.03.21 Ä1953 + , rzopdm, rzaktivdat
										// If frmMain.dtBuchDat = DATETIME_Null
										// Set dtRZDat = SalDateCurrent(  )
										// Else
										// Set dtRZDat = frmMain.dtBuchDat
										dtRZDat = App.frmMain.dtErfDat;
										if (App.frmMain.nDMOP != SalNumber.Null) 
										{
											nRZOffen = App.frmMain.nDMOP;
										}
									}
									strReset = Sal.NumberToStrX(App.frmMain.nRZNr, 0);
								}
								// Call PalFetchNextDetail()
								// 01.12.20 F4661
								// If frmMain.nRZTag <= SalDateDay(dtRZDat)
								// Set dtRZDat = dtRZDat + 30
								// Set dtRZDat = SalDateConstruct( SalDateYear(dtRZDat), SalDateMonth( dtRZDat ), frmMain.nRZTag, 0, 0, 0 )
								dtReferenz = App.frmMain.dtErfDat;
								if (App.frmMain.dtRZPauseBis > dtReferenz) 
								{
									dtReferenz = App.frmMain.dtRZPauseBis;
								}
								if (dtReferenz.Day() >= App.frmMain.nRZTag) 
								{
									if (dtReferenz.Month() == 12) 
									{
										dtReferenz = new SalDateTime(dtReferenz.Year() + 1, 1, App.frmMain.nRZTag, 0, 0, 0);
									}
									else
									{
										dtReferenz = new SalDateTime(dtReferenz.Year(), dtReferenz.Month() + 1, App.frmMain.nRZTag, 0, 0, 0);
									}
								}
								else
								{
									dtReferenz = new SalDateTime(dtReferenz.Year(), dtReferenz.Month(), App.frmMain.nRZTag, 0, 0, 0);
								}
								// Call axLL.LlDefineFieldExt( 'Beginn', PalDateToStrJJJJMMTT( dtReferenz ), LL_DATE_YYYYMMDD, nRet )
								dtRZDat = dtReferenz;


								nRZZins = (nRZOffen * App.frmMain.nRZZins * ((dtRZDat - SalDateTime.Current) / 365)) / 100;
								nRZTilgung = App.frmMain.nRZRate - nRZZins;
								nRZOffen2 = nRZOffen - nRZTilgung;
								App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);
								return true;
							}
							else
							{
								return false;
							}
						}
					}
					else
					{
						PalFetchNextDetail();
						return true;
					}
					// If nRZOffen > 0 And nRZOffen2 > 0
					// Else
					// Return FALSE
				}
				else if (strPBericht == "RaZa-Kündigung.crd" || strPBericht == "RaZa-KündInfoM.crd" || strPBericht == "RaZa-Kündigungsliste.lst" || strPBericht == "RaZa-Schlußbrief.crd" || strPBericht == "RaZa-MS5TAInfo.crd") 
				{
					while (Sal.TblFindNextRow(App.frmRaZa.tblPruef, ref nRow, 0, Sys.ROW_MarkDeleted)) 
					{
						Sal.TblSetFocusRow(App.frmRaZa.tblPruef, nRow);
						if (strPBericht != "RaZa-Schlußbrief.crd") 
						{
							// 08.12.15 Ä1293 + , MIN(rkmahnstufe)
							Int.SqlImmedSel(@"SELECT MIN(rkmahnstufe)
FROM rk
INTO :frmRaZa.nMinMS
WHERE rkkzzahl<2 AND rkrechnr<999990
AND rkarztnr*10000000000+rkhalternr*10000+rkrechnr IN (SELECT rzparztnr*10000000000+rzphalternr*10000+rzprechnr FROM rzp WHERE rzpnr = :frmRaZa.tblPruef.colnRZNr) ");
							if (App.frmRaZa.nMinMS == SalNumber.Null) 
							{
								App.frmRaZa.nMinMS = 9;
							}

							// 06.04.16 Ä1294 SE/KN
							if (strPBericht == "RaZa-MS5TAInfo.crd") 
							{
								App.frmRaZa.nAussenst = App.frmRaZa.tblPruef.colnEUR2.Number;
							}
							else
							{
								Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
FROM rk
INTO :frmRaZa.nAussenst
WHERE rkkzzahl<2
AND rkarztnr*10000000000+rkhalternr*10000+rkrechnr IN (SELECT rzparztnr*10000000000+rzphalternr*10000+rzprechnr FROM rzp WHERE rzpnr = :frmRaZa.tblPruef.colnRZNr) ");
							}
							// 29.10.10 OTF781
							Int.SqlImmedSel(@"SELECT sum(hbdm)
		INTO :dlgLlDruck.nRZOffen
		FROM hb
		WHERE hbrznr = :frmRaZa.tblPruef.colnRZNr");
							App.frmRaZa.nAussenst = App.frmRaZa.nAussenst - nRZOffen; // nRZOffen ist negativ, daher abziehen
							// 07.11.16 Ä1439
							Int.SqlImmedSel(@"SELECT anr2
		INTO :dlgLlDruck.nArztNr2
		FROM A
		WHERE a.aarztnr = :frmRaZa.tblPruef.colnArztNr");
							Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
FROM rk
INTO :frmRaZa.nAussenstGes
WHERE rkkzzahl<2 AND rkdeaktiv IS NULL
AND " + Int.PalArztNr("rk", App.frmRaZa.tblPruef.colnArztNr.Number, nArztNr2) + " AND rkhalternr = :frmRaZa.tblPruef.colnHalterNr");
							Int.SqlImmedSel(@"SELECT sum(hbdm)
		INTO :dlgLlDruck.nRZOffen2
		FROM hb
		WHERE " + Int.PalArztNr("hb", App.frmRaZa.tblPruef.colnArztNr.Number, nArztNr2) + " AND hbhalternr = :frmRaZa.tblPruef.colnHalterNr");
							App.frmRaZa.nAussenstGes = App.frmRaZa.nAussenstGes - nRZOffen2;
						}

						// 05.10.15 Ä1248
						// If strPBericht != 'RaZa-KündInfoM-MS4und5.crd' or frmRaZa.tblPruef.colsMS45 != ''

						// Set strSelect = 'SELECT rznr, rzarztnr, rzhalternr, rzzins, rzerfdat, rzrate, rztag, rzparztnr, rzphalternr, rzprechnr,
						// hti || hvn || \' \' || hnn, hname2, hstr, hland, hort,
						// sum(rkdmleis-rkzaleis+ rkdmarzn-rkzaarzn+ rkdmmahn-rkzamahn+ rkdmzins-rkzazins+ rkmbdmopl-rkmbzaopl)
						// INTO :frmMain.nRZNr, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRZZins, :frmMain.dtErfDat, :frmMain.nRZRate, :frmMain.nRZTag, :frmMain.nRZArztNr, :frmMain.nRZHalterNr, :frmMain.nRZRechNr,
						// :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHLand, :frmMain.strTHOrt,
						// :frmMain.nRZLeis
						// FROM rz, rzp, rk, h
						// WHERE rzarztnr = harztnr AND rzhalternr = hhalternr AND rznr = rzpnr
						// AND rzparztnr=rkarztnr AND rzphalternr=rkhalternr AND rzprechnr=rkrechnr ' || strPSpezial || '
						// GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15'
						Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hstr, hland, hort
INTO :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHLand, :frmMain.strTHOrt
FROM h WHERE harztnr = :frmRaZa.tblPruef.colnArztNr AND hhalternr = :frmRaZa.tblPruef.colnHalterNr");
						App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);
						// nach DefineCurrentRecord
						// Call SqlImmedSel('SELECT asvname1, asvname2, asvstr, asvort, anr2, asvland
						// 		INTO :dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.nArztNr2, :frmMain.strTALand
						// 		FROM A
						// 		WHERE a.aarztnr = :frmRaZa.tblPruef.colnArztNr')
						// 10.07.15 F2451	15.07.15 + and SalStrScan( strPBericht, '.lst' ) = -1
						if (!(locals.bFirst) && strPBericht.Scan(".lst") == -1) 
						{
							bLlPrintResetProjectState = true;
						}

						return true;
					}
					// Else
					return false;
				}
				else if (strPBericht == "RaZa-Aktivierung.crd") 
				{
					if (App.frmMain.bNoFetch) 
					{
						return false;
					}
					else
					{
						App.frmMain.bNoFetch = true;

						return true;
					}
				}
				else if (strPBericht == "Historie.lst") 
				{
					if (App.tblHistorie.FindNextRow(ref nRow, 0, 0)) 
					{
						App.tblHistorie.SetFocusRow(nRow);
						return true;
					}
					else
					{
						return false;
					}
				}
				// Else If strPBericht = 'PM-Kontrolle.lst'
				// While nFetch2 != FETCH_EOF
				// If SqlFetchNext(hSqlLlDruck2,nFetch2)
				// Call SqlImmed('UPDATE dk SET dkerldat = :dlgLlDruck.dtMin WHERE dkdatum = :frmMain.dtDatum ')
				// If nFetch2 = FETCH_Ok And (frmMain.nRechNr = nMin OR frmMain.nRechNr = nMax OR frmMain.nRechNr = SalNumberRound( (nMax-nMin) * .25 + nMin) OR frmMain.nRechNr = SalNumberRound( (nMax-nMin) * .75 + nMin))
				// Return TRUE
				// If nFetch2 = FETCH_EOF
				// If SqlFetchNext(hSqlLlDruck,nFetch)
				// If nFetch = FETCH_Ok
				// Set frmMain.strTHLand = PalPruefeLC(frmMain.strTHLand,0)
				// Call SqlImmed('UPDATE dk SET dkerldat = :dlgLlDruck.dtMin WHERE dkdatum = :frmMain.dtDatum ')
				// Set strSelect = 'SELECT dkdatum, dkdruck, dkuser, dkhalternr, dkrechnr, dkname, dkort, dkland
				// INTO :frmMain.dtDatum, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.strTHN1, :frmMain.strTHOrt, :frmMain.strTHLand
				// FROM dk
				// WHERE (dkerldat IS NULL Or dkerldat ='1900-1-1') AND dkarztnr = :frmMain.nTANr  AND dkdruck LIKE \'Rechnung%\'
				// ORDER BY dkland, dkort'
				// If NOT SqlPrepare(hSqlLlDruck2,strSelect)
				// Return FALSE
				// Else
				// If NOT SqlExecute(hSqlLlDruck2)
				// Return FALSE
				// Else
				// If SqlFetchNext(hSqlLlDruck2,nFetch2)
				// If nFetch2 = FETCH_Ok
				// Call SqlImmed('UPDATE dk SET dkerldat = :dlgLlDruck.dtMin WHERE dkdatum = :frmMain.dtDatum ')
				// Return TRUE
				// Else
				// Return FALSE
				// Else
				// Return FALSE
				else if (strPBericht == "Scheckliste.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							Int.SqlImmed("UPDATE dl SET dlerldat = :dlgLlDruck.dtMinScheck WHERE dlerfdat = :frmMain.dtDatum ");
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "KA-Kontroll1.lst") 
				{
					while (Sal.TblFindNextRow(App.frmKA.tblKA, ref nRow, 0, 0)) 
					{
						if (Sal.TblSetFocusRow(App.frmKA.tblKA, nRow)) 
						{
						}
						if (App.frmKA.tblKA.colAktiv.Number == 1) 
						{
							return true;
						}
					}
					return false;
					// Else
					// Return FALSE
				}
				else if (strPBericht == "KA-Kontroll2.lst") 
				{
					while (Sal.TblFindNextRow(App.frmKA.tblKA2, ref nRow, 0, 0)) 
					{
						if (Sal.TblSetFocusRow(App.frmKA.tblKA2, nRow)) 
						{
						}
						return true;
					}
					return false;
					// Else
					// Return FALSE
				}
				else if (strPBericht == "KA-Kontroll3.lst") 
				{
					while (Sal.TblFindNextRow(App.frmKA.tblKA3, ref nRow, 0, 0)) 
					{
						if (Sal.TblSetFocusRow(App.frmKA.tblKA3, nRow)) 
						{
						}
						return true;
					}
					return false;
					// Else
					// Return FALSE
				}
				else if (strPBericht == "KA-Kontroll4.lst") 
				{
					while (Sal.TblFindNextRow(App.frmKA.tblKA4, ref nRow, 0, 0)) 
					{
						if (Sal.TblSetFocusRow(App.frmKA.tblKA4, nRow)) 
						{
						}
						return true;
					}
					return false;
				}
				else if (strPBericht == "Logbuch.lst") 
				{
					if (Sal.TblFindNextRow(App.frmLogbuch.tblLogbuch, ref nRow, 0, 0)) 
					{
						Sal.TblSetFocusRow(App.frmLogbuch.tblLogbuch, nRow);
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "Zettel.lst" || strPBericht == "ZettelListeErl.lst") 
				{
					if (Sal.TblFindNextRow(App.frmZettel.tblZettel, ref nRow, Sys.ROW_Selected, 0)) 
					{
						Sal.TblSetFocusRow(App.frmZettel.tblZettel, nRow);
						// 01.10.12 F1414
						App.frmMain.strTHN1 = "";
						App.frmMain.strTHN2 = "";
						App.frmMain.strTHStr = "";
						App.frmMain.strTHOrt = "";
						App.frmMain.strTHLand = "";

						if (App.frmZettel.tblZettel.colnHalterNr.Number != 0 && App.frmZettel.tblZettel.colnHalterNr.Number != Sys.NUMBER_Null) 
						{
							Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
		INTO :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand
		FROM H
		WHERE h.harztnr = :frmZettel.tblZettel.colnArztNr AND h.hhalternr = :frmZettel.tblZettel.colnHalterNr AND hdeaktiv IS NULL");
							// 10.04.06 Ländercodes
							App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);
						}
						// 27.06.16 Ä 1376
						if ((strTargetFormat == "PRN" || bePost) && !(bArchiv) && strPBericht == "ZettelListeErl.lst") 
						{
							Int.SqlImmed("UPDATE z SET zerledigt = \'J\' WHERE ROWID = :frmZettel.tblZettel.colsROWID");
						}

						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "TKSuch.lst") 
				{
					// 05.01.18
					locals.nDummy = 0;
					if (strPSpezial == "SE") 
					{
						locals.nDummy = Sys.ROW_Selected;
					}
					if (Sal.TblFindNextRow(App.frmTKSuch.tblTK, ref nRow, locals.nDummy, 0)) 
					{
						Sal.TblSetFocusRow(App.frmTKSuch.tblTK, nRow);
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "TSK-InfoH.crd")  // 21.06.11 Ä583
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							dtMin = SalDateTime.Current + 28;
							plsMemo = "Standardschreiben BVD virämisch";
							// 13.05.14 F2027
							App.frmMain.nTHNr = Int.PalCheckNULL(App.frmMain.nTHNr);

							Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :strBNZei, :frmMain.nTANr, :frmMain.nTHNr, 0,
:dlgLlDruck.plsMemo , SYSDATE, :dlgLlDruck.dtMin, 'N', 'BR', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "TSK-Erinnerungen.lst") 
				{
					// !
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							if (Sal.NumberToStrX(App.frmMain.nTANr, 0) != strReset) 
							{
								App.frmMain.nTANrAlt = App.frmMain.nTANr;
								// 17.04.08
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								strReset = Sal.NumberToStrX(App.frmMain.nTANr, 0);
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "BEZ-Buchungen.lst") 
				{
					if (Sal.TblFindNextRow(App.frmBEZDaten.tblBEZD, ref nRow, 0, 0)) 
					{
						Sal.TblSetFocusRow(App.frmBEZDaten.tblBEZD, nRow);
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "InfoZahlungen.lst") 
				{
					if (Sal.TblFindNextRow(App.frmRgSuchen.tblHZahlungen, ref nRow, Sys.ROW_Selected, 0)) 
					{
						Sal.TblSetFocusRow(App.frmRgSuchen.tblHZahlungen, nRow);
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "DublPruef.lst")  // 20.08.12 F1394
				{
					if (Sal.TblFindNextRow(App.frmDublPruef.tblDubl, ref nRow, 0, 0)) 
					{
						Sal.TblSetFocusRow(App.frmDublPruef.tblDubl, nRow);
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "DublPruef2.lst")  // 20.08.12 F1394
				{
					if (Sal.TblFindNextRow(App.frmDublPruef2.tblDubl, ref nRow, 0, 0)) 
					{
						Sal.TblSetFocusRow(App.frmDublPruef2.tblDubl, nRow);
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "VKZ-Mg.lst")  // 05.09.12 Ä814
				{
					if (Sal.TblFindNextRow(App.frmVKZ.tblMahn, ref nRow, 0, 0)) 
					{
						Sal.TblSetFocusRow(App.frmVKZ.tblMahn, nRow);
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "VKZ-MBaus.lst")  // 05.09.12 Ä814
				{
					if (Sal.TblFindNextRow(App.frmVKZ.tblMBAus, ref nRow, 0, 0)) 
					{
						Sal.TblSetFocusRow(App.frmVKZ.tblMBAus, nRow);
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "VKZ-Insol.lst")  // 05.09.12 Ä814
				{
					if (Sal.TblFindNextRow(App.frmVKZ.tblInsol, ref nRow, 0, 0)) 
					{
						Sal.TblSetFocusRow(App.frmVKZ.tblInsol, nRow);
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "VKZ-RaZa.lst")  // 05.09.12 Ä814
				{
					if (Sal.TblFindNextRow(App.frmVKZ.tblRaZa, ref nRow, 0, 0)) 
					{
						Sal.TblSetFocusRow(App.frmVKZ.tblRaZa, nRow);
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "VKZ-RgInfo.lst")  // 18.09.12 Ä820
				{
					if (Sal.TblFindNextRow(App.frmVKZ.tblRgInfo, ref nRow, 0, 0)) 
					{
						Sal.TblSetFocusRow(App.frmVKZ.tblRgInfo, nRow);
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "VKZ-RgInfoa.lst")  // 07.08.14 F2108
				{
					if (Sal.TblFindNextRow(App.frmVKZ.tblRgInfoa, ref nRow, 0, 0)) 
					{
						Sal.TblSetFocusRow(App.frmVKZ.tblRgInfoa, nRow);
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "StatAbrg.lst")  // 10.12.12 Ä854
				{
					if (Sal.TblFindNextRow(App.frmStatAbrg.tblAbr, ref nRow, 0, 0)) 
					{
						Sal.TblSetFocusRow(App.frmStatAbrg.tblAbr, nRow);
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "Serienbrief.crd") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							if (!(locals.bFirst)) 
							{
								bLlPrintResetProjectState = true;
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "BuchAbgleich.lst") 
				{
					if (Sal.TblFindNextRow(App.frmBuchAbgleich.tblDat, ref nRow, 0, 0)) 
					{
						Sal.TblSetFocusRow(App.frmBuchAbgleich.tblDat, nRow);
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "SerienbriefH.crd") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							if (!(locals.bFirst)) 
							{
								bLlPrintResetProjectState = true;
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "BriefM-MwSt-0.lst") 
				{
					if (Sal.TblFindNextRow(App.frmAbrBearb.tblAbrPosi, ref nRow, Sys.ROW_Selected, 0)) 
					{
						Sal.TblSetFocusRow(App.frmAbrBearb.tblAbrPosi, nRow);
						return true;
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "RP-Sperrinfo.lst") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							if (Sal.NumberToStrX(App.frmRechProtneu.nTANr, 0) != strReset) 
							{
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								// 21.04.08
								Int.SqlImmedSel(@"SELECT asvname1, asvname2, asvstr, asvort, asvland
		INTO :dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :frmMain.strTALand
		FROM A
		WHERE a.aarztnr = :frmRechProtneu.nTANr");

								strReset = Sal.NumberToStrX(App.frmRechProtneu.nTANr, 0);
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "BEZ-RetoureHalter.crd" || strPBericht == "BEZ-RetoureHalterKL.crd")  // 31.10.16 Ä1436
				{
					if (App.frmMain.bNoFetch) 
					{
						return false;
					}
					else
					{
						App.frmMain.bNoFetch = true;
						if (App.dlgBEZRetoure.strTHLand != "") 
						{
							if (App.dlgBEZRetoure.strTHLand.Length <= 2) 
							{
								App.dlgBEZRetoure.strTHLand = Int.PalPruefeLC(App.dlgBEZRetoure.strTHLand, 0);
							}
						}

						return true;
					}
				}
				else if (strPBericht == "EWA-Liste.lst")  // 28.11.16 Ä1437
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							Int.SqlImmed("UPDATE ewa SET ewaerldat = '1900-1-1' WHERE ROWID = :frmMain.strROWID");
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Anweisungsbelege.lst")  // 05.12.17 Ä1428
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							if ((strTargetFormat == "PRN" || bePost) && !(bArchiv)) 
							{
								Int.SqlImmed("UPDATE ab SET abdrudat = '1900-1-1' WHERE aberfdat = :dlgLlDruck.dtErfDat");
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Altersstruktur.lst")  // 26.04.19 Ä1648
				{
					if (App.frmMain.bNoFetch) 
					{
						// Call axLL.LlDefineFieldExt( 'Alter', SalNumberToStrX(nAlter,0), LL_NUMERIC, nRet )
						// Call axLL.LlDefineFieldExt( 'Geschlecht', strGeschlecht, LL_TEXT, nRet )
						// Call axLL.LlDefineFieldExt( 'Umsatz', SalNumberToStrX( nRPDM, 2), LL_NUMERIC, nRet )
						Int.SqlImmedSel(@"
select count(distinct akarztnr), sum(akrechsumm)
INTO :dlgLlDruck.nAnzahl, :dlgLlDruck.nRPDM
from ak, a
where aarztnr=akarztnr AND aaustritt IS NULL AND agestorben IS NULL
and aktyp='RG' and aktypdetail='UebOP'
and akdatum BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis
and akarztnr not in (select distinct aparztnr from ap)");
						nAlter = -2;
						strGeschlecht = "M";
						nStatAnz = nStatAnz + nAnzahl;
						nStatUms = nStatUms + nRPDM;
						App.frmMain.bNoFetch = false;
						return true;
					}
					else
					{
						if (hSqlLlDruck.FetchNext(ref nFetch)) 
						{
							if (nFetch == Sys.FETCH_Ok) 
							{
								return true;
							}
							else
							{
								return false;
							}
						}
					}
				}
				else if (strPBericht == "DYMO-Alternative.crd" || strPBericht == "DYMO-AlternativeBarcode.crd") 
				{
					if (App.frmMain.bNoFetch) 
					{
						return false;
					}
					else
					{
						App.frmMain.bNoFetch = true;

						return true;
					}
				}
				else if (strPBericht == "Saldenmitteilung.crd") 
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						Int.SqlImmedSel(@"SELECT
sum( tksoll-tkhaben) from tk into :dlgLlDruck.nDM where tkarztnr = :frmMain.nTANr");
						App.frmMain.nVorSoll = App.frmMain.nVorSoll + nDM;
						if (nFetch == Sys.FETCH_Ok) 
						{
							if (!(locals.bFirst)) 
							{
								bLlPrintResetProjectState = true;
							}
							return true;
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "Pharmaliste.lst")  // 09.12.21 Ä1984
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							if (Sal.NumberToStrX(App.frmMain.nTANr, 0) + Int.PalDateToStrJJJJMMTThhmmsst(dtDDErfDat) != strReset) 
							{
								// 24.09.21 F4812 strPSpezial = 'Vormonate' -> SalStrLeftX( strPSpezial, 9 ) = 'Vormonate'
								if (strPSpezial.Left(9) == "Vormonate") 
								{
									Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, aland,  akzpraxart, asvname1, asvname2, asvstr, asvort, asvland, austid, austid2
		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
		:frmMain.nKZPraxArt,
		:dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.strLand, :frmMain.strTAUStID, :frmMain.strTAUStID2
		FROM A
		WHERE a.aarztnr = :frmMain.nTANr");
									// Call SqlImmedSel('SELECT vodatum, vovorrech, vovorsoll, vovorhaben, vovorvst, vovormwst, voop
									// 		INTO :frmMain.dtCurrentDate, :frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
									// 		:frmMain.nVorVSt, :frmMain.nVorMwSt, :frmMain.nAussenst
									// 		FROM vo
									// 		WHERE voarztnr = :frmMain.nTANr
									// 		AND vodatum = :dlgLlDruck.dt1')
								}
								else
								{
									Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, aland,  akzpraxart, asvname1, asvname2, asvstr, asvort,  asvland,
		avorrech, avorsoll, avorhaben, avorvst, avormwst, austid, austid2
		INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
		:frmMain.nKZPraxArt,
		:dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.strLand,
		:frmMain.nVorRech, :frmMain.nVorSoll, :frmMain.nVorHaben,
		:frmMain.nVorVSt, :frmMain.nVorMwSt, :frmMain.strTAUStID, :frmMain.strTAUStID2
		FROM A
		WHERE a.aarztnr = :frmMain.nTANr");
									// Call SqlImmedSel('SELECT
									// sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
									// INTO :frmMain.nAussenst FROM rk WHERE rkarztnr = :frmMain.nTANr
									// AND rkkzzahl <2 AND rkdeaktiv IS NULL ')
									App.frmMain.dtCurrentDate = SalDateTime.Current;
								}
								App.frmMain.nTANrAlt = App.frmMain.nTANr;

								// 17.04.08
								if (!(locals.bFirst)) 
								{
									bLlPrintResetProjectState = true;
								}
								strReset = Sal.NumberToStrX(App.frmMain.nTANr, 0) + Int.PalDateToStrJJJJMMTThhmmsst(dtDDErfDat);
							}
							App.frmMain.nReverse = 0;
							App.frmMain.strTHN1 = "";
							App.frmMain.strTHN2 = "";
							App.frmMain.strTHStr = "";
							App.frmMain.strTHOrt = "";
							App.frmMain.strTHLand = "";
							if (App.frmMain.nDMZaL != 0.00m && App.frmMain.nDMZaA != 0.00m) 
							{
								App.frmMain.bNoFetch = true;
								App.frmMain.nDMHaben = App.frmMain.nDMZaL;
								App.frmMain.strLA = Var.strL;
							}
							else
							{
								App.frmMain.bNoFetch = false;
								App.frmMain.nDMHaben = App.frmMain.nDMZaL + App.frmMain.nDMZaA;
								if (App.frmMain.nDMZaL != 0.00m) 
								{
									App.frmMain.strLA = Var.strL;
								}
								else if (App.frmMain.nDMZaL == 0.00m && App.frmMain.nDMZaA == 0.00m)  // 09.10.09 OTF323
								{
									// 09.11.10 OTF790
									// Set strLA = ''
									// 09.08.11 F989 + Or nKZPraxArt = 0
									if (App.frmMain.nKZPraxArt == 1 || App.frmMain.nKZPraxArt == 0) 
									{
										App.frmMain.strLA = Var.strL;
									}
									else if (App.frmMain.nKZPraxArt == 2) 
									{
										App.frmMain.strLA = Var.strA;
									}
								}
								else
								{
									App.frmMain.strLA = Var.strA;
								}
							}
							if (App.frmMain.nSA != 1) 
							{
								App.frmMain.strLA = "";
							}
							if (App.frmMain.nSA == 2) 
							{
								App.frmMain.nDMUeberw = App.frmMain.nDMSoll - App.frmMain.nDMHaben;
							}
							else
							{
								App.frmMain.nDMUeberw = 0.00m;
							}
							if (App.frmMain.nSA == 1) 
							{
								// Set nDMMwSt = nDMHaben + nDMMahn -
								// SalNumberRound((nDMHaben+nDMMahn) * 100 / (1 + (nProz/100))) /100
								App.frmMain.nDMHaben = App.frmMain.nDMHaben + App.frmMain.nDMMahn + App.frmMain.nDMZins;
							}
							else
							{
								App.frmMain.nDMSoll = App.frmMain.nDMSoll + App.frmMain.nDMPorto;
							}
							if (App.frmMain.nDMVorst > 0.00m) 
							{
								App.frmMain.nDMmitVorstV = App.frmMain.nDMVorst;
								App.frmMain.nDMmitVorstS = App.frmMain.nDMSoll - App.frmMain.nDMHaben;
							}
							else
							{
								App.frmMain.nDMmitVorstV = 0.00m;
								App.frmMain.nDMmitVorstS = 0.00m;
							}
							if (App.frmMain.nRechNr >= 999990) 
							{
								// 30.01.01 kommentiert
								// Set bNoFetch = FALSE
								// Set nDMHaben = nDMZaL + nDMZaA

								App.frmMain.nDMMahn = 0;
								App.frmMain.strLA = "MB";
								// If nDMZaL != 0.00
								// Set frmMain.strLA = frmMain.strL
								// Else
								// Set frmMain.strLA = frmMain.strA
							}

							if (App.frmMain.nKZPraxArt == 1) 
							{
								if (App.frmMain.strLA == Var.strA) 
								{
									App.frmMain.strLA = Var.strL;
								}
							}
							else if (App.frmMain.nKZPraxArt == 2) 
							{
								if (App.frmMain.strLA == Var.strL) 
								{
									App.frmMain.strLA = Var.strA;
								}
							}
							// Summenblatt-Ermittlung
							// Call frmMain.PalSummenblatt()
							return true;
						}
						else
						{
							return false;
						}
					}
					else
					{
						return false;
					}
				}
				else if (strPBericht == "FordInsol.crd")  // 13.12.21 Ä1979
				{
					App.frmMBKalender.nLfdZins = 0;
					if (strPSpezial == "RI") 
					{
						Int.SqlImmedSel(@"SELECT SUM(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn), SUM(rkdmmahn-rkzamahn), SUM(rkdmzins-rkzazins)
INTO :frmMBKEinzeldruck.nHF, :frmMBKEinzeldruck.nMG, :frmMBKEinzeldruck.nZI
FROM rk WHERE " + Int.PalArztNr("rk", App.frmMBKEinzeldruck.nA1, App.frmMBKEinzeldruck.nArztNr2) + @" AND rkhalternr = :frmMBKEinzeldruck.nHalterNr AND rkdeaktiv IS NULL AND rkkzzahl < 2
AND (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)<>0");
					}
					else
					{
						if (Int.PalFA(App.frmMBKalender.nProzNr, App.frmMBKalender.nArztNr, App.frmMBKalender.nHalterNr, App.frmMBKalender.strZusatzkosten, App.frmMBKalender.nZusatzkosten, App.frmMBKEinzeldruck.dfbisDatum.DateTime, false, true, true)) 
						{
							Int.SqlImmedSel(@"SELECT sum(fazinsdm) FROM fa INTO :frmMBKalender.nLfdZins WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser
AND fatext NOT LIKE '%Kosten €%' AND fatext NOT LIKE '%vorgerichtliche Zinsen%'");
							// 29.03.16
							Int.SqlImmedSel(@"SELECT sum(fazinsdm), sum(fadmhf), sum(fadmko), sum(faunvzdm), sum(faunvzdmtit)
FROM fa
INTO :frmMBKalender.nLfdZinsAlles, :frmMBKalender.nHFAlles, :frmMBKalender.nVZAlles, :frmMBKalender.nUVZAlles, :frmMBKalender.nUVZTit WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser");

							Int.SqlImmedSel(@"SELECT sum(fazinsdm) FROM fa INTO :frmMBKalender.nVorgZinsen WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser AND fatext LIKE
'%vorgerichtliche Zinsen%'");

							Int.SqlImmedSel(@"SELECT sum(fazinsdm) FROM fa INTO :frmMBKalender.nLfdZinsVZ WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser AND fatext LIKE
'%Kosten €%'");
						}
					}
					if (App.frmMain.bNoFetch) 
					{
						return false;
					}
					else
					{
						App.frmMain.bNoFetch = true;

						return true;
					}
				}
				else if (strPBericht == "Brief BitteUmAusgleich.crd") 
				{
					if (Sal.TblFindNextRow(App.frmNegativerSaldo.tblNeg, ref nRow, Sys.ROW_UnusedFlag1, 0)) 
					{
						Sal.TblSetFocusRow(App.frmNegativerSaldo.tblNeg, nRow);
						// If frmNegativerSaldo.tblNeg.colBrief = 1
						return true;
					}
					else
					{
						return false;
					}
				}
				// Else If strPBericht = 'Halterkonto.lst'
				// 31.07.23 Ä2123
				// If SalTblFindNextRow( frmRgSuchen.tblHaBu, nRow, 0, 0)
				// Call SalTblSetFocusRow( frmRgSuchen.tblHaBu, nRow )
				// Call SqlImmedSel('SELECT hti, hvn, hnn, hname2, hstr, hort
				// 			INTO :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt
				// 			FROM h
				// 			WHERE harztnr = :frmRgSuchen.tblHaBu.colArzt AND hhalternr = :frmRgSuchen.tblHaBu.colHalter')
				// Set frmMain.strTHN1 = frmMain.strTHTi || frmMain.strTHVN || ' ' || frmMain.strTHNN
				// Return TRUE
				// Else
				// Return FALSE
				else if (strPBericht == "TSK-Beihilfen-Erinnerung.lst") 
				{
					while (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							// 03.11.23
							Int.SqlIstDa("FROM tsk WHERE tskbeihilfeguid = :frmMain.strBeihilfeGUID", ref Var.bOK);
							if (!(Var.bOK)) 
							{
								if (Sal.NumberToStrX(App.frmMain.nTANr, 0) != strReset) 
								{
									Int.SqlImmedSel(@"SELECT aarztnr, aname1, aname2, astr, aort, aland,
			abank, ablz, akonto, aeintr, atelpraxis, atelhandy, atelprivat, atelfax, aemail
			INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
			:frmMain.strBank, :frmMain.strBLZ, :frmMain.strKonto, :frmMain.dtEintritt,
			:frmMain.strTATelPraxis, :frmMain.strTATelHandy, :frmMain.strTATelPrivat, :frmMain.strTAFax, :frmMain.strTAEMail
			FROM a
			WHERE aarztnr = :frmMain.nTANr");
									if (!(locals.bFirst)) 
									{
										bLlPrintResetProjectState = true;
									}
									strReset = Sal.NumberToStrX(App.frmMain.nTANr, 0);
								}
								return true;
							}
							else
							{
								Sal.MessageBeep(0);
							}
						}
						else
						{
							return false;
						}
					}
				}
				else if (strPBericht == "TSK-Waisen Rückzahlung.lst") 
				{
					if (Sal.TblFindNextRow(App.frmTSKWaisen.tblWaisen, ref nRow, 0, 0)) 
					{
						Sal.TblSetFocusRow(App.frmTSKWaisen.tblWaisen, nRow);
						if (Sal.NumberToStrX(App.frmTSKWaisen.tblWaisen.colArztNr.Number, 0) != strReset) 
						{
							if (!(locals.bFirst)) 
							{
								bLlPrintResetProjectState = true;
							}
							Int.SqlImmedSel(@"SELECT aarztnr, aname1, aname2, astr, aort, aland,  akzpraxart, asvname1, asvname2, asvstr, asvort,  asvland
		INTO :frmMain.nTANr, :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.strTALand,
		:frmMain.nKZPraxArt,
		:dlgLlDruck.strN1, :dlgLlDruck.strN2, :dlgLlDruck.strS, :dlgLlDruck.strO, :dlgLlDruck.strLand
		FROM A
		WHERE a.aarztnr = :frmTSKWaisen.tblWaisen.colArztNr");
							strReset = Sal.NumberToStrX(App.frmTSKWaisen.tblWaisen.colArztNr.Number, 0);
						}
						return true;
					}
					else
					{
						return false;
					}
				}
				else
				{
					if (hSqlLlDruck.FetchNext(ref nFetch)) 
					{
						if (nFetch == Sys.FETCH_Ok) 
						{
							return true;
						}
						else
						{
							return false;
						}
					}
				}

				return false;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalFetchNextDetail()
		{
			#region Local Variables
			SalBoolean bPExists = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				if (strPBericht == "PRs je Benutzer.lst") 
				{
					// If frmMain.strZust = 'TO'683
					// F4638 J und V raus: OR @UPPER(@LEFT(amatch,1))=\'J\' OR @UPPER(@LEFT(amatch,1))=\'V\'
					// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn)  INTO :frmMain.nDMRech
					// FROM pr,prd,a,rk WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and ((@UPPER(@LEFT(amatch,1))>=\'N\' and @UPPER(@LEFT(amatch,1))<=\'R\')
					// OR @UPPER(@LEFT(amatch,1))=\'A\' )
					// AND prnr=prdnr AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr')
					// 01.11.07 A113
					// Call SqlImmedSel('SELECT sum(rkdmmahn+rkdmzins)  INTO :frmMain.nDMMahn
					// FROM pr,prd,a,rk WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and ((@UPPER(@LEFT(amatch,1))>=\'N\' and @UPPER(@LEFT(amatch,1))<=\'R\')
					//  OR @UPPER(@LEFT(amatch,1))=\'A\')
					// AND prnr=prdnr AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr')
					// 09.11.07
					// Call SqlImmedSel('SELECT sum(prdma+prdmb+prdmc)  INTO :frmMain.nDMZins
					// FROM pr,a WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and ((@UPPER(@LEFT(amatch,1))>=\'N\' and @UPPER(@LEFT(amatch,1))<=\'R\')
					//  OR @UPPER(@LEFT(amatch,1))=\'A\') ')
					// Call SqlImmedSel('SELECT sum(zadm)   INTO :frmMain.nDMAusbuch
					// FROM pr,a,za WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and ((@UPPER(@LEFT(amatch,1))>=\'N\' and @UPPER(@LEFT(amatch,1))<=\'R\')
					//  OR @UPPER(@LEFT(amatch,1))=\'A\')
					// AND prnr=zaproznr AND zakz>=4')
					// Call SqlImmedSel('SELECT sum(zadm)   INTO :frmMain.nDMZahl
					// FROM pr,a,za WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and ((@UPPER(@LEFT(amatch,1))>=\'N\' and @UPPER(@LEFT(amatch,1))<=\'R\')
					//  OR @UPPER(@LEFT(amatch,1))=\'A\')
					// AND prnr=zaproznr AND zakz<4')
					// 11.10.16 F2774
					// Call SqlImmedSel('SELECT sum(akdm)  INTO :frmMain.nMahnEUR
					// FROM ak,pr,a WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prnr=akproznr AND akproznr is not null AND prarztnr=aarztnr and ((@UPPER(@LEFT(amatch,1))>=\'N\' and @UPPER(@LEFT(amatch,1))<=\'R\')
					//  OR @UPPER(@LEFT(amatch,1))=\'A\')')
					// 28.09.20 Ä1899
					// Call SqlImmedSel('SELECT count(distinct prnr) INTO :frmMain.nMahnOffen
					// FROM pr,a,ak WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr AND prnr=akproznr AND akproznr is not null AND prarztnr=aarztnr and ((@UPPER(@LEFT(amatch,1))>=\'N\' and @UPPER(@LEFT(amatch,1))<=\'R\')
					//  OR @UPPER(@LEFT(amatch,1))=\'A\')
					// AND akproznr=prnr and @isna(prerledigt) =1 and akdatum<SYSDATE - 3 YEARS')
					// Else If frmMain.strZust = 'KO'
					// F4638 J und V rein von KN: OR @UPPER(@LEFT(amatch,1))=\'J\' OR @UPPER(@LEFT(amatch,1))=\'V\'
					// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn)  INTO :frmMain.nDMRech
					// FROM pr,prd,a,rk WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) BETWEEN \'B\' AND \'F\' OR @UPPER(@LEFT(amatch,1))=\'Z\' OR @UPPER(@LEFT(amatch,1))=\'J\' OR @UPPER(@LEFT(amatch,1))=\'V\')
					// AND prnr=prdnr AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr')
					// 01.11.07 A113
					// Call SqlImmedSel('SELECT sum(rkdmmahn+rkdmzins)  INTO :frmMain.nDMMahn
					// FROM pr,prd,a,rk WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) BETWEEN \'B\' AND \'F\' OR @UPPER(@LEFT(amatch,1))=\'Z\' OR @UPPER(@LEFT(amatch,1))=\'J\' OR @UPPER(@LEFT(amatch,1))=\'V\')
					// AND prnr=prdnr AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr')
					// 09.11.07
					// Call SqlImmedSel('SELECT sum(prdma+prdmb+prdmc)  INTO :frmMain.nDMZins
					// FROM pr,a WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) BETWEEN \'B\' AND \'F\' OR @UPPER(@LEFT(amatch,1))=\'Z\' OR @UPPER(@LEFT(amatch,1))=\'J\' OR @UPPER(@LEFT(amatch,1))=\'V\')  ')
					// Call SqlImmedSel('SELECT sum(zadm)   INTO :frmMain.nDMAusbuch
					// FROM pr,a,za WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) BETWEEN \'B\' AND \'F\' OR @UPPER(@LEFT(amatch,1))=\'Z\' OR @UPPER(@LEFT(amatch,1))=\'J\' OR @UPPER(@LEFT(amatch,1))=\'V\')
					// AND prnr=zaproznr AND zakz>=4')
					// Call SqlImmedSel('SELECT sum(zadm)   INTO :frmMain.nDMZahl
					// FROM pr,a,za WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) BETWEEN \'B\' AND \'F\' OR @UPPER(@LEFT(amatch,1))=\'Z\' OR @UPPER(@LEFT(amatch,1))=\'J\' OR @UPPER(@LEFT(amatch,1))=\'V\')
					// AND prnr=zaproznr AND zakz<4')
					// 11.10.16 F2774
					// Call SqlImmedSel('SELECT sum(akdm)  INTO :frmMain.nMahnEUR
					// FROM ak,pr,a WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prnr=akproznr AND akproznr is not null AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) BETWEEN \'B\' AND \'F\' OR @UPPER(@LEFT(amatch,1))=\'Z\' OR @UPPER(@LEFT(amatch,1))=\'J\'
					// OR @UPPER(@LEFT(amatch,1))=\'V\')')
					// 28.09.20 Ä1899
					// Call SqlImmedSel('SELECT count(distinct prnr) INTO :frmMain.nMahnOffen
					// FROM pr,a,ak WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr AND prnr=akproznr AND akproznr is not null AND prarztnr=aarztnr and
					// (@UPPER(@LEFT(amatch,1)) BETWEEN \'B\' AND \'F\' OR @UPPER(@LEFT(amatch,1))=\'Z\' OR @UPPER(@LEFT(amatch,1))=\'J\'
					// OR @UPPER(@LEFT(amatch,1))=\'V\')
					// AND akproznr=prnr and @isna(prerledigt) =1 and akdatum<SYSDATE - 3 YEARS')
					// Else If frmMain.strZust = 'SE'
					// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins), sum(zadm)   INTO :frmMain.nDMRech, :frmMain.nDMZahl
					// FROM pr,prd,a,za,rk WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and @UPPER(@LEFT(amatch,1)) >=\'H\' and
					// @UPPER(@LEFT(amatch,1))<=\'M\'
					// AND prnr=prdnr AND prnr=zaproznr(+) AND zakz(+)<4 AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr')
					// Call SqlImmedSel('SELECT sum(zadm)   INTO :frmMain.nDMAusbuch
					// FROM pr,prd,a,za,rk WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and @UPPER(@LEFT(amatch,1)) >=\'H\' and
					// @UPPER(@LEFT(amatch,1))<=\'M\'
					// AND prnr=prdnr AND prnr=zaproznr(+) AND zakz(+)>=4 AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr')
					// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn)  INTO :frmMain.nDMRech
					// FROM pr,prd,a,rk WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) >=\'G\' and @UPPER(@LEFT(amatch,1))<=\'I\')
					// AND prnr=prdnr AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr')
					// 01.11.07 A113
					// Call SqlImmedSel('SELECT sum(rkdmmahn+rkdmzins)  INTO :frmMain.nDMMahn
					// FROM pr,prd,a,rk WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) >=\'G\' and @UPPER(@LEFT(amatch,1))<=\'I\')
					// AND prnr=prdnr AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr')
					// 09.11.07
					// Call SqlImmedSel('SELECT sum(prdma+prdmb+prdmc)  INTO :frmMain.nDMZins
					// FROM pr,a WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) >=\'G\' and @UPPER(@LEFT(amatch,1))<=\'I\')  ')
					// Call SqlImmedSel('SELECT sum(zadm)   INTO :frmMain.nDMAusbuch
					// FROM pr,a,za WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) >=\'G\' and @UPPER(@LEFT(amatch,1))<=\'I\')
					// AND prnr=zaproznr AND zakz>=4')
					// Call SqlImmedSel('SELECT sum(zadm)   INTO :frmMain.nDMZahl
					// FROM pr,a,za WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) >=\'G\' and @UPPER(@LEFT(amatch,1))<=\'I\')
					// AND prnr=zaproznr AND zakz<4')
					// 11.10.16 F2774
					// Call SqlImmedSel('SELECT sum(akdm)  INTO :frmMain.nMahnEUR
					// FROM ak,pr,a WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prnr=akproznr AND akproznr is not null AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) >=\'G\' and @UPPER(@LEFT(amatch,1))<=\'I\')')
					// 28.09.20 Ä1899
					// Call SqlImmedSel('SELECT count(distinct prnr) INTO :frmMain.nMahnOffen
					// FROM pr,a,ak WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr AND prnr=akproznr AND akproznr is not null AND prarztnr=aarztnr and
					// (@UPPER(@LEFT(amatch,1)) >=\'G\' and @UPPER(@LEFT(amatch,1))<=\'I\')
					// AND akproznr=prnr and @isna(prerledigt) =1 and akdatum<SYSDATE - 3 YEARS')
					// ((@UPPER(@LEFT(amatch,1)) >=\'L\' and @UPPER(@LEFT(amatch,1))<=\'R\') or @UPPER(@LEFT(amatch,1))=\'F\')
					// Else If frmMain.strZust = 'YI'
					// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn)  INTO :frmMain.nDMRech
					// FROM pr,prd,a,rk WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) >=\'K\' and @UPPER(@LEFT(amatch,1))<=\'M\')
					// AND prnr=prdnr AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr')
					// 01.11.07 A113
					// Call SqlImmedSel('SELECT sum(rkdmmahn+rkdmzins)  INTO :frmMain.nDMMahn
					// FROM pr,prd,a,rk WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) >=\'K\' and @UPPER(@LEFT(amatch,1))<=\'M\')
					// AND prnr=prdnr AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr')
					// 09.11.07
					// Call SqlImmedSel('SELECT sum(prdma+prdmb+prdmc)  INTO :frmMain.nDMZins
					// FROM pr,a WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) >=\'K\' and @UPPER(@LEFT(amatch,1))<=\'M\')  ')
					// Call SqlImmedSel('SELECT sum(zadm)   INTO :frmMain.nDMAusbuch
					// FROM pr,a,za WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) >=\'K\' and @UPPER(@LEFT(amatch,1))<=\'M\')
					// AND prnr=zaproznr AND zakz>=4')
					// Call SqlImmedSel('SELECT sum(zadm)   INTO :frmMain.nDMZahl
					// FROM pr,a,za WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) >=\'K\' and @UPPER(@LEFT(amatch,1))<=\'M\')
					// AND prnr=zaproznr AND zakz<4')
					// 11.10.16 F2774
					// Call SqlImmedSel('SELECT sum(akdm)  INTO :frmMain.nMahnEUR
					// FROM ak,pr,a WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prnr=akproznr AND akproznr is not null AND prarztnr=aarztnr and (@UPPER(@LEFT(amatch,1)) >=\'K\' and @UPPER(@LEFT(amatch,1))<=\'M\')')
					// 28.09.20 Ä1899
					// Call SqlImmedSel('SELECT count(distinct prnr) INTO :frmMain.nMahnOffen
					// FROM pr,a,ak WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr AND prnr=akproznr AND akproznr is not null AND prarztnr=aarztnr and
					// (@UPPER(@LEFT(amatch,1)) >=\'K\' and @UPPER(@LEFT(amatch,1))<=\'M\')
					// AND akproznr=prnr and @isna(prerledigt) =1 and akdatum<SYSDATE - 3 YEARS')
					// Else If frmMain.strZust = 'ZK'
					// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn)  INTO :frmMain.nDMRech
					// FROM pr,prd,a,rk WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and @UPPER(@LEFT(amatch,1)) BETWEEN \'S\' AND \'Y\' and @UPPER(@LEFT(amatch,1))<>\'V\'
					// AND prnr=prdnr AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr')
					// 01.11.07 A113
					// Call SqlImmedSel('SELECT sum(rkdmmahn+rkdmzins)  INTO :frmMain.nDMMahn
					// FROM pr,prd,a,rk WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and @UPPER(@LEFT(amatch,1)) BETWEEN \'S\' AND \'Y\' and @UPPER(@LEFT(amatch,1))<>\'V\'
					// AND prnr=prdnr AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr')
					// 09.11.07
					// Call SqlImmedSel('SELECT sum(prdma+prdmb+prdmc)  INTO :frmMain.nDMZins
					// FROM pr,a WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and @UPPER(@LEFT(amatch,1)) BETWEEN \'S\' AND \'Y\' and @UPPER(@LEFT(amatch,1))<>\'V\'')
					// Call SqlImmedSel('SELECT sum(zadm)   INTO :frmMain.nDMAusbuch
					// FROM pr,a,za WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and @UPPER(@LEFT(amatch,1)) BETWEEN \'S\' AND \'Y\' and @UPPER(@LEFT(amatch,1))<>\'V\'
					// AND prnr=zaproznr AND zakz>=4')
					// Call SqlImmedSel('SELECT sum(zadm)   INTO :frmMain.nDMZahl
					// FROM pr,a,za WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr and @UPPER(@LEFT(amatch,1)) BETWEEN \'S\' AND \'Y\' and @UPPER(@LEFT(amatch,1))<>\'V\'
					// AND prnr=zaproznr AND zakz<4')
					// 11.10.16 F2774
					// Call SqlImmedSel('SELECT sum(akdm)  INTO :frmMain.nMahnEUR
					// FROM ak,pr,a WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prnr=akproznr AND akproznr is not null AND prarztnr=aarztnr and @UPPER(@LEFT(amatch,1)) BETWEEN \'S\' AND \'Y\' and @UPPER(@LEFT(amatch,1))<>\'V\'')
					// 28.09.20 Ä1899
					// Call SqlImmedSel('SELECT count(distinct prnr) INTO :frmMain.nMahnOffen
					// FROM pr,a,ak WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr AND prnr=akproznr AND akproznr is not null AND prarztnr=aarztnr and
					// @UPPER(@LEFT(amatch,1)) BETWEEN \'S\' AND \'Y\' and @UPPER(@LEFT(amatch,1))<>\'V\'
					// AND akproznr=prnr and @isna(prerledigt) =1 and akdatum<SYSDATE - 3 YEARS')
					if (App.frmMain.strZust == "<alle>")  // 18.07.07 A113
					{
						// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins), sum(zadm)   INTO :frmMain.nDMRech, :frmMain.nDMZahl
						// FROM pr,prd,za,rk WHERE @year(prdatum)+1900 = :frmMain.nRechJahr
						// AND prnr=prdnr AND prnr=zaproznr(+) AND zakz(+)<4 AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr')
						// Call SqlImmedSel('SELECT sum(zadm)   INTO :frmMain.nDMAusbuch
						// FROM pr,prd,za,rk WHERE @year(prdatum)+1900 = :frmMain.nRechJahr
						// AND prnr=prdnr AND prnr=zaproznr(+) AND zakz(+)>=4 AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr')
						Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn)  INTO :frmMain.nDMRech
FROM pr,prd,a,rk WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr
AND prnr=prdnr AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr");
						// 01.11.07 A113
						Int.SqlImmedSel(@"SELECT sum(rkdmmahn+rkdmzins)  INTO :frmMain.nDMMahn
FROM pr,prd,a,rk WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr
AND prnr=prdnr AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr");
						// 09.11.07
						Int.SqlImmedSel(@"SELECT sum(prdma+prdmb+prdmc)  INTO :frmMain.nDMZins
FROM pr WHERE @year(prdatum)+1900 = :frmMain.nRechJahr");

						Int.SqlImmedSel(@"SELECT sum(zadm)   INTO :frmMain.nDMAusbuch
FROM pr,a,za WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr
AND prnr=zaproznr AND zakz>=4");
						Int.SqlImmedSel(@"SELECT sum(zadm)   INTO :frmMain.nDMZahl
FROM pr,a,za WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr
AND prnr=zaproznr AND zakz<4");
						// 11.10.16 F2774
						Int.SqlImmedSel(@"SELECT sum(akdm)  INTO :frmMain.nMahnEUR
FROM ak,pr WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prnr=akproznr AND akproznr is not null");
						// 28.09.20 Ä1899
						Int.SqlImmedSel(@"SELECT count(distinct prnr) INTO :frmMain.nMahnOffen
FROM pr,ak WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prnr=akproznr AND akproznr is not null
AND akproznr=prnr and @isna(prerledigt) =1 and akdatum<SYSDATE - 3 YEARS");
					}
					else
					{
						// F4638 J und V raus: OR @UPPER(@LEFT(amatch,1))=\'J\' OR @UPPER(@LEFT(amatch,1))=\'V\'
						Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn)  INTO :frmMain.nDMRech
FROM pr,prd,a,rk,zu WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr
AND prnr=prdnr AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr AND @UPPER(@LEFT(amatch,1))=zuabc AND zuzei=:frmMain.strZust");
						// 01.11.07 A113
						Int.SqlImmedSel(@"SELECT sum(rkdmmahn+rkdmzins)  INTO :frmMain.nDMMahn
FROM pr,prd,a,rk,zu WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr
AND prnr=prdnr AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr AND @UPPER(@LEFT(amatch,1))=zuabc AND zuzei=:frmMain.strZust");
						// 09.11.07
						Int.SqlImmedSel(@"SELECT sum(prdma+prdmb+prdmc)  INTO :frmMain.nDMZins
FROM pr,a,zu WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr  AND @UPPER(@LEFT(amatch,1))=zuabc AND zuzei=:frmMain.strZust ");

						Int.SqlImmedSel(@"SELECT sum(zadm)   INTO :frmMain.nDMAusbuch
FROM pr,a,za,zu WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr
AND prnr=zaproznr AND zakz>=4 AND @UPPER(@LEFT(amatch,1))=zuabc AND zuzei=:frmMain.strZust");
						Int.SqlImmedSel(@"SELECT sum(zadm)   INTO :frmMain.nDMZahl
FROM pr,a,za,zu WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr
AND prnr=zaproznr AND zakz<4 AND @UPPER(@LEFT(amatch,1))=zuabc AND zuzei=:frmMain.strZust");
						// 11.10.16 F2774
						Int.SqlImmedSel(@"SELECT sum(akdm)  INTO :frmMain.nMahnEUR
FROM ak,pr,a,zu WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prnr=akproznr AND akproznr is not null AND prarztnr=aarztnr AND @UPPER(@LEFT(amatch,1))=zuabc AND zuzei=:frmMain.strZust");
						// 28.09.20 Ä1899
						Int.SqlImmedSel(@"SELECT count(distinct prnr) INTO :frmMain.nMahnOffen
FROM pr,a,ak,zu WHERE @year(prdatum)+1900 = :frmMain.nRechJahr AND prarztnr=aarztnr AND prnr=akproznr AND akproznr is not null AND prarztnr=aarztnr
AND akproznr=prnr and @isna(prerledigt) =1 and akdatum<SYSDATE - 3 YEARS AND @UPPER(@LEFT(amatch,1))=zuabc AND zuzei=:frmMain.strZust");
					}
					// 09.11.07
					App.frmMain.nDMMahn = App.frmMain.nDMMahn + App.frmMain.nDMZins;

				}
				else if (strPBericht == "Mahnungen.lst" || strPBericht == "Mahnung A4.lst" || strPBericht == "MahnUeberw.lst" || strPBericht == "Mahnung A4 tvn.lst") 
				{
					// 17.02.17 Ä1504 + Zahlungserinnerungen
					if (App.frmMain.nMahnStufe == 0) 
					{
						Int.SqlImmedSel("SELECT azetext INTO :frmMain.lsMahnMTO FROM a WHERE aarztnr = :frmMain.nTANr");
						App.frmMain.lsMahnMTU = "Bitte überweisen Sie den offenen Betrag bis zum " + Int.PalDateToStrDE(SalDateTime.Current + 7) + " an uns.";
					}
					else
					{
						Int.SqlIstDa(@" FROM mt WHERE mtarztnr = :frmMain.nTANr
AND mtstufe = :frmMain.nMahnStufe", ref bPExists);
						if (bPExists) 
						{
							Int.SqlImmedSel(@"SELECT
mto, mtu
INTO :frmMain.lsMahnMTO, :frmMain.lsMahnMTU
FROM MT
WHERE mtarztnr = :frmMain.nTANr AND mtstufe = :frmMain.nMahnStufe");
						}
						else
						{
							Int.SqlImmedSel(@"SELECT
mto, mtu
INTO :frmMain.lsMahnMTO, :frmMain.lsMahnMTU
FROM MT
WHERE mtarztnr = 0 AND mtstufe = :frmMain.nMahnStufe");
						}
					}
					// 05.06.07 A101
					// Set strMahnMTU1 = PalStrReplace(strMahnMTU1, '#FRISTDAT', PalDateToStrDE(PalAddDay( frmMain.dtMahnZahlEing, 10 )))
					// Set strMahnMTU2 =  PalStrReplace(strMahnMTU2, '#FRISTDAT', PalDateToStrDE(PalAddDay( frmMain.dtMahnZahlEing, 10 )))
					// Set strMahnMTU3 =  PalStrReplace(strMahnMTU3, '#FRISTDAT', PalDateToStrDE(PalAddDay( frmMain.dtMahnZahlEing, 10 )))
					// Set strMahnMTU4 =  PalStrReplace(strMahnMTU4, '#FRISTDAT', PalDateToStrDE(PalAddDay( frmMain.dtMahnZahlEing, 10 )))
					// Set strMahnMTU5 =  PalStrReplace(strMahnMTU5, '#FRISTDAT', PalDateToStrDE(PalAddDay( frmMain.dtMahnZahlEing, 10 )))
					// Set strMahnMTU6 =  PalStrReplace(strMahnMTU6, '#FRISTDAT', PalDateToStrDE(PalAddDay( frmMain.dtMahnZahlEing, 10 )))
					// 13.09.11 Ä614 + ALAND
					// 08.10.21 Ä1969 + , hfaelltg
					Int.SqlImmedSel(@"SELECT aname1, aname2, astr, aort, amemo, alogo, aland,
htitel, hti, hvn, hnn, hname2, hstr, hort, hland, hmahnint, hfaelltg
INTO :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.lsMemo, :frmMain.strLogo, :frmMain.strTALand,
:frmMain.strTHAnr, :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand, :dlgLlDruck.nMahnInt, :frmMain.nTHFaellTg
FROM a,h
WHERE aarztnr = harztnr
AND harztnr = :frmMain.nTANr AND hhalternr = :frmMain.nTHNr ");
					// 18.02.14
					// 12.05.14
					// Call SqlDisconnect( hSqlLlDruck2 )
					// Call SqlConnection( hSqlLlDruck2 )
					// Call SqlConnection( hSqlLogo )


					// 17.07.12 Ä792
					// Call SqlPrepareAndExecute( hSqlLogo, 'SELECT abild INTO :frmMain.lsBild  FROM a WHERE aarztnr = :frmMain.nTANr' )
					// Call SqlSetLongBindDatatype( 1, 23 )	! 23 = BINARY
					// Call SqlFetchNext( hSqlLogo, nFetch2)
					// 18.02.14
					// Call SqlCommit( hSqlLogo )
					// 12.05.14
					// Call SqlDisconnect( hSqlLogo )

					// If frmMain.lsBild != '' and nFetch2 = FETCH_Ok
					// Call SalStrUncompress( frmMain.lsBild )
					// 30.06.09 OTÄ238 Korrekturen 15.10.09
					Int.SqlImmedSel("SELECT mitg" + (App.frmMain.nMahnStufe + 1).ToString(0) + " FROM mi INTO :dlgLlDruck.nMahnTage WHERE minr = :dlgLlDruck.nMahnInt");
					if (nMahnTage == 0) 
					{
						Int.SqlImmedSel("SELECT mitg" + (App.frmMain.nMahnStufe + 2).ToString(0) + " FROM mi INTO :dlgLlDruck.nMahnTage WHERE minr = :dlgLlDruck.nMahnInt");
					}
					if (nMahnTage > 14 || nMahnTage <= 0) 
					{
						nMahnTage = 14;
					}

					// Set lsMahnMTU =  PalStrReplace(lsMahnMTU, '#FRISTDAT', PalDateToStrDE(PalAddDay( frmMain.dtMahnZahlEing, 10 )))
					App.frmMain.lsMahnMTU = Int.PalStrReplace(App.frmMain.lsMahnMTU, "#FRISTDAT", Int.PalDateToStrDE(Int.PalAddDay(App.frmMain.dtMahnDat, nMahnTage)));

					// 17.08.07 F232
					App.frmMain.strTHLand = Int.PalPruefeLC(App.frmMain.strTHLand, 0);
				}
				else if (strPBericht == "Ratenzahler-Tilgungsplan.lst") 
				{
					nRZOffen = nRZOffen2;
					dtRZDat = dtRZDat + 31;
					dtRZDat = new SalDateTime(dtRZDat.Year(), dtRZDat.Month(), App.frmMain.nRZTag, 0, 0, 0);
					nRZZins = nRZOffen * App.frmMain.nRZZins / 12m / 100;
					nRZTilgung = App.frmMain.nRZRate - nRZZins;
					nRZOffen2 = nRZOffen - nRZTilgung;
					if (nRZOffen2 < 0) 
					{
						nRZTilgung = nRZTilgung + nRZOffen2;
						nRZOffen2 = 0;
					}
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalFetchEnd()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (strPBericht == "AAB.lst" || strPBericht == "Bestandsbuch.lst" || strPBericht == "Impferinnerungen.lst") 
				{

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalFileHandle temp1 = App.frmDiskEin.hDisk;
					Sal.FileClose(ref temp1);
					App.frmDiskEin.hDisk = temp1;

					if (!(bArchiv)) 
					{
						Sal.MessageBox("Der Druck " + strPBericht + " enthielt " + nCountKunden.ToString(0) + " Kunden.", "Info", (Sys.MB_Ok | Sys.MB_IconAsterisk));
					}
				}
				else if (strPBericht == "MB-Kosten.lst") 
				{
					if ((strTargetFormat == "PRN" || bePost) && !(bArchiv)) 
					{
						if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							Int.SqlImmedX("DELETE FROM mk WHERE mktyp = :frmMain.strLA AND mkdruck = :frmMain.dtDatum");
							// 16.11.07
							Int.PalLog("Druck " + strTargetFormat + " Ok");

						}
						else
						{
							Int.SqlImmed("UPDATE mk SET mkdruck = NULL WHERE mkdruck = :frmMain.dtDatum");
						}
					}
					else
					{
						Int.SqlImmed("UPDATE mk SET mkdruck = NULL WHERE mkdruck = :frmMain.dtDatum");
					}
				}
				else if (strPBericht == "Kontomitteilung.lst") 
				{
					if ((strTargetFormat == "PRN" || bePost) && !(bArchiv)) 
					{
						if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							Int.PalLog("Druck " + strTargetFormat + " Ok");
						}
						else
						{
							Int.SqlImmed("UPDATE tk SET tkdruckdatum2 = NULL WHERE tkdruckdatum2 = :frmMain.dtDatum");
						}
					}
					else
					{
						Int.SqlImmed("UPDATE tk SET tkdruckdatum2 = NULL WHERE tkdruckdatum2 = :frmMain.dtDatum");
					}
				}
				// Else If strPBericht = 'Bankeinzüge.lst'
				// If strTargetFormat = 'PRN' and not bArchiv
				// If IDYES = SalMessageBox( 'Ist der Druck korrekt beendet worden  ?','Achtung',
				// MB_YesNo|MB_IconQuestion )
				// Call SqlImmedX('UPDATE bez SET bezerldat = :frmMain.dtCurrentDate WHERE bezerldat = '1900-1-1'')
				// 16.11.07
				// Call PalLog('Druck ' || strTargetFormat || ' Ok')
				// Else
				// Call SqlImmedX('UPDATE bez SET bezerldat = NULL WHERE bezerldat = '1900-1-1'')
				// Else
				// Call SqlImmedX('UPDATE bez SET bezerldat = NULL WHERE bezerldat = '1900-1-1'')
				else if (strPBericht == "Buchungsbelege.lst") 
				{
					if ((strTargetFormat == "PRN" || bePost) && !(bArchiv)) 
					{
						if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							Int.SqlImmedX("UPDATE bub SET buberldat = :frmMain.dtCurrentDate WHERE buberldat = '1900-1-1'");
							// 16.11.07
							Int.PalLog("Druck " + strTargetFormat + " Ok");

						}
						else
						{
							Int.SqlImmedX("UPDATE bub SET buberldat = NULL WHERE buberldat = '1900-1-1'");
						}
					}
					else
					{
						Int.SqlImmedX("UPDATE bub SET buberldat = NULL WHERE buberldat = '1900-1-1'");
					}
				}
				else if (strPBericht == "70-Checkliste.lst") 
				{

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalSqlHandle temp2 = App.frmMain.hSql70;
					Sql.Disconnect(ref temp2);
					App.frmMain.hSql70 = temp2;

				}
				else if (strPBericht == "Zahlungsmeldungen.lst") 
				{
					if ((strTargetFormat == "PRN" || bePost) && !(bArchiv)) 
					{
						if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							Int.SqlImmedX("UPDATE z SET zerledigt = \'J\'  WHERE zerledigt = \'Z\'");
							// 16.11.07
							Int.PalLog("Druck " + strTargetFormat + " Ok");

						}
						else
						{
							Int.SqlImmedX("UPDATE z SET zerledigt = \'N\' WHERE zerledigt = \'Z\'");
						}
					}
					else
					{
						Int.SqlImmedX("UPDATE z SET zerledigt = \'N\' WHERE zerledigt = \'Z\'");
					}
				}
				else if (strPBericht == "MB-Anfragen.lst") 
				{
					if ((strTargetFormat == "PRN" || bePost) && !(bArchiv)) 
					{
						if (Sal.MessageBox(@"Sind die Auftragskarten alle
korrekt gedruckt worden ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconExclamation)) == Sys.IDYES) 
						{

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalSqlHandle temp3 = App.frmMahn.hSqlAK;
							Int.SqlConnection(ref temp3);
							App.frmMahn.hSqlAK = temp3;

							Sal.WaitCursor(true);
							Int.PalLog("AK korrekt gedruckt");
							// 29.04.05 plus "mvms=4 and "
							// 18.12.17 Ä1667 von Arztweise auf Halterweise umgestellt
							strSelect = @"SELECT mvarztnr, mvhalternr, mvrechnr, akzmb, hnachmbms7
INTO :frmMahn.nArztNr, :frmMahn.nHalterNr, :frmMahn.nRechNr, :frmMahn.nKZMB, :frmMahn.nNachMBMS7
FROM mv,a,h WHERE mvarztnr=aarztnr AND mvarztnr=harztnr AND mvhalternr=hhalternr ORDER by mvarztnr, mvrechnr";
							Int.SqlHandleExec(App.frmMahn.hSqlAK, strSelect, "Fehler", ref nCount);

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalNumber temp4 = App.frmMahn.nFetchAK;
							Sql.FetchNext(App.frmMahn.hSqlAK, ref temp4);
							App.frmMahn.nFetchAK = temp4;

							while (App.frmMahn.nFetchAK != Sys.FETCH_EOF) 
							{
								if (App.frmMahn.nNachMBMS7 == 1) 
								{
									App.frmMahn.nKZMB = 7;
								}
								Int.SqlImmedX(@"UPDATE rk SET rkmahnstufe = :frmMahn.nKZMB
WHERE rkarztnr = :frmMahn.nArztNr AND rkhalternr=:frmMahn.nHalterNr AND rkrechnr = :frmMahn.nRechNr");
								Int.SqlImmedX(@"DELETE FROM mv
WHERE mvarztnr = :frmMahn.nArztNr AND mvhalternr=:frmMahn.nHalterNr AND mvrechnr = :frmMahn.nRechNr");
								this.SetStatusBarText("Rech-Nr. " + Sal.NumberToStrX(App.frmMahn.nArztNr, 0) + "/" + Sal.NumberToStrX(App.frmMahn.nRechNr, 0));

								// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
								SalNumber temp5 = App.frmMahn.nFetchAK;
								Sql.FetchNext(App.frmMahn.hSqlAK, ref temp5);
								App.frmMahn.nFetchAK = temp5;

							}
							// Call SqlCommit( frmMahn.hSqlAK )
							Sal.WaitCursor(false);
							this.SetStatusBarText("");

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalSqlHandle temp6 = App.frmMahn.hSqlAK;
							Sql.Disconnect(ref temp6);
							App.frmMahn.hSqlAK = temp6;

							// 16.11.07
							Int.PalLog("Druck " + strTargetFormat + " Ok");

						}
						else
						{
							Int.PalLog("AK NICHT korrekt gedruckt");
						}
					}
				}
				else if (strPBericht == "Vollstreckungsbescheidliste.lst" || strPBericht == "Vollstreckungsauftrag.crd" || strPBericht == "Pfü.crd" || strPBericht == "Pfü2023.crd" || strPBericht == "VZ.crd" || strPBericht == "Haftbefehl-Antrag.crd" || strPBericht == 
				"Vollstreckungsauftrag2023.crd") 
				{
					if ((strTargetFormat == "PRN" || bePost) && !(bArchiv)) 
					{
						App.frmMBKalender.PalBuchMB1(App.frmMBKalender.strReportName);
					}
				}
				else if (strPBericht == "Rechnungsabgabe.crd") 
				{
					if (strTargetFormat != "PRV" && !(bArchiv)) 
					{
						if (Sal.MessageBox(@"Ist der Druck
in Ordnung ?", "Druck Ok ?", (Sys.MB_YesNo | Sys.MB_IconQuestion)) == Sys.IDYES) 
						{
							Int.PalAktion(App.frmRechAb.dfArztNr.Number, App.frmRechAb.dfHalterNr.Number, App.frmRechAb.dfRechNr.Number, "BR", "RAAbX", SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null);
							App.frmRechAb.strVermerk = "an RA " + App.frmRechAb.dfRA1.Text + @"
" + App.frmRechAb.dfRA2.Text + @"
" + App.frmRechAb.dfRA3.Text + @"
abgegeben.

Begründung : " + App.frmRechAb.strWarum;
							App.frmRechAb.strZei = Var.strBNZei;
							App.frmRechAb.nPRNr = SalNumber.Null;
							if (App.frmRechAb.cbRAAbgAusb.Checked) 
							{
								Int.SqlImmedSel(@"SELECT prdnr INTO :frmRechAb.nPRNr FROM prd
WHERE prdarztnr = :frmRechAb.dfArztNr  AND prdrechnr = :frmRechAb.dfRechNr");
								// 13.05.14 F2027
								App.frmRechAb.dfHalterNr.Number = Int.PalCheckNULL(App.frmRechAb.dfHalterNr.Number);

								// 09.05.16 Ä1367 AN -> HE
								Int.SqlImmed(@"INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:frmRechAb.strZei, 'HE', :frmRechAb.dfArztNr, :frmRechAb.dfHalterNr, :frmRechAb.dfRechNr,
:frmRechAb.strVermerk , SYSDATE, NULL, 'N', 'ZM', 'RA', :frmRechAb.dfAussenst, :frmRechAb.nPRNr, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
							}
							else
							{
								Int.SqlImmed(@"UPDATE rk SET rkmahnstufe = :frmRechAb.dfRAAbgMS WHERE rkarztnr = :frmRechAb.dfArztNr
AND rkhalternr = :frmRechAb.dfHalterNr AND rkrechnr = :frmRechAb.dfRechNr");
							}
							// 18.01.22 Ä1987 + , raan4, raan5
							Int.SqlImmed(@"INSERT INTO ra (raarztnr, rahalternr, rarechnr, radatum, razeichen, raan1, raan2, raan3, raan4, raan5)
VALUES(:frmRechAb.dfArztNr, :frmRechAb.dfHalterNr, :frmRechAb.dfRechNr, SYSDATE, :frmRechAb.strZei,
:frmRechAb.dfRA1, :frmRechAb.dfRA2, :frmRechAb.dfRA3, :frmRechAb.dfRA4, :frmRechAb.dfRA5)");

							Sal.MessageBeep(0);
							// Call SalDestroyWindow(frmRechAb)
						}
					}
				}
				// Else If strPBericht = 'MB-Bezahlt.lst'
				// If strTargetFormat = 'PRN'
				// If IDYES = SalMessageBox( 'Ist der Druck korrekt beendet worden  ?','Achtung',
				// MB_YesNo|MB_IconQuestion )
				// Call SqlImmedX('UPDATE pr SET prdruckdatum = :frmMain.dtCurrentDate WHERE prdruckdatum = '1900-1-1'')
				// 16.11.07
				// Call PalLog('Druck ' || strTargetFormat || ' Ok')
				// Else
				// Call SqlImmedX('UPDATE pr SET prdruckdatum = NULL WHERE prdruckdatum = '1900-1-1'')
				// Else
				// Call SqlImmedX('UPDATE pr SET prdruckdatum = NULL WHERE prdruckdatum = '1900-1-1'')
				else if (strPBericht == "Brief-Mandatsanfrage.crd") 
				{
					if (!(bArchiv)) 
					{
						if (Sal.MessageBox(@"Ist der Druck
in Ordnung ?", "Druck Ok ?", (Sys.MB_YesNo | Sys.MB_IconQuestion)) == Sys.IDYES) 
						{
							Int.PalAktion(App.frmHalter.dfArztNr.Number, App.frmHalter.dfHalterNr.Number, SalNumber.Null, "BR", "MandA", SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null);
							Int.SqlImmed("UPDATE rk SET rkmahnsperrbis = SYSDATE + 21 DAYS WHERE " + Int.PalArztNr("rk", App.frmHalter.dfArztNr.Number, App.frmHalter.nArztNr2) + " AND rkhalternr = :frmHalter.dfHalterNr AND rkkzzahl<2");
						}
					}
				}
				else if (strPBericht.Left(6) == "Brief_" && strPBericht.Right(4) == ".crd") 
				{
					// If strTargetFormat = 'PRN'
					if (!(bArchiv)) 
					{
						if (Sal.MessageBox(@"Ist der Druck
in Ordnung ?", "Druck Ok ?", (Sys.MB_YesNo | Sys.MB_IconQuestion)) == Sys.IDYES) 
						{
							Int.PalAktion(App.frmBrAktiErf.dfArztNr.Number, App.frmBrAktiErf.dfHalterNr.Number, SalNumber.Null, "BR", App.frmBrAktiErf.strTyp, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null);
							App.frmBrAktiErf.strAbtlg = "BR";
							// 11.07.07 F184
							if (App.frmBrAktiErf.nArztNr2 == SalNumber.Null) 
							{
								App.frmBrAktiErf.nArztNr2 = App.frmBrAktiErf.dfArztNr.Number;
							}
							// 15.09.98
							if (App.frmBrAktiErf.strTyp.Left(2) == "RZ" && App.frmBrAktiErf.strTyp != "RZMHÄ")  // 14.06.02 Linker And strTyp != 'RZMHÄ'
							{
								// 14.11.07 Ä182 auskommentiert
								// Call SqlImmedX('UPDATE RK SET
								// rkmahnsperr = 1
								// WHERE rkarztnr  = :frmBrAktiErf.dfArztNr AND rkrechnr  = :frmBrAktiErf.dfRechNr')
								// If frmBrAktiErf.dfRechNr != NUMBER_Null And frmBrAktiErf.dfRechNr != 0
								// Call PalLog('Mahnsperre ein (BR): Rg.'
								// || PalStrNum(frmBrAktiErf.dfArztNr, 4, 0) || '/' || PalStrNum( frmBrAktiErf.dfRechNr, 6,0))
								// Call SalMessageBox('Mahnsperre gesetzt für Rg. ' || PalStrNum(frmBrAktiErf.dfArztNr,4,0) || '/' || PalStrNum(frmBrAktiErf.dfRechNr,6,0) ,'',MB_Ok)
								// Else
								// Call SalMessageBox('Rechnungsnr. fehlt für Mahnsperre !' ,'Achtung',MB_Ok)
								// 05.06.07 F183
								if (App.frmBrAktiErf.dfHalterNr.Number == 0 || App.frmBrAktiErf.dfHalterNr.Number == Sys.NUMBER_Null) 
								{
									Int.SqlImmedSel("SELECT rkhalternr INTO :frmBrAktiErf.dfHalterNr FROM rk WHERE rkarztnr = :frmBrAktiErf.dfArztNr AND rkrechnr = :frmBrAktiErf.dfRechNr");
								}
								// 22.10.03 Seil: RZ muß in HName2, damit das für Rg.Abtlg. sichtbar wird.
								// If frmBrAktiErf.dfHalterName2 != ''
								// Set frmBrAktiErf.dfHalterName2 = frmBrAktiErf.dfHalterName2 || ' '
								// Set frmBrAktiErf.dfHalterName2 = frmBrAktiErf.dfHalterName2 || 'R.Z.'
								if (App.frmBrAktiErf.dfArztNr.Number > 0 && App.frmBrAktiErf.dfHalterNr.Number > 0) 
								{
									// 02.04.07 Ä102
									// If SqlImmed('UPDATE h SET hname2 = :frmBrAktiErf.dfHalterName2
									// WHERE harztnr = :frmBrAktiErf.dfArztNr AND hhalternr = :frmBrAktiErf.dfHalterNr')
									// 11.07.07 F184  IN (:frmBrAktiErf.dfArztNr, :frmBrAktiErf.nArztNr2)
									if (Int.SqlImmed(@"UPDATE h SET hsperrdatum = SYSDATE
WHERE harztnr IN (:frmBrAktiErf.dfArztNr, :frmBrAktiErf.nArztNr2) AND hhalternr = :frmBrAktiErf.dfHalterNr")) 
									{
									}
									Int.PalLog("Haltersperre ein (BR): " + Int.PalStrNum(App.frmBrAktiErf.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(App.frmBrAktiErf.dfHalterNr.Number, 5, 0));

								}
								else
								{
									Sal.MessageBox(@"Arzt- oder HalterNr. fehlt
zum Sperren des Postausgangs !", "Achtung", Sys.MB_Ok);
									// 05.06.07 F183
									Int.PalLog("Haltersperre ein (BR): " + Int.PalStrNum(App.frmBrAktiErf.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(App.frmBrAktiErf.dfHalterNr.Number, 5, 0) + " Fehler Arzt/Halter fehlt");
								}
								// 06.02.04
								if (App.frmBrAktiErf.strTyp == "RZGem") 
								{
									App.frmBrAktiErf.strKuerzel = App.frmMain.strUser.Left(2);
									App.frmBrAktiErf.lsText = "***** EWA Anfrage gemacht";
									// 23.11.15 Ä1288 Wiedervorlage raus
									// Set frmBrAktiErf.dtErinnerung = SalDateCurrent() + 30
									// 13.05.14 F2027
									App.frmBrAktiErf.dfHalterNr.Number = Int.PalCheckNULL(App.frmBrAktiErf.dfHalterNr.Number);

									Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :strBNZei, :frmBrAktiErf.dfArztNr, :frmBrAktiErf.dfHalterNr, 0,
:frmBrAktiErf.lsText , SYSDATE, 'J', 'HS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
									// 21.10.10 OTÄ496 + If frmBrAktiErf.dfDM != 0
									if (App.frmBrAktiErf.dfDM.Number != 0) 
									{
										// 12.01.11 F824 von hier nach PalHoleDaten verschoben
										// Call SqlImmed('UPDATE nr SET nrmax = :frmBrAktiErf.nMaxScheckNr WHERE nrcode = \'SCHK\'')
										if (App.frmBrAktiErf.dfPR.Number == 0 || App.frmBrAktiErf.dfPR.Number == Sys.NUMBER_Null) 
										{
											// 30.06.20 Ä1892
											if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
											{
												Int.PalBuchMB(hSqlLlDruck2, SalDateTime.Current, 37, 3.00m, App.frmBrAktiErf.dfDM.Number, 0, App.frmBrAktiErf.dfArztNr.Number, App.frmBrAktiErf.dfHalterNr.Number, App.frmBrAktiErf.dfPR.Number, App.frmBrAktiErf.nMaxScheckNr, 13300, 
													"", SalNumber.Null, false, SalNumber.Null);
											}
											else
											{
												Int.PalBuchMB(hSqlLlDruck2, SalDateTime.Current, 37, 3.08m, App.frmBrAktiErf.dfDM.Number, 0, App.frmBrAktiErf.dfArztNr.Number, App.frmBrAktiErf.dfHalterNr.Number, App.frmBrAktiErf.dfPR.Number, App.frmBrAktiErf.nMaxScheckNr, 13300, 
													"", SalNumber.Null, false, SalNumber.Null);
											}
										}
										else
										{
											// 10.06.11 Ä589
											// Call PalBuchMB( hSqlLlDruck2, SalDateCurrent(), 5, 0, frmBrAktiErf.dfDM, 3.08, frmBrAktiErf.dfArztNr, frmBrAktiErf.dfHalterNr, frmBrAktiErf.dfPR, frmBrAktiErf.nMaxScheckNr, 13300, '' )
											// 04.10.23 Ä2134 tkfall
											Int.PalBuchMB(hSqlLlDruck2, SalDateTime.Current, 5, 0, App.frmBrAktiErf.dfDM.Number, 0, App.frmBrAktiErf.dfArztNr.Number, App.frmBrAktiErf.dfHalterNr.Number, App.frmBrAktiErf.dfPR.Number, App.frmBrAktiErf.nMaxScheckNr, 13300, "", 
												SalNumber.Null, false, 1);

										}
										// ! 06.09.10
										Var.strDummy = (Int.PalStrNum(App.frmBrAktiErf.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(App.frmBrAktiErf.dfHalterNr.Number, 5, 0) + " " + App.frmBrAktiErf.strTHN1).Left(100);
										Int.SqlImmed(@"INSERT INTO dl (dlcode, dlerfdat, dlid, dlname, dldm)
VALUES('SCHK', SYSDATETIME, :frmBrAktiErf.nMaxScheckNr, :strDummy, :frmBrAktiErf.dfDM)");
									}
									// 09.03.15 Ä1176
									Int.SqlImmed("INSERT INTO ee (eearztnr, eehalternr, eedatum, eezei) VALUES( :frmBrAktiErf.dfArztNr, :frmBrAktiErf.dfHalterNr, SYSDATE, :strBNZei )");
								}
								// 01.11.16 Ä1437
								if (App.frmBrAktiErf.strTyp == "RZM") 
								{
									if (nEWAabEUR == SalNumber.Null)  // 06.12.16 25.01.16 0 -> 50
									{
										nEWAabEUR = 50;
									}
									if (nEWAabEUR != 0 && nEWAabEUR != SalNumber.Null) 
									{
										// Call SqlImmedSel( 'SELECT  sum(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)
										// INTO :dlgLlDruck.nDM
										// FROM rk
										// WHERE rkarztnr IN ( :frmBrAktiErf.dfArztNr, :frmBrAktiErf.nArztNr2 )
										// AND rkkzzahl<2' )
										if (App.frmBrAktiErf.dfAussenst.Number >= nEWAabEUR) 
										{
											nEWAabEUR = 0;
										}
									}
									// 23.01.17 Ä 1477
									if (nEWAVariante == SalNumber.Null) 
									{
										nEWAVariante = 3;
									}
									// If nEWAVariante = 3 and frmBrAktiErf.dfAussenst < 50
									// Set nEWAVariante = 2

									if (nEWAabEUR == 0) 
									{
										if (nEWAVariante == 1) 
										{
											dtEWAAbDatum = SalDateTime.Current;
											App.frmBrAktiErf.strEL = "";
											// 25.01.17 Ä1476 Anmekrung Frau Rieger
											Int.SqlImmed("DELETE FROM ewa WHERE ewaarztnr = :frmBrAktiErf.dfArztNr AND ewahalternr = :frmBrAktiErf.dfHalterNr");

											Int.SqlImmed(@"INSERT INTO ewa (ewaarztnr, ewahalternr, ewazei, ewaabdatum)
VALUES( :frmBrAktiErf.dfArztNr, :frmBrAktiErf.dfHalterNr, :strBNZei, :dlgLlDruck.dtEWAAbDatum)");
										}
										else if (nEWAVariante == 3) 
										{
											dtEWAAbDatum = SalDateTime.Current + 14;
											App.frmBrAktiErf.strEL = "";
											// 25.01.17 Ä1476 Anmekrung Frau Rieger
											Int.SqlImmed("DELETE FROM ewa WHERE ewaarztnr = :frmBrAktiErf.dfArztNr AND ewahalternr = :frmBrAktiErf.dfHalterNr");

											Int.SqlImmed(@"INSERT INTO ewa (ewaarztnr, ewahalternr, ewazei, ewaabdatum)
VALUES( :frmBrAktiErf.dfArztNr, :frmBrAktiErf.dfHalterNr, :strBNZei, :dlgLlDruck.dtEWAAbDatum)");
										}
									}
								}
							}
							// 24.11.99
							if (App.frmBrAktiErf.strTyp.Left(2) == "RA" && App.frmBrAktiErf.strTyp != "RAAbX")  // RAAbX: 02.04.07
							{
								App.frmBrAktiErf.strAbtlg = "RA";
								if (App.frmBrAktiErf.strTyp == "RAAdr" || App.frmBrAktiErf.strTyp == "RARZ") 
								{
									// 02.04.07 Ä102 11.07.07 /F184  IN (:frmBrAktiErf.dfArztNr, :frmBrAktiErf.nArztNr2)
									if (Int.SqlImmed(@"UPDATE h SET hsperrdatum = SYSDATE
WHERE harztnr IN (:frmBrAktiErf.dfArztNr, :frmBrAktiErf.nArztNr2) AND hhalternr = :frmBrAktiErf.dfHalterNr")) 
									{
									}
									Int.PalLog("Haltersperre ein (BR): " + Int.PalStrNum(App.frmBrAktiErf.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(App.frmBrAktiErf.dfHalterNr.Number, 5, 0));
									Sal.MessageBox("Postausgang gesperrt für " + Int.PalStrNum(App.frmBrAktiErf.dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(App.frmBrAktiErf.dfHalterNr.Number, 5, 0), "", Sys.MB_Ok);

								}
								else
								{
									// 17.01.18 Ä1684 raus: and (rkmahnsperr=0 Or rkmahnsperr IS NULL)
									// Call SqlImmedX('UPDATE RK SET
									// rkmahnsperr = 2
									// WHERE rkarztnr  = :frmBrAktiErf.dfArztNr AND rkrechnr  = :frmBrAktiErf.dfRechNr')
									if (App.frmBrAktiErf.dfRechNr.Number != Sys.NUMBER_Null && App.frmBrAktiErf.dfRechNr.Number != 0) 
									{
										// Call PalLog('Mahnsperre 2 (BR): Rg.'
										// || PalStrNum(frmBrAktiErf.dfArztNr, 4, 0) || '/' || PalStrNum( frmBrAktiErf.dfRechNr, 6,0))
										// Call SalMessageBox('Mahnsperre auf 2 gesetzt für Rg. ' || PalStrNum(frmBrAktiErf.dfArztNr,4,0) || '/' || PalStrNum(frmBrAktiErf.dfRechNr,6,0) ,'',MB_Ok)
									}
									else
									{
										Sal.MessageBox("Rechnungsnr. fehlt für Mahnsperre !", "Achtung", Sys.MB_Ok);
									}
								}
							}
							// 16.11.20	16.12.20 Sevgi: wieder raus
							// If SalStrScan( frmBrAktiErf.strTyp, 'OPBE' ) != -1
							// Set dtDummy = SalDateCurrent(  ) + 20
							// Set frmBrAktiErf.lsText = 'Brief ' || frmBrAktiErf.strTyp || ' erstellt.'
							// Call SqlImmed('INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
							// VALUES ( :strBNZei, :strBNZei, :frmBrAktiErf.dfArztNr, :frmBrAktiErf.dfHalterNr, :frmBrAktiErf.dfRechNr,
							// :frmBrAktiErf.lsText , SYSDATE, :dtDummy, \'J\', \'BR\', NULL, NULL, :frmBrAktiErf.nPRNr,
							// NULL, NULL, NULL, NULL, NULL, 0, SYSDATETIME)')
							if (App.frmBrAktiErf.strEL != "") 
							{
								App.frmBrAktiErf.strELZei = Var.strBNZei;
								Int.SqlImmed(@"INSERT INTO el (elarztnr, elhalternr, elrechnr, elzeichen, eltext, eldatum, elabtlg, elerledigt)
VALUES(:frmBrAktiErf.dfArztNr, :frmBrAktiErf.dfHalterNr, :frmBrAktiErf.dfRechNr,
:frmBrAktiErf.strELZei, :frmBrAktiErf.strEL, SYSDATETIME, :frmBrAktiErf.strAbtlg, 'N') ");
							}

							Sal.MessageBeep(0);
							// Call frmBrAktiErf.LoescheMaske()
							// Call SalSetFocus( frmBrAktiErf.dfArztNr )
							// Call SalDestroyWindow(frmBrAktiErf)
						}
						else
						{
							if (App.frmBrAktiErf.strTyp == "RZGem") 
							{
								if (App.frmBrAktiErf.dfDM.Number != 0) 
								{
									// ! 06.09.10
									Var.strDummy = (Int.PalStrNum(App.frmBrAktiErf.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(App.frmBrAktiErf.dfHalterNr.Number, 5, 0) + " " + App.frmBrAktiErf.strTHN1).Left(100);
									Int.SqlImmed(@"INSERT INTO dl (dlcode, dlerfdat, dlid, dlname, dldm)
VALUES('SCHN', SYSDATETIME, :frmBrAktiErf.nMaxScheckNr, :strDummy, :frmBrAktiErf.dfDM)");
								}
							}
						}
					}
				}
				else if (strPBericht == "BriefVariabel.crd") 
				{
					if (strTargetFormat != "PRV" && !(bArchiv)) 
					{
						Sal.EnableWindow(App.frmBriefVari.pbOk);
						// 31.07.07 F215 raus: frmBriefVari.dtDatum = '1900-01-01' And
						if (App.frmBriefVari.dfArztNr.Number > 0) 
						{
							if (Sal.MessageBox(@"Ist der Druck
in Ordnung ?", "Druck Ok ?", (Sys.MB_YesNo | Sys.MB_IconQuestion)) == Sys.IDYES) 
							{
								// Call PalAktion( dfArztNr, dfHalterNr, dfRechNr, 'BR', 'RAAbX',
								// NUMBER_Null, NUMBER_Null, NUMBER_Null, NUMBER_Null, NUMBER_Null)
								// Set strVermerk = 'Brief an
								// ' || dfRA0 || '
								// ' || dfRA1 || '
								// ' || dfRA2 || '
								// ' || dfRA3 || '
								// ' || dfRA4 || ':
								// 
								// ' || mlText
								App.frmBriefVari.strZei = Var.strBNZei;
								App.frmBriefVari.nPRNr = SalNumber.Null;
								Int.SqlImmedSel(@"SELECT prdnr INTO :frmBriefVari.nPRNr FROM prd
WHERE prdarztnr = :frmBriefVari.dfArztNr  AND prdrechnr = :frmBriefVari.dfRechNr");
								// 21.03.02
								// 15.05.09
								App.frmBriefVari.mlText.Text = App.frmBriefVari.dfBetreff.Text + @"

" + App.frmBriefVari.dfAnrede.Text + @"

" + App.frmBriefVari.mlText.Text;
								// Set plsMemo = frmBriefVari.dfBetreff || '
								// 
								// ' || frmBriefVari.dfAnrede || '
								// 
								// ' || plsMemo
								// 13.10.09 OTF325 If Bedingung
								if (strPSpezial.Right(9) != "Nachdruck")  // 04.07.18 strPSpezial -> SalStrRightX( strPSpezial, 9 )
								{
									// 13.05.14 F2027
									App.frmBriefVari.dfHalterNr.Number = Int.PalCheckNULL(App.frmBriefVari.dfHalterNr.Number);

									Int.SqlImmed(@"INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:frmBriefVari.strZei, :frmBriefVari.strEmpf, :frmBriefVari.dfArztNr, :frmBriefVari.dfHalterNr, :frmBriefVari.dfRechNr,
:frmBriefVari.mlText , SYSDATE, NULL, 'J', 'BR', NULL, NULL, :frmBriefVari.nPRNr,
:frmBriefVari.dfRA0, :frmBriefVari.dfRA1, :frmBriefVari.dfRA2, :frmBriefVari.dfRA3, :frmBriefVari.dfRA4,0, SYSDATETIME)");
								}

								Sal.MessageBeep(0);
								// Call SalDestroyWindow(frmBriefVari)
							}
						}
						else
						{
							Sal.MessageBeep(0);
							// Call SalDestroyWindow(frmBriefVari)
						}
					}
				}
				else if (strPBericht == "BriefEDA.crd") 
				{
					if (strTargetFormat != "PRV" && !(bArchiv)) 
					{
						Sal.MessageBeep(0);
						// Call SalDestroyWindow(frmEDA)
					}
				}
				else if (strPBericht == "Halter prüfen.lst") 
				{
					if (App.frmDiskAbr.hSql2) 
					{

						// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
						SalSqlHandle temp7 = App.frmDiskAbr.hSql2;
						Sql.Disconnect(ref temp7);
						App.frmDiskAbr.hSql2 = temp7;

					}
					if (!(bArchiv)) 
					{
						Int.SqlImmed(@"UPDATE le SET lestatus='HPRÜF'
WHERE " + Int.PalArztNr("le", App.frmDiskAbr.nArztNr, App.frmDiskAbr.nArztNr2) + @"
			AND lebearbeiter=:frmDiskAbr.strBearbeiter
			AND lebearbdatum=:frmDiskAbr.dtBearbDatum");
						// 14.03.19 Ä1829
						App.frmDiskAbr.PalHoleTabelle();
						// 24.08.21 nach frmDiskAbr verschoben
						// 20.02.15 Ä1169
						// If bfrmDYMODruck
						// While Not SalDestroyWindow(frmDYMODruck)
						// Call SalCreateWindow(frmDYMODruck, hWndForm, '', 'LabelHP')
					}
				}
				else if (strPBericht == "Rechnungen.lst" || strPBericht == "Rechnung A4.lst") 
				{
					if (strPSpezial == "LE") 
					{
						// Call PalLog( 'Druck Rechnung  FetchEnd 1' )
						if ((strTargetFormat == "PRN" || bePost) && !(bArchiv))  // 06.03.18 F3125 + or bePost
						{
							// Call PalLog( 'Druck Rechnung  FetchEnd 2' )
							if (Int.SqlImmed(@"UPDATE le SET lestatus='RgDru'
WHERE learztnr IN (:frmSpeRg.nArztNr, :frmSpeRg.nArztNr2)
AND lebearbeiter=:frmSpeRg.strBearbeiter
AND lebearbdatum=:frmSpeRg.dtBearbDatum")) 
							{
							}

							// Set strSelect = 'SELECT learztnr, lehalternr, lerechnr, lerechdat, lemzf, lebrutto,
							// aname1, aname2, astr, aort, amemo, alogo, austid,
							// htitel, hti, hvn, hnn, hname2, hstr, hort, hland, hbankeinzug, hfaelltg,
							// lepla, lepmwst, leprechtext, lepdatum, lepdm, lepzeidat
							// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtMahnDat, :frmMain.strMahnMZF, :frmMain.nMahnEUR,
							// :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt, :frmMain.lsMemo, :frmMain.strLogo, :frmMain.strTAUStID,
							// :frmMain.strTHAnr, :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand,
							// :frmMain.nTHBankeinzug, :frmMain.nTHFaellTg,
							// :frmMain.strRepRechLA, :frmMain.nRepRechMwSt, :frmMain.strRepRechText, :frmMain.dtRepRechDatum, :frmMain.nRepRechDM, :frmMain.dtRepRechZeiDat
							// FROM le, lep,a,h
							// WHERE learztnr = aarztnr AND learztnr = harztnr AND lehalternr = hhalternr
							// AND learztnr=leparztnr AND lehalternr=lephalternr AND lerechnr=leprechnr AND leposnr=lepposnr
							// AND lebearbeiter = lepbearbeiter AND le.lebearbdatum = lep.lebearbdatum
							// AND lebearbeiter = :frmSpeRg.strBearbeiter AND le.lebearbdatum = :frmSpeRg.dtBearbDatum
							// AND ((learztnr = :frmSpeRg.dfArztNr AND lerechnr BETWEEN :frmSpeRg.dfA1von AND :frmSpeRg.dfA1bis)
							// OR (learztnr = :frmSpeRg.dfArztNr2 AND lerechnr BETWEEN :frmSpeRg.dfA2von AND :frmSpeRg.dfA2bis))
							// ORDER BY learztnr, lekennungta, lepzeidat '
							// 27.03.08
							// Call PalLog( 'Druck Rechnung  FetchEnd 3' )
							plsMemo = "";
							Int.SqlHandleExec(hSqlLlDruck, @"SELECT learztnr, lehalternr, lerechnr, hvn, hnn
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.strTHVN, :frmMain.strTHNN
FROM le, h
WHERE learztnr IN (:frmSpeRg.nArztNr, :frmSpeRg.nArztNr2)
AND learztnr=harztnr AND lehalternr=hhalternr AND hsperrdatum IS NOT NULL
AND lebearbeiter=:frmSpeRg.strBearbeiter
AND lebearbdatum=:frmSpeRg.dtBearbDatum", "Druck.Rechnungen.FetchEnd", ref nCount);
							// Call PalLog( 'Druck Rechnung  FetchEnd 4' )
							nFetch = hSqlLlDruck.FetchNext();
							// Call PalLog( 'Druck Rechnung  FetchEnd 5' )
							while (nFetch != Sys.FETCH_EOF) 
							{
								if (nFetch == Sys.FETCH_Ok) 
								{
									plsMemo = plsMemo + Sal.NumberToStrX(App.frmMain.nTANr, 0) + "/H " + Sal.NumberToStrX(App.frmMain.nTHNr, 0) + "/R " + Sal.NumberToStrX(App.frmMain.nRechNr, 0) + ": " + App.frmMain.strTHVN + " " + App.frmMain.strTHNN + @"
";
								}
								nFetch = hSqlLlDruck.FetchNext();
							}
							hSqlLlDruck.Commit();
							if (plsMemo != "") 
							{
								plsMemo = @"Druck ausgelassen für folgende Halter, deren Postausgang gesperrt ist:
" + plsMemo;
							}
							// 01.04.08
							plsMemo1 = "";
							// Call PalLog( 'Druck Rechnung  FetchEnd 6' )
							Int.SqlHandleExec(hSqlLlDruck, @"SELECT learztnr, lehalternr, lerechnr, hvn, hnn
INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.strTHVN, :frmMain.strTHNN
FROM le, h
WHERE learztnr IN (:frmSpeRg.nArztNr, :frmSpeRg.nArztNr2)
AND learztnr=harztnr AND lehalternr=hhalternr
AND (lebrutto = 0 and lebrutto IS NULL)
AND lebearbeiter=:frmSpeRg.strBearbeiter
AND lebearbdatum=:frmSpeRg.dtBearbDatum", "Druck.Rechnungen.FetchEnd", ref nCount);
							// Call PalLog( 'Druck Rechnung  FetchEnd 7' )
							nFetch = hSqlLlDruck.FetchNext();
							// Call PalLog( 'Druck Rechnung  FetchEnd 8' )
							while (nFetch != Sys.FETCH_EOF) 
							{
								if (nFetch == Sys.FETCH_Ok) 
								{
									plsMemo1 = plsMemo1 + Sal.NumberToStrX(App.frmMain.nTANr, 0) + "/H " + Sal.NumberToStrX(App.frmMain.nTHNr, 0) + "/R " + Sal.NumberToStrX(App.frmMain.nRechNr, 0) + ": " + App.frmMain.strTHVN + " " + App.frmMain.strTHNN + @"
";
								}
								nFetch = hSqlLlDruck.FetchNext();
							}
							// Call PalLog( 'Druck Rechnung  FetchEnd 9' )
							// Call SqlCommit( hSqlLlDruck )
							if (plsMemo1 != "") 
							{
								plsMemo = plsMemo + @"

Druck ausgelassen für folgende Halter, deren Rechnung € 0,00 beträgt:
" + plsMemo1;
							}
							// Call PalLog( 'Druck Rechnung  FetchEnd 10' )
							if (Int.SqlImmedSel(@"SELECT count(*) FROM le,h INTO :frmSpeRg.nCount
WHERE learztnr IN (:frmSpeRg.nArztNr, :frmSpeRg.nArztNr2)
AND lebearbeiter=:frmSpeRg.strBearbeiter
AND lebearbdatum=:frmSpeRg.dtBearbDatum
AND hland NOT IN ('CH','DE','--') AND learztnr=harztnr AND lehalternr=hhalternr")) 
							{
							}
							// Call PalLog( 'Druck Rechnung  FetchEnd 11' )
							if (App.frmSpeRg.nCount > 0) 
							{
								// Call SalMessageBox('Bitte nach dem Druck "EU-Standard-Überweisungen" drucken.', 'Achtung', MB_Ok|MB_IconExclamation)
								// 05.02.08 Ä215 entfernt
								// Set plsMemo = plsMemo || '
								// Bitte nach dem Druck "EU-Standard-Überweisungen" drucken.
								// '
							}
							// Call PalLog( 'Druck Rechnung  FetchEnd 12' )

							if (Int.SqlImmedSel(@"SELECT count(*) FROM le,h INTO :frmSpeRg.nCount
WHERE learztnr IN (:frmSpeRg.nArztNr, :frmSpeRg.nArztNr2)
AND lebearbeiter=:frmSpeRg.strBearbeiter
AND lebearbdatum=:frmSpeRg.dtBearbDatum
AND hland = 'CH' AND learztnr=harztnr AND lehalternr=hhalternr")) 
							{
							}
							// Call PalLog( 'Druck Rechnung  FetchEnd 13' )
							if (App.frmSpeRg.nCount > 0) 
							{
								// Call SalMessageBox('Bitte nach dem Druck "CHF-Überweisungen" drucken.', 'Achtung', MB_Ok|MB_IconExclamation)
								// 05.02.08 Ä215 entfernt
								// Set plsMemo = plsMemo || '
								// Bitte nach dem Druck "CHF-Überweisungen" drucken.
								// '
							}
							if (plsMemo != "") 
							{
								Sal.MessageBox(plsMemo, "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
							}
							// Call PalLog( 'Druck Rechnung  FetchEnd 14' )
						}
					}
				}
				else if (strPBericht == "Rechnungsprotokoll.lst") 
				{
					if (strTargetFormat == "PRN" && !(bArchiv))  // 06.03.18 F3125 + or bePost	! 08.05.19 F4496 ePost auskommentiert und nach PalePost verschoben
					{
						Int.SqlImmed(@"UPDATE le SET lestatus='RProt'
WHERE " + Int.PalArztNr("le", App.frmRechProtneu.nArztNr, App.frmRechProtneu.nArztNr2) + @"
AND lebearbeiter=:frmRechProtneu.strBearbeiter
AND lebearbdatum=:frmRechProtneu.dtBearbDatum");
						// Call SalDestroyWindow(frmRechProtneu)
					}
				}
				else if (strPBericht == "VetAmt-Antrag.crd") 
				{
					if ((strTargetFormat == "PRN" || bePost) && !(bArchiv)) 
					{
						if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							if (Int.SqlImmed("UPDATE tsk SET tskantrdat =  SYSDATETIME WHERE tskantrdat = '1900-01-01'")) 
							{
							}
							// 16.11.07
							Int.PalLog("Druck " + strTargetFormat + " Ok");

						}
						else
						{
							if (Int.SqlImmed("UPDATE tsk SET tskantrdat =  NULL WHERE tskantrdat = '1900-01-01'")) 
							{
							}
							Int.PalLog("Druck " + strTargetFormat + " Nicht Ok");
						}
					}
					else
					{
						if (Int.SqlImmed("UPDATE tsk SET tskantrdat =  NULL WHERE tskantrdat = '1900-01-01'")) 
						{
						}
					}
				}
				// Else If strPBericht = 'TSK-Beihilfen.lst'
				// Set strSelect = 'SELECT tskarztnr, tskhalternr, tskbeihdat, tskbeihilfe, tskbeihtext, tskregnr, tskerfdat,
				// hti || hvn || \' \' || hnn, hname2, hstr, hland, hort
				// INTO :frmMain.nTANr, :frmMain.nTHNr, :frmMain.dtDatum, :frmMain.nBeihilfe, :frmMain.strBeihText, :frmMain.strRegNr, :frmMain.dtErfDat,
				// :frmMain.strTHN1, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHLand, :frmMain.strTHOrt
				// FROM tsk, h
				// WHERE (tsktadruckdat IS NULL Or tsktadruckdat ='1900-1-1')
				// AND tslarztnr = harztnr AND tskhalternr = hhalternr
				// ORDER BY tskarztnr'
				// If strTargetFormat = 'PRN' and not bArchiv
				// If IDYES = SalMessageBox( 'Ist der Druck korrekt beendet worden  ?','Achtung',
				// MB_YesNo|MB_IconQuestion )
				// Call SqlImmedX('UPDATE tsk SET tsktadruckdat = SYSDATE WHERE tsktadruckdat = '1900-1-1'')
				// 16.11.07
				// Call PalLog('Druck ' || strTargetFormat || ' Ok')
				// Else
				// Call SqlImmedX('UPDATE tsk SET tsktadruckdat = NULL WHERE tsktadruckdat = '1900-1-1'')
				// Else
				// Call SqlImmedX('UPDATE tsk SET tsktadruckdat = NULL WHERE tsktadruckdat = '1900-1-1'')
				else if (strPBericht == "Ratenzahler-Vereinbarung.lst") 
				{
				}
				else if (strPBericht == "PM-Kontrolle.lst") 
				{
					if ((strTargetFormat == "PRN" || bePost) && !(bArchiv)) 
					{
						if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							Int.PalLog("Druck PM-Kontrolle " + strTargetFormat + " Ok");
							// 07.05.12 F1301
							Int.SqlImmed("UPDATE dk SET dkerldat = :dlgLlDruck.dtMin WHERE dkerldat = '1900-01-01' ");
						}
						else
						{
							Int.SqlImmed("UPDATE dk SET dkerldat = NULL WHERE dkerldat = '1900-01-01' ");
						}
					}
					else
					{
						Int.SqlImmed("UPDATE dk SET dkerldat = NULL WHERE dkerldat = '1900-01-01' ");
					}
				}
				else if (strPBericht == "Scheckliste.lst") 
				{
					if ((strTargetFormat == "PRN" || bePost) && !(bArchiv)) 
					{
						if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							Int.PalLog("Druck " + strTargetFormat + " Ok");

						}
						else
						{
							Int.SqlImmed("UPDATE dl SET dlerldat = NULL WHERE dlerldat = :dlgLlDruck.dtMinScheck ");
						}
					}
					else
					{
						Int.SqlImmed("UPDATE dl SET dlerldat = NULL WHERE dlerldat = :dlgLlDruck.dtMinScheck ");
					}
				}
				else if (strPBericht == "RaZaReakt.crd") 
				{
					if (!(bArchiv)) 
					{
						// 08.04.13 F1624 hierher verschoben von frmRaZa
						if (strPSpezial != "") 
						{
							Int.SqlImmed("UPDATE rz SET rzkuenddat = NULL WHERE rzkuenddat IS NOT NULL " + strPSpezial);
						}

						App.frmRaZa.PalTagebuchRefresh();
					}
				}
				else if (strPBericht == "RaZa-Schlußbrief.crd") 
				{
					if ((strTargetFormat == "PRN" || bePost) && !(bArchiv)) 
					{
						if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							if (Int.SqlImmed("UPDATE rz SET rzschluss = SYSDATE WHERE rzschluss='1900-01-01'")) 
							{
							}
						}
						else
						{
							if (Int.SqlImmed("UPDATE rz SET rzschluss = NULL WHERE rzschluss='1900-01-01'")) 
							{
							}
						}
					}
				}
				else if (strPBericht == "RaZa-MS5TAInfo.crd") 
				{
					if ((strTargetFormat == "PRN" || bePost) && !(bArchiv)) 
					{
						if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							if (Int.SqlImmed("UPDATE rz SET rzms5tainfo = SYSDATE WHERE rzms5tainfo='1900-01-01'")) 
							{
							}
						}
						else
						{
							if (Int.SqlImmed("UPDATE rz SET rzms5tainfo = NULL WHERE rzms5tainfo='1900-01-01'")) 
							{
							}
						}
					}
				}
				else if (strPBericht == "BEZ-RetoureHalter.crd" || strPBericht == "BEZ-RetoureHalterKL.crd")  // 31.10.16 Ä1436
				{
					if ((strTargetFormat == "PRN" || bePost) && !(bArchiv)) 
					{
						if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							// 13.02.17 Ä1497 16460 -> 15550
							// 07.03.17 F2824 BEZ-Retoure ->
							strRRDummy = "BEZ-Ret." + Int.PalStrNum(App.dlgBEZRetoure.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(App.dlgBEZRetoure.dfHalterNr.Number, 5, 0);
							// 06.03.23 Ä2086
							App.dlgBEZRetoure.dtBuchDat = SalDateTime.Current;
							Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
							if (App.dlgBEZRetoure.dtBuchDat < Var.dtINIMinBuchDat) 
							{
								App.dlgBEZRetoure.dtBuchDat = Var.dtINIMinBuchDat;
							}

							// 27.03.18 F3128 dfArztNr -> dfBelegNr
							if (Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 15550, 12000, :dlgBEZRetoure.dfBelegNr, :dlgBEZRetoure.dtBuchDat, :dlgLlDruck.strRRDummy, :dlgBEZRetoure.dfGebuehren, 6)")) 
							{
							}
							nEWAGeb = App.dlgBEZRetoure.dfGebuehren.Number * -1;
							// 13.02.17 Ä1497 16460 -> 15550
							Int.SqlImmed(@"INSERT INTO hb (hbarztnr, hbhalternr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext, hbrznr)
VALUES(:dlgBEZRetoure.dfArztNr, :dlgBEZRetoure.dfHalterNr, :dlgBEZRetoure.dtBuchDat, 'BEZRe', SYSDATETIME, :dlgLlDruck.nEWAGeb,
15550, 12000, 'Bankeinzug-Retourengebühren', 0)");
							Int.SqlImmedSel(@"SELECT SUM(hbdm) INTO :dlgBEZRetoure.nHBRetKosten FROM hb
WHERE hbarztnr = :dlgBEZRetoure.dfArztNr AND hbhalternr = :dlgBEZRetoure.dfHalterNr AND hbcode = 'BEZRe'");
							// 10.12.18 Ä1810 + , bezsanzseitretoure=0 plus  or dlgBEZRetoure.rb2
							if (App.dlgBEZRetoure.nRetAnz > 1 || App.dlgBEZRetoure.rb2.Checked) 
							{
								Int.SqlImmed("UPDATE h SET hbankeinzug = 0 WHERE harztnr = :dlgBEZRetoure.dfArztNr AND hhalternr = :dlgBEZRetoure.dfHalterNr");
								if (App.dlgBEZRetoure.dfRechnungNr.Number == Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"UPDATE bezs SET bezsanzretoure = :dlgBEZRetoure.nRetAnz, bezserldat = SYSDATE, bezsanzseitretoure=0 WHERE bezserfdat = :dlgBEZRetoure.dtPErfDat
AND bezsarztnr = :dlgBEZRetoure.dfArztNr AND bezshalternr = :dlgBEZRetoure.dfHalterNr AND bezsrechnr IS NULL");
								}
								else
								{
									Int.SqlImmed(@"UPDATE bezs SET bezsanzretoure = :dlgBEZRetoure.nRetAnz, bezserldat = SYSDATE, bezsabdatum = :dlgBEZRetoure.dtNaechstEinzug, bezsanzseitretoure=0
WHERE bezserfdat = :dlgBEZRetoure.dtPErfDat
AND bezsarztnr = :dlgBEZRetoure.dfArztNr AND bezshalternr = :dlgBEZRetoure.dfHalterNr AND bezsrechnr = :dlgBEZRetoure.dfRechnungNr");
								}
								// 10.01.19
								if (App.dlgBEZRetoure.rb2.Checked) 
								{
									if (App.dlgBEZRetoure.dfRechnungNr.Number == Sys.NUMBER_Null) 
									{
										Int.SqlImmed("UPDATE rk SET rkmahnsperrbis = SYSDATE + 21 WHERE rkarztnr = :dlgBEZRetoure.dfArztNr AND rkhalternr = :dlgBEZRetoure.dfHalterNr AND rkkzzahl<2");
									}
									else
									{
										Int.SqlImmed("UPDATE rk SET rkmahnsperrbis = SYSDATE + 21 WHERE rkarztnr = :dlgBEZRetoure.dfArztNr AND rkhalternr = :dlgBEZRetoure.dfHalterNr AND rkrechnr = :dlgBEZRetoure.dfRechnungNr AND rkkzzahl<2");
									}
								}
							}
							else
							{
								App.dlgBEZRetoure.dtNaechstEinzug = App.dlgBEZRetoure.dfEinzug.DateTime;
								if (App.dlgBEZRetoure.dfRechnungNr.Number == Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"UPDATE bezs SET bezsanzretoure = :dlgBEZRetoure.nRetAnz, bezsltzteinzug = NULL, bezserldat = NULL, bezsabdatum = :dlgBEZRetoure.dtNaechstEinzug, bezsanzseitretoure=0
WHERE bezserfdat = :dlgBEZRetoure.dtPErfDat
AND bezsarztnr = :dlgBEZRetoure.dfArztNr AND bezshalternr = :dlgBEZRetoure.dfHalterNr AND bezsrechnr IS NULL");
								}
								else
								{
									Int.SqlImmed(@"UPDATE bezs SET bezsanzretoure = :dlgBEZRetoure.nRetAnz, bezsltzteinzug = NULL, bezserldat = NULL, bezsabdatum = :dlgBEZRetoure.dtNaechstEinzug, bezsanzseitretoure=0
WHERE bezserfdat = :dlgBEZRetoure.dtPErfDat
AND bezsarztnr = :dlgBEZRetoure.dfArztNr AND bezshalternr = :dlgBEZRetoure.dfHalterNr AND bezsrechnr = :dlgBEZRetoure.dfRechnungNr");
								}
							}
							App.dlgBEZRetoure.lsText = "Bankeinzug-Retoure (" + Sal.NumberToStrX(App.dlgBEZRetoure.nRetAnz, 0) + ". Mal) - Beleg-Nr." + Int.PalStrNum(App.dlgBEZRetoure.dfBelegNr.Number, 5, 0);
							// 10.12.18 Ä1809
							if (App.dlgBEZRetoure.rb1.Checked) 
							{
							}
							else
							{
								App.dlgBEZRetoure.lsText = App.dlgBEZRetoure.lsText + @"
Kontenlöschung!";
							}

							Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :dlgBEZRetoure.dfArztNr, :dlgBEZRetoure.dfHalterNr, :dlgBEZRetoure.dfRechnungNr,
:dlgBEZRetoure.lsText, SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, SYSDATETIME)");
							Int.PalAktionDatum(App.dlgBEZRetoure.dtBuchDat, App.dlgBEZRetoure.dfArztNr.Number, App.dlgBEZRetoure.dfHalterNr.Number, App.dlgBEZRetoure.dfRechnungNr.Number, "\'RG\'", "\'BEZR\'" + Sal.NumberToStrX(App.dlgBEZRetoure.nRetAnz, 0), 1, 0, 
								App.dlgBEZRetoure.dfGebuehren.Number, 0, SalNumber.Null, SalNumber.Null, "");
							Int.PalLog("BEZRet " + Int.PalStrNum(App.dlgBEZRetoure.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(App.dlgBEZRetoure.dfHalterNr.Number, 5, 0));
						}
					}
				}
				else if (strPBericht == "EWA-Liste.lst")  // 28.11.16 Ä1437
				{
					if ((strTargetFormat == "PRN" || bePost) && !(bArchiv)) 
					{
						if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							Int.SqlImmedX("UPDATE ewa SET ewaerldat = SYSDATETIME WHERE ewaerldat = '1900-1-1'");
							// 16.11.07
							Int.PalLog("Druck " + strTargetFormat + " Ok");

						}
						else
						{
							Int.SqlImmedX("UPDATE ewa SET ewaerldat = NULL WHERE ewaerldat = '1900-1-1'");
						}
					}
					else
					{
						Int.SqlImmedX("UPDATE ewa SET ewaerldat = NULL WHERE ewaerldat = '1900-1-1'");
					}
				}
				else if (strPBericht == "Anweisungsbelege.lst") 
				{
					if ((strTargetFormat == "PRN" || bePost) && !(bArchiv)) 
					{
						if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							App.frmMain.dtCurrentDate = SalDateTime.Current;
							Int.SqlImmedX("UPDATE ab SET abdrudat = :frmMain.dtCurrentDate WHERE abdrudat = '1900-1-1'");
							Int.PalLog("Druck " + strTargetFormat + " Ok");

						}
						else
						{
							Int.SqlImmedX("UPDATE ab SET abdrudat = NULL WHERE abdrudat = '1900-1-1'");
						}
					}
					else
					{
						Int.SqlImmedX("UPDATE ab SET abdrudat = NULL WHERE abdrudat = '1900-1-1'");
					}
				}
				else if (strPBericht == "Brief Fiskaly.crd") 
				{
					if ((strTargetFormat == "PRN" || bePost) && !(bArchiv)) 
					{
						if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							App.frmMain.strBuchText = "TSE-Bestellung bestätigt (API-Key:" + App.frmAerzte.dfAPIKey.Text + ")";
							Int.SqlImmed(@"INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :strBNZei, :frmAerzte.dfArztNr, 0, 0,
:frmMain.strBuchText , SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
							Int.PalLog("Druck " + strPBericht + "/" + strTargetFormat + " Ok");

						}
					}
				}
				else if (strPBericht == "TSK-Waisen Rückzahlung.lst") 
				{
					if ((strTargetFormat == "PRN" || bePost) && !(bArchiv)) 
					{
						if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							App.frmTSKWaisen.PalBuchen();
						}
					}
				}

				// 01.12.11
				// 26.03.13 Ä901 + If not bArchiv	raus: 27.08.18 Ä1766
				if (!(bArchiv)) 
				{
					// Call PalLog( 'Druck Rechnung  FetchEnd 20 ' || SalNumberToStrX( bArchiv, 0 ) )
					// Call PalLog( 'Druck Rechnung  FetchEnd 21' )
					App.frmMain.dtDatVM = SalDateTime.Null;
					// Call PalLog( 'Druck Rechnung  FetchEnd 22 ' || SalNumberToStrX( bePost, 0 ) )
				}
				// 27.08.18 Ä1766 + Bericht
				// 25.02.11
				// Call PalLog( 'Druck Rechnung  FetchEnd 23' )
				// 27.08.18 Ä1766 + Bericht
				if (bePost) 
				{
					Int.PalLog("Druckende via " + strTargetFormat + ": " + strPBericht + " auf " + strePostFileName);
				}
				else if (bArchiv) 
				{
					Int.PalLog("Druckende in Archiv: " + strPBericht + " auf " + strePostFileName);
				}
				else
				{
					Int.PalLog("Druckende via " + strTargetFormat + ": " + strPBericht + " auf " + strPrn + " an " + strPort);
				}
				// Call PalLog( 'Druck Rechnung  FetchEnd 24' )
				if (!(bArchiv)) 
				{
					if (strTargetFormat == "PRN" || bePost) 
					{
						// 07.05.12 auskommentiert
						// Call SalMessageBox( 'Druck abgeschlossen', 'Ok', MB_Ok|MB_IconAsterisk )

						// Call SalDestroyWindow(hWndForm)
						this.EndDialog(1);
					}
				}

				// Call SqlDisconnect( hSqlLlDruck2)
				// Call SqlDisconnect(hSqlLlDruck)
				// Call SqlFreeSession( hSession )

			}

			return 0;
			#endregion
		}
		// ! Function: fktReportPrintLISTE
		// Description:
		// Returns
		// Parameters
		// Number: p_PrintMode
		// String: p_ReportFileName
		// Static Variables
		// Local variables
		// Number: l_nVoid
		// Number: l_LlHandle
		// String: l_ReportTitle
		// Number: l_PrintType
		// String: l_sPrintDevice
		// Number: l_nRet
		// String: l_ReportSql
		// Sql Handle: l_hSqlReport
		// Number: l_nBoxStatus
		// Number: l_nBoxCount
		// Number: l_nBoxStep
		// String: l_ReportSqlCount
		// Boolean: l_bCountB4
		// String: l_sDebugZeit
		// Number: l_nRetPrintFields
		// String: l_sTempDir
		// String: l_sTempPreviewFile
		// Boolean: l_bExit
		// Number: l_nCountChartsVorTabelle
		// Number: l_nCountChartsInTabelle
		// Actions
		// Set l_ReportTitle=  c_RICRepRolle.c_RICRepMaske.c_fktGetInfoZeile(  )
		// if l_PrintType = LL_PROJECT_LIST
		// If l_PrintType = LL_PROJECT_CARD
		// Set l_PrintType = c_fktGetPrintType()
		// Set l_bExit = FALSE
		// If c_fktGetReportSql( l_ReportSql, l_ReportSqlCount )
		// If gbDEBUG AND (p_PrintMode = TRUE)
		// Call SalModalDialog( dlgShowSql, hWndForm, l_ReportSql )
		// Call fktShowSqlStatement( l_ReportSql )
		// If SalMessageBox( "Bericht anzeigen?", "Report", MB_YesNo|MB_IconQuestion) = IDNO
		// Return FALSE
		// Set p_PrintMode = LL_PRINT_PREVIEW
		// Call LlSetDebug( LL_DEBUG_CMBTLL )
		// Call RmSqlConnect ( l_hSqlReport, gsBASE )
		// Set l_bCountB4 = FALSE
		// Set l_bCountB4 = TRUE
		// If l_bCountB4 = TRUE
		// If RmSqlImmediate( l_hSqlReport, l_ReportSqlCount ) = TRUE
		// If RmSqlImmediate( l_hSqlReport, STRING_Null ) = FETCH_Ok
		// Call RmSqlCommit( l_hSqlReport )
		// Set l_nBoxCount =  nRBV[0]
		// Else
		// Set l_nBoxCount =  100
		// If l_nBoxCount = 0
		// Call SalMessageBox( "Keine Daten zur Anzeige vorhanden.", "Report", MB_Ok)
		// Else
		// Set l_nBoxStep = 100 / l_nBoxCount
		// Set l_LlHandle =  fktGetReportHandle()
		// Set l_sTempDir = c_fktGetReportErgebnisPfad()
		// Set l_sTempPreviewFile = c_fktGetReportErgebnisPfaduDatei()
		// Laufzeitopimierung
		// Abfragen ob Charts in dem Bericht vorhanden sind
		// Set l_nCountChartsVorTabelle = LlPrintGetChartObjectCount( l_LlHandle, LL_GETCHARTOBJECTCOUNT_CHARTOBJECTS_BEFORE_TABLE )
		// Set l_nCountChartsInTabelle = LlPrintGetChartObjectCount( l_LlHandle, LL_GETCHARTOBJECTCOUNT_CHARTCOLUMNS )
		// If l_nCountChartsVorTabelle > 0
		// If l_nCountChartsInTabelle > 0
		// Set l_nRet =  LlDefineVariableStart( l_LlHandle)
		// If l_PrintType = LL_PROJECT_LIST
		// Set l_nRet =  LlDefineFieldStart( l_LlHandle )
		// Set l_nRet =  LlSetOption(l_LlHandle, LL_OPTION_ADDVARSTOFIELDS, TRUE )
		// Else If l_PrintType = LL_PROJECT_CARD
		// Set l_nRet =  LlDefineVariableStart( l_LlHandle )
		// vorab die Feld-Variablen initialisieren
		// fuer Definition jeder Variablen bzw Feld (SQLSelect)
		// Call fktReportDefineSystemVariablen( l_LlHandle, FALSE )
		// If RmSqlImmediate( l_hSqlReport, l_ReportSql ) = TRUE
		// If RmSqlImmediate( l_hSqlReport, STRING_Null ) = FETCH_Ok
		// Call RmSqlCommit( l_hSqlReport )
		// Chart Variablen initialisieren
		// If (l_nCountChartsVorTabelle + l_nCountChartsInTabelle )> 0
		// Set l_nRet =  LlSetOption(l_LlHandle, LL_OPTION_USECHARTFIELDS, TRUE )
		// If l_PrintType = LL_PROJECT_LIST
		// If fktReportFillFields( l_LlHandle )
		// Else If l_PrintType = LL_PROJECT_CARD
		// If fktReportFillVariablen( l_LlHandle )
		// Set l_nRet =  LlPrintWithBoxStartA( l_LlHandle, l_PrintType, p_ReportFileName, p_PrintMode, LL_BOXTYPE_NORMALMETER, hWndForm, l_ReportTitle )
		// Set l_nRet =  LlSetOptionStringA(l_LlHandle, LL_OPTIONSTR_EXPORTS_ALLOWED, gsRM_LIZENCSE_EXPORTFORMATS)
		// Select Case p_PrintMode
		// Case LL_PRINT_EXPORT
		// Set l_sPrintDevice = c_fktGetExportModul()
		// If l_sPrintDevice = STRING_Null
		// Set l_nRet =  LlPrintOptionsDialogA( l_LlHandle, hWndForm, "bitte wählen Sie die Ausgabeart für
		// " || l_ReportTitle)
		// If l_nRet = LL_ERR_USER_ABORTED
		// Return FALSE
		// If l_nRet != 0
		// Call c_fktPrtErrorMsg( l_LlHandle, l_nRet )
		// Set l_sPrintDevice = SalStrRepeatX( " ", 254 )
		// Set l_nRet =  LlPrintGetOptionStringA(l_LlHandle, LL_PRNOPTSTR_EXPORT, l_sPrintDevice, 254 )
		// Call c_fktSetExportModul( l_sPrintDevice )
		// Else
		// Set l_nRet =  LlPrintSetOptionStringA(l_LlHandle, LL_PRNOPTSTR_EXPORT, l_sPrintDevice )
		// c_fktFetchExportVariablen()
		// If c_RICRepRolle.c_RICRepMaske.c_RICReport.c_fktFetchExportVariablen(  )
		// If c_fktGetExportParameter()
		// Return FALSE
		// If l_nRet != 0
		// Call c_fktPrtErrorMsg( l_LlHandle, l_nRet )
		// Break
		// Case LL_PRINT_NORMAL
		// Set l_sPrintDevice = "PRN"
		// If c_fktGetZeigeDruckerauswahl( )
		// Set l_nRet =  LlPrintOptionsDialogA( l_LlHandle, hWndForm, "bitte wählen Sie die Ausgabeart für
		// " || l_ReportTitle)
		// If l_nRet = LL_ERR_USER_ABORTED
		// Return FALSE
		// Break
		// Case LL_PRINT_FILE
		// Set l_sPrintDevice = "TXT"
		// Break
		// Case LL_PRINT_PREVIEW
		// Set l_sPrintDevice = "PRV"
		// Set l_nRet =  LlSetOption(l_LlHandle, LL_OPTION_ESC_CLOSES_PREVIEW, TRUE )
		// Break
		// Set l_nRet =   LlPreviewSetTempPathA( l_LlHandle, l_sTempDir )
		// Set l_nRet =  LlPrint( l_LlHandle )
		// Set l_nBoxStatus = 0
		// Set l_nRet =  LlPrintSetBoxTextA( l_LlHandle, "Beginne mit dem Ausdruck...", l_nBoxStatus)
		// If l_nRet = LL_ERR_USER_ABORTED
		// Return FALSE
		// Chart vor Tabelle ?
		// If l_nCountChartsVorTabelle > 0
		// If RmSqlImmediate( l_hSqlReport, l_ReportSql ) = TRUE
		// Loop
		// If RmSqlImmediate( l_hSqlReport, STRING_Null ) = FETCH_Ok
		// Set l_nRet = 0
		// Fuellen der Felder in Loop mit dem Ergebnis aus Select
		// If l_nBoxStatus <99
		// Set l_nBoxStatus = l_nBoxStatus + l_nBoxStep
		// Set l_nRet =  LlPrintSetBoxTextA( l_LlHandle, "Drucke Report -Grafik
		// "|| l_ReportTitle || "
		// mit " || SalNumberToStrX( l_nBoxCount, 0) || " Datensätzen", l_nBoxStatus)
		// If l_nRet = LL_ERR_USER_ABORTED
		// Set l_bExit = TRUE
		// Break
		// If l_PrintType = LL_PROJECT_LIST
		// If fktReportFillFields( l_LlHandle )
		// Set l_nRet = LlPrintFields( l_LlHandle )
		// If fktReportFillChartFields( l_LlHandle )
		// Call LlPrintDeclareChartRow( l_LlHandle , LL_DECLARECHARTROW_FOR_OBJECTS )
		// If l_nRet = LL_WRN_REPEAT_DATA
		// Set l_nRet = LlPrint( l_LlHandle )
		// Set l_nRet = LlPrintFields( l_LlHandle )
		// Else If l_PrintType = LL_PROJECT_CARD
		// If fktReportFillVariablen( l_LlHandle )
		// Set l_nRet = LlPrint( l_LlHandle )
		// Else
		// While LlPrintFieldsEnd( l_LlHandle ) = LL_WRN_REPEAT_DATA
		// Set l_nRet =  LlPrintSetBoxTextA( l_LlHandle, "Fertig!", 100)
		// Break
		// If l_nCountChartsInTabelle > 0
		// If RmSqlImmediate( l_hSqlReport, l_ReportSql ) = TRUE
		// Loop
		// If RmSqlImmediate( l_hSqlReport, STRING_Null ) = FETCH_Ok
		// Set l_nRet = 0
		// Fuellen der Felder in Loop mit dem Ergebnis aus Select
		// If l_nBoxStatus <99
		// Set l_nBoxStatus = l_nBoxStatus + l_nBoxStep
		// Set l_nRet =  LlPrintSetBoxTextA( l_LlHandle, "Drucke Report
		// "|| l_ReportTitle || "
		// mit " || SalNumberToStrX( l_nBoxCount, 0) || " Datensätzen", l_nBoxStatus)
		// If l_nRet = LL_ERR_USER_ABORTED
		// Set l_bExit = TRUE
		// Break
		// If l_PrintType = LL_PROJECT_LIST
		// If (l_nCountChartsVorTabelle + l_nCountChartsInTabelle )> 0
		// If fktReportFillChartFields( l_LlHandle )
		// Call LlPrintDeclareChartRow( l_LlHandle , LL_DECLARECHARTROW_FOR_TABLECOLUMNS )
		// If fktReportFillFields( l_LlHandle )
		// Set l_nRet = LlPrintFields( l_LlHandle )
		// If l_nRet = LL_WRN_REPEAT_DATA
		// Set l_nRet = LlPrint( l_LlHandle )
		// Set l_nRet = LlPrintFields( l_LlHandle )
		// Else If l_PrintType = LL_PROJECT_CARD
		// If fktReportFillVariablen( l_LlHandle )
		// Set l_nRet = LlPrint( l_LlHandle )
		// Else
		// While LlPrintFieldsEnd( l_LlHandle ) = LL_WRN_REPEAT_DATA
		// Set l_nRet =  LlPrintSetBoxTextA( l_LlHandle, "Fertig!", 100)
		// Break
		// Set l_nRet =  LlPrintEnd( l_LlHandle, 0 )
		// If l_sPrintDevice = "PRV"
		// If RmGetItemName( hWndItem) = "cfrmRICReportPreview"
		// Call SalSendMsg( hWndItem, RIC_REPORTSHOWPREVIEW, SalHStringToNumber( SalStrLeftX( l_sTempPreviewFile, SalStrLength( l_sTempPreviewFile ) -3 ) || "LL" ), 0 )
		// Set l_nRet = LlPreviewDeleteFilesA( l_LlHandle, SalStrLeftX( l_sTempPreviewFile, SalStrLength( l_sTempPreviewFile ) -3 ) || "LL", STRING_Null )
		// Set l_nRet = c_fktLoescheErgebnisDatei( )
		// Else
		// Set l_nRet = LlPreviewDisplayA( l_LlHandle, l_sTempPreviewFile, STRING_Null, hWndForm )
		// If l_nRet != 0
		// Call SalMessageBox( "Fehler-Nummer: " || SalNumberToStrX( l_nRet, 0) || " beim Anzeigen der Vorschau.
		// Die Datei >>" || l_sTempPreviewFile || "<< konnte nicht erzeugt werden.", "Report", MB_Ok)
		// Set l_nRet = LlPreviewDeleteFilesA( l_LlHandle, l_sTempPreviewFile, STRING_Null )
		// Call RmSqlDisconnect ( l_hSqlReport )
		// Return TRUE
		// Return FALSE
		/// <summary>
		/// </summary>
		/// <param name="nPArzt"></param>
		/// <returns></returns>
		public SalNumber PalHolePMArzt(SalNumber nPArzt)
		{
			#region Actions
			using (new SalContext(this))
			{
				nPMArzt = nPArzt;
				// 29.07.16 Ä1404 entfernt
				Int.SqlImmedSel("SELECT pihauptnr INTO :dlgLlDruck.nPMArzt FROM pi WHERE pinebennr = :dlgLlDruck.nPMArzt");
				if (nPMArzt == 0 || nPMArzt == SalNumber.Null) 
				{
					nPMArzt = nPArzt;
				}
				return nPMArzt;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalNextVirtKonto()
		{
			#region Local Variables
			SalNumber nNext = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				// 13.11.17 Ä1637 VirtKonto abgeschaltet
				// 06.05.13 Ä935 neuen Satz Virtkonto
				// Call SqlImmedSel('SELECT MAX(hvirtkonto) INTO :dlgLlDruck.nMaxVirtKonto FROM h
				// WHERE hvirtkonto between 12000000 and 12199998 OR hvirtkonto BETWEEN 12205433 AND 12305462')
				// If nMaxVirtKonto = NUMBER_Null
				// Set nMaxVirtKonto = 12000000
				// Set strHVirtKonto = SalNumberToStrX(nMaxVirtKonto,0)
				// Return TRUE
				// Else If nMaxVirtKonto = 12305462
				// Set strHVirtKonto = ''
				// Return FALSE
				// Else
				// If nMaxVirtKonto = 12199998
				// Set nMaxVirtKonto = 12205432
				// Set nMaxVirtKonto = nMaxVirtKonto + 1
				// Set strHVirtKonto = SalNumberToStrX(nMaxVirtKonto,0)
				// Return TRUE
				return false;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nNr"></param>
		/// <returns></returns>
		public SalString PalNumberToWords(SalNumber nNr)
		{
			#region Local Variables
			SalString strResult = "";
			SalString strWork = "";
			SalArray<SalString> strWord = new SalArray<SalString>(10);
			SalNumber nZahl = 0;
			SalNumber nCount = 0;
			SalNumber nLen = 0;
			SalNumber nStelle = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				nCount = 0;
				while (nCount < 10) 
				{
					strWord[nCount] = "";
					nCount = nCount + 1;
				}

				strWork = nNr.ToString(2);
				nCount = strWork.Scan(",");
				if (nCount != -1) 
				{
					strWork = strWork.Left(nCount);
				}
				nNr = Int.PalValNum(strWork);
				nLen = strWork.Length;

				if (nNr == 10) 
				{
					strResult = "zehn";
				}
				else if (nNr == 11) 
				{
					strResult = "elf";
				}
				else if (nNr == 12) 
				{
					strResult = "zwölf";
				}
				else if (nNr == 1) 
				{
					strResult = "eins";
				}
				else if (nNr == 30) 
				{
					strResult = "dreißig";
				}
				else if (nNr == 60) 
				{
					strResult = "sechzig";
				}
				else
				{
					strResult = "";
					nCount = 0;
					while (nCount < nLen) 
					{
						nZahl = Int.PalValNum(strWork.Mid(nLen - nCount - 1, 1));
						nStelle = nCount + 1;

						if (nStelle == 1) 
						{
							if (nZahl == 1) 
							{
								strWord[nCount + 1] = "ein";
							}
							else if (nZahl == 2) 
							{
								strWord[nCount + 1] = "zwei";
							}
							else if (nZahl == 3) 
							{
								strWord[nCount + 1] = "drei";
							}
							else if (nZahl == 4) 
							{
								strWord[nCount + 1] = "vier";
							}
							else if (nZahl == 5) 
							{
								strWord[nCount + 1] = "fünf";
							}
							else if (nZahl == 6) 
							{
								strWord[nCount + 1] = "sechs";
							}
							else if (nZahl == 7) 
							{
								strWord[nCount + 1] = "sieben";
							}
							else if (nZahl == 8) 
							{
								strWord[nCount + 1] = "acht";
							}
							else if (nZahl == 9) 
							{
								strWord[nCount + 1] = "neun";
							}
							else if (nZahl == 0) 
							{
								strWord[nCount + 1] = "";
							}
						}
						else if (nStelle == 2) 
						{
							if (nZahl == 1) 
							{
								strWord[nCount + 1] = "zehn";
							}
							else if (nZahl == 2) 
							{
								strWord[nCount + 1] = "undzwanzig";
							}
							else if (nZahl == 3) 
							{
								strWord[nCount + 1] = "unddreißig";
							}
							else if (nZahl == 4) 
							{
								strWord[nCount + 1] = "undvierzig";
							}
							else if (nZahl == 5) 
							{
								strWord[nCount + 1] = "undfünfzig";
							}
							else if (nZahl == 6) 
							{
								strWord[nCount + 1] = "undsechzig";
							}
							else if (nZahl == 7) 
							{
								strWord[nCount + 1] = "undsiebzig";
							}
							else if (nZahl == 8) 
							{
								strWord[nCount + 1] = "undachtzig";
							}
							else if (nZahl == 9) 
							{
								strWord[nCount + 1] = "undneunzig";
							}
							else if (nZahl == 0) 
							{
								strWord[nCount + 1] = "";
							}
						}

						nCount = nCount + 1;
						strResult = strResult + strWord[nCount];
					}
					if (strResult.Left(3) == "und") 
					{
						strResult = strResult.Mid(3, 255);
					}
				}
				return strResult;
			}
			#endregion
		}
		// ! Function: PalArchiv
		// Description:
		// Returns
		// Parameters
		// String: strKunde
		// Static Variables
		// Local variables
		// String: strUnterordner
		// Actions
		// If strPfadArchiv = ''
		// Else
		// Set strUnterOrdner = 'A' || PalStrNullen(SalNumberToStrX(  dfArztNr, 0 ),4)
		// Call PalExplorer(strUnterOrdner, FALSE)
		// If cbDebug
		// Call SalStatusSetText(hWndForm, 'LLSetDebug')
		// Call axLL.LlSetDebug( LL_DEBUG_CMBTLL )
		// Else
		// Call axLL.LlSetDebug( 0 )
		// !
		// Call PalSetSelect()
		// If SalStrRightX(cmbDruVor,4) = '.lbl'
		// Set nProjectType = LL_PROJECT_LABEL
		// Else If SalStrRightX(cmbDruVor,4) = '.crd'
		// Set nProjectType = LL_PROJECT_CARD
		// Else
		// Set nProjectType = LL_PROJECT_LIST
		// Call PalDefineCurrentRecord(FALSE)
		// Call PalDefineCurrentRecord(TRUE)
		// Call SalStatusSetText(hWndForm, 'LLPrintWithBoxStart')
		// Set bDrucken = FALSE
		// ! 12.09.08 MK
		// Call axLL.LlDbAddTable( '', '', nRet )
		// 10.05.10 Test
		// If strKunde != ''
		// Set strKunde = '\\' || strKunde
		// Call axLL.LlXSetParameter( LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", 'Export.File', SalStrLeftX(cmbDruVor, SalStrScan(cmbDruVor,'.')) || PalDateToStrJJJJMMTThhmmss( SalDateCurrent() ) ||  '.pdf', nRet )
		// Call axLL.LlXSetParameter( LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", 'Export.Path', strPfadArchiv || strDB || strKunde || '\\', nRet )
		// Call axLL.LlXSetParameter( LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", 'Export.Quiet', '1', nRet )
		// !
		// If bWithBox
		// Call axLL.LlPrintWithBoxStart( nProjectType, strDir || '\\Layouts\\' || cmbDruVor, LL_PRINT_USERSELECT, LL_BOXTYPE_NORMALMETER, nHandle, 'Drucke ' || strLayout, nRet )
		// Call axLL.LlPrintStart( nProjectType, strDir || '\\Layouts\\' || cmbDruVor, LL_PRINT_EXPORT, nRet )
		// Set bDrucken = TRUE
		// Set nPages = 1
		// Else
		// Call axLL.LlPrintStart( nProjectType, strDir || '\\Layouts\\' || cmbDruVor, LL_PRINT_PREVIEW, nRet )
		// Set bWithBox = TRUE
		// 10.05.10 Test
		// Call frmBehErf.axLL.LlPrintSetOptionString( LL_PRNOPTSTR_EXPORT, "PDF", nRet )
		// !
		// Call SalWaitCursor(TRUE)
		// Call PalAusgabe(  )
		// !
		// Call SalWaitCursor(FALSE)
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalArchiv()
		{
			#region Local Variables
			SalString strDatum = "";
			SalString strFile = "";
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				this.SetStatusBarText("PDF-Datei wird in Archiv erstellt...");
				// If cbDebug
				// Call axLL.LlSetDebug( LL_DEBUG_CMBTLL )
				// Else
				// Call axLL.LlSetDebug( 0 )
				// 22.11.21
				bePost = false;
				// !
				if (strPBericht.Right(4) == ".lbl") 
				{
					nProjectType = Const.LL_PROJECT_LABEL;
				}
				else if (strPBericht.Right(4) == ".crd") 
				{
					nProjectType = Const.LL_PROJECT_CARD;
				}
				else
				{
					nProjectType = Const.LL_PROJECT_LIST;
				}
				PalDefineCurrentRecord(false);
				PalDefineCurrentRecord(true);
				if (cbLog.Checked) 
				{
					Int.PalLogDauer(strPBericht, "01", SalDateTime.Current - dtMin);
				}
				dtMin = SalDateTime.Current;
				bDrucken = false;
				// ! 12.09.08 MK
				// Call axLL.LlDbAddTable( '', '', nRet )
				// 27.08.18 Ä1767 + nePostArztNr
				strFile = strPBericht.Left(strPBericht.Scan(".")) + "_" + Int.PalStrNullenausNum(nePostArztNr, 4) + "_" + Int.PalDateToStrJJJJMMTThhmmss(SalDateTime.Current) + ".pdf"; // 14.07.17
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "Export.File", strFile, ref nRet);
				// 25.04.14
				strDatum = Int.PalDateToStrJJJJMMTT(SalDateTime.Current);
				// Set strDatum = 'K:\\PDF\\' || strDatum
				// If Not VisDosExist(strDatum)
				// If Not SalFileCreateDirectory( strDatum)
				// Set strDatum = 'K:\\PDF'
				// 17.10.17 Ä1618 tvnnas\\PDF -->>
#if FECHER
                strDatum = "\\\\tvn1.local\\dfs\\PDF-Archiv\\Lokal\\" + strDatum;
#else
				strDatum = Const.PATH_PDFARCHIVE_LOKAL + strDatum;
				//strDatum = "\\\\tvn1.local\\dfs\\PDF-Archiv\\Lokal\\" + strDatum;
#endif
				if (!(Vis.DosExist(strDatum))) 
				{
					if (!(Sal.FileCreateDirectory(strDatum))) 
					{
						//strDatum = Const.PATH_PDFARCHIVE_LOKAL;

#if FECHER
						strDatum = "F:\\PDF-Archiv\\Lokal";
#else
						strDatum = Const.PATH_PDFARCHIVE_LOKAL;
						//strDatum = "\\\\tvn1.local\\dfs\\PDF-Archiv\\Lokal";
#endif
                    }
                }
				if (cbLog.Checked) 
				{
					Int.PalLogDauer(strPBericht, "02", SalDateTime.Current - dtMin);
					dtMin = SalDateTime.Current;
				}

				// 23.02.21
				// Set strDatum = VisDosGetEnvString( 'TEMP' )

				// 25.04.14 '\\\\tvnnas\\PDF' -> strDatum
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "Export.Path", strTemp, ref nRet);
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "Export.Quiet", "1", ref nRet);
				// 10.07.13
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "PDF.PDFAMode", "1", ref nRet);
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "PDF.Author", "moveta r.V.k.V.", ref nRet);

				// 27.08.18 Ä1766
				strTargetFormat = "PDF";
				// 23.02.21
				// Set strePostFileName = strDatum || '\\' || strFile
				strePostFileName = strTemp + "\\" + strFile;
				if (cbLog.Checked) 
				{
					Int.PalLogDauer(strPBericht, "03", SalDateTime.Current - dtMin);
					dtMin = SalDateTime.Current;
				}

				App.frmMain.axLL.LlSetPrinterDefaultsDir(strAllUsersProfile, ref nRet);
				// Call SalMessageBox( '\'' || strAllUsersProfile || '\'
				// Return = ' || SalNumberToStrX( nRet, 0), 'LlSetPrinterDefaultsDir', MB_Ok|MB_IconAsterisk )
				// !
				// Call axLL.LlPrintWithBoxStart( nProjectType, strDir || '\\Layouts\\' || cmbDruVor, LL_PRINT_USERSELECT, LL_BOXTYPE_NORMALMETER, nHandle, 'Drucke ' || strLayout, nRet )
				App.frmMain.axLL.LlPrintStart(nProjectType, strFileName, Const.LL_PRINT_EXPORT, ref nRet);
				if (cbLog.Checked) 
				{
					Int.PalLogDauer(strPBericht, "04", SalDateTime.Current - dtMin);
					dtMin = SalDateTime.Current;
				}
				bDrucken = true;
				nPages = 1;
				// 10.05.10 Test
				// Call frmBehErf.axLL.LlPrintSetOptionString( LL_PRNOPTSTR_EXPORT, "PDF", nRet )###
				App.frmMain.axLL.LlPrintSetOptionString(Const.LL_PRNOPTSTR_EXPORT, "PDF", ref nRet);

				// !
				Sal.WaitCursor(true);
				// 26.03.13 Ä901
				bArchiv = true;

				PalAusgabe();
				// Call PalLogDauer( strPBericht, '05', SalDateCurrent(  ) - dtMin )
				// Set dtMin = SalDateCurrent(  )
				// !
				this.SetStatusBarText("");
				// 23.02.21
				if (Vis.FileCopy(strePostFileName, strDatum + "\\" + strFile)) 
				{
					if (cbLog.Checked) 
					{
						Int.PalLogDauer(strPBericht, "06j: " + strePostFileName + " -> " + strDatum + "\\" + strFile, SalDateTime.Current - dtMin);
					}
				}
				else
				{
					if (cbLog.Checked) 
					{
						Int.PalLogDauer(strPBericht, "06n: " + strePostFileName + " -> " + strDatum + "\\" + strFile, SalDateTime.Current - dtMin);
					}
				}
				dtMin = SalDateTime.Current;

				// 10.07.13
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "Export.File", "", ref nRet);
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "Export.Path", "", ref nRet);
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "Export.Quiet", "0", ref nRet);
				// 01.12.16
				// Call axLL.LlPrintEnd(0,nRet)
				// Call SalPause( 3000 )

				if (cbLog.Checked) 
				{
					Int.PalLogDauer(strPBericht, "07", SalDateTime.Current - dtMin);
					dtMin = SalDateTime.Current;
				}
				Sal.WaitCursor(false);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalePost()
		{
			#region Local Variables
			SalString strDatum = "";
			SalString strArchiv = "";
			SalString strFile = "";
			SalNumber nStatus = 0;
			SalString strLokal = "";
			// 31.07.19
			SalBoolean bPOk = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				this.SetStatusBarText("PDF-Datei wird für e-Post erstellt...");
				// 06.03.18 F3125
				bePost = true;

				// If cbDebug
				// Call axLL.LlSetDebug( LL_DEBUG_CMBTLL )
				// Else
				// Call axLL.LlSetDebug( 0 )
				// 17.01.18
				// 04.05.18
				// Call axLL.LlSetDebug( LL_DEBUG_CMBTLL|LL_DEBUG_CMBTLL_LOGTOFILE )
				App.frmMain.axLL.LlSetDebug(((Const.LL_DEBUG_CMBTLL | Const.LL_DEBUG_CMBTLL_NOSYSINFO) | Const.LL_DEBUG_CMBTLL_LOGTOFILE));

				// !
				if (strPBericht.Right(4) == ".lbl") 
				{
					nProjectType = Const.LL_PROJECT_LABEL;
				}
				else if (strPBericht.Right(4) == ".crd") 
				{
					nProjectType = Const.LL_PROJECT_CARD;
				}
				else
				{
					nProjectType = Const.LL_PROJECT_LIST;
				}
				PalDefineCurrentRecord(false);
				PalDefineCurrentRecord(true);
				bDrucken = false;
				// ! 12.09.08 MK
				// Call axLL.LlDbAddTable( '', '', nRet )
				// 27.08.18 Ä1767 + nePostArztNr
				if (strPBericht == "Rechnungen.lst" || strPBericht == "Überweisung A4.lst" || strPBericht == "Rechnung A4.lst" || strPBericht == "Überweisung AT.lst" || strPBericht == "Rechnung A4 tvn.lst") 
				{
					if (strPSpezial == "LE") 
					{
						// 04.09.18 Ä1767
						nePostArztNr = App.frmSpeRg.nArztNr;
					}
					else if (strPSpezial == "RK" || strPSpezial == "RK2") 
					{
						// 04.09.18 Ä1767
						nePostArztNr = App.frmRechPos.dfArztNr.Number;
					}
					else if (strPSpezial == "RN")  // 11.12.08 Ä346
					{
						// 04.09.18 Ä1767
						nePostArztNr = App.frmRechNachdruck.dfArzt.Number;
					}
					else if (strPSpezial == "RI")  // 01.08.23 Ä2120
					{
						nePostArztNr = App.frmMBKEinzeldruck.nA1;
					}
					else if (strPSpezial == "RS")  // 08.12.20 Ä1897
					{
						// 04.09.18 Ä1767
						nePostArztNr = App.frmRechVonBisStorno.nPArztNr;
					}
				}
				else if (strPBericht == "Rechnungsprotokoll.lst")  // 02.05.19
				{
					nePostArztNr = App.frmRechProtneu.dfArztNr.Number;
				}
				strFile = strPBericht.Left(strPBericht.Scan(".")) + "_" + Int.PalStrNullenausNum(nePostArztNr, 4) + "_" + Int.PalDateToStrJJJJMMTThhmmss(SalDateTime.Current) + ".pdf"; // 14.07.17
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "Export.File", strFile, ref nRet);
				// 25.04.14
				strDatum = Int.PalDateToStrJJJJMMTT(SalDateTime.Current);
				// 08.05.19 F4486
				strLokal = Vis.DosGetEnvString("PROGRAMDATA") + "\\EPost";
				if (!(Vis.DosExist(strLokal))) 
				{
					if (!(Sal.FileCreateDirectory(strLokal))) 
					{
					}
				}
				// Set strLokal = VisDosGetEnvString( 'TEMP' )


				// 25.04.14 '\\\\tvnnas\\PDF' -> strDatum	 08.05.19 F4486 strDatum  -> strLokal
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "Export.Path", strLokal, ref nRet);
				// If strBNAbtlg = 'RA'
				// Call axLL.LlXSetParameter( LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", 'Export.Quiet', '0', nRet )
				// Call axLL.LlXSetParameter( LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", 'Export.ShowResult', '1', nRet )
				// Else
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "Export.Quiet", "1", ref nRet);
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "Export.ShowResult", "0", ref nRet);
				// 10.07.13
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "PDF.PDFAMode", "1", ref nRet);
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "PDF.Author", "moveta r.V.k.V.", ref nRet);

				// E-Post kann nicht mehr als 999 Seiten ausgeben
				App.frmMain.axLL.LlPrintSetOption(Const.LL_PRNOPT_JOBPAGES, 999, ref nRet);
				// !
				// Call axLL.LlPrintWithBoxStart( nProjectType, strDir || '\\Layouts\\' || cmbDruVor, LL_PRINT_USERSELECT, LL_BOXTYPE_NORMALMETER, nHandle, 'Drucke ' || strLayout, nRet )
				App.frmMain.axLL.LlPrintStart(nProjectType, strFileName, (Const.LL_PRINT_EXPORT | Const.LL_PRINT_MULTIPLE_JOBS), ref nRet);
				// E-Post kann nicht mehr als 999 Seiten ausgeben
				App.frmMain.axLL.LlPrintSetOption(Const.LL_PRNOPT_JOBPAGES, 999, ref nRet);
				// 27.08.18 Ä1766
				strTargetFormat = "ePost";
				strePostFileName = strDatum + "\\" + strFile;

				bDrucken = true;
				nPages = 1;
				// 10.05.10 Test
				// Call frmBehErf.axLL.LlPrintSetOptionString( LL_PRNOPTSTR_EXPORT, "PDF", nRet )###
				App.frmMain.axLL.LlPrintSetOptionString(Const.LL_PRNOPTSTR_EXPORT, "PDF", ref nRet);

				// !
				Sal.WaitCursor(true);
				// 26.03.13 Ä901
				bArchiv = false;

				// 31.07.19
				// If PalAusgabe(  )
				bPOk = PalAusgabe();
				// !
				this.SetStatusBarText("");
				// 10.07.13
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "Export.File", "", ref nRet);
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "Export.Path", "", ref nRet);
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "Export.Quiet", "0", ref nRet);
				// 01.12.16
				// Call axLL.LlPrintEnd(0,nRet)
				// Call SalPause( 3000 )
				// Set strDatum = 'K:\\PDF\\' || strDatum
				// If Not VisDosExist(strDatum)
				// If Not SalFileCreateDirectory( strDatum)
				// Set strDatum = 'K:\\PDF'
				// 06.03.18 entfernt nach Mail RS mit Florian
				// Set strArchiv = '\\\\sbs2011\\PDF-Archiv\\EPost\\' || PalDateToStrJJJJMMTT( SalDateCurrent(  ) )
				// If Not VisDosExist(strArchiv)
				// If Not SalFileCreateDirectory( strArchiv)
				// Set strArchiv = '\\\\tvnnas\\PDF'
				// Set nStatus = SalFileCopy( strDatum || '\\' || strFile,  strArchiv|| '\\' || strFile, FALSE )
				// If nStatus = FILE_CopyOK
				// Else
				// Call PalLog( 'Archivordner: Schreibfehler' )
				// Call SalMessageBox( 'In den Archivordner ' || strArchiv || ' kann nicht geschrieben werden.', 'Fehler', MB_Ok|MB_IconExclamation )

				if (Sql.Database == "TVN2") 
				{
					strDatum = "K:\\PDF\\" + strDatum;
					if (!(Vis.DosExist(strDatum))) 
					{
						if (!(Sal.FileCreateDirectory(strDatum))) 
						{
							// Set strDatum = 'L:\\PDF'
						}
					}
				}
				else
				{
#if FECHER
                    strDatum = "F:\\PDF-Archiv\\EPost\\" + strDatum;
#else
					strDatum = Const.PATH_EPOST + strDatum; 
					//strDatum = "\\\\tvn1.local\\dfs\\PDF-Archiv\\EPost\\" + strDatum;
#endif

					// Set strDatum = 'K:\\PDF\\' || strDatum
                    if (!(Vis.DosExist(strDatum))) 
					{
						if (!(Sal.FileCreateDirectory(strDatum))) 
						{
							// Set strDatum = Const.PATH_EPOST;
						}
					}
				}

				Var.bOK = true;
				if (!(Vis.DosExist(strDatum))) 
				{
					if (!(Sal.FileCreateDirectory(strDatum))) 
					{
						Var.bOK = false;
						while (true)
						{
							if (Sys.IDRETRY == Sal.MessageBox("E-Post-Ordner " + strDatum + " konnte NICHT erstellt werden.", "Wiederholen?", (Sys.MB_RetryCancel | Sys.MB_IconStop))) 
							{
								if (Sal.FileCreateDirectory(strDatum)) 
								{
									Var.bOK = true;
									break;
								}
							}
							else
							{
								break;
							}
						}
					}
				}
				if (!(Var.bOK)) 
				{
					Int.PalLog(strPBericht + ": E-Post-Ordner " + strDatum + " konnte NICHT erstellt werden!!");
					Sal.MessageBox("E-Post-Ordner " + strDatum + " konnte NICHT erstellt werden!!", "Druck NICHT ok", Sys.MB_IconStop);
				}
				else
				{
					// 26.10.23 F5054
					if (!(Vis.DosExist(strDatum))) 
					{
						if (!(Sal.FileCreateDirectory(strDatum))) 
						{
							Int.PalLog(strPBericht + ": Not-Erst. E-Post Ordner konnte nicht erstellt werden: " + strDatum);
						}
						else
						{
							Int.PalLog(strPBericht + ": Not-Erst. E-Post Ordner wurde erstellt: " + strDatum);
						}
					}
					// 08.05.19 F4496
					nAnzahl = 0;
					if (Vis.DosExist(strLokal + "\\" + strFile)) 
					{
						Int.PalLog(strPBericht + ": E-Post lokal ok in " + strLokal + "\\" + strFile);
						nAnzahl = Vis.FileCopy(strLokal + "\\" + strFile, strDatum + "\\" + strFile);
						if (nAnzahl == 1) 
						{
						}
						else
						{
							// 12.07.19 Ä1859
							// Call SalMessageBox( 'Das Dokument wurde lokal gespeichert, konnte dann aber NICHT nach ' || strDatum || '\\' || strFile || ' ausgegeben werden!!', 'Druck NICHT ok', MB_IconStop )
							while (true)
							{
								if (Sys.IDRETRY == Sal.MessageBox("Das Dokument wurde lokal gespeichert, konnte dann aber NICHT nach " + strDatum + "\\" + strFile + " ausgegeben werden!!", "Druck NICHT ok", (Sys.MB_RetryCancel | Sys.MB_IconStop))) 
								{
									// 22.08.19
									if (!(Vis.DosExist(strDatum))) 
									{
										if (!(Sal.FileCreateDirectory(strDatum))) 
										{
										}
									}

									nAnzahl = Vis.FileCopy(strLokal + "\\" + strFile, strDatum + "\\" + strFile);
									if (nAnzahl == 1) 
									{
										Int.PalLog(strPBericht + ": E-Post / " + nAnzahl.ToString(0) + " Datei kopiert nach " + strDatum + "\\" + strFile);
										break;
									}
									else
									{
										Int.PalLog(strPBericht + ": E-Post / " + nAnzahl.ToString(0) + " Datei NICHT kopiert nach " + strDatum + "\\" + strFile);
									}
								}
								else
								{
									break;
								}
							}
						}
					}
					else if (!(bPOk)) 
					{
						Int.PalLog(strPBericht + ": E-Post keine Daten in " + strLokal + "\\" + strFile);
						Sal.MessageBox("Es wurde kein Dokument ausgegeben, weil keine Daten gefunden wurden.", "Keine Daten", Sys.MB_IconAsterisk);
					}
					else
					{
						Int.PalLog(strPBericht + ": E-Post lokal NICHT ok in " + strLokal + "\\" + strFile);
						Sal.MessageBox("Das Dokument konnte NICHT nach " + strLokal + "\\" + strFile + " ausgegeben werden!!", "Druck NICHT ok", Sys.MB_IconStop);
					}

					if (nAnzahl == 1) 
					{
						if (strPBericht == "Rechnungsprotokoll.lst") 
						{
							Int.SqlImmed(@"UPDATE le SET lestatus='RProt'
WHERE " + Int.PalArztNr("le", App.frmRechProtneu.nArztNr, App.frmRechProtneu.nArztNr2) + @"
AND lebearbeiter=:frmRechProtneu.strBearbeiter
AND lebearbdatum=:frmRechProtneu.dtBearbDatum");
						}
					}
				}
				// 06.03.18 F3125
				bePost = false;
				Sal.WaitCursor(false);
				// 13.03.18 Ä1716 raus 14.05.18
				// Call SalDestroyWindow( hWndForm )
			}

			return 0;
			#endregion
		}
		// Function: PalAusgabe14-00
		// Description:
		// Returns
		// Parameters
		// Static Variables
		// Local variables
		// String: strDrive
		// String: strDir
		// String: strFile
		// String: strExt
		// String: strUebFile
		// Number: nUebFileSize
		// Actions
		// 10.07.13
		// Call axLL.LlXSetParameter( LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", 'PDF.PDFAMode', '1', nRet )
		// Call axLL.LlXSetParameter( LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", 'PDF.Author', 'moveta r.V.k.V.', nRet )
		// If not bArchiv
		// Call axLL.LlPrintGetPrinterInfo( strPrn, strPort, nRet )
		// Set strCustomerNumberAlt = ''
		// Set strCustomerNumber = 'X'
		// If strPBericht = '70-Checkliste.lst' or strPBericht = 'Hitliste Rechnungen.lst' or strPBericht = 'Mitglieder.lst' or SalStrLeftX( strPBericht, 4) = 'MYCO' or strPBericht = 'Partien-Info.lst' or strPBericht = 'Rückerstattungen.lst' or strPBericht = 'TA-Statistik.lst'
		// or strPBericht = 'TA-StatistikVARI.lst' or strPBericht = 'MB-Deckblatt.lst' or strPBericht = 'Gerichtskosten.lst'		! 19.11.13
		// Else
		// 30.09.14 Telefonkonferenz mit neopost und Sa/Da: SalStrScan(strPrn, 'PrintMachine') != -1 -->> (SalStrScan(strPrn, 'PrintMachine') != -1 or SalStrScan(strPrn, 'Tagespost') != -1 or SalStrScan(strPrn, 'PM') != -1)
		// If (SalStrScan(strPrn, 'PrintMachine') != -1 or SalStrScan(strPrn, 'Tagespost') != -1 or SalStrScan(strPrn, 'PM') != -1) And strTargetFormat = 'PRN'
		// Call VisDosSplitPath( strPBericht, strDrive, strDir, strFile, strExt)
		// Set strUebFile = '\\\\archivserver\\Übergabe\\TVN\\' || strFile || PalDateToStrJJJJMMTThhmmss( SalDateCurrent(  ) ) || '.txt'
		// Set strUebFile = 'C:\\Testdaten\\' || strFile || PalDateToStrJJJJMMTThhmmss( SalDateCurrent(  ) ) || '.txt'
		// If Not SalFileOpen( hUebFile, strUebFile, OF_Text|OF_Write )
		// Call PalLog( 'Übergabeordner: Schreibfehler' )
		// Call SalMessageBox( 'In Übergabeordner kann nicht geschrieben werden.', 'Fehler', MB_Ok|MB_IconExclamation )
		// If bDrucken
		// Set nPageCount = 0
		// While nPageCount < nPages
		// If not bArchiv
		// Call SalStatusSetText(hWndForm, 'HoleDaten')
		// Call PalLog( 'LlDruck: D06a' )
		// If PalHoleDaten()
		// Set nCount = 0
		// If not bArchiv
		// Call SalStatusSetText(hWndForm, 'FetchNext')
		// If PalFetchNext(TRUE)
		// Call PalLog( 'LlDruck: D06b' )
		// If not bArchiv
		// Call SalStatusSetText(hWndForm, 'DefineVariables')
		// Call PalDefineCurrentRecord(FALSE)
		// If not bArchiv
		// Call SalStatusSetText(hWndForm, 'DefineFields')
		// Call PalDefineCurrentRecord(TRUE)
		// Call PalLog( 'LlDruck: D06c' )
		// If strBNAbtlg
		// Set nProjectType = nProjectType | LL_FILE_ALSONEW
		// If nProjectType != LL_PROJECT_CARD
		// Call axLL.LlPrint( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 1000
		// Call axLL.LlPrint( nRet )
		// Call PalLog( 'LlDruck: D06c2' )
		// Set nCountRD = nCountRD + 1
		// Set bFetchEnd = FALSE
		// While Not bFetchEnd
		// Call PalLog( 'LlDruck: D06d' )
		// Set nCount = nCount + 1
		// If nProjectType = LL_PROJECT_LIST
		// Call PalDefineCurrentRecord(FALSE)
		// Call PalDefineCurrentRecord(TRUE)
		// Call axLL.LlPrint( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 1000
		// Call axLL.LlPrint( nRet )
		// Set nCountRD = nCountRD + 1
		// Call axLL.LlPrintFields( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 1000
		// Call axLL.LlPrintFields( nRet )
		// Set nCountRD = nCountRD + 1
		// Else
		// Call PalDefineCurrentRecord(FALSE)
		// Call axLL.LlPrint( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 1000
		// Call axLL.LlPrint( nRet )
		// Set nCountRD = nCountRD + 1
		// 11.04.16 F2669
		// If nRet = LL_ERR_USER_ABORTED and strTargetFormat = 'PRN'
		// If IDYES = SalMessageBox( 'Möchten Sie die (Druck-)Ausgabe wirklich abbrechen?', 'Abbruch ?', MB_YesNo|MB_IconQuestion )
		// Call PalLog( 'Druck: Abbruch bestätigt' )
		// Else
		// Set nRet = 0
		// Call PalLog( 'Druck: Abbruch widerrufen' )
		// If nRet = LL_ERR_USER_ABORTED
		// Call axLL.LlPrintEnd( 0, nRet )
		// Call PalLog( 'Druck: Abbruch bei LlPrint' )
		// Set bFetchEnd = TRUE
		// Else
		// 08.05.09 OTF148
		// If nProjectType = LL_PROJECT_LIST
		// Call axLL.LlPrintFields( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 10
		// Call axLL.LlPrint( nRet )
		// Call axLL.LlPrintFields( nRet )
		// Set nCountRD = nCountRD + 1
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 1000
		// Call axLL.LlPrint( nRet )
		// If nProjectType = LL_PROJECT_LIST
		// Call axLL.LlPrintFields( nRet )
		// Set nCountRD = nCountRD + 1
		// If nCountRec > 0
		// Call axLL.LlPrintSetBoxText( 'Drucke ' || strPBericht || ' (' || SalNumberToStrX(nCount,0) || '/' || SalNumberToStrX(nCountRec,0) || ') ...', nCount/nCountRec*100, nRet )
		// Call PalLog( 'LlDruck: D06e' )
		// If Not PalFetchNext(FALSE)
		// Set bFetchEnd = TRUE
		// Call PalLog( 'LlDruck: D06f' )
		// If bLlPrintResetProjectState
		// 04.04.07 F149
		// Call axLL.LlPrintFieldsEnd( nRet )
		// Call axLL.LlPrint( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA
		// Call axLL.LlPrint( nRet )
		// Call axLL.LlPrintFieldsEnd( nRet )
		// Set nCountRD = nCountRD + 1
		// Call axLL.LlPrintResetProjectState( nRet )
		// If nRet != 0
		// Call SalMessageBox('',PalStrNum(nRet,10,0), MB_Ok)
		// 04.06.07
		// Call PalDefineCurrentRecord(FALSE)
		// 08.05.09 OTF148
		// Call axLL.LlPrint( nRet )
		// If nProjectType = LL_PROJECT_LIST
		// Call axLL.LlPrint( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 1000
		// Call axLL.LlPrint( nRet )
		// If nProjectType = LL_PROJECT_LIST
		// Call axLL.LlPrintFields( nRet )
		// Set nCountRD = nCountRD + 1
		// Set bLlPrintResetProjectState = FALSE
		// Call PalLog( 'LlDruck: D06g' )
		// If nProjectType = LL_PROJECT_LIST
		// Call axLL.LlPrintFieldsEnd( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 1000
		// Call axLL.LlPrintFieldsEnd( nRet )
		// Call axLL.LlPrintEnd(0,nRet)
		// 16.04.17
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 1000
		// Call axLL.LlPrintEnd(0,nRet)
		// Call PalLog( 'LlDruck: D06h' )
		// 15.04.08
		// If strPBericht = 'Pfü.lst'
		// Call axLL.LlPrint( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 10
		// Call axLL.LlPrint( nRet )
		// Set nCountRD = nCountRD + 1
		// Call axLL.LlPrintEnd( 0, nRet )
		// Call PalLog( 'LlDruck: D06i' )
		// Else
		// Call SalStatusSetText(hWndForm, 'Keine Daten gefunden.')
		// 09.11.10
		// Call axLL.LlPrintEnd( 0, nRet )
		// Set nPageCount = nPages
		// Call PalLog( 'LlDruck: D06j' )
		// Set nPageCount = nPageCount + 1
		// Call axLL.LlPrintEnd( 0, nRet )
		// 16.04.17
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 1000
		// Call axLL.LlPrintEnd(0,nRet)
		// Abfrage Targetformat (PRV)
		// If strTargetFormat = 'PRV'
		// für externes Preview-Fenster:
		// Call axLL.LlPreviewDisplay( strFileName, '', nHandle, nRet )
		// Call axLL.LlPreviewDeleteFiles( strFileName, '', nRet )
		// für Preview Control:
		// Call axLLPreview.PropSetFileURL( strFileName )
		// Call axLL.LlPreviewDeleteFiles( strFileName, '', nRet )
		// Else If strTargetFormat = 'PRN' and not bArchiv ! Abfrage, ob Druck OK ist.
		// If strPBericht = 'MB-Bezahlt.lst'
		// If IDYES = SalMessageBox( 'Ist der Druck korrekt beendet worden  ?','Achtung',
		// MB_YesNo|MB_IconQuestion )
		// Call SqlImmedX('UPDATE pr SET prdruckdatum = :frmMain.dtCurrentDate WHERE prdruckdatum = '1900-1-1'')
		// Else
		// Call SqlImmedX('UPDATE pr SET prdruckdatum = NULL WHERE prdruckdatum = '1900-1-1'')
		// Call PalFetchEnd()
		// Call PalLog( 'LlDruck: D07' )
		// Call axLL.LlPrintEnd(0,nRet)
		// ! 07.11.11
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA And nCountRD < 1000
		// Call axLL.LlPrintEnd(0,nRet)
		// Set nCountRD = nCountRD + 1
		// If hUebFile
		// Call SalFileClose( hUebFile )
		// Set nUebFileSize = VisFileGetSize( strUebFile )
		// If nUebFileSize = 0
		// Call SalFileOpen( hUebFile, strUebFile, OF_Delete )
		/// <summary>
		/// </summary>
		/// <param name="nPArzt"></param>
		/// <param name="nPHalter"></param>
		/// <returns></returns>
		public SalString PalHoleEMail(SalNumber nPArzt, SalNumber nPHalter)
		{
			#region Actions
			using (new SalContext(this))
			{
				// 06.05.13 Ä943
				nPMArzt = nPArzt;
				nPMHalter = nPHalter;
				if (nPArzt > 0 && !(nPHalter > 0)) 
				{
					Int.SqlImmedSel("SELECT apmemail INTO :dlgLlDruck.strPMEmail FROM a WHERE aarztnr = :dlgLlDruck.nPMArzt");
				}
				else if (nPArzt > 0 && nPHalter > 0) 
				{
					Int.SqlImmedSel("SELECT hpmemail INTO :dlgLlDruck.strPMEmail FROM h WHERE harztnr = :dlgLlDruck.nPMArzt AND hhalternr = :dlgLlDruck.nPMHalter");
				}
				else
				{
					this.strPMEmail = "";
				}
				return this.strPMEmail;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPA"></param>
		/// <param name="nPH"></param>
		/// <returns></returns>
		public SalBoolean PalIsSVAdresse(SalNumber nPA, SalNumber nPH)
		{
			#region Local Variables
			SalBoolean bPIstDa = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strSVTi = "";
				strSVN1 = "";
				strSVN2 = "";
				strSVS = "";
				strSVO = "";
				strSVLand = "";

				Int.SqlIstDa("FROM h WHERE harztnr = " + nPA.ToString(0) + " AND hhalternr = " + nPH.ToString(0) + " AND hsvname IS NOT NULL", ref bPIstDa);
				if (bPIstDa) 
				{
					Int.SqlImmedSel(@"SELECT hsvtitel, hsvname, hsvname2, hsvstr, hsvort, hsvland INTO :dlgLlDruck.strSVTi, :dlgLlDruck.strSVN1, :dlgLlDruck.strSVN2, :dlgLlDruck.strSVS, :dlgLlDruck.strSVO, :dlgLlDruck.strSVLand
 FROM h WHERE harztnr = " + nPA.ToString(0) + " AND hhalternr = " + nPH.ToString(0));
					if (strSVLand != "") 
					{
						strSVLand = Int.PalPruefeLC(strSVLand, 0);
					}
				}
				return bPIstDa;
			}
			#endregion
		}
		// Function: PalAusgabe
		// Description:
		// Returns
		// Parameters
		// Static Variables
		// Local variables
		// String: strDrive
		// String: strDir
		// String: strFile
		// String: strExt
		// String: strUebFile
		// Number: nUebFileSize
		// Actions
		// 10.07.13
		// Call axLL.LlXSetParameter( LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", 'PDF.PDFAMode', '1', nRet )
		// Call axLL.LlXSetParameter( LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", 'PDF.Author', 'TV Niedersachsen r.V.', nRet )
		// If not bArchiv
		// Call axLL.LlPrintGetPrinterInfo( strPrn, strPort, nRet )
		// Set strCustomerNumberAlt = ''
		// Set strCustomerNumber = 'X'
		// If strPBericht = '70-Checkliste.lst' or strPBericht = 'Hitliste Rechnungen.lst' or strPBericht = 'Mitglieder.lst' or SalStrLeftX( strPBericht, 4) = 'MYCO' or strPBericht = 'Partien-Info.lst' or strPBericht = 'Rückerstattungen.lst' or strPBericht = 'TA-Statistik.lst'
		// or strPBericht = 'TA-StatistikVARI.lst' or strPBericht = 'MB-Deckblatt.lst' or strPBericht = 'Gerichtskosten.lst'		! 19.11.13
		// Else
		// 30.09.14 Telefonkonferenz mit neopost und Sa/Da: SalStrScan(strPrn, 'PrintMachine') != -1 -->> (SalStrScan(strPrn, 'PrintMachine') != -1 or SalStrScan(strPrn, 'Tagespost') != -1 or SalStrScan(strPrn, 'PM') != -1)
		// If (SalStrScan(strPrn, 'PrintMachine') != -1 or SalStrScan(strPrn, 'Tagespost') != -1 or SalStrScan(strPrn, 'PM') != -1) And strTargetFormat = 'PRN'
		// Call VisDosSplitPath( strPBericht, strDrive, strDir, strFile, strExt)
		// Set strUebFile = '\\\\archivserver\\Übergabe\\TVN\\' || strFile || PalDateToStrJJJJMMTThhmmss( SalDateCurrent(  ) ) || '.txt'
		// Set strUebFile = 'C:\\Testdaten\\' || strFile || PalDateToStrJJJJMMTThhmmss( SalDateCurrent(  ) ) || '.txt'
		// If Not SalFileOpen( hUebFile, strUebFile, OF_Text|OF_Write )
		// Call PalLog( 'Übergabeordner: Schreibfehler' )
		// Call SalMessageBox( 'In Übergabeordner kann nicht geschrieben werden.', 'Fehler', MB_Ok|MB_IconExclamation )
		// If bDrucken
		// Set nPageCount = 0
		// While nPageCount < nPages
		// If not bArchiv
		// Call SalStatusSetText(hWndForm, 'HoleDaten')
		// Call PalLog( 'LlDruck: D06a' )
		// If PalHoleDaten()
		// Set nCount = 0
		// If not bArchiv
		// Call SalStatusSetText(hWndForm, 'FetchNext')
		// If PalFetchNext(TRUE)
		// Call PalLog( 'LlDruck: D06b' )
		// If not bArchiv
		// Call SalStatusSetText(hWndForm, 'DefineVariables')
		// Call PalDefineCurrentRecord(FALSE)
		// If not bArchiv
		// Call SalStatusSetText(hWndForm, 'DefineFields')
		// Call PalDefineCurrentRecord(TRUE)
		// Call PalLog( 'LlDruck: D06c' )
		// If strBNAbtlg
		// Set nProjectType = nProjectType | LL_FILE_ALSONEW
		// If nProjectType != LL_PROJECT_CARD
		// Call axLL.LlPrint( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 10
		// Call axLL.LlPrint( nRet )
		// Call PalLog( 'LlDruck: D06c2' )
		// Set nCountRD = nCountRD + 1
		// Set bFetchEnd = FALSE
		// While Not bFetchEnd
		// Call PalLog( 'LlDruck: D06d' )
		// Set nCount = nCount + 1
		// If nProjectType = LL_PROJECT_LIST
		// Call PalDefineCurrentRecord(FALSE)
		// Call PalDefineCurrentRecord(TRUE)
		// Call axLL.LlPrintFields( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 10
		// Call axLL.LlPrint( nRet )
		// Call axLL.LlPrintFields( nRet )
		// Set nCountRD = nCountRD + 1
		// Else
		// Call PalDefineCurrentRecord(FALSE)
		// Call axLL.LlPrint( nRet )
		// 11.04.16 F2669
		// If nRet = LL_ERR_USER_ABORTED and strTargetFormat = 'PRN'
		// If IDYES = SalMessageBox( 'Möchten Sie die (Druck-)Ausgabe wirklich abbrechen?', 'Abbruch ?', MB_YesNo|MB_IconQuestion )
		// Call PalLog( 'Druck: Abbruch bestätigt' )
		// Else
		// Set nRet = 0
		// Call PalLog( 'Druck: Abbruch widerrufen' )
		// If nRet = LL_ERR_USER_ABORTED
		// Call axLL.LlPrintEnd( 0, nRet )
		// Call PalLog( 'Druck: Abbruch bei LlPrint' )
		// Set bFetchEnd = TRUE
		// Else
		// 08.05.09 OTF148
		// If nProjectType = LL_PROJECT_LIST
		// Call axLL.LlPrintFields( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 10
		// Call axLL.LlPrint( nRet )
		// Call axLL.LlPrintFields( nRet )
		// Set nCountRD = nCountRD + 1
		// If nCountRec > 0
		// Call axLL.LlPrintSetBoxText( 'Drucke ' || strPBericht || ' (' || SalNumberToStrX(nCount,0) || '/' || SalNumberToStrX(nCountRec,0) || ') ...', nCount/nCountRec*100, nRet )
		// Call PalLog( 'LlDruck: D06e' )
		// If Not PalFetchNext(FALSE)
		// Set bFetchEnd = TRUE
		// Call PalLog( 'LlDruck: D06f' )
		// If bLlPrintResetProjectState
		// Call axLL.LlPrint( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 1000
		// Call axLL.LlPrint( nRet )
		// Set nCountRD = nCountRD + 1
		// 08.05.09 OTF148
		// Call axLL.LlPrintFields( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 10
		// Call axLL.LlPrint( nRet )
		// Call axLL.LlPrintFields( nRet )
		// Set nCountRD = nCountRD + 1
		// Call axLL.LlPrintFieldsEnd( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA
		// Call axLL.LlPrintFieldsEnd( nRet )
		// Set nCountRD = nCountRD + 1
		// Call axLL.LlPrintResetProjectState( nRet )
		// If nRet != 0
		// Call SalMessageBox('',PalStrNum(nRet,10,0), MB_Ok)
		// 04.06.07
		// Call PalDefineCurrentRecord(FALSE)
		// Set bLlPrintResetProjectState = FALSE
		// Call PalLog( 'LlDruck: D06g' )
		// If nProjectType = LL_PROJECT_LIST
		// Call axLL.LlPrintFieldsEnd( nRet )
		// If nRet = LL_WRN_REPEAT_DATA
		// Call axLL.LlPrintFieldsEnd( nRet )
		// Call PalLog( 'LlDruck: D06h' )
		// 15.04.08
		// If strPBericht = 'Pfü.lst'
		// Call axLL.LlPrint( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 10
		// Call axLL.LlPrint( nRet )
		// Set nCountRD = nCountRD + 1
		// Call axLL.LlPrintEnd( 0, nRet )
		// Call PalLog( 'LlDruck: D06i' )
		// Else
		// Call SalStatusSetText(hWndForm, 'Keine Daten gefunden.')
		// 09.11.10
		// Call axLL.LlPrintEnd( 0, nRet )
		// Set nPageCount = nPages
		// Call PalLog( 'LlDruck: D06j' )
		// Set nPageCount = nPageCount + 1
		// Abfrage Targetformat (PRV)
		// If strTargetFormat = 'PRV'
		// für externes Preview-Fenster:
		// Call axLL.LlPreviewDisplay( strFileName, '', nHandle, nRet )
		// Call axLL.LlPreviewDeleteFiles( strFileName, '', nRet )
		// für Preview Control:
		// Call axLLPreview.PropSetFileURL( strFileName )
		// Call axLL.LlPreviewDeleteFiles( strFileName, '', nRet )
		// Else If strTargetFormat = 'PRN' and not bArchiv ! Abfrage, ob Druck OK ist.
		// If strPBericht = 'MB-Bezahlt.lst'
		// If IDYES = SalMessageBox( 'Ist der Druck korrekt beendet worden  ?','Achtung',
		// MB_YesNo|MB_IconQuestion )
		// Call SqlImmedX('UPDATE pr SET prdruckdatum = :frmMain.dtCurrentDate WHERE prdruckdatum = '1900-1-1'')
		// Else
		// Call SqlImmedX('UPDATE pr SET prdruckdatum = NULL WHERE prdruckdatum = '1900-1-1'')
		// Call PalFetchEnd()
		// Call PalLog( 'LlDruck: D07' )
		// Call axLL.LlPrintEnd(0,nRet)
		// ! 07.11.11
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA And nCountRD < 10
		// Call axLL.LlPrintEnd(0,nRet)
		// Set nCountRD = nCountRD + 1
		// If hUebFile
		// Call SalFileClose( hUebFile )
		// Set nUebFileSize = VisFileGetSize( strUebFile )
		// If nUebFileSize = 0
		// Call SalFileOpen( hUebFile, strUebFile, OF_Delete )
		// Function: PalAusgabeN
		// Description:
		// Returns
		// Parameters
		// Static Variables
		// Local variables
		// String: strDrive
		// String: strDir
		// String: strFile
		// String: strExt
		// String: strUebFile
		// Number: nUebFileSize
		// Actions
		// 10.07.13
		// Call axLL.LlXSetParameter( LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", 'PDF.PDFAMode', '1', nRet )
		// Call axLL.LlXSetParameter( LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", 'PDF.Author', 'moveta r.V.k.V.', nRet )
		// If not bArchiv
		// Call axLL.LlPrintGetPrinterInfo( strPrn, strPort, nRet )
		// Set strCustomerNumberAlt = ''
		// Set strCustomerNumber = 'X'
		// If strPBericht = '70-Checkliste.lst' or strPBericht = 'Hitliste Rechnungen.lst' or strPBericht = 'Mitglieder.lst' or SalStrLeftX( strPBericht, 4) = 'MYCO' or strPBericht = 'Partien-Info.lst' or strPBericht = 'Rückerstattungen.lst' or strPBericht = 'TA-Statistik.lst'
		// or strPBericht = 'TA-StatistikVARI.lst' or strPBericht = 'MB-Deckblatt.lst' or strPBericht = 'Gerichtskosten.lst'		! 19.11.13
		// Else
		// 30.09.14 Telefonkonferenz mit neopost und Sa/Da: SalStrScan(strPrn, 'PrintMachine') != -1 -->> (SalStrScan(strPrn, 'PrintMachine') != -1 or SalStrScan(strPrn, 'Tagespost') != -1 or SalStrScan(strPrn, 'PM') != -1)
		// If (SalStrScan(strPrn, 'PrintMachine') != -1 or SalStrScan(strPrn, 'Tagespost') != -1 or SalStrScan(strPrn, 'PM') != -1) And (strTargetFormat = 'PRN' or bePost)
		// Call VisDosSplitPath( strPBericht, strDrive, strDir, strFile, strExt)
		// Set strUebFile = '\\\\archivserver\\Übergabe\\TVN\\' || strFile || PalDateToStrJJJJMMTThhmmss( SalDateCurrent(  ) ) || '.txt'
		// Set strUebFile = 'C:\\Testdaten\\' || strFile || PalDateToStrJJJJMMTThhmmss( SalDateCurrent(  ) ) || '.txt'
		// If Not SalFileOpen( hUebFile, strUebFile, OF_Text|OF_Write )
		// Call PalLog( 'Übergabeordner: Schreibfehler' )
		// Call SalMessageBox( 'In Übergabeordner kann nicht geschrieben werden.', 'Fehler', MB_Ok|MB_IconExclamation )
		// If bDrucken
		// Set nPageCount = 0
		// While nPageCount < nPages
		// If not bArchiv
		// Call SalStatusSetText(hWndForm, 'HoleDaten')
		// Call PalLog( 'LlDruck: D06a' )
		// If PalHoleDaten()
		// Set nCount = 0
		// If not bArchiv
		// Call SalStatusSetText(hWndForm, 'FetchNext')
		// If PalFetchNext(TRUE)
		// Call PalLog( 'LlDruck: D06b' )
		// If not bArchiv
		// Call SalStatusSetText(hWndForm, 'DefineVariables')
		// Call PalDefineCurrentRecord(FALSE)
		// If not bArchiv
		// Call SalStatusSetText(hWndForm, 'DefineFields')
		// Call PalDefineCurrentRecord(TRUE)
		// Call PalLog( 'LlDruck: D06c' )
		// If strBNAbtlg
		// Set nProjectType = nProjectType | LL_FILE_ALSONEW
		// If nProjectType != LL_PROJECT_CARD
		// Call axLL.LlPrint( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 1000
		// Call axLL.LlPrint( nRet )
		// Call PalLog( 'LlDruck: D06c2' )
		// Set nCountRD = nCountRD + 1
		// Set bFetchEnd = FALSE
		// While Not bFetchEnd
		// Call PalLog( 'LlDruck: D06d' )
		// Set nCount = nCount + 1
		// If nProjectType = LL_PROJECT_LIST
		// Call PalDefineCurrentRecord(FALSE)
		// Call PalDefineCurrentRecord(TRUE)
		// Call axLL.LlPrintFields( nRet )
		// 05.05.17
		// While nRet = LL_WRN_REPEAT_DATA
		// Call axLL.LlPrint( nRet )
		// Call axLL.LlPrintFields( nRet )
		// Else
		// Call PalDefineCurrentRecord(FALSE)
		// Call axLL.LlPrint( nRet )
		// 11.04.16 F2669
		// If nRet = LL_ERR_USER_ABORTED and (strTargetFormat = 'PRN' or bePost)
		// If IDYES = SalMessageBox( 'Möchten Sie die (Druck-)Ausgabe wirklich abbrechen?', 'Abbruch ?', MB_YesNo|MB_IconQuestion )
		// Call PalLog( 'Druck: Abbruch bestätigt' )
		// Else
		// Set nRet = 0
		// Call PalLog( 'Druck: Abbruch widerrufen' )
		// If nRet = LL_ERR_USER_ABORTED
		// Call axLL.LlPrintEnd( 0, nRet )
		// Call PalLog( 'Druck: Abbruch bei LlPrint' )
		// Set bFetchEnd = TRUE
		// Else
		// 08.05.09 OTF148
		// If nProjectType = LL_PROJECT_LIST
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 10
		// Call axLL.LlPrint( nRet )
		// If nProjectType = LL_PROJECT_LIST
		// Call axLL.LlPrintFields( nRet )
		// Set nCountRD = nCountRD + 1
		// If nProjectType != LL_PROJECT_CARD
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 1000
		// Call axLL.LlPrint( nRet )
		// If nProjectType = LL_PROJECT_LIST
		// Call axLL.LlPrintFields( nRet )
		// Set nCountRD = nCountRD + 1
		// If nCountRec > 0
		// Call axLL.LlPrintSetBoxText( 'Drucke ' || strPBericht || ' (' || SalNumberToStrX(nCount,0) || '/' || SalNumberToStrX(nCountRec,0) || ') ...', nCount/nCountRec*100, nRet )
		// Call PalLog( 'LlDruck: D06e' )
		// If Not PalFetchNext(FALSE)
		// Set bFetchEnd = TRUE
		// Call PalLog( 'LlDruck: D06f' )
		// If bLlPrintResetProjectState
		// 04.04.07 F149
		// Call axLL.LlPrintFieldsEnd( nRet )
		// 08.10.19
		// Set nAnzLLPrint = nAnzLLPrint + 1
		// Call SalFilePutStr( hFileLog, SalDateToStrX( SalDateCurrent(  )) || ';01;ResetProjectState' )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA
		// Call axLL.LlPrintFieldsEnd( nRet )
		// 08.10.19
		// Set nAnzLLPrint = nAnzLLPrint + 1
		// Call SalFilePutStr( hFileLog, SalDateToStrX( SalDateCurrent(  )) || ';01;ResetProjectStateREPEAT' )
		// Set nCountRD = nCountRD + 1
		// Call axLL.LlPrintResetProjectState( nRet )
		// If nRet != 0
		// Call SalMessageBox('',PalStrNum(nRet,10,0), MB_Ok)
		// 04.06.07
		// Call PalDefineCurrentRecord(FALSE)
		// 08.05.09 OTF148
		// Call axLL.LlPrint( nRet )
		// If nProjectType = LL_PROJECT_LIST
		// Call axLL.LlPrint( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 10
		// Call axLL.LlPrint( nRet )
		// If nProjectType = LL_PROJECT_LIST
		// Call axLL.LlPrintFields( nRet )
		// Set nCountRD = nCountRD + 1
		// Set bLlPrintResetProjectState = FALSE
		// Call PalLog( 'LlDruck: D06g' )
		// If nProjectType = LL_PROJECT_LIST
		// Call axLL.LlPrintFieldsEnd( nRet )
		// 08.10.19
		// Set nAnzLLPrint = nAnzLLPrint + 1
		// Call SalFilePutStr( hFileLog, SalDateToStrX( SalDateCurrent(  )) || ';01;nach Not bFetchEnd' )
		// While nRet = LL_WRN_REPEAT_DATA
		// Call axLL.LlPrintFieldsEnd( nRet )
		// 08.10.19
		// Set nAnzLLPrint = nAnzLLPrint + 1
		// Call SalFilePutStr( hFileLog, SalDateToStrX( SalDateCurrent(  )) || ';01;nach Not bFetchEndREPEAT' )
		// Call PalLog( 'LlDruck: D06h' )
		// 15.04.08
		// If strPBericht = 'Pfü.lst'
		// Call axLL.LlPrint( nRet )
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 10
		// Call axLL.LlPrint( nRet )
		// Set nCountRD = nCountRD + 1
		// Call axLL.LlPrintEnd( 0, nRet )
		// 30.05.17
		// Set nCountRD = 0
		// While nRet = LL_ERR_BAD_JOBHANDLE and nCountRD < 1000
		// Call axLL.LlPrintFieldsEnd( nRet )
		// While nRet = LL_WRN_REPEAT_DATA
		// Call axLL.LlPrintFieldsEnd( nRet )
		// Call axLL.LlPrintEnd(0,nRet)
		// Set nCountRD = nCountRD + 1
		// 16.04.17
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 1000
		// Call axLL.LlPrintEnd(0,nRet)
		// Set nCountRD = nCountRD + 1
		// Call PalLog( 'LlDruck: D06i' )
		// Else
		// Call SalStatusSetText(hWndForm, 'Keine Daten gefunden.')
		// 09.11.10
		// Call axLL.LlPrintEnd( 0, nRet )
		// Set nPageCount = nPages
		// Call PalLog( 'LlDruck: D06j' )
		// Set nPageCount = nPageCount + 1
		// Abfrage Targetformat (PRV)
		// If strTargetFormat = 'PRV'
		// für externes Preview-Fenster:
		// Call axLL.LlPreviewDisplay( strFileName, '', nHandle, nRet )
		// Call axLL.LlPreviewDeleteFiles( strFileName, '', nRet )
		// für Preview Control:
		// Call axLLPreview.PropSetFileURL( strFileName )
		// Call axLL.LlPreviewDeleteFiles( strFileName, '', nRet )
		// Else If (strTargetFormat = 'PRN' or bePost) and not bArchiv ! Abfrage, ob Druck OK ist.
		// If strPBericht = 'MB-Bezahlt.lst'
		// If IDYES = SalMessageBox( 'Ist der Druck korrekt beendet worden  ?','Achtung',
		// MB_YesNo|MB_IconQuestion )
		// Call SqlImmedX('UPDATE pr SET prdruckdatum = :frmMain.dtCurrentDate WHERE prdruckdatum = '1900-1-1'')
		// Else
		// Call SqlImmedX('UPDATE pr SET prdruckdatum = NULL WHERE prdruckdatum = '1900-1-1'')
		// Call PalFetchEnd()
		// Call PalLog( 'LlDruck: D07' )
		// Call axLL.LlPrintEnd(0,nRet)
		// 30.05.17
		// Set nCountRD = 0
		// While nRet = LL_ERR_BAD_JOBHANDLE and nCountRD < 1000
		// Call axLL.LlPrintFieldsEnd( nRet )
		// While nRet = LL_WRN_REPEAT_DATA
		// Call axLL.LlPrintFieldsEnd( nRet )
		// Call axLL.LlPrintEnd(0,nRet)
		// Set nCountRD = nCountRD + 1
		// ! 07.11.11
		// Set nCountRD = 0
		// While nRet = LL_WRN_REPEAT_DATA And nCountRD < 1000
		// Call axLL.LlPrintEnd(0,nRet)
		// Set nCountRD = nCountRD + 1
		// If hUebFile
		// Call SalFileClose( hUebFile )
		// Set nUebFileSize = VisFileGetSize( strUebFile )
		// If nUebFileSize = 0
		// Call SalFileOpen( hUebFile, strUebFile, OF_Delete )
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalAusgabe()
		{
			#region Local Variables
			SalString strDrive = "";
			SalString strDir = "";
			SalString strFile = "";
			SalString strExt = "";
			SalString strUebFile = "";
			SalNumber nUebFileSize = 0;
			// 31.07.19
			SalBoolean bPOk = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				// 31.07.19
				bPOk = true;
				// 10.07.13
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "PDF.PDFAMode", "1", ref nRet);
				App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "PDF", "PDF.Author", "moveta r.V.k.V.", ref nRet);
				if (cbArchiv.Checked) 
				{
					if (cbLog.Checked) 
					{
						Int.PalLogDauer(strPBericht, "05a", SalDateTime.Current - dtMin);
						dtMin = SalDateTime.Current;
					}
				}

				if (!(bArchiv)) 
				{
					App.frmMain.axLL.LlPrintGetPrinterInfo(ref strPrn, ref strPort, ref nRet);
					strCustomerNumberAlt = "";
					strCustomerNumber = "X";
					// 19.05.22 Ä2019
					strArztHalter = "";

					if (strPBericht == "70-Checkliste.lst" || strPBericht == "Hitliste Rechnungen.lst" || strPBericht == "Mitglieder.lst" || strPBericht.Left(4) == "MYCO" || strPBericht == "Partien-Info.lst" || strPBericht == "Rückerstattungen.lst" || strPBericht == 
					"TA-Statistik.lst" || strPBericht == "TA-StatistikVARI.lst" || strPBericht == "MB-Deckblatt.lst" || strPBericht == "Gerichtskosten.lst")  // 19.11.13
					{
					}
					else
					{
						// 30.09.14 Telefonkonferenz mit neopost und Sa/Da: SalStrScan(strPrn, 'PrintMachine') != -1 -->> (SalStrScan(strPrn, 'PrintMachine') != -1 or SalStrScan(strPrn, 'Tagespost') != -1 or SalStrScan(strPrn, 'PM') != -1)
						// If (SalStrScan(strPrn, 'PrintMachine') != -1 or SalStrScan(strPrn, 'Tagespost') != -1 or SalStrScan(strPrn, 'PM') != -1) And strTargetFormat = 'PRN'
						// Call VisDosSplitPath( strPBericht, strDrive, strDir, strFile, strExt)
						// 09.11.21
						// Set strUebFile = '\\\\archivserver\\Übergabe\\TVN\\' || strFile || PalDateToStrJJJJMMTThhmmss( SalDateCurrent(  ) ) || '.txt'
						// Set strUebFile = '\\\\archiv01\\noviplan.net.doc\\PrintIDs\\' || strFile || PalDateToStrJJJJMMTThhmmss( SalDateCurrent(  ) ) || '.txt'
						// Set strUebFile = 'C:\\Testdaten\\' || strFile || PalDateToStrJJJJMMTThhmmss( SalDateCurrent(  ) ) || '.txt'
						// If Not SalFileOpen( hUebFile, strUebFile, OF_Text|OF_Write )
						// Call PalLog( 'Übergabeordner: Schreibfehler' )
						// Call SalMessageBox( 'In Übergabeordner kann nicht geschrieben werden.', 'Fehler', MB_Ok|MB_IconExclamation )
						// 22.11.21 Mail Grein + And SqlDatabase = 'TVN1'
						if (bePost) 
						{
							Vis.DosSplitPath(strPBericht, ref strDrive, ref strDir, ref strFile, ref strExt);
							// 03.05.23 Ä2104
							this.strPRIDDoku = strFile;
							// 09.11.21
							if (Sql.Database == "TVN1")  // 1905.22 Ä2019
							{
								strUebFile = "\\\\archiv01\\noviplan.net.doc\\PrintIDs\\" + strFile + Int.PalDateToStrJJJJMMTThhmmss(SalDateTime.Current) + ".txt";
							}
							else
							{
								strUebFile = "K:\\PDF\\" + strFile + Int.PalDateToStrJJJJMMTThhmmss(SalDateTime.Current) + ".txt";
							}
							// Set strUebFile = '\\\\archivserver\\Übergabe\\TVN\\' || strFile || PalDateToStrJJJJMMTThhmmss( SalDateCurrent(  ) ) || '.txt'
							// Set strUebFile = 'C:\\Testdaten\\' || strFile || PalDateToStrJJJJMMTThhmmss( SalDateCurrent(  ) ) || '.txt'
							if (!(hUebFile.Open(strUebFile, (Sys.OF_Text | Sys.OF_Write)))) 
							{
								Int.PalLog("Übergabeordner: Schreibfehler");
								Sal.MessageBox("In Übergabeordner kann nicht geschrieben werden.", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
							}
						}
					}
				}
				if (bDrucken) 
				{
					nPageCount = 0;
					while (nPageCount < nPages) 
					{
						if (!(bArchiv)) 
						{
							this.SetStatusBarText("HoleDaten");
						}
						// Call PalLog( 'LlDruck: D06a' )
						if (cbLog.Checked) 
						{
							Int.PalLogDauer(strPBericht, "05b", SalDateTime.Current - dtMin);
							dtMin = SalDateTime.Current;
						}
						if (PalHoleDaten()) 
						{
							nCount = 0;
							if (cbLog.Checked) 
							{
								Int.PalLogDauer(strPBericht, "05c", SalDateTime.Current - dtMin);
								dtMin = SalDateTime.Current;
							}

							if (!(bArchiv)) 
							{
								this.SetStatusBarText("FetchNext");
							}
							if (PalFetchNext(true)) 
							{
								// Call PalLog( 'LlDruck: D06b' )
								if (cbLog.Checked) 
								{
									Int.PalLogDauer(strPBericht, "05d", SalDateTime.Current - dtMin);
									dtMin = SalDateTime.Current;
								}
								if (!(bArchiv)) 
								{
									this.SetStatusBarText("DefineVariables");
								}
								PalDefineCurrentRecord(false);
								if (!(bArchiv)) 
								{
									this.SetStatusBarText("DefineFields");
								}
								PalDefineCurrentRecord(true);
								if (cbLog.Checked) 
								{
									Int.PalLogDauer(strPBericht, "05e", SalDateTime.Current - dtMin);
									dtMin = SalDateTime.Current;
								}
								// Call PalLog( 'LlDruck: D06c' )
								// If strBNAbtlg
								// Set nProjectType = nProjectType | LL_FILE_ALSONEW

								// 12.03.18 von unten
								bFetchEnd = false;

								if (nProjectType != Const.LL_PROJECT_CARD) 
								{
									App.frmMain.axLL.LlPrint(ref nRet);

									if (nRet < 0)  // 18.01.18
									{
										if (nRet == Const.LL_ERR_PRINTING) 
										{
											Sal.MessageBox(@"Druck kann nicht durchgeführt werden.
Bitte den TEMP-Ordner leeren lassen.", "Druckfehler -12", (Sys.MB_Ok | Sys.MB_IconStop));
											// 12.03.18
											bFetchEnd = true;
										}
										// Else
										// Call SalMessageBox( 'Druck kann nicht durchgeführt werden.', 'Druckfehler' || SalNumberToStrX( nRet, 0 ), MB_Ok|MB_IconStop )
									}
									else
									{
										nCountRD = 0;
										while (nRet == Const.LL_WRN_REPEAT_DATA && nCountRD < 1000) 
										{
											this.SetStatusBarText("Print " + nCountRD.ToString(0));
											App.frmMain.axLL.LlPrint(ref nRet);
											// Call PalLog( 'LlDruck: D06c2' )
											nCountRD = nCountRD + 1;
										}
									}
								}
								if (cbLog.Checked) 
								{
									Int.PalLogDauer(strPBericht, "05f", SalDateTime.Current - dtMin);
									dtMin = SalDateTime.Current;
								}
								// 12.03.18 nach oben
								// Set bFetchEnd = FALSE
								while (!(bFetchEnd)) 
								{
									// Call PalLog( 'LlDruck: D06d' )
									nCount = nCount + 1;
									if (nProjectType == Const.LL_PROJECT_LIST) 
									{
										// Call PalDefineCurrentRecord(FALSE)
										PalDefineCurrentRecord(true);
										App.frmMain.axLL.LlPrintFields(ref nRet);
										// 05.05.17
										while (nRet == Const.LL_WRN_REPEAT_DATA) 
										{
											App.frmMain.axLL.LlPrint(ref nRet);

											if (nRet < 0)  // 18.01.18
											{
												if (nRet == Const.LL_ERR_PRINTING) 
												{
													Sal.MessageBox(@"Druck kann nicht durchgeführt werden.
Bitte den TEMP-Ordner leeren lassen.", "Druckfehler -12", (Sys.MB_Ok | Sys.MB_IconStop));
												}
												// Else
												// Call SalMessageBox( 'Druck kann nicht durchgeführt werden.', 'Druckfehler' || SalNumberToStrX( nRet, 0 ), MB_Ok|MB_IconStop )
											}
											else
											{
												App.frmMain.axLL.LlPrintFields(ref nRet);
												if (nRet < 0)  // 18.01.18
												{
													if (nRet == Const.LL_ERR_PRINTING) 
													{
														Sal.MessageBox(@"Druck kann nicht durchgeführt werden.
Bitte den TEMP-Ordner leeren lassen.", "Druckfehler -12", (Sys.MB_Ok | Sys.MB_IconStop));
													}
													// Else
													// Call SalMessageBox( 'Druck kann nicht durchgeführt werden.', 'Druckfehler' || SalNumberToStrX( nRet, 0 ), MB_Ok|MB_IconStop )
												}
											}
										}
									}
									else
									{
										PalDefineCurrentRecord(false);
										App.frmMain.axLL.LlPrint(ref nRet);

										if (nRet < 0)  // 18.01.18
										{
											if (nRet == Const.LL_ERR_PRINTING) 
											{
												Sal.MessageBox(@"Druck kann nicht durchgeführt werden.
Bitte den TEMP-Ordner leeren lassen.", "Druckfehler -12", (Sys.MB_Ok | Sys.MB_IconStop));
											}
											// Else
											// Call SalMessageBox( 'Druck kann nicht durchgeführt werden.', 'Druckfehler' || SalNumberToStrX( nRet, 0 ), MB_Ok|MB_IconStop )
										}
									}
									// 11.04.16 F2669
									if (nRet == Const.LL_ERR_USER_ABORTED && strTargetFormat == "PRN") 
									{
										if (Sys.IDYES == Sal.MessageBox("Möchten Sie die (Druck-)Ausgabe wirklich abbrechen?", "Abbruch ?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
										{
											Int.PalLog("Druck: Abbruch bestätigt");
										}
										else
										{
											nRet = 0;
											Int.PalLog("Druck: Abbruch widerrufen");
										}
									}

									if (nRet == Const.LL_ERR_USER_ABORTED) 
									{
										// Call axLL.LlPrintEnd( 0, nRet )
										Int.PalLog("Druck: Abbruch bei LlPrint");
										bFetchEnd = true;
									}
									else
									{
										// 08.05.09 OTF148
										// If nProjectType = LL_PROJECT_LIST
										// Set nCountRD = 0
										// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 10
										// Call axLL.LlPrint( nRet )
										// If nProjectType = LL_PROJECT_LIST
										// Call axLL.LlPrintFields( nRet )
										// Set nCountRD = nCountRD + 1
										if (nProjectType != Const.LL_PROJECT_CARD) 
										{
										}
										nCountRD = 0;
										while (nRet == Const.LL_WRN_REPEAT_DATA && nCountRD < 10) 
										{
											this.SetStatusBarText("Print " + nCountRD.ToString(0));
											App.frmMain.axLL.LlPrint(ref nRet);

											if (nProjectType == Const.LL_PROJECT_LIST) 
											{
												App.frmMain.axLL.LlPrintFields(ref nRet);
											}
											nCountRD = nCountRD + 1;
										}
										if (nCountRec > 0) 
										{
											// 28.09.23 F5036
											// Call axLL.LlPrintSetBoxText( 'Drucke ' || strPBericht || ' (' || SalNumberToStrX(nCount,0) || '/' || SalNumberToStrX(nCountRec,0) || ') ...', nCount/nCountRec*100, nRet )
											App.frmMain.axLL.LlPrintSetBoxText(strPBericht + " (" + nCount.ToString(0) + "/" + nCountRec.ToString(0) + ") ...", nCount / nCountRec * 100, ref nRet);
										}
									}

									// Call PalLog( 'LlDruck: D06e' )
									if (!(PalFetchNext(false))) 
									{
										bFetchEnd = true;
									}
									// Call PalLog( 'LlDruck: D06f' )
									if (bLlPrintResetProjectState) 
									{
										// 04.04.07 F149
										App.frmMain.axLL.LlPrintFieldsEnd(ref nRet);
										// 15.10.19 Ä1874
										if (strPBericht == "Rechnungen.lst" || strPBericht == "Rechnung A4.lst" || strPBericht == "Rechnung A4 tvn.lst") 
										{
											if (strPSpezial == "LE" || strPSpezial == "M")  // 13.01.20 + or strPSpezial = 'M'
											{
												if (App.frmMain.axLL.LlPrintGetCurrentPage(ref nAnzLLPrint)) 
												{
													PalUpdateSeitenzahlinRg();
												}
												else
												{
													Sal.MessageBeep(0);
												}
											}
										}

										nCountRD = 0;
										while (nRet == Const.LL_WRN_REPEAT_DATA) 
										{
											this.SetStatusBarText("PrintFieldsEnd " + nCountRD.ToString(0));
											App.frmMain.axLL.LlPrintFieldsEnd(ref nRet);

											nCountRD = nCountRD + 1;
										}

										App.frmMain.axLL.LlPrintResetProjectState(ref nRet);
										// 19.05.22 Ä2019
										strArztHalter = "";

										nCountRD = 0;
										while (nRet == Const.LL_WRN_REPEAT_DATA) 
										{
											this.SetStatusBarText("Print " + nCountRD.ToString(0));
											App.frmMain.axLL.LlPrint(ref nRet);
											App.frmMain.axLL.LlPrintResetProjectState(ref nRet);

											nCountRD = nCountRD + 1;
										}
										// If nRet != 0
										// Call SalMessageBox('',PalStrNum(nRet,10,0), MB_Ok)
										// 04.06.07
										PalDefineCurrentRecord(false);

										// 08.05.09 OTF148
										// Call axLL.LlPrint( nRet )
										if (nProjectType == Const.LL_PROJECT_LIST) 
										{
											App.frmMain.axLL.LlPrint(ref nRet);

											if (nRet < 0)  // 18.01.18
											{
												if (nRet == Const.LL_ERR_PRINTING) 
												{
													Sal.MessageBox(@"Druck kann nicht durchgeführt werden.
Bitte den TEMP-Ordner leeren lassen.", "Druckfehler -12", (Sys.MB_Ok | Sys.MB_IconStop));
												}
												// Else
												// Call SalMessageBox( 'Druck kann nicht durchgeführt werden.', 'Druckfehler' || SalNumberToStrX( nRet, 0 ), MB_Ok|MB_IconStop )
											}
										}
										nCountRD = 0;
										while (nRet == Const.LL_WRN_REPEAT_DATA && nCountRD < 10) 
										{
											this.SetStatusBarText("Print " + nCountRD.ToString(0));
											App.frmMain.axLL.LlPrint(ref nRet);

											if (nProjectType == Const.LL_PROJECT_LIST) 
											{
												App.frmMain.axLL.LlPrintFields(ref nRet);
											}
											nCountRD = nCountRD + 1;
										}
										bLlPrintResetProjectState = false;
									}
									// Call PalLog( 'LlDruck: D06g' )
								}
								if (cbLog.Checked) 
								{
									Int.PalLogDauer(strPBericht, "05g", SalDateTime.Current - dtMin);
									dtMin = SalDateTime.Current;
								}

								if (nProjectType == Const.LL_PROJECT_LIST) 
								{
									App.frmMain.axLL.LlPrintFieldsEnd(ref nRet);

									// 23.10.18 F3412
									// If nRet = LL_WRN_REPEAT_DATA
									// Call axLL.LlPrintFieldsEnd( nRet )
									nCountRD = 0;
									while (nRet == Const.LL_WRN_REPEAT_DATA) 
									{
										this.SetStatusBarText("PrintFieldsEnd " + nCountRD.ToString(0));
										App.frmMain.axLL.LlPrintFieldsEnd(ref nRet);

										nCountRD = nCountRD + 1;
									}
								}
								if (cbLog.Checked) 
								{
									Int.PalLogDauer(strPBericht, "05h", SalDateTime.Current - dtMin);
									dtMin = SalDateTime.Current;
								}
								// Call PalLog( 'LlDruck: D06h' )
								// 15.04.08
								// If strPBericht = 'Pfü.lst'
								// Call axLL.LlPrint( nRet )
								// Set nCountRD = 0
								// While nRet = LL_WRN_REPEAT_DATA and nCountRD < 10
								// Call axLL.LlPrint( nRet )
								// Set nCountRD = nCountRD + 1

								App.frmMain.axLL.LlPrintEnd(0, ref nRet);
								if (cbLog.Checked) 
								{
									Int.PalLogDauer(strPBericht, "05i", SalDateTime.Current - dtMin);
									dtMin = SalDateTime.Current;
								}
								// Call PalLog( 'LlDruck: D06i' )
							}
							else
							{
								this.SetStatusBarText("Keine Daten gefunden.");
								// 31.07.19
								bPOk = false;
								// 09.11.10
								App.frmMain.axLL.LlPrintEnd(0, ref nRet);
								if (cbLog.Checked) 
								{
									Int.PalLogDauer(strPBericht, "05j", SalDateTime.Current - dtMin);
									dtMin = SalDateTime.Current;
								}

								nPageCount = nPages;
							}
						}
						// Call PalLog( 'LlDruck: D06j' )
						nPageCount = nPageCount + 1;
					}
					// Abfrage Targetformat (PRV)
					if (strTargetFormat == "PRV") 
					{
						// für externes Preview-Fenster:
						App.frmMain.axLL.LlPreviewDisplay(strFileName, "", nHandle, ref nRet);
						App.frmMain.axLL.LlPreviewDeleteFiles(strFileName, "", ref nRet);
						// für Preview Control:
						// Call axLLPreview.PropSetFileURL( strFileName )
						// Call axLL.LlPreviewDeleteFiles( strFileName, '', nRet )

					}
					else if ((strTargetFormat == "PRN" || bePost) && !(bArchiv))  // Abfrage, ob Druck OK ist.
					{
						if (strPBericht == "MB-Bezahlt.lst") 
						{
							if (Sys.IDYES == Sal.MessageBox("Ist der Druck korrekt beendet worden  ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
							{
								Int.SqlImmedX("UPDATE pr SET prdruckdatum = :frmMain.dtCurrentDate WHERE prdruckdatum = '1900-1-1'");
							}
							else
							{
								Int.SqlImmedX("UPDATE pr SET prdruckdatum = NULL WHERE prdruckdatum = '1900-1-1'");
							}
						}
					}
					if (cbLog.Checked) 
					{
						Int.PalLogDauer(strPBericht, "05k", SalDateTime.Current - dtMin);
						dtMin = SalDateTime.Current;
					}

					PalFetchEnd();
					if (cbLog.Checked) 
					{
						Int.PalLogDauer(strPBericht, "05l", SalDateTime.Current - dtMin);
						dtMin = SalDateTime.Current;
					}
					// Call PalLog( 'LlDruck: D07' )
				}
				App.frmMain.axLL.LlPrintEnd(0, ref nRet);
				if (cbArchiv.Checked) 
				{
					if (cbLog.Checked) 
					{
						dtMin = SalDateTime.Current;
						Int.PalLogDauer(strPBericht, "05m", SalDateTime.Current - dtMin);
					}
				}
				// ! 07.11.11
				nCountRD = 0;
				while (nRet == Const.LL_WRN_REPEAT_DATA && nCountRD < 10) 
				{
					this.SetStatusBarText("PrintEnd " + nCountRD.ToString(0));
					App.frmMain.axLL.LlPrintEnd(0, ref nRet);
					nCountRD = nCountRD + 1;
				}
				if (cbArchiv.Checked) 
				{
					if (cbLog.Checked) 
					{
						Int.PalLogDauer(strPBericht, "05n", SalDateTime.Current - dtMin);
						dtMin = SalDateTime.Current;
					}
				}

				if (hUebFile) 
				{
					hUebFile.Close();
					nUebFileSize = Vis.FileGetSize(strUebFile);
					if (nUebFileSize == 0) 
					{
						hUebFile.Open(strUebFile, Sys.OF_Delete);
					}
				}
				if (cbArchiv.Checked) 
				{
					if (cbLog.Checked) 
					{
						Int.PalLogDauer(strPBericht, "05o", SalDateTime.Current - dtMin);
						dtMin = SalDateTime.Current;
					}
				}
				// 31.07.19
				return bPOk;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalUpdateSeitenzahlinRg()
		{
			#region Actions
			using (new SalContext(this))
			{
				// 24.11.20
				// Set nRechNrAlt = frmMain.nRechNr - 1
				// 15.10.19 Ä1874
				if (strPSpezial == "LE" || strPSpezial == "D" || strPSpezial == "M") 
				{
					// If nAnzLLPrint < 2
					// Set nBriefArt = 0	!Standard
					// Else If nAnzLLPrint < 3
					// Set nBriefArt = 1	!Kompakt
					// Else
					// Set nBriefArt = 2	!Rest
					Int.SqlImmed("UPDATE le SET lebriefart = :dlgLlDruck.nAnzLLPrint WHERE learztnr= :frmMain.nTANr AND lerechnr = :dlgLlDruck.nRechNrAlt");
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// dlgLlDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgLlDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.dlgLlDruck_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.dlgLlDruck_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgLlDruck_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 22.11.21
			this.bePost = false;
			// 13.01.23
			this.cbLog.Checked = false;
			// 07.11.13
			if (Var.strBNAbtlg != "ED" && Var.strBNAbtlg != "GF") 
			{
				//Sal.HideWindow(this.cbArchiv);
			}
			this.cbArchiv.Checked = false;
			// 25.11.20
			if (this.strPBericht == "DYMO-Alternative.crd" || this.strPBericht == "DYMO-AlternativeBarcode.crd") 
			{
				this.cbArchiv.Checked = false;
			}
			// 26.10.15
			this.SetText(this.strPBericht);
			// 30.05.17
			App.frmMain.axLL.LlGetVersion(Const.LL_VERSION_MAJOR, ref this.nLLMajor);
			App.frmMain.axLL.LlGetVersion(Const.LL_VERSION_MINOR, ref this.nLLMinor);
			// 13.03.18
			// Call SalSetWindowText( dlgLlDruck, 'Drucken v' || SalNumberToStrX( nLLMajor, 0 ) || '.' || SalNumberToStrX( nLLMinor, 0) )
			this.SetText("Drucken: " + this.strPBericht);
			this.SetStatusBarText("List&&Label v" + this.nLLMajor.ToString(0) + "." + this.nLLMinor.ToString(0));

			this.strAltLand = "";
			// Call PalLog( 'LlDruck: 01' )
			// Call axLL.LlSetOptionString( LL_OPTIONSTR_LICENSINGINFO, '994gOw', nRet )
			// Call axLL.LlSetOptionString( LL_OPTIONSTR_LICENSINGINFO, 'oO92EQ', nRet )
			// Call axLL.LlSetOptionString( LL_OPTIONSTR_LICENSINGINFO, 'v9e0EQ', nRet )
			// Call axLL.LlSetOptionString( LL_OPTIONSTR_LICENSINGINFO, 'j4xoEQ', nRet )
			// Call axLL.LlSetOptionString( LL_OPTIONSTR_LICENSINGINFO, 'SxrEEQ', nRet )
			App.frmMain.axLL.LlSetOptionString(Const.LL_OPTIONSTR_EXPORTS_ALLOWED, "PRN;PRV;PDF;FILE;RTF;TXT;XLS", ref this.nRet);
			App.frmMain.axLL.LlSetOptionString(Const.LL_OPTIONSTR_EXPORTS_ALLOWED_IN_PREVIEW, "PRN;FILE;PDF;RTF;TXT;XLS", ref this.nRet);
			// 31.07.08 bei LL13 hatte sich die Voreinstellung geändert auf True. wieder zurückgesetzt
			App.frmMain.axLL.LlSetOption(Const.LL_OPTION_INCLUDEFONTDESCENT, 0, ref this.nRet);
			// 28.01.13 Ä877
			App.frmMain.axLL.LlSetOption(Const.LL_OPTION_DESIGNERPREVIEWPARAMETER, 1, ref this.nRet);
			App.frmMain.axLL.LlSetOption(Const.LL_OPTION_DESIGNEREXPORTPARAMETER, 1, ref this.nRet);

			App.frmMain.axLL.LlSetOption(Const.LL_OPTION_ADDVARSTOFIELDS, 1, ref this.nRet);
			// 02.03.23
			App.frmMain.axLL.LlSetOption(Const.LL_OPTION_NOPRINTERPATHCHECK, 1, ref this.nRet);
			// 18.04.08 siehe E-Mail combit
			// Call axLL.LlSetOptionString( LL_OPTION_MAXRTFVERSION, '0x 401', nRet )
			// Test
			// Call axLL.LlSetOption( 189, TRUE, nRet )
			// 16.04.08
			// Set cbDebug = FALSE
			// 16.08.07
			// Call axLL.LlSetDefaultProjectParameter( 'Export.SendAsMailAvailable', '0', LL_PARAMETERTYPE_USER, nRet )
			App.frmMain.axLL.LlXSetParameter(Const.LL_LLX_EXTENSIONTYPE_EXPORT, "", "Export.SendAsMailAvailable", "1", ref this.nRet);
			// Call axLL.LlXSetParameter( LL_LLX_EXTENSIONTYPE_EXPORT, "", 'Export.Mail.Provider', 'SMAPI', nRet )
			// 25.06.07 25.10.17 raus
			// Call axLL.LlPrintSetOption( LL_PRNOPT_JOBPAGES, 1, nRet )
			// 10.01.07 F102
			App.frmMain.axLL.LlSetOption(Const.LL_OPTION_CONVERTCRLF, 1, ref this.nRet);

			App.frmMain.axLL.LlSetOption(Const.LL_OPTION_SUPPORTPAGEBREAK, 1, ref this.nRet);
			// Call axLL.LlSetOption( LL_OPTION_USECHARTFIELDS, FALSE, nRet )
			// 10.02.11 OTF842
			// Call axLL.LlSetPrinterDefaultsDir( 'C:\\abr', nRet )
			this.strFileName = Var.strTVNPath + "\\LL12\\" + this.strPBericht;
			// 27.12.18
			// 07.05.14
			// 27.12.18 F4093
			// Set strAllUsersProfile = VisDosGetEnvString( 'ALLUSERSPROFILE' )
			this.strAllUsersProfile = App.frmRgSuchen.strPfadLL;
			// If SalStrRightX( strAllUsersProfile, 9 ) = 'All Users'
			// Set strAllUsersProfile = strAllUsersProfile || '\\Anwendungsdaten'
			// Call axLL.LlSetPrinterDefaultsDir( strAllUsersProfile, nRet )
			// Call SalMessageBox( '\'' || strAllUsersProfile || '\'
			// Return = ' || SalNumberToStrX( nRet, 0), 'LlSetPrinterDefaultsDir', MB_Ok|MB_IconAsterisk )
			// 07.05.14
			App.frmMain.axLL.LlSetOption(Const.LL_OPTION_RELAX_AT_SHUTDOWN, 1, ref this.nRet);
			App.frmMain.axLL.LlPreviewSetTempPath(this.strAllUsersProfile, ref this.nRet);
			App.frmMain.axLL.LlSetOption(Const.LL_OPTION_ESC_CLOSES_PREVIEW, 1, ref this.nRet);
			// 28.12.17
			// Call axLL.LlSetOption( LL_OPTION_RESETPROJECTSTATE_FORCES_NEW_PRINTJOB, FALSE, nRet )
			// Call axLL.LlSetOption( LL_OPTION_RESETPROJECTSTATE_FORCES_NEW_DC, FALSE, nRet )

			Int.SqlConnection(ref this.hSqlLlDruck);
			Int.SqlConnection(ref this.hSqlLlDruck2);
			// 06.01.14 Ä1005 RO
			// Call SqlCreateSession(hSession,'')
			// Call SqlCreateStatement (hSession, hSqlLlDruck)
			// Call SqlSetIsolationLevel(hSqlLlDruck,'RO')
			// Call SqlCreateStatement (hSession, hSqlLlDruck2)
			// Call SqlSetIsolationLevel(hSqlLlDruck2,'RO')
			// Call SqlSetParameter( hSqlLlDruck, DBP_PRESERVE,TRUE,'')
			// Call SqlSetParameter(hSqlLlDruck2,DBP_PRESERVE,TRUE,'')
			// If strBNAbtlg != 'ED'
			// Call SalHideWindow(pbDesignListe)
			// Call SalHideWindow(pbLayout)
			// Set bWithBox = FALSE
			this.bWithBox = true;
			// Call PalLog( 'LlDruck: 02' )
			// 18.03.12 F1549
			this.strTemp = Vis.DosGetEnvString("TEMP") + "\\" + "Pegasus";
			// 22.11.23
			if (!(Vis.DosExist(this.strTemp))) 
			{
				if (!(Sal.FileCreateDirectory(this.strTemp))) 
				{
				}
			}
			else
			{
				Vis.FileDelete(this.strTemp + "\\*.*");
			}
			// 21.06.13 Ä902
			this.strCustomerNumber = "";
			this.strCustomerNumberAlt = "";
			// 19.05.22 Ä2019
			this.strArztHalter = "";
			// 08.08.14 F2044
			this.lsBildAlt = "";
			App.frmMain.lsBild = "";
			// Init
			if (this.strPBericht == "Altersstruktur.lst")  // 03.09.18 Ä1648
			{
				if (!(this.hSqlLlDruck.PrepareAndExecute("SELECT aparztnr, count(*) INTO :dlgLlDruck.nArztNr, :dlgLlDruck.nCount FROM ap GROUP BY 1"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlLlDruck.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.nFetch = this.hSqlLlDruck.FetchNext();
						while (this.nFetch != Sys.FETCH_EOF) 
						{
							Int.SqlImmedSel(@"SELECT SUM(akrechsumm) INTO :dlgLlDruck.nRPDM FROM ak
WHERE akarztnr = :dlgLlDruck.nArztNr AND akdatum BETWEEN :frmMain.dtDatVon AND :frmMain.dtDatBis");
							this.nRPDM = this.nRPDM / this.nCount;
							Int.SqlImmed("UPDATE ap SET apumsatz = :dlgLlDruck.nRPDM WHERE aparztnr = :dlgLlDruck.nArztNr");
							this.nFetch = this.hSqlLlDruck.FetchNext();
						}
					}
				}
			}

			// If strBNAbtlg != 'ED'
			// Call SalPostMsg(pbDruckListe, SAM_Click, 0, 0)
			// 03.05.23 Ä2104
			Int.SqlConnection(ref this.hSqlPRID);
			// If NOT SqlPrepar(hSqlPRID, 'INSERT INTO prid (pridarztnr, pridhalternr, pridid, priderfdat, priddruck)
			// VALUES(:dlgLlDruck.nPRIDArzt, :dlgLlDruck.nPRIDHalter, :dlgLlDruck.strGUID, SYSDATETIME, :dlgLlDruck.strPRIDDoku)')
			// Call SalMessageBox( 'Print-ID kann nicht in Datenbank gespeichert werden', 'Prepare der Print-IDs nicht möglich', MB_Ok|MB_IconStop )
			// Return FALSE
			if (!(Int.SqlPrepar(this.hSqlPRID, @"INSERT INTO prid (pridarztnr, pridhalternr, pridid, priderfdat, priddruck, priduser)
VALUES(:dlgLlDruck.nPRIDArzt, :dlgLlDruck.nPRIDHalter, :dlgLlDruck.strGUID, SYSDATETIME, :dlgLlDruck.strPRIDDoku, :strBNUser)"))) 
			{
				Sal.MessageBox("Print-ID kann nicht in Datenbank gespeichert werden", "Prepare der Print-IDs nicht möglich", (Sys.MB_Ok | Sys.MB_IconStop));
				e.Return = false;
				return;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgLlDruck_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlLlDruck2.Disconnect();
			this.hSqlLlDruck.Disconnect();
			// Call SqlFreeSession( hSession )
			// 03.05.23 Ä2104
			this.hSqlPRID.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// pbDesignListe WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDesignListe_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDesignListe_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDesignListe_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.PalHoleDaten()) 
			{
				if (this.PalFetchNext(true)) 
				{
					this.PalDefineCurrentRecord(false);
					this.PalDefineCurrentRecord(true);

					if (this.strPBericht == "AAB.lst" || this.strPBericht == "Bestandsbuch.lst") 
					{

						// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
						SalFileHandle temp1 = App.frmDiskEin.hDisk;
						Sal.FileClose(ref temp1);
						App.frmDiskEin.hDisk = temp1;

					}
				}

				if (this.strFileName.Right(4) == ".lbl") 
				{
					this.nProjectType = Const.LL_PROJECT_LABEL;
				}
				else if (this.strFileName.Right(4) == ".crd") 
				{
					this.nProjectType = Const.LL_PROJECT_CARD;
				}
				else
				{
					this.nProjectType = Const.LL_PROJECT_LIST;
				}

				// Call axLL.LlSetOptionString( LL_OPTIONSTR_LICENSINGINFO, 'haIROw', nRet )
				// Call axLL.LlSetOptionString( LL_OPTIONSTR_LICENSINGINFO, 'oO92EQ', nRet )
				// Call axLL.LlSetOptionString( LL_OPTIONSTR_LICENSINGINFO, 'v9e0EQ', nRet )
				// Call axLL.LlSetOptionString( LL_OPTIONSTR_LICENSINGINFO, 'SxrEEQ', nRet )
				App.frmMain.axLL.LlDefineLayout(this.nHandle, "moveta-Designer " + this.strPBericht, this.nProjectType, this.strFileName, ref this.nRet);
				// 12.09.08 rausgenommen MK
				// Call axLL.LlDbAddTable( 'Bestandsbuch', 'Bestandsbuch', nRet )
			}

			#endregion
		}
		
		/// <summary>
		/// pbDruckListe WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruckListe_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDruckListe_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruckListe_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 22.10.20
			this.strPfadAppData = Vis.DosGetEnvString("APPDATA") + "\\";
			Vis.FileRename(this.strPfadAppData + "COMBIT.LOG", this.strPfadAppData + "COMBIT" + Int.PalDateToStrJJJJMMTThhmmss(SalDateTime.Current) + ".LOG");

			// Call PalLog( 'LlDruck: D01' )
			// If strPBericht = 'Erinnerungsliste.lst'	! 10.03.15 raus
			// Set strDummy = strBNZei
			// 06.11.13 F1757 frmMain.strVon -> strDummy
			// Call SalModalDialog(dlgText, hWndForm, 'EL-Liste für welches Zeichen (2-stellig) ? :', '', 2, strDummy)
			// Set strDummy = SalStrUpperX(strDummy)
			if (this.strPBericht == "Saldenliste.lst") 
			{
				dlgSalden.ModalDialog(App.frmMain);
			}
			// Else If strPBericht = 'Ratenzahler-Checkliste.lst'
			// If IDYES = SalMessageBox('Sollen die bezahlten Raten-
			// zahlervereinbarungen gelöscht
			// werden ?','Achtung', MB_YesNo|MB_IconQuestion)
			// 06.08.98
			// Set strSelect = 'SELECT rarztnr, rhalternr
			// INTO :frmMain.nTANr, :frmMain.nTHNr
			// FROM r,rk WHERE rarztnr=rkarztnr AND rhalternr=rkhalternr
			// GROUP BY 1,2
			// HAVING min(rkkzzahl)>1'
			// 12.12.06 F72
			// Set strSelect = 'SELECT rarztnr, rhalternr
			// INTO :frmMain.nTANr, :frmMain.nTHNr
			// FROM r,rk,a WHERE (rarztnr=aarztnr or rarztnr=anr2) and aarztnr=rkarztnr AND rhalternr=rkhalternr
			// GROUP BY 1,2
			// HAVING min(rkkzzahl)>1'
			// Call SqlHandleExec(hSqlLlDruck,strSelect,'Raten löschen',nCount)
			// Call SqlFetchNext(hSqlLlDruck,nFetch)
			// While nFetch != FETCH_EOF
			// Call SqlImmed('DELETE FROM r
			// WHERE rarztnr= :frmMain.nTANr AND rhalternr=:frmMain.nTHNr')
			// Call PalLog('RaZa n. RATCHECK gek.: Ha.'
			// || PalStrNum(frmMain.nTANr, 4, 0) || '/' || PalStrNum(frmMain.nTHNr, 5,0))
			// Call SqlFetchNext(hSqlLlDruck,nFetch)
			// Call SqlCommit( hSqlLlDruck )
			// 16.02.21
			this.dtMin = SalDateTime.Current;
			// 19.03.13 Ä901	07.11.13 + If cbArchiv
			if (this.cbArchiv.Checked) 
			{
				this.PalArchiv();
			}
			// 16.02.21
			this.dtMax = SalDateTime.Current;
			// Call PalLogDauer( strPBericht, '', dtMax - dtMin )
			// 16.04.08
			// If cbDebug
			// Call SalStatusSetText(hWndForm, 'LLSetDebug')
			// Call axLL.LlSetDebug( LL_DEBUG_CMBTLL )
			if (this.cbLog.Checked) 
			{
				Int.PalLogDauer(this.strPBericht, "dlgLlDruck vor SetDebug", SalDateTime.Current - this.dtMin);
				this.dtMin = SalDateTime.Current;
			}

			// 16.04.08
			// 17.01.18 am 16.08.18 Debugging wieder eingeschaltet
			App.frmMain.axLL.LlSetDebug(((Const.LL_DEBUG_CMBTLL | Const.LL_DEBUG_CMBTLL_NOSYSINFO) | Const.LL_DEBUG_CMBTLL_LOGTOFILE));
			// Call axLL.LlSetDebug( LL_DEBUG_CMBTLL )

			// Call PalLog( 'LlDruck: D02' )
			if (this.strFileName.Right(4) == ".lbl") 
			{
				this.nProjectType = Const.LL_PROJECT_LABEL;
			}
			else if (this.strFileName.Right(4) == ".crd") 
			{
				this.nProjectType = Const.LL_PROJECT_CARD;
			}
			else
			{
				this.nProjectType = Const.LL_PROJECT_LIST;
			}
			if (this.cbLog.Checked) 
			{
				Int.PalLogDauer(this.strPBericht, "dlgLlDruck vor DefineCurrentRecord(FALSE)", SalDateTime.Current - this.dtMin);
				this.dtMin = SalDateTime.Current;
			}

			this.PalDefineCurrentRecord(false);
			this.PalDefineCurrentRecord(true);
			// 07.05.14
			// If strBNZei = 'KN'	! 02.01.18 F3074
			// Set strAllUsersProfile = VisDosGetEnvString( 'TEMP' )
			// Else
			// Set strAllUsersProfile = VisDosGetEnvString( 'ALLUSERSPROFILE' )
			// If SalStrRightX( strAllUsersProfile, 9 ) = 'All Users'
			// Set strAllUsersProfile = strAllUsersProfile || '\\Anwendungsdaten'
			// Call axLL.LlSetPrinterDefaultsDir( strAllUsersProfile, nRet )

			// Call SalStatusSetText(hWndForm, 'LLPrintWithBoxStart')
			this.bDrucken = false;
			// 12.09.08 MK
			App.frmMain.axLL.LlDbAddTable("", "", ref this.nRet);
			// Call PalLog( 'LlDruck: D03' )
			if (this.cbLog.Checked) 
			{
				Int.PalLogDauer(this.strPBericht, "dlgLlDruck vor SetPrinterDefaultsDir " + this.strAllUsersProfile, SalDateTime.Current - this.dtMin);
				this.dtMin = SalDateTime.Current;
			}
			// 02.03.23
			App.frmMain.axLL.LlSetOption(Const.LL_OPTION_NOPRINTERPATHCHECK, 1, ref this.nRet);

			App.frmMain.axLL.LlSetPrinterDefaultsDir(this.strAllUsersProfile, ref this.nRet);
			// Call SalMessageBox( '\'' || strAllUsersProfile || '\'
			// Return = ' || SalNumberToStrX( nRet, 0), 'LlSetPrinterDefaultsDir', MB_Ok|MB_IconAsterisk )

			if (this.bWithBox) 
			{
				if (this.cbLog.Checked) 
				{
					Int.PalLogDauer(this.strPBericht, "dlgLlDruck vor PrintWithBoxStart", SalDateTime.Current - this.dtMin);
					this.dtMin = SalDateTime.Current;
				}

				// 07.02.18 F3111 raus: |LL_PRINT_MULTIPLE_JOBS
				// 10.08.23 F5036 "Drucke " || raus
				// Set strDummy = '-' || SalStrLeftX(strPBericht, SalStrScan(strPBericht, '.')-1)
				// Set strDummy = PalDateToStrJJJJMMTThhmmssmitStrichen( SalDateCurrent(  ) ) || '-' || SalStrLeftX(strPBericht, SalStrScan(strPBericht, '.')-1)
				App.frmMain.axLL.LlPrintWithBoxStart(this.nProjectType, this.strFileName, Const.LL_PRINT_USERSELECT, Const.LL_BOXTYPE_STDWAIT, this.nHandle, Int.PalDateToStrJJJJMMTThhmmssmitStrichen(SalDateTime.Current) + "-" + this.strPBericht.Left(this.strPBericht.Scan(
							".")), ref this.nRet);
			}
			else
			{
				if (this.cbLog.Checked) 
				{
					Int.PalLogDauer(this.strPBericht, "dlgLlDruck vor PrintStart", SalDateTime.Current - this.dtMin);
					this.dtMin = SalDateTime.Current;
				}

				App.frmMain.axLL.LlPrintStart(this.nProjectType, this.strFileName, Const.LL_PRINT_PREVIEW, ref this.nRet);
				// Set bWithBox = TRUE
			}
			// 12.01.09 da BRF-Dateien über 2GB problematisch
			// Call axLL.LlPrintSetOption(LL_PRNOPT_JOBPAGES, 250, nRet )
			// Call PalLog( 'LlDruck: D04' )
			if (this.cbLog.Checked) 
			{
				Int.PalLogDauer(this.strPBericht, "dlgLlDruck vor If nRet = 0. nRet = " + this.nRet.ToString(0), SalDateTime.Current - this.dtMin);
				this.dtMin = SalDateTime.Current;
			}

			if (this.nRet == 0) 
			{
				if (this.strPBericht == "Pfü.crd") 
				{
					App.frmMain.axLL.LlPrintSetOption(Const.LL_PRNOPT_COPIES, 6, ref this.nRet);
				}
				else if (this.strPBericht == "VZ.crd")  // 21.11.11 Ö658
				{
					App.frmMain.axLL.LlPrintSetOption(Const.LL_PRNOPT_COPIES, 4, ref this.nRet);
				}
				else if (this.strPBericht == "EV.crd")  // 21.11.11 Ö658
				{
					App.frmMain.axLL.LlPrintSetOption(Const.LL_PRNOPT_COPIES, 4, ref this.nRet);
				}
				else if (this.strPBericht == "Ratenzahler-Vereinbarung.lst") 
				{
					App.frmMain.axLL.LlPrintSetOption(Const.LL_PRNOPT_COPIES, 2, ref this.nRet);
				}
				// 12.01.09 OTF160 da BRF-Dateien über 2GB problematisch
				// 22.05.17 auskommentiert, da oben schon 250 Seiten
				// Call axLL.LlPrintSetOption(LL_PRNOPT_JOBPAGES, 1000, nRet )

				if (this.cbLog.Checked) 
				{
					Int.PalLogDauer(this.strPBericht, "dlgLlDruck vor PrintSetOption JOBPAGES 250", SalDateTime.Current - this.dtMin);
					this.dtMin = SalDateTime.Current;
				}

				App.frmMain.axLL.LlPrintSetOption(Const.LL_PRNOPT_JOBPAGES, 250, ref this.nRet);
				App.frmMain.axLL.LlPrintSetOption(Const.LL_PRNOPT_PRINTDLG_DEST, Const.LL_DESTINATION_PRN, ref this.nRet);
				// Call SalStatusSetText(hWndForm, 'LLPrintOptionsDialog')
				if (this.cbLog.Checked) 
				{
					Int.PalLogDauer(this.strPBericht, "PalAusgabe vor PrintOptionsDialog", SalDateTime.Current - this.dtMin);
					this.dtMin = SalDateTime.Current;
				}

				App.frmMain.axLL.LlPrintOptionsDialog(this.nHandle, "Bitte wählen Sie Ausgabeart und -medium:", ref this.nRet);
				// Call SalStatusSetText(hWndForm, 'LLPrintOptionsDialog:' || SalNumberToStrX(nRet,0))
				// 11.04.16 F2669
				if (this.cbLog.Checked) 
				{
					Int.PalLogDauer(this.strPBericht, "dlgLlDruck nach PrintOptionsDialog. nRet = " + this.nRet.ToString(0), SalDateTime.Current - this.dtMin);
					this.dtMin = SalDateTime.Current;
				}

				if (this.nRet == Const.LL_ERR_USER_ABORTED && (this.strTargetFormat == "PRN" || this.bePost)) 
				{
					if (Sys.IDYES == Sal.MessageBox("Möchten Sie die (Druck-)Ausgabe wirklich abbrechen?", "Abbruch ?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
					{
						Int.PalLog("Druck: Abbruch bestätigt");
					}
					else
					{
						this.nRet = 0;
						Int.PalLog("Druck: Abbruch widerrufen");
					}
				}

				if (this.nRet == Const.LL_ERR_USER_ABORTED) 
				{
					Int.PalLog("Druck: Abbruch bei OptionsDialog");
					// 27.10.10
					App.frmMain.axLL.LlPrintEnd(0, ref this.nRet);
				}
				else
				{
					App.frmMain.axLL.LlPrintGetOptionString(Const.LL_PRNOPTSTR_EXPORT, ref this.strTargetFormat, ref this.nRet);
					App.frmMain.axLL.LlPrintGetOption(Const.LL_PRNOPT_COPIES, ref this.nRet);
					this.nPages = this.nRet;
					if (this.nPages > 0) 
					{
						this.bDrucken = true;
					}
				}
			}
			else
			{
				// 27.10.10
				// Call SalMessageBox('Fehler ' || SalNumberToStrX(nRet,0), 'Fehler bei LlPrintWithBoxStart', MB_Ok|MB_IconStop)
				App.frmMain.axLL.LlGetErrortext(this.nRet, ref this.strError, ref this.nBufferSize);
				if (this.cbLog.Checked) 
				{
					Int.PalLogDauer(this.strPBericht, "dlgLlDruck Fehler nRet = " + this.nRet.ToString(0) + " " + this.strError, SalDateTime.Current - this.dtMin);
					this.dtMin = SalDateTime.Current;
				}

				Sal.MessageBox(this.strError, "Fehler " + this.nRet.ToString(0), (Sys.MB_Ok | Sys.MB_IconStop));
			}
			// Call PalLog( 'LlDruck: D05' )

			Sal.WaitCursor(true);
			// 26.03.13 Ä901
			this.bArchiv = false;
			if (this.cbLog.Checked) 
			{
				Int.PalLogDauer(this.strPBericht, "dlgLlDruck vor PalAusgabe", SalDateTime.Current - this.dtMin);
				this.dtMin = SalDateTime.Current;
			}

			this.PalAusgabe();

			if (this.cbLog.Checked) 
			{
				Int.PalLogDauer(this.strPBericht, "dlgLlDruck nach PalAusgabe", SalDateTime.Current - this.dtMin);
				this.dtMin = SalDateTime.Current;
			}

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// pbLayout WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLayout_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLayout_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLayout_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.strPBericht.Right(4) == ".lst") 
			{
				App.frmMain.axLL.LlSelectFileDlgTitle(this.nHandle, "Vorlage wählen", Const.LL_PROJECT_LIST, ref this.strFileName, ref this.nRet);
			}
			else if (this.strPBericht.Right(4) == ".lbl") 
			{
				App.frmMain.axLL.LlSelectFileDlgTitle(this.nHandle, "Vorlage wählen", Const.LL_PROJECT_LABEL, ref this.strFileName, ref this.nRet);
			}
			else
			{
				App.frmMain.axLL.LlSelectFileDlgTitle(this.nHandle, "Vorlage wählen", Const.LL_PROJECT_CARD, ref this.strFileName, ref this.nRet);
			}
			#endregion
		}
		
		/// <summary>
		/// pbePost WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbePost_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbePost_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbePost_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.strPBericht == "Saldenliste.lst") 
			{
				dlgSalden.ModalDialog(App.frmMain);
			}
			Sal.WaitCursor(true);
			// 14.07.17
			this.PalePost();

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
			this.DestroyWindow();
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalDefineCurrentRecordLocals
			{
				public SalNumber nRet = 0;
				public SalString strPDummy = "";
				public SalBoolean bAsField = false;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalFetchNextLocals
			{
				public SalNumber nDummy = 0;
				public SalBoolean bFirst = false;
			}
		}
		#endregion
	}
}
