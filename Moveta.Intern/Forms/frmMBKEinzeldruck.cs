// <ppj name="Moveta.Intern" date="15.11.2024 14:25:35" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="strTyp"></param>
	public partial class frmMBKEinzeldruck : SalQuickTabsForm
	{
		#region Window Parameters
		public SalString strTyp;
		#endregion
		
		#region Window Variables
		public SalSqlHandle hSqlMBKalender = SalSqlHandle.Null;
		public SalSqlHandle hSqlMBKalenderZa = SalSqlHandle.Null;
		public SalNumber nFetch = 0;
		public SalNumber nFetchZa = 0;
		public SalString strSelect = "";
		public SalBoolean bOK = false;
		public SalNumber nProzNr = 0;
		public SalNumber nHalterNr = 0;
		public SalString strAZ = "";
		public SalString strGerName = "";
		public SalString strGerPLZ = "";
		public SalNumber nHF = 0;
		public SalNumber nHF1 = 0;
		public SalNumber nHF2 = 0;
		public SalNumber nHF3 = 0;
		public SalNumber nHF4 = 0;
		public SalNumber nHF5 = 0;
		public SalNumber nHF6 = 0;
		public SalNumber nProzHF = 0;
		public SalNumber nMahn = 0;
		public SalNumber nMahn1 = 0;
		public SalNumber nA1 = 0;
		public SalNumber nA2 = 0;
		public SalNumber nA3 = 0;
		public SalNumber nA4 = 0;
		public SalNumber nA5 = 0;
		public SalNumber nA6 = 0;
		public SalNumber nR1 = 0;
		public SalNumber nR2 = 0;
		public SalNumber nR3 = 0;
		public SalNumber nR4 = 0;
		public SalNumber nR5 = 0;
		public SalNumber nR6 = 0;
		public SalNumber nMBDM = 0;
		public SalDateTime dtMBZust = SalDateTime.Null;
		public SalNumber nVBDM = 0;
		public SalDateTime dtVBZust = SalDateTime.Null;
		public SalNumber nDMFrueh = 0;
		public SalNumber nVADM = 0;
		public SalNumber nVADM1 = 0;
		public SalNumber nVADM2 = 0;
		public SalNumber nVADM3 = 0;
		public SalNumber nOPSum = 0;
		public SalNumber nZinsHF = 0;
		public SalNumber nZinsMB = 0;
		public SalString strHN1 = "";
		public SalString strHN2 = "";
		public SalString strHS = "";
		public SalString strHO = "";
		public SalNumber nTage = 0;
		public SalDateTime dtZaBuchDat = SalDateTime.Null;
		public SalDateTime dtZaGrundDat = SalDateTime.Null;
		public SalNumber nZaDM = 0;
		public SalNumber nZinsBer = 0;
		public SalNumber nMGausbuchen = 0;
		public SalNumber nDMHF = 0;
		public SalNumber nDMMahn = 0;
		public SalString strPLZ = "";
		public SalNumber nSumme = 0;
		public SalString strLand = "";
		public SalString strGerStrasse = "";
		public SalNumber nAGANRa = 0;
		public SalNumber nAGANRb = 0;
		public SalNumber nAGANRc = 0;
		public SalNumber nAGANRd = 0;
		public SalString strAGN1a = "";
		public SalString strAGN1b = "";
		public SalString strAGN1c = "";
		public SalString strAGN1d = "";
		public SalString strAGN2a = "";
		public SalString strAGN2b = "";
		public SalString strAGN2c = "";
		public SalString strAGN2d = "";
		public SalString strAGN3a = "";
		public SalString strAGN3b = "";
		public SalString strAGN3c = "";
		public SalString strAGN3d = "";
		public SalString strAGRFa = "";
		public SalString strAGRFb = "";
		public SalString strAGRFc = "";
		public SalString strAGRFd = "";
		public SalString strAGSHa = "";
		public SalString strAGSHb = "";
		public SalString strAGSHc = "";
		public SalString strAGSHd = "";
		public SalString strAGPLZa = "";
		public SalString strAGPLZb = "";
		public SalString strAGPLZc = "";
		public SalString strAGPLZd = "";
		public SalString strAGOa = "";
		public SalString strAGOb = "";
		public SalString strAGOc = "";
		public SalString strAGOd = "";
		public SalString strAGALa = "";
		public SalString strAGALb = "";
		public SalString strAGALc = "";
		public SalString strAGALd = "";
		public SalString strAGGVFUa = "";
		public SalString strAGGVVNa = "";
		public SalString strAGGVSHa = "";
		public SalString strAGGVPLZa = "";
		public SalString strAGGVOa = "";
		public SalString strAGGVALa = "";
		public SalString strAGGVFUb = "";
		public SalString strAGGVVNb = "";
		public SalString strAGGVSHb = "";
		public SalString strAGGVPLZb = "";
		public SalString strAGGVOb = "";
		public SalString strAGGVALb = "";
		public SalString strAGGVFUc = "";
		public SalString strAGGVVNc = "";
		public SalString strAGGVSHc = "";
		public SalString strAGGVPLZc = "";
		public SalString strAGGVOc = "";
		public SalString strAGGVALc = "";
		public SalString strAGGVFUd = "";
		public SalString strAGGVVNd = "";
		public SalString strAGGVSHd = "";
		public SalString strAGGVPLZd = "";
		public SalString strAGGVOd = "";
		public SalString strAGGVALd = "";
		public SalString strAGGVFUa2 = "";
		public SalString strAGGVVNa2 = "";
		public SalString strAGGVSHa2 = "";
		public SalString strAGGVPLZa2 = "";
		public SalString strAGGVOa2 = "";
		public SalString strAGGVALa2 = "";
		public SalString strAGGVFUb2 = "";
		public SalString strAGGVVNb2 = "";
		public SalString strAGGVSHb2 = "";
		public SalString strAGGVPLZb2 = "";
		public SalString strAGGVOb2 = "";
		public SalString strAGGVALb2 = "";
		public SalString strAGGVFUc2 = "";
		public SalString strAGGVVNc2 = "";
		public SalString strAGGVSHc2 = "";
		public SalString strAGGVPLZc2 = "";
		public SalString strAGGVOc2 = "";
		public SalString strAGGVALc2 = "";
		public SalString strAGGVFUd2 = "";
		public SalString strAGGVVNd2 = "";
		public SalString strAGGVSHd2 = "";
		public SalString strAGGVPLZd2 = "";
		public SalString strAGGVOd2 = "";
		public SalString strAGGVALd2 = "";
		public SalString strAGGVFUa3 = "";
		public SalString strAGGVVNa3 = "";
		public SalString strAGGVSHa3 = "";
		public SalString strAGGVPLZa3 = "";
		public SalString strAGGVOa3 = "";
		public SalString strAGGVALa3 = "";
		public SalString strAGGVFUb3 = "";
		public SalString strAGGVVNb3 = "";
		public SalString strAGGVSHb3 = "";
		public SalString strAGGVPLZb3 = "";
		public SalString strAGGVOb3 = "";
		public SalString strAGGVALb3 = "";
		public SalString strAGGVFUc3 = "";
		public SalString strAGGVVNc3 = "";
		public SalString strAGGVSHc3 = "";
		public SalString strAGGVPLZc3 = "";
		public SalString strAGGVOc3 = "";
		public SalString strAGGVALc3 = "";
		public SalString strAGGVFUd3 = "";
		public SalString strAGGVVNd3 = "";
		public SalString strAGGVSHd3 = "";
		public SalString strAGGVPLZd3 = "";
		public SalString strAGGVOd3 = "";
		public SalString strAGGVALd3 = "";
		public SalString strAGGVFUa4 = "";
		public SalString strAGGVVNa4 = "";
		public SalString strAGGVSHa4 = "";
		public SalString strAGGVPLZa4 = "";
		public SalString strAGGVOa4 = "";
		public SalString strAGGVALa4 = "";
		public SalString strAGGVFUb4 = "";
		public SalString strAGGVVNb4 = "";
		public SalString strAGGVSHb4 = "";
		public SalString strAGGVPLZb4 = "";
		public SalString strAGGVOb4 = "";
		public SalString strAGGVALb4 = "";
		public SalString strAGGVFUc4 = "";
		public SalString strAGGVVNc4 = "";
		public SalString strAGGVSHc4 = "";
		public SalString strAGGVPLZc4 = "";
		public SalString strAGGVOc4 = "";
		public SalString strAGGVALc4 = "";
		public SalString strAGGVFUd4 = "";
		public SalString strAGGVVNd4 = "";
		public SalString strAGGVSHd4 = "";
		public SalString strAGGVPLZd4 = "";
		public SalString strAGGVOd4 = "";
		public SalString strAGGVALd4 = "";
		public SalString strHTitel = "";
		public SalNumber nArztNr = 0;
		public SalNumber nArztNr2 = 0;
		public SalString strSelectRg = "";
		public SalString strLLQuery = "";
		public SalNumber nMG = 0;
		public SalNumber nZI = 0;
		public SalNumber nGesamtOP = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmMBKEinzeldruck(SalString strTyp)
		{
			// Assign global reference.
			App.frmMBKEinzeldruck = this;
			// Window Parameters initialization.
			this.strTyp = strTyp;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmMBKEinzeldruck CreateWindow(Control owner, SalString strTyp)
		{
			frmMBKEinzeldruck frm = new frmMBKEinzeldruck(strTyp);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmMBKEinzeldruck FromHandle(SalWindowHandle handle)
		{
			return ((frmMBKEinzeldruck)SalWindow.FromHandle(handle, typeof(frmMBKEinzeldruck)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// Ermittle die Where-Klausel
		/// </summary>
		/// <param name="nPArzt"></param>
		/// <param name="nPHalter"></param>
		/// <param name="strPSelectRg"></param>
		/// <returns></returns>
		public SalBoolean PalFuelleWhere(SalNumber nPArzt, SalNumber nPHalter, ref SalString strPSelectRg)
		{
			#region Actions
			using (new SalContext(this))
			{
				nArztNr = nPArzt;
				Int.SqlImmedSel("SELECT ANR2 INTO :frmMBKEinzeldruck.nArztNr2 FROM A WHERE AARZTNR = " + nPArzt.ToString(0));
				if (nArztNr2 == 0) 
				{
					nArztNr2 = nPArzt;
				}
				else
				{
					nArztNr2 = nPArzt;
				}
				strPSelectRg = "where " + Int.PalArztNr("rk", nArztNr, nArztNr2) + " and rkhalternr = " + nPHalter.ToString(0);
			}

			return false;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmMBKEinzeldruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMBKEinzeldruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmMBKEinzeldruck_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmMBKEinzeldruck_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMBKEinzeldruck_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.bfrmMBKEinzeldruck = true;
			// Set dfZusatzkosten = 0
			// 29.01.13 Ä877
			// If strTyp = ''
			// Set cbJ1 = TRUE
			// Set cbJ2 = TRUE
			// Set cbJ3 = TRUE
			// Set cbBa1 = TRUE
			// Set cbBa2 = TRUE
			// Set dfBa1 = 'VB des AG Uelzen...'
			// Set cbF = TRUE
			// Set cbF2 = TRUE
			// Set cbG1 = TRUE
			// Set cbG2 = TRUE
			// Set cbG3 = TRUE		! 09.03.16 auskommentiert
			// Set cbG6 = TRUE
			// Set cbG8 = TRUE
			// 24.11.22 Ä2054 TRUE -> FALSE
			// 29.03.23 laut Sevgi wieder auf TRUE
			// Set cbG9 = TRUE
			// 06.01.20 F4591
			// Set cbG4 = TRUE

			// Set cbI = TRUE
			// Set cbI1 = TRUE
			// Set cbI2 = TRUE
			// Set cbL1 = TRUE
			// Set cbL3 = TRUE
			// Set cbL4 = TRUE
			// 29.10.20 laut Doris auf FALSE gesetzt
			// Set cbM1 = FALSE
			// Set cbM2 = FALSE
			// Set cbN1 = TRUE
			// Set cbN3 = TRUE
			// Set cbN4 = TRUE
			// 15.04.13 Ä918
			// Set cbN4 = TRUE
			// 30.07.14 Ä1060
			// Set cbN5 = TRUE
			// Set cbN5 = FALSE

			// Set cbN7 = TRUE
			// Set cbN8 = TRUE
			// 07.03.13
			// Set cbVA6 = TRUE
			// Set cbVA6a = TRUE
			// 23.02.16
			// Set cbJ5 = TRUE
			// Set cbJ6 = TRUE
			// Set cbJ7 = TRUE
			// 04.04.16
			// Set cbNeuH = TRUE
			// Set cbNeuH3 = TRUE
			// 22.04.16 Ä1353
			// Set cbDSNb = TRUE
			// Set cbDSNe = TRUE
			// 09.01.17 Ä1470
			// Set cbJ2 = TRUE
			// Set cbJ3 = TRUE
			// Set cbJ5 = TRUE
			// 15.08.17 Ä1595
			// Set cbVAA = TRUE
			// Set dfVAA2 = '- Kurzarbeitergeld
			// - Abfindungszahlungen'
			// 15.01.18 Ä1687
			// Set cbVA5 = TRUE
			// Set dfVA5 = 'Bei Pfändungen Anspruch A: Es wird die Übersendung der Lohnabrechnungen 1/4-jährlich angeordnet - Mail oder Fax -.
			// Bei Pfändungen Anspruch D: Es wird die Übersendung der Kontoauszüge 1/4-jährlich angeordnet - Mail oder Fax -'
			// Select Case cbVA5 = FALSE
			// Set dfVA5 = ''
			// 01.11.19 Ä1877
			// Set cbNeuH1 = TRUE
			// Set cbNeuH3 = FALSE
			// Set cbJ5 = FALSE
			// Set cbNeuL3 = TRUE
			// 13.12.21 Ä1979
			this.dfbisDatum.DateTime = SalDateTime.Current;
			// 24.07.23 Ä2082
			this.cbVAnE1.Checked = true;
			this.cbVAnG2.Checked = true;
			this.cbVAnG2b.Checked = true;
			this.cbVAnG3.Checked = true;
			this.cbVAnH1.Checked = true;
			this.cbVAnH2.Checked = true;
			this.cbVAnI1.Checked = true;
			// 23.05.24 ### Tamara
			// Set cbVAnL3 = TRUE
			// Set cbVAnL4 = TRUE
			// 09.10.24
			this.cbVAnL1.Checked = false;
			this.cbVAnL1a.Checked = false;
			this.cbVAnL1b.Checked = false;
			this.cbVAnL1c.Checked = false;
			this.cbVAnL1d.Checked = false;
			this.cbVAnL1e.Checked = false;
			this.dfVAnL1f.Text = "";

			this.cbVAnL3.Checked = false;
			this.cbVAnL4.Checked = false;
			this.cbDSnBeschlDuch.Checked = false;
			this.cbDSnBeschlUnd.Checked = false;
			this.cbDSnBeschlSonnFeier.Checked = true;
			this.dfDSnEText.Text = "Vollstreckung des Haftbefehls";
			// ### bis hier
			this.cbVAnN1a.Checked = true;
			this.cbVAnN2.Checked = true;
			// 06.11.23 Ä2082
			this.cbPnAntrZustGS.Checked = true;
			this.cbPnAntrZustGSDs.Checked = true;
			this.cbPnAntrVerVorliegen.Checked = true;
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMBKEinzeldruck_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.bfrmMBKEinzeldruck = false;
			#endregion
		}
		
		/// <summary>
		/// picTabs WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case QO.TABSM_TabActivateStart:
					this.picTabs_OnTABSM_TabActivateStart(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// TABSM_TabActivateStart event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_OnTABSM_TabActivateStart(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.picTabs.SelectedIndex = this.picTabs.GetClicked();
			// 24.07.23 Ä2082
			if (this.picTabs.GetLabel(this.picTabs.SelectedIndex, ref Var.strPicTabLabel)) 
			{
				if (Var.strPicTabLabel == "VA neu") 
				{
					this.cbVAnE1.Checked = true;
					this.cbVAnG2.Checked = true;
					this.cbVAnG2b.Checked = true;
					this.cbVAnG3.Checked = true;
					this.cbVAnH1.Checked = true;
					this.cbVAnH2.Checked = true;
					this.cbVAnI1.Checked = true;
					// 23.05.24 ### Tamara
					// Set cbVAnL3 = TRUE
					// Set cbVAnL4 = TRUE
					// 09.10.24 ###
					this.cbVAnL1.Checked = false;
					this.cbVAnL1a.Checked = false;
					this.cbVAnL1b.Checked = false;
					this.cbVAnL1c.Checked = false;
					this.cbVAnL1d.Checked = false;
					this.cbVAnL1e.Checked = false;
					this.dfVAnL1f.Text = "";

					this.cbVAnL3.Checked = false;
					this.cbVAnL4.Checked = false;
					this.cbDSnBeschlDuch.Checked = false;
					this.cbDSnBeschlUnd.Checked = false;
					this.cbDSnBeschlSonnFeier.Checked = true;
					this.dfDSnEText.Text = "Vollstreckung des Haftbefehls";
					// ### bis hier
					this.cbVAnN1a.Checked = true;
					this.cbVAnN2.Checked = true;
				}
				if (Var.strPicTabLabel == "RechInsol") 
				{
					this.dfRIArztNr.SetFocus();
				}
				if (Var.strPicTabLabel == "DS neu") 
				{
					this.cbDSnTag.Checked = true;
					this.mlDSnTagNacht.Text = "Der Schuldner wurde trotz vorheriger Ankündigung mehrfach zu unterschiedlichen Tageszeiten nicht angetroffen.";
					this.dfDSnAnla1.Text = "Vollstreckungsunterlagen";
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfPR1 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPR1_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfPR1_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPR1_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfPR1.IsEmpty()) 
			{
				this.dfAZ1.Clear();
				this.dfHN1.Clear();
				this.dfHN1.Clear();
				this.dfHS.Clear();
				this.dfHO.Clear();
			}
			else
			{
				// Set dfGerName = ''
				Int.SqlImmedSel(@"SELECT praz, prgername,
hti || hvn || ' ' || hnn, hname2, hstr, hort, hland, htitel
INTO :frmMBKEinzeldruck.dfAZ1, :frmMBKEinzeldruck.dfGerName,
:frmMBKEinzeldruck.dfHN1, :frmMBKEinzeldruck.dfHN2, :frmMBKEinzeldruck.dfHS, :frmMBKEinzeldruck.dfHO, :frmMBKEinzeldruck.strLand, :frmMBKEinzeldruck.strHTitel
FROM pr, h
WHERE prnr = :frmMBKEinzeldruck.dfPR1 AND prarztnr=harztnr AND prhalternr=hhalternr AND hdeaktiv IS NULL");
				// GerName, wenn leer
				if (this.dfGerName.Text == "") 
				{
					this.strGerPLZ = ((SalString)this.dfHO.Text).Left(((SalString)this.dfHO.Text).Scan(" "));
					Int.SqlImmedSel(@"SELECT gebez INTO :frmMBKEinzeldruck.dfGerName
FROM ge WHERE gelg=0 AND geplz = :frmMBKEinzeldruck.strGerPLZ ");
				}
				// 13.05.19 Ä1852
				// 17.06.19 F4506
				this.strPLZ = ((SalString)this.dfHO.Text).Trim().Left(((SalString)this.dfHO.Text).Trim().Scan(" "));
				// 01.07.19
				if (((SalString)this.dfGerName.Text).Left(2) == "LG") 
				{
					this.nSumme = 9999999;
				}
				else
				{
					this.nSumme = 1;
				}
				this.dfGerName.Text = Int.PalHoleGericht(this.strPLZ, this.nSumme, this.strLand, ref this.strGerStrasse);
				Int.SqlImmedSel("SELECT gestr INTO :frmMBKEinzeldruck.strGerStrasse FROM ge WHERE gebez = :frmMBKEinzeldruck.dfGerName AND gestr IS NOT NULL");
				// Call SqlIstDa( 'FROM ge WHERE geplz = :frmMBKEinzeldruck.strPLZ AND gestr IS NOT NULL', bExists )
				if (this.strGerStrasse == "") 
				{
					if (Sys.IDYES == Sal.MessageBox(@"Für Gericht ist noch keine Straße hinterlegt!
Bitte in Daten ändern hinterlegen.", "Straße fehlt", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
					{
						frmMBErf.CreateWindow(this, "frmMB", this.dfPR1.Number);
					}
				}
				// 03.07.23
				App.frmMBKalender.strGerStrasse = this.strGerStrasse;
				// 24.07.23 Ä2082
				// Call SqlImmed('SELECT
				// preaganra, preagn1a, preagn2a, preagn3a, preagrfa, preagsha, preagplza, preagoa, preagala, prepgma, prepgplza, prepgoa,
				// preaganrb, preagn1b, preagn2b, preagn3b, preagrfb, preagshb, preagplzb, preagob, preagalb, prepgmb, prepgplzb, prepgob,
				// preaganrc, preagn1c, preagn2c, preagn3c, preagrfc, preagshc, preagplzc, preagoc, preagalc, prepgmc, prepgplzc, prepgoc,
				// preaganrd, preagn1d, preagn2d, preagn3d, preagrfd, preagshd, preagplzd, preagod, preagald, prepgmd, prepgplzd, prepgod,
				// preaggvfua, preaggvvna, preaggvsha, preaggvplza, preaggvoa, preaggvala,
				// preaggvfub, preaggvvnb, preaggvshb, preaggvplzb, preaggvob, preaggvalb,
				// preaggvfuc, preaggvvnc, preaggvshc, preaggvplzc, preaggvoc, preaggvalc,
				// preaggvfud, preaggvvnd, preaggvshd, preaggvplzd, preaggvod, preaggvald,
				// preaggvfua2, preaggvvna2, preaggvsha2, preaggvplza2, preaggvoa2, preaggvala2,
				// preaggvfub2, preaggvvnb2, preaggvshb2, preaggvplzb2, preaggvob2, preaggvalb2,
				// preaggvfuc2, preaggvvnc2, preaggvshc2, preaggvplzc2, preaggvoc2, preaggvalc2,
				// preaggvfud2, preaggvvnd2, preaggvshd2, preaggvplzd2, preaggvod2, preaggvald2,
				// preaggvfua3, preaggvvna3, preaggvsha3, preaggvplza3, preaggvoa3, preaggvala3,
				// preaggvfub3, preaggvvnb3, preaggvshb3, preaggvplzb3, preaggvob3, preaggvalb3,
				// preaggvfuc3, preaggvvnc3, preaggvshc3, preaggvplzc3, preaggvoc3, preaggvalc3,
				// preaggvfud3, preaggvvnd3, preaggvshd3, preaggvplzd3, preaggvod3, preaggvald3,
				// preaggvfua4, preaggvvna4, preaggvsha4, preaggvplza4, preaggvoa4, preaggvala4,
				// preaggvfub4, preaggvvnb4, preaggvshb4, preaggvplzb4, preaggvob4, preaggvalb4,
				// preaggvfuc4, preaggvvnc4, preaggvshc4, preaggvplzc4, preaggvoc4, preaggvalc4,
				// preaggvfud4, preaggvvnd4, preaggvshd4, preaggvplzd4, preaggvod4, preaggvald4)
				// INTO
				// :frmMBKEinzeldruck.strAGANRa, :frmMBKEinzeldruck.strAGN1a, :frmMBKEinzeldruck.strAGN2a, :frmMBKEinzeldruck.strAGN3a, :frmMBKEinzeldruck.strAGRFa,
				// :frmMBKEinzeldruck.strAGSHa, :frmMBKEinzeldruck.strAGPLZa, :frmMBKEinzeldruck.strAGOa, :frmMBKEinzeldruck.strAGALa, :frmMBKEinzeldruck.dfPGMa, :frmMBKEinzeldruck.dfPGPLZa, :frmMBKEinzeldruck.dfPGOa,
				// :frmMBKEinzeldruck.strAGANRb, :frmMBKEinzeldruck.strAGN1b, :frmMBKEinzeldruck.strAGN2b, :frmMBKEinzeldruck.strAGN3b, :frmMBKEinzeldruck.strAGRFb,
				// :frmMBKEinzeldruck.strAGSHb, :frmMBKEinzeldruck.strAGPLZb, :frmMBKEinzeldruck.strAGOb, :frmMBKEinzeldruck.strAGALb, :frmMBKEinzeldruck.dfPGMb, :frmMBKEinzeldruck.dfPGPLZb, :frmMBKEinzeldruck.dfPGOb,
				// :frmMBKEinzeldruck.strAGANRc, :frmMBKEinzeldruck.strAGN1c, :frmMBKEinzeldruck.strAGN2c, :frmMBKEinzeldruck.strAGN3c, :frmMBKEinzeldruck.strAGRFc,
				// :frmMBKEinzeldruck.strAGSHc, :frmMBKEinzeldruck.strAGPLZc, :frmMBKEinzeldruck.strAGOc, :frmMBKEinzeldruck.strAGALc, :frmMBKEinzeldruck.dfPGMc, :frmMBKEinzeldruck.dfPGPLZc, :frmMBKEinzeldruck.dfPGOc,
				// :frmMBKEinzeldruck.strAGANRd, :frmMBKEinzeldruck.strAGN1d, :frmMBKEinzeldruck.strAGN2d, :frmMBKEinzeldruck.strAGN3d, :frmMBKEinzeldruck.strAGRFd,
				// :frmMBKEinzeldruck.strAGSHd, :frmMBKEinzeldruck.strAGPLZd, :frmMBKEinzeldruck.strAGOd, :frmMBKEinzeldruck.strAGALd, :frmMBKEinzeldruck.dfPGMd, :frmMBKEinzeldruck.dfPGPLZd, :frmMBKEinzeldruck.dfPGOd,
				// :frmMBKEinzeldruck.strAGGVFUa, :frmMBKEinzeldruck.strAGGVVNa, :frmMBKEinzeldruck.strAGGVSHa, :frmMBKEinzeldruck.strAGGVPLZa, :frmMBKEinzeldruck.strAGGVOa, :frmMBKEinzeldruck.strAGGVALa,
				// :frmMBKEinzeldruck.strAGGVFUb, :frmMBKEinzeldruck.strAGGVVNb, :frmMBKEinzeldruck.strAGGVSHb, :frmMBKEinzeldruck.strAGGVPLZb, :frmMBKEinzeldruck.strAGGVOb, :frmMBKEinzeldruck.strAGGVALb,
				// :frmMBKEinzeldruck.strAGGVFUc, :frmMBKEinzeldruck.strAGGVVNc, :frmMBKEinzeldruck.strAGGVSHc, :frmMBKEinzeldruck.strAGGVPLZc, :frmMBKEinzeldruck.strAGGVOc, :frmMBKEinzeldruck.strAGGVALc,
				// :frmMBKEinzeldruck.strAGGVFUd, :frmMBKEinzeldruck.strAGGVVNd, :frmMBKEinzeldruck.strAGGVSHd, :frmMBKEinzeldruck.strAGGVPLZd, :frmMBKEinzeldruck.strAGGVOd, :frmMBKEinzeldruck.strAGGVALd,
				// :frmMBKEinzeldruck.strAGGVFUa2, :frmMBKEinzeldruck.strAGGVVNa2, :frmMBKEinzeldruck.strAGGVSHa2, :frmMBKEinzeldruck.strAGGVPLZa2, :frmMBKEinzeldruck.strAGGVOa2, :frmMBKEinzeldruck.strAGGVALa2,
				// :frmMBKEinzeldruck.strAGGVFUb2, :frmMBKEinzeldruck.strAGGVVNb2, :frmMBKEinzeldruck.strAGGVSHb2, :frmMBKEinzeldruck.strAGGVPLZb2, :frmMBKEinzeldruck.strAGGVOb2, :frmMBKEinzeldruck.strAGGVALb2,
				// :frmMBKEinzeldruck.strAGGVFUc2, :frmMBKEinzeldruck.strAGGVVNc2, :frmMBKEinzeldruck.strAGGVSHc2, :frmMBKEinzeldruck.strAGGVPLZc2, :frmMBKEinzeldruck.strAGGVOc2, :frmMBKEinzeldruck.strAGGVALc2,
				// :frmMBKEinzeldruck.strAGGVFUd2, :frmMBKEinzeldruck.strAGGVVNd2, :frmMBKEinzeldruck.strAGGVSHd2, :frmMBKEinzeldruck.strAGGVPLZd2, :frmMBKEinzeldruck.strAGGVOd2, :frmMBKEinzeldruck.strAGGVALd2,
				// :frmMBKEinzeldruck.strAGGVFUa3, :frmMBKEinzeldruck.strAGGVVNa3, :frmMBKEinzeldruck.strAGGVSHa3, :frmMBKEinzeldruck.strAGGVPLZa3, :frmMBKEinzeldruck.strAGGVOa3, :frmMBKEinzeldruck.strAGGVALa3,
				// :frmMBKEinzeldruck.strAGGVFUb3, :frmMBKEinzeldruck.strAGGVVNb3, :frmMBKEinzeldruck.strAGGVSHb3, :frmMBKEinzeldruck.strAGGVPLZb3, :frmMBKEinzeldruck.strAGGVOb3, :frmMBKEinzeldruck.strAGGVALb3,
				// :frmMBKEinzeldruck.strAGGVFUc3, :frmMBKEinzeldruck.strAGGVVNc3, :frmMBKEinzeldruck.strAGGVSHc3, :frmMBKEinzeldruck.strAGGVPLZc3, :frmMBKEinzeldruck.strAGGVOc3, :frmMBKEinzeldruck.strAGGVALc3,
				// :frmMBKEinzeldruck.strAGGVFUd3, :frmMBKEinzeldruck.strAGGVVNd3, :frmMBKEinzeldruck.strAGGVSHd3, :frmMBKEinzeldruck.strAGGVPLZd3, :frmMBKEinzeldruck.strAGGVOd3, :frmMBKEinzeldruck.strAGGVALd3,
				// :frmMBKEinzeldruck.strAGGVFUa4, :frmMBKEinzeldruck.strAGGVVNa4, :frmMBKEinzeldruck.strAGGVSHa4, :frmMBKEinzeldruck.strAGGVPLZa4, :frmMBKEinzeldruck.strAGGVOa4, :frmMBKEinzeldruck.strAGGVALa4,
				// :frmMBKEinzeldruck.strAGGVFUb4, :frmMBKEinzeldruck.strAGGVVNb4, :frmMBKEinzeldruck.strAGGVSHb4, :frmMBKEinzeldruck.strAGGVPLZb4, :frmMBKEinzeldruck.strAGGVOb4, :frmMBKEinzeldruck.strAGGVALb4,
				// :frmMBKEinzeldruck.strAGGVFUc4, :frmMBKEinzeldruck.strAGGVVNc4, :frmMBKEinzeldruck.strAGGVSHc4, :frmMBKEinzeldruck.strAGGVPLZc4, :frmMBKEinzeldruck.strAGGVOc4, :frmMBKEinzeldruck.strAGGVALc4,
				// :frmMBKEinzeldruck.strAGGVFUd4, :frmMBKEinzeldruck.strAGGVVNd4, :frmMBKEinzeldruck.strAGGVSHd4, :frmMBKEinzeldruck.strAGGVPLZd4, :frmMBKEinzeldruck.strAGGVOd4, :frmMBKEinzeldruck.strAGGVALd4
				// FROM pre WHERE preproznr = :frmMBKEinzeldruck.dfPR1')
				Int.SqlImmedSel(@"SELECT
preaganra, preagn1a, preagn2a, preagn3a, preagrfa, preagsha, preagplza, preagoa, preagala,
preaganrb, preagn1b, preagn2b, preagn3b, preagrfb, preagshb, preagplzb, preagob, preagalb,
preaganrc, preagn1c, preagn2c, preagn3c, preagrfc, preagshc, preagplzc, preagoc, preagalc,
preaganrd, preagn1d, preagn2d, preagn3d, preagrfd, preagshd, preagplzd, preagod, preagald,
preaggvfua, preaggvvna, preaggvsha, preaggvplza, preaggvoa, preaggvala,
preaggvfub, preaggvvnb, preaggvshb, preaggvplzb, preaggvob, preaggvalb,
preaggvfuc, preaggvvnc, preaggvshc, preaggvplzc, preaggvoc, preaggvalc,
preaggvfud, preaggvvnd, preaggvshd, preaggvplzd, preaggvod, preaggvald
INTO
:frmMBKEinzeldruck.nAGANRa, :frmMBKEinzeldruck.strAGN1a, :frmMBKEinzeldruck.strAGN2a, :frmMBKEinzeldruck.strAGN3a, :frmMBKEinzeldruck.strAGRFa,
:frmMBKEinzeldruck.strAGSHa, :frmMBKEinzeldruck.strAGPLZa, :frmMBKEinzeldruck.strAGOa, :frmMBKEinzeldruck.strAGALa,
:frmMBKEinzeldruck.nAGANRb, :frmMBKEinzeldruck.strAGN1b, :frmMBKEinzeldruck.strAGN2b, :frmMBKEinzeldruck.strAGN3b, :frmMBKEinzeldruck.strAGRFb,
:frmMBKEinzeldruck.strAGSHb, :frmMBKEinzeldruck.strAGPLZb, :frmMBKEinzeldruck.strAGOb, :frmMBKEinzeldruck.strAGALb,
:frmMBKEinzeldruck.nAGANRc, :frmMBKEinzeldruck.strAGN1c, :frmMBKEinzeldruck.strAGN2c, :frmMBKEinzeldruck.strAGN3c, :frmMBKEinzeldruck.strAGRFc,
:frmMBKEinzeldruck.strAGSHc, :frmMBKEinzeldruck.strAGPLZc, :frmMBKEinzeldruck.strAGOc, :frmMBKEinzeldruck.strAGALc,
:frmMBKEinzeldruck.nAGANRd, :frmMBKEinzeldruck.strAGN1d, :frmMBKEinzeldruck.strAGN2d, :frmMBKEinzeldruck.strAGN3d, :frmMBKEinzeldruck.strAGRFd,
:frmMBKEinzeldruck.strAGSHd, :frmMBKEinzeldruck.strAGPLZd, :frmMBKEinzeldruck.strAGOd, :frmMBKEinzeldruck.strAGALd,
:frmMBKEinzeldruck.strAGGVFUa, :frmMBKEinzeldruck.strAGGVVNa, :frmMBKEinzeldruck.strAGGVSHa, :frmMBKEinzeldruck.strAGGVPLZa, :frmMBKEinzeldruck.strAGGVOa, :frmMBKEinzeldruck.strAGGVALa,
:frmMBKEinzeldruck.strAGGVFUb, :frmMBKEinzeldruck.strAGGVVNb, :frmMBKEinzeldruck.strAGGVSHb, :frmMBKEinzeldruck.strAGGVPLZb, :frmMBKEinzeldruck.strAGGVOb, :frmMBKEinzeldruck.strAGGVALb,
:frmMBKEinzeldruck.strAGGVFUc, :frmMBKEinzeldruck.strAGGVVNc, :frmMBKEinzeldruck.strAGGVSHc, :frmMBKEinzeldruck.strAGGVPLZc, :frmMBKEinzeldruck.strAGGVOc, :frmMBKEinzeldruck.strAGGVALc,
:frmMBKEinzeldruck.strAGGVFUd, :frmMBKEinzeldruck.strAGGVVNd, :frmMBKEinzeldruck.strAGGVSHd, :frmMBKEinzeldruck.strAGGVPLZd, :frmMBKEinzeldruck.strAGGVOd, :frmMBKEinzeldruck.strAGGVALd
FROM pre WHERE preproznr = :frmMBKEinzeldruck.dfPR1");
				Sal.MessageBeep(0);

			}
			#endregion
		}
		
		/// <summary>
		/// rbVZBank WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbVZBank_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbVZBank_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbVZBank_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalHideWindowAndLabel( mlExtra )
			// Call SalShowWindowAndLabel( mlDritt )
			#endregion
		}
		
		/// <summary>
		/// rbVZArbeit WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbVZArbeit_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbVZArbeit_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbVZArbeit_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalHideWindowAndLabel( mlExtra )
			// Call SalShowWindowAndLabel( mlDritt )
			#endregion
		}
		
		/// <summary>
		/// rbVZMolkerei WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbVZMolkerei_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbVZMolkerei_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbVZMolkerei_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalHideWindowAndLabel( mlExtra )
			// Call SalShowWindowAndLabel( mlDritt )
			#endregion
		}
		
		/// <summary>
		/// rbVZVariabel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbVZVariabel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbVZVariabel_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbVZVariabel_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalShowWindowAndLabel( mlExtra )
			// Call SalShowWindowAndLabel( mlDritt )
			#endregion
		}
		
		/// <summary>
		/// pbVZOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbVZOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbVZOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbVZOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.rbVZArbeit.Checked) 
			{
				App.frmMBKalender.nPFÜa = 1;
			}
			else if (this.rbVZBank.Checked) 
			{
				App.frmMBKalender.nPFÜa = 2;
			}
			else if (this.rbVZMolkerei.Checked) 
			{
				App.frmMBKalender.nPFÜa = 3;
			}
			else if (this.rbVZVariabel.Checked) 
			{
				App.frmMBKalender.nPFÜa = 4;
			}
			App.frmMBKalender.strDritt = this.mlDritt.Text;
			App.frmMBKalender.strExtra = this.mlExtra.Text;
			// 05.01.11
			App.frmMBKalender.strZusatzkosten = this.dfZusatzkostenText.Text;
			App.frmMBKalender.nZusatzkosten = this.dfZusatzkosten.Number;

			Sal.WaitCursor(true);
			this.SetStatusBarText("Alter MBKalendervorschlag wird gelöscht");
			this.nMahn = 0;
			Int.SqlImmedX("DELETE FROM mbk WHERE mbktyp=\'VZ\'  AND mbkuser = :strBNUser ");
			this.SetStatusBarText("Neuer Vorschlag wird erstellt -  Bitte warten ...");
			this.strSelect = @"select prnr, praz, prhalternr,
prdma + prdmc, prdmb, prdmhf, prprozhf, prdmmahn
INTO :frmMBKEinzeldruck.nProzNr, :frmMBKEinzeldruck.strAZ, :frmMBKEinzeldruck.nHalterNr,
:frmMBKEinzeldruck.nMahn, :frmMBKEinzeldruck.nMBDM, :frmMBKEinzeldruck.nDMHF, :frmMBKEinzeldruck.nProzHF, :frmMBKEinzeldruck.nDMMahn
from pr
WHERE prnr = :frmMBKEinzeldruck.dfPR1
ORDER BY prnr";
			this.bOK = Int.SqlConnection(ref this.hSqlMBKalender);
			this.bOK = Int.SqlConnection(ref this.hSqlMBKalenderZa);
			this.bOK = Int.SqlHandleExec(this.hSqlMBKalender, this.strSelect, "Erstellen Vorschlag", ref Var.nErr) == Sys.IDOK;
			Sal.WaitCursor(true);
			if (this.bOK) 
			{
				this.nFetch = this.hSqlMBKalender.FetchNext();
				while (this.nFetch != Sys.FETCH_EOF) 
				{
					this.SetStatusBarText("PR-Nr.: " + this.nProzNr.ToString(0));
					if (this.nDMHF == SalNumber.Null) 
					{
						this.nDMHF = 0;
					}
					// 10.01.03
					if (this.nDMMahn == SalNumber.Null) 
					{
						this.nDMMahn = 0;
					}
					// 12.03.02
					this.bOK = Int.SqlHandleExec(this.hSqlMBKalenderZa, @"SELECT  prdarztnr, prdrechnr INTO  :frmMBKEinzeldruck.nA1, :frmMBKEinzeldruck.nR1
FROM prd
WHERE prdnr = :frmMBKEinzeldruck.nProzNr", "Zahlungen holen", ref Var.nErr) == Sys.IDOK;
					this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					this.nHF = 0;
					while (this.nFetchZa != Sys.FETCH_EOF) 
					{
						// 18.11.02 sum(rkdmmahn-rkzamahn)
						Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn), sum(rkdmmahn)
INTO :frmMBKEinzeldruck.nHF1, :frmMBKEinzeldruck.nMahn1
FROM rk
WHERE rkarztnr = :frmMBKEinzeldruck.nA1 AND rkrechnr = :frmMBKEinzeldruck.nR1 AND rkdeaktiv IS NULL");
						// 05.10.99
						if (this.nDMHF == 0)  // MB vor 05.10.99 gemacht
						{
							Int.SqlImmed(@"UPDATE za SET zaproznr = :frmMBKEinzeldruck.nProzNr
WHERE zaarztnr = :frmMBKEinzeldruck.nA1 AND zarechnr = :frmMBKEinzeldruck.nR1");
							this.nHF = this.nHF + this.nHF1;
						}
						if (this.nDMMahn == 0) 
						{
							this.nMahn = this.nMahn + this.nMahn1;
						}
						else if (this.nDMMahn != -1) 
						{
							this.nMahn = this.nMahn + this.nDMMahn;
							this.nDMMahn = -1;
						}
						this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					}
					// HF + MG
					// 05.10.99
					if (this.nDMHF == 0) 
					{
						this.nDMHF = this.nHF;
					}
					// Proz HF
					Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hstr, hort
INTO :frmMBKEinzeldruck.strHN1, :frmMBKEinzeldruck.strHN2,
:frmMBKEinzeldruck.strHS, :frmMBKEinzeldruck.strHO
FROM h
WHERE harztnr = :frmMBKEinzeldruck.nA1 AND hhalternr = :frmMBKEinzeldruck.nHalterNr AND hdeaktiv IS NULL");
					// 22.03.02
					if (this.nProzHF == 0 || this.nProzHF == SalNumber.Null) 
					{
						if (1 == dlgDM.ModalDialog(this, "Bitte geben Sie für PR" + Int.PalStrNum(this.nProzNr, 6, 0) + " den Zinssatz für die HF ein  (%) :", ref this.nProzHF)) 
						{
						}
					}
					// GerName, wenn leer
					// Set strGerPLZ = SalStrLeftX(strHO, SalStrScan(strHO, ' '))
					// Call SqlImmedSel('SELECT gebez INTO :frmMBKEinzeldruck.strGerName
					// FROM ge WHERE gelg=0 AND geplz = :frmMBKEinzeldruck.strGerPLZ ')
					// MB
					// #27 @ABS(akdm) >= 18
					if (this.nMBDM == 0) 
					{
						Int.SqlImmedSel(@"SELECT sum(akdm)
INTO :frmMBKEinzeldruck.nMBDM
FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr AND @ABS(akdm) >= 18  AND akdeaktiv IS NULL
AND aktyp='MB' AND (aktypdetail = 'MB' or aktypdetail = 'MB-AG')");
					}
					Int.SqlImmedSel(@"SELECT akzust
INTO :frmMBKEinzeldruck.dtMBZust
FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr
AND aktyp='MB' AND (aktypdetail = 'MB' OR aktypdetail = 'MB-AG') AND akdeaktiv IS NULL");
					// VB
					Int.SqlImmedSel(@"SELECT akdm, akzust
INTO :frmMBKEinzeldruck.nVBDM, :frmMBKEinzeldruck.dtVBZust
FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr
AND aktyp='MB' AND aktypdetail = 'VB' AND akdeaktiv IS NULL ");
					// Frühere Vollstreckungsmaßnahmen
					Int.SqlImmedSel(@"SELECT sum(akdm)
INTO :frmMBKEinzeldruck.nDMFrueh
FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr
AND aktyp='MB' AND aktypdetail <> 'MB' AND aktypdetail <> 'MB-AG' AND aktypdetail <> 'VB' AND akdeaktiv IS NULL ");
					// 30.06.20 Ä1892
					// VA-Kosten
					// Call SqlImmedSel('SELECT (badm1+badm2+badm3)
					// INTO :frmMBKEinzeldruck.nVADM
					// FROM ba
					// WHERE babuart = \'VA\' AND akdeaktiv IS NULL ')
					Int.SqlImmedSel(@"SELECT badm1, badm2, badm3
INTO :frmMBKEinzeldruck.nVADM1, :frmMBKEinzeldruck.nVADM2, :frmMBKEinzeldruck.nVADM3
FROM ba
WHERE babuart = 'VA' ");
                    if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31))
                    {
						this.nVADM1 = (this.nVADM1 * 116 / 119 * 100).Round() / 100;
						this.nVADM3 = (this.nVADM3 * 116 / 119 * 100).Round() / 100;
					}
					this.nVADM = this.nVADM1 + this.nVADM2 + this.nVADM3;

					// Zinsberechnung
					this.dtZaBuchDat = SalDateTime.Null;
					this.dtZaGrundDat = this.dtVBZust;
					// Set nZinsBer = nDMFrueh + nMBDM + nVBDM
					// 15.02.02 lt. Fr. Seil nDMFrueh entfernt
					this.nZinsBer = this.nMBDM + this.nVBDM;
					this.nZinsMB = 0;
					this.bOK = Int.SqlHandleExec(this.hSqlMBKalenderZa, @"SELECT  zabuchdat, zadm INTO  :frmMBKEinzeldruck.dtZaBuchDat, :frmMBKEinzeldruck.nZaDM
FROM za
WHERE zaproznr = :frmMBKEinzeldruck.nProzNr AND zarechnr >= 999990 AND zadeaktiv IS NULL
ORDER BY zabuchdat", "Zahlungen holen", ref Var.nErr) == Sys.IDOK;
					this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					while (this.nFetchZa != Sys.FETCH_EOF) 
					{
						this.nTage = this.dtZaBuchDat - this.dtZaGrundDat;
						this.nZinsMB = this.nZinsMB + (this.nZinsBer * (this.nTage / 360) * 4).Round() / 100;
						this.dtZaGrundDat = this.dtZaBuchDat;
						this.nZinsBer = this.nZinsBer - this.nZaDM;
						this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					}
					this.nTage = SalDateTime.Current - this.dtZaGrundDat;
					this.nZinsMB = this.nZinsMB + (this.nZinsBer * (this.nTage / 360) * 4).Round() / 100;
					// nur Tageszins
					// Set nZinsMB = nZinsMB + SalNumberRound(nZinsBer / 360 * 4)  /100

					this.dtZaBuchDat = SalDateTime.Null;
					this.dtZaGrundDat = this.dtMBZust;
					this.nZinsBer = this.nDMHF;
					this.nZinsHF = 0;
					this.bOK = Int.SqlHandleExec(this.hSqlMBKalenderZa, @"SELECT  zabuchdat, zadm INTO  :frmMBKEinzeldruck.dtZaBuchDat, :frmMBKEinzeldruck.nZaDM
FROM za
WHERE zaproznr = :frmMBKEinzeldruck.nProzNr AND zarechnr < 999990 AND zadeaktiv IS NULL
ORDER BY zabuchdat", "Zahlungen holen", ref Var.nErr) == Sys.IDOK;
					this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					while (this.nFetchZa != Sys.FETCH_EOF) 
					{
						this.nTage = this.dtZaBuchDat - this.dtZaGrundDat;
						this.nZinsHF = this.nZinsHF + (this.nZinsBer * (this.nTage / 360) * this.nProzHF).Round() / 100;
						this.dtZaGrundDat = this.dtZaBuchDat;
						this.nZinsBer = this.nZinsBer - this.nZaDM;
						this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					}
					this.nTage = SalDateTime.Current - this.dtZaGrundDat;
					this.nZinsHF = this.nZinsHF + (this.nZinsBer * (this.nTage / 360) * this.nProzHF).Round() / 100;
					// nur Tageszins
					// Set nZinsHF = nZinsHF + SalNumberRound(nZinsBer / 360 * nProzHF)  /100

					// 04.06.99
					// bereits bezahlt ?
					Int.SqlImmedSel(@"SELECT  sum(zadm) INTO :frmMBKEinzeldruck.nZaDM
FROM za
WHERE zaproznr = :frmMBKEinzeldruck.nProzNr AND zadeaktiv IS NULL");
					// 05.10.99
					// 0 --> 11.6, da lt. Fr. Seil + Kollay nur für MB-Kosten kein VA gemacht wird.
					// Es fällt keiner durch, da Wiedervorlage lt. o.g. Damen
					// EURO
					if ((this.nDMHF + this.nMahn + this.nMBDM + this.nVBDM + this.nDMFrueh - this.nZaDM) > 6)  // DM 11.6
					{
						// Set nDMFrueh = nDMFrueh + dfKosten
						Int.SqlImmedX(@"INSERT INTO MBK
(mbkproznr, mbkgername, mbkzustmb, mbkzustvb, mbkaz, mbkdmhf, mbkprozhf, mbkdmmahn, mbkdmmb, mbkdmvb,
mbkprozmbvb, mbkdmva, mbktyp, mbkdmfrueh, mbkzinshf, mbkzinsmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkuser)
VALUES( :frmMBKEinzeldruck.nProzNr, :frmMBKEinzeldruck.dfGerName, :frmMBKEinzeldruck.dtMBZust,
:frmMBKEinzeldruck.dtVBZust, :frmMBKEinzeldruck.strAZ, :frmMBKEinzeldruck.nDMHF, :frmMBKEinzeldruck.nProzHF,
:frmMBKEinzeldruck.nMahn, :frmMBKEinzeldruck.nMBDM, :frmMBKEinzeldruck.nVBDM,
4, :frmMBKEinzeldruck.nVADM, 'VZ', :frmMBKEinzeldruck.nDMFrueh,
:frmMBKEinzeldruck.nZinsHF, :frmMBKEinzeldruck.nZinsMB,
:frmMBKEinzeldruck.strHN1, :frmMBKEinzeldruck.strHN2, :frmMBKEinzeldruck.strHS, :frmMBKEinzeldruck.strHO, :strBNUser)");
					}

					this.nFetch = this.hSqlMBKalender.FetchNext();
				}
				this.hSqlMBKalender.Commit();
				// Report
				App.frmMBKalender.strReportName = "VZ";
				this.SetStatusBarText("Erstelle VZ -  Bitte warten !");
				App.frmMBKalender.nErr = 1;
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "VZ.crd", "");
				Sal.WaitCursor(false);
			}
			Sal.WaitCursor(false);
			this.SetStatusBarText(" ");
			this.hSqlMBKalenderZa.Disconnect();
			this.hSqlMBKalender.Disconnect();
			this.DestroyWindow();
			#endregion
		}
		
		/// <summary>
		/// pbFIOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbFIOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbFIOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbFIOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			// Report
			this.SetStatusBarText("Erstelle Ford.anmeldung Insol-  Bitte warten !");
			Int.SqlImmedSel(@"select prnr, praz, prarztnr, prhalternr,
prdma + prdmc, prdmb, prdmhf, prprozhf, prdmmahn
INTO :frmMBKEinzeldruck.nProzNr,:frmMBKEinzeldruck.strAZ, :frmMBKEinzeldruck.nA1, :frmMBKEinzeldruck.nHalterNr,
:frmMBKEinzeldruck.nMahn, :frmMBKEinzeldruck.nMBDM, :frmMBKEinzeldruck.nDMHF, :frmMBKEinzeldruck.nProzHF, :frmMBKEinzeldruck.nDMMahn
from pr
WHERE prnr = :frmMBKEinzeldruck.dfPR1
ORDER BY prnr");
			Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hstr, hort
INTO :frmMBKEinzeldruck.strHN1, :frmMBKEinzeldruck.strHN2,
:frmMBKEinzeldruck.strHS, :frmMBKEinzeldruck.strHO
FROM h
WHERE harztnr = :frmMBKEinzeldruck.nA1 AND hhalternr = :frmMBKEinzeldruck.nHalterNr");
			App.frmMBKalender.nErr = 1;
			App.frmMBKalender.strReportName = "FI";
			App.frmMBKalender.nProzNr = this.nProzNr;
			App.frmMBKalender.nArztNr = this.nA1;
			App.frmMBKalender.nHalterNr = this.nHalterNr;
			App.frmMBKalender.strGerName = this.dfGerName.Text;
			// LL
			if (1 == dlgLlDruck.ModalDialog(App.frmMain, "FordInsol.crd", "")) 
			{
				if (this.dfPR1.Number > 0 && this.dfPR1.Number != Sys.NUMBER_Null) 
				{
					if (Int.PalFA(this.dfPR1.Number, this.nA1, this.nHalterNr, "", SalNumber.Null, this.dfbisDatum.DateTime, false, true, true))  // 04.02.13
					{
						// 27.06.07
						// LL
					}
					if (dlgLlDruck.ModalDialog(App.frmMain, "Forderungsaufstellung.lst", "")) 
					{
					}
				}
			}
			Sal.WaitCursor(false);
			this.DestroyWindow();
			#endregion
		}
		
		/// <summary>
		/// pbHBOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHBOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbHBOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHBOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Set frmMBKalender.strZusatzkosten = dfZusatzkostenText
			// Set frmMBKalender.nZusatzkosten = dfZusatzkosten

			Sal.WaitCursor(true);
			this.SetStatusBarText("Alter MBKalendervorschlag wird gelöscht");
			this.nMahn = 0;
			Int.SqlImmedX("DELETE FROM mbk WHERE mbktyp=\'HB\'  AND mbkuser = :strBNUser ");
			this.SetStatusBarText("Neuer Vorschlag wird erstellt -  Bitte warten ...");
			this.strSelect = @"select prnr, praz, prarztnr, prhalternr,
prdma + prdmc, prdmb, prdmhf, prprozhf, prdmmahn
INTO :frmMBKEinzeldruck.nProzNr,:frmMBKEinzeldruck.strAZ, :frmMBKEinzeldruck.nA1, :frmMBKEinzeldruck.nHalterNr,
:frmMBKEinzeldruck.nMahn, :frmMBKEinzeldruck.nMBDM, :frmMBKEinzeldruck.nDMHF, :frmMBKEinzeldruck.nProzHF, :frmMBKEinzeldruck.nDMMahn
from pr
WHERE prnr = :frmMBKEinzeldruck.dfPR1
ORDER BY prnr";
			this.bOK = Int.SqlConnection(ref this.hSqlMBKalender);
			this.bOK = Int.SqlConnection(ref this.hSqlMBKalenderZa);
			this.bOK = Int.SqlHandleExec(this.hSqlMBKalender, this.strSelect, "Erstellen Vorschlag", ref Var.nErr) == Sys.IDOK;
			Sal.WaitCursor(true);
			if (this.bOK) 
			{
				this.nFetch = this.hSqlMBKalender.FetchNext();
				while (this.nFetch != Sys.FETCH_EOF) 
				{
					this.SetStatusBarText("PR-Nr.: " + this.nProzNr.ToString(0));
					// If nDMHF = NUMBER_Null
					// Set nDMHF = 0
					// 10.01.03
					// If nDMMahn = NUMBER_Null
					// Set nDMMahn = 0
					// 12.03.02
					// Set bOK = (SqlHandleExec(hSqlMBKalenderZa,
					// 'SELECT  prdarztnr, prdrechnr INTO  :frmMBKEinzeldruck.nA1, :frmMBKEinzeldruck.nR1
					// FROM prd
					// WHERE prdnr = :frmMBKEinzeldruck.nProzNr', 'PRD holen', nErr) = IDOK)
					// Call SqlFetchNext(hSqlMBKalenderZa,nFetchZa)
					// Set nHF = 0
					// While nFetchZa != FETCH_EOF
					// 18.11.02 sum(rkdmmahn-rkzamahn)
					// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn), sum(rkdmmahn)
					// INTO :frmMBKEinzeldruck.nHF1, :frmMBKEinzeldruck.nMahn1
					// FROM rk
					// WHERE rkarztnr = :frmMBKEinzeldruck.nA1 AND rkrechnr = :frmMBKEinzeldruck.nR1 AND rkdeaktiv IS NULL')
					// 05.10.99
					// If nDMHF = 0		! MB vor 05.10.99 gemacht
					// Call SqlImmed('UPDATE za SET zaproznr = :frmMBKEinzeldruck.nProzNr
					// WHERE zaarztnr = :frmMBKEinzeldruck.nA1 AND zarechnr = :frmMBKEinzeldruck.nR1')
					// Set nHF = nHF + nHF1
					// If nDMMahn = 0
					// Set nMahn = nMahn + nMahn1
					// Else If nDMMahn != -1
					// Set nMahn = nMahn + nDMMahn
					// Set nDMMahn = -1
					// Call SqlFetchNext(hSqlMBKalenderZa,nFetchZa)
					// 05.10.99
					// If nDMHF = 0
					// Set nDMHF = nHF
					// Proz HF
					Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hstr, hort
INTO :frmMBKEinzeldruck.strHN1, :frmMBKEinzeldruck.strHN2,
:frmMBKEinzeldruck.strHS, :frmMBKEinzeldruck.strHO
FROM h
WHERE harztnr = :frmMBKEinzeldruck.nA1 AND hhalternr = :frmMBKEinzeldruck.nHalterNr AND hdeaktiv IS NULL");
					// 22.03.02
					// If nProzHF = 0 Or nProzHF = NUMBER_Null
					// Set ndlgDM = NUMBER_Null
					// If 1 = SalModalDialog(dlgDM, hWndForm, 'Bitte geben Sie für PR' || PalStrNum(nProzNr,6,0) || ' den Zinssatz für die HF ein  (%) :',nProzHF)
					// While ndlgDM = NUMBER_Null
					// GerName, wenn leer
					// If nMBDM = 0
					// Call SqlImmedSel('SELECT sum(akdm)
					// INTO :frmMBKEinzeldruck.nMBDM
					// FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr AND @ABS(akdm) >= 18  AND akdeaktiv IS NULL
					// AND aktyp=\'MB\' AND (aktypdetail = \'MB\' or aktypdetail = \'MB-AG\')')
					// Call SqlImmedSel('SELECT akzust
					// INTO :frmMBKEinzeldruck.dtMBZust
					// FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr
					// AND aktyp=\'MB\' AND (aktypdetail = \'MB\' or aktypdetail = \'MB-AG\') AND akdeaktiv IS NULL')
					// VB
					// Call SqlImmedSel('SELECT akdm, akzust
					// INTO :frmMBKEinzeldruck.nVBDM, :frmMBKEinzeldruck.dtVBZust
					// FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr
					// AND aktyp=\'MB\' AND aktypdetail = \'VB\' AND akdeaktiv IS NULL ')
					// Frühere Vollstreckungsmaßnahmen
					// Call SqlImmedSel('SELECT sum(akdm)
					// INTO :frmMBKEinzeldruck.nDMFrueh
					// FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr
					// AND aktyp=\'MB\' AND aktypdetail <> \'MB\' AND aktypdetail <> \'MB-AG\' AND aktypdetail <> \'VB\' AND akdeaktiv IS NULL ')
					// VA-Kosten
					// Call SqlImmedSel('SELECT badm1, badm2, badm3
					// INTO :frmMBKEinzeldruck.nVADM1, :frmMBKEinzeldruck.nVADM2, :frmMBKEinzeldruck.nVADM3
					// FROM ba
					// WHERE babuart = \'VA\' ')
					// If SalDateCurrent(  ) >= 2020-07-01 and SalDateCurrent(  ) <= 2020-12-31
					// Set nVADM1 = SalNumberRound( nVADM1 * 116 / 119 * 100 ) / 100
					// Set nVADM3 = SalNumberRound( nVADM3 * 116 / 119 * 100 ) / 100
					// Set nVADM = nVADM1 + nVADM2 + nVADM3
					// Zinsberechnung
					// Set dtZaBuchDat = DATETIME_Null
					// Set dtZaGrundDat = dtVBZust
					// Set nZinsBer = nDMFrueh + nMBDM + nVBDM
					// Set nZinsMB = 0
					// Set bOK = (SqlHandleExec(hSqlMBKalenderZa,
					// 'SELECT  zabuchdat, zadm INTO  :frmMBKEinzeldruck.dtZaBuchDat, :frmMBKEinzeldruck.nZaDM
					// FROM za
					// WHERE zaproznr = :frmMBKEinzeldruck.nProzNr AND zarechnr >= 999990 AND zadeaktiv IS NULL
					// ORDER BY zabuchdat','Zahlungen holen', nErr) = IDOK)
					// Call SqlFetchNext(hSqlMBKalenderZa,nFetchZa)
					// While nFetchZa != FETCH_EOF
					// Set nTage = dtZaBuchDat - dtZaGrundDat
					// Set nZinsMB = nZinsMB + SalNumberRound(nZinsBer * (nTage / 360) * 4)  /100
					// Set dtZaGrundDat = dtZaBuchDat
					// Set nZinsBer = nZinsBer - nZaDM
					// Call SqlFetchNext(hSqlMBKalenderZa,nFetchZa)
					// Set nTage = SalDateCurrent() - dtZaGrundDat
					// Set nZinsMB = nZinsMB + SalNumberRound(nZinsBer * (nTage / 360) * 4)  /100

					// Set dtZaBuchDat = DATETIME_Null
					// Set dtZaGrundDat = dtMBZust
					// Set nZinsBer = nDMHF
					// Set nZinsHF = 0
					// Set bOK = (SqlHandleExec(hSqlMBKalenderZa,
					// 'SELECT  zabuchdat, zadm INTO  :frmMBKEinzeldruck.dtZaBuchDat, :frmMBKEinzeldruck.nZaDM
					// FROM za
					// WHERE zaproznr = :frmMBKEinzeldruck.nProzNr AND zarechnr < 999990 AND zadeaktiv IS NULL
					// ORDER BY zabuchdat','Zahlungen holen', nErr) = IDOK)
					// Call SqlFetchNext(hSqlMBKalenderZa,nFetchZa)
					// While nFetchZa != FETCH_EOF
					// Set nTage = dtZaBuchDat - dtZaGrundDat
					// Set nZinsHF = nZinsHF + SalNumberRound(nZinsBer * (nTage / 360) * nProzHF)  /100
					// Set dtZaGrundDat = dtZaBuchDat
					// Set nZinsBer = nZinsBer - nZaDM
					// Call SqlFetchNext(hSqlMBKalenderZa,nFetchZa)
					// Set nTage = SalDateCurrent() - dtZaGrundDat
					// Set nZinsHF = nZinsHF + SalNumberRound(nZinsBer * (nTage / 360) * nProzHF)  /100
					// bereits bezahlt ?
					Int.SqlImmedSel(@"SELECT  sum(zadm) INTO :frmMBKEinzeldruck.nZaDM
FROM za
WHERE zaproznr = :frmMBKEinzeldruck.nProzNr AND zadeaktiv IS NULL");
					// 05.10.99
					// 0 --> 11.6, da lt. Fr. Seil + Kollay nur für MB-Kosten kein VA gemacht wird.
					// Es fällt keiner durch, da Wiedervorlage lt. o.g. Damen
					// 14.04.05
					// Call PalLog('MBKEinzDr ZinsHF ' || PalDateToStrJJJJMMTT(SalDateCurrent()) || '-' || PalDateToStrJJJJMMTT(dtZaGrundDat) ||'=€' || PalStrNum(nZinsHF,5,2))
					// 09.03.16
					// If strTyp = 'Gruppe'
					// Set cbJ5 = FALSE
					// 29.01.13 Ä877	09.01.17 Ä1470 Grenze von € 500 aufgehoben
					// If (nDMHF + nMahn + nMBDM + nVBDM + nDMFrueh - nZaDM) < 500
					// Set cbJ1 = FALSE
					// Set cbJ2 = FALSE
					// Set cbJ3 = FALSE
					// Set cbJ4 = FALSE
					// 09.03.16
					// Set cbJ5 = FALSE
					// 20.08.14 F2120
					// If

					// If (nDMHF + nMahn + nMBDM + nVBDM + nDMFrueh - nZaDM) > 6	! DM 11.6
					// Set nDMFrueh = nDMFrueh + dfKosten
					Int.SqlImmedX(@"INSERT INTO MBK
(mbkproznr, mbkgername, mbkzustmb, mbkzustvb, mbkaz, mbkdmhf, mbkprozhf, mbkdmmahn, mbkdmmb, mbkdmvb,
mbkprozmbvb, mbkdmva, mbktyp, mbkdmfrueh, mbkzinshf, mbkzinsmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkuser)
VALUES( :frmMBKEinzeldruck.nProzNr, :frmMBKEinzeldruck.dfGerName, :frmMBKEinzeldruck.dtMBZust,
:frmMBKEinzeldruck.dtVBZust, :frmMBKEinzeldruck.strAZ, :frmMBKEinzeldruck.nDMHF, :frmMBKEinzeldruck.nProzHF,
:frmMBKEinzeldruck.nMahn, :frmMBKEinzeldruck.nMBDM, :frmMBKEinzeldruck.nVBDM,
4, :frmMBKEinzeldruck.nVADM, 'HB', :frmMBKEinzeldruck.nDMFrueh,
:frmMBKEinzeldruck.nZinsHF, :frmMBKEinzeldruck.nZinsMB,
:frmMBKEinzeldruck.strHN1, :frmMBKEinzeldruck.strHN2, :frmMBKEinzeldruck.strHS, :frmMBKEinzeldruck.strHO, :strBNUser)");

					this.nFetch = this.hSqlMBKalender.FetchNext();
				}
				this.hSqlMBKalender.Commit();
				// Report
				this.SetStatusBarText("Erstelle HB -  Bitte warten !");
				App.frmMBKalender.nErr = 1;
				App.frmMBKalender.strReportName = "HB";
				// 15.02.10 OTF366 + , :frmMBKalender.strCustomerNumber
				// Call PalReport(frmMBKalender,'VA.QRP',
				// ':frmMBKalender.nArztNr, :frmMBKalender.nHalterNr, :frmMBKalender.nProzNr, :frmMBKalender.strGerName, :frmMBKalender.dtZustMB, :frmMBKalender.dtZustVB,
				// :frmMBKalender.strAZ, :frmMBKalender.nDMHF, :frmMBKalender.nProzHF, :frmMBKalender.nDMMahn,
				// :frmMBKalender.nDMMB, :frmMBKalender.nDMVB, :frmMBKalender.nProzMBVB, :frmMBKalender.nDMVA,
				// :frmMBKalender.nDMFrueh, :frmMBKalender.nZinsHF, :frmMBKalender.nZinsMB,
				// :frmMBKalender.strHN1, :frmMBKalender.strHN2, :frmMBKalender.strHS, :frmMBKalender.strHO,
				// :frmMBKalender.strZeichen, :frmMBKalender.strGerOrt,
				// :frmMBKalender.dtZaBuchDat, , :frmMBKalender.nZaDM,
				// :frmMBKalender.nVAa, :frmMBKalender.nVAb, :frmMBKalender.nVAc,
				// :frmMBKalender.nVA0, :frmMBKalender.nVA1, :frmMBKalender.nVA2, :frmMBKalender.nVA2a, :frmMBKalender.nVA2b, :frmMBKalender.nVA2b1,
				// :frmMBKalender.nVA2b2, :frmMBKalender.nVA2b3, :frmMBKalender.nVA2b4, :frmMBKalender.nVA3,
				// :frmMBKalender.strVA3in, :frmMBKalender.dtVA3vom, :frmMBKalender.strVA3AZ, :frmMBKalender.strVAText, :frmMBKalender.nLfdZins, :frmMBKalender.strCustomerNumber',
				// 'ArztNr, HalterNr, ProzNr, GerName, ZustMB, ZustVB, AZ, DMHF, ProzHF, DMMahn, DMMB, DMVB, ProzMBVB, DMVA,
				// DMFrueh, ZinsHF, ZinsMB, HN1, HN2, HS, HO,
				// Zeichen, GerOrt, ZaBuchDat, ZaDM, VAa, VAb, VAc,
				// VA0, VA1, VA2, VA2a, VA2b, VA2b1, VA2b2, VA2b3, VA2b4, VA3, VA3in, VA3vom, VA3AZ, Text, lfdZins, CustomerNumber',
				// nErr)
				// LL
				if (1 == dlgLlDruck.ModalDialog(App.frmMain, "Haftbefehl-Antrag.crd", "")) 
				{
				}
				if (this.nZaDM > 0) 
				{
					if (dlgLlDruck.ModalDialog(App.frmMain, "Liste der Zahlungen für den VA.lst", "")) 
					{
					}
				}
				Sal.WaitCursor(false);
			}
			Sal.WaitCursor(false);
			this.SetStatusBarText(" ");
			this.hSqlMBKalenderZa.Disconnect();
			this.hSqlMBKalender.Disconnect();
			this.DestroyWindow();
			#endregion
		}
		
		/// <summary>
		/// pbVAneuOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbVAneuOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbVAneuOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbVAneuOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			this.SetStatusBarText("Alter MB-Kalendervorschlag wird gelöscht");
			this.nMahn = 0;
			Int.SqlImmedX("DELETE FROM mbk WHERE mbktyp=\'VA\'  AND mbkuser = :strBNUser ");
			this.SetStatusBarText("Neuer Vorschlag wird erstellt -  Bitte warten ...");
			this.strSelect = @"select prnr, praz, prarztnr, prhalternr,
prdma + prdmc, prdmb, prdmhf, prprozhf, prdmmahn
INTO :frmMBKEinzeldruck.nProzNr,:frmMBKEinzeldruck.strAZ, :frmMBKEinzeldruck.nA1, :frmMBKEinzeldruck.nHalterNr,
:frmMBKEinzeldruck.nMahn, :frmMBKEinzeldruck.nMBDM, :frmMBKEinzeldruck.nDMHF, :frmMBKEinzeldruck.nProzHF, :frmMBKEinzeldruck.nDMMahn
from pr
WHERE prnr = :frmMBKEinzeldruck.dfPR1
ORDER BY prnr";
			this.bOK = Int.SqlConnection(ref this.hSqlMBKalender);
			this.bOK = Int.SqlConnection(ref this.hSqlMBKalenderZa);
			this.bOK = Int.SqlHandleExec(this.hSqlMBKalender, this.strSelect, "Erstellen Vorschlag", ref Var.nErr) == Sys.IDOK;
			Sal.WaitCursor(true);
			if (this.bOK) 
			{
				this.nFetch = this.hSqlMBKalender.FetchNext();
				while (this.nFetch != Sys.FETCH_EOF) 
				{
					this.SetStatusBarText("PR-Nr.: " + this.nProzNr.ToString(0));
					if (this.nDMHF == SalNumber.Null) 
					{
						this.nDMHF = 0;
					}
					// 10.01.03
					if (this.nDMMahn == SalNumber.Null) 
					{
						this.nDMMahn = 0;
					}
					// 12.03.02
					this.bOK = Int.SqlHandleExec(this.hSqlMBKalenderZa, @"SELECT  prdarztnr, prdrechnr INTO  :frmMBKEinzeldruck.nA1, :frmMBKEinzeldruck.nR1
FROM prd
WHERE prdnr = :frmMBKEinzeldruck.nProzNr", "PRD holen", ref Var.nErr) == Sys.IDOK;
					this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					this.nHF = 0;
					while (this.nFetchZa != Sys.FETCH_EOF) 
					{
						// 18.11.02 sum(rkdmmahn-rkzamahn)
						Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn), sum(rkdmmahn)
INTO :frmMBKEinzeldruck.nHF1, :frmMBKEinzeldruck.nMahn1
FROM rk
WHERE rkarztnr = :frmMBKEinzeldruck.nA1 AND rkrechnr = :frmMBKEinzeldruck.nR1 AND rkdeaktiv IS NULL");
						// 05.10.99
						if (this.nDMHF == 0)  // MB vor 05.10.99 gemacht
						{
							Int.SqlImmed(@"UPDATE za SET zaproznr = :frmMBKEinzeldruck.nProzNr
WHERE zaarztnr = :frmMBKEinzeldruck.nA1 AND zarechnr = :frmMBKEinzeldruck.nR1");
							this.nHF = this.nHF + this.nHF1;
						}
						if (this.nDMMahn == 0) 
						{
							this.nMahn = this.nMahn + this.nMahn1;
						}
						else if (this.nDMMahn != -1) 
						{
							this.nMahn = this.nMahn + this.nDMMahn;
							this.nDMMahn = -1;
						}
						this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					}
					// 05.10.99
					if (this.nDMHF == 0) 
					{
						this.nDMHF = this.nHF;
					}
					// Proz HF
					Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hstr, hort
INTO :frmMBKEinzeldruck.strHN1, :frmMBKEinzeldruck.strHN2,
:frmMBKEinzeldruck.strHS, :frmMBKEinzeldruck.strHO
FROM h
WHERE harztnr = :frmMBKEinzeldruck.nA1 AND hhalternr = :frmMBKEinzeldruck.nHalterNr AND hdeaktiv IS NULL");
					// 22.03.02
					if (this.nProzHF == 0 || this.nProzHF == SalNumber.Null) 
					{
						Var.ndlgDM = SalNumber.Null;
						if (1 == dlgDM.ModalDialog(this, "Bitte geben Sie für PR" + Int.PalStrNum(this.nProzNr, 6, 0) + " den Zinssatz für die HF ein  (%) :", ref this.nProzHF)) 
						{
						}
						while (Var.ndlgDM == SalNumber.Null) 
						{
						}
					}
					// GerName, wenn leer
					// Set strGerPLZ = SalStrLeftX(strHO, SalStrScan(strHO, ' '))
					// Call SqlImmedSel('SELECT gebez INTO :frmMBKEinzeldruck.strGerName
					// FROM ge WHERE gelg=0 AND geplz = :frmMBKEinzeldruck.strGerPLZ ')
					// MB
					// #27 @ABS(akdm) >= 18
					if (this.nMBDM == 0) 
					{
						Int.SqlImmedSel(@"SELECT sum(akdm)
INTO :frmMBKEinzeldruck.nMBDM
FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr AND @ABS(akdm) >= 18  AND akdeaktiv IS NULL
AND aktyp='MB' AND (aktypdetail = 'MB' or aktypdetail = 'MB-AG')");

					}
					Int.SqlImmedSel(@"SELECT akzust
INTO :frmMBKEinzeldruck.dtMBZust
FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr
AND aktyp='MB' AND (aktypdetail = 'MB' or aktypdetail = 'MB-AG') AND akdeaktiv IS NULL");
					// VB
					Int.SqlImmedSel(@"SELECT akdm, akzust
INTO :frmMBKEinzeldruck.nVBDM, :frmMBKEinzeldruck.dtVBZust
FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr
AND aktyp='MB' AND aktypdetail = 'VB' AND akdeaktiv IS NULL ");
					// Frühere Vollstreckungsmaßnahmen
					Int.SqlImmedSel(@"SELECT sum(akdm)
INTO :frmMBKEinzeldruck.nDMFrueh
FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr
AND aktyp='MB' AND aktypdetail <> 'MB' AND aktypdetail <> 'MB-AG' AND aktypdetail <> 'VB' AND akdeaktiv IS NULL ");
					// VA-Kosten
					// 30.06.20 Ä1892
					// Call SqlImmedSel('SELECT (badm1+badm2+badm3)
					// INTO :frmMBKEinzeldruck.nVADM
					// FROM ba
					// WHERE babuart = \'VA\' ')
					Int.SqlImmedSel(@"SELECT badm1, badm2, badm3
INTO :frmMBKEinzeldruck.nVADM1, :frmMBKEinzeldruck.nVADM2, :frmMBKEinzeldruck.nVADM3
FROM ba
WHERE babuart = 'VA' ");
                    if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31))
                    {
						this.nVADM1 = (this.nVADM1 * 116 / 119 * 100).Round() / 100;
						this.nVADM3 = (this.nVADM3 * 116 / 119 * 100).Round() / 100;
					}
					this.nVADM = this.nVADM1 + this.nVADM2 + this.nVADM3;
					// 02.07.20
					// Set frmMBKalender.nVA734 = nVADM

					// Zinsberechnung
					// Set bOK = SqlConnection(hSqlMBKalenderZa)
					this.dtZaBuchDat = SalDateTime.Null;
					this.dtZaGrundDat = this.dtVBZust;
					this.nZinsBer = this.nDMFrueh + this.nMBDM + this.nVBDM;
					this.nZinsMB = 0;
					this.bOK = Int.SqlHandleExec(this.hSqlMBKalenderZa, @"SELECT  zabuchdat, zadm INTO  :frmMBKEinzeldruck.dtZaBuchDat, :frmMBKEinzeldruck.nZaDM
FROM za
WHERE zaproznr = :frmMBKEinzeldruck.nProzNr AND zarechnr >= 999990 AND zadeaktiv IS NULL
ORDER BY zabuchdat", "Zahlungen holen", ref Var.nErr) == Sys.IDOK;
					this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					while (this.nFetchZa != Sys.FETCH_EOF) 
					{
						this.nTage = this.dtZaBuchDat - this.dtZaGrundDat;
						this.nZinsMB = this.nZinsMB + (this.nZinsBer * (this.nTage / 360) * 4).Round() / 100;
						this.dtZaGrundDat = this.dtZaBuchDat;
						this.nZinsBer = this.nZinsBer - this.nZaDM;
						this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					}
					this.nTage = SalDateTime.Current - this.dtZaGrundDat;
					this.nZinsMB = this.nZinsMB + (this.nZinsBer * (this.nTage / 360) * 4).Round() / 100;
					// nur Tageszins
					// Set nZinsMB = nZinsMB + SalNumberRound(nZinsBer / 360 * 4)  /100

					this.dtZaBuchDat = SalDateTime.Null;
					this.dtZaGrundDat = this.dtMBZust;
					this.nZinsBer = this.nDMHF;
					this.nZinsHF = 0;
					this.bOK = Int.SqlHandleExec(this.hSqlMBKalenderZa, @"SELECT  zabuchdat, zadm INTO  :frmMBKEinzeldruck.dtZaBuchDat, :frmMBKEinzeldruck.nZaDM
FROM za
WHERE zaproznr = :frmMBKEinzeldruck.nProzNr AND zarechnr < 999990 AND zadeaktiv IS NULL
ORDER BY zabuchdat", "Zahlungen holen", ref Var.nErr) == Sys.IDOK;
					this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					while (this.nFetchZa != Sys.FETCH_EOF) 
					{
						this.nTage = this.dtZaBuchDat - this.dtZaGrundDat;
						this.nZinsHF = this.nZinsHF + (this.nZinsBer * (this.nTage / 360) * this.nProzHF).Round() / 100;
						this.dtZaGrundDat = this.dtZaBuchDat;
						this.nZinsBer = this.nZinsBer - this.nZaDM;
						this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					}
					this.nTage = SalDateTime.Current - this.dtZaGrundDat;
					this.nZinsHF = this.nZinsHF + (this.nZinsBer * (this.nTage / 360) * this.nProzHF).Round() / 100;
					// nur Tageszins
					// Set nZinsHF = nZinsHF + SalNumberRound(nZinsBer / 360 * nProzHF)  /100

					// 04.06.99
					// bereits bezahlt ?
					Int.SqlImmedSel(@"SELECT  sum(zadm) INTO :frmMBKEinzeldruck.nZaDM
FROM za
WHERE zaproznr = :frmMBKEinzeldruck.nProzNr AND zadeaktiv IS NULL");
					// 05.10.99
					// 0 --> 11.6, da lt. Fr. Seil + Kollay nur für MB-Kosten kein VA gemacht wird.
					// Es fällt keiner durch, da Wiedervorlage lt. o.g. Damen
					// 14.04.05
					Int.PalLog("MBKEinzDr ZinsHF " + Int.PalDateToStrJJJJMMTT(SalDateTime.Current) + "-" + Int.PalDateToStrJJJJMMTT(this.dtZaGrundDat) + "=€" + Int.PalStrNum(this.nZinsHF, 5, 2));
					// 09.03.16
					if (this.strTyp == "Gruppe") 
					{
						// Set cbJ5 = FALSE
					}
					// 29.01.13 Ä877	09.01.17 Ä1470 Grenze von € 500 aufgehoben
					// If (nDMHF + nMahn + nMBDM + nVBDM + nDMFrueh - nZaDM) < 500
					// Set cbJ1 = FALSE
					// Set cbJ2 = FALSE
					// Set cbJ3 = FALSE
					// Set cbJ4 = FALSE
					// 09.03.16
					// Set cbJ5 = FALSE
					// 20.08.14 F2120
					// If

					if ((this.nDMHF + this.nMahn + this.nMBDM + this.nVBDM + this.nDMFrueh - this.nZaDM) > 6)  // DM 11.6
					{
						// Set nDMFrueh = nDMFrueh + dfKosten
						Int.SqlImmedX(@"INSERT INTO MBK
(mbkproznr, mbkgername, mbkzustmb, mbkzustvb, mbkaz, mbkdmhf, mbkprozhf, mbkdmmahn, mbkdmmb, mbkdmvb,
mbkprozmbvb, mbkdmva, mbktyp, mbkdmfrueh, mbkzinshf, mbkzinsmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkuser)
VALUES( :frmMBKEinzeldruck.nProzNr, :frmMBKEinzeldruck.dfGerName, :frmMBKEinzeldruck.dtMBZust,
:frmMBKEinzeldruck.dtVBZust, :frmMBKEinzeldruck.strAZ, :frmMBKEinzeldruck.nDMHF, :frmMBKEinzeldruck.nProzHF,
:frmMBKEinzeldruck.nMahn, :frmMBKEinzeldruck.nMBDM, :frmMBKEinzeldruck.nVBDM,
4, :frmMBKEinzeldruck.nVADM, 'VA', :frmMBKEinzeldruck.nDMFrueh,
:frmMBKEinzeldruck.nZinsHF, :frmMBKEinzeldruck.nZinsMB,
:frmMBKEinzeldruck.strHN1, :frmMBKEinzeldruck.strHN2, :frmMBKEinzeldruck.strHS, :frmMBKEinzeldruck.strHO, :strBNUser)");
					}

					this.nFetch = this.hSqlMBKalender.FetchNext();
				}
				this.hSqlMBKalender.Commit();
				// Report
				this.SetStatusBarText("Erstelle VA -  Bitte warten !");
				App.frmMBKalender.nErr = 1;
				App.frmMBKalender.strReportName = "VA";
				// 15.02.10 OTF366 + , :frmMBKalender.strCustomerNumber
				// Call PalReport(frmMBKalender,'VA.QRP',
				// ':frmMBKalender.nArztNr, :frmMBKalender.nHalterNr, :frmMBKalender.nProzNr, :frmMBKalender.strGerName, :frmMBKalender.dtZustMB, :frmMBKalender.dtZustVB,
				// :frmMBKalender.strAZ, :frmMBKalender.nDMHF, :frmMBKalender.nProzHF, :frmMBKalender.nDMMahn,
				// :frmMBKalender.nDMMB, :frmMBKalender.nDMVB, :frmMBKalender.nProzMBVB, :frmMBKalender.nDMVA,
				// :frmMBKalender.nDMFrueh, :frmMBKalender.nZinsHF, :frmMBKalender.nZinsMB,
				// :frmMBKalender.strHN1, :frmMBKalender.strHN2, :frmMBKalender.strHS, :frmMBKalender.strHO,
				// :frmMBKalender.strZeichen, :frmMBKalender.strGerOrt,
				// :frmMBKalender.dtZaBuchDat, , :frmMBKalender.nZaDM,
				// :frmMBKalender.nVAa, :frmMBKalender.nVAb, :frmMBKalender.nVAc,
				// :frmMBKalender.nVA0, :frmMBKalender.nVA1, :frmMBKalender.nVA2, :frmMBKalender.nVA2a, :frmMBKalender.nVA2b, :frmMBKalender.nVA2b1,
				// :frmMBKalender.nVA2b2, :frmMBKalender.nVA2b3, :frmMBKalender.nVA2b4, :frmMBKalender.nVA3,
				// :frmMBKalender.strVA3in, :frmMBKalender.dtVA3vom, :frmMBKalender.strVA3AZ, :frmMBKalender.strVAText, :frmMBKalender.nLfdZins, :frmMBKalender.strCustomerNumber',
				// 'ArztNr, HalterNr, ProzNr, GerName, ZustMB, ZustVB, AZ, DMHF, ProzHF, DMMahn, DMMB, DMVB, ProzMBVB, DMVA,
				// DMFrueh, ZinsHF, ZinsMB, HN1, HN2, HS, HO,
				// Zeichen, GerOrt, ZaBuchDat, ZaDM, VAa, VAb, VAc,
				// VA0, VA1, VA2, VA2a, VA2b, VA2b1, VA2b2, VA2b3, VA2b4, VA3, VA3in, VA3vom, VA3AZ, Text, lfdZins, CustomerNumber',
				// nErr)
				// LL
				if (this.dfPR1.Number > 0 && this.dfPR1.Number != Sys.NUMBER_Null) 
				{
					if (Int.PalFA(this.dfPR1.Number, this.nA1, this.nHalterNr, "", SalNumber.Null, SalDateTime.Null, false, true, true))  // 04.02.13
					{
						// LL
						if (this.nZaDM > 0) 
						{
							if (dlgLlDruck.ModalDialog(App.frmMain, "Liste der Zahlungen für den VA.lst", "")) 
							{
							}
						}
						if (this.nAGANRb > 0 || this.nAGANRc > 0 || this.nAGANRd > 0) 
						{
							if (dlgLlDruck.ModalDialog(App.frmMain, "Liste weiterer Schuldner zum VA.crd", "")) 
							{
							}
						}
						if (dlgLlDruck.ModalDialog(App.frmMain, "Aufstellung der Forderungen für VA.crd", "")) 
						{
						}
						if (dlgLlDruck.ModalDialog(App.frmMain, "Forderungsaufstellung.lst", "")) 
						{
						}
						if (dlgLlDruck.ModalDialog(App.frmMain, "Liste der Kosten.lst", "")) 
						{
						}
					}
				}
				if (1 == dlgLlDruck.ModalDialog(App.frmMain, "Vollstreckungsauftrag2023.crd", "")) 
				{
				}
				// If dfPR2 > 0 and dfPR2 != NUMBER_Null
				// If PalFA(dfPR2, nA1, nHalterNr, '', NUMBER_Null, DATETIME_Null, FALSE, TRUE, TRUE)	! 04.02.13
				// 27.06.07
				// LL
				// If SalModalDialog( dlgLlDruck, frmMain, 'Forderungsaufstellung.lst', '' )
				// If dfPR3 > 0 and dfPR3 != NUMBER_Null
				// If PalFA(dfPR3, nA1, nHalterNr, '', NUMBER_Null, DATETIME_Null, FALSE, TRUE, TRUE)	! 04.02.13
				// 27.06.07
				// LL
				// If SalModalDialog( dlgLlDruck, frmMain, 'Forderungsaufstellung.lst', '' )
				Sal.WaitCursor(false);
			}
			Sal.WaitCursor(false);
			this.SetStatusBarText(" ");
			this.hSqlMBKalenderZa.Disconnect();
			this.hSqlMBKalender.Disconnect();
			this.DestroyWindow();
			#endregion
		}
		
		/// <summary>
		/// dfRIHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRIHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRIHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRIHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nA1 = this.dfRIArztNr.Number;
			this.nHalterNr = this.dfRIHalterNr.Number;
			Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hstr, hort
INTO :frmMBKEinzeldruck.strHN1, :frmMBKEinzeldruck.strHN2,
:frmMBKEinzeldruck.strHS, :frmMBKEinzeldruck.strHO
FROM h
WHERE harztnr = :frmMBKEinzeldruck.nA1 AND hhalternr = :frmMBKEinzeldruck.nHalterNr");
			this.dfHN1.Text = this.strHN1;
			this.dfHN2.Text = this.strHN2;
			this.dfHS.Text = this.strHS;
			this.dfHO.Text = this.strHO;
			#endregion
		}
		
		/// <summary>
		/// pbRIOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRIOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRIOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRIOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			// Report
			this.SetStatusBarText("Erstelle Ford.anmeldung Insol-  Bitte warten !");
			// Call SqlImmedSel( 'select prnr, praz, prarztnr, prhalternr,
			// prdma + prdmc, prdmb, prdmhf, prprozhf, prdmmahn
			// INTO :frmMBKEinzeldruck.nProzNr,:frmMBKEinzeldruck.strAZ, :frmMBKEinzeldruck.nA1, :frmMBKEinzeldruck.nHalterNr,
			// :frmMBKEinzeldruck.nMahn, :frmMBKEinzeldruck.nMBDM, :frmMBKEinzeldruck.nDMHF, :frmMBKEinzeldruck.nProzHF, :frmMBKEinzeldruck.nDMMahn
			// from pr
			// WHERE prnr = :frmMBKEinzeldruck.dfPR1 Or prnr = :frmMBKEinzeldruck.dfPR2 Or prnr = :frmMBKEinzeldruck.dfPR3
			// ORDER BY prnr' )
			this.nA1 = this.dfRIArztNr.Number;
			this.nHalterNr = this.dfRIHalterNr.Number;
			Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hstr, hort
INTO :frmMBKEinzeldruck.strHN1, :frmMBKEinzeldruck.strHN2,
:frmMBKEinzeldruck.strHS, :frmMBKEinzeldruck.strHO
FROM h
WHERE harztnr = :frmMBKEinzeldruck.nA1 AND hhalternr = :frmMBKEinzeldruck.nHalterNr");
			App.frmMBKalender.nErr = 1;
			App.frmMBKalender.strReportName = "RI";
			App.frmMBKalender.nProzNr = 0;
			App.frmMBKalender.nArztNr = this.nA1;
			App.frmMBKalender.nHalterNr = this.nHalterNr;
			App.frmMBKalender.strGerName = this.dfGerName.Text;
			// LL
			if (1 == dlgLlDruck.ModalDialog(App.frmMain, "FordInsol.crd", "RI")) 
			{
				// LL
				this.PalFuelleWhere(this.nA1, this.nHalterNr, ref this.strSelectRg);
				if (1 == dlgLlDruck.ModalDialog(App.frmMain, "OP-Liste Halter.lst", "RI")) 
				{
					this.strLLQuery = Int.PalArztNr("rk", this.nA1, this.nArztNr2) + @" AND rkhalternr = :frmMBKEinzeldruck.nHalterNr AND rkdeaktiv IS NULL AND rkkzzahl < 2
AND (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)<>0";
					// LL
					if (1 == dlgLlDruck.ModalDialog(App.frmMain, "Rechnung A4.lst", "RI")) 
					{
					}
				}
			}
			Sal.WaitCursor(false);
			this.DestroyWindow();
			#endregion
		}
		
		/// <summary>
		/// pbPFÜNeuOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPFÜNeuOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbPFÜNeuOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPFÜNeuOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			// 20.02.13
			App.frmMBKalender.strZusatzkosten = this.dfZusatzkostenText.Text;
			App.frmMBKalender.nZusatzkosten = this.dfZusatzkosten.Number;

			this.SetStatusBarText("Alter MBKalendervorschlag wird gelöscht");
			this.nMahn = 0;
			Int.SqlImmedX("DELETE FROM mbk WHERE mbktyp=\'PFÜ\'  AND mbkuser = :strBNUser ");
			this.SetStatusBarText("Neuer Vorschlag wird erstellt -  Bitte warten ...");
			this.strSelect = @"select prnr, praz, prhalternr,
prdma + prdmc, prdmb, prdmhf, prprozhf, prdmmahn
INTO :frmMBKEinzeldruck.nProzNr, :frmMBKEinzeldruck.strAZ, :frmMBKEinzeldruck.nHalterNr,
:frmMBKEinzeldruck.nMahn, :frmMBKEinzeldruck.nMBDM, :frmMBKEinzeldruck.nDMHF, :frmMBKEinzeldruck.nProzHF, :frmMBKEinzeldruck.nDMMahn
from pr
WHERE prnr = :frmMBKEinzeldruck.dfPR1
ORDER BY prnr";
			this.bOK = Int.SqlConnection(ref this.hSqlMBKalender);
			this.bOK = Int.SqlConnection(ref this.hSqlMBKalenderZa);
			this.bOK = Int.SqlHandleExec(this.hSqlMBKalender, this.strSelect, "Erstellen Vorschlag", ref Var.nErr) == Sys.IDOK;
			Sal.WaitCursor(true);
			if (this.bOK) 
			{
				this.nFetch = this.hSqlMBKalender.FetchNext();
				while (this.nFetch != Sys.FETCH_EOF) 
				{
					this.SetStatusBarText("PR-Nr.: " + this.nProzNr.ToString(0));
					if (this.nDMHF == SalNumber.Null) 
					{
						this.nDMHF = 0;
					}
					// 10.01.03
					if (this.nDMMahn == SalNumber.Null) 
					{
						this.nDMMahn = 0;
					}
					// 12.03.02
					this.bOK = Int.SqlHandleExec(this.hSqlMBKalenderZa, @"SELECT  prdarztnr, prdrechnr INTO  :frmMBKEinzeldruck.nA1, :frmMBKEinzeldruck.nR1
FROM prd
WHERE prdnr = :frmMBKEinzeldruck.nProzNr", "Zahlungen holen", ref Var.nErr) == Sys.IDOK;
					this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					this.nHF = 0;
					while (this.nFetchZa != Sys.FETCH_EOF) 
					{
						// 18.11.02 sum(rkdmmahn-rkzamahn)
						Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn), sum(rkdmmahn)
INTO :frmMBKEinzeldruck.nHF1, :frmMBKEinzeldruck.nMahn1
FROM rk
WHERE rkarztnr = :frmMBKEinzeldruck.nA1 AND rkrechnr = :frmMBKEinzeldruck.nR1 AND rkdeaktiv IS NULL");
						// 05.10.99
						if (this.nDMHF == 0)  // MB vor 05.10.99 gemacht
						{
							Int.SqlImmed(@"UPDATE za SET zaproznr = :frmMBKEinzeldruck.nProzNr
WHERE zaarztnr = :frmMBKEinzeldruck.nA1 AND zarechnr = :frmMBKEinzeldruck.nR1");
							this.nHF = this.nHF + this.nHF1;
						}
						if (this.nDMMahn == 0) 
						{
							this.nMahn = this.nMahn + this.nMahn1;
						}
						else if (this.nDMMahn != -1) 
						{
							this.nMahn = this.nMahn + this.nDMMahn;
							this.nDMMahn = -1;
						}
						this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					}
					// HF + MG
					// 05.10.99
					if (this.nDMHF == 0) 
					{
						this.nDMHF = this.nHF;
					}
					// Proz HF
					Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hstr, hort
INTO :frmMBKEinzeldruck.strHN1, :frmMBKEinzeldruck.strHN2,
:frmMBKEinzeldruck.strHS, :frmMBKEinzeldruck.strHO
FROM h
WHERE harztnr = :frmMBKEinzeldruck.nA1 AND hhalternr = :frmMBKEinzeldruck.nHalterNr AND hdeaktiv IS NULL");
					// 22.03.02
					if (this.nProzHF == 0 || this.nProzHF == SalNumber.Null) 
					{
						if (1 == dlgDM.ModalDialog(this, "Bitte geben Sie für PR" + Int.PalStrNum(this.nProzNr, 6, 0) + " den Zinssatz für die HF ein  (%) :", ref this.nProzHF)) 
						{
						}
					}
					// GerName, wenn leer
					// Set strGerPLZ = SalStrLeftX(strHO, SalStrScan(strHO, ' '))
					// Call SqlImmedSel('SELECT gebez INTO :frmMBKEinzeldruck.strGerName
					// FROM ge WHERE gelg=0 AND geplz = :frmMBKEinzeldruck.strGerPLZ ')
					// MB
					// #27 @ABS(akdm) >= 18###
					if (this.nMBDM == 0) 
					{
						// 30.09.18 F3237
						// Call SqlImmedSel('SELECT sum(akdm)
						// INTO :frmMBKEinzeldruck.nMBDM
						// FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr AND @ABS(akdm) >= 18
						// AND aktyp=\'MB\' AND (aktypdetail = \'MB\' or aktypdetail = \'MB-AG\')')
						Int.SqlImmedSel(@"SELECT sum(akdm)
INTO :frmMBKEinzeldruck.nMBDM
FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr AND aktypdetail <> 'MB'  AND akdeaktiv IS NULL
AND aktyp='MB' AND aktypdetail = 'MB-AG'");
					}
					Int.SqlImmedSel(@"SELECT akzust
INTO :frmMBKEinzeldruck.dtMBZust
FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr
AND aktyp='MB' AND (aktypdetail = 'MB' OR aktypdetail = 'MB-AG') AND akdeaktiv IS NULL");
					// VB
					Int.SqlImmedSel(@"SELECT akdm, akzust
INTO :frmMBKEinzeldruck.nVBDM, :frmMBKEinzeldruck.dtVBZust
FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr
AND aktyp='MB' AND aktypdetail = 'VB' AND akdeaktiv IS NULL ");
					// Frühere Vollstreckungsmaßnahmen
					Int.SqlImmedSel(@"SELECT sum(akdm)
INTO :frmMBKEinzeldruck.nDMFrueh
FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr
AND aktyp='MB' AND aktypdetail <> 'MB' AND aktypdetail <> 'MB-AG' AND aktypdetail <> 'VB' AND akdeaktiv IS NULL ");
					// 30.06.20 Ä1892
					// VA-Kosten
					// Call SqlImmedSel('SELECT (badm1+badm2+badm3)
					// INTO :frmMBKEinzeldruck.nVADM
					// FROM ba
					// WHERE babuart = \'VA\' ')
					Int.SqlImmedSel(@"SELECT badm1, badm2, badm3
INTO :frmMBKEinzeldruck.nVADM1, :frmMBKEinzeldruck.nVADM2, :frmMBKEinzeldruck.nVADM3
FROM ba
WHERE babuart = 'VA' ");
                    if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31))
                    {
						this.nVADM1 = (this.nVADM1 * 116 / 119 * 100).Round() / 100;
						this.nVADM3 = (this.nVADM3 * 116 / 119 * 100).Round() / 100;
					}
					this.nVADM = this.nVADM1 + this.nVADM2 + this.nVADM3;

					// Zinsberechnung
					this.dtZaBuchDat = SalDateTime.Null;
					this.dtZaGrundDat = this.dtVBZust;
					// Set nZinsBer = nDMFrueh + nMBDM + nVBDM
					// 15.02.02 lt. Fr. Seil nDMFrueh entfernt
					this.nZinsBer = this.nMBDM + this.nVBDM;
					this.nZinsMB = 0;
					this.bOK = Int.SqlHandleExec(this.hSqlMBKalenderZa, @"SELECT  zabuchdat, zadm INTO  :frmMBKEinzeldruck.dtZaBuchDat, :frmMBKEinzeldruck.nZaDM
FROM za
WHERE zaproznr = :frmMBKEinzeldruck.nProzNr AND zarechnr >= 999990 AND zadeaktiv IS NULL
ORDER BY zabuchdat", "Zahlungen holen", ref Var.nErr) == Sys.IDOK;
					this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					while (this.nFetchZa != Sys.FETCH_EOF) 
					{
						this.nTage = this.dtZaBuchDat - this.dtZaGrundDat;
						this.nZinsMB = this.nZinsMB + (this.nZinsBer * (this.nTage / 360) * 4).Round() / 100;
						this.dtZaGrundDat = this.dtZaBuchDat;
						this.nZinsBer = this.nZinsBer - this.nZaDM;
						this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					}
					this.nTage = SalDateTime.Current - this.dtZaGrundDat;
					this.nZinsMB = this.nZinsMB + (this.nZinsBer * (this.nTage / 360) * 4).Round() / 100;
					// nur Tageszins
					// Set nZinsMB = nZinsMB + SalNumberRound(nZinsBer / 360 * 4)  /100

					this.dtZaBuchDat = SalDateTime.Null;
					this.dtZaGrundDat = this.dtMBZust;
					this.nZinsBer = this.nDMHF;
					this.nZinsHF = 0;
					this.bOK = Int.SqlHandleExec(this.hSqlMBKalenderZa, @"SELECT  zabuchdat, zadm INTO  :frmMBKEinzeldruck.dtZaBuchDat, :frmMBKEinzeldruck.nZaDM
FROM za
WHERE zaproznr = :frmMBKEinzeldruck.nProzNr AND zarechnr < 999990 AND zadeaktiv IS NULL
ORDER BY zabuchdat", "Zahlungen holen", ref Var.nErr) == Sys.IDOK;
					this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					while (this.nFetchZa != Sys.FETCH_EOF) 
					{
						this.nTage = this.dtZaBuchDat - this.dtZaGrundDat;
						this.nZinsHF = this.nZinsHF + (this.nZinsBer * (this.nTage / 360) * this.nProzHF).Round() / 100;
						this.dtZaGrundDat = this.dtZaBuchDat;
						this.nZinsBer = this.nZinsBer - this.nZaDM;
						this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					}
					this.nTage = SalDateTime.Current - this.dtZaGrundDat;
					this.nZinsHF = this.nZinsHF + (this.nZinsBer * (this.nTage / 360) * this.nProzHF).Round() / 100;
					// nur Tageszins
					// Set nZinsHF = nZinsHF + SalNumberRound(nZinsBer / 360 * nProzHF)  /100

					// 04.06.99
					// bereits bezahlt ?
					Int.SqlImmedSel(@"SELECT  sum(zadm) INTO :frmMBKEinzeldruck.nZaDM
FROM za
WHERE zaproznr = :frmMBKEinzeldruck.nProzNr AND zadeaktiv IS NULL");
					// 05.10.99
					// 0 --> 11.6, da lt. Fr. Seil + Kollay nur für MB-Kosten kein VA gemacht wird.
					// Es fällt keiner durch, da Wiedervorlage lt. o.g. Damen
					// EURO
					if ((this.nDMHF + this.nMahn + this.nMBDM + this.nVBDM + this.nDMFrueh - this.nZaDM) > 6)  // DM 11.6
					{
						// Set nDMFrueh = nDMFrueh + dfKosten
						Int.SqlImmedX(@"INSERT INTO MBK
(mbkproznr, mbkgername, mbkzustmb, mbkzustvb, mbkaz, mbkdmhf, mbkprozhf, mbkdmmahn, mbkdmmb, mbkdmvb,
mbkprozmbvb, mbkdmva, mbktyp, mbkdmfrueh, mbkzinshf, mbkzinsmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkuser)
VALUES( :frmMBKEinzeldruck.nProzNr, :frmMBKEinzeldruck.dfGerName, :frmMBKEinzeldruck.dtMBZust,
:frmMBKEinzeldruck.dtVBZust, :frmMBKEinzeldruck.strAZ, :frmMBKEinzeldruck.nDMHF, :frmMBKEinzeldruck.nProzHF,
:frmMBKEinzeldruck.nMahn, :frmMBKEinzeldruck.nMBDM, :frmMBKEinzeldruck.nVBDM,
4, :frmMBKEinzeldruck.nVADM, 'PFÜ', :frmMBKEinzeldruck.nDMFrueh,
:frmMBKEinzeldruck.nZinsHF, :frmMBKEinzeldruck.nZinsMB,
:frmMBKEinzeldruck.strHN1, :frmMBKEinzeldruck.strHN2, :frmMBKEinzeldruck.strHS, :frmMBKEinzeldruck.strHO, :strBNUser)");
					}

					this.nFetch = this.hSqlMBKalender.FetchNext();
				}
				this.hSqlMBKalender.Commit();
				// Report
				App.frmMBKalender.strReportName = "PFÜ";
				this.SetStatusBarText("Erstelle PFÜ -  Bitte warten !");
				App.frmMBKalender.nErr = 1;
				// 15.02.10 OTF366 + strCustomerNumber
				// LL
				// 12.05.23 Ä2108 FA hinzugefügt
				if (this.dfPR1.Number > 0 && this.dfPR1.Number != Sys.NUMBER_Null) 
				{
					if (Int.PalFA(this.dfPR1.Number, this.nA1, this.nHalterNr, "", SalNumber.Null, SalDateTime.Null, false, true, true))  // 04.02.13
					{
						// 27.06.07
						// LL
						if (dlgLlDruck.ModalDialog(App.frmMain, "Forderungsaufstellung.lst", "")) 
						{
						}
					}
				}
				// If dfPR2 > 0 and dfPR2 != NUMBER_Null
				// If PalFA(dfPR2, nA1, nHalterNr, '', NUMBER_Null, DATETIME_Null, FALSE, TRUE, TRUE)	! 04.02.13
				// 27.06.07
				// LL
				// If SalModalDialog( dlgLlDruck, frmMain, 'Forderungsaufstellung.lst', '' )
				// If dfPR3 > 0 and dfPR3 != NUMBER_Null
				// If PalFA(dfPR3, nA1, nHalterNr, '', NUMBER_Null, DATETIME_Null, FALSE, TRUE, TRUE)	! 04.02.13
				// 27.06.07
				// LL
				// If SalModalDialog( dlgLlDruck, frmMain, 'Forderungsaufstellung.lst', '' )
				// 19.06.24 von ganz unten hierher verschoben laut Frau Memmeler
				if (dlgLlDruck.ModalDialog(App.frmMain, "Aufstellung der Forderungen für Pfü.crd", "")) 
				{
				}
				if (dlgLlDruck.ModalDialog(App.frmMain, "Liste der Kosten.lst", "")) 
				{
				}

				if (dlgLlDruck.ModalDialog(App.frmMain, "Pfü2023Beschluss.crd", "")) 
				{
				}
				if (this.nZaDM > 0) 
				{
					if (dlgLlDruck.ModalDialog(App.frmMain, "Liste der Zahlungen für den VA.lst", "")) 
					{
					}
				}
				if (this.nAGANRb > 0 || this.nAGANRc > 0 || this.nAGANRd > 0) 
				{
					if (dlgLlDruck.ModalDialog(App.frmMain, "Liste weiterer Schuldner zum VA.crd", "")) 
					{
					}
				}
				if (dlgLlDruck.ModalDialog(App.frmMain, "Pfü2023.crd", "")) 
				{
				}
				Sal.WaitCursor(false);
			}
			Sal.WaitCursor(false);
			this.SetStatusBarText(" ");
			this.hSqlMBKalenderZa.Disconnect();
			this.hSqlMBKalender.Disconnect();
			this.DestroyWindow();
			#endregion
		}
		
		/// <summary>
		/// pbDSnOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDSnOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDSnOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDSnOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			App.frmMBKalender.strZusatzkosten = this.dfZusatzkostenText.Text;
			App.frmMBKalender.nZusatzkosten = this.dfZusatzkosten.Number;

			Sal.WaitCursor(true);
			this.SetStatusBarText("Alter MBKalendervorschlag wird gelöscht");
			this.nMahn = 0;
			Int.SqlImmedX("DELETE FROM mbk WHERE mbktyp=\'DS\'  AND mbkuser = :strBNUser ");
			this.SetStatusBarText("Neuer Vorschlag wird erstellt -  Bitte warten ...");
			this.strSelect = @"select prnr, praz, prarztnr, prhalternr,
prdma + prdmc, prdmb, prdmhf, prprozhf, prdmmahn
INTO :frmMBKEinzeldruck.nProzNr,:frmMBKEinzeldruck.strAZ, :frmMBKEinzeldruck.nA1, :frmMBKEinzeldruck.nHalterNr,
:frmMBKEinzeldruck.nMahn, :frmMBKEinzeldruck.nMBDM, :frmMBKEinzeldruck.nDMHF, :frmMBKEinzeldruck.nProzHF, :frmMBKEinzeldruck.nDMMahn
from pr
WHERE prnr = :frmMBKEinzeldruck.dfPR1
ORDER BY prnr";
			this.bOK = Int.SqlConnection(ref this.hSqlMBKalender);
			this.bOK = Int.SqlConnection(ref this.hSqlMBKalenderZa);
			this.bOK = Int.SqlHandleExec(this.hSqlMBKalender, this.strSelect, "Erstellen Vorschlag", ref Var.nErr) == Sys.IDOK;
			Sal.WaitCursor(true);
			if (this.bOK) 
			{
				this.nFetch = this.hSqlMBKalender.FetchNext();
				// While nFetch != FETCH_EOF
				// Call SalStatusSetText(hWndForm,'PR-Nr.: ' || SalNumberToStrX(nProzNr,0))
				// Call SqlImmedSel('SELECT hti || hvn || \' \' || hnn, hname2, hstr, hort
				// INTO :frmMBKEinzeldruck.strHN1, :frmMBKEinzeldruck.strHN2,
				// :frmMBKEinzeldruck.strHS, :frmMBKEinzeldruck.strHO
				// FROM h
				// WHERE harztnr = :frmMBKEinzeldruck.nA1 AND hhalternr = :frmMBKEinzeldruck.nHalterNr')
				// 15.08.13
				// If nDMHF = NUMBER_Null
				// Set nDMHF = 0
				// 10.01.03
				// If nDMMahn = NUMBER_Null
				// Set nDMMahn = 0
				// 12.03.02
				// Set bOK = (SqlHandleExecX(hSqlMBKalenderZa,
				// 'SELECT  prdarztnr, prdrechnr INTO  :frmMBKEinzeldruck.nA1, :frmMBKEinzeldruck.nR1
				// FROM prd
				// WHERE prdnr = :frmMBKEinzeldruck.nProzNr', 'Zahlungen holen') = IDOK)
				// Call SqlFetchNext(hSqlMBKalenderZa,nFetchZa)
				// Set nHF = 0
				// While nFetchZa != FETCH_EOF
				// 18.11.02 sum(rkdmmahn-rkzamahn)
				// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn), sum(rkdmmahn)
				// INTO :frmMBKEinzeldruck.nHF1, :frmMBKEinzeldruck.nMahn1
				// FROM rk
				// WHERE rkarztnr = :frmMBKEinzeldruck.nA1 AND rkrechnr = :frmMBKEinzeldruck.nR1')
				// 05.10.99
				// If nDMHF = 0		! MB vor 05.10.99 gemacht
				// Call SqlImmed('UPDATE za SET zaproznr = :frmMBKEinzeldruck.nProzNr
				// WHERE zaarztnr = :frmMBKEinzeldruck.nA1 AND zarechnr = :frmMBKEinzeldruck.nR1')
				// Set nHF = nHF + nHF1
				// If nDMMahn = 0
				// Set nMahn = nMahn + nMahn1
				// Else If nDMMahn != -1
				// Set nMahn = nMahn + nDMMahn
				// Set nDMMahn = -1
				// Call SqlFetchNext(hSqlMBKalenderZa,nFetchZa)
				// HF + MG
				// 05.10.99
				// If nDMHF = 0
				// Set nDMHF = nHF
				// Proz HF
				// Call SqlImmedSel('SELECT hti || hvn || \' \' || hnn, hname2, hstr, hort
				// INTO :frmMBKEinzeldruck.strHN1, :frmMBKEinzeldruck.strHN2,
				// :frmMBKEinzeldruck.strHS, :frmMBKEinzeldruck.strHO
				// FROM h
				// WHERE harztnr = :frmMBKEinzeldruck.nA1 AND hhalternr = :frmMBKEinzeldruck.nHalterNr')
				// 22.03.02
				// If nProzHF = 0 Or nProzHF = NUMBER_Null
				// If 1 = SalModalDialog(dlgDM, hWndForm, 'Bitte geben Sie für PR' || PalStrNum(nProzNr,6,0) || ' den Zinssatz für die HF ein  (%) :',nProzHF)
				// GerName, wenn leer
				// Set strGerPLZ = SalStrLeftX(strHO, SalStrScan(strHO, ' '))
				// Call SqlImmedSel('SELECT gebez INTO :frmMBKEinzeldruck.strGerName
				// FROM ge WHERE gelg=0 AND geplz = :frmMBKEinzeldruck.strGerPLZ ')
				// MB
				// #27 @ABS(akdm) >= 18
				// If nMBDM = 0
				// Call SqlImmedSel('SELECT sum(akdm)
				// INTO :frmMBKEinzeldruck.nMBDM
				// FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr AND @ABS(akdm) >= 18
				// AND aktyp=\'MB\' AND (aktypdetail = \'MB\' or aktypdetail = \'MB-AG\')')
				// Call SqlImmedSel('SELECT akzust
				// INTO :frmMBKEinzeldruck.dtMBZust
				// FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr
				// AND aktyp=\'MB\' AND (aktypdetail = \'MB\' OR aktypdetail = \'MB-AG\')')
				// VB
				// Call SqlImmedSel('SELECT akdm, akzust
				// INTO :frmMBKEinzeldruck.nVBDM, :frmMBKEinzeldruck.dtVBZust
				// FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr
				// AND aktyp=\'MB\' AND aktypdetail = \'VB\' ')
				// Frühere Vollstreckungsmaßnahmen
				// Call SqlImmedSel('SELECT sum(akdm)
				// INTO :frmMBKEinzeldruck.nDMFrueh
				// FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr
				// AND aktyp=\'MB\' AND aktypdetail <> \'MB\' AND aktypdetail <> \'MB-AG\' AND aktypdetail <> \'VB\' ')
				// VA-Kosten
				// Call SqlImmedSel('SELECT (badm1+badm2+badm3)
				// INTO :frmMBKEinzeldruck.nVADM
				// FROM ba
				// WHERE babuart = \'VA\' ')
				// Zinsberechnung
				// Set dtZaBuchDat = DATETIME_Null
				// Set dtZaGrundDat = dtVBZust
				// Set nZinsBer = nDMFrueh + nMBDM + nVBDM
				// 15.02.02 lt. Fr. Seil nDMFrueh entfernt
				// Set nZinsBer = nMBDM + nVBDM
				// Set nZinsMB = 0
				// Set bOK = (SqlHandleExecX(hSqlMBKalenderZa,
				// 'SELECT  zabuchdat, zadm INTO  :frmMBKEinzeldruck.dtZaBuchDat, :frmMBKEinzeldruck.nZaDM
				// FROM za
				// WHERE zaproznr = :frmMBKEinzeldruck.nProzNr AND zarechnr >= 999990
				// ORDER BY zabuchdat','Zahlungen holen') = IDOK)
				// Call SqlFetchNext(hSqlMBKalenderZa,nFetchZa)
				// While nFetchZa != FETCH_EOF
				// Set nTage = dtZaBuchDat - dtZaGrundDat
				// Set nZinsMB = nZinsMB + SalNumberRound(nZinsBer * (nTage / 360) * 4)  /100
				// Set dtZaGrundDat = dtZaBuchDat
				// Set nZinsBer = nZinsBer - nZaDM
				// Call SqlFetchNext(hSqlMBKalenderZa,nFetchZa)
				// Set nTage = SalDateCurrent() - dtZaGrundDat
				// Set nZinsMB = nZinsMB + SalNumberRound(nZinsBer * (nTage / 360) * 4)  /100
				// nur Tageszins
				// Set nZinsMB = nZinsMB + SalNumberRound(nZinsBer / 360 * 4)  /100
				// Set dtZaBuchDat = DATETIME_Null
				// Set dtZaGrundDat = dtMBZust
				// Set nZinsBer = nDMHF
				// Set nZinsHF = 0
				// Set bOK = (SqlHandleExecX(hSqlMBKalenderZa,
				// 'SELECT  zabuchdat, zadm INTO  :frmMBKEinzeldruck.dtZaBuchDat, :frmMBKEinzeldruck.nZaDM
				// FROM za
				// WHERE zaproznr = :frmMBKEinzeldruck.nProzNr AND zarechnr < 999990
				// ORDER BY zabuchdat','Zahlungen holen') = IDOK)
				// Call SqlFetchNext(hSqlMBKalenderZa,nFetchZa)
				// While nFetchZa != FETCH_EOF
				// Set nTage = dtZaBuchDat - dtZaGrundDat
				// Set nZinsHF = nZinsHF + SalNumberRound(nZinsBer * (nTage / 360) * nProzHF)  /100
				// Set dtZaGrundDat = dtZaBuchDat
				// Set nZinsBer = nZinsBer - nZaDM
				// Call SqlFetchNext(hSqlMBKalenderZa,nFetchZa)
				// Set nTage = SalDateCurrent() - dtZaGrundDat
				// Set nZinsHF = nZinsHF + SalNumberRound(nZinsBer * (nTage / 360) * nProzHF)  /100
				// nur Tageszins
				// Set nZinsHF = nZinsHF + SalNumberRound(nZinsBer / 360 * nProzHF)  /100
				// 04.06.99
				// bereits bezahlt ?
				// Call SqlImmedSel('SELECT  sum(zadm) INTO :frmMBKEinzeldruck.nZaDM
				// FROM za
				// WHERE zaproznr = :frmMBKEinzeldruck.nProzNr')
				// If (nDMHF + nMahn + nMBDM + nVBDM + nDMFrueh - nZaDM) > 6	! DM 11.6
				// Set nDMFrueh = nDMFrueh + dfKosten
				// Call SqlImmedX('INSERT INTO MBK
				// (mbkproznr, mbkgername, mbkzustmb, mbkzustvb, mbkaz, mbkdmhf, mbkprozhf, mbkdmmahn, mbkdmmb, mbkdmvb,
				// mbkprozmbvb, mbkdmva, mbktyp, mbkdmfrueh, mbkzinshf, mbkzinsmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkuser)
				// VALUES( :frmMBKEinzeldruck.nProzNr, :frmMBKEinzeldruck.dfGerName, :frmMBKEinzeldruck.dtMBZust,
				// :frmMBKEinzeldruck.dtVBZust, :frmMBKEinzeldruck.strAZ, :frmMBKEinzeldruck.nDMHF, :frmMBKEinzeldruck.nProzHF,
				// :frmMBKEinzeldruck.nMahn, :frmMBKEinzeldruck.nMBDM, :frmMBKEinzeldruck.nVBDM,
				// 4, :frmMBKEinzeldruck.nVADM, \'PFÜ\', :frmMBKEinzeldruck.nDMFrueh,
				// :frmMBKEinzeldruck.nZinsHF, :frmMBKEinzeldruck.nZinsMB,
				// :frmMBKEinzeldruck.strHN1, :frmMBKEinzeldruck.strHN2, :frmMBKEinzeldruck.strHS, :frmMBKEinzeldruck.strHO, :strBNUser)')
				// Call SqlImmedX('INSERT INTO MBK
				// (mbkproznr, mbkgername, mbkzustmb, mbkzustvb, mbkaz, mbkdmhf, mbkprozhf, mbkdmmahn, mbkdmmb, mbkdmvb,
				// mbkprozmbvb, mbkdmva, mbktyp, mbkdmfrueh, mbkzinshf, mbkzinsmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkuser)
				// VALUES( :frmMBKEinzeldruck.nProzNr, :frmMBKEinzeldruck.dfGerName, :frmMBKEinzeldruck.dtMBZust,
				// :frmMBKEinzeldruck.dtVBZust, :frmMBKEinzeldruck.strAZ, :frmMBKEinzeldruck.nDMHF, :frmMBKEinzeldruck.nProzHF,
				// :frmMBKEinzeldruck.nMahn, :frmMBKEinzeldruck.nMBDM, :frmMBKEinzeldruck.nVBDM,
				// 4, :frmMBKEinzeldruck.nVADM, \'DS\', :frmMBKEinzeldruck.nDMFrueh,
				// :frmMBKEinzeldruck.nZinsHF, :frmMBKEinzeldruck.nZinsMB,
				// :frmMBKEinzeldruck.strHN1, :frmMBKEinzeldruck.strHN2, :frmMBKEinzeldruck.strHS, :frmMBKEinzeldruck.strHO, :strBNUser)')
				// Call SqlFetchNext(hSqlMBKalender,nFetch)
				while (this.nFetch != Sys.FETCH_EOF) 
				{
					this.SetStatusBarText("PR-Nr.: " + this.nProzNr.ToString(0));
					if (this.nDMHF == SalNumber.Null) 
					{
						this.nDMHF = 0;
					}
					// 10.01.03
					if (this.nDMMahn == SalNumber.Null) 
					{
						this.nDMMahn = 0;
					}
					// 12.03.02
					this.bOK = Int.SqlHandleExec(this.hSqlMBKalenderZa, @"SELECT  prdarztnr, prdrechnr INTO  :frmMBKEinzeldruck.nA1, :frmMBKEinzeldruck.nR1
FROM prd
WHERE prdnr = :frmMBKEinzeldruck.nProzNr", "Zahlungen holen", ref Var.nErr) == Sys.IDOK;
					this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					this.nHF = 0;
					while (this.nFetchZa != Sys.FETCH_EOF) 
					{
						// 18.11.02 sum(rkdmmahn-rkzamahn)
						Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn), sum(rkdmmahn)
INTO :frmMBKEinzeldruck.nHF1, :frmMBKEinzeldruck.nMahn1
FROM rk
WHERE rkarztnr = :frmMBKEinzeldruck.nA1 AND rkrechnr = :frmMBKEinzeldruck.nR1 AND rkdeaktiv IS NULL");
						// 05.10.99
						if (this.nDMHF == 0)  // MB vor 05.10.99 gemacht
						{
							Int.SqlImmed(@"UPDATE za SET zaproznr = :frmMBKEinzeldruck.nProzNr
WHERE zaarztnr = :frmMBKEinzeldruck.nA1 AND zarechnr = :frmMBKEinzeldruck.nR1");
							this.nHF = this.nHF + this.nHF1;
						}
						if (this.nDMMahn == 0) 
						{
							this.nMahn = this.nMahn + this.nMahn1;
						}
						else if (this.nDMMahn != -1) 
						{
							this.nMahn = this.nMahn + this.nDMMahn;
							this.nDMMahn = -1;
						}
						this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					}
					// HF + MG
					// 05.10.99
					if (this.nDMHF == 0) 
					{
						this.nDMHF = this.nHF;
					}
					// Proz HF
					Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hstr, hort
INTO :frmMBKEinzeldruck.strHN1, :frmMBKEinzeldruck.strHN2,
:frmMBKEinzeldruck.strHS, :frmMBKEinzeldruck.strHO
FROM h
WHERE harztnr = :frmMBKEinzeldruck.nA1 AND hhalternr = :frmMBKEinzeldruck.nHalterNr AND hdeaktiv IS NULL");
					// 22.03.02
					if (this.nProzHF == 0 || this.nProzHF == SalNumber.Null) 
					{
						if (1 == dlgDM.ModalDialog(this, "Bitte geben Sie für PR" + Int.PalStrNum(this.nProzNr, 6, 0) + " den Zinssatz für die HF ein  (%) :", ref this.nProzHF)) 
						{
						}
					}
					// GerName, wenn leer
					// Set strGerPLZ = SalStrLeftX(strHO, SalStrScan(strHO, ' '))
					// Call SqlImmedSel('SELECT gebez INTO :frmMBKEinzeldruck.strGerName
					// FROM ge WHERE gelg=0 AND geplz = :frmMBKEinzeldruck.strGerPLZ ')
					// MB
					// #27 @ABS(akdm) >= 18
					if (this.nMBDM == 0) 
					{
						Int.SqlImmedSel(@"SELECT sum(akdm)
INTO :frmMBKEinzeldruck.nMBDM
FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr AND @ABS(akdm) >= 18
AND aktyp='MB' AND (aktypdetail = 'MB' or aktypdetail = 'MB-AG') AND akdeaktiv IS NULL");
					}
					Int.SqlImmedSel(@"SELECT akzust
INTO :frmMBKEinzeldruck.dtMBZust
FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr
AND aktyp='MB' AND (aktypdetail = 'MB' OR aktypdetail = 'MB-AG') AND akdeaktiv IS NULL");
					// VB
					Int.SqlImmedSel(@"SELECT akdm, akzust
INTO :frmMBKEinzeldruck.nVBDM, :frmMBKEinzeldruck.dtVBZust
FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr
AND aktyp='MB' AND aktypdetail = 'VB' AND akdeaktiv IS NULL ");
					// Frühere Vollstreckungsmaßnahmen
					Int.SqlImmedSel(@"SELECT sum(akdm)
INTO :frmMBKEinzeldruck.nDMFrueh
FROM ak WHERE akproznr = :frmMBKEinzeldruck.nProzNr
AND aktyp='MB' AND aktypdetail <> 'MB' AND aktypdetail <> 'MB-AG' AND aktypdetail <> 'VB' AND akdeaktiv IS NULL ");
					// 30.06.20 Ä1892
					// VA-Kosten
					// Call SqlImmedSel('SELECT (badm1+badm2+badm3)
					// INTO :frmMBKEinzeldruck.nVADM
					// FROM ba
					// WHERE babuart = \'VA\' ')
					Int.SqlImmedSel(@"SELECT badm1, badm2, badm3
INTO :frmMBKEinzeldruck.nVADM1, :frmMBKEinzeldruck.nVADM2, :frmMBKEinzeldruck.nVADM3
FROM ba
WHERE babuart = 'VA' ");
                    if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31))
                    {
						this.nVADM1 = (this.nVADM1 * 116 / 119 * 100).Round() / 100;
						this.nVADM3 = (this.nVADM3 * 116 / 119 * 100).Round() / 100;
					}
					this.nVADM = this.nVADM1 + this.nVADM2 + this.nVADM3;

					// Zinsberechnung
					this.dtZaBuchDat = SalDateTime.Null;
					this.dtZaGrundDat = this.dtVBZust;
					// Set nZinsBer = nDMFrueh + nMBDM + nVBDM
					// 15.02.02 lt. Fr. Seil nDMFrueh entfernt
					this.nZinsBer = this.nMBDM + this.nVBDM;
					this.nZinsMB = 0;
					this.bOK = Int.SqlHandleExec(this.hSqlMBKalenderZa, @"SELECT  zabuchdat, zadm INTO  :frmMBKEinzeldruck.dtZaBuchDat, :frmMBKEinzeldruck.nZaDM
FROM za
WHERE zaproznr = :frmMBKEinzeldruck.nProzNr AND zarechnr >= 999990 AND zadeaktiv IS NULL
ORDER BY zabuchdat", "Zahlungen holen", ref Var.nErr) == Sys.IDOK;
					this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					while (this.nFetchZa != Sys.FETCH_EOF) 
					{
						this.nTage = this.dtZaBuchDat - this.dtZaGrundDat;
						this.nZinsMB = this.nZinsMB + (this.nZinsBer * (this.nTage / 360) * 4).Round() / 100;
						this.dtZaGrundDat = this.dtZaBuchDat;
						this.nZinsBer = this.nZinsBer - this.nZaDM;
						this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					}
					this.nTage = SalDateTime.Current - this.dtZaGrundDat;
					this.nZinsMB = this.nZinsMB + (this.nZinsBer * (this.nTage / 360) * 4).Round() / 100;
					// nur Tageszins
					// Set nZinsMB = nZinsMB + SalNumberRound(nZinsBer / 360 * 4)  /100

					this.dtZaBuchDat = SalDateTime.Null;
					this.dtZaGrundDat = this.dtMBZust;
					this.nZinsBer = this.nDMHF;
					this.nZinsHF = 0;
					this.bOK = Int.SqlHandleExec(this.hSqlMBKalenderZa, @"SELECT  zabuchdat, zadm INTO  :frmMBKEinzeldruck.dtZaBuchDat, :frmMBKEinzeldruck.nZaDM
FROM za
WHERE zaproznr = :frmMBKEinzeldruck.nProzNr AND zarechnr < 999990 AND zadeaktiv IS NULL
ORDER BY zabuchdat", "Zahlungen holen", ref Var.nErr) == Sys.IDOK;
					this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					while (this.nFetchZa != Sys.FETCH_EOF) 
					{
						this.nTage = this.dtZaBuchDat - this.dtZaGrundDat;
						this.nZinsHF = this.nZinsHF + (this.nZinsBer * (this.nTage / 360) * this.nProzHF).Round() / 100;
						this.dtZaGrundDat = this.dtZaBuchDat;
						this.nZinsBer = this.nZinsBer - this.nZaDM;
						this.nFetchZa = this.hSqlMBKalenderZa.FetchNext();
					}
					this.nTage = SalDateTime.Current - this.dtZaGrundDat;
					this.nZinsHF = this.nZinsHF + (this.nZinsBer * (this.nTage / 360) * this.nProzHF).Round() / 100;
					// nur Tageszins
					// Set nZinsHF = nZinsHF + SalNumberRound(nZinsBer / 360 * nProzHF)  /100

					// 04.06.99
					// bereits bezahlt ?
					Int.SqlImmedSel(@"SELECT  sum(zadm) INTO :frmMBKEinzeldruck.nZaDM
FROM za
WHERE zaproznr = :frmMBKEinzeldruck.nProzNr AND zadeaktiv IS NULL");
					// 05.10.99
					// 0 --> 11.6, da lt. Fr. Seil + Kollay nur für MB-Kosten kein VA gemacht wird.
					// Es fällt keiner durch, da Wiedervorlage lt. o.g. Damen
					// EURO
					Int.SqlImmedX(@"INSERT INTO MBK
(mbkproznr, mbkgername, mbkzustmb, mbkzustvb, mbkaz, mbkdmhf, mbkprozhf, mbkdmmahn, mbkdmmb, mbkdmvb,
mbkprozmbvb, mbkdmva, mbktyp, mbkdmfrueh, mbkzinshf, mbkzinsmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkuser)
VALUES( :frmMBKEinzeldruck.nProzNr, :frmMBKEinzeldruck.dfGerName, :frmMBKEinzeldruck.dtMBZust,
:frmMBKEinzeldruck.dtVBZust, :frmMBKEinzeldruck.strAZ, :frmMBKEinzeldruck.nDMHF, :frmMBKEinzeldruck.nProzHF,
:frmMBKEinzeldruck.nMahn, :frmMBKEinzeldruck.nMBDM, :frmMBKEinzeldruck.nVBDM,
4, :frmMBKEinzeldruck.nVADM, 'DS', :frmMBKEinzeldruck.nDMFrueh,
:frmMBKEinzeldruck.nZinsHF, :frmMBKEinzeldruck.nZinsMB,
:frmMBKEinzeldruck.strHN1, :frmMBKEinzeldruck.strHN2, :frmMBKEinzeldruck.strHS, :frmMBKEinzeldruck.strHO, :strBNUser)");
					// Call SqlImmedX('INSERT INTO MBK
					// (mbkproznr, mbkgername, mbkzustmb, mbkzustvb, mbkaz, mbkdmhf, mbkprozhf, mbkdmmahn, mbkdmmb, mbkdmvb,
					// mbkprozmbvb, mbkdmva, mbktyp, mbkdmfrueh, mbkzinshf, mbkzinsmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkuser)
					// VALUES( :frmMBKEinzeldruck.nProzNr, :frmMBKEinzeldruck.dfGerName, :frmMBKEinzeldruck.dtMBZust,
					// :frmMBKEinzeldruck.dtVBZust, :frmMBKEinzeldruck.strAZ, :frmMBKEinzeldruck.nDMHF, :frmMBKEinzeldruck.nProzHF,
					// :frmMBKEinzeldruck.nMahn, :frmMBKEinzeldruck.nMBDM, :frmMBKEinzeldruck.nVBDM,
					// 4, :frmMBKEinzeldruck.nVADM, \'DS\', :frmMBKEinzeldruck.nDMFrueh,
					// :frmMBKEinzeldruck.nZinsHF, :frmMBKEinzeldruck.nZinsMB,
					// :frmMBKEinzeldruck.strHN1, :frmMBKEinzeldruck.strHN2, :frmMBKEinzeldruck.strHS, :frmMBKEinzeldruck.strHO, :strBNUser)')
					this.nFetch = this.hSqlMBKalender.FetchNext();
				}
				this.hSqlMBKalender.Commit();
				// 13.12.23 Ä2082
				Int.SqlImmedSel(@"SELECT sum(fadmhf)+ sum(fadmko)+ sum(faunvzdm)+ sum(fazinsdm)+ sum(faunvzdmtit)
INTO :frmMBKEinzeldruck.nGesamtOP
FROM fa
WHERE fauser= :strBNUser AND faproznr = :frmMBKEinzeldruck.dfPR1");
				// Report
				this.SetStatusBarText("Erstelle DS -  Bitte warten !");
				App.frmMBKalender.nErr = 1;
				App.frmMBKalender.strReportName = "DS";
				// LL
				if (dlgLlDruck.ModalDialog(App.frmMain, "DS-Antrag2023.crd", "")) 
				{
				}
				if (1 == dlgLlDruck.ModalDialog(App.frmMain, "DS-Beschluss2023.crd", "")) 
				{
					if (this.dfPR1.Number > 0 && this.dfPR1.Number != Sys.NUMBER_Null) 
					{
						if (Int.PalFA(this.dfPR1.Number, this.nA1, this.nHalterNr, "", SalNumber.Null, SalDateTime.Null, false, true, true))  // 04.02.13
						{
							// 27.06.07
							// LL
							if (dlgLlDruck.ModalDialog(App.frmMain, "Forderungsaufstellung.lst", "")) 
							{
							}
						}
					}
					// If dfPR2 > 0 and dfPR2 != NUMBER_Null
					// If PalFA(dfPR2, nA1, nHalterNr, '', NUMBER_Null, DATETIME_Null, FALSE, TRUE, TRUE)	! 04.02.13
					// 27.06.07
					// LL
					// If SalModalDialog( dlgLlDruck, frmMain, 'Forderungsaufstellung.lst', '' )
					// If dfPR3 > 0 and dfPR3 != NUMBER_Null
					// If PalFA(dfPR3, nA1, nHalterNr, '', NUMBER_Null, DATETIME_Null, FALSE, TRUE, TRUE)	! 04.02.13
					// 27.06.07
					// LL
					// If SalModalDialog( dlgLlDruck, frmMain, 'Forderungsaufstellung.lst', '' )
				}
				Sal.WaitCursor(false);
			}
			Sal.WaitCursor(false);
			this.SetStatusBarText(" ");
			this.hSqlMBKalenderZa.Disconnect();
			this.hSqlMBKalender.Disconnect();
			this.DestroyWindow();
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
			this.DestroyWindow();
			#endregion
		}
		#endregion
	}
}
