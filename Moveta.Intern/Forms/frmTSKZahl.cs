// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmTSKZahl : SalQuickTabsForm
	{
		#region Window Variables
		public SalNumber nAnzHalter = 0;
		public SalSqlHandle hSqlTSK = SalSqlHandle.Null;
		public SalSqlHandle hSqlTSKMerk = SalSqlHandle.Null;
		public SalSqlHandle hSqlTSKPop = SalSqlHandle.Null;
		public SalSqlHandle hSqlTSKKopf = SalSqlHandle.Null;
		public SalSqlHandle hSqlTSKPos = SalSqlHandle.Null;
		public SalNumber nRow = 0;
		public SalNumber nFetchTSKKopf = 0;
		public SalNumber nFetchTSKPos = 0;
		public SalDateTime dtBearbDat = SalDateTime.Null;
		public SalDateTime dtZeiDat = SalDateTime.Null;
		public SalNumber nArztNr = 0;
		public SalNumber nHalterNr = 0;
		public SalNumber nArztNrAlt = 0;
		public SalNumber nHalterNrAlt = 0;
		public SalNumber nRechNr = 0;
		public SalString strRegNr = "";
		public SalDateTime dtErfDat = SalDateTime.Null;
		public SalString strZM = "";
		public SalNumber nFaktor = 0;
		public SalDateTime dtDatum = SalDateTime.Null;
		public SalDateTime dtDatumAlt = SalDateTime.Null;
		public SalString strTyp = "";
		public SalNumber nBeihilfe = 0;
		public SalNumber nBeihilfeSum = 0;
		public SalNumber nBeihMwSt = 0;
		public SalNumber nBeihNetto = 0;
		public SalDateTime dtBeihDat = SalDateTime.Null;
		public SalString strBeihText = "";
		public SalDateTime dtZeiDatAlt = SalDateTime.Null;
		public SalString strBeihilfeGUID = "";
		public SalString strHVN = "";
		public SalString strHNN = "";
		public SalString strHS = "";
		public SalString strHO = "";
		public SalString strHReg = "";
		public SalString strAReg = "";
		public SalNumber nPos = 0;
		public SalString strGOT = "";
		public SalString strText = "";
		public SalNumber nWert = 0;
		public SalString strEinheit = "";
		public SalNumber nMwSt = 0;
		public SalNumber nEUR = 0;
		public SalNumber nLePos = 0;
		public SalString strSelect = "";
		public SalString strBuchText = "";
		public SalNumber nAbrSum = 0;
		public SalString lsText = "";
		public SalString strBrief = "";
		public SalString strDummy = "";
		public SalNumber nKZZahl = 0;
		public SalString strDateiName = "";
		public SalString strDateiPfad = "";
		public SalFileHandle hFileTSK = SalFileHandle.Null;
		public SalString strFileTSK = "";
		public SalArray<SalString> strTSKTab = new SalArray<SalString>(20);
		public SalString strTSKAReg = "";
		public SalString strTSKHReg = "";
		public SalNumber nTSKAuftrag = 0;
		public SalDateTime dtTSKDatum = SalDateTime.Null;
		public SalString strTSKMassnahme = "";
		public SalNumber nTSKAnzahl = 0;
		public SalNumber nTSKBeihilfe = 0;
		public SalString strTSKStatus = "";
		public SalBoolean bTSKda = false;
		public SalBoolean bTSKFehler = false;
		public SalString strTSKBeihText = "";
		public SalString strTSKTyp = "";
		public SalNumber nErr = 0;
		public SalNumber nTSKCount = 0;
		public SalString strBruttoLA = "";
		public SalNumber nBruttoMwSt = 0;
		public SalNumber nBruttoDM = 0;
		public SalNumber nSum = 0;
		public SalNumber nTab = 0;
		public SalNumber nSumBeihilfe = 0;
		public SalNumber nMwStSenkung = 0;
		public SalString strDruckSelect = "";
		public SalNumber hPic = 0;
		public SalNumber nBeihZuHoch = 0;
		public SalString strBeihStatus = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmTSKZahl()
		{
			// Assign global reference.
			App.frmTSKZahl = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmTSKZahl CreateWindow(Control owner)
		{
			frmTSKZahl frm = new frmTSKZahl();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmTSKZahl FromHandle(SalWindowHandle handle)
		{
			return ((frmTSKZahl)SalWindow.FromHandle(handle, typeof(frmTSKZahl)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalTSKZahlSave()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.WaitCursor(true);

				tblTSKZahl.KillCellEdit();
				if (tblTSKZahl.AnyRows(Sys.ROW_Edited, 0)) 
				{
					nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblTSKZahl.FindNextRow(ref nRow, Sys.ROW_Edited, 0))) 
						{
							break;
						}
						tblTSKZahl.SetFocusRow(nRow);
						// 23.06.09 OTÄ255 + If tblTSKZahl.colBeihilfe = NUMBER_Null
						if (tblTSKZahl.colBeihilfe.Number == Sys.NUMBER_Null) 
						{
							Int.SqlImmed(@"UPDATE tsk SET
tskbeihilfe = :frmTSKZahl.tblTSKZahl.colBeihilfe,
tskbeihtext = :frmTSKZahl.tblTSKZahl.colBeihText
WHERE tskarztnr= :frmTSKZahl.tblTSKZahl.colArztNr AND tskerfdat = :frmTSKZahl.tblTSKZahl.colErfDat ");
						}
						else
						{
							Int.SqlImmed(@"UPDATE tsk SET
tskbeihilfe = :frmTSKZahl.tblTSKZahl.colBeihilfe,
tskbeihtext = :frmTSKZahl.tblTSKZahl.colBeihText,
tskbeihdat = SYSDATE
WHERE tskarztnr= :frmTSKZahl.tblTSKZahl.colArztNr AND tskerfdat = :frmTSKZahl.tblTSKZahl.colErfDat ");
						}
						tblTSKZahl.SetRowFlags(nRow, Sys.ROW_Edited, false);
					}
					hSqlTSK.Commit();
				}

				Sal.WaitCursor(false);
				return true;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strOrder"></param>
		/// <returns></returns>
		public SalNumber PalHoleTabelle(SalString strOrder)
		{
			#region Local Variables
			SqlLocals.PalHoleTabelleLocals locals = new SqlLocals.PalHoleTabelleLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.strOrder = strOrder;

				Sal.WaitCursor(true);
				// 10.02.09 OTÄ172 tskantrdat IS NOT NULL -->> (tskbeihdat IS NOT NULL OR tskantrdat IS NOT NULL)
				strSelect = @"SELECT tskarztnr, tskhalternr, hvn || ' ' || hnn, tsktyp, tskerfdat, tskantrdat, tskdatum, tskbeihtext, tskbeihilfe
FROM tsk,h, a
INTO :frmTSKZahl.tblTSKZahl.colArztNr, :frmTSKZahl.tblTSKZahl.colHalterNr, :frmTSKZahl.tblTSKZahl.colHaltername, :frmTSKZahl.tblTSKZahl.colTyp, :frmTSKZahl.tblTSKZahl.colErfDat, :frmTSKZahl.tblTSKZahl.colAntrDat,
:frmTSKZahl.tblTSKZahl.colDatum,
:frmTSKZahl.tblTSKZahl.colBeihText, :frmTSKZahl.tblTSKZahl.colBeihilfe
WHERE tskarztnr=aarztnr AND tskarztnr=harztnr AND tskhalternr=hhalternr AND (tskbeihdat IS NOT NULL OR tskantrdat IS NOT NULL) AND tskdeaktiv IS NULL AND hdeaktiv IS NULL ";
				tblTSKZahl.ResetTable();

				if (Sal.IsNull(dfRegNr)) 
				{
				}
				else
				{
					strRegNr = "%" + dfRegNr.Text;
					// OTÄ356 + aregnr LIKE :frmTSKZahl.strRegNr OR
					strSelect = strSelect + @" AND (aregnr LIKE :frmTSKZahl.strRegNr OR hregnr LIKE :frmTSKZahl.strRegNr OR tskregnr LIKE :frmTSKZahl.strRegNr
OR @lics(hnn) LIKE @LICS('%" + dfRegNr.Text + "%\') OR @lics(hvn) LIKE @LICS(\'%" + dfRegNr.Text + "%\') ) ";
				}

				if (!(Sal.IsNull(dfArztNr))) 
				{
					strSelect = strSelect + " AND tskarztnr = :frmTSKZahl.dfArztNr ";
				}
				if (!(Sal.IsNull(dfHalterNr))) 
				{
					strSelect = strSelect + " AND tskhalternr = :frmTSKZahl.dfHalterNr ";
				}

				if (cbnurOP.Checked) 
				{
					strSelect = strSelect + " AND tskerldat IS NULL";
					Sal.EnableWindow(tblTSKZahl.colBeihilfe);
					Sal.EnableWindow(tblTSKZahl.colBeihText);
				}
				else
				{
					Sal.DisableWindow(tblTSKZahl.colBeihilfe);
					Sal.DisableWindow(tblTSKZahl.colBeihText);
				}

				strSelect = strSelect + " ORDER BY " + locals.strOrder;
				tblTSKZahl.Populate(hSqlTSKPop, strSelect, Sys.TBL_FillAll);
				Sal.WaitCursor(false);

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// OTÄ255
		/// </summary>
		/// <param name="dtBehDat"></param>
		/// <returns></returns>
		public SalNumber PalTSKBerechnePos(SalDateTime dtBehDat)
		{
			#region Actions
			using (new SalContext(this))
			{
				// 27.10.23 Ä2129
				nEUR = Int.PalTSKBerechnePositionen(dtBehDat, strZM, strTyp, nPos, strGOT, strEinheit, nWert, ref strText, ref nMwSt);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// liest TA-Abrech-Disk ein
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalAbrDiskeinlesen()
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(6);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strArExtensions[0] = "Textdateien - *.txt";
				strArExtensions[1] = "*.txt";
				xOK = Sal.DlgOpenFile(this, "Abrechnung einlesen", strArExtensions, 2, ref nIndex, ref strDateiName, ref strDateiPfad);
				if (xOK) 
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalClearToken()
		{
			#region Local Variables
			SalNumber nCount = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				nCount = 0;
				while (nCount < 20) 
				{
					strTSKTab[nCount] = "";
					nCount = nCount + 1;
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPFehler"></param>
		/// <returns></returns>
		public SalNumber PalNewRow(SalString strPFehler)
		{
			#region Actions
			using (new SalContext(this))
			{
				tblImport.InsertRow(Sys.TBL_MaxRow);
				tblImport.colAnzahl.Number = nTSKAnzahl;
				tblImport.colARegNr.Text = strTSKAReg;
				tblImport.colAuftrag.Number = nTSKAuftrag;
				tblImport.colBeihilfe.Number = nTSKBeihilfe;
				tblImport.colDatum.DateTime = dtTSKDatum;
				tblImport.colHRegNr.Text = strTSKHReg;
				tblImport.colMassnahme.Text = strTSKMassnahme;
				tblImport.colStatus.Text = strTSKStatus;
				tblImport.colFehler.Text = strPFehler;
				bTSKFehler = true;
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="bAlle"></param>
		/// <returns></returns>
		public SalNumber BerechneBrutto(SalBoolean bAlle)
		{
			#region Local Variables
			SqlLocals.BerechneBruttoLocals locals = new SqlLocals.BerechneBruttoLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.bAlle = bAlle;

				nAbrSum = 0;
				Int.SqlConnection(ref locals.hSqlBrutto);
				if (locals.bAlle) 
				{
					Int.SqlHandleExec(locals.hSqlBrutto, @"SELECT lepla, lepmwst, sum(lepdm)
FROM lep
WHERE LEPBEARBEITER = :strBNUser AND lebearbdatum = :frmTSKZahl.dtBearbDat AND LEPARZTNR = :frmTSKZahl.nArztNrAlt AND LEPHALTERNR = :frmTSKZahl.nHalterNrAlt
GROUP BY 1,2
INTO :frmTSKZahl.strBruttoLA, :frmTSKZahl.nBruttoMwSt, :frmTSKZahl.nBruttoDM", "Brutto€ errechnen bei TSK-Rechnungserstellung", ref nErr);
				}
				else
				{
					Int.SqlHandleExec(locals.hSqlBrutto, @"SELECT lepla, lepmwst, sum(lepdm)
FROM lep
WHERE LEPBEARBEITER = :strBNUser AND lebearbdatum = :frmTSKZahl.dtBearbDat AND LEPARZTNR = :frmTSKZahl.nArztNr AND LEPHALTERNR = :frmTSKZahl.nHalterNr AND lepzeidat > :frmTSKZahl.dtZeiDatAlt
GROUP BY 1,2
INTO :frmTSKZahl.strBruttoLA, :frmTSKZahl.nBruttoMwSt, :frmTSKZahl.nBruttoDM", "Brutto€ errechnen bei TSK-Rechnungserstellung", ref nErr);
				}
				locals.nFetchBrutto = locals.hSqlBrutto.FetchNext();
				while (locals.nFetchBrutto != Sys.FETCH_EOF) 
				{
					// Set nBrutto = nBrutto + nBruttoDM
					nAbrSum = nAbrSum + nBruttoDM + (nBruttoDM * nBruttoMwSt).Round() / 100.00m;
					locals.nFetchBrutto = locals.hSqlBrutto.FetchNext();
				}
				locals.hSqlBrutto.Commit();
				locals.hSqlBrutto.Disconnect();
				dtZeiDatAlt = dtZeiDat;

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalCheckBeihilfe()
		{
			#region Actions
			using (new SalContext(this))
			{
				// 16.12.09 OTÄ324
				if (nArztNrAlt != 0 && nHalterNrAlt != 0) 
				{
					BerechneBrutto(true);
					if ((nAbrSum - nBeihilfeSum) < 2 && (nAbrSum - nBeihilfeSum) > 0) 
					{
						lsText = @"***Restbetrag unter € 2,00***

Bitte Betrag in Höhe von €" + Int.PalStrNum(nAbrSum - nBeihilfeSum, 8, 2) + " ausbuchen";
						// 13.05.14 F2027
						nHalterNrAlt = Int.PalCheckNULL(nHalterNrAlt);

						// 09.05.16 Ä1367 AN -> HE
						Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, 'HE', :frmTSKZahl.nArztNrAlt, :frmTSKZahl.nHalterNrAlt, 0,
:frmTSKZahl.lsText , SYSDATE, NULL, 'N', 'ZM', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
					}
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strOrder"></param>
		/// <returns></returns>
		public SalNumber PalHoleTabelleMerk(SalString strOrder)
		{
			#region Local Variables
			SqlLocals.PalHoleTabelleMerkLocals locals = new SqlLocals.PalHoleTabelleMerkLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.strOrder = strOrder;

				Sal.WaitCursor(true);
				if (Sal.IsNull(dfRegNr)) 
				{
					locals.strSelect = "";
				}
				else
				{
					locals.strRegNr = "%" + dfRegNrMerk.Text;
					locals.strSelect = " AND ( hregnr LIKE :frmTSKZahl.strRegNr OR @lics(hnn) LIKE @LICS(\'%" + dfRegNr.Text + "%\') OR @lics(hvn) LIKE @LICS(\'%" + dfRegNr.Text + "%\') )";
				}
				tblTSKMerk.ResetTable();
				tblTSKMerk.Populate(hSqlTSKMerk, @"SELECT tskmlarztnr, tskmlhalternr, hvn || ' ' || hnn, tskmltyp, tskmlerfdat, tskmlmerktyp, tskmldat, tskmldm
FROM tskml,h
INTO :frmTSKZahl.tblTSKMerk.colArztNr, :frmTSKZahl.tblTSKMerk.colHalterNr, :frmTSKZahl.tblTSKMerk.colHaltername, :frmTSKZahl.tblTSKMerk.colTyp, :frmTSKZahl.tblTSKMerk.colErfDat, :frmTSKZahl.tblTSKMerk.colMerkTyp,
:frmTSKZahl.tblTSKMerk.colDat, :frmTSKZahl.tblTSKMerk.colDM
WHERE tskmlarztnr=harztnr AND tskmlhalternr=hhalternr AND tskmlerldat IS NULL AND hdeaktiv IS NULL " + locals.strSelect + " ORDER BY " + locals.strOrder, Sys.TBL_FillNormal);
				Sal.WaitCursor(false);

				return 0;
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmTSKZahl WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmTSKZahl_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_CreateComplete:
					this.frmTSKZahl_OnSAM_CreateComplete(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.frmTSKZahl_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmTSKZahl_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmTSKZahl_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlConnection(ref this.hSqlTSK);
			Int.SqlConnection(ref this.hSqlTSKMerk);
			Int.SqlConnection(ref this.hSqlTSKPos);
			Int.SqlConnection(ref this.hSqlTSKPop);
			this.cbnurOP.Checked = true;
			// 20.10.23 Ä2129
			this.hPic = MT.MImg.LoadFromFile(Const.PATH_ICONS + "normal\\bmp\\16x16\\Single problem.bmp", MT.MImg.MIMG_TYPE_BMP, 0);
			MT.MTbl.SetRowFlagImage(this.tblTSKZahl, Vis.ROW_UserFlag1, this.hPic, (MT.MTbl.MTSI_REDRAW | MT.MTbl.MTSI_NOSELINV));

			this.PalHoleTabelle("tskerfdat");
			this.PalHoleTabelleMerk("tskmlarztnr");
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmTSKZahl_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblTSKMerk.SetContextMenu("frmTSKZahltblTSKMerkRightClick", 0);
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmTSKZahl_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.PalTSKZahlSave()) 
			{
			}
			this.hSqlTSKPop.Disconnect();
			this.hSqlTSK.Disconnect();
			this.hSqlTSKPos.Disconnect();
			this.hSqlTSKMerk.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// picTabs WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case QO.TABSM_TabActivateStart:
					this.picTabs_OnTABSM_TabActivateStart(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// TABSM_TabActivateStart event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_OnTABSM_TabActivateStart(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.picTabs.SelectedIndex = this.picTabs.GetClicked();
			if (this.picTabs.SelectedIndex == 0)  // Beihilfe
			{
				this.tblTSKZahl.ResetTable();
				this.PalHoleTabelle("tskerfdat");
			}
			if (this.picTabs.SelectedIndex == 1)  // Merkliste
			{
				this.tblTSKMerk.ResetTable();
				this.PalHoleTabelleMerk("tskmlarztnr");
			}
			#endregion
		}
		
		/// <summary>
		/// dfRegNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRegNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRegNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRegNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.PalTSKZahlSave()) 
			{
				this.PalHoleTabelle("tskerfdat");
			}
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.PalTSKZahlSave()) 
			{
				this.PalHoleTabelle("tskerfdat");
			}
			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.PalTSKZahlSave()) 
			{
				this.PalHoleTabelle("tskerfdat");
			}
			#endregion
		}
		
		/// <summary>
		/// cbnurOP WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbnurOP_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbnurOP_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbnurOP_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalHoleTabelle("tskerfdat");
			#endregion
		}
		
		/// <summary>
		/// tblTSKZahl WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTSKZahl_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblTSKZahl_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblTSKZahl_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTSKZahl_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblTSKZahl, 0xffbfbf);
			MT.MTbl.SetFlags(this.tblTSKZahl, MT.MTbl.MTBL_FLAG_VARIABLE_ROW_HEIGHT, true);
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblTSKZahl_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblTSKZahl.colPos.Text = "";
			if (this.hSqlTSKPos.PrepareAndExecute(@"SELECT tsktyp, tskdatum, tskzm, tskppos, tskpwert, tskpeinheit, tskptext, tskpgot
INTO :frmTSKZahl.strTyp, :frmTSKZahl.dtDatum, :frmTSKZahl.strZM, :frmTSKZahl.nPos, :frmTSKZahl.nWert, :frmTSKZahl.strEinheit, :frmTSKZahl.strText, :frmTSKZahl.strGOT
FROM tsk, tskp
WHERE tskparztnr = :frmTSKZahl.tblTSKZahl.colArztNr AND tskphalternr = :frmTSKZahl.tblTSKZahl.colHalterNr AND tskperfdat = :frmTSKZahl.tblTSKZahl.colErfDat
AND tskarztnr=tskparztnr AND tskhalternr=tskphalternr AND tskerfdat=tskperfdat")) 
			{
				this.nSum = 0;
				this.nFetchTSKPos = this.hSqlTSKPos.FetchNext();
				while (this.nFetchTSKPos != Sys.FETCH_EOF) 
				{

					this.tblTSKZahl.colPos.Text = this.tblTSKZahl.colPos.Text + Int.PalStrNum(this.nWert, 8, 2) + " " + Int.PalLF(this.strEinheit, 10) + Int.PalLF(this.strText, 30) + Int.PalLF(this.strGOT, 10) + @"
";
					this.PalTSKBerechnePos(this.dtDatum);
					this.nSum = this.nSum + this.nEUR + (this.nEUR * this.nMwSt).Round() / 100;

					this.nFetchTSKPos = this.hSqlTSKPos.FetchNext();
				}
				this.hSqlTSKPos.Commit();
			}
			// 20.10.23 Ä2129
			this.tblTSKZahl.colSumme.Number = this.nSum;
			this.tblTSKZahl.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag1, false);
			// 08.12.23 Ä2152 nSum -> (nSum + 10)
			if (this.tblTSKZahl.colBeihilfe.Number > (this.nSum + 10)) 
			{
				this.tblTSKZahl.SetRowFlags(Sys.lParam, Vis.ROW_UserFlag1, true);
				Int.SqlImmed(@"UPDATE tsk SET tsksperre=1
WHERE tskarztnr = :frmTSKZahl.tblTSKZahl.colArztNr AND tskhalternr = :frmTSKZahl.tblTSKZahl.colHalterNr AND tskerfdat = :frmTSKZahl.tblTSKZahl.colErfDat");
				// Call MTblSetRowHeight( frmTSKZahl.tblTSKZahl, lParam, 0, NUMBER_Null )
			}
			else
			{
				Int.SqlImmed(@"UPDATE tsk SET tsksperre=0
WHERE tskarztnr = :frmTSKZahl.tblTSKZahl.colArztNr AND tskhalternr = :frmTSKZahl.tblTSKZahl.colHalterNr AND tskerfdat = :frmTSKZahl.tblTSKZahl.colErfDat");
				// If cbnurWarn
				// Call SalTblDeleteRow( frmTSKZahl.tblTSKZahl, lParam, TBL_Adjust )
				// Call MTblSetRowHeight( frmTSKZahl.tblTSKZahl, lParam, 1, NUMBER_Null )
			}

			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			if (this.PalTSKZahlSave()) 
			{
			}

			Int.SqlConnection(ref this.hSqlTSKKopf);

			this.nArztNrAlt = 0;
			this.nHalterNrAlt = 0;
			this.nBeihilfeSum = 0;
			this.dtDatumAlt = new SalDateTime(1900, 1, 1);
			// Set nAbrHalter = 0
			this.dtBearbDat = SalDateTime.Current;
			this.dtZeiDatAlt = SalDateTime.Current;
			this.nLePos = 1;
			this.strDruckSelect = "";
			// 20.10.23 Ä2129 + AND tsksperre=0
			// 09.11.23 F5058 + tskbeihilfeguid,
			if (this.hSqlTSKKopf.PrepareAndExecute(@"SELECT tskarztnr, tskhalternr, tskregnr, tskerfdat, tskzm, tskfaktor, tskdatum, tsktyp, tskbeihilfe, tskbeihdat, tskbeihtext, tskbeihilfeguid,
hvn, hnn, hstr, hort, hregnr
INTO :frmTSKZahl.nArztNr, :frmTSKZahl.nHalterNr, :frmTSKZahl.strRegNr, :frmTSKZahl.dtErfDat, :frmTSKZahl.strZM, :frmTSKZahl.nFaktor,
:frmTSKZahl.dtDatum, :frmTSKZahl.strTyp, :frmTSKZahl.nBeihilfe, :frmTSKZahl.dtBeihDat, :frmTSKZahl.strBeihText, :frmTSKZahl.strBeihilfeGUID,
:frmTSKZahl.strHVN, :frmTSKZahl.strHNN, :frmTSKZahl.strHS, :frmTSKZahl.strHO, :frmTSKZahl.strHReg
FROM tsk, h
WHERE tskarztnr=harztnr AND tskhalternr=hhalternr AND tskbeihdat IS NOT NULL AND tskerldat IS NULL AND tskdeaktiv IS NULL AND hdeaktiv IS NULL AND tsksperre=0
ORDER BY tskarztnr, tskhalternr, tskdatum, tskerfdat")) 
			{
				this.nFetchTSKKopf = this.hSqlTSKKopf.FetchNext();
				while (this.nFetchTSKKopf != Sys.FETCH_EOF) 
				{
					// 08.12.23 Ä2152
					this.strBeihStatus = "";
					// 13.07.20 Ä1892
					if (this.dtDatum >= new SalDateTime(2020, 7, 1) && this.dtDatum <= new SalDateTime(2020, 12, 31)) 
					{
						this.nMwStSenkung = 16;
					}
					else if (this.dtDatum < new SalDateTime(2020, 7, 1)) 
					{
						this.nMwStSenkung = 19;
					}
					else
					{
						this.nMwStSenkung = Var.nMwStVoll;
					}

					if (this.strTyp == "BVDv") 
					{
						this.strDruckSelect = this.strDruckSelect + ", " + (this.nArztNr * 1000000 + this.nHalterNr).ToString(0);

						Int.SqlImmedSel("SELECT aregnr INTO :frmTSKZahl.strAReg FROM a WHERE aarztnr = :frmTSKZahl.nArztNr");

						if (this.dtDatum != this.dtDatumAlt) 
						{
							this.dtZeiDat = SalDateTime.Current - 1;
							this.strText = "Reg.Nr. der Tierarztpraxis: " + this.strAReg;
							Int.SqlImmedX(@"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM,
LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:strBNUser, :frmTSKZahl.nArztNr ,:frmTSKZahl.nHalterNr,NULL,
1, 'L', :frmTSKZahl.nMwStSenkung, :frmTSKZahl.strText, :frmTSKZahl.dtDatum,
0 , 0,
:frmTSKZahl.dtBearbDat, :frmTSKZahl.dtZeiDat )");

							this.dtZeiDat = SalDateTime.Current;
							this.strText = "Ihre Reg.Nr.: " + this.strHReg;
							Int.SqlImmedX(@"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM,
LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:strBNUser, :frmTSKZahl.nArztNr ,:frmTSKZahl.nHalterNr,NULL,
1, 'L', :frmTSKZahl.nMwStSenkung, :frmTSKZahl.strText, :frmTSKZahl.dtDatum,
0 , 0,
:frmTSKZahl.dtBearbDat, :frmTSKZahl.dtZeiDat )");

							this.dtDatumAlt = this.dtDatum;
						}
					}
					// 14.01.10
					if (this.nArztNr != this.nArztNrAlt || this.nHalterNr != this.nHalterNrAlt) 
					{
						this.PalCheckBeihilfe();
						this.nBeihilfeSum = 0;
						// Set nAbrHalter = 0
					}
					// 13.03.09 OTF233 + AND lebearbdatum = :frmTSKZahl.dtBearbDat
					Int.SqlIstDa("FROM LE WHERE LEBEARBEITER = :strBNUser AND lebearbdatum = :frmTSKZahl.dtBearbDat AND LEARZTNR = :frmTSKZahl.nArztNr AND LEHALTERNR = :frmTSKZahl.nHalterNr AND LESTATUS = \'TSK\'", ref Var.bExists);
					if (!(Var.bExists)) 
					{
						// 13.11.23 Ä2129 +, LEBEGUID
						Int.SqlImmedX(@"INSERT INTO LE (LEBEARBEITER, LEARZTNR, LEHALTERNR, LEMATCH, LEPOSNR,
LENN, LEVN, LESTR, LEORT, LEBEARBDATUM, LEMANDISK, LESTATUS, LEBEGUID)
VALUES (:strBNUser, :frmTSKZahl.nArztNr ,:frmTSKZahl.nHalterNr, NULL, 1,
:frmTSKZahl.strHNN, :frmTSKZahl.strHVN, :frmTSKZahl.strHS, :frmTSKZahl.strHO, :frmTSKZahl.dtBearbDat,:strMan, 'TSK', :frmTSKZahl.strBeihilfeGUID)");
					}

					this.nAbrSum = 0;
					if (this.hSqlTSKPos.PrepareAndExecute(@"SELECT tskppos, tskpgot, tskptext, tskpwert, tskpeinheit
INTO :frmTSKZahl.nPos, :frmTSKZahl.strGOT, :frmTSKZahl.strText, :frmTSKZahl.nWert, :frmTSKZahl.strEinheit
FROM tskp
WHERE tskparztnr = :frmTSKZahl.nArztNr AND tskphalternr = :frmTSKZahl.nHalterNr AND tskperfdat = :frmTSKZahl.dtErfDat")) 
					{
						this.nFetchTSKPos = this.hSqlTSKPos.FetchNext();
						while (this.nFetchTSKPos != Sys.FETCH_EOF) 
						{
							this.PalTSKBerechnePos(this.dtDatum);
							// 16.12.09 OTF344 auskommentiert
							// Set nAbrSum = nAbrSum + nEUR + SalNumberRound(nEUR * nMwSt) / 100
							// 06.07.23
							this.strText = this.strText.Left(70);


							this.dtZeiDat = SalDateTime.Current + this.nLePos;
							Int.SqlImmedX(@"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM,
LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:strBNUser, :frmTSKZahl.nArztNr ,:frmTSKZahl.nHalterNr,NULL,
1, 'L', :frmTSKZahl.nMwSt, :frmTSKZahl.strText, :frmTSKZahl.dtDatum,
:frmTSKZahl.nEUR , 0,
:frmTSKZahl.dtBearbDat, :frmTSKZahl.dtZeiDat )");
							// 17.02.09 OTÄ183
							if (this.nPos == 6 && this.strTyp != "TSKF") 
							{
								this.dtZeiDat = SalDateTime.Current + this.nLePos;
								Int.SqlImmedX(@"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM,
LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:strBNUser, :frmTSKZahl.nArztNr ,:frmTSKZahl.nHalterNr,NULL,
1, 'L', :frmTSKZahl.nMwSt, '      HIT-Verwaltung, Impflistenverwaltung, etc.', :frmTSKZahl.dtDatum,
0 , 1,
:frmTSKZahl.dtBearbDat, :frmTSKZahl.dtZeiDat )");
								// Set dtZeiDat = SalDateCurrent() + nLePos
								// Call SqlImmedX('INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
								// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM,
								// LEPDM, LEPTEXT,
								// LEBEARBDATUM, LEPZEIDAT)
								// VALUES (:strBNUser, :frmTSKZahl.nArztNr ,:frmTSKZahl.nHalterNr,NULL,
								// 1, \'L\', :frmTSKZahl.nMwSt, \'      Impflisten, etc.\', :frmTSKZahl.dtDatum,
								// 0 , 1,
								// :frmTSKZahl.dtBearbDat, :frmTSKZahl.dtZeiDat )')
							}
							// 06.07.23
							if (this.nPos == 18 && this.strTyp == "BHVI") 
							{
								this.dtZeiDat = SalDateTime.Current + this.nLePos;
								Int.SqlImmedX(@"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM,
LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:strBNUser, :frmTSKZahl.nArztNr ,:frmTSKZahl.nHalterNr,NULL,
1, 'L', :frmTSKZahl.nMwSt, ' / Extensivrd. (" + this.strGOT + @")', :frmTSKZahl.dtDatum,
0 , 1,
:frmTSKZahl.dtBearbDat, :frmTSKZahl.dtZeiDat )");
							}
							// 18.07.23
							if (this.nPos == 20 && this.strTyp == "Bruc") 
							{
								this.dtZeiDat = SalDateTime.Current + this.nLePos;
								Int.SqlImmedX(@"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM,
LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:strBNUser, :frmTSKZahl.nArztNr ,:frmTSKZahl.nHalterNr,NULL,
1, 'L', :frmTSKZahl.nMwSt, ' / Extensivrind (634,635)', :frmTSKZahl.dtDatum,
0 , 1,
:frmTSKZahl.dtBearbDat, :frmTSKZahl.dtZeiDat )");
							}

							this.nFetchTSKPos = this.hSqlTSKPos.FetchNext();
						}
						this.hSqlTSKPos.Commit();
						Int.SqlImmed(@"UPDATE tsk SET tskerldat = :frmTSKZahl.dtBearbDat
WHERE tskarztnr = :frmTSKZahl.nArztNr AND tskhalternr = :frmTSKZahl.nHalterNr AND tskerfdat = :frmTSKZahl.dtErfDat");
					}
					// 16.12.09 OTF344
					this.BerechneBrutto(false);

					// 08.12.23 Ä2152 nSum -> (nAbrSum + 10)
					if (this.nBeihilfe > (this.nAbrSum + 10)) 
					{
						this.lsText = @"***TSK-Beihilfe zu hoch***

Bitte Betrag in Höhe von €" + Int.PalStrNum(this.nBeihilfe - this.nAbrSum, 8, 2) + @" an Tierseuchenkassen zurücküberweisen, da Beihilfe Rechnungsbetrag überssteigt.

Verwendungszweck: Reg.Nr." + this.strRegNr;
						// 13.05.14 F2027
						this.nHalterNr = Int.PalCheckNULL(this.nHalterNr);
						// 08.12.23 Ä2152
						this.strBeihStatus = "Beihilfe war um € " + Int.PalStrNum(this.nBeihilfe - this.nAbrSum, 4, 2) + " zu hoch. Zurück an TSK.";

						// 09.05.16 Ä1367 AN -> HE
						Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, 'HE', :frmTSKZahl.nArztNr, :frmTSKZahl.nHalterNr, 0,
:frmTSKZahl.lsText , SYSDATE, NULL, 'N', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
						this.nBeihilfe = this.nAbrSum;
					}
					else if (this.nBeihilfe > this.nAbrSum && this.nBeihilfe <= (this.nAbrSum + 10))  // 08.12.23 Ä2152
					{
						this.nBeihZuHoch = this.nBeihilfe - this.nAbrSum;
						this.nAbrSum = this.nAbrSum + this.nBeihZuHoch;
						Int.SqlImmedX(@"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM,
LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:strBNUser, :frmTSKZahl.nArztNr ,:frmTSKZahl.nHalterNr,NULL,
1, 'L', :nMwStVoll, 'Verbrauchsmaterialien §7', :frmTSKZahl.dtDatum,
:frmTSKZahl.nBeihZuHoch , 0,
:frmTSKZahl.dtBearbDat, :frmTSKZahl.dtZeiDat )");
						this.strBeihStatus = Int.PalStrNum(this.nBeihZuHoch, 8, 2) + " Verbrauchsmaterialien §7 hinzugefügt";
						// Set lsText = '***TSK-Beihilfe zu hoch***
						// 
						// Es wurden der Verbrauchsmaterialien §7 in Höhe von €' || PalStrNum(nBeihZuHoch,8,2) || ' an Tierseuchenkassen zurücküberweisen, da Beihilfe Rechnungsbetrag überssteigt.
						// 
						// Verwendungszweck: Reg.Nr.' || strRegNr
						// Call SqlImmed('
						// INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
						// VALUES (:strBNZei, \'*\', :frmTSKZahl.nArztNr, :frmTSKZahl.nHalterNr, 0,
						// :frmTSKZahl.lsText , SYSDATE, NULL, \'J\', \'TN\', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)')
					}
					// 16.12.09 OTÄ324
					// If (nAbrSum - nBeihilfe) < 2 And (nAbrSum - nBeihilfe) > 0
					// Set lsText = '***Restbetrag unter € 2,00***
					// 
					// Bitte Betrag in Höhe von €' || PalStrNum(nAbrSum - nBeihilfe,8,2) || ' ausbuchen'
					// Call SqlImmed('
					// INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige)
					// VALUES (:strBNZei, \'BE\', :frmTSKZahl.nArztNr, :frmTSKZahl.nHalterNr, 0,
					// :frmTSKZahl.lsText , SYSDATE, NULL, \'N\', \'ZM\', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0)')
					// Beihilfe
					// 04.07.11 Ä599
					if (this.nBeihilfe != 0) 
					{
						this.strBeihText = this.strBeihText + " (€ " + this.nBeihilfe.ToString(2) + ")";
					}
					// 23.06.09 OTÄ255
					this.dtZeiDat = SalDateTime.Current + this.nLePos;
					Int.SqlImmedX(@"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM,
LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:strBNUser, :frmTSKZahl.nArztNr ,:frmTSKZahl.nHalterNr,NULL,
1, 'L', 0 , :frmTSKZahl.strBeihText, :frmTSKZahl.dtDatum, 0 , 1,
:frmTSKZahl.dtBearbDat, :frmTSKZahl.dtZeiDat )");
					if (this.nBeihilfe != 0) 
					{
						// Set lsText = 'Beihilfezahlung'
						// Call SqlImmed('
						// INSERT INTO Z VALUES (:strBNZei, \'BE\', :frmTSKZahl.nArztNr, :frmTSKZahl.nHalterNr, 0,
						// :frmTSKZahl.lsText , SYSDATE, NULL, \'N\', \'ZM\', \'€ Beihilfe\', :frmTSKZahl.nBeihilfe, NULL, NULL, NULL, NULL, NULL, NULL,0)')
						this.dtZeiDat = SalDateTime.Current + this.nLePos;
						this.strDummy = ">>TSK" + Int.PalStrNum(this.nBeihilfe, 8, 2) + "<<";
						// 13.09.10 OTÄ393 + , :frmTSKZahl.nBeihilfe
						Int.SqlImmedX(@"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM,
LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT, LEPBEIHILFE)
VALUES (:strBNUser, :frmTSKZahl.nArztNr ,:frmTSKZahl.nHalterNr,NULL,
1, 'L', :frmTSKZahl.nMwSt , :frmTSKZahl.strDummy, :frmTSKZahl.dtDatum, 0 , 1,
:frmTSKZahl.dtBearbDat, :frmTSKZahl.dtZeiDat, :frmTSKZahl.nBeihilfe )");
						// 09.11.23 F5058 + tskbeihilfeguid,
						// 08.12.23 Ä2152 +, bestatus = :frmTSKZahl.strBeihStatus
						this.strBeihStatus = this.strBeihStatus.Left(50);
						Int.SqlImmed("UPDATE be SET beerldat = SYSDATETIME, bestatus = :frmTSKZahl.strBeihStatus WHERE beguid = :frmTSKZahl.strBeihilfeGUID");
						// Kontoauszug
						// If nBeihilfe = nAbrSum
						// Set nKZZahl = 2
						// Else
						// Set nKZZahl = 1
						// Set strBuchText = 'TSK-Beihilfe'
						// 16.06.09 OTÄ255
						// Call SqlImmedX('INSERT INTO TK
						// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
						// tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
						// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
						// VALUES (:frmTSKZahl.nArztNr, 1, 0, :frmTSKZahl.strBuchText,:frmTSKZahl.nHalterNr, 0, 0, SYSDATE,
						// 15800, 0, 0, 0, :frmTSKZahl.nBeihilfe, 0, 0, 0, :frmTSKZahl.nBeihMwSt, :frmTSKZahl.nMwSt, :frmTSKZahl.nKZZahl, 0, 0,
						// 0, :frmTSKZahl.nBeihilfe)')

						// Sachkonten - FiBu
						// Call SqlImmedX('INSERT INTO FI
						// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiarztnr, fihalternr)
						// VALUES (0, 15800,16000, :frmTSKZahl.nArztNr, SYSDATE, :frmTSKZahl.strBuchText, :frmTSKZahl.nBeihilfe, 6, :frmTSKZahl.nArztNr,:frmTSKZahl.nHalterNr)')
						// Call SqlImmedX('INSERT INTO FI
						// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiarztnr, fihalternr)
						// VALUES (0, 15800,16000, :frmTSKZahl.nArztNr, SYSDATE, :frmTSKZahl.strBuchText, :frmTSKZahl.nBeihNetto, 6, :frmTSKZahl.nArztNr,:frmTSKZahl.nHalterNr)')
						// Call SqlImmedX('INSERT INTO FI
						// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiarztnr, fihalternr)
						// VALUES (0, 15800,18300, :frmTSKZahl.nArztNr, SYSDATE, :frmTSKZahl.strBuchText, :frmTSKZahl.nBeihMwSt, 6, :frmTSKZahl.nArztNr,:frmTSKZahl.nHalterNr)')
					}
                    else
                    {
                        Int.SqlImmed("UPDATE be SET beerldat = SYSDATETIME, bestatus = :frmTSKZahl.strBeihStatus WHERE beguid = :frmTSKZahl.strBeihilfeGUID");
                    }

                    this.nBeihilfeSum = this.nBeihilfeSum + this.nBeihilfe;
					// Set nAbrHalter = nAbrHalter + nAbrSum
					this.nArztNrAlt = this.nArztNr;
					this.nHalterNrAlt = this.nHalterNr;

					this.nLePos = this.nLePos + 1;
					this.nFetchTSKKopf = this.hSqlTSKKopf.FetchNext();
				}
				this.hSqlTSKKopf.Commit();

				this.PalCheckBeihilfe();
			}

			if (this.strDruckSelect != "") 
			{
				this.strDruckSelect = this.strDruckSelect.Mid(2, 32000);
				if (dlgLlDruck.ModalDialog(App.frmMain, "TSK-InfoH.crd", this.strDruckSelect)) 
				{
				}
			}

			Sal.MessageBeep(0);
			this.PalHoleTabelle("tskerfdat");

			this.hSqlTSKKopf.Disconnect();
			Sal.WaitCursor(false);
			Sal.MessageBox("Vorgang abgeschlossen", "Ok", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			#endregion
		}
		
		/// <summary>
		/// pbImport WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbImport_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbImport_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbImport_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbImport_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Set lsTSKFehler = ''
			this.bTSKFehler = false;
			this.tblImport.ResetTable();
			if (this.PalAbrDiskeinlesen()) 
			{
				Sal.WaitCursor(true);
				if (this.hFileTSK.Open(this.strDateiPfad, (Sys.OF_Text | Sys.OF_Read))) 
				{
					while (true)
					{
						if (!(this.hFileTSK.GetString(ref this.strFileTSK, 32000))) 
						{
							break;
						}
						else
						{
							this.PalClearToken();
							this.strFileTSK = Int.PalDelZeichen(this.strFileTSK, "\"");
							this.PalClearToken();
							this.nTSKCount = this.strFileTSK.Tokenize("", ";", this.strTSKTab);
							if (this.nTSKCount <= 1) 
							{
								this.PalClearToken();
								this.nTSKCount = this.strFileTSK.Tokenize("", ((SalNumber)9).ToCharacter(), this.strTSKTab);
							}
							if (this.nTSKCount > 1) 
							{
								this.strTSKAReg = Int.PalDelZeichen(this.strTSKTab[0], "-");
								this.strTSKHReg = Int.PalDelZeichen(this.strTSKTab[1], "-");
								this.nTSKAuftrag = Int.PalValNum(this.strTSKTab[7]);
								this.dtTSKDatum = this.strTSKTab[8].ToDate();
								this.strTSKMassnahme = this.strTSKTab[9];
								this.nTSKAnzahl = Int.PalValNum(this.strTSKTab[10]);
								this.nTSKBeihilfe = Int.PalValNum(this.strTSKTab[11]);
								this.strTSKStatus = this.strTSKTab[12];
								if (this.strTSKMassnahme == "BHVBE") 
								{
									this.strTSKTyp = "BHVIBV";
								}
								else
								{
									this.strTSKTyp = this.strTSKMassnahme;
								}
								// 20.08.09 tsktyp -> @LEFT(tsktyp,3)
								this.strTSKTyp = this.strTSKTyp.Left(3);

								if (this.strTSKStatus != "OK" && this.strTSKStatus != "abgelehnt") 
								{
									// Set lsTSKFehler = lsTSKFehler || '
									// Status ' || strStatus || ' unbekannt.'
									this.PalNewRow("Status " + Var.strStatus + " unbekannt.");
								}
								else
								{
									Int.SqlIstDa("FROM  a WHERE aregnr = :frmTSKZahl.strTSKAReg", ref this.bTSKda);
									if (!(this.bTSKda)) 
									{
										// Set lsTSKFehler = lsTSKFehler || '
										// Kein Mitglied gefunden für ' || strTSKTab[2] || ', Reg.Nr.' || strTSKHReg || ' ' || strTSKTab[8] || ' ' || strTSKTab[9] || ' ' || strTSKTab[10] || ' ' || strTSKTab[12]
										this.PalNewRow("Kein Mitglied gefunden");
									}
									else
									{
										// 20.08.09 tsktyp -> @LEFT(tsktyp,3)
										Int.SqlIstDa(@"FROM  tsk, tskp
WHERE tskarztnr=tskparztnr AND tskhalternr=tskphalternr AND tskerfdat=tskperfdat
AND tskpregnr = :frmTSKZahl.strTSKHReg
AND tskdatum = :frmTSKZahl.dtTSKDatum
AND tskpwert = :frmTSKZahl.nTSKAnzahl
AND @LEFT(tsktyp,3) = :frmTSKZahl.strTSKTyp AND tskdeaktiv IS NULL", ref this.bTSKda);
										if (!(this.bTSKda)) 
										{
											// Set lsTSKFehler = lsTSKFehler || '
											// Keine Maßahme gefunden für ' || strTSKTab[2] || ', Reg.Nr.' || strTSKHReg || ' ' || strTSKTab[8] || ' ' || strTSKTab[9] || ' ' || strTSKTab[10] || ' ' || strTSKTab[12]
											this.PalNewRow("Keine Maßahme gefunden");
										}
										else
										{
											if (this.nTSKBeihilfe < 0 || this.nTSKBeihilfe == SalNumber.Null) 
											{
												// Set lsTSKFehler = lsTSKFehler || '
												// Beihilfe negativ oder leer für ' || strTSKTab[2] || ', Reg.Nr.' || strTSKHReg || ' ' || strTSKTab[8] || ' ' || strTSKTab[9] || ' ' || strTSKTab[10] || ' ' || strTSKTab[12]
												this.PalNewRow("Beihilfe negativ oder leer");
											}
											else
											{
												// 20.08.09 tsktyp -> @LEFT(tsktyp,3)
												Int.SqlImmedSel(@"SELECT tskarztnr, tskhalternr, tskerfdat
INTO :frmTSKZahl.nArztNr, :frmTSKZahl.nHalterNr, :frmTSKZahl.dtErfDat
FROM  tsk, tskp
WHERE tskarztnr=tskparztnr AND tskhalternr=tskphalternr AND tskerfdat=tskperfdat
AND tskpregnr = :frmTSKZahl.strTSKHReg
AND tskdatum = :frmTSKZahl.dtTSKDatum
AND tskpwert = :frmTSKZahl.nTSKAnzahl
AND @LEFT(tsktyp,3) = :frmTSKZahl.strTSKTyp AND tskdeaktiv IS NULL");
												if (this.nTSKBeihilfe == 0) 
												{
													this.strTSKBeihText = "Beihilfe wurde NICHT gewährt";
												}
												else
												{
													// 23.06.09 OTÄ255
													this.hSqlTSKPos.PrepareAndExecute(@"SELECT tsktyp, tskdatum, tskzm, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit,
hvn, hnn, hstr, hort
INTO :frmTSKZahl.strTyp, :frmTSKZahl.dtDatum, :frmTSKZahl.strZM, :frmTSKZahl.nPos, :frmTSKZahl.strGOT, :frmTSKZahl.strText, :frmTSKZahl.nWert, :frmTSKZahl.strEinheit,
:frmTSKZahl.strHVN, :frmTSKZahl.strHNN, :frmTSKZahl.strHS, :frmTSKZahl.strHO
FROM tsk, tskp, h
WHERE tskarztnr=harztnr AND tskhalternr=hhalternr AND tskarztnr=tskparztnr AND tskhalternr=tskhalternr AND tskerfdat=tskperfdat
AND tskparztnr = :frmTSKZahl.nArztNr AND tskphalternr = :frmTSKZahl.nHalterNr AND tskperfdat = :frmTSKZahl.dtErfDat AND tskdeaktiv IS NULL AND hdeaktiv IS NULL");
													this.nSum = 0;
													this.nFetchTSKPos = this.hSqlTSKPos.FetchNext();
													while (this.nFetchTSKPos != Sys.FETCH_EOF) 
													{
														this.PalTSKBerechnePos(this.dtTSKDatum);
														this.nSum = this.nSum + this.nEUR + (this.nEUR * this.nMwSt).Round() / 100;

														this.nFetchTSKPos = this.hSqlTSKPos.FetchNext();
													}
													this.hSqlTSKPos.Commit();

													if (this.nTSKBeihilfe > (this.nSum + 20)) 
													{
														// Set lsTSKFehler = lsTSKFehler || '
														// Beihilfe zu hoch für ' || strTSKTab[2] || ', Reg.Nr.' || strTSKHReg || ' ' || strTSKTab[8] || ' ' || strTSKTab[9] || ' ' || strTSKTab[10] || ' ' || strTSKTab[12]
														this.PalNewRow("Beihilfe zu hoch");
													}
													else
													{
														this.strTSKBeihText = "Beihilfe wurde gewährt";
														Int.SqlImmed(@"UPDATE tsk SET
tskbeihilfe = :frmTSKZahl.nTSKBeihilfe,
tskbeihtext = :frmTSKZahl.strTSKBeihText,
tskbeihdat = SYSDATE
WHERE tskarztnr= :frmTSKZahl.nArztNr AND tskhalternr = :frmTSKZahl.nHalterNr AND tskerfdat = :frmTSKZahl.dtErfDat");
													}
												}
											}
										}
									}
								}
							}
						}
					}
					if (this.bTSKFehler) 
					{
						this.nErr = 1;
						Sal.ReportTableCreate("TSK-Importprotokoll", this.tblImport, ref this.nErr);
						Sal.ReportTableView(this.tblImport, Sys.hWndNULL, "TSK-Importprotokoll", ref this.nErr);
					}
					this.PalHoleTabelle("tskerfdat");
				}
				Sal.WaitCursor(false);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbImport_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbImport, "TSK-Datei importieren");
			return;
			#endregion
		}
		
		/// <summary>
		/// dfRegNrMerk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRegNrMerk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRegNrMerk_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRegNrMerk_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalHoleTabelleMerk("tskmlarztnr");
			#endregion
		}
		
		/// <summary>
		/// pbMerkRefresh WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMerkRefresh_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbMerkRefresh_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMerkRefresh_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblTSKMerk.ResetTable();
			this.PalHoleTabelleMerk("tskmlarztnr");
			#endregion
		}
		
		/// <summary>
		/// pbSum WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSum_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSum_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbSum_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSum_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalTblSetRowFlags (tblTSKZahl, TBL_MinSplitRow, ROW_Selected, FALSE )
			// !
			this.nSumBeihilfe = 0;
			this.nRow = Sys.TBL_MinRow;
			while (true)
			{
				if (!(this.tblTSKZahl.FindNextRow(ref this.nRow, 0, 0))) 
				{
					break;
				}
				this.tblTSKZahl.SetFocusRow(this.nRow);
				this.nSumBeihilfe = this.nSumBeihilfe + this.tblTSKZahl.colBeihilfe.Number;
			}
			Sal.MessageBox("Die Beihilfesumme beträgt: € " + Int.PalStrNum(this.nSumBeihilfe, 10, 2), "Ergebnis", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSum_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbSum, "Beihilfesumme berechnen");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
			this.DestroyWindow();
			#endregion
		}
		#endregion
		
		#region tblTSKZahl
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblTSKZahlTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTSKZahl _frmTSKZahl = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblTSKZahlTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTSKZahl frmTSKZahl
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTSKZahl == null) 
					{
						_frmTSKZahl = (frmTSKZahl)this.FindForm();
					}
					return _frmTSKZahl;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblTSKZahlTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblTSKZahlTableWindow)SalWindow.FromHandle(handle, typeof(tblTSKZahlTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colArztNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colArztNr_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSKZahl.PalHoleTabelle("tskarztnr");
				#endregion
			}
			
			/// <summary>
			/// colHalterNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colHalterNr_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSKZahl.PalHoleTabelle("tskhalternr");
				#endregion
			}
			
			/// <summary>
			/// colHaltername WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHaltername_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colHaltername_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHaltername_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSKZahl.PalHoleTabelle("hnn, hvn");
				#endregion
			}
			
			/// <summary>
			/// colTyp WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colTyp_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colTyp_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colTyp_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSKZahl.PalHoleTabelle("tsktyp");
				#endregion
			}
			
			/// <summary>
			/// colErfDat WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colErfDat_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colErfDat_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colErfDat_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSKZahl.PalHoleTabelle("tskerfdat");
				#endregion
			}
			
			/// <summary>
			/// colAntrDat WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colAntrDat_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colAntrDat_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colAntrDat_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSKZahl.PalHoleTabelle("tskantrdat");
				#endregion
			}
			
			/// <summary>
			/// colDatum WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colDatum_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDatum_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSKZahl.PalHoleTabelle("tskdatum");
				#endregion
			}
			
			/// <summary>
			/// colBeihilfe WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfe_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colBeihilfe_OnSAM_Validate(sender, e);
						break;
					
					case Sys.SAM_CaptionDoubleClick:
						this.colBeihilfe_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfe_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (this.colBeihilfe.Number > 0) 
				{
					// 23.06.09 OTÄ255
					if (this.frmTSKZahl.hSqlTSKPos.PrepareAndExecute(@"SELECT tsktyp, tskdatum, tskzm, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit,
hvn, hnn, hstr, hort
INTO :frmTSKZahl.strTyp, :frmTSKZahl.dtDatum, :frmTSKZahl.strZM, :frmTSKZahl.nPos, :frmTSKZahl.strGOT, :frmTSKZahl.strText, :frmTSKZahl.nWert, :frmTSKZahl.strEinheit,
:frmTSKZahl.strHVN, :frmTSKZahl.strHNN, :frmTSKZahl.strHS, :frmTSKZahl.strHO
FROM tsk, tskp, h
WHERE tskarztnr=harztnr AND tskhalternr=hhalternr AND tskarztnr=tskparztnr AND tskhalternr=tskhalternr AND tskerfdat=tskperfdat
 AND tskdeaktiv IS NULL AND hdeaktiv IS NULL
AND tskparztnr = :frmTSKZahl.tblTSKZahl.colArztNr AND tskphalternr = :frmTSKZahl.tblTSKZahl.colHalterNr AND tskperfdat = :frmTSKZahl.tblTSKZahl.colErfDat")) 
					{
						this.frmTSKZahl.nSum = 0;
						this.frmTSKZahl.nFetchTSKPos = this.frmTSKZahl.hSqlTSKPos.FetchNext();
						while (this.frmTSKZahl.nFetchTSKPos != Sys.FETCH_EOF) 
						{
							// Call PalTSKBerechnePos( dtDatum )

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalString temp1 = this.frmTSKZahl.strText;
							SalNumber temp2 = this.frmTSKZahl.nMwSt;
							this.frmTSKZahl.nEUR = Int.PalTSKBerechnePositionen(this.frmTSKZahl.dtDatum, this.frmTSKZahl.strZM, this.frmTSKZahl.strTyp, this.frmTSKZahl.nPos, this.frmTSKZahl.strGOT, this.frmTSKZahl.strEinheit, this.frmTSKZahl.nWert, ref temp1, ref 
								temp2);
							this.frmTSKZahl.strText = temp1;
							this.frmTSKZahl.nMwSt = temp2;

							this.frmTSKZahl.nSum = this.frmTSKZahl.nSum + this.frmTSKZahl.nEUR + (this.frmTSKZahl.nEUR * this.frmTSKZahl.nMwSt).Round() / 100;

							this.frmTSKZahl.nFetchTSKPos = this.frmTSKZahl.hSqlTSKPos.FetchNext();
						}
						this.frmTSKZahl.hSqlTSKPos.Commit();

						// 22.08.18 20 -> 10 nach Absprache mit Frau D.Sasse, von Herrn Sasse genehmigt
						if (this.colBeihilfe.Number > (this.frmTSKZahl.nSum + 10)) 
						{
							if (Sys.IDYES == Sal.MessageBox("Die Beihilfe übersteigt den Rechnungsbetrag um € " + (this.colBeihilfe.Number - this.frmTSKZahl.nSum).ToString(2) + ". Soll Mitglied benachrichtigt werden?", "Nachricht an M?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
							{
								this.frmTSKZahl.strBrief = @"Sehr geehrte Damen und Herren,

die Beihilfe der Tierseuchenkasse für u.g. Maßnahme übersteigt den Rechnungsbetrag um € " + (this.colBeihilfe.Number - this.frmTSKZahl.nSum).ToString(2) + @".

Maßnahme vom " + Int.PalDateToStrDE(this.frmTSKZahl.dtDatum) + ": ";
								if (this.frmTSKZahl.strTyp == "BT") 
								{
									this.frmTSKZahl.strBrief = this.frmTSKZahl.strBrief + "Blauzunge";
								}
								else if (this.frmTSKZahl.strTyp == "BTBV") 
								{
									this.frmTSKZahl.strBrief = this.frmTSKZahl.strBrief + "Blauzunge - Zeitabrechnung";
								}
								else if (this.frmTSKZahl.strTyp == "BHVIBV") 
								{
									this.frmTSKZahl.strBrief = this.frmTSKZahl.strBrief + "BHVI - Zeitabrechnung";
								}
								else if (this.frmTSKZahl.strTyp == "BVDBV") 
								{
									this.frmTSKZahl.strBrief = this.frmTSKZahl.strBrief + "BVD - Zeitabrechnung";
								}
								else
								{
									this.frmTSKZahl.strBrief = this.frmTSKZahl.strBrief + this.frmTSKZahl.strTyp;
								}
								this.frmTSKZahl.strBrief = this.frmTSKZahl.strBrief + " bei " + this.frmTSKZahl.strHVN + " " + this.frmTSKZahl.strHNN + ", " + this.frmTSKZahl.strHO;
								this.frmTSKZahl.strBrief = this.frmTSKZahl.strBrief + @"

Bitte prüfen Sie, ob die Forderungsliste korrigiert werden muß und teilen uns Änderungsbedarf bis zum " + Int.PalDateToStrDE(SalDateTime.Current + 14) + @" mit.
Falls wir bis zu diesem Datum (Posteingang moveta) nichts von Ihnen hören, rechnen wir die Forderung unverändert ab und überweisen € " + (this.colBeihilfe.Number - this.frmTSKZahl.nSum).ToString(2) + " an die Tierseuchenkasse zurück.";
								if (Var.bfrmBriefVari) 
								{
									while (!(App.frmBriefVari.DestroyWindow())) 
									{
									}
								}
								// 06.08.18 Ä1763 TRUE -> FALSE
								frmBriefVari.CreateWindow(this, this.colArztNr.Number, this.colHalterNr.Number, 0, "A", this.frmTSKZahl.strBrief, new SalDateTime(1900, 1, 1), "", "", "", "", "", false);
								Sal.MessageBox("Ok wenn gedruckt", "Druck Ok?", Sys.MB_Ok);
								// 26.01.10 OTF372
								Int.SqlImmed(@"INSERT INTO tskml (tskmlarztnr, tskmlhalternr, tskmlerfdat, tskmlmerktyp, tskmldat, tskmldm, tskmltyp )
VALUES(:frmTSKZahl.tblTSKZahl.colArztNr, :frmTSKZahl.tblTSKZahl.colHalterNr, :frmTSKZahl.tblTSKZahl.colErfDat, 'BEI20', SYSDATETIME, :frmTSKZahl.tblTSKZahl.colBeihilfe , :frmTSKZahl.strTyp)");

								this.colBeihText.Text = "Beihilfe zu hoch. Anfrage " + Int.PalDateToStrDE(SalDateTime.Current);
								this.colBeihilfe.Number = Sys.NUMBER_Null;
								// 12.04.10 OTF421
								Int.SqlImmed(@"UPDATE tsk SET
tskbeihilfe = :frmTSKZahl.tblTSKZahl.colBeihilfe,
tskbeihtext = :frmTSKZahl.tblTSKZahl.colBeihText,
tskbeihdat = NULL
WHERE tskarztnr= :frmTSKZahl.tblTSKZahl.colArztNr AND tskerfdat = :frmTSKZahl.tblTSKZahl.colErfDat ");
							}
							else
							{
								this.colBeihText.Text = "Beihilfe wurde gewährt";
							}
						}
						else
						{
							this.colBeihText.Text = "Beihilfe wurde gewährt";
						}
					}
				}
				else if (this.colBeihilfe.Number == 0) 
				{
					this.colBeihText.Text = "Beihilfe wurde NICHT gewährt";
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihilfe_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSKZahl.PalHoleTabelle("tskbeihilfe");
				#endregion
			}
			
			/// <summary>
			/// colBeihText WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihText_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colBeihText_OnSAM_Validate(sender, e);
						break;
					
					case Sys.SAM_CaptionDoubleClick:
						this.colBeihText_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihText_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (this.colBeihText.Text == "Beihilfe wurde NICHT gewährt") 
				{
					this.colBeihilfe.Number = 0;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBeihText_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSKZahl.PalHoleTabelle("tskbeihtext");
				#endregion
			}
			
			/// <summary>
			/// colPos WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colPos_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colPos_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colPos_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (this.colBeihText.Text == "Beihilfe wurde NICHT gewährt") 
				{
					this.colBeihilfe.Number = 0;
				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region tblImport
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblImportTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTSKZahl _frmTSKZahl = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblImportTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTSKZahl frmTSKZahl
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTSKZahl == null) 
					{
						_frmTSKZahl = (frmTSKZahl)this.FindForm();
					}
					return _frmTSKZahl;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblImportTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblImportTableWindow)SalWindow.FromHandle(handle, typeof(tblImportTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblTSKMerk
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblTSKMerkTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTSKZahl _frmTSKZahl = null;
			
			
			#region Window Variables
			public SalNumber nSum = 0;
			#endregion
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblTSKMerkTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTSKZahl frmTSKZahl
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTSKZahl == null) 
					{
						_frmTSKZahl = (frmTSKZahl)this.FindForm();
					}
					return _frmTSKZahl;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblTSKMerkTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblTSKMerkTableWindow)SalWindow.FromHandle(handle, typeof(tblTSKMerkTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colArztNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colArztNr_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSKZahl.PalHoleTabelleMerk("tskmlarztnr");
				#endregion
			}
			
			/// <summary>
			/// colHalterNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colHalterNr_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSKZahl.PalHoleTabelleMerk("tskmlhalternr");
				#endregion
			}
			
			/// <summary>
			/// colHaltername WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHaltername_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colHaltername_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHaltername_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSKZahl.PalHoleTabelleMerk("hnn, hvn");
				#endregion
			}
			
			/// <summary>
			/// colTyp WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colTyp_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colTyp_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colTyp_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSKZahl.PalHoleTabelleMerk("tskmltyp");
				#endregion
			}
			
			/// <summary>
			/// colErfDat WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colErfDat_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colErfDat_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colErfDat_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSKZahl.PalHoleTabelleMerk("tskmlerfdat");
				#endregion
			}
			
			/// <summary>
			/// colMerkTyp WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colMerkTyp_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colMerkTyp_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colMerkTyp_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSKZahl.PalHoleTabelleMerk("tskmlmerktyp");
				#endregion
			}
			
			/// <summary>
			/// colDat WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDat_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colDat_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDat_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSKZahl.PalHoleTabelleMerk("tskmldat");
				#endregion
			}
			
			/// <summary>
			/// colDM WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDM_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_CaptionDoubleClick:
						this.colDM_OnSAM_CaptionDoubleClick(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_CaptionDoubleClick event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colDM_OnSAM_CaptionDoubleClick(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmTSKZahl.PalHoleTabelleMerk("tskmldm");
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalHoleTabelleLocals
			{
				public SalString strOrder = "";
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class BerechneBruttoLocals
			{
				public SalSqlHandle hSqlBrutto = SalSqlHandle.Null;
				public SalNumber nFetchBrutto = 0;
				public SalBoolean bAlle = false;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalHoleTabelleMerkLocals
			{
				public SalString strSelect = "";
				public SalString strRegNr = "";
				public SalString strOrder = "";
			}
		}
		#endregion
	}
}
