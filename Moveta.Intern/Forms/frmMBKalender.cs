// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmMBKalender : SalFormWindow
	{
		#region Window Variables
		public SalString strSelect = "";
		public SalNumber nDiskIndex = 0;
		public SalNumber nResult = 0;
		public SalNumber nErr = 0;
		public SalNumber nFetch = 0;
		public SalString strReportName = "";
		public SalSqlHandle hSqlAK = SalSqlHandle.Null;
		public SalNumber nProzNr = 0;
		public SalNumber nProzNrAlt = 0;
		public SalString strGerName = "";
		public SalString strGerStrasse = "";
		public SalDateTime dtZustMB = SalDateTime.Null;
		public SalDateTime dtZustVB = SalDateTime.Null;
		public SalDateTime dtDatum = SalDateTime.Null;
		public SalString strAZ = "";
		public SalString strAZb = "";
		public SalString strAZc = "";
		public SalString strAZd = "";
		public SalNumber nDMHF = 0;
		public SalNumber nProzHF = 0;
		public SalNumber nDMMahn = 0;
		public SalNumber nDMMB = 0;
		public SalNumber nDMVB = 0;
		public SalNumber nProzMBVB = 0;
		public SalNumber nDMVA = 0;
		public SalNumber nDMFrueh = 0;
		public SalNumber nZinsHF = 0;
		public SalNumber nZinsMB = 0;
		public SalString strHN1 = "";
		public SalString strHN2 = "";
		public SalString strHS = "";
		public SalString strHO = "";
		public SalDateTime dtHGebDat = SalDateTime.Null;
		public SalDateTime dtHGebDat2 = SalDateTime.Null;
		public SalString strHGebDatText = "";
		public SalString strHGebDat2Text = "";
		public SalString strZeichen = "";
		public SalString strGerOrt = "";
		public SalNumber nArztNr = 0;
		public SalNumber nRechNr = 0;
		public SalNumber nHalterNr = 0;
		public SalDateTime dtZaBuchDat = SalDateTime.Null;
		public SalNumber nZaDM = 0;
		public SalNumber nDM1 = 0;
		public SalNumber nDM2 = 0;
		public SalNumber nDM3 = 0;
		public SalNumber nVSt1 = 0;
		public SalNumber nTAVSt = 0;
		public SalNumber nMwSt1 = 0;
		public SalNumber nMwSt3 = 0;
		public SalNumber nHaben1 = 0;
		public SalNumber nHaben2 = 0;
		public SalNumber nHaben3 = 0;
		public SalNumber nSoll1 = 0;
		public SalNumber nSoll2 = 0;
		public SalNumber nSoll3 = 0;
		public SalString strBuchArt = "";
		public SalString strBuchText = "";
		public SalNumber nBelNr = 0;
		public SalNumber nDiverse = 0;
		public SalNumber nKZZahl = 0;
		public SalNumber nVA0 = 0;
		public SalNumber nPFÜa = 0;
		public SalString strKuerzel = "";
		public SalString strZAn = "";
		public SalNumber nRnd = 0;
		public SalDateTime dtVerjaehr = SalDateTime.Null;
		public SalDateTime dtErinnerung = SalDateTime.Null;
		public SalString lsMemo = "";
		public SalNumber nLfdZins = 0;
		public SalNumber nLfdZinsTit = 0;
		public SalNumber nLfdZinsAlles = 0;
		public SalNumber nHFAlles = 0;
		public SalNumber nVZAlles = 0;
		public SalNumber nUVZAlles = 0;
		public SalNumber nUVZTit = 0;
        public SalNumber nUVZPfue = 0;
        public SalNumber nUVZPfueGK = 0;
        public SalNumber nLfdZinsVZ = 0;
		public SalString strCustomerNumber = "";
		public SalString strExtra = "";
		public SalString strDritt = "";
		public SalString strZusatzkosten = "";
		public SalNumber nZusatzkosten = 0;
		public SalNumber nVorgZinsen = 0;
		public SalDateTime dtRechDat = SalDateTime.Null;
		public SalNumber nPGM = 0;
		public SalString strHLand = "";
		public SalNumber nRechNrSammler = 0;
		public SalString strBABuchtext = "";
		public SalDateTime dtBuchDat = SalDateTime.Null;
        public SalDateTime dtSeitKo = SalDateTime.Null;
        public SalDateTime dtPfueErlass = SalDateTime.Null;
        public SalDateTime dtVAErlass = SalDateTime.Null;
        public SalDateTime dtVAErlassYMD = SalDateTime.Null;
        public SalDateTime dtPfueErlassYMD = SalDateTime.Null;
        public SalString strZustZei = "";
        public SalString strZuName = "";
        public SalString strZuEMail = "";
        public SalString strZuTel = "";
        public SalNumber nZinsHFbisVA = 0;
        public SalNumber nZinsKobisVA = 0;
        public SalNumber nZinsHFbisPfue = 0;
        public SalNumber nZinsKobisPfue = 0;
        #endregion

        #region Constructors/Destructors

        /// <summary>
        /// Default Constructor.
        /// </summary>
        public frmMBKalender()
		{
			// Assign global reference.
			App.frmMBKalender = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmMBKalender CreateWindow(Control owner)
		{
			frmMBKalender frm = new frmMBKalender();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmMBKalender FromHandle(SalWindowHandle handle)
		{
			return ((frmMBKalender)SalWindow.FromHandle(handle, typeof(frmMBKalender)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <param name="strpTyp"></param>
		/// <returns></returns>
		public SalNumber PalBuchMB1(SalString strpTyp)
		{
			#region Local Variables
			SqlLocals.PalBuchMB1Locals locals = new SqlLocals.PalBuchMB1Locals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.strpTyp = strpTyp;

				if (Sys.IDYES == Sal.MessageBox("Soll jetzt Übergabe FiBu für die " + strBuchArt + "-Drucke durchgeführt werden ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					strBuchArt = locals.strpTyp;
					Int.PalLog("Übergabe nach Druck " + strBuchArt);
					if (strBuchArt == "DS" || strBuchArt == "VZ") 
					{
						Int.PalAktion(nArztNr, nHalterNr, SalNumber.Null, "MB", strBuchArt, SalNumber.Null, SalNumber.Null, 0, 0, nProzNr, SalNumber.Null);
					}
					else if (strBuchArt == "HB") 
					{
						Int.PalAktion(nArztNr, nHalterNr, SalNumber.Null, "MB", "HBAnt", SalNumber.Null, SalNumber.Null, 0, 0, nProzNr, SalNumber.Null);
					}
					else
					{
						// 01.07.15 F2442 nach unten verschoben
						// Call SqlImmedSel('SELECT badm1, bastkzarzt1, bastkzabrst1, baktosoll1, baktohaben1,
						//  badm2, baktosoll2, baktohaben2,
						//   badm3, bastkzabrst3, baktosoll3, baktohaben3
						// INTO :frmMBKalender.nDM1,  :frmMBKalender.nVSt1, :frmMBKalender.nMwSt1, :frmMBKalender.nSoll1, :frmMBKalender.nHaben1,
						// :frmMBKalender.nDM2, :frmMBKalender.nSoll2, :frmMBKalender.nHaben2,
						// :frmMBKalender.nDM3, :frmMBKalender.nMwSt3, :frmMBKalender.nSoll3, :frmMBKalender.nHaben3
						// FROM ba WHERE babuart = :frmMBKalender.strBuchArt')
						// Set nVSt1 = nMwSatz[nVSt1]
						// Set nMwSt1 = nMwSatz[nMwSt1]
						// Set nMwSt3 = nMwSatz[nMwSt3]
						// Set nHaben1 = nHaben1 * 10
						// Set nHaben2 = nHaben2 * 10
						// Set nHaben3 = nHaben3 * 10
						// Set nSoll1 = nSoll1 * 10
						// Set nSoll2 = nSoll2 * 10
						// Set nSoll3 = nSoll3 * 10
						nRechNr = 0;
						// 01.07.15 F2442 nach unten verschoben
						// 25.02.15 Ä1046 F2290
						// If PalCheckAuslTA( nArztNr ) = 'EU'
						// Set frmMain.nErloeskonto = nHaben1
						// If frmMain.nErloeskonto = 80100
						// Set frmMain.nErloeskonto = 80200
						// Else If frmMain.nErloeskonto = 80110
						// Set frmMain.nErloeskonto = 80120
						// Else If frmMain.nErloeskonto = 80900
						// Set frmMain.nErloeskonto = 80980
						// Else If frmMain.nErloeskonto = 81200
						// Set frmMain.nErloeskonto = 81210
						// Else If frmMain.nErloeskonto = 81300
						// Set frmMain.nErloeskonto = 81340
						// Else If frmMain.nErloeskonto = 81310
						// Set frmMain.nErloeskonto = 81360
						// Else If frmMain.nErloeskonto = 81700
						// Set frmMain.nErloeskonto = 81710
						// Else If frmMain.nErloeskonto = 82000
						// Set frmMain.nErloeskonto = 82010
						// Else If frmMain.nErloeskonto = 82200
						// Set frmMain.nErloeskonto = 82210
						// Else If frmMain.nErloeskonto = 86000
						// Set frmMain.nErloeskonto = 86010
						// Set nHaben1 = frmMain.nErloeskonto
						// Set frmMain.nErloeskonto = nHaben2
						// If frmMain.nErloeskonto = 80100
						// Set frmMain.nErloeskonto = 80200
						// Else If frmMain.nErloeskonto = 80110
						// Set frmMain.nErloeskonto = 80120
						// Else If frmMain.nErloeskonto = 80900
						// Set frmMain.nErloeskonto = 80980
						// Else If frmMain.nErloeskonto = 81200
						// Set frmMain.nErloeskonto = 81210
						// Else If frmMain.nErloeskonto = 81300
						// Set frmMain.nErloeskonto = 81340
						// Else If frmMain.nErloeskonto = 81310
						// Set frmMain.nErloeskonto = 81360
						// Else If frmMain.nErloeskonto = 81700
						// Set frmMain.nErloeskonto = 81710
						// Else If frmMain.nErloeskonto = 82000
						// Set frmMain.nErloeskonto = 82010
						// Else If frmMain.nErloeskonto = 82200
						// Set frmMain.nErloeskonto = 82210
						// Else If frmMain.nErloeskonto = 86000
						// Set frmMain.nErloeskonto = 86010
						// Set nHaben2 = frmMain.nErloeskonto
						// Set frmMain.nErloeskonto = nHaben3
						// If frmMain.nErloeskonto = 80100
						// Set frmMain.nErloeskonto = 80200
						// Else If frmMain.nErloeskonto = 80110
						// Set frmMain.nErloeskonto = 80120
						// Else If frmMain.nErloeskonto = 80900
						// Set frmMain.nErloeskonto = 80980
						// Else If frmMain.nErloeskonto = 81200
						// Set frmMain.nErloeskonto = 81210
						// Else If frmMain.nErloeskonto = 81300
						// Set frmMain.nErloeskonto = 81340
						// Else If frmMain.nErloeskonto = 81310
						// Set frmMain.nErloeskonto = 81360
						// Else If frmMain.nErloeskonto = 81700
						// Set frmMain.nErloeskonto = 81710
						// Else If frmMain.nErloeskonto = 82000
						// Set frmMain.nErloeskonto = 82010
						// Else If frmMain.nErloeskonto = 82200
						// Set frmMain.nErloeskonto = 82210
						// Else If frmMain.nErloeskonto = 86000
						// Set frmMain.nErloeskonto = 86010
						// Set nHaben3 = frmMain.nErloeskonto

						Int.SqlConnection(ref hSqlAK);
						Int.SqlHandleExec(hSqlAK, @"SELECT  mbkproznr INTO  :frmMBKalender.nProzNr
FROM mbk
WHERE mbktyp = :frmMBKalender.strBuchArt AND mbkuser = :strBNUser
ORDER BY mbkproznr", "MBK holen", ref nErr);
						nFetch = hSqlAK.FetchNext();
						while (nFetch != Sys.FETCH_EOF) 
						{
							// 28.05.21 Ä1962 längere Buchungstexte
							if (strBuchArt == "EV" || strBuchArt == "VZ" || strBuchArt == "Vermögensauskunft") 
							{
								// Aktionsdatei
								Int.PalAktion(nArztNr, nHalterNr, SalNumber.Null, "MB", strBuchArt, SalNumber.Null, SalNumber.Null, 0, 0, nProzNr, SalNumber.Null);
							}
							else
							{

								Int.SqlImmedSel(@"SELECT prdarztnr, prdhalternr
INTO :frmMBKalender.nArztNr, :frmMBKalender.nHalterNr
FROM prd WHERE prdnr = :frmMBKalender.nProzNr");
								// 01.07.15 F2442
								// 11.06.21 Ä1962 + babuchtext
								Int.SqlImmedSel(@"SELECT badm1, bastkzarzt1, bastkzabrst1, baktosoll1, baktohaben1,
 badm2, baktosoll2, baktohaben2,
  badm3, bastkzabrst3, baktosoll3, baktohaben3, babuchtext
INTO :frmMBKalender.nDM1,  :frmMBKalender.nVSt1, :frmMBKalender.nMwSt1, :frmMBKalender.nSoll1, :frmMBKalender.nHaben1,
:frmMBKalender.nDM2, :frmMBKalender.nSoll2, :frmMBKalender.nHaben2,
:frmMBKalender.nDM3, :frmMBKalender.nMwSt3, :frmMBKalender.nSoll3, :frmMBKalender.nHaben3
FROM ba WHERE babuart = :frmMBKalender.strBuchArt");
								// 24.06.20 Ä1892
								if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
								{
									if (nVSt1 == 10) 
									{
										nVSt1 = 1;
									}
									if (nMwSt1 == 10) 
									{
										Var.nMwSt = 1;
									}
									if (nMwSt3 == 10) 
									{
										nMwSt3 = 1;
									}
									// 30.06.20
									nDM1 = (nDM1 * 116 / 119 * 100).Round() / 100;
									nDM3 = (nDM3 * 116 / 119 * 100).Round() / 100;

								}

								nVSt1 = Var.nMwSatz[nVSt1];
								nMwSt1 = Var.nMwSatz[nMwSt1];
								nMwSt3 = Var.nMwSatz[nMwSt3];
								nHaben1 = nHaben1 * 10;
								nHaben2 = nHaben2 * 10;
								nHaben3 = nHaben3 * 10;
								nSoll1 = nSoll1 * 10;
								nSoll2 = nSoll2 * 10;
								nSoll3 = nSoll3 * 10;
								// 03.05.10 OTÄ420
								// 29.07.15 F2466 If PalCheckAuslMwSt( nArztNr ) = 0
								// Set nCheckMwSt = PalCheckAuslMwSt( nArztNr )
								// If nCheckMwSt = 0
								// Set nVSt1 = 0
								// Set nMwSt1 = 0
								// Set nMwSt3 = 0
								if (Int.PalCheckAuslMwSt(nArztNr) == 0) 
								{
									nVSt1 = 0;
									nMwSt1 = 0;
									nMwSt3 = 0;
								}
								else
								{
									Int.SqlImmedSel(@"SELECT bastkzarzt1, bastkzabrst1, bastkzabrst3
INTO :frmMBKalender.nVSt1, :frmMBKalender.nMwSt1, :frmMBKalender.nMwSt3
FROM ba WHERE babuart = :frmMBKalender.strBuchArt");
									nVSt1 = Var.nMwSatz[nVSt1];
									nMwSt1 = Var.nMwSatz[nMwSt1];
									nMwSt3 = Var.nMwSatz[nMwSt3];
									// 24.06.20 Ä1892
									if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
									{
										if (nVSt1 == 10) 
										{
											nVSt1 = 1;
										}
										if (nMwSt1 == 10) 
										{
											nMwSt1 = 1;
										}
										if (nMwSt3 == 10) 
										{
											nMwSt3 = 1;
										}
									}
								}
								if (Int.PalCheckAuslTA(nArztNr) == "EU") 
								{
									App.frmMain.nErloeskonto = nHaben1;
									if (App.frmMain.nErloeskonto == 80100) 
									{
										App.frmMain.nErloeskonto = 80200;
									}
									else if (App.frmMain.nErloeskonto == 80110) 
									{
										App.frmMain.nErloeskonto = 80120;
									}
									else if (App.frmMain.nErloeskonto == 80900) 
									{
										App.frmMain.nErloeskonto = 80980;
									}
									else if (App.frmMain.nErloeskonto == 81200) 
									{
										App.frmMain.nErloeskonto = 81210;
									}
									else if (App.frmMain.nErloeskonto == 81300) 
									{
										App.frmMain.nErloeskonto = 81340;
									}
									else if (App.frmMain.nErloeskonto == 81310) 
									{
										App.frmMain.nErloeskonto = 81360;
									}
									else if (App.frmMain.nErloeskonto == 81700) 
									{
										App.frmMain.nErloeskonto = 81710;
									}
									else if (App.frmMain.nErloeskonto == 82000) 
									{
										App.frmMain.nErloeskonto = 82010;
									}
									else if (App.frmMain.nErloeskonto == 82200) 
									{
										App.frmMain.nErloeskonto = 82210;
									}
									else if (App.frmMain.nErloeskonto == 86000) 
									{
										App.frmMain.nErloeskonto = 86010;
									}
									nHaben1 = App.frmMain.nErloeskonto;

									App.frmMain.nErloeskonto = nHaben2;
									if (App.frmMain.nErloeskonto == 80100) 
									{
										App.frmMain.nErloeskonto = 80200;
									}
									else if (App.frmMain.nErloeskonto == 80110) 
									{
										App.frmMain.nErloeskonto = 80120;
									}
									else if (App.frmMain.nErloeskonto == 80900) 
									{
										App.frmMain.nErloeskonto = 80980;
									}
									else if (App.frmMain.nErloeskonto == 81200) 
									{
										App.frmMain.nErloeskonto = 81210;
									}
									else if (App.frmMain.nErloeskonto == 81300) 
									{
										App.frmMain.nErloeskonto = 81340;
									}
									else if (App.frmMain.nErloeskonto == 81310) 
									{
										App.frmMain.nErloeskonto = 81360;
									}
									else if (App.frmMain.nErloeskonto == 81700) 
									{
										App.frmMain.nErloeskonto = 81710;
									}
									else if (App.frmMain.nErloeskonto == 82000) 
									{
										App.frmMain.nErloeskonto = 82010;
									}
									else if (App.frmMain.nErloeskonto == 82200) 
									{
										App.frmMain.nErloeskonto = 82210;
									}
									else if (App.frmMain.nErloeskonto == 86000) 
									{
										App.frmMain.nErloeskonto = 86010;
									}
									nHaben2 = App.frmMain.nErloeskonto;

									App.frmMain.nErloeskonto = nHaben3;
									if (App.frmMain.nErloeskonto == 80100) 
									{
										App.frmMain.nErloeskonto = 80200;
									}
									else if (App.frmMain.nErloeskonto == 80110) 
									{
										App.frmMain.nErloeskonto = 80120;
									}
									else if (App.frmMain.nErloeskonto == 80900) 
									{
										App.frmMain.nErloeskonto = 80980;
									}
									else if (App.frmMain.nErloeskonto == 81200) 
									{
										App.frmMain.nErloeskonto = 81210;
									}
									else if (App.frmMain.nErloeskonto == 81300) 
									{
										App.frmMain.nErloeskonto = 81340;
									}
									else if (App.frmMain.nErloeskonto == 81310) 
									{
										App.frmMain.nErloeskonto = 81360;
									}
									else if (App.frmMain.nErloeskonto == 81700) 
									{
										App.frmMain.nErloeskonto = 81710;
									}
									else if (App.frmMain.nErloeskonto == 82000) 
									{
										App.frmMain.nErloeskonto = 82010;
									}
									else if (App.frmMain.nErloeskonto == 82200) 
									{
										App.frmMain.nErloeskonto = 82210;
									}
									else if (App.frmMain.nErloeskonto == 86000) 
									{
										App.frmMain.nErloeskonto = 86010;
									}
									nHaben3 = App.frmMain.nErloeskonto;

								}
								if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
								{
									if (nVSt1 == 19) 
									{
										nVSt1 = 16;
									}
									if (nMwSt1 == 19) 
									{
										nMwSt1 = 16;
									}
									if (nMwSt3 == 19) 
									{
										nMwSt3 = 16;
									}
									// 30.06.20 Ä1892
									nSoll1 = Int.PalKontenMwStSenkung(nSoll1);
									nSoll2 = Int.PalKontenMwStSenkung(nSoll2);
									nSoll3 = Int.PalKontenMwStSenkung(nSoll3);
									nHaben1 = Int.PalKontenMwStSenkung(nHaben1);
									nHaben2 = Int.PalKontenMwStSenkung(nHaben2);
									nHaben3 = Int.PalKontenMwStSenkung(nHaben3);
								}

								// 11.06.21 Ä1962
								// Set strBuchText = strBuchArt || ' ' || PalStrNum(nArztNr, 4,0) || '/PR ' || PalStrNum(nProzNr, 5,0)
								strBuchText = (strBABuchtext + " " + Int.PalStrNum(nArztNr, 4, 0) + "/PR " + Int.PalStrNum(nProzNr, 5, 0)).Left(50);
								// 03.04.23 Ä2086
								Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
								dtBuchDat = SalDateTime.Current;
								if (dtBuchDat < Var.dtINIMinBuchDat) 
								{
									dtBuchDat = Var.dtINIMinBuchDat;
								}

								// Aktionsdatei
								Int.PalAktionDatum(dtBuchDat, nArztNr, nHalterNr, SalNumber.Null, "MB", strBuchArt, SalNumber.Null, SalNumber.Null, nDM1 + nDM2 + nDM3, 0, nProzNr, SalNumber.Null, "");

								// MB-Kosten-Protokoll
								Int.SqlImmedX(@"INSERT INTO mk (mktyp, mkarztnr, mkhalternr, mkrechnr, mkbuchdat, mkdma, mkdmb, mkdmc)
VALUES ('A', :frmMBKalender.nArztNr, :frmMBKalender.nHalterNr, :frmMBKalender.nProzNr, :frmMBKalender.dtBuchDat,
:frmMBKalender.nDM1, :frmMBKalender.nDM2, :frmMBKalender.nDM3)");
								// Tierarzt-Buchhaltung (Kontoauszug)
								nTAVSt = (nDM1 * nVSt1 * 100 / (100 + nVSt1)).Round() / 100;
								// 01.11.23 Ä2134 + tkfall
								if (nDM1 != 0) 
								{
									Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkfall)
VALUES (:frmMBKalender.nArztNr, 0, 0, :frmMBKalender.strBuchText,
:frmMBKalender.nHalterNr, :frmMBKalender.nProzNr, :frmMBKalender.nProzNr, :frmMBKalender.dtBuchDat,
:frmMBKalender.nHaben1, 0,0,:frmMBKalender.nTAVSt, 0,0,0,0,0,
:frmMBKalender.nVSt1, 0, 0, :frmMBKalender.nDM1, :frmMBKalender.nDM1, 0, 1)");
								}
								if (nDM2 != 0) 
								{
									Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkfall)
VALUES (:frmMBKalender.nArztNr, 0, 0, :frmMBKalender.strBuchText,
:frmMBKalender.nHalterNr, :frmMBKalender.nProzNr, :frmMBKalender.nProzNr, :frmMBKalender.dtBuchDat,
:frmMBKalender.nHaben2, 0,0,0, 0,0,0,0,0,
0, 0, 0, :frmMBKalender.nDM2, :frmMBKalender.nDM2, 0, 1)");
								}
								// KHK-FiBu
								// a)
								if (nDM1 != 0) 
								{
									nTAVSt = (nDM1 * nMwSt1 * 100 / (100 + nMwSt1)).Round() / 100;
									nDiverse = nDM1 - nTAVSt;
									Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, :frmMBKalender.nSoll1, :frmMBKalender.nHaben1, :frmMBKalender.nProzNr,
:frmMBKalender.dtBuchDat, :frmMBKalender.strBuchText, :frmMBKalender.nDiverse, 7)");
									// 30.06.20 Ä1892
									Var.nMwStSenkung = 17760;
									if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
									{
										Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
									}

									// 12.05.23 SYSDATE -> :frmMBKalender.dtBuchDat
									Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, :frmMBKalender.nSoll1, :nMwStSenkung, :frmMBKalender.nProzNr,
:frmMBKalender.dtBuchDat, :frmMBKalender.strBuchText, :frmMBKalender.nTAVSt, 7)");
								}
								// b)
								if (nDM2 != 0) 
								{
									nDiverse = nDM2;
									Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, :frmMBKalender.nSoll2, :frmMBKalender.nHaben2, :frmMBKalender.nProzNr,
:frmMBKalender.dtBuchDat, :frmMBKalender.strBuchText, :frmMBKalender.nDiverse, 7)");
								}
								// c)
								if (nDM3 != 0) 
								{
									nTAVSt = (nDM3 * nMwSt3 * 100 / (100 + nMwSt3)).Round() / 100;
									nDiverse = nDM3 - nTAVSt;
									Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, :frmMBKalender.nSoll3, :frmMBKalender.nHaben3, :frmMBKalender.nProzNr,
:frmMBKalender.dtBuchDat, :frmMBKalender.strBuchText, :frmMBKalender.nDiverse, 7)");
									// 30.06.20 Ä1892
									Var.nMwStSenkung = 17760;
									if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
									{
										Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
									}

									Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, :frmMBKalender.nSoll3, :nMwStSenkung, :frmMBKalender.nBelNr,
:frmMBKalender.dtBuchDat, :frmMBKalender.strBuchText, :frmMBKalender.nTAVSt, 7)");
								}
								// 999990
								// 11.12.06 Ä48 19% MwSt. NOCH ÄNDERN
								// 01.07.20 Ä1892
								nRechNrSammler = 999989 + App.frmMain.nMwSatzDef;

								Int.SqlIstDa(@" FROM rk
WHERE rkarztnr = :frmMBKalender.nArztNr AND rkhalternr = :frmMBKalender.nHalterNr AND rkrechnr = :frmMBKalender.nRechNrSammler ", ref Var.bExists);
								if (Var.bExists) 
								{
									Int.SqlImmedSel(@"SELECT rkkzzahl INTO :frmMBKalender.nKZZahl FROM rk
WHERE rkarztnr = :frmMBKalender.nArztNr
AND rkhalternr = :frmMBKalender.nHalterNr AND rkrechnr = :frmMBKalender.nRechNrSammler");
									if (nKZZahl > 1) 
									{
										nKZZahl = 0;
									}
									Int.SqlImmedX(@"UPDATE rk SET
rkdeaktiv = NULL,
rkkzzahl = :frmMBKalender.nKZZahl,
rkrechdat = SYSDATE,
rkfaelldat = SYSDATE,
rkdmleis = rkdmleis + :frmMBKalender.nDM1,
rkdmarzn = rkdmarzn + :frmMBKalender.nDM2,
rkmbdmopl = rkmbdmopl + :frmMBKalender.nDM3
WHERE rkarztnr = :frmMBKalender.nArztNr
AND rkhalternr = :frmMBKalender.nHalterNr AND rkrechnr = :frmMBKalender.nRechNrSammler");
								}
								else
								{
									strBuchText = "MB-Sammler " + Var.nMwSatz[App.frmMain.nMwSatzDef].ToString(0) + "%";
									Int.SqlImmedX(@"INSERT INTO RK (RKARZTNR, RKHALTERNR, RKRECHNR,
RKBUCHTEXT, RKRECHDAT, RKFAELLDAT, RKDMLEIS, RKDMARZN,  RKDMMAHN, RKDMZINS, RKMBDMOPL,
RKVERJAEHR,RKZALEIS,RKZAARZN,RKZAMAHN, RKZAZINS, RKMBZAOPL, RKKZZAHL,RKKZ,RKMAHNSTUFE)
VALUES(:frmMBKalender.nArztNr, :frmMBKalender.nHalterNr, :frmMBKalender.nRechNrSammler,
:frmMBKalender.strBuchText, SYSDATE, SYSDATE, :frmMBKalender.nDM1, :frmMBKalender.nDM2,0,0,:frmMBKalender.nDM3,
NULL,0, 0,0,0,0,0,2,0)");
								}
								// 08.05.09
								// Set frmMain.dtHBBuchDat = SalDateCurrent()
								// If nDM1 != 0
								// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext, hbproznr)
								// VALUES(:frmMBKalender.nArztNr, :frmMBKalender.nHalterNr, 999999, SYSDATE, \'MBa\', :frmMain.dtHBBuchDat, :frmMBKalender.nDM1, :frmMBKalender.nSoll1, :frmMBKalender.nHaben1, :frmMBKalender.strBuchText, :frmMBKalender.nProzNr)')
								// If nDM2 != 0
								// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext, hbproznr)
								// VALUES(:frmMBKalender.nArztNr, :frmMBKalender.nHalterNr, 999999, SYSDATE, \'MBb\', :frmMain.dtHBBuchDat, :frmMBKalender.nDM2, :frmMBKalender.nSoll2, :frmMBKalender.nHaben2, :frmMBKalender.strBuchText, :frmMBKalender.nProzNr)')
								// If nDM3 != 0
								// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext, hbproznr)
								// VALUES(:frmMBKalender.nArztNr, :frmMBKalender.nHalterNr, 999999, SYSDATE, \'MBc\', :frmMain.dtHBBuchDat, :frmMBKalender.nDM3, :frmMBKalender.nSoll3, :frmMBKalender.nHaben3, :frmMBKalender.strBuchText, :frmMBKalender.nProzNr)')

							}
							// Lösche Satz in MBK
							Int.SqlImmed(@"DELETE FROM mbk
WHERE mbkproznr = :frmMBKalender.nProzNr AND mbktyp = :frmMBKalender.strBuchArt  AND mbkuser = :strBNUser ");
							// Lösche Termin in PR
							if (strBuchArt == "VB" || strBuchArt == "Vollstreckungsbescheid") 
							{
								Int.SqlImmed(@"UPDATE pr SET prterminvb = NULL
WHERE prnr = :frmMBKalender.nProzNr");
								// 10.09.18 Ä1783 28 -> 49
								dtErinnerung = SalDateTime.Current + 49;
							}
							if (strBuchArt == "VA" || strBuchArt == "Vollstreckungsauftrag") 
							{
								Int.SqlImmed(@"UPDATE pr SET prterminva = NULL
WHERE prnr = :frmMBKalender.nProzNr");
								dtErinnerung = SalDateTime.Current + 100;
							}
							if (strBuchArt == "PFÜ" || strBuchArt == "Pfändungs-Überweisungsbeschluss") 
							{
								dtErinnerung = SalDateTime.Current + 100;
							}
							if (strBuchArt == "VZ") 
							{
								dtErinnerung = SalDateTime.Current + 21;
							}
							if (strBuchArt == "EV" || strBuchArt == "Vermögensauskunft") 
							{
								dtErinnerung = SalDateTime.Current + 21;
							}
							// 17.04.01
							strKuerzel = App.frmMain.strUser.Left(2);
							strZAn = Int.PalZust(nArztNr);
							// Set nRnd =  SalNumberRandom()
							// If nRnd <11000
							// Set strZAn = 'SE'
							// Else If nRnd >=11000 And nRnd < 22000
							// Set strZAn = 'KO'
							// Else
							// Set strZAn = 'ZK'
							lsMemo = "*** Auto-Erinnerung nach " + strBuchArt + "-Erstellung ***" + "/PR " + Int.PalStrNum(nProzNr, 5, 0);
							if (this.nProzNr > 0) 
							{
								Int.SqlImmed("UPDATE z SET zwiedervor=NULL WHERE zproznr = :frmMBKalender.nProzNr");
							}
							// 13.05.14 F2027
							nHalterNr = Int.PalCheckNULL(nHalterNr);

							Int.SqlImmed(@"INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :frmMBKalender.strZAn, :frmMBKalender.nArztNr, :frmMBKalender.nHalterNr, 0,
:frmMBKalender.lsMemo , :frmMBKalender.dtBuchDat, :frmMBKalender.dtErinnerung, 'J', 'TN', NULL, NULL, :frmMBKalender.nProzNr, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
							nFetch = hSqlAK.FetchNext();
						}
						hSqlAK.Disconnect();
					}

				}
				else
				{
					Int.PalLog("Übergabe nach Druck " + strBuchArt + " NEIN !!");
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalPruefeSperre()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.ColorSet(dfSperre, Sys.COLOR_IndexWindowText, Sys.COLOR_White);
				if (Int.PalFormFrei("Übergaben")) 
				{
					dfSperre.Text = "Übergaben erlaubt";
					Sal.ColorSet(dfSperre, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
				}
				else
				{
					dfSperre.Text = "Übergaben gesperrt !";
					Sal.ColorSet(dfSperre, Sys.COLOR_IndexWindow, Sys.COLOR_Red);
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmMBKalender WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMBKalender_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmMBKalender_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Activate:
					this.frmMBKalender_OnSAM_Activate(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmMBKalender_OnSAM_Close(sender, e);
					break;
				
				case Sys.SAM_ReportStart:
					this.frmMBKalender_OnSAM_ReportStart(sender, e);
					break;
				
				case Sys.SAM_ReportFetchInit:
					this.frmMBKalender_OnSAM_ReportFetchInit(sender, e);
					break;
				
				case Sys.SAM_ReportFetchNext:
					this.frmMBKalender_OnSAM_ReportFetchNext(sender, e);
					break;
				
				case Sys.SAM_ReportFinish:
					this.frmMBKalender_OnSAM_ReportFinish(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMBKalender_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.lbMBKalenderAktionen.SetWindowColor(Sys.COLOR_IndexWindow, 0xefefff);
			this.lbMBKalenderAktionen.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_DarkRed);
			#endregion
		}
		
		/// <summary>
		/// SAM_Activate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMBKalender_OnSAM_Activate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			//FC:FINAL: check if from still exists
			if(App.frmMBKalender == null)
            {
               return;
            }
			this.PalPruefeSperre();
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMBKalender_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.EnableWindow(App.frmMain.pbMB);
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportStart event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMBKalender_OnSAM_ReportStart(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 30.04.03
			// If (hWndfrmReport)
			// Call SalBringWindowToTop(hWndfrmReport)
			// 27.10.10
			App.frmReport.SendMessage(Const.WM_SYSCOMMAND, Const.SC_MAXIMIZE, 0);

			if (this.strReportName == "VB") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Terminliste VBs", "Die VBs", "werden gedruckt", "Vollstreckungsbescheide");
				Int.SqlConnection(ref this.hSqlAK);
			}
			if (this.strReportName == "VA") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Vollstreckungsaufträge", "Die VAs", "werden gedruckt", "Vollstreckungsaufträge");
				Int.SqlConnection(ref this.hSqlAK);
			}
			if (this.strReportName == "PFÜ") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "PFÜs", "Die PFÜs", "werden gedruckt", "PFÜs");
				Int.SqlConnection(ref this.hSqlAK);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFetchInit event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMBKalender_OnSAM_ReportFetchInit(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 29.02.08 F342
			this.nProzNrAlt = 0;

			if (this.strReportName == "VB") 
			{
				if (!(this.hSqlAK.Prepare(@"
SELECT mbkproznr, mbkzustmb, mbkhname1, mbkhname2, mbkhstr, mbkhort
INTO :nProzNr, :dtZustMB, :strHN1, :strHN2, :strHS, :strHO
FROM mbk
WHERE mbktyp = :strReportName AND mbkuser = :strBNUser
ORDER BY mbkproznr"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlAK.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlAK.Commit();
						e.Return = true;
						return;
					}
				}
			}
			if (this.strReportName == "VA") 
			{
				// 19.06.08 + prarztnr, prhalternr
				if (!(this.hSqlAK.Prepare(@"
SELECT mbkproznr, mbkgername, mbkzustmb, mbkzustvb, mbkaz, mbkdmhf, mbkprozhf, mbkdmmahn, mbkdmmb, mbkdmvb,
mbkprozmbvb, mbkdmva, mbkdmfrueh, mbkzinshf, mbkzinsmb,
mbkhname1, mbkhname2, mbkhstr, mbkhort, zabuchdat, prarztnr, prhalternr, sum(zadm)
INTO :nProzNr, :strGerName, :dtZustMB, :dtZustVB, :strAZ, :nDMHF, :nProzHF, :nDMMahn, :nDMMB, :nDMVB,
:nProzMBVB, :nDMVA, :nDMFrueh, :nZinsHF, :nZinsMB,
:strHN1, :strHN2, :strHS, :strHO, :dtZaBuchDat, :nArztNr, :nHalterNr, :nZaDM
FROM mbk, za, pr
WHERE mbktyp = :strReportName AND mbkuser = :strBNUser  AND mbkproznr = zaproznr (+)
AND mbkproznr=prnr
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlAK.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlAK.Commit();
						e.Return = true;
						return;
					}
				}
			}
			if (this.strReportName == "PFÜ") 
			{
				// 23.02.10 OTF366 + prarztnr, prhalternr
				if (!(this.hSqlAK.Prepare(@"
SELECT mbkproznr, mbkgername, mbkzustmb, mbkzustvb, mbkaz, mbkdmhf, mbkprozhf, mbkdmmahn, mbkdmmb, mbkdmvb,
mbkprozmbvb, mbkdmva, mbkdmfrueh, mbkzinshf, mbkzinsmb,
mbkhname1, mbkhname2, mbkhstr, mbkhort, zabuchdat, sum(zadm)
INTO :nProzNr, :strGerName, :dtZustMB, :dtZustVB, :strAZ, :nDMHF, :nProzHF, :nDMMahn, :nDMMB, :nDMVB,
:nProzMBVB, :nDMVA, :nDMFrueh, :nZinsHF, :nZinsMB,
:strHN1, :strHN2, :strHS, :strHO, :dtZaBuchDat, :nZaDM
FROM mbk, za, pr
WHERE mbktyp = :strReportName AND mbkuser = :strBNUser  AND mbkproznr = zaproznr (+)
AND mbkproznr=prnr
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlAK.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlAK.Commit();
						e.Return = true;
						return;
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFetchNext event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMBKalender_OnSAM_ReportFetchNext(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.strReportName == "VA" || this.strReportName == "PFÜ") 
			{
				if (this.hSqlAK.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						this.strGerOrt = this.strGerName.Mid(this.strGerName.Scan(" ") + 1, 255);
						// 15.02.10 OTF366
						this.strCustomerNumber = Int.PalDateToStrJJJJMMTThhmmss(SalDateTime.Current).Mid(5, 9);

						Int.SqlImmedSel(@"SELECT prdarztnr, prdrechnr, prdhalternr
INTO :frmMBKalender.nArztNr, :frmMBKalender.nRechNr, :frmMBKalender.nHalterNr
FROM prd WHERE prdnr = :frmMBKalender.nProzNr");
						// 29.08.06 Aufgabe 7 +  || '/ ' || PalZust(nArztNr)
						this.strZeichen = Int.PalStrNum(this.nArztNr, 4, 0) + "/" + Int.PalStrNum(this.nRechNr, 6, 0) + " Ha" + Int.PalStrNum(this.nHalterNr, 5, 0) + " PR" + Int.PalStrNum(this.nProzNr, 5, 0) + "/ " + Int.PalZust(this.nArztNr);
						// 29.02.08 F342 If nProzNr != nProzNrAlt
						if (this.nProzNr != this.nProzNrAlt) 
						{
							// 18.12.07 Ä164
							this.nLfdZins = 0;
							if (Int.PalFA(this.nProzNr, this.nArztNr, this.nHalterNr, "", SalNumber.Null, SalDateTime.Current, true, false, true)) 
							{
								Int.SqlImmedSel("SELECT sum(fazinsdm) FROM fa INTO :frmMBKalender.nLfdZins WHERE faproznr=:frmMBKalender.nProzNr AND fauser = :strBNUser");
							}
							this.nProzNrAlt = this.nProzNr;
						}
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			else
			{
				if (this.hSqlAK.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFinish event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMBKalender_OnSAM_ReportFinish(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlAK.Disconnect();
			this.PalBuchMB1(this.strReportName);
			#endregion
		}
		
		/// <summary>
		/// lbMBKalenderAktionen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbMBKalenderAktionen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.lbMBKalenderAktionen_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.lbMBKalenderAktionen_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbMBKalenderAktionen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			this.nDiskIndex = this.lbMBKalenderAktionen.GetListSelectedIndex();
			this.strSelect = this.lbMBKalenderAktionen.GetListItemText(this.nDiskIndex);
			if (this.strSelect == "1 - Pflege") 
			{
				frmMB.CreateWindow(this);
			}
			else if (this.strSelect == "2 - Vorschlag erstellen") 
			{
				this.nResult = Sal.MessageBox(@"Der alte MB-Kalendervorschlag wird gelöscht!
Weiter ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconExclamation));
				if (this.nResult == Sys.IDYES) 
				{
					Sal.WaitCursor(false);
					dlgMBKalenderVor.ModalDialog(this);
				}
			}
			else if (this.strSelect == "3 - Vorschlag ändern") 
			{
				frmMBKalenderVor.CreateWindow(this);
			}
			// Else If strSelect = '4a - EDA-Datei für VBs erstellen'
			// Call SalCreateWindow( frmEDA,hWndForm, 'VB' )
			// Else If strSelect = '4b - EDA-Datei für MB-Neuzustellungen erstellen'
			// Call SalCreateWindow( frmEDA,hWndForm, 'MBNeu' )
			// Else If strSelect = '4c - EDA-Datei für VB-Neuzustellungen erstellen'
			// Call SalCreateWindow( frmEDA,hWndForm, 'VBNeu' )
			else if (this.strSelect == "4 - Drucken") 
			{
				if (!(Int.PalFormFrei("Übergaben"))) 
				{
					Sal.MessageBox("Abschluß läuft. Nicht erlaubt !", "Achtung", Sys.MB_Ok);
				}
				else
				{
					if (Sys.IDYES == Sal.MessageBox("Wurde die EDA-Datei bereits versandt?", "EDA?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
					{
						dlgMBKalenderVorDruck.ModalDialog(this);
					}
				}
			}
			else if (this.strSelect == "4e - Einzeldrucke") 
			{
				if (!(Int.PalFormFrei("Übergaben"))) 
				{
					Sal.MessageBox("Abschluß läuft. Nicht erlaubt !", "Achtung", Sys.MB_Ok);
				}
				else
				{
					frmMBKEinzeldruck.CreateWindow(this, "");
				}
			}
			else if (this.strSelect == "5 - MB-Kosten-Protokoll a+c") 
			{
				this.SetStatusBarText("Erstelle Protokoll -  Bitte warten !");
				App.frmMain.strLA = "A";
				// Set frmMain.strReportName = 'MBKac'
				// Set frmMain.nErr = 1
				// Call PalReport( frmMain,'MBK.QRP',
				// ':frmMain.strLA, :frmMain.nTANr, :frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat,
				// :frmMain.nDMa, :frmMain.nDMb, :frmMain.nDMc,
				// :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTHN1, :frmMain.strabc',
				// 'Typ, Arzt, Halter, Rechnung, BuchDat, DMa, DMb, DMc, AN1, AN2, HN1, ABC',nErr)
				// LL
				App.frmMain.strabc = "a+c";
				App.frmMain.dtDatum = SalDateTime.Current;
				dlgLlDruck.ModalDialog(App.frmMain, "MB-Kosten.lst", "");
				Sal.WaitCursor(false);
			}
			else if (this.strSelect == "6 - MB-Kosten-Protokoll b") 
			{
				this.SetStatusBarText("Erstelle Protokoll -  Bitte warten !");
				App.frmMain.strLA = "A";
				// Set frmMain.nErr = 1
				// Set frmMain.strReportName = 'MBKb'
				// Call PalReport( frmMain,'MBK.QRP',
				// ':frmMain.strLA, :frmMain.nTANr,:frmMain.nTHNr, :frmMain.nRechNr, :frmMain.dtBuchDat,
				// :frmMain.nDMa, :frmMain.nDMb, :frmMain.nDMc,
				// :frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTHN1, :frmMain.strabc',
				// 'Typ, Arzt, Halter, Rechnung, BuchDat, DMa, DMb, DMc, AN1, AN2, HN1, ABC',nErr)
				// LL
				App.frmMain.strabc = "b";
				App.frmMain.dtDatum = SalDateTime.Current;
				dlgLlDruck.ModalDialog(App.frmMain, "MB-Kosten.lst", "");
				Sal.WaitCursor(false);
			}
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbMBKalenderAktionen_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.lbMBKalenderAktionen.AddListItem("1 - Pflege");
			this.lbMBKalenderAktionen.AddListItem("2 - Vorschlag erstellen");
			this.lbMBKalenderAktionen.AddListItem("3 - Vorschlag ändern");
			// Call SalListAdd( lbMBKalenderAktionen, '4a - EDA-Datei für VBs erstellen' )
			// Call SalListAdd( lbMBKalenderAktionen, '4b - EDA-Datei für MB-Neuzustellungen erstellen' )
			this.lbMBKalenderAktionen.AddListItem("4 - Drucken");
			this.lbMBKalenderAktionen.AddListItem("4e - Einzeldrucke");
			this.lbMBKalenderAktionen.AddListItem("5 - MB-Kosten-Protokoll a+c");
			this.lbMBKalenderAktionen.AddListItem("6 - MB-Kosten-Protokoll b");
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalBuchMB1Locals
			{
				public SalString strpTyp = "";
			}
		}
		#endregion
	}
}
