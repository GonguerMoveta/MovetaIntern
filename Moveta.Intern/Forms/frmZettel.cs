// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// Zettelkasten
	/// </summary>
	/// <param name="strHerkunft"></param>
	/// <param name="nArztNr"></param>
	/// <param name="nHalterNr"></param>
	/// <param name="nRechNr"></param>
	public partial class frmZettel : SalFormWindow
	{
		#region Window Parameters
		public SalString strHerkunft;
		public SalNumber nArztNr;
		public SalNumber nHalterNr;
		public SalNumber nRechNr;
		#endregion
		
		#region Window Variables
		public SalSqlHandle hSqlZettel = SalSqlHandle.Null;
		public SalSqlHandle hSqlZettelUpd = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalNumber nFetchZettel = 0;
		public SalString strN = "";
		public SalString strStern = "";
		public SalBoolean bZettel = false;
		public SalString strUser = "";
		public SalString strErledigt = "";
		public SalNumber nArztNr2 = 0;
		public SalString lsBemerk = "";
		public SalString strArt = "";
		public SalNumber nZettelOP = 0;
		public SalNumber nPArztNr = 0;
		public SalNumber nPHalterNr = 0;
		public SalNumber nPRechNr = 0;
		public SalNumber n9Mahnstufe = 0;
		public SalNumber nRestDM = 0;
		public SalDateTime dtRechDat = SalDateTime.Null;
		public SalBoolean bEditDisabled = false;
		public SalBoolean bWvExist = false;
		public SalNumber nColor = 0;
		public SalString strRA0 = "";
		public SalString strRA1 = "";
		public SalString strRA2 = "";
		public SalString strRA3 = "";
		public SalString strRA4 = "";
		public SalString strVon = "";
		public SalDateTime dtSperrDatum = SalDateTime.Null;
		public SalString strEMail = "";
		public SalString strBetreff = "";
		public SalString lsRTF = "";
		public SalString lsBody = "";
		public SalNumber nZCount = 0;
		public SalNumber nProzNr = 0;
		public SalNumber nPArztNr2 = 0;
		public SalSqlHandle hSqlZa = SalSqlHandle.Null;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmZettel(SalString strHerkunft, SalNumber nArztNr, SalNumber nHalterNr, SalNumber nRechNr)
		{
			// Assign global reference.
			App.frmZettel = this;
			// Window Parameters initialization.
			this.strHerkunft = strHerkunft;
			this.nArztNr = nArztNr;
			this.nHalterNr = nHalterNr;
			this.nRechNr = nRechNr;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmZettel CreateWindow(Control owner, SalString strHerkunft, SalNumber nArztNr, SalNumber nHalterNr, SalNumber nRechNr)
		{
			frmZettel frm = new frmZettel(strHerkunft, nArztNr, nHalterNr, nRechNr);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmZettel FromHandle(SalWindowHandle handle)
		{
			return ((frmZettel)SalWindow.FromHandle(handle, typeof(frmZettel)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalDisableEdit()
		{
			#region Actions
			using (new SalContext(this))
			{
				bEditDisabled = true;
				Sal.DisableWindowAndLabel(dfArztNr);
				Sal.DisableWindowAndLabel(dfHalterNr);
				Sal.DisableWindowAndLabel(dfRechNr);
				Sal.DisableWindowAndLabel(rbZM);
				Sal.DisableWindowAndLabel(rbTN);
				Sal.DisableWindowAndLabel(rbHS);
				Sal.DisableWindowAndLabel(rbRA);
				Sal.DisableWindowAndLabel(rbMB);
				Sal.DisableWindowAndLabel(rbBR);
				Sal.DisableWindowAndLabel(cmbZM);
				Sal.DisableWindowAndLabel(cmbZahlArt);
				Sal.DisableWindowAndLabel(dfZMDM);
				// Call SalDisableWindowAndLabel(mlBemerk)
				// Call SalDisableWindowAndLabel(dfWv)
				Sal.DisableWindowAndLabel(dfVon);
				Sal.DisableWindowAndLabel(cmbAn);
				Sal.DisableWindowAndLabel(dfDatum);
				pblt.DisableWindowAndLabel();
				pbM.DisableWindowAndLabel();
				pbSch.DisableWindowAndLabel();
				pbTel.DisableWindowAndLabel();
				pbruftan.DisableWindowAndLabel();
				pbTextPaste.DisableWindowAndLabel();
				Sal.ColorSet(mlBemerk, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalEnableEdit()
		{
			#region Actions
			using (new SalContext(this))
			{
				bEditDisabled = false;
				Sal.EnableWindowAndLabel(dfArztNr);
				Sal.EnableWindowAndLabel(dfHalterNr);
				Sal.EnableWindowAndLabel(dfRechNr);
				Sal.EnableWindowAndLabel(rbZM);
				Sal.EnableWindowAndLabel(rbTN);
				Sal.EnableWindowAndLabel(rbHS);
				Sal.EnableWindowAndLabel(rbRA);
				Sal.EnableWindowAndLabel(rbMB);
				Sal.DisableWindowAndLabel(rbBR);
				if (Var.strBNAbtlg == "RA") 
				{
					Sal.DisableWindowAndLabel(rbMB);
				}
				else
				{
					Sal.DisableWindowAndLabel(rbRA);
				}
				Sal.EnableWindowAndLabel(cmbZM);
				Sal.EnableWindowAndLabel(cmbZahlArt);
				Sal.EnableWindowAndLabel(dfZMDM);
				// Call SalEnableWindowAndLabel(mlBemerk)
				// Call SalEnableWindowAndLabel(dfWv)
				Sal.EnableWindowAndLabel(dfVon);
				Sal.EnableWindowAndLabel(cmbAn);
				Sal.EnableWindowAndLabel(dfDatum);
				pblt.EnableWindowAndLabel();
				pbM.EnableWindowAndLabel();
				pbSch.EnableWindowAndLabel();
				pbTel.EnableWindowAndLabel();
				pbruftan.EnableWindowAndLabel();
				pbTextPaste.EnableWindowAndLabel();
				Sal.ColorSet(mlBemerk, Sys.COLOR_IndexWindow, Sys.COLOR_White);
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmZettel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmZettel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_CreateComplete:
					this.frmZettel_OnSAM_CreateComplete(sender, e);
					break;
				
				// On SAM_Close
				
				// Call SqlDisconnect( hSqlZa )
				
				// Call SqlDisconnect(hSqlZettel)
				
				// Call SqlDisconnect(hSqlZettelUpd)
				
				// Call SalEnableWindow(frmMain.pbZettel )
				
				// Call frmMain.PalCountZettel()
				
				case Sys.SAM_Destroy:
					this.frmZettel_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmZettel_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			// 26.07.16 F2699
			Var.bfrmZettel = true;

			// 13.03.01
			// Set nColor = SalColorGet( hWndForm, COLOR_IndexWindow )
			// Call SalColorSet( pic1, COLOR_IndexWindow, nColor )

			// 18.01.11 OTÃ„498
			Sal.DisableWindow(this.rbZI);

			Sal.DisableWindow(App.frmMain.pbZettel);
			Int.SqlConnection(ref this.hSqlZettel);
			Int.SqlConnection(ref this.hSqlZettelUpd);
			Int.SqlConnection(ref this.hSqlZa);
			// 28.11.05
			if (this.cmbAn.ClearList()) 
			{
				if (this.hSqlZettel.PrepareAndExecute("SELECT bnzei INTO :frmZettel.strN FROM bn order by bnzei")) 
				{
					while (this.hSqlZettel.FetchNext(ref this.nFetchZettel)) 
					{
						this.cmbAn.AddListItem(this.strN);
						this.cmbWAn.AddListItem(this.strN);
					}
					this.hSqlZettel.Commit();
				}
				this.cmbAn.AddListItem("A");
				this.cmbAn.AddListItem("H");
				this.cmbAn.AddListItem("R");
			}
			if (this.strHerkunft == "frmRgSuchen") 
			{
				this.dfVon.Text = Var.strBNZei;
				this.dfArztNr.Number = this.nArztNr;
				Int.SqlImmedSel("SELECT ANR2 INTO :frmZettel.nArztNr2 FROM A WHERE AARZTNR = :frmZettel.nArztNr");
				this.dfHalterNr.Number = this.nHalterNr;
				this.dfRechNr.Clear();
				this.strN = "N";
				this.strSelect = @"SELECT zvon,zan,zarztnr,zhalternr,zrechnr,zproznr,zbemerk,zdatum,zwiedervor,
zerledigt,ROWID, zart FROM Z
INTO :tblZettel.colsVon, :tblZettel.colsAn, :tblZettel.colnArztNr, :tblZettel.colnHalterNr,
:tblZettel.colnRechNr, :tblZettel.colnProzNr, :tblZettel.collsBemerk, :tblZettel.coldtDatum,
:tblZettel.coldtWv, :tblZettel.colsErl, :tblZettel.colsROWID, :tblZettel.colsArt WHERE ";
				this.strSelect = this.strSelect + Int.PalArztNr("z", this.nArztNr, this.nArztNr2);
				if (this.nHalterNr != 0) 
				{
					this.strSelect = this.strSelect + "AND zhalternr = :nHalterNr AND zdeaktiv IS NULL ";
				}
				else
				{
					// 13.05.14 (zhalternr IS NULL OR zhalternr = 0) -> zhalternr = 0
					this.strSelect = this.strSelect + " AND zhalternr = 0 AND zdeaktiv IS NULL  ";
				}
				this.strSelect = this.strSelect + " ORDER BY zdatum DESC, zerfdat DESC";
				if (this.tblZettel.Populate(this.hSqlZettel, this.strSelect, Sys.TBL_FillNormal)) 
				{
				}
			}
			else if (this.strHerkunft == "frmZahlHalter" || this.strHerkunft == "frmHalter" || this.strHerkunft == "frmRechAusb") 
			{
				this.dfVon.Text = Var.strBNZei;
				this.dfArztNr.Number = this.nArztNr;
				this.dfHalterNr.Number = this.nHalterNr;
				this.dfRechNr.Number = this.nRechNr;
				this.strN = "N";
				this.strSelect = @"SELECT zvon,zan,zarztnr,zhalternr,zrechnr, zproznr,zbemerk,zdatum,zwiedervor,
zerledigt,ROWID, zart FROM Z
INTO :tblZettel.colsVon, :tblZettel.colsAn, :tblZettel.colnArztNr, :tblZettel.colnHalterNr,
:tblZettel.colnRechNr, :tblZettel.colnProzNr, :tblZettel.collsBemerk, :tblZettel.coldtDatum,
:tblZettel.coldtWv, :tblZettel.colsErl, :tblZettel.colsROWID, :tblZettel.colsArt WHERE ";
				this.strSelect = this.strSelect + "zarztnr = :nArztNr ";
				if (this.nHalterNr != 0) 
				{
					this.strSelect = this.strSelect + "AND zhalternr = :nHalterNr ";
					if (this.nRechNr != 0) 
					{
						this.strSelect = this.strSelect + "AND zrechnr = :nRechNr ";
					}
				}
				else
				{
					if (this.nRechNr != 0) 
					{
						this.strSelect = this.strSelect + "AND zrechnr = :nRechNr ";
					}
				}
				this.strSelect = this.strSelect + " AND zdeaktiv IS NULL  ORDER BY zdatum DESC, zerfdat DESC";
				this.tblZettel.Populate(this.hSqlZettel, this.strSelect, Sys.TBL_FillNormal);
			}
			else if (this.strHerkunft == "frmMBErf")  // Achtung : nRechNr ist 2. ArztNr !!!
			{
				this.dfVon.Text = Var.strBNZei;
				this.dfArztNr.Number = this.nArztNr;
				this.dfHalterNr.Number = this.nHalterNr;
				this.dfRechNr.Number = this.nRechNr;
				this.strN = "N";
				this.strSelect = @"SELECT zvon,zan,zarztnr,zhalternr,zrechnr, zproznr,zbemerk,zdatum,zwiedervor,
zerledigt,ROWID, zart FROM Z
INTO :tblZettel.colsVon, :tblZettel.colsAn, :tblZettel.colnArztNr, :tblZettel.colnHalterNr,
:tblZettel.colnRechNr, :tblZettel.colnProzNr, :tblZettel.collsBemerk, :tblZettel.coldtDatum,
:tblZettel.coldtWv, :tblZettel.colsErl, :tblZettel.colsROWID, :tblZettel.colsArt WHERE ";
				if (this.nRechNr != 0)  // Gem. praxis
				{
					this.strSelect = this.strSelect + "zarztnr IN (:nArztNr, :nRechNr) ";
				}
				else
				{
					this.strSelect = this.strSelect + "zarztnr = :nArztNr ";
				}
				if (this.nHalterNr != 0) 
				{
					this.strSelect = this.strSelect + "AND zhalternr = :nHalterNr ";
				}
				this.strSelect = this.strSelect + " AND zdeaktiv IS NULL  ORDER BY zdatum DESC, zerfdat DESC";
				this.tblZettel.Populate(this.hSqlZettel, this.strSelect, Sys.TBL_FillNormal);
			}
			else if (this.strHerkunft == "frmMain") 
			{
				this.strUser = Var.strBNZei;
				this.strN = "N";
				this.strStern = "*";
				// 29.11.05
				Int.PalCheckLeseberechtigung();
				Var.strBNLeseberechtigung = "\'" + this.strUser + "\'" + Var.strBNLeseberechtigung;

				// 04.08.10 OTÃ„447 + zerfdat DESC
				this.strSelect = @"SELECT zvon,zan,zarztnr,zhalternr,zrechnr, zproznr,zbemerk,zdatum,zwiedervor,
zerledigt,ROWID, zart FROM Z
INTO :tblZettel.colsVon, :tblZettel.colsAn, :tblZettel.colnArztNr, :tblZettel.colnHalterNr,
:tblZettel.colnRechNr, :tblZettel.colnProzNr, :tblZettel.collsBemerk, :tblZettel.coldtDatum,
:tblZettel.coldtWv, :tblZettel.colsErl, :tblZettel.colsROWID, :tblZettel.colsArt
WHERE (zan IN (" + Var.strBNLeseberechtigung + @") OR zan=:strStern) AND zerledigt = 'N' AND zdeaktiv IS NULL
order by zdatum DESC, zerfdat DESC";
				if (this.tblZettel.Populate(this.hSqlZettel, this.strSelect, Sys.TBL_FillNormal)) 
				{
				}
			}
			else if (this.strHerkunft == "frmDiskAbr" || this.strHerkunft == "frmManAbr") 
			{
				this.dfArztNr.Number = this.nArztNr;
				Int.SqlImmedSel("SELECT ANR2 INTO :frmZettel.nArztNr2 FROM A WHERE AARZTNR = :frmZettel.nArztNr");
				this.dfHalterNr.Clear();
				this.dfRechNr.Clear();
				this.strSelect = @"SELECT zvon,zan,zarztnr,zhalternr,zrechnr, zproznr,zbemerk,zdatum,zwiedervor,
zerledigt,ROWID, zart FROM Z
INTO :tblZettel.colsVon, :tblZettel.colsAn, :tblZettel.colnArztNr, :tblZettel.colnHalterNr,
:tblZettel.colnRechNr, :tblZettel.colnProzNr, :tblZettel.collsBemerk, :tblZettel.coldtDatum,
:tblZettel.coldtWv, :tblZettel.colsErl, :tblZettel.colsROWID, :tblZettel.colsArt WHERE ";
				this.strSelect = this.strSelect + "zarztnr IN (:frmZettel.nArztNr, :frmZettel.nArztNr2) ";
				this.strSelect = this.strSelect + "AND zart = \'RA\' AND zdeaktiv IS NULL   ORDER BY zdatum DESC, zerfdat DESC";
				this.tblZettel.Populate(this.hSqlZettel, this.strSelect, Sys.TBL_FillNormal);
			}
			this.dfVon.Clear();
			this.cmbAn.Clear();
			this.dfArztNr.Clear();
			this.dfHalterNr.Clear();
			this.dfRechNr.Clear();
			this.mlBemerk.Clear();
			this.dfRA.Clear();
			this.dfROWID.Clear();
			this.dfVon.Text = Var.strBNZei;
			// 27.04.06
			if (Var.strBNAbtlg != "MA") 
			{
				Sal.DisableWindowAndLabel(this.rbMB);
			}
			if (Var.strBNAbtlg != "RA") 
			{
				Sal.DisableWindowAndLabel(this.rbRA);
			}
			// If dfVon='ZI' Or dfVon='SY' Or dfVon='FR' Or dfVon='ST'
			// Call SalDisableWindowAndLabel(rbMB)
			// Else
			// Call SalDisableWindowAndLabel(rbRA)
			// 07.01.13 F1494
			if ((this.nHalterNr == SalNumber.Null || this.nHalterNr == 0) && this.nRechNr != 0 && this.nRechNr != SalNumber.Null && this.nRechNr < 999990) 
			{
				Int.SqlImmedSel("SELECT rkhalternr INTO :frmZettel.nHalterNr FROM rk WHERE rkrechnr=:frmZettel.nRechNr AND rkarztnr=:frmZettel.nArztNr");
			}

			this.cmbAn.Text = this.dfVon.Text;
			if (this.nArztNr != 0) 
			{
				this.dfArztNr.Number = this.nArztNr;
			}
			if (this.nHalterNr != 0) 
			{
				this.dfHalterNr.Number = this.nHalterNr;
			}
			if (this.nRechNr != 0) 
			{
				this.dfRechNr.Number = this.nRechNr;
			}
			this.dfDatum.Value = SalDateTime.Current;
			// Set dfWv = dfDatum+30
			this.cbErledigt.Checked = false;
			if (!(this.dfArztNr.IsEmpty())) 
			{
				Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hland || ' ' || hort,hname2,hstr, hsperrdatum
into :frmZettel.dfSHalterName, :frmZettel.dfSHalterOrt, :frmZettel.dfSHalterName2, :frmZettel.dfSHalterStr, :frmZettel.dtSperrDatum
from H where hhalternr=:frmZettel.dfHalterNr and harztnr=:frmZettel.dfArztNr AND hdeaktiv IS NULL ");
				// 03.04.07 Ã„102
				if (this.dtSperrDatum != SalDateTime.Null) 
				{
					this.dfSperrDatum.Text = "Postausgang gesperrt seit " + Int.PalDateToStrJJJJMMTT(this.dtSperrDatum).Mid(6, 2) + "." + Int.PalDateToStrJJJJMMTT(this.dtSperrDatum).Mid(4, 2) + "." + Int.PalDateToStrJJJJMMTT(this.dtSperrDatum).Mid(0, 4);
					this.dfSperrDatum.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Red);
					this.dfSperrDatum.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_White);
				}
				else
				{
					this.dfSperrDatum.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
					this.dfSperrDatum.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_Red);
				}

			}
			// 08.03.16
			// Call PalEnableEdit()
			this.pbNeu.PostMessage(Sys.SAM_Click, 0, 0);

			this.rbTN.Checked = true;
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmZettel_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlZa.Disconnect();
			this.hSqlZettel.Disconnect();
			this.hSqlZettelUpd.Disconnect();
			Sal.EnableWindow(App.frmMain.pbZettel);
			// 26.07.16 F2699
			Var.bfrmZettel = false;

			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 01.02.16 Ã„1327
			this.cmbProzNr.ClearList();
			this.cmbProzNr.Text = "";
			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn,hland || ' ' || hort,hname2,hstr, hsperrdatum
into :frmZettel.dfSHalterName, :frmZettel.dfSHalterOrt, :frmZettel.dfSHalterName2, :frmZettel.dfSHalterStr, :frmZettel.dtSperrDatum
from H where hhalternr=:frmZettel.dfHalterNr and harztnr=:frmZettel.dfArztNr AND hdeaktiv IS NULL ");
			// 02.04.07 Ã„102
			if (this.dtSperrDatum != SalDateTime.Null) 
			{
				Sal.MessageBox("Der Postausgang an den Halter ist gesperrt seit " + Int.PalDateToStrJJJJMMTT(this.dtSperrDatum).Mid(6, 2) + "." + Int.PalDateToStrJJJJMMTT(this.dtSperrDatum).Mid(4, 2) + "." + Int.PalDateToStrJJJJMMTT(this.dtSperrDatum).Mid(
						0, 4), "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}

			// 01.02.16 Ã„1327
			this.cmbProzNr.ClearList();
			this.cmbProzNr.Text = "";
			#endregion
		}
		
		/// <summary>
		/// dfRechNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRechNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 17.01.18 Ã„1684 raus
			// Call SqlImmedSel('SELECT rkmahnsperr INTO :frmZettel.dfMSperren
			// FROM rk WHERE rkarztnr = :frmZettel.dfArztNr
			// AND rkhalternr = :frmZettel.dfHalterNr
			// AND rkrechnr = :frmZettel.dfRechNr')
			// 01.02.16 Ã„1327
			this.nZCount = 0;
			Int.SqlImmedSel("SELECT anr2 INTO :frmZettel.nPArztNr2 FROM a WHERE aarztnr = :frmZettel.dfArztNr");
			// Set nZCount = SqlGetAnzahl( 'FROM pr WHERE prarztnr IN ( :frmZettel.dfArztNr, :frmZettel.nArztNr2 ) AND prhalternr = :frmZettel.dfHalterNr AND prnr NOT IN (SELECT mbnr FROM mb)')
			// If nZCount > 0
			// Else
			// Call SalDisableWindowAndLabel(cmbProzNr)
			if (this.cmbProzNr.Text == "") 
			{
				this.cmbProzNr.ClearList();
				this.cmbProzNr.Text = "";
				this.cmbProzNr.PopulateList(this.hSqlZa, "SELECT DISTINCT prdnr FROM prd WHERE prdarztnr IN ( :frmZettel.dfArztNr, :frmZettel.nArztNr2 ) AND prdhalternr = :frmZettel.dfHalterNr AND prdrechnr = :frmZettel.dfRechNr AND prdnr NOT IN (SELECT mbnr FROM mb) ORDER BY prdnr DESC ");
				// 17.03.16
				this.nZCount = this.cmbProzNr.GetListItemsCount();

				this.cmbProzNr.Text = this.cmbProzNr.GetListItemText(0);
				if (this.cmbProzNr.Text == "" || this.cmbProzNr.Text == "0")  // 08.03.16
				{
					this.nProzNr = SalNumber.Null;
				}
				else
				{
					this.nProzNr = Int.PalValNum(this.cmbProzNr.Text);
				}
				if (this.nZCount == 1) 
				{
					if (Sys.IDYES != Sal.MessageBox("Das Feld \"PR-Nr.\" wurde mit der einzigen vorhandenen Nr. " + this.cmbProzNr.Text + @" gefÃ¼llt.
Ist dies in Ordnung ?", "Achtung", (Sys.MB_IconQuestion | Sys.MB_YesNo))) 
					{
						this.cmbProzNr.Text = "";
						this.nProzNr = SalNumber.Null;
					}
				}
				else if (this.nZCount != 0) 
				{
					if (Sys.IDYES != Sal.MessageBox("Das Feld \"PR-Nr.\" wurde mit der jÃ¼ngsten der " + Int.PalStrNum(this.nZCount, 2, 0) + " vorhandenen Nr. " + this.cmbProzNr.Text + @" gefÃ¼llt.
Ist dies in Ordnung ?", "Achtung", (Sys.MB_IconQuestion | Sys.MB_YesNo))) 
					{
						this.cmbProzNr.Text = "";
						this.nProzNr = SalNumber.Null;
					}
				}
				this.cmbProzNr.EnableWindowAndLabel();
			}
			#endregion
		}
		
		/// <summary>
		/// rbZM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbZM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbZM_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbZM_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 11.02.16 Ã„1335 BE -> AN
			// 12.07.16 Ã„1367 AN -> HE
			this.cmbAn.Text = "HE";
			this.cbErledigt.Checked = false;
			Sal.DisableWindowAndLabel(this.cbErledigt);
			#endregion
		}
		
		/// <summary>
		/// rbTN WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbTN_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbTN_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbTN_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.EnableWindowAndLabel(this.cbErledigt);
			#endregion
		}
		
		/// <summary>
		/// rbHS WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbHS_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbHS_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbHS_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.EnableWindowAndLabel(this.cbErledigt);
			#endregion
		}
		
		/// <summary>
		/// rbMB WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbMB_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbMB_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbMB_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.EnableWindowAndLabel(this.cbErledigt);
			this.bEditDisabled = false;
			#endregion
		}
		
		/// <summary>
		/// rbZI WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbZI_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbZI_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbZI_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.EnableWindowAndLabel(this.cbErledigt);
			this.bEditDisabled = false;
			#endregion
		}
		
		/// <summary>
		/// rbBR WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbBR_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbBR_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbBR_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.EnableWindowAndLabel(this.cbErledigt);
			this.bEditDisabled = false;
			#endregion
		}
		
		/// <summary>
		/// rbRA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbRA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbRA_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbRA_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.EnableWindowAndLabel(this.cbErledigt);
			this.bEditDisabled = false;
			#endregion
		}
		
		/// <summary>
		/// cmbZM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbZM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.cmbZM_OnSAM_Validate(sender, e);
					break;
				
				// 08.01.02
				
				case Sys.SAM_SetFocus:
					this.cmbZM_OnSAM_SetFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbZM_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.rbZM.Checked = true;
			#endregion
		}
		
		/// <summary>
		/// SAM_SetFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbZM_OnSAM_SetFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.PostMsg(this.rbZM, Sys.SAM_Click, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// cmbProzNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbProzNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.cmbProzNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbProzNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nProzNr = Int.PalValNum(this.cmbProzNr.Text);
			Int.SqlImmedSel(@"SELECT prarztnr, prhalternr
into :frmZettel.dfArztNr, :frmZettel.dfHalterNr
from pr where prnr=:frmZettel.nProzNr");
			#endregion
		}
		
		/// <summary>
		/// dfZMDM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfZMDM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_SetFocus:
					this.dfZMDM_OnSAM_SetFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_SetFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfZMDM_OnSAM_SetFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.IsEmpty() || this.dfArztNr.Number == 0 || this.dfHalterNr.IsEmpty() || this.dfHalterNr.Number == 0) 
			{
			}
			else
			{
				if (this.cmbZM.Text == "Vollzahlung" || this.cmbZM.Text == "storno") 
				{
					this.nArztNr = this.dfArztNr.Number;
					Int.SqlImmedSel("SELECT ANR2 INTO :frmZettel.nArztNr2 FROM A WHERE AARZTNR = :frmZettel.nArztNr");
					if (!(this.dfRechNr.IsEmpty()) && this.dfRechNr.Number != 0) 
					{
						Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
from rk into :frmZettel.nZettelOP where rkhalternr=" + this.dfHalterNr.Number.ToString(0) + @"
and " + Int.PalArztNr("rk", this.nArztNr, this.nArztNr2) + @"
and rkrechnr=" + this.dfRechNr.Number.ToString(0) + @"
and rkkzzahl <2 AND rkdeaktiv IS NULL ");
					}
					else
					{
						Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
from rk into :frmZettel.nZettelOP where rkhalternr=" + this.dfHalterNr.Number.ToString(0) + @"
and " + Int.PalArztNr("rk", this.nArztNr, this.nArztNr2) + @"
and rkkzzahl <2 AND rkdeaktiv IS NULL ");
					}
					this.dfZMDM.Number = this.nZettelOP;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbInfo WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbInfo_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbInfo_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbInfo_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.IsEmpty() || this.dfArztNr.Number == 0 || this.dfHalterNr.IsEmpty() || this.dfHalterNr.Number == 0) 
			{
			}
			else
			{
				if (this.dfRechNr.IsEmpty() || this.dfRechNr.Number == 0) 
				{
					this.mlBemerk.Text = "lt. M " + this.cmbZM.Text;
					this.nRestDM = this.dfZMDM.Number;
					Int.SqlHandleExec(this.hSqlZettelUpd, @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
from rk into :frmZettel.nPArztNr, :frmZettel.nPHalterNr, :frmZettel.nPRechNr, :frmZettel.dtRechDat,
:frmZettel.nZettelOP where rkhalternr=" + this.dfHalterNr.Number.ToString(0) + @"
and rkarztnr in ( " + this.nArztNr.ToString(0) + ", " + this.nArztNr2.ToString(0) + @")
and rkkzzahl <2 AND rkdeaktiv IS NULL
GROUP BY 1,2,3,4 ORDER BY 4", "Fehler FÃ¼llen Zettel", ref Var.nErr);
					this.nFetchZettel = this.hSqlZettelUpd.FetchNext();
					while (this.nFetchZettel != Sys.FETCH_EOF && this.nRestDM > 0) 
					{
						if (this.nZettelOP > this.nRestDM) 
						{
							this.nZettelOP = this.nRestDM;
						}
						this.mlBemerk.Text = this.mlBemerk.Text + @"
" + Int.PalStrNum(this.nPArztNr, 4, 0) + "/" + Int.PalStrNum(this.nPHalterNr, 5, 0) + "/" + Int.PalStrNum(this.nPRechNr, 6, 0) + ": " + Int.PalStrNum(this.nZettelOP, 10, 2);
						this.nRestDM = this.nRestDM - this.nZettelOP;
						this.nFetchZettel = this.hSqlZettelUpd.FetchNext();
					}
					this.hSqlZettelUpd.Commit();
				}
				else
				{
					Sal.MessageBox(@"Bei eingegebener Rech-Nr.
kann keine Aufstellung fÃ¼r den
ganzen Halter gemacht werden !", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pblt WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pblt_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pblt_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pblt_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.mlBemerk.Text = this.mlBemerk.Text + " lt.";
			this.mlBemerk.SetFocus();
			#endregion
		}
		
		/// <summary>
		/// pbM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbM_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbM_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.mlBemerk.Text = this.mlBemerk.Text + " Mitglied";
			this.mlBemerk.SetFocus();
			#endregion
		}
		
		/// <summary>
		/// pbSch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.mlBemerk.Text = this.mlBemerk.Text + " Schuldner";
			this.mlBemerk.SetFocus();
			#endregion
		}
		
		/// <summary>
		/// pbTel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbTel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbTel_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbTel_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.mlBemerk.Text = this.mlBemerk.Text + " telef.";
			this.mlBemerk.SetFocus();
			#endregion
		}
		
		/// <summary>
		/// pbruftan WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbruftan_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbruftan_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbruftan_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.mlBemerk.Text = this.mlBemerk.Text + " ruft heute an";
			this.mlBemerk.SetFocus();
			#endregion
		}
		
		/// <summary>
		/// pbTextCopy WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbTextCopy_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbTextCopy_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbTextCopy_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbTextCopy_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.mlBemerk.SetFocus();
			Sal.EditCopy();
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbTextCopy_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbTextCopy, "Text merken");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbTextPaste WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbTextPaste_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.pbTextPaste_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Click:
					this.pbTextPaste_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbTextPaste_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbTextPaste, "gemerkten Text einfÃ¼gen");
			return;
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbTextPaste_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.mlBemerk.SetFocus();
			Sal.EditPaste();
			#endregion
		}
		
		/// <summary>
		/// mlBemerk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void mlBemerk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_AnyEdit:
					this.mlBemerk_OnSAM_AnyEdit(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_AnyEdit event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void mlBemerk_OnSAM_AnyEdit(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.bEditDisabled) 
			{
				this.mlBemerk.Text = this.lsBemerk;
			}
			#endregion
		}
		
		/// <summary>
		/// dfDatum WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDatum_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfDatum_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDatum_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(Sal.IsNull(this.dfWv))) 
			{
				this.pbSpeichern.EnableWindow();
			}
			#endregion
		}
		
		/// <summary>
		/// dfWv WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfWv_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfWv_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfWv_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(Sal.IsNull(this.dfWv))) 
			{
				this.pbSpeichern.EnableWindow();
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeu_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfVon.Clear();
			this.cmbAn.Clear();
			this.dfArztNr.Clear();
			this.dfHalterNr.Clear();
			this.dfRechNr.Clear();
			this.dfProzNr.Clear();
			this.mlBemerk.Clear();
			this.cmbProzNr.ClearList();
			this.cmbProzNr.Text = "";
			// 04.08.09
			this.lsRTF = "";

			Sal.ClearField(this.dfWv);
			this.dfRA.Clear();
			this.dfROWID.Clear();
			this.dfVon.Text = Var.strBNZei;
			this.cmbAn.Text = this.dfVon.Text;
			this.dfArztNr.Number = this.nArztNr;
			this.dfHalterNr.Number = this.nHalterNr;
			this.dfRechNr.Number = this.nRechNr;
			// 09.02.16 Ã„1327
			if (this.dfRechNr.Number > 0) 
			{
				this.dfRechNr.PostMessage(Sys.SAM_Validate, 0, 0);
			}

			this.dfDatum.Value = SalDateTime.Current;
			// 24.01.07 F116
			this.rbTN.Checked = true;
			this.cmbZM.Text = "";
			this.cmbZahlArt.Text = "";
			this.dfZMDM.Number = Sys.NUMBER_Null;

			// Set dfWv = dfDatum+30
			this.cbErledigt.Checked = false;
			// 08.03.16
			if (this.dfRechNr.Number != Sys.NUMBER_Null && this.dfRechNr.Number != 0) 
			{
				this.nZCount = 0;
				Int.SqlImmedSel("SELECT anr2 INTO :frmZettel.nPArztNr2 FROM a WHERE aarztnr = :frmZettel.dfArztNr");
				this.nZCount = Int.SqlGetAnzahl("FROM prd WHERE prdarztnr IN ( :frmZettel.dfArztNr, :frmZettel.nArztNr2 ) AND prdhalternr = :frmZettel.dfHalterNr AND prdrechnr = :frmZettel.dfRechNr AND prdnr NOT IN (SELECT mbnr FROM mb)");
				if (this.nZCount > 0) 
				{
					this.cmbProzNr.ClearList();
					this.cmbProzNr.Text = "";
					this.cmbProzNr.PopulateList(this.hSqlZa, "SELECT DISTINCT prdnr FROM prd WHERE prdarztnr IN ( :frmZettel.dfArztNr, :frmZettel.nArztNr2 ) AND prdhalternr = :frmZettel.dfHalterNr AND prdrechnr = :frmZettel.dfRechNr AND prdnr NOT IN (SELECT mbnr FROM mb) ORDER BY prdnr DESC ");

					if (this.nZCount == 1) 
					{
						this.cmbProzNr.Text = this.cmbProzNr.GetListItemText(0);
						if (this.cmbProzNr.Text == "" || this.cmbProzNr.Text == "0")  // 08.03.16
						{
							this.nProzNr = SalNumber.Null;
						}
						else
						{
							this.nProzNr = Int.PalValNum(this.cmbProzNr.Text);
						}
						// If IDYES != SalMessageBox('Das Feld "PR-Nr." wurde mit der einzigen vorhandenen Nr. ' || cmbProzNr || ' gefÃ¼llt.
						// Ist dies in Ordnung ?', 'Achtung', MB_IconQuestion|MB_YesNo)
						// Set cmbProzNr = ''
						// Set nProzNr = 0
					}
					else
					{
						this.cmbProzNr.Text = "";
						this.nProzNr = 0;
					}
					this.cmbProzNr.EnableWindowAndLabel();
				}
				else
				{
					this.cmbProzNr.DisableWindowAndLabel();
				}
			}
			else
			{
				this.cmbProzNr.Text = "";
			}

			// 11.04.01
			Sal.EnableWindowAndLabel(this.cbErledigt);
			// 06.10.99
			this.PalEnableEdit();

			#endregion
		}
		
		/// <summary>
		/// pbWeiter WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbWeiter_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbWeiter_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbWeiter_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.cmbWAn.IsEmpty()) 
			{
				Sal.MessageBox(@"Bitte jemanden wÃ¤hlen, an den
weitergeleitet werden soll.", "Person wÃ¤hlen", Sys.MB_Ok);
				e.Return = false;
				return;
			}


			this.lsBemerk = "Weitergeleiteter Zettel von " + this.dfVon.Text + @"  :
" + this.mlBemerk.Text;
			this.strVon = Var.strBNZei;
			// 27.02.02 statt :frmZettel.strErledigt jetzt immer Nein
			// 21.03.05 SYSDATE statt dfDatum
			// 13.05.14 F2027
			this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

			Int.SqlImmedX(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzahlart, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zrtftext, zerfdat)
VALUES (:frmZettel.strVon, :frmZettel.cmbWAn, :frmZettel.dfArztNr, :frmZettel.dfHalterNr, :frmZettel.dfRechNr, :frmZettel.lsBemerk,
SYSDATE, :frmZettel.dfWv.Value, 'N', :frmZettel.strArt, :frmZettel.cmbZM, :frmZettel.cmbZahlArt, :frmZettel.dfZMDM, :frmZettel.dfProzNr, NULL, NULL, NULL, NULL, NULL,0, :frmZettel.lsRTF, SYSDATETIME)");
			Int.SqlImmedX("COMMIT");
			// 25.04.08 F363 auskommentiert 02.05.08 F367 auskommentierung aufgehoben
			this.cbErledigt.Checked = true;

			this.pbSpeichern.PostMessage(Sys.SAM_Click, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// pbSpeichern WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSpeichern_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSpeichern_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSpeichern_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.cmbAn.IsEmpty()) 
			{
				this.cmbAn.Text = this.dfVon.Text;
			}
			if (this.cbErledigt.Checked == true) 
			{
				this.strErledigt = "J";
			}
			else
			{
				this.strErledigt = "N";
			}
			if (this.rbZM.Checked) 
			{
				this.strArt = "ZM";
				// 01.02.16 Ã„1193
				if (this.cmbZahlArt.Text == "" && (this.cmbZM.Text == "Vollzahlung" || this.cmbZM.Text == "â‚¬ gezahlt")) 
				{
					Sal.MessageBox(@"Bitte wÃ¤hlen Sie eine Zahlart aus.

Der Zettel wird NICHT gespeichert!", "Zahlart fehlt", (Sys.MB_Ok | Sys.MB_IconQuestion));
					e.Return = false;
					return;
				}
			}
			else if (this.rbTN.Checked) 
			{
				this.strArt = "TN";
			}
			else if (this.rbHS.Checked) 
			{
				this.strArt = "HS";
			}
			else if (this.rbRA.Checked) 
			{
				this.strArt = "RA";
			}
			else if (this.rbMB.Checked) 
			{
				this.strArt = "MB";
			}
			else if (this.rbBR.Checked) 
			{
				this.strArt = "BR";
			}
			else if (this.rbZI.Checked) 
			{
				this.strArt = "ZI";
			}

			// 30.01.01 bis incl. Else
			if (this.dfArztNr.Number > 0 && this.dfRechNr.Number > 0 && (this.dfHalterNr.IsEmpty() || this.dfHalterNr.Number == 0)) 
			{
				Int.SqlImmedSel("SELECT rkhalternr INTO :frmZettel.dfHalterNr FROM rk WHERE rkarztnr = :frmZettel.dfArztNr AND rkrechnr = :frmZettel.dfRechNr AND rkdeaktiv IS NULL ");
			}

			if (this.dfROWID.IsEmpty()) 
			{
				// 27.02.02
				if (this.strErledigt == "J" && this.dfVon.Text != this.cmbAn.Text) 
				{
					Sal.MessageBox(@"Ein Zettel an jemanden anderen kann nicht als erledigt abgesandt werden.

Der Zettel wird als unerledigt abgesandt !", "Achtung !", (Sys.MB_Ok | Sys.MB_IconExclamation));
					this.strErledigt = "N";
					this.cbErledigt.Checked = false;
				}
				Var.dtLogDauerStart = SalDateTime.Current;
				// Call PalLogDauer( 'Info: Halter', SalDateCurrent(  ) - dtLogDauerStart )
				// 13.05.14 F2027
				this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

				// 09.02.16 Ã„1327
				this.nProzNr = Int.PalValNum(this.cmbProzNr.Text);
				if (this.dfWv.Value != Sys.DATETIME_Null && this.nProzNr > 0) 
				{
					Int.SqlIstDa("FROM z WHERE zwiedervor IS NOT NULL AND zproznr = :frmZettel.nProzNr AND zdeaktiv IS NULL ", ref Var.bExists);
					if (Var.bExists) 
					{
						Int.SqlImmed("UPDATE z SET zwiedervor = NULL WHERE zwiedervor IS NOT NULL AND zproznr = :frmZettel.nProzNr");
						Int.PalLog("Z-Wv gelÃ¶scht PR" + Int.PalStrNum0(this.nProzNr, 7, 0));
					}
				}

				// 01.02.16 Ã„1327
				this.nProzNr = Int.PalValNum(this.cmbProzNr.Text);
				Int.SqlImmedX(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzahlart, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:frmZettel.dfVon, :frmZettel.cmbAn, :frmZettel.dfArztNr, :frmZettel.dfHalterNr, :frmZettel.dfRechNr, :frmZettel.mlBemerk,
:frmZettel.dfDatum.Value, :frmZettel.dfWv.Value, :frmZettel.strErledigt, :frmZettel.strArt, :frmZettel.cmbZM, :frmZettel.cmbZahlArt, :frmZettel.dfZMDM, :frmZettel.nProzNr, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
				Int.SqlImmedX("COMMIT");
			}
			else
			{
				Var.dtLogDauerStart = SalDateTime.Current;
				// 09.02.16 Ã„1327
				this.nProzNr = Int.PalValNum(this.cmbProzNr.Text);
				if (this.dfWv.Value != Sys.DATETIME_Null && this.nProzNr > 0) 
				{
					Int.SqlIstDa("FROM z WHERE ROWID <> :frmZettel.dfROWID AND zproznr = :frmZettel.nProzNr AND zwiedervor IS NOT NULL AND zdeaktiv IS NULL ", ref Var.bExists);
					if (Var.bExists) 
					{
						Int.SqlImmed("UPDATE z SET zwiedervor = NULL WHERE ROWID <> :frmZettel.dfROWID AND zarztnr = :frmZettel.dfArztNr AND zhalternr = :frmZettel.dfHalterNr AND zwiedervor IS NOT NULL");
						Int.PalLog("Z-Wv gelÃ¶scht PR" + Int.PalStrNum0(this.nProzNr, 7, 0));
					}
				}

				Int.SqlImmedX(@"
UPDATE Z SET 	ZVON = :frmZettel.dfVon,
		ZAN = :frmZettel.cmbAn,
		ZARZTNR = :frmZettel.dfArztNr,
		ZHALTERNR = :frmZettel.dfHalterNr,
		ZRECHNR = :frmZettel.dfRechNr,
		ZBEMERK = :frmZettel.mlBemerk,
		ZDATUM = :frmZettel.dfDatum.Value,
		ZWIEDERVOR = :frmZettel.dfWv.Value,
		ZERLEDIGT = :frmZettel.strErledigt,
		ZART = :frmZettel.strArt,
		ZZM = :frmZettel.cmbZM,
		zzahlart = :frmZettel.cmbZahlArt,
		ZZMDM = :frmZettel.dfZMDM
WHERE ROWID = :frmZettel.dfROWID");
				Int.SqlImmedX("COMMIT");
			}
			// 25.07.13 Ã„945 29.07.13 Auskommentierung wieder entfernt
			if (this.tblZettel.Populate(this.hSqlZettel, this.strSelect, Sys.TBL_FillNormal)) 
			{
			}
			this.dfVon.Clear();
			this.cmbAn.Clear();
			this.dfArztNr.Clear();
			this.dfHalterNr.Clear();
			this.dfRechNr.Clear();
			this.dfProzNr.Clear();
			this.mlBemerk.Clear();
			this.dfRA.Clear();
			this.dfROWID.Clear();
			this.cmbZahlArt.Text = "";
			this.dfVon.Text = Var.strBNZei;
			this.dfArztNr.Number = this.nArztNr;
			this.dfHalterNr.Number = this.nHalterNr;
			this.dfRechNr.Number = this.nRechNr;
			this.dfDatum.Value = SalDateTime.Current;
			// 01.02.16 Ã„1327
			this.cmbProzNr.ClearList();
			this.cmbProzNr.Text = "";
			// Call PalLogDauer( 'Zettel: Speichern', SalDateCurrent(  ) - dtLogDauerStart )

			this.rbTN.Checked = true;
			#endregion
		}
		
		/// <summary>
		/// pbEMail WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMail_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEMail_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMail_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 27.09.07 Ã„166
			Int.SqlImmedSel("SELECT aemail INTO :frmZettel.strEMail FROM A WHERE AARZTNR = :frmZettel.dfArztNr");
			if (this.strEMail.Scan("@") != -1) 
			{
				// 04.11.14 Ã„1064 If
				if (Sys.IDYES == Sal.MessageBox("MÃ¶chten Sie die E-Mail an " + this.strEMail + " versenden?", "E-Mail", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					// 06.05.14 F2003
					Sal.WaitCursor(true);
					Int.PalMailInit();
					// If Not Email.EmailIsConnected()
					// If Email.EmailConnect('','','', EMAIL_SYS_MSMAIL)

					this.strBetreff = this.dfArztNr.Number.ToString(0);
					if (this.dfHalterNr.Number > 0) 
					{
						this.strBetreff = this.strBetreff + "/H" + this.dfHalterNr.Number.ToString(0);
					}
					if (this.dfRechNr.Number > 0) 
					{
						this.strBetreff = this.strBetreff + "/R" + this.dfRechNr.Number.ToString(0);
					}
					// 07.11.07
					if (this.dfSHalterName.Text != "") 
					{
						this.strBetreff = this.strBetreff + " " + this.dfSHalterName.Text + " " + this.dfSHalterName2.Text;
					}

					// If Email.EmailSendMessage(FALSE,strBetreff, mlBemerk || '
					// 
					// Mit freundlichen GrÃ¼ÃŸen,
					// 
					// ' || strBNName || '
					// tvn-TierÃ¤rztliche Verrechnungsstelle Niedersachsen r. V.
					// 
					// Danziger StraÃŸe 1
					// 31008 Elze
					// Telefon (0 50 68) 93 07-' || strBNTel || '
					// Telefax (0 50 68) 93 07-80
					// E-mail ' || strBNEMail || '
					// Web www.moveta.de
					// 
					// Kreissparkasse Hildesheim
					// BLZ 259 501 30
					// Konto 7006 573'
					// ,strEMail,'','','',0,0)
					// Call SalStatusSetText(hWndForm, 'Die E-Mail ist in den Postausgang von Outlook gelegt worden.')
					// Set cbErledigt = TRUE
					// Set mlBemerk = 'E-Mail an ' || strEMail || '
					// ' || mlBemerk
					// Call SalPostMsg(pbSpeichern, SAM_Click, 0, 0)
					this.lsBody = this.mlBemerk.Text + @"

Mit freundlichen GrÃ¼ÃŸen,

" + Var.strBNName + @"
moveta r.V.k.V.

Danziger StraÃŸe 1
31008 Elze
Telefon (0 50 68) 93 07-" + Var.strBNTel + @"
Telefax (0 50 68) 93 07-80
E-mail " + Var.strBNEMail + @"
Web www.moveta.de

Sparkasse Hildesheim Â· IBAN: DE13 2595 0130 0007 0065 73 Â· BIC: NOLADE21HIK";
					// 29.07.14 F2003 'noreply@tvn-online.de' -> strBNEmail
					// 30.10.20 Ã„1911
					// Set nCount = oOutgoingMail.SendMail( MAIL_FORMAT_PLAIN_TEXT, strBetreff, strBNEMail, strEMail, STRING_Null, lsBody, STRING_Null,
					// FALSE, MAIL_PRIORITY_NORMAL )
					Var.nCount = Int.SendeMail(Const.MAIL_FORMAT_PLAIN_TEXT, this.strBetreff, Var.strBNEMail, this.strEMail, this.lsBody, SalString.Null, Const.MAIL_PRIORITY_NORMAL, ref Var.strDummy, "", Var.strBNName);
					if (Var.nCount == 0) 
					{
						this.SetStatusBarText("Die E-Mail ist versandt worden.");
						this.cbErledigt.Checked = true;
						this.mlBemerk.Text = "E-Mail an " + this.strEMail + @"
" + this.mlBemerk.Text;
						Sal.WaitCursor(false);
						Sal.MessageBox("Die E-Mail wurde erfolgreich versandt.", "Ok", Sys.MB_Ok);
						this.pbSpeichern.PostMessage(Sys.SAM_Click, 0, 0);
					}
					else
					{
						Sal.WaitCursor(false);
						// If nCount = 1
						// Set strDummy = 'User hasn\'t connected to server yet.'
						// Else If nCount = 2
						// Set strDummy = 'Server is stopping.'
						// Else If nCount = 3
						// Set strDummy = 'Invalid recipient.'
						// Else If nCount = 4
						// Set strDummy = 'Invalid attachment file.'
						// Else If nCount = 5
						// Set strDummy = 'Attachment file denies access.'
						// Else If nCount = 6
						// Set strDummy = 'Other error.'
						// Else
						// Set strDummy = 'unbekannter Fehler'
						Sal.MessageBox("Die E-Mail konnte nicht versandt werden.", "Fehler " + Var.nCount.ToString(0) + "/" + Var.strDummy, Sys.MB_Ok);
					}
					Int.PalMailClose();
					// Else
					// Call SalMessageBox('Die E-Mail konnte nicht in den Postausgang
					// von Outlook gelegt werden.', 'Fehler',MB_Ok)
				}
			}
			else
			{
				Sal.MessageBox("Keine gÃ¼ltige E-Mail-Adresse (" + this.strEMail + ") !.", "Fehler", Sys.MB_Ok);
			}
			#endregion
		}
		
		/// <summary>
		/// pbEMailH WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMailH_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEMailH_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEMailH_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 01.02.11 Ã„649
			Int.SqlImmedSel("SELECT hemail INTO :frmZettel.strEMail FROM h WHERE harztnr = :frmZettel.dfArztNr AND hhalternr = :frmZettel.dfHalterNr AND hdeaktiv IS NULL ");
			if (this.strEMail.Scan("@") != -1) 
			{
				// 04.11.14 Ã„1064 If
				if (Sys.IDYES == Sal.MessageBox("MÃ¶chten Sie die E-Mail an " + this.strEMail + " versenden?", "E-Mail", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					// 06.05.14 F2003
					// If Not Email.EmailIsConnected()
					// If Email.EmailConnect('','','', EMAIL_SYS_MSMAIL)
					Sal.WaitCursor(true);
					Int.PalMailInit();

					this.strBetreff = this.dfArztNr.Number.ToString(0);
					if (this.dfHalterNr.Number > 0) 
					{
						this.strBetreff = this.strBetreff + "/H" + this.dfHalterNr.Number.ToString(0);
					}
					if (this.dfRechNr.Number > 0) 
					{
						this.strBetreff = this.strBetreff + "/R" + this.dfRechNr.Number.ToString(0);
					}
					// 07.11.07
					if (this.dfSHalterName.Text != "") 
					{
						this.strBetreff = this.strBetreff + " " + this.dfSHalterName.Text + " " + this.dfSHalterName2.Text;
					}

					// If Email.EmailSendMessage(FALSE,strBetreff, mlBemerk || '
					// 
					// Mit freundlichen GrÃ¼ÃŸen,
					// 
					// ' || strBNName || '
					// tvn-TierÃ¤rztliche Verrechnungsstelle Niedersachsen r. V.
					// 
					// Danziger StraÃŸe 1
					// 31008 Elze
					// Telefon (0 50 68) 93 07-' || strBNTel || '
					// Telefax (0 50 68) 93 07-80
					// E-mail ' || strBNEMail || '
					// Web www.moveta.de
					// 
					// Kreissparkasse Hildesheim
					// BLZ 259 501 30
					// Konto 7006 573'
					// ,strEMail,'','','',0,0)
					// Set cbErledigt = TRUE
					// Set mlBemerk = 'E-Mail an ' || strEMail || '
					// ' || mlBemerk
					// Call SalPostMsg(pbSpeichern, SAM_Click, 0, 0)
					this.lsBody = this.mlBemerk.Text + @"

Mit freundlichen GrÃ¼ÃŸen,

" + Var.strBNName + @"
moveta r.V.k.V.

Danziger StraÃŸe 1
31008 Elze
Telefon (0 50 68) 93 07-" + Var.strBNTel + @"
Telefax (0 50 68) 93 07-80
E-mail " + Var.strBNEMail + @"
Web www.moveta.de

Sparkasse Hildesheim Â· IBAN: DE13 2595 0130 0007 0065 73 Â· BIC: NOLADE21HIK";
					// 29.07.14 F2003 'noreply@tvn-online.de' -> strBNEmail
					// 30.10.20 Ã„1911
					// If 0 = oOutgoingMail.SendMail( MAIL_FORMAT_PLAIN_TEXT, strBetreff, strBNEMail, strEMail, STRING_Null, lsBody, STRING_Null,
					// FALSE, MAIL_PRIORITY_NORMAL )
					// Call SalStatusSetText(hWndForm, 'Die E-Mail ist versandt worden.')
					// Set cbErledigt = TRUE
					// Set mlBemerk = 'E-Mail an ' || strEMail || '
					// ' || mlBemerk
					// Call SalWaitCursor( FALSE )
					// Call SalMessageBox('Die E-Mail wurde erfolgreich versandt.', 'Ok',MB_Ok)
					// Call SalPostMsg(pbSpeichern, SAM_Click, 0, 0)
					if (0 == Int.SendeMail(Const.MAIL_FORMAT_PLAIN_TEXT, this.strBetreff, Var.strBNEMail, this.strEMail, this.lsBody, SalString.Null, Const.MAIL_PRIORITY_NORMAL, ref Var.strDummy, "", Var.strBNName))
					{
						this.cbErledigt.Checked = true;
						this.mlBemerk.Text = "E-Mail an " + this.strEMail + @"
" + this.mlBemerk.Text;
						this.pbSpeichern.PostMessage(Sys.SAM_Click, 0, 0);
						this.SetStatusBarText("Die E-Mail ist versandt worden.");
						Sal.WaitCursor(false);
						Sal.MessageBox("Die E-Mail wurde erfolgreich versandt.", "Ok", Sys.MB_Ok);
					}
					else
					{
						Sal.WaitCursor(false);
						Sal.MessageBox("Die E-Mail konnte nicht versandt werden.", "Fehler: " + Var.strDummy, Sys.MB_Ok);
					}
					Int.PalMailClose();
					// Else
					// Call SalMessageBox('Die E-Mail konnte nicht in den Postausgang
					// von Outlook gelegt werden.', 'Fehler',MB_Ok)
				}
			}
			else
			{
				if (this.strEMail == "") 
				{
					Sal.MessageBox("Halter hat keine E-Mail-Adresse!", "Fehler", Sys.MB_Ok);
				}
				else
				{
					Sal.MessageBox("Keine gÃ¼ltige E-Mail-Adresse (" + this.strEMail + ") !", "Fehler", Sys.MB_Ok);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbDrucken WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDrucken_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.rbBR.Checked) 
			{
				// 04.08.09 lsRTF
				if (this.lsRTF == "") 
				{
					// 06.08.08
					if (Var.bfrmBriefVari) 
					{
						while (!(App.frmBriefVari.DestroyWindow())) 
						{
						}
					}

					// 06.08.18 Ã„1763 TRUE -> FALSE
					frmBriefVari.CreateWindow(this, this.dfArztNr.Number, this.nHalterNr, this.dfRechNr.Number, this.cmbAn.Text, this.mlBemerk.Text, this.dfDatum.Value, this.strRA0, this.strRA1, this.strRA2, this.strRA3, this.strRA4, false);
				}
				else
				{
					// 06.08.08
					if (Var.bfrmText) 
					{
						while (!(App.frmText.DestroyWindow())) 
						{
						}
					}

					frmText.CreateWindow(this, this.dfArztNr.Number, this.nHalterNr, this.dfRechNr.Number, this.lsRTF);
				}
			}
			else
			{
				// Call SalPrtPrintForm( hWndForm )
				// 28.01.11
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Zettel.lst", "");
			}
			#endregion
		}
		
		/// <summary>
		/// tblZettel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblZettel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.tblZettel_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_RowHeaderClick:
					this.tblZettel_OnSAM_RowHeaderClick(sender, e);
					break;
				
				// On SAM_FetchRowDone
				
				// 18.09.02
				
				// If bPFarbe
				
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xBFFFBF )
				
				// Set bPFarbe = FALSE
				
				// Else
				
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xEFFFEF )
				
				// Set bPFarbe = TRUE
				
				case Sys.SAM_Create:
					this.tblZettel_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblZettel_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblZettel.PostMessage(Sys.SAM_RowHeaderClick, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblZettel_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			// 04.08.09 lsRTF
			Int.SqlImmedSel(@"SELECT zvon,zan,zarztnr,zhalternr,zrechnr, zproznr,zbemerk,zdatum,zwiedervor,zerledigt, zart, zzm, zzahlart, zzmdm,
		zan0, zan1, zan2, zan3, zan4, zrtftext, ROWID FROM Z
		INTO :frmZettel.dfVon, :frmZettel.cmbAn, :frmZettel.dfArztNr, :frmZettel.dfHalterNr, :frmZettel.dfRechNr, :frmZettel.dfProzNr, :frmZettel.mlBemerk,
		:frmZettel.dfDatum, :frmZettel.dfWv, :frmZettel.strErledigt, :frmZettel.strArt, :frmZettel.cmbZM, :frmZettel.cmbZahlArt, :frmZettel.dfZMDM,
		:frmZettel.strRA0, :frmZettel.strRA1, :frmZettel.strRA2, :frmZettel.strRA3, :frmZettel.strRA4, :frmZettel.lsRTF, :frmZettel.dfROWID
		WHERE ROWID = :frmZettel.tblZettel.colsROWID");
			this.cmbProzNr.Text = this.dfProzNr.Number.ToString(0);
			this.dfRA.Text = (this.strRA0 + " " + this.strRA1 + " " + this.strRA2 + " " + this.strRA3 + " " + this.strRA4).Trim();
			// 04.11.99
			if (this.strArt == "ZM") 
			{
				this.rbZM.Checked = true;
				this.pbLoesch.DisableWindowAndLabel();
				// 06.10.99
				this.lsBemerk = this.mlBemerk.Text;
				this.PalDisableEdit();
			}
			if (this.strArt == "TN") 
			{
				this.rbTN.Checked = true;
				this.pbLoesch.DisableWindowAndLabel();
				// 06.10.99
				this.lsBemerk = this.mlBemerk.Text;
				this.PalDisableEdit();
			}
			if (this.strArt == "HS") 
			{
				this.rbHS.Checked = true;
				this.pbLoesch.DisableWindowAndLabel();
				// 06.10.99
				this.lsBemerk = this.mlBemerk.Text;
				this.PalDisableEdit();
			}
			if (this.strArt == "RA") 
			{
				this.rbRA.Checked = true;
				this.pbLoesch.EnableWindowAndLabel();
				// 06.10.99
				this.PalEnableEdit();
			}
			if (this.strArt == "MB") 
			{
				this.rbMB.Checked = true;
				// 06.10.99
				this.lsBemerk = this.mlBemerk.Text;
				this.PalDisableEdit();
			}
			if (this.strArt == "BR") 
			{
				this.rbBR.Checked = true;
				// 06.10.99
				this.lsBemerk = this.mlBemerk.Text;
				this.PalDisableEdit();
			}
			if (this.strArt == "ZI") 
			{
				this.rbZI.Checked = true;
				this.lsBemerk = this.mlBemerk.Text;
				this.PalDisableEdit();
			}
			// 18.12.06 F99
			this.dfSHalterName.Text = "";
			this.dfSHalterName2.Text = "";
			this.dfSHalterStr.Text = "";
			this.dfSHalterOrt.Text = "";

			Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hland || ' ' || hort,hname2,hstr
into :frmZettel.dfSHalterName, :frmZettel.dfSHalterOrt, :frmZettel.dfSHalterName2, :frmZettel.dfSHalterStr
from H where hhalternr=:frmZettel.dfHalterNr and harztnr=:frmZettel.dfArztNr AND hdeaktiv IS NULL ");
			this.cbErledigt.Checked = this.strErledigt == "J";
			// 17.01.18 Ã„1684 raus
			// Set dfMSperren = NUMBER_Null
			// Call SqlImmedSel('SELECT rkmahnsperr INTO :frmZettel.dfMSperren
			// FROM rk WHERE rkarztnr = :frmZettel.dfArztNr
			// AND rkhalternr = :frmZettel.dfHalterNr
			// AND rkrechnr = :frmZettel.dfRechNr')
			// 17.04.01
			this.strUser = Var.strBNZei;
			Var.strBNLeseberechtigung = "";
			Int.PalCheckLeseberechtigung();
			Var.strBNLeseberechtigung = "\'" + this.strUser + "\'" + Var.strBNLeseberechtigung;
			if (Var.strBNLeseberechtigung.Scan(this.cmbAn.Text) == -1) 
			{
				Sal.DisableWindowAndLabel(this.cbErledigt);
			}
			else
			{
				Sal.EnableWindowAndLabel(this.cbErledigt);
			}

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblZettel_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblZettel, 0xbfffbf);
			#endregion
		}
		
		/// <summary>
		/// pbLoesch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoesch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoesch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoesch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblZettel.AnyRows(Sys.ROW_Selected, 0)) 
			{
				Var.bOK = this.hSqlZettelUpd.Prepare(@"
DELETE FROM Z
WHERE zart='RA' AND ROWID = :frmZettel.tblZettel.colsROWID");
				if (Var.bOK) 
				{
					this.tblZettel.DeleteSelected(this.hSqlZettelUpd);
					this.hSqlZettelUpd.Commit();
					Int.PalLog("Zettel gelÃ¶scht");
				}
			}
			#endregion
		}
		
		/// <summary>
		/// cbErledigt WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbErledigt_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbErledigt_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbErledigt_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.cbErledigt.Checked == true) 
			{
				this.strUser = Var.strBNZei;
				Var.strBNLeseberechtigung = "";
				Int.PalCheckLeseberechtigung();
				Var.strBNLeseberechtigung = "\'" + this.strUser + "\'" + Var.strBNLeseberechtigung;
				if (Var.strBNLeseberechtigung.Scan(this.cmbAn.Text) != -1)  // 13.10.03 nur der Empf darf erledigt=ja setzen
				{
					this.strErledigt = "J";
					// 15.01.03
					Int.SqlImmedSel("SELECT ANR2 INTO :frmZettel.nArztNr2 FROM A WHERE AARZTNR = :frmZettel.dfArztNr");
					// 30.01.01 bis incl. Else
					if (!(this.rbRA.Checked) && this.dfArztNr.Number > 0 && this.dfRechNr.Number > 0 && (this.dfHalterNr.IsEmpty() || this.dfHalterNr.Number == 0)) 
					{
						Int.SqlImmedSel("SELECT rkhalternr INTO :frmZettel.dfHalterNr FROM rk WHERE rkarztnr = :frmZettel.dfArztNr AND rkrechnr = :frmZettel.dfRechNr AND rkdeaktiv IS NULL ");
					}
					// 31.03.06
					this.n9Mahnstufe = 0;
					if (this.dfArztNr.Number != Sys.NUMBER_Null && this.dfHalterNr.Number != Sys.NUMBER_Null) 
					{
						Int.SqlImmedSel(@"SELECT max(rkmahnstufe)  INTO :frmZettel.n9Mahnstufe FROM rk
WHERE " + Int.PalArztNr("rk", this.dfArztNr.Number, this.nArztNr2) + @" AND rkhalternr = :frmZettel.dfHalterNr
AND rkkzzahl<2 AND (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn)>0 AND rkdeaktiv IS NULL ");
						Int.SqlIstDa("FROM z WHERE " + Int.PalArztNr("z", this.dfArztNr.Number, this.nArztNr2) + @"
AND zhalternr = :frmZettel.dfHalterNr AND zwiedervor is not null AND zdeaktiv IS NULL ", ref this.bWvExist);
					}

					if (!(this.bWvExist) && this.n9Mahnstufe == 9 && (Sal.IsNull(this.dfWv) || this.dfWv.Value > (SalDateTime.Current + 600))) 
					{
						Sal.MessageBox(@"Kein oder zu hohes Wiedervorlagedatum !

Max. Heute + 600 Tage.", "Fehler", Sys.MB_Ok);
						this.pbSpeichern.DisableWindow();
						Sal.SetFocus(this.dfWv);
					}

				}
				else
				{
					Sal.MessageBox(@"Nur der EmpfÃ¤nger oder Vertreter des EmpfÃ¤ngers darf ""Erledigt = Ja"" setzen.

Aktion wurde NICHT durchgefÃ¼hrt!", "Achtung", (Sys.MB_Ok | Sys.MB_IconAsterisk));
					this.cbErledigt.Checked = false;
					e.Return = false;
					return;
				}
			}
			else
			{
				this.strErledigt = "N";
			}
			#endregion
		}
		
		/// <summary>
		/// pbSuchen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSuchen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSuchen_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSuchen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.dtLogDauerStart = SalDateTime.Current;
			// If Not SalIsWindowEnabled( frmMain.pbSuchen )
			// If SalDestroyWindow(frmRgSuchen)
			// If SalCreateWindow(frmRgSuchen,hWndForm, dfArztNr, dfHalterNr, dfRechNr)
			// Call SalDisableWindow(frmRgSuchen.cbZettel)
			App.frmRgSuchen.PalFuelle(this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRechNr.Number);
			// Call PalLogDauer( 'Zettel: Infofeld', SalDateCurrent(  ) - dtLogDauerStart )
			#endregion
		}
		
		/// <summary>
		/// pbEL WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEL_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbEL_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbEL_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmEL.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRechNr.Number);
			#endregion
		}
		
		/// <summary>
		/// pbFiBu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbFiBu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbFiBu_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbFiBu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmFiBu.CreateWindow(this);
			#endregion
		}
		
		/// <summary>
		/// dfRA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.dfRA_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRA_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.dfRA, this.dfRA.Text);
			return;
			#endregion
		}
		
		/// <summary>
		/// pbRefresh WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRefresh_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRefresh_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbRefresh_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRefresh_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblZettel.Populate(this.hSqlZettel, this.strSelect, Sys.TBL_FillNormal);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRefresh_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbRefresh, "Liste aktualisieren");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbDruckenErl WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruckenErl_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDruckenErl_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruckenErl_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// LL
			dlgLlDruck.ModalDialog(App.frmMain, "ZettelListeErl.lst", "");
			// Call SalTblReset( tblZettel )
			// Call SalTblPopulate( tblZettel,hSqlZettel,strSelect,TBL_FillNormal )
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblZettel
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblZettelTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmZettel _frmZettel = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblZettelTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmZettel frmZettel
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmZettel == null) 
					{
						_frmZettel = (frmZettel)this.FindForm();
					}
					return _frmZettel;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblZettelTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblZettelTableWindow)SalWindow.FromHandle(handle, typeof(tblZettelTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
