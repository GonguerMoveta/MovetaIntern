// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;
using System.Data.SqlClient;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmVKZ : SalQuickTabsForm
	{
		#region Window Variables
		public SalSqlHandle hSqlVKZ = SalSqlHandle.Null;
		public SalNumber nArztNr = 0;
		public SalNumber nArztNr2 = 0;
		public SalNumber nMahnZins = 0;
		public SalNumber nMBKosten = 0;
		public SalNumber nSumme = 0;
		public SalNumber nMI = 0;
		public SalNumber nMI1 = 0;
		public SalNumber nMI2 = 0;
		public SalNumber nMI3 = 0;
		public SalNumber nZinsKum = 0;
		public SalNumber nFetch = 0;
		public SalNumber nZinsTage = 0;
		public SalNumber nZinsZahl = 0;
		public SalNumber nZinsZahlAlt = 0;
		public SalNumber nZinsZahlKum = 0;
		public SalDateTime dtZinsRech = SalDateTime.Null;
		public SalDateTime dtZinsRechAlt = SalDateTime.Null;
		public SalNumber nZinsRech = 0;
		public SalNumber nZinsRechAlt = 0;
		public SalNumber nZins = 0;
		public SalNumber nZinsOffen = 0;
		public SalBoolean bAuszahlung = false;
		public SalBoolean bAuszahlungM = false;
		public SalNumber nTab = 0;
		public SalBoolean bAuszJa = false;
		public SalNumber nRowHeader = 0;
		public SalString strQuartalAlt = "";
		public SalNumber nArztNrAlt = 0;
		public SalNumber nQ = 0;
		public SalNumber nY = 0;
		public SalNumber nSumRechDM = 0;
		public SalNumber nSumZahlDM = 0;
		public SalNumber nSumAusbuchDM = 0;
		public SalNumber nSumZahlTage = 0;
		public SalNumber nGebMov = 0;
		public SalNumber nGebBFS = 0;
		public SalNumber nAnzahl = 0;
		public SalNumber nMehrkosten = 0;
		public SalNumber nUeberwTA = 0;
		public SalNumber nSaldoTA = 0;
		public SalNumber nSaldo = 0;
		public SalNumber nAVorschProz = 0;
		public SalNumber nDarlehenGeb = 0;
		public SalNumber nPorto = 0;
		public SalNumber nSumUnbezahltDM = 0;
		public SalNumber nSumUnbezahltTage = 0;
		public SalNumber nSumZahlProz = 0;
		public SalDateTime dtRechAlt = SalDateTime.Null;
		public MTblPrintParams PrintParams = new MTblPrintParams();
		public SalNumber nAnz = 0;
		public SalNumber nOff = 0;
		public SalString strDevice = "";
		public SalNumber nResult = 0;
		public SalArray<SalString> strPrinters = new SalArray<SalString>();
		public MTblPrintLine objPrintLine = new MTblPrintLine();
		public SalNumber nSumAnzahl = 0;
		public SalNumber nSumGebJetzt = 0;
		public SalNumber nSumGebSim = 0;
		public SalNumber nSt1 = 0;
		public SalNumber nSt2 = 0;
		public SalNumber nSt3 = 0;
		public SalNumber nSt4 = 0;
		public SalNumber nSt5 = 0;
		public SalNumber nSt6 = 0;
		public SalNumber nStGeb = 0;
		public SalNumber nGesSaldo = 0;
		public SalNumber nAusMSZins = 0;
		public SalNumber nGeb = 0;
		public SalNumber nFord = 0;
		public SalNumber nGrSRech = 0;
		public SalNumber nGrSRechNeu = 0;
		public SalString strSelectRK = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmVKZ()
		{
			// Assign global reference.
			App.frmVKZ = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmVKZ CreateWindow(Control owner)
		{
			frmVKZ frm = new frmVKZ();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmVKZ FromHandle(SalWindowHandle handle)
		{
			return ((frmVKZ)SalWindow.FromHandle(handle, typeof(frmVKZ)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalBFSGeb()
		{
			#region Actions
			using (new SalContext(this))
			{
				dfMBProz.Number = 2.1m;
				if (cbMBAusfall.Checked) 
				{
					dfMBProz.Number = dfMBProz.Number + 1.5m;
				}
				else if (cbMBVorfinanz.Checked) 
				{
					dfMBProz.Number = dfMBProz.Number + 0.4m;
				}
				if (dfRGFord.Number > 500000) 
				{
					dfMBProz.Number = dfMBProz.Number - 0.7m;
				}
				else if (dfRGFord.Number > 400000) 
				{
					dfMBProz.Number = dfMBProz.Number - 0.6m;
				}
				else if (dfRGFord.Number > 200000) 
				{
					dfMBProz.Number = dfMBProz.Number - 0.5m;
				}
				else if (dfRGFord.Number > 100000) 
				{
					dfMBProz.Number = dfMBProz.Number - 0.3m;
				}
				else if (dfRGFord.Number > 60000) 
				{
				}
				else if (dfRGFord.Number > 30000) 
				{
					dfMBProz.Number = dfMBProz.Number + 1.2m;
				}
				else
				{
					dfMBProz.Number = dfMBProz.Number + 2.2m;
				}

				if (dfMBjeRg.Number == Sys.NUMBER_Null) 
				{
					dfMBjeRg.Number = 1.35m;
				}
				dfTVNVorschuss.Number = 100 - dfMBProz.Number;
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalMBErgebnis()
		{
			#region Actions
			using (new SalContext(this))
			{
				dfMBGeb.Number = (dfRGAnz.Number * dfMBjeRg.Number) + (dfRGFord.Number * dfMBProz.Number / 100);
				if (cbMBAusfall.Checked || cbMBVorfinanz.Checked) 
				{
					dfMBZins.Number = dfTVNZinskosten.Number + dfTVNZinskostenBez.Number;
				}
				else
				{
					dfMBZins.Number = 0;
				}
				dfMBSum.Number = dfMBGeb.Number - dfMBZins.Number;
				dfMBTVN.Number = dfRGGeb.Number + dfRGPorto.Number + dfMGGeb.Number + dfMGZahl.Number + dfMGZahlZins.Number;
				if (cbMBVorfinanz.Checked) 
				{
					// Set dfMBTVN = dfMBTVN + dfRGZinsen
					dfMBTVNZins.Number = dfRGFord.Number * 0.7m * 0.5m / 100;
				}
				else
				{
					dfMBTVNZins.Number = 0;
				}
				if (cbMBAusfall.Checked) 
				{
					dfMBTVN.Number = dfMBTVN.Number + dfMBGebTVN.Number + dfMBGebAG.Number + dfMBGebTVNZahl.Number + dfMBGebAGZahl.Number;
				}
				dfMBTVNSumme.Number = dfMBTVN.Number + dfMBTVNZins.Number;
				dfMBDiff.Number = dfMBSum.Number - dfMBTVN.Number - dfMBTVNZins.Number;
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmVKZ WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmVKZ_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmVKZ_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmVKZ_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmVKZ_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 06.01.14 Ä1005 RO
			Int.SqlConnection(ref this.hSqlVKZ);
			// Call SqlCreateSession(hSession,'')
			// Call SqlCreateStatement (hSession, hSqlVKZ)
			// Call SqlSetIsolationLevel(hSqlVKZ,'RO')

			this.dfVon.Value = new SalDateTime(SalDateTime.Current.Year() - 1, 1, 1, 0, 0, 0);
			this.dfBis.Value = new SalDateTime(SalDateTime.Current.Year() - 1, 12, 31, 0, 0, 0);
			this.dfTVNZins.Number = 10;
			this.dfVIVorsch.Number = 80;
			this.nTab = 0;
			this.cbVKZAlle.Checked = true;
			this.dfVIEURRg.Number = 1.35m;
			// 04.11.22 Ä2047
			// Set dfG1 = 25.56
			// Set dfG2 = 51.13
			this.dfG3.Number = 76.69m;
			this.dfG4.Number = 127.82m;
			this.dfG5.Number = 255.65m;
			// Call PalGetProfileStringR('','Grenze1', '2556', strDummy, 'TVN')
			// Set dfG1 = PalValNum( strDummy ) / 100
			// Call PalGetProfileStringR('','Grenze2', '5113', strDummy, 'TVN')
			// Set dfG2 = PalValNum( strDummy ) / 100
			Int.PalGetProfileStringR("", "Grenze3", "7669", ref Var.strDummy, "TVN");
			this.dfG3.Number = Int.PalValNum(Var.strDummy) / 100;
			Int.PalGetProfileStringR("", "Grenze4", "12782", ref Var.strDummy, "TVN");
			this.dfG4.Number = Int.PalValNum(Var.strDummy) / 100;
			Int.PalGetProfileStringR("", "Grenze5", "25565", ref Var.strDummy, "TVN");
			this.dfG5.Number = Int.PalValNum(Var.strDummy) / 100;
			Int.PalGetProfileStringR("", "GSKappung", "180000", ref Var.strDummy, "TVN");
			this.dfGKappung.Number = Int.PalValNum(Var.strDummy) / 100;
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmVKZ_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlVKZ.Disconnect();
			// Call SqlFreeSession( hSession )
			#endregion
		}
		
		/// <summary>
		/// picTabs WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case QO.TABSM_TabActivateStart:
					this.picTabs_OnTABSM_TabActivateStart(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// TABSM_TabActivateStart event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void picTabs_OnTABSM_TabActivateStart(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.picTabs.SelectedIndex = this.picTabs.GetClicked();
			if (this.picTabs.SelectedIndex == 6)  // GS
			{
				this.dfArztNr.SetFocus();
			}
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT  aname1, aname2, astr, aort, anr2, amahnint
INTO  :frmVKZ.dfN1, :frmVKZ.dfN2, :frmVKZ.dfS, :frmVKZ.dfO, :frmVKZ.nArztNr2, :frmVKZ.nMI
FROM a WHERE aarztnr = :frmVKZ.dfArztNr");
			Int.SqlImmedSel(@"SELECT MITG1, MITG2, MITG3 INTO :frmVKZ.nMI1, :frmVKZ.nMI2, :frmVKZ.nMI3
FROM MI WHERE minr = :frmVKZ.nMI");
			this.dfFMMI.Text = Int.PalStrNum(this.nMI1, 3, 0) + "/" + Int.PalStrNum(this.nMI2, 3, 0) + "/" + Int.PalStrNum(this.nMI3, 3, 0);
			if (this.nArztNr2 == 0) 
			{
				this.nArztNr2 = this.dfArztNr.Number;
			}
			this.nArztNr = this.dfArztNr.Number;
			this.dfArztNr2.Number = this.nArztNr2;
			// 19.09.12
			this.cbVKZAlle.Checked = false;
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sal.IsNull(this.dfVon)) 
			{
				this.dfVon.Value = new SalDateTime(1900, 1, 1);
			}
			if (Sal.IsNull(this.dfBis)) 
			{
				this.dfBis.Value = SalDateTime.Current;
			}
			// 28.07.14 F2046
			Sal.MessageBox("Bitte klicken Sie auf Ok und führen Sie keine Aktion durch, bevor die Meldung kommt, daß das Berechnung beendet ist.", "Berechnung startet", (Sys.MB_Ok | Sys.MB_IconAsterisk));

			Sal.WaitCursor(true);
			Int.SqlImmedSel(@"SELECT max(rkrechnr), count(rkrechnr),
sum(rkdmleis), sum(rkdmarzn), sum(rkdmmahn), sum(rkdmzins),
sum(rkzaleis), sum(rkzaarzn), sum(rkzamahn), sum(rkzazins), avg(rkmahnstufe)
INTO :frmVKZ.dfRechNr, :frmVKZ.dfAnzRech,
:frmVKZ.dfDMRechL, :frmVKZ.dfDMRechA, :frmVKZ.dfDMRechM, :frmVKZ.dfDMRechZ,
:frmVKZ.dfZaRechL, :frmVKZ.dfZaRechA, :frmVKZ.dfZaRechM, :frmVKZ.dfZaRechZ,
:frmVKZ.dfMS
FROM rk WHERE " + Int.PalArztNr("rk", this.nArztNr, this.nArztNr2) + @" AND rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND rkrechnr<999990 AND rkdeaktiv IS NULL");
			this.dfFMSumme.Number = this.dfDMRechL.Number + this.dfDMRechA.Number;
			// 12.12.00
			this.SetStatusBarText("Berechne Zahlungen");
			if (this.tblZA.Populate(this.hSqlVKZ, @"SELECT @choose(zakz, 'offen', 'Teilzahlung', 'Vollzahlung', 'Vollz., MG ausgeb.', 'ausgebucht'), count(*), sum(zadm)
FROM za
INTO :frmVKZ.tblZA.colsKZ, :frmVKZ.tblZA.colnAnzahl, :frmVKZ.tblZA.colnSumme
where " + Int.PalArztNr("za", this.nArztNr, this.nArztNr2) + @"
AND zabuchdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND zadeaktiv IS NULL
GROUP BY 1", Sys.TBL_FillAll)) 
			{
				this.SetStatusBarText("Berechne Tagebuch");
				if (this.tblAK.Populate(this.hSqlVKZ, @"SELECT aktyp, aktypdetail, vbez, sum(akanzahl), count(*)
FROM ak, v
INTO :frmVKZ.tblAK.colsTyp, :frmVKZ.tblAK.colsTypDetail, :frmVKZ.tblAK.colsBez,
:frmVKZ.tblAK.colnAnzahl, :frmVKZ.tblAK.colnLaeufe
WHERE aktypdetail=vcode(+) AND akdatum BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND " + Int.PalArztNr("ak", this.nArztNr, this.nArztNr2) + " GROUP BY 1,2,3", Sys.TBL_FillAll)) 
				{
					this.SetStatusBarText("Berechne Mahnstufen-OPs");
					if (this.tblMSOP.Populate(this.hSqlVKZ, @"SELECT rkmahnstufe, sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn+rkdmmahn+rkdmzins-rkzamahn-rkzazins)
FROM rk
INTO :frmVKZ.tblMSOP.colsMS, :frmVKZ.tblMSOP.colnOP
WHERE rkkzzahl<2 AND rkrechnr<999990 AND " + Int.PalArztNr("rk", this.nArztNr, this.nArztNr2) + " AND rkdeaktiv IS NULL GROUP BY 1", Sys.TBL_FillAll)) 
					{
						// 05.12.03
						// Call SqlImmedSel('SELECT sum(rkdmmahn+rkdmzins-rkzamahn-rkzazins)
						// INTO :frmVKZ.nMahnZins
						// FROM rk WHERE rkkzzahl<2 AND rkrechnr<999990 AND rkarztnr IN (:frmVKZ.nArztNr, :frmVKZ.nArztNr2)')
						// Call SalTblInsertRow(tblMSOP, TBL_MaxRow)
						// Set tblMSOP.colsMS = 'MG+Zins'
						// Set tblMSOP.colnOP = nMahnZins
						Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
INTO :frmVKZ.nMBKosten
FROM rk WHERE rkkzzahl<2 AND rkrechnr>=999990 AND rkdeaktiv IS NULL AND " + Int.PalArztNr("rk", this.nArztNr, this.nArztNr2));
						this.tblMSOP.InsertRow(Sys.TBL_MaxRow);
						this.tblMSOP.colsMS.Text = "MB-Sammler";
						this.tblMSOP.colnOP.Number = this.nMBKosten;

					}
				}
			}
			// 29.09.05
			this.nSumme = 0;
			this.SetStatusBarText("Berechne Kennzahlen Forderungsmanagement");
			if (this.tblFM.Populate(this.hSqlVKZ, @"SELECT (zabuchdat-rkrechdat), sum(zadm)
INTO :frmVKZ.tblFM.colTage, :frmVKZ.tblFM.colEuroE
FROM rk, za
WHERE " + Int.PalArztNr("rk", this.nArztNr, this.nArztNr2) + @" AND rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND rkrechnr<999990 AND zakz<4 AND rkarztnr=zaarztnr AND rkrechnr=zarechnr AND rkdeaktiv IS NULL AND zadeaktiv IS NULL
GROUP BY 1", Sys.TBL_FillAll)) 
			{
                //FC:FINAL: replace cQuickGraph
				this.ccFM.Draw();				
			}

			this.dfTVNZinskostenBez.Number = this.nZinsKum;
			// 24.06.08 Berechnung TVN-Gebühren
			this.dfRGAnz.Number = 0;
			this.dfRGFord.Number = 0;
			this.dfRGGeb.Number = 0;
			this.dfRGPorto.Number = 0;
			this.dfRGZinsen.Number = 0;
			this.dfMGAnz.Number = 0;
			this.dfMGGeb.Number = 0;
			this.dfMGZahl.Number = 0;
			this.dfMGZahlZins.Number = 0;
			this.dfMBGebAG.Number = 0;
			this.dfMBGebTVN.Number = 0;
			this.dfMBGebAGZahl.Number = 0;
			this.dfMBGebTVNZahl.Number = 0;
			this.dfStorno.Number = 0;
			this.dfRG.Number = 0;
			this.dfMG.Number = 0;
			this.dfSoll.Number = 0;
			// 19.04.22
			this.nAnz = 0;
			this.nGeb = 0;
			this.nFord = 0;
			this.nPorto = 0;

			this.SetStatusBarText("Berechnung moveta-Gebühren");
			// RG
			// 30.08.21 F4805 +   AND @scan(tkabuchtext, \'RG\')>=0
			Int.SqlImmedSel(@"SELECT sum(@value(@mid(tkabuchtext, 4, @scan(tkabuchtext, 'RG')-4))), sum(tkarechdm-tkatavst), sum(tkadmabr), sum(tkadmporto)
INTO :frmVKZ.dfRGAnz, :frmVKZ.dfRGGeb, :frmVKZ.dfRGFord, :frmVKZ.dfRGPorto
FROM tka
WHERE " + Int.PalArztNr("tka", this.nArztNr, this.nArztNr2) + @" AND tkabeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND tkasa NOT IN (1,2) AND (tkabuchtext LIKE 'GEBV%' OR tkabuchtext LIKE 'Gebühren von%') AND tkadeaktiv IS NULL
AND @scan(tkabuchtext, 'RG')>=0");
			// 01.04.22
			Int.SqlImmedSel(@"SELECT sum(@value(@mid(tkabuchtext, 13, @scan(tkabuchtext, 'Rechnungen')-14))), sum(tkarechdm-tkatavst), sum(tkadmabr), sum(tkadmporto)
INTO :frmVKZ.nAnz, :frmVKZ.nGeb, :frmVKZ.nFord, :frmVKZ.nPorto
FROM tka
WHERE " + Int.PalArztNr("tka", this.nArztNr, this.nArztNr2) + @" AND tkabeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND tkasa NOT IN (1,2) AND tkabuchtext LIKE 'Gebühren von%' AND tkadeaktiv IS NULL
AND @scan(tkabuchtext, 'Rechnungen')>=0");
			this.dfRGAnz.Number = this.dfRGAnz.Number + this.nAnz;
			this.dfRGGeb.Number = this.dfRGGeb.Number + this.nGeb;
			this.dfRGFord.Number = this.dfRGFord.Number + this.nFord;
			this.dfRGPorto.Number = this.dfRGPorto.Number + this.nPorto;
			// 20.03.09
			this.PalBFSGeb();

			// 19.03.09 OTÄ203
			this.SetStatusBarText("Berechne Zahlen für 100% Vorschuß");
			this.nZinsKum = 0;
			this.nZinsZahlKum = 0;
			this.dtZinsRechAlt = SalDateTime.Null;
			this.dfTVNZinskosten.Number = 0;
			Int.SqlHandleExec(this.hSqlVKZ, @"SELECT rkrechdat, (zabuchdat-rkrechdat), sum(zadm)
INTO :frmVKZ.dtZinsRech, :frmVKZ.nZinsTage, :frmVKZ.nZinsZahl
FROM rk, za
WHERE " + Int.PalArztNr("rk", this.nArztNr, this.nArztNr2) + @" AND rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND rkrechnr<999990 AND zakz<4 AND rkdeaktiv IS NULL AND zadeaktiv IS NULL AND rkarztnr=zaarztnr AND rkrechnr=zarechnr
GROUP BY 1,2", "VKZ 100% Vorschuß", ref Var.nErr);
			this.nFetch = this.hSqlVKZ.FetchNext();
			while (this.nFetch != Sys.FETCH_EOF) 
			{
				if (this.dtZinsRechAlt != this.dtZinsRech) 
				{
					Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn),  sum(rkdmleis+rkdmarzn)
INTO :frmVKZ.nZinsOffen, :frmVKZ.nZinsRech
FROM rk
WHERE " + Int.PalArztNr("rk", this.nArztNr, this.nArztNr2) + @" AND rkdeaktiv IS NULL AND rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND rkrechnr<999990 AND rkrechdat = :frmVKZ.dtZinsRech");

					this.nZins = this.nZinsOffen * this.dfTVNZins.Number * (SalDateTime.Current - this.dtZinsRech) / 360m / 100;
					// Set nZinsKum = nZinsKum + nZins
					this.dfTVNZinskosten.Number = this.dfTVNZinskosten.Number + this.nZins;
					this.dtZinsRechAlt = this.dtZinsRech;
				}

				if (this.nZinsZahlKum < this.nZinsRech * this.dfTVNVorschuss.Number / 100) 
				{
					this.nZins = this.nZinsZahl * this.dfTVNZins.Number * this.nZinsTage / 360m / 100;
					this.nZinsKum = this.nZinsKum + this.nZins;
				}
				this.nZinsZahlKum = this.nZinsZahlKum + this.nZinsZahl;

				this.nFetch = this.hSqlVKZ.FetchNext();
			}
			this.hSqlVKZ.Commit();

			Int.SqlImmedSel(@"SELECT sum(tksoll)
INTO :frmVKZ.dfRGZinsen
FROM tka
WHERE " + Int.PalArztNr("tka", this.nArztNr, this.nArztNr2) + @" AND tkabeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND tkasa NOT IN (1,2) AND (tkabuchtext LIKE '%ZINSABSCHL%' OR tkabuchtext LIKE '%Zinsabschlag%') AND tkadeaktiv IS NULL ");
			// MG
			// 30.08.21 F4805 +  AND @scan(tkabuchtext, \'Mg.\')>=0
			Int.SqlImmedSel(@"SELECT sum(@value(@mid(tkabuchtext, 10, @scan(tkabuchtext, 'Mg.')-10))), sum(tkarechdm-tkatavst)
INTO :frmVKZ.dfMGAnz, :frmVKZ.dfMGGeb
FROM tka
WHERE " + Int.PalArztNr("tka", this.nArztNr, this.nArztNr2) + @" AND tkabeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND tkasa NOT IN (1,2) AND tkabuchtext LIKE 'Mahnungen %' AND tkadeaktiv IS NULL  AND @scan(tkabuchtext, 'Mg.')>=0");
			// 19.04.22 F4886
			this.nAnz = 0;
			this.nGeb = 0;
			Int.SqlImmedSel(@"SELECT sum(@value(@mid(tkabuchtext, 11, @scan(tkabuchtext, 'Stck.')-12))), sum(tkarechdm-tkatavst)
INTO :frmVKZ.nAnz, :frmVKZ.nGeb
FROM tka
WHERE " + Int.PalArztNr("tka", this.nArztNr, this.nArztNr2) + @" AND tkabeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND tkasa NOT IN (1,2) AND tkabuchtext LIKE 'Mahnungen %' AND tkadeaktiv IS NULL  AND @scan(tkabuchtext, 'Stck.')>=0");
			this.dfMGAnz.Number = this.dfMGAnz.Number + this.nAnz;
			this.dfMGGeb.Number = this.dfMGGeb.Number + this.nGeb;

			Int.SqlImmedSel(@"SELECT sum(tkadmzamahn), sum(tkadmzazins)
INTO :frmVKZ.dfMGZahl, :frmVKZ.dfMGZahlZins
FROM tka
WHERE " + Int.PalArztNr("tka", this.nArztNr, this.nArztNr2) + @" AND tkabeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND tkasa = 1 AND tkadeaktiv IS NULL");
            // MB
            // 11.06.21 Ä1962 @left(tkabuchtext, @scan(tkabuchtext, \' \')) IN (SELECT babuart FROM ba) ->
            // (@left(tkabuchtext, @scan(tkabuchtext, \' \')) IN (SELECT babuart FROM ba) OR @left(tkabuchtext, 14) IN (SELECT @left(babuchtext,14) FROM ba))
            //FC:FINAL:#35 Sql-Statement angepasst, damit es unter SqlServer ausgeführt werden kann
            //			Int.SqlImmedSel(@"SELECT sum(tkarechdm-tkatavst)
            //INTO :frmVKZ.dfMBGebAG
            //FROM tka
            //WHERE " + Int.PalArztNr("tka", this.nArztNr, this.nArztNr2) + @" AND tkabeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
            //AND tkatavst=0 AND tkadeaktiv IS NULL AND
            //(@left(tkabuchtext, @scan(tkabuchtext, ' ')) IN (SELECT babuart FROM ba) OR @left(tkabuchtext, 14) IN (SELECT @left(babuchtext,14) FROM ba))");
            Int.SqlImmedSel(@"SELECT sum(tkarechdm-tkatavst)
INTO :frmVKZ.dfMBGebAG
FROM tka
WHERE " + Int.PalArztNr("tka", this.nArztNr, this.nArztNr2) + @" AND tkabeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND tkatavst=0 AND tkadeaktiv IS NULL AND
( @left(tkabuchtext, @if((@scan(tkabuchtext, ' ')) +1 , @scan(tkabuchtext, ' '), 0)) IN (SELECT babuart FROM ba) OR @left(tkabuchtext, 14) IN (SELECT @left(babuchtext,14) FROM ba))");

            // 11.06.21 Ä1962 @left(tkabuchtext, @scan(tkabuchtext, \' \')) IN (SELECT babuart FROM ba) ->
            // (@left(tkabuchtext, @scan(tkabuchtext, \' \')) IN (SELECT babuart FROM ba) OR @left(tkabuchtext, 14) IN (SELECT @left(babuchtext,14) FROM ba))
            //FC:FINAL:#35 Sql-Statement angepasst, damit es unter SqlServer ausgeführt werden kann
            //			Int.SqlImmedSel(@"SELECT sum(tkarechdm-tkatavst)
            //INTO :frmVKZ.dfMBGebTVN
            //FROM tka
            //WHERE " + Int.PalArztNr("tka", this.nArztNr, this.nArztNr2) + @" AND tkabeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
            //AND tkatavst<>0 AND tkadeaktiv IS NULL AND
            //( @left(tkabuchtext, @scan(tkabuchtext, ' ')) IN (SELECT babuart FROM ba) OR @left(tkabuchtext, 14) IN (SELECT @left(babuchtext,14) FROM ba))");
            Int.SqlImmedSel(@"SELECT sum(tkarechdm-tkatavst)
INTO :frmVKZ.dfMBGebTVN
FROM tka
WHERE " + Int.PalArztNr("tka", this.nArztNr, this.nArztNr2) + @" AND tkabeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND tkatavst<>0 AND tkadeaktiv IS NULL AND
( @left(tkabuchtext, @if((@scan(tkabuchtext, ' ')) +1 , @scan(tkabuchtext, ' '), 0)) IN (SELECT babuart FROM ba) OR @left(tkabuchtext, 14) IN (SELECT @left(babuchtext,14) FROM ba))");
            Int.SqlImmedSel(@"SELECT sum(tkhaben-tkadmzaarzn), sum(tkadmzaarzn)
INTO :frmVKZ.dfMBGebTVNZahl, :frmVKZ.dfMBGebAGZahl
FROM tka
WHERE " + Int.PalArztNr("tka", this.nArztNr, this.nArztNr2) + @" AND tkabeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND tkasa=1 AND tkarechnr>=999990");
            // Storno / Neuberechnungen
            Int.SqlImmedSel(@"SELECT sum(tkarechdm-tkatavst)
INTO :frmVKZ.dfStorno
FROM tka
WHERE " + Int.PalArztNr("tka", this.nArztNr, this.nArztNr2) + @" AND tkadeaktiv IS NULL AND tkabeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND (@left(tkabuchtext, 4) IN ('Stor', 'NeuB') OR tkabuchtext LIKE 'Neue Berechnung%' OR tkabuchtext LIKE 'storno%')");

			this.dfMGZahl.Number = this.dfMGZahl.Number * -1;
			this.dfMGZahlZins.Number = this.dfMGZahlZins.Number * -1;
			this.dfMBGebTVNZahl.Number = this.dfMBGebTVNZahl.Number * -1;
			this.dfMBGebAGZahl.Number = this.dfMBGebAGZahl.Number * -1;
			this.dfRG.Number = this.dfRGGeb.Number + this.dfRGPorto.Number + this.dfRGZinsen.Number;
			this.dfMG.Number = this.dfMGGeb.Number + this.dfMBGebTVN.Number + this.dfMBGebAG.Number + this.dfMGZahl.Number + this.dfMGZahlZins.Number + this.dfMBGebTVNZahl.Number + this.dfMBGebAGZahl.Number;
			this.dfSoll.Number = this.dfRG.Number + this.dfMG.Number + this.dfStorno.Number;
			// 20.03.09
			Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn)
FROM rk
INTO :frmVKZ.dfMBAussenGes
WHERE rkkzzahl<2 AND rkrechnr<999990 AND rkdeaktiv IS NULL  AND rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND " + Int.PalArztNr("rk", this.nArztNr, this.nArztNr2));
			Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn)
FROM rk
INTO :frmVKZ.dfMBAussenNeg
WHERE rkkzzahl<2 AND rkrechnr<999990 AND rkdeaktiv IS NULL  AND rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND " + Int.PalArztNr("rk", this.nArztNr, this.nArztNr2) + @"
AND rkmahnstufe>3 AND rkarztnr*1000000+rkhalternr NOT IN (select akarztnr*1000000+akhalternr from ak where aktyp='BR'
AND " + Int.PalArztNr("ak", this.nArztNr, this.nArztNr2) + " AND akdeaktiv IS NULL)");
			Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn)
FROM rk
INTO :frmVKZ.dfMBAussenAb
WHERE rkkzzahl<2 AND rkdeaktiv IS NULL AND rkrechnr<999990  AND rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND " + Int.PalArztNr("rk", this.nArztNr, this.nArztNr2) + @"
AND rkarztnr*1000000+rkhalternr IN (select akarztnr*1000000+akhalternr from ak where aktyp='BR'
AND " + Int.PalArztNr("ak", this.nArztNr, this.nArztNr2) + " AND akdeaktiv IS NULL)");
			this.dfMBAussenGut.Number = this.dfMBAussenGes.Number - this.dfMBAussenAb.Number - this.dfMBAussenNeg.Number;
			this.PalMBErgebnis();
			// 21.12.09 OTÄ352
			this.SetStatusBarText("Berechne Vorschußinfos");
			this.dtZinsRechAlt = SalDateTime.Null;
			this.dfVIZins.Number = 0;
			this.nSumme = 0;
			Int.SqlImmed("DELETE FROM tde");
			// 21.03.16 F1606
			Int.SqlImmed("INSERT INTO tde (tdedat, tdetyp, tdeeuro) SELECT rkrechdat, \'VS\', sum(rkdmleis+rkdmarzn) * -1 * :frmVKZ.dfVIVorsch / 100 FROM rk WHERE " + Int.PalArztNr("rk", this.nArztNr, this.nArztNr2) + @" AND rkrechdat BETWEEN :frmVKZ.dfVon.Value
AND :frmVKZ.dfBis.Value AND
rkrechnr<999990
GROUP BY 1,2");
			if (this.cbVIBFS.Checked) 
			{
				Int.SqlImmed("INSERT INTO tde (tdedat, tdetyp, tdeeuro) SELECT rkrechdat, \'RG\', count(*) * :frmVKZ.dfVIEURRg FROM rk WHERE " + Int.PalArztNr("rk", this.nArztNr, this.nArztNr2) + @" AND rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND
rkrechnr<999990
GROUP BY 1,2");
			}
			// 21.03.13 F1606
			// Call SqlImmed('INSERT INTO tde SELECT zabuchdat, sum(zadm) FROM za WHERE ' || PalArztNr('za', nArztNr, nArztNr2) || ' AND zabuchdat BETWEEN :frmVKZ.dfVon AND :frmVKZ.dfBis AND zakz<4 GROUP BY 1')
			if (this.cbVIAltzahlungen.Checked) 
			{
				Int.SqlImmed("INSERT INTO tde (tdedat, tdetyp, tdeeuro) SELECT tkabeldat, \'ZA\', sum(tkhaben) FROM tka WHERE " + Int.PalArztNr("tka", this.nArztNr, this.nArztNr2) + @" AND tkabeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND tkarechnr
BETWEEN 1 AND 999989 GROUP
BY 1,2");
				Int.SqlImmed("INSERT INTO tde (tdedat, tdetyp, tdeeuro) SELECT tkbeldat, \'ZA\', sum(tkhaben) FROM tk WHERE " + Int.PalArztNr("tk", this.nArztNr, this.nArztNr2) + @" AND tkbeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND tkrechnr BETWEEN 1
AND 999989 GROUP BY
1,2");
			}
			else
			{
				Int.SqlImmed("INSERT INTO tde (tdedat, tdetyp, tdeeuro) SELECT tkabeldat, \'ZA\', sum(tkhaben) FROM tka, rk WHERE " + Int.PalArztNr("tka", this.nArztNr, this.nArztNr2) + @" AND tkabeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND tkarechnr
BETWEEN 1 AND 999989 AND tkaarztnr=rkarztnr AND tkahalternr=rkhalternr AND tkarechnr=rkrechnr AND rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
GROUP
BY 1,2");
				Int.SqlImmed("INSERT INTO tde (tdedat, tdetyp, tdeeuro) SELECT tkbeldat, \'ZA\', sum(tkhaben) FROM tk, rk WHERE " + Int.PalArztNr("tk", this.nArztNr, this.nArztNr2) + @" AND tkbeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND tkrechnr
BETWEEN 1 AND 999989 AND tkarztnr=rkarztnr AND tkhalternr=rkhalternr AND tkrechnr=rkrechnr AND rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
GROUP
BY 1,2");
			}

			if (this.tblVI.Populate(this.hSqlVKZ, @"SELECT tdedat, tdetyp, tdeeuro
INTO :frmVKZ.tblVI.colDatum, :frmVKZ.tblVI.colTyp, :frmVKZ.tblVI.colEuro
FROM tde ORDER BY tdedat", Sys.TBL_FillAll)) 
			{
                //FC:FINAL: replace cQuickGraph
                this.ccVI.Draw();
			}
			Sal.WaitCursor(false);
			// 28.07.14 F2046
			Sal.MessageBox("Die Berechnung ist jetzt beendet.", "Berechnung beendet", (Sys.MB_Ok | Sys.MB_IconAsterisk));

			#endregion
		}
		
		/// <summary>
		/// pbSonder WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSonder_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSonder_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSonder_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sal.IsNull(this.dfVon)) 
			{
				this.dfVon.Value = new SalDateTime(1900, 1, 1);
			}
			if (Sal.IsNull(this.dfBis)) 
			{
				this.dfBis.Value = SalDateTime.Current;
			}
			Sal.WaitCursor(true);
			this.SetStatusBarText("Berechne Kennzahlen Forderungsmanagement");
			if (this.tblFM.Populate(this.hSqlVKZ, @"SELECT (zabuchdat-rkrechdat), sum(zadm)
INTO :frmVKZ.tblFM.colTage, :frmVKZ.tblFM.colEuroE
FROM rk, za
WHERE rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND rkdeaktiv IS NULL AND zadeaktiv IS NULL
AND rkrechnr<999990 AND zakz<4 AND rkarztnr=zaarztnr AND rkrechnr=zarechnr
GROUP BY 1", Sys.TBL_FillAll)) 
			{
                //FC:FINAL: replace cQuickGraph
                this.ccFM.Draw();               
            }

            Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// dfZMHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfZMHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfZMHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfZMHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT hvn || ' ' || hnn, hname2, hstr, hort INTO :frmVKZ.dfHN1, :frmVKZ.dfHN2, :frmVKZ.dfHS, :frmVKZ.dfHO
FROM h
WHERE harztnr = :frmVKZ.dfArztNr AND hhalternr = :frmVKZ.dfZMHalterNr AND hdeaktiv IS NULL");
			#endregion
		}
		
		/// <summary>
		/// pbZMOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZMOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbZMOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZMOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sal.IsNull(this.dfVon)) 
			{
				this.dfVon.Value = new SalDateTime(1900, 1, 1);
			}
			if (Sal.IsNull(this.dfBis)) 
			{
				this.dfBis.Value = SalDateTime.Current;
			}
			if (this.dfArztNr2.Number != Sys.NUMBER_Null && this.dfArztNr2.Number != this.dfArztNr.Number) 
			{
				Var.strSelectBZ = " IN (" + this.dfArztNr.Number.ToString(0) + ", " + this.dfArztNr2.Number.ToString(0) + ") ";
			}
			else
			{
				Var.strSelectBZ = " = " + this.dfArztNr.Number.ToString(0) + " ";
			}
			if (this.dfZMHalterNr.Number != Sys.NUMBER_Null) 
			{
				Var.strSelectBZ = Var.strSelectBZ + "AND rkhalternr = :frmVKZ.dfZMHalterNr";
			}
			Sal.WaitCursor(true);
			this.strQuartalAlt = "";
			this.nRowHeader = SalNumber.Null;
			this.nSumRechDM = 0;
			this.nSumZahlDM = 0;
			this.nSumAusbuchDM = 0;
			this.nSumZahlTage = 0;
			this.nSumUnbezahltDM = 0;
			this.nSumUnbezahltTage = 0;
			this.nSumZahlProz = 0;
			this.dtRechAlt = new SalDateTime(1900, 1, 1);
			this.SetStatusBarText("Berechne Zahlungsmoral");
			if (this.dfZMHalterNr.Number == 0 || this.dfZMHalterNr.Number == Sys.NUMBER_Null) 
			{
				// If SalTblPopulate(tblZM,hSqlVKZ,
				// 'SELECT @YEAR(rkrechdat), @QUARTER(rkrechdat), rkrechdat, @MEDIAN(zabuchdat-rkrechdat), sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins),
				// sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkzazins),
				// SUM(@decode(zakz, 0, zadm, 1, zadm, 2, zadm, 3, zadm, 0)), SUM(@decode(zakz, 0, 0, 1, 0, 2, 0, 3, 0, zadm))
				// INTO :frmVKZ.nY, :frmVKZ.nQ, :frmVKZ.tblZM.colDatum, :frmVKZ.tblZM.colZahlTage, :frmVKZ.tblZM.colRechDM, :frmVKZ.tblZM.colUnbezahltDM,
				// :frmVKZ.tblZM.colZahlDM, :frmVKZ.tblZM.colAusbuchDM
				// FROM rk, za
				// WHERE rkarztnr=zaarztnr(+) AND rkhalternr=zahalternr(+) AND rkrechnr=zarechnr(+)
				// AND rkrechdat BETWEEN :frmVKZ.dfVon AND :frmVKZ.dfBis
				// AND rkrechnr<999990
				// and rkarztnr' || strSelectBZ || ' GROUP BY 1,2,3',TBL_FillAll)
				// Call SalStatusSetText(frmVKZ,'')
				if (this.tblZM.Populate(this.hSqlVKZ, @"SELECT @YEAR(rkrechdat), @QUARTER(rkrechdat), rkrechdat, sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins),
sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkzazins),
sum( @CHOOSE( rkkzzahl, 0,0, rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl))
INTO :frmVKZ.nY, :frmVKZ.nQ, :frmVKZ.tblZM.colDatum, :frmVKZ.tblZM.colRechDM, :frmVKZ.tblZM.colUnbezahltDM, :frmVKZ.nAusMSZins
FROM rk
WHERE rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND rkrechnr<999990 AND rkdeaktiv IS NULL
and rkarztnr" + Var.strSelectBZ + " GROUP BY 1,2,3", Sys.TBL_FillAll)) 
				{
					this.SetStatusBarText("");
				}
				this.tblZM.colRechNr.HideWindow();
			}
			else
			{
				// If SalTblPopulate(tblZM,hSqlVKZ,
				// 'SELECT @YEAR(rkrechdat), @QUARTER(rkrechdat), rkrechdat, sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins),
				// sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkzazins),
				// sum( @CHOOSE( rkkzzahl, 0,0, rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl))
				// INTO :frmVKZ.nY, :frmVKZ.nQ, :frmVKZ.tblZM.colDatum, :frmVKZ.tblZM.colRechNr, :frmVKZ.tblZM.colZahlTage, :frmVKZ.tblZM.colRechDM, :frmVKZ.tblZM.colUnbezahltDM, :frmVKZ.nAusMSZins
				// FROM rk
				// WHERE rkrechdat BETWEEN :frmVKZ.dfVon AND :frmVKZ.dfBis
				// AND rkrechnr<999990
				// and rkarztnr' || strSelectBZ || ' GROUP BY 1,2,3',TBL_FillAll)
				// Call SalStatusSetText(frmVKZ,'')
				if (this.tblZM.Populate(this.hSqlVKZ, @"SELECT @YEAR(rkrechdat), @QUARTER(rkrechdat), rkrechdat, sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins),
sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkzazins),
sum( @CHOOSE( rkkzzahl, 0,0, rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl))
INTO :frmVKZ.nY, :frmVKZ.nQ, :frmVKZ.tblZM.colDatum, :frmVKZ.tblZM.colRechDM, :frmVKZ.tblZM.colUnbezahltDM, :frmVKZ.nAusMSZins
FROM rk
WHERE rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND rkrechnr<999990 AND rkdeaktiv IS NULL
and rkarztnr" + Var.strSelectBZ + " GROUP BY 1,2,3", Sys.TBL_FillAll)) 
				{
					this.SetStatusBarText("");
				}
				this.tblZM.colRechNr.ShowWindow();
			}
			Sal.WaitCursor(false);

			this.tblZM.SetFocusRow(this.nRowHeader);
			this.tblZM.colRechDM.Number = this.nSumRechDM;
			this.tblZM.colZahlDM.Number = this.nSumZahlDM;
			this.tblZM.colAusbuchDM.Number = this.nSumAusbuchDM;
			this.tblZM.colZahlTage.Number = this.nSumZahlTage;
			if (this.tblZM.colZahlDM.Number != 0 && this.tblZM.colZahlDM.Number != Sys.NUMBER_Null) 
			{
				this.tblZM.colZahlTage.Number = this.tblZM.colZahlTage.Number / this.tblZM.colZahlDM.Number;
				this.tblZM.colZahlProz.Number = this.nSumZahlDM / this.nSumRechDM * 100;
			}
			this.tblZM.colUnbezahltDM.Number = this.nSumUnbezahltDM;
			if (this.tblZM.colUnbezahltDM.Number != 0 && this.tblZM.colUnbezahltDM.Number != Sys.NUMBER_Null) 
			{
				this.tblZM.colUnbezahltTage.Number = this.nSumUnbezahltTage / this.tblZM.colUnbezahltDM.Number;
			}
            //FC:FINAL:#52
            //MT.MTbl.SortTree(this.tblZM, MT.MTbl.MTST_TOPDOWN);
			MT.MTbl.SetTreeFlags(this.pbZMOk, MT.MTbl.MTBL_TREE_FLAG_INDENT_ALL, true);
			MT.MTbl.AutoSizeRows(this.tblZM, Const.MTASR_ALLROWS);
            //FC:FINAL: replace cQuickGraph
            MT.MTbl.CollapseParentRows(this.tblZM);
            this.ccZM.Draw();
            #endregion
        }

        /// <summary>
        /// pbGSOk WindowActions Handler
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void pbGSOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbGSOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbGSOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sal.IsNull(this.dfVon)) 
			{
				this.dfVon.Value = new SalDateTime(1900, 1, 1);
			}
			if (Sal.IsNull(this.dfBis)) 
			{
				this.dfBis.Value = SalDateTime.Current;
			}
			if (this.dfBis.Value > SalDateTime.Current.MonthBegin() - 1) 
			{
				this.dfBis.Value = SalDateTime.Current.MonthBegin() - 1;
			}
			if (this.dfArztNr2.Number != Sys.NUMBER_Null && this.dfArztNr2.Number != this.dfArztNr.Number) 
			{
				Var.strSelectBZ = " IN (" + this.dfArztNr.Number.ToString(0) + ", " + this.dfArztNr2.Number.ToString(0) + ") ";
			}
			else
			{
				Var.strSelectBZ = " = " + this.dfArztNr.Number.ToString(0) + " ";
			}
			this.tblGS.ResetTable();
			Sal.WaitCursor(true);
			this.strQuartalAlt = "";
			this.nRowHeader = SalNumber.Null;
			this.nSumRechDM = 0;
			this.nSumZahlDM = 0;
			this.nSumAusbuchDM = 0;
			this.nAnzahl = 0;
			this.nGebBFS = 0;
			this.nGebMov = 0;
			this.nMehrkosten = 0;
			this.nUeberwTA = 0;
			this.nSaldoTA = 0;
			this.nSaldo = 0;
			// Set nSumZahlTage = 0
			// Set nSumUnbezahltDM = 0
			// Set nSumUnbezahltTage = 0
			// Set nSumZahlProz = 0
			// Call SqlImmedSel( 'SELECT avorschproz INTO :frmVKZ.nAVorschProz FROM a WHERE aarztnr ' || strSelectBZ )
			// If nAVorschProz = NUMBER_Null
			// Set nAVorschProz = 0

			this.dtRechAlt = new SalDateTime(1900, 1, 1);
			this.SetStatusBarText("Berechne Gebührensimulation");
			if (this.tblGS.Populate(this.hSqlVKZ, @"SELECT @YEAR(akdatum), @MONTH(akdatum), SUM(akrechsumm), SUM(akdm), SUM(akanzahl)
INTO :frmVKZ.nY, :frmVKZ.tblGS.colDatum, :frmVKZ.tblGS.colRech, :frmVKZ.tblGS.colGebMov, :frmVKZ.tblGS.colAnzahl
FROM ak
WHERE aktyp='RG' AND aktypdetail='UebOP' AND akdatum BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
and akarztnr" + Var.strSelectBZ + " GROUP BY 1,2", Sys.TBL_FillAll)) 
			{
				this.SetStatusBarText("");
			}
			Sal.WaitCursor(false);

			this.tblGS.SetFocusRow(this.nRowHeader);
			this.tblGS.colRech.Number = this.nSumRechDM;
			this.tblGS.colZahl.Number = this.nSumZahlDM;
			this.tblGS.colAusbuch.Number = this.nSumAusbuchDM;
			this.tblGS.colAnzahl.Number = this.nAnzahl;
			this.tblGS.colGebMov.Number = this.nGebMov;
			this.tblGS.colGebBFS.Number = this.nGebBFS;
			this.tblGS.colMehrkostenBFS.Number = this.nMehrkosten;
			this.tblGS.colUeberwBFS.Number = this.nUeberwTA;
			this.tblGS.colSaldoTABFS.Number = this.nSaldoTA;
			this.tblGS.colGSSaldo.Number = this.nSaldo;
            // Set frmVKZ.tblGS.colZahlTage = nSumZahlTage
            // If frmVKZ.tblGS.colZahlDM != 0 and frmVKZ.tblGS.colZahlDM != NUMBER_Null
            // Set frmVKZ.tblGS.colZahlTage = frmVKZ.tblGS.colZahlTage / frmVKZ.tblGS.colZahlDM
            // Set frmVKZ.tblGS.colZahlProz = nSumZahlDM / nSumRechDM * 100
            // Set frmVKZ.tblGS.colUnbezahltDM = nSumUnbezahltDM
            // If frmVKZ.tblGS.colUnbezahltDM != 0 and frmVKZ.tblGS.colUnbezahltDM != NUMBER_Null
            // Set frmVKZ.tblGS.colUnbezahltTage = nSumUnbezahltTage / frmVKZ.tblGS.colUnbezahltDM
            //FC:FINAL:#52
            //MT.MTbl.SortTree(this.tblGS, MT.MTbl.MTST_TOPDOWN);
            MT.MTbl.SetTreeFlags(this.pbGSOk, MT.MTbl.MTBL_TREE_FLAG_INDENT_ALL, true);
			MT.MTbl.AutoSizeRows(this.tblGS, Const.MTASR_ALLROWS);
			MT.MTbl.CollapseParentRows(this.tblGS);
            // Set ccGS.Graph.DataSource = "tblZM"
            // Set ccZM.Graph.DataField[0] = 'colQ'
            // Set ccZM.Graph.DataField[1] = 'colZahlTage'
            // Set ccGraph.Graph.GraphTitle = ccGraphPie.Graph.LegendText[Graph.HitPoint] || ' 1995 Expenses'
            // Set ccZM.Graph.NumDataFields = 2
            // Set ccZM.Graph.DrawMode = 3
            // Call ccZM.Draw()
            #endregion
        }
		
		/// <summary>
		/// pbDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDruck_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDruck_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PrintParams.Init();
			this.objPrintLine.Init();
			if (this.dfZMHalterNr.Number == 0 || this.dfZMHalterNr.Number == Sys.NUMBER_Null) 
			{
				this.PrintParams.DocName = "Zahlungsmoral Mitglied " + this.dfArztNr.Number.ToString(0);
				this.objPrintLine.CenterText = "Zahlungsmoral Mitglied " + this.dfArztNr.Number.ToString(0) + " " + Int.PalDateToStrDE(this.dfVon.Value) + " bis " + Int.PalDateToStrDE(this.dfBis.Value) + " - Seite %PAGENR% / %PAGECOUNT%";
			}
			else
			{
				this.PrintParams.DocName = "Zahlungsmoral Halter " + this.dfArztNr.Number.ToString(0) + "/" + this.dfZMHalterNr.Number.ToString(0);
				this.objPrintLine.CenterText = "Zahlungsmoral Halter " + this.dfArztNr.Number.ToString(0) + "/" + this.dfZMHalterNr.Number.ToString(0) + " " + this.dfHN1.Text + " " + Int.PalDateToStrDE(this.dfVon.Value) + " bis " + Int.PalDateToStrDE(this.dfBis.Value) + 
				" - Seite %PAGENR% / %PAGECOUNT%";
			}
			this.PrintParams.AddTitle(this.objPrintLine);
			this.PrintParams.Orientation = MT.MTbl.MTP_OR_PORTRAIT;
			this.nResult = this.lbPrinters.GetListSelectedIndex();
			if (this.nResult == Sys.LB_Err) 
			{
				this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			}
			else
			{
				this.strDevice = this.lbPrinters.GetListItemText(this.nResult);
			}
			this.PrintParams.PrinterName = this.strDevice;
			// Set strDevice = MTblPrintGetDefPrinterName(  )
			// Set PrintParams.PrinterName = strDevice
			// 07.11.13 F1760
			this.PrintParams.Language = MT.MTbl.MTP_LNG_GERMAN;

			MT.MTbl.Print(this.tblZM, this.PrintParams);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nAnz = MT.MTbl.PrintGetPrinterNames(this.strPrinters);
			this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			this.nOff = -1;
			this.nResult = 0;
			while (this.nResult < this.nAnz) 
			{
				this.lbPrinters.AddListItem(this.strPrinters[this.nResult]);
				if (this.strPrinters[this.nResult] == this.strDevice) 
				{
					this.nOff = this.nResult;
				}
				this.nResult = this.nResult + 1;
			}
			if (this.nOff >= 0) 
			{
				this.lbPrinters.SetListSelectedIndex(this.nOff);
			}
			#endregion
		}
		
		/// <summary>
		/// pbGSDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbGSDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbGSDruck_OnSAM_Click(sender, e);
					break;
				
				// On SAM_Create
				
				// Set nAnz = MTblPrintGetPrinterNames( strPrinters )
				
				// Set strDevice = MTblPrintGetDefPrinterName(  )
				
				// Set nOff = -1
				
				// Set nResult = 0
				
				// While nResult < nAnz
				
				// Call SalListAdd( lbPrinters, strPrinters[nResult] )
				
				// If strPrinters[nResult] = strDevice
				
				// Set nOff = nResult
				
				// Set nResult = nResult + 1
				
				// If nOff >= 0
				
				// Call SalListSetSelect( lbPrinters, nOff )
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbGSDruck_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PrintParams.Init();
			this.PrintParams.GridType = MT.MTbl.MTP_GT_STANDARD;
			this.PrintParams.FitCellSize = true;
			this.objPrintLine.Init();
			this.PrintParams.DocName = "Gebührensimulation Mitglied " + this.dfArztNr.Number.ToString(0);
			this.objPrintLine.CenterText = "Gebührensimulation Mitglied " + this.dfArztNr.Number.ToString(0) + " " + Int.PalDateToStrDE(this.dfVon.Value) + " bis " + Int.PalDateToStrDE(this.dfBis.Value) + " - Seite %PAGENR% / %PAGECOUNT%";
			this.PrintParams.AddTitle(this.objPrintLine);
			this.objPrintLine.Init();
			this.objPrintLine.CenterText = "Grenzbeträge in €: " + this.dfG3.Number.ToString(2) + " / " + this.dfG4.Number.ToString(2) + " / " + this.dfG5.Number.ToString(2);
			this.PrintParams.AddTitle(this.objPrintLine);
			this.PrintParams.Orientation = MT.MTbl.MTP_OR_LANDSCAPE;
			this.nResult = this.lbPrinters.GetListSelectedIndex();
			if (this.nResult == Sys.LB_Err) 
			{
				this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			}
			else
			{
				this.strDevice = this.lbPrinters.GetListItemText(this.nResult);
			}
			this.PrintParams.PrinterName = this.strDevice;
			// Set strDevice = MTblPrintGetDefPrinterName(  )
			// Set PrintParams.PrinterName = strDevice
			// 07.11.13 F1760
			this.PrintParams.Language = MT.MTbl.MTP_LNG_GERMAN;

			this.nResult = MT.MTbl.Print(this.tblGrS, this.PrintParams);
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// tblFM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblFM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_FetchRowDone:
					this.tblFM_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblFM_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalTblSetContext(tblFM, lParam)
			this.nSumme = this.nSumme + this.tblFM.colEuroE.Number;
			this.tblFM.colEuro.Number = this.nSumme;
			#endregion
		}
		
		/// <summary>
		/// cbMBVorfinanz WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbMBVorfinanz_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbMBVorfinanz_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbMBVorfinanz_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(this.cbMBVorfinanz.Checked)) 
			{
				this.cbMBAusfall.Checked = false;
			}
			this.PalBFSGeb();
			#endregion
		}
		
		/// <summary>
		/// cbMBAusfall WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbMBAusfall_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbMBAusfall_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbMBAusfall_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(this.cbMBVorfinanz.Checked)) 
			{
				this.cbMBVorfinanz.Checked = true;
			}
			this.PalBFSGeb();
			#endregion
		}
		
		/// <summary>
		/// pbMBOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMBOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbMBOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMBOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalMBErgebnis();
			#endregion
		}
		
		/// <summary>
		/// tblVI WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblVI_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_FetchRowDone:
					this.tblVI_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblVI_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.bAuszJa = false;
			if (this.tblVI.colKum.Number == Sys.NUMBER_Null) 
			{
				this.tblVI.colKum.Number = 0;
			}
			this.tblVI.colKum.Number = this.nSumme + this.tblVI.colEuro.Number;
			if (this.tblVI.colEuro.Number < 0 && this.tblVI.colTyp.Text == "VS" && !(this.cbVIBFS.Checked)) 
			{
				this.tblVI.colZins.Number = this.tblVI.colEuro.Number * 0.5m / 100 * -1;
			}
			else if (this.cbVIBFS.Checked && this.tblVI.colTyp.Text == "RG") 
			{
				this.tblVI.colZins.Number = this.tblVI.colEuro.Number;
			}
			else
			{
				if (this.dtZinsRechAlt != SalDateTime.Null && this.tblVI.colKum.Number < 0) 
				{
					this.tblVI.colZins.Number = this.tblVI.colKum.Number * (this.tblVI.colDatum.DateTime - this.dtZinsRechAlt) / 360 * this.dfTVNZins.Number / 100;
					this.dfVIZins.Number = this.dfVIZins.Number + this.tblVI.colZins.Number;
				}
				else
				{
					this.tblVI.colZins.Number = 0;
				}
				if (!(this.bAuszahlung) && !(this.cbVIBFS.Checked)) 
				{
					if (this.tblVI.colDatum.DateTime.Day() < 3) 
					{
						this.bAuszahlung = true;
						if (this.tblVI.colKum.Number > 0) 
						{
							this.tblVI.colKum.Number = 0;
							this.nSumme = 0;
							this.bAuszJa = true;
						}
					}
				}
				if (!(this.bAuszahlungM) && !(this.cbVIBFS.Checked)) 
				{
					if (this.tblVI.colDatum.DateTime.Day() >= 15 && this.tblVI.colDatum.DateTime.Day() <= 18) 
					{
						this.bAuszahlungM = true;
						if (this.tblVI.colKum.Number > 0) 
						{
							this.tblVI.colKum.Number = 0;
							this.nSumme = 0;
							this.bAuszJa = true;
						}
					}
				}
				if (this.tblVI.colDatum.DateTime.Day() >= 15 && this.tblVI.colDatum.DateTime.Day() <= 18) 
				{
					this.bAuszahlung = false;
				}
				else if (this.tblVI.colDatum.DateTime.Day() < 3) 
				{
					this.bAuszahlungM = false;
				}
			}
			this.dfVIZins.Number = this.dfVIZins.Number + this.tblVI.colZins.Number;
			this.dfVIKonto.Number = this.tblVI.colKum.Number;
			this.dfVIGewinn.Number = this.dfVIKonto.Number + this.dfVIZins.Number;
			if (!(this.bAuszJa)) 
			{
				this.nSumme = this.nSumme + this.tblVI.colEuro.Number;
			}
			this.dtZinsRechAlt = this.tblVI.colDatum.DateTime;
			#endregion
		}
		
		/// <summary>
		/// pbVISonder WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbVISonder_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbVISonder_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbVISonder_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			// 21.12.09 OTÄ352
			this.SetStatusBarText("Berechne Vorschußinfos");
			this.dtZinsRechAlt = SalDateTime.Null;
			this.dfVIZins.Number = 0;
			this.nSumme = 0;
			Int.SqlImmed("DELETE FROM tde");
			// 21.03.13 F1606
			// Call SqlImmed('INSERT INTO tde SELECT rkrechdat, sum(rkdmleis+rkdmarzn) *-1 * :frmVKZ.dfVIVorsch / 100 FROM rk WHERE rkrechdat BETWEEN :frmVKZ.dfVon AND :frmVKZ.dfBis AND rkrechnr<999990
			// GROUP BY 1')
			// Call SqlImmed('INSERT INTO tde SELECT zabuchdat, sum(zadm) FROM za WHERE zabuchdat BETWEEN :frmVKZ.dfVon AND :frmVKZ.dfBis AND zakz<4 GROUP BY 1')
			Int.SqlImmed(@"INSERT INTO tde (tdedat, tdetyp, tdeeuro) SELECT rkrechdat, 'VS', sum(rkdmleis+rkdmarzn) * -1 * :frmVKZ.dfVIVorsch / 100 FROM rk WHERE rkrechdat BETWEEN :frmVKZ.dfVon.Value
AND :frmVKZ.dfBis.Value AND
rkrechnr<999990
GROUP BY 1,2");
			if (this.cbVIBFS.Checked) 
			{
				Int.SqlImmed(@"INSERT INTO tde (tdedat, tdetyp, tdeeuro) SELECT rkrechdat, 'RG', count(*) * :frmVKZ.dfVIEURRg FROM rk WHERE rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND
rkrechnr<999990
GROUP BY 1,2");
			}
			if (this.cbVIAltzahlungen.Checked) 
			{
				Int.SqlImmed(@"INSERT INTO tde (tdedat, tdetyp, tdeeuro) SELECT tkabeldat, 'ZA', sum(tkhaben) FROM tka WHERE tkabeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND tkarechnr
BETWEEN 1 AND 999989 GROUP
BY 1,2");
				Int.SqlImmed(@"INSERT INTO tde (tdedat, tdetyp, tdeeuro) SELECT tkbeldat, 'ZA', sum(tkhaben) FROM tk WHERE tkbeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND tkrechnr BETWEEN 1
AND 999989 GROUP BY
1,2");
			}
			else
			{
				Int.SqlImmed(@"INSERT INTO tde (tdedat, tdetyp, tdeeuro) SELECT tkabeldat, 'ZA', sum(tkhaben) FROM tka, rk WHERE tkabeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND tkarechnr
BETWEEN 1 AND 999989 AND tkaarztnr=rkarztnr AND tkahalternr=rkhalternr AND tkarechnr=rkrechnr AND rkrechdat BETWEEN :frmVKZ.dfVon AND :frmVKZ.dfBis
GROUP
BY 1,2");
				Int.SqlImmed(@"INSERT INTO tde (tdedat, tdetyp, tdeeuro) SELECT tkbeldat, 'ZA', sum(tkhaben) FROM tk, rk WHERE tkbeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND tkrechnr
BETWEEN 1 AND 999989 AND tkarztnr=rkarztnr AND tkhalternr=rkhalternr AND tkrechnr=rkrechnr AND rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
GROUP
BY 1,2");
			}

			if (this.tblVI.Populate(this.hSqlVKZ, @"SELECT tdedat, tdeeuro
INTO :frmVKZ.tblVI.colDatum, :frmVKZ.tblVI.colEuro
FROM tde ORDER BY tdedat", Sys.TBL_FillAll)) 
			{
                //FC:FINAL: replace cQuickGraph
                this.ccVI.Draw();
            }
            Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// pbVISonderV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbVISonderV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbVISonderV_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbVISonderV_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			// 21.12.09 OTÄ352
			this.SetStatusBarText("Berechne Vorschußinfos");
			this.dtZinsRechAlt = SalDateTime.Null;
			this.dfVIZins.Number = 0;
			this.nSumme = 0;
			Int.SqlImmed("DELETE FROM tde");
			// 21.03.13 F1606
			// Call SqlImmed('INSERT INTO tde SELECT rkrechdat, sum(rkdmleis+rkdmarzn) *-1 * :frmVKZ.dfVIVorsch / 100
			// FROM rk,a
			// WHERE aarztnr=rkarztnr AND avorschproz>30 AND rkrechdat BETWEEN :frmVKZ.dfVon AND :frmVKZ.dfBis AND rkrechnr<999990
			// GROUP BY 1')
			// Call SqlImmed('INSERT INTO tde SELECT zabuchdat, sum(zadm)
			// FROM za,a
			// WHERE aarztnr=zaarztnr AND avorschproz>30 AND zabuchdat BETWEEN :frmVKZ.dfVon AND :frmVKZ.dfBis AND zakz<4 GROUP BY 1')
			Int.SqlImmed(@"INSERT INTO tde (tdedat, tdetyp, tdeeuro) SELECT rkrechdat, 'VS', sum(rkdmleis+rkdmarzn) * -1 * :frmVKZ.dfVIVorsch / 100 FROM rk,a WHERE aarztnr=rkarztnr AND avorschproz>30 AND rkrechdat BETWEEN :frmVKZ.dfVon.Value
AND :frmVKZ.dfBis.Value AND
rkrechnr<999990
GROUP BY 1,2");
			if (this.cbVIBFS.Checked) 
			{
				Int.SqlImmed(@"INSERT INTO tde (tdedat, tdetyp, tdeeuro) SELECT rkrechdat, 'RG', count(*) * :frmVKZ.dfVIEURRg FROM rk,a WHERE aarztnr=rkarztnr AND avorschproz>30 AND rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND
rkrechnr<999990
GROUP BY 1,2");
			}
			if (this.cbVIAltzahlungen.Checked) 
			{
				Int.SqlImmed(@"INSERT INTO tde (tdedat, tdetyp, tdeeuro) SELECT tkabeldat, 'ZA', sum(tkhaben) FROM tka,a WHERE aarztnr=rkarztnr AND avorschproz>30 AND tkabeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND tkarechnr
BETWEEN 1 AND 999989 GROUP
BY 1,2");
				Int.SqlImmed(@"INSERT INTO tde (tdedat, tdetyp, tdeeuro) SELECT tkbeldat, 'ZA', sum(tkhaben) FROM tk,a WHERE aarztnr=rkarztnr AND avorschproz>30 AND tkbeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND tkrechnr BETWEEN
1
AND 999989 GROUP BY
1,2");
			}
			else
			{
				Int.SqlImmed(@"INSERT INTO tde (tdedat, tdetyp, tdeeuro) SELECT tkabeldat, 'ZA', sum(tkhaben) FROM tka, rk,a WHERE aarztnr=rkarztnr AND avorschproz>30 AND tkabeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND tkarechnr
BETWEEN 1 AND 999989 AND tkaarztnr=rkarztnr AND tkahalternr=rkhalternr AND tkarechnr=rkrechnr AND rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
GROUP
BY 1,2");
				Int.SqlImmed(@"INSERT INTO tde (tdedat, tdetyp, tdeeuro) SELECT tkbeldat, 'ZA', sum(tkhaben) FROM tk, rk,a WHERE aarztnr=rkarztnr AND avorschproz>30 AND tkbeldat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND tkrechnr
BETWEEN 1 AND 999989 AND tkarztnr=rkarztnr AND tkhalternr=rkhalternr AND tkrechnr=rkrechnr AND rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
GROUP
BY 1,2");
			}

			if (this.tblVI.Populate(this.hSqlVKZ, @"SELECT tdedat, tdeeuro
INTO :frmVKZ.tblVI.colDatum, :frmVKZ.tblVI.colEuro
FROM tde ORDER BY tdedat", Sys.TBL_FillAll)) 
			{
                //FC:FINAL: replace cQuickGraph
                this.ccVI.Draw();                
            }
            Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// pbMADruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMADruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbMADruck_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMADruck_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			dlgLlDruck.ModalDialog(App.frmMain, "VKZ-Mg.lst", "");
			#endregion
		}
		
		/// <summary>
		/// pbMBausDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMBausDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbMBausDruck_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMBausDruck_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			dlgLlDruck.ModalDialog(App.frmMain, "VKZ-MBaus.lst", "");
			#endregion
		}
		
		/// <summary>
		/// pbInsolDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbInsolDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbInsolDruck_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbInsolDruck_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			dlgLlDruck.ModalDialog(App.frmMain, "VKZ-Insol.lst", "");
			#endregion
		}
		
		/// <summary>
		/// pbRaZaDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRaZaDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRaZaDruck_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRaZaDruck_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			dlgLlDruck.ModalDialog(App.frmMain, "VKZ-RaZa.lst", "");
			#endregion
		}
		
		/// <summary>
		/// tblRgInfo WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblRgInfo_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_FetchRowDone:
					this.tblRgInfo_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblRgInfo_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT sum(akrechsumm) INTO :frmVKZ.tblRgInfo.colHF FROM ak WHERE aktyp='RG' AND aktypdetail = 'UebOP'
AND akarztnr" + Var.strSelectBZ + " AND @YEAR(akdatum)+1900 = :frmVKZ.tblRgInfo.colJahr AND akdeaktiv IS NULL");
			#endregion
		}
		
		/// <summary>
		/// pbRgInfoDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRgInfoDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRgInfoDruck_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRgInfoDruck_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			dlgLlDruck.ModalDialog(App.frmMain, "VKZ-RgInfo.lst", "");
			#endregion
		}
		
		/// <summary>
		/// tblRgInfoa WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblRgInfoa_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_FetchRowDone:
					this.tblRgInfoa_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblRgInfoa_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT sum(akrechsumm) INTO :frmVKZ.tblRgInfoa.colHF FROM ak WHERE aktyp='RG' AND aktypdetail = 'UebOP'
AND akarztnr" + Var.strSelectBZ + " AND @YEAR(akdatum)+1900 = :frmVKZ.tblRgInfoa.colJahr AND akdeaktiv IS NULL");
			#endregion
		}
		
		/// <summary>
		/// pbRgInfoDrucka WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRgInfoDrucka_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRgInfoDrucka_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRgInfoDrucka_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			dlgLlDruck.ModalDialog(App.frmMain, "VKZ-RgInfoa.lst", "");
			#endregion
		}
		
		/// <summary>
		/// pbJZOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbJZOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbJZOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbJZOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sal.IsNull(this.dfVon)) 
			{
				this.dfVon.Value = new SalDateTime(1900, 1, 1);
			}
			if (Sal.IsNull(this.dfBis)) 
			{
				this.dfBis.Value = SalDateTime.Current;
			}
			if (this.cbVKZAlle.Checked) 
			{
				Var.strSelectBZ = " BETWEEN 1 AND 9999 ";
			}
			else
			{
				if (this.dfArztNr2.Number != Sys.NUMBER_Null && this.dfArztNr2.Number != this.dfArztNr.Number) 
				{
					Var.strSelectBZ = " IN (" + this.dfArztNr.Number.ToString(0) + ", " + this.dfArztNr2.Number.ToString(0) + ") ";
				}
				else
				{
					Var.strSelectBZ = " = " + this.dfArztNr.Number.ToString(0) + " ";
				}
			}
			Sal.WaitCursor(true);
			this.SetStatusBarText("Berechne Mahnungen");
			if (this.tblMahn.Populate(this.hSqlVKZ, @"SELECT @YEAR(akdatum)+1900, aktypdetail, SUM(akanzahl)
INTO :frmVKZ.tblMahn.colJahr, :frmVKZ.tblMahn.colStufe, :frmVKZ.tblMahn.colAnzahl
FROM ak WHERE akdatum BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND aktyp = 'MG' AND (aktypdetail LIKE 'MS%' OR aktypdetail LIKE 'Rat%') AND akdeaktiv IS NULL AND akarztnr" + Var.strSelectBZ + " GROUP BY 1,2", Sys.TBL_FillAll)) 
			{
				this.SetStatusBarText("Berechne MB-Ausbuchungen");
				if (this.tblMBAus.Populate(this.hSqlVKZ, @"SELECT @YEAR(prdatum)+1900, SUM(zadm), COUNT(DISTINCT zaproznr)
INTO :frmVKZ.tblMBAus.colJahr, :frmVKZ.tblMBAus.colSumme, :frmVKZ.tblMBAus.colAnzahl
FROM za, pr
WHERE prdatum BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND zadeaktiv IS NULL
AND zakz>= 4 AND prnr = zaproznr AND zaarztnr" + Var.strSelectBZ + " GROUP BY 1", Sys.TBL_FillAll)) 
				{
					this.SetStatusBarText("Berechne Insolvenzen");
					if (this.tblInsol.Populate(this.hSqlVKZ, @"SELECT @YEAR(akdatum)+1900, SUM(zadm), COUNT(zaproznr)
INTO :frmVKZ.tblInsol.colJahr, :frmVKZ.tblInsol.colSumme, :frmVKZ.tblInsol.colAnzahl
FROM za, ak
WHERE akdatum BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND aktypdetail = 'Insol' AND zakz>= 4  AND akdeaktiv IS NULL AND zadeaktiv IS NULL
AND akarztnr = zaarztnr AND akhalternr = zahalternr AND zaarztnr" + Var.strSelectBZ + " GROUP BY 1", Sys.TBL_FillAll)) 
					{
						this.SetStatusBarText("Berechne Ratenzahler");
						if (this.tblRaZa.Populate(this.hSqlVKZ, @"SELECT @YEAR(akdatum)+1900, aktypdetail, count(*)
INTO :frmVKZ.tblRaZa.colJahr, :frmVKZ.tblRaZa.colStufe, :frmVKZ.tblRaZa.colAnzahl
FROM ak WHERE akdatum BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value AND akdeaktiv IS NULL
AND aktyp = 'RZ' AND akarztnr" + Var.strSelectBZ + " GROUP BY 1,2", Sys.TBL_FillAll)) 
						{
							this.SetStatusBarText("Berechne Rechnungsinfos");
							// 07.08.14 F2108 DISTINCT zarechnr -> DISTINCT zaarztnr*1000000 + zarechnr
							if (this.tblRgInfo.Populate(this.hSqlVKZ, @"SELECT @year(rkrechdat) + 1900, @choose(@INT((@IF(@ISNA(zabuchdat), sysdate, zabuchdat)-rkrechdat)/30),'30','60','90','999'), sum(zadm), count( DISTINCT zaarztnr*1000000 + zarechnr)
INTO :frmVKZ.tblRgInfo.colJahr, :frmVKZ.tblRgInfo.colStufe, :frmVKZ.tblRgInfo.colSumme, :frmVKZ.tblRgInfo.colAnzahl
FROM rk, za WHERE rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value and zaarztnr=rkarztnr and zahalternr=rkhalternr and zarechnr=rkrechnr and zakz<4 and rkrechnr<999990
AND rkarztnr" + Var.strSelectBZ + " AND rkdeaktiv IS NULL AND zadeaktiv IS NULL GROUP BY 1,2", Sys.TBL_FillAll)) 
							{
								// 07.08.14 F2108 tblRgInfoa hinzugefügt
								if (this.tblRgInfoa.Populate(this.hSqlVKZ, @"SELECT @year(rkrechdat) + 1900, @choose(@INT((@IF(@ISNA(zabuchdat), sysdate, zabuchdat)-rkrechdat)/30),'30','60','90','999'), sum(zadm), count( DISTINCT zaarztnr*1000000 + zarechnr)
INTO :frmVKZ.tblRgInfoa.colJahr, :frmVKZ.tblRgInfoa.colStufe, :frmVKZ.tblRgInfoa.colSumme, :frmVKZ.tblRgInfoa.colAnzahl
FROM rk, za WHERE rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value and zaarztnr=rkarztnr and zahalternr=rkhalternr and zarechnr=rkrechnr and zakz>=4 and rkrechnr<999990
AND rkarztnr" + Var.strSelectBZ + " AND rkdeaktiv IS NULL AND zadeaktiv IS NULL GROUP BY 1,2", Sys.TBL_FillAll)) 
								{
									this.SetStatusBarText("Offene Rechnungen");
									if (this.tblOffRg.Populate(this.hSqlVKZ, @"SELECT @year(rkrechdat) + 1900, sum(rkdmleis+rkdmarzn-rkzaleis-rkzaarzn)
INTO :frmVKZ.tblOffRg.colJahr, :frmVKZ.tblOffRg.colSumme
FROM rk
WHERE rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value and rkrechnr<999990 AND rkdeaktiv IS NULL
AND rkarztnr" + Var.strSelectBZ + " GROUP BY 1", Sys.TBL_FillAll)) 
									{
										this.SetStatusBarText("");
									}
								}
							}
						}
					}
				}
			}
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// tblZM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblZM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblZM_OnSAM_Create(sender, e);
					break;
				
				case MT.MTbl.MTM_MouseEnterItem:
					this.tblZM_OnMTM_MouseEnterItem(sender, e);
					break;
				
				case MT.MTbl.MTM_MouseLeaveItem:
					this.tblZM_OnMTM_MouseLeaveItem(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblZM_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblZM_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call MTblSubClass( hWndItem)
			Int.PalPrepareMTbl(this.tblZM, 0xbfffbf);
			MT.MTbl.SetFlags(this.tblZM, MT.MTbl.MTBL_FLAG_COLOR_ENTIRE_ROW, true);
			MT.MTbl.SetFlags(this.tblZM, MT.MTbl.MTBL_FLAG_VARIABLE_ROW_HEIGHT, true);
			MT.MTbl.DefineTree(this.tblZM, this.tblZM.colQ, 16, 16);
			MT.MTbl.DefineTreeLines(this.tblZM, MT.MTbl.MTLS_DOT, Sys.COLOR_DarkGray);
			MT.MTbl.SetTreeNodeColors(this.tblZM, Sys.COLOR_DarkGray, Sys.COLOR_Black, Sys.COLOR_White);
			MT.MTbl.SetTreeFlags(this.tblZM, MT.MTbl.MTBL_TREE_FLAG_NO_ROWLINES, true);
			MT.MTbl.SetTreeFlags(this.tblZM, MT.MTbl.MTBL_FLAG_EXPAND_ROW_ON_DBLCLK, true);
			#endregion
		}
		
		/// <summary>
		/// MTM_MouseEnterItem event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblZM_OnMTM_MouseEnterItem(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			MT.MTbl.GetItem(this.tblZM, Sys.lParam, Var.objItem);
			if (Var.objItem.Type == MT.MTbl.MTBL_ITEM_ROW) 
			{
				Ext.MTblSetHighlighted(Var.objItem, true);
			}
			#endregion
		}
		
		/// <summary>
		/// MTM_MouseLeaveItem event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblZM_OnMTM_MouseLeaveItem(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			MT.MTbl.GetItem(this.tblZM, Sys.lParam, Var.objItem);
			if (Var.objItem.Type == MT.MTbl.MTBL_ITEM_ROW) 
			{
				Ext.MTblSetHighlighted(Var.objItem, false);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblZM_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// If SalTblPopulate(tblZM,hSqlVKZ,
			// 'SELECT @YEAR(rkrechdat), @QUARTER(rkrechdat), rkrechdat, @MEDIAN(zabuchdat-rkrechdat), sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins),
			// sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkzazins),
			// SUM(@decode(zakz, 0, zadm, 1, zadm, 2, zadm, 3, zadm, 0)), SUM(@decode(zakz, 0, 0, 1, 0, 2, 0, 3, 0, zadm))
			// INTO :frmVKZ.nY, :frmVKZ.nQ, :frmVKZ.tblZM.colDatum, :frmVKZ.tblZM.colZahlTage, :frmVKZ.tblZM.colRechDM, :frmVKZ.tblZM.colUnbezahltDM,
			// :frmVKZ.tblZM.colZahlDM, :frmVKZ.tblZM.colAusbuchDM
			// FROM rk, za
			// WHERE rkarztnr=zaarztnr(+) AND rkhalternr=zahalternr(+) AND rkrechnr=zarechnr(+)
			// AND rkrechdat BETWEEN :frmVKZ.dfVon AND :frmVKZ.dfBis
			// AND rkrechnr<999990
			// and rkarztnr' || strSelectBZ || ' GROUP BY 1,2,3',TBL_FillAll)
			// Call SalStatusSetText(frmVKZ,'')
			//FC:FINAL:#52 @MEDIAN is not supported, there is also no substitue function in T-SQL
			SalNumber nCurrentRow = Sys.lParam;
            SalSqlHandle hSqlMedian;
            string sql = @"WITH FilteredData AS (
    SELECT 
        DATEDIFF(DAY, CONVERT(DATE,RKRECHDAT, 103), CONVERT(DATE,ZABUCHDAT,103)) AS Value
    FROM ZA T1
    JOIN RK T2
        ON T1.ZAARZTNR = T2.RKARZTNR
		AND T1.ZAHALTERNR = T2.RKHALTERNR
		AND T1.ZARECHNR = T2.RKRECHNR
		WHERE [zaarztnr] IN ( 656 , 657 ) AND [rkrechdat] = '" + this.tblZM.colDatum.DateTime.ToString("yyyy-MM-dd") + "' AND [rkrechnr] < 999990 AND [rkdeaktiv] IS NULL AND [zadeaktiv] IS NULL " +
@"),
OrderedData AS (
    SELECT 
        Value,
        ROW_NUMBER() OVER (ORDER BY Value) AS RowNum,
        COUNT(*) OVER () AS TotalCount
    FROM FilteredData
),
MedianData AS (
    SELECT 
        Value,
        RowNum,
        TotalCount,
        (TotalCount + 1) / 2 AS MiddleRow1, -- Für ungerade Anzahl
        TotalCount / 2 AS MiddleRow2,       -- Für gerade Anzahl (erste Mitte)
        TotalCount / 2 + 1 AS MiddleRow3    -- Für gerade Anzahl (zweite Mitte)
    FROM OrderedData
)
SELECT 
    CASE 
        WHEN MAX(TotalCount) % 2 = 1 THEN -- Ungerade: Nimm den mittleren Wert
            MAX(CASE WHEN RowNum = MiddleRow1 THEN Value END)
        ELSE -- Gerade: Nimm den Durchschnitt der beiden mittleren Werte
            AVG(CASE WHEN RowNum IN (MiddleRow2, MiddleRow3) THEN Value END)
    END AS Median
FROM MedianData";
            if (hSqlMedian.Connect())
            {
                using (SqlConnection connection = new SqlConnection(hSqlMedian.Connection.ConnectionString))
                {
                    connection.Open();

                    using (SqlCommand command = new SqlCommand(sql, connection))
                    {
                        var days = command.ExecuteScalar();
                        if (days != DBNull.Value)
                            this.tblZM.colZahlTage.Number = Convert.ToInt32(days);
                    }
                }

                hSqlMedian.Disconnect();
            }
            Int.SqlImmedSel(@"SELECT SUM(@decode(zakz, 0, zadm, 1, zadm, 2, zadm, 3, zadm, 0)), SUM(@decode(zakz, 0, 0, 1, 0, 2, 0, 3, 0, zadm))
INTO :frmVKZ.tblZM.colZahlDM, :frmVKZ.tblZM.colAusbuchDM
FROM za,rk WHERE rkarztnr=zaarztnr AND rkhalternr=zahalternr AND rkrechnr=zarechnr
AND zaarztnr" + Var.strSelectBZ + " AND rkrechdat = :frmVKZ.tblZM.colDatum AND rkrechnr<999990 AND rkdeaktiv IS NULL AND zadeaktiv IS NULL");

			this.tblZM.colQ.Text = (this.nY + 1900).ToString(0) + "/" + this.nQ.ToString(0);
			if (this.tblZM.colQ.Text != this.strQuartalAlt) 
			{
				if (this.strQuartalAlt != "") 
				{
					this.tblZM.SetFocusRow(this.nRowHeader);
					this.tblZM.colRechDM.Number = this.nSumRechDM;
					this.tblZM.colZahlDM.Number = this.nSumZahlDM;
					this.tblZM.colAusbuchDM.Number = this.nSumAusbuchDM;
					this.tblZM.colZahlTage.Number = this.nSumZahlTage;
					if (this.tblZM.colZahlDM.Number != 0 && this.tblZM.colZahlDM.Number != Sys.NUMBER_Null) 
					{
						this.tblZM.colZahlTage.Number = this.tblZM.colZahlTage.Number / this.tblZM.colZahlDM.Number;
						this.tblZM.colZahlProz.Number = this.nSumZahlDM / this.nSumRechDM * 100;
					}
					this.tblZM.colUnbezahltDM.Number = this.nSumUnbezahltDM;
					if (this.tblZM.colUnbezahltDM.Number != 0 && this.tblZM.colUnbezahltDM.Number != Sys.NUMBER_Null) 
					{
						this.tblZM.colUnbezahltTage.Number = this.nSumUnbezahltTage / this.tblZM.colUnbezahltDM.Number;
					}
					this.nSumRechDM = 0;
					this.nSumZahlDM = 0;
					this.nSumAusbuchDM = 0;
					this.nSumZahlTage = 0;
					this.nSumUnbezahltDM = 0;
					this.nSumUnbezahltTage = 0;
					this.nSumZahlProz = 0;


				}

				this.tblZM.SetFocusRow(Sys.lParam);
				this.strQuartalAlt = this.tblZM.colQ.Text;

				this.nRowHeader = this.tblZM.InsertRow(Sys.TBL_MinRow);
				this.tblZM.SetFocusRow(this.nRowHeader);
				this.tblZM.colQ.Text = this.strQuartalAlt;
				MT.MTbl.SetRowBackColor(this.tblZM, this.nRowHeader, Sal.ColorFromRGB(230, 230, 230), MT.MTbl.MTSC_REDRAW);
				MT.MTbl.SetRowFont(this.tblZM, this.nRowHeader, MT.MTbl.MTBL_FONT_UNDEF_NAME, MT.MTbl.MTBL_FONT_UNDEF_SIZE, Sys.FONT_EnhBold, MT.MTbl.MTSF_REDRAW);
                //FC:FINAL:#52
				nCurrentRow += 1;
            }
            //FC:FINAL:#52
            this.tblZM.SetFocusRow(nCurrentRow);
			this.nSumRechDM = this.nSumRechDM + this.tblZM.colRechDM.Number;
			if (this.tblZM.colAusbuchDM.Number == Sys.NUMBER_Null) 
			{
				this.tblZM.colAusbuchDM.Number = 0;
			}
			if (this.tblZM.colZahlDM.Number == Sys.NUMBER_Null) 
			{
				this.tblZM.colZahlDM.Number = 0;
			}
			this.tblZM.colAusbuchDM.Number = this.tblZM.colAusbuchDM.Number + this.nAusMSZins + (this.tblZM.colRechDM.Number - this.tblZM.colAusbuchDM.Number - this.tblZM.colZahlDM.Number - this.tblZM.colUnbezahltDM.Number);
			this.tblZM.colUnbezahltDM.Number = this.tblZM.colUnbezahltDM.Number - this.nAusMSZins;
			if (this.tblZM.colRechDM.Number < 0 && (this.tblZM.colAusbuchDM.Number == 0 && this.tblZM.colZahlDM.Number == 0)) 
			{
				this.tblZM.colZahlDM.Number = this.tblZM.colRechDM.Number;
			}
			// Set frmVKZ.tblZM.colAusbuchDM = frmVKZ.tblZM.colRechDM - frmVKZ.tblZM.colUnbezahltDM - frmVKZ.tblZM.colZahlDM
			if (this.tblZM.colUnbezahltDM.Number != Sys.NUMBER_Null && this.tblZM.colUnbezahltDM.Number != 0) 
			{
				// Set frmVKZ.tblZM.colUnbezahltDM = frmVKZ.tblZM.colRechDM
				this.tblZM.colUnbezahltTage.Number = SalDateTime.Current - this.tblZM.colDatum.DateTime;
			}
			if (this.tblZM.colZahlDM.Number != 0 && this.tblZM.colZahlDM.Number != Sys.NUMBER_Null) 
			{
				this.nSumZahlDM = this.nSumZahlDM + this.tblZM.colZahlDM.Number;
				this.nSumZahlTage = this.nSumZahlTage + this.tblZM.colZahlDM.Number * this.tblZM.colZahlTage.Number;
				// Set nSumZahlProz = nSumZahlProz + frmVKZ.tblZM.colZahlDM / frmVKZ.tblZM.colRechDM * 100 * frmVKZ.tblZM.colZahlDM
				// Set frmVKZ.tblZM.colUnbezahltDM = frmVKZ.tblZM.colRechDM - frmVKZ.tblZM.colZahlDM - frmVKZ.tblZM.colAusbuchDM
				if (this.tblZM.colUnbezahltDM.Number != 0 && this.tblZM.colUnbezahltDM.Number != Sys.NUMBER_Null) 
				{
					this.tblZM.colUnbezahltTage.Number = SalDateTime.Current - this.tblZM.colDatum.DateTime;
				}
				// Set frmVKZ.tblZM.colZahlTage = frmVKZ.tblZM.colZahlTage / frmVKZ.tblZM.colZahlDM
				if (this.tblZM.colRechDM.Number != 0 && this.tblZM.colRechDM.Number != Sys.NUMBER_Null) 
				{
					this.tblZM.colZahlProz.Number = this.tblZM.colZahlDM.Number / this.tblZM.colRechDM.Number * 100;
				}
			}
			if (this.tblZM.colAusbuchDM.Number != 0) 
			{
				this.nSumAusbuchDM = this.nSumAusbuchDM + this.tblZM.colAusbuchDM.Number;
			}
			if (this.tblZM.colUnbezahltDM.Number != Sys.NUMBER_Null) 
			{
				this.nSumUnbezahltDM = this.nSumUnbezahltDM + this.tblZM.colUnbezahltDM.Number;
				this.nSumUnbezahltTage = this.nSumUnbezahltTage + (this.tblZM.colUnbezahltTage.Number * this.tblZM.colUnbezahltDM.Number);
			}
            //FC:FINAL:#52
            MT.MTbl.SetParentRow(this.tblZM, nCurrentRow, this.nRowHeader, MT.MTbl.MTSPR_REDRAW);
			#endregion
		}
		
		/// <summary>
		/// tblGS WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblGS_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblGS_OnSAM_Create(sender, e);
					break;
				
				case MT.MTbl.MTM_MouseEnterItem:
					this.tblGS_OnMTM_MouseEnterItem(sender, e);
					break;
				
				case MT.MTbl.MTM_MouseLeaveItem:
					this.tblGS_OnMTM_MouseLeaveItem(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblGS_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblGS_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call MTblSubClass( hWndItem)
			Int.PalPrepareMTbl(this.tblGS, 0xbfffbf);
			MT.MTbl.SetFlags(this.tblGS, MT.MTbl.MTBL_FLAG_COLOR_ENTIRE_ROW, true);
			MT.MTbl.SetFlags(this.tblGS, MT.MTbl.MTBL_FLAG_VARIABLE_ROW_HEIGHT, true);
			MT.MTbl.DefineTree(this.tblGS, this.tblGS.colJahr, 16, 16);
			MT.MTbl.DefineTreeLines(this.tblGS, MT.MTbl.MTLS_DOT, Sys.COLOR_DarkGray);
			MT.MTbl.SetTreeNodeColors(this.tblGS, Sys.COLOR_DarkGray, Sys.COLOR_Black, Sys.COLOR_White);
			MT.MTbl.SetTreeFlags(this.tblGS, MT.MTbl.MTBL_TREE_FLAG_NO_ROWLINES, true);
			MT.MTbl.SetTreeFlags(this.tblGS, MT.MTbl.MTBL_FLAG_EXPAND_ROW_ON_DBLCLK, true);

			this.tblGS.hwndaCols[0] = this.tblGS.colGebBFS;
			this.tblGS.hwndaCols[1] = this.tblGS.colMehrkostenBFS;
			this.tblGS.hwndaCols[2] = this.tblGS.colUeberwBFS;
			this.tblGS.hwndaCols[3] = this.tblGS.colAusbuch;
			this.tblGS.hwndaCols[4] = this.tblGS.colSaldoTABFS;
			Var.nDummyHaben = MT.MTbl.CreateColHdrGrp(this.tblGS, "BFS", this.tblGS.hwndaCols, 5, MT.MTbl.MTBL_CHG_FLAG_NOINNERHORZLINE);
			#endregion
		}
		
		/// <summary>
		/// MTM_MouseEnterItem event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblGS_OnMTM_MouseEnterItem(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			MT.MTbl.GetItem(this.tblGS, Sys.lParam, Var.objItem);
			if (Var.objItem.Type == MT.MTbl.MTBL_ITEM_ROW) 
			{
				Ext.MTblSetHighlighted(Var.objItem, true);
			}
			#endregion
		}
		
		/// <summary>
		/// MTM_MouseLeaveItem event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblGS_OnMTM_MouseLeaveItem(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			MT.MTbl.GetItem(this.tblGS, Sys.lParam, Var.objItem);
			if (Var.objItem.Type == MT.MTbl.MTBL_ITEM_ROW) 
			{
				Ext.MTblSetHighlighted(Var.objItem, false);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblGS_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
            //FC:FINAL:#52
            SalNumber nCurrentRow = Sys.lParam;
            Int.SqlImmedSel(@"SELECT SUM(@decode(zakz, 0, zadm, 1, zadm, 2, zadm, 3, zadm, 0)), SUM(@decode(zakz, 0, 0, 1, 0, 2, 0, 3, 0, zadm))
INTO :frmVKZ.tblGS.colZahl, :frmVKZ.tblGS.colAusbuch
FROM za,rk WHERE rkarztnr=zaarztnr AND rkhalternr=zahalternr AND rkrechnr=zarechnr
AND zaarztnr" + Var.strSelectBZ + " AND @YEAR(rkrechdat) = :frmVKZ.nY AND @MONTH(rkrechdat) = :frmVKZ.tblGS.colDatum AND rkrechnr<999990 AND rkdeaktiv IS NULL AND zadeaktiv IS NULL");

			this.tblGS.colJahr.Text = (this.nY + 1900).ToString(0);
			if (this.tblGS.colJahr.Text != this.strQuartalAlt) 
			{
				if (this.strQuartalAlt != "") 
				{
					this.tblGS.SetFocusRow(this.nRowHeader);
					this.tblGS.colRech.Number = this.nSumRechDM;
					this.tblGS.colZahl.Number = this.nSumZahlDM;
					this.tblGS.colAusbuch.Number = this.nSumAusbuchDM;
					this.tblGS.colAnzahl.Number = this.nAnzahl;
					this.tblGS.colGebMov.Number = this.nGebMov;
					this.tblGS.colGebBFS.Number = this.nGebBFS;
					this.tblGS.colMehrkostenBFS.Number = this.nMehrkosten;
					this.tblGS.colUeberwBFS.Number = this.nUeberwTA;
					this.tblGS.colSaldoTABFS.Number = this.nSaldoTA;
					this.tblGS.colGSSaldo.Number = this.nSaldo;
					// Set frmVKZ.tblGS.colZahlTage = nSumZahlTage
					// If frmVKZ.tblGS.colZahlDM != 0 and frmVKZ.tblGS.colZahlDM != NUMBER_Null
					// Set frmVKZ.tblGS.colZahlTage = frmVKZ.tblGS.colZahlTage / frmVKZ.tblGS.colZahlDM
					// Set frmVKZ.tblGS.colZahlProz = nSumZahlDM / nSumRechDM * 100
					// Set frmVKZ.tblGS.colUnbezahltDM = nSumUnbezahltDM
					// If frmVKZ.tblGS.colUnbezahltDM != 0 and frmVKZ.tblGS.colUnbezahltDM != NUMBER_Null
					// Set frmVKZ.tblGS.colUnbezahltTage = nSumUnbezahltTage / frmVKZ.tblGS.colUnbezahltDM
					this.nSumRechDM = 0;
					this.nSumZahlDM = 0;
					this.nSumAusbuchDM = 0;
					this.nAnzahl = 0;
					this.nGebMov = 0;
					this.nGebBFS = 0;
					this.nMehrkosten = 0;
					this.nUeberwTA = 0;
					this.nSaldoTA = 0;
					this.nSaldo = 0;
					// Set nSumZahlTage = 0
					// Set nSumUnbezahltDM = 0
					// Set nSumUnbezahltTage = 0
					// Set nSumZahlProz = 0


				}

				this.tblGS.SetFocusRow(Sys.lParam);
				this.strQuartalAlt = this.tblGS.colJahr.Text;
                //FC:FINAL:#52
                this.nRowHeader = this.tblGS.InsertRow(Sys.TBL_MinRow);
                nCurrentRow += 1;
                this.tblGS.SetFocusRow(this.nRowHeader);
				this.tblGS.colJahr.Text = this.strQuartalAlt;
				MT.MTbl.SetRowBackColor(this.tblGS, this.nRowHeader, Sal.ColorFromRGB(230, 230, 230), MT.MTbl.MTSC_REDRAW);
				MT.MTbl.SetRowFont(this.tblGS, this.nRowHeader, MT.MTbl.MTBL_FONT_UNDEF_NAME, MT.MTbl.MTBL_FONT_UNDEF_SIZE, Sys.FONT_EnhBold, MT.MTbl.MTSF_REDRAW);
			}
            //FC:FINAL:#52
            this.tblGS.SetFocusRow(nCurrentRow);
			this.nSumRechDM = this.nSumRechDM + this.tblGS.colRech.Number;
			if (this.tblGS.colAusbuch.Number == Sys.NUMBER_Null) 
			{
				this.tblGS.colAusbuch.Number = 0;
			}
			if (this.tblGS.colZahl.Number == Sys.NUMBER_Null) 
			{
				this.tblGS.colZahl.Number = 0;
			}
			// Set frmVKZ.tblGS.colAusbuch = frmVKZ.tblGS.colAusbuch + frmVKZ.nAusMSZins + (frmVKZ.tblGS.colRechDM - frmVKZ.tblGS.colAusbuchDM - frmVKZ.tblGS.colZahlDM - frmVKZ.tblGS.colUnbezahltDM)
			// Set frmVKZ.tblGS.colUnbezahltDM = frmVKZ.tblGS.colUnbezahltDM - frmVKZ.nAusMSZins
			if (this.tblGS.colRech.Number < 0 && (this.tblGS.colAusbuch.Number == 0 && this.tblGS.colZahl.Number == 0)) 
			{
				this.tblGS.colZahl.Number = this.tblGS.colRech.Number;
			}
			// Set frmVKZ.tblZM.colAusbuchDM = frmVKZ.tblZM.colRechDM - frmVKZ.tblZM.colUnbezahltDM - frmVKZ.tblZM.colZahlDM
			// If frmVKZ.tblGS.colUnbezahltDM != NUMBER_Null and frmVKZ.tblGS.colUnbezahltDM != 0
			// Set frmVKZ.tblZM.colUnbezahltDM = frmVKZ.tblZM.colRechDM
			// Set frmVKZ.tblGS.colUnbezahltTage = SalDateCurrent(  ) - frmVKZ.tblGS.colDatum
			if (this.tblGS.colZahl.Number != 0 && this.tblGS.colZahl.Number != Sys.NUMBER_Null) 
			{
				this.nSumZahlDM = this.nSumZahlDM + this.tblGS.colZahl.Number;
				// Set nSumZahlTage = nSumZahlTage + frmVKZ.tblGS.colZahlDM * frmVKZ.tblGS.colZahlTage
				// If frmVKZ.tblGS.colUnbezahltDM != 0 And frmVKZ.tblGS.colUnbezahltDM != NUMBER_Null
				// Set frmVKZ.tblGS.colUnbezahltTage = SalDateCurrent(  ) - frmVKZ.tblGS.colDatum
				// If frmVKZ.tblGS.colRechDM != 0 And frmVKZ.tblGS.colRechDM != NUMBER_Null
				// Set frmVKZ.tblGS.colZahlProz = frmVKZ.tblGS.colZahlDM / frmVKZ.tblGS.colRechDM * 100
			}
			if (this.tblGS.colAusbuch.Number != 0) 
			{
				this.nSumAusbuchDM = this.nSumAusbuchDM + this.tblGS.colAusbuch.Number;
			}
			// If frmVKZ.tblGS.colUnbezahltDM != NUMBER_Null
			// Set nSumUnbezahltDM = nSumUnbezahltDM + frmVKZ.tblGS.colUnbezahltDM
			// Set nSumUnbezahltTage = nSumUnbezahltTage + (frmVKZ.tblGS.colUnbezahltTage * frmVKZ.tblGS.colUnbezahltDM)

			// Set strBuchText = PalStrNum(nArztNr,4,0) || '/ZINSABSCHL.'
			Var.strBuchText = Int.PalStrNum(this.nArztNr, 4, 0) + "/Zinsabschlag";
			Int.SqlImmedSel(@"SELECT SUM(tksoll-tkatavst) INTO :frmVKZ.nDarlehenGeb
FROM tka WHERE tkaarztnr " + Var.strSelectBZ + " AND @YEAR(tkabeldat) = :frmVKZ.nY AND @MONTH(tkabeldat) = :frmVKZ.tblGS.colDatum  AND (tkabuchtext LIKE \'%/Zinsabschlag%\' OR tkabuchtext LIKE \'%/ZINSABSCHL.%\')");
			Int.SqlImmedSel(@"SELECT SUM(tkadmporto), SUM(tksoll-tkatavst) INTO :frmVKZ.nPorto, :frmVKZ.tblGS.colGebMov
FROM tka WHERE tkaarztnr " + Var.strSelectBZ + " AND @YEAR(tkabeldat) = :frmVKZ.nY AND @MONTH(tkabeldat) = :frmVKZ.tblGS.colDatum  AND (tkabuchtext LIKE \'%GEBV%\' OR (tkabuchtext LIKE \'%Gebühren von%\' AND tkabuchtext LIKE \'%Rechnungen%\'))");
			this.tblGS.colGebMov.Number = this.tblGS.colGebMov.Number + this.nDarlehenGeb;
			this.tblGS.colGebBFS.Number = (this.tblGS.colAnzahl.Number * this.dfGSBFSGeb.Number) + (this.tblGS.colRech.Number * this.dfGSBFSProz.Number / 100) + this.nPorto;
			// Set tblGS.colGebBFS = tblGS.colGebBFS + (tblGS.colGebBFS * nMwStVoll / 100)
			this.tblGS.colMehrkostenBFS.Number = this.tblGS.colGebBFS.Number - this.tblGS.colGebMov.Number;
			this.tblGS.colUeberwBFS.Number = this.tblGS.colRech.Number - this.tblGS.colGebBFS.Number;
			this.tblGS.colSaldoTABFS.Number = this.tblGS.colUeberwBFS.Number - this.tblGS.colAusbuch.Number;
			this.tblGS.colGSSaldo.Number = this.tblGS.colZahl.Number - this.tblGS.colSaldoTABFS.Number;
			if (this.tblGS.colAnzahl.Number != Sys.NUMBER_Null) 
			{
				this.nAnzahl = this.nAnzahl + this.tblGS.colAnzahl.Number;
			}
			if (this.tblGS.colGebBFS.Number != Sys.NUMBER_Null) 
			{
				this.nGebBFS = this.nGebBFS + this.tblGS.colGebBFS.Number;
			}
			if (this.tblGS.colGebMov.Number != Sys.NUMBER_Null) 
			{
				this.nGebMov = this.nGebMov + this.tblGS.colGebMov.Number;
			}
			if (this.tblGS.colMehrkostenBFS.Number != Sys.NUMBER_Null) 
			{
				this.nMehrkosten = this.nMehrkosten + this.tblGS.colMehrkostenBFS.Number;
			}
			if (this.tblGS.colUeberwBFS.Number != Sys.NUMBER_Null) 
			{
				this.nUeberwTA = this.nUeberwTA + this.tblGS.colUeberwBFS.Number;
			}
			if (this.tblGS.colSaldoTABFS.Number != Sys.NUMBER_Null) 
			{
				this.nSaldoTA = this.nSaldoTA + this.tblGS.colSaldoTABFS.Number;
			}
			if (this.tblGS.colGSSaldo.Number != Sys.NUMBER_Null) 
			{
				this.nSaldo = this.nSaldo + this.tblGS.colGSSaldo.Number;
			}
            //FC:FINAL:#52
            MT.MTbl.SetParentRow(this.tblGS, nCurrentRow, this.nRowHeader, MT.MTbl.MTSPR_REDRAW);
			#endregion
		}
		
		/// <summary>
		/// dfGSBFSGeb WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfGSBFSGeb_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.dfGSBFSGeb_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Validate:
					this.dfGSBFSGeb_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfGSBFSGeb_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfGSBFSGeb.Number = Sal.GetProfileInt("frmVKZ", "BFSGeb", 135, "TVN") / 100;
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfGSBFSGeb_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.SetProfileString("frmVKZ", "BFSGeb", (this.dfGSBFSGeb.Number * 100).ToString(0), "TVN");
			#endregion
		}
		
		/// <summary>
		/// dfGSBFSProz WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfGSBFSProz_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.dfGSBFSProz_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Validate:
					this.dfGSBFSProz_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfGSBFSProz_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfGSBFSProz.Number = Sal.GetProfileInt("frmVKZ", "BFSProz", 290, "TVN") / 100;
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfGSBFSProz_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.SetProfileString("frmVKZ", "BFSProz", (this.dfGSBFSProz.Number * 100).ToString(0), "TVN");
			#endregion
		}
		
		/// <summary>
		/// pbGrSOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbGrSOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbGrSOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbGrSOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 31.01.23
			this.tblGrS.ResetTable();
			this.dfGrSSummeSaldo.Number = 0;
			this.nSumRechDM = 0;
			this.nSumAnzahl = 0;
			this.nSumGebJetzt = 0;
			this.nSumGebSim = 0;

			if (Sal.IsNull(this.dfVon)) 
			{
				this.dfVon.Value = new SalDateTime(1900, 1, 1);
			}
			if (Sal.IsNull(this.dfBis)) 
			{
				this.dfBis.Value = SalDateTime.Current;
			}
			if (this.dfBis.Value > SalDateTime.Current.MonthBegin() - 1) 
			{
				this.dfBis.Value = SalDateTime.Current.MonthBegin() - 1;
			}
			if (this.dfArztNr.Number == Sys.NUMBER_Null) 
			{
				Var.strSelectBZ = "";
				this.strSelectRK = "";
			}
			else if (this.dfArztNr2.Number != Sys.NUMBER_Null && this.dfArztNr2.Number != this.dfArztNr.Number) 
			{
				Var.strSelectBZ = "and akarztnr IN (" + this.dfArztNr.Number.ToString(0) + ", " + this.dfArztNr2.Number.ToString(0) + ") ";
				this.strSelectRK = "and rkarztnr IN (" + this.dfArztNr.Number.ToString(0) + ", " + this.dfArztNr2.Number.ToString(0) + ") ";
			}
			else
			{
				Var.strSelectBZ = "and akarztnr = " + this.dfArztNr.Number.ToString(0) + " ";
				this.strSelectRK = "and rkarztnr = " + this.dfArztNr.Number.ToString(0) + " ";
			}
			Sal.WaitCursor(true);
			this.nArztNrAlt = 0;
			this.nGesSaldo = 0;
			this.dfGrSSummeSaldo.Number = 0;
			// 08.09.23 Ä2029
			Int.SqlImmedSel("SELECT SUM((RKDMLEIS+RKDMARZN) - " + Var.nKappung.ToString(0) + @")
INTO :frmVKZ.dfGrSUeKappung
FROM rk
WHERE rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND rkrechnr<999990 AND (rkdmleis+rkdmarzn)>" + Var.nKappung.ToString(0) + " " + this.strSelectRK);
			Int.SqlImmedSel("SELECT SUM((RKDMLEIS+RKDMARZN) - " + this.dfGKappung.Number.ToString(0) + @")
INTO :frmVKZ.dfGrSNeuUeKappung
FROM rk
WHERE rkrechdat BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
AND rkrechnr<999990 AND (rkdmleis+rkdmarzn)>" + this.dfGKappung.Number.ToString(0) + " " + this.strSelectRK);
			this.dfGrSDiffUeKappung.Number = this.dfGrSNeuUeKappung.Number - this.dfGrSUeKappung.Number;

			this.dtRechAlt = new SalDateTime(1900, 1, 1);
			this.SetStatusBarText("Berechne Gebührensimulation");
			if (this.tblGrS.Populate(this.hSqlVKZ, @"SELECT aarztnr, astaffel, akdatum, sum(akanzahl), sum(akrechsumm), sum(@round(akrechsumm/akanzahl,2))
INTO :frmVKZ.tblGrS.colArztNr, :frmVKZ.tblGrS.colAStaffel, :frmVKZ.tblGrS.colDatum,
:frmVKZ.tblGrS.colAnzahl, :frmVKZ.tblGrS.colRech, :frmVKZ.tblGrS.colDurchschnitt
FROM ak, a
WHERE (aarztnr=akarztnr or anr2=akarztnr) and akzpraxart<2 and aktyp='RG' AND aktypdetail='UebOP' AND akdatum BETWEEN :frmVKZ.dfVon.Value AND :frmVKZ.dfBis.Value
" + Var.strSelectBZ + " GROUP BY 1,2,3", Sys.TBL_FillAll)) 
			{
				this.SetStatusBarText("");
			}
			Sal.WaitCursor(false);

			this.tblGrS.SetFocusRow(this.nRowHeader);
			this.tblGrS.colRech.Number = this.nSumRechDM;
			this.tblGrS.colAnzahl.Number = this.nSumAnzahl;
			this.tblGrS.colGebMov.Number = this.nSumGebJetzt;
			this.tblGrS.colNeuGebMov.Number = this.nSumGebSim;
			this.tblGrS.colGrSSaldo.Number = this.nSumGebSim - this.nSumGebJetzt;
			this.dfGrSSummeSaldo.Number = this.nGesSaldo;

            //FC:FINAL:#52
            //MT.MTbl.SortTree(this.tblGrS, MT.MTbl.MTST_TOPDOWN);
			MT.MTbl.SetTreeFlags(this.pbGrSOk, MT.MTbl.MTBL_TREE_FLAG_INDENT_ALL, true);
			MT.MTbl.AutoSizeRows(this.tblGrS, Const.MTASR_ALLROWS);
            //FC:FINAL:#52
			MT.MTbl.CollapseParentRows(this.tblGrS);
            #endregion
        }

        /// <summary>
        /// dfG3 WindowActions Handler
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dfG3_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfG3_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfG3_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalSetProfileStringR("", "Grenze3", (this.dfG3.Number * 100).ToString(0), "TVN");
			#endregion
		}
		
		/// <summary>
		/// dfG4 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfG4_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfG4_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfG4_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalSetProfileStringR("", "Grenze4", (this.dfG4.Number * 100).ToString(0), "TVN");
			#endregion
		}
		
		/// <summary>
		/// dfG5 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfG5_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfG5_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfG5_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalSetProfileStringR("", "Grenze5", (this.dfG5.Number * 100).ToString(0), "TVN");
			#endregion
		}
		
		/// <summary>
		/// dfGKappung WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfGKappung_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfGKappung_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfGKappung_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalSetProfileStringR("", "GSKappung", (this.dfGKappung.Number * 100).ToString(0), "TVN");
			#endregion
		}
		
		/// <summary>
		/// tblGrS WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblGrS_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblGrS_OnSAM_Create(sender, e);
					break;
				
				case MT.MTbl.MTM_MouseEnterItem:
					this.tblGrS_OnMTM_MouseEnterItem(sender, e);
					break;
				
				case MT.MTbl.MTM_MouseLeaveItem:
					this.tblGrS_OnMTM_MouseLeaveItem(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblGrS_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblGrS_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call MTblSubClass( hWndItem)
			Int.PalPrepareMTbl(this.tblGrS, 0xbfffbf);
			MT.MTbl.SetFlags(this.tblGrS, MT.MTbl.MTBL_FLAG_COLOR_ENTIRE_ROW, true);
			MT.MTbl.SetFlags(this.tblGrS, MT.MTbl.MTBL_FLAG_VARIABLE_ROW_HEIGHT, true);
			MT.MTbl.DefineTree(this.tblGrS, this.tblGrS.colArztNr, 16, 16);
			MT.MTbl.DefineTreeLines(this.tblGrS, MT.MTbl.MTLS_DOT, Sys.COLOR_DarkGray);
			MT.MTbl.SetTreeNodeColors(this.tblGrS, Sys.COLOR_DarkGray, Sys.COLOR_Black, Sys.COLOR_White);
			MT.MTbl.SetTreeFlags(this.tblGrS, MT.MTbl.MTBL_TREE_FLAG_NO_ROWLINES, true);
			MT.MTbl.SetTreeFlags(this.tblGrS, MT.MTbl.MTBL_FLAG_EXPAND_ROW_ON_DBLCLK, true);

			this.tblGrS.hwndaCols[0] = this.tblGrS.colGebMov;
			this.tblGrS.hwndaCols[1] = this.tblGrS.colGebProz;
			Var.nDummyHaben = MT.MTbl.CreateColHdrGrp(this.tblGrS, "jetzt", this.tblGrS.hwndaCols, 2, MT.MTbl.MTBL_CHG_FLAG_NOINNERHORZLINE);
			this.tblGrS.hwndaCols[0] = this.tblGrS.colNeuGebMov;
			this.tblGrS.hwndaCols[1] = this.tblGrS.colNeuGebProz;
			Var.nDummyHaben = MT.MTbl.CreateColHdrGrp(this.tblGrS, "simuliert", this.tblGrS.hwndaCols, 2, MT.MTbl.MTBL_CHG_FLAG_NOINNERHORZLINE);
			#endregion
		}
		
		/// <summary>
		/// MTM_MouseEnterItem event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblGrS_OnMTM_MouseEnterItem(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			MT.MTbl.GetItem(this.tblGrS, Sys.lParam, Var.objItem);
			if (Var.objItem.Type == MT.MTbl.MTBL_ITEM_ROW) 
			{
				Ext.MTblSetHighlighted(Var.objItem, true);
			}
			#endregion
		}
		
		/// <summary>
		/// MTM_MouseLeaveItem event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblGrS_OnMTM_MouseLeaveItem(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			MT.MTbl.GetItem(this.tblGrS, Sys.lParam, Var.objItem);
			if (Var.objItem.Type == MT.MTbl.MTBL_ITEM_ROW) 
			{
				Ext.MTblSetHighlighted(Var.objItem, false);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblGrS_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
            // If SalTblPopulate(tblGrS,hSqlVKZ,
            // 'SELECT aarztnr, astaffel, akdatum, akprozgeb, sum(akanzahl), sum(akrechsumm), sum(@round(akrechsumm/akanzahl,2))
            // INTO :frmVKZ.tblGrS.colArztNr, :frmVKZ.tblGrS.colAStaffel, :frmVKZ.tblGrS.colDatum, :frmVKZ.tblGrS.colGebProz,
            // :frmVKZ.tblGrS.colAnzahl, :frmVKZ.tblGrS.colRech, :frmVKZ.tblGrS.colDurchschnitt
            // FROM ak, a
            // WHERE (aarztnr=akarztnr or anr2=akarztnr) and akzpraxart<2 and aktyp=\'RG\' AND aktypdetail=\'UebOP\' AND akdatum BETWEEN :frmVKZ.dfVon AND :frmVKZ.dfBis
            // ' || strSelectBZ || ' GROUP BY 1,2,3,4',TBL_FillAll)
            // Call SalStatusSetText(frmVKZ,'')
            //FC:FINAL:#52
			SalNumber nCurrentRow = Sys.lParam;

            if (this.tblGrS.colArztNr.Number != this.nArztNrAlt) 
			{
				if (this.nArztNrAlt != 0) 
				{
					this.tblGrS.SetFocusRow(this.nRowHeader);
					this.tblGrS.colRech.Number = this.nSumRechDM;
					this.tblGrS.colAnzahl.Number = this.nSumAnzahl;
					this.tblGrS.colGebMov.Number = this.nSumGebJetzt;
					this.tblGrS.colNeuGebMov.Number = this.nSumGebSim;
					this.tblGrS.colGrSSaldo.Number = this.nSumGebSim - this.nSumGebJetzt;
					this.nGesSaldo = this.nGesSaldo + this.nSumGebSim - this.nSumGebJetzt;
					this.nSumRechDM = 0;
					this.nSumAnzahl = 0;
					this.nSumGebJetzt = 0;
					this.nSumGebSim = 0;
					this.SetStatusBarText("Berechne Gebührensimulation - " + this.nArztNrAlt.ToString(0));
				}

				this.tblGrS.SetFocusRow(Sys.lParam);
				this.nArztNrAlt = this.tblGrS.colArztNr.Number;
                //FC:FINAL:#52
                this.nRowHeader = this.tblGrS.InsertRow(Sys.TBL_MinRow);
				nCurrentRow += 1;
                this.tblGrS.SetFocusRow(this.nRowHeader);
				this.tblGrS.colArztNr.Number = this.nArztNrAlt;
				MT.MTbl.SetRowBackColor(this.tblGrS, this.nRowHeader, Sal.ColorFromRGB(230, 230, 230), MT.MTbl.MTSC_REDRAW);
				MT.MTbl.SetRowFont(this.tblGrS, this.nRowHeader, MT.MTbl.MTBL_FONT_UNDEF_NAME, MT.MTbl.MTBL_FONT_UNDEF_SIZE, Sys.FONT_EnhBold, MT.MTbl.MTSF_REDRAW);
			}
            //FC:FINAL:#52
            this.tblGrS.SetFocusRow(nCurrentRow);
			Int.SqlImmedSel(@"SELECT st1, st2, st3, st4, st5, st6, stgeb
INTO :frmVKZ.nSt1, :frmVKZ.nSt2, :frmVKZ.nSt3, :frmVKZ.nSt4, :frmVKZ.nSt5, :frmVKZ.nSt6, :frmVKZ.nStGeb
FROM st WHERE stnr = :frmVKZ.tblGrS.colAStaffel");
			// If frmVKZ.tblGrS.colDurchschnitt > 255.65
			// Call SalMessageBeep( 0 )
			// If frmVKZ.tblGrS.colDurchschnitt <= dfG1
			// Set frmVKZ.tblGrS.colNeuGebProz = nSt1
			// Else If frmVKZ.tblGrS.colDurchschnitt <= dfG2
			// Set frmVKZ.tblGrS.colNeuGebProz = nSt2
			if (this.tblGrS.colDurchschnitt.Number <= this.dfG3.Number) 
			{
				this.tblGrS.colNeuGebProz.Number = this.nSt3;
			}
			else if (this.tblGrS.colDurchschnitt.Number <= this.dfG4.Number) 
			{
				this.tblGrS.colNeuGebProz.Number = this.nSt4;
			}
			else if (this.tblGrS.colDurchschnitt.Number <= this.dfG5.Number) 
			{
				this.tblGrS.colNeuGebProz.Number = this.nSt5;
			}
			else
			{
				this.tblGrS.colNeuGebProz.Number = this.nSt6;
			}
			// If frmVKZ.tblGrS.colDurchschnitt <= 25.56
			// Set frmVKZ.tblGrS.colGebProz = nSt1
			// Else If frmVKZ.tblGrS.colDurchschnitt <= 51.13
			// Set frmVKZ.tblGrS.colGebProz = nSt2
			if (this.tblGrS.colDurchschnitt.Number <= 76.69m) 
			{
				this.tblGrS.colGebProz.Number = this.nSt3;
			}
			else if (this.tblGrS.colDurchschnitt.Number <= 127.82m) 
			{
				this.tblGrS.colGebProz.Number = this.nSt4;
			}
			else if (this.tblGrS.colDurchschnitt.Number <= 255.65m) 
			{
				this.tblGrS.colGebProz.Number = this.nSt5;
			}
			else
			{
				this.tblGrS.colGebProz.Number = this.nSt6;
			}
			// 28.07.23 Ä2029
			this.nGrSRech = this.tblGrS.colRech.Number;
			// If nGrSRech > nKappung
			// Set nGrSRech = nKappung
			this.nGrSRechNeu = this.tblGrS.colRech.Number;
			// If dfGKappung != NUMBER_Null
			// If nGrSRechNeu > dfGKappung
			// Set nGrSRechNeu = dfGKappung

			this.tblGrS.colGebMov.Number = this.nGrSRech * this.tblGrS.colGebProz.Number / 100;
			this.tblGrS.colNeuGebMov.Number = this.nGrSRechNeu * this.tblGrS.colNeuGebProz.Number / 100;
			this.tblGrS.colGrSSaldo.Number = this.tblGrS.colNeuGebMov.Number - this.tblGrS.colGebMov.Number;

			this.nSumRechDM = this.nSumRechDM + this.tblGrS.colRech.Number;
			this.nSumAnzahl = this.nSumAnzahl + this.tblGrS.colAnzahl.Number;
			this.nSumGebJetzt = this.nSumGebJetzt + this.tblGrS.colGebMov.Number;
			this.nSumGebSim = this.nSumGebSim + this.tblGrS.colNeuGebMov.Number;
            //FC:FINAL:#52
            MT.MTbl.SetParentRow(this.tblGrS, nCurrentRow, this.nRowHeader, MT.MTbl.MTSPR_REDRAW);
			#endregion
		}
		
		/// <summary>
		/// pbGrSReset WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbGrSReset_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbGrSReset_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbGrSReset_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Set dfG1 = 25.56
			// Set dfG2 = 51.13
			this.dfG3.Number = 76.69m;
			this.dfG4.Number = 127.82m;
			this.dfG5.Number = 255.65m;
			// Call PalSetProfileStringR('','Grenze1', '2556', 'TVN')
			// Call PalSetProfileStringR('','Grenze2', '5113', 'TVN')
			Int.PalSetProfileStringR("", "Grenze3", "7669", "TVN");
			Int.PalSetProfileStringR("", "Grenze4", "12782", "TVN");
			Int.PalSetProfileStringR("", "Grenze5", "25565", "TVN");
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
			this.DestroyWindow();
			#endregion
		}
		#endregion
		
		#region tblAK
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblAKTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmVKZ _frmVKZ = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblAKTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmVKZ frmVKZ
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmVKZ == null) 
					{
						_frmVKZ = (frmVKZ)this.FindForm();
					}
					return _frmVKZ;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblAKTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblAKTableWindow)SalWindow.FromHandle(handle, typeof(tblAKTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblZA
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblZATableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmVKZ _frmVKZ = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblZATableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmVKZ frmVKZ
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmVKZ == null) 
					{
						_frmVKZ = (frmVKZ)this.FindForm();
					}
					return _frmVKZ;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblZATableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblZATableWindow)SalWindow.FromHandle(handle, typeof(tblZATableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblMSOP
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblMSOPTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmVKZ _frmVKZ = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblMSOPTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmVKZ frmVKZ
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmVKZ == null) 
					{
						_frmVKZ = (frmVKZ)this.FindForm();
					}
					return _frmVKZ;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblMSOPTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblMSOPTableWindow)SalWindow.FromHandle(handle, typeof(tblMSOPTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblFM
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblFMTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmVKZ _frmVKZ = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblFMTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmVKZ frmVKZ
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmVKZ == null) 
					{
						_frmVKZ = (frmVKZ)this.FindForm();
					}
					return _frmVKZ;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblFMTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblFMTableWindow)SalWindow.FromHandle(handle, typeof(tblFMTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblVI
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblVITableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmVKZ _frmVKZ = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblVITableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmVKZ frmVKZ
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmVKZ == null) 
					{
						_frmVKZ = (frmVKZ)this.FindForm();
					}
					return _frmVKZ;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblVITableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblVITableWindow)SalWindow.FromHandle(handle, typeof(tblVITableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblMahn
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblMahnTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmVKZ _frmVKZ = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblMahnTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmVKZ frmVKZ
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmVKZ == null) 
					{
						_frmVKZ = (frmVKZ)this.FindForm();
					}
					return _frmVKZ;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblMahnTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblMahnTableWindow)SalWindow.FromHandle(handle, typeof(tblMahnTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblMBAus
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblMBAusTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmVKZ _frmVKZ = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblMBAusTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmVKZ frmVKZ
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmVKZ == null) 
					{
						_frmVKZ = (frmVKZ)this.FindForm();
					}
					return _frmVKZ;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblMBAusTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblMBAusTableWindow)SalWindow.FromHandle(handle, typeof(tblMBAusTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblInsol
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblInsolTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmVKZ _frmVKZ = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblInsolTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmVKZ frmVKZ
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmVKZ == null) 
					{
						_frmVKZ = (frmVKZ)this.FindForm();
					}
					return _frmVKZ;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblInsolTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblInsolTableWindow)SalWindow.FromHandle(handle, typeof(tblInsolTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblOffRg
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblOffRgTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmVKZ _frmVKZ = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblOffRgTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmVKZ frmVKZ
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmVKZ == null) 
					{
						_frmVKZ = (frmVKZ)this.FindForm();
					}
					return _frmVKZ;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblOffRgTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblOffRgTableWindow)SalWindow.FromHandle(handle, typeof(tblOffRgTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblRaZa
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblRaZaTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmVKZ _frmVKZ = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblRaZaTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmVKZ frmVKZ
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmVKZ == null) 
					{
						_frmVKZ = (frmVKZ)this.FindForm();
					}
					return _frmVKZ;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblRaZaTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblRaZaTableWindow)SalWindow.FromHandle(handle, typeof(tblRaZaTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblRgInfo
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblRgInfoTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmVKZ _frmVKZ = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblRgInfoTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmVKZ frmVKZ
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmVKZ == null) 
					{
						_frmVKZ = (frmVKZ)this.FindForm();
					}
					return _frmVKZ;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblRgInfoTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblRgInfoTableWindow)SalWindow.FromHandle(handle, typeof(tblRgInfoTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblRgInfoa
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblRgInfoaTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmVKZ _frmVKZ = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblRgInfoaTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmVKZ frmVKZ
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmVKZ == null) 
					{
						_frmVKZ = (frmVKZ)this.FindForm();
					}
					return _frmVKZ;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblRgInfoaTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblRgInfoaTableWindow)SalWindow.FromHandle(handle, typeof(tblRgInfoaTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblZM
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblZMTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmVKZ _frmVKZ = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblZMTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmVKZ frmVKZ
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmVKZ == null) 
					{
						_frmVKZ = (frmVKZ)this.FindForm();
					}
					return _frmVKZ;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblZMTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblZMTableWindow)SalWindow.FromHandle(handle, typeof(tblZMTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblGS
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblGSTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmVKZ _frmVKZ = null;
			
			
			#region Window Variables
			public SalArray<SalWindowHandle> hwndaCols = new SalArray<SalWindowHandle>();
			#endregion
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblGSTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmVKZ frmVKZ
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmVKZ == null) 
					{
						_frmVKZ = (frmVKZ)this.FindForm();
					}
					return _frmVKZ;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblGSTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblGSTableWindow)SalWindow.FromHandle(handle, typeof(tblGSTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblGrS
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblGrSTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmVKZ _frmVKZ = null;
			
			
			#region Window Variables
			public SalArray<SalWindowHandle> hwndaCols = new SalArray<SalWindowHandle>();
			#endregion
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblGrSTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmVKZ frmVKZ
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmVKZ == null) 
					{
						_frmVKZ = (frmVKZ)this.FindForm();
					}
					return _frmVKZ;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblGrSTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblGrSTableWindow)SalWindow.FromHandle(handle, typeof(tblGrSTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
