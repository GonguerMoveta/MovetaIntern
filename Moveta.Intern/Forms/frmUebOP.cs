// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;
using Dart.Ftp;
using System.Data.SqlTypes;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="nArztNr"></param>
	/// <param name="strBearbeiter"></param>
	/// <param name="dtBearbDatum"></param>
	/// <param name="strDM"></param>
	public partial class frmUebOP : SalFormWindow
	{
		#region Window Parameters
		public SalNumber nArztNr;
		public SalString strBearbeiter;
		public SalDateTime dtBearbDatum;
		public SalString strDM;
		#endregion
		
		#region Window Variables
		public SalSqlHandle hSqlLe = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalNumber nFetchLe = 0;
		public SalNumber nHalterNr = 0;
		public SalNumber nPosNr = 0;
		public SalNumber nArztNr2 = 0;
		public SalNumber pnArztNr = 0;
		public SalNumber nBEZArztNr = 0;
		public SalNumber nBEZArztNr2 = 0;
		public SalNumber nRechNr = 0;
		public SalNumber nRechNrAlt = 0;
		public SalString strPraxArt = "";
		public SalString strBank = "";
		public SalString strBLZ = "";
		public SalString strKonto = "";
		public SalBoolean bBankOk = false;
		public SalBoolean bExists = false;
		public SalDateTime dtRkRechDat = SalDateTime.Null;
		public SalDateTime dtRkFaellDat = SalDateTime.Null;
		public SalDateTime dtRkErstLeistDat = SalDateTime.Null;
		public SalNumber nRkDMLeis = 0;
		public SalNumber nRkDMArzn = 0;
		public SalNumber nRkMwSt = 0;
		public SalDateTime dtRkVerjaehr = SalDateTime.Null;
		public SalString strRA = "";
		public SalNumber nUFRechSumm = 0;
		public SalNumber nUFDMGeb = 0;
		public SalNumber nUFProzGeb = 0;
		public SalNumber nUFDMPorto = 0;
		public SalNumber nUFDMVSt = 0;
		public SalNumber nUFProzVSt = 0;
		public SalNumber nUFAnzRg = 0;
		public SalString strTKBuchText = "";
		public SalNumber nTKKonto = 0;
		public SalNumber nFIDM = 0;
		public SalString strLA = "";
		public SalNumber nDM = 0;
		public SalNumber nOPFaellTg = 0;
		public SalNumber nDMBez = 0;
		public SalNumber nDauer = 0;
		public SalNumber nSkonto = 0;
		public SalString lsText = "";
		public SalString strKuerzel = "";
		public SalString strBarcode = "";
		public SalSqlHandle hSqlTSK = SalSqlHandle.Null;
		public SalNumber nFetchTSK = 0;
		public SalString strRechTextTSK = "";
		public SalNumber nBeihilfe = 0;
		public SalNumber nBeihNetto = 0;
		public SalNumber nBeihMwSt = 0;
		public SalNumber nMwStTSK = 0;
		public SalString strBuchText = "";
		public SalNumber nKZZahl = 0;
		public SalString strTSKROWID = "";
		public SalNumber nReverse = 0;
		public SalNumber nTAReverse = 0;
		public SalString strTALand = "";
		public SalString strTHLand = "";
		public SalBoolean bBVDv = false;
		public SalNumber nMahnstufe = 0;
		public SalString strBEZBLZ = "";
		public SalString strBEZKonto = "";
		public SalDateTime dtBEZAbDatum = SalDateTime.Null;
		public SalNumber nBEZTag = 0;
		public SalNumber nKeinGeld = 0;
		public SalNumber nDMGes = 0;
		public SalString strLEGUID = "";
		public SalString strHTel = "";
		public SalString strHTel2 = "";
		public SalString strHTelHandy = "";
		public SalString strHTelFax = "";
		public SalString strHEmail = "";
		public SalString strHDigitalRg = "";
		public SalString strHLeitwegID = "";
		public SalString strHDigitalMail = "";
		public SalString strBEZIBAN = "";
		public SalString strBEZBIC = "";
		public SalDateTime dtBEZSignDat = SalDateTime.Null;
		public SalNumber nBankeinzug = 0;
		public SalNumber nPapierRg = 0;
		public SalSqlHandle hSqlImmed = SalSqlHandle.Null;
		public SalString strSqlMsgImmed = "";
		public SalNumber nCountImmed = 0;
		public SalNumber nResultImmed = 0;
		public SalDateTime dtGebDat = SalDateTime.Null;
		public SalDateTime HGEBDAT = SalDateTime.Null;
		public SalString strZust = "";
		public SalSqlHandle hSqlGebDat = SalSqlHandle.Null;
		public SalNumber nFetchGebDat = 0;
		public SalNumber nUFSperrSumme = 0;
		public SalNumber nBezTage = 0;
		public SalNumber nRestOP = 0;
		public SalNumber nVorschProz = 0;
		public SalNumber nVorschSum = 0;
		public SalNumber nVorschDM = 0;
		public SalNumber nRechNrMin = 0;
		public SalNumber nRechNrMax = 0;
		public SalDateTime dtErsteAbrg = SalDateTime.Null;
		public SalNumber nVorsch1 = 0;
		public SalNumber nVorsch1Wochen = 0;
		public SalNumber nVorsch2 = 0;
		public SalNumber nVorsch3 = 0;
		public SalNumber nVorsch6 = 0;
		public SalNumber nVorsch7 = 0;
		public SalNumber nVorsch9 = 0;
		public SalNumber nVorsch9CR = 0;
		public SalDateTime dtRechMaxDatum = SalDateTime.Null;
		public SalDateTime dtRechMaxDatumGrenze = SalDateTime.Null;
		public SalBoolean bnurOPs = false;
		public SalNumber nEPost = 0;
		public SalString strPMMail = "";
		public SalString strEPostMail = "";
		public SalDateTime dtEPostAenDat = SalDateTime.Null;
		public SalDateTime dtEPostAenDatH = SalDateTime.Null;
		public SalSqlHandle hSqlMOId = SalSqlHandle.Null;
		public SalNumber nFetchMOId = 0;
		public SalString strOrdner = "";
		public SalBoolean bFTPOk = false;
		public SalString strTemp = "";
		public SalVariant vData = new SalVariant();
		public Ftp axFTP = new Ftp();
        public Listing objFTPList = new Listing();
        public ListEntry objFTPEntry;
		public SalNumber nPCount = 0;
		public SalString strName = "";
		public SalString strDirectory = "";
		public SalDateTime dtDate = SalDateTime.Null;
		public SalString strDate = "";
		public SalNumber nSize = 0;
		public SalFileHandle hDisk = SalFileHandle.Null;
		public SalString strLine = "";
		public SalString strMOId = "";
		public SalString strVeCode = "";
		public SalString strVeVSNr = "";
		public SalString strAbrID = "";
		public SalString strBEGuid = "";
		public SalBoolean bVerbrauchsmatOk = false;
		public SalNumber nSumVerbrauchsmat = 0;
        public SalDateTime dtBuchDat = SalDateTime.Null;
        #endregion

        #region Constructors/Destructors

        /// <summary>
        /// Default Constructor.
        /// </summary>
        public frmUebOP(SalNumber nArztNr, SalString strBearbeiter, SalDateTime dtBearbDatum, SalString strDM)
		{
			// Assign global reference.
			App.frmUebOP = this;
			// Window Parameters initialization.
			this.nArztNr = nArztNr;
			this.strBearbeiter = strBearbeiter;
			this.dtBearbDatum = dtBearbDatum;
			this.strDM = strDM;
			// This call is required by the Windows Form Designer.
			InitializeComponent();

            //FC:FINAL:AX_DartFtp:
            this.axFTP.Progress += AxFTP_Progress; ;
            //FC:FINAL:AX_DartFtp:
            this.axFTP.Error += AxFTP_Error; ;
        }

        private void AxFTP_Progress(object sender, ProgressEventArgs e)
        {
            //throw new NotImplementedException();
        }

        private void AxFTP_Error(object sender, ErrorEventArgs e)
        {
            Int.PalLog(e.GetException().Message);
        }
        #endregion

        #region System Methods/Properties

        /// <summary>
        /// Shows the form window.
        /// </summary>
        /// <param name="owner"></param>
        /// <returns></returns>
        public static frmUebOP CreateWindow(Control owner, SalNumber nArztNr, SalString strBearbeiter, SalDateTime dtBearbDatum, SalString strDM)
		{
			frmUebOP frm = new frmUebOP(nArztNr, strBearbeiter, dtBearbDatum, strDM);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmUebOP FromHandle(SalWindowHandle handle)
		{
			return ((frmUebOP)SalWindow.FromHandle(handle, typeof(frmUebOP)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalBEZ()
		{
			#region Local Variables
			SalBoolean bPExists = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				// 14.01.05
				nSkonto = 0;
				// 18.12.11
				Int.SqlImmedSel(@"SELECT hbezblz, hbezkonto, hbeziban, hbezbic, hbezsigndat INTO :frmUebOP.strBEZBLZ, :frmUebOP.strBEZKonto, :frmUebOP.strBEZIBAN, :frmUebOP.strBEZBIC, :frmUebOP.dtBEZSignDat
FROM H WHERE harztnr = :frmUebOP.nBEZArztNr AND hhalternr = :frmUebOP.nHalterNr");
				if (strBEZBLZ == "" || strBEZKonto == "") 
				{
					Int.SqlImmedSel(@"SELECT hbezblz, hbezkonto INTO :frmUebOP.strBEZBLZ, :frmUebOP.strBEZKonto
FROM H WHERE harztnr = :frmUebOP.nBEZArztNr2 AND hhalternr = :frmUebOP.nHalterNr");
					if (strBEZBLZ == "" || strBEZKonto == "") 
					{
						Int.SqlImmedSel(@"SELECT hskonto, hblz, hkonto INTO :frmUebOP.nSkonto, :frmUebOP.strBEZBLZ, :frmUebOP.strBEZKonto
FROM H WHERE harztnr = :frmUebOP.nBEZArztNr AND hhalternr = :frmUebOP.nHalterNr");
						if (strBEZBLZ == "" || strBEZKonto == "") 
						{
							Int.SqlImmedSel(@"SELECT hskonto, hblz, hkonto INTO :frmUebOP.nSkonto, :frmUebOP.strBEZBLZ, :frmUebOP.strBEZKonto
FROM H WHERE harztnr = :frmUebOP.nBEZArztNr2 AND hhalternr = :frmUebOP.nHalterNr");
						}
					}
				}

				if (nSkonto == SalNumber.Null) 
				{
					nSkonto = 0;
				}
				if (nSkonto > 0) 
				{
					nDM = nDM - (nDM * nSkonto / 100);
				}
				// 08.12.11 Ä687
				// Set nDMBez = 0
				// Call SqlIstDa('FROM bez WHERE bezarztnr = :frmUebOP.nBEZArztNr
				// AND bezbearbeiter = :frmUebOP.strBearbeiter AND bezbearbdatum =  :frmUebOP.dtBearbDatum
				// AND bezhalternr = :frmUebOP.nHalterNr AND bezrechnr = :frmUebOP.nRechNr', bPExists)
				// If bPExists
				// 09.01.03
				// Call SqlImmedSel('SELECT bezdm INTO :frmUebOP.nDMBez FROM bez WHERE bezarztnr = :frmUebOP.nBEZArztNr
				// AND bezbearbeiter = :frmUebOP.strBearbeiter AND bezbearbdatum =  :frmUebOP.dtBearbDatum
				// AND bezhalternr = :frmUebOP.nHalterNr AND bezrechnr = :frmUebOP.nRechNr')
				// Set nDMBez = nDMBez + nDM
				// Call SqlImmed('UPDATE bez SET bezdm = :frmUebOP.nDMBez
				// WHERE bezarztnr = :frmUebOP.nBEZArztNr
				// AND bezbearbeiter = :frmUebOP.strBearbeiter AND bezbearbdatum =  :frmUebOP.dtBearbDatum
				// AND bezhalternr = :frmUebOP.nHalterNr AND bezrechnr = :frmUebOP.nRechNr')
				// Else
				// Call SqlImmed('INSERT INTO bez (bezarztnr, bezhalternr, bezrechnr, bezbearbeiter, bezbearbdatum, bezdm)
				// VALUES(:frmUebOP.nBEZArztNr, :frmUebOP.nHalterNr, :frmUebOP.nRechNr,
				// :frmUebOP.strBearbeiter, :frmUebOP.dtBearbDatum, :frmUebOP.nDM)')
				nDMBez = 0;
				// 23.11.15 Ä1271 14 -> 10
				// 26.07.16 Ä1377 + abeztage
				// Set dtBEZAbDatum = SalDateCurrent(  ) + 10
				Int.SqlImmedSel("SELECT abeztage INTO :frmUebOP.nBezTage FROM a WHERE aarztnr = :frmUebOP.nBEZArztNr");
				if (nBezTage == SalNumber.Null) 
				{
					nBezTage = 10;
				}
				dtBEZAbDatum = SalDateTime.Current + nBezTage;

				nBEZTag = dtBEZAbDatum.Day();
				Int.SqlIstDa("FROM bezs WHERE " + Int.PalArztNr("bezs", nBEZArztNr, nBEZArztNr2) + @"  AND bezshalternr = :frmUebOP.nHalterNr
AND bezsrechnr IS NULL", ref bPExists); // 21.02.18 F3090 weg:  AND bezserldat IS NULL
				if (!(bPExists)) 
				{
					Int.SqlIstDa(@"FROM bezs WHERE bezsarztnr = :frmUebOP.nBEZArztNr  AND bezshalternr = :frmUebOP.nHalterNr
AND bezsrechnr = :frmUebOP.nRechNr AND bezserfdat =  :frmUebOP.dtBearbDatum", ref bPExists);
					if (bPExists) 
					{
						// Call SqlImmed('UPDATE bezs SET bezddm = :frmUebOP.nDM
						// WHERE bezdarztnr = :frmUebOP.nBEZArztNr  AND bezdhalternr = :frmUebOP.nHalterNr
						// AND bezdrechnr = :frmUebOP.nRechNr AND bezderfdat =  :frmUebOP.dtBearbDatum')
					}
					else
					{
						Int.SqlImmed(@"INSERT INTO bezs (bezsarztnr, bezshalternr, bezsrechnr, bezserfdat, bezsblz, bezskonto, bezsabdatum, bezstag, bezsiban, bezsbic, bezssigndat)
VALUES(:frmUebOP.nBEZArztNr, :frmUebOP.nHalterNr, :frmUebOP.nRechNr,
:frmUebOP.dtBearbDatum, :frmUebOP.strBEZBLZ, :frmUebOP.strBEZKonto, :frmUebOP.dtBEZAbDatum, :frmUebOP.nBEZTag, :frmUebOP.strBEZIBAN, :frmUebOP.strBEZBIC, :frmUebOP.dtBEZSignDat)");
					}
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strDateiname"></param>
		/// <param name="strZielDatei"></param>
		/// <param name="strPGUID"></param>
		/// <returns></returns>
		public SalBoolean PalMOUpload(SalString strDateiname, SalString strZielDatei, SalString strPGUID)
		{
			#region Local Variables
			SalBoolean bPOk = false;
			SalVariant vData = new SalVariant();
			SalNumber nSichFileSize = 0;
			SalString strFTPOrdner = "";
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				nSichFileSize = Vis.FileGetSize(strDateiname);
				if (nSichFileSize == 0) 
				{
					nSichFileSize = 1;
				}

				if (Sql.Database == "TVN1") 
				{
					strFTPOrdner = "Praxisinfos";
				}
				else
				{
					strFTPOrdner = "Praxisinfos2";
				}

				// Set dfSichText2 = 'Datei ' || strDateiname || ' wird auf TVN-Server hochgeladen'
				Sal.WaitCursor(true);
				axFTP.Timeout = 60000;
				// 22.12.09
				//axFTP.PropSetPassive(true);
				//axFTP.MakeDirectory("/" + strFTPOrdner + "/" + strPGUID + "/");
				try
				{
					axFTP.CreateDirectory("/" + strFTPOrdner + "/" + strPGUID + "/");
				}
				catch { }
                axFTP.SetDirectory("/" + strFTPOrdner + "/" + strPGUID + "/");

                vData.SetString(strDateiname);
				//bPOk = axFTP.Store("/" + strFTPOrdner + "/" + strPGUID + "/" + strZielDatei, vData, 0, 0);
                axFTP.Put(strDateiname, "/" + strFTPOrdner + "/" + strPGUID + "/" + strZielDatei, Dart.Ftp.Synchronize.Off);
                Sal.WaitCursor(false);
				return true;
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmUebOP WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmUebOP_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmUebOP_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmUebOP_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmUebOP_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlConnection(ref this.hSqlLe);
			this.strDM = "UebOP" + this.strDM;
			if (!(Int.PalFormFrei("Übergaben"))) 
			{
				Sal.MessageBox("Abschluß läuft. Übergabe nicht erlaubt !", "Achtung", Sys.MB_Ok);
				// Call SalPostMsg(hWndForm, SAM_Close,0,0)
				this.DestroyWindow();
			}
			else
			{
				this.dfArztNr.Number = this.nArztNr;
				// 10.06.04 bBankOk
				this.bBankOk = false;
				Int.SqlImmedSel(@"SELECT AKZPRAXART,ANR2, abank, ablz, akonto
INTO :frmUebOP.strPraxArt, :frmUebOP.nArztNr2, :frmUebOP.strBank, :frmUebOP.strBLZ, :frmUebOP.strKonto
FROM A WHERE AARZTNR = :frmUebOP.dfArztNr");
				if (this.strBank != "" && this.strBLZ != "" && this.strKonto != "") 
				{
					this.bBankOk = true;
					if (this.bBankOk && this.strPraxArt != "0") 
					{
						this.bBankOk = false;
						Int.SqlImmedSel(@"SELECT abank, ablz, akonto
INTO :frmUebOP.strBank, :frmUebOP.strBLZ, :frmUebOP.strKonto
FROM A WHERE AARZTNR = :frmUebOP.nArztNr2");
						if (this.strBank != "" && this.strBLZ != "" && this.strKonto != "") 
						{
							this.bBankOk = true;
						}
					}
				}
				if (this.strPraxArt == "2") 
				{
					this.dfArztNr2.Number = this.nArztNr;
					this.dfArztNr.Number = this.nArztNr2;
					this.nArztNr = this.dfArztNr.Number;
					this.nArztNr2 = this.dfArztNr2.Number;
				}
				else if (this.strPraxArt == "1") 
				{
					this.dfArztNr2.Number = this.nArztNr2;
					this.dfArztNr.Number = this.nArztNr;
				}
				Sal.WaitCursor(false);
				// 22.09.99
				Int.SqlIstDa(@"FROM UF WHERE UFARZTNR = :frmUebOP.nArztNr
AND ufbearbeiter = :frmUebOP.strBearbeiter
AND ufbearbdatum = :frmUebOP.dtBearbDatum", ref this.bExists);
				if (!(this.bExists)) 
				{
					Sal.MessageBox(@"Das RECHNUNGSPROTOKOLL wurde
noch nicht gedruckt !", "Achtung !", Sys.MB_Ok);
					this.DestroyWindow();
				}
				// 02.09.03
				this.nDauer = SalDateTime.Current - this.dtBearbDatum;
				// If bBankOk
				// Else
				// 10.02.11 OTÄ541 auskommentieren
				// If IDOK = SalMessageBox('Bankverbindung im Arztstamm fehlt!
				// 
				// Übergabe kann nicht durchgeführt werden.', 'Achtung', MB_Ok|MB_IconStop)
				// Call SalDestroyWindow(hWndForm)
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmUebOP_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlLe.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			// 21.09.23 Ä2132
			this.strAbrID = Int.GetGUID();
			// 18.04.11 Ä563
			this.strTALand = "";
			Int.SqlImmedSel(@"SELECT aland
INTO :frmUebOP.strTALand
FROM A WHERE AARZTNR = :frmUebOP.nArztNr");
			if (this.strTALand != "" && this.strTALand != "DE") 
			{
				this.nTAReverse = 1;
			}
			else
			{
				this.nTAReverse = 0;
			}
			// 02.01.18 F3066
			Int.PalLog("UebOP01");

			Int.SqlIstDa(@" FROM LE WHERE (learztnr=:frmUebOP.nArztNr OR learztnr=:frmUebOP.nArztNr2)
AND (lehalternr=0 OR lehalternr IS NULL)
AND lebearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum", ref this.bExists);
			if (this.bExists) 
			{
				Sal.MessageBox("Es gibt noch Halter mit der Nr.0", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				Int.SqlIstDa(@" FROM LE WHERE (learztnr=:frmUebOP.nArztNr OR learztnr=:frmUebOP.nArztNr2)
AND lerechnr IS NULL
AND lebearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum", ref this.bExists);
				if (this.bExists) 
				{
					Sal.MessageBox(@"Bitte erst
RECHNUNGEN DRUCKEN
anwählen", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
			}
			if (!(this.bExists)) 
			{
				// 26.07.22 Ä2030
				Int.SqlIstDa(@" FROM LEP WHERE (leparztnr=:frmUebOP.nArztNr OR leparztnr=:frmUebOP.nArztNr2)
AND lepbearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum
AND (lepmoid IS NOT NULL and lepmoid>0)", ref this.bExists);
				if (this.bExists) 
				{
					this.strSelect = @"SELECT learztnr, lerechnr, lepmoid
INTO :frmUebOP.pnArztNr, :frmUebOP.nHalterNr,  :frmUebOP.strMOId
FROM le, lep WHERE (leparztnr=:frmUebOP.nArztNr OR leparztnr=:frmUebOP.nArztNr2)
AND lebearbeiter = :frmUebOP.strBearbeiter
AND le.lebearbdatum = :frmUebOP.dtBearbDatum
AND (lepmoid IS NOT NULL and lepmoid>0)
AND leparztnr=learztnr
AND lephalternr=leHalterNr
AND leprechnr=lerechnr
AND lepposnr=lePosNr";
					if (Int.SqlConnection(ref this.hSqlGebDat)) 
					{
					}
					Int.SqlHandleExec(this.hSqlGebDat, this.strSelect, "Fehler Behandlungs-IDs", ref Var.nCount);
					this.nFetchGebDat = this.hSqlGebDat.FetchNext();
					while (this.nFetchGebDat != Sys.FETCH_EOF) 
					{
						Int.SqlImmed("INSERT INTO bi (biarztnr, birechnr, biid, bierfdat) VALUES(:frmUebOP.pnArztNr, :frmUebOP.nRechNr, :frmUebOP.strMOId, SYSDATETIME)");
						this.nFetchGebDat = this.hSqlGebDat.FetchNext();
					}
					this.hSqlGebDat.Commit();
					this.hSqlGebDat.Disconnect();
				}
				// If bExists
				// Set strOrdner = 'F:\\Allgemein\\'
				// Set bFTPOk = axFTP.Login( 'www.tvn-elze.de', 'FTPPeg', 'ftp', '', 21 )
				// If Not bFTPOk
				// If IDOK =  SalMessageBox('Es konnte keine Verbindung zum moveta-Server hergestellt werden.
				// Die MovetaON-Rechnungs-IDs können nicht hochgeladen werden.
				// Die Übergabe der Rechnungen kann daher NICHT durchgeführt werden.
				// 
				// Bitte überprüfen Sie Ihre Internet-Verbindung.', 'Problem', MB_Ok|MB_IconAsterisk)
				// Set rbLw = TRUE
				// Else
				// Call SalStatusSetText(hWndForm, 'Erstelle MovetaON-Rechnungs-IDs')
				// Call SqlConnection( hSqlMOId )
				// Call SqlPrepar( hSqlMOId, 'SELECT lep' )
				// Call SalWaitCursor( TRUE )
				// Call SqlHandleExec(hSqlMahn,strSelect,'OP-Datei im Internet erstellen', nErr)
				// Call SqlFetchNext(hSqlMahn,nFetch)
				// While nFetch != FETCH_EOF
				// If strGUID != strGUIDAlt
				// If strGUIDAlt != ''
				// Call SalFileClose(hFile)
				// Call PalLog( 'op' || PalNullen( nMVArztNrX, 4) || '.TVN' )
				// If Not PalAbrUpload(strOrdner || 'optemp.TVN', 'op' || PalNullen( nMVArztNrX, 4) || '.TVN', strGUIDAlt)
				// Call SalMessageBox( 'Datei kann nicht hochgeladen werden !','Fehler !!',
				// MB_Ok|MB_IconAsterisk )
				// Break
				// Call PalLog( 'op' || PalNullen( nMVArztNrX, 4) || '.TVN UP!' )
				// Set bOK = SalFileOpen(hFile, strOrdner || 'optemp.TVN' ,OF_Delete)
				// Set bOK = SalFileOpen(hFile, strOrdner || 'optemp.TVN' ,OF_Create|OF_Write)
				// If bOK
				// Else
				// Call SalMessageBox( 'Datei kann nicht erstellt werden !','Fehler !!',
				// MB_Ok|MB_IconAsterisk )
				// Break
				// Set strGUIDAlt = strGUID
				// Set nMVArztNrX = nMVArztNr
				// Call SqlExecut( hSqlMahn2, 'SELECT rkhalternr, sum(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins), max(rkmahnstufe)
				// INTO :dlgMahnVor.nMVHalterNr, :dlgMahnVor.nMVDMRest, :dlgMahnVor.nMVMS
				// FROM rk, a
				// WHERE rkkzzahl<2 AND rkdeaktiv IS NULL AND (rkarztnr=aarztnr or rkarztnr=anr2) AND aarztnr = :dlgMahnVor.nMVArztNr
				// GROUP BY 1' )
				// Call SqlFetchNext( hSqlMahn2, nFetch2 )
				// While nFetch2 != FETCH_EOF
				// Call SalFilePutStr(hFile,PalNullen(nMVHalterNr,5) || ' ' || PalStrNumDecPoint( nMVDMRest, 10,2)  || ' ' || PalStrNumDecPoint( nMVMS, 2,0))
				// Call SalStatusSetText( hWndForm, 'OP -> Internet: ' || SalNumberToStrX( nMVArztNr, 0 ) || '/H' || SalNumberToStrX( nMVHalterNr, 0 ) )
				// Call SqlFetchNext( hSqlMahn2, nFetch2 )
				// Call SqlFetchNext(hSqlMahn,nFetch)
				// Call SqlCommit( hSqlMahn )
				// Call SqlDisconnect( hSqlMahn2 )
				// Call SalFileClose(hFile)
				// If strGUIDAlt != ''
				// If Not PalAbrUpload(strOrdner || 'optemp.TVN', 'op' || PalNullen( nMVArztNrX, 4) || '.TVN', strGUIDAlt)
				// Set bOK = SalFileOpen(hFile, strOrdner || 'optemp.TVN' ,OF_Delete)
				// Call axFTP.Logout(  )
				// Call SalWaitCursor( FALSE )
				// Else
				// Set bFTPOk = TRUE
				this.bFTPOk = true;
				if (this.bFTPOk) 
				{
					// 05.05.15 F2359
					Int.SqlConnection(ref this.hSqlImmed);
					// 05.05.15 F2359
					if (Int.SqlConnection(ref this.hSqlGebDat)) 
					{
					}
					Int.SqlPrepar(this.hSqlGebDat, "SELECT hgebdat INTO :frmUebOP.HGEBDAT FROM h WHERE harztnr = :frmUebOP.nArztNr AND hhalternr = :frmUebOP.nHalterNr AND hdeaktiv IS NULL ");
					// 09.07.13 Ä848
					// 03.08.15 Ä1052
					// 30.11.20 Ä1922 + Digitalrechnung
					// 04.12.20 Ä1925 + leepost
					// 11.03.21 Ä1925 / Ä1944
					this.strSelect = @"SELECT lehalternr, lehtel, lehtel2, lehtelhandy, lehtelfax, lehemail, legebdat, ledigitalrg, leleitwegid, ledigitalmail,
leepost, leepostmail, leepostaenddat
INTO :frmUebOP.nHalterNr,  :frmUebOP.strHTel, :frmUebOP.strHTel2, :frmUebOP.strHTelHandy, :frmUebOP.strHTelFax, :frmUebOP.strHEmail, :frmUebOP.dtGebDat,
:frmUebOP.strHDigitalRg, :frmUebOP.strHLeitwegID, :frmUebOP.strHDigitalMail,
:frmUebOP.nEPost, :frmUebOP.strEPostMail, :frmUebOP.dtEPostAenDat
FROM le WHERE learztnr = :frmUebOP.nArztNr
AND lebearbeiter = :frmUebOP.strBearbeiter
AND lebearbdatum = :frmUebOP.dtBearbDatum";
					Int.SqlHandleExec(this.hSqlLe, this.strSelect, "Fehler Halterkommunikation", ref Var.nCount);
					this.nFetchLe = this.hSqlLe.FetchNext();
					// 05.05.15 F2359
					// 30.11.20 Ä1922 + Digitalrechnung
					this.strSqlMsgImmed = "Programmfehler bei Halter-Kommunikationsdaten";
					Int.SqlPrepar(this.hSqlImmed, @"UPDATE h SET hhtel = :frmUebOP.strHTel, hhtel2 = :frmUebOP.strHTel2, hhtelhandy = :frmUebOP.strHTelHandy, hhtelfax = :frmUebOP.strHTelFax,
hhemail = :frmUebOP.strHEmail, hgebdat = :frmUebOP.dtGebDat,
hdigitalrg = :frmUebOP.strHDigitalRg, hleitwegid = :frmUebOP.strHLeitwegID, hdigitalmail = :frmUebOP.strHDigitalMail
WHERE harztnr = :frmUebOP.nArztNr AND hhalternr = :frmUebOP.nHalterNr");

					while (this.nFetchLe != Sys.FETCH_EOF) 
					{
						// 02.01.18 F3066
						Int.PalLog("UebOP02");

						this.SetStatusBarText("Halter-Kommunikationsdaten Halter-Nr.: " + this.nArztNr.ToString(0) + "/" + this.nHalterNr.ToString(0));
						// 03.08.15 Ä1052
						this.nResultImmed = Int.SqlHandleExecuteXError(this.hSqlGebDat, "SELECT hgebdat INTO :frmUebOP.HGEBDAT FROM h WHERE harztnr = :frmUebOP.nArztNr AND hhalternr = :frmUebOP.nHalterNr AND hdeaktiv IS NULL ", "GebDat holen");
						this.nFetchGebDat = this.hSqlGebDat.FetchNext();
						// 06.01.21 F4681 + And SalDateYear( dtGebDat ) > 1900		! 05.02.21 auch bei Else If
						if (this.HGEBDAT != SalDateTime.Null && this.dtGebDat != SalDateTime.Null && this.HGEBDAT != this.dtGebDat && this.dtGebDat.Year() > 1900) 
						{
							this.lsText = @"***abweichendes Geburtsdatum***

Bei der Abrechnung wurde ein von unseren Informationen abweichendes Geburtsdatum von der Praxis übermittelt.

Dies lautet:" + Int.PalDateToStrDE(this.dtGebDat) + ".";
							// 13.05.14 F2027
							this.nHalterNr = Int.PalCheckNULL(this.nHalterNr);

							this.strZust = Int.PalZust(this.nArztNr);
							Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :frmUebOP.strZust, :frmUebOP.nArztNr, :frmUebOP.nHalterNr, :frmUebOP.nRechNr,
:frmUebOP.lsText , SYSDATE, NULL, 'N', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
							this.SetStatusBarText("Geburtsdatum abweichend?: " + this.nArztNr.ToString(0) + "/H" + this.nHalterNr.ToString(0));
							// 18.01.16 F2608 auskommentiert
							// Set dtGebDat = HGEBDAT
						}
						else if (this.HGEBDAT == SalDateTime.Null && this.dtGebDat != SalDateTime.Null && this.HGEBDAT != this.dtGebDat && this.dtGebDat.Year() > 1900) 
						{
							this.lsText = @"***Geburtsdatum von TA übernommen***

Bei der Abrechnung wurde ein Geburtsdatum von der Praxis übermittelt.

Dies lautet:" + Int.PalDateToStrDE(this.dtGebDat) + ".";
							// 13.05.14 F2027
							this.nHalterNr = Int.PalCheckNULL(this.nHalterNr);

							this.strZust = Int.PalZust(this.nArztNr);
							Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :frmUebOP.strZust, :frmUebOP.nArztNr, :frmUebOP.nHalterNr, :frmUebOP.nRechNr,
:frmUebOP.lsText , SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
							this.SetStatusBarText("Geburtsdatum übernommen: " + this.nArztNr.ToString(0) + "/H" + this.nHalterNr.ToString(0));
							// 18.01.16 F2608 auskommentiert
							// Set dtGebDat = HGEBDAT
						}
                        // 05.05.15 F2359
                        // Call SqlImmed( 'UPDATE h SET hhtel = :frmUebOP.strHTel, hhtel2 = :frmUebOP.strHTel2, hhtelhandy = :frmUebOP.strHTelHandy, hhtelfax = :frmUebOP.strHTelFax, hhemail = :frmUebOP.strHEmail
                        // WHERE harztnr = :frmUebOP.nArztNr AND hhalternr = :frmUebOP.nHalterNr' )
                        // 16.10.24 F5150 ###
                        if (this.strHDigitalRg == "")
                        {
                            Int.SqlImmedSel(@"SELECT hdigitalrg, hleitwegid, hdigitalmail
INTO :frmUebOP.strHDigitalRg, :frmUebOP.strHLeitwegID, :frmUebOP.strHDigitalMail
FROM h
WHERE harztnr = :frmUebOP.nArztNr AND hhalternr = :frmUebOP.nHalterNr");
                        }
                        // 30.11.20 Ä1922 + Digitalrechnung
                        this.nResultImmed = Int.SqlHandleExecuteXError(this.hSqlImmed, @"UPDATE h SET hhtel = :frmUebOP.strHTel, hhtel2 = :frmUebOP.strHTel2, hhtelhandy = :frmUebOP.strHTelHandy, hhtelfax = :frmUebOP.strHTelFax,
hhemail = :frmUebOP.strHEmail, hgebdat = :frmUebOP.dtGebDat,
hdigitalrg = :frmUebOP.strHDigitalRg, hleitwegid = :frmUebOP.strHLeitwegID, hdigitalmail = :frmUebOP.strHDigitalMail
WHERE harztnr = :frmUebOP.nArztNr AND hhalternr = :frmUebOP.nHalterNr", this.strSqlMsgImmed);
						// 11.03.21 Ä1925 / Ä1944	18.03.21 nach frmSpeRg verschoben
						// If dtEPostAenDat != DATETIME_Null
						// Call SqlImmedSel( 'SELECT hepostaenddat, hpmemail INTO :frmUebOP.dtEPostAenDatH, :frmUebOP.strPMMail FROM h
						// WHERE harztnr = :frmUebOP.nArztNr AND hhalternr = :frmUebOP.nHalterNr')
						// If dtEPostAenDatH = DATETIME_Null
						// Set dtEPostAenDatH = '1900-01-01'
						// If dtEPostAenDat > dtEPostAenDatH
						// If nEPost = 0 or nEPost = NUMBER_Null
						// Set strEPostMail = ''
						// Call SqlImmed( 'UPDATE h SET hpmemail = :frmUebOP.strEPostMail, hepostaenddat = :frmUebOP.dtEPostAenDat
						// WHERE harztnr = :frmUebOP.nArztNr AND hhalternr = :frmUebOP.nHalterNr' )
						// Call PalLogTyp( PalStrNum0( nArztNr, 4, 0 ) || '/H' || PalStrNum0( nHalterNr, 5, 0 ) || ': E-Post-Daten von Pegasus übernommen: ' || strEPostMail || ' (H:' || PalDateToStrDE( dtEPostAenDatH ) || '/M:'|| PalDateToStrDE( dtEPostAenDat ) || ')', 1 )

						this.HGEBDAT = SalDateTime.Null;
						this.nFetchLe = this.hSqlLe.FetchNext();
					}
					this.hSqlLe.Commit();
					// 05.05.15 F2359
					this.hSqlImmed.Commit();
					// 05.05.15 F2359
					this.hSqlGebDat.Disconnect();
					// 08.10.19 F4527
					this.bnurOPs = false;
					Int.SqlIstDa(@"FROM lep WHERE leparztnr=:frmUebOP.nArztNr
AND lepbearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum
AND leprechtext LIKE 'Die o.g. Tierarztpraxis hat uns mit dem Inkasso%'", ref this.bnurOPs);


					this.strSelect = @"SELECT lehalternr, lerechnr, lebrutto
INTO :frmUebOP.nHalterNr,  :frmUebOP.nRechNr, :frmUebOP.nDM
FROM le WHERE learztnr = :frmUebOP.nArztNr
AND lebearbeiter = :frmUebOP.strBearbeiter
AND lebearbdatum = :frmUebOP.dtBearbDatum AND lebrutto < 0";
					Int.SqlHandleExec(this.hSqlLe, this.strSelect, "Fehler", ref Var.nCount);
					this.nFetchLe = this.hSqlLe.FetchNext();
					while (this.nFetchLe != Sys.FETCH_EOF) 
					{
						// 02.01.18 F3066
						Int.PalLog("UebOP03");

						this.lsText = @"***Gutschrift***

Dieser Halter hat heute eine Gutschrift in Höhe von €" + Int.PalStrNum(this.nDM * -1, 8, 2) + @" im Zuge einer normalen Abrechnung erhalten.

Bitte mit OPs verbuchen oder erstatten.";
						// 13.05.14 F2027
						this.nHalterNr = Int.PalCheckNULL(this.nHalterNr);

						// 09.05.16 Ä1367 AN -> HE
						Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, 'HE', :frmUebOP.nArztNr, :frmUebOP.nHalterNr, :frmUebOP.nRechNr,
:frmUebOP.lsText , SYSDATE, NULL, 'N', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
						this.SetStatusBarText("Gutschrift? Rech-Nr.: " + this.nArztNr.ToString(0) + "/" + this.nRechNr.ToString(0));
						this.nFetchLe = this.hSqlLe.FetchNext();
					}
					this.hSqlLe.Commit();
					// 14.01.00 Bankeinzüge
					// 30.07.12 F1363
					// Set strSelect = 'SELECT lehalternr, lepla, lerechnr, lepmwst, sum(lepdm)
					// INTO :frmUebOP.nHalterNr, :frmUebOP.strLA, :frmUebOP.nRechNr, :frmUebOP.nRkMwSt, :frmUebOP.nDM
					// FROM le,lep, h WHERE learztnr=:frmUebOP.nArztNr
					// AND lebearbeiter=:frmUebOP.strBearbeiter
					// AND le.lebearbdatum=:frmUebOP.dtBearbDatum
					// AND hbankeinzug = 1
					// AND leparztnr=learztnr
					// AND lephalternr=leHalterNr
					// AND leprechnr=lerechnr
					// AND lepposnr=lePosNr
					// AND learztnr = harztnr AND lehalternr = hhalternr
					// GROUP BY 1,2,3,4'
					this.strSelect = @"SELECT lehalternr, lerechnr, lebrutto
INTO :frmUebOP.nHalterNr, :frmUebOP.nRechNr, :frmUebOP.nDM
FROM le, h WHERE learztnr=:frmUebOP.nArztNr
AND lebearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum
AND hbankeinzug = 1
AND learztnr = harztnr AND lehalternr = hhalternr AND hdeaktiv IS NULL ";

					Int.SqlHandleExec(this.hSqlLe, this.strSelect, "Fehler", ref Var.nCount);
					this.nFetchLe = this.hSqlLe.FetchNext();
					while (this.nFetchLe != Sys.FETCH_EOF) 
					{
						// 02.01.18 F3066
						Int.PalLog("UebOP04");

						// Set nDM = nDM + SalNumberRound(nDM * nRkMwSt) / 100.00
						// 19.06.12 F1335 if nDM < 0
						if (this.nDM < 0) 
						{
							this.lsText = @"***Guthaben***

Für dieser Halter sollte heute eine Gutschrift in Höhe von €" + Int.PalStrNum(this.nDM * -1, 8, 2) + @" im Zuge einer normalen Abrechnung eingezogen werden.
Wegen des negativen Betrages wurde dies nicht durchgeführt.

Bitte mit OPs verbuchen oder erstatten.";
							// 13.05.14 F2027
							this.nHalterNr = Int.PalCheckNULL(this.nHalterNr);

							// 09.05.16 Ä1367 AN -> HE
							Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, 'HE', :frmUebOP.nArztNr, :frmUebOP.nHalterNr, :frmUebOP.nRechNr,
:frmUebOP.lsText , SYSDATE, NULL, 'N', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
						}
						else
						{
							this.SetStatusBarText("Bankeinzüge für Rech-Nr.: " + this.nArztNr.ToString(0) + "/" + this.nRechNr.ToString(0));
							// 11.01.12 Ä687
							this.nBEZArztNr = this.nArztNr;
							this.nBEZArztNr2 = this.nArztNr2;
							this.PalBEZ();
						}
						this.nFetchLe = this.hSqlLe.FetchNext();
					}
					this.hSqlLe.Commit();
					// 20.08.12 Ä519
					// 21.12.10 OTÄ519
					this.strSelect = @"SELECT leguid
INTO :frmUebOP.strLEGUID
FROM le WHERE learztnr=:frmUebOP.nArztNr
AND lebearbeiter=:frmUebOP.strBearbeiter
AND le.lebearbdatum=:frmUebOP.dtBearbDatum
GROUP BY 1";
					Int.SqlHandleExec(this.hSqlLe, this.strSelect, "Fehler", ref Var.nCount);
					this.nFetchLe = this.hSqlLe.FetchNext();
					while (this.nFetchLe != Sys.FETCH_EOF) 
					{
						// 02.01.18 F3066
						Int.PalLog("UebOP05");

						// 21.12.10 OTÄ519 von frmDiskEin hierher verschoben
						if (this.strLEGUID != "") 
						{
							Int.SqlIstDa("FROM db WHERE dbarztnr = :frmUebOP.nArztNr AND dbguid = :frmUebOP.strLEGUID", ref this.bExists);
							if (!(this.bExists)) 
							{
								Int.SqlImmed("INSERT INTO db (dbarztnr, dbguid) VALUES (:frmUebOP.nArztNr, :frmUebOP.strLEGUID)");
							}
						}

						this.SetStatusBarText("Rech-Nr.: " + this.nArztNr.ToString(0) + "/" + this.nRechNr.ToString(0));
						this.nFetchLe = this.hSqlLe.FetchNext();
					}
					this.hSqlLe.Commit();
					// 24.06.19 Ä1854
					Int.SqlImmedSel(@"SELECT MIN(lerechnr), MAX(lerechnr)
INTO :frmUebOP.nRechNrMin, :frmUebOP.nRechNrMax
FROM le WHERE learztnr=:frmUebOP.nArztNr
AND lebearbeiter=:frmUebOP.strBearbeiter
AND le.lebearbdatum=:frmUebOP.dtBearbDatum");
					// Call SqlImmedSel( 'SELECT sum(lepdm)
					// INTO :frmUebOP.nVorschMindzualt
					// FROM le,lep WHERE learztnr=:frmUebOP.nArztNr
					// AND lebearbeiter=:frmUebOP.strBearbeiter
					// AND le.lebearbdatum=:frmUebOP.dtBearbDatum
					// AND leparztnr=learztnr
					// AND lephalternr=leHalterNr
					// AND leprechnr=lerechnr
					// AND lepposnr=lePosNr
					// AND lepdatum < SYSDATE - 4 MONTHS' )

					this.nRechNrAlt = 0;
					// 13.11.23 Ä2129 + LEBEGUID
					this.strSelect = @"SELECT lerechnr,lepla, lepmwst, min(lehalternr),min(lerechdat), min(leposnr),
sum(lepdm), max(lebeguid)
INTO :frmUebOP.nRechNr, :frmUebOP.strLA, :frmUebOP.nRkMwSt, :frmUebOP.nHalterNr,
:frmUebOP.dtRkRechDat, :frmUebOP.nPosNr ,:frmUebOP.nDM, :frmUebOP.strBEGuid
FROM le,lep WHERE learztnr=:frmUebOP.nArztNr
AND lebearbeiter=:frmUebOP.strBearbeiter
AND le.lebearbdatum=:frmUebOP.dtBearbDatum
AND leparztnr=learztnr
AND lephalternr=leHalterNr
AND leprechnr=lerechnr
AND lepposnr=lePosNr
GROUP BY 1,2,3";
					Int.SqlHandleExec(this.hSqlLe, this.strSelect, "Fehler", ref Var.nCount);
					this.nFetchLe = this.hSqlLe.FetchNext();
					// 05.05.15 F2359
					this.strSqlMsgImmed = "Programmfehler bei Halter-BEZ holen";
					Int.SqlPrepar(this.hSqlImmed, "SELECT hbankeinzug INTO :frmUebOP.nBankeinzug FROM h WHERE harztnr=:frmUebOP.nArztNr AND hhalternr=:frmUebOP.nHalterNr AND hdeaktiv IS NULL ");

					while (this.nFetchLe != Sys.FETCH_EOF) 
					{
						// 02.01.18 F3066
						Int.PalLog("UebOP06");

						if (this.nRechNr != this.nRechNrAlt) 
						{
							this.nRkDMLeis = 0;
							this.nRkDMArzn = 0;
							this.nRechNrAlt = this.nRechNr;
						}
						if (this.strLA == Var.strL) 
						{
							this.nRkDMLeis = this.nRkDMLeis + this.nDM + (this.nDM * this.nRkMwSt).Round() / 100.00m;
						}
						else
						{
							this.nRkDMArzn = this.nRkDMArzn + this.nDM + (this.nDM * this.nRkMwSt).Round() / 100.00m;
						}
						if (this.nRkDMLeis == SalNumber.Null) 
						{
							this.nRkDMLeis = 0;
						}
						if (this.nRkDMArzn == SalNumber.Null) 
						{
							this.nRkDMArzn = 0;
						}
						Int.SqlIstDa(@" FROM rk WHERE rkarztnr=:frmUebOP.nArztNr
AND rkhalternr=:frmUebOP.nHalterNr AND rkrechnr=:frmUebOP.nRechNr AND rkdeaktiv IS NULL ", ref this.bExists);
						if (this.bExists) 
						{
							if (this.strLA == Var.strL) 
							{
								Int.SqlImmedX(@"UPDATE  rk  SET
rkdmleis = :frmUebOP.nRkDMLeis
WHERE rkarztnr=:frmUebOP.nArztNr
AND rkhalternr=:frmUebOP.nHalterNr
AND rkrechnr=:frmUebOP.nRechNr");
							}
							else
							{
								Int.SqlImmedX(@"UPDATE  rk  SET
rkdmarzn = :frmUebOP.nRkDMArzn
WHERE rkarztnr=:frmUebOP.nArztNr
AND rkhalternr=:frmUebOP.nHalterNr
AND rkrechnr=:frmUebOP.nRechNr");
							}
						}
						else
						{
							// 05.01.01 hat immer 14 Tage genommen. Rechnungsdruck war aber ok
							this.nOPFaellTg = -1;
							// 05.05.11 Ä572 + hland
							Int.SqlImmedSel(@"SELECT hfaelltg, hland
INTO :frmUebOP.nOPFaellTg, :frmUebOP.strTHLand
FROM H WHERE HARZTNR = :frmUebOP.nArztNr AND HHALTERNR = :frmUebOP.nHalterNr AND hdeaktiv IS NULL ");
							if (this.nOPFaellTg == -1 || this.nOPFaellTg == SalNumber.Null) 
							{
								Int.SqlImmedSel(@"SELECT afaelltg
INTO :frmUebOP.nOPFaellTg
FROM A WHERE AARZTNR = :frmUebOP.nArztNr");
								if (this.nOPFaellTg == -1 || this.nOPFaellTg == SalNumber.Null) 
								{
									this.nOPFaellTg = Var.nFaellTg;
								}
							}
							Var.nFaellTg = this.nOPFaellTg;

							this.dtRkFaellDat = this.dtRkRechDat + Var.nFaellTg;
							// 12.12.97  	Verjährung auf erstes Leistungsdatum
							this.dtRkErstLeistDat = this.dtRkRechDat;
							Int.SqlImmedSel(@"SELECT min(lepdatum)
INTO :frmUebOP.dtRkErstLeistDat
FROM lep WHERE leparztnr=:frmUebOP.nArztNr
AND leprechnr=:frmUebOP.nRechNr
AND lepbearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum
AND lepposnr = :frmUebOP.nPosNr
AND lepdatum is not null");
							// 27.09.05 Verjährung auf 3 jahre gesetzt.
							// 05.05.11 Ä572 + AT
							if (this.strTHLand == "AT") 
							{
								this.dtRkVerjaehr = new SalDateTime(this.dtRkErstLeistDat.Year() + 3, this.dtRkErstLeistDat.Month(), this.dtRkErstLeistDat.Day(), 0, 0, 0);
							}
							else
							{
								if (this.dtRkErstLeistDat < new SalDateTime(2001, 1, 1)) 
								{
									this.dtRkVerjaehr = new SalDateTime(this.dtRkErstLeistDat.Year() + 2, 12, 31, 0, 0, 0);
								}
								else
								{
									this.dtRkVerjaehr = new SalDateTime(this.dtRkErstLeistDat.Year() + 3, 12, 31, 0, 0, 0);
								}
							}

							// 01.08.23 Ä2107 Versicherung
							this.strVeCode = "";
							this.strVeVSNr = "";
							Int.SqlImmedSel(@"SELECT levecode, levevsnr INTO :frmUebOP.strVeCode, :frmUebOP.strVeVSNr
FROM le
WHERE learztnr=:frmUebOP.nArztNr
AND lerechnr=:frmUebOP.nRechNr
AND lebearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum");
							// 29.01.08 A194
							this.strBarcode = "";
							Int.SqlImmedSel(@"SELECT lebarcode, lepapierrg INTO :frmUebOP.strBarcode, :frmUebOP.nPapierRg
FROM le
WHERE learztnr=:frmUebOP.nArztNr
AND lerechnr=:frmUebOP.nRechNr
AND lebearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum
AND leposnr = :frmUebOP.nPosNr");

							// 16.03.10 OTÄ397
							Int.SqlImmedSel(@"SELECT lereverse INTO :frmUebOP.nReverse FROM le
WHERE learztnr=:frmUebOP.nArztNr
AND lerechnr=:frmUebOP.nRechNr
AND lebearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum");
							// 27.06.11 Ä583
							this.bBVDv = false;
							Int.SqlIstDa(@"FROM lep WHERE leparztnr=:frmUebOP.nArztNr
AND leprechnr=:frmUebOP.nRechNr
AND lepbearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum
AND lepposnr = :frmUebOP.nPosNr
AND leprechtext LIKE '%(B 502 d/e)%'", ref this.bBVDv);
							if (this.bBVDv) 
							{
								this.nMahnstufe = 8;
							}
							else
							{
								this.nMahnstufe = 0;
							}
							// Set dtRkVerjaehr = SalDateConstruct(SalDateYear(dtRkRechDat)+2,12,31,0,0,0)
							// 01.08.23 Ä2107 Versicherung
							this.strRA = "Rechnung";
							// 21.09.23 Ä2132 + rkabrid
							// 13.11.23 Ä2129 +, RKBEGUID
							if (Int.SqlImmedX(@"INSERT INTO RK (RKARZTNR, RKHALTERNR, RKRECHNR,
RKBUCHTEXT, RKRECHDAT, RKFAELLDAT, RKDMLEIS, RKDMARZN,  RKDMMAHN, RKDMZINS, RKMBDMOPL,
RKVERJAEHR,RKZALEIS,RKZAARZN,RKZAMAHN, RKZAZINS, RKMBZAOPL, RKKZZAHL,RKKZ, RKMAHNSTUFE, RKBARCODE, RKREVERSE, RKPAPIERRG, RKVECODE, RKVEVSNR,
RKABRID, RKBEGUID)
VALUES(:frmUebOP.nArztNr, :frmUebOP.nHalterNr, :frmUebOP.nRechNr,
:frmUebOP.strRA, :frmUebOP.dtRkRechDat, :frmUebOP.dtRkFaellDat, :frmUebOP.nRkDMLeis, :frmUebOP.nRkDMArzn,0,0,0,
:frmUebOP.dtRkVerjaehr,0, 0,0,0,0,0,0,:frmUebOP.nMahnstufe, :frmUebOP.strBarcode, :frmUebOP.nReverse, :frmUebOP.nPapierRg,
:frmUebOP.strVeCode, :frmUebOP.strVeVSNr,
:frmUebOP.strAbrID, :frmUebOP.strBEGuid )")) 
							{
								// 03.11.14 Ä1067 + lereverseversion
								// 06.02.18 Ä1698 + lprabatt
								// 12.10.20 Ä1903 +lpformat
								// 23.09.22 Ä2030 + rpmoid
								if (Int.SqlImmedX(@"INSERT INTO RP (rparztnr, rphalternr, rprechnr, rpla, rpmwst, rprechtext, rpdatum, rpdm, rptext, rpzeidat, rpreverseversion, rprabatt, rpformat, rpmoid)
SELECT leparztnr, lephalternr,leprechnr,
lepla, lepmwst, leprechtext, lepdatum, lepdm, leptext, lepzeidat, lepreverseversion, leprabatt, lepformat, lepmoid
FROM lep WHERE leparztnr=:frmUebOP.nArztNr
AND leprechnr=:frmUebOP.nRechNr
AND lepbearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum
AND lepposnr = :frmUebOP.nPosNr")) 
								{
									// 29.06.09 OTÄ255 Beihilfe
									Int.SqlConnection(ref this.hSqlTSK);
									this.nBeihilfe = 0;
									Int.SqlHandleExec(this.hSqlTSK, @"
SELECT leprechtext, lepmwst
INTO :frmUebOP.strRechTextTSK, :frmUebOP.nMwStTSK
FROM lep
WHERE leparztnr=:frmUebOP.nArztNr
AND leprechnr=:frmUebOP.nRechNr
AND lepbearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum
AND lepposnr = :frmUebOP.nPosNr
AND @LEFT(leprechtext,5) = '>>TSK'
AND @RIGHT(leprechtext,2) = '<<'", "Hole TSK-Daten", ref Var.nCount);
									this.nFetchTSK = this.hSqlTSK.FetchNext();
									while (this.nFetchTSK != Sys.FETCH_EOF) 
									{
										this.nBeihilfe = Int.PalValNum(this.strRechTextTSK.Mid(5, 11));
										if (this.nBeihilfe != 0) 
										{
											this.nBeihNetto = ((this.nBeihilfe * 100) / (1 + this.nMwStTSK / 100)).Round() / 100;
											this.nBeihMwSt = this.nBeihilfe - this.nBeihNetto;
											// 08.09.09 OTF314 Bankeinzüge
											Int.SqlIstDa(@"FROM bez WHERE bezarztnr = :frmUebOP.nBEZArztNr
AND bezbearbeiter = :frmUebOP.strBearbeiter AND bezbearbdatum =  :frmUebOP.dtBearbDatum
AND bezhalternr = :frmUebOP.nHalterNr AND bezrechnr = :frmUebOP.nRechNr", ref this.bExists);
											if (this.bExists) 
											{
												Int.SqlImmedSel(@"
SELECT bezdm
INTO :frmUebOP.nDM
FROM bez
WHERE bezarztnr = :frmUebOP.nBEZArztNr
AND bezbearbeiter = :frmUebOP.strBearbeiter AND bezbearbdatum =  :frmUebOP.dtBearbDatum
AND bezhalternr = :frmUebOP.nHalterNr AND bezrechnr = :frmUebOP.nRechNr");
												this.nDM = this.nDM - this.nBeihilfe;
												if (this.nDM <= 0) 
												{
													this.nDM = 0;
													Int.SqlImmed(@"
DELETE FROM bez
WHERE bezarztnr = :frmUebOP.nBEZArztNr
AND bezbearbeiter = :frmUebOP.strBearbeiter AND bezbearbdatum =  :frmUebOP.dtBearbDatum
AND bezhalternr = :frmUebOP.nHalterNr AND bezrechnr = :frmUebOP.nRechNr");
												}
												else
												{
													Int.SqlImmed(@"
UPDATE bez SET bezdm = :frmUebOP.nDM
WHERE bezarztnr = :frmUebOP.nBEZArztNr
AND bezbearbeiter = :frmUebOP.strBearbeiter AND bezbearbdatum =  :frmUebOP.dtBearbDatum
AND bezhalternr = :frmUebOP.nHalterNr AND bezrechnr = :frmUebOP.nRechNr");
												}
											}
											Int.SqlIstDa(@"FROM bez WHERE bezarztnr = :frmUebOP.nBEZArztNr
AND bezbearbeiter = :frmUebOP.strBearbeiter AND bezbearbdatum =  :frmUebOP.dtBearbDatum
AND bezhalternr = :frmUebOP.nHalterNr AND bezrechnr = :frmUebOP.nRechNr", ref this.bExists);
											// 11.12.23 Ä2152
											if (this.strBEGuid != "") 
											{
												Int.SqlImmed("UPDATE be SET bearztnr = :frmUebOP.nArztNr, berechnr = :frmUebOP.nRechNr WHERE beguid = :frmUebOP.strBEGuid");
											}

											// Kontoauszug
											// 28.09.20 F	19.10.20 wieder raus und ganz nach unten
											// Call SqlImmedSel( 'SELECT rkdmleis, rkdmarzn INTO :frmUebOP.nRkDMLeis, :frmUebOP.nRkDMArzn
											// FROM rk
											// WHERE rkarztnr=:frmUebOP.nArztNr AND rkrechnr=:frmUebOP.nRechNr' )
											// If nRkDMLeis = NUMBER_Null
											// Set nRkDMLeis = 0
											// If nRkDMArzn = NUMBER_Null
											// Set nRkDMArzn = 0
											// If nBeihilfe >= (nRkDMLeis + nRkDMArzn)
											// Set nKZZahl = 2
											// Else
											// Set nKZZahl = 1
											this.nKZZahl = 1;
											// 11.06.21 Ä1962
											// Set strBuchText = 'TSK-Beih ' || PalStrNum( nArztNr, 4, 0 ) || '/H' || PalStrNum( nHalterNr, 5, 0 )
											this.strBuchText = "Tierseuchenkasse-Beihilfe " + Int.PalStrNum(this.nArztNr, 4, 0) + "/H" + Int.PalStrNum(this.nHalterNr, 5, 0);
                                            // 16.06.09 OTÄ255
                                            // 20.11.23 Ä2144 + tkkontocode
                                            // 06.04.23 F5088 XXX
                                            this.dtBuchDat = SalDateTime.Current;
                                            Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
                                            if (this.dtBuchDat < Var.dtINIMinBuchDat)
                                            {
                                                this.dtBuchDat = Var.dtINIMinBuchDat;
                                            }

                                            // 06.03.24 F5088 XXX SYSDATE -> :frmUebOP.dtBuchDat
                                            Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkkontocode)
VALUES (:frmUebOP.nArztNr, 1, 0, :frmUebOP.strBuchText,:frmUebOP.nHalterNr, :frmUebOP.nRechNr, 0, :frmUebOP.dtBuchDat,
15800, 0, 0, 0, :frmUebOP.nBeihilfe, 0, 0, 0, :frmUebOP.nBeihMwSt, :frmUebOP.nMwStTSK, :frmUebOP.nKZZahl, 0, 0,
0, :frmUebOP.nBeihilfe, 'UebOPTSK-FordMitgl')");

                                            // Sachkonten - FiBu
                                            // 06.03.24 F5088 XXX SYSDATE -> :frmUebOP.dtBuchDat
                                            Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp, fiarztnr, fihalternr)
VALUES (0, 15800,16000, :frmUebOP.nArztNr, :frmUebOP.dtBuchDat, :frmUebOP.strBuchText, :frmUebOP.nBeihilfe, 6, :frmUebOP.nArztNr,:frmUebOP.nHalterNr)");
                                            // 02.07.09 Info-Bild
                                            Int.SqlImmedX(@"UPDATE  rk  SET
rkkzzahl = :frmUebOP.nKZZahl,
rkzaleis = rkzaleis + :frmUebOP.nBeihilfe
WHERE rkarztnr=:frmUebOP.nArztNr
AND rkrechnr=:frmUebOP.nRechNr");
											// 08.09.09 OTÄ314 + zabuchtext
											// 13.05.14 F2027
											this.nHalterNr = Int.PalCheckNULL(this.nHalterNr);

											// 26.03.19 Ä1844 + , zaerfdat
											if (Int.SqlImmedX(@"
INSERT INTO ZA
( zaarztnr, zahalternr, zarechnr, zakz, zabuchdat, zabelegnr, zadm, zaproznr, zabuchtext, zaerfdat )
VALUES
( :frmUebOP.nArztNr, :frmUebOP.nHalterNr, :frmUebOP.nRechNr, :frmUebOP.nKZZahl, SYSDATE, NULL, :frmUebOP.nBeihilfe, NULL, 'TSK' , SYSDATETIME)")) 
											{
											}
											Int.SqlImmedSel(@"SELECT ROWID INTO :frmUebOP.strTSKROWID
FROM rp
WHERE rparztnr=:frmUebOP.nArztNr
AND rprechnr=:frmUebOP.nRechNr");
											if (Int.SqlImmedX(@"
UPDATE RP SET
rpdmzahl = :frmUebOP.nBeihNetto
WHERE ROWID = :frmUebOP.strTSKROWID")) 
											{
											}
										}
										this.nFetchTSK = this.hSqlTSK.FetchNext();
									}
									this.hSqlTSK.Disconnect();
									// 08.12.23 Ä2152
									Int.SqlImmedSel(@"SELECT SUM(lepdm) INTO :frmUebOP.nSumVerbrauchsmat
FROM lep
WHERE leparztnr=:frmUebOP.nArztNr
AND leprechnr=:frmUebOP.nRechNr
AND lepbearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum
AND lepposnr = :frmUebOP.nPosNr
AND leprechtext = 'Verbrauchsmaterialien §7'");
									if (this.nSumVerbrauchsmat > 0) 
									{
										this.lsText = "Verbrauchsmaterial € " + this.nSumVerbrauchsmat.ToString(2) + " hinzugefügt.";
                                        // 17.01.24
                                        // Call SqlImmed('INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
                                        // VALUES (:strBNZei, \'*\', :frmUebOP.nArztNr, :frmUebOP.nHalterNr, :frmUebOP.nRechNr,
                                        // :frmUebOP.lsText  , SYSDATE, NULL, \'N\', \'TN\', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)')
                                        Int.SqlImmed(@"INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmUebOP.nArztNr, :frmUebOP.nHalterNr, :frmUebOP.nRechNr,
:frmUebOP.lsText  , SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
                                    }

									// Call SqlImmedX('UPDATE  rk  SET
									// rkkzzahl = :frmUebOP.nKZZahl,
									// rkzaleis = rkzaleis + :frmUebOP.nBeihilfe
									// WHERE rkarztnr=:frmUebOP.nArztNr
									// AND rkrechnr=:frmUebOP.nRechNr')
									// 08.05.09
									Int.SqlImmedX(@"DELETE FROM LEP WHERE leparztnr=:frmUebOP.nArztNr
AND leprechnr = :frmUebOP.nRechNr
AND lepbearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum");
									Int.SqlImmedX(@"DELETE FROM LE WHERE learztnr=:frmUebOP.nArztNr
AND lerechnr = :frmUebOP.nRechNr
AND lebearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum");
								}
							}
							// Set frmMain.dtHBBuchDat = SalDateCurrent()
							// If nRkDMLeis != 0
							// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
							// VALUES(:frmUebOP.nArztNr, :frmUebOP.nHalterNr, :frmUebOP.nRechNr, :frmUebOP.dtRkRechDat, \'RGLe\', :frmMain.dtHBBuchDat, :frmUebOP.nRkDMLeis, 16420, NULL, \'Rechnung\')')
							// If nRkDMArzn != 0
							// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
							// VALUES(:frmUebOP.nArztNr, :frmUebOP.nHalterNr, :frmUebOP.nRechNr, :frmUebOP.dtRkRechDat, \'RGAr\', :frmMain.dtHBBuchDat, :frmUebOP.nRkDMArzn, 16420, NULL, \'Rechnung\')')

						}
						// 09.09.13 Ä968
						// 05.05.15 F2359
						// If SqlImmedSel( 'SELECT hbankeinzug INTO :frmUebOP.nBankeinzug FROM h WHERE harztnr=:frmUebOP.nArztNr AND hhalternr=:frmUebOP.nHalterNr' )
						this.nResultImmed = Int.SqlHandleExecuteXError(this.hSqlImmed, "SELECT hbankeinzug INTO :frmUebOP.nBankeinzug FROM h WHERE harztnr=:frmUebOP.nArztNr AND hhalternr=:frmUebOP.nHalterNr", this.strSqlMsgImmed);
						if (this.nResultImmed == Sys.IDOK) 
						{
							Var.nFetchImmed = this.hSqlImmed.FetchNext();
						}

						if (this.nBankeinzug == 1) 
						{
							Int.SqlImmedX(@"UPDATE  rk  SET
rkmahnsperrbis = SYSDATE + 30
WHERE rkarztnr=:frmUebOP.nArztNr
AND rkhalternr=:frmUebOP.nHalterNr
AND rkrechnr=:frmUebOP.nRechNr");
						}

						this.SetStatusBarText("Rech-Nr.: " + this.nArztNr.ToString(0) + "/" + this.nRechNr.ToString(0));
						this.nFetchLe = this.hSqlLe.FetchNext();
					}
					// 05.05.15 F2359
					this.hSqlImmed.Commit();

					this.hSqlLe.Commit();
					// 02.01.18 F3066
					Int.PalLog("UebOP07");
					// 19.10.20, auch wegen F3131	! 28.10.20 +  AND (rkdmleis+rkdmarzn) > 0
					Int.SqlImmedX(@"UPDATE  rk  SET
rkkzzahl = 2
WHERE rkarztnr=:frmUebOP.nArztNr
AND rkrechdat =:frmUebOP.dtRkRechDat
AND (rkzaleis+rkzamahn) >= (rkdmleis+rkdmarzn) AND rkkzzahl<2 AND (rkdmleis+rkdmarzn) > 0");

					Int.SqlImmedX(@"UPDATE  rk  SET
rkkzzahl = 4
WHERE rkarztnr=:frmUebOP.nArztNr
AND rkrechdat =:frmUebOP.dtRkRechDat
AND rkdmleis=0 AND rkdmarzn=0");
					// 20.10.15 Ä1252 + hsperrdatum
					Int.SqlImmedSel(@"SELECT
ufrechsumm, ufdmgebuehr, ufprozgebuehr, ufdmporto, ufdmvst, ufprozvst, ufanzrg, ufsperrsumme
INTO :frmUebOP.nUFRechSumm, :frmUebOP.nUFDMGeb, :frmUebOP.nUFProzGeb,
:frmUebOP.nUFDMPorto, :frmUebOP.nUFDMVSt, :frmUebOP.nUFProzVSt,
:frmUebOP.nUFAnzRg, :frmUebOP.nUFSperrSumme
FROM UF WHERE ufarztnr=:frmUebOP.nArztNr
AND ufbearbeiter=:frmUebOP.strBearbeiter
AND ufbearbdatum=:frmUebOP.dtBearbDatum");
					// 28.05.21 Ä1962
					// Set strTKBuchText = 'GEBV' ||  SalNumberToStrX(nUFAnzRg,0) || 'RG'
					this.strTKBuchText = ("Gebühren von " + this.nUFAnzRg.ToString(0) + " Rechnungen").Left(50);

					switch (this.nUFProzGeb * 100)
					{
						case 100:
							this.nTKKonto = 80350;
							break;
						
						case 125:
							this.nTKKonto = 80370;
							break;
						
						case 150:
							this.nTKKonto = 80400;
							break;
						
						case 175:
							this.nTKKonto = 80450;
							break;
						
						case 200:
							this.nTKKonto = 80500;
							break;
						
						case 225:
							this.nTKKonto = 80550;
							break;
						
						case 250:
							this.nTKKonto = 80600;
							break;
						
						case 275:
							this.nTKKonto = 80650;
							break;
						
						case 300:
							this.nTKKonto = 80700;
							break;
						
						case 700:
							this.nTKKonto = 80730;
							break;
						
						case 800:
							this.nTKKonto = 80720;
							break;
						
						default:
							// 14.04.14 Ä1046
							if (Int.PalCheckAuslTA(this.nArztNr) == "EU") 
							{
								this.nTKKonto = 80980;
							}
							else
							{
								this.nTKKonto = 80900;
								// 30.06.20 Ä1892
								if (this.dtRkRechDat >= new SalDateTime(2020, 7, 1) && this.dtRkRechDat <= new SalDateTime(2020, 12, 31)) 
								{
									this.nTKKonto = Int.PalKontenMwStSenkung(this.nTKKonto);
								}
							}
							break;
					}
					// Aktionsdatei
					// 24.10.03
					if (this.nUFAnzRg != 0) 
					{
						// 08.11.07 F293 auskommentiert
						// If (nUFDMGeb-nUFDMVSt) <= 0
						// Call PalAktion( nArztNr, NUMBER_Null, NUMBER_Null, 'RG','UebOP',nUFAnzRg*-1, nUFProzGeb, 0, nUFRechSumm*-1, NUMBER_Null, nDauer)
						// Rest in die Bedingung einbezogen, da 0-Buchungen
						// #16 kein leeres Datum erlauben
						// If dtRkRechDat = DATETIME_Null
						// Set dtRkRechDat = SalDateCurrent()
						// #22
						this.dtRkRechDat = SalDateTime.Current;
						// 17.07.06 F2
						Var.nDummySoll = this.nUFDMPorto + this.nUFDMGeb;
						// 14.04.14 Ä1046
						if (Int.PalCheckAuslTA(this.nArztNr) == "EU") 
						{
							App.frmMain.nErloeskonto = 81710;
						}
						else
						{
							App.frmMain.nErloeskonto = 81700;
							// 30.06.20 Ä1892
							if (this.dtRkRechDat >= new SalDateTime(2020, 7, 1) && this.dtRkRechDat <= new SalDateTime(2020, 12, 31)) 
							{
								App.frmMain.nErloeskonto = Int.PalKontenMwStSenkung(App.frmMain.nErloeskonto);
							}
						}
						// 06.03.23 Ä2086
						Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
						if (this.dtRkRechDat < Var.dtINIMinBuchDat) 
						{
							this.dtRkRechDat = Var.dtINIMinBuchDat;
						}

						// 21.09.23 Ä2132 + akabrid
						Int.PalAktionDatum(this.dtRkRechDat, this.nArztNr, SalNumber.Null, SalNumber.Null, "RG", "UebOP", this.nUFAnzRg, this.nUFProzGeb, (this.nUFDMGeb - this.nUFDMVSt), this.nUFRechSumm, SalNumber.Null, this.nDauer, this.strAbrID);
						// 18.04.11 Ä563 + tkreverse
						// 20.11.23 Ä2144 + tkkontocode
						Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkreverse, tkkontocode)
VALUES (:frmUebOP.nArztNr, 0, 0, :frmUebOP.strTKBuchText, 0, 0, 0,
:frmUebOP.dtRkRechDat, :frmUebOP.nTKKonto,
:frmUebOP.nUFRechSumm, 0, :frmUebOP.nUFDMVSt,
0, 0, 0, 0, :frmUebOP.nUFProzVSt, 0,
:frmUebOP.nUFDMPorto, :frmUebOP.nUFDMGeb,
:nDummySoll, 0, :frmUebOP.nTAReverse, 'RgErst-')");
						this.strTKBuchText = "Forderungen a.Mitgl.";
						Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16000, 16400, :frmUebOP.nArztNr, :frmUebOP.dtRkRechDat, :frmUebOP.strTKBuchText,
:frmUebOP.nUFRechSumm, 1)");
						this.strTKBuchText = "Geb.-Vorschuss";
						this.nFIDM = this.nUFDMGeb - this.nUFDMVSt;
						Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16100, :frmUebOP.nTKKonto, :frmUebOP.nArztNr, :frmUebOP.dtRkRechDat, :frmUebOP.strTKBuchText,
:frmUebOP.nFIDM, 1)");
						this.strTKBuchText = "Porto";
						Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16100, :frmMain.nErloeskonto, :frmUebOP.nArztNr, :frmUebOP.dtRkRechDat, :frmUebOP.strTKBuchText,
:frmUebOP.nUFDMPorto, 1)");
						if (this.nUFDMVSt != 0) 
						{
							this.strTKBuchText = "MwSt Haben";
							// 30.06.20 Ä1892
							Var.nMwStSenkung = 17760;
							if (this.dtRkRechDat >= new SalDateTime(2020, 7, 1) && this.dtRkRechDat <= new SalDateTime(2020, 12, 31)) 
							{
								Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
							}
							// 24.06.20 Ä1892
							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16100, :nMwStSenkung, :frmUebOP.nArztNr, :frmUebOP.dtRkRechDat, :frmUebOP.strTKBuchText,
:frmUebOP.nUFDMVSt, 1)");
						}
					}
					// 02.01.18 F3066
					Int.PalLog("UebOP08");

					// Gutschriftenbenachrichtigung
					this.strKuerzel = App.frmMain.strUser.Left(2);

					if (this.bnurOPs) 
					{
						Sal.MessageBox("Dieses Mitglied erhält keinen Vorschuss, da es sich um eine Abrechnung von offenen Posten handelt.", "Mitglied " + this.nArztNr.ToString(0), (Sys.MB_Ok | Sys.MB_IconAsterisk));
						Int.PalLog("Arzt " + Int.PalStrNum0(this.nArztNr, 4, 0) + ": kein Vorschuss wegen OP-Abrechnung");
					}
					else
					{
						// 24.06.19 Ä1854
						Int.SqlImmedSel(@"SELECT avorschuss1, avorschuss2, avorschuss3, avorschuss6, avorschuss7, avorschuss9, avorschuss9cr
INTO :frmUebOP.nVorsch1, :frmUebOP.nVorsch2, :frmUebOP.nVorsch3, :frmUebOP.nVorsch6, :frmUebOP.nVorsch7, :frmUebOP.nVorsch9, :frmUebOP.nVorsch9CR
FROM a
WHERE aarztnr = :frmUebOP.nArztNr");
						if (this.nVorsch1 == SalNumber.Null) 
						{
							this.nVorsch1 = 0;
						}
						if (this.nVorsch2 == SalNumber.Null) 
						{
							this.nVorsch2 = 0;
						}
						if (this.nVorsch3 == SalNumber.Null) 
						{
							this.nVorsch3 = 0;
						}
						if (this.nVorsch6 == SalNumber.Null) 
						{
							this.nVorsch6 = 1;
						}
						if (this.nVorsch7 == SalNumber.Null) 
						{
							this.nVorsch7 = 0;
						}
						if (this.nVorsch9 == SalNumber.Null) 
						{
							this.nVorsch9 = 0;
						}
						this.dtErsteAbrg = SalDateTime.Null;
						Int.SqlImmedSel(@"SELECT MIN( akdatum ) INTO :frmUebOP.dtErsteAbrg FROM ak
WHERE " + Int.PalArztNr("ak", this.nArztNr, this.nArztNr2) + " AND aktyp = \'RG\' AND aktypdetail = \'UebOP\'");
						if (this.nVorsch7 == 1 && (this.dtErsteAbrg == SalDateTime.Null || this.dtErsteAbrg >= SalDateTime.Current - 60)) 
						{
							Sal.MessageBox("Dieses Mitglied erhält keinen Vorschuss, da die erste Abrechnung noch nicht mindestens zwei Monate zurückliegt.", "Mitglied " + this.nArztNr.ToString(0), (Sys.MB_Ok | Sys.MB_IconAsterisk));
							Int.PalLog("Arzt " + Int.PalStrNum0(this.nArztNr, 4, 0) + ": kein Vorschuss wegen Fall 7");
						}
						else if (this.nVorsch9 == 1 && (this.nVorsch9CR == SalNumber.Null || this.nVorsch9CR == 0)) 
						{
							Sal.MessageBox("Dieses Mitglied erhält keinen Vorschuss, da keine positive Bonität im Arztstamm hinterlegt wurde.", "Mitglied " + this.nArztNr.ToString(0), (Sys.MB_Ok | Sys.MB_IconAsterisk));
							Int.PalLog("Arzt " + Int.PalStrNum0(this.nArztNr, 4, 0) + ": kein Vorschuss wegen Fall 9");
						}
						else
						{
							// 22.01.01 autom. 70%-Vorschuß
							// 22.12.11 Ä696 + If nKeinGeld = 0 or nKeinGeld = NUMBER_Null
							Int.SqlImmedSel("SELECT akeingeld INTO :frmUebOP.nKeinGeld FROM a WHERE aarztnr = :frmUebOP.nArztNr");
							if (this.nKeinGeld == 0 || this.nKeinGeld == SalNumber.Null) 
							{
								// 20.10.15 Ä1252 +  - nUFSperrSumme
								dlgVorschuss.ModalDialog(this, this.nArztNr, this.nUFRechSumm - this.nUFSperrSumme, this.dtBearbDatum, this.strBearbeiter);
							}
							else
							{
								Sal.MessageBox("Laut Arztstamm erhält dieses Mitglied kein Geld.", "Mitglied " + this.nArztNr.ToString(0), (Sys.MB_Ok | Sys.MB_IconAsterisk));
							}
						}
					}
					// 02.01.18 F3066
					Int.PalLog("UebOP09");
					// 18.06.19 Ä1854 + ufvorschgeb
					this.dtRechMaxDatumGrenze = SalDateTime.Current - 120;
					this.nVorschProz = 0;
					Int.SqlImmedSel(@"SELECT ufvorschgeb, ufvorschsum INTO :frmUebOP.nVorschProz, :frmUebOP.nVorschSum
FROM UF WHERE ufarztnr=:frmUebOP.nArztNr
AND ufbearbeiter=:frmUebOP.strBearbeiter
AND ufbearbdatum=:frmUebOP.dtBearbDatum");
					if (this.nVorschProz > 0) 
					{
						this.strSqlMsgImmed = "Programmfehler bei Vorschuß buchen in Rechnungen";
						this.hSqlLe.PrepareAndExecute(@"SELECT rkrechnr, (rkdmleis+rkdmarzn)
INTO :frmUebOP.nRechNr, :frmUebOP.nRkDMLeis
FROM rk
WHERE rkarztnr=:frmUebOP.nArztNr AND  rkrechnr BETWEEN :frmUebOP.nRechNrMin AND :frmUebOP.nRechNrMax");
						this.nFetchLe = this.hSqlLe.FetchNext();
						while (this.nFetchLe != Sys.FETCH_EOF) 
						{
							// 02.01.18 F3066
							Int.PalLog("UebOP09a");

							this.nVorschDM = (this.nRkDMLeis * this.nVorschProz).Round() / 100;
							if (this.nVorschDM > this.nVorschSum) 
							{
								this.nVorschDM = this.nVorschSum;
							}
							if (this.nVorsch3 == 1) 
							{
								Int.SqlImmedSel("SELECT MAX( rpdatum) INTO :frmUebOP.dtRechMaxDatum FROM rp WHERE rparztnr = :frmUebOP.nArztNr AND rprechnr = :frmUebOP.nRechNr");
							}
							if (this.nVorschDM > 0 && (this.nVorsch3 == 0 || this.dtRechMaxDatum >= this.dtRechMaxDatumGrenze)) 
							{
								Int.SqlImmed(@"UPDATE rk SET rkvorschussdm = :frmUebOP.nVorschDM, rkvorschussdat = SYSDATETIME
WHERE rkarztnr = :frmUebOP.nArztNr AND rkrechnr = :frmUebOP.nRechNr");
								this.nVorschSum = this.nVorschSum - this.nVorschDM;
							}

							this.nFetchLe = this.hSqlLe.FetchNext();
						}
					}


					Int.SqlImmedX(@"DELETE FROM UF WHERE ufarztnr=:frmUebOP.nArztNr
AND ufbearbeiter=:frmUebOP.strBearbeiter
AND ufbearbdatum=:frmUebOP.dtBearbDatum");
					if (!(this.dfArztNr2.IsEmpty())) 
					{
						// 18.04.11 Ä563
						this.strTALand = "";
						Int.SqlImmedSel(@"SELECT aland
INTO :frmUebOP.strTALand
FROM A WHERE AARZTNR = :frmUebOP.dfArztNr2");
						if (this.strTALand != "" && this.strTALand != "DE") 
						{
							this.nTAReverse = 1;
						}
						else
						{
							this.nTAReverse = 0;
						}
                        // 09.07.13 Ä848
                        this.strSelect = @"SELECT lehalternr, lehtel, lehtel2, lehtelhandy, lehtelfax, lehemail, legebdat, ledigitalrg, leleitwegid, ledigitalmail,
leepost, leepostmail, leepostaenddat
INTO :frmUebOP.nHalterNr,  :frmUebOP.strHTel, :frmUebOP.strHTel2, :frmUebOP.strHTelHandy, :frmUebOP.strHTelFax, :frmUebOP.strHEmail, :frmUebOP.dtGebDat,
:frmUebOP.strHDigitalRg, :frmUebOP.strHLeitwegID, :frmUebOP.strHDigitalMail,
:frmUebOP.nEPost, :frmUebOP.strEPostMail, :frmUebOP.dtEPostAenDat
FROM le WHERE learztnr=:frmUebOP.nArztNr2
AND lebearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum";
                        Int.SqlHandleExec(this.hSqlLe, this.strSelect, "Fehler Halterkommunikation", ref Var.nCount);
						this.nFetchLe = this.hSqlLe.FetchNext();
						// 05.05.15 F2359
						// 30.11.20 Ä1922 + Digitalrechnung
						this.strSqlMsgImmed = "Programmfehler bei Halter-Kommunikatioinsdaten";
						Int.SqlPrepar(this.hSqlImmed, @"UPDATE h SET hhtel = :frmUebOP.strHTel, hhtel2 = :frmUebOP.strHTel2, hhtelhandy = :frmUebOP.strHTelHandy, hhtelfax = :frmUebOP.strHTelFax, hhemail = :frmUebOP.strHEmail,
hdigitalrg = :frmUebOP.strHDigitalRg, hleitwegid = :frmUebOP.strHLeitwegID, hdigitalmail = :frmUebOP.strHDigitalMail
WHERE harztnr = :frmUebOP.nArztNr2 AND hhalternr = :frmUebOP.nHalterNr");

						while (this.nFetchLe != Sys.FETCH_EOF) 
						{
							this.SetStatusBarText("Halter-Kommunikationsdaten Halter-Nr.: " + this.nArztNr.ToString(0) + "/" + this.nHalterNr.ToString(0));
                            // 16.10.24 F5150 ###
                            if (this.strHDigitalRg == "")
                            {
                                Int.SqlImmedSel(@"SELECT hdigitalrg, hleitwegid, hdigitalmail
INTO :frmUebOP.strHDigitalRg, :frmUebOP.strHLeitwegID, :frmUebOP.strHDigitalMail
FROM h
WHERE harztnr = :frmUebOP.nArztNr2 AND hhalternr = :frmUebOP.nHalterNr");
                            }
                            // 05.05.15 F2359
                            // Call SqlImmed( 'UPDATE h SET hhtel = :frmUebOP.strHTel, hhtel2 = :frmUebOP.strHTel2, hhtelhandy = :frmUebOP.strHTelHandy, hhtelfax = :frmUebOP.strHTelFax, hhemail = :frmUebOP.strHEmail
                            // WHERE harztnr = :frmUebOP.nArztNr2 AND hhalternr = :frmUebOP.nHalterNr' )
                            // 30.11.20 Ä1922 + Digitalrechnung
                            this.nResultImmed = Int.SqlHandleExecuteXError(this.hSqlImmed, @"UPDATE h SET hhtel = :frmUebOP.strHTel, hhtel2 = :frmUebOP.strHTel2, hhtelhandy = :frmUebOP.strHTelHandy, hhtelfax = :frmUebOP.strHTelFax, hhemail = :frmUebOP.strHEmail,
hdigitalrg = :frmUebOP.strHDigitalRg, hleitwegid = :frmUebOP.strHLeitwegID, hdigitalmail = :frmUebOP.strHDigitalMail
WHERE harztnr = :frmUebOP.nArztNr2 AND hhalternr = :frmUebOP.nHalterNr", this.strSqlMsgImmed);
							this.nFetchLe = this.hSqlLe.FetchNext();
						}
						this.hSqlLe.Commit();
						// 05.05.15 F2359
						this.hSqlImmed.Commit();

						// 08.10.19 F4527
						this.bnurOPs = false;
						Int.SqlIstDa(@"FROM lep WHERE leparztnr=:frmUebOP.nArztNr2
AND lepbearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum
AND leprechtext LIKE 'Die o.g. Tierarztpraxis hat uns mit dem Inkasso%'", ref this.bnurOPs);


						// 24.07.06 F17
						this.strSelect = @"SELECT lehalternr, lerechnr, lebrutto
INTO :frmUebOP.nHalterNr,  :frmUebOP.nRechNr, :frmUebOP.nDM
FROM le WHERE learztnr=:frmUebOP.nArztNr2
AND lebearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum AND lebrutto < 0";
						Int.SqlHandleExec(this.hSqlLe, this.strSelect, "Fehler", ref Var.nCount);
						this.nFetchLe = this.hSqlLe.FetchNext();
						while (this.nFetchLe != Sys.FETCH_EOF) 
						{
							this.lsText = @"***Gutschrift***

Dieser Halter hat heute eine Gutschrift in Höhe von €" + Int.PalStrNum(this.nDM * -1, 8, 2) + @" im Zuge einer normalen Abrechnung erhalten.

Bitte mit OPs verbuchen oder erstatten.";
							// 13.05.14 F2027
							this.nHalterNr = Int.PalCheckNULL(this.nHalterNr);

							// 09.05.16 Ä1367 AN -> HE
							Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, 'HE', :frmUebOP.nArztNr2, :frmUebOP.nHalterNr, :frmUebOP.nRechNr,
:frmUebOP.lsText , SYSDATE, NULL, 'N', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
							this.SetStatusBarText("Gutschrift? Rech-Nr.: " + this.nArztNr2.ToString(0) + "/" + this.nRechNr.ToString(0));
							this.nFetchLe = this.hSqlLe.FetchNext();
						}
						this.hSqlLe.Commit();
						// 14.01.00 Bankeinzüge
						this.strSelect = @"SELECT lehalternr, lepla, lerechnr, lepmwst, sum(lepdm)
INTO :frmUebOP.nHalterNr, :frmUebOP.strLA, :frmUebOP.nRechNr, :frmUebOP.nRkMwSt, :frmUebOP.nDM
FROM le,lep, h WHERE learztnr=:frmUebOP.nArztNr2
AND lebearbeiter=:frmUebOP.strBearbeiter
AND le.lebearbdatum=:frmUebOP.dtBearbDatum
AND hbankeinzug = 1
AND leparztnr=learztnr
AND lephalternr=leHalterNr
AND leprechnr=lerechnr
AND lepposnr=lePosNr
AND learztnr = harztnr AND lehalternr = hhalternr AND hdeaktiv IS NULL
GROUP BY 1,2,3,4";
						Int.SqlHandleExec(this.hSqlLe, this.strSelect, "Fehler", ref Var.nCount);
						this.nFetchLe = this.hSqlLe.FetchNext();
						while (this.nFetchLe != Sys.FETCH_EOF) 
						{
							this.nDM = this.nDM + (this.nDM * this.nRkMwSt).Round() / 100.00m;
							this.SetStatusBarText("Bankeinzüge für Rech-Nr.: " + this.nArztNr2.ToString(0) + "/" + this.nRechNr.ToString(0));
							this.nBEZArztNr = this.nArztNr2;
							this.nBEZArztNr2 = this.nArztNr;
							this.PalBEZ();
							this.nFetchLe = this.hSqlLe.FetchNext();
						}
						this.hSqlLe.Commit();
						// 24.06.19 Ä1854
						Int.SqlImmedSel(@"SELECT MIN(lerechnr), MAX(lerechnr)
INTO :frmUebOP.nRechNrMin, :frmUebOP.nRechNrMax
FROM le WHERE learztnr=:frmUebOP.nArztNr2
AND lebearbeiter=:frmUebOP.strBearbeiter
AND le.lebearbdatum=:frmUebOP.dtBearbDatum");
						// Call SqlImmedSel( 'SELECT sum(lepdm)
						// INTO :frmUebOP.nVorschMindzualt
						// FROM le,lep WHERE learztnr=:frmUebOP.nArztNr2
						// AND lebearbeiter=:frmUebOP.strBearbeiter
						// AND le.lebearbdatum=:frmUebOP.dtBearbDatum
						// AND leparztnr=learztnr
						// AND lephalternr=leHalterNr
						// AND leprechnr=lerechnr
						// AND lepposnr=lePosNr
						// AND lepdatum < SYSDATE - 4 MONTHS' )

						this.nRechNrAlt = 0;
						// 13.11.23 Ä2129 + LEBEGUID
						this.strSelect = @"SELECT lerechnr,lepla, lepmwst, min(lehalternr),min(lerechdat), min(leposnr),
sum(lepdm), max(lebeguid)
INTO :frmUebOP.nRechNr, :frmUebOP.strLA, :frmUebOP.nRkMwSt, :frmUebOP.nHalterNr,
:frmUebOP.dtRkRechDat, :frmUebOP.nPosNr ,:frmUebOP.nDM, :frmUebOP.strBEGuid
FROM le,lep WHERE learztnr=:frmUebOP.nArztNr2
AND lebearbeiter=:frmUebOP.strBearbeiter
AND le.lebearbdatum=:frmUebOP.dtBearbDatum
AND leparztnr=learztnr
AND lephalternr=leHalterNr
AND leprechnr=lerechnr
AND lepposnr=lePosNr
GROUP BY 1,2,3";
						Int.SqlHandleExec(this.hSqlLe, this.strSelect, "Fehler", ref Var.nCount);
						this.nFetchLe = this.hSqlLe.FetchNext();
						while (this.nFetchLe != Sys.FETCH_EOF) 
						{
							if (this.nRechNr != this.nRechNrAlt) 
							{
								this.nRkDMLeis = 0;
								this.nRkDMArzn = 0;
								this.nRechNrAlt = this.nRechNr;
							}
							if (this.strLA == Var.strL) 
							{
								this.nRkDMLeis = this.nRkDMLeis + this.nDM + (this.nDM * this.nRkMwSt).Round() / 100.00m;
							}
							else
							{
								this.nRkDMArzn = this.nRkDMArzn + this.nDM + (this.nDM * this.nRkMwSt).Round() / 100.00m;
							}
							if (this.nRkDMLeis == SalNumber.Null) 
							{
								this.nRkDMLeis = 0;
							}
							if (this.nRkDMArzn == SalNumber.Null) 
							{
								this.nRkDMArzn = 0;
							}
							Int.SqlIstDa(@" FROM rk WHERE rkarztnr=:frmUebOP.nArztNr2 AND rkhalternr=:frmUebOP.nHalterNr
AND rkrechnr=:frmUebOP.nRechNr AND rkdeaktiv IS NULL ", ref this.bExists);
							if (this.bExists) 
							{
								if (this.strLA == Var.strL) 
								{
									Int.SqlImmedX(@"UPDATE  rk  SET
rkdmleis = :frmUebOP.nRkDMLeis
WHERE rkarztnr=:frmUebOP.nArztNr2
AND rkhalternr=:frmUebOP.nHalterNr
AND rkrechnr=:frmUebOP.nRechNr");
								}
								else
								{
									Int.SqlImmedX(@"UPDATE  rk  SET
rkdmarzn = :frmUebOP.nRkDMArzn
WHERE rkarztnr=:frmUebOP.nArztNr2
AND rkhalternr=:frmUebOP.nHalterNr
AND rkrechnr=:frmUebOP.nRechNr");
								}
							}
							else
							{
								// 05.01.01 hat immer 14 Tage genommen. Rechnungsdruck war aber ok
								this.nOPFaellTg = -1;
								// 05.05.11 Ä572 + hland
								Int.SqlImmedSel(@"SELECT hfaelltg, hland
INTO :frmUebOP.nOPFaellTg, :frmUebOP.strTHLand
FROM H WHERE HARZTNR = :frmUebOP.nArztNr2 AND HHALTERNR = :frmUebOP.nHalterNr AND hdeaktiv IS NULL ");
								if (this.nOPFaellTg == -1 || this.nOPFaellTg == SalNumber.Null) 
								{
									Int.SqlImmedSel(@"SELECT afaelltg
INTO :frmUebOP.nOPFaellTg
FROM A WHERE AARZTNR = :frmUebOP.nArztNr2");
									if (this.nOPFaellTg == -1 || this.nOPFaellTg == SalNumber.Null) 
									{
										this.nOPFaellTg = Var.nFaellTg;
									}
								}
								Var.nFaellTg = this.nOPFaellTg;

								this.dtRkFaellDat = this.dtRkRechDat + Var.nFaellTg;
								// 12.12.97  	Verjährung auf erstes Leistungsdatum
								this.dtRkErstLeistDat = this.dtRkRechDat;
								Int.SqlImmedSel(@"SELECT min(lepdatum)
INTO :frmUebOP.dtRkErstLeistDat
FROM lep WHERE leparztnr=:frmUebOP.nArztNr2
AND leprechnr=:frmUebOP.nRechNr
AND lepbearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum
AND lepposnr = :frmUebOP.nPosNr
AND lepdatum is not null");
								// 27.09.05 Verjährung auf 3 jahre gesetzt.
								// 05.05.11 Ä572 + AT
								if (this.strTHLand == "AT") 
								{
									this.dtRkVerjaehr = new SalDateTime(this.dtRkErstLeistDat.Year() + 3, this.dtRkErstLeistDat.Month(), this.dtRkErstLeistDat.Day(), 0, 0, 0);
								}
								else
								{
									if (this.dtRkErstLeistDat < new SalDateTime(2001, 1, 1)) 
									{
										this.dtRkVerjaehr = new SalDateTime(this.dtRkErstLeistDat.Year() + 2, 12, 31, 0, 0, 0);
									}
									else
									{
										this.dtRkVerjaehr = new SalDateTime(this.dtRkErstLeistDat.Year() + 3, 12, 31, 0, 0, 0);
									}
								}
								// 29.01.08 A194
								this.strBarcode = "";
								Int.SqlImmedSel(@"SELECT lebarcode INTO :frmUebOP.strBarcode
FROM le
WHERE learztnr=:frmUebOP.nArztNr2
AND lerechnr=:frmUebOP.nRechNr
AND lebearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum
AND leposnr = :frmUebOP.nPosNr");


								// 16.03.10 OTÄ397
								Int.SqlImmedSel(@"SELECT lereverse INTO :frmUebOP.nReverse FROM le
WHERE learztnr=:frmUebOP.nArztNr2
AND lerechnr=:frmUebOP.nRechNr
AND lebearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum");
								// Set dtRkVerjaehr = SalDateConstruct(SalDateYear(dtRkRechDat)+2,12,31,0,0,0)
								this.strRA = "Rechnung";
								// 21.09.23 Ä2132 + rkabrid
								// 13.11.23 Ä2129 +, RKBEGUID
								if (Int.SqlImmedX(@"INSERT INTO RK (RKARZTNR, RKHALTERNR, RKRECHNR,
RKBUCHTEXT, RKRECHDAT, RKFAELLDAT, RKDMLEIS, RKDMARZN,  RKDMMAHN, RKDMZINS, RKMBDMOPL,
RKVERJAEHR,RKZALEIS,RKZAARZN,RKZAMAHN, RKZAZINS, RKMBZAOPL, RKKZZAHL,RKKZ, RKMAHNSTUFE, RKBARCODE, RKREVERSE,
RKABRID, RKBEGUID)
VALUES(:frmUebOP.nArztNr2, :frmUebOP.nHalterNr, :frmUebOP.nRechNr,
:frmUebOP.strRA, :frmUebOP.dtRkRechDat, :frmUebOP.dtRkFaellDat, :frmUebOP.nRkDMLeis, :frmUebOP.nRkDMArzn,0,0,0,
:frmUebOP.dtRkVerjaehr,0, 0,0,0,0,0,0,0, :frmUebOP.strBarcode, :frmUebOP.nReverse,
:frmUebOP.strAbrID, :frmUebOP.strBEGuid )")) 
								{
									// 03.11.14 Ä1067 + lereverseversion
									// 06.02.18 Ä1698 + leprabatt
									// 12.10.20 Ä1903 +lpformat
									// 23.09.22 Ä2030 + rpmoid
									if (Int.SqlImmedX(@"INSERT INTO RP (rparztnr, rphalternr, rprechnr, rpla, rpmwst, rprechtext, rpdatum, rpdm, rptext, rpzeidat, rpreverseversion, rprabatt, rpformat, rpmoid)
SELECT leparztnr, lephalternr,leprechnr,
lepla, lepmwst, leprechtext, lepdatum, lepdm, leptext, lepzeidat, lepreverseversion, leprabatt, lepformat, lepmoid
FROM lep WHERE leparztnr=:frmUebOP.nArztNr2
AND leprechnr=:frmUebOP.nRechNr
AND lepbearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum
AND lepposnr = :frmUebOP.nPosNr")) 
									{
										Int.SqlImmedX(@"DELETE FROM LEP WHERE leparztnr=:frmUebOP.nArztNr2
AND leprechnr = :frmUebOP.nRechNr
AND lepbearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum");
										Int.SqlImmedX(@"DELETE FROM LE WHERE learztnr=:frmUebOP.nArztNr2
AND lerechnr = :frmUebOP.nRechNr
AND lebearbeiter=:frmUebOP.strBearbeiter
AND lebearbdatum=:frmUebOP.dtBearbDatum");
									}
								}
								// 08.05.09
								// Set frmMain.dtHBBuchDat = SalDateCurrent()
								// If nRkDMLeis != 0
								// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
								// VALUES(:frmUebOP.nArztNr2, :frmUebOP.nHalterNr, :frmUebOP.nRechNr, :frmUebOP.dtRkRechDat, \'RGLe\', :frmMain.dtHBBuchDat, :frmUebOP.nRkDMLeis, 16420, NULL, \'Rechnung\')')
								// If nRkDMArzn != 0
								// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
								// VALUES(:frmUebOP.nArztNr2, :frmUebOP.nHalterNr, :frmUebOP.nRechNr, :frmUebOP.dtRkRechDat, \'RGAr\', :frmMain.dtHBBuchDat, :frmUebOP.nRkDMArzn, 16420, NULL, \'Rechnung\')')

							}
							this.SetStatusBarText("Rech-Nr.: " + this.nArztNr2.ToString(0) + "/" + this.nRechNr.ToString(0));
							this.nFetchLe = this.hSqlLe.FetchNext();
						}
						this.hSqlLe.Commit();
						// 19.10.20	! 30.11.20 +  AND (rkdmleis+rkdmarzn) > 0
						Int.SqlImmedX(@"UPDATE  rk  SET
rkkzzahl = 2
WHERE rkarztnr=:frmUebOP.nArztNr2
AND rkrechdat =:frmUebOP.dtRkRechDat
AND (rkzaleis+rkzamahn) >= (rkdmleis+rkdmarzn) AND rkkzzahl<2 AND (rkdmleis+rkdmarzn) > 0");

						Int.SqlImmedX(@"UPDATE  rk  SET
rkkzzahl = 4
WHERE rkarztnr=:frmUebOP.nArztNr2
AND rkrechdat =:frmUebOP.dtRkRechDat
AND rkdmleis=0 AND rkdmarzn=0");
						// 20.10.15 Ä1252 + hsperrdatum
						Int.SqlImmedSel(@"SELECT
ufrechsumm, ufdmgebuehr, ufprozgebuehr, ufdmporto, ufdmvst, ufprozvst, ufanzrg, ufsperrsumme
INTO :frmUebOP.nUFRechSumm, :frmUebOP.nUFDMGeb, :frmUebOP.nUFProzGeb,
:frmUebOP.nUFDMPorto, :frmUebOP.nUFDMVSt, :frmUebOP.nUFProzVSt,
:frmUebOP.nUFAnzRg, :frmUebOP.nUFSperrSumme
FROM UF WHERE ufarztnr=:frmUebOP.nArztNr2
AND ufbearbeiter=:frmUebOP.strBearbeiter
AND ufbearbdatum=:frmUebOP.dtBearbDatum");
						// 28.05.21 Ä1962
						// Set strTKBuchText = 'GEBV' ||  SalNumberToStrX(nUFAnzRg,0) || 'RG'
						this.strTKBuchText = ("Gebühren von " + this.nUFAnzRg.ToString(0) + " Rechnungen").Left(50);

						switch (this.nUFProzGeb * 100)
						{
							case 100:
								this.nTKKonto = 80350;
								break;
							
							case 125:
								this.nTKKonto = 80370;
								break;
							
							case 150:
								this.nTKKonto = 80400;
								break;
							
							case 175:
								this.nTKKonto = 80450;
								break;
							
							case 200:
								this.nTKKonto = 80500;
								break;
							
							case 225:
								this.nTKKonto = 80550;
								break;
							
							case 250:
								this.nTKKonto = 80600;
								break;
							
							case 275:
								this.nTKKonto = 80650;
								break;
							
							case 300:
								this.nTKKonto = 80700;
								break;
							
							case 700:
								this.nTKKonto = 80730;
								break;
							
							case 800:
								this.nTKKonto = 80720;
								break;
							
							default:
								// 14.04.14 Ä1046
								if (Int.PalCheckAuslTA(this.nArztNr) == "EU") 
								{
									this.nTKKonto = 80980;
								}
								else
								{
									this.nTKKonto = 80900;
									// 30.06.20 Ä1892
									if (this.dtRkRechDat >= new SalDateTime(2020, 7, 1) && this.dtRkRechDat <= new SalDateTime(2020, 12, 31)) 
									{
										this.nTKKonto = Int.PalKontenMwStSenkung(this.nTKKonto);
									}
								}
								break;
						}
						// Aktionsdatei
						// 24.10.03
						if (this.nUFAnzRg != 0) 
						{
							// 08.11.07 F293 auskommentiert
							// If (nUFDMGeb-nUFDMVSt) <= 0
							// Call PalAktion( nArztNr2, NUMBER_Null, NUMBER_Null, 'RG',strDM,nUFAnzRg*-1, nUFProzGeb, 0, nUFRechSumm*-1, NUMBER_Null, nDauer)
							// 17.07.06 F2
							// #16 kein leeres Datum erlauben
							// If dtRkRechDat = DATETIME_Null
							// Set dtRkRechDat = SalDateCurrent()
							// #22
							this.dtRkRechDat = SalDateTime.Current;

							Var.nDummySoll = this.nUFDMPorto + this.nUFDMGeb;
							// 14.04.14 Ä1046
							if (Int.PalCheckAuslTA(this.nArztNr2) == "EU") 
							{
								App.frmMain.nErloeskonto = 81710;
							}
							else
							{
								App.frmMain.nErloeskonto = 81700;
								// 30.06.20 Ä1892
								if (this.dtRkRechDat >= new SalDateTime(2020, 7, 1) && this.dtRkRechDat <= new SalDateTime(2020, 12, 31)) 
								{
									App.frmMain.nErloeskonto = Int.PalKontenMwStSenkung(App.frmMain.nErloeskonto);
								}
							}
							// 06.03.23 Ä2086
							Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
							if (this.dtRkRechDat < Var.dtINIMinBuchDat) 
							{
								this.dtRkRechDat = Var.dtINIMinBuchDat;
							}

							// 21.09.23 Ä2132 + akabrid
							Int.PalAktionDatum(this.dtRkRechDat, this.nArztNr2, SalNumber.Null, SalNumber.Null, "RG", this.strDM, this.nUFAnzRg, this.nUFProzGeb, (this.nUFDMGeb - this.nUFDMVSt), this.nUFRechSumm, SalNumber.Null, this.nDauer, this.strAbrID);
							// 18.04.11 Ä563 + tkreverse
							// 20.11.23 Ä2144 + tkkontocode
							Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkreverse, tkkontocode)
VALUES (:frmUebOP.nArztNr2, 0, 0, :frmUebOP.strTKBuchText, 0, 0, 0,
:frmUebOP.dtRkRechDat, :frmUebOP.nTKKonto,
:frmUebOP.nUFRechSumm, 0, :frmUebOP.nUFDMVSt,
0, 0, 0, 0, :frmUebOP.nUFProzVSt, 0,
:frmUebOP.nUFDMPorto, :frmUebOP.nUFDMGeb,
:nDummySoll, 0, :frmUebOP.nTAReverse, 'RgErst-')");
							this.strTKBuchText = "Forderungen a.Mitgl.";
							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16000, 16400, :frmUebOP.nArztNr2, :frmUebOP.dtRkRechDat, :frmUebOP.strTKBuchText,
:frmUebOP.nUFRechSumm, 1)");
							this.strTKBuchText = "Geb.-Vorschuss";
							this.nFIDM = this.nUFDMGeb - this.nUFDMVSt;
							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16100, :frmUebOP.nTKKonto, :frmUebOP.nArztNr2, :frmUebOP.dtRkRechDat, :frmUebOP.strTKBuchText,
:frmUebOP.nFIDM, 1)");
							this.strTKBuchText = "Porto";
							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16100, :frmMain.nErloeskonto, :frmUebOP.nArztNr2, :frmUebOP.dtRkRechDat, :frmUebOP.strTKBuchText,
:frmUebOP.nUFDMPorto, 1)");
							if (this.nUFDMVSt != 0) 
							{
								this.strTKBuchText = "MwSt Haben";
								// 30.06.20 Ä1892
								Var.nMwStSenkung = 17760;
								if (this.dtRkRechDat >= new SalDateTime(2020, 7, 1) && this.dtRkRechDat <= new SalDateTime(2020, 12, 31)) 
								{
									Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
								}
								// 24.06.20 Ä1892
								Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16100, :nMwStSenkung, :frmUebOP.nArztNr2, :frmUebOP.dtRkRechDat, :frmUebOP.strTKBuchText,
:frmUebOP.nUFDMVSt, 1)");
							}
						}
						if (this.bnurOPs) 
						{
							Sal.MessageBox("Dieses Mitglied erhält keinen Vorschuss, da es sich um eine Abrechnung von offenen Posten handelt.", "Mitglied " + this.nArztNr.ToString(0), (Sys.MB_Ok | Sys.MB_IconAsterisk));
							Int.PalLog("Arzt " + Int.PalStrNum0(this.nArztNr, 4, 0) + ": kein Vorschuss wegen OP-Abrechnung");
						}
						else
						{
							// 24.06.19 Ä1854
							Int.SqlImmedSel(@"SELECT avorschuss1, avorschuss2, avorschuss3, avorschuss6, avorschuss7, avorschuss9, avorschuss9cr
INTO :frmUebOP.nVorsch1, :frmUebOP.nVorsch2, :frmUebOP.nVorsch3, :frmUebOP.nVorsch6, :frmUebOP.nVorsch7, :frmUebOP.nVorsch9, :frmUebOP.nVorsch9CR
FROM a
WHERE aarztnr = :frmUebOP.nArztNr2");
							if (this.nVorsch1 == SalNumber.Null) 
							{
								this.nVorsch1 = 0;
							}
							if (this.nVorsch2 == SalNumber.Null) 
							{
								this.nVorsch2 = 0;
							}
							if (this.nVorsch3 == SalNumber.Null) 
							{
								this.nVorsch3 = 0;
							}
							if (this.nVorsch6 == SalNumber.Null) 
							{
								this.nVorsch6 = 1;
							}
							if (this.nVorsch7 == SalNumber.Null) 
							{
								this.nVorsch7 = 0;
							}
							if (this.nVorsch9 == SalNumber.Null) 
							{
								this.nVorsch9 = 0;
							}
							this.dtErsteAbrg = SalDateTime.Null;
							Int.SqlImmedSel(@"SELECT MIN( akdatum ) INTO :frmUebOP.dtErsteAbrg FROM ak
WHERE " + Int.PalArztNr("ak", this.nArztNr, this.nArztNr2) + " AND aktyp = \'RG\' AND aktypdetail = \'UebOP\'");
							if (this.nVorsch7 == 1 && (this.dtErsteAbrg == SalDateTime.Null || this.dtErsteAbrg >= SalDateTime.Current - 60)) 
							{
								Sal.MessageBox("Dieses Mitglied erhält keinen Vorschuss, da die erste Abrechnung noch nicht mindestens zwei Monate zurückliegt.", "Mitglied " + this.nArztNr2.ToString(0), (Sys.MB_Ok | Sys.MB_IconAsterisk));
								Int.PalLog("Arzt " + Int.PalStrNum0(this.nArztNr2, 4, 0) + ": kein Vorschuss wegen Fall 7");
							}
							else if (this.nVorsch9 == 1 && (this.nVorsch9CR == SalNumber.Null || this.nVorsch9CR == 0)) 
							{
								Sal.MessageBox("Dieses Mitglied erhält keinen Vorschuss, da keine positive Bonität im Arztstamm hinterlegt wurde.", "Mitglied " + this.nArztNr2.ToString(0), (Sys.MB_Ok | Sys.MB_IconAsterisk));
								Int.PalLog("Arzt " + Int.PalStrNum0(this.nArztNr2, 4, 0) + ": kein Vorschuss wegen Fall 9");
							}
							else
							{
								// 22.01.01 autom. 70%-Vorschuß
								// 22.12.11 Ä696 + If nKeinGeld = 0 or nKeinGeld = NUMBER_Null
								Int.SqlImmedSel("SELECT akeingeld INTO :frmUebOP.nKeinGeld FROM a WHERE aarztnr = :frmUebOP.nArztNr2");
								if (this.nKeinGeld == 0 || this.nKeinGeld == SalNumber.Null) 
								{
									// 20.10.15 Ä1252 +  - nUFSperrSumme
									dlgVorschuss.ModalDialog(this, this.nArztNr2, this.nUFRechSumm - this.nUFSperrSumme, this.dtBearbDatum, this.strBearbeiter);
								}
								else
								{
									Sal.MessageBox("Laut Arztstamm erhält dieses Mitglied kein Geld.", "Mitglied " + this.nArztNr2.ToString(0), (Sys.MB_Ok | Sys.MB_IconAsterisk));
								}
							}
						}
						// 18.06.19 Ä1854 + ufvorschgeb
						this.nVorschProz = 0;
						Int.SqlImmedSel(@"SELECT ufvorschgeb, ufvorschsum INTO :frmUebOP.nVorschProz, :frmUebOP.nVorschSum
FROM UF WHERE ufarztnr=:frmUebOP.nArztNr2
AND ufbearbeiter=:frmUebOP.strBearbeiter
AND ufbearbdatum=:frmUebOP.dtBearbDatum");
						if (this.nVorschProz > 0) 
						{
							this.strSqlMsgImmed = "Programmfehler bei Vorschuß buchen in Rechnungen";
							this.hSqlLe.PrepareAndExecute(@"SELECT rkrechnr, (rkdmleis+rkdmarzn)
INTO :frmUebOP.nRechNr, :frmUebOP.nRkDMLeis
FROM rk
WHERE rkarztnr=:frmUebOP.nArztNr2 AND  rkrechnr BETWEEN :frmUebOP.nRechNrMin AND :frmUebOP.nRechNrMax");
							this.nFetchLe = this.hSqlLe.FetchNext();
							while (this.nFetchLe != Sys.FETCH_EOF) 
							{
								// 02.01.18 F3066
								Int.PalLog("UebOP09a");

								this.nVorschDM = (this.nRkDMLeis * this.nVorschProz).Round() / 100;
								if (this.nVorschDM > this.nVorschSum) 
								{
									this.nVorschDM = this.nVorschSum;
								}
								if (this.nVorschDM > 0) 
								{
									Int.SqlImmed(@"UPDATE rk SET rkvorschussdm = :frmUebOP.nVorschDM, rkvorschussdat = SYSDATETIME
WHERE rkarztnr = :frmUebOP.nArztNr2 AND rkrechnr = :frmUebOP.nRechNr");
									this.nVorschSum = this.nVorschSum - this.nVorschDM;
								}

								this.nFetchLe = this.hSqlLe.FetchNext();
							}
						}


						Int.SqlImmedX(@"DELETE FROM UF WHERE ufarztnr=:frmUebOP.nArztNr2
AND ufbearbeiter=:frmUebOP.strBearbeiter
AND ufbearbdatum=:frmUebOP.dtBearbDatum");
					}
					// 05.05.15 F2359
					if (this.hSqlImmed.Disconnect()) 
					{
					}
				}
			}
			// 14.03.19 Ä1829
			// If strDM = 'D'
			// Call frmDiskAbr.PalHoleTabelle(  )

			Sal.WaitCursor(false);
			this.DestroyWindow();
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
			this.DestroyWindow();
			#endregion
		}
		#endregion
	}
}
