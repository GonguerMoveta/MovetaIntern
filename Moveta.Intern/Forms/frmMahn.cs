// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// Mahnungen / MB's
	/// </summary>
	public partial class frmMahn : SalFormWindow
	{
		#region Window Variables
		public SalString strSelect = "";
		public SalNumber nDiskIndex = 0;
		public SalNumber nResult = 0;
		public SalNumber nArztNr = 0;
		public SalNumber nHalterNr = 0;
		public SalNumber nRechNr = 0;
		public SalNumber nProzNr = 0;
		public SalNumber nDMMahnGeb = 0;
		public SalNumber nDMTVMahnGeb = 0;
		public SalNumber nMahnAnz = 0;
		public SalString strROWID = "";
		public SalString strMvROWID = "";
		public SalNumber nMS = 0;
		public SalNumber nRkMS = 0;
		public SalNumber nRkKZZahl = 0;
		public SalBoolean bExists = false;
		public SalSqlHandle hSqlUM = SalSqlHandle.Null;
		public SalNumber nFetchUM = 0;
		public SalString strBuchText = "";
		public SalNumber nDMTVVSt = 0;
		public SalNumber nDMTVnetto = 0;
		public SalNumber nErr = 0;
		public SalNumber nFetch = 0;
		public SalNumber nFetchMP = 0;
		public SalWindowHandle hWndReport = SalWindowHandle.Null;
		public SalString strReportName = "";
		public SalSqlHandle hSqlMP = SalSqlHandle.Null;
		public SalSqlHandle hSqlAK = SalSqlHandle.Null;
		public SalNumber nFetchAK = 0;
		public SalNumber nTANr = 0;
		public SalNumber nTANr2 = 0;
		public SalNumber nTHNr = 0;
		public SalString strTHAnr = "";
		public SalString strTHN1 = "";
		public SalString strTHN2 = "";
		public SalString strTHStr = "";
		public SalString strTHOrt = "";
		public SalString strTHLand = "";
		public SalDateTime dtTHGebDat = SalDateTime.Null;
		public SalDateTime dtRechDat = SalDateTime.Null;
		public SalDateTime dtMahnDat = SalDateTime.Null;
		public SalNumber nDMRech = 0;
		public SalNumber nDMMahn = 0;
		public SalNumber nDMZins = 0;
		public SalNumber nMtl = 0;
		public SalNumber nMBNr = 0;
		public SalNumber nMBNrAlt = 0;
		public SalNumber nMBCount = 0;
		public SalString strTAN1 = "";
		public SalString strTAN2 = "";
		public SalString strTAStr = "";
		public SalString strTAOrt = "";
		public SalNumber nKZMB = 0;
		public SalNumber nA1 = 0;
		public SalNumber nA2 = 0;
		public SalNumber nA3 = 0;
		public SalNumber nA4 = 0;
		public SalNumber nA5 = 0;
		public SalNumber nA6 = 0;
		public SalNumber nRg1 = 0;
		public SalNumber nRg2 = 0;
		public SalNumber nRg3 = 0;
		public SalNumber nRg4 = 0;
		public SalNumber nRg5 = 0;
		public SalNumber nRg6 = 0;
		public SalNumber nHF = 0;
		public SalNumber nHF1 = 0;
		public SalNumber nHF2 = 0;
		public SalNumber nHF3 = 0;
		public SalNumber nHF4 = 0;
		public SalNumber nHF5 = 0;
		public SalNumber nHF6 = 0;
		public SalNumber nMG = 0;
		public SalNumber nMG1 = 0;
		public SalNumber nMG2 = 0;
		public SalNumber nMG3 = 0;
		public SalNumber nMG4 = 0;
		public SalNumber nMG5 = 0;
		public SalNumber nMG6 = 0;
		public SalNumber nZI = 0;
		public SalNumber nZI1 = 0;
		public SalNumber nZI2 = 0;
		public SalNumber nZI3 = 0;
		public SalNumber nZI4 = 0;
		public SalNumber nZI5 = 0;
		public SalNumber nZI6 = 0;
		public SalDateTime dtDat = SalDateTime.Null;
		public SalDateTime dtDat1 = SalDateTime.Null;
		public SalDateTime dtDat2 = SalDateTime.Null;
		public SalDateTime dtDat3 = SalDateTime.Null;
		public SalDateTime dtDat4 = SalDateTime.Null;
		public SalDateTime dtDat5 = SalDateTime.Null;
		public SalDateTime dtDat6 = SalDateTime.Null;
		public SalDateTime dtFaell = SalDateTime.Null;
		public SalDateTime dtFaell1 = SalDateTime.Null;
		public SalDateTime dtFaell2 = SalDateTime.Null;
		public SalDateTime dtFaell3 = SalDateTime.Null;
		public SalDateTime dtFaell4 = SalDateTime.Null;
		public SalDateTime dtFaell5 = SalDateTime.Null;
		public SalDateTime dtFaell6 = SalDateTime.Null;
		public SalDateTime dtMBDatum = SalDateTime.Null;
		public SalNumber nGerKosten = 0;
		public SalString strGerName = "";
		public SalNumber nEheleute = 0;
		public SalString strEhepartner = "";
		public SalNumber nNebenford = 0;
		public SalNumber nAnzRech = 0;
		public SalNumber nMwS1 = 0;
		public SalNumber nMwT1 = 0;
		public SalNumber nDM1 = 0;
		public SalNumber nSoll1 = 0;
		public SalNumber nHaben1 = 0;
		public SalNumber nMw2 = 0;
		public SalNumber nDM2 = 0;
		public SalNumber nSoll2 = 0;
		public SalNumber nHaben2 = 0;
		public SalNumber nMw3 = 0;
		public SalNumber nDM3 = 0;
		public SalNumber nSoll3 = 0;
		public SalNumber nHaben3 = 0;
		public SalNumber nBuchMwSt = 0;
		public SalNumber nDiverse = 0;
		public SalNumber nZinsProz = 0;
		public SalNumber nMaxNebenko = 0;
		public SalNumber nDMStorno = 0;
		public SalNumber nDiv = 0;
		public SalString strSolvenzprf = "";
		public SalDateTime dtSolvenzprf = SalDateTime.Null;
		public SalNumber nDMHF = 0;
		public SalNumber nBeiblatt = 0;
		public SalDateTime dtMahnDatVon = SalDateTime.Null;
		public SalDateTime dtMahnDatBis = SalDateTime.Null;
		public SalString strZust = "";
		public SalNumber nTAReverse = 0;
		public SalNumber nDMZinsAlt = 0;
		public SalNumber nNachMBMS7 = 0;
		public SalNumber nMVNr = 0;
		public SalDateTime dtGebDat = SalDateTime.Null;
		public SalDateTime dtGebDat2 = SalDateTime.Null;
		public SalString strGebDatText = "";
		public SalString strGebDatText2 = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmMahn()
		{
			// Assign global reference.
			App.frmMahn = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmMahn CreateWindow(Control owner)
		{
			frmMahn frm = new frmMahn();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmMahn FromHandle(SalWindowHandle handle)
		{
			return ((frmMahn)SalWindow.FromHandle(handle, typeof(frmMahn)));
		}
		#endregion
		
		#region Methods
		// Function: PalRgStorno
		// Description:
		// Returns
		// Parameters
		// Number: nArzt
		// Number: nRech
		// Number: nMGX
		// Static Variables
		// Local variables
		// Actions
		// Set nArztNr = nArzt
		// Set nRechNr = nRech
		// Set nMG = nMGX
		// Set strBuchText = 'stor MBErf' || PalStrNum(nArztNr,4,0) || PalStrNum(nRechNr,5,0)
		// Call SqlImmedSel('SELECT rkhalternr INTO :frmMahn.nHalterNr
		// FROM rk WHERE rkarztnr = :frmMahn.nArztNr
		// AND rkrechnr = :frmMahn.nRechNr')
		// Call SqlImmedX('INSERT INTO FI
		// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
		// VALUES (0, 16420, 16000, NULL,
		// :frmMahn.dtMBDatum, :frmMahn.strBuchText,
		// :frmMahn.nMG, 5)')
		// Call SqlImmedX('INSERT INTO ZA
		// (zaarztnr,zahalternr,zarechnr,zakz,zabuchdat,zabelegnr,zadm)
		// VALUES (:frmMahn.nArztNr,
		// :frmMahn.nHalterNr,
		// :frmMahn.nRechNr,
		// 5,  :frmMahn.dtMBDatum,  NULL,
		// :frmMahn.nMG)')
		// Set nMG = nMG * -1
		// Call SqlImmedX('INSERT INTO TK
		// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
		// tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
		// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben)
		// VALUES (:frmMahn.nArztNr, 0, 0, :frmMahn.strBuchText,
		// :frmMahn.nHalterNr, :frmMahn.nRechNr,
		// NULL, :frmMahn.dtMBDatum, 0,0,0 , 0,0,
		// 0,0, 0,0, 0, 0, :frmMahn.nMG,0, 0)')
		// Function: PalMBStorno
		// Description:
		// Returns
		// Parameters
		// Static Variables
		// Local variables
		// Actions
		// Set nDiv = nDMStorno
		// If nDiv > nMG1
		// Set nDiv = nMG1
		// Call PalRgStorno(nA1, nRg1, nDiv)
		// Call SqlImmed('UPDATE rk SET rkzamahn = rkzamahn + :frmMahn.nDiv
		// WHERE rkarztnr = :frmMahn.nA1 AND rkrechnr = :frmMahn.nRg1')
		// Set nMG1 = nMG1 - nDiv
		// Set nDMStorno = nDMStorno - nDiv
		// 2
		// If nDMStorno > 0
		// Set nDiv = nDMStorno
		// If nDiv > nMG2
		// Set nDiv = nMG2
		// Call PalRgStorno(nA2, nRg2, nDiv)
		// Call SqlImmed('UPDATE rk SET rkzamahn = rkzamahn + :frmMahn.nDiv
		// WHERE rkarztnr = :frmMahn.nA2 AND rkrechnr = :frmMahn.nRg2')
		// Set nMG2 = nMG2 - nDiv
		// Set nDMStorno = nDMStorno - nDiv
		// 3
		// If nDMStorno > 0
		// Set nDiv = nDMStorno
		// If nDiv > nMG3
		// Set nDiv = nMG3
		// Call PalRgStorno(nA3, nRg3, nDiv)
		// Call SqlImmed('UPDATE rk SET rkzamahn = rkzamahn + :frmMahn.nDiv
		// WHERE rkarztnr = :frmMahn.nA3 AND rkrechnr = :frmMahn.nRg3')
		// Set nMG3 = nMG3 - nDiv
		// Set nDMStorno = nDMStorno - nDiv
		// 4
		// If nDMStorno > 0
		// Set nDiv = nDMStorno
		// If nDiv > nMG4
		// Set nDiv = nMG4
		// Call PalRgStorno(nA4, nRg4, nDiv)
		// Call SqlImmed('UPDATE rk SET rkzamahn = rkzamahn + :frmMahn.nDiv
		// WHERE rkarztnr = :frmMahn.nA4 AND rkrechnr = :frmMahn.nRg4')
		// Set nMG4 = nMG4 - nDiv
		// Set nDMStorno = nDMStorno - nDiv
		// 5
		// If nDMStorno > 0
		// Set nDiv = nDMStorno
		// If nDiv > nMG5
		// Set nDiv = nMG5
		// Call PalRgStorno(nA5, nRg5, nDiv)
		// Call SqlImmed('UPDATE rk SET rkzamahn = rkzamahn + :frmMahn.nDiv
		// WHERE rkarztnr = :frmMahn.nA5 AND rkrechnr = :frmMahn.nRg5')
		// Set nMG5 = nMG5 - nDiv
		// Set nDMStorno = nDMStorno - nDiv
		// 6
		// If nDMStorno > 0
		// Set nDiv = nDMStorno
		// If nDiv > nMG6
		// Set nDiv = nMG6
		// Call PalRgStorno(nA6, nRg6, nDiv)
		// Call SqlImmed('UPDATE rk SET rkzamahn = rkzamahn + :frmMahn.nDiv
		// WHERE rkarztnr = :frmMahn.nA6 AND rkrechnr = :frmMahn.nRg6')
		// Set nMG6 = nMG6 - nDiv
		// Set nDMStorno = nDMStorno - nDiv
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalPruefeSperre()
		{
			#region Actions
			using (new SalContext(this))
			{
				//FC:FINAL: check if window still exists
				if (App.frmMahn == null)
				{
					return 0;                    
                }
                Sal.ColorSet(dfSperre, Sys.COLOR_IndexWindowText, Sys.COLOR_White);
                if (Int.PalFormFrei("Übergaben"))
                {
                    dfSperre.Text = "Übergaben erlaubt";
                    Sal.ColorSet(dfSperre, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
                }
                else
                {
                    dfSperre.Text = "Übergaben gesperrt !";
                    Sal.ColorSet(dfSperre, Sys.COLOR_IndexWindow, Sys.COLOR_Red);
                }
            }
			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmMahn WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMahn_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmMahn_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmMahn_OnSAM_Close(sender, e);
					break;
				
				case Sys.SAM_Activate:
					this.frmMahn_OnSAM_Activate(sender, e);
					break;
				
				case Sys.SAM_ReportStart:
					this.frmMahn_OnSAM_ReportStart(sender, e);
					break;
				
				case Sys.SAM_ReportFetchInit:
					this.frmMahn_OnSAM_ReportFetchInit(sender, e);
					break;
				
				case Sys.SAM_ReportFetchNext:
					this.frmMahn_OnSAM_ReportFetchNext(sender, e);
					break;
				
				case Sys.SAM_ReportFinish:
					this.frmMahn_OnSAM_ReportFinish(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMahn_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.lbMahnAktionen.SetWindowColor(Sys.COLOR_IndexWindow, 0xefefff);
			this.lbMahnAktionen.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_DarkRed);
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMahn_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.EnableWindow(App.frmMain.pbMahn);
			#endregion
		}
		
		/// <summary>
		/// SAM_Activate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMahn_OnSAM_Activate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 31.05.02
			this.PalPruefeSperre();
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportStart event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMahn_OnSAM_ReportStart(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 30.04.03
			if (Var.hWndfrmReport) 
			{
				Var.hWndfrmReport.BringWindowToTop();
			}

			if (this.strReportName == "MAHNPROT") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Mahnprotokoll", "Das Mahnprotokoll", "wird gedruckt", "Mahnprotokoll");
				Int.SqlConnection(ref this.hSqlMP);
			}
			else if (this.strReportName == "AUFTRKAR") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "MB-Anfragen", "Die MB-Anfragen", "werden gedruckt", "MB-Anfragen");
				Int.SqlConnection(ref this.hSqlAK);
			}
			else if (this.strReportName == "ETITAMP") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "TA-Etiketten", "Die TA-Etiketten", "werden gedruckt", "TA-Etiketten");
				Int.SqlConnection(ref this.hSqlAK);
			}
			else if (this.strReportName == "MAHNSUMM") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Summen", "Die Liste", "wird gedruckt", "Summen");
				Int.SqlConnection(ref this.hSqlAK);
			}
			else if (this.strReportName == "MB") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Mahnbescheide", "Die Mahnbescheide", "werden gedruckt", "Mahnbescheide");
				Int.SqlConnection(ref this.hSqlAK);
				Int.SqlConnection(ref this.hSqlMP);
			}
			else if (this.strReportName == "MBAUFKL") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "MB-Aufkleber", "Die MB-Aufkleber", "werden gedruckt", "MB-Aufkleber");
				Int.SqlConnection(ref this.hSqlAK);
				Int.SqlConnection(ref this.hSqlMP);
			}
			else if (this.strReportName == "MB-BB") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "MB-Beiblaetter", "Die MB-Beiblaetter", "werden gedruckt", "MB-Beiblaetter");
				Int.SqlConnection(ref this.hSqlAK);
			}
			else if (this.strReportName == "MBDECKBL") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "MB-Deckblaetter", "Die MB-Deckblaetter", "werden gedruckt", "MB-Deckblaetter");
				Int.SqlConnection(ref this.hSqlAK);
				Int.SqlConnection(ref this.hSqlMP);
			}
			else if (this.strReportName == "GERKOST") 
			{
				Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "Gerichtskosten-Liste", "Die Gerichtskosten-Liste", "wird gedruckt", "Gerichtskosten-Liste");
				Int.SqlConnection(ref this.hSqlAK);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFetchInit event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMahn_OnSAM_ReportFetchInit(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.strReportName == "MAHNPROT") 
			{
				if (this.dtMahnDat != SalDateTime.Null) 
				{
					this.strSelect = @"SELECT maarztnr, rkhalternr, hnn || ', ' || hvn, marechnr, rkrechdat,
			madatum, mams, madmrest, madmgeb, madmzins
			INTO :nTANr, :nTHNr, :strTHN1, :nRechNr, :dtRechDat,
			:dtMahnDat, :nMS, :nDMRech, :nDMMahn, :nDMZins
			from ma, h, rk
			WHERE maarztnr=rkarztnr AND marechnr=rkrechnr AND harztnr=rkarztnr AND hhalternr=rkhalternr
			AND madatum = :dtMahnDat ";
				}
				else
				{
					this.strSelect = @"SELECT maarztnr, rkhalternr, hnn || ', ' || hvn, marechnr, rkrechdat,
			madatum, mams, madmrest, madmgeb, madmzins
			INTO :nTANr, :nTHNr, :strTHN1, :nRechNr, :dtRechDat,
			:dtMahnDat, :nMS, :nDMRech, :nDMMahn, :nDMZins
			from ma, h, rk
			WHERE maarztnr=rkarztnr AND marechnr=rkrechnr AND harztnr=rkarztnr AND hhalternr=rkhalternr
			AND madatum BETWEEN :dtMahnDatVon AND (:dtMahnDatBis + 1 DAY)  ";
				}
				if (this.nTANr != SalNumber.Null) 
				{
					this.strSelect = this.strSelect + " AND maarztnr = :nTANr ";
				}
				if (this.nTHNr != SalNumber.Null) 
				{
					this.strSelect = this.strSelect + " AND mahalternr = :nTHNr ";
				}
				this.strSelect = this.strSelect + " ORDER BY maarztnr, madatum, rkhalternr";
				if (!(this.hSqlMP.Prepare(this.strSelect))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlMP.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlMP.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "AUFTRKAR") 
			{
				// If NOT SqlPrepare(hSqlAK,'
				// SELECT rkarztnr, rkhalternr,
				// aname1, aname2, astr, aort,
				// htitel, hname1, hname2, hstr, hort,
				// rkrechnr, rkrechdat,
				// (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn), (rkdmmahn-rkzamahn), (rkdmzins-rkzazins)
				// INTO :nTANr, :nTHNr,
				// :strTAN1, :strTAN2, :strTAStr, :strTAOrt,
				// :strTHAnr, :strTHN1, :strTHN2, :strTHStr, :strTHOrt,
				// :nRechNr, :dtRechDat, :nDMRech, :nDMMahn, :nDMZins
				// FROM rk,h,a
				// WHERE rkarztnr=harztnr and rkhalternr=hhalternr
				// AND rkarztnr=aarztnr
				// AND rkarztnr*100000+rkhalternr IN (select mvarztnr*100000+mvhalternr from mv)
				// AND rkkzzahl<2
				// ORDER BY rkarztnr,rkhalternr')
				// Return FALSE
				if (!(this.hSqlAK.Prepare(@"
SELECT mvarztnr, mvhalternr,
asvname1, asvname2, asvstr, asvort,
htitel, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland,
mvrechnr, mvrechdat,  mvdmrest, mvdmmahngeb, mvdmzins
INTO :nTANr, :nTHNr,
:strTAN1, :strTAN2, :strTAStr, :strTAOrt,
:strTHAnr, :strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strTHLand,
:nRechNr, :dtRechDat, :nDMRech, :nDMMahn, :nDMZins
FROM mv,h,a
WHERE mvarztnr=harztnr and mvhalternr=hhalternr
AND mvarztnr=aarztnr
ORDER BY mvarztnr,mvhalternr"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlAK.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlAK.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "ETITAMP") 
			{
				if (!(this.hSqlAK.Prepare(@"
SELECT DISTINCT mvarztnr, asvname1, asvname2, asvstr, asvort
INTO :nTANr,
:strTAN1, :strTAN2, :strTAStr, :strTAOrt
FROM mv,a
WHERE mvarztnr=aarztnr
ORDER BY mvarztnr"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlAK.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlAK.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "MAHNSUMM") 
			{
				if (!(this.hSqlAK.Prepare(@"
SELECT mvms, count(*)
INTO :nMS, :nMahnAnz
FROM mv
GROUP BY 1"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlAK.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlAK.Commit();
						e.Return = true;
						return;
					}
				}
			}
			// Else If strReportName = 'MB'
			// If NOT SqlPrepare(hSqlAK,'
			// SELECT mbarztnr, mbhalternr, mbnr,
			// aname1, aname2, astr, aort, anr2,
			// hti || hvn || \' \' || hnn, hname2, hstr, hort, mbprozhf,
			// mbdatum, mbgerkosten, mbgername,
			// mbeheleute, mbehepartner
			// INTO :nTANr, :nTHNr, :nMBNr,
			// :strTAN1, :strTAN2, :strTAStr, :strTAOrt, :nTANr2,
			// :strTHN1, :strTHN2, :strTHStr, :strTHOrt, :nZinsProz,
			// :frmMahn.dtMBDatum, :nGerKosten, :strGerName,
			// :nEheleute, :strEhepartner
			// FROM mb,h,a
			// WHERE mbarztnr=harztnr and mbhalternr=hhalternr
			// AND mbarztnr=aarztnr
			// ORDER BY mbnr')
			// Return FALSE
			// Else
			// If NOT SqlExecute(hSqlAK)
			// Return FALSE
			// Else
			// Call SqlCommit(hSqlAK)
			// Return TRUE
			// Else If strReportName = 'MBAUFKL'
			// If NOT SqlPrepare(hSqlAK,'
			// SELECT mbarztnr, hti || hvn || \' \' || hnn, mbrg1
			// INTO :nTANr, :strTHN1, :nRg1
			// FROM mb,h
			// WHERE mbarztnr=harztnr and mbhalternr=hhalternr
			// ORDER BY mbnr')
			// Return FALSE
			// Else
			// If NOT SqlExecute(hSqlAK)
			// Return FALSE
			// Else
			// Call SqlCommit(hSqlAK)
			// Return TRUE
			// Else If strReportName = 'MB-BB'
			// If NOT SqlPrepare(hSqlAK,'SELECT prdnr, rkrechdat, (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn), (rkdmmahn-rkzamahn)
			// INTO :nMBNr, :dtDat, :nHF, :nMG
			// FROM prd, rk, mb
			// WHERE prdarztnr=rkarztnr AND prdhalternr=rkhalternr AND prdrechnr=rkrechnr AND prdnr=mbnr
			// AND prdnr IN (SELECT PRDNR FROM prd GROUP BY 1 HAVING COUNT(PRDNR) > 6)
			// ORDER BY prdnr')
			// Return FALSE
			// Else
			// If NOT SqlExecute(hSqlAK)
			// Return FALSE
			// Else
			// Call SqlCommit(hSqlAK)
			// Set nMBNrAlt = 0
			// Return TRUE
			else if (this.strReportName == "MBDECKBL") 
			{
				if (!(this.hSqlAK.Prepare(@"
SELECT mbarztnr, mbhalternr, mbnr,
aname1, aname2, astr, aort,anr2,
hti || hvn || ' ' || hnn, hname2, hstr, hort, hland,
mbdatum, mbgerkosten, prdarztnr, prdrechnr
INTO :nTANr, :nTHNr, :nMBNr,
:strTAN1, :strTAN2, :strTAStr, :strTAOrt, :nTANr2,
:strTHN1, :strTHN2, :strTHStr, :strTHOrt, :strTHLand,
:frmMahn.dtMBDatum, :nGerKosten, :nA1, :nRg1
FROM mb,h,a,prd
WHERE mbarztnr=harztnr and mbhalternr=hhalternr
AND mbarztnr=aarztnr AND mbnr=prdnr
ORDER BY mbnr"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlAK.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlAK.Commit();
						e.Return = true;
						return;
					}
				}
			}
			else if (this.strReportName == "GERKOST") 
			{
				if (!(this.hSqlAK.Prepare(@"
SELECT mbarztnr, mbnr,  mbhalternr, mbrg1, hti || hvn || ' ' || hnn, mbgerkosten
INTO :nTANr, :nMBNr, :nTHNr, :nRechNr, :strTHN1, :nGerKosten
FROM mb,h
WHERE mbarztnr=harztnr and mbhalternr=hhalternr
ORDER BY mbnr"))) 
				{
					e.Return = false;
					return;
				}
				else
				{
					if (!(this.hSqlAK.Execute())) 
					{
						e.Return = false;
						return;
					}
					else
					{
						this.hSqlAK.Commit();
						e.Return = true;
						return;
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFetchNext event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMahn_OnSAM_ReportFetchNext(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.strReportName == "MAHNPROT") 
			{
				if (this.hSqlMP.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						Int.SqlImmedSel(@"SELECT asvname1, asvname2, asvstr, asvort
		INTO :frmMahn.strTAN1, :frmMahn.strTAN2, :frmMahn.strTAStr, :frmMahn.strTAOrt
		FROM A
		WHERE a.aarztnr = :frmMahn.nTANr");
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			else if (this.strReportName == "AUFTRKAR") 
			{
				if (this.hSqlAK.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						this.strSolvenzprf = "";
						this.dtSolvenzprf = SalDateTime.Null;
						// 10.04.06 Ländercodes
						this.strTHLand = Int.PalPruefeLC(this.strTHLand, 0);

						Int.SqlImmedSel(@"SELECT akdatum, vbez INTO :frmMahn.dtSolvenzprf, :frmMahn.strSolvenzprf
FROM ak, v WHERE aktyp='MG' AND aktypdetail LIKE 'CRED%' and vcode = aktypdetail
AND akarztnr = :frmMahn.nTANr AND akhalternr = :frmMahn.nTHNr ORDER BY akdatum DESC");
						if (this.dtSolvenzprf != SalDateTime.Null) 
						{
							this.strSolvenzprf = "Letzte Solvenzprüfung: " + Int.SalDateToStrX(this.dtSolvenzprf) + " " + this.strSolvenzprf;
						}
						else
						{
							this.strSolvenzprf = "";
						}
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			// Else If strReportName = 'MB'
			// If SqlFetchNext(hSqlAK,nFetch)
			// If nFetch = FETCH_Ok
			// Set nHF1=0
			// Set nHF2=0
			// Set nHF3=0
			// Set nHF4=0
			// Set nHF5=0
			// Set nHF6=0
			// Set nMG1=0
			// Set nMG2=0
			// Set nMG3=0
			// Set nMG4=0
			// Set nMG5=0
			// Set nMG6=0
			// Set nZI1=0
			// Set nZI2=0
			// Set nZI3=0
			// Set nZI4=0
			// Set nZI5=0
			// Set nZI6=0
			// Set dtDat1=DATETIME_Null
			// Set dtDat2=DATETIME_Null
			// Set dtDat3=DATETIME_Null
			// Set dtDat4=DATETIME_Null
			// Set dtDat5=DATETIME_Null
			// Set dtDat6=DATETIME_Null
			// Set dtFaell1=DATETIME_Null
			// Set dtFaell2=DATETIME_Null
			// Set dtFaell3=DATETIME_Null
			// Set dtFaell4=DATETIME_Null
			// Set dtFaell5=DATETIME_Null
			// Set dtFaell6=DATETIME_Null
			// Set nAnzRech = 0
			// Set nDMHF = 0
			// Set nDMMahn = 0
			// Set nNebenford = 0
			// 12.03.02
			// Call SqlImmedSel('SELECT count(*) INTO :frmMahn.nAnzRech FROM prd WHERE prdnr = :frmMahn.nMBNr')
			// If nAnzRech > 6
			// Set nBeiblatt = 1
			// Else
			// Set nBeiblatt = 0
			// Set strSelect = 'SELECT prdarztnr, prdrechnr, (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn),
			// (rkdmmahn-rkzamahn), (rkdmzins-rkzazins), rkrechDat,  rkfaelldat
			// INTO :frmMahn.nArztNr, :frmMahn.nRechNr, :frmMahn.nHF, :frmMahn.nMG, :frmMahn.nZI, :frmMahn.dtDat, :frmMahn.dtFaell
			// FROM prd, rk WHERE prdnr = :frmMahn.nMBNr AND prdarztnr=rkarztnr AND prdrechnr=rkrechnr ORDER BY prdarztnr, prdrechnr'
			// Call SqlHandleExec(hSqlMP,strSelect,'Fehler',nCount)
			// Call SqlFetchNext(hSqlMP,nFetchMP)
			// Set nCount = 0
			// While nFetchMP != FETCH_EOF
			// Set nCount = nCount + 1
			// Set nDMHF = nDMHF +nHF
			// Set nDMMahn = nDMMahn + nMG
			// If nCount = 1
			// Set nA1 = nArztNr
			// Set nRg1 = nRechNr
			// Set nHF1 = nHF
			// Set nMG1 = nMG
			// Set nZI1 = nZI
			// Set dtDat1 = dtDat
			// Set dtFaell1 = dtFaell
			// Else If nCount = 2
			// Set nA2 = nArztNr
			// Set nRg2 = nRechNr
			// Set nHF2 = nHF
			// Set nMG2 = nMG
			// Set nZI2 = nZI
			// Set dtDat2 = dtDat
			// Set dtFaell2 = dtFaell
			// Else If nCount = 3
			// Set nA3 = nArztNr
			// Set nRg3 = nRechNr
			// Set nHF3 = nHF
			// Set nMG3 = nMG
			// Set nZI3 = nZI
			// Set dtDat3 = dtDat
			// Set dtFaell3 = dtFaell
			// Else If nCount = 4
			// Set nA4 = nArztNr
			// Set nRg4 = nRechNr
			// Set nHF4 = nHF
			// Set nMG4 = nMG
			// Set nZI4 = nZI
			// Set dtDat4 = dtDat
			// Set dtFaell4 = dtFaell
			// Else If nCount = 5
			// Set nA5 = nArztNr
			// Set nRg5 = nRechNr
			// Set nHF5 = nHF
			// Set nMG5 = nMG
			// Set nZI5 = nZI
			// Set dtDat5 = dtDat
			// Set dtFaell5 = dtFaell
			// Else If nCount = 6
			// Set nA6 = nArztNr
			// Set nRg6 = nRechNr
			// Set nHF6 = nHF
			// Set nMG6 = nMG
			// Set nZI6 = nZI
			// Set dtDat6 = dtDat
			// Set dtFaell6 = dtFaell
			// Call SqlFetchNext(hSqlMP,nFetchMP)
			// Call SqlCommit( hSqlMP )
			// Set nNebenford = nDMMahn + 11.9	! DM 23.2
			// Set nMaxNebenko = 99999999
			// Update PR 05.10.99
			// Set nDMHF = nHF1 + nHF2 + nHF3 + nHF4  + nHF5 + nHF6
			// Call SqlImmed('UPDATE pr SET prdmhf = :frmMahn.nDMHF, prdmmahn =  :frmMahn.nDMMahn
			// WHERE prnr = :frmMahn.nMBNr')
			// 12.03.02 überflüssig geworden, da bereits in frmMBErf festgelegt
			// If nZinsProz < 8	! 23.04.01 von =0 geändert
			// Set nZinsProz=8
			// Set nAnzRech = 0
			// EURO
			// Set nNebenford = nMG1 + nMG2 + nMG3 + nMG4 + nMG5 + nMG6 + 11.9	! DM 23.2
			// Return TRUE
			// Else
			// Return FALSE
			else if (this.strReportName == "MBDECKBL") 
			{
				if (this.hSqlAK.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						this.nHF1 = 0;
						// 10.04.06 Ländercodes
						this.strTHLand = Int.PalPruefeLC(this.strTHLand, 0);
						// 28.08.06 Aufgabe 7
						this.strZust = Int.PalZust(this.nTANr);

						this.nMG1 = 0;
						this.nZI1 = 0;
						this.dtDat1 = SalDateTime.Null;
						this.dtFaell1 = SalDateTime.Null;
						this.nAnzRech = 0;
						this.nMaxNebenko = 99999999;
						Int.SqlImmedSel(@"SELECT (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn),
(rkdmmahn-rkzamahn), (rkdmzins-rkzazins), rkrechDat,  rkfaelldat
INTO :frmMahn.nHF1, :frmMahn.nMG1, :frmMahn.nZI1, :frmMahn.dtDat1, :frmMahn.dtFaell1
FROM rk
WHERE rkarztnr = :frmMahn.nA1 AND rkhalternr = :frmMahn.nTHNr
AND rkrechnr = :frmMahn.nRg1");
						// Call SqlImmedSel('SELECT (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn),
						// (rkdmmahn-rkzamahn), (rkdmzins-rkzazins), rkrechdat, rkfaelldat
						// INTO :frmMahn.nHF2, :frmMahn.nMG2, :frmMahn.nZI2, :frmMahn.dtDat2, :frmMahn.dtFaell2
						// FROM rk
						// WHERE rkarztnr = :frmMahn.nA2 AND rkhalternr = :frmMahn.nTHNr
						// AND rkrechnr = :frmMahn.nRg2')
						// Call SqlImmedSel('SELECT (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn),
						// (rkdmmahn-rkzamahn), (rkdmzins-rkzazins), rkrechdat, rkfaelldat
						// INTO :frmMahn.nHF3, :frmMahn.nMG3, :frmMahn.nZI3, :frmMahn.dtDat3, :frmMahn.dtFaell3
						// FROM rk
						// WHERE rkarztnr = :frmMahn.nA3 AND rkhalternr = :frmMahn.nTHNr
						// AND rkrechnr = :frmMahn.nRg3')
						// Call SqlImmedSel('SELECT (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn),
						// (rkdmmahn-rkzamahn), (rkdmzins-rkzazins), rkrechdat, rkfaelldat
						// INTO :frmMahn.nHF4, :frmMahn.nMG4, :frmMahn.nZI4, :frmMahn.dtDat4, :frmMahn.dtFaell4
						// FROM rk
						// WHERE rkarztnr = :frmMahn.nA4 AND rkhalternr = :frmMahn.nTHNr
						// AND rkrechnr = :frmMahn.nRg4')
						// Call SqlImmedSel('SELECT (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn),
						// (rkdmmahn-rkzamahn), (rkdmzins-rkzazins), rkrechdat, rkfaelldat
						// INTO :frmMahn.nHF5, :frmMahn.nMG5, :frmMahn.nZI5, :frmMahn.dtDat5, :frmMahn.dtFaell5
						// FROM rk
						// WHERE rkarztnr = :frmMahn.nA5 AND rkhalternr = :frmMahn.nTHNr
						// AND rkrechnr = :frmMahn.nRg5')
						// Call SqlImmedSel('SELECT (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn),
						// (rkdmmahn-rkzamahn), (rkdmzins-rkzazins), rkrechdat, rkfaelldat
						// INTO :frmMahn.nHF6, :frmMahn.nMG6, :frmMahn.nZI6, :frmMahn.dtDat6, :frmMahn.dtFaell6
						// FROM rk
						// WHERE rkarztnr = :frmMahn.nA6 AND rkhalternr = :frmMahn.nTHNr
						// AND rkrechnr = :frmMahn.nRg6')
						// 12.03.02
						// If nZinsProz < 8	! 23.04.01 von =0 geändert
						// Set nZinsProz=8

						this.nAnzRech = 0;
						// If nRg1 > 0
						// Set nAnzRech = nAnzRech + 1
						// If nRg2 > 0
						// Set nAnzRech = nAnzRech + 1
						// If nRg3 > 0
						// Set nAnzRech = nAnzRech + 1
						// If nRg4 > 0
						// Set nAnzRech = nAnzRech + 1
						// If nRg5 > 0
						// Set nAnzRech = nAnzRech + 1
						// If nRg6 > 0
						// Set nAnzRech = nAnzRech + 1
						// Berechnung: Maximale Höhe der Nebenkosten
						// If nHF1+nHF2+nHF3+nHF4+nHF5+nHF6 <= 600
						// Set nMaxNebenko = (nAnzRech-1) * 13.5 +  37.50
						// Else If nHF1+nHF2+nHF3+nHF4+nHF5+nHF6 <= 1200
						// Set nMaxNebenko = (nAnzRech-1) * 13.5 +  67.50
						// Else If nHF1+nHF2+nHF3+nHF4+nHF5+nHF6 <= 1800
						// Set nMaxNebenko = (nAnzRech-1) * 13.5 +  97.50
						// Else If nHF1+nHF2+nHF3+nHF4+nHF5+nHF6 <= 2400
						// Set nMaxNebenko = (nAnzRech-1) * 13.5 +  127.50
						// Else If nHF1+nHF2+nHF3+nHF4+nHF5+nHF6 <= 3000
						// Set nMaxNebenko = (nAnzRech-1) * 13.5 +  157.50
						// Else If nHF1+nHF2+nHF3+nHF4+nHF5+nHF6 <= 4000
						// Set nMaxNebenko = (nAnzRech-1) * 13.5 +  198.75
						// Else If nHF1+nHF2+nHF3+nHF4+nHF5+nHF6 <= 5000
						// Set nMaxNebenko = (nAnzRech-1) * 13.5 +  240
						// If nMG1+nMG2+nMG3+nMG4+nMG5+nMG6+23 > nMaxNebenko
						// Set nDMStorno = (nMG1+nMG2+nMG3+nMG4+nMG5+nMG6+23) - nMaxNebenko
						// If nDMStorno <0
						// Set nDMStorno = 0
						// If nDMStorno > 0
						// Call PalMBStorno()
						// neues Ermitteln der offenen Beträge nach Storno
						// Call SqlImmedSel('SELECT (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn),
						// (rkdmmahn-rkzamahn), (rkdmzins-rkzazins), rkrechDat,  rkfaelldat
						// INTO :frmMahn.nHF1, :frmMahn.nMG1, :frmMahn.nZI1, :frmMahn.dtDat1, :frmMahn.dtFaell1
						// FROM rk
						// WHERE rkarztnr = :frmMahn.nA1 AND rkhalternr = :frmMahn.nTHNr
						// AND rkrechnr = :frmMahn.nRg1')
						// Call SqlImmedSel('SELECT (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn),
						// (rkdmmahn-rkzamahn), (rkdmzins-rkzazins), rkrechdat, rkfaelldat
						// INTO :frmMahn.nHF2, :frmMahn.nMG2, :frmMahn.nZI2, :frmMahn.dtDat2, :frmMahn.dtFaell2
						// FROM rk
						// WHERE rkarztnr = :frmMahn.nA2 AND rkhalternr = :frmMahn.nTHNr
						// AND rkrechnr = :frmMahn.nRg2')
						// Call SqlImmedSel('SELECT (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn),
						// (rkdmmahn-rkzamahn), (rkdmzins-rkzazins), rkrechdat, rkfaelldat
						// INTO :frmMahn.nHF3, :frmMahn.nMG3, :frmMahn.nZI3, :frmMahn.dtDat3, :frmMahn.dtFaell3
						// FROM rk
						// WHERE rkarztnr = :frmMahn.nA3 AND rkhalternr = :frmMahn.nTHNr
						// AND rkrechnr = :frmMahn.nRg3')
						// Call SqlImmedSel('SELECT (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn),
						// (rkdmmahn-rkzamahn), (rkdmzins-rkzazins), rkrechdat, rkfaelldat
						// INTO :frmMahn.nHF4, :frmMahn.nMG4, :frmMahn.nZI4, :frmMahn.dtDat4, :frmMahn.dtFaell4
						// FROM rk
						// WHERE rkarztnr = :frmMahn.nA4 AND rkhalternr = :frmMahn.nTHNr
						// AND rkrechnr = :frmMahn.nRg4')
						// Call SqlImmedSel('SELECT (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn),
						// (rkdmmahn-rkzamahn), (rkdmzins-rkzazins), rkrechdat, rkfaelldat
						// INTO :frmMahn.nHF5, :frmMahn.nMG5, :frmMahn.nZI5, :frmMahn.dtDat5, :frmMahn.dtFaell5
						// FROM rk
						// WHERE rkarztnr = :frmMahn.nA5 AND rkhalternr = :frmMahn.nTHNr
						// AND rkrechnr = :frmMahn.nRg5')
						// Call SqlImmedSel('SELECT (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn),
						// (rkdmmahn-rkzamahn), (rkdmzins-rkzazins), rkrechdat, rkfaelldat
						// INTO :frmMahn.nHF6, :frmMahn.nMG6, :frmMahn.nZI6, :frmMahn.dtDat6, :frmMahn.dtFaell6
						// FROM rk
						// WHERE rkarztnr = :frmMahn.nA6 AND rkhalternr = :frmMahn.nTHNr
						// AND rkrechnr = :frmMahn.nRg6')
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			else
			{
				if (this.hSqlAK.FetchNext(ref this.nFetch)) 
				{
					if (this.nFetch == Sys.FETCH_Ok) 
					{
						// 28.08.06 Aufgabe 7
						this.strZust = Int.PalZust(this.nTANr);
						e.Return = true;
						return;
					}
					else
					{
						e.Return = false;
						return;
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFinish event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMahn_OnSAM_ReportFinish(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.strReportName == "MAHNPROT") 
			{
				this.hSqlMP.Disconnect();
			}
			else if (this.strReportName == "AUFTRKAR") 
			{
				this.nResult = Sal.MessageBox(@"Sind die MB-Anfragen alle
korrekt gedruckt worden ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconExclamation));
				if (this.nResult == Sys.IDYES) 
				{
					Sal.WaitCursor(true);
					Int.PalLog("AK korrekt gedruckt");
					// 29.04.05 plus "mvms=4 and "
					this.strSelect = @"SELECT mvarztnr, mvrechnr, akzmb
INTO :frmMahn.nArztNr, :frmMahn.nRechNr, :frmMahn.nKZMB
FROM mv,a WHERE mvarztnr=aarztnr  ORDER by mvarztnr, mvrechnr";
					Int.SqlHandleExec(this.hSqlAK, this.strSelect, "Fehler", ref Var.nCount);
					this.nFetchAK = this.hSqlAK.FetchNext();
					while (this.nFetchAK != Sys.FETCH_EOF) 
					{
						Int.SqlImmedX(@"UPDATE rk SET rkmahnstufe = :frmMahn.nKZMB
WHERE rkarztnr = :frmMahn.nArztNr AND rkrechnr = :frmMahn.nRechNr");
						Int.SqlImmedX(@"DELETE FROM mv
WHERE mvarztnr = :frmMahn.nArztNr AND mvrechnr = :frmMahn.nRechNr");
						this.SetStatusBarText("Rech-Nr. " + this.nArztNr.ToString(0) + "/" + this.nRechNr.ToString(0));
						this.nFetchAK = this.hSqlAK.FetchNext();
					}
					this.hSqlAK.Commit();
					Sal.WaitCursor(false);
					this.SetStatusBarText("");
				}
				else
				{
					Int.PalLog("AK NICHT korrekt gedruckt");
				}
				this.hSqlAK.Disconnect();
			}
			else if (this.strReportName == "MBDECKBL" || this.strReportName == "MB" || this.strReportName == "MBAUFKL") 
			{
				this.hSqlAK.Disconnect();
				this.hSqlMP.Disconnect();
			}
			else
			{
				this.hSqlAK.Disconnect();
			}
			#endregion
		}
		
		/// <summary>
		/// lbMahnAktionen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbMahnAktionen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.lbMahnAktionen_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.lbMahnAktionen_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbMahnAktionen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			this.nDiskIndex = this.lbMahnAktionen.GetListSelectedIndex();
			this.strSelect = this.lbMahnAktionen.GetListItemText(this.nDiskIndex);
			if (this.strSelect == "1 - Mahntexte") 
			{
				frmMahntexte.CreateWindow(this);
			}
			else if (this.strSelect == "2 - Mahnvorschlag erstellen") 
			{
				// Set nResult = SalMessageBox( 'Der alte Mahnvorschlag wird gelöscht!
				// Weiter ?','Achtung',
				// MB_YesNo|MB_IconExclamation )
				// If nResult=IDYES
				Sal.WaitCursor(false);
				dlgMahnVor.ModalDialog(this);
			}
			else if (this.strSelect == "3 - Mahnvorschlag ändern") 
			{
				frmMahnVor.CreateWindow(this);
			}
			else if (this.strSelect == "4a - Mahnungen speichern") 
			{
				frmSpeMa.CreateWindow(this);
			}
			else if (this.strSelect == "4b - Mahnungen drucken") 
			{
				frmDruMa.CreateWindow(this);
			}
			// Else If strSelect = '4c - RaZa-Mahnungen drucken'
			// Call SalCreateWindow( frmDruRaZaMa,hWndForm )
			else if (this.strSelect == "6 - TA-Etiketten aus Vorschlag") 
			{
				// Set nErr = 1
				// Set strReportName = 'ETITAMP'
				// Call PalReport(frmMahn,'ETITAMP.QRP',
				// ':frmMahn.nTANr,:frmMahn.strTAN1,:frmMahn.strTAN2,:frmMahn.strTAStr,:frmMahn.strTAOrt',
				// 'ArztNr, AName1, AName2, AStr, AOrt',nErr)
				dlgLlDruck.ModalDialog(App.frmMain, "Mitglieder.lbl", "Mahnungen");
			}
			else if (this.strSelect == "7 - Summenblatt drucken") 
			{
				// Set nErr = 1
				// Set strReportName = 'MAHNSUMM'
				// Call PalReport(frmMahn,'MAHNSUMM.QRP',
				// ':frmMahn.nMS,:frmMahn.nMahnAnz',
				// 'MS, Anzahl',nErr)
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Summenblatt.lst", "");
			}
			else if (this.strSelect == "9 - Übergabe FiBu") 
			{
				if (!(Int.PalFormFrei("Übergaben"))) 
				{
					Sal.MessageBox("Abschluß läuft. Übergabe nicht erlaubt !", "Achtung", Sys.MB_Ok);
					this.PostMessage(Sys.SAM_Close, 0, 0);
				}
				else
				{
					if (Sys.IDYES == Sal.MessageBox("Sind alle Mahnungen gedruckt worden ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
					{
						Int.SqlIstDa(" FROM mv WHERE mvmahndat IS NULL", ref this.bExists);
						if (this.bExists) 
						{
							this.nResult = Sal.MessageBox("Bitte erst Mahnungen drucken !!!", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
						}
						else
						{
							// 17.02.17 Ä1504 + Zahlungserinnerungen
							// Call SqlIstDa(' FROM mv WHERE mvms IS NULL Or mvms NOT IN (1,2,3)',bExists)
							Int.SqlIstDa(" FROM mv WHERE mvms > 4", ref this.bExists);
							if (this.bExists) 
							{
								this.nResult = Sal.MessageBox("Für MB-Anfragen gilt dieser Punkt nicht !!!", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
							}
							else
							{
								// 26.05.00
								Int.SqlIstDa(" FROM mv WHERE mvdmmahngeb IS NULL", ref this.bExists);
								if (this.bExists) 
								{
									this.nResult = Sal.MessageBox("Bitte erst Mahnungen speichern !!!", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
								}
								else
								{
									Sal.WaitCursor(true);
									Int.PalLog("ÜbFiBu Mahnungen");
									Int.SqlConnection(ref this.hSqlUM);
									// MV in MA
									this.SetStatusBarText("Erstelle Mahntabelle");
									// Call SqlImmed('INSERT INTO ma
									// SELECT mvarztnr, NULL, mvrechnr, mvmahndat, mvdmmahngeb, mvms
									// FROM mv')
									// MV Rechnung für Rechnung
									// 06.11.18 Ä1806 + mvnr
									this.strSelect = @"SELECT ROWID, mvarztnr, mvrechnr, mvdmmahngeb,  mvdmzins, mvms, mvmahndat, mvdmrest, mvnr
INTO :frmMahn.strMvROWID,
:frmMahn.nArztNr, :frmMahn.nRechNr, :frmMahn.nDMMahnGeb, :frmMahn.nDMZins,
:frmMahn.nMS, :frmMahn.dtMahnDat, :frmMahn.nDMRech, :frmMahn.nMVNr
FROM mv ORDER by mvarztnr, mvrechnr";
									Int.SqlHandleExec(this.hSqlUM, this.strSelect, "Fehler", ref Var.nCount);
									this.nFetchUM = this.hSqlUM.FetchNext();
									while (this.nFetchUM != Sys.FETCH_EOF) 
									{
										// 24.08.12 F1395 + rkdmzins
										Int.SqlImmedSel(@"SELECT ROWID, rkdmmahn, rkkzzahl, rkmahnstufe, rkhalternr, rkdmzins
INTO :frmMahn.strROWID, :frmMahn.nDMMahn, :frmMahn.nRkKZZahl, :frmMahn.nRkMS, :frmMahn.nHalterNr, :frmMahn.nDMZinsAlt
FROM rk
WHERE rkarztnr = :frmMahn.nArztNr AND rkrechnr = :frmMahn.nRechNr AND rkdeaktiv IS NULL ");
										// inzwischen bezahlt
										// #18 verschoben nach frmSpeMa
										// If nRkKZZahl>1
										// Call SqlImmed('DELETE FROM mv WHERE ROWID=:frmMahn.strMvROWID')
										// Call SalMessageBox('Rech-Nr. ' || SalNumberToStrX(nArztNr,0) || '/R' || SalNumberToStrX(nRechNr,0) || ' wurde mittlerweile
										// bezahlt und wird daher aus dem
										// Mahnvorschlag entfernt.', 'Achtung',MB_Ok|MB_IconAsterisk)
										// Call PalLog('MV wgZahlg gelöscht: ' || SalNumberToStrX(nArztNr,0) || '/R' || SalNumberToStrX(nRechNr,0))
										// Else If nRkMS > nMS
										// Call SqlImmed('DELETE FROM mv WHERE ROWID=:frmMahn.strMvROWID')
										// Call SalMessageBox('Rech-Nr. ' || SalNumberToStrX(nArztNr,0) || '/R' || SalNumberToStrX(nRechNr,0) || ' hat mittlerweile bereits MS ' || SalNumberToStrX(nRkMS,0) || '
										// bekommen und wird daher aus dem
										// Mahnvorschlag entfernt.', 'Achtung',MB_Ok|MB_IconAsterisk)
										// Call PalLog('MV wgMS' || SalNumberToStrX(nRkMS,0) || ' gelöscht: ' || SalNumberToStrX(nArztNr,0) || '/R' || SalNumberToStrX(nRechNr,0))
										// Else
										// 24.08.12 F1395
										// 18.03.13 F1500
										// Set nDMZins = nDMZins - nDMZinsAlt
										if (this.nDMZins > this.nDMZinsAlt) 
										{
											this.nDMZins = this.nDMZins - this.nDMZinsAlt;
										}

										Int.SqlImmed("UPDATE mv SET mvdmzins = :frmMahn.nDMZins WHERE rowid = :frmMahn.strMvROWID");

										this.nDMMahn = this.nDMMahn + this.nDMMahnGeb;
										// 06.11.18 Ä1806 + mvnr
										Int.SqlImmed(@"INSERT INTO ma (maarztnr, marechnr, madatum, madmgeb, mams, madmrest, madmzins, manr)
VALUES(:frmMahn.nArztNr, :frmMahn.nRechNr, :frmMahn.dtMahnDat, :frmMahn.nDMMahnGeb,
:frmMahn.nMS, :frmMahn.nDMRech, :frmMahn.nDMZins, :frmMahn.nMVNr)");
										if (this.nMS == 0)  // 17.02.17 Ä1504 + Zahlungserinnerungen
										{
										}
										else if (this.nMS == 1) 
										{
											Int.SqlImmedX(@"UPDATE rk SET
rkdmzins = rkdmzins + :frmMahn.nDMZins,
rkdmmahn = :frmMahn.nDMMahn,
rkmahnstufe = :frmMahn.nMS,
rkmahnerst = :frmMahn.dtMahnDat,
rkmahnltzt = :frmMahn.dtMahnDat
WHERE ROWID = :frmMahn.strROWID");
										}
										else
										{
											Int.SqlImmedX(@"UPDATE rk SET
rkdmzins  = rkdmzins + :frmMahn.nDMZins,
rkdmmahn = :frmMahn.nDMMahn,
rkmahnstufe = :frmMahn.nMS,
rkmahnltzt = :frmMahn.dtMahnDat
WHERE ROWID = :frmMahn.strROWID");
										}
										// 08.05.09
										// Set frmMain.dtHBBuchDat = SalDateCurrent()
										// If nDMMahnGeb != 0
										// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
										// VALUES(:frmMahn.nArztNr, :frmMahn.nHalterNr, :frmMahn.nRechNr, :frmMahn.dtMahnDat, \'MG1\', :frmMain.dtHBBuchDat, :frmMahn.nDMMahnGeb, 16410, NULL, \'Mahngebühr\')')
										// If nDMZins != 0
										// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
										// VALUES(:frmMahn.nArztNr, :frmMahn.nHalterNr, :frmMahn.nRechNr, :frmMahn.dtMahnDat, \'MGZin\', :frmMain.dtHBBuchDat, :frmMahn.nDMZins, 16410, NULL, \'Zinsen\')')

										this.SetStatusBarText("Übergabe FiBu  Rech-Nr. " + this.nArztNr.ToString(0) + this.nRechNr.ToString(0));
										this.nFetchUM = this.hSqlUM.FetchNext();
									}
									this.hSqlUM.Commit();
									// MV Arzt für Arzt, MS für MS / Aktionen
									this.strSelect = @"SELECT mvarztnr, mvms, sum(mvdmmahngeb), sum(mvdmzins), count(*), max(mvmahndat)
INTO :frmMahn.nArztNr, :frmMahn.nMS, :frmMahn.nDMMahnGeb, :frmMahn.nDMZins, :frmMahn.nMahnAnz,
:frmMahn.dtMahnDat
FROM mv GROUP BY 1,2 ORDER by mvarztnr,mvms";
									Int.SqlHandleExec(this.hSqlUM, this.strSelect, "Fehler", ref Var.nCount);
									this.nFetchUM = this.hSqlUM.FetchNext();
									while (this.nFetchUM != Sys.FETCH_EOF) 
									{
										Int.SqlIstDa(" FROM mg WHERE mgarztnr = :frmMahn.nArztNr", ref this.bExists);
										if (this.bExists) 
										{
											Int.SqlImmedSel(@"SELECT mgdmabr  INTO :nTVMahnDM
FROM  mg WHERE mgarztnr = :frmMahn.nArztNr");
										}
										else
										{
											Int.SqlImmedSel(@"SELECT mgdmabr  INTO :nTVMahnDM
FROM  mg WHERE mgarztnr = 0");
										}
										this.nDMTVMahnGeb = this.nMahnAnz * Var.nTVMahnDM;
										// 06.03.23 Ä2086
										Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
										if (this.dtMahnDat < Var.dtINIMinBuchDat) 
										{
											this.dtMahnDat = Var.dtINIMinBuchDat;
										}

										// Aktionsdatei
										Int.PalAktionDatum(this.dtMahnDat, this.nArztNr, SalNumber.Null, SalNumber.Null, "MG", "MS" + this.nMS.ToString(0), this.nMahnAnz, SalNumber.Null, this.nDMTVMahnGeb, this.nDMZins, SalNumber.Null, SalNumber.Null, "");

										this.SetStatusBarText("Übergabe Aktion Arzt-Nr. " + this.nArztNr.ToString(0));
										this.nFetchUM = this.hSqlUM.FetchNext();
										this.hSqlUM.Commit();
									}
									this.hSqlUM.Commit();
									// MV Arzt für Arzt
									this.strSelect = @"SELECT mvarztnr, sum(mvdmmahngeb), sum(mvdmzins), count(*), max(mvmahndat)
INTO :frmMahn.nArztNr, :frmMahn.nDMMahnGeb, :frmMahn.nDMZins, :frmMahn.nMahnAnz,
:frmMahn.dtMahnDat
FROM mv GROUP BY 1 ORDER by mvarztnr";
									Int.SqlHandleExec(this.hSqlUM, this.strSelect, "Fehler", ref Var.nCount);
									this.nFetchUM = this.hSqlUM.FetchNext();
									while (this.nFetchUM != Sys.FETCH_EOF) 
									{
										// Set nDMVSt = SalNumberRound(nDMMahnGeb * nMwStVoll
										// * 100 / (100 + nMwStVoll)) /100
										Int.SqlIstDa(" FROM mg WHERE mgarztnr = :frmMahn.nArztNr", ref this.bExists);
										if (this.bExists) 
										{
											Int.SqlImmedSel(@"SELECT mgdmabr  INTO :nTVMahnDM
FROM  mg WHERE mgarztnr = :frmMahn.nArztNr");
										}
										else
										{
											Int.SqlImmedSel(@"SELECT mgdmabr  INTO :nTVMahnDM
FROM  mg WHERE mgarztnr = 0");
										}
										// 03.05.10 OTÄ420
										Var.nCheckMwSt = Int.PalCheckAuslMwSt(this.nArztNr);
										// 14.04.14 Ä1046
										if (Int.PalCheckAuslTA(this.nArztNr) == "EU") 
										{
											App.frmMain.strErloeskonto = "80200";
										}
										else
										{
											App.frmMain.strErloeskonto = "80100";
											// 24.06.20 Ä1892
											if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
											{
												Var.nTVMahnDM = Var.nTVMahnDM * 116m / 119;
												App.frmMain.strErloeskonto = "80101";
											}
										}
										// 18.04.11 Ä563
										if (Var.nCheckMwSt == 0) 
										{
											this.nTAReverse = 1;
										}
										else
										{
											this.nTAReverse = 0;
										}

										this.nDMTVMahnGeb = this.nMahnAnz * Var.nTVMahnDM;
										this.nDMTVVSt = (this.nDMTVMahnGeb * Var.nCheckMwSt * 100 / (100 + Var.nCheckMwSt)).Round() / 100;
										this.strBuchText = "Mahnungen (" + this.nMahnAnz.ToString(0) + " Stck.)";
										// #16 kein leeres Buchungsdatum mehr erlauben
										if (this.dtMahnDat == SalDateTime.Null) 
										{
											this.dtMahnDat = SalDateTime.Current;
										}
										// 06.03.23 Ä2086
										Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
										if (this.dtMahnDat < Var.dtINIMinBuchDat) 
										{
											this.dtMahnDat = Var.dtINIMinBuchDat;
										}

										// 08.12.06 Ä48 19% MwSt.
										// Call SqlImmedX('INSERT INTO TK
										// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
										// tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
										// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
										// VALUES (:frmMahn.nArztNr, 0, 0, :frmMahn.strBuchText, 0, 0, 0,
										// :frmMahn.dtMahnDat, 80100, 0, 0, :frmMahn.nDMTVVSt,
										// 0, 0, 0, 0, 0, :nMwSatz[1], 0, 0, :frmMahn.nDMTVMahnGeb, :frmMahn.nDMTVMahnGeb, 0)')
										// 22.08.22 Ä2015 tkdmabr -> tkdmmahn
										// 20.11.23 Ä2144 + tkkontocode
										Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmmahn, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkreverse, tkkontocode)
VALUES (:frmMahn.nArztNr, 0, 0, :frmMahn.strBuchText, 0, 0, 0,
:frmMahn.dtMahnDat, :frmMain.strErloeskonto, 0, 0, :frmMahn.nDMTVVSt,
0, 0, 0, 0, 0, :nCheckMwSt, 0, 0, :frmMahn.nDMTVMahnGeb, :frmMahn.nDMTVMahnGeb, 0, :frmMahn.nTAReverse,
'Mahnung-')");

										Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16000, 16410, :frmMahn.nArztNr, :frmMahn.dtMahnDat, :frmMahn.strBuchText,
:frmMahn.nDMMahnGeb, 2)");
										this.strBuchText = "Zinsen";
										Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16000, 16410, :frmMahn.nArztNr, :frmMahn.dtMahnDat, :frmMahn.strBuchText,
:frmMahn.nDMZins, 2)");
										this.strBuchText = "Mahngebühren";
										this.nDMTVnetto = this.nDMTVMahnGeb - this.nDMTVVSt;
										Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16200, :frmMain.strErloeskonto, :frmMahn.nArztNr, :frmMahn.dtMahnDat, :frmMahn.strBuchText,
:frmMahn.nDMTVnetto, 2)");
										if (this.nDMTVVSt != 0) 
										{
											this.strBuchText = "MwSt Haben";
											// 30.06.20 Ä1892
											Var.nMwStSenkung = 17760;
											if (this.dtMahnDat >= new SalDateTime(2020, 7, 1) && this.dtMahnDat <= new SalDateTime(2020, 12, 31)) 
											{
												Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
											}
											Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16200, :nMwStSenkung, :frmMahn.nArztNr, :frmMahn.dtMahnDat, :frmMahn.strBuchText,
:frmMahn.nDMTVVSt, 2)");
										}
										Int.SqlImmedX("DELETE FROM mv WHERE mvarztnr=:frmMahn.nArztNr");
										this.SetStatusBarText("Übergabe FiBu  Arzt-Nr. " + this.nArztNr.ToString(0));
										this.nFetchUM = this.hSqlUM.FetchNext();
										this.hSqlUM.Commit();
									}
									this.hSqlUM.Commit();
									this.hSqlUM.Disconnect();
									Int.SqlImmedSel(@"SELECT mgdmabr  INTO :nTVMahnDM
FROM  mg WHERE mgarztnr = 0");
									this.SetStatusBarText("");
									Sal.WaitCursor(false);
								}
							}
						}
					}
				}
			}
			// Else If strSelect = '9b - Übergabe Ratenzahler-Mahnungen'
			// Call SqlIstDa(' FROM mv WHERE mvms IS NOT NULL',bExists)
			// If bExists
			// Set nResult = SalMessageBox( 'Dieser Punkt gilt
			// nur für
			// RATENZAHLER-Mahnungen !!!','Achtung',
			// MB_Ok|MB_IconExclamation )
			// Else
			// If Not PalFormFrei('Übergaben')
			// Call SalMessageBox('Abschluß läuft. Übergabe nicht erlaubt !', 'Achtung', MB_Ok)
			// Call SalPostMsg(hWndForm, SAM_Close,0,0)
			// Else
			// Call SalWaitCursor( TRUE )
			// Call PalLog('ÜbFiBu RaZa-Mahnungen')
			// Call SqlConnection(hSqlUM)
			// MV in MA
			// Call SalStatusSetText(hWndForm, 'Erstelle Mahntabelle')
			// 14.01.03 geändert
			// Call SqlImmed('INSERT INTO ma
			// SELECT mvarztnr, NULL, mvrechnr, mvmahndat, mvdmmahngeb, mvms
			// FROM mv')
			// MV Rechnung für Rechnung
			// Set strSelect = 'SELECT mvarztnr, mvrechnr, mvdmmahngeb,  mvdmzins, mvms, mvmahndat, mvdmrest
			// INTO :frmMahn.nArztNr, :frmMahn.nRechNr, :frmMahn.nDMMahnGeb, :frmMahn.nDMZins,
			// :frmMahn.nMS, :frmMahn.dtMahnDat, :frmMahn.nDMRech
			// FROM mv ORDER by mvarztnr, mvrechnr'
			// Set strSelect = 'SELECT mvarztnr, mvrechnr, mvdmmahngeb
			// INTO :frmMahn.nArztNr, :frmMahn.nRechNr, :frmMahn.nDMMahnGeb
			// FROM mv  ORDER by mvarztnr, mvrechnr'
			// Call SqlHandleExec(hSqlUM,strSelect,'Fehler',nCount)
			// Call SqlFetchNext(hSqlUM,nFetchUM)
			// While nFetchUM != FETCH_EOF
			// Call SqlImmed('INSERT INTO ma (maarztnr, marechnr, madatum, madmgeb, mams, madmrest, madmzins)
			// VALUES(:frmMahn.nArztNr, :frmMahn.nRechNr, :frmMahn.dtMahnDat, :frmMahn.nDMMahnGeb,
			// :frmMahn.nMS, :frmMahn.nDMRech, :frmMahn.nDMZins)')
			// Call SqlImmedSel('SELECT ROWID, rkdmmahn
			// INTO :frmMahn.strROWID, :frmMahn.nDMMahn
			// FROM rk
			// WHERE rkarztnr = :frmMahn.nArztNr AND rkrechnr = :frmMahn.nRechNr')
			// Set nDMMahn = nDMMahn + nDMMahnGeb
			// Call SqlImmedX('UPDATE rk SET rkdmmahn = :frmMahn.nDMMahn WHERE ROWID = :frmMahn.strROWID')
			// 08.05.09
			// Set frmMain.dtHBBuchDat = SalDateCurrent()
			// If nDMMahnGeb != 0
			// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
			// VALUES(:frmMahn.nArztNr, :frmMahn.nHalterNr, :frmMahn.nRechNr, :frmMahn.dtMahnDat, \'MGRz\', :frmMain.dtHBBuchDat, :frmMahn.nDMMahnGeb, 16410, NULL, \'Ratenzahler-Mahngebühr\')')
			// Call SalStatusSetText(hWndForm,'Übergabe FiBu  Rech-Nr. '
			// || SalNumberToStrX(nArztNr,0) || SalNumberToStrX(nRechNr,0))
			// Call SqlFetchNext(hSqlUM,nFetchUM)
			// Call SqlCommit( hSqlUM )
			// MV Halter für Halter / Aktionen
			// Set strSelect = 'SELECT mvarztnr, mvhalternr, sum(mvdmmahngeb),  count(*), max(mvmahndat)
			// INTO :frmMahn.nArztNr, :frmMahn.nHalterNr, :frmMahn.nDMMahnGeb, :frmMahn.nMahnAnz, :frmMahn.dtMahnDat
			// FROM mv GROUP BY 1,2 ORDER by mvarztnr,mvhalternr'
			// Call SqlHandleExec(hSqlUM,strSelect,'Fehler',nCount)
			// Call SqlFetchNext(hSqlUM,nFetchUM)
			// While nFetchUM != FETCH_EOF
			// Call SqlIstDa(' FROM mg WHERE mgarztnr = :frmMahn.nArztNr',bExists)
			// If bExists
			// Call SqlImmedSel('SELECT mgdmabr  INTO :nTVMahnDM
			// FROM  mg WHERE mgarztnr = :frmMahn.nArztNr')
			// Else
			// Call SqlImmedSel('SELECT mgdmabr  INTO :nTVMahnDM
			// FROM  mg WHERE mgarztnr = 0')
			// Set nDMTVMahnGeb = nMahnAnz * nTVMahnDM
			// Aktionsdatei
			// Call PalAktion( nArztNr, nHalterNr, NUMBER_Null,
			// 'MG','Rat' ,nMahnAnz, NUMBER_Null, nDMTVMahnGeb, NUMBER_Null, NUMBER_Null, NUMBER_Null)
			// Set dtMahnDat = dtMahnDat + 10
			// Call SqlImmed('UPDATE r SET r1 = :frmMahn.dtMahnDat
			// WHERE rarztnr = :frmMahn.nArztNr AND rhalternr = :frmMahn.nHalterNr')
			// Call SalStatusSetText(hWndForm,'Übergabe Aktion Arzt-Nr. '||SalNumberToStrX(nArztNr,0))
			// Call SqlFetchNext(hSqlUM,nFetchUM)
			// Call SqlCommit( hSqlUM )
			// Call SqlCommit( hSqlUM )
			// MV Arzt für Arzt
			// Set strSelect = 'SELECT mvarztnr, sum(mvdmmahngeb), sum(mvdmzins), count(*), max(mvmahndat)
			// INTO :frmMahn.nArztNr, :frmMahn.nDMMahnGeb, :frmMahn.nDMZins, :frmMahn.nMahnAnz,
			// :frmMahn.dtMahnDat
			// FROM mv GROUP BY 1 ORDER by mvarztnr'
			// Call SqlHandleExec(hSqlUM,strSelect,'Fehler',nCount)
			// Call SqlFetchNext(hSqlUM,nFetchUM)
			// While nFetchUM != FETCH_EOF
			// Set nDMVSt = SalNumberRound(nDMMahnGeb * nMwStVoll
			// * 100 / (100 + nMwStVoll)) /100
			// Call SqlIstDa(' FROM mg WHERE mgarztnr = :frmMahn.nArztNr',bExists)
			// If bExists
			// Call SqlImmedSel('SELECT mgdmabr  INTO :nTVMahnDM
			// FROM  mg WHERE mgarztnr = :frmMahn.nArztNr')
			// Else
			// Call SqlImmedSel('SELECT mgdmabr  INTO :nTVMahnDM
			// FROM  mg WHERE mgarztnr = 0')
			// 03.05.10 OTÄ420
			// Set nCheckMwSt = PalCheckAuslMwSt( nArztNr )
			// 14.04.14 Ä1046
			// If PalCheckAuslTA( nArztNr ) = 'EU'
			// Set frmMain.strErloeskonto = '80200'
			// Else
			// Set frmMain.strErloeskonto = '80100'
			// 18.04.11 Ä563
			// If nCheckMwSt = 0
			// Set nTAReverse = 1
			// Else
			// Set nTAReverse = 0
			// Set nDMTVMahnGeb = nMahnAnz * nTVMahnDM
			// Set nDMTVVSt = SalNumberRound(nDMTVMahnGeb * nCheckMwSt
			// * 100 / (100 + nCheckMwSt)) /100
			// Set strBuchText = 'RaZa-Mahng.' ||  SalNumberToStrX(nMahnAnz,0)
			// #16 kein leeres Buchungsdatum mehr erlauben
			// If dtMahnDat = DATETIME_Null
			// Set dtMahnDat = SalDateCurrent()
			// 08.12.06 Ä48 19% MwSt.
			// Call SqlImmedX('INSERT INTO TK
			// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
			// tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
			// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
			// VALUES (:frmMahn.nArztNr, 0, 0, :frmMahn.strBuchText, 0, 0, 0,
			// :frmMahn.dtMahnDat, 80100, 0, 0, :frmMahn.nDMTVVSt,
			// 0, 0, 0, 0, 0, :nMwSatz[1], 0, 0, :frmMahn.nDMTVMahnGeb, :frmMahn.nDMTVMahnGeb, 0)')
			// Call SqlImmedX('INSERT INTO TK
			// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
			// tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
			// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkreverse)
			// VALUES (:frmMahn.nArztNr, 0, 0, :frmMahn.strBuchText, 0, 0, 0,
			// :frmMahn.dtMahnDat, :frmMain.strErloeskonto, 0, 0, :frmMahn.nDMTVVSt,
			// 0, 0, 0, 0, 0, :nCheckMwSt, 0, 0, :frmMahn.nDMTVMahnGeb, :frmMahn.nDMTVMahnGeb, 0, :frmMahn.nTAReverse)')
			// Call SqlImmedX('INSERT INTO FI
			// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
			// VALUES (0, 16000, 16410, :frmMahn.nArztNr, :frmMahn.dtMahnDat, :frmMahn.strBuchText,
			// :frmMahn.nDMMahnGeb, 2)')
			// Set strBuchText = 'Zinsen'
			// Call SqlImmedX('INSERT INTO FI
			// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
			// VALUES (0, 16000, 16410, :frmMahn.nArztNr, :frmMahn.dtMahnDat, :frmMahn.strBuchText,
			// :frmMahn.nDMZins, 2)')
			// Set strBuchText = 'Mahngebühren'
			// Set nDMTVnetto = nDMTVMahnGeb - nDMTVVSt
			// Call SqlImmedX('INSERT INTO FI
			// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
			// VALUES (0, 16200, :frmMain.strErloeskonto, :frmMahn.nArztNr, :frmMahn.dtMahnDat, :frmMahn.strBuchText,
			// :frmMahn.nDMTVnetto, 2)')
			// If frmMahn.nDMTVVSt != 0
			// Set strBuchText = 'MwSt Haben'
			// Call SqlImmedX('INSERT INTO FI
			// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
			// VALUES (0, 16200, 18760, :frmMahn.nArztNr, :frmMahn.dtMahnDat, :frmMahn.strBuchText,
			// :frmMahn.nDMTVVSt, 2)')
			// Call SqlImmedX('DELETE FROM mv WHERE mvarztnr=:frmMahn.nArztNr')
			// Call SalStatusSetText(hWndForm,'Übergabe FiBu  Arzt-Nr. '||SalNumberToStrX(nArztNr,0))
			// Call SqlFetchNext(hSqlUM,nFetchUM)
			// Call SqlCommit( hSqlUM )
			// Call SqlCommit( hSqlUM )
			// Call SqlDisconnect(hSqlUM)
			// Call SqlImmedSel('SELECT mgdmabr  INTO :nTVMahnDM
			// FROM  mg WHERE mgarztnr = 0')
			// Call SalStatusSetText(hWndForm,'')
			// Call SalWaitCursor( FALSE )
			else if (this.strSelect == "A - MB-Anfragen drucken") 
			{
				// 29.04.05
				Int.SqlIstDa(" FROM mv WHERE mvms IS NULL OR mvms IN (1,2,3)", ref this.bExists);
				if (this.bExists) 
				{
					Sal.MessageBox(@"Dieser Programmpunkt gilt
NICHT für Ratenzahler-Mahnungen und normale Mahnungen!!!", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
				else
				{
					// Call SalMessageBox( 'Auftragskarten benötigen
					// jetzt Briefbögen !
					// Bitte einlegen...','Achtung',
					// MB_Ok|MB_IconAsterisk )
					// Set nErr = 1
					// Set strReportName = 'AUFTRKAR'
					// Call PalReport(frmMahn,'AUFTRKAR.QRP',
					// ':frmMahn.nTANr,:frmMahn.strTAN1,:frmMahn.strTAN2,:frmMahn.strTAStr,:frmMahn.strTAOrt,
					// :frmMahn.nTHNr,:frmMahn.strTHAnr, :frmMahn.strTHN1, :frmMahn.strTHN2, :frmMahn.strTHStr, :frmMahn.strTHOrt, :frmMahn.strTHLand,
					// :frmMahn.dtRechDat, :frmMahn.nRechNr,
					// :frmMahn.nDMRech, :frmMahn.nDMMahn, :frmMahn.nDMZins, :frmMahn.strSolvenzprf',
					// 'ArztNr, AName1, AName2, AStr, AOrt,
					// HalterNr, HAnr, HName1,  HName2, HStr, HOrt, HLand,
					// RechDat,  RechNr,
					// DMRech, DMMahn, DMZins, Solvenzprf',nErr)
					// LL
					dlgLlDruck.ModalDialog(App.frmMain, "MB-Anfragen.lst", "");
				}
			}
			else if (this.strSelect == "B - Mahnbescheide erfassen") 
			{
				frmMBErf.CreateWindow(this, "frmMahn", SalNumber.Null);
			}
			else if (this.strSelect == "C - MB-Drucke") 
			{
				dlgMBDruck.ModalDialog(this);
			}
			else if (this.strSelect == "D - Diskette erstellen") 
			{
				frmEDA.CreateWindow(this, "MB");
			}
			else if (this.strSelect == "E - Übergabe FiBu (Mahnbescheide)") 
			{
				if (Sys.IDYES == Sal.MessageBox("Sind MBs und alle Listen gedruckt worden ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					if (!(Int.PalFormFrei("Übergaben"))) 
					{
						Sal.MessageBox("Abschluß läuft. Übergabe nicht erlaubt !", "Achtung", Sys.MB_Ok);
						this.PostMessage(Sys.SAM_Close, 0, 0);
					}
					else
					{
						Sal.WaitCursor(true);
						Int.PalLog("ÜbFiBu MBs");
						this.SetStatusBarText(this.strSelect + " läuft ...");
						Int.SqlImmedSel(@"SELECT bastkzarzt1, bastkzabrst1, badm1, baktosoll1, baktohaben1,
  badm2, baktosoll2, baktohaben2,
 bastkzabrst3, badm3, baktosoll3, baktohaben3
INTO :frmMahn.nMwT1, :frmMahn.nMwS1, :frmMahn.nDM1, :frmMahn.nSoll1, :frmMahn.nHaben1,
:frmMahn.nDM2, :frmMahn.nSoll2, :frmMahn.nHaben2,
:frmMahn.nMw3, :frmMahn.nDM3, :frmMahn.nSoll3, :frmMahn.nHaben3
FROM ba
WHERE banr = 1");
						this.nSoll1 = this.nSoll1 * 10;
						this.nSoll2 = this.nSoll2 * 10;
						this.nSoll3 = this.nSoll3 * 10;
						this.nHaben1 = this.nHaben1 * 10;
						this.nHaben2 = this.nHaben2 * 10;
						this.nHaben3 = this.nHaben3 * 10;

						Int.SqlConnection(ref this.hSqlUM);
						// 12.03.02
						// XXXXXXXXXXXXXXXXXXXXXXXXXXXX
						this.strSelect = @"SELECT prdarztnr, prdhalternr, prdrechnr, mbdatum
INTO :frmMahn.nArztNr,  :frmMahn.nHalterNr, :frmMahn.nRg1, :frmMahn.dtMBDatum
FROM prd, mb WHERE prdnr=mbnr";
						Int.SqlHandleExec(this.hSqlUM, this.strSelect, "Fehler", ref Var.nCount);
						this.nFetchUM = this.hSqlUM.FetchNext();
						while (this.nFetchUM != Sys.FETCH_EOF) 
						{
							Int.SqlImmedSel(@"SELECT rkdmzins-rkzazins INTO :frmMahn.nDMZins FROM rk
WHERE rkarztnr = :frmMahn.nArztNr AND rkhalternr = :frmMahn.nHalterNr AND rkrechnr = :frmMahn.nRg1 AND rkdeaktiv IS NULL ");
							if (this.nDMZins > 0) 
							{
								this.strBuchText = "Zinsen (MB)";
								this.nDMZins = this.nDMZins * -1;
								// #16 kein leeres Buchungsdatum mehr erlauben
								if (this.dtMBDatum == SalDateTime.Null) 
								{
									this.dtMBDatum = SalDateTime.Current;
								}
								// 06.03.23 Ä2086
								Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
								if (this.dtMBDatum < Var.dtINIMinBuchDat) 
								{
									this.dtMBDatum = Var.dtINIMinBuchDat;
								}

								// 24.06.20 Ä1892
								if (this.dtMBDatum >= new SalDateTime(2020, 7, 1) && this.dtMBDatum <= new SalDateTime(2020, 12, 31)) 
								{
									if (this.nMwS1 == 10) 
									{
										this.nMwS1 = 1;
									}
									if (this.nMwT1 == 10) 
									{
										this.nMwT1 = 1;
									}
									// 30.06.20 Ä1892
									this.nSoll1 = Int.PalKontenMwStSenkung(this.nSoll1);
									this.nSoll2 = Int.PalKontenMwStSenkung(this.nSoll2);
									this.nSoll3 = Int.PalKontenMwStSenkung(this.nSoll3);
									this.nHaben1 = Int.PalKontenMwStSenkung(this.nHaben1);
									this.nHaben2 = Int.PalKontenMwStSenkung(this.nHaben2);
									this.nHaben3 = Int.PalKontenMwStSenkung(this.nHaben3);
								}
								else
								{
									if (this.nMwS1 == 1) 
									{
										this.nMwS1 = 10;
									}
									if (this.nMwT1 == 1) 
									{
										this.nMwT1 = 10;
									}
								}


								Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16000, 16410, :frmMahn.nArztNr, :frmMahn.dtMBDatum, :frmMahn.strBuchText,
:frmMahn.nDMZins, 2)");
							}
							Int.SqlImmedX(@"UPDATE rk SET
rkmahnstufe = 9, rkzazins=rkdmzins
WHERE rkarztnr = :frmMahn.nArztNr AND rkhalternr = :frmMahn.nHalterNr AND rkrechnr = :frmMahn.nRg1 AND rkdeaktiv IS NULL ");
							// 08.05.09
							// Set frmMain.dtHBBuchDat = SalDateCurrent()
							// If nDMZins != 0
							// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
							// VALUES(:frmMahn.nArztNr, :frmMahn.nHalterNr, :frmMahn.nRechNr, :frmMahn.dtMahnDat, \'MBZ-1\', :frmMain.dtHBBuchDat, :frmMahn.nDMZins, 16410, NULL, \'Zinsen bei MB-Antrag ausgebucht\')')


							this.nFetchUM = this.hSqlUM.FetchNext();
						}
						this.hSqlUM.Commit();
						// 10.09.07 Ä152
						// Set strSelect = 'SELECT mbarztnr, anr2, mbhalternr, mbdatum, mbgerkosten, mbnr
						// INTO :frmMahn.nArztNr, :frmMahn.nTANr2, :frmMahn.nHalterNr, :frmMahn.dtMBDatum, :frmMahn.nGerKosten, :frmMahn.nProzNr
						// FROM mb,a WHERE mbarztnr=aarztnr  ORDER by mbarztnr, mbhalternr'
						// 20.09.07 F260
						// Set strSelect = 'SELECT mbarztnr, anr2, mbhalternr, mbdatum, mbgerkosten, mbnr
						// INTO :frmMahn.nArztNr, :frmMahn.nTANr2, :frmMahn.nHalterNr, :frmMahn.dtMBDatum, :frmMahn.nGerKosten, :frmMahn.nProzNr
						// FROM mb,a,prd WHERE mbarztnr=aarztnr  AND mbnr=prdnr ORDER by mbarztnr, mbhalternr'
						// XXXXXXXXXXXXXXXXXXXXXXXXXX
						this.strSelect = @"SELECT mbarztnr, anr2, mbhalternr, mbdatum, mbgerkosten, mbnr
INTO :frmMahn.nArztNr, :frmMahn.nTANr2, :frmMahn.nHalterNr, :frmMahn.dtMBDatum, :frmMahn.nGerKosten, :frmMahn.nProzNr
FROM mb,a WHERE mbarztnr=aarztnr  AND mbnr IN (select distinct prdnr FROM prd) ORDER by mbarztnr, mbhalternr";

						Int.SqlHandleExec(this.hSqlUM, this.strSelect, "Fehler", ref Var.nCount);
						this.nFetchUM = this.hSqlUM.FetchNext();
						while (this.nFetchUM != Sys.FETCH_EOF) 
						{
							this.SetStatusBarText("Übergabe FiBu MB " + this.nArztNr.ToString(0) + "/" + this.nHalterNr.ToString(0));
							// 11.05.15 F2384
							// 03.05.10 OTÄ420
							// If PalCheckAuslMwSt( nArztNr ) = 0
							// Set nMwS1 = 0
							// Set nMw3 = 0
							// Set nMwT1 = 0
							// Else
							// Call SqlImmedSel('SELECT bastkzarzt1, bastkzabrst1, badm1, baktosoll1, baktohaben1,
							//   badm2, baktosoll2, baktohaben2,
							//  bastkzabrst3, badm3, baktosoll3, baktohaben3
							// INTO :frmMahn.nMwT1, :frmMahn.nMwS1, :frmMahn.nDM1, :frmMahn.nSoll1, :frmMahn.nHaben1,
							// :frmMahn.nDM2, :frmMahn.nSoll2, :frmMahn.nHaben2,
							// :frmMahn.nMw3, :frmMahn.nDM3, :frmMahn.nSoll3, :frmMahn.nHaben3
							// FROM ba
							// WHERE banr = 1')
							// Set nSoll1 = nSoll1 * 10
							// Set nSoll2 = nSoll2 * 10
							// Set nSoll3 = nSoll3 * 10
							// Set nHaben1 = nHaben1 * 10
							// Set nHaben2 = nHaben2 * 10
							// Set nHaben3 = nHaben3 * 10
							Int.SqlImmedSel(@"SELECT bastkzarzt1, bastkzabrst1, badm1, baktosoll1, baktohaben1,
  badm2, baktosoll2, baktohaben2,
 bastkzabrst3, badm3, baktosoll3, baktohaben3
INTO :frmMahn.nMwT1, :frmMahn.nMwS1, :frmMahn.nDM1, :frmMahn.nSoll1, :frmMahn.nHaben1,
:frmMahn.nDM2, :frmMahn.nSoll2, :frmMahn.nHaben2,
:frmMahn.nMw3, :frmMahn.nDM3, :frmMahn.nSoll3, :frmMahn.nHaben3
FROM ba
WHERE banr = 1");
							this.nSoll1 = this.nSoll1 * 10;
							this.nSoll2 = this.nSoll2 * 10;
							this.nSoll3 = this.nSoll3 * 10;
							this.nHaben1 = this.nHaben1 * 10;
							this.nHaben2 = this.nHaben2 * 10;
							this.nHaben3 = this.nHaben3 * 10;

							// 11.05.15 F2384
							if (Int.PalCheckAuslTA(this.nArztNr) == "EU") 
							{
								this.nMwS1 = 0;
								this.nMw3 = 0;
								this.nMwT1 = 0;

								App.frmMain.nErloeskonto = this.nHaben1;
								if (App.frmMain.nErloeskonto == 80100) 
								{
									App.frmMain.nErloeskonto = 80200;
								}
								else if (App.frmMain.nErloeskonto == 80110) 
								{
									App.frmMain.nErloeskonto = 80120;
								}
								else if (App.frmMain.nErloeskonto == 80900) 
								{
									App.frmMain.nErloeskonto = 80980;
								}
								else if (App.frmMain.nErloeskonto == 81200) 
								{
									App.frmMain.nErloeskonto = 81210;
								}
								else if (App.frmMain.nErloeskonto == 81300) 
								{
									App.frmMain.nErloeskonto = 81340;
								}
								else if (App.frmMain.nErloeskonto == 81310) 
								{
									App.frmMain.nErloeskonto = 81360;
								}
								else if (App.frmMain.nErloeskonto == 81700) 
								{
									App.frmMain.nErloeskonto = 81710;
								}
								else if (App.frmMain.nErloeskonto == 82000) 
								{
									App.frmMain.nErloeskonto = 82010;
								}
								else if (App.frmMain.nErloeskonto == 82200) 
								{
									App.frmMain.nErloeskonto = 82210;
								}
								else if (App.frmMain.nErloeskonto == 86000) 
								{
									App.frmMain.nErloeskonto = 86010;
								}
								this.nHaben1 = App.frmMain.nErloeskonto;

								App.frmMain.nErloeskonto = this.nHaben2;
								if (App.frmMain.nErloeskonto == 80100) 
								{
									App.frmMain.nErloeskonto = 80200;
								}
								else if (App.frmMain.nErloeskonto == 80110) 
								{
									App.frmMain.nErloeskonto = 80120;
								}
								else if (App.frmMain.nErloeskonto == 80900) 
								{
									App.frmMain.nErloeskonto = 80980;
								}
								else if (App.frmMain.nErloeskonto == 81200) 
								{
									App.frmMain.nErloeskonto = 81210;
								}
								else if (App.frmMain.nErloeskonto == 81300) 
								{
									App.frmMain.nErloeskonto = 81340;
								}
								else if (App.frmMain.nErloeskonto == 81310) 
								{
									App.frmMain.nErloeskonto = 81360;
								}
								else if (App.frmMain.nErloeskonto == 81700) 
								{
									App.frmMain.nErloeskonto = 81710;
								}
								else if (App.frmMain.nErloeskonto == 82000) 
								{
									App.frmMain.nErloeskonto = 82010;
								}
								else if (App.frmMain.nErloeskonto == 82200) 
								{
									App.frmMain.nErloeskonto = 82210;
								}
								else if (App.frmMain.nErloeskonto == 86000) 
								{
									App.frmMain.nErloeskonto = 86010;
								}
								this.nHaben2 = App.frmMain.nErloeskonto;

								App.frmMain.nErloeskonto = this.nHaben3;
								if (App.frmMain.nErloeskonto == 80100) 
								{
									App.frmMain.nErloeskonto = 80200;
								}
								else if (App.frmMain.nErloeskonto == 80110) 
								{
									App.frmMain.nErloeskonto = 80120;
								}
								else if (App.frmMain.nErloeskonto == 80900) 
								{
									App.frmMain.nErloeskonto = 80980;
								}
								else if (App.frmMain.nErloeskonto == 81200) 
								{
									App.frmMain.nErloeskonto = 81210;
								}
								else if (App.frmMain.nErloeskonto == 81300) 
								{
									App.frmMain.nErloeskonto = 81340;
								}
								else if (App.frmMain.nErloeskonto == 81310) 
								{
									App.frmMain.nErloeskonto = 81360;
								}
								else if (App.frmMain.nErloeskonto == 81700) 
								{
									App.frmMain.nErloeskonto = 81710;
								}
								else if (App.frmMain.nErloeskonto == 82000) 
								{
									App.frmMain.nErloeskonto = 82010;
								}
								else if (App.frmMain.nErloeskonto == 82200) 
								{
									App.frmMain.nErloeskonto = 82210;
								}
								else if (App.frmMain.nErloeskonto == 86000) 
								{
									App.frmMain.nErloeskonto = 86010;
								}
								this.nHaben3 = App.frmMain.nErloeskonto;

							}
							else
							{
								if (this.dtMBDatum >= new SalDateTime(2020, 7, 1) && this.dtMBDatum <= new SalDateTime(2020, 12, 31)) 
								{
									if (this.nMwT1 == 10) 
									{
										this.nMwT1 = 1;
									}
									if (this.nMwS1 == 10) 
									{
										this.nMwS1 = 1;
									}
									if (this.nMw3 == 10) 
									{
										this.nMw3 = 1;
									}
									// 30.06.20 Ä1892
									this.nSoll1 = Int.PalKontenMwStSenkung(this.nSoll1);
									this.nSoll2 = Int.PalKontenMwStSenkung(this.nSoll2);
									this.nSoll3 = Int.PalKontenMwStSenkung(this.nSoll3);
									this.nHaben1 = Int.PalKontenMwStSenkung(this.nHaben1);
									this.nHaben2 = Int.PalKontenMwStSenkung(this.nHaben2);
									this.nHaben3 = Int.PalKontenMwStSenkung(this.nHaben3);
									this.nDM1 = (this.nDM1 * 116 / 119 * 100).Round() / 100;
									this.nDM3 = (this.nDM3 * 116 / 119 * 100).Round() / 100;
								}
							}

							this.nDM2 = this.nGerKosten;
							// Rechnungen auf MS 9 setzen
							// If nRg1 != NUMBER_Null
							// Call SqlImmedSel('SELECT rkdmzins-rkzazins INTO :frmMahn.nDMZins FROM rk
							// WHERE rkarztnr IN (:frmMahn.nArztNr, :frmMahn.nTANr2) AND rkhalternr = :frmMahn.nHalterNr AND rkrechnr = :frmMahn.nRg1')
							// If nDMZins > 0
							// Set strBuchText = 'Zinsen (MB)'
							// Set nDMZins = nDMZins * -1
							// Call SqlImmedX('INSERT INTO FI
							// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
							// VALUES (0, 16000, 16410, :frmMahn.nArztNr, :frmMahn.dtMBDatum, :frmMahn.strBuchText,
							// :frmMahn.nDMZins, 2)')
							// Call SqlImmedX('UPDATE rk SET
							// rkmahnstufe = 9, rkzazins=rkdmzins
							// WHERE rkarztnr IN (:frmMahn.nArztNr, :frmMahn.nTANr2) AND rkhalternr = :frmMahn.nHalterNr AND rkrechnr = :frmMahn.nRg1')
							// If nRg2 != NUMBER_Null
							// Call SqlImmedSel('SELECT rkdmzins-rkzazins  INTO :frmMahn.nDMZins  FROM rk
							// WHERE rkarztnr IN (:frmMahn.nArztNr, :frmMahn.nTANr2) AND rkhalternr = :frmMahn.nHalterNr AND rkrechnr = :frmMahn.nRg2')
							// If nDMZins > 0
							// Set strBuchText = 'Zinsen (MB)'
							// Set nDMZins = nDMZins * -1
							// Call SqlImmedX('INSERT INTO FI
							// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
							// VALUES (0, 16000, 16410, :frmMahn.nArztNr, :frmMahn.dtMBDatum, :frmMahn.strBuchText,
							// :frmMahn.nDMZins, 2)')
							// Call SqlImmedX('UPDATE rk SET
							// rkmahnstufe = 9, rkzazins=rkdmzins
							// WHERE rkarztnr IN (:frmMahn.nArztNr, :frmMahn.nTANr2) AND rkhalternr = :frmMahn.nHalterNr AND rkrechnr = :frmMahn.nRg2')
							// If nRg3 != NUMBER_Null
							// Call SqlImmedSel('SELECT rkdmzins-rkzazins  INTO :frmMahn.nDMZins  FROM rk
							// WHERE rkarztnr IN (:frmMahn.nArztNr, :frmMahn.nTANr2) AND rkhalternr = :frmMahn.nHalterNr AND rkrechnr = :frmMahn.nRg3')
							// If nDMZins > 0
							// Set strBuchText = 'Zinsen (MB)'
							// Set nDMZins = nDMZins * -1
							// Call SqlImmedX('INSERT INTO FI
							// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
							// VALUES (0, 16000, 16410, :frmMahn.nArztNr, :frmMahn.dtMBDatum, :frmMahn.strBuchText,
							// :frmMahn.nDMZins, 2)')
							// Call SqlImmedX('UPDATE rk SET
							// rkmahnstufe = 9, rkzazins=rkdmzins
							// WHERE rkarztnr IN (:frmMahn.nArztNr, :frmMahn.nTANr2) AND rkhalternr = :frmMahn.nHalterNr AND rkrechnr = :frmMahn.nRg3')
							// If nRg4 != NUMBER_Null
							// Call SqlImmedSel('SELECT rkdmzins-rkzazins  INTO :frmMahn.nDMZins  FROM rk
							// WHERE rkarztnr IN (:frmMahn.nArztNr, :frmMahn.nTANr2) AND rkhalternr = :frmMahn.nHalterNr AND rkrechnr = :frmMahn.nRg4')
							// If nDMZins > 0
							// Set strBuchText = 'Zinsen (MB)'
							// Set nDMZins = nDMZins * -1
							// Call SqlImmedX('INSERT INTO FI
							// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
							// VALUES (0, 16000, 16410, :frmMahn.nArztNr, :frmMahn.dtMBDatum, :frmMahn.strBuchText,
							// :frmMahn.nDMZins, 2)')
							// Call SqlImmedX('UPDATE rk SET
							// rkmahnstufe = 9, rkzazins=rkdmzins
							// WHERE rkarztnr IN (:frmMahn.nArztNr, :frmMahn.nTANr2) AND rkhalternr = :frmMahn.nHalterNr AND rkrechnr = :frmMahn.nRg4')
							// If nRg5 != NUMBER_Null
							// Call SqlImmedSel('SELECT rkdmzins-rkzazins  INTO :frmMahn.nDMZins  FROM rk
							// WHERE rkarztnr IN (:frmMahn.nArztNr, :frmMahn.nTANr2) AND rkhalternr = :frmMahn.nHalterNr AND rkrechnr = :frmMahn.nRg5')
							// If nDMZins > 0
							// Set strBuchText = 'Zinsen (MB)'
							// Set nDMZins = nDMZins * -1
							// Call SqlImmedX('INSERT INTO FI
							// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
							// VALUES (0, 16000, 16410, :frmMahn.nArztNr, :frmMahn.dtMBDatum, :frmMahn.strBuchText,
							// :frmMahn.nDMZins, 2)')
							// Call SqlImmedX('UPDATE rk SET
							// rkmahnstufe = 9, rkzazins=rkdmzins
							// WHERE rkarztnr IN (:frmMahn.nArztNr, :frmMahn.nTANr2) AND rkhalternr = :frmMahn.nHalterNr AND rkrechnr = :frmMahn.nRg5')
							// If nRg6 != NUMBER_Null
							// Call SqlImmedSel('SELECT rkdmzins-rkzazins  INTO :frmMahn.nDMZins  FROM rk
							// WHERE rkarztnr IN (:frmMahn.nArztNr, :frmMahn.nTANr2) AND rkhalternr = :frmMahn.nHalterNr AND rkrechnr = :frmMahn.nRg6')
							// If nDMZins > 0
							// Set strBuchText = 'Zinsen (MB)'
							// Set nDMZins = nDMZins * -1
							// Call SqlImmedX('INSERT INTO FI
							// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
							// VALUES (0, 16000, 16410, :frmMahn.nArztNr, :frmMahn.dtMBDatum, :frmMahn.strBuchText,
							// :frmMahn.nDMZins, 2)')
							// Call SqlImmedX('UPDATE rk SET
							// rkmahnstufe = 9, rkzazins=rkdmzins
							// WHERE rkarztnr IN (:frmMahn.nArztNr, :frmMahn.nTANr2) AND rkhalternr = :frmMahn.nHalterNr AND rkrechnr = :frmMahn.nRg6')

							// #16 kein leeres Buchungsdatum mehr erlauben
							if (this.dtMBDatum == SalDateTime.Null) 
							{
								this.dtMBDatum = SalDateTime.Current;
							}
							// 06.03.23 Ä2086
							Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
							if (this.dtMBDatum < Var.dtINIMinBuchDat) 
							{
								this.dtMBDatum = Var.dtINIMinBuchDat;
							}
							// Aktionsdatei
							Int.PalAktionDatum(this.dtMBDatum, this.nArztNr, this.nHalterNr, SalNumber.Null, "MB", "MB", SalNumber.Null, SalNumber.Null, this.nDM1 + this.nDM2 + this.nDM3, 0, this.nProzNr, SalNumber.Null, "");


							// Tierarzt-Buchhaltung (Kontoauszug)
							this.nBuchMwSt = (this.nDM1 * Var.nMwSatz[this.nMwT1] * 100 / (100 + Var.nMwSatz[this.nMwT1])).Round() / 100;
							// 28.05.21 Ä1962
							// Set strBuchText = 'MB ' || SalNumberToStrX(nArztNr,0) || '/' || SalNumberToStrX(nHalterNr,0)
							this.strBuchText = "Mahnbescheid " + this.nArztNr.ToString(0) + "/" + this.nHalterNr.ToString(0);
							// 09.04.10 OTF419 RechNr raus :frmMahn.nRg1 -> 0
							// 04.10.23 Ä2134 + tkfall
							// 20.11.23 Ä2144 + tkkontocode
							Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm,  tksoll, tkhaben, tkfall, tkkontocode)
VALUES (:frmMahn.nArztNr, 0, 0, :frmMahn.strBuchText,
:frmMahn.nHalterNr, 0, 0, :frmMahn.dtMBDatum,
:frmMahn.nHaben1, 0,0,:frmMahn.nBuchMwSt, 0,0,0,0,0,
:nMwSatz[nMwT1], 0, 0, :frmMahn.nDM1, :frmMahn.nDM1, 0, 1, 'BA.MB-')");
							if (this.nDM2 != 0) 
							{
								// 04.10.23 Ä2134 + tkfall
								Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkfall, tkkontocode)
VALUES (:frmMahn.nArztNr, 0, 0, :frmMahn.strBuchText,
:frmMahn.nHalterNr, 0, 0, :frmMahn.dtMBDatum,
:frmMahn.nHaben2, 0,0,0, 0,0,0,0,0,
0, 0, 0, :frmMahn.nDM2, :frmMahn.nDM2, 0, 1, 'BA.MB-')");
							}
							// KHK-FiBu
							// 28.05.21 Ä1962
							// Set strBuchText = 'MB ' || SalNumberToStrX(nArztNr,0) || '/' || SalNumberToStrX(nHalterNr,0)
							this.strBuchText = "Mahnbescheid " + this.nArztNr.ToString(0) + "/" + this.nHalterNr.ToString(0);
							// a)
							this.nBuchMwSt = (this.nDM1 * Var.nMwSatz[this.nMwS1] * 100 / (100 + Var.nMwSatz[this.nMwS1])).Round() / 100;
							this.nDiverse = this.nDM1 - this.nBuchMwSt;
							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, :frmMahn.nSoll1, :frmMahn.nHaben1, 0,
:frmMahn.dtMBDatum, :frmMahn.strBuchText, :frmMahn.nDiverse, 4)");
							// 30.06.20 Ä1892
							Var.nMwStSenkung = 17760;
							if (this.dtMBDatum >= new SalDateTime(2020, 7, 1) && this.dtMBDatum <= new SalDateTime(2020, 12, 31)) 
							{
								Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
							}
							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, :frmMahn.nSoll1, :nMwStSenkung, 0,
:frmMahn.dtMBDatum, :frmMahn.strBuchText, :frmMahn.nBuchMwSt, 4)");
							// b)
							this.nDiverse = this.nDM2;
							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, :frmMahn.nSoll2, :frmMahn.nHaben2, 0,
:frmMahn.dtMBDatum, :frmMahn.strBuchText, :frmMahn.nDiverse, 4)");
							// c)
							this.nBuchMwSt = (this.nDM3 * Var.nMwSatz[this.nMw3] * 100 / (100 + Var.nMwSatz[this.nMw3])).Round() / 100;
							this.nDiverse = this.nDM3 - this.nBuchMwSt;
							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, :frmMahn.nSoll3, :frmMahn.nHaben3, 0,
:frmMahn.dtMBDatum, :frmMahn.strBuchText, :frmMahn.nDiverse, 4)");
							// 30.06.20 Ä1892
							Var.nMwStSenkung = 17760;
							if (this.dtMBDatum >= new SalDateTime(2020, 7, 1) && this.dtMBDatum <= new SalDateTime(2020, 12, 31)) 
							{
								Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
							}
							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, :frmMahn.nSoll3, :nMwStSenkung, 0,
:frmMahn.dtMBDatum, :frmMahn.strBuchText, :frmMahn.nBuchMwSt, 4)");
							// Rechnung 999990
							// 11.12.06 Ä48 19% MwSt. NOCH ÄNDERN
							// 01.07.20 Ä1892
							App.frmMain.nRechSammler = 999989 + App.frmMain.nMwSatzDef;

							Int.SqlIstDa(@" FROM rk
WHERE rkarztnr = :frmMahn.nArztNr AND rkhalternr = :frmMahn.nHalterNr AND rkrechnr = :frmMain.nRechSammler", ref this.bExists);
							if (this.bExists) 
							{
								Int.SqlImmedX(@"UPDATE rk SET
rkkzzahl = 0, rkdeaktiv = NULL,
rkrechdat = :frmMahn.dtMBDatum,
rkfaelldat = :frmMahn.dtMBDatum,
rkdmleis = rkdmleis + :frmMahn.nDM1,
rkdmarzn = rkdmarzn + :frmMahn.nDM2,
rkmbdmopl = rkmbdmopl + :frmMahn.nDM3
WHERE rkarztnr = :frmMahn.nArztNr AND rkhalternr = :frmMahn.nHalterNr AND rkrechnr = :frmMain.nRechSammler");
							}
							else
							{
								this.strBuchText = "MB-Sammler " + Var.nMwSatz[App.frmMain.nMwSatzDef].ToString(0) + "%";
								Int.SqlImmedX(@"INSERT INTO RK (RKARZTNR, RKHALTERNR, RKRECHNR,
RKBUCHTEXT, RKRECHDAT, RKFAELLDAT, RKDMLEIS, RKDMARZN,  RKDMMAHN, RKDMZINS, RKMBDMOPL,
RKVERJAEHR,RKZALEIS,RKZAARZN,RKZAMAHN, RKZAZINS, RKMBZAOPL, RKKZZAHL,RKKZ, RKMAHNSTUFE)
VALUES(:frmMahn.nArztNr, :frmMahn.nHalterNr, :frmMain.nRechSammler,
:frmMahn.strBuchText, :frmMahn.dtMBDatum, :frmMahn.dtMBDatum, :frmMahn.nDM1, :frmMahn.nDM2,0,0,:frmMahn.nDM3,
NULL,0, 0,0,0,0,0,2,0)");
							}
							// 08.05.09
							// Set frmMain.dtHBBuchDat = SalDateCurrent()
							// If nDM1 != 0
							// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
							// VALUES(:frmMahn.nArztNr, :frmMahn.nHalterNr, 999999, :frmMahn.dtMBDatum, \'MBa\', :frmMain.dtHBBuchDat, :frmMahn.nDM1, 16410, NULL, \'MB-Gebühr a\')')
							// If nDM2 != 0
							// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
							// VALUES(:frmMahn.nArztNr, :frmMahn.nHalterNr, 999999, :frmMahn.dtMBDatum, \'MBb\', :frmMain.dtHBBuchDat, :frmMahn.nDM2, 16410, NULL, \'MB-Gebühr b\')')
							// If nDM3 != 0
							// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
							// VALUES(:frmMahn.nArztNr, :frmMahn.nHalterNr, 999999, :frmMahn.dtMBDatum, \'MBa\', :frmMain.dtHBBuchDat, :frmMahn.nDM3, 16410, NULL, \'MB-Gebühr c\')')

							// Update PR 09.04.99
							Int.SqlImmed(@"UPDATE pr SET prdma = :frmMahn.nDM1, prdmb = :frmMahn.nDM2, prdmc = :frmMahn.nDM3
WHERE prnr = :frmMahn.nProzNr");

							this.nFetchUM = this.hSqlUM.FetchNext();
							this.hSqlUM.Commit();
						}
						this.hSqlUM.Commit();
						this.hSqlUM.Disconnect();

						Int.SqlImmedX("DELETE FROM MB");
						Sal.WaitCursor(false);
						this.SetStatusBarText(" ");
					}
				}
			}
			else if (this.strSelect == "N - Mitglieder mit Negativsaldo ohne Ausgleich") 
			{
				frmNegativsalden.CreateWindow(this);
			}
			else if (this.strSelect == "P - Mahnprotokoll Tierärzte") 
			{
				if (!(Int.PalFormFrei("Übergaben"))) 
				{
					Sal.MessageBox("Abschluß läuft. Protokolldruck nicht erlaubt !", "Achtung", Sys.MB_Ok);
				}
				else
				{
					// Set nErr = 1
					// Set strReportName = 'MAHNPROT'
					// Call PalReport(frmMahn,'MAHNPROT.QRP',
					// ':frmMahn.nTANr,:frmMahn.strTAN1,:frmMahn.strTAN2,:frmMahn.strTAStr,:frmMahn.strTAOrt,
					// :frmMahn.nTHNr,:frmMahn.strTHN1,
					// :frmMahn.dtRechDat, :frmMahn.dtMahnDat, :frmMahn.nRechNr,
					// :frmMahn.nDMRech, :frmMahn.nDMMahn, :frmMahn.nDMZins,
					// :frmMahn.nMS',
					// 'ArztNr, AName1, AName2, AStr, AOrt,
					// HalterNr, HName1,
					// RechDat, MahnDat, RechNr,
					// DMRech, DMMahn, DMZins, MS',nErr)
					frmDruMahnProtokoll.CreateWindow(this);
				}
			}
			else if (this.strSelect == "X - Tagebucheinträge erfassen für MBs") 
			{
				frmMBAktiErf.CreateWindow(this);
			}
			else if (this.strSelect == "Z - Nachdruck MB-Deckblatt") 
			{
				// 04.08.15 Ä1237
				dlgLlDruck.ModalDialog(App.frmMain, "MB-Deckblatt.lst", "ND");
			}
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbMahnAktionen_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.lbMahnAktionen.AddListItem("1 - Mahntexte");
			this.lbMahnAktionen.AddListItem("2 - Mahnvorschlag erstellen");
			this.lbMahnAktionen.AddListItem("3 - Mahnvorschlag ändern");
			this.lbMahnAktionen.AddListItem("4a - Mahnungen speichern");
			this.lbMahnAktionen.AddListItem("4b - Mahnungen drucken");
			// Call SalListAdd( lbMahnAktionen, '4c - RaZa-Mahnungen drucken' )
			this.lbMahnAktionen.AddListItem("6 - TA-Etiketten aus Vorschlag");
			this.lbMahnAktionen.AddListItem("7 - Summenblatt drucken");
			this.lbMahnAktionen.AddListItem("9 - Übergabe FiBu");
			// Call SalListAdd( lbMahnAktionen, '9b - Übergabe Ratenzahler-Mahnungen' )
			this.lbMahnAktionen.AddListItem("--------------------------------------------------------");
			this.lbMahnAktionen.AddListItem("A - MB-Anfragen drucken");
			this.lbMahnAktionen.AddListItem("B - Mahnbescheide erfassen");
			this.lbMahnAktionen.AddListItem("C - MB-Drucke");
			this.lbMahnAktionen.AddListItem("D - Diskette erstellen");
			this.lbMahnAktionen.AddListItem("E - Übergabe FiBu (Mahnbescheide)");
			this.lbMahnAktionen.AddListItem("--------------------------------------------------------");
			this.lbMahnAktionen.AddListItem("N - Mitglieder mit Negativsaldo ohne Ausgleich");
			this.lbMahnAktionen.AddListItem("P - Mahnprotokoll Tierärzte");
			this.lbMahnAktionen.AddListItem("X - Tagebucheinträge erfassen für MBs");
			this.lbMahnAktionen.AddListItem("Z - Nachdruck MB-Deckblatt");
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
	}
}
