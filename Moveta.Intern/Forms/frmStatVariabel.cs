// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmStatVariabel : FCRibbonFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlStat = SalSqlHandle.Null;
		public SalFileHandle hDisk = SalFileHandle.Null;
		public SalBoolean bOk = false;
		public SalString strDateiName = "";
		public SalString strDateiPfad = "";
		public SalNumber nErr = 0;
		public SalNumber nBytes = 0;
		public SalNumber nColor = 0;
		public SalNumber nColor1 = 0;
		public MTblPrintParams PrintParams = new MTblPrintParams();
		public SalArray<SalString> strPrinters = new SalArray<SalString>();
		public SalNumber nAnz = 0;
		public SalNumber nOff = 0;
		public SalNumber nColorR = 0;
		public SalNumber nColorG = 0;
		public SalNumber nColorB = 0;
		public SalNumber nResult = 0;
		public SalString strDevice = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmStatVariabel()
		{
			// Assign global reference.
			App.frmStatVariabel = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
			//FC:FINAL: create menu as RibbonBar
			this.CreateRibbon();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmStatVariabel CreateWindow(Control owner)
		{
			frmStatVariabel frm = new frmStatVariabel();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmStatVariabel FromHandle(SalWindowHandle handle)
		{
			return ((frmStatVariabel)SalWindow.FromHandle(handle, typeof(frmStatVariabel)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalDateiWahl()
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(4);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strArExtensions[0] = "Statements - *.sel";
				strArExtensions[1] = "*.sel";
				strArExtensions[2] = "alle Dateien - *.*";
				strArExtensions[3] = "*.*";
				xOK = Sal.DlgOpenFile(this, "SELECT-Statements", strArExtensions, 4, ref nIndex, ref strDateiName, ref strDateiPfad);
				if (xOK) 
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalDateiSpeich()
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(4);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strArExtensions[0] = "Statements - *.sel";
				strArExtensions[1] = "*.sel";
				strArExtensions[2] = "alle Dateien - *.*";
				strArExtensions[3] = "*.*";
				xOK = Sal.DlgSaveFile(this, "SELECT-Statements", strArExtensions, 4, ref nIndex, ref strDateiName, ref strDateiPfad);
				if (xOK) 
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalResizeForm()
		{
			#region Local Variables
			SalNumber nPWidth = 0;
			SalNumber nPHeight = 0;
			SalNumber nFWidth = 0;
			SalNumber nFHeight = 0;
			SalNumber nX = 0;
			SalNumber nY = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				// Call PalLogToFile( 'KRF01', 0 )
				this.GetSize(ref nPWidth, ref nPHeight);
				tblResult.GetLocation(ref nX, ref nY);
				// Call PalLogToFile( 'KRF02', 0 )

				nFWidth = nPWidth - 0.7m;
				nFHeight = nPHeight - nY - 2.2m;

				tblResult.SetSize(nFWidth, nFHeight);

				Sal.GetWindowSize(mlSelect, ref nX, ref nY);
				Sal.SetWindowSize(mlSelect, nFWidth, nY);
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmStatVariabel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmStatVariabel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmStatVariabel_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmStatVariabel_OnSAM_Close(sender, e);
					break;
				
				case Const.WM_SIZE:
					this.frmStatVariabel_OnWM_SIZE(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmStatVariabel_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 10.02.09 OTÄ93
			Int.PalGetSize(this, true);

			// 12.04.02
			this.nColor = this.GetWindowColor(Sys.COLOR_IndexWindow);
			Sal.ColorToRGB(this.nColor, ref this.nColorR, ref this.nColorG, ref this.nColorB);
			this.nColor1 = Int.PalAddColor(this.nColorR + 64, this.nColorG + 64, this.nColorB + 64);
			this.mlSelect.SetWindowColor(Sys.COLOR_IndexWindow, this.nColor1);
			this.tblResult.SetWindowColor(Sys.COLOR_IndexWindow, this.nColor1);

			Int.SqlConnection(ref this.hSqlStat);
			// 05.04.17
			this.SetStatusBarText("F1 = Hilfe");

			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmStatVariabel_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.hSqlStat) 
			{
				this.hSqlStat.Disconnect();
			}
			// 10.02.09 OTÄ93
			Int.PalSetSize(this);

			#endregion
		}
		
		/// <summary>
		/// WM_SIZE event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmStatVariabel_OnWM_SIZE(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 4)  // SIZE_MAXHIDE Message is sent to all pop-up windows when some other window is maximized.
			{
			}
			else if (Sys.wParam == 3)  // SIZE_MAXSHOW Message is sent to all pop-up windows when some other window has been restored to its former size.
			{
			}
			else if (Sys.wParam == 1)  // SIZE_MINIMIZED The window has been minimized.
			{
			}
			else
			{
				// Call SalMessageBeep( 0 )
				this.PalResizeForm();
			}
			#endregion
		}
		
		/// <summary>
		/// pbOeffne WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOeffne_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOeffne_OnSAM_Click(sender, e);
					break;
				
				// On SAM_Create
				
				// Return PalToolTipSetText( hWndItem
				
				// ,
				
				// 	"bereits gespeicherte Abfrage laden" )
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOeffne_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.PalDateiWahl()) 
			{
				this.hDisk.Open(this.strDateiPfad, (Sys.OF_Read | Sys.OF_Text));
				this.mlSelect.Text = this.hDisk.Read(32000);
				this.hDisk.Close();
			}
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
				
				// On SAM_Create
				
				// Return PalToolTipSetText( hWndItem
				
				// ,
				
				// 	"Abfrage ausführen" )
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (((SalString)this.mlSelect.Text).Left(6).ToUpper() == "SELECT") 
			{
				this.bOk = this.tblResult.Populate(this.hSqlStat, this.mlSelect.Text, Sys.TBL_FillNormal);
				if (!(this.bOk)) 
				{
					Sal.MessageBox("Ungültige Abfrage !", "Achtung", Sys.MB_Ok);
				}
				else
				{
					// 25.08.16
					// Call VisTblAutoSizeColumn(tblResult, hWndNULL)
					MT.MTbl.AutoSizeColumn(this.tblResult, Sys.hWndNULL, MT.MTbl.MTASC_ALLROWS);
				}
			}
			else
			{
				Sal.MessageBox(@"Nur SELECT-Statements sind gültig !
Bite als erstes Wort SELECT eingeben.", "Achtung", Sys.MB_Ok);
			}
			#endregion
		}
		
		/// <summary>
		/// pbSpeich WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSpeich_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSpeich_OnSAM_Click(sender, e);
					break;
				
				// On SAM_Create
				
				// Return PalToolTipSetText( hWndItem
				
				// ,
				
				// 	"Abfrage unter einem Namen speichern" )
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSpeich_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.PalDateiSpeich()) 
			{
				if (this.hDisk.Open(this.strDateiPfad, Sys.OF_Create)) 
				{
					this.hDisk.Close();
					if (this.hDisk.Open(this.strDateiPfad, Sys.OF_Write)) 
					{
						this.nBytes = this.hDisk.Write(this.mlSelect.Text, 32757);
						if (this.nBytes >= 0) 
						{
							this.hDisk.Close();
						}
					}
					else
					{
						Sal.MessageBox("Die Datei " + this.strDateiPfad + "kann nicht geöffnet werden !", "Fehler", Sys.MB_Ok);
					}
				}
				else
				{
					Sal.MessageBox("Die Datei " + this.strDateiPfad + "kann nicht erstellt werden !", "Fehler", Sys.MB_Ok);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// tblResult WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblResult_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblResult_OnSAM_Create(sender, e);
					break;
				
				case MT.MTbl.MTM_MouseEnterItem:
					this.tblResult_OnMTM_MouseEnterItem(sender, e);
					break;
				
				case MT.MTbl.MTM_MouseLeaveItem:
					this.tblResult_OnMTM_MouseLeaveItem(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblResult_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 25.06.13
			// Call MTblSubClass( hWndItem )
			// Call MTblSetAltRowBackColors( hWndItem, FALSE, COLOR_White, 0xFFFFD8 )
			Int.PalPrepareMTbl(this.tblResult, 0xbfffbf);

			// Return PalToolTipSetText( hWndItem
			// ,
			// 	"Ergenis-Tabelle" )
			#endregion
		}
		
		/// <summary>
		/// MTM_MouseEnterItem event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblResult_OnMTM_MouseEnterItem(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			MT.MTbl.GetItem(this.tblResult, Sys.lParam, Var.objItem);
			if (Var.objItem.Type == MT.MTbl.MTBL_ITEM_ROW) 
			{
				Ext.MTblSetHighlighted(Var.objItem, true);
			}
			#endregion
		}
		
		/// <summary>
		/// MTM_MouseLeaveItem event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblResult_OnMTM_MouseLeaveItem(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			MT.MTbl.GetItem(this.tblResult, Sys.lParam, Var.objItem);
			if (Var.objItem.Type == MT.MTbl.MTBL_ITEM_ROW) 
			{
				Ext.MTblSetHighlighted(Var.objItem, false);
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalDestroyWindow (hWndForm)
			this.SendMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// pbDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDruck_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDruck_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;


			// 13.11.13
			// Set nErr = 1
			// Set hWndReport = SalCreateWindow (frmReport, hWndNULL,'Statistik')
			// Call SalReportTableCreate('TEST', tblResult, nErr)
			// Call SalReportTableView(tblResult, frmReport, 'TEST', nErr)
			// 08.09.06 Aufgabe 24
			// Call SalBringWindowToTop(hWndReport)
			this.PrintParams.Init();
			this.PrintParams.DocName = "Abfrageergebnis vom " + Int.PalDateToStr(SalDateTime.Current);
			this.PrintParams.Orientation = MT.MTbl.MTP_OR_LANDSCAPE;
			// Set strDevice = MTblPrintGetDefPrinterName(  )
			this.nResult = this.lbPrinters.GetListSelectedIndex();
			if (this.nResult == Sys.LB_Err) 
			{
				this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			}
			else
			{
				this.strDevice = this.lbPrinters.GetListItemText(this.nResult);
			}
			this.PrintParams.PrinterName = this.strDevice;
			// 07.11.13 F1760
			this.PrintParams.Language = MT.MTbl.MTP_LNG_GERMAN;

			MT.MTbl.Print(this.tblResult, this.PrintParams);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nAnz = MT.MTbl.PrintGetPrinterNames(this.strPrinters);
			this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			this.nOff = -1;
			this.nResult = 0;
			while (this.nResult < this.nAnz) 
			{
				this.lbPrinters.AddListItem(this.strPrinters[this.nResult]);
				if (this.strPrinters[this.nResult] == this.strDevice) 
				{
					this.nOff = this.nResult;
				}
				this.nResult = this.nResult + 1;
			}
			if (this.nOff >= 0) 
			{
				this.lbPrinters.SetListSelectedIndex(this.nOff);
			}

			// Return PalToolTipSetText( hWndItem
			// ,
			// 	"Tabelle mit Abfrage-Ergebnis drucken" )
			#endregion
		}
		
		/// <summary>
		/// pbExport WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbExport_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbExport_OnSAM_Click(sender, e);
					break;
				
				// On SAM_Create
				
				// Return PalToolTipSetText( hWndItem, "Tabelle exportieren" )
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbExport_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.obExcel.Checked) 
			{
				MT.MTbl.ExportToExcel(this.tblResult, MT.MTbl.MTE_LNG_GERMAN, SalString.Null, ((((MT.MTbl.MTE_EXCEL_NEW_INSTANCE | MT.MTbl.MTE_EXCEL_STRING_COLS_AS_TEXT) | Const.MTE_EXCEL_NO_CLIPBOARD) | Const.MTE_EXCEL_NO_AUTO_FIT_COL) | Const.MTE_EXCEL_NO_AUTO_FIT_ROW), 
					(MT.MTbl.MTE_COL_HEADERS | MT.MTbl.MTE_SHOW_STATUS), 0, Sys.ROW_Hidden, Sys.COL_Visible, 0);
			}
			else
			{
				Ext.MTblExportToOOCalc(this.tblResult, MT.MTbl.MTE_LNG_GERMAN, SalString.Null, (Const.MTE_OOCALC_NEW_WORKBOOK | Const.MTE_OOCALC_STRING_COLS_AS_TEXT), (MT.MTbl.MTE_COL_HEADERS | MT.MTbl.MTE_SHOW_STATUS), 0, Sys.ROW_Hidden, Sys.COL_Visible, 
					0);
			}
			#endregion
		}
		#endregion
		
		#region tblResult
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblResultTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmStatVariabel _frmStatVariabel = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblResultTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmStatVariabel frmStatVariabel
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmStatVariabel == null) 
					{
						_frmStatVariabel = (frmStatVariabel)this.FindForm();
					}
					return _frmStatVariabel;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblResultTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblResultTableWindow)SalWindow.FromHandle(handle, typeof(tblResultTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
