// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="nArztNr"></param>
	/// <param name="nHalterNr"></param>
	/// <param name="nRechNr"></param>
	/// <param name="strEmpf"></param>
	/// <param name="lsText"></param>
	/// <param name="dtDatum"></param>
	/// <param name="strRA0"></param>
	/// <param name="strRA1"></param>
	/// <param name="strRA2"></param>
	/// <param name="strRA3"></param>
	/// <param name="strRA4"></param>
	/// <param name="bBrief"></param>
	public partial class frmBriefVari : SalFormWindow
	{
		#region Window Parameters
		public SalNumber nArztNr;
		public SalNumber nHalterNr;
		public SalNumber nRechNr;
		public SalString strEmpf;
		public SalString lsText;
		public SalDateTime dtDatum;
		public SalString strRA0;
		public SalString strRA1;
		public SalString strRA2;
		public SalString strRA3;
		public SalString strRA4;
		public SalBoolean bBrief;
		#endregion
		
		#region Window Variables
		public SalSqlHandle hSqlAktiErf = SalSqlHandle.Null;
		public SalBoolean bOk = false;
		public SalBoolean bJa = false;
		public SalNumber nArztNr2 = 0;
		public SalNumber nKZPraxArt = 0;
		public SalNumber nBatchBuch = 0;
		public SalString strTyp = "";
		public SalString strTATi = "";
		public SalString strTAN1 = "";
		public SalString strTAN2 = "";
		public SalString strTAStr = "";
		public SalString strTAOrt = "";
		public SalString strTALand = "";
		public SalString strTAAnrede = "";
		public SalString strTHN1 = "";
		public SalString strTHN2 = "";
		public SalString strTHStr = "";
		public SalString strTHOrt = "";
		public SalString strTHLand = "";
		public SalString strTHAnrede = "";
		public SalString strEWA = "";
		public SalString strZei = "";
		public SalString strName = "";
		public SalString strTHVN = "";
		public SalString strTHNN = "";
		public SalString strTHTi = "";
		public SalString strVermerk = "";
		public SalNumber nPRNr = 0;
		public SalDateTime dtDruckDat = SalDateTime.Null;
		public SalString strDateiName = "";
		public SalString strDateiPfad = "";
		public SalFileHandle hDisk = SalFileHandle.Null;
		public SalNumber nBytes = 0;
		public SalString strAktPfad = "";
		public SalNumber nFax = 0;
		public SalDateTime dtSperrDatum = SalDateTime.Null;
		public SalString strPPfad = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmBriefVari(SalNumber nArztNr, SalNumber nHalterNr, SalNumber nRechNr, SalString strEmpf, SalString lsText, SalDateTime dtDatum, SalString strRA0, SalString strRA1, SalString strRA2, SalString strRA3, SalString strRA4, SalBoolean bBrief)
		{
			// Assign global reference.
			App.frmBriefVari = this;
			// Window Parameters initialization.
			this.nArztNr = nArztNr;
			this.nHalterNr = nHalterNr;
			this.nRechNr = nRechNr;
			this.strEmpf = strEmpf;
			this.lsText = lsText;
			this.dtDatum = dtDatum;
			this.strRA0 = strRA0;
			this.strRA1 = strRA1;
			this.strRA2 = strRA2;
			this.strRA3 = strRA3;
			this.strRA4 = strRA4;
			this.bBrief = bBrief;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmBriefVari CreateWindow(Control owner, SalNumber nArztNr, SalNumber nHalterNr, SalNumber nRechNr, SalString strEmpf, SalString lsText, SalDateTime dtDatum, SalString strRA0, SalString strRA1, SalString strRA2, SalString strRA3, SalString strRA4, SalBoolean bBrief)
		{
			frmBriefVari frm = new frmBriefVari(nArztNr, nHalterNr, nRechNr, strEmpf, lsText, dtDatum, strRA0, strRA1, strRA2, strRA3, strRA4, bBrief);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmBriefVari FromHandle(SalWindowHandle handle)
		{
			return ((frmBriefVari)SalWindow.FromHandle(handle, typeof(frmBriefVari)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HoleArzt()
		{
			#region Actions
			using (new SalContext(this))
			{
				// Call SqlImmedSel('SELECT anr2, akzpraxart
				// INTO :frmBriefVari.nArztNr2, :frmBriefVari.nKZPraxArt
				// FROM a WHERE aarztnr=:frmBriefVari.dfArztNr')
				// If nKZPraxArt = 2
				// Set dfArztNr = nArztNr2
				// Call SqlImmedSel('SELECT anr2
				// INTO :frmBriefVari.nArztNr2
				// FROM a WHERE aarztnr=:frmBriefVari.dfArztNr')
				// Else If nKZPraxArt = 0
				// Set nArztNr2 = dfArztNr
				Int.SqlIstDa("from A where aarztnr=:frmBriefVari.dfArztNr", ref bOk);
				// 03.09.21 Ä1968 + ,
				// aname1, aname2, str, aort
				if (bOk) 
				{
					Int.SqlImmedSel(@"SELECT asvtitel, asvname1, asvname2, asvstr, asvort, asvland, asehrgeehrte,
aname1, aname2, astr, aort
into :frmBriefVari.strTATi, :frmBriefVari.strTAN1, :frmBriefVari.strTAN2, :frmBriefVari.strTAStr, :frmBriefVari.strTAOrt, :frmBriefVari.strTALand, :frmBriefVari.strTAAnrede,
:frmMain.strTAN1, :frmMain.strTAN2, :frmMain.strTAStr, :frmMain.strTAOrt
from A where aarztnr=:frmBriefVari.dfArztNr");
					strTALand = Int.PalPruefeLC(strTALand, 0);
					if (strTAAnrede != "") 
					{
						strTAAnrede = "Sehr geehrte" + strTAAnrede + ",";
					}
					dfArztName.Text = strTAN1 + " " + strTAN2;
				}
				else
				{
					Sal.ClearField(dfArztNr);
					Sal.ClearField(dfArztName);
					Sal.SetFocus(dfArztNr);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HoleHalter()
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlIstDa("from H where  harztnr = :frmBriefVari.dfArztNr AND hhalternr = :frmBriefVari.dfHalterNr AND hdeaktiv IS NULL ", ref bOk);
				if (bOk) 
				{
					Sal.WaitCursor(true);
					Int.SqlImmedSel(@"SELECT hvn, hnn, hti, hname2, hstr, hort, hland, hsperrdatum
into  :frmBriefVari.strTHVN, :frmBriefVari.strTHNN, :frmBriefVari.strTHTi, :frmBriefVari.strTHN2, :frmBriefVari.strTHStr, :frmBriefVari.strTHOrt,  :frmBriefVari.strTHLand, :frmBriefVari.dtSperrDatum
from H where  harztnr = :frmBriefVari.dfArztNr AND hhalternr = :frmBriefVari.dfHalterNr AND hdeaktiv IS NULL ");
					strTHLand = Int.PalPruefeLC(strTHLand, 0);
					strTHN1 = strTHTi + strTHVN + " " + strTHNN;
					// 02.04.07 Ä102
					if (dtSperrDatum != SalDateTime.Null) 
					{
						// 16.12.09
						// Call SalMessageBox( 'Der Postausgang an den Halter ist gesperrt seit ' || SalStrMidX(PalDateToStrJJJJMMTT(dtSperrDatum),6,2) || '.' || SalStrMidX(PalDateToStrJJJJMMTT(dtSperrDatum),4,2) || '.' ||
						// SalStrMidX(PalDateToStrJJJJMMTT(dtSperrDatum),0,4),
						// 'Achtung', MB_Ok|MB_IconExclamation)
						dfInfo.Text = "Postausgang gesperrt seit " + Int.PalDateToStrJJJJMMTT(dtSperrDatum).Mid(6, 2) + "." + Int.PalDateToStrJJJJMMTT(dtSperrDatum).Mid(4, 2) + "." + Int.PalDateToStrJJJJMMTT(dtSperrDatum).Mid(0, 4);
					}

					if (strEmpf != "R")  // Rechtsanwalt
					{
						Int.SqlImmedSel("SELECT vnanrede INTO :frmBriefVari.strTHAnrede FROM vn WHERE vvorname = :frmBriefVari.strTHVN OR vvorname2 = :frmBriefVari.strTHVN");
						if (strTHAnrede == "Herr" || strTHAnrede == "Herrn") 
						{
							strTHAnrede = "Sehr geehrter Herr " + strTHTi + strTHNN + ",";
						}
						else if (strTHAnrede == "Frau") 
						{
							strTHAnrede = "Sehr geehrte Frau " + strTHTi + strTHNN + ",";
						}
						else
						{
							strTHAnrede = "Sehr geehrte Damen und Herren,";
						}
					}
					dfHalterName.Text = strTHN1;
					// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
					// from rk into :frmBriefVari.dfAussenst where rkhalternr=:frmBriefVari.dfHalterNr AND rkrechnr=:frmBriefVari.dfRechNr
					// and rkarztnr in ( :frmBriefVari.dfArztNr, :frmBriefVari.nArztNr2)
					// and rkkzzahl <2')
					Sal.WaitCursor(false);
				}
				else
				{
					// Call LoescheMaske()
					Sal.SetFocus(dfArztNr);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HoleRech()
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlIstDa("from rk where  rkarztnr = :frmBriefVari.dfArztNr AND rkrechnr = :frmBriefVari.dfRechNr AND rkdeaktiv IS NULL ", ref bOk);
				if (bOk) 
				{
					if (Sal.IsNull(dfHalterNr)) 
					{
						Int.SqlImmedSel(@"SELECT rkhalternr
into :frmBriefVari.dfHalterNr
from rk where rkarztnr = :frmBriefVari.dfArztNr AND rkrechnr = :frmBriefVari.dfRechNr AND rkdeaktiv IS NULL");
						HoleHalter();
					}
				}
				else
				{
					Sal.SetFocus(dfArztNr);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber Speichern()
		{
			// String: strTypX
			
			#region Local Variables
			SalString strPReport = "";
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				if ((strEmpf == "A" || strEmpf == "R") && Sal.IsNull(dfArztNr)) 
				{
					Sal.MessageBox("Arzt-Nr. fehlt", "Daten unvollständig", (Sys.MB_Ok | Sys.MB_IconExclamation));
					Sal.SetFocus(dfArztNr);
					pbOk.EnableWindow();
				}
				else if (strEmpf == "H" && (Sal.IsNull(dfArztNr) || Sal.IsNull(dfHalterNr))) 
				{
					Sal.MessageBox("Arzt-Nr./ Halter-Nr. fehlt", "Daten unvollständig", (Sys.MB_Ok | Sys.MB_IconExclamation));
					Sal.SetFocus(dfArztNr);
					pbOk.EnableWindow();
				}
				else
				{
					Var.nErr = 1;
					if (dtDatum == new SalDateTime(1900, 1, 1)) 
					{
						dtDruckDat = SalDateTime.Current;
					}
					else
					{
						dtDruckDat = dtDatum;
					}
					if (rbBrief.Checked) 
					{
						// Set strPReport = 'Variabel.QRP'
						nFax = 0;
					}
					else
					{
						// Set strPReport = 'Variabel-Fax.QRP'
						nFax = 1;
					}
					// Call PalReport(frmBriefVari, strPReport,
					// ':frmBriefVari.strZei, :frmBriefVari.dfArztNr, :frmBriefVari.dfHalterNr, :frmBriefVari.dfRechNr,
					// :frmBriefVari.dfRA0, :frmBriefVari.dfRA1, :frmBriefVari.dfRA2, :frmBriefVari.dfRA3, :frmBriefVari.dfRA4, :frmBriefVari.mlText, :frmBriefVari.dtDruckDat,
					// :frmBriefVari.strTHN1, :frmBriefVari.dfBetreff, :frmBriefVari.nPRNr, :frmBriefVari.dfAnrede, :frmBriefVari.strName',
					// 'Zei, ArztNr, HalterNr, RechNr,
					// An0, An1, An2, An3, An4, Text, Datum, HName1, Betreff, PRNr, Anrede, Name', nErr)
					// Call axText.PropGetText( mlText )
					// LL
					// 13.10.09 OTF325 If Bedingung	16.12.09 OTF345 +  And dtDatum != '1900-01-01'
					if (lsText != "" && dtDatum != new SalDateTime(1900, 1, 1)) 
					{
						// 04.07.18 + strEmpf ||
						strEmpf = strEmpf + "Nachdruck";
					}
					// Else ! 04.07.18 auskommentiert
					// Set strEmpf = ''
					dlgLlDruck.ModalDialog(App.frmMain, "BriefVariabel.crd", strEmpf);
					pbOk.EnableWindow();
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalDateiWahl()
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(4);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strArExtensions[0] = "Briefe - *.bri";
				strArExtensions[1] = "*.bri";
				strArExtensions[2] = "alle Dateien - *.*";
				strArExtensions[3] = "*.*";
				xOK = Sal.DlgOpenFile(this, "Briefe", strArExtensions, 4, ref nIndex, ref strDateiName, ref strDateiPfad);
				if (xOK) 
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalDateiSpeich()
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(4);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strArExtensions[0] = "Briefe - *.bri";
				strArExtensions[1] = "*.bri";
				strArExtensions[2] = "alle Dateien - *.*";
				strArExtensions[3] = "*.*";
				xOK = Sal.DlgSaveFile(this, "SELECT-Statements", strArExtensions, 4, ref nIndex, ref strDateiName, ref strDateiPfad);
				if (xOK) 
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalSetzeA()
		{
			#region Actions
			using (new SalContext(this))
			{
				// 28.04.10 OTÄ420 Land
				if (strTALand == "") 
				{
					dfRA0.Text = strTATi;
					dfRA1.Text = strTAN1;
					dfRA2.Text = strTAN2;
					dfRA3.Text = strTAStr;
					dfRA4.Text = strTAOrt;
				}
				else
				{
					dfRA0.Text = strTAN1;
					dfRA1.Text = strTAN2;
					dfRA2.Text = strTAStr;
					dfRA3.Text = strTAOrt;
					dfRA4.Text = strTALand;
				}
				dfAnrede.Text = strTAAnrede;
				strEmpf = "A";
				// 21.04.09 OTÄ212
				rbPMA.Checked = true;
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalSetzeH()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (strTHLand == "") 
				{
					dfRA0.Text = "Herrn / Frau";
					dfRA1.Text = strTHN1;
					dfRA2.Text = strTHN2;
					dfRA3.Text = strTHStr;
					dfRA4.Text = strTHOrt;
				}
				else
				{
					dfRA0.Text = strTHN1;
					dfRA1.Text = strTHN2;
					dfRA2.Text = strTHStr;
					dfRA3.Text = strTHOrt;
					dfRA4.Text = strTHLand;
				}
				dfAnrede.Text = strTHAnrede;
				strEmpf = "H";
				// 21.04.09 OTÄ212
				rbPMH.Checked = true;
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmBriefVari WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBriefVari_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmBriefVari_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_CreateComplete:
					this.frmBriefVari_OnSAM_CreateComplete(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmBriefVari_OnSAM_Destroy(sender, e);
					break;
				
				case Sys.SAM_ReportStart:
					this.frmBriefVari_OnSAM_ReportStart(sender, e);
					break;
				
				case Sys.SAM_ReportFetchInit:
					this.frmBriefVari_OnSAM_ReportFetchInit(sender, e);
					break;
				
				case Sys.SAM_ReportFetchNext:
					this.frmBriefVari_OnSAM_ReportFetchNext(sender, e);
					break;
				
				case Sys.SAM_ReportFinish:
					this.frmBriefVari_OnSAM_ReportFinish(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBriefVari_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.rbPMa.Checked = true;
			// 20.12.13
			// Set rbBrief = TRUE
			// 06.08.18 Ä1763 TRUE -> FALSE
			// Set rbBrief = bBrief
			if (this.bBrief == 0) 
			{
				this.rbFax.Checked = true;
			}
			else
			{
				this.rbBrief.Checked = true;
			}
			// 28.01.09 OTÄ155
			// If strBNAbtlg = 'ED'
			// Set rbBrief = FALSE
			// Set rbFax = TRUE

			Sal.DisableWindow(App.frmMain.pbBriefeFrei);
			this.strEWA = "Kanzlei / Firma";
			if (this.lsText != "") 
			{
				this.dfAnrede.Text = "Sehr geehrte Damen und Herren,";
			}
			// 17.3.97
			// Set strZei = ''
			// If SqlUser = 'DUEMMER'
			// Set strZei = '40 /Dü'
			// Set strName = ''
			// Else If SqlUser = 'BEVERBUR'
			// Set strZei = '40 /Be'
			// Set strName = ''
			// Else If SqlUser = 'HENNECKE'
			// Set strZei = '41 /He'
			// Set strName = ''
			// Else If SqlUser = 'SEIL'
			// Set strZei = '21 /Se'
			// Set strName = ''
			// Else If SqlUser = 'KOLLAY'
			// Set strZei = '52 /Ko'
			// Set strName = ''
			// Else If SqlUser = 'ZINK'
			// Set strZei = '60 /Zi'
			// Set strName = ''
			// Else If SqlUser = 'FRIEDRIC'
			// Set strZei = '60 /Fr'
			// Set strName = ''
			// Else If SqlUser = 'SYMOLKA'
			// Set strZei = '60 /Sy'
			// Set strName = ''
			// Else If SqlUser = 'STUKE'
			// Set strZei = '60 /St'
			// Set strName = ''
			// Else If SqlUser = 'KEUER'
			// Set strZei = '30 /Ke'
			// Set strName = 'Michael Keuer'
			// Else If SqlUser = 'MARTIN'
			// Set strZei = '50 /Ma'
			// Set strName = 'Marc Martin'
			// Else If SqlUser = 'LINKER'
			// Set strZei = '20 /Li'
			// Set strName = ''
			// Else If SqlUser = 'SASSE'
			// Set strZei = '10 /Sa'
			// Set strName = 'Wolfgang Sasse'
			// Else If SqlUser = 'SC'
			// Set strZei = '/Sc'
			// Set strName = ''
			// Else If SqlUser = 'SD'
			// Set strZei = '/Sd'
			// Set strName = ''
			// Else If SqlUser = 'ZK'
			// Set strZei = '32 /Zk'
			// Set strName = ''
			// 28.11.05
			this.strZei = Var.strBNTel + " /" + Var.strBNZei.ToProper();
			this.strName = Var.strBNName;
			if (Var.strBNAbtlg == "MA" || Var.strBNAbtlg == "RA" || Var.strBNAbtlg == "BH") 
			{
				this.strName = "";
			}

			if (this.nArztNr != 0 && this.nArztNr != SalNumber.Null) 
			{
				this.dfArztNr.Number = this.nArztNr;
				// If SalPostMsg(dfArztNr, SAM_Validate, 0, 0)
				if (this.HoleArzt()) 
				{
				}
				if (this.nHalterNr != 0 && this.nHalterNr != SalNumber.Null) 
				{
					this.dfHalterNr.Number = this.nHalterNr;
					// Call SalPostMsg(dfHalterNr, SAM_Validate, 0, 0)
					if (this.HoleHalter()) 
					{
					}
					if (this.nRechNr != 0 && this.nRechNr != SalNumber.Null) 
					{
						this.dfRechNr.Number = this.nRechNr;
						// Call SalPostMsg(dfRechNr, SAM_Validate, 0, 0)
						if (this.HoleRech()) 
						{
						}
					}
				}
			}
			if (this.strEmpf == "A") 
			{
				// Call SalPostMsg(pbA, SAM_Click, 0, 0)
				this.PalSetzeA();
			}
			else if (this.strEmpf == "H" && this.lsText == "") 
			{
				// If SalPostMsg(pbH, SAM_Click, 0, 0)
				this.PalSetzeH();
			}
			else if (this.strEmpf == "R")  // Rechtsanwalt
			{
				// 28.05.14 F2041
				// Call SqlImmedSel('SELECT raan1, raan2, raan3
				// INTO :frmBriefVari.dfRA2, :frmBriefVari.dfRA3, :frmBriefVari.dfRA4
				// FROM ra WHERE raarztnr = :frmBriefVari.dfArztNr AND rarechnr = :frmBriefVari.dfRechNr ORDER BY radatum DESC')
				// 18.01.22 Ä1987 + , raan4, raan5
				Int.SqlImmedSel(@"SELECT raan1, raan2, raan3, raan4, raan5
INTO :frmBriefVari.dfRA0, :frmBriefVari.dfRA1, :frmBriefVari.dfRA2, :frmBriefVari.dfRA3, :frmBriefVari.dfRA4
FROM ra WHERE raarztnr = :frmBriefVari.dfArztNr AND rahalternr = :frmBriefVari.dfHalterNr AND rarechnr = :frmBriefVari.dfRechNr ORDER BY radatum DESC");

				// Set dfRA0 = ''
				// Set dfRA1 = strEWA
			}
			if (this.strRA0 != "" || this.strRA1 != "" || this.strRA2 != "" || this.strRA3 != "" || this.strRA4 != "") 
			{
				this.dfRA0.Text = this.strRA0;
				this.dfRA1.Text = this.strRA1;
				this.dfRA2.Text = this.strRA2;
				this.dfRA3.Text = this.strRA3;
				this.dfRA4.Text = this.strRA4;
			}
			if (this.lsText != "") 
			{
				this.mlText.Text = this.lsText;
				// Call axText.PropSetText( mlText )
				this.dfAnrede.Clear();
				this.dfAnrede.Text = "";
				this.dfArztNr.DisableWindowAndLabel();
				this.dfHalterNr.DisableWindowAndLabel();
				this.dfRechNr.DisableWindowAndLabel();
				this.dfRA0.DisableWindowAndLabel();
				this.dfRA1.DisableWindowAndLabel();
				this.dfRA2.DisableWindowAndLabel();
				this.dfRA3.DisableWindowAndLabel();
				this.dfRA4.DisableWindowAndLabel();
				this.pbA.DisableWindowAndLabel();
				this.pbH.DisableWindowAndLabel();
				this.mlText.DisableWindowAndLabel();
				this.pbOk.PostMessage(Sys.SAM_Click, 0, 0);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBriefVari_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.bfrmBriefVari = true;
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBriefVari_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.EnableWindow(App.frmMain.pbBriefeFrei);
			Var.bfrmBriefVari = false;
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportStart event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBriefVari_OnSAM_ReportStart(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 30.04.03
			if (Var.hWndfrmReport) 
			{
				Var.hWndfrmReport.BringWindowToTop();
			}

			Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "", "Druck läuft", "", "");
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFetchInit event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBriefVari_OnSAM_ReportFetchInit(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.bJa = true;
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFetchNext event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBriefVari_OnSAM_ReportFetchNext(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.bJa == true) 
			{
				this.bJa = false;
				e.Return = true;
				return;
			}
			else
			{
				e.Return = false;
				return;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFinish event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBriefVari_OnSAM_ReportFinish(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.pbOk.EnableWindow();
			if (this.dtDatum == new SalDateTime(1900, 1, 1) && this.dfArztNr.Number > 0) 
			{
				if (Sal.MessageBox(@"Ist der Druck
in Ordnung ?", "Druck Ok ?", (Sys.MB_YesNo | Sys.MB_IconQuestion)) == Sys.IDYES) 
				{
					// Call PalAktion( dfArztNr, dfHalterNr, dfRechNr, 'BR', 'RAAbX',
					// NUMBER_Null, NUMBER_Null, NUMBER_Null, NUMBER_Null, NUMBER_Null)
					// Set strVermerk = 'Brief an
					// ' || dfRA0 || '
					// ' || dfRA1 || '
					// ' || dfRA2 || '
					// ' || dfRA3 || '
					// ' || dfRA4 || ':
					// 
					// ' || mlText
					this.strZei = Var.strBNZei;
					this.nPRNr = SalNumber.Null;
					Int.SqlImmedSel(@"SELECT prdnr INTO :frmBriefVari.nPRNr FROM prd
WHERE prdarztnr = :frmBriefVari.dfArztNr  AND prdrechnr = :frmBriefVari.dfRechNr");
					// 21.03.02
					this.mlText.Text = this.dfBetreff.Text + @"

" + this.dfAnrede.Text + @"

" + this.mlText.Text;
					// Call axText.PropSetText( mlText )
					// 13.05.14 F2027
					this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

					Int.SqlImmed(@"INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:frmBriefVari.strZei, :frmBriefVari.strEmpf, :frmBriefVari.dfArztNr, :frmBriefVari.dfHalterNr, :frmBriefVari.dfRechNr,
:frmBriefVari.mlText , SYSDATE, NULL, 'J', 'BR', NULL, NULL, :frmBriefVari.nPRNr,
:frmBriefVari.dfRA0, :frmBriefVari.dfRA1, :frmBriefVari.dfRA2, :frmBriefVari.dfRA3, :frmBriefVari.dfRA4,0, SYSDATETIME)");

					Sal.MessageBeep(0);
					this.DestroyWindow();
				}
			}
			else
			{
				Sal.MessageBeep(0);
				this.DestroyWindow();
			}
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.Number > 0) 
			{
				this.HoleArzt();
			}
			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.HoleHalter();
			#endregion
		}
		
		/// <summary>
		/// dfRechNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRechNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.HoleRech();
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.pbOk.DisableWindow();
			this.Speichern();
			#endregion
		}
		
		/// <summary>
		/// pbA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbA_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbA_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalSetzeA();
			#endregion
		}
		
		/// <summary>
		/// pbH WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbH_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbH_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbH_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalSetzeH();
			#endregion
		}
		
		/// <summary>
		/// pbNeu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeu_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeu_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.mlText.Text = "";
			// Call axText.PropSetText( mlText )
			this.pbOk.EnableWindow();
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeu, "bereits gespeicherten Brief laden");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbOeffne WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOeffne_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOeffne_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbOeffne_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOeffne_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.FileGetCurrentDirectory(ref this.strAktPfad);
			// 27.09.07 A147
			Sal.GetProfileString("Ordner", "BriefVari", "K:", ref this.strPPfad, "TVN.INI");
			Sal.FileSetCurrentDirectory(this.strPPfad);
			// Call SalFileSetCurrentDirectory ( 'K:' )
			// Set strDateiPfad = 'K:'
			this.strDateiPfad = this.strPPfad;

			if (this.PalDateiWahl()) 
			{
				this.hDisk.Open(this.strDateiPfad, (Sys.OF_Read | Sys.OF_Text));
				this.mlText.Text = this.hDisk.Read(32000);
				this.hDisk.Close();
				// Call axText.PropSetText( mlText )
			}
			Sal.FileSetCurrentDirectory(this.strAktPfad);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOeffne_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbOeffne, "bereits gespeicherten Brief laden");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbSpeich WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSpeich_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSpeich_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbSpeich_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSpeich_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.FileGetCurrentDirectory(ref this.strAktPfad);
			// 27.09.07 A147
			Sal.GetProfileString("Ordner", "BriefVari", "K:", ref this.strPPfad, "TVN.INI");
			// Call SalFileSetCurrentDirectory ( 'K:' )
			Sal.FileSetCurrentDirectory(this.strPPfad);

			if (this.PalDateiSpeich()) 
			{
				Sal.SetProfileString("Ordner", "BriefVari", this.strDateiPfad.Left(this.strDateiPfad.Length - this.strDateiName.Length), "TVN.INI");
				if (this.hDisk.Open(this.strDateiPfad, Sys.OF_Create)) 
				{
					this.hDisk.Close();
					if (this.hDisk.Open(this.strDateiPfad, Sys.OF_Write)) 
					{
						// Call axText.PropGetText( mlText )
						this.nBytes = this.hDisk.Write(this.mlText.Text, 32757);
						if (this.nBytes >= 0) 
						{
							this.hDisk.Close();
						}
					}
					else
					{
						Sal.MessageBox("Die Datei " + this.strDateiPfad + " kann nicht geöffnet werden !", "Fehler", Sys.MB_Ok);
					}
				}
				else
				{
					Sal.MessageBox("Die Datei " + this.strDateiPfad + " kann nicht erstellt werden !", "Fehler", Sys.MB_Ok);
				}
			}
			Sal.FileSetCurrentDirectory(this.strAktPfad);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSpeich_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbSpeich, "Brief unter einem Namen speichern");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
			this.DestroyWindow();
			#endregion
		}
		#endregion
	}
}
