// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// FiBu
	/// </summary>
	public partial class frmFiBu : SalFormWindow
	{
		#region Window Variables
		public SalString strSelect = "";
		public SalNumber nDiskIndex = 0;
		public SalSqlHandle hSqlDisk = SalSqlHandle.Null;
		public SalNumber nFetch = 0;
		public SalNumber nTANr = 0;
		public SalNumber nTANrAlt = 0;
		public SalString strTAN1 = "";
		public SalString strTAN2 = "";
		public SalString strTAStr = "";
		public SalString strTAOrt = "";
		public SalNumber nTHNr = 0;
		public SalString strTHN1 = "";
		public SalString strTHN2 = "";
		public SalString strTHStr = "";
		public SalString strTHOrt = "";
		public SalDateTime dtBuchDat = SalDateTime.Null;
		public SalString strBuchText = "";
		public SalNumber nRechNr = 0;
		public SalNumber nDMRech = 0;
		public SalNumber nDMPorto = 0;
		public SalNumber nDMMahn = 0;
		public SalNumber nDMZins = 0;
		public SalNumber nDMMwSt = 0;
		public SalNumber nDMVorst = 0;
		public SalNumber nDMSoll = 0;
		public SalNumber nDMHaben = 0;
		public SalNumber nDMZaL = 0;
		public SalNumber nDMZaA = 0;
		public SalNumber nDMUeberw = 0;
		public SalNumber nDMmitVorstS = 0;
		public SalNumber nDMmitVorstV = 0;
		public SalNumber nSoll = 0; // für TKSOLL
		public SalNumber nHaben = 0; // für TKHABEN
		public SalNumber nProz = 0;
		public SalBoolean bNoFetch = false;
		public SalString strLA = "";
		public SalNumber nZaRech = 0;
		public SalNumber nZaMahn = 0;
		public SalNumber nZaZins = 0;
		public SalNumber nMS = 0;
		public SalDateTime dtMahnDat = SalDateTime.Null;
		public SalNumber nAnzRech = 0;
		public SalNumber nRechJahr = 0;
		public SalNumber nKZZahl = 0;
		public SalNumber nDMAusbuch = 0;
		public SalString strBezeichnung = "";
		public SalNumber nMinRechNr = 0;
		public SalNumber nZahlDM = 0;
		public SalNumber nBuchDM = 0;
		public SalNumber nRestL = 0;
		public SalNumber nRestA = 0;
		public SalNumber nRestM = 0;
		public SalNumber nRestZ = 0;
		public SalString strBank = "";
		public SalString strKonto = "";
		public SalNumber nKonto = 0;
		public SalString strErgebnis = "";
		public SalNumber nAuszug = 0;
		public SalString strRef = "";
		public SalNumber nTextSchl = 0;
		public SalString strVZ1 = "";
		public SalString strVZ2 = "";
		public SalString strAuftr1 = "";
		public SalString strAuftr2 = "";
		public SalNumber nDMa = 0;
		public SalNumber nDMb = 0;
		public SalNumber nDMc = 0;
		public SalString strabc = "";
		public SalNumber nResult = 0;
		public SalString strTABank = "";
		public SalString strTABLZ = "";
		public SalString strTAKonto = "";
		public SalString strTVBank = "";
		public SalString strTVBLZ = "";
		public SalString strTVKonto = "";
		public SalNumber nVorRech = 0;
		public SalNumber nVorSoll = 0;
		public SalNumber nVorHaben = 0;
		public SalNumber nVorVSt = 0;
		public SalNumber nVorMwSt = 0;
		public SalNumber nAussenst = 0;
		public SalNumber nKZPraxArt = 0;
		public SalString strTyp = "";
		public SalString strTypDetail = "";
		public SalString strGebuchtVZ = "";
		public SalNumber nRkDMHF = 0;
		public SalNumber nRkDMMa = 0;
		public SalNumber nRkZaHF = 0;
		public SalNumber nRkZaMa = 0;
		public SalNumber nZaDM = 0;
		public SalNumber nDMGK = 0;
		public SalString strTAIBAN = "";
		public SalString strTVIBAN = "";
		public SalString strTALand = "";
		public SalString strTABIC = "";
		public SalString strTVBIC = "";
		public SalString strBeitragText = "";
		public SalNumber nTAReverse = 0;
		public SalString strStatus = "";
		public SalString strObject = "";
		public SalNumber nAnzTSE = 0;
		public SalNumber nProzNr = 0;
		public SalNumber nZahlMahnZins = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmFiBu()
		{
			// Assign global reference.
			App.frmFiBu = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmFiBu CreateWindow(Control owner)
		{
			frmFiBu frm = new frmFiBu();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmFiBu FromHandle(SalWindowHandle handle)
		{
			return ((frmFiBu)SalWindow.FromHandle(handle, typeof(frmFiBu)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalPruefeSperre()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.ColorSet(dfSperre, Sys.COLOR_IndexWindowText, Sys.COLOR_White);
				if (Int.PalFormFrei("Übergaben")) 
				{
					dfSperre.Text = "Übergaben erlaubt";
					Sal.ColorSet(dfSperre, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
				}
				else
				{
					dfSperre.Text = "Übergaben gesperrt !";
					Sal.ColorSet(dfSperre, Sys.COLOR_IndexWindow, Sys.COLOR_Red);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalCheckBelastungDate()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (SalDateTime.Current <= new SalDateTime(2023, 1, 15) || ((SalDateTime.Current.Month() == 1 && SalDateTime.Current.Day() > 15) || (SalDateTime.Current.Month() == 2 && SalDateTime.Current.Day() <= 15))) 
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmFiBu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmFiBu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmFiBu_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmFiBu_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmFiBu_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalGetSize(this, false);
			this.lbFiBuAktionen.SetWindowColor(Sys.COLOR_IndexWindow, 0xefffff);
			this.lbFiBuAktionen.SetWindowColor(Sys.COLOR_IndexWindowText, 0x4f4f);
			this.PalPruefeSperre();
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmFiBu_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.EnableWindow(App.frmMain.pbFiBu);
			Int.PalSetSize(this);
			#endregion
		}
		
		/// <summary>
		/// lbFiBuAktionen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbFiBuAktionen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.lbFiBuAktionen_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.lbFiBuAktionen_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbFiBuAktionen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			this.nDiskIndex = this.lbFiBuAktionen.GetListSelectedIndex();
			this.strSelect = this.lbFiBuAktionen.GetListItemText(this.nDiskIndex);
			if (this.strSelect == "1 - Verarbeiten Rechng. / Mahnungen") 
			{
				frmUebFibuBH.CreateWindow(this);
			}
			else if (this.strSelect == "2 - Zahlungen der Halter") 
			{
				frmZahlHalter.CreateWindow(this);
			}
			else if (this.strSelect == "2a - Retouren") 
			{
				frmRetouren.CreateWindow(this);
			}
			else if (this.strSelect == "3 - Zahlungen ausbatchen") 
			{
				frmAusbatch.CreateWindow(this);
			}
			else if (this.strSelect == "4 - Rechnungen ausbuchen") 
			{
				frmRechAusb.CreateWindow(this);
			}
			else if (this.strSelect == "4a - Ausbuchung rückgängig machen") 
			{
				frmRechAusbRueck.CreateWindow(this);
			}
			else if (this.strSelect == "5 - sonst. Buchungen") 
			{
				frmsonstBuch.CreateWindow(this, false);
			}
			else if (this.strSelect == "5a - Pharmarechnungen")  // 01.10.21 Ä1974
			{
				frmsonstBuch.CreateWindow(this, true);
			}
			else if (this.strSelect == "6 - Buchen MB-Kosten") 
			{
				frmBuchMB.CreateWindow(this);
			}
			else if (this.strSelect == "7 - Bank-Clearing") 
			{
				frmBankZahl.CreateWindow(this);
			}
			else if (this.strSelect == "8 - Buchungskontrolle") 
			{
				frmBuKo.CreateWindow(this);
			}
			else if (this.strSelect == "8a- TA-Konto durchsuchen") 
			{
				frmTKSuch.CreateWindow(this);
			}
			// Else If strSelect = '8 - Drucken'
			// Call SalModalDialog(dlgFiBuDruck,hWndForm)
			else if (this.strSelect == "9 - Belastungen an Mitglieder buchen") 
			{
				// 21.09.23 Ä2138 Achtung: Belastungen der TSE-Kosten können während des Jahres auch im Arztstamm stattfinden!
				// 25.01.23 Ä2037
				Int.SqlIstDa("FROM tb", ref Var.bExists);
				if (Var.bExists) 
				{
					Int.SqlImmedSel("SELECT MAX(tbdatum) INTO :frmFiBu.dtMahnDat FROM tb");
					if (Sys.IDYES == Sal.MessageBox("Die TSE-Kosten wurden das letzte Mal am " + Int.PalDateToStrDE(this.dtMahnDat) + @" gespeichert.

Möchten Sie fortfahren?", "Fortfahren ?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
					{
						Var.bExists = false;
					}
				}
				if (!(Var.bExists)) 
				{
					Sal.WaitCursor(true);
					Int.SqlConnection(ref this.hSqlDisk);
					// 22.12.11 Ä696
					this.strSelect = @"SELECT aarztnr, aapikey, aapisecret
INTO :frmFiBu.nTANr, :strFiskalyAPIKey, :strFiskalyAPISecret
FROM a
WHERE aapikey IS NOT NULL AND aapisecret IS NOT NULL
ORDER by aarztnr";
					Int.SqlHandleExec(this.hSqlDisk, this.strSelect, "Fehler beim Buchen der TSE-Kosten", ref Var.nCount);
					this.nFetch = this.hSqlDisk.FetchNext();
					Var.nDummyHaben = 0;
					while (this.nFetch != Sys.FETCH_EOF) 
					{
						// 12.08.22 Ä2037 Else
						Var.FISKALY.fInit(Var.strFiskalyAPIKey, Var.strFiskalyAPISecret, "V2");
						if (Int.PalFiskalyRunMethod("frmFibu", "ListTSS", ref Var.strFiskalyTSSId, ref Var.strFiskalyClientId, ref Var.strFiskalySerialNumber, ref Var.strFiskalyTxId, ref Var.strFiskalyState, "", SalNumber.Null, "", ref this.strStatus, ref this.strObject, ref 
							Var.strFiskalyCertificateSerial, ref Var.strFiskalyPublicKey, ref Var.strFiskalySignature_algorithm, ref Var.nFiskalySignature_counter, ref Var.strFiskalySignature_timestamp_format, ref Var.nFiskalyTransaction_number, ref Var.strFiskalySignature_value, ref 
							Var.strFiskalyQR_code_date, ref Var.strFiskalyEnv, Var.strFiskalyDescription, ref Var.strFiskalyProcessType, ref Var.strFiskalyProcessData, ref Var.strFiskalyExportID, Var.strFiskalyTime_Start, Var.strFiskalyTime_End)) 
						{
							if (Var.nFiskalySignature_counter > 0) 
							{
								Int.SqlImmed("INSERT INTO tb (tbarztnr, tbdatum, tbanzahl) VALUES(:frmFiBu.nTANr, SYSDATETIME, :nFiskalySignature_counter)");
								Var.nDummyHaben = Var.nDummyHaben + 1;
							}
							this.SetStatusBarText("TSE-Kosten Arzt-Nr. " + this.nTANr.ToString(0));
						}

						this.nFetch = this.hSqlDisk.FetchNext();
					}
					this.hSqlDisk.Commit();
					this.hSqlDisk.Disconnect();
				}
				// 30.01.23 Ä2037
				if ((SalDateTime.Current.Month() == 12 && SalDateTime.Current.Day() >= 25) || (SalDateTime.Current.Month() == 1 && SalDateTime.Current.Day() < 15)) 
				{
					// Call SqlIstDa( 'FROM tk WHERE tkbuchtext LIKE \'TSE-Kosten%\' OR tkbuchtext LIKE \'%Technische Sicherheitseinrichtung%\'', bExists )
					// If bExists
					// Call SqlImmedSel( 'SELECT tkbeldat INTO :frmFiBu.dtMahnDat FROM tk WHERE tkbuchtext LIKE \'TSE-Kosten%\' OR tkbuchtext LIKE \'%Technische Sicherheitseinrichtung%\'' )
					// Call SalMessageBox( 'Die TSE-Kosten wurden bereits am ' || PalDateToStrDE( dtMahnDat ) || ' belastet.', 'bereits belastet', MB_Ok|MB_IconExclamation )
					// Else
					// If IDYES = SalMessageBox( 'Möchten Sie die TSE-Kosten jetzt den Mitgliedern belasten?', 'TSE-Kosten', MB_YesNo|MB_IconQuestion )
					// Call SalWaitCursor( TRUE )
					// Call SqlConnection(hSqlDisk)
					// 22.12.11 Ä696
					// Set strSelect = 'SELECT aarztnr, aapikey, aapisecret
					// INTO :frmFiBu.nTANr, :strFiskalyAPIKey, :strFiskalyAPISecret
					// FROM a
					// WHERE aapikey IS NOT NULL AND aapisecret IS NOT NULL
					// ORDER by aarztnr'
					// Call SqlHandleExec(hSqlDisk,strSelect,'Fehler beim Buchen der TSE-Kosten',nCount)
					// Call SqlFetchNext(hSqlDisk,nFetch)
					// Set nDummyHaben = 0
					// While nFetch != FETCH_EOF
					// 12.08.22 Ä2037 Else
					// If SalDateCurrent(  ) <= 2023-01-15
					// Call FISKALY.fInit(strFiskalyAPIKey,strFiskalyAPISecret, 'V1')
					// If PalFiskalyRunMethod( 'frmFibu', 'ListTSS', strFiskalyTSSId, strFiskalyClientId, strFiskalySerialNumber, strFiskalyTxId, strFiskalyState, '', NUMBER_Null, '', strStatus, strObject,
					// strFiskalyCertificateSerial, strFiskalyPublicKey, strFiskalySignature_algorithm, nFiskalySignature_counter, strFiskalySignature_timestamp_format,
					// nFiskalyTransaction_number, strFiskalySignature_value, strFiskalyQR_code_date, strFiskalyEnv,
					// strFiskalyDescription, strFiskalyProcessType, strFiskalyProcessData, strFiskalyExportID, strFiskalyTime_Start, strFiskalyTime_End )
					// If nFiskalySignature_counter > 0
					// 28.05.21 Ä1962
					// Set strBuchText = 'TSE-Kosten (' || SalNumberToStrX( nFiskalySignature_counter, 0 ) || ' TSE)'
					// Set strBuchText = 'Technische Sicherheitseinrichtung (' || SalNumberToStrX( nFiskalySignature_counter, 0 ) || ' Stück v1)'
					// Set nCheckMwSt = PalCheckAuslMwSt( nTANr )
					// If nCheckMwSt = 0
					// Set nTAReverse = 1
					// Else
					// Set nTAReverse = 0
					// Set nDMSoll = SalNumberRound( (nFiskalySignature_counter * 8) * (100+nCheckMwSt) ) / 100
					// Set nDMVorst = SalNumberRound( (nFiskalySignature_counter * 8) * nCheckMwSt) /100
					// Set nKonto = 83400
					// Set dtBuchDat = SalDateCurrent()
					// Call SqlImmedX('INSERT INTO TK
					// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
					// tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
					// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkreverse)
					// VALUES (:frmFiBu.nTANr, 0, 0, :frmFiBu.strBuchText, 0, 0, 0,
					// :frmFiBu.dtBuchDat, :frmFiBu.nKonto, 0, 0, :frmFiBu.nDMVorst, 0, 0, 0, 0, 0, :nCheckMwSt, 0, 0, :frmFiBu.nDMSoll,
					// :frmFiBu.nDMSoll, 0, :frmFiBu.nTAReverse)')
					// AV Sachkonten - FiBu
					// Set nDMSoll = (nFiskalySignature_counter * 8)
					// Call SqlImmedX('INSERT INTO FI
					// (fifertig, fihaben, fisoll, fibelnr, fibeldat, fibuchtext, fidm, fityp)
					// VALUES (0, :frmFiBu.nKonto, 16000, :frmFiBu.nTANr, :frmFiBu.dtBuchDat, :frmFiBu.strBuchText,
					// :frmFiBu.nDMSoll, 6)')
					// If nDMVorst != 0
					// Set strBuchText = 'MwSt Haben (TSE)'
					// 30.06.20 Ä1892
					// Set nMwStSenkung = 17760
					// If dtBuchDat >= 2020-07-01 and dtBuchDat <= 2020-12-31
					// Set nMwStSenkung = PalKontenMwStSenkung( nMwStSenkung )
					// Call SqlImmedX('INSERT INTO FI
					// (fifertig, fihaben, fisoll, fibelnr, fibeldat, fibuchtext, fidm, fityp)
					// VALUES (0, :nMwStSenkung, 16000, :frmFiBu.nTANr, :frmFiBu.dtBuchDat, :frmFiBu.strBuchText, :frmFiBu.nDMVorst, 6)')
					// Set nDummyHaben = nDummyHaben + 1
					// Call SalStatusSetText(hWndForm,'TSE-Kosten Arzt-Nr. ' || SalNumberToStrX(nTANr,0))
					// Call FISKALY.fInit(strFiskalyAPIKey,strFiskalyAPISecret, 'V2')
					// If PalFiskalyRunMethod( 'frmFibu', 'ListTSS', strFiskalyTSSId, strFiskalyClientId, strFiskalySerialNumber, strFiskalyTxId, strFiskalyState, '', NUMBER_Null, '', strStatus, strObject,
					// strFiskalyCertificateSerial, strFiskalyPublicKey, strFiskalySignature_algorithm, nFiskalySignature_counter, strFiskalySignature_timestamp_format,
					// nFiskalyTransaction_number, strFiskalySignature_value, strFiskalyQR_code_date, strFiskalyEnv,
					// strFiskalyDescription, strFiskalyProcessType, strFiskalyProcessData, strFiskalyExportID, strFiskalyTime_Start, strFiskalyTime_End )
					// If nFiskalySignature_counter > 0
					// 28.05.21 Ä1962
					// Set strBuchText = 'TSE-Kosten (' || SalNumberToStrX( nFiskalySignature_counter, 0 ) || ' TSE)'
					// Set strBuchText = 'Technische Sicherheitseinrichtung (' || SalNumberToStrX( nFiskalySignature_counter, 0 ) || ' Stück v2)'
					// Set nCheckMwSt = PalCheckAuslMwSt( nTANr )
					// If nCheckMwSt = 0
					// Set nTAReverse = 1
					// Else
					// Set nTAReverse = 0
					// Set nDMSoll = SalNumberRound( (nFiskalySignature_counter * 8) * (100+nCheckMwSt) ) / 100
					// Set nDMVorst = SalNumberRound( (nFiskalySignature_counter * 8) * nCheckMwSt) /100
					// Set nKonto = 83400
					// Set dtBuchDat = SalDateCurrent()
					// Call SqlImmedX('INSERT INTO TK
					// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
					// tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
					// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkreverse)
					// VALUES (:frmFiBu.nTANr, 0, 0, :frmFiBu.strBuchText, 0, 0, 0,
					// :frmFiBu.dtBuchDat, :frmFiBu.nKonto, 0, 0, :frmFiBu.nDMVorst, 0, 0, 0, 0, 0, :nCheckMwSt, 0, 0, :frmFiBu.nDMSoll,
					// :frmFiBu.nDMSoll, 0, :frmFiBu.nTAReverse)')
					// AV Sachkonten - FiBu
					// Set nDMSoll = (nFiskalySignature_counter * 8)
					// Call SqlImmedX('INSERT INTO FI
					// (fifertig, fihaben, fisoll, fibelnr, fibeldat, fibuchtext, fidm, fityp)
					// VALUES (0, :frmFiBu.nKonto, 16000, :frmFiBu.nTANr, :frmFiBu.dtBuchDat, :frmFiBu.strBuchText,
					// :frmFiBu.nDMSoll, 6)')
					// If nDMVorst != 0
					// Set strBuchText = 'MwSt Haben (TSE)'
					// 30.06.20 Ä1892
					// Set nMwStSenkung = 17760
					// If dtBuchDat >= 2020-07-01 and dtBuchDat <= 2020-12-31
					// Set nMwStSenkung = PalKontenMwStSenkung( nMwStSenkung )
					// Call SqlImmedX('INSERT INTO FI
					// (fifertig, fihaben, fisoll, fibelnr, fibeldat, fibuchtext, fidm, fityp)
					// VALUES (0, :nMwStSenkung, 16000, :frmFiBu.nTANr, :frmFiBu.dtBuchDat, :frmFiBu.strBuchText, :frmFiBu.nDMVorst, 6)')
					// Set nDummyHaben = nDummyHaben + 1
					// Call SalStatusSetText(hWndForm,'TSE-Kosten Arzt-Nr. ' || SalNumberToStrX(nTANr,0))
					// Else
					// Call FISKALY.fInit(strFiskalyAPIKey,strFiskalyAPISecret, 'V2')
					// If PalFiskalyRunMethod( 'frmFibu', 'ListTSS', strFiskalyTSSId, strFiskalyClientId, strFiskalySerialNumber, strFiskalyTxId, strFiskalyState, '', NUMBER_Null, '', strStatus, strObject,
					// strFiskalyCertificateSerial, strFiskalyPublicKey, strFiskalySignature_algorithm, nFiskalySignature_counter, strFiskalySignature_timestamp_format,
					// nFiskalyTransaction_number, strFiskalySignature_value, strFiskalyQR_code_date, strFiskalyEnv,
					// strFiskalyDescription, strFiskalyProcessType, strFiskalyProcessData, strFiskalyExportID, strFiskalyTime_Start, strFiskalyTime_End )
					// If nFiskalySignature_counter > 0
					// 28.05.21 Ä1962
					// Set strBuchText = 'TSE-Kosten (' || SalNumberToStrX( nFiskalySignature_counter, 0 ) || ' TSE)'
					// Set strBuchText = 'Technische Sicherheitseinrichtung (' || SalNumberToStrX( nFiskalySignature_counter, 0 ) || ' Stück v2)'
					// Set nCheckMwSt = PalCheckAuslMwSt( nTANr )
					// If nCheckMwSt = 0
					// Set nTAReverse = 1
					// Else
					// Set nTAReverse = 0
					// Set nDMSoll = SalNumberRound( (nFiskalySignature_counter * 8 * 12) * (100+nCheckMwSt) ) / 100
					// Set nDMVorst = SalNumberRound( (nFiskalySignature_counter * 8 * 12) * nCheckMwSt) /100
					// Set nKonto = 83400
					// Set dtBuchDat = SalDateCurrent()
					// Call SqlImmedX('INSERT INTO TK
					// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
					// tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
					// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkreverse)
					// VALUES (:frmFiBu.nTANr, 0, 0, :frmFiBu.strBuchText, 0, 0, 0,
					// :frmFiBu.dtBuchDat, :frmFiBu.nKonto, 0, 0, :frmFiBu.nDMVorst, 0, 0, 0, 0, 0, :nCheckMwSt, 0, 0, :frmFiBu.nDMSoll,
					// :frmFiBu.nDMSoll, 0, :frmFiBu.nTAReverse)')
					// AV Sachkonten - FiBu
					// Set nDMSoll = (nFiskalySignature_counter * 8 * 12)
					// Call SqlImmedX('INSERT INTO FI
					// (fifertig, fihaben, fisoll, fibelnr, fibeldat, fibuchtext, fidm, fityp)
					// VALUES (0, :frmFiBu.nKonto, 16000, :frmFiBu.nTANr, :frmFiBu.dtBuchDat, :frmFiBu.strBuchText,
					// :frmFiBu.nDMSoll, 6)')
					// If nDMVorst != 0
					// Set strBuchText = 'MwSt Haben (TSE)'
					// 30.06.20 Ä1892
					// Set nMwStSenkung = 17760
					// If dtBuchDat >= 2020-07-01 and dtBuchDat <= 2020-12-31
					// Set nMwStSenkung = PalKontenMwStSenkung( nMwStSenkung )
					// Call SqlImmedX('INSERT INTO FI
					// (fifertig, fihaben, fisoll, fibelnr, fibeldat, fibuchtext, fidm, fityp)
					// VALUES (0, :nMwStSenkung, 16000, :frmFiBu.nTANr, :frmFiBu.dtBuchDat, :frmFiBu.strBuchText, :frmFiBu.nDMVorst, 6)')
					// Set nDummyHaben = nDummyHaben + 1
					// Call SalStatusSetText(hWndForm,'TSE-Kosten Arzt-Nr. ' || SalNumberToStrX(nTANr,0))
					// Call SqlFetchNext(hSqlDisk,nFetch)
					// Call SqlCommit( hSqlDisk )
					// Call SqlDisconnect(hSqlDisk)
					// If IDYES = SalMessageBox( 'Möchten Sie die jährlichen TSE-Kosten jetzt den Mitgliedern belasten?', 'TSE-Kosten', MB_YesNo|MB_IconQuestion )
					Sal.WaitCursor(true);
					Int.SqlConnection(ref this.hSqlDisk);
					// 22.12.11 Ä696
					this.strSelect = @"SELECT tbarztnr, sum( tbanzahl )
INTO :frmFiBu.nTANr, :frmFiBu.nAnzTSE
FROM tb
WHERE tberldat IS NULL
GROUP BY 1";
					Int.SqlHandleExec(this.hSqlDisk, this.strSelect, "Fehler beim Buchen der TSE-Kosten", ref Var.nCount);
					this.nFetch = this.hSqlDisk.FetchNext();
					Var.nDummyHaben = 0;
					while (this.nFetch != Sys.FETCH_EOF) 
					{
						if (this.nAnzTSE > 0) 
						{
							// 28.05.21 Ä1962
							// Set strBuchText = 'TSE-Kosten (' || SalNumberToStrX( nFiskalySignature_counter, 0 ) || ' TSE)'
							this.strBuchText = "Technische Sicherheitseinrichtung (" + this.nAnzTSE.ToString(0) + " Monate)";

							Var.nCheckMwSt = Int.PalCheckAuslMwSt(this.nTANr);
							if (Var.nCheckMwSt == 0) 
							{
								this.nTAReverse = 1;
							}
							else
							{
								this.nTAReverse = 0;
							}
							this.nDMSoll = ((this.nAnzTSE * Var.nPreismtlTSE) * (100 + Var.nCheckMwSt)).Round() / 100;
							this.nDMVorst = ((this.nAnzTSE * Var.nPreismtlTSE) * Var.nCheckMwSt).Round() / 100;
							this.nKonto = 83400;

							this.dtBuchDat = SalDateTime.Current;
							// 06.03.23 Ä2086
							Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
							if (this.dtBuchDat < Var.dtINIMinBuchDat) 
							{
								this.dtBuchDat = Var.dtINIMinBuchDat;
							}
							// 21.09.23
							Int.SqlImmed("UPDATE tb SET tberldat = :frmFiBu.dtBuchDat WHERE tbarztnr = :frmFiBu.nTANr AND tberldat IS NULL");


							// 20.11.23 Ä2144 + tkkontocode FEHLT
							Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkreverse)
VALUES (:frmFiBu.nTANr, 0, 0, :frmFiBu.strBuchText, 0, 0, 0,
:frmFiBu.dtBuchDat, :frmFiBu.nKonto, 0, 0, :frmFiBu.nDMVorst, 0, 0, 0, 0, 0, :nCheckMwSt, 0, 0, :frmFiBu.nDMSoll,
:frmFiBu.nDMSoll, 0, :frmFiBu.nTAReverse)");
							// AV Sachkonten - FiBu
							this.nDMSoll = this.nAnzTSE * Var.nPreismtlTSE;
							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fihaben, fisoll, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, :frmFiBu.nKonto, 16000, :frmFiBu.nTANr, :frmFiBu.dtBuchDat, :frmFiBu.strBuchText,
:frmFiBu.nDMSoll, 6)");
							if (this.nDMVorst != 0) 
							{
								this.strBuchText = "MwSt Haben (TSE)";
								// 30.06.20 Ä1892
								Var.nMwStSenkung = 17760;
								// If dtBuchDat >= 2020-07-01 and dtBuchDat <= 2020-12-31
								// Set nMwStSenkung = PalKontenMwStSenkung( nMwStSenkung )
								Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fihaben, fisoll, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, :nMwStSenkung, 16000, :frmFiBu.nTANr, :frmFiBu.dtBuchDat, :frmFiBu.strBuchText, :frmFiBu.nDMVorst, 6)");
							}
							Var.nDummyHaben = Var.nDummyHaben + 1;
						}

						this.nFetch = this.hSqlDisk.FetchNext();
					}
					this.hSqlDisk.Commit();
					this.hSqlDisk.Disconnect();
				}
				this.SetStatusBarText("");
			}
			else if (this.strSelect == "9a - Mahngebühren ausbuchen") 
			{
				// 06.03.23 Ä2086
				this.dtBuchDat = SalDateTime.Current;
				Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
				if (this.dtBuchDat < Var.dtINIMinBuchDat) 
				{
					this.dtBuchDat = Var.dtINIMinBuchDat;
				}

				// 21.02.23 Ä2080
				Sal.WaitCursor(true);
				Int.SqlConnection(ref this.hSqlDisk);
				this.strSelect = @"SELECT rkarztnr, rkhalternr, rkrechnr, (rkdmmahn-rkzamahn), (rkdmzins-rkzazins)
INTO :frmFiBu.nTANr, :frmFiBu.nTHNr, :frmFiBu.nRechNr, :frmFiBu.nDMMahn, :frmFiBu.nDMZins
FROM rk, a
WHERE amgausbuchenmtl=1 AND rkkzzahl < 2 AND (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn)=0 AND (rkdmmahn+rkdmzins-rkzamahn-rkzazins) > 0 AND rkrechnr < 999990 AND rkmahnstufe <= 5
AND rkarztnr=aarztnr
ORDER by rkarztnr, rkhalternr, rkrechnr";
				Int.SqlHandleExec(this.hSqlDisk, this.strSelect, "Fehler beim Ausbuchen der Mahngebühren", ref Var.nCount);
				this.nFetch = this.hSqlDisk.FetchNext();
				while (this.nFetch != Sys.FETCH_EOF) 
				{
					this.SetStatusBarText("MG ausbuchen Rech-Nr.: " + this.nTANr.ToString(0) + "/H" + this.nTHNr.ToString(0) + "/R" + this.nRechNr.ToString(0));
					this.nProzNr = SalNumber.Null;
					Int.SqlImmedSel(@"
SELECT prdnr
FROM prd
INTO :frmFiBu.nProzNr
WHERE prdarztnr = :frmFiBu.nTANr AND prdrechnr = :frmFiBu.nRechNr");
					if (this.nDMZins > 0 && this.nDMMahn > 0) 
					{
						this.strBuchText = "MG/Zins ausgeb.";
					}
					else if (this.nDMZins > 0) 
					{
						this.strBuchText = "Zins ausgeb.";
					}
					else
					{
						this.strBuchText = "MG ausgeb.";
					}
					this.nZahlMahnZins = this.nDMMahn + this.nDMZins;
					Int.SqlImmedX(@"INSERT INTO ZA
(zaarztnr,zahalternr,zarechnr,zakz,zabuchdat,zabelegnr,zadm, zaproznr, zabuchtext, zarznr, zaerfdat, zadmhf, zadmrest)
VALUES (:frmFiBu.nTANr,
:frmFiBu.nTHNr,
:frmFiBu.nRechNr,
4,
:frmFiBu.dtBuchDat,
0,
:frmFiBu.nZahlMahnZins,
:frmFiBu.nProzNr,
:frmFiBu.strBuchText,
NULL,
SYSDATETIME,
0,
:frmFiBu.nZahlMahnZins)");
					this.strBuchText = "STRE" + Int.PalStrNum(this.nTANr, 4, 0) + "/" + Int.PalStrNum(this.nTHNr, 5, 0) + "/" + Int.PalStrNum(this.nRechNr, 5, 0);
					Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16420, 16000, 0,
:frmFiBu.dtBuchDat,
:frmFiBu.strBuchText,
:frmFiBu.nZahlMahnZins, 5)");
					Int.SqlImmedX(@"UPDATE RK SET
rkzamahn=rkdmmahn,
rkzazins=rkdmzins,
rkkzzahl = 4
WHERE rkarztnr = :frmFiBu.nTANr
AND rkhalternr = :frmFiBu.nTHNr
AND rkrechnr = :frmFiBu.nRechNr");
					Int.PalCheckELobBez(this.nTANr, this.nTHNr);

					this.nBuchDM = this.nZahlMahnZins * -1;
					// 22.08.22 Ä2015 tkdmabr -> tkdmmahn
					// 20.11.23 Ä2144 + tkkontocode FEHLT
					Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmmahn, tksoll, tkhaben, tktavst)
VALUES (:frmFiBu.nTANr , 3, 0, :frmFiBu.strBuchText,
:frmFiBu.nTHNr, :frmFiBu.nRechNr, 0,
:frmFiBu.dtBuchDat, 0, 0,0 , 0,
0,0, 0, 0, 0, 0, :frmFiBu.nBuchDM,0, 0, 0)");
					// 11.04.23 Ä2080
					this.nDMZins = 0;
					Int.SqlImmedSel(@"SELECT SUM(hbdm) INTO :frmFiBu.nDMZins FROM hb
WHERE hbarztnr = :frmFiBu.nTANr AND hbhalternr = :frmFiBu.nTHNr AND hbcode LIKE 'Zi%'");
					if (this.nDMZins == SalNumber.Null) 
					{
						this.nDMZins = 0;
					}
					if (this.nDMZins < 0) 
					{
						this.nBuchDM = this.nDMZins * -1;
						this.strBuchText = "Streichen Monatsabschluss " + Int.PalStrNum(this.nTANr, 4, 0) + "/" + Int.PalStrNum(this.nTHNr, 5, 0);
						if (Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16450, 16000, 0, :frmFiBu.dtBuchDat, :frmFiBu.strBuchText, :frmFiBu.nBuchDM, 9)")) 
						{
						}
						if (Int.SqlImmed(@"INSERT INTO hb (hbarztnr, hbhalternr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext, hbrznr)
VALUES(:frmFiBu.nTANr, :frmFiBu.nTHNr, :frmFiBu.dtBuchDat, 'Zins', SYSDATETIME, :frmFiBu.nBuchDM, 16000, 16450, :frmFiBu.strBuchText, NULL)")) 
						{
						}
						Int.SqlImmedX(@"INSERT INTO ZA
(zaarztnr,zahalternr,zarechnr,zakz,zabuchdat,zabelegnr,zadm, zaproznr, zabuchtext, zaerfdat)
VALUES (:frmFiBu.nTANr, :frmFiBu.nTHNr, 0, 4, :frmFiBu.dtBuchDat, NULL, :frmFiBu.nBuchDM, NULL, 'Ausb.Halterkonto', SYSDATETIME)");
					}

					this.nFetch = this.hSqlDisk.FetchNext();
				}
				this.hSqlDisk.Commit();

				this.hSqlDisk.Disconnect();
				this.SetStatusBarText("");
			}
			else if (this.strSelect == "9x- Übergaben sperren") 
			{
				Int.PalFormSperren("Übergaben");
				this.PalPruefeSperre();
			}
			else if (this.strSelect == "9y- Monatsabschluß") 
			{
				frmMonatsAbschl.CreateWindow(this);
			}
			else if (this.strSelect == "9z- Übergaben erlauben") 
			{
				Int.PalFormErlauben("Übergaben");
				this.PalPruefeSperre();
			}
			else if (this.strSelect == "A - Abschlags-Vorschlag erstellen") 
			{
				this.nResult = Sal.MessageBox(@"Der alte Abschlags-Vorschlag wird gelöscht!
Weiter ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconExclamation));
				if (this.nResult == Sys.IDYES) 
				{
					Sal.WaitCursor(false);
					dlgAbschVor.ModalDialog(this);
				}
			}
			else if (this.strSelect == "B - Abschläge ändern") 
			{
				frmAbschVor.CreateWindow(this);
			}
			else if (this.strSelect == "C - Bank-Datei erstellen + Übergabe FiBu") 
			{
				Sal.WaitCursor(true);
				Int.SqlConnection(ref this.hSqlDisk);
				// 22.12.11 Ä696
				this.strSelect = @"SELECT avarztnr, avzahldm, abank, ablz, akonto, aname1, aiban, aland, abic, @STRING(atvnkonto,0)
INTO :frmFiBu.nTANr, :frmFiBu.nDMSoll, :frmFiBu.strTABank, :frmFiBu.strTABLZ, :frmFiBu.strTAKonto, :frmFiBu.strTAN1, :frmFiBu.strTAIBAN, :frmFiBu.strTALand, :frmFiBu.strTABIC, :frmFiBu.strBank
FROM av,a
WHERE avarztnr=aarztnr AND (akeingeld=0 OR akeingeld IS NULL)
ORDER by avarztnr";
				Int.SqlHandleExec(this.hSqlDisk, this.strSelect, "Fehler", ref Var.nCount);
				this.nFetch = this.hSqlDisk.FetchNext();
				while (this.nFetch != Sys.FETCH_EOF) 
				{
					if (this.strTAIBAN.Scan(" ") > -1)  // 16.11.15 Ä1275
					{
						this.strTAIBAN = Int.PalStringStrip(this.strTAIBAN, " ");
					}
					if (this.strTABIC.Scan(" ") > -1)  // 16.11.15 Ä1275
					{
						this.strTABIC = Int.PalStringStrip(this.strTABIC, " ");
					}

					// 17.11.10 OTF796 + SalStrLeftX(
					this.strTABLZ = Int.PalCheckBLZKonto(this.strTABLZ).Left(8);
					if (this.strTABIC == "") 
					{
						this.strTABIC = Int.PalGetBIC(this.strTABLZ);
					}
					this.strTAKonto = Int.PalCheckBLZKonto(this.strTAKonto).Left(10);
					if (this.strTALand == "") 
					{
						this.strTALand = "DE";
					}
					if (this.strTAIBAN == "" || !(Int.PalIBANPruef(this.strTAIBAN))) 
					{
						this.strTAIBAN = Int.PalIBAN(this.strTALand, this.strTABLZ, this.strTAKonto);
					}
					// If SalStrScan( strTABank, 'POST') != -1
					// Set strBank = '11000'
					// If SalStrScan( strTABank, 'VOLKS') != -1
					// Set strBank = '12400'
					// Else
					// Set strBank = '12000'
					// 13.02.17 Ä1496
					this.strBank = "15400";
					// 07.12.06 Ä49
					if (this.strBank == "" || this.strBank == "0") 
					{
						this.strBank = "12000";
					}
					if (this.strTAIBAN == "" || this.strTABIC == "")  // 14.01.14
					{
						Sal.MessageBox("IBAN oder BIC fehlen. Abschlag wird für Mitglied " + this.nTANr.ToString(0) + " nicht durchgeführt.", "Daten fehlen", (Sys.MB_Ok | Sys.MB_IconExclamation));
					}
					else
					{
						// Bank in AV setzen (12000, 12400 oder 11000)
						Int.SqlImmedX("UPDATE av SET avbank = :frmFiBu.strBank WHERE avarztnr = :frmFiBu.nTANr");

						this.nKonto = Int.PalValNum(this.strBank);
						Int.SqlImmedSel(@"SELECT bsname, bsblz, bskonto
INTO  :frmFiBu.strTVBank, :frmFiBu.strTVBLZ, :frmFiBu.strTVKonto
FROM bs
WHERE bsnr = :frmFiBu.nKonto");

						this.strTVBLZ = Int.PalCheckBLZKonto(this.strTVBLZ);
						this.strTVKonto = Int.PalCheckBLZKonto(this.strTVKonto);
						this.strTVIBAN = Int.PalIBAN("DE", this.strTVBLZ, this.strTVKonto);
						this.strTVBIC = Int.PalGetBIC(this.strTVBLZ);
						// 23.10.97
						this.strTABLZ = Int.PalCheckBLZKonto(this.strTABLZ);
						this.strTAKonto = Int.PalCheckBLZKonto(this.strTAKonto);
						// 16.07.19 Ä1860 + ueexportnr
						App.frmMain.nUeberwNr = Int.PalGetProfileInt("BH", "Ueberweisungsnummer", 1);
						// 26.07.16 Ä1393
						// Set strBuchText = 'Abschlag (' || PalStrNum(nTANr,4,0) || ')'
						this.strBuchText = "Guthaben (" + Int.PalStrNum(this.nTANr, 4, 0) + ")";
						// 31.10.06 F73
						this.strTAN1 = this.strTAN1.Left(30);
						Int.SqlImmedX(@" INSERT INTO ue
(uetvnr, uetvbank, uetvblz, uetvkonto,
uetabank, uetablz, uetakonto,
uetaname, ueverw1,  uedm, uemanuell, uetviban, uetaiban, uetvbic, uetabic,
ueexportnr)
VALUES (:frmFiBu.nKonto, :frmFiBu.strTVBank, :frmFiBu.strTVBLZ, :frmFiBu.strTVKonto,
:frmFiBu.strTABank, :frmFiBu.strTABLZ, :frmFiBu.strTAKonto,
:frmFiBu.strTAN1, :frmFiBu.strBuchText, :frmFiBu.nDMSoll, 0, :frmFiBu.strTVIBAN, :frmFiBu.strTAIBAN, :frmFiBu.strTVBIC, :frmFiBu.strTABIC,
:frmMain.nUeberwNr)");
						// AV Tierarzt - FiBu
						this.nKonto = Int.PalValNum(this.strBank);
						// 26.07.16 Ä1393
						// Set strBuchText = '+Ueberw.-Abschlag '
						this.strBuchText = "+Guthaben ";
						// 06.03.23 Ä2086
						Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
						if (this.dtBuchDat < Var.dtINIMinBuchDat) 
						{
							this.dtBuchDat = Var.dtINIMinBuchDat;
						}


						this.dtBuchDat = SalDateTime.Current;
						Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkkontocode)
VALUES (:frmFiBu.nTANr, 2, 0, :frmFiBu.strBuchText, 0, 0, 0,
:frmFiBu.dtBuchDat, :frmFiBu.nKonto, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, :frmFiBu.nDMSoll,
:frmFiBu.nDMSoll, 0, 'MonatsabschlGuthaben')");
						// AV Sachkonten - FiBu
						Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp,
fiexportnr)
VALUES (0, 17300,:frmFiBu.nKonto, :frmFiBu.nTANr, :frmFiBu.dtBuchDat, :frmFiBu.strBuchText,
:frmFiBu.nDMSoll, 8,
:frmMain.nUeberwNr)");
						// 18.12.17 Ä1663
						Int.SqlImmed("UPDATE a SET awotagltzt = SYSDATE WHERE aarztnr=:frmFiBu.nTANr");

						Int.SqlImmedX("DELETE FROM av WHERE avarztnr=:frmFiBu.nTANr");
						this.SetStatusBarText("Überweisung " + this.strTVBank + " Arzt-Nr. " + this.nTANr.ToString(0));
					}
					this.nFetch = this.hSqlDisk.FetchNext();
				}
				this.hSqlDisk.Commit();
				this.hSqlDisk.Disconnect();
				this.SetStatusBarText("");
			}
			else if (this.strSelect == "M - Myco - Pfizer-Rechnung") 
			{
				frmMycoBH.CreateWindow(this);
			}
			else if (this.strSelect == "X - Beiträge automatisch buchen") 
			{
				this.nResult = Sal.MessageBox(@"Soll der Buchungsvorgang
gestartet werden ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconExclamation));
				if (this.nResult == Sys.IDYES) 
				{
					// 13.01.14 Ä1009
					this.strBeitragText = "Mitgliedsbeitrag Moveta";
					Sal.WaitCursor(false);
					if (1 == dlgEinString.ModalDialog(this, "Beitragstext (max. 50 Zeichen)", ref this.strBeitragText)) 
					{
						while (this.strBeitragText.Length > 50) 
						{
							Sal.MessageBox("Der Text ist " + (this.strBeitragText.Length - 50).ToString(0) + " Zeichen zu lang. Bitte kürzen.", "Eingabe zu lang", (Sys.MB_Ok | Sys.MB_IconExclamation));
							dlgEinString.ModalDialog(this, "Beitragstext (max. 50 Zeichen)", ref this.strBeitragText);
						}

						Sal.WaitCursor(true);
						// 02.02.11
						Int.PalLog("Beiträge und Einlagen buchen");
						Int.PalLog(this.strBeitragText);

						Int.SqlConnection(ref this.hSqlDisk);
						// nDMSoll = Einlage     nDMHaben = Beitrag
						this.strSelect = @"SELECT aarztnr, aeinlage, abeitrag
INTO :frmFiBu.nTANr, :frmFiBu.nDMSoll, :frmFiBu.nDMHaben
FROM a
ORDER by aarztnr";
						Int.SqlHandleExec(this.hSqlDisk, this.strSelect, "Fehler", ref Var.nCount);
						this.nFetch = this.hSqlDisk.FetchNext();
						while (this.nFetch != Sys.FETCH_EOF) 
						{
							// Einlage	21.11.11 Ä660 auskommentiert
							// If nDMSoll = NUMBER_Null Or nDMSoll = 51.13
							// Set nDMSoll = 0
							// Else
							// Set nDMSoll = 51.13 - nDMSoll
							// If nDMSoll > 10.23
							// Set nDMSoll = 10.23
							// If nDMSoll != 0
							// Tierarzt - FiBu
							// Set strBuchText = 'Einlage'
							// Set dtBuchDat = SalDateCurrent()
							// Call SqlImmedX('INSERT INTO TK
							// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
							// tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
							// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
							// VALUES (:frmFiBu.nTANr, 0, 0, :frmFiBu.strBuchText, 0, 0, 0,
							// :frmFiBu.dtBuchDat, 17200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, :frmFiBu.nDMSoll,
							// :frmFiBu.nDMSoll, 0)')
							// Sachkonten - FiBu
							// Call SqlImmedX('INSERT INTO FI
							// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
							// VALUES (0, 16500, 17200, :frmFiBu.nTANr, :frmFiBu.dtBuchDat, :frmFiBu.strBuchText,
							// :frmFiBu.nDMSoll, 6)')
							// Arzt-Stamm
							// Call SqlImmedX('UPDATE A SET aeinlage = aeinlage + :frmFiBu.nDMSoll
							// WHERE aarztnr = :frmFiBu.nTANr')
							// Beitrag
							if (this.nDMHaben == SalNumber.Null || this.nDMHaben == 0) 
							{
								this.nDMSoll = 0;
							}
							else
							{
								this.nDMSoll = this.nDMHaben;
							}
							if (this.nDMSoll != 0) 
							{
								// Tierarzt - FiBu
								// 07.01.13 Ä870
								// Set strBuchText = 'Beitrag'
								// 13.01.14 Ä1009
								// Set strBuchText = 'Mitgliedsbeitrag tvn'
								this.strBuchText = this.strBeitragText;

								this.dtBuchDat = SalDateTime.Current;
								// 06.03.23 Ä2086
								Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
								if (this.dtBuchDat < Var.dtINIMinBuchDat) 
								{
									this.dtBuchDat = Var.dtINIMinBuchDat;
								}

								// 20.11.23 Ä2144 + tkkontocode
								Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkkontocode)
VALUES (:frmFiBu.nTANr, 0, 0, :frmFiBu.strBuchText, 0, 0, 0,
:frmFiBu.dtBuchDat, 81000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, :frmFiBu.nDMSoll,
:frmFiBu.nDMSoll, 0, 'MitglBeitrag')");
								// Sachkonten - FiBu
								Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16500, 81000, :frmFiBu.nTANr, :frmFiBu.dtBuchDat, :frmFiBu.strBuchText,
:frmFiBu.nDMSoll, 6)");
							}
							this.SetStatusBarText(" Arzt-Nr. " + this.nTANr.ToString(0));
							this.nFetch = this.hSqlDisk.FetchNext();
						}
						this.hSqlDisk.Commit();
						this.hSqlDisk.Disconnect();
					}
					this.SetStatusBarText("");
				}
			}
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void lbFiBuAktionen_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.lbFiBuAktionen.AddListItem("1 - Verarbeiten Rechng. / Mahnungen");
			this.lbFiBuAktionen.AddListItem("2 - Zahlungen der Halter");
			this.lbFiBuAktionen.AddListItem("2a - Retouren");
			this.lbFiBuAktionen.AddListItem("3 - Zahlungen ausbatchen");
			this.lbFiBuAktionen.AddListItem("4 - Rechnungen ausbuchen");
			this.lbFiBuAktionen.AddListItem("4a - Ausbuchung rückgängig machen");
			this.lbFiBuAktionen.AddListItem("5 - sonst. Buchungen");
			this.lbFiBuAktionen.AddListItem("5a - Pharmarechnungen"); // 01.10.21 Ä1974
			this.lbFiBuAktionen.AddListItem("6 - Buchen MB-Kosten");
			this.lbFiBuAktionen.AddListItem("7 - Bank-Clearing");
			this.lbFiBuAktionen.AddListItem("8 - Buchungskontrolle");
			this.lbFiBuAktionen.AddListItem("8a- TA-Konto durchsuchen");
			// 12.08.22 Ä2037 PalCheckBelastungDate(  )
			// If PalCheckBelastungDate(  )
			this.lbFiBuAktionen.AddListItem("9 - Belastungen an Mitglieder buchen");
			this.lbFiBuAktionen.AddListItem("9a - Mahngebühren ausbuchen");
			this.lbFiBuAktionen.AddListItem("9x- Übergaben sperren");
			this.lbFiBuAktionen.AddListItem("9y- Monatsabschluß");
			this.lbFiBuAktionen.AddListItem("9z- Übergaben erlauben");
			this.lbFiBuAktionen.AddListItem("--------------------------------------------------------");
			this.lbFiBuAktionen.AddListItem("A - Abschlags-Vorschlag erstellen");
			this.lbFiBuAktionen.AddListItem("B - Abschläge ändern");
			this.lbFiBuAktionen.AddListItem("C - Bank-Datei erstellen + Übergabe FiBu");
			this.lbFiBuAktionen.AddListItem("--------------------------------------------------------");
			this.lbFiBuAktionen.AddListItem("M - Myco - Pfizer-Rechnung");
			this.lbFiBuAktionen.AddListItem("X - Beiträge automatisch buchen");
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
	}
}
