// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// Rechnungen ausbuchen
	/// </summary>
	public partial class frmRechAusb : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlZa = SalSqlHandle.Null;
		public SalNumber nBuchDM = 0;
		public SalNumber nBuchDM2 = 0;
		public SalNumber nBuchDMHF = 0;
		public SalNumber nBuchDMRest = 0;
		public SalNumber nAusbuchDM = 0;
		public SalNumber nKZZahl = 0;
		public SalNumber nRkKZZahl = 0;
		public SalNumber nKZMwSt = 0;
		public SalNumber nProzMwSt = 0;
		public SalNumber nMGAusbuchen = 0;
		public SalNumber nKleinBetrag = 0;
		public SalNumber nSkonto = 0;
		public SalString strBuchText = "";
		public SalString strBuchTextDummy = "";
		public SalNumber nZaLeis = 0;
		public SalNumber nZaArzn = 0;
		public SalNumber nZaMahn = 0;
		public SalNumber nZaZins = 0;
		public SalNumber nZahlLeis = 0;
		public SalNumber nZahlArzn = 0;
		public SalNumber nZahlMahn = 0;
		public SalNumber nZahlZins = 0;
		public SalNumber nZahlMahnZins = 0;
		public SalNumber nDiverse = 0;
		public SalNumber nTVSMahnDM = 0;
		public SalNumber nTVSMahnGeb = 0;
		public SalBoolean bExists = false;
		public SalNumber nFetchRP = 0;
		public SalNumber nRPDM = 0;
		public SalNumber nRPZahl = 0;
		public SalNumber nRPMwSt = 0;
		public SalString strLA = "";
		public SalBoolean bOk = false;
		public SalNumber nProzNr = 0;
		public SalNumber nRatMtl = 0;
		public SalDateTime dtRatDat = SalDateTime.Null;
		public SalDateTime dtVerjDat = SalDateTime.Null;
		public SalDateTime dtDat = SalDateTime.Null;
		public SalNumber nMahnstufe = 0;
		public SalNumber nArztNr = 0;
		public SalNumber nArztNr2 = 0;
		public SalSqlHandle hSql530 = SalSqlHandle.Null;
		public SalNumber nFetch530 = 0;
		public SalString strSelect530 = "";
		public SalBoolean bHolenZM = false;
		public SalNumber nBankeinzug = 0;
		public SalNumber nZCount = 0;
		public SalSqlHandle hSqlMwSt = SalSqlHandle.Null;
		public SalNumber nFetchMwSt = 0;
		public SalNumber nRowMwSt = 0;
		public SalNumber nDummyMwSt = 0;
		public SalString strDummyMwStLA = "";
		public SalWindowHandle hWndCol = SalWindowHandle.Null;
		public SalString strROWIDMwSt = "";
		public SalNumber nMwStRpZahl = 0;
		public SalSqlHandle hSqlRePo = SalSqlHandle.Null;
		public SalSqlHandle hSqlUpdateRP = SalSqlHandle.Null;
		public SalNumber nRP1MwSt = 0;
		public SalNumber nMahnAus = 0;
		public SalNumber nZinsAus = 0;
		public SalNumber nMahnGes = 0;
		public SalNumber nZinsGes = 0;
		public SalSqlHandle hSqlMS7 = SalSqlHandle.Null;
		public SalNumber nIndex = 0;
		public SalNumber nDMHB = 0;
		public SalNumber nRZArztNr = 0;
		public SalNumber nRetHB = 0;
		public SalString strBankKonto = "";
		public SalDateTime dtBuchDat = SalDateTime.Null;
		public SalNumber nBBAnzahl = 0;
		public SalNumber nBBSumme = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmRechAusb()
		{
			// Assign global reference.
			App.frmRechAusb = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmRechAusb CreateWindow(Control owner)
		{
			frmRechAusb frm = new frmRechAusb();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmRechAusb FromHandle(SalWindowHandle handle)
		{
			return ((frmRechAusb)SalWindow.FromHandle(handle, typeof(frmRechAusb)));
		}
		#endregion
		
		#region Methods
		// Function: PalHoleMwSt
		// Description:
		// Returns
		// Parameters
		// Static Variables
		// Local variables
		// Actions
		// Call SqlConnection( hSqlMwSt )
		// If SqlPrepareAndExecute( hSqlMwSt, '
		// SELECT rpmwst, rpla, sum(rpdm), sum(rpdmzahl)
		// FROM RP
		// INTO :nProzMwSt, :strLA, :nRPDM, :nRPZahl
		// WHERE rparztnr = :frmRechAusb.dfArztNr AND rphalternr = :frmRechAusb.dfHalterNr
		// AND rprechnr = :frmRechAusb.dfRechNr
		// AND rpmwst IS NOT NULL
		// AND rpla IS NOT NULL
		// GROUP BY 1,2' )
		// Call SalTblReset( tblMwSt )
		// While SqlFetchNext( hSqlMwSt, nFetchMwSt )
		// Set nDiverse = SalNumberRound((nRPDM - nRPZahl)*100 + (nRPDM - nRPZahl)*nProzMwSt) / 100
		// Set nRowMwSt = SalTblInsertRow( tblMwSt, TBL_MaxRow )
		// Call SalTblSetFocusRow( tblMwSt, nRowMwSt )
		// Set tblMwSt.colEUR = nDiverse
		// Set tblMwSt.colMwSt = nProzMwSt
		// Set tblMwSt.colLA = strLA
		// Call SalTblSetFocusRow( tblMwSt, TBL_MinRow )
		// Call SqlDisconnect( hSqlMwSt )
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnProzMwSt"></param>
		/// <param name="pnDiverse"></param>
		/// <param name="pnRP1MwSt"></param>
		/// <param name="pstrLA"></param>
		/// <param name="pnReverseVersion"></param>
		/// <param name="pnRPZahl"></param>
		/// <returns></returns>
		public SalNumber UpdateRechPosition(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnRechNr, SalNumber pnProzMwSt, SalNumber pnDiverse, SalNumber pnRP1MwSt, SalString pstrLA, SalNumber pnReverseVersion, SalNumber pnRPZahl)
		{
			#region Local Variables
			SqlLocals.UpdateRechPositionLocals locals = new SqlLocals.UpdateRechPositionLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnRechNr = pnRechNr;
				locals.pnProzMwSt = pnProzMwSt;
				locals.pnDiverse = pnDiverse;
				locals.pnRP1MwSt = pnRP1MwSt;
				locals.pstrLA = pstrLA;
				locals.pnReverseVersion = pnReverseVersion;
				locals.pnRPZahl = pnRPZahl;

				// 02.12.14 Ä1104
				if (locals.pnReverseVersion == SalNumber.Null) 
				{
					locals.pnSelect = @"SELECT ROWID
FROM RP
INTO :strROWIDLocal
WHERE rparztnr = :pnArztNr
AND rprechnr = :pnRechNr
AND rpmwst = :pnProzMwSt
AND rpla = :pstrLA
AND rpreverseversion IS NULL";
				}
				else
				{
					locals.pnSelect = @"SELECT ROWID
FROM RP
INTO :strROWIDLocal
WHERE rparztnr = :pnArztNr
AND rprechnr = :pnRechNr
AND rpmwst = :pnProzMwSt
AND rpla = :pstrLA
AND rpreverseversion = :pnReverseVersion";
				}

				if (locals.phSql.PrepareAndExecute(locals.pnSelect)) 
				{
					if (locals.phSql.FetchNext(ref locals.nInd)) 
					{
						locals.pnDiverse = locals.pnRPZahl + (locals.pnDiverse - locals.pnRP1MwSt);
						if (locals.phSql.PrepareAndExecute(@"
UPDATE RP SET
rpdmzahl = :pnDiverse
WHERE ROWID = :strROWIDLocal")) 
						{
							locals.phSql.Commit();
						}
					}
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="phSql"></param>
		/// <param name="pnArztNr"></param>
		/// <param name="pnHalterNr"></param>
		/// <param name="pnRechNr"></param>
		/// <param name="pnZahlDM"></param>
		/// <returns></returns>
		public SalNumber CheckRechAb(SalSqlHandle phSql, SalNumber pnArztNr, SalNumber pnHalterNr, SalNumber pnRechNr, SalNumber pnZahlDM)
		{
			#region Local Variables
			SqlLocals.CheckRechAbLocals locals = new SqlLocals.CheckRechAbLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.phSql = phSql;
				locals.pnArztNr = pnArztNr;
				locals.pnHalterNr = pnHalterNr;
				locals.pnRechNr = pnRechNr;
				locals.pnZahlDM = pnZahlDM;

				Sql.Exists(@"
SELECT *
FROM ra
WHERE raarztnr = :pnArztNr AND rahalternr = :pnHalterNr AND rarechnr = :pnRechNr", ref locals.bExists);
				if (locals.bExists) 
				{
					if (locals.phSql.PrepareAndExecute(@"
SELECT hti, hvn, hnn, hname2, hstr, hort, hland
FROM h
INTO :pstrTHTi, :pstrTHVN, :pstrTHNN, :pstrTHN2, :pstrTHStr, :pstrTHOrt, :pstrTHLand
WHERE harztnr = :pnArztNr
AND hhalternr = :pnHalterNr AND hdeaktiv IS NULL")) 
					{
						locals.nInd = locals.phSql.FetchNext();
					}
					// 10.04.06 Ländercodes
					locals.pstrTHLand = Int.PalPruefeLC(locals.pstrTHLand, 0);

					// 06.08.08
					if (Var.bfrmBriefVari) 
					{
						while (!(App.frmBriefVari.DestroyWindow())) 
						{
						}
					}

					frmBriefVari.CreateWindow(this, locals.pnArztNr, locals.pnHalterNr, locals.pnRechNr, "R", @"Sehr geehrte Damen und Herren,

heute wurde an uns durch die Tierarztpraxis eine Ausbuchung in Höhe von EUR " + locals.pnZahlDM.ToString(2) + " für die Rechnung " + locals.pnArztNr.ToString(0) + "/R" + locals.pnRechNr.ToString(0) + @" gemeldet und hier gebucht.

Der Schuldner ist :

" + locals.pstrTHTi + locals.pstrTHVN + " " + locals.pstrTHNN + @"
" + locals.pstrTHN2 + @"
" + locals.pstrTHStr + @"
" + locals.pstrTHOrt + @"
" + locals.pstrTHLand + @"


Wir bitten um Beachtung !", new SalDateTime(1900, 1, 1), "", "", "", "", "", false);
					Sal.MessageBox("Ok wenn gedruckt", "Druck Ok?", Sys.MB_Ok);
				}

				return 0;
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmRechAusb WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRechAusb_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmRechAusb_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmRechAusb_OnSAM_Close(sender, e);
					break;
				
				case Sys.SAM_CreateComplete:
					this.frmRechAusb_OnSAM_CreateComplete(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRechAusb_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			Sal.ColorSet(this.cbEL, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			Int.SqlConnection(ref this.hSqlZa);
			// 03.08.15 Ä1233
			Int.SqlConnection(ref this.hSqlMS7);

			this.df1234.Number = 0;
			this.dfBuchDat.DateTime = SalDateTime.Current;
			// 28.05.21 Ä1962
			// Set cmbBuchText = 'Storno lt. M'
			this.cmbBuchText.Text = "Storno lt. Mitglied";
			// 530
			Int.SqlConnection(ref this.hSql530);
			// 16.02.15 Ä948
			this.hSqlRePo.Connect();
			this.hSqlRePo.SetParameter(Sys.DBP_PRESERVE, 1, "");
			this.hSqlUpdateRP.Connect();
			this.hSqlUpdateRP.SetParameter(Sys.DBP_PRESERVE, 1, "");
			// 15.01.19 E-Mail JA 15.01.18
			this.dfBelNr.Number = 1;
			// 15.05.19 F4485
			this.rbHKZins.Checked = true;

			Sal.WaitCursor(false);

			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRechAusb_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSql530.Disconnect();
			this.hSqlZa.Disconnect();
			// 03.08.15 Ä1233
			this.hSqlMS7.Disconnect();

			// 16.02.15 Ä948
			this.hSqlRePo.Disconnect();
			this.hSqlUpdateRP.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRechAusb_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			#endregion
		}
		
		/// <summary>
		/// dfZahlDM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfZahlDM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfZahlDM_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfZahlDM_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 17.04.09 OTÄ204
			this.dfProzNr.Clear();
			#endregion
		}
		
		/// <summary>
		/// cbBar WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbBar_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbBar_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbBar_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.cmbBuchText.Text = "Barzahlung bei Mitglied";
			#endregion
		}
		
		/// <summary>
		/// dfProzNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfProzNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfProzNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfProzNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfProzDatum.Clear();
			// 16.06.15 F2429
			this.dfRechNr.Clear();
			this.dfHalterNr.Clear();
			this.tblRechnungen.ResetTable();

			Int.SqlIstDa(" from pr where prnr=:frmRechAusb.dfProzNr", ref this.bOk);
			if (this.bOk) 
			{
				Int.SqlImmedSel(@"SELECT prdatum, prarztnr, prhalternr
into :frmRechAusb.dfProzDatum,  :frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr
from pr where prnr=:frmRechAusb.dfProzNr");
				if (this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0)) 
				{
				}
				this.dfHalterNr.PostMessage(Sys.SAM_Validate, 0, 0);
			}
			else
			{
				Sal.MessageBox(@"angegebene PR-Nr.
ist nicht vorhanden !", "PR falsch", (Sys.MB_Ok | Sys.MB_IconStop));
				this.dfProzNr.Clear();
			}
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 16.06.15 F2429
			this.dfRechNr.Clear();
			// Call SalClearField( dfHalterNr )
			this.tblRechnungen.ResetTable();

			// 24.11.99 ,anr2
			Int.SqlImmedSel(@"SELECT aname1, anr2
into :frmRechAusb.dfArztName, :frmRechAusb.nArztNr2
from A where aarztnr=:frmRechAusb.dfArztNr");
			this.nArztNr = this.dfArztNr.Number;
			if (this.nArztNr2 == SalNumber.Null || this.nArztNr2 == 0) 
			{
				this.nArztNr2 = this.dfArztNr.Number;
			}

			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			// 16.06.15 F2429
			this.dfRechNr.Clear();
			this.tblRechnungen.ResetTable();

			Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hbankeinzug
into :frmRechAusb.dfHalterName, :frmRechAusb.nBankeinzug
from H where  harztnr = :frmRechAusb.dfArztNr AND hhalternr = :frmRechAusb.dfHalterNr AND hdeaktiv IS NULL ");
			// 29.06.09 OTÄ130 Bankeinzug
			if (this.nBankeinzug == 1) 
			{
				this.dfSBankeinzug.Text = "Bankeinzug: ja";
			}
			else
			{
				this.dfSBankeinzug.Text = "";
			}

			// 16.06.00

			// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
			SalBoolean temp1 = this.cbEL.Checked;
			Int.SqlIstDa(@" FROM EL WHERE elhalternr=:frmRechAusb.dfHalterNr
and elarztnr=:frmRechAusb.dfArztNr and elerledigt = 'N' ", ref temp1);
			this.cbEL.Checked = temp1;

			if (this.cbEL.Checked == true) 
			{
				Sal.ColorSet(this.cbEL, Sys.COLOR_IndexWindow, Sys.COLOR_White);
			}
			else
			{
				Sal.ColorSet(this.cbEL, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			}
			// 06.09.16
			this.dfSum.Number = 0;
			this.dfSumHF.Number = 0;
			this.dfSumMG.Number = 0;
			this.dfSumZI.Number = 0;

			this.tblRechnungen.Populate(this.hSqlZa, @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkdmleis, rkdmarzn, (rkdmmahn+rkmbdmopl), rkdmzins,
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins),rkmahnstufe
INTO :frmRechAusb.tblRechnungen.colnArztNr,
:frmRechAusb.tblRechnungen.colnHalterNr,
:frmRechAusb.tblRechnungen.colnRechNr,
:frmRechAusb.tblRechnungen.coldtRechDat,
:frmRechAusb.tblRechnungen.colnDMLeis,
:frmRechAusb.tblRechnungen.colnDMArzn,
:frmRechAusb.tblRechnungen.colnDMMahn,
:frmRechAusb.tblRechnungen.colnDMZins,
:frmRechAusb.tblRechnungen.colnDMRest,
:frmRechAusb.tblRechnungen.colnMS
FROM RK
WHERE " + Int.PalArztNr("rk", this.nArztNr, this.nArztNr2) + @"  AND rkhalternr = :frmRechAusb.dfHalterNr AND
rkkzzahl not in (2,3,4,5) AND
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)<>0 AND rkdeaktiv IS NULL
ORDER BY rkrechdat", Sys.TBL_FillAll);
			// 21.12.11 Ä688
			this.dfHaltersaldo.Number = Sys.NUMBER_Null;
			Int.SqlImmedSel("SELECT sum(hbdm) INTO :frmRechAusb.dfHaltersaldo FROM hb WHERE " + Int.PalArztNr("hb", this.nArztNr, this.nArztNr2) + " AND hbhalternr = :frmRechAusb.dfHalterNr");
			this.dfHaltersaldo.Number = this.dfHaltersaldo.Number * -1;

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// dfRechNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRechNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfHalterNr.IsEmpty()) 
			{
				Int.SqlImmedSel(@"SELECT rkrechdat, rkdmleis, rkdmarzn, (rkdmmahn+rkmbdmopl), rkdmzins,
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins),rkmahnstufe, rkverjaehr, rkhalternr
INTO :frmRechAusb.dfRechDat,
:frmRechAusb.dfDMLeis,
:frmRechAusb.dfDMArzn,
:frmRechAusb.dfDMMahn,
:frmRechAusb.dfDMZins,
:frmRechAusb.dfDMRest,
:frmRechAusb.dfMS, :frmRechAusb.dfVerjDat, :frmRechAusb.dfHalterNr
FROM RK
WHERE rkarztnr = :frmRechAusb.dfArztNr
AND rkrechnr = :frmRechAusb.dfRechNr AND
rkkzzahl not in (2,3,4,5) AND
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)<>0 AND rkdeaktiv IS NULL ");
			}
			else
			{
				Int.SqlImmedSel(@"SELECT rkrechdat, rkdmleis, rkdmarzn, (rkdmmahn+rkmbdmopl), rkdmzins,
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins),rkmahnstufe, rkverjaehr
INTO :frmRechAusb.dfRechDat,
:frmRechAusb.dfDMLeis,
:frmRechAusb.dfDMArzn,
:frmRechAusb.dfDMMahn,
:frmRechAusb.dfDMZins,
:frmRechAusb.dfDMRest,
:frmRechAusb.dfMS, :frmRechAusb.dfVerjDat
FROM RK
WHERE rkarztnr = :frmRechAusb.dfArztNr AND rkhalternr = :frmRechAusb.dfHalterNr
AND rkrechnr = :frmRechAusb.dfRechNr AND
rkkzzahl not in (2,3,4,5) AND
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)<>0 AND rkdeaktiv IS NULL ");

				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalBoolean temp1 = this.cbZettel.Checked;
				Int.SqlIstDa(@" FROM Z WHERE zhalternr=:frmRechAusb.dfHalterNr
and zarztnr=:frmRechAusb.dfArztNr and zrechnr=:frmRechAusb.dfRechNr AND zdeaktiv IS NULL", ref temp1);
				this.cbZettel.Checked = temp1;

				if (this.cbZettel.Checked == true) 
				{
					Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
				}
				else
				{
					Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				}
				// 16.06.00

				// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
				SalBoolean temp2 = this.cbEL.Checked;
				Int.SqlIstDa(@" FROM EL WHERE elhalternr=:frmRechAusb.dfHalterNr
and elarztnr=:frmRechAusb.dfArztNr and elerledigt = 'N' ", ref temp2);
				this.cbEL.Checked = temp2;

				if (this.cbEL.Checked == true) 
				{
					Sal.ColorSet(this.cbEL, Sys.COLOR_IndexWindow, Sys.COLOR_White);
				}
				else
				{
					Sal.ColorSet(this.cbEL, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
				}
			}
			// 08.04.13 Ä906
			this.nZCount = 0;
			// 16.07.12 F1360 AND rzphalternr = :frmZahlHalter.dfHalterNr
			// 06.01.13 Ä1005
			// Call SqlImmedSel('SELECT count(*) INTO :frmRechAusb.nZCount FROM rzp WHERE rzparztnr = :frmRechAusb.dfArztNr
			// AND rzphalternr = :frmRechAusb.dfHalterNr AND rzprechnr = :frmRechAusb.dfRechNr')
			this.nZCount = Int.SqlGetAnzahl(@"FROM rzp WHERE rzparztnr = :frmRechAusb.dfArztNr
AND rzphalternr = :frmRechAusb.dfHalterNr AND rzprechnr = :frmRechAusb.dfRechNr");
			if (this.nZCount >= 1) 
			{
				if (this.dfRZNr.Number == Sys.NUMBER_Null) 
				{
					Int.SqlImmedSel(@"SELECT rzpnr INTO :frmRechAusb.dfRZNr FROM rzp WHERE rzparztnr = :frmRechAusb.dfArztNr
AND rzphalternr = :frmRechAusb.dfHalterNr AND rzprechnr = :frmRechAusb.dfRechNr ORDER BY rzpnr DESC");
				}
			}
			// 29.10.14 Ä948
			// Call PalHoleMwSt(  )
			// 16.04.15 Ä1188
			Int.SqlImmedSel(@"SELECT rkzamahn, rkzazins, rkdmmahn-rkzamahn, rkdmzins-rkzazins INTO :frmRechAusb.nMahnGes, :frmRechAusb.nZinsGes, :frmRechAusb.nMahnAus, :frmRechAusb.nZinsAus FROM rk
WHERE rkarztnr = :frmRechAusb.dfArztNr AND rkhalternr = :frmRechAusb.dfHalterNr AND rkrechnr = :frmRechAusb.dfRechNr AND rkdeaktiv IS NULL");
			this.dfMGaus.Number = this.nMahnAus;
			this.dfZIaus.Number = this.nZinsAus;
			// 18.12.18 Ä1801
			this.nDiverse = 0;
			if (this.dfRechNr.Number >= 999990) 
			{
				Int.SqlImmedSel(@"SELECT SUM(rkmbdmopl-rkmbzaopl) INTO :frmRechAusb.nDiverse FROM rk
WHERE rkarztnr = :frmRechAusb.dfArztNr AND rkhalternr = :frmRechAusb.dfHalterNr AND rkrechnr = :frmRechAusb.dfRechNr AND rkdeaktiv IS NULL");
			}
			if (this.dfRechNr.Number >= 999990 && this.nDiverse > 0) 
			{
				this.pbMBcbez.ShowWindow();
			}
			else
			{
				this.pbMBcbez.HideWindow();
			}
			#endregion
		}
		
		/// <summary>
		/// dfMatch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMatch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfMatch_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMatch_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.SetStatusBarText("Suche läuft ...");
			tblHalter.CreateWindow(this, "frmRechAusb", this.dfArztNr.Number, 0, this.dfMatch.Text, "", "", "", "");
			this.SetStatusBarText("");
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfRechNr.Number == 0 || this.dfRechNr.Number == Sys.NUMBER_Null)  // 23.07.15 F2436
			{
				Sal.MessageBox("Bitte Rechnungsnummer angeben.", "Fehlende Rechnungsnr.", Sys.MB_Ok);
			}
			else if (this.dfDMRest.IsEmpty()) 
			{
				Sal.MessageBox("Es gibt keinen auszubuchenden Betrag !", "Kein Ausbuchungsbetrag", Sys.MB_Ok);
			}
			else if (this.dfZahlDM.Number == 0.00m || this.dfZahlDM.Number == Sys.NUMBER_Null)  // 07.01.13 F1461 +  or dfZahlDM = NUMBER_Null
			{
				Sal.MessageBox("Ungültiger Betrag !", "Falscher Betrag", Sys.MB_Ok);
			}
			else if (this.dfHalterNr.IsEmpty() && this.dfRechNr.Number >= 999990) 
			{
				Sal.MessageBox("Für MB-Sammler wird Halter-Nr. benötigt !", "Fehlende Halter-Nr.", Sys.MB_Ok);
			}
			else
			{
				// 27.09.23 Ä2130
				Int.SqlImmedSel(@"SELECT COUNT(*), SUM(bbzahldm) INTO :frmRechAusb.nBBAnzahl, :frmRechAusb.nBBSumme
FROM bb WHERE bbarztnr = :frmRechAusb.dfArztNr AND bbhalternr = :frmRechAusb.dfHalterNr AND bbrechnr = :frmRechAusb.dfRechNr");
				if (this.nBBSumme == SalNumber.Null) 
				{
					this.nBBSumme = 0;
				}
				if (this.nBBSumme > 0) 
				{
					if (Sys.IDYES == Sal.MessageBox("Es gibt im Batch " + this.nBBAnzahl.ToString(0) + " Buchung(en) mit € " + this.nBBSumme.ToString(2) + @".
Soll(en) die Zahlung(en) aus dem Batch gelöscht werden?", "Zahlung aus Batch löschen?", (Sys.MB_IconQuestion | Sys.MB_YesNo))) 
					{
						Int.SqlImmed("DELETE FROM bb WHERE bbarztnr = :frmRechAusb.dfArztNr AND bbhalternr = :frmRechAusb.dfHalterNr AND bbrechnr = :frmRechAusb.dfRechNr");
						this.nBBSumme = 0;
						Int.PalLog("RechAusb BatchLoe Ja " + this.nBBAnzahl.ToString(0) + " Buchung(en) mit € " + this.nBBSumme.ToString(2) + " " + this.dfArztNr.Number.ToString(0) + "/H" + this.dfHalterNr.Number.ToString(0) + "/R" + this.dfRechNr.Number.ToString(
								0));
					}
					else
					{
						this.nBBSumme = 0;
						Int.PalLog("RechAusb BatchLoe Nein " + this.nBBAnzahl.ToString(0) + " Buchung(en) mit € " + this.nBBSumme.ToString(2) + " " + this.dfArztNr.Number.ToString(0) + "/H" + this.dfHalterNr.Number.ToString(0) + "/R" + this.dfRechNr.Number.ToString(
								0));
					}
				}
				if (this.nBBSumme == 0) 
				{
					// #16 kein leeres Buchungsdatum mehr erlauben
					if (this.dfBuchDat.DateTime == Sys.DATETIME_Null) 
					{
						this.dfBuchDat.DateTime = SalDateTime.Current;
					}

					// 07.01.99
					if (this.dfRechNr.Number >= 999990)  // 07.01.99
					{
						this.nProzNr = this.dfProzNr.Number;
					}
					else
					{
						// Call SqlImmed( '
						// SELECT prnr
						// FROM pr
						// INTO :frmRechAusb.nProzNr
						// WHERE ((pra1 = :frmRechAusb.dfArztNr AND prr1 = :frmRechAusb.dfRechNr)
						// OR (pra2 = :frmRechAusb.dfArztNr AND prr2 = :frmRechAusb.dfRechNr)
						// OR (pra3 = :frmRechAusb.dfArztNr AND prr3 = :frmRechAusb.dfRechNr)
						// OR (pra4 = :frmRechAusb.dfArztNr AND prr4 = :frmRechAusb.dfRechNr)
						// OR (pra5 = :frmRechAusb.dfArztNr AND prr5 = :frmRechAusb.dfRechNr)
						// OR (pra6 = :frmRechAusb.dfArztNr AND prr6 = :frmRechAusb.dfRechNr))')
						// 11.11.02
						this.nProzNr = SalNumber.Null;
						// 11.03.02
						Int.SqlImmedSel(@"
SELECT prdnr
FROM prd
INTO :frmRechAusb.nProzNr
WHERE prdarztnr = :frmRechAusb.dfArztNr AND prdrechnr = :frmRechAusb.dfRechNr");
					}

					if (this.dfMS.Number > 6) 
					{
						Sal.MessageBox(" MS " + this.dfMS.Number.ToString(0) + "!!!!", "", Sys.MB_Ok);
					}
					Int.SqlImmedSel(@"SELECT amgausbuchen, akleinbetrag
INTO :frmRechAusb.nMGAusbuchen, :frmRechAusb.nKleinBetrag
FROM A
WHERE AARZTNR = :frmRechAusb.dfArztNr");
					// Call SqlIstDa(' FROM MG
					// WHERE MGARZTNR = :frmRechAusb.dfArztNr',bExists)
					// If bExists
					// Call SqlImmedSel('SELECT mgdmabr INTO :frmRechAusb.nTVSMahnGeb
					// FROM MG
					// WHERE MGARZTNR = :frmRechAusb.dfArztNr')
					// Else
					// Call SqlImmedSel('SELECT mgdmabr INTO :frmRechAusb.nTVSMahnGeb
					// FROM MG
					// WHERE MGARZTNR = 0')
					this.nBuchDM = 0.00m;
					this.nAusbuchDM = 0.00m;
					this.SetStatusBarText("Rech-Nr.: " + this.dfArztNr.Number.ToString(0) + "/" + this.dfHalterNr.Number.ToString(0) + "/" + this.dfRechNr.Number.ToString(0));
					if (this.dfHalterNr.IsEmpty()) 
					{
						Int.SqlImmedSel(@"SELECT rkzaleis,rkzaarzn,rkzamahn, rkzazins,rkhalternr, rkkzzahl, rkmahnstufe, rkverjaehr
INTO :frmRechAusb.nZaLeis, :frmRechAusb.nZaArzn,
:frmRechAusb.nZaMahn, :frmRechAusb.nZaZins, :frmRechAusb.dfHalterNr, :frmRechAusb.nRkKZZahl, :frmRechAusb.nMahnstufe, :frmRechAusb.dtVerjDat
FROM RK
WHERE  rkarztnr = :frmRechAusb.dfArztNr
AND rkrechnr = :frmRechAusb.dfRechNr AND rkdeaktiv IS NULL");
					}
					else
					{
						if (this.dfRechNr.Number >= 999990) 
						{
							Int.SqlImmedSel(@"SELECT rkzaleis,rkzaarzn,rkmbzaopl, rkzazins,rkhalternr, rkkzzahl, rkmahnstufe, rkverjaehr
INTO :frmRechAusb.nZaLeis, :frmRechAusb.nZaArzn,
:frmRechAusb.nZaMahn, :frmRechAusb.nZaZins, :frmRechAusb.dfHalterNr, :frmRechAusb.nRkKZZahl, :frmRechAusb.nMahnstufe, :frmRechAusb.dtVerjDat
FROM RK
WHERE  rkarztnr = :frmRechAusb.dfArztNr
AND rkhalternr = :frmRechAusb.dfHalterNr
AND rkrechnr = :frmRechAusb.dfRechNr AND rkdeaktiv IS NULL");
						}
						else
						{
							Int.SqlImmedSel(@"SELECT rkzaleis,rkzaarzn,rkzamahn, rkzazins, rkkzzahl, rkmahnstufe, rkverjaehr
INTO :frmRechAusb.nZaLeis, :frmRechAusb.nZaArzn,
:frmRechAusb.nZaMahn, :frmRechAusb.nZaZins, :frmRechAusb.nRkKZZahl, :frmRechAusb.nMahnstufe, :frmRechAusb.dtVerjDat
FROM RK
WHERE  rkarztnr = :frmRechAusb.dfArztNr
AND rkhalternr = :frmRechAusb.dfHalterNr
AND rkrechnr = :frmRechAusb.dfRechNr AND rkdeaktiv IS NULL");
						}
					}
					// 12.10.99 lt. Fr. Seil + Fr. Kollay darf bei MB's keine Ausbuchung der Ausbuchung stattfinden
					if (this.dfRechNr.Number >= 999990 || this.nMahnstufe == 9) 
					{
						this.nMGAusbuchen = 0;
						this.nKleinBetrag = 0;
						this.nSkonto = 0;
					}

					// 0=offen   1=TZ    2=VZ   3=VZ / MG ausgb. 4=ausgebucht
					// 04.12.08 F431 + SalNumberAbs
					if (this.dfZahlDM.Number.Abs() < this.dfDMRest.Number.Abs()) 
					{
						this.nBuchDM = this.dfZahlDM.Number;
						this.dfDMRest.Number = this.dfDMRest.Number - this.dfZahlDM.Number;
						if (this.dfDMRest.Number.Abs() <= this.dfDMMahn.Number.Abs() + this.nKleinBetrag && this.dfRechNr.Number < 999990) 
						{
							// 19.10.99
							if (this.nMGAusbuchen == 1 || this.dfDMMahn.Number == 0.00m) 
							{
								// Achtung: nAusbuchDM nur mit MG + Kleinbetrag füllen !
								this.nAusbuchDM = this.dfDMMahn.Number + this.nKleinBetrag;
								if (this.dfDMRest.Number - this.nAusbuchDM < 0.00m) 
								{
									this.nAusbuchDM = this.dfDMRest.Number;
								}
								this.dfDMRest.Number = this.dfDMRest.Number - this.nAusbuchDM;
							}
						}
						this.dfZahlDM.Number = 0.00m;
					}
					else if (this.dfZahlDM.Number == this.dfDMRest.Number) 
					{
						this.nBuchDM = this.dfZahlDM.Number;
						this.dfDMRest.Number = 0.00m;
						this.nRkKZZahl = 4;
						this.dfZahlDM.Number = 0.00m;
					}
					else if (this.dfZahlDM.Number.Abs() > this.dfDMRest.Number.Abs()) 
					{
						this.nBuchDM = this.dfDMRest.Number;
						this.dfDMRest.Number = 0.00m;
						this.dfZahlDM.Number = this.dfZahlDM.Number - this.nBuchDM;
						this.nRkKZZahl = 4;
					}

					Sal.WaitCursor(true);
					// 27.07.15 Ä1233
					// If dfMS = 7
					// If BriefMS7(hSqlMS7, dfArztNr, dfHalterNr, dfRechNr, nBuchDM)
					if (this.CheckRechAb(this.hSqlMS7, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRechNr.Number, this.nBuchDM)) 
					{
					}

					this.nKZZahl = 4;
					this.strBuchText = ((SalString)this.cmbBuchText.Text).Left(4) + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0) + "/" + Int.PalStrNum(this.dfRechNr.Number, 5, 0);
					this.strBuchText = this.strBuchText.Left(20);
					this.df4.Number = this.df3.Number;
					this.df3.Number = this.df2.Number;
					this.df2.Number = this.df1.Number;
					this.df1.Number = this.nBuchDM;
					this.df1234.Number = this.df1234.Number + this.nBuchDM;
					this.nDiverse = this.nBuchDM;
					this.SetStatusBarText("Sachkonten-Buchungen");
					// 07.05.14 Ä965 + zarznr
					// 13.05.14 F2027
					this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

					// 26.03.19 Ä1844 + , zaerfdat
					// 05.11.19 F4540 und Insert nach unten
					this.nBuchDM2 = this.nBuchDM;
					this.nBuchDMHF = 0;
					this.nBuchDMRest = 0;
					// Call SqlImmedX('INSERT INTO ZA
					// (zaarztnr,zahalternr,zarechnr,zakz,zabuchdat,zabelegnr,zadm, zaproznr, zabuchtext, zarznr, zaerfdat)
					// VALUES (:frmRechAusb.dfArztNr,
					// :frmRechAusb.dfHalterNr,
					// :frmRechAusb.dfRechNr,
					// :frmRechAusb.nKZZahl,
					// :frmRechAusb.dfBuchDat,
					// :frmRechAusb.dfBelNr,
					// :frmRechAusb.nBuchDM,
					// :frmRechAusb.nProzNr,
					// :frmRechAusb.cmbBuchText,
					// :frmRechAusb.dfRZNr, SYSDATETIME)')

					// 28.09.99 bei ratenzahlern und bar nächstes Ratendatum rausschieben
					// Call SqlIstDa('FROM r
					// WHERE rarztnr = :frmRechAusb.dfArztNr
					// AND rhalternr = :frmRechAusb.dfHalterNr', bExists )
					// If bExists
					// If cbBar
					// Call SalStatusSetText(hWndForm, 'Ratenzahler')
					// If dfDMRest != 0
					// Call SqlImmedSel('
					// SELECT rmtl INTO :frmRechAusb.nRatMtl FROM R
					// WHERE rarztnr = :frmRechAusb.dfArztNr
					// AND rhalternr = :frmRechAusb.dfHalterNr' )
					// Set dtRatDat = dfBuchDat + nRatMtl*30
					// Call SqlImmed( '
					// UPDATE r SET
					// r1 = :frmRechAusb.dtRatDat
					// WHERE  rarztnr = :frmRechAusb.dfArztNr
					// AND rhalternr = :frmRechAusb.dfHalterNr' )
					// Else
					// Call PalLog('RaZa autom. gekündigt: Ha.'
					// || PalStrNum(dfArztNr, 4, 0) || '/' || PalStrNum(dfHalterNr, 5,0))
					// Call SqlImmed( '
					// DELETE FROM r
					// WHERE  rarztnr = :frmRechAusb.dfArztNr
					// AND rhalternr = :frmRechAusb.dfHalterNr' )
					// am 03.04.06 nach unten verschoben, da RaZa gelöscht wurde, wenn auch nur die angespeochene Rg bezahlt war und anderes noch offen war
					// Set nBuchDM = nBuchDM * -1
					// Call SalStatusSetText(hWndForm,'TA-Buchungen')
					// 21.10.14 Ä948 + MwSt
					// If SalTblQueryFocus( tblMwSt, nRowMwSt, hWndCol )
					// Set nDummyMwSt = tblMwSt.colMwSt
					// Set strDummyMwStLA = tblMwSt.colLA
					// Else
					// Set nDummyMwSt = PalCheckAuslMwSt( dfArztNr )
					// Set strDummyMwStLA = 'X'
					// 17.12.07 F318: Satzart TKSA von 0 in 3 geändert
					// Call SqlImmedX('INSERT INTO TK
					// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
					// tkkontonr, tkrechdm, tkkzhaben, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
					// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tktavst)
					// VALUES (:frmRechAusb.dfArztNr, 3, 0, :frmRechAusb.cmbBuchText,
					// :frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBelNr,
					// :frmRechAusb.dfBuchDat, 0,0,0 , 0,
					// 0,0, 0,0, 0, 0, :frmRechAusb.nBuchDM,0, 0, :frmRechAusb.nDummyMwSt)')
					// Set nBuchDM = nBuchDM * -1
					// XXXX
					// ----ZA LEIS-----
					// Set nDiverse = dfDMLeis - nZaLeis
					// If nDiverse > nBuchDM
					// Set nDiverse = nBuchDM
					// Set nZahlLeis = nDiverse
					// Set nZaLeis = nZaLeis + nDiverse
					// Set nBuchDM = nBuchDM - nDiverse
					// ----ZA ARZN-----
					// Set nDiverse = dfDMArzn - nZaArzn
					// If nDiverse > nBuchDM
					// Set nDiverse = nBuchDM
					// Set nZahlArzn = nDiverse
					// Set nZaArzn = nZaArzn + nDiverse
					// Set nBuchDM = nBuchDM - nDiverse
					// ----ZA MAHN-----
					// Set nDiverse = dfDMMahn - nZaMahn
					// If nDiverse > nBuchDM
					// Set nDiverse = nBuchDM
					// Set nZahlMahn = nDiverse
					// Set nZaMahn = nZaMahn + nDiverse
					// Set nBuchDM = nBuchDM - nDiverse
					// ----ZA ZINS-----
					// Set nDiverse = dfDMZins - nZaZins
					// If nDiverse > nBuchDM
					// Set nDiverse = nBuchDM
					// Set nZahlZins = nDiverse
					// Set nZaZins = nZaZins + nDiverse
					// Set nBuchDM = nBuchDM - nDiverse
					// 20.03.01 ganzen Block von frmBankZahl übernommen, weil bei dfDMArzn < 0 Probleme waren.
					// 04.12.08 F431 + SalNumberAbs
					// ----ZA LEIS-----
					this.nZahlLeis = 0;
					this.nDiverse = this.dfDMLeis.Number - this.nZaLeis;
					if ((this.dfDMArzn.Number - this.nZaArzn) < 0) 
					{
						if (this.nDiverse > this.nBuchDM - (this.dfDMArzn.Number - this.nZaArzn)) 
						{
							this.nDiverse = this.nBuchDM - (this.dfDMArzn.Number - this.nZaArzn);
						}
					}
					else
					{
						if (this.nDiverse.Abs() > this.nBuchDM.Abs()) 
						{
							this.nDiverse = this.nBuchDM;
						}
					}
					if (this.nDiverse != 0) 
					{
						this.nZahlLeis = this.nDiverse;
						this.nZaLeis = this.nZaLeis + this.nDiverse;
						this.nBuchDM = this.nBuchDM - this.nDiverse;
					}
					// ----ZA ARZN-----
					this.nZahlArzn = 0;
					this.nDiverse = this.dfDMArzn.Number - this.nZaArzn;
					if (this.nDiverse.Abs() > this.nBuchDM.Abs()) 
					{
						this.nDiverse = this.nBuchDM;
					}
					if (this.nDiverse != 0) 
					{
						this.nZahlArzn = this.nDiverse;
						this.nZaArzn = this.nZaArzn + this.nDiverse;
						this.nBuchDM = this.nBuchDM - this.nDiverse;
					}
					// ----ZA MAHN-----
					this.nZahlMahn = 0;
					this.nDiverse = this.dfDMMahn.Number - this.nZaMahn;
					if (this.nDiverse.Abs() > this.nBuchDM.Abs()) 
					{
						this.nDiverse = this.nBuchDM;
					}
					if (this.nDiverse > 0) 
					{
						this.nZahlMahn = this.nDiverse;
						this.nZaMahn = this.nZaMahn + this.nDiverse;
						this.nBuchDM = this.nBuchDM - this.nDiverse;
					}
					// ----ZA ZINS-----
					this.nZahlZins = 0;
					this.nDiverse = this.dfDMZins.Number - this.nZaZins;
					if (this.nDiverse.Abs() > this.nBuchDM.Abs()) 
					{
						this.nDiverse = this.nBuchDM;
					}
					if (this.nDiverse > 0) 
					{
						this.nZahlZins = this.nDiverse;
						this.nZaZins = this.nZaZins + this.nDiverse;
						this.nBuchDM = this.nBuchDM - this.nDiverse;
					}
					// 06.03.23 Ä2086
					Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
					if (this.dfBuchDat.DateTime < Var.dtINIMinBuchDat) 
					{
						this.dfBuchDat.DateTime = Var.dtINIMinBuchDat;
					}

					// -----------------------------
					// 06.01.99	26.05.00 (nZahlZins+nZahlMahn)
					this.nZahlMahnZins = this.nZahlZins + this.nZahlMahn;
					if (this.nZahlMahnZins != 0) 
					{
						// 27.11.14 von oben
						this.nBuchDM = this.nZahlMahnZins * -1;
						this.SetStatusBarText("TA-Buchungen");
						if (this.dfRechNr.Number >= 999990)  // 11.03.15 F2310
						{
							this.nDummyMwSt = Var.nMwSatz[this.dfRechNr.Number - 999989];
							// 22.08.22 Ä2015 von unten
							// 20.11.23 Ä2144 + tkkontocode
							Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tktavst, tkkontocode)
VALUES (:frmRechAusb.dfArztNr, 3, 0, :frmRechAusb.cmbBuchText,
:frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBelNr,
:frmRechAusb.dfBuchDat, 0,0,0 , 0,
0,0, 0, :nDummyMwSt, 0, 0, :frmRechAusb.nBuchDM,0, 0, 0, 'RechAusb-MG')");
						}
						else
						{
							// 15.03.16 F2651 nMwStVoll -> 0
							this.nDummyMwSt = 0;
							// 22.08.22 Ä2015 von unten, tkdmabr -> tkdmmahn
							// 20.11.23 Ä2144 + tkkontocode
							Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmmahn, tksoll, tkhaben, tktavst, tkkontocode)
VALUES (:frmRechAusb.dfArztNr, 3, 0, :frmRechAusb.cmbBuchText,
:frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBelNr,
:frmRechAusb.dfBuchDat, 0,0,0 , 0,
0,0, 0, :nDummyMwSt, 0, 0, :frmRechAusb.nBuchDM,0, 0, 0, 'RechAusb-MG')");
						}
						// 17.12.07 F318: Satzart TKSA von 0 in 3 geändert
						// Call SqlImmedX('INSERT INTO TK
						// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
						// tkkontonr, tkrechdm, tkkzhaben, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
						// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tktavst)
						// VALUES (:frmRechAusb.dfArztNr, 3, 0, :frmRechAusb.cmbBuchText,
						// :frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBelNr,
						// :frmRechAusb.dfBuchDat, 0,0,0 , 0,
						// 0,0, 0, :nDummyMwSt, 0, 0, :frmRechAusb.nBuchDM,0, 0, 0)')

						if (this.dfRechNr.Number < 999990) 
						{
							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16410, 16000, :frmRechAusb.dfBelNr,
:frmRechAusb.dfBuchDat,
:frmRechAusb.strBuchText,
:frmRechAusb.nZahlMahnZins, 5)");
						}
						else
						{
							// 03.05.10 OTÄ420
							Var.nCheckMwSt = Int.PalCheckAuslMwSt(this.dfArztNr.Number);
							// 14.04.14 Ä1046
							if (Int.PalCheckAuslTA(this.dfArztNr.Number) == "EU") 
							{
								App.frmMain.nErloeskonto = 82210;
							}
							else
							{
								App.frmMain.nErloeskonto = 82200;
								// 30.06.20 Ä1892
								if (this.dfBuchDat.DateTime >= new SalDateTime(2020, 7, 1) && this.dfBuchDat.DateTime <= new SalDateTime(2020, 12, 31)) 
								{
									App.frmMain.nErloeskonto = Int.PalKontenMwStSenkung(App.frmMain.nErloeskonto);
								}
							}


							this.nDiverse = (this.nZahlMahn * 10000 / (100 + Var.nCheckMwSt)).Round() / 100;
							this.nRPMwSt = this.nZahlMahn - this.nDiverse;
							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, :frmMain.nErloeskonto, 16510, :frmRechAusb.dfBelNr,
:frmRechAusb.dfBuchDat,
:frmRechAusb.strBuchText,
:frmRechAusb.nDiverse, 5)");
							// 30.06.20 Ä1892
							Var.nMwStSenkung = 17760;
							if (this.dfBuchDat.DateTime >= new SalDateTime(2020, 7, 1) && this.dfBuchDat.DateTime <= new SalDateTime(2020, 12, 31)) 
							{
								Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
							}
							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, :nMwStSenkung, 16510, :frmRechAusb.dfBelNr,
:frmRechAusb.dfBuchDat,
:frmRechAusb.strBuchText,
:frmRechAusb.nRPMwSt, 5)");
						}
					}
					// 05.11.19 F4540 von oben und nBuchDM -> nBuchDM2
					this.nBuchDMHF = this.nZahlLeis + this.nZahlArzn;
					this.nBuchDMRest = this.nZahlMahnZins;
					Int.SqlImmedX(@"INSERT INTO ZA
(zaarztnr,zahalternr,zarechnr,zakz,zabuchdat,zabelegnr,zadm, zaproznr, zabuchtext, zarznr, zaerfdat, zadmhf, zadmrest)
VALUES (:frmRechAusb.dfArztNr,
:frmRechAusb.dfHalterNr,
:frmRechAusb.dfRechNr,
:frmRechAusb.nKZZahl,
:frmRechAusb.dfBuchDat,
:frmRechAusb.dfBelNr,
:frmRechAusb.nBuchDM2,
:frmRechAusb.nProzNr,
:frmRechAusb.cmbBuchText,
:frmRechAusb.dfRZNr,
SYSDATETIME,
:frmRechAusb.nBuchDMHF,
:frmRechAusb.nBuchDMRest)");

					this.nDiverse = this.nZahlLeis + this.nZahlArzn;
					Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16420, 16000, :frmRechAusb.dfBelNr,
:frmRechAusb.dfBuchDat,
:frmRechAusb.strBuchText,
:frmRechAusb.nDiverse, 5)");
					// 27.11.14 von oben
					this.nBuchDM = this.nDiverse;
					this.SetStatusBarText("TA-Buchungen");
					// 21.10.14 Ä948 + MwSt
					// If SalTblQueryFocus( tblMwSt, nRowMwSt, hWndCol )
					// Set nDummyMwSt = tblMwSt.colMwSt
					// Set strDummyMwStLA = tblMwSt.colLA
					// Else
					// Set nDummyMwSt = PalCheckAuslMwSt( dfArztNr )
					// Set strDummyMwStLA = 'X'
					if (this.dfRechNr.Number >= 999990)  // 11.03.15 F2310
					{
						this.nZahlMahn = 0;
						if (this.nZahlLeis != 0) 
						{
							this.nDummyMwSt = Var.nMwSatz[this.dfRechNr.Number - 999989];
							this.nDiverse = this.nZahlLeis * -1;
							// 20.11.23 Ä2144 + tkkontocode
							Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tktavst, tkkontocode)
VALUES (:frmRechAusb.dfArztNr, 3, 0, :frmRechAusb.cmbBuchText,
:frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBelNr,
:frmRechAusb.dfBuchDat, 0,0,0 , 0,
0,0, 0, :nDummyMwSt, 0, 0, :frmRechAusb.nDiverse,0, 0, 0, 'RechAusb-Rg')");
						}
						if (this.nZahlArzn != 0) 
						{
							this.nDiverse = this.nZahlArzn * -1;
							// 20.11.23 Ä2144 + tkkontocode
							Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tktavst, tkkontocode)
VALUES (:frmRechAusb.dfArztNr, 3, 0, :frmRechAusb.cmbBuchText,
:frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBelNr,
:frmRechAusb.dfBuchDat, 0,0,0 , 0,
0,0, 0, 0, 0, 0, :frmRechAusb.nDiverse,0, 0, 0, 'RechAusb-Rg')");
						}
					}
					else
					{
						// 21.10.14 Ä948
						// If SalTblQueryFocus( tblMwSt, nRowMwSt, hWndCol )
						// Set strROWIDMwSt = ''
						// Call SqlImmedSel( 'SELECT ROWID, rpdmzahl
						// FROM RP
						// INTO :frmRechAusb.strROWIDMwSt, :frmRechAusb.nMwStRpZahl
						// WHERE rparztnr = :frmRechAusb.dfArztNr
						// AND rphalternr = :frmRechAusb.dfHalterNr
						// AND rprechnr = :frmRechAusb.dfRechNr
						// AND rpmwst = :frmRechAusb.nDummyMwSt
						// AND rpla = :frmRechAusb.strDummyMwStLA' )
						// If strROWIDMwSt != ''
						// Set nDiverse = nDiverse - SalNumberRound(nDiverse * nDummyMwSt * 100 / (100 + nDummyMwSt)) /100
						// If nMwStRpZahl = NUMBER_Null
						// Call SqlImmed( 'UPDATE rp SET
						// rpdmzahl = :frmRechAusb.nDiverse
						// WHERE ROWID = :frmRechAusb.strROWIDMwSt' )
						// Else
						// Call SqlImmed( 'UPDATE rp SET
						// rpdmzahl = rpdmzahl + :frmRechAusb.nDiverse
						// WHERE ROWID = :frmRechAusb.strROWIDMwSt' )
						// 16.02.15 Ä948
						if (this.hSqlRePo.PrepareAndExecute(@"
SELECT rpreverseversion, rpmwst, rpla, sum(rpdm), sum(rpdmzahl)
FROM RP
INTO :frmMain.nReverseVersion, :frmRechAusb.nProzMwSt, :frmRechAusb.strLA, :frmRechAusb.nRPDM, :frmRechAusb.nRPZahl
WHERE rparztnr = :frmRechAusb.dfArztNr
AND rphalternr = :frmRechAusb.dfHalterNr
AND rprechnr = :frmRechAusb.dfRechNr
AND rpmwst IS NOT NULL
AND rpla IS NOT NULL
GROUP BY 1,2,3
ORDER BY rpmwst desc, rpla desc")) 
						{
							while (this.hSqlRePo.FetchNext(ref this.nFetchRP)) 
							{
								this.nDiverse = ((this.nRPDM - this.nRPZahl) * 100 + (this.nRPDM - this.nRPZahl) * this.nProzMwSt).Round() / 100;
								// 09.03.15
								if (this.nDiverse > this.nBuchDM) 
								{
									this.nDiverse = this.nBuchDM;
								}

								this.strBuchTextDummy = this.strBuchText + Int.PalStrNum(this.nProzMwSt, 2, 0) + "%";
								this.strBuchTextDummy = this.strBuchTextDummy.Left(20);
								this.strBuchText = this.strBuchText.Left(20);
								// nRPMwSt = MwSt für HF + MG
								// nRP1MwSt = MwSt für HF
								if (this.strLA == Var.strL) 
								{
									if (this.nZahlLeis != 0.00m) 
									{
										if (this.nDiverse.Abs() > this.nZahlLeis.Abs())  // 20.10.98
										{
											this.nDiverse = this.nZahlLeis;
										}
										this.nZahlLeis = this.nZahlLeis - this.nDiverse;
									}
								}
								else if (this.strLA == Var.strA) 
								{
									if (this.nZahlArzn != 0.00m) 
									{
										if (this.nDiverse.Abs() > this.nZahlArzn.Abs()) 
										{
											this.nDiverse = this.nZahlArzn;
										}
										this.nZahlArzn = this.nZahlArzn - this.nDiverse;
									}
								}
								if (this.nDiverse != 0) 
								{
									this.nRPMwSt = (this.nDiverse * this.nProzMwSt * 100 / (100 + this.nProzMwSt)).Round() / 100;
									this.nRP1MwSt = (this.nDiverse * this.nProzMwSt * 100 / (100 + this.nProzMwSt)).Round() / 100;
									Var.nDummyHaben = this.nDiverse + this.nZahlMahn + this.nZahlZins;
									// Call InsertKonto( hSqlBankZahl, nArztNr, nHalterNr, nRechNr, strBuchText, nBelNrX,
									// dtBuchDatX, 0, nDiverse, nZahlMahn, nZahlZins, nRPMwSt, nProzMwSt, nKZZahl, nDummyHaben, frmMain.nReverseVersion )
									this.nDiverse = this.nDiverse * -1;
									// 20.11.23 Ä2144 + tkkontocode
									Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tktavst, tkkontocode)
VALUES (:frmRechAusb.dfArztNr, 3, 0, :frmRechAusb.cmbBuchText,
:frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBelNr,
:frmRechAusb.dfBuchDat, 0,0,0 , 0,
0,0, 0, :frmRechAusb.nProzMwSt, 0, 0, :frmRechAusb.nDiverse,0, 0, 0, 'RechAusb-Rg')");
									this.nDiverse = this.nDiverse * -1;
									// 09.03.15
									this.nBuchDM = this.nBuchDM - this.nDiverse;

									this.nZahlMahn = 0;
									this.nZahlZins = 0;
									this.UpdateRechPosition(this.hSqlUpdateRP, this.dfArztNr.Number, this.dfRechNr.Number, this.nProzMwSt, this.nDiverse, this.nRP1MwSt, this.strLA, App.frmMain.nReverseVersion, this.nRPZahl);
								}
							}
							// 11.03.15
							this.nDiverse = this.nBuchDM;
							if (this.nDiverse != 0) 
							{
								this.nRPMwSt = (this.nDiverse * this.nProzMwSt * 100 / (100 + this.nProzMwSt)).Round() / 100;
								this.nRP1MwSt = (this.nDiverse * this.nProzMwSt * 100 / (100 + this.nProzMwSt)).Round() / 100;
								this.nDiverse = this.nDiverse * -1;
								// 20.11.23 Ä2144 + tkkontocode
								Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tktavst, tkkontocode)
VALUES (:frmRechAusb.dfArztNr, 3, 0, :frmRechAusb.cmbBuchText,
:frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBelNr,
:frmRechAusb.dfBuchDat, 0,0,0 , 0,
0,0, 0, :nMwStVoll, 0, 0, :frmRechAusb.nDiverse,0, 0, 0, 'RechAusb-Rg')");
								Int.PalLog("RechAusbRest € " + this.nDiverse.ToString(2) + " " + this.dfArztNr.Number.ToString(0) + "/H" + this.dfHalterNr.Number.ToString(0) + "/R" + this.dfRechNr.Number.ToString(0));
							}

							this.hSqlRePo.Commit();
						}
					}

					this.SetStatusBarText("Rechnungs-Datei");
					// 06.03.01 Buchtext wird nicht mehr upgedatet
					App.frmMain.dtHBBuchDat = SalDateTime.Current;
					if (this.dfRechNr.Number >= 999990) 
					{
						Int.SqlImmedX(@"UPDATE RK SET
rkteilzdat = :frmRechAusb.dfBuchDat,
rkkzzahl = :frmRechAusb.nRkKZZahl,
rkzaleis = :frmRechAusb.nZaLeis,
rkzaarzn = :frmRechAusb.nZaArzn,
rkmbzaopl = :frmRechAusb.nZaMahn,
rkzazins = :frmRechAusb.nZaZins
WHERE rkarztnr = :frmRechAusb.dfArztNr
AND rkhalternr = :frmRechAusb.dfHalterNr
AND rkrechnr = :frmRechAusb.dfRechNr");
						// 08.05.09
						// Set nZahlLeis = nZahlLeis * -1
						// Set nZahlArzn = nZahlArzn * -1
						// Set nZahlMahn = nZahlMahn * -1
						// Set nZahlZins = nZahlZins * -1
						// If nZahlLeis != 0
						// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
						// VALUES(:frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBuchDat, \'MBZAa\', :frmMain.dtHBBuchDat, :frmRechAusb.nZahlLeis, 16420, NULL, :frmRechAusb.cmbBuchText)')
						// If nZahlArzn != 0
						// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
						// VALUES(:frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBuchDat, \'MBZAb\', :frmMain.dtHBBuchDat, :frmRechAusb.nZahlArzn, 16420, NULL, :frmRechAusb.cmbBuchText)')
						// If nZahlMahn != 0
						// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
						// VALUES(:frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBuchDat, \'MBZAc\', :frmMain.dtHBBuchDat, :frmRechAusb.nZahlMahn, 16420, NULL, :frmRechAusb.cmbBuchText)')
						// If nZahlZins != 0
						// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
						// VALUES(:frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBuchDat, \'MBZAZ\', :frmMain.dtHBBuchDat, :frmRechAusb.nZahlZins, 16420, NULL, :frmRechAusb.cmbBuchText)')
						// Set nZahlLeis = nZahlLeis * -1
						// Set nZahlArzn = nZahlArzn * -1
						// Set nZahlMahn = nZahlMahn * -1
						// Set nZahlZins = nZahlZins * -1

					}
					else
					{
						if (this.cbBar.Checked) 
						{
							this.dtDat = new SalDateTime(this.dfBuchDat.DateTime.Year() + 2, this.dfBuchDat.DateTime.Month(), this.dfBuchDat.DateTime.Day(), 0, 0, 0);
							if (this.dtDat > this.dtVerjDat) 
							{
								this.dtVerjDat = this.dtDat;
							}
						}
						Int.SqlImmedX(@"UPDATE RK SET
rkteilzdat = :frmRechAusb.dfBuchDat,
rkkzzahl = :frmRechAusb.nRkKZZahl,
rkzaleis = :frmRechAusb.nZaLeis,
rkzaarzn = :frmRechAusb.nZaArzn,
rkzamahn = :frmRechAusb.nZaMahn,
rkzazins = :frmRechAusb.nZaZins,
rkverjaehr = :frmRechAusb.dtVerjDat
WHERE rkarztnr = :frmRechAusb.dfArztNr
AND rkhalternr = :frmRechAusb.dfHalterNr
AND rkrechnr = :frmRechAusb.dfRechNr");
						// 08.05.09
						// Set nZahlLeis = nZahlLeis * -1
						// Set nZahlArzn = nZahlArzn * -1
						// Set nZahlMahn = nZahlMahn * -1
						// Set nZahlZins = nZahlZins * -1
						// If nZahlLeis != 0
						// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
						// VALUES(:frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBuchDat, \'ZALe\', :frmMain.dtHBBuchDat, :frmRechAusb.nZahlLeis, 16410, NULL, :frmRechAusb.cmbBuchText)')
						// If nZahlArzn != 0
						// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
						// VALUES(:frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBuchDat, \'ZaAr\', :frmMain.dtHBBuchDat, :frmRechAusb.nZahlArzn, 16410, NULL, :frmRechAusb.cmbBuchText)')
						// If nZahlMahn != 0
						// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
						// VALUES(:frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBuchDat, \'ZaMa\', :frmMain.dtHBBuchDat, :frmRechAusb.nZahlMahn, 16410, NULL, :frmRechAusb.cmbBuchText)')
						// If nZahlZins != 0
						// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
						// VALUES(:frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBuchDat, \'ZaZi\', :frmMain.dtHBBuchDat, :frmRechAusb.nZahlZins, 16410, NULL, :frmRechAusb.cmbBuchText)')
						// Set nZahlLeis = nZahlLeis * -1
						// Set nZahlArzn = nZahlArzn * -1
						// Set nZahlMahn = nZahlMahn * -1
						// Set nZahlZins = nZahlZins * -1

					}
					if (this.nAusbuchDM > 0) 
					{
						Int.SqlImmedSel(@"SELECT rkzaleis,rkzaarzn,rkzamahn, rkzazins, rkkzzahl
INTO :frmRechAusb.nZaLeis, :frmRechAusb.nZaArzn,
:frmRechAusb.nZaMahn, :frmRechAusb.nZaZins, :frmRechAusb.nRkKZZahl
FROM RK
WHERE  rkarztnr = :frmRechAusb.dfArztNr
AND rkhalternr = :frmRechAusb.dfHalterNr
AND rkrechnr = :frmRechAusb.dfRechNr AND rkdeaktiv IS NULL");
						this.nBuchDM = this.nAusbuchDM;
						this.nKZZahl = 4;
						this.strBuchText = "STRE" + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0) + "/" + Int.PalStrNum(this.dfRechNr.Number, 6, 0);
						this.strBuchText = this.strBuchText.Left(20);
						this.df4.Number = this.df3.Number;
						this.df3.Number = this.df2.Number;
						this.df2.Number = this.df1.Number;
						this.df1.Number = this.nBuchDM;
						this.df1234.Number = this.df1234.Number + this.nBuchDM;
						this.nDiverse = this.nBuchDM;
						this.SetStatusBarText("Sachkonten-Buchungen");
						Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16420, 16000, :frmRechAusb.dfBelNr,
:frmRechAusb.dfBuchDat,
:frmRechAusb.strBuchText,
:frmRechAusb.nDiverse, 5)");
						// 13.05.14 F2027
						this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

						// 26.03.19 Ä1844 + , zaerfdat
						Int.SqlImmedX(@"INSERT INTO ZA
(zaarztnr,zahalternr,zarechnr,zakz,zabuchdat,zabelegnr,zadm, zaproznr, zabuchtext, zaerfdat)
VALUES (:frmRechAusb.dfArztNr,
:frmRechAusb.dfHalterNr,
:frmRechAusb.dfRechNr,
:frmRechAusb.nKZZahl,
:frmRechAusb.dfBuchDat,
:frmRechAusb.dfBelNr,
:frmRechAusb.nBuchDM,
:frmRechAusb.nProzNr,
:frmRechAusb.strBuchText, SYSDATETIME)");
						this.nBuchDM = this.nBuchDM * -1;
						this.SetStatusBarText("TA-Buchungen");
						// 17.12.07 F318: Satzart TKSA von 0 in 3 geändert
						// 21.10.14 Ä948 + MwSt
						// 27.11.14 nach unten
						// Set nDummyMwSt = PalCheckAuslMwSt( dfArztNr )
						// Call SqlImmedX('INSERT INTO TK
						// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
						// tkkontonr, tkrechdm, tkkzhaben, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
						// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tktavst)
						// VALUES (:frmRechAusb.dfArztNr, 3, 0, :frmRechAusb.strBuchText,
						// :frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBelNr,
						// :frmRechAusb.dfBuchDat, 0,0,0 , 0,
						// 0,0, 0,0, 0, 0, :frmRechAusb.nBuchDM,0, 0, :frmRechAusb.nDummyMwSt)')
						this.nBuchDM = this.nBuchDM * -1;
						// ----ZA LEIS-----
						this.nDiverse = this.dfDMLeis.Number - this.nZaLeis;
						if (this.nDiverse > this.nBuchDM) 
						{
							this.nDiverse = this.nBuchDM;
						}
						this.nZahlLeis = this.nDiverse;
						this.nZaLeis = this.nZaLeis + this.nDiverse;
						this.nBuchDM = this.nBuchDM - this.nDiverse;
						// ----ZA ARZN-----
						this.nDiverse = this.dfDMArzn.Number - this.nZaArzn;
						if (this.nDiverse > this.nBuchDM) 
						{
							this.nDiverse = this.nBuchDM;
						}
						this.nZahlArzn = this.nDiverse;
						this.nZaArzn = this.nZaArzn + this.nDiverse;
						this.nBuchDM = this.nBuchDM - this.nDiverse;
						// ----ZA MAHN-----
						this.nDiverse = this.dfDMMahn.Number - this.nZaMahn;
						if (this.nDiverse > this.nBuchDM) 
						{
							this.nDiverse = this.nBuchDM;
						}
						this.nZahlMahn = this.nDiverse;
						this.nZaMahn = this.nZaMahn + this.nDiverse;
						this.nBuchDM = this.nBuchDM - this.nDiverse;
						// ----ZA ZINS-----
						this.nDiverse = this.dfDMZins.Number - this.nZaZins;
						if (this.nDiverse > this.nBuchDM) 
						{
							this.nDiverse = this.nBuchDM;
						}
						this.nZahlZins = this.nDiverse;
						this.nZaZins = this.nZaZins + this.nDiverse;
						this.nBuchDM = this.nBuchDM - this.nDiverse;
						// 06.03.23 Ä2086
						Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
						if (this.dfBuchDat.DateTime < Var.dtINIMinBuchDat) 
						{
							this.dfBuchDat.DateTime = Var.dtINIMinBuchDat;
						}

						// -----------------------------
						this.nZahlMahnZins = this.nZahlZins + this.nZahlMahn;
						if (this.nZahlMahnZins != 0) 
						{
							// 27.11.14 von oben
							this.nBuchDM = this.nZahlMahnZins * -1;
							this.SetStatusBarText("TA-Buchungen");
							// 17.12.07 F318: Satzart TKSA von 0 in 3 geändert
							// 27.01.15 F2249 cmbBuchText -> strBuchText
							if (this.nBuchDM != 0) 
							{
								// 22.08.22 Ä2015 tkdmabr -> tkdmmahn
								// 20.11.23 Ä2144 + tkkontocode
								Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmmahn, tksoll, tkhaben, tktavst, tkkontocode)
VALUES (:frmRechAusb.dfArztNr, 3, 0, :frmRechAusb.strBuchText,
:frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBelNr,
:frmRechAusb.dfBuchDat, 0,0,0 , 0,
0,0, 0,0, 0, 0, :frmRechAusb.nBuchDM,0, 0, 0, 'RechAusb-MG')");
							}

						}
						this.nDiverse = this.nZahlLeis + this.nZahlArzn;
						this.nBuchDM = this.nDiverse * -1;
						this.nDummyMwSt = Int.PalCheckAuslMwSt(this.dfArztNr.Number);
						if (this.nBuchDM != 0) 
						{
							// 20.11.23 Ä2144 + tkkontocode
							Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tktavst, tkkontocode)
VALUES (:frmRechAusb.dfArztNr, 3, 0, :frmRechAusb.strBuchText,
:frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBelNr,
:frmRechAusb.dfBuchDat, 0,0,0 , 0,
0,0, 0, :frmRechAusb.nDummyMwSt, 0, 0, :frmRechAusb.nBuchDM,0, 0, 0, 'RechAusb-Rg')");
						}

						this.SetStatusBarText("Rechnungs-Datei");
						Int.SqlImmedX(@"UPDATE RK SET
rkzaleis = :frmRechAusb.nZaLeis,
rkzaarzn = :frmRechAusb.nZaArzn,
rkzamahn = :frmRechAusb.nZaMahn,
rkzazins = :frmRechAusb.nZaZins,
rkkzzahl = 4,
rkteilzdat = :frmRechAusb.dfBuchDat
WHERE rkarztnr = :frmRechAusb.dfArztNr
AND rkhalternr = :frmRechAusb.dfHalterNr
AND rkrechnr = :frmRechAusb.dfRechNr");
						// 08.05.09
						// Set frmMain.dtHBBuchDat = SalDateCurrent()
						// If nZahlLeis != 0
						// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
						// VALUES(:frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBuchDat, \'AuLe\', :frmMain.dtHBBuchDat, :frmRechAusb.nZahlLeis, 16410, NULL, :frmRechAusb.cmbBuchText)')
						// If nZahlArzn != 0
						// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
						// VALUES(:frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBuchDat, \'AuAr\', :frmMain.dtHBBuchDat, :frmRechAusb.nZahlArzn, 16410, NULL, :frmRechAusb.cmbBuchText)')
						// If nZahlMahn != 0
						// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
						// VALUES(:frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBuchDat, \'AuMa\', :frmMain.dtHBBuchDat, :frmRechAusb.nZahlMahn, 16410, NULL, :frmRechAusb.cmbBuchText)')
						// If nZahlZins != 0
						// Call SqlImmed('INSERT INTO hb (hbarztnr, hbhalternr, hbrechnr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext)
						// VALUES(:frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBuchDat, \'AuZi\', :frmMain.dtHBBuchDat, :frmRechAusb.nZahlZins, 16410, NULL, :frmRechAusb.cmbBuchText)')

					}
					// 04.12.17 Ä1433
					Int.PalCheckELobBez(this.dfArztNr.Number, this.dfHalterNr.Number);
					// 03.04.06 hier verschoben von oben: 28.09.99 bei ratenzahlern und bar nächstes Ratendatum rausschieben	01.02.16 Ä1330 raus
					// Call SqlIstDa('FROM r
					// WHERE rarztnr = :frmRechAusb.dfArztNr
					// AND rhalternr = :frmRechAusb.dfHalterNr', bExists )
					// If bExists
					// If cbBar
					// Call SalStatusSetText(hWndForm, 'Ratenzahler')
					// Call SqlImmedSel(
					// 'SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
					// INTO :frmRechAusb.dfDMRest
					// FROM RK
					// WHERE ' || PalArztNr('rk', nArztNr, nArztNr2) || '  AND rkhalternr = :frmRechAusb.dfHalterNr AND
					// rkkzzahl < 2')
					// If dfDMRest != 0
					// Call SqlImmedSel('
					// SELECT rmtl INTO :frmRechAusb.nRatMtl FROM R
					// WHERE ' || PalArztNr('r', nArztNr, nArztNr2) || '
					// AND rhalternr = :frmRechAusb.dfHalterNr' )
					// Set dtRatDat = dfBuchDat + nRatMtl*30
					// Call SqlImmed( '
					// UPDATE r SET
					// r1 = :frmRechAusb.dtRatDat
					// WHERE  ' || PalArztNr('r', nArztNr, nArztNr2) || '
					// AND rhalternr = :frmRechAusb.dfHalterNr' )
					// Else
					// Call PalLog('RaZa autom. gekündigt: Ha.'
					// || PalStrNum(dfArztNr, 4, 0) || '/' || PalStrNum(dfHalterNr, 5,0))
					// Call SqlImmed( '
					// DELETE FROM r
					// WHERE  ' || PalArztNr('rk', nArztNr, nArztNr2) || '
					// AND rhalternr = :frmRechAusb.dfHalterNr' )
					// Call SalClearField(dfArztNr)
					this.dfRechNr.Clear();
					if (this.dfZahlDM.Number > 0) 
					{
					}
					else
					{
						this.dfHalterNr.Clear();
						this.dfZahlDM.Clear();
					}
					this.dfRechDat.Clear();
					this.dfVerjDat.Clear();
					this.dfMS.Clear();
					this.dfDMLeis.Clear();
					this.dfDMArzn.Clear();
					this.dfDMMahn.Clear();
					this.dfDMZins.Clear();
					this.dfDMRest.Clear();
					this.dfProzNr.Clear();
					// 08.04.13 Ä906
					this.dfRZNr.Clear();
					// 11.11.02
					this.nProzNr = SalNumber.Null;

					this.dfHaltersaldo.Number = Sys.NUMBER_Null;
					// Call SalTblReset(tblRechnungen)
					this.cbBar.Checked = false;
					this.dfBelNr.Number = this.dfBelNr.Number + 1;
					this.dfZahlDM.SetFocus();
					// 06.09.16
					this.dfSum.Number = 0;
					this.dfSumHF.Number = 0;
					this.dfSumMG.Number = 0;
					this.dfSumZI.Number = 0;

					// 24.11.99
					this.tblRechnungen.Populate(this.hSqlZa, @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkdmleis, rkdmarzn, (rkdmmahn+rkmbdmopl), rkdmzins,
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins),rkmahnstufe
INTO :frmRechAusb.tblRechnungen.colnArztNr,
:frmRechAusb.tblRechnungen.colnHalterNr,
:frmRechAusb.tblRechnungen.colnRechNr,
:frmRechAusb.tblRechnungen.coldtRechDat,
:frmRechAusb.tblRechnungen.colnDMLeis,
:frmRechAusb.tblRechnungen.colnDMArzn,
:frmRechAusb.tblRechnungen.colnDMMahn,
:frmRechAusb.tblRechnungen.colnDMZins,
:frmRechAusb.tblRechnungen.colnDMRest,
:frmRechAusb.tblRechnungen.colnMS
FROM RK
WHERE " + Int.PalArztNr("rk", this.nArztNr, this.nArztNr2) + @"  AND rkhalternr = :frmRechAusb.dfHalterNr AND
rkkzzahl not in (2,3,4,5) AND
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)<>0 AND rkdeaktiv IS NULL
ORDER BY rkrechdat", Sys.TBL_FillAll);
					// Call SalTblReset( tblMwSt )
					Sal.WaitCursor(false);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// tblRechnungen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblRechnungen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_RowHeaderClick:
					this.tblRechnungen_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblRechnungen_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblRechnungen_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfArztNr.Number = this.tblRechnungen.colnArztNr.Number;
			this.dfRechNr.Number = this.tblRechnungen.colnRechNr.Number;
			this.dfRechDat.DateTime = this.tblRechnungen.coldtRechDat.DateTime;
			this.dfMS.Number = this.tblRechnungen.colnMS.Number;
			this.dfDMLeis.Number = this.tblRechnungen.colnDMLeis.Number;
			this.dfDMArzn.Number = this.tblRechnungen.colnDMArzn.Number;
			this.dfDMMahn.Number = this.tblRechnungen.colnDMMahn.Number;
			this.dfDMZins.Number = this.tblRechnungen.colnDMZins.Number;
			this.dfDMRest.Number = this.tblRechnungen.colnDMRest.Number;
			// 17.01.03
			Int.SqlImmedSel(@"SELECT rkverjaehr
INTO  :frmRechAusb.dfVerjDat
FROM RK
WHERE rkarztnr = :frmRechAusb.dfArztNr AND rkhalternr = :frmRechAusb.dfHalterNr
AND rkrechnr = :frmRechAusb.dfRechNr AND rkdeaktiv IS NULL ");


			// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
			SalBoolean temp1 = this.cbZettel.Checked;
			Int.SqlIstDa(@" FROM Z WHERE zhalternr=:frmRechAusb.dfHalterNr
and zarztnr=:frmRechAusb.dfArztNr and zrechnr=:frmRechAusb.dfRechNr AND zdeaktiv IS NULL", ref temp1);
			this.cbZettel.Checked = temp1;

			if (this.cbZettel.Checked == true) 
			{
				Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
			}
			else
			{
				Sal.ColorSet(this.cbZettel, Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
			}
			// 21.10.14 Ä948
			// Call PalHoleMwSt(  )
			// 19.11.14 Ä1116
			this.nZCount = Int.SqlGetAnzahl(@"FROM rzp WHERE rzparztnr = :frmRechAusb.dfArztNr
AND rzphalternr = :frmRechAusb.dfHalterNr AND rzprechnr = :frmRechAusb.dfRechNr");
			if (this.nZCount >= 1) 
			{
				Int.SqlImmedSel(@"SELECT rzpnr INTO :frmRechAusb.dfRZNr FROM rzp
WHERE rzparztnr = :frmRechAusb.dfArztNr AND rzphalternr = :frmRechAusb.dfHalterNr AND rzprechnr = :frmRechAusb.dfRechNr
ORDER BY rzpnr DESC");
			}
			// 16.04.15 Ä1188
			Int.SqlImmedSel(@"SELECT rkzamahn, rkzazins, rkdmmahn-rkzamahn, rkdmzins-rkzazins INTO :frmRechAusb.nMahnGes, :frmRechAusb.nZinsGes, :frmRechAusb.nMahnAus, :frmRechAusb.nZinsAus FROM rk
WHERE rkarztnr = :frmRechAusb.dfArztNr AND rkhalternr = :frmRechAusb.dfHalterNr AND rkrechnr = :frmRechAusb.dfRechNr AND rkdeaktiv IS NULL");
			this.dfMGaus.Number = this.nMahnAus;
			this.dfZIaus.Number = this.nZinsAus;
			// 18.12.18 Ä1801
			if (this.dfRechNr.Number >= 999990 && this.dfDMRest.Number > 0) 
			{
				this.pbMBcbez.ShowWindow();
			}
			else
			{
				this.pbMBcbez.HideWindow();
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblRechnungen_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT  MAX(rzpnr) INTO :frmRechAusb.tblRechnungen.colnRZNr FROM rzp
WHERE rzparztnr = :frmRechAusb.tblRechnungen.colnArztNr AND rzphalternr = :frmRechAusb.tblRechnungen.colnHalterNr AND rzprechnr = :frmRechAusb.tblRechnungen.colnRechNr");
			Int.SqlImmedSel(@"SELECT  MAX(prdnr) INTO :frmRechAusb.tblRechnungen.colnPRNr FROM prd
WHERE prdarztnr = :frmRechAusb.tblRechnungen.colnArztNr AND prdhalternr = :frmRechAusb.tblRechnungen.colnHalterNr AND prdrechnr = :frmRechAusb.tblRechnungen.colnRechNr");
			// 06.09.16
			this.dfSum.Number = this.dfSum.Number + this.tblRechnungen.colnDMRest.Number;
			this.dfSumHF.Number = this.dfSumHF.Number + this.tblRechnungen.colnDMArzn.Number + this.tblRechnungen.colnDMLeis.Number;
			this.dfSumMG.Number = this.dfSumMG.Number + this.tblRechnungen.colnDMMahn.Number;
			this.dfSumZI.Number = this.dfSumZI.Number + this.tblRechnungen.colnDMZins.Number;

			#endregion
		}
		
		/// <summary>
		/// pbSuchen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSuchen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbSuchen_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbSuchen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// If Not SalIsWindowEnabled( frmMain.pbSuchen )
			// If SalDestroyWindow(frmRgSuchen)
			// Call SalCreateWindow(frmRgSuchen,hWndForm, dfArztNr, dfHalterNr, dfRechNr)
			App.frmRgSuchen.PalFuelle(this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRechNr.Number);
			#endregion
		}
		
		/// <summary>
		/// cbZettel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZettel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbZettel_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbZettel_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmZettel.CreateWindow(this, "frmRechAusb", this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRechNr.Number);
			#endregion
		}
		
		/// <summary>
		/// cbEL WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbEL_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cbEL_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cbEL_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmEL.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRechNr.Number);
			#endregion
		}
		
		/// <summary>
		/// pbHolen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHolen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbHolen_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHolen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.strSelect530 = @"SELECT rkarztnr, rkhalternr, rkrechnr,  rkrechdat, rkverjaehr,
rkdmleis, rkdmarzn, (rkdmmahn+rkmbdmopl), rkdmzins,
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins),
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins),
rkmahnstufe, aname1, hti || hvn || ' ' || hnn
INTO :frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfRechDat, :frmRechAusb.dfVerjDat,
:frmRechAusb.dfDMLeis, :frmRechAusb.dfDMArzn, :frmRechAusb.dfDMMahn, :frmRechAusb.dfDMZins, :frmRechAusb.dfDMRest, :frmRechAusb.dfZahlDM,
:frmRechAusb.dfMS, :frmRechAusb.dfArztName, :frmRechAusb.dfHalterName
FROM rk,a,h
WHERE rkarztnr = :frmRechAusb.dfArztNr AND rkdeaktiv IS NULL AND hdeaktiv IS NULL
AND rkkzzahl<2 and (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)>0
AND rkarztnr=aarztnr AND rkarztnr=harztnr AND rkhalternr=hhalternr
ORDER BY hhalternr, rkrechnr";
			Sal.WaitCursor(true);
			this.hSql530.PrepareAndExecute(this.strSelect530);
			Sal.WaitCursor(false);
			this.bHolenZM = false;
			#endregion
		}
		
		/// <summary>
		/// pbHolenVJ WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHolenVJ_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbHolenVJ_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHolenVJ_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfHolenVerjDat.IsEmpty()) 
			{
				this.dfHolenVerjDat.DateTime = SalDateTime.Current;
			}
			if (this.dfHolenVerjDat.DateTime > SalDateTime.Current) 
			{
				Sal.MessageBox(@"Das Datum liegt in der Zukunft !

Ausbuchen daher nicht möglich.", "Fehler", Sys.MB_Ok);
			}
			else
			{
				// 13.02.17 Ä1479 rkmahnstufe < 6 -> (rkmahnstufe < 6 OR rkmahnstufe = 8)
				// 13.11.17 Ä1623 raus: AND rkarztnr NOT IN (28,29,241,343,344,345,573,574)
				this.strSelect530 = @"SELECT rkarztnr, rkhalternr, rkrechnr,  rkrechdat, rkverjaehr,
rkdmleis, rkdmarzn, (rkdmmahn+rkmbdmopl), rkdmzins,
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins),
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins),
rkmahnstufe, aname1, hti || hvn || ' ' || hnn
INTO :frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfRechDat, :frmRechAusb.dfVerjDat,
:frmRechAusb.dfDMLeis, :frmRechAusb.dfDMArzn, :frmRechAusb.dfDMMahn, :frmRechAusb.dfDMZins, :frmRechAusb.dfDMRest, :frmRechAusb.dfZahlDM,
:frmRechAusb.dfMS, :frmRechAusb.dfArztName, :frmRechAusb.dfHalterName
FROM rk,a,h
WHERE (rkmahnstufe < 6 OR rkmahnstufe = 8) AND rkkzzahl<2 AND rkmahnstufe<>9 and rkverjaehr<= :frmRechAusb.dfHolenVerjDat
AND rkrechnr<999990 AND (rkdmleis+rkdmarzn+rkmbdmopl+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkmbzaopl-rkzamahn-rkzazins)>0
AND rkarztnr=aarztnr AND rkarztnr=harztnr AND rkhalternr=hhalternr AND rkdeaktiv IS NULL AND hdeaktiv IS NULL
ORDER BY rkarztnr, rkhalternr, rkrechnr";
				Sal.WaitCursor(true);
				this.hSql530.PrepareAndExecute(this.strSelect530);
				Sal.WaitCursor(false);
			}
			this.bHolenZM = false;
			#endregion
		}
		
		/// <summary>
		/// pbZurück WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZurück_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbZurück_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZurück_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nFetch530 = this.hSql530.FetchPrevious();
			if (this.bHolenZM) 
			{
				this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0);
				this.dfHalterNr.PostMessage(Sys.SAM_Validate, 0, 0);
				this.dfRechNr.PostMessage(Sys.SAM_Validate, 0, 0);
			}
			#endregion
		}
		
		/// <summary>
		/// pbWeiter WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbWeiter_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbWeiter_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbWeiter_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nFetch530 = this.hSql530.FetchNext();
			if (this.bHolenZM) 
			{
				this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0);
				this.dfHalterNr.PostMessage(Sys.SAM_Validate, 0, 0);
				this.dfRechNr.PostMessage(Sys.SAM_Validate, 0, 0);
			}
			#endregion
		}
		
		/// <summary>
		/// pbZahlInfo WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZahlInfo_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbZahlInfo_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbZahlInfo_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			dlgZahlInfo.ModalDialog(this, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRechNr.Number, this.dfProzNr.Number, "Ausbuchung € " + this.dfZahlDM.Number.ToString(2) + " am " + Int.PalDateToStrDE(this.dfBuchDat.DateTime));
			#endregion
		}
		
		/// <summary>
		/// pbHKausb WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHKausb_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbHKausb_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHKausb_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 19.12.11 Ä688
			if (this.dfZahlDM.Number == 0 || this.dfZahlDM.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Bitte Betrag eingeben.", "Betrag fehlt", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.dfZahlDM.SetFocus();
			}
			else if (this.rbHKZins.Checked && (this.dfRZNr.Number == 0 || this.dfRZNr.Number == Sys.NUMBER_Null)) 
			{
				Sal.MessageBox("Bei Halterkonto-Zins muss RZ-Nr. eingeben werden.", "RZ-Nr. fehlt", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.dfRZNr.SetFocus();
			}
			else
			{
				this.nBuchDM = this.dfZahlDM.Number;
				// 13.07.18
				if (this.nBuchDM > this.dfHaltersaldo.Number) 
				{
					this.nBuchDM = this.dfHaltersaldo.Number;
				}
				// 06.03.23 Ä2086
				Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
				if (this.dfBuchDat.DateTime < Var.dtINIMinBuchDat) 
				{
					this.dfBuchDat.DateTime = Var.dtINIMinBuchDat;
				}


				if (Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16450, 16000, :frmRechAusb.dfBelNr, :frmRechAusb.dfBuchDat, :frmRechAusb.cmbBuchText, :frmRechAusb.nBuchDM, 9)")) 
				{
				}
				// 15.05.19 F4485
				// 08.11.22 NULL -> :frmRechAusb.dfRZNr
				if (this.rbHKZins.Checked) 
				{
					if (Int.SqlImmed(@"INSERT INTO hb (hbarztnr, hbhalternr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext, hbrznr)
VALUES(:frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr, :frmRechAusb.dfBuchDat, 'Zins', SYSDATETIME, :frmRechAusb.nBuchDM, 16000, 16450, :frmRechAusb.cmbBuchText, :frmRechAusb.dfRZNr)")) 
					{
					}
				}
				else
				{
					if (Int.SqlImmed(@"INSERT INTO hb (hbarztnr, hbhalternr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext, hbrznr)
VALUES(:frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr, :frmRechAusb.dfBuchDat, 'BEZ-M', SYSDATETIME, :frmRechAusb.nBuchDM, 16000, 16450, :frmRechAusb.cmbBuchText, NULL)")) 
					{
					}
				}
				// 04.01.12 Ä688
				// 30.01.12 F1189 RechNr: NULL -> 0
				// 13.05.14 F2027
				this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

				// 26.03.19 Ä1844 + , zaerfdat
				Int.SqlImmedX(@"INSERT INTO ZA
(zaarztnr,zahalternr,zarechnr,zakz,zabuchdat,zabelegnr,zadm, zaproznr, zabuchtext, zaerfdat)
VALUES (:frmRechAusb.dfArztNr,
:frmRechAusb.dfHalterNr,
0,
4,
:frmRechAusb.dfBuchDat,
:frmRechAusb.dfBelNr,
:frmRechAusb.nBuchDM,
NULL,
'Ausb.Halterkonto', SYSDATETIME)");

				this.df4.Number = this.df3.Number;
				this.df3.Number = this.df2.Number;
				this.df2.Number = this.df1.Number;
				this.df1.Number = this.nBuchDM;
				this.df1234.Number = this.df1234.Number + this.nBuchDM;
				// 06.05.14 Ä965
				// Set nBuchDM = SalNumberRound( dfZahlDM * 100 / 2) / 100
				// If SqlImmedX('INSERT INTO FI
				// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
				// VALUES (0, 16000, :frmMain.nErloeskonto, :frmRechAusb.dfBelNr, SYSDATE, \'Halterzinsen\', :frmRechAusb.nBuchDM, 9)')
				// Call SqlImmed( '
				// INSERT INTO TK
				// ( tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
				// tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
				// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben )
				// VALUES
				// ( :frmRechAusb.dfArztNr , 1, 0, :frmRechAusb.cmbBuchText, :frmRechAusb.dfHalterNr , NULL, :frmRechAusb.dfBelNr , :frmRechAusb.dfBuchDat ,
				// 0, 0, 0, 0, 0, 0, 0, 0 ,
				// 0, 0, 2, 0, 0, :frmRechAusb.nBuchDM,0 )' )

			}
			#endregion
		}
		
		/// <summary>
		/// pbMBcbez WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMBcbez_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbMBcbez_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMBcbez_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 06.03.23 Ä2086
			Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
			if (this.dfBuchDat.DateTime < Var.dtINIMinBuchDat) 
			{
				this.dfBuchDat.DateTime = Var.dtINIMinBuchDat;
			}

			// 11.12.18 Ä1801
			this.nDiverse = 0;
			if (this.dfRechNr.Number >= 999990) 
			{
				Int.SqlImmedSel(@"SELECT SUM(rkmbdmopl-rkmbzaopl) INTO :frmRechAusb.nDiverse FROM rk
WHERE rkarztnr = :frmRechAusb.dfArztNr AND rkhalternr = :frmRechAusb.dfHalterNr AND rkrechnr = :frmRechAusb.dfRechNr AND rkdeaktiv IS NULL");
			}
			if (this.nDiverse > this.dfZahlDM.Number) 
			{
				this.nDiverse = this.dfZahlDM.Number;
			}
			if (this.dfRechNr.Number >= 999990 && this.nDiverse > 0) 
			{
				Var.nCheckMwSt = Int.PalCheckAuslMwSt(this.dfArztNr.Number);
				if (Int.PalCheckAuslTA(this.dfArztNr.Number) == "EU") 
				{
					App.frmMain.nErloeskonto = 82210;
				}
				else
				{
					App.frmMain.nErloeskonto = 82200;
					// 30.06.20 Ä1892
					if (this.dfBuchDat.DateTime >= new SalDateTime(2020, 7, 1) && this.dfBuchDat.DateTime <= new SalDateTime(2020, 12, 31)) 
					{
						App.frmMain.nErloeskonto = Int.PalKontenMwStSenkung(App.frmMain.nErloeskonto);
					}
				}

				// 20.11.23 Ä2144 + tkkontocode
				Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tktavst, tkkontocode)
VALUES (:frmRechAusb.dfArztNr, 1, 0, :frmRechAusb.cmbBuchText,
:frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBelNr,
:frmRechAusb.dfBuchDat, 0, :frmRechAusb.nDiverse,0 , 0,
0,0, 0, 0, 2, 0, 0, :frmRechAusb.nDiverse, 0, 0, 'RechAusbMBcExtrageb-')");
				// 26.08.19 F4531
				if (this.dfRechNr.Number >= 999990)  // 07.01.99
				{
					this.nProzNr = this.dfProzNr.Number;
				}
				else
				{
					// Call SqlImmed( '
					// SELECT prnr
					// FROM pr
					// INTO :frmRechAusb.nProzNr
					// WHERE ((pra1 = :frmRechAusb.dfArztNr AND prr1 = :frmRechAusb.dfRechNr)
					// OR (pra2 = :frmRechAusb.dfArztNr AND prr2 = :frmRechAusb.dfRechNr)
					// OR (pra3 = :frmRechAusb.dfArztNr AND prr3 = :frmRechAusb.dfRechNr)
					// OR (pra4 = :frmRechAusb.dfArztNr AND prr4 = :frmRechAusb.dfRechNr)
					// OR (pra5 = :frmRechAusb.dfArztNr AND prr5 = :frmRechAusb.dfRechNr)
					// OR (pra6 = :frmRechAusb.dfArztNr AND prr6 = :frmRechAusb.dfRechNr))')
					// 11.11.02
					this.nProzNr = SalNumber.Null;
					// 11.03.02
					Int.SqlImmedSel(@"
SELECT prdnr
FROM prd
INTO :frmRechAusb.nProzNr
WHERE prdarztnr = :frmRechAusb.dfArztNr AND prdrechnr = :frmRechAusb.dfRechNr");
				}
				Int.SqlImmedX(@"INSERT INTO ZA
(zaarztnr,zahalternr,zarechnr,zakz,zabuchdat,zabelegnr,zadm, zaproznr, zabuchtext, zarznr, zaerfdat)
VALUES (:frmRechAusb.dfArztNr,
:frmRechAusb.dfHalterNr,
:frmRechAusb.dfRechNr,
4,
:frmRechAusb.dfBuchDat,
:frmRechAusb.dfBelNr,
:frmRechAusb.nDiverse,
:frmRechAusb.nProzNr,
:frmRechAusb.cmbBuchText,
:frmRechAusb.dfRZNr, SYSDATETIME)");
				// 08.05.19 F4486
				Int.SqlImmed("UPDATE rk SET rkmbzaopl = rkmbzaopl + :frmRechAusb.nDiverse WHERE rkarztnr = :frmRechAusb.dfArztNr AND rkhalternr = :frmRechAusb.dfHalterNr AND rkrechnr = :frmRechAusb.dfRechNr");
				// 08.06.20 F4530
				Int.SqlImmedSel(@"SELECT (rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins) INTO :frmRechAusb.nDiverse
FROM rk WHERE rkarztnr = :frmRechAusb.dfArztNr AND rkhalternr = :frmRechAusb.dfHalterNr AND rkrechnr = :frmRechAusb.dfRechNr AND rkdeaktiv IS NULL");
				if (this.nDiverse == 0) 
				{
					Int.SqlImmed("UPDATE rk SET rkkzzahl=4 WHERE rkarztnr = :frmRechAusb.dfArztNr AND rkhalternr = :frmRechAusb.dfHalterNr AND rkrechnr = :frmRechAusb.dfRechNr");
				}

				this.nBuchDM = (this.nDiverse * 10000 / (100 + Var.nCheckMwSt)).Round() / 100;
				this.nRPMwSt = this.nDiverse - this.nBuchDM;
				Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16000, :frmMain.nErloeskonto, :frmRechAusb.dfBelNr,
:frmRechAusb.dfBuchDat,
:frmRechAusb.strBuchText,
:frmRechAusb.nBuchDM, 5)");
				// 30.06.20 Ä1892
				Var.nMwStSenkung = 17760;
				if (this.dfBuchDat.DateTime >= new SalDateTime(2020, 7, 1) && this.dfBuchDat.DateTime <= new SalDateTime(2020, 12, 31)) 
				{
					Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
				}
				Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16000, :nMwStSenkung, :frmRechAusb.dfBelNr,
:frmRechAusb.dfBuchDat,
:frmRechAusb.strBuchText,
:frmRechAusb.nRPMwSt, 5)");

				this.df4.Number = this.df3.Number;
				this.df3.Number = this.df2.Number;
				this.df2.Number = this.df1.Number;
				this.df1.Number = this.nDiverse;
				this.df1234.Number = this.df1234.Number + this.nDiverse;

			}
			else
			{
				Sal.MessageBox(@"Es gibt nichts zu buchen.
Entweder es ist kein MB-Sammler oder es sind keine c-Kosten offen.", "Keine Buchung möglich", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			#endregion
		}
		
		/// <summary>
		/// pbHKbez WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHKbez_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbHKbez_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHKbez_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 06.03.23 Ä2086
			Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
			if (this.dfBuchDat.DateTime < Var.dtINIMinBuchDat) 
			{
				this.dfBuchDat.DateTime = Var.dtINIMinBuchDat;
			}

			// 19.12.11 Ä688
			if (this.dfZahlDM.Number == 0 || this.dfZahlDM.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Bitte Betrag eingeben.", "Betrag fehlt", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.dfZahlDM.SetFocus();
			}
			else
			{
				this.nBuchDM = this.dfZahlDM.Number;
				// 13.07.18
				if (this.nBuchDM > this.dfHaltersaldo.Number) 
				{
					this.nBuchDM = this.dfHaltersaldo.Number;
				}

				if (Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16450, 16000, :frmRechAusb.dfBelNr, :frmRechAusb.dfBuchDat, :frmRechAusb.cmbBuchText, :frmRechAusb.nBuchDM, 9)")) 
				{
				}
				if (Int.SqlImmed(@"INSERT INTO hb (hbarztnr, hbhalternr, hbbuchdat, hbcode, hberfdat, hbdm, hbsoll, hbhaben, hbbuchtext, hbrznr)
VALUES(:frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr, SYSDATE, 'Zins', SYSDATETIME, :frmRechAusb.nBuchDM, 16000, 16450, :frmRechAusb.cmbBuchText, NULL)")) 
				{
				}
				// 14.04.14 Ä1046
				if (Int.PalCheckAuslTA(this.dfArztNr.Number) == "EU") 
				{
					App.frmMain.nErloeskonto = 81360;
				}
				else
				{
					App.frmMain.nErloeskonto = 81310;
				}
				// 30.01.12 F1189
				// 13.05.14 F2027
				this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

				// 26.03.19 Ä1844 + , zaerfdat
				Int.SqlImmedX(@"INSERT INTO ZA
(zaarztnr,zahalternr,zarechnr,zakz,zabuchdat,zabelegnr,zadm, zaproznr, zabuchtext, zaerfdat)
VALUES (:frmRechAusb.dfArztNr,
:frmRechAusb.dfHalterNr,
0,
4,
:frmRechAusb.dfBuchDat,
:frmRechAusb.dfBelNr,
:frmRechAusb.nBuchDM,
NULL,
'ZahlM.Halterkonto', SYSDATETIME)");


				this.df4.Number = this.df3.Number;
				this.df3.Number = this.df2.Number;
				this.df2.Number = this.df1.Number;
				this.df1.Number = this.nBuchDM;
				this.df1234.Number = this.df1234.Number + this.nBuchDM;

				this.nBuchDM = (this.dfZahlDM.Number * 100m / 2).Round() / 100;
				if (Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16000, :frmMain.nErloeskonto, :frmRechAusb.dfBelNr, :frmRechAusb.dfBuchDat, 'Halterzinsen', :frmRechAusb.nBuchDM, 9)")) 
				{
				}
				// 12.08.14 F2112
				// Call SqlImmed( '
				// INSERT INTO TK
				// ( tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
				// tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
				// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben )
				// VALUES
				// ( :frmRechAusb.dfArztNr , 1, 0, :frmRechAusb.cmbBuchText, :frmRechAusb.dfHalterNr , NULL, :frmRechAusb.dfBelNr , :frmRechAusb.dfBuchDat ,
				// 0, 0, 0, 0, 0, 0, 0, 0 ,
				// 0, 0, 2, 0, 0, :frmRechAusb.nBuchDM,0 )' )
				this.cmbBuchText.Text = Int.PalLF(Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0) + this.cmbBuchText.Text, 20);
				// 20.11.23 Ä2144 + tkkontocode
				Int.SqlImmed(@"
INSERT INTO TK
( tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmabr, tksoll, tkhaben, tkkontocode )
VALUES
( :frmRechAusb.dfArztNr , 1, 0, :frmRechAusb.cmbBuchText, :frmRechAusb.dfHalterNr , NULL, :frmRechAusb.dfBelNr , :frmRechAusb.dfBuchDat ,
0, :frmRechAusb.nBuchDM, 0, 0, 0, 0, 0, 0 ,
0, 0, 2, 0, 0, :frmRechAusb.nBuchDM,0, 'RechAusb-Zinsen' )");

			}
			#endregion
		}
		
		/// <summary>
		/// dfRZNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRZNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRZNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRZNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);

			this.dfRechNr.Clear();
			this.tblRechnungen.ResetTable();
			// 06.09.16
			this.dfSum.Number = 0;
			this.dfSumHF.Number = 0;
			this.dfSumMG.Number = 0;
			this.dfSumZI.Number = 0;

			if (this.tblRechnungen.Populate(this.hSqlZa, @"SELECT rkarztnr, rkhalternr, rkrechnr, rkrechdat, rkdmleis, rkdmarzn, rkdmmahn+rkmbdmopl, rkdmzins,
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins),rkmahnstufe
INTO :frmRechAusb.tblRechnungen.colnArztNr,
:frmRechAusb.tblRechnungen.colnHalterNr,
:frmRechAusb.tblRechnungen.colnRechNr,
:frmRechAusb.tblRechnungen.coldtRechDat,
:frmRechAusb.tblRechnungen.colnDMLeis,
:frmRechAusb.tblRechnungen.colnDMArzn,
:frmRechAusb.tblRechnungen.colnDMMahn,
:frmRechAusb.tblRechnungen.colnDMZins,
:frmRechAusb.tblRechnungen.colnDMRest,
:frmRechAusb.tblRechnungen.colnMS
FROM RK, RZP
WHERE rzpnr = :frmRechAusb.dfRZNr AND rzparztnr=rkarztnr AND rzprechnr=rkrechnr AND rzphalternr=rkhalternr AND
rkkzzahl not in (2,3,4,5) AND rkdeaktiv IS NULL AND
(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins)<>0
ORDER BY rkrechdat", Sys.TBL_FillAll)) 
			{
				Sal.MessageBeep(0);
			}

			Int.SqlImmedSel("SELECT rzarztnr, rzhalternr INTO :frmRechAusb.dfArztNr, :frmRechAusb.dfHalterNr FROM rz WHERE rznr = :frmRechAusb.dfRZNr AND rzdeaktiv IS NULL");
			// Call SalPostMsg( dfArztNr, SAM_Validate, 0, 0)
			Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hbankeinzug
into :frmRechAusb.dfHalterName, :frmRechAusb.nBankeinzug
from H where  harztnr = :frmRechAusb.dfArztNr AND hhalternr = :frmRechAusb.dfHalterNr AND hdeaktiv IS NULL ");
			// 29.06.09 OTÄ130 Bankeinzug
			if (this.nBankeinzug == 1) 
			{
				this.dfSBankeinzug.Text = "Bankeinzug: ja";
			}
			else
			{
				this.dfSBankeinzug.Text = "";
			}

			this.dfProzNr.Number = Sys.NUMBER_Null;
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// pbMGaus WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMGaus_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbMGaus_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMGaus_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 16.04.15 Ä1188
			if (this.dfArztNr.Number != 0 && this.dfArztNr.Number != Sys.NUMBER_Null && this.dfHalterNr.Number != 0 && this.dfHalterNr.Number != Sys.NUMBER_Null && this.dfRechNr.Number != 0 && this.dfRechNr.Number != Sys.NUMBER_Null) 
			{
				if (this.dfRechNr.Number >= 999990) 
				{
					Sal.MessageBox("Diese Funktion ist für MB-Sammler nicht möglich.", "Fehler", Sys.MB_Ok);
				}
				else
				{
					if (this.dfMGaus.Number == Sys.NUMBER_Null) 
					{
						this.dfMGaus.Number = 0;
					}
					if (this.dfZIaus.Number == Sys.NUMBER_Null) 
					{
						this.dfZIaus.Number = 0;
					}
					if (this.dfMGaus.Number > this.nMahnAus) 
					{
						Sal.MessageBox("Es sind nur € " + this.nMahnAus.ToString(2) + @" Mahngebühren offen.
Der eingegebene Betrag wird entsprechende gekürzt.", "zu hoher Betrag", Sys.MB_Ok);
						this.dfMGaus.Number = this.nMahnAus;
					}
					if (this.dfZIaus.Number > this.nZinsAus) 
					{
						Sal.MessageBox("Es sind nur € " + this.nZinsAus.ToString(2) + @" Zinsen offen.
Der eingegebene Betrag wird entsprechende gekürzt.", "zu hoher Betrag", Sys.MB_Ok);
						this.dfZIaus.Number = this.nZinsAus;
					}
					// 06.03.23 Ä2086
					Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
					if (this.dfBuchDat.DateTime < Var.dtINIMinBuchDat) 
					{
						this.dfBuchDat.DateTime = Var.dtINIMinBuchDat;
					}


					this.strBuchText = "STRE" + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0) + "/" + Int.PalStrNum(this.dfRechNr.Number, 6, 0);
					if (this.dfMGaus.Number != 0) 
					{
						Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16410, 16000, 0, :frmRechAusb.dfBuchDat, :frmRechAusb.strBuchText, :frmRechAusb.dfMGaus, 5)");
					}
					if (this.dfZIaus.Number != 0) 
					{
						Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16410, 16000, 0, :frmRechAusb.dfBuchDat, :frmRechAusb.strBuchText, :frmRechAusb.dfZIaus, 5)");
					}
					// 07.10.22 Ä2015
					// Set nDummyMwSt = nMwStVoll
					this.nDummyMwSt = 0;

					this.nBuchDM = (this.dfMGaus.Number + this.dfZIaus.Number) * -1;
					// 22.08.22 Ä2015 tkdmabr -> tkdmmahn
					// 20.11.23 Ä2144 + tkkontocode
					Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkrechdm, tkkzhaben, tkdmzaleis, tkdmzaarzn, tkdmzamahn,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkdmmahn, tksoll, tkhaben, tktavst, tkkontocode)
VALUES (:frmRechAusb.dfArztNr, 3, 0, :frmRechAusb.strBuchText,
:frmRechAusb.dfHalterNr, :frmRechAusb.dfRechNr, :frmRechAusb.dfBelNr,
:frmRechAusb.dfBuchDat, 0, 0,0 , 0,
0,0, 0, :nDummyMwSt, 0, 0, :frmRechAusb.nBuchDM,0, 0, 0, 'RechAusb-Zins')");

					this.nMahnGes = this.nMahnGes + this.dfMGaus.Number;
					this.nZinsGes = this.nZinsGes + this.dfZIaus.Number;
					Int.SqlImmed("UPDATE rk SET rkzamahn=:frmRechAusb.nMahnGes, rkzazins=:frmRechAusb.nZinsGes WHERE rkarztnr = :frmRechAusb.dfArztNr AND rkhalternr = :frmRechAusb.dfHalterNr AND rkrechnr = :frmRechAusb.dfRechNr");
					// 27.07.15 F2457
					Int.SqlImmedSel(@"SELECT (rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins) INTO :frmRechAusb.nDiverse
FROM rk WHERE rkarztnr = :frmRechAusb.dfArztNr AND rkhalternr = :frmRechAusb.dfHalterNr AND rkrechnr = :frmRechAusb.dfRechNr AND rkdeaktiv IS NULL");
					if (this.nDiverse == 0) 
					{
						Int.SqlImmed("UPDATE rk SET rkkzzahl=4 WHERE rkarztnr = :frmRechAusb.dfArztNr AND rkhalternr = :frmRechAusb.dfHalterNr AND rkrechnr = :frmRechAusb.dfRechNr");
					}
					// 01.07.15 F2441 nMahnGes + nMahnAus -> dfMGaus + dfZIaus
					this.nMahnAus = this.dfMGaus.Number + this.dfZIaus.Number;
					// 26.03.19 Ä1844 + , zaerfdat
					// 05.11.19 F4540 + zadmhf, zadmrest
					Int.SqlImmedX(@"INSERT INTO ZA
(zaarztnr,zahalternr,zarechnr,zakz,zabuchdat,zabelegnr,zadm, zaproznr, zabuchtext, zaerfdat, zadmhf, zadmrest)
VALUES (:frmRechAusb.dfArztNr,
:frmRechAusb.dfHalterNr,
:frmRechAusb.dfRechNr,
4,
:frmRechAusb.dfBuchDat,
0,
:frmRechAusb.nMahnAus,
NULL,
:frmRechAusb.strBuchText, SYSDATETIME, 0, :frmRechAusb.nMahnAus)");

					// Set dfSZAMahn = dfSDMMahn
					// Set dfSZAZins = dfSDMZins
					this.dfMGaus.Number = 0;
					this.dfZIaus.Number = 0;
					Sal.MessageBeep(0);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblRechnungen
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblRechnungenTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmRechAusb _frmRechAusb = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblRechnungenTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmRechAusb frmRechAusb
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmRechAusb == null) 
					{
						_frmRechAusb = (frmRechAusb)this.FindForm();
					}
					return _frmRechAusb;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblRechnungenTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblRechnungenTableWindow)SalWindow.FromHandle(handle, typeof(tblRechnungenTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class UpdateRechPositionLocals
			{
				public SalString strROWIDLocal = "";
				public SalNumber nInd = 0;
				public SalString pnSelect = "";
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnProzMwSt = 0;
				public SalNumber pnDiverse = 0;
				public SalNumber pnRP1MwSt = 0;
				public SalString pstrLA = "";
				public SalNumber pnReverseVersion = 0;
				public SalNumber pnRPZahl = 0;
			}
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class CheckRechAbLocals
			{
				public SalBoolean bExists = false;
				public SalNumber nInd = 0;
				public SalString pstrTHTi = "";
				public SalString pstrTHVN = "";
				public SalString pstrTHNN = "";
				public SalString pstrTHN2 = "";
				public SalString pstrTHStr = "";
				public SalString pstrTHOrt = "";
				public SalString pstrTHLand = "";
				public SalSqlHandle phSql = SalSqlHandle.Null;
				public SalNumber pnArztNr = 0;
				public SalNumber pnHalterNr = 0;
				public SalNumber pnRechNr = 0;
				public SalNumber pnZahlDM = 0;
			}
		}
		#endregion
	}
}
