// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmTSKWaisen : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlTSK = SalSqlHandle.Null;
		public SalNumber nRow = 0;
		public SalNumber nFetchTSKKopf = 0;
		public SalString strSelect = "";
		public SalNumber nAnz = 0;
		public SalString strTABank = "";
		public SalString strTABLZ = "";
		public SalString strTAKonto = "";
		public SalString strTVBank = "";
		public SalString strTVBLZ = "";
		public SalString strTVKonto = "";
		public SalString strTAIBAN = "";
		public SalString strTVIBAN = "";
		public SalString strTALand = "";
		public SalString strTABIC = "";
		public SalString strTVBIC = "";
		public SalString strTAN1 = "";
		public SalString strBank = "";
		public SalNumber nSumme = 0;
		public SalNumber nKonto = 0;
		public SalString strBuchText = "";
		public SalDateTime dtBuchDat = SalDateTime.Null;
		public SalNumber nArztNrAlt = 0;
        public SalArray<SalWindowHandle> hwndaCols = new SalArray<SalWindowHandle>();
        public SalArray<SalNumber> naColSortFlags = new SalArray<SalNumber>();
        #endregion

        #region Constructors/Destructors

        /// <summary>
        /// Default Constructor.
        /// </summary>
        public frmTSKWaisen()
		{
			// Assign global reference.
			App.frmTSKWaisen = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmTSKWaisen CreateWindow(Control owner)
		{
			frmTSKWaisen frm = new frmTSKWaisen();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmTSKWaisen FromHandle(SalWindowHandle handle)
		{
			return ((frmTSKWaisen)SalWindow.FromHandle(handle, typeof(frmTSKWaisen)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalHoleTabelle()
		{
            #region Actions
            using (new SalContext(this))
            {
                Sal.WaitCursor(true);
                // 10.02.09 OTÄ172 tskantrdat IS NOT NULL -->> (tskbeihdat IS NOT NULL OR tskantrdat IS NOT NULL)
                // 16.01.24
                // Set strSelect = 'SELECT aarztnr, bename, bedate, beerfdat, beanzahl, bebetrag, beguid
                // INTO :frmTSKWaisen.tblWaisen.colArztNr, :frmTSKWaisen.tblWaisen.colHaltername, :frmTSKWaisen.tblWaisen.colDate,
                // :frmTSKWaisen.tblWaisen.colErfDat, :frmTSKWaisen.tblWaisen.colAnzahl, :frmTSKWaisen.tblWaisen.colBeihilfe, :frmTSKWaisen.tblWaisen.colGUID
                // FROM be, a
                // WHERE beregarzt = aregnr AND bedate> 2023-7-1 AND bedate< SYSDATE-6 MONTHS AND beerldat IS NULL
                // '
                strSelect = @"SELECT bename, bedate, beerfdat, beanzahl, bebetrag, beguid, MAX(aarztnr)
INTO :frmTSKWaisen.tblWaisen.colHaltername, :frmTSKWaisen.tblWaisen.colDate,
:frmTSKWaisen.tblWaisen.colErfDat, :frmTSKWaisen.tblWaisen.colAnzahl, :frmTSKWaisen.tblWaisen.colBeihilfe, :frmTSKWaisen.tblWaisen.colGUID, :frmTSKWaisen.tblWaisen.colArztNr
FROM be, a
WHERE beregarzt = aregnr AND bedate> 2023-7-1 AND bedate< SYSDATE-6 MONTHS AND beerldat IS NULL
";
                tblWaisen.ResetTable();

                if (!(Sal.IsNull(dfArztNr)))
                {
                    strSelect = strSelect + " AND aarztnr = :frmTSKWaisen.dfArztNr ";
                }
                // 16.01.24
                strSelect = strSelect + "GROUP BY 1,2,3,4,5,6";

                // Set strSelect = strSelect || ' ORDER BY aarztnr, bename, bedate'
                if (tblWaisen.Populate(hSqlTSK, strSelect, Sys.TBL_FillAll))
                {
                }
                // 16.01.24
                hwndaCols[0] = tblWaisen.colArztNr;
                naColSortFlags[0] = MT.MTbl.MTS_ASC | MT.MTbl.MTS_DT_DEFAULT;
                hwndaCols[1] = tblWaisen.colHaltername;
                naColSortFlags[1] = MT.MTbl.MTS_ASC | MT.MTbl.MTS_DT_DEFAULT;
                hwndaCols[2] = tblWaisen.colDate;
                naColSortFlags[2] = MT.MTbl.MTS_ASC | MT.MTbl.MTS_DT_DEFAULT;
                if (!(MT.MTbl.Sort(tblWaisen, hwndaCols, naColSortFlags)))
                {
                    Sal.MessageBeep(0);
                }
                Sal.WaitCursor(false);
            }

            return 0;
            #endregion
        }

        /// <summary>
        /// </summary>
        /// <returns></returns>
        public SalNumber PalBuchen()
		{
			#region Actions
			using (new SalContext(this))
			{
				tblWaisen.KillCellEdit();
				App.frmMain.nUeberwNr = Int.PalGetProfileInt("BH", "Ueberweisungsnummer", 1);
				dtBuchDat = SalDateTime.Current;
				nArztNrAlt = 0;
				nSumme = 0;
				nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(tblWaisen.FindNextRow(ref nRow, 0, 0))) 
					{
						PalBuchEinzel();
						nSumme = 0;
						break;
					}
					tblWaisen.SetFocusRow(nRow);
					if (tblWaisen.colArztNr.Number != nArztNrAlt && nArztNrAlt != 0) 
					{
						PalBuchEinzel();
						nSumme = 0;
						// Call SalMessageBeep( 0 )
					}
					if (tblWaisen.colBeihilfe.Number > 0) 
					{
						nSumme = nSumme + tblWaisen.colBeihilfe.Number;
						Int.SqlImmed(@"UPDATE be SET beerldat=SYSDATETIME, bestatus = 'an Praxis überwiesen'
WHERE beguid = :frmTSKWaisen.tblWaisen.colGUID");
						// Call SalMessageBeep( 0 )
					}
					nArztNrAlt = tblWaisen.colArztNr.Number;

				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalBuchEinzel()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (nSumme > 0) 
				{
					strSelect = @"SELECT abank, ablz, akonto, aname1, aiban, aland, abic, @STRING(atvnkonto,0)
INTO  :frmTSKWaisen.strTABank, :frmTSKWaisen.strTABLZ, :frmTSKWaisen.strTAKonto, :frmTSKWaisen.strTAN1, :frmTSKWaisen.strTAIBAN, :frmTSKWaisen.strTALand, :frmTSKWaisen.strTABIC, :frmTSKWaisen.strBank
FROM a
WHERE aarztnr = :frmTSKWaisen.nArztNrAlt";
					Int.SqlImmedSel(strSelect);
					if (strTAIBAN.Scan(" ") > -1)  // 16.11.15 Ä1275
					{
						strTAIBAN = Int.PalStringStrip(strTAIBAN, " ");
					}
					if (strTABIC.Scan(" ") > -1)  // 16.11.15 Ä1275
					{
						strTABIC = Int.PalStringStrip(strTABIC, " ");
					}
					strTABLZ = Int.PalCheckBLZKonto(strTABLZ).Left(8);
					if (strTABIC == "") 
					{
						strTABIC = Int.PalGetBIC(strTABLZ);
					}
					strTAKonto = Int.PalCheckBLZKonto(strTAKonto).Left(10);
					if (strTALand == "") 
					{
						strTALand = "DE";
					}
					if (strTAIBAN == "" || !(Int.PalIBANPruef(strTAIBAN))) 
					{
						strTAIBAN = Int.PalIBAN(strTALand, strTABLZ, strTAKonto);
					}
					strBank = "15400";
					if (strBank == "" || strBank == "0") 
					{
						strBank = "12000";
					}
					// If strTAIBAN = '' or strTABIC = ''		! 14.01.14
					// Call SalMessageBox( 'IBAN oder BIC fehlen. Abschlag wird für Mitglied ' || SalNumberToStrX( tblWaisen.colArztNr, 0 ) || ' nicht durchgeführt.', 'Daten fehlen', MB_Ok|MB_IconExclamation )
					// Else

					nKonto = Int.PalValNum(strBank);
					Int.SqlImmedSel(@"SELECT bsname, bsblz, bskonto
INTO  :frmTSKWaisen.strTVBank, :frmTSKWaisen.strTVBLZ, :frmTSKWaisen.strTVKonto
FROM bs
WHERE bsnr = :frmTSKWaisen.nKonto");

					strTVBLZ = Int.PalCheckBLZKonto(strTVBLZ);
					strTVKonto = Int.PalCheckBLZKonto(strTVKonto);
					strTVIBAN = Int.PalIBAN("DE", strTVBLZ, strTVKonto);
					strTVBIC = Int.PalGetBIC(strTVBLZ);
					// 23.10.97
					strTABLZ = Int.PalCheckBLZKonto(strTABLZ);
					strTAKonto = Int.PalCheckBLZKonto(strTAKonto);
					// 16.07.19 Ä1860 + ueexportnr
					App.frmMain.nUeberwNr = Int.PalGetProfileInt("BH", "Ueberweisungsnummer", 1);
					// 26.07.16 Ä1393
					// Set strBuchText = 'Abschlag (' || PalStrNum(nTANr,4,0) || ')'
					strBuchText = "TSK-Beihilfen (" + Int.PalStrNum(nArztNrAlt, 4, 0) + ")";
					// 31.10.06 F73
					strTAN1 = strTAN1.Left(30);
					Int.SqlImmedX(@" INSERT INTO ue
(uetvnr, uetvbank, uetvblz, uetvkonto,
uetabank, uetablz, uetakonto,
uetaname, ueverw1,  uedm, uemanuell, uetviban, uetaiban, uetvbic, uetabic,
ueexportnr)
VALUES (:frmTSKWaisen.nKonto, :frmTSKWaisen.strTVBank, :frmTSKWaisen.strTVBLZ, :frmTSKWaisen.strTVKonto,
:frmTSKWaisen.strTABank, :frmTSKWaisen.strTABLZ, :frmTSKWaisen.strTAKonto,
:frmTSKWaisen.strTAN1, :frmTSKWaisen.strBuchText, :frmTSKWaisen.nSumme, 0, :frmTSKWaisen.strTVIBAN, :frmTSKWaisen.strTAIBAN, :frmTSKWaisen.strTVBIC, :frmTSKWaisen.strTABIC,
:frmMain.nUeberwNr)");
					// AV Tierarzt - FiBu
					nKonto = Int.PalValNum(strBank);
					// 26.07.16 Ä1393
					// Set strBuchText = '+Ueberw.-Abschlag '
					strBuchText = "+TSK-Beihilfen (" + nArztNrAlt.ToString(0) + ")";
					// 06.03.23 Ä2086
					Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
					if (dtBuchDat < Var.dtINIMinBuchDat) 
					{
						dtBuchDat = Var.dtINIMinBuchDat;
					}


					dtBuchDat = SalDateTime.Current;
					// 13.12.23 laut HE keine Buchung in Kontoauszug, nur in Sage-KHK
					// Call SqlImmedX('INSERT INTO TK
					// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
					// tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
					// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben, tkkontocode)
					// VALUES (:frmTSKWaisen.nArztNrAlt, 2, 0, :frmTSKWaisen.strBuchText, 0, 0, 0,
					// :frmTSKWaisen.dtBuchDat, :frmTSKWaisen.nKonto, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, :frmTSKWaisen.nSumme,
					// :frmTSKWaisen.nSumme, 0, NULL)')
					// AV Sachkonten - FiBu
					Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp,
fiexportnr)
VALUES (0, 15800, 15400, :frmTSKWaisen.nArztNrAlt, :frmTSKWaisen.dtBuchDat, :frmTSKWaisen.strBuchText,
:frmTSKWaisen.nSumme, 8,
:frmMain.nUeberwNr)");
					// 10.01.24
					Int.SqlImmedX(@" INSERT INTO bub
(bubbearbeiter, bubbearbdatum, bubarztnr, bubsoll, bubhaben, bubdm, bubbuchtext)
VALUES (:frmMain.strUser, SYSDATETIME, :frmTSKWaisen.nArztNrAlt, 15800, 15400, :frmTSKWaisen.nSumme, :frmTSKWaisen.strBuchText)");


					this.SetStatusBarText("Überweisung " + strTVBank + " Arzt-Nr. " + nArztNrAlt.ToString(0));
				}
				nSumme = 0;
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmTSKWaisen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmTSKWaisen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmTSKWaisen_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_CreateComplete:
					this.frmTSKWaisen_OnSAM_CreateComplete(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmTSKWaisen_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmTSKWaisen_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlConnection(ref this.hSqlTSK);
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmTSKWaisen_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalHoleTabelle();
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmTSKWaisen_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlTSK.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalHoleTabelle();
			#endregion
		}

        /// <summary>
        /// tblWaisen WindowActions Handler
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tblWaisen_WindowActions(object sender, WindowActionsEventArgs e)
        {
            #region Actions
            switch (e.ActionType)
            {
                case Sys.SAM_Create:
                    this.tblWaisen_OnSAM_Create(sender, e);
                    break;
            }
            #endregion
        }

        /// <summary>
        /// SAM_Create event handler.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tblWaisen_OnSAM_Create(object sender, WindowActionsEventArgs e)
        {
            #region Actions
            e.Handled = true;
            Int.PalPrepareMTbl(this.tblWaisen, 0xffffd8);
            #endregion
        }

        /// <summary>
        /// pbOk WindowActions Handler
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblWaisen.KillCellEdit();
			this.nRow = Sys.TBL_MinRow;
			while (true)
			{
				if (!(this.tblWaisen.FindNextRow(ref this.nRow, 0, 0))) 
				{
					break;
				}
				this.tblWaisen.SetFocusRow(this.nRow);

			}
			dlgLlDruck.ModalDialog(App.frmMain, "TSK-Waisen Rückzahlung.lst", "");
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblWaisen
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblWaisenTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmTSKWaisen _frmTSKWaisen = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblWaisenTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmTSKWaisen frmTSKWaisen
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmTSKWaisen == null) 
					{
						_frmTSKWaisen = (frmTSKWaisen)this.FindForm();
					}
					return _frmTSKWaisen;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblWaisenTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblWaisenTableWindow)SalWindow.FromHandle(handle, typeof(tblWaisenTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
