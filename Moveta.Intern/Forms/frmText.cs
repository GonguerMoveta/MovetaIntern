// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;
using System.Linq;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="nPArzt"></param>
	/// <param name="nPHalter"></param>
	/// <param name="nPRech"></param>
	/// <param name="lsPRTF"></param>
	public partial class frmText : FCRibbonFormWindow
	{
		#region Window Parameters
		public SalNumber nPArzt;
		public SalNumber nPHalter;
		public SalNumber nPRech;
		public SalString lsPRTF;
		#endregion
		
		#region Window Variables
		public SalNumber nHandle = 0;
		public SalNumber nRet = 0;
		public SalString lsString = "";
		public SalString lsText = "";
		public SalBoolean bOk = false;
		public SalVariant vCurSelection = new SalVariant();
		public SalVariant vOffset = new SalVariant();
		public SalVariant vFormat = new SalVariant();
		public SalString strDateiName = "";
		public SalString strDateiPfad = "";
		public SalNumber nFormat = 0;
		public SalNumber nFieldId = 0;
		public SalVariant vData = new SalVariant();
		public SalString strText = "";
		public SalString strDevice = "";
		public SalString strDriver = "";
		public SalString strPort = "";
		public SalNumber nDC = 0;
		public SalNumber nCurrentPages = 0;
		public SalSqlHandle hSqlText = SalSqlHandle.Null;
		public SalNumber nReturn = 0;
		public SalString strColumn = "";
		public SalString strFeld = "";
		public SalString strTable = "";
		public SalString strKKenn = "";
		public SalString strTKen = "";
		public SalNumber nZoom = 0;
		public SalString strZoom = "";
		public SalVariant vTableId = new SalVariant();
		public SalNumber nTabSpalten = 0;
		public SalNumber nTabZeilen = 0;
		public SalNumber nHeaderFooter = 0;
		public SalString lsWhere = "";
		public SalNumber hMenu = 0;
		public SalNumber nMenuID = 0;
		public SalArray<SalString> strDok = new SalArray<SalString>(5);
		public SalNumber nCount = 0;
		public SalNumber nFetchText = 0;
		public SalString strKundKenn = "";
		public SalNumber nPFirma = 0;
		public SalNumber nCopies = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmText(SalNumber nPArzt, SalNumber nPHalter, SalNumber nPRech, SalString lsPRTF)
		{
			// Assign global reference.
			App.frmText = this;
			// Window Parameters initialization.
			this.nPArzt = nPArzt;
			this.nPHalter = nPHalter;
			this.nPRech = nPRech;
			this.lsPRTF = lsPRTF;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
			//FC:FINAL: create menu as RibbonBar
			this.CreateRibbon();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmText CreateWindow(Control owner, SalNumber nPArzt, SalNumber nPHalter, SalNumber nPRech, SalString lsPRTF)
		{
			frmText frm = new frmText(nPArzt, nPHalter, nPRech, lsPRTF);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmText FromHandle(SalWindowHandle handle)
		{
			return ((frmText)SalWindow.FromHandle(handle, typeof(frmText)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// liest TA-Abrech-Disk ein
		/// </summary>
		/// <param name="bOpen"></param>
		/// <param name="strText"></param>
		/// <returns></returns>
		public SalNumber PalAbrDiskeinlesen(SalBoolean bOpen, SalString strText)
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(20);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strArExtensions[0] = "Dokumente - *.rtf";
				strArExtensions[1] = "*.rtf";
				strArExtensions[2] = "Acrobat-Dateien - *.pdf";
				strArExtensions[3] = "*.pdf";
				strArExtensions[4] = "Textdateien - *.txt";
				strArExtensions[5] = "*.txt";
				strArExtensions[6] = "Webseiten - *.html";
				strArExtensions[7] = "*.html";
				strArExtensions[8] = "Word 97-2003-Dokumente - *.doc";
				strArExtensions[9] = "*.doc";
				strArExtensions[10] = "Word 2007-Dokumente - *.docx";
				strArExtensions[11] = "*.docx";
				strArExtensions[12] = "alle Dateien - *.*";
				strArExtensions[13] = "*.*";
				if (bOpen) 
				{
					xOK = Sal.DlgOpenFile(this, strText, strArExtensions, 14, ref nIndex, ref strDateiName, ref strDateiPfad);
				}
				else
				{
					xOK = Sal.DlgSaveFile(this, strText, strArExtensions, 14, ref nIndex, ref strDateiName, ref strDateiPfad);
				}
				if (xOK) 
				{
					if (nIndex == 1) 
					{
						return 5;
					}
					else if (nIndex == 2) 
					{
						return 12;
					}
					else if (nIndex == 3) 
					{
						return 1;
					}
					else if (nIndex == 4) 
					{
						return 4;
					}
					else if (nIndex == 5) 
					{
						return 9;
					}
					else if (nIndex == 6) 
					{
						return 13;
					}
					else
					{
						return 5;
					}
				}
				else
				{
					return 0;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalResizeForm()
		{
			#region Local Variables
			SalNumber nPWidth = 0;
			SalNumber nPHeight = 0;
			SalNumber nVWidth = 0;
			SalNumber nVHeight = 0;
			SalNumber nFWidth = 0;
			SalNumber nFHeight = 0;
			SalNumber nX = 0;
			SalNumber nY = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				this.GetSize(ref nPWidth, ref nPHeight);
                axTXText.GetLocation(ref nX, ref nY);

				nFWidth = nPWidth - 0.5m;
				nFHeight = nPHeight - nY - 1.45m;

                axTXText.SetSize(nFWidth - 0.25m, nFHeight - 0.5m);
				axTXButton.SetSize(nFWidth - 0.5m, 0.25m);
				axTXRuler.SetSize(nFWidth - 0.5m, 0.25m);
				axTXStatus.SetSize(nFWidth - 0.5m, 0.25m);
				axTXStatus.SetLocation(nX, nY + nFHeight - 0.34m);

				// Call SalGetWindowSize( axTXRulerV, nVWidth, nVHeight )
				// Call SalSetWindowSize( axTXRulerV, nVWidth, nFHeight )

			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalCanUndo()
		{
			#region Local Variables
			SalNumber nPRet = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				axTXText.PropGetCanUndo(ref nPRet);
				return nPRet;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalCanRedo()
		{
			#region Local Variables
			SalNumber nPRet = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				axTXText.PropGetCanRedo(ref nPRet);
				return nPRet;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalRefreshFields()
		{
			#region Actions
			using (new SalContext(this))
			{

				if (!(axTXText.FieldNext(0, 0, ref nFieldId))) 
				{
					nFieldId = -1;
				}
				while (nFieldId > 0) 
				{
					strText = PalGetFieldData(nFieldId);

					axTXText.PropSetFieldCurrent(nFieldId);
					axTXText.PropSetFieldText(strText);
					if (!(axTXText.FieldNext(nFieldId, 0, ref nFieldId))) 
					{
						nFieldId = -1;
					}
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nPFieldId"></param>
		/// <returns></returns>
		public SalString PalGetFieldData(SalNumber nPFieldId)
		{
			#region Local Variables
			SalString strPText = "";
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				axTXText.PropSetFieldCurrent(nPFieldId);
				axTXText.PropGetFieldData(nPFieldId, vData);
				vData.GetString(ref strPText);

				this.strFeld = strPText.Left(strPText.Scan("."));
				Int.SqlImmedSel("SELECT name INTO :frmText.strTable FROM systables WHERE label = :frmText.strFeld");
				// Set strTable = 'KUNDEN'
				this.strFeld = strPText.Mid(strPText.Scan(".") + 1, 255);
				// Set frmText.strFeld = strPText
				this.strColumn = "";
				Int.SqlImmedSel("SELECT name INTO :frmText.strColumn FROM syscolumns WHERE tbname = :frmText.strTable AND label = :frmText.strFeld");
				// Set strPSelect = strPSelect || ' ORDER BY ' || strOrderOblig || strTable || '.' || strColumn || ', ' || strOrder

				this.strText = "";
				if (this.strColumn != "") 
				{
					if (strTable == "AERZTE") 
					{
						Int.SqlImmedSel("SELECT " + strColumn + " INTO :frmText.strText FROM a WHERE aarztnr = :frmText.dfArztNr");
					}
					else if (strTable == "HALTER") 
					{
						Int.SqlImmedSel("SELECT " + strColumn + " INTO :frmText.strText FROM h WHERE harztnr = :frmText.dfArztNr AND hhalternr = :frmText.dfHalterNr AND hdeaktiv IS NULL");
					}
					else if (strTable == "RECHKO") 
					{
						Int.SqlImmedSel("SELECT " + strColumn + @" INTO :frmText.strText FROM rk WHERE rkarztnr = :frmText.dfArztNr AND rkhalternr = :frmText.dfHalterNr AND rkrechnr = :frmText.dfRechNr
 AND rkdeaktiv IS NULL");
					}
				}
				return this.strText;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strPFile"></param>
		/// <returns></returns>
		public SalNumber PalSaveFileMenu(SalString strPFile)
		{
			#region Actions
			using (new SalContext(this))
			{
				if (strPFile != strDok[0] && strPFile != strDok[1] && strPFile != strDok[2] && strPFile != strDok[3] && strPFile != strDok[4]) 
				{
					strDok[4] = strDok[3];
					strDok[3] = strDok[2];
					strDok[2] = strDok[1];
					strDok[1] = strDok[0];
					strDok[0] = strPFile;
					Sal.SetProfileString("Textverarbeitung", Var.strBNUser + ":1", strDok[0], "TVN.INI");
					if (strDok[0] != "") 
					{
						Sal.SetProfileString("Textverarbeitung", Var.strBNUser + ":2", strDok[1], "TVN.INI");
					}
					if (strDok[1] != "") 
					{
						Sal.SetProfileString("Textverarbeitung", Var.strBNUser + ":3", strDok[2], "TVN.INI");
					}
					if (strDok[2] != "") 
					{
						Sal.SetProfileString("Textverarbeitung", Var.strBNUser + ":4", strDok[3], "TVN.INI");
					}
					if (strDok[3] != "") 
					{
						Sal.SetProfileString("Textverarbeitung", Var.strBNUser + ":5", strDok[4], "TVN.INI");
					}

					hMenu = Vis.MenuGetHandle(this);
					hMenu = Vis.MenuGetPopupHandle(this,hMenu, 0);
					Vis.MenuDelete(this, hMenu, 8);
					Vis.MenuDelete(this, hMenu, 9);
					Vis.MenuDelete(this, hMenu, 10);
					Vis.MenuDelete(this, hMenu, 11);
					Vis.MenuDelete(this, hMenu, 12);
					Vis.MenuDelete(this, hMenu, 13);

					PalFetchMenuFiles();
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalFetchMenuFiles()
		{
			#region Actions
			using (new SalContext(this))
			{
				hMenu = Vis.MenuGetHandle(this);
				hMenu = Vis.MenuGetPopupHandle(this, hMenu, 0);
				Vis.MenuInsert(this, hMenu, 7, "", Vis.MF_Separator);

				nCount = 0;
				while (nCount < 5) 
				{
					Sal.GetProfileString("Textverarbeitung", Var.strBNUser + ":" + (nCount + 1).ToString(0), "", ref strDok.GetArray(nCount)[nCount], "TVN.INI");
					if (strDok[nCount] != "") 
					{
						strDok[nCount] = Int.PalStrReplace(strDok[nCount], "\\", "/");
						nMenuID = Vis.MenuInsert(this, hMenu, 8 + nCount, strDok[nCount], 0);
					}
					nCount = nCount + 1;
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalGetHeaderFooter()
		{
			#region Local Variables
			SalNumber nPHeaderFooter = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				axTXText.PropGetHeaderFooter(ref nPHeaderFooter);
				return nPHeaderFooter;
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem__Neu_MenuActions()
		{
			SalBoolean temp1 = nRet;
			axTXText.ResetContents(ref temp1);
			nRet = temp1;
			this.SetText("Textverarbeitung");
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem__Öffnen_MenuActions()
		{
			nFormat = PalAbrDiskeinlesen(true, "Dokument öffnen");
			if (nFormat > 0) 
			{
				vFormat.SetNumber(nFormat, Sys.VT_I1);
				vOffset.SetNumber(0, Sys.VT_I1);
				vCurSelection.SetBoolean(false);
				axTXText.Load(strDateiPfad, vOffset, vFormat, vCurSelection, ref nRet);
				this.SetText("Textverarbeitung - " + strDateiPfad);

				PalSaveFileMenu(strDateiPfad);
			}
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem__Speichern_MenuActions()
		{
			nFormat = PalAbrDiskeinlesen(false, "Dokument speichern");
			if (nFormat > 0) 
			{
				vFormat.SetNumber(nFormat, Sys.VT_I1);
				vOffset.SetNumber(0, Sys.VT_I1);
				vCurSelection.SetBoolean(false);
				axTXText.Save(strDateiPfad, vOffset, vFormat, vCurSelection, ref nRet);
				this.SetText("Textverarbeitung - " + strDateiPfad);

				PalSaveFileMenu(strDateiPfad);
			}
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Seite_MenuActions()
		{
			axTXText.SectionFormatDialog(0, ref bOk);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Drucker_MenuActions()
		{
			if (Sal.PrtSetup(ref strDevice, ref strDriver, ref strPort, true)) 
			{
				if (nDC) 
				{
					Ext.DeleteDC(nDC);
				}
				nDC = Ext.CreateDCA(strDriver, strDevice, "", 0);
				if (!(nDC)) 
				{
					Sal.MessageBox("Ungültiges Druckhandle", "Fehler", Sys.MB_Ok);
				}
				else
				{
					if (!(axTXText.PropSetPrintDevice(nDC))) 
					{
						Sal.MessageBox("Konnte Druckgerät nicht einstellen.", "Fehler (SetPrintDevice)", Sys.MB_Ok);
					}
					// Call DeleteDC( nDC )
				}
				// Call DeleteDC( nDC )
			}
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem__Drucken_MenuActions()
		{

			PalRefreshFields();

			if (!(axTXText.PropGetCurrentPages(ref nCurrentPages))) 
			{
				Sal.MessageBox("Konnte Seitenanzahl nicht berechnen.", "Fehler (GetCurrentPages)", Sys.MB_Ok);
			}
			else
			{
				nCopies = 1;
				if (1 == dlgEinCopies.ModalDialog(this, ref nCopies)) 
				{
				}
				axTXText.PrintDoc("Pegasus-Dokument", 1, nCurrentPages, nCopies);
				axTXText.PropSetSelStart(0);
				axTXText.PropSetSelLength(99999999);
				axTXText.PropGetRTFSelText(ref lsString);
				axTXText.PropGetSelText(ref lsText);
				// 13.05.14 F2027
				dfHalterNr.Number = Int.PalCheckNULL(dfHalterNr.Number);

				Int.SqlImmed(@"INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zrtftext, zerfdat)
VALUES (:strBNZei, '*', :frmText.dfArztNr, :frmText.dfHalterNr, :frmText.dfRechNr,
:frmText.lsText , SYSDATE, NULL, 'J', 'BR', NULL, NULL, NULL, NULL, NULL,NULL,NULL,NULL,0, :frmText.lsString, SYSDATETIME)");
			}
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem__Rückgängig_EnabledWhen()
		{
			return PalCanUndo() != 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem__Rückgängig_MenuActions()
		{
			axTXText.Undo(ref bOk);
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem__Wiederholen_EnabledWhen()
		{
			return PalCanRedo() != 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem__Wiederholen_MenuActions()
		{
			axTXText.Redo(ref bOk);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem__Ausschneiden_MenuActions()
		{
			axTXText.Clip(1);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem__Kopieren_MenuActions()
		{
			axTXText.Clip(2);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem__Einfügen_MenuActions()
		{
			axTXText.Clip(3);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem__Löschen_MenuActions()
		{
			axTXText.Clip(4);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem__Suchen_MenuActions()
		{
			axTXText.FindReplace(1);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Suchen_MenuActions()
		{
			axTXText.FindReplace(2);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_neue_MenuActions()
		{
			axTXText.PropSetSelText(((SalNumber)12).ToCharacter());
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_neuer_MenuActions()
		{
			axTXText.SectionInsert(256, -1, ref bOk);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Textfeld_MenuActions()
		{
			axTXText.TextFrameInsert(-1, 1, 0, 0, 1440, 1440, 3, 0, 0, 0, 0, ref nRet);
			axTXText.PropSetTextFrameMarkerLines(false);
			// Call axTXText.PropSetTextFrameBorderWidth( 0 )
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Tabelle_MenuActions()
		{
			vTableId.SetNumber(10, Sys.VT_I2);
			if (1 == dlgEinTabelle.ModalDialog(this, ref nTabSpalten, ref nTabZeilen)) 
			{
				axTXText.TableInsert(nTabZeilen, nTabSpalten, -1, vTableId, ref nRet);
			}
			return 0;
		}
		
		/// <summary>
		/// Menu CheckedWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Kopfzeile_CheckedWhen()
		{
			return PalGetHeaderFooter() == 1 || PalGetHeaderFooter() == 5;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Kopfzeile_MenuActions()
		{
			nHeaderFooter = PalGetHeaderFooter();
			if (nHeaderFooter == 1 || nHeaderFooter == 5)  // Kopfzeile bereits da
			{
				axTXText.PropSetHeaderFooter(nHeaderFooter - 1);
			}
			else
			{
				axTXText.PropSetHeaderFooter(nHeaderFooter + 1);
				axTXText.HeaderFooterSelect(1, ref bOk);
				axTXText.PropSetSelText("");
				axTXText.HeaderFooterSelect(0, ref bOk);
				axTXText.HeaderFooterActivate(1, ref bOk);
			}
			return 0;
		}
		
		/// <summary>
		/// Menu CheckedWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Fußzeile_CheckedWhen()
		{
			return PalGetHeaderFooter() == 4 || PalGetHeaderFooter() == 5;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Fußzeile_MenuActions()
		{
			nHeaderFooter = PalGetHeaderFooter();
			if (nHeaderFooter == 4 || nHeaderFooter == 5)  // Fußzeile bereits da
			{
				axTXText.PropSetHeaderFooter(nHeaderFooter - 4);
			}
			else
			{
				axTXText.PropSetHeaderFooter(nHeaderFooter + 4);
				axTXText.HeaderFooterSelect(4, ref bOk);
				axTXText.PropSetSelText("");
				axTXText.HeaderFooterSelect(0, ref bOk);
				axTXText.HeaderFooterActivate(4, ref bOk);
			}
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Schriftart_MenuActions()
		{
			axTXText.FontDialog(ref bOk);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Formatvorlagen_MenuActions()
		{
			axTXText.StyleDialog(ref bOk);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Absatz_MenuActions()
		{
			axTXText.ParagraphDialog(ref bOk);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Tabulatoren_MenuActions()
		{
			axTXText.TabDialog(ref bOk);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Numerierungen_MenuActions()
		{
			axTXText.ListAttrDialog(ref bOk);
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Tabelleneigenschaften_MenuActions()
		{
			axTXText.PropGetTableAtInputPos(ref nRet);
			if (nRet == 0) 
			{
				Sal.MessageBox("Bitte klicken Sie vorher in ein Tabellenfeld", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				axTXText.TableAttrDialog(ref bOk);
			}
			return 0;
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Objekteigenschaften_MenuActions()
		{
			axTXText.PropGetObjectCurrent(ref nRet);
			if (nRet == 0) 
			{
				Sal.MessageBox("Bitte markieren Sie vorher ein Objekt.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				axTXText.ObjectAttrDialog(ref bOk);
			}
			return 0;
		}
		
		/// <summary>
		/// frmText WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmText_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmText_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_CreateComplete:
					this.frmText_OnSAM_CreateComplete(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmText_OnSAM_Destroy(sender, e);
					break;
				
				// On SAM_Close
				
				case Const.WM_WINDOWPOSCHANGED:
					this.frmText_OnWM_WINDOWPOSCHANGED(sender, e);
					break;
				
				case Vis.VTM_MenuSelect:
					this.frmText_OnVTM_MenuSelect(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmText_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.MapEnterToTab(false);

			this.PalFetchMenuFiles();

			Int.SqlConnection(ref this.hSqlText);
			this.cmbTabelle.ClearList();
            //FC:FINAL:WORKAROUND) systables
//            this.hSqlText.Prepare(@"SELECT label  FROM systables
//INTO :frmText.strTable
//WHERE label is not null AND system = 'N' AND label <> '-' AND @UPPER(label) NOT LIKE '%INTERN%'
//AND name IN ('AERZTE','HALTER','RECHKO')
//ORDER BY systables.name");
//            this.hSqlText.Execute();
//            this.nReturn = this.hSqlText.FetchNext();
//            while (this.nReturn != Sys.FETCH_EOF)
//            {
//                this.nRet = this.cmbTabelle.AddListItem(this.strTable);
//                this.nReturn = this.hSqlText.FetchNext();
//            }
			var tableNames = Var.SYSTABLES.OrderBy(x => x.Name).Where(x => !string.IsNullOrEmpty(x.Label) && x.System == "N" && x.Label != "-" && !x.Label.ToUpper().Contains("INTERN") && (x.Name == "AERZTE" || x.Name == "HALTER" || x.Name == "RECHKO")).Select(x => x.Label).ToList();
			foreach(var table in tableNames)
            {
				this.nRet = this.cmbTabelle.AddListItem(this.strTable);
			}
			// !
			if (this.nPArzt != 0 && this.nPArzt != SalNumber.Null)
            {
                this.dfArztNr.Number = this.nPArzt;
            }
            if (this.nPHalter != 0 && this.nPHalter != SalNumber.Null)
            {
                this.dfHalterNr.Number = this.nPHalter;
            }
            if (this.nPRech != 0 && this.nPRech != SalNumber.Null)
            {
                this.dfRechNr.Number = this.nPRech;
            }
            #endregion
        }
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmText_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.lsPRTF != "") 
			{
				this.axTXText.PropSetRTFSelText(this.lsPRTF);
			}
			Var.bfrmText = true;
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmText_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.bfrmText = false;
			Sal.MapEnterToTab(true);
			if (this.nDC) 
			{
				Ext.DeleteDC(this.nDC);
			}
			this.hSqlText.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// WM_WINDOWPOSCHANGED event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmText_OnWM_WINDOWPOSCHANGED(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalResizeForm();
			#endregion
		}
		
		/// <summary>
		/// VTM_MenuSelect event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmText_OnVTM_MenuSelect(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.strDateiPfad = Vis.MenuGetText(this, this.hMenu, Sys.lParam);
			this.strDateiPfad = Int.PalStrReplace(this.strDateiPfad, "/", "\\");
			// Set strArExtensions[0] = 'Dokumente - *.rtf'
			// Set strArExtensions[1] = '*.rtf'
			// Set strArExtensions[2] = 'Acrobat-Dateien - *.pdf'
			// Set strArExtensions[3] = '*.pdf'
			// Set strArExtensions[4] = 'Textdateien - *.txt'
			// Set strArExtensions[5] = '*.txt'
			// Set strArExtensions[6] = 'Webseiten - *.html'
			// Set strArExtensions[7] = '*.html'
			// Set strArExtensions[8] = 'Word 97-2003-Dokumente - *.doc'
			// Set strArExtensions[9] = '*.doc'
			// Set strArExtensions[10] = 'Word 2007-Dokumente - *.docx'
			// Set strArExtensions[11] = '*.docx'
			// Set strArExtensions[12] = 'alle Dateien - *.*'
			// Set strArExtensions[13] = '*.*'
			if (this.strDateiPfad.Right(4) == ".rtf") 
			{
				this.nFormat = 5;
			}
			else if (this.strDateiPfad.Right(4) == ".pdf") 
			{
				this.nFormat = 12;
			}
			else if (this.strDateiPfad.Right(4) == ".txt") 
			{
				this.nFormat = 1;
			}
			else if (this.strDateiPfad.Right(5) == ".html") 
			{
				this.nFormat = 4;
			}
			else if (this.strDateiPfad.Right(4) == ".doc") 
			{
				this.nFormat = 9;
			}
			else if (this.strDateiPfad.Right(5) == ".docx") 
			{
				this.nFormat = 13;
			}
			else
			{
				this.nFormat = 0;
			}
			if (this.nFormat > 0) 
			{
				this.vFormat.SetNumber(this.nFormat, Sys.VT_I1);
				this.vOffset.SetNumber(0, Sys.VT_I1);
				this.vCurSelection.SetBoolean(false);
				this.axTXText.Load(this.strDateiPfad, this.vOffset, this.vFormat, this.vCurSelection, ref this.nRet);
				this.SetText("Textverarbeitung - " + this.strDateiPfad);
			}
			#endregion
		}
		
		/// <summary>
		/// axTXButton WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void axTXButton_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.axTXButton_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void axTXButton_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.axTXButton.PropSetStyle(2);
			this.axTXButton.PropSetLanguage(49);
			#endregion
		}
		
		/// <summary>
		/// axTXRuler WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void axTXRuler_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.axTXRuler_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void axTXRuler_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.axTXRuler.PropSetLanguage(49);
			#endregion
		}
		
		/// <summary>
		/// axTXText WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void axTXText_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.axTXText_OnSAM_Create(sender, e);
					break;
				
				// On FieldClicked
				
				// Parameters
				
				// Number: FieldId
				
				// Actions
				
				// Set strText = PalGetFieldData(FieldId)
				
				// Call SalMessageBox(strText, 'Inhalt', MB_Ok|MB_IconAsterisk)
				
				// On FieldSetCursor
				
				// Parameters
				
				// Number: FieldId
				
				// Receive Number: MousePointer
				
				// Actions
				
				// Set strText = PalGetFieldData(FieldId)
				
				// Call axTXText.PropSetFieldCurrent( FieldId )
				
				// Call axTXText.PropSetFieldText( strText )
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void axTXText_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.axTXButton.PropGethWnd(ref this.nHandle);
			this.axTXText.PropSetButtonBarHandle(this.nHandle);
			this.axTXRuler.PropGethWnd(ref this.nHandle);
			this.axTXText.PropSetRulerHandle(this.nHandle);
			this.axTXRulerV.PropGethWnd(ref this.nHandle);
			this.axTXText.PropSetVerticalRulerHandle(this.nHandle);
			this.axTXStatus.PropGethWnd(ref this.nHandle);
			this.axTXText.PropSetStatusBarHandle(this.nHandle);
			this.axTXText.PropSetLanguage(49);
			this.axTXText.PropSetTabKey(true);
			#endregion
		}
		
		/// <summary>
		/// axTXStatus WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void axTXStatus_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.axTXStatus_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void axTXStatus_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.axTXStatus.PropSetLanguage(49);
			this.axTXStatus.PropSetTextSection("Abschnitt ");
			#endregion
		}
		
		/// <summary>
		/// axTXRulerV WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void axTXRulerV_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.axTXRulerV_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void axTXRulerV_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.axTXRulerV.PropSetDirection(1);
			#endregion
		}
		
		/// <summary>
		/// cmbTabelle WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbTabelle_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cmbTabelle_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbTabelle_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.cmbFeld.ClearList();
            //FC:FINAL:WORKAROUND: syscolumns.label
//            this.hSqlText.Prepare(@"SELECT syscolumns.label FROM systables, syscolumns
//INTO :frmText.strColumn
//WHERE syscolumns.label <>'-' AND syscolumns.label NOT LIKE '%intern%' AND systables.label = :frmText.cmbTabelle
//AND syscolumns.coltype <> 'LONGVAR'
//AND systables.name = syscolumns.tbname
//ORDER BY colno");
//            this.hSqlText.Execute();
//            this.nReturn = this.hSqlText.FetchNext();
//            while (this.nReturn != Sys.FETCH_EOF)
//            {
//                this.cmbFeld.AddListItem(this.strColumn);
//                this.nReturn = this.hSqlText.FetchNext();
//            }
			var columnLabels = Var.SYSCOLUMNS.OrderBy(c => c.Colno).Where(c => c.Label != "-" && !c.Label.ToUpper().Contains("INTERN") && c.Coltype == "LONGVAR" && c.Label == cmbTabelle.Text).Select(c => c.Label).ToList();
			foreach(var columnLabel in columnLabels)
            {
				this.cmbFeld.AddListItem(this.strColumn);
			}
			#endregion
		}
		
		/// <summary>
		/// cmbFeld WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbFeld_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.cmbFeld_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void cmbFeld_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.cmbFeld.Text != "") 
			{
				this.axTXText.FieldInsert(this.cmbTabelle.Text + "." + this.cmbFeld.Text, ref this.bOk);
				if (!(this.bOk)) 
				{
					Sal.MessageBox("Nicht erfolgreich", "Achtung", Sys.MB_Ok);
				}
				else
				{
					this.axTXText.PropGetFieldCurrent(ref this.nFieldId);
					if (!(this.vData.SetString(this.cmbTabelle.Text + "." + this.cmbFeld.Text))) 
					{
						Sal.MessageBox("SetString " + this.cmbTabelle.Text + "." + this.cmbFeld.Text, "Fehler", Sys.MB_Ok);
					}
					this.axTXText.PropSetFieldData(this.nFieldId, this.vData);
					this.axTXText.PropSetSelText(" ");
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbRefresh WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRefresh_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbRefresh_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbRefresh_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRefresh_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalRefreshFields();
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbRefresh_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbRefresh, "Felder im Dokument aktualisieren");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
			this.DestroyWindow();
			#endregion
		}
		#endregion
	}
}
