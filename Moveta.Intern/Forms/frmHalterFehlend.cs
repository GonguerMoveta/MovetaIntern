// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmHalterFehlend : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlHalter = SalSqlHandle.Null;
		public SalSqlHandle hSqlHalter2 = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalBoolean bPFarbe = false;
		public SalNumber nAnzahl = 0;
		public SalNumber nGesamt = 0;
		public SalNumber nNach = 0;
		public SalString strFelder = "";
		public SalString strFeld = "";
		public SalSqlHandle hSqlFelder = SalSqlHandle.Null;
		public SalNumber nFetchFelder = 0;
		public SalNumber nPCount = 0;
		public SalBoolean bPOk = false;
		public MTblPrintParams PrintParams = new MTblPrintParams();
		public SalString strDevice = "";
		public SalNumber nResult = 0;
		public SalNumber nAnz = 0;
		public SalNumber nOff = 0;
		public SalArray<SalString> strPrinters = new SalArray<SalString>();
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmHalterFehlend()
		{
			// Assign global reference.
			App.frmHalterFehlend = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmHalterFehlend CreateWindow(Control owner)
		{
			frmHalterFehlend frm = new frmHalterFehlend();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmHalterFehlend FromHandle(SalWindowHandle handle)
		{
			return ((frmHalterFehlend)SalWindow.FromHandle(handle, typeof(frmHalterFehlend)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmHalterFehlend WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmHalterFehlend_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmHalterFehlend_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmHalterFehlend_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.strFelder = "";
			this.hSqlFelder.Connect();
			if (Sys.IDOK == Int.SqlHandleExec(this.hSqlFelder, "SELECT name INTO :frmHalterFehlend.strFeld FROM syscolumns WHERE tbname = \'HALTER\' AND name <> \'HARZTNR\' ORDER BY colno", "Programmfehler bei fehlende Halter kopieren", ref this.nPCount)) 
			{
				this.nFetchFelder = this.hSqlFelder.FetchNext();
				while (this.nFetchFelder != Sys.FETCH_EOF) 
				{

					this.strFelder = this.strFelder + ", " + this.strFeld;
					this.nFetchFelder = this.hSqlFelder.FetchNext();
				}
			}
			this.hSqlFelder.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT anr2, aname1, aname2 INTO :frmHalterFehlend.dfArztNr2, :frmHalterFehlend.dfArztName, :frmHalterFehlend.dfArztName2
FROM a WHERE aarztnr = :frmHalterFehlend.dfArztNr");
			if (this.dfArztNr2.Number == 0 || this.dfArztNr2.Number == Sys.NUMBER_Null) 
			{
				this.dfArztNr2.Number = this.dfArztNr.Number;
				Sal.MessageBox("Diese Funktion kann nur f√ºr Gemeinschaftspraxen verwendet werden.", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.pbOk.HideWindow();
			}
			else
			{
				this.pbOk.ShowWindow();
			}
			#endregion
		}
		
		/// <summary>
		/// tblHalterDoppelt WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHalterDoppelt_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblHalterDoppelt_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_FetchRowDone:
					this.tblHalterDoppelt_OnSAM_FetchRowDone(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHalterDoppelt_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblHalterDoppelt, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// SAM_FetchRowDone event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHalterDoppelt_OnSAM_FetchRowDone(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblHalterDoppelt.colnArztNr.Number == this.dfArztNr.Number) 
			{
				this.nNach = this.dfArztNr2.Number;
			}
			else if (this.tblHalterDoppelt.colnArztNr.Number == this.dfArztNr2.Number) 
			{
				this.nNach = this.dfArztNr.Number;
			}
			if (Sys.IDOK != Int.SqlHandleExec(this.hSqlHalter2, "insert into h (harztnr" + this.strFelder + @")
select " + this.nNach.ToString(0) + this.strFelder + @"
 from h where harztnr= " + this.tblHalterDoppelt.colnArztNr.Number.ToString(0) + " and hhalternr= " + this.tblHalterDoppelt.colnHalterNr.Number.ToString(0), "Halter kopieren: Halter", ref this.nPCount)) 
			{
				this.bPOk = false;
				App.frmHalterKopieren.lsPResult = App.frmHalterKopieren.lsPResult + @"Fehler beim Kopieren der Halter.
";
			}
			else
			{
				this.nGesamt = this.nGesamt + 1;
			}
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			this.nGesamt = 0;
			// Set strName=strName||'%'
			this.strSelect = @"select hhalternr, count(*), min(harztnr)
into :frmHalterFehlend.tblHalterDoppelt.colnHalterNr, :frmHalterFehlend.tblHalterDoppelt.colnAnzahl, :frmHalterFehlend.tblHalterDoppelt.colnArztNr
from H WHERE harztnr IN (:frmHalterFehlend.dfArztNr, :frmHalterFehlend.dfArztNr2) GROUP BY 1 HAVING count(*)=1";
			Int.SqlConnection(ref this.hSqlHalter);
			Int.SqlConnection(ref this.hSqlHalter2);
			if (this.tblHalterDoppelt.Populate(this.hSqlHalter, this.strSelect, Sys.TBL_FillAll)) 
			{
			}
			Sal.MessageBox("Es wurden " + this.nGesamt.ToString(0) + " Halter in die fehlende Arzt-Nummer kopiert.", "Fertig", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			this.hSqlHalter2.Disconnect();
			this.hSqlHalter.Disconnect();
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// pbDrucken WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.pbDrucken_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Click:
					this.pbDrucken_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nAnz = MT.MTbl.PrintGetPrinterNames(this.strPrinters);
			this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			this.nOff = -1;
			this.nResult = 0;
			while (this.nResult < this.nAnz) 
			{
				this.lbPrinters.AddListItem(this.strPrinters[this.nResult]);
				if (this.strPrinters[this.nResult] == this.strDevice) 
				{
					this.nOff = this.nResult;
				}
				this.nResult = this.nResult + 1;
			}
			if (this.nOff >= 0) 
			{
				this.lbPrinters.SetListSelectedIndex(this.nOff);
			}

			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Set nErr = 1
			// Set strReportName = 'ABSCHVOR'
			// Set hWndReport = SalReportTableView(tblAbschVor,hWndNULL,'ABSCHVOR.QRP',nErr)
			this.PrintParams.Init();
			this.PrintParams.DocName = "fehlende Halter bei " + this.dfArztNr.Number.ToString(0) + "/" + this.dfArztNr2.Number.ToString(0);
			this.PrintParams.Orientation = MT.MTbl.MTP_OR_LANDSCAPE;
			this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			this.nResult = this.lbPrinters.GetListSelectedIndex();
			if (this.nResult == Sys.LB_Err) 
			{
				this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			}
			else
			{
				this.strDevice = this.lbPrinters.GetListItemText(this.nResult);
			}
			this.PrintParams.PrinterName = this.strDevice;
			// 07.11.13 F1760
			this.PrintParams.Language = MT.MTbl.MTP_LNG_GERMAN;

			MT.MTbl.Print(this.tblHalterDoppelt, this.PrintParams);

			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblHalterDoppelt
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblHalterDoppeltTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmHalterFehlend _frmHalterFehlend = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblHalterDoppeltTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmHalterFehlend frmHalterFehlend
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmHalterFehlend == null) 
					{
						_frmHalterFehlend = (frmHalterFehlend)this.FindForm();
					}
					return _frmHalterFehlend;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblHalterDoppeltTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblHalterDoppeltTableWindow)SalWindow.FromHandle(handle, typeof(tblHalterDoppeltTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
