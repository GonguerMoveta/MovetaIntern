// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="nPArzt"></param>
	/// <param name="nPHalter"></param>
	/// <param name="nPRech"></param>
	public partial class frmBrAktiErf : SalFormWindow
	{
		#region Window Parameters
		public SalNumber nPArzt;
		public SalNumber nPHalter;
		public SalNumber nPRech;
		#endregion
		
		#region Window Variables
		public SalSqlHandle hSqlAktiErf = SalSqlHandle.Null;
		public SalBoolean bOk = false;
		public SalBoolean bJa = false;
		public SalNumber nArztNr2 = 0;
		public SalNumber nKZPraxArt = 0;
		public SalNumber nBatchBuch = 0;
		public SalString strTyp = "";
		public SalString strTAN1 = "";
		public SalString strTAN2 = "";
		public SalString strTAStr = "";
		public SalString strTAOrt = "";
		public SalString strTALand = "";
		public SalString strTAAnrede = "";
		public SalString strTAMail = "";
		public SalString strTHN1 = "";
		public SalString strTHN2 = "";
		public SalString strTHStr = "";
		public SalString strTHOrt = "";
		public SalString strTHLand = "";
		public SalString strEWA = "";
		public SalString strZei = "";
		public SalString strEL = "";
		public SalString strELZei = "";
		public SalString strAbtlg = "";
		public SalString strKuerzel = "";
		public SalString lsText = "";
		public SalDateTime dtErinnerung = SalDateTime.Null;
		public SalNumber nFax = 0;
		public SalNumber nPRNr = 0;
		public SalDateTime dtTHSperrDatum = SalDateTime.Null;
		public SalNumber nMaxScheckNr = 0;
		public SalString strAZ = "";
		public SalString strTSKFehler = "";
		public SalArray<SalNumber> nSelectedArray = new SalArray<SalNumber>();
		public SalNumber nSelected = 0;
		public SalDateTime dtTHGebDat = SalDateTime.Null;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmBrAktiErf(SalNumber nPArzt, SalNumber nPHalter, SalNumber nPRech)
		{
			// Assign global reference.
			App.frmBrAktiErf = this;
			// Window Parameters initialization.
			this.nPArzt = nPArzt;
			this.nPHalter = nPHalter;
			this.nPRech = nPRech;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmBrAktiErf CreateWindow(Control owner, SalNumber nPArzt, SalNumber nPHalter, SalNumber nPRech)
		{
			frmBrAktiErf frm = new frmBrAktiErf(nPArzt, nPHalter, nPRech);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmBrAktiErf FromHandle(SalWindowHandle handle)
		{
			return ((frmBrAktiErf)SalWindow.FromHandle(handle, typeof(frmBrAktiErf)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber LoescheMaske()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.ClearField(dfArztNr);
				Sal.ClearField(dfArztName);
				Sal.ClearField(dfHalterNr);
				Sal.ClearField(dfHalterName);
				Sal.ClearField(dfHalterName2);
				Sal.ClearField(dfRechNr);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HoleArzt()
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlImmedSel(@"SELECT anr2, akzpraxart
INTO :frmBrAktiErf.nArztNr2, :frmBrAktiErf.nKZPraxArt
FROM a WHERE aarztnr=:frmBrAktiErf.dfArztNr");
				if (nKZPraxArt == 2) 
				{
					// 06.06.02 rausgenommen, da für A-Nr. keine Daten aus frmRgSuchen übernommen.
					// Set dfArztNr = nArztNr2
					// Call SqlImmedSel('SELECT anr2
					// INTO :frmBrAktiErf.nArztNr2
					// FROM a WHERE aarztnr=:frmBrAktiErf.dfArztNr')
				}
				else if (nKZPraxArt == 0) 
				{
					nArztNr2 = dfArztNr.Number;
				}
				Int.SqlIstDa("from A where aarztnr=:frmBrAktiErf.dfArztNr", ref bOk);
				if (bOk) 
				{
					Int.SqlImmedSel(@"SELECT aname1, asvname1, asvname2, asvstr, asvort, asvland, asehrgeehrte, apmemail
into :frmBrAktiErf.dfArztName, :frmBrAktiErf.strTAN1, :frmBrAktiErf.strTAN2, :frmBrAktiErf.strTAStr, :frmBrAktiErf.strTAOrt, :frmBrAktiErf.strTALand, :frmBrAktiErf.strTAAnrede, :frmBrAktiErf.strTAMail
from A where aarztnr=:frmBrAktiErf.dfArztNr");
					Sal.ClearField(dfHalterNr);
					Sal.ClearField(dfRechNr);
				}
				else
				{
					Sal.ClearField(dfArztNr);
					Sal.ClearField(dfArztName);
					Sal.SetFocus(dfArztNr);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HoleHalter()
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlIstDa("from H where  harztnr = :frmBrAktiErf.dfArztNr AND hhalternr = :frmBrAktiErf.dfHalterNr AND hdeaktiv IS NULL", ref bOk);
				if (bOk) 
				{
					Sal.WaitCursor(true);
					Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hname2, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland, hsperrdatum, hgebdat
into :frmBrAktiErf.dfHalterName,  :frmBrAktiErf.dfHalterName2,  :frmBrAktiErf.strTHN1, :frmBrAktiErf.strTHN2, :frmBrAktiErf.strTHStr, :frmBrAktiErf.strTHOrt, :frmBrAktiErf.strTHLand, :frmBrAktiErf.dtTHSperrDatum, :frmBrAktiErf.dtTHGebDat
from H where  harztnr = :frmBrAktiErf.dfArztNr AND hhalternr = :frmBrAktiErf.dfHalterNr AND hdeaktiv IS NULL ");
					// ! 10.04.06 Ländercodes
					strTHLand = Int.PalPruefeLC(strTHLand, 0);
					// !
					// 02.04.07 Ä102
					if (dtTHSperrDatum != SalDateTime.Null) 
					{
						Sal.MessageBox("Der Postausgang an den Halter ist gesperrt seit " + Int.PalDateToStrJJJJMMTT(dtTHSperrDatum).Mid(6, 2) + "." + Int.PalDateToStrJJJJMMTT(dtTHSperrDatum).Mid(4, 2) + "." + Int.PalDateToStrJJJJMMTT(dtTHSperrDatum).Mid(0, 4), 
							"Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
					}

					Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
from rk into :frmBrAktiErf.dfAussenst where rkhalternr=:frmBrAktiErf.dfHalterNr
and " + Int.PalArztNr("rk", dfArztNr.Number, nArztNr2) + @"
and rkkzzahl <2 AND rkdeaktiv IS NULL");
					dfZusatz.Number = 0;
					Int.SqlImmedSel(@"SELECT sum(bbzahldm) INTO :frmBrAktiErf.nBatchBuch FROM bb
WHERE  " + Int.PalArztNr("bb", dfArztNr.Number, nArztNr2) + @"
and bbhalternr=:frmBrAktiErf.dfHalterNr");
					dfAussenst.Number = dfAussenst.Number - nBatchBuch;
					Sal.ClearField(dfRechNr);
					Sal.WaitCursor(false);
				}
				else
				{
					LoescheMaske();
					Sal.SetFocus(dfArztNr);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HoleRech()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (Sal.IsNull(dfHalterNr)) 
				{
					Int.SqlIstDa("from rk where  " + Int.PalArztNr("rk", dfArztNr.Number, nArztNr2) + " AND rkrechnr = :frmBrAktiErf.dfRechNr AND rkdeaktiv IS NULL ", ref bOk);
				}
				else
				{
					Int.SqlIstDa("from rk where  " + Int.PalArztNr("rk", dfArztNr.Number, nArztNr2) + " AND rkhalternr = :frmBrAktiErf.dfHalterNr AND rkrechnr = :frmBrAktiErf.dfRechNr AND rkdeaktiv IS NULL ", ref bOk);
				}
				if (bOk) 
				{
					if (Sal.IsNull(dfHalterNr)) 
					{
						Int.SqlImmedSel(@"SELECT rkhalternr
into :frmBrAktiErf.dfHalterNr
from rk where rkarztnr = :frmBrAktiErf.dfArztNr AND rkrechnr = :frmBrAktiErf.dfRechNr AND rkdeaktiv IS NULL");
						HoleHalter();
					}
				}
				else
				{
					// Call LoescheMaske()
					dfRechNr.Number = Sys.NUMBER_Null;
					Sal.MessageBox("Die Rechnung gibt es bei diesem Halter nicht.", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
					// Call SalSetFocus( dfArztNr )
					Sal.SetFocus(dfRechNr);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strTypX"></param>
		/// <returns></returns>
		public SalNumber Speichern(SalString strTypX)
		{
			#region Actions
			using (new SalContext(this))
			{
				// 07.04.04
				if (cbBrief.Checked) 
				{
					nFax = 0;
				}
				else
				{
					nFax = 1;
				}

				if (Sal.IsNull(dfArztNr) || (Sal.IsNull(dfHalterNr) && strTypX.Left(3) != "TSK")) 
				{
					Sal.MessageBox(@"Arzt-Nr. oder
Halter-Nr. fehlt", "Daten unvollständig", (Sys.MB_Ok | Sys.MB_IconExclamation));
					Sal.SetFocus(dfArztNr);
				}
				else
				{
					strTyp = strTypX;
					Int.SqlImmedSel(@"SELECT verinnerung INTO :frmBrAktiErf.strEL
FROM v WHERE vcode= :frmBrAktiErf.strTyp AND vart=3");
					Var.nErr = 1;
					if (strTyp.Left(2) == "OP") 
					{
						Int.SqlImmedSel("SELECT prdnr INTO :frmBrAktiErf.nPRNr FROM prd WHERE prdarztnr = :frmBrAktiErf.dfArztNr AND prdrechnr = :frmBrAktiErf.dfRechNr");
						// 15.12.11 F1114
						if (nPRNr == SalNumber.Null || nPRNr == 0) 
						{
							nPRNr = dfPR.Number;
						}
						// Call PalReport(frmBrAktiErf, strTyp || '.QRP',
						// ':frmBrAktiErf.strZei, :frmBrAktiErf.dfArztNr,:frmBrAktiErf.strTAN1, :frmBrAktiErf.strTAN2,:frmBrAktiErf.strTAStr,:frmBrAktiErf.strTAOrt,
						// :frmBrAktiErf.dfHalterNr,:frmBrAktiErf.strTHN1,:frmBrAktiErf.strTHN2,:frmBrAktiErf.strTHStr,:frmBrAktiErf.strTHOrt, :frmBrAktiErf.strTHLand,
						// :frmBrAktiErf.dfRechNr, :frmBrAktiErf.dfAussenst, :frmBrAktiErf.dfRaten, :frmBrAktiErf.nFax, :frmBrAktiErf.nPRNr',
						// 'Zei, ArztNr, AName1, AName2, AStr, AOrt,
						// HalterNr, HName1, HName2, HStr, HOrt, HLand,
						// RechNr, Aussenst, Raten, Fax, PRNr', nErr)
						// LL
						dlgLlDruck.ModalDialog(App.frmMain, "Brief_" + strTyp + ".crd", "");
					}
					else if (strTyp.Left(3) == "RgA" || strTyp.Left(5) == "Insol") 
					{
						// Call PalReport(frmBrAktiErf, strTyp || '.QRP',
						// ':frmBrAktiErf.strZei, :frmBrAktiErf.dfArztNr,:frmBrAktiErf.strTAN1, :frmBrAktiErf.strTAN2,:frmBrAktiErf.strTAStr,:frmBrAktiErf.strTAOrt,
						// :frmBrAktiErf.dfHalterNr,:frmBrAktiErf.strTHN1,:frmBrAktiErf.strTHN2,:frmBrAktiErf.strTHStr,:frmBrAktiErf.strTHOrt, :frmBrAktiErf.strTHLand,
						// :frmBrAktiErf.dfRechNr, :frmBrAktiErf.dfAussenst, :frmBrAktiErf.dfRaten, :frmBrAktiErf.nFax',
						// 'Zei, ArztNr, AName1, AName2, AStr, AOrt,
						// HalterNr, HName1, HName2, HStr, HOrt, HLand,
						// RechNr, Aussenst, Raten, Fax', nErr)
						// LL
						dlgLlDruck.ModalDialog(App.frmMain, "Brief_" + strTyp + ".crd", "");
					}
					else if (strTyp == "RZGem") 
					{
						// Call PalReport(frmBrAktiErf, strTyp || '.QRP',
						// ':frmBrAktiErf.strZei, :frmBrAktiErf.dfArztNr,:frmBrAktiErf.dfEWA1, :frmBrAktiErf.strEWA,:frmBrAktiErf.dfEWA2,:frmBrAktiErf.dfEWA3,
						// :frmBrAktiErf.dfHalterNr,:frmBrAktiErf.strTHN1,:frmBrAktiErf.strTHN2,:frmBrAktiErf.strTHStr,:frmBrAktiErf.strTHOrt, :frmBrAktiErf.strTHLand,
						// :frmBrAktiErf.dfRechNr, :frmBrAktiErf.dfDM, :frmBrAktiErf.nFax',
						// 'Zei, ArztNr, AName1, AName2, AStr, AOrt,
						// HalterNr, HName1, HName2, HStr, HOrt, HLand,
						// RechNr, DM, Fax', nErr)
						// LL
						// 21.10.10 OTÄ496
						if (dfDM.Number != 0) 
						{
							// 28.10.10 OTF780 If PalFormFrei('Übergaben')
							if (Int.PalFormFrei("Übergaben")) 
							{
								Sal.MessageBox("Bitte legen Sie unbedingt einen Scheckvordruck ein!", "Papier?", (Sys.MB_Ok | Sys.MB_IconAsterisk));
								// 02.02.11 von dlgLlDruck hierher verschoben, da bei 3 Kopien drei fortlaufende ScheckNr. genommen
								Int.SqlImmedSel("SELECT MAX(nrmax) INTO :frmBrAktiErf.nMaxScheckNr FROM nr WHERE nrcode = \'SCHK\'");
								if (this.nMaxScheckNr == SalNumber.Null) 
								{
									this.nMaxScheckNr = 0;
								}
								this.nMaxScheckNr = this.nMaxScheckNr + 1;
								// 12.01.11 F824
								Int.SqlImmed("UPDATE nr SET nrmax = :frmBrAktiErf.nMaxScheckNr WHERE nrcode = \'SCHK\'");

								dlgLlDruck.ModalDialog(App.frmMain, "Brief_" + strTyp + ".crd", "");
							}
							else
							{
								Sal.MessageBox(@"Übergaben sind nicht erlaubt, daher auch keine Buchungen.
Bitte versuchen Sie es später noch einmal.", "Übergaben gesperrt", (Sys.MB_Ok | Sys.MB_IconExclamation));
							}
						}
						else
						{
							dlgLlDruck.ModalDialog(App.frmMain, "Brief_" + strTyp + "Brief.crd", "");
						}
					}
					else if (strTyp.Left(3) == "RZM") 
					{
						// Call PalReport(frmBrAktiErf, strTyp || '.QRP',
						// ':frmBrAktiErf.strZei, :frmBrAktiErf.dfArztNr,:frmBrAktiErf.strTAN1, :frmBrAktiErf.strTAN2,:frmBrAktiErf.strTAStr,:frmBrAktiErf.strTAOrt,
						// :frmBrAktiErf.dfHalterNr,:frmBrAktiErf.strTHN1,:frmBrAktiErf.strTHN2,:frmBrAktiErf.strTHStr,:frmBrAktiErf.strTHOrt, :frmBrAktiErf.strTHLand,
						// :frmBrAktiErf.dfRechNr, :frmBrAktiErf.dfVermerk, :frmBrAktiErf.nFax',
						// 'Zei, ArztNr, AName1, AName2, AStr, AOrt,
						// HalterNr, HName1, HName2, HStr, HOrt, HLand,
						// RechNr, Vermerk, Fax', nErr)
						// LL
						dlgLlDruck.ModalDialog(App.frmMain, "Brief_" + strTyp + ".crd", "");
					}
					else if (strTyp.Left(3) == "Wid") 
					{
						// Call PalReport(frmBrAktiErf, strTyp || '.QRP',
						// ':frmBrAktiErf.strZei, :frmBrAktiErf.dfArztNr,:frmBrAktiErf.strTAN1, :frmBrAktiErf.strTAN2,:frmBrAktiErf.strTAStr,:frmBrAktiErf.strTAOrt,
						// :frmBrAktiErf.dfHalterNr,:frmBrAktiErf.strTHN1,:frmBrAktiErf.strTHN2,:frmBrAktiErf.strTHStr,:frmBrAktiErf.strTHOrt, :frmBrAktiErf.strTHLand,
						// :frmBrAktiErf.dfRechNr, :frmBrAktiErf.dfvom, :frmBrAktiErf.dfAussenst, :frmBrAktiErf.nFax',
						// 'Zei, ArztNr, AName1, AName2, AStr, AOrt,
						// HalterNr, HName1, HName2, HStr, HOrt, HLand,
						// RechNr, vom, Aussenst, Fax', nErr)
						// LL
						dlgLlDruck.ModalDialog(App.frmMain, "Brief_" + strTyp + ".crd", "");
					}
					else if (strTyp.Left(2) == "RA") 
					{
						// 20.12.10 OTF812
						dlgText.ModalDialog(this, "Geben Sie bitte die Frage an M ein :", "", 100, ref strEL);
						while (strEL == "") 
						{
							dlgText.ModalDialog(this, "Geben Sie bitte die Frage an M ein :", "", 100, ref strEL);
						}

						dfVermerk.Text = strEL;
						// Call PalReport(frmBrAktiErf, 'RA.QRP',
						// ':frmBrAktiErf.strZei, :frmBrAktiErf.dfArztNr,:frmBrAktiErf.strTAN1, :frmBrAktiErf.strTAN2,:frmBrAktiErf.strTAStr,:frmBrAktiErf.strTAOrt,
						// :frmBrAktiErf.dfHalterNr,:frmBrAktiErf.strTHN1,:frmBrAktiErf.strTHN2,:frmBrAktiErf.strTHStr,:frmBrAktiErf.strTHOrt, :frmBrAktiErf.strTHLand,
						// :frmBrAktiErf.dfRechNr, :frmBrAktiErf.strEL, :frmBrAktiErf.nFax',
						// 'Zei, ArztNr, AName1, AName2, AStr, AOrt,
						// HalterNr, HName1, HName2, HStr, HOrt, HLand,
						// RechNr, Vermerk, Fax', nErr)
						// LL
						dlgLlDruck.ModalDialog(App.frmMain, "Brief_RA.crd", "");
					}
					else if (strTyp.Left(3) == "Tit") 
					{
						// Call PalReport(frmBrAktiErf, strTyp || '.QRP',
						// ':frmBrAktiErf.strZei, :frmBrAktiErf.dfArztNr,
						// :frmBrAktiErf.dfHalterNr,:frmBrAktiErf.strTHN1,:frmBrAktiErf.strTHN2,:frmBrAktiErf.strTHStr,:frmBrAktiErf.strTHOrt, :frmBrAktiErf.strTHLand,
						// :frmBrAktiErf.dfRechNr, :frmBrAktiErf.dfVermerk, :frmBrAktiErf.nFax',
						// 'Zei, ArztNr,
						// HalterNr, HName1, HName2, HStr, HOrt, HLand,
						// RechNr, Vermerk, Fax', nErr)
						// LL
						dlgLlDruck.ModalDialog(App.frmMain, "Brief_" + strTyp + ".crd", "");
					}
					// Else If SalStrLeftX(strTyp, 3) = 'TSK'
					// Call SalListGetMultiSelect(lbTSKFehler, nSelectedArray)
					// Set nSelected = SalListQueryMultiCount(lbTSKFehler)
					// Set strTSKFehler = ''
					// !
					// While nSelected > 0
					// Set nSelected = nSelected - 1
					// Set strTSKFehler = strTSKFehler || ', ' || SalListQueryTextX(lbTSKFehler, nSelectedArray[nSelected])
					// Set strTSKFehler = SalStrMidX(strTSKFehler,2,4096)
					// !
					// LL
					// Call SalModalDialog( dlgLlDruck, frmMain, 'Brief_' || strTyp || '.crd', '')
					else
					{
						// LL
						dlgLlDruck.ModalDialog(App.frmMain, "Brief_" + strTyp + ".crd", "");
					}

				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HolePR()
		{
			#region Local Variables
			SalNumber nArzt = 0;
			SalNumber nHalter = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlIstDa("from pr where prnr=:frmBrAktiErf.dfPR", ref bOk);
				if (bOk) 
				{
					// 22.11.11 Ä658 + praz
					Int.SqlImmedSel(@"SELECT prarztnr, prhalternr, praz
into :frmBrAktiErf.dfArztNr, :frmBrAktiErf.dfHalterNr, :frmBrAktiErf.strAZ
FROM pr WHERE prnr = :frmBrAktiErf.dfPR");
					nArzt = dfArztNr.Number;
					nHalter = dfHalterNr.Number;
					HoleArzt();
					dfHalterNr.Number = nHalter;
					HoleHalter();
					Int.SqlIstDa("FROM prd WHERE prdnr = :frmBrAktiErf.dfPR AND prdrechnr = :frmBrAktiErf.dfRechNr ", ref bOk);
					if (!(bOk)) 
					{
						Sal.ClearField(dfRechNr);
					}
				}
				else
				{
					Sal.ClearField(dfPR);
					Sal.SetFocus(dfPR);
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmBrAktiErf WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBrAktiErf_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmBrAktiErf_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_CreateComplete:
					this.frmBrAktiErf_OnSAM_CreateComplete(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmBrAktiErf_OnSAM_Destroy(sender, e);
					break;
				
				// On SAM_Close
				
				case Sys.SAM_ReportStart:
					this.frmBrAktiErf_OnSAM_ReportStart(sender, e);
					break;
				
				case Sys.SAM_ReportFetchInit:
					this.frmBrAktiErf_OnSAM_ReportFetchInit(sender, e);
					break;
				
				case Sys.SAM_ReportFetchNext:
					this.frmBrAktiErf_OnSAM_ReportFetchNext(sender, e);
					break;
				
				case Sys.SAM_ReportFinish:
					this.frmBrAktiErf_OnSAM_ReportFinish(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBrAktiErf_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 17.05.02
			// 06.08.18 Ä1763 TRUE -> FALSE
			this.cbBrief.Checked = false;
			// 07.04.04
			if (this.nPArzt != SalNumber.Null) 
			{
				this.dfArztNr.Number = this.nPArzt;
				this.HoleArzt();
				// 12.08.05
				this.dfArztNr.DisableWindow();
			}
			if (this.nPHalter != SalNumber.Null) 
			{
				this.dfHalterNr.Number = this.nPHalter;
				this.HoleHalter();
				// 12.08.05
				this.dfHalterNr.DisableWindow();
			}
			if (this.nPRech != SalNumber.Null) 
			{
				this.dfRechNr.Number = this.nPRech;
				this.HoleRech();
			}

			Int.SqlConnection(ref this.hSqlAktiErf);
			this.tblVermerke.Populate(this.hSqlAktiErf, @"SELECT vcode, vbez INTO :tblVermerke.colsCode, :tblVermerke.colsBez
FROM v WHERE vart = 3 AND vaktuell=1
ORDER BY vcode", Sys.TBL_FillAll);
			this.hSqlAktiErf.Disconnect();
			this.strEWA = "Einwohnermeldeamt";
			this.dfVermerk.Text = "unbekannt verzogen";
			// 17.3.97
			// Set strZei = ''
			// If SqlUser = 'DUEMMER'
			// Set strZei = '40 /Dü'
			// Else If SqlUser = 'BEVERBUR'
			// Set strZei = '40 /Be'
			// Else If SqlUser = 'HENNECKE'
			// Set strZei = '41 /He'
			// Else If SqlUser = 'SEIL'
			// Set strZei = '21 /Se'
			// Else If SqlUser = 'ZK'
			// Set strZei = '32 /Zk'
			// Else If SqlUser = 'KOLLAY'
			// Set strZei = '52 /Ko'
			// Else If SqlUser = 'ZINK'
			// Set strZei = '60 /Zi'
			// Else If SqlUser = 'FRIEDRIC'
			// Set strZei = '60 /Fr'
			// Else If SqlUser = 'SYMOLKA'
			// Set strZei = '60 /Sy'
			// Else If SqlUser = 'STUKE'
			// Set strZei = '60 /St'
			// Else If SqlUser = 'KEUER'
			// Set strZei = '30 /Ke'
			// Else If SqlUser = 'ZK'
			// Set strZei = '50 /Zk'
			// Else If SqlUser = 'SASSE'
			// Set strZei = '10 /Sa'
			// Else If SqlUser = 'SD'
			// Set strZei = '31 /SD'
			// Else If SqlUser = 'MARTIN'
			// Set strZei = '50 /Ma'
			// Else If SqlUser = 'SC'
			// Set strZei = '/Sc'
			// 28.11.05
			this.strZei = Var.strBNTel + " /" + Var.strBNZei.ToProper();
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBrAktiErf_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.bfrmBrAktiErf = true;
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBrAktiErf_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Var.bfrmBrAktiErf = false;
			Sal.EnableWindow(App.frmMain.pbBriefe);
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportStart event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBrAktiErf_OnSAM_ReportStart(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 30.04.03
			if (Var.hWndfrmReport) 
			{
				Var.hWndfrmReport.BringWindowToTop();
			}

			Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "", "Druck läuft", "", "");
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFetchInit event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBrAktiErf_OnSAM_ReportFetchInit(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfAussenst.Number = this.dfAussenst.Number + this.dfZusatz.Number;
			this.dfZusatz.Number = 0;
			this.bJa = true;
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFetchNext event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBrAktiErf_OnSAM_ReportFetchNext(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.bJa == true) 
			{
				this.bJa = false;
				e.Return = true;
				return;
			}
			else
			{
				e.Return = false;
				return;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFinish event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBrAktiErf_OnSAM_ReportFinish(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sal.MessageBox(@"Ist der Druck
in Ordnung ?", "Druck Ok ?", (Sys.MB_YesNo | Sys.MB_IconQuestion)) == Sys.IDYES) 
			{
				Int.PalAktion(this.dfArztNr.Number, this.dfHalterNr.Number, SalNumber.Null, "BR", this.strTyp, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null);
				this.strAbtlg = "BR";
				// 07.05.07
				Int.SqlImmedSel(@"SELECT anr2
INTO :frmBrAktiErf.nArztNr2
FROM a WHERE aarztnr=:frmBrAktiErf.dfArztNr");
				if (this.nArztNr2 == SalNumber.Null) 
				{
					this.nArztNr2 = this.dfArztNr.Number;
				}

				// 15.09.98
				if (this.strTyp.Left(2) == "RZ" && this.strTyp != "RZMHÄ")  // 14.06.02 Linker And strTyp != 'RZMHÄ'
				{
					// Call SqlImmedX('UPDATE RK SET
					// rkmahnsperr = 1
					// WHERE rkarztnr  = :frmBrAktiErf.dfArztNr AND rkrechnr  = :frmBrAktiErf.dfRechNr')
					if (this.dfRechNr.Number != Sys.NUMBER_Null && this.dfRechNr.Number != 0) 
					{
						Int.PalLog("Mahnsperre ein (BR): Rg." + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfRechNr.Number, 6, 0));
						Sal.MessageBox("Mahnsperre gesetzt für Rg. " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfRechNr.Number, 6, 0), "", Sys.MB_Ok);
						// 05.06.07 F183
						if (this.dfHalterNr.Number == 0 || this.dfHalterNr.Number == Sys.NUMBER_Null) 
						{
							Int.SqlImmedSel("SELECT rkhalternr INTO :frmBrAktiErf.dfHalterNr FROM rk WHERE rkarztnr = :frmBrAktiErf.dfArztNr AND rkrechnr = :frmBrAktiErf.dfRechNr AND rkdeaktiv IS NULL");
						}
					}
					else
					{
						Sal.MessageBox("Rechnungsnr. fehlt für Mahnsperre !", "Achtung", Sys.MB_Ok);
					}
					// 22.10.03 Seil: RZ muß in HName2, damit das für Rg.Abtlg. sichtbar wird.
					// If dfHalterName2 != ''
					// Set dfHalterName2 = dfHalterName2 || ' '
					// Set dfHalterName2 = dfHalterName2 || 'R.Z.'
					if (this.dfArztNr.Number > 0 && this.dfHalterNr.Number > 0) 
					{
						// 02.04.07 Ä102
						// If SqlImmed('UPDATE h SET hname2 = :frmBrAktiErf.dfHalterName2
						// WHERE harztnr = :frmBrAktiErf.dfArztNr AND hhalternr = :frmBrAktiErf.dfHalterNr')
						if (Int.SqlImmed(@"UPDATE h SET hsperrdatum = SYSDATE
WHERE harztnr IN (:frmBrAktiErf.dfArztNr, :frmBrAktiErf.nArztNr2) AND hhalternr = :frmBrAktiErf.dfHalterNr")) 
						{
						}
						Int.PalLog("Haltersperre ein (BR): " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0));

					}
					else
					{
						Sal.MessageBox(@"Arzt- oder HalterNr. fehlt
zum Ändern des Halternamens !", "Achtung", Sys.MB_Ok);
					}
					// 06.02.04
					if (this.strTyp == "RZGem") 
					{
						this.strKuerzel = App.frmMain.strUser.Left(2);
						this.lsText = "***** EWA Anfrage gemacht";
						this.dtErinnerung = SalDateTime.Current + 30;
						// 13.05.14 F2027
						this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

						Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :strBNZei, :frmBrAktiErf.dfArztNr, :frmBrAktiErf.dfHalterNr, 0,
:frmBrAktiErf.lsText , SYSDATE, :frmBrAktiErf.dtErinnerung, 'J', 'HS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
						// Call PalAktion( dfArztNr, dfHalterNr, dfRechNr, 'MB', 'EWAan',
						// NUMBER_Null, NUMBER_Null, NUMBER_Null, NUMBER_Null, NUMBER_Null, NUMBER_Null)
					}
				}
				// 24.11.99
				if (this.strTyp.Left(2) == "RA" && this.strTyp != "RAAbX")  // RAAbX: 02.04.07
				{
					this.strAbtlg = "RA";
					if (this.strTyp == "RAAdr") 
					{
						// 02.04.07 Ä102
						if (Int.SqlImmed(@"UPDATE h SET hsperrdatum = SYSDATE
WHERE harztnr IN (:frmBrAktiErf.dfArztNr, :frmBrAktiErf.nArztNr2) AND hhalternr = :frmBrAktiErf.dfHalterNr")) 
						{
						}
						Int.PalLog("Haltersperre ein (BR): " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0));
						Sal.MessageBox("Postausgang gesperrt für " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0), "", Sys.MB_Ok);

					}
					else
					{
						// Call SqlImmedX('UPDATE RK SET
						// rkmahnsperr = 2
						// WHERE rkarztnr  = :frmBrAktiErf.dfArztNr AND rkrechnr  = :frmBrAktiErf.dfRechNr')
						if (this.dfRechNr.Number != Sys.NUMBER_Null && this.dfRechNr.Number != 0) 
						{
							Int.PalLog("Mahnsperre 2 (BR): Rg." + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfRechNr.Number, 6, 0));
							Sal.MessageBox("Mahnsperre auf 2 gesetzt für Rg. " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfRechNr.Number, 6, 0), "", Sys.MB_Ok);
						}
						else
						{
							Sal.MessageBox("Rechnungsnr. fehlt für Mahnsperre !", "Achtung", Sys.MB_Ok);
						}
					}
				}
				if (this.strEL != "") 
				{
					this.strELZei = Var.strBNZei;
					Int.SqlImmed(@"INSERT INTO el (elarztnr, elhalternr, elrechnr, elzeichen, eltext, eldatum, elabtlg, elerledigt)
VALUES(:frmBrAktiErf.dfArztNr, :frmBrAktiErf.dfHalterNr, :frmBrAktiErf.dfRechNr,
:frmBrAktiErf.strELZei, :frmBrAktiErf.strEL, SYSDATETIME, :frmBrAktiErf.strAbtlg, 'N') ");
				}

				Sal.MessageBeep(0);
				this.LoescheMaske();
				this.dfArztNr.SetFocus();
			}
			#endregion
		}
		
		/// <summary>
		/// dfPR WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPR_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfPR_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPR_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfHalterNr.Clear();
			this.dfHalterName.Clear();
			this.dfHalterName2.Clear();
			// Call SalClearField( dfRechNr )
			this.strTHN1 = "";
			this.strTHN2 = "";
			this.strTHStr = "";
			this.strTHOrt = "";
			this.strTHLand = "";
			this.HolePR();
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfHalterNr.Clear();
			this.dfHalterName.Clear();
			this.dfHalterName2.Clear();
			this.dfRechNr.Clear();
			this.strTHN1 = "";
			this.strTHN2 = "";
			this.strTHStr = "";
			this.strTHOrt = "";
			this.strTHLand = "";
			this.HoleArzt();
			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.HoleHalter();
			#endregion
		}
		
		/// <summary>
		/// dfRechNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRechNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.HoleRech();
			#endregion
		}
		
		/// <summary>
		/// pbFreiA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbFreiA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbFreiA_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbFreiA_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 06.08.08
			if (Var.bfrmBriefVari) 
			{
				while (!(App.frmBriefVari.DestroyWindow())) 
				{
				}
			}

			// 06.08.18 Ä1763 TRUE -> FALSE
			frmBriefVari.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRechNr.Number, "A", "", new SalDateTime(1900, 1, 1), "", "", "", "", "", false);
			#endregion
		}
		
		/// <summary>
		/// pbFreiH WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbFreiH_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbFreiH_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbFreiH_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 06.08.08
			if (Var.bfrmBriefVari) 
			{
				while (!(App.frmBriefVari.DestroyWindow())) 
				{
				}
			}

			// 06.08.18 Ä1763 TRUE -> FALSE
			frmBriefVari.CreateWindow(this, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRechNr.Number, "H", "", new SalDateTime(1900, 1, 1), "", "", "", "", "", false);
			#endregion
		}
		
		/// <summary>
		/// dfHalterName2 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterName2_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterName2_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterName2_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.Number > 0 && this.dfHalterNr.Number > 0) 
			{
				if (Int.SqlImmed(@"UPDATE h SET hname2 = :frmBrAktiErf.dfHalterName2
WHERE harztnr = :frmBrAktiErf.dfArztNr AND hhalternr = :frmBrAktiErf.dfHalterNr")) 
				{
				}
				Sal.MessageBox(@"HalterName2 wurde in
" + this.dfHalterName2.Text + " geändert.", "", Sys.MB_Ok);
			}
			else
			{
				Sal.MessageBox(@"Arzt- oder HalterNr. fehlt
zum Ändern des Halternamens !", "Achtung", Sys.MB_Ok);
			}
			#endregion
		}
		
		/// <summary>
		/// tblVermerke WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblVermerke_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblVermerke_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Click:
					this.tblVermerke_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblVermerke_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call PalPrepareMTbl( hWndItem, -1 )
			// Call MTblSubClass( hWndItem )
			// Call MTblSetAltRowBackColors( hWndItem, FALSE, COLOR_White, 0xBFFFFF )
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblVermerke_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblVermerke.SetRowFlags(Sys.lParam, Sys.ROW_Selected, true);
			if (this.tblVermerke.colsCode.Text == "RgMAd") 
			{
				this.dfHalterNr.Number = 0;
			}
			if ((this.tblVermerke.colsCode.Text == "RA0" || this.tblVermerke.colsCode.Text == "RAAdr" || this.tblVermerke.colsCode.Text == "RADat" || this.tblVermerke.colsCode.Text == "RAMin" || this.tblVermerke.colsCode.Text == "RARZ" || this.tblVermerke.colsCode.Text == 
			"RZGem" || this.tblVermerke.colsCode.Text == "RZM" || this.tblVermerke.colsCode.Text == "RZMMb" || this.tblVermerke.colsCode.Text == "RZMkW") && (this.dfRechNr.Number == Sys.NUMBER_Null || this.dfRechNr.Number == 0)) 
			{
				Sal.MessageBox(@"Rechnungsnr. fehlt für Mahnsperre !

Bitte eintragen.", "Achtung", Sys.MB_Ok);
				this.dfRechNr.SetFocus();
			}
			else if (this.tblVermerke.colsCode.Text == "RZGem" && this.dfDM.Number == Sys.NUMBER_Null) 
			{
				// Call SalMessageBox('Scheckbetrag fehlt.
				// 
				// Bitte Betrag oder 0 eintragen.' ,'Achtung',MB_Ok)
				this.dfDM.Number = 12; // 09.11.15
			}
			else if (this.tblVermerke.colsCode.Text == "TitZu" && (this.dfRechNr.Number == Sys.NUMBER_Null || this.dfRechNr.Number == 0)) 
			{
				Sal.MessageBox(@"Rechnungsnr. fehlt !

Bitte eintragen.", "Achtung", Sys.MB_Ok);
				this.dfRechNr.SetFocus();
			}
			// Else If SalStrLeftX(colsCode,3) = 'TSK' And SalListQueryMultiCount(lbTSKFehler) <= 0
			// Call SalMessageBox('Angabe der Unklarheiten fehlen.' ,'Achtung',MB_Ok)
			// Call SalSetFocus( lbTSKFehler)
			else
			{
				this.Speichern(this.tblVermerke.colsCode.Text);
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblVermerke
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblVermerkeTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmBrAktiErf _frmBrAktiErf = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblVermerkeTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmBrAktiErf frmBrAktiErf
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmBrAktiErf == null) 
					{
						_frmBrAktiErf = (frmBrAktiErf)this.FindForm();
					}
					return _frmBrAktiErf;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblVermerkeTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblVermerkeTableWindow)SalWindow.FromHandle(handle, typeof(tblVermerkeTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
