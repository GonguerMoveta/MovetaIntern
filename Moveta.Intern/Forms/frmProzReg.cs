// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="nArztX"></param>
	/// <param name="nHalterX"></param>
	public partial class frmProzReg : SalFormWindow
	{
		#region Window Parameters
		public SalNumber nArztX;
		public SalNumber nHalterX;
		#endregion
		
		#region Window Variables
		public SalWindowHandle hWndReport = SalWindowHandle.Null;
		public SalSqlHandle hSqlInfo = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalNumber nArztNr = 0;
		public SalNumber nArztNr2 = 0;
		public SalNumber nHalterNr = 0;
		public SalNumber nRechNr = 0;
		public SalNumber nPRNr = 0;
		public SalDateTime dtMBDat = SalDateTime.Null;
		public SalNumber nFetch = 0;
		public SalString strBemerk = "";
		public SalNumber nErledigt = 0;
		public SalString strHN1 = "";
		public SalString strZA = "";
		public SalNumber nKZZahlArt = 0;
		public SalDateTime dtTeilzdat = SalDateTime.Null;
		public SalNumber nNr = 0;
		public SalNumber nNrAlt = 0;
		public SalDateTime dtDatum = SalDateTime.Null;
		public SalNumber nArzt = 0;
		public SalNumber nHalter = 0;
		public SalNumber nRech = 0;
		public SalNumber nMBRech = 0;
		public SalNumber nHF = 0;
		public SalString strBem = "";
		public SalNumber nErl = 0;
		public SalNumber nA1 = 0;
		public SalNumber nA2 = 0;
		public SalNumber nA3 = 0;
		public SalNumber nA4 = 0;
		public SalNumber nA5 = 0;
		public SalNumber nA6 = 0;
		public SalNumber nRg1 = 0;
		public SalNumber nRg2 = 0;
		public SalNumber nRg3 = 0;
		public SalNumber nRg4 = 0;
		public SalNumber nRg5 = 0;
		public SalNumber nRg6 = 0;
		public SalNumber nMailAkteErl = 0;
		public SalString strEMail = "";
		public SalString lsBody = "";
		public SalNumber nResult = 0;
		public SalNumber nCount = 0;
		public SalArray<SalString> sFiles = new SalArray<SalString>();
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmProzReg(SalNumber nArztX, SalNumber nHalterX)
		{
			// Assign global reference.
			App.frmProzReg = this;
			// Window Parameters initialization.
			this.nArztX = nArztX;
			this.nHalterX = nHalterX;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmProzReg CreateWindow(Control owner, SalNumber nArztX, SalNumber nHalterX)
		{
			frmProzReg frm = new frmProzReg(nArztX, nHalterX);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmProzReg FromHandle(SalWindowHandle handle)
		{
			return ((frmProzReg)SalWindow.FromHandle(handle, typeof(frmProzReg)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber InsertRow()
		{
			#region Actions
			using (new SalContext(this))
			{
				Var.nRow = tblProzReg.InsertRow(Sys.TBL_MaxRow);
				tblProzReg.colnRechNr.Number = nRech;
				tblProzReg.colnHF.Number = nHF;
				tblProzReg.colstrZahlArt.Text = strZA;
				tblProzReg.colnNr.Number = nNr;
				if (nNr != nNrAlt) 
				{
					tblProzReg.coldtDatum.DateTime = dtDatum;
					tblProzReg.colnArztNr.Number = nArzt;
					tblProzReg.colnHalterNr.Number = nHalter;
					tblProzReg.colnMBRechNr.Number = nMBRech;
					tblProzReg.colstrName.Text = strHN1;
					tblProzReg.colsBemerk.Text = strBem;
					tblProzReg.colnErledigt.Number = nErl;
					Vis.TblSetRowColor(tblProzReg, Var.nRow, Sys.COLOR_Red);
					// Call MTblSetRowTextColor( tblProzReg, nRow, COLOR_Red, MTSC_REDRAW )
					// Call MTblSetRowBackColor( frmProzReg.tblProzReg, nRow, COLOR_Red, MTSC_REDRAW )
					// Call MTblSetRowFont( tblProzReg, nRow, MTBL_FONT_UNDEF_NAME, MTBL_FONT_UNDEF_SIZE, FONT_EnhBold, MTSF_REDRAW )
					// 04.11.21
					nCount = Vis.DosEnumFiles(Var.strPfadArchiv + Sql.Database + "\\" + "A" + Int.PalStrNullen(nArzt.ToString(0), 4) + "\\H" + Int.PalStrNullen(nHalter.ToString(0), 5) + "\\PR" + nNr.ToString(0) + "\\*.*", Sys.FA_Standard, sFiles);
					if (nCount > 0) 
					{
						tblProzReg.colnAnzDokArchiv.Number = nCount;
					}
					else if (nCount <= 0) 
					{
						tblProzReg.colnAnzDokArchiv.Number = Sys.NUMBER_Null;
					}
				}
				else
				{
					Vis.TblSetRowColor(tblProzReg, Var.nRow, Sys.COLOR_Black);
					// Call MTblSetRowTextColor( tblProzReg, nRow, COLOR_Black, MTSC_REDRAW )
					// Call MTblSetRowBackColor( frmProzReg.tblProzReg, nRow, COLOR_Black, MTSC_REDRAW )
					// Call MTblSetRowFont( tblProzReg, nRow, MTBL_FONT_UNDEF_NAME, MTBL_FONT_UNDEF_SIZE, FONT_EnhNormal, MTSF_REDRAW )
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber SelectHRK()
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn INTO :frmProzReg.strHN1 FROM h
WHERE harztnr = :frmProzReg.nArzt AND hhalternr = :frmProzReg.nHalter AND hdeaktiv IS NULL");
				Int.SqlImmedSel(@"SELECT (rkdmleis+rkdmarzn) INTO :frmProzReg.nHF FROM rk
WHERE rkarztnr = :frmProzReg.nArzt AND rkhalternr = :frmProzReg.nHalter AND rkrechnr = :frmProzReg.nRech AND rkdeaktiv IS NULL");
				Int.SqlImmedSel(@"SELECT rkteilzdat, rkkzzahl INTO :frmProzReg.dtTeilzdat, :frmProzReg.nKZZahlArt FROM rk
WHERE rkarztnr = :frmProzReg.nArzt AND rkhalternr = :frmProzReg.nHalter AND rkrechnr = :frmProzReg.nMBRech AND rkdeaktiv IS NULL");
				strZA = Int.PalZahlArt(nKZZahlArt) + " " + Int.SalDateToStrX(dtTeilzdat);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HoleProzReg()
		{
			#region Local Variables
			SqlLocals.HoleProzRegLocals locals = new SqlLocals.HoleProzRegLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{
				Sal.WaitCursor(true);
				tblProzReg.ResetTable();
				strHN1 = "";
				nNrAlt = 0;
				if (dfMC.Text != "") 
				{
					strSelect = @"SELECT prarztnr, prhalternr, prrechnr, prdarztnr, prdrechnr, prdatum, prnr, prbemerk, prerledigt
INTO :frmProzReg.nArztNr, :frmProzReg.nHalterNr, :frmProzReg.nRechNr,
:frmProzReg.nA1,
:frmProzReg.nRg1,
:frmProzReg.dtMBDat, :frmProzReg.nPRNr, :frmProzReg.strBemerk, :frmProzReg.nErledigt
FROM pr, prd, h WHERE hnn LIKE :frmProzReg.dfMC || '%' AND hdeaktiv IS NULL
AND harztnr = prarztnr AND hhalternr = prhalternr
AND prnr=prdnr";
				}
				else if (dfDatum.DateTime != Sys.DATETIME_Null) 
				{
					strSelect = @"SELECT prarztnr, prhalternr, prrechnr, prdarztnr, prdrechnr, prdatum, prnr, prbemerk, prerledigt
INTO :frmProzReg.nArztNr, :frmProzReg.nHalterNr, :frmProzReg.nRechNr,
:frmProzReg.nA1,
:frmProzReg.nRg1,
:frmProzReg.dtMBDat, :frmProzReg.nPRNr, :frmProzReg.strBemerk, :frmProzReg.nErledigt
FROM pr, prd WHERE prdatum = :frmProzReg.dfDatum
AND prnr=prdnr";
				}
				else
				{
					strSelect = @"SELECT prarztnr, prhalternr, prrechnr, prdarztnr, prdrechnr, prdatum, prnr, prbemerk, prerledigt
INTO :frmProzReg.nArztNr, :frmProzReg.nHalterNr, :frmProzReg.nRechNr,
:frmProzReg.nA1,
:frmProzReg.nRg1,
:frmProzReg.dtMBDat, :frmProzReg.nPRNr, :frmProzReg.strBemerk, :frmProzReg.nErledigt
FROM pr, prd WHERE prarztnr IN (:frmProzReg.nArztNr2, :frmProzReg.dfArztNr)
AND prhalternr = :frmProzReg.dfHalterNr
AND prnr=prdnr ";
				}
				Int.SqlHandleExec(hSqlInfo, strSelect, "Fehler", ref nCount);
				nFetch = hSqlInfo.FetchNext();
				while (nFetch != Sys.FETCH_EOF) 
				{
					nArzt = nA1;
					nHalter = nHalterNr;
					dtDatum = dtMBDat;
					nNr = nPRNr;
					nRech = nRg1;
					nMBRech = nRg1;
					SelectHRK();
					if (nNr != nNrAlt) 
					{
						strBem = strBemerk;
						nErl = nErledigt;
					}
					else
					{
						strBem = "";
						nErl = -1;
					}
					InsertRow();
					nNrAlt = nNr;

					// If nRg1 != NUMBER_Null
					// Set nArzt = nA1
					// Set nHalter = nHalterNr
					// Set dtDatum = DATETIME_Null
					// Set nNr = NUMBER_Null
					// Set nRech = nRg1
					// Call SelectHRK()
					// Set strBem = ''
					// Set nHalter = NUMBER_Null
					// Call InsertRow()
					// If nRg2 != NUMBER_Null
					// Set nArzt = nA2
					// Set nHalter = nHalterNr
					// Set dtDatum = DATETIME_Null
					// Set nNr = NUMBER_Null
					// Set nRech = nRg2
					// Call SelectHRK()
					// Set strBem = ''
					// Set nHalter = NUMBER_Null
					// Call InsertRow()
					// If nRg3 != NUMBER_Null
					// Set nArzt = nA3
					// Set nHalter = nHalterNr
					// Set dtDatum = DATETIME_Null
					// Set nNr = NUMBER_Null
					// Set nRech = nRg3
					// Call SelectHRK()
					// Set strBem = ''
					// Set nHalter = NUMBER_Null
					// Call InsertRow()
					// If nRg4 != NUMBER_Null
					// Set nArzt = nA4
					// Set nHalter = nHalterNr
					// Set dtDatum = DATETIME_Null
					// Set nNr = NUMBER_Null
					// Set nRech = nRg4
					// Call SelectHRK()
					// Set strBem = ''
					// Set nHalter = NUMBER_Null
					// Call InsertRow()
					// If nRg5 != NUMBER_Null
					// Set nArzt = nA5
					// Set nHalter = nHalterNr
					// Set dtDatum = DATETIME_Null
					// Set nNr = NUMBER_Null
					// Set nRech = nRg5
					// Call SelectHRK()
					// Set strBem = ''
					// Set nHalter = NUMBER_Null
					// Call InsertRow()
					// If nRg6 != NUMBER_Null
					// Set nArzt = nA6
					// Set nHalter = nHalterNr
					// Set dtDatum = DATETIME_Null
					// Set nNr = NUMBER_Null
					// Set nRech = nRg6
					// Call SelectHRK()
					// Set strBem = ''
					// Set nHalter = NUMBER_Null
					// Call InsertRow()

					nFetch = hSqlInfo.FetchNext();
				}
				hSqlInfo.Commit();
				dfMC.Text = "";
				dfDatum.DateTime = Sys.DATETIME_Null;

				tblProzReg.KillCellEdit();
				if (tblProzReg.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					locals.nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblProzReg.FindNextRow(ref locals.nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblProzReg.SetFocusRow(locals.nRow);

						tblProzReg.SetRowFlags(locals.nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
				}
				Sal.WaitCursor(false);

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalSave()
		{
			#region Local Variables
			SalNumber nRow = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				// Call SqlConnection( hSqlProzReg)
				tblProzReg.KillCellEdit();
				if (tblProzReg.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblProzReg.FindNextRow(ref nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblProzReg.SetFocusRow(nRow);

						// Call SqlImmed('UPDATE pr SET prbemerk = :frmProzReg.tblProzReg.colsBemerk, prerledigt = :frmProzReg.tblProzReg.colnErledigt
						// WHERE prarztnr = :frmProzReg.tblProzReg.colnArztNr
						// AND prhalternr = :frmProzReg.tblProzReg.colnHalterNr
						// AND prrechnr = :frmProzReg.tblProzReg.colnMBRechNr ')
						Int.SqlImmed(@"UPDATE pr SET prbemerk = :frmProzReg.tblProzReg.colsBemerk, prerledigt = :frmProzReg.tblProzReg.colnErledigt
WHERE prnr = :frmProzReg.tblProzReg.colnNr");
						Int.PalLog("PR erledigt ? : " + Int.PalStrNum(this.tblProzReg.colnErledigt.Number, 1, 0) + " PR" + Int.PalStrNum(this.tblProzReg.colnNr.Number, 6, 0));
						if (tblProzReg.GetRowFlags(nRow, Sys.ROW_Edited)) 
						{
						}
						tblProzReg.SetRowFlags(nRow, Sys.ROW_Edited, false);
					}
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmProzReg WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmProzReg_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmProzReg_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmProzReg_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmProzReg_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Var.strBNAbtlg != "MA") 
			{
				this.tblProzReg.colnErledigt.DisableWindow();
			}
			// 04.11.21
			this.tblProzReg.SetContextMenu("frmProzRegRightClick", 0);

			Int.SqlConnection(ref this.hSqlInfo);
			// 26.03.19 Ä1757 + amailakteerl, aemail
			Int.SqlImmedSel("SELECT ANR2, amailakteerl, aemail INTO :frmProzReg.nArztNr2, :frmProzReg.nMailAkteErl, :frmProzReg.strEMail FROM A WHERE AARZTNR = :frmProzReg.nArztX");
			if (this.nArztNr2 == 0) 
			{
				this.nArztNr2 = this.nArztX;
			}
			if (this.nArztX != SalNumber.Null && this.nHalterX != SalNumber.Null) 
			{
				this.dfArztNr.Number = this.nArztX;
				this.dfHalterNr.Number = this.nHalterX;
				this.HoleProzReg();
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmProzReg_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlInfo.Disconnect();
			this.PalSave();
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfHalterNr.Clear();
			#endregion
		}
		
		/// <summary>
		/// dfMC WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMC_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfMC_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMC_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfMC.Text = Int.PalStringToMatch(this.dfMC.Text);
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.HoleProzReg();
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblProzReg
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblProzRegTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmProzReg _frmProzReg = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblProzRegTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmProzReg frmProzReg
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmProzReg == null) 
					{
						_frmProzReg = (frmProzReg)this.FindForm();
					}
					return _frmProzReg;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblProzRegTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblProzRegTableWindow)SalWindow.FromHandle(handle, typeof(tblProzRegTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colnErledigt WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnErledigt_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_AnyEdit:
						this.colnErledigt_OnSAM_AnyEdit(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_AnyEdit event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colnErledigt_OnSAM_AnyEdit(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				// 26.03.19 Ä1757
				this.SetContextRow(Sys.lParam);
				if (this.colnErledigt.Number == 1 && this.frmProzReg.nMailAkteErl == 1 && Var.strBNAbtlg == "MA") 
				{
					Sal.WaitCursor(true);
					Int.PalMailInit();
					this.frmProzReg.lsBody = @"Sehr geehrtes Mitglied,

wir können Ihnen die erfreuliche Mitteilung zukommen lassen, dass diese Forderung vollumfänglich an uns bezahlt wurde.

Mit freundlichen Grüßen,

" + Var.strBNName + @"
moveta r.V.k.V.

Danziger Straße 1
31008 Elze
Telefon (0 50 68) 93 07-" + Var.strBNTel + @"
Telefax (0 50 68) 93 07-80
E-mail " + Var.strBNEMail + @"
Web www.moveta.de

Sparkasse Hildesheim · IBAN: DE13 2595 0130 0007 0065 73 · BIC: NOLADE21HIK";
					// 30.10.20 Ä1911
					// Set nResult = oOutgoingMail.SendMail( MAIL_FORMAT_PLAIN_TEXT,
					// SalNumberToStrX( dfArztNr, 0 ) || '/H ' || SalNumberToStrX( dfHalterNr, 0 ) || '/R ' || SalNumberToStrX( frmProzReg.tblProzReg.colnRechNr, 0) || frmProzReg.tblProzReg.colstrName
					// || ' PR ' || SalNumberToStrX( frmProzReg.tblProzReg.colnNr, 0 ) ,
					// strBNEMail, strEMail, STRING_Null, lsBody, STRING_Null, FALSE, MAIL_PRIORITY_NORMAL )
					this.frmProzReg.nResult = Int.SendeMail(Const.MAIL_FORMAT_PLAIN_TEXT, this.frmProzReg.dfArztNr.Number.ToString(0) + "/H " + this.frmProzReg.dfHalterNr.Number.ToString(0) + "/R " + this.colnRechNr.Number.ToString(0) + this.colstrName.Text + " PR " + this.colnNr.Number.ToString(0), Var.strBNEMail, this.frmProzReg.strEMail, this.frmProzReg.lsBody, SalString.Null, Const.MAIL_PRIORITY_NORMAL, ref Var.strDummy, "", Var.strBNName);
					Sal.WaitCursor(false);
					if (0 == this.frmProzReg.nResult) 
					{
						Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmProzReg.dfArztNr, :frmProzReg.dfHalterNr, 0,
:frmProzReg.lsBody , SYSDATE, NULL, 'J', 'TN', NULL, NULL, :frmProzReg.tblProzReg.colnNr, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
						Sal.MessageBox("Eine E-Mail an M wurde erfolgreich versandt.", "Ok", Sys.MB_Ok);
					}
					else
					{
						Sal.MessageBox("Die E-Mail an M konnte nicht versandt werden.", "Fehler: " + Var.strDummy, Sys.MB_Ok);
					}
					Int.PalMailClose();
				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class HoleProzRegLocals
			{
				public SalNumber nRow = 0;
			}
		}
		#endregion
	}
}
