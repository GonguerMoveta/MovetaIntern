// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmBEZStamm : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlUser = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalNumber nColor = 0;
		public SalNumber nRow = 0;
		public SalString lsDummy = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmBEZStamm()
		{
			// Assign global reference.
			App.frmBEZStamm = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmBEZStamm CreateWindow(Control owner)
		{
			frmBEZStamm frm = new frmBEZStamm();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmBEZStamm FromHandle(SalWindowHandle handle)
		{
			return ((frmBEZStamm)SalWindow.FromHandle(handle, typeof(frmBEZStamm)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalNewRow()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (PalSave()) 
				{
				}
				// If SalTblPopulate( tblBEZS,hSqlUser,strSelect,TBL_FillAll )
				PalHoleTabelle(dfArztNr.Number, dfHalterNr.Number);
				nRow = tblBEZS.InsertRow(Sys.TBL_MaxRow);
				tblBEZS.colTag.Number = SalDateTime.Current.Day();
				tblBEZS.colAbDatum.DateTime = SalDateTime.Current;
				tblBEZS.SetFocusCell(nRow, tblBEZS.colArztNr, 0, -1);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalSave()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.WaitCursor(true);
				// Call SqlConnection( hSqlLogBugUpd)
				tblBEZS.KillCellEdit();
				if (tblBEZS.AnyRows((Sys.ROW_New | Sys.ROW_Edited), 0)) 
				{
					nRow = Sys.TBL_MinRow;
					while (true)
					{
						if (!(tblBEZS.FindNextRow(ref nRow, (Sys.ROW_New | Sys.ROW_Edited), 0))) 
						{
							break;
						}
						tblBEZS.SetFocusRow(nRow);
						if (tblBEZS.colTag.Number == Sys.NUMBER_Null) 
						{
							tblBEZS.colTag.Number = SalDateTime.Current.Day();
						}

						if (tblBEZS.colArztNr.Number != Sys.NUMBER_Null && tblBEZS.colHalterNr.Number != Sys.NUMBER_Null && ((tblBEZS.colBLZ.Text != "" && tblBEZS.colKonto.Text != "") || tblBEZS.colIBAN.Text != "")) 
						{
							if (tblBEZS.colErfDat.DateTime == Sys.DATETIME_Null) 
							{
								tblBEZS.colErfDat.DateTime = SalDateTime.Current;
							}

							Int.SqlIstDa("FROM bezs WHERE bezserfdat = :frmBEZStamm.tblBEZS.colErfDat AND bezsarztnr = :frmBEZStamm.tblBEZS.colArztNr AND bezshalternr = :frmBEZStamm.tblBEZS.colHalterNr", ref Var.bExists);
							if (Var.bExists) 
							{
								Int.SqlImmed(@"UPDATE bezs SET
bezsarztnr = :frmBEZStamm.tblBEZS.colArztNr,
bezshalternr = :frmBEZStamm.tblBEZS.colHalterNr,
bezsrechnr = :frmBEZStamm.tblBEZS.colRechNr,
bezsblz = :frmBEZStamm.tblBEZS.colBLZ,
bezskonto = :frmBEZStamm.tblBEZS.colKonto,
bezsiban = :frmBEZStamm.tblBEZS.colIBAN,
bezsmaxdm = :frmBEZStamm.tblBEZS.colMaxDM,
bezstag = :frmBEZStamm.tblBEZS.colTag,
bezsabdatum = :frmBEZStamm.tblBEZS.colAbDatum,
bezssigndat = :frmBEZStamm.tblBEZS.colSignDatum,
bezsbic = :frmBEZStamm.tblBEZS.colBIC
WHERE bezserfdat = :frmBEZStamm.tblBEZS.colErfDat AND bezsarztnr = :frmBEZStamm.tblBEZS.colArztNr AND bezshalternr = :frmBEZStamm.tblBEZS.colHalterNr");
							}
							else
							{
								Int.SqlImmed(@"INSERT INTO bezs
(bezserfdat, bezsarztnr, bezshalternr, bezsrechnr, bezsblz, bezskonto, bezsmaxdm, bezstag, bezsabdatum, bezsiban, bezsbic, bezssigndat)
VALUES(:frmBEZStamm.tblBEZS.colErfDat, :frmBEZStamm.tblBEZS.colArztNr, :frmBEZStamm.tblBEZS.colHalterNr, :frmBEZStamm.tblBEZS.colRechNr,
:frmBEZStamm.tblBEZS.colBLZ, :frmBEZStamm.tblBEZS.colKonto, :frmBEZStamm.tblBEZS.colMaxDM, :frmBEZStamm.tblBEZS.colTag, :frmBEZStamm.tblBEZS.colAbDatum,
:frmBEZStamm.tblBEZS.colIBAN, :frmBEZStamm.tblBEZS.colBIC, :frmBEZStamm.tblBEZS.colSignDatum )");
							}
						}
						tblBEZS.SetRowFlags(nRow, (Sys.ROW_New | Sys.ROW_Edited), false);
					}
				}
				Sal.WaitCursor(false);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="nArzt"></param>
		/// <param name="nHalter"></param>
		/// <returns></returns>
		public SalNumber PalHoleTabelle(SalNumber nArzt, SalNumber nHalter)
		{
			#region Local Variables
			SqlLocals.PalHoleTabelleLocals locals = new SqlLocals.PalHoleTabelleLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.nArzt = nArzt;
				locals.nHalter = nHalter;

				Int.SqlConnection(ref hSqlUser);
				strSelect = @"SELECT bezserfdat, bezsarztnr, bezshalternr, bezsrechnr, bezsblz, bezskonto, bezsmaxdm, bezsltzteinzug, bezstag, bezsabdatum, bezserldat, bezsiban, bezsbic, bezssigndat
INTO :frmBEZStamm.tblBEZS.colErfDat, :frmBEZStamm.tblBEZS.colArztNr, :frmBEZStamm.tblBEZS.colHalterNr, :frmBEZStamm.tblBEZS.colRechNr,
:frmBEZStamm.tblBEZS.colBLZ, :frmBEZStamm.tblBEZS.colKonto, :frmBEZStamm.tblBEZS.colMaxDM, :frmBEZStamm.tblBEZS.colLtztEinzug, :frmBEZStamm.tblBEZS.colTag, :frmBEZStamm.tblBEZS.colAbDatum, :frmBEZStamm.tblBEZS.colErlDat,
:frmBEZStamm.tblBEZS.colIBAN, :frmBEZStamm.tblBEZS.colBIC, :frmBEZStamm.tblBEZS.colSignDatum
FROM bezs ";
				locals.strSelect1 = "";
				if (locals.nArzt != SalNumber.Null) 
				{
					locals.strSelect1 = "AND bezsarztnr = " + locals.nArzt.ToString(0) + " ";
				}
				if (locals.nHalter != SalNumber.Null) 
				{
					locals.strSelect1 = "AND bezshalternr = " + locals.nHalter.ToString(0) + " ";
				}
				if (locals.strSelect1 != "") 
				{
					locals.strSelect1 = "WHERE " + locals.strSelect1.Mid(3, 255);
				}
				strSelect = strSelect + locals.strSelect1 + "ORDER BY bezserfdat";
				if (tblBEZS.Populate(hSqlUser, strSelect, Sys.TBL_FillAll)) 
				{
					hSqlUser.Commit();
				}
				hSqlUser.Disconnect();

				return 0;
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmBEZStamm WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBEZStamm_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmBEZStamm_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmBEZStamm_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBEZStamm_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			// Call SqlConnection(hSqlUser)
			this.PalHoleTabelle(SalNumber.Null, SalNumber.Null);

			this.tblBEZS.SetContextMenu("frmBEZStammRightClick", 0);

			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBEZStamm_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SqlDisconnect(hSqlUser)
			this.PalSave();
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.PalSave()) 
			{
			}
			if (this.PalHoleTabelle(this.dfArztNr.Number, SalNumber.Null)) 
			{
			}
			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.PalSave()) 
			{
			}
			if (this.PalHoleTabelle(this.dfArztNr.Number, this.dfHalterNr.Number)) 
			{
			}
			#endregion
		}
		
		/// <summary>
		/// pbNeu WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbNeu_OnSAM_Click(sender, e);
					break;
				
				case Const.WM_KEYUP:
					this.pbNeu_OnWM_KEYUP(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbNeu_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalNewRow();
			#endregion
		}
		
		/// <summary>
		/// WM_KEYUP event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_OnWM_KEYUP(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == 45)  // Einf.
			{
				this.PalNewRow();
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbNeu_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbNeu, "Neue Zeile hinzufügen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbLoe WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoe_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLoe_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbLoe_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoe_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.tblBEZS.AnyRows((Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0)) 
			{
				this.nRow = Sys.TBL_MinRow;
				while (true)
				{
					if (!(this.tblBEZS.FindNextRow(ref this.nRow, (Sys.ROW_Selected | Sys.ROW_MarkDeleted), 0))) 
					{
						break;
					}
					this.tblBEZS.SetFocusRow(this.nRow);
					Int.SqlImmed("DELETE FROM bezs WHERE bezserfdat = :frmBEZStamm.tblBEZS.colErfDat AND bezsarztnr = :frmBEZStamm.tblBEZS.colArztNr AND bezshalternr = :frmBEZStamm.tblBEZS.colHalterNr");
					this.tblBEZS.DeleteRow(this.nRow, Sys.TBL_NoAdjust);
				}
				this.PalSave();
				this.tblBEZS.ResetTable();
				// If SalTblPopulate( tblBEZS,hSqlUser,strSelect,TBL_FillAll )
				this.PalHoleTabelle(this.dfArztNr.Number, this.dfHalterNr.Number);
			}
			else
			{
				Sal.MessageBox(@"Vorher müssen die zu löschenden
Zeilen markiert werden !", "Markieren !", Sys.MB_IconAsterisk);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLoe_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.pbLoe, "Schwarz markierte Zeilen löschen.");
			return;
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalDestroyWindow (hWndForm)
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblBEZS
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblBEZSTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmBEZStamm _frmBEZStamm = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblBEZSTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmBEZStamm frmBEZStamm
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmBEZStamm == null) 
					{
						_frmBEZStamm = (frmBEZStamm)this.FindForm();
					}
					return _frmBEZStamm;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblBEZSTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblBEZSTableWindow)SalWindow.FromHandle(handle, typeof(tblBEZSTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// colArztNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colArztNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				Int.SqlIstDa("FROM a WHERE aarztnr = :frmBEZStamm.tblBEZS.colArztNr", ref Var.bExists);
				if (!(Var.bExists)) 
				{
					Sal.MessageBox("Dieses Mitglied gibt es nicht.", "Mitglied Nr. " + this.colArztNr.Number.ToString(0), (Sys.MB_IconExclamation | Sys.MB_Ok));
					e.Return = false;
					return;
				}
				#endregion
			}
			
			/// <summary>
			/// colHalterNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colHalterNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				Int.SqlIstDa("FROM h WHERE harztnr = :frmBEZStamm.tblBEZS.colArztNr AND hhalternr = :frmBEZStamm.tblBEZS.colHalterNr AND hdeaktiv IS NULL", ref Var.bExists);
				if (!(Var.bExists)) 
				{
					Sal.MessageBox("Diesen Halter gibt es nicht.", "Halter Nr. " + this.colArztNr.Number.ToString(0) + "/H" + this.colHalterNr.Number.ToString(0), (Sys.MB_IconExclamation | Sys.MB_Ok));
					e.Return = false;
					return;
				}
				else
				{
					Int.SqlImmedSel(@"SELECT hbezblz, hbezkonto, hbeziban, hbezbic, hbezsigndat
INTO :frmBEZStamm.tblBEZS.colBLZ, :frmBEZStamm.tblBEZS.colKonto, :frmBEZStamm.tblBEZS.colIBAN, :frmBEZStamm.tblBEZS.colBIC, :frmBEZStamm.tblBEZS.colSignDatum
FROM h WHERE harztnr = :frmBEZStamm.tblBEZS.colArztNr AND hhalternr = :frmBEZStamm.tblBEZS.colHalterNr");
				}
				#endregion
			}
			
			/// <summary>
			/// colRechNr WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRechNr_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colRechNr_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colRechNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				// 14.03.18 Ä1712 keine IBEN-BEZ mehr
				// 02.04.12 F1273 + If colRechNr = NUMBER_Null
				// If colRechNr = NUMBER_Null
				// Else
				// Call SqlIstDa( 'FROM rk WHERE rkarztnr = :frmBEZStamm.tblBEZS.colArztNr AND rkhalternr = :frmBEZStamm.tblBEZS.colHalterNr AND rkrechnr = :frmBEZStamm.tblBEZS.colRechNr', bExists )
				// If not bExists
				// Call SalMessageBox( 'Diese Rechnung gibt es nicht.', 'Rechnung Nr. ' || SalNumberToStrX( frmBEZStamm.tblBEZS.colArztNr, 0 ) || '/R' || SalNumberToStrX( frmBEZStamm.tblBEZS.colRechNr, 0 ), MB_IconExclamation|MB_Ok )
				// Return FALSE
				Int.SqlIstDa("FROM rk WHERE rkarztnr = :frmBEZStamm.tblBEZS.colArztNr AND rkhalternr = :frmBEZStamm.tblBEZS.colHalterNr AND rkrechnr = :frmBEZStamm.tblBEZS.colRechNr AND rkdeaktiv IS NULL", ref Var.bExists);
				if (!(Var.bExists)) 
				{
					Sal.MessageBox("Diese Rechnung gibt es nicht.", "Rechnung Nr. " + this.colArztNr.Number.ToString(0) + "/R" + this.colRechNr.Number.ToString(0), (Sys.MB_IconExclamation | Sys.MB_Ok));
					e.Return = false;
					return;
				}
				#endregion
			}
			
			/// <summary>
			/// colBLZ WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBLZ_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colBLZ_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBLZ_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				Int.SqlImmed("UPDATE h SET hbankeinzug=1, hbezblz = :frmBEZStamm.tblBEZS.colBLZ WHERE harztnr = :frmBEZStamm.tblBEZS.colArztNr AND hhalternr = :frmBEZStamm.tblBEZS.colHalterNr");
				if (this.colBIC.Text == "") 
				{
					this.colBIC.Text = Int.PalGetBIC(this.colBLZ.Text);
				}
				#endregion
			}
			
			/// <summary>
			/// colKonto WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colKonto_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colKonto_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colKonto_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				Int.SqlImmed("UPDATE h SET hbankeinzug=1, hbezkonto = :frmBEZStamm.tblBEZS.colKonto WHERE harztnr = :frmBEZStamm.tblBEZS.colArztNr AND hhalternr = :frmBEZStamm.tblBEZS.colHalterNr");
				#endregion
			}
			
			/// <summary>
			/// colIBAN WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colIBAN_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colIBAN_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colIBAN_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (Int.PalIBANPruef(this.colIBAN.Text)) 
				{
					Int.SqlImmed("UPDATE h SET hbankeinzug=1, hbeziban = :frmBEZStamm.tblBEZS.colIBAN WHERE harztnr = :frmBEZStamm.tblBEZS.colArztNr AND hhalternr = :frmBEZStamm.tblBEZS.colHalterNr");
				}
				else
				{
					Sal.MessageBox("Die eingegebene IBAN ist ungültig!", "Fehlerhafte Eingabe", Sys.MB_Ok);
					e.Return = false;
					return;
				}
				#endregion
			}
			
			/// <summary>
			/// colBIC WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBIC_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colBIC_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colBIC_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (Int.PalIBANPruef(this.colIBAN.Text)) 
				{
					Int.SqlImmed("UPDATE h SET hbankeinzug=1, hbeziban = :frmBEZStamm.tblBEZS.colIBAN WHERE harztnr = :frmBEZStamm.tblBEZS.colArztNr AND hhalternr = :frmBEZStamm.tblBEZS.colHalterNr");
				}
				else
				{
					Sal.MessageBox("Die eingegebene IBAN ist ungültig!", "Fehlerhafte Eingabe", Sys.MB_Ok);
					e.Return = false;
					return;
				}
				#endregion
			}
			
			/// <summary>
			/// colSignDatum WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colSignDatum_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colSignDatum_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colSignDatum_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				if (this.colSignDatum.DateTime > SalDateTime.Current) 
				{
					Sal.MessageBox("Signaturdatum ist nicht in der Zukunft möglich.", "unmöglich", (Sys.MB_Ok | Sys.MB_IconExclamation));
					e.Return = false;
					return;
				}
				#endregion
			}
			
			/// <summary>
			/// colAbDatum WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colAbDatum_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.colAbDatum_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void colAbDatum_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				// 23.11.20 Ä1904 28 -> 42
				if (this.colAbDatum.DateTime > SalDateTime.Current + 42) 
				{
					Sal.MessageBox("Nur max. 42 Tage in der Zukunft möglich.", "Zu weit in der Zukunft", (Sys.MB_Ok | Sys.MB_IconExclamation));
					e.Return = false;
					return;
				}
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalHoleTabelleLocals
			{
				public SalString strSelect1 = "";
				public SalNumber nArzt = 0;
				public SalNumber nHalter = 0;
			}
		}
		#endregion
	}
}
