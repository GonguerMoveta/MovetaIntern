// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmBuchAbgleich : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlLB = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalString strText = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmBuchAbgleich()
		{
			// Assign global reference.
			App.frmBuchAbgleich = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmBuchAbgleich CreateWindow(Control owner)
		{
			frmBuchAbgleich frm = new frmBuchAbgleich();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmBuchAbgleich FromHandle(SalWindowHandle handle)
		{
			return ((frmBuchAbgleich)SalWindow.FromHandle(handle, typeof(frmBuchAbgleich)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmBuchAbgleich WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBuchAbgleich_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmBuchAbgleich_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmBuchAbgleich_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBuchAbgleich_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlConnection(ref this.hSqlLB);
			this.dfDatv.Value = new SalDateTime(1900, 1, 1);
			this.dfDatb.Value = new SalDateTime(2099, 12, 31);
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmBuchAbgleich_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlLB.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// tblDat WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblDat_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblDat_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblDat_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 25.06.13
			// Call MTblSubClass( hWndItem )
			// Call MTblSetAltRowBackColors( hWndItem, FALSE, COLOR_White, 0xFFFFA8 )
			// Call MTblSetAltRowBackColors( hWndItem, FALSE, COLOR_White, 0xFFFFD8 )
			// Call MTblSetFlags( hWndItem, MTBL_FLAG_COLOR_ENTIRE_ROW, TRUE )
			// Call MTblSetFlags( hWndItem, MTBL_FLAG_VARIABLE_ROW_HEIGHT, TRUE )
			// Call MTblSetFlags( hWndItem, MTBL_FLAG_NO_FREE_COL_AREA_LINES, TRUE )
			// Call MTblSetFlags( hWndItem, MTBL_FLAG_NO_FREE_ROW_AREA_LINES, TRUE )
			Int.PalPrepareMTbl(this.tblDat, 0xffffd8);

			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.rbDatum.Checked) 
			{
				if (this.rbTKlfd.Checked) 
				{
					this.strSelect = @"SELECT tkbeldat, sum(tksoll), sum(tkhaben) FROM tk
INTO :frmBuchAbgleich.tblDat.colDatum, :frmBuchAbgleich.tblDat.colSoll, :frmBuchAbgleich.tblDat.colHaben
WHERE tkbeldat BETWEEN :frmBuchAbgleich.dfDatv.Value AND :frmBuchAbgleich.dfDatb.Value GROUP BY 1";
				}
				else if (this.rbTKVor.Checked) 
				{
					this.strSelect = @"SELECT tkabeldat, sum(tksoll), sum(tkhaben) FROM tka
INTO :frmBuchAbgleich.tblDat.colDatum, :frmBuchAbgleich.tblDat.colSoll, :frmBuchAbgleich.tblDat.colHaben
WHERE tkabeldat BETWEEN :frmBuchAbgleich.dfDatv.Value AND :frmBuchAbgleich.dfDatb.Value AND tkadeaktiv IS NULL AND tkadeaktiv IS NULL GROUP BY 1";
				}
				else if (this.rbFISoll.Checked) 
				{
					this.strSelect = @"SELECT fibeldat, sum(fidm) FROM fi
INTO :frmBuchAbgleich.tblDat.colDatum, :frmBuchAbgleich.tblDat.colSoll
WHERE fibeldat BETWEEN :frmBuchAbgleich.dfDatv.Value AND :frmBuchAbgleich.dfDatb.Value
and NOT fihaben in (16000, 16100, 16200, 16420, 16450, 16500, 17300, 16400, 16410)
and fisoll in (16000, 16100, 16200, 16420, 16450, 16500, 17300, 16400, 16410) GROUP BY 1";
				}
				else if (this.rbFIHaben.Checked) 
				{
					this.strSelect = @"SELECT fibeldat, sum(fidm) FROM fi
INTO :frmBuchAbgleich.tblDat.colDatum, :frmBuchAbgleich.tblDat.colHaben
WHERE fibeldat BETWEEN :frmBuchAbgleich.dfDatv.Value AND :frmBuchAbgleich.dfDatb.Value
and fihaben in (16000, 16100, 16200, 16420, 16450, 16500, 17300, 16400, 16410)
and not fisoll in (16000, 16100, 16200, 16420, 16450, 16500, 17300, 16400, 16410) GROUP BY 1";
				}
			}
			else if (this.rbBelNr.Checked) 
			{
				if (this.rbTKlfd.Checked) 
				{
					this.strSelect = @"SELECT tkbeldat, tkbelnr, sum(tksoll), sum(tkhaben) FROM tk
INTO :frmBuchAbgleich.tblDat.colDatum, :frmBuchAbgleich.tblDat.colBelNr, :frmBuchAbgleich.tblDat.colSoll, :frmBuchAbgleich.tblDat.colHaben
WHERE tkbeldat BETWEEN :frmBuchAbgleich.dfDatv.Value AND :frmBuchAbgleich.dfDatb.Value GROUP BY 1,2";
				}
				else if (this.rbTKVor.Checked) 
				{
					this.strSelect = @"SELECT tkabeldat, tkabelnr, sum(tksoll), sum(tkhaben) FROM tka
INTO :frmBuchAbgleich.tblDat.colDatum, :frmBuchAbgleich.tblDat.colBelNr, :frmBuchAbgleich.tblDat.colSoll, :frmBuchAbgleich.tblDat.colHaben
WHERE tkabeldat BETWEEN :frmBuchAbgleich.dfDatv.Value AND :frmBuchAbgleich.dfDatb.Value AND tkadeaktiv IS NULL GROUP BY 1,2";
				}
				else if (this.rbFISoll.Checked) 
				{
					this.strSelect = @"SELECT fibeldat, fibelnr, sum(fidm) FROM fi
INTO :frmBuchAbgleich.tblDat.colDatum, :frmBuchAbgleich.tblDat.colBelNr, :frmBuchAbgleich.tblDat.colSoll
WHERE fibeldat BETWEEN :frmBuchAbgleich.dfDatv.Value AND :frmBuchAbgleich.dfDatb.Value
and NOT fihaben in (16000, 16100, 16200, 16420, 16450, 16500, 17300, 16400, 16410)
and fisoll in (16000, 16100, 16200, 16420, 16450, 16500, 17300, 16400, 16410) GROUP BY 1,2";
				}
				else if (this.rbFIHaben.Checked) 
				{
					this.strSelect = @"SELECT fibeldat, fibelnr, sum(fidm) FROM fi
INTO :frmBuchAbgleich.tblDat.colDatum, :frmBuchAbgleich.tblDat.colBelNr, :frmBuchAbgleich.tblDat.colHaben
WHERE fibeldat BETWEEN :frmBuchAbgleich.dfDatv.Value AND :frmBuchAbgleich.dfDatb.Value
and fihaben in (16000, 16100, 16200, 16420, 16450, 16500, 17300, 16400, 16410)
and not fisoll in (16000, 16100, 16200, 16420, 16450, 16500, 17300, 16400, 16410) GROUP BY 1,2";
				}
			}
			else if (this.rbEnzel.Checked) 
			{
				if (this.rbTKlfd.Checked) 
				{
					this.strSelect = @"SELECT tkbeldat, tkbelnr, tkbuchtext, tksoll, tkhaben FROM tk
INTO :frmBuchAbgleich.tblDat.colDatum, :frmBuchAbgleich.tblDat.colBelNr, :frmBuchAbgleich.tblDat.colBuchText, :frmBuchAbgleich.tblDat.colSoll, :frmBuchAbgleich.tblDat.colHaben
WHERE tkbeldat BETWEEN :frmBuchAbgleich.dfDatv.Value AND :frmBuchAbgleich.dfDatb.Value";
					if (this.dfBelNr.Number != Sys.NUMBER_Null) 
					{
						this.strSelect = this.strSelect + " AND tkbelnr = :frmBuchAbgleich.dfBelNr";
					}
				}
				else if (this.rbTKVor.Checked) 
				{
					this.strSelect = @"SELECT tkabeldat, tkabelnr, tkabuchtext, tksoll, tkhaben FROM tka
INTO :frmBuchAbgleich.tblDat.colDatum, :frmBuchAbgleich.tblDat.colBelNr, :frmBuchAbgleich.tblDat.colBuchText, :frmBuchAbgleich.tblDat.colSoll, :frmBuchAbgleich.tblDat.colHaben
WHERE tkabeldat BETWEEN :frmBuchAbgleich.dfDatv.Value AND :frmBuchAbgleich.dfDatb.Value AND tkadeaktiv IS NULL";
					if (this.dfBelNr.Number != Sys.NUMBER_Null) 
					{
						this.strSelect = this.strSelect + " AND tkabelnr = :frmBuchAbgleich.dfBelNr";
					}
				}
				else if (this.rbFISoll.Checked) 
				{
					this.strSelect = @"SELECT fibeldat, fibelnr, fibuchtext, fidm FROM fi
INTO :frmBuchAbgleich.tblDat.colDatum, :frmBuchAbgleich.tblDat.colBelNr, :frmBuchAbgleich.tblDat.colBuchText, :frmBuchAbgleich.tblDat.colSoll
WHERE fibeldat BETWEEN :frmBuchAbgleich.dfDatv.Value AND :frmBuchAbgleich.dfDatb.Value
and NOT fihaben in (16000, 16100, 16200, 16420, 16450, 16500, 17300, 16400, 16410)
and fisoll in (16000, 16100, 16200, 16420, 16450, 16500, 17300, 16400, 16410) ";
					if (this.dfBelNr.Number != Sys.NUMBER_Null) 
					{
						this.strSelect = this.strSelect + " AND fibelnr = :frmBuchAbgleich.dfBelNr";
					}
				}
				else if (this.rbFIHaben.Checked) 
				{
					this.strSelect = @"SELECT fibeldat, fibelnr, fibuchtext, fidm FROM fi
INTO :frmBuchAbgleich.tblDat.colDatum, :frmBuchAbgleich.tblDat.colBelNr, :frmBuchAbgleich.tblDat.colBuchText, :frmBuchAbgleich.tblDat.colHaben
WHERE fibeldat BETWEEN :frmBuchAbgleich.dfDatv.Value AND :frmBuchAbgleich.dfDatb.Value
and fihaben in (16000, 16100, 16200, 16420, 16450, 16500, 17300, 16400, 16410)
and not fisoll in (16000, 16100, 16200, 16420, 16450, 16500, 17300, 16400, 16410) ";
					if (this.dfBelNr.Number != Sys.NUMBER_Null) 
					{
						this.strSelect = this.strSelect + " AND fibelnr = :frmBuchAbgleich.dfBelNr";
					}
				}
			}
			Sal.WaitCursor(true);
			this.tblDat.Populate(this.hSqlLB, this.strSelect, Sys.TBL_FillAll);
			Sal.WaitCursor(false);
			this.SetStatusBarText("");
			#endregion
		}
		
		/// <summary>
		/// pbDrucken WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDrucken_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// LL
			dlgLlDruck.ModalDialog(App.frmMain, "BuchAbgleich.lst", "");
			#endregion
		}
		
		/// <summary>
		/// pbExport WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbExport_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbExport_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbExport_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			MT.MTbl.ExportToExcel(this.tblDat, MT.MTbl.MTE_LNG_GERMAN, SalString.Null, ((((MT.MTbl.MTE_EXCEL_NEW_INSTANCE | MT.MTbl.MTE_EXCEL_STRING_COLS_AS_TEXT) | Const.MTE_EXCEL_NO_CLIPBOARD) | Const.MTE_EXCEL_NO_AUTO_FIT_COL) | Const.MTE_EXCEL_NO_AUTO_FIT_ROW), 
				(MT.MTbl.MTE_COL_HEADERS | MT.MTbl.MTE_SHOW_STATUS), 0, Sys.ROW_Hidden, Sys.COL_Visible, 0);
			#endregion
		}
		#endregion
		
		#region tblDat
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblDatTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmBuchAbgleich _frmBuchAbgleich = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblDatTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmBuchAbgleich frmBuchAbgleich
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmBuchAbgleich == null) 
					{
						_frmBuchAbgleich = (frmBuchAbgleich)this.FindForm();
					}
					return _frmBuchAbgleich;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblDatTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblDatTableWindow)SalWindow.FromHandle(handle, typeof(tblDatTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
