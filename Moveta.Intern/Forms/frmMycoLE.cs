// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmMycoLE : SalFormWindow
	{
		#region Window Variables
		public SalBoolean bOK = false;
		public SalString strText = "";
		public SalSqlHandle hSqlManAbrRg = SalSqlHandle.Null;
		public SalString strBearbeiter = "";
		public SalString strSMatch = "";
		public SalNumber nSqlArztNr = 0;
		public SalNumber nPraxArt = 0;
		public SalNumber nDummy = 0;
		public SalNumber nRechNr = 0;
		public SalNumber nPreis = 0;
		public SalDateTime dtErfDat = SalDateTime.Null;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmMycoLE()
		{
			// Assign global reference.
			App.frmMycoLE = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmMycoLE CreateWindow(Control owner)
		{
			frmMycoLE frm = new frmMycoLE();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmMycoLE FromHandle(SalWindowHandle handle)
		{
			return ((frmMycoLE)SalWindow.FromHandle(handle, typeof(frmMycoLE)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmMycoLE WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMycoLE_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmMycoLE_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmMycoLE_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMycoLE_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.bOK = Sal.TblAnyRows(App.frmManAbr.tblOffeneAbr, Sys.ROW_Selected, 0);
			if (this.bOK) 
			{
				this.dfArztNr.Number = App.frmManAbr.tblOffeneAbr.colnArztNr.Number;
				this.strBearbeiter = App.frmManAbr.tblOffeneAbr.colsBearbeiter.Text;
				this.dfBearbDatum.DateTime = App.frmManAbr.tblOffeneAbr.coldtBearbDatum.DateTime;
				Int.SqlImmedSel(@"SELECT aname1,aname2, akzpraxart
INTO :frmMycoLE.dfSArztName,:frmMycoLE.dfSArztName2, :frmMycoLE.nPraxArt
FROM a WHERE aarztnr=:frmMycoLE.dfArztNr");
			}
			else
			{
				this.strBearbeiter = Var.strBNUser;
			}
			Int.SqlConnection(ref this.hSqlManAbrRg);
			this.dfArztNr.SetFocus();
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMycoLE_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlManAbrRg.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT aname1,aname2, akzpraxart
INTO :frmMycoLE.dfSArztName,:frmMycoLE.dfSArztName2, :frmMycoLE.nPraxArt
FROM a WHERE aarztnr=:frmMycoLE.dfArztNr");
			this.dfBearbDatum.DateTime = SalDateTime.Current;
			this.strBearbeiter = Var.strBNUser;
			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
				
				case Sys.SAM_KillFocus:
					this.dfHalterNr_OnSAM_KillFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlIstDa(@"
from H where hhalternr=:frmMycoLE.dfHalterNr and harztnr=:frmMycoLE.dfArztNr AND hdeaktiv IS NULL", ref this.bOK);
			if (this.bOK) 
			{
				Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn,hland || ' ' || hort,hname2,hstr,herfdat
into :frmMycoLE.dfSHalterName, :frmMycoLE.dfSHalterOrt, :frmMycoLE.dfSHalterName2, :frmMycoLE.dfSHalterStr,
:frmMycoLE.dtErfDat
from H where hhalternr=:frmMycoLE.dfHalterNr and harztnr=:frmMycoLE.dfArztNr AND hdeaktiv IS NULL");
			}
			else
			{
				Sal.WaitCursor(true);
				frmHalter.CreateWindow(this, "frmMycoLE", this.dfArztNr.Number, 0);
			}
			this.dfHalterGr.Number = this.dfHalterNr.Number;
			#endregion
		}
		
		/// <summary>
		/// SAM_KillFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_KillFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfHalterNr.IsEmpty()) 
			{
				this.dfHalterNr.Number = this.dfHalterGr.Number;
			}
			#endregion
		}
		
		/// <summary>
		/// dfDatum WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDatum_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfDatum_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDatum_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfDatum.DateTime > SalDateTime.Current) 
			{
				Sal.MessageBeep(0);
				Sal.MessageBox(@"Dieses Datum
liegt in der
Zukunft !", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.dfDatum.SetFocus();
			}
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfMycoTA.Number == Sys.NUMBER_Null) 
			{
				this.dfMycoTA.Number = 0;
			}
			if (this.dfMycoSe.Number == Sys.NUMBER_Null) 
			{
				this.dfMycoSe.Number = 0;
			}

			if (this.dfHalterNr.IsEmpty() || this.dfHalterNr.Number == 0) 
			{
				Sal.MessageBox("Es ist keine Halter-Nr. eingetragen !", "Achtung", Sys.MB_IconStop);
			}
			else
			{
				this.nSqlArztNr = this.dfArztNr.Number;
				Int.SqlIstDa(@" FROM LE
WHERE
LEARZTNR = :frmMycoLE.nSqlArztNr
AND lehalternr=:frmMycoLE.dfHalterNr
AND lebearbeiter=:frmMycoLE.strBearbeiter
AND lebearbdatum=:frmMycoLE.dfBearbDatum", ref this.bOK);
				if (!(this.bOK)) 
				{
					Int.SqlImmedX(@"INSERT INTO LE (LEBEARBEITER, LEARZTNR, LEHALTERNR, LEMATCH,
LEPOSNR, LENAME1, LENAME2, LESTR, LEORT, LEBEARBDATUM,
LEMANDISK)
VALUES (:frmMycoLE.strBearbeiter,:frmMycoLE.nSqlArztNr,:frmMycoLE.dfHalterNr,:frmMycoLE.strSMatch, 1,
:frmMycoLE.dfSHalterName,:frmMycoLE.dfSHalterName2,:frmMycoLE.dfSHalterStr,:frmMycoLE.dfSHalterOrt,
:frmMycoLE.dfBearbDatum,:strMan)");
					this.nRechNr = SalNumber.Null;
				}
				else
				{
					Int.SqlImmedSel(@"SELECT lerechnr FROM LE INTO :frmMycoLE.nRechNr
		WHERE
		LEARZTNR = :frmMycoLE.nSqlArztNr
		AND lehalternr=:frmMycoLE.dfHalterNr
		AND lebearbeiter=:frmMycoLE.strBearbeiter
		AND lebearbdatum=:frmMycoLE.dfBearbDatum");
				}
				// 06.09.99
				if (this.dfMycoTA.Number != 0 || this.dfMycoSe.Number != 0) 
				{
					Int.SqlImmedX(@"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM,
LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:frmMycoLE.strBearbeiter,:frmMycoLE.nSqlArztNr,:frmMycoLE.dfHalterNr,:frmMycoLE.nRechNr,
1, 'L', 7, 'Bestandsbesuch / Impfbescheinigung',:frmMycoLE.dfDatum,
12.78, 0,
:frmMycoLE.dfBearbDatum, SYSDATETIME )");
					this.nPreis = this.dfMycoTA.Number + this.dfMycoSe.Number;
					Int.SqlImmed(@"UPDATE a SET amyco = amyco - :frmMycoLE.nPreis
WHERE aarztnr = :frmMycoLE.dfArztNr");
				}
				if (this.dfMycoTA.Number != 0) 
				{
					this.strText = Int.PalStrNum(this.dfMycoTA.Number, 5, 0) + " Ferkel gegen Enz. Pneym. geimpft";
					this.nPreis = 0.96m * this.dfMycoTA.Number;
					Int.SqlImmedX(@"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM,
LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:frmMycoLE.strBearbeiter,:frmMycoLE.nSqlArztNr,:frmMycoLE.dfHalterNr,:frmMycoLE.nRechNr,
1, 'L', 7, :frmMycoLE.strText,:frmMycoLE.dfDatum,
:frmMycoLE.nPreis, 0,
:frmMycoLE.dfBearbDatum, SYSDATETIME )");
					Int.PalLog("MYCO-" + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfMycoTA.Number, 5, 0) + " ImpfTA");
				}
				if (this.dfMycoSe.Number != 0) 
				{
					this.strText = Int.PalStrNum(this.dfMycoSe.Number, 5, 0) + " Ds. Stellamune Mykoplasma";
					this.nPreis = 0.59m * this.dfMycoSe.Number;
					Int.SqlImmedX(@"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM,
LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT)
VALUES (:frmMycoLE.strBearbeiter,:frmMycoLE.nSqlArztNr,:frmMycoLE.dfHalterNr,:frmMycoLE.nRechNr,
1, 'A', 19, :frmMycoLE.strText,:frmMycoLE.dfDatum,
:frmMycoLE.nPreis, 0,
:frmMycoLE.dfBearbDatum, SYSDATETIME )");
					Int.PalLog("MYCO-" + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfMycoSe.Number, 5, 0) + " ImpfSe");
				}
				Sal.MessageBeep(0);
				Sal.WaitCursor(false);
				// Call SalSetFocus( dfLA )
			}
			this.dfHalterNr.Clear();
			this.dfMycoTA.Clear();
			this.dfMycoSe.Clear();
			this.dfDatum.Clear();
			this.dfHalterNr.SetFocus();
			#endregion
		}
		
		/// <summary>
		/// dfArztName WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztName_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztName_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztName_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfBearbDatum.DateTime = SalDateTime.Current;
			Sal.WaitCursor(true);
			tblArzt.CreateWindow(this, "frmMycoLE", this.dfArztName.Text);
			#endregion
		}
		
		/// <summary>
		/// pbHalterAnl WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHalterAnl_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbHalterAnl_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHalterAnl_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.IsEmpty()) 
			{
				frmHalter.CreateWindow(this, "frmMycoLE", 0, 0);
			}
			else
			{
				if (this.dfHalterNr.IsEmpty()) 
				{
					frmHalter.CreateWindow(this, "frmMycoLE", this.dfArztNr.Number, 0);
				}
				else
				{
					frmHalter.CreateWindow(this, "frmMycoLE", this.dfArztNr.Number, this.dfHalterNr.Number);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbHSuche WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHSuche_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbHSuche_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHSuche_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(this.dfHalterName.IsEmpty())) 
			{
				Sal.WaitCursor(true);
				tblHalter.CreateWindow(this, "frmManLE", this.dfArztNr.Number, 0, this.dfHalterName.Text, this.dfHalterVN.Text, "", "", "");
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
	}
}
