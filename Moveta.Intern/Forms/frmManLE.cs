// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmManLE : SalFormWindow
	{
		#region Window Variables
		public SalBoolean bOK = false;
		public SalString strSelectPosi = "";
		public SalSqlHandle hSqlManAbrRg = SalSqlHandle.Null;
		public SalSqlHandle hSqlAbrPosi = SalSqlHandle.Null;
		public SalSqlHandle hSqlUpdPosi = SalSqlHandle.Null;
		public SalSqlHandle hSqlZa = SalSqlHandle.Null;
		public SalString strBearbeiter = "";
		public SalNumber nSqlArztNr = 0;
		public SalNumber nPraxArt = 0;
		public SalNumber nDummy = 0;
		public SalNumber nRechNr = 0;
		public SalNumber nStaffel = 0;
		public SalString strKuerzel = "";
		public SalString mlExpress = "";
		public SalDateTime dtErfDat = SalDateTime.Null;
		public SalBoolean bExistsLE = false;
		public SalString strDummy = "";
		public SalNumber nHalterNein = 0;
		public SalString strAndererHalter = "";
		public SalDateTime dtSperrDatum = SalDateTime.Null;
		public SalString strPBarcode = "";
		public SalNumber nAReverse = 0;
		public SalNumber nLeJahr = 0;
		public SalString strHLand = "";
		public SalString strALand = "";
		public SalNumber nReverseVersion = 0;
		public SalNumber nNeueNr = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmManLE()
		{
			// Assign global reference.
			App.frmManLE = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmManLE CreateWindow(Control owner)
		{
			frmManLE frm = new frmManLE();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmManLE FromHandle(SalWindowHandle handle)
		{
			return ((frmManLE)SalWindow.FromHandle(handle, typeof(frmManLE)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalCheckStaffel()
		{
			#region Actions
			using (new SalContext(this))
			{
				// 22.09.99
				Int.SqlImmedSel(@"SELECT astaffel
INTO :frmManLE.nStaffel
FROM a WHERE aarztnr=:frmManLE.dfArztNr");
				// If nStaffel != 901
				// If IDNO = SalMessageBox('Arzt ' || PalStrNum(dfArztNr,4,0) || ' hat Staffel ' || PalStrNum(nStaffel,4,0) || '.
				// 
				// Ist das in Ordnung ?', 'Achtung', MB_YesNo)
				// Return FALSE
				// Else
				// If dfArztNr != dfArztNr2 And Not SalIsNull(dfArztNr2)	! zwei Nummern
				// Call SqlImmedSel('SELECT astaffel
				// INTO :frmManLE.nStaffel
				// FROM a WHERE aarztnr=:frmManLE.dfArztNr2')
				// If nStaffel != 901
				// If IDNO = SalMessageBox('Arzt ' || PalStrNum(dfArztNr2,4,0) || ' hat Staffel ' || PalStrNum(nStaffel,4,0) || '.
				// 
				// Ist das in Ordnung ?', 'Achtung', MB_YesNo)
				// Return FALSE
				// Else
				// Return TRUE
				// Else
				// Return TRUE
				mlArztInfo.Text = "";
				if (nStaffel != 901) 
				{
					mlArztInfo.Text = Int.PalStrNum(dfArztNr.Number, 4, 0) + ": Staffel " + nStaffel.ToString(0);
				}
				if (dfArztNr.Number != dfArztNr2.Number && !(Sal.IsNull(dfArztNr2)))  // zwei Nummern
				{
					Int.SqlImmedSel(@"SELECT astaffel
INTO :frmManLE.nStaffel
FROM a WHERE aarztnr=:frmManLE.dfArztNr2");
					if (nStaffel != 901) 
					{
						mlArztInfo.Text = mlArztInfo.Text + @"
" + Int.PalStrNum(dfArztNr2.Number, 4, 0) + ": Staffel " + nStaffel.ToString(0);
					}
				}
				return true;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalSpeichern()
		{
			#region Actions
			using (new SalContext(this))
			{
				// 31.01.08
				if (dfRechText.Text != "") 
				{
					// 28.01.08 A194
					// 12.10.99
					if (Sal.IsNull(dfPosNr)) 
					{
						dfPosNr.Number = 1;
					}
					// 30.06.14 Ä961
					if (nLeJahr != 0 && nLeJahr != this.dfDatum.Value.Year()) 
					{
						// 11.05.15 F2357
						// Set frmManLE.dfPosNr = frmManLE.dfPosNr + 1
						Int.SqlIstDa(@" FROM LE, LEP
WHERE
learztnr=leparztnr AND lehalternr=lephalternr AND leposnr=lepposnr
AND lebearbeiter=lepbearbeiter AND le.lebearbdatum=lep.lebearbdatum
AND LEARZTNR = :frmManLE.nSqlArztNr
AND lehalternr=:frmManLE.dfHalterNr
AND @YEAR(lepdatum)+1900 = @YEAR( :frmManLE.dfDatum.Value ) +1900
AND lebearbeiter=:frmManLE.strBearbeiter
AND le.lebearbdatum=:frmManLE.dfBearbDatum", ref bOK);
						if (bOK) 
						{
							Int.SqlImmedSel(@"SELECT leposnr INTO :frmManLE.dfPosNr FROM LE, LEP
WHERE
learztnr=leparztnr AND lehalternr=lephalternr AND leposnr=lepposnr
AND lebearbeiter=lepbearbeiter AND le.lebearbdatum=lep.lebearbdatum
AND LEARZTNR = :frmManLE.nSqlArztNr
AND lehalternr=:frmManLE.dfHalterNr
AND @YEAR(lepdatum)+1900 = @YEAR( :frmManLE.dfDatum.Value ) +1900
AND lebearbeiter=:frmManLE.strBearbeiter
AND le.lebearbdatum=:frmManLE.dfBearbDatum");
						}
						else
						{
							this.dfPosNr.Number = this.dfPosNr.Number + 1;
						}
						// 28.08.14 F2127
						this.dfBarcode.Text = "";
					}

					if (cbPapier.Checked) 
					{
						// 12.03.08
						if (dfBarcode.Text == "") 
						{
							Int.SqlImmedSel("SELECT lebarcode INTO :frmManLE.dfBarcode FROM le WHERE learztnr IN (:frmManLE.dfArztNr, :frmManLE.dfArztNr2) AND lehalternr=:frmManLE.dfHalterNr AND leposnr = :frmManLE.dfPosNr ORDER BY lebarcode DESC");
						}
						// 28.01.08 A194
						if (dfBarcode.Text == "") 
						{
							dfBarcode.Text = Int.PalDateToStrJJJJMMTThhmmsst(SalDateTime.Current).Mid(2, 255);
							// Set dfBarcode = strBNAbtlg || strBNZei || SalStrMidX(PalDateToStrJJJJMMTThhmmsst(SalDateCurrent()),6,255)
							if (Var.bfrmDYMODruck) 
							{
								while (!(App.frmDYMODruck.DestroyWindow())) 
								{
								}
							}
							frmDYMODruck.CreateWindow(this, dfBarcode.Text, "frmManLE");
						}
					}

					strPBarcode = dfBarcode.Text;
					if (!(Sal.IsNull(dfArztNr2)) && dfLA.Text == "A") 
					{
						nSqlArztNr = dfArztNr2.Number;
						// 10.04.08 Barcoide darf nicht bei L und A, nur bei einem stehen
						Int.SqlIstDa(@" FROM LE
WHERE lebarcode = :frmManLE.dfBarcode
AND learztnr = :frmManLE.dfArztNr
AND lehalternr=:frmManLE.dfHalterNr
AND leposnr=:frmManLE.dfPosNr
AND lebearbeiter=:frmManLE.strBearbeiter
AND lebearbdatum=:frmManLE.dfBearbDatum", ref bOK);
						if (bOK) 
						{
							strPBarcode = "";
						}
					}
					else
					{
						nSqlArztNr = dfArztNr.Number;
					}

					Int.SqlIstDa(@" FROM LE
WHERE
LEARZTNR = :frmManLE.nSqlArztNr
AND lehalternr=:frmManLE.dfHalterNr
AND leposnr=:frmManLE.dfPosNr
AND lebearbeiter=:frmManLE.strBearbeiter
AND lebearbdatum=:frmManLE.dfBearbDatum", ref bOK);
					if (!(bOK)) 
					{
						if (dfDatum.Value < new SalDateTime(2010, 1, 1)) 
						{
							cbReverse.Checked = false;
						}
						// 27.10.14 Ä1115 + papierRg
						// 07.08.23 Ä2107 +Versicherung
						Int.SqlImmedX(@"INSERT INTO LE (LEBEARBEITER, LEARZTNR, LEHALTERNR,
LEPOSNR, LETI, LEVN, LENN, LENAME2, LESTR, LEORT, LEKENNUNGTA, LEBEARBDATUM,
LEMANDISK, LEHERFDAT, LEBARCODE, LEREVERSE, LEPAPIERRG, LEVECODE, LEVEVSNR)
VALUES (:frmManLE.strBearbeiter,:frmManLE.nSqlArztNr,:frmManLE.dfHalterNr,:frmManLE.dfPosNr,
:frmManLE.dfSHalterTi, :frmManLE.dfSHalterVN, :frmManLE.dfSHalterNN,:frmManLE.dfSHalterName2,:frmManLE.dfSHalterStr,:frmManLE.dfSHalterOrt,:frmManLE.dfTAKenn,
:frmManLE.dfBearbDatum,:strMan, :frmManLE.dtErfDat, :frmManLE.strPBarcode, :frmManLE.cbReverse, :frmManLE.cbPapierRechnung,
:frmManLE.cmbVECode, :frmManLE.dfVeVSNr )");
						nRechNr = SalNumber.Null;
						// 30.06.14 Ä961
						nLeJahr = this.dfDatum.Value.Year();

					}
					else
					{
						Int.SqlImmedSel(@"SELECT lerechnr FROM LE INTO :frmManLE.nRechNr
		WHERE
		LEARZTNR = :frmManLE.nSqlArztNr
		AND lehalternr=:frmManLE.dfHalterNr
		AND leposnr=:frmManLE.dfPosNr
		AND lebearbeiter=:frmManLE.strBearbeiter
		AND lebearbdatum=:frmManLE.dfBearbDatum");
						// 27.10.14 Ä1115 + papierRg
						Int.SqlImmed(@"UPDATE le SET lepapierrg = :frmManLE.cbPapierRechnung
		WHERE
		LEARZTNR = :frmManLE.nSqlArztNr
		AND lehalternr=:frmManLE.dfHalterNr
		AND leposnr=:frmManLE.dfPosNr
		AND lebearbeiter=:frmManLE.strBearbeiter
		AND lebearbdatum=:frmManLE.dfBearbDatum");
					}
					// 03.04.12 F1270
					if (dfDM.Number == Sys.NUMBER_Null) 
					{
						dfDM.Number = 0;
					}
					// 04.11.14 Ä1067
					// If cmbChargeReverse = ''
					// Set nReverseVersion = 0
					// Else
					// Set nReverseVersion = PalValNum( SalStrLeftX( cmbChargeReverse, 1 ) )

					Int.SqlImmedX(@"INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
LEBEARBDATUM, LEPZEIDAT, LEPREVERSEVERSION)
VALUES (:frmManLE.strBearbeiter,:frmManLE.nSqlArztNr,:frmManLE.dfHalterNr,:frmManLE.nRechNr,:frmManLE.dfPosNr,
:frmManLE.dfLA,:frmManLE.dfMwSt,:frmManLE.dfRechText,:frmManLE.dfDatum.Value,:frmManLE.dfDM,:frmManLE.dfText,
:frmManLE.dfBearbDatum, SYSDATETIME, 0 )");
					Sal.MessageBeep(0);
				}
				Sal.WaitCursor(true);
				tblManAbrPosi.Populate(hSqlAbrPosi, strSelectPosi, Sys.TBL_FillAll);
				Sal.WaitCursor(false);
				Sal.ClearField(dfRechText);
				Sal.ClearField(dfDM);
				// 30.03.15 Ä1172
				if (dtSperrDatum != SalDateTime.Null) 
				{
					Int.SqlIstDa("FROM el WHERE elarztnr = :frmManLE.nSqlArztNr AND elhalternr = :frmManLE.dfArztNr AND elerledigt = \'N\'", ref Var.bExists);
					if (!(Var.bExists)) 
					{
						Int.SqlImmed(@"INSERT INTO el (elarztnr, elhalternr, elzeichen, eltext, eldatum, elabtlg, elerledigt)
VALUES(:frmManLE.nSqlArztNr, :frmManLE.dfHalterNr, :strBNZei, 'Bitte Name/Anschrift mitteilen wegen neuer Rechnung', SYSDATE, :strBNAbtlg, 'N')");
					}
				}

				// Call SalClearField(dfDMa)
				Sal.ClearField(dfBrutto);
				Sal.SetFocus(dfLA);
				// 04.11.14 Ä1067
				// Call SalListSetSelect( cmbChargeReverse, -1 )
				// Call SalHideWindow( cmbChargeReverse )

				return true;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalCheck()
		{
			#region Local Variables
			SalString strPSelect = "";
			SalBoolean bIstDa = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				// Call SqlImmedX('INSERT INTO LEP (LEPBEARBEITER, LEPARZTNR, LEPHALTERNR, LEPRECHNR,
				// LEPPOSNR, LEPLA, LEPMWST, LEPRECHTEXT, LEPDATUM, LEPDM, LEPTEXT,
				// LEBEARBDATUM, LEPZEIDAT)
				// VALUES (:frmManLE.strBearbeiter,:frmManLE.nSqlArztNr,:frmManLE.dfHalterNr,:frmManLE.nRechNr,:frmManLE.dfPosNr,
				// :frmManLE.dfLA,:frmManLE.dfMwSt,:frmManLE.dfRechText,:frmManLE.dfDatum,:frmManLE.dfDM,:frmManLE.dfText,
				// :frmManLE.dfBearbDatum, SYSDATETIME )')
				if (!(Sal.IsNull(dfArztNr2)) && dfLA.Text == "A") 
				{
					nSqlArztNr = dfArztNr2.Number;
				}
				else
				{
					nSqlArztNr = dfArztNr.Number;
				}
				Int.SqlIstDa(@"FROM lep
WHERE leparztnr = :frmManLE.nSqlArztNr
AND lephalternr = :frmManLE.dfHalterNr
AND lepla = :frmManLE.dfLA
AND @TRIM(leprechtext) = @TRIM(:frmManLE.dfRechText)
AND lepdatum = :frmManLE.dfDatum.Value
AND lepdm = :frmManLE.dfDM", ref bIstDa);
				if (!(bIstDa)) 
				{
					Int.SqlIstDa(@"FROM rp
WHERE rparztnr = :frmManLE.nSqlArztNr
AND rphalternr = :frmManLE.dfHalterNr
AND rpla = :frmManLE.dfLA
AND @TRIM(rprechtext) = @TRIM(:frmManLE.dfRechText)
AND rpdatum = :frmManLE.dfDatum.Value
AND rpdm = :frmManLE.dfDM", ref bIstDa);
				}
				return bIstDa;
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmManLE WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmManLE_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmManLE_OnSAM_Create(sender, e);
					break;
                //FC:FINAL: use SAM_Close instead of SAM_Destroy
                case Sys.SAM_Close:
					this.frmManLE_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmManLE_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 12.05.14
			// Set bOK = SalTblAnyRows(frmManAbr.tblOffeneAbr, ROW_Selected, 0)
			// If bOK ->

			if (App.frmManAbr.nArztNr != SalNumber.Null) 
			{
				// 12.05.14
				// Set dfArztNr = frmManAbr.tblOffeneAbr.colnArztNr
				// Set strBearbeiter = frmManAbr.tblOffeneAbr.colsBearbeiter
				// Set dfBearbDatum = frmManAbr.tblOffeneAbr.coldtBearbDatum
				this.dfArztNr.Number = App.frmManAbr.nArztNr;
				this.strBearbeiter = App.frmManAbr.strBearbeiter;
				this.dfBearbDatum.DateTime = App.frmManAbr.dtBearbDatum;

				// 07.11.16 Ä1421 + aneuenr
				Int.SqlImmedSel(@"SELECT aname1,aname2, anr2, akzpraxart, aneuenr
INTO :frmManLE.dfSArztName,:frmManLE.dfSArztName2,:frmManLE.dfArztNr2, :frmManLE.nPraxArt, :frmManLE.nNeueNr
FROM a WHERE aarztnr=:frmManLE.dfArztNr");
				if (this.dfArztNr2.Number == 0) 
				{
					this.dfArztNr2.Clear();
				}
				if (!(this.dfArztNr2.IsEmpty()) && this.nPraxArt == 2) 
				{
					this.nDummy = this.dfArztNr.Number;
					this.dfArztNr.Number = this.dfArztNr2.Number;
					this.dfArztNr2.Number = this.nDummy;
				}
				if (!(this.PalCheckStaffel())) 
				{
					this.DestroyWindow();
				}
				// 07.11.16 Ä1421 + aneuenr
				if (this.nNeueNr > 0) 
				{
					Sal.MessageBox(@"Diese Mitglied-Nr. ist nicht mehr gültig.
Die neue Nummer lautet: " + this.nNeueNr.ToString(0), "Mitglied nicht mehr aktuell", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
			}
			else
			{
				this.strBearbeiter = Var.strBNUser;
			}
			this.strSelectPosi = @"SELECT lepla,lepdatum,leprechtext,lepmwst,lepdm,ROWID, leptext, lepreverseversion
INTO :frmManLE.tblManAbrPosi.colsLA,:frmManLE.tblManAbrPosi.coldtDatum,:frmManLE.tblManAbrPosi.colsRechText,
:frmManLE.tblManAbrPosi.colnMwSt,:frmManLE.tblManAbrPosi.colnDM,:frmManLE.tblManAbrPosi.colsROWID, :frmManLE.tblManAbrPosi.colnText, :frmManLE.tblManAbrPosi.colnReverseVersion
FROM lep
WHERE (leparztnr=:frmManLE.dfArztNr Or leparztnr=:frmManLE.dfArztNr2)
AND lephalternr=:frmManLE.dfHalterGr
AND lepposnr = :frmManLE.dfPosNr
AND lepbearbeiter = :frmManLE.strBearbeiter
AND lebearbdatum = :frmManLE.dfBearbDatum
ORDER BY lepdatum, lepzeidat ";
			Int.SqlConnection(ref this.hSqlManAbrRg);
			Int.SqlConnection(ref this.hSqlAbrPosi);
			Int.SqlConnection(ref this.hSqlUpdPosi);
			Int.SqlConnection(ref this.hSqlZa);
			this.dfLA.Text = "L";
			this.dfMwSt.Number = Var.nMwStVoll;
			this.dfPosNr.Number = 1;
			// 28.01.08 A194
			this.cbPapier.Checked = true;
			// 29.11.13 F1800
			this.tblAZettel.SetContextMenu("frmManLEtblAZettel", 0);
			this.tblHZettel.SetContextMenu("frmManLEtblHZettel", 0);
			// 04.11.14 Ä1067
			// Call SalHideWindow( cmbChargeReverse )

			this.dfArztNr.SetFocus();
			Sal.WaitCursor(false);
			// Call SqlPrepare(hSql2, 'SELECT zvon, zdatum, zbemerk
			// INTO :frmDiskAbr.strZVon, :frmDiskAbr.dtZDatum, :frmDiskAbr.lsZBemerk
			// FROM z WHERE zarztnr IN (:frmDiskAbr.nArztNr, :frmDiskAbr.nArztNr2)
			// AND zhalternr <>0 AND zhalternr = :frmDiskAbr.nTVNr order by zdatum DESC')
			// 15.03.10 OTÄ397
			Sal.DisableWindow(this.cbReverse);
			// 30.06.14 Ä961
			this.nLeJahr = 0;
			// 07.08.23 Ä2107 + versicherung
			this.cmbVECode.PopulateList(Var.hSql, "SELECT vecode FROM ve order by vecode");
			this.cmbVECode.AddListItem("");

			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmManLE_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblManAbrPosi.KillCellEdit();
			this.hSqlManAbrRg.Disconnect();
			this.hSqlAbrPosi.Disconnect();
			this.hSqlUpdPosi.Disconnect();
			this.hSqlZa.Disconnect();
			App.frmManAbr.strSelect = @"SELECT DISTINCT LEARZTNR,LEBEARBEITER,LEBEARBDATUM
FROM LE WHERE LEMANDISK= :strMan ORDER BY LEARZTNR";

			// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
			SalSqlHandle temp1 = App.frmManAbr.hSqlMan;
			Int.SqlConnection(ref temp1);
			App.frmManAbr.hSqlMan = temp1;

			Sal.TblPopulate(App.frmManAbr.tblOffeneAbr, App.frmManAbr.hSqlMan, App.frmManAbr.strSelect, Sys.TBL_FillAll);

			// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
			SalSqlHandle temp2 = App.frmManAbr.hSqlMan;
			Sql.Disconnect(ref temp2);
			App.frmManAbr.hSqlMan = temp2;

			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 07.11.16 Ä1421 + aneuenr
			Int.SqlImmedSel(@"SELECT aname1,aname2, anr2, akzpraxart, aland, aneuenr
INTO :frmManLE.dfSArztName,:frmManLE.dfSArztName2,:frmManLE.dfArztNr2, :frmManLE.nPraxArt, :frmManLE.strALand, :frmManLE.nNeueNr
FROM a WHERE aarztnr=:frmManLE.dfArztNr");
			if (this.dfArztNr2.Number == 0) 
			{
				this.dfArztNr2.Clear();
			}
			if (!(this.dfArztNr2.IsEmpty()) && this.nPraxArt == 2) 
			{
				this.nDummy = this.dfArztNr.Number;
				this.dfArztNr.Number = this.dfArztNr2.Number;
				this.dfArztNr2.Number = this.nDummy;
			}
			if (!(this.PalCheckStaffel())) 
			{
				this.dfArztNr.Clear();
				this.dfArztNr2.Clear();
				this.dfArztNr.SetFocus();
			}
			else
			{
				// 13.05.14 (zhalternr IS NULL OR zhalternr = 0) -> zhalternr = 0
				this.tblAZettel.Populate(this.hSqlZa, @"SELECT ROWID, zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
INTO :frmManLE.tblAZettel.colROWID, :frmManLE.tblAZettel.colsVon, :frmManLE.tblAZettel.colsAn,
:frmManLE.tblAZettel.colnRechNr, :frmManLE.tblAZettel.collsBemerk,
:frmManLE.tblAZettel.coldtDatum, :frmManLE.tblAZettel.colsErl
WHERE zarztnr IN (:frmManLE.dfArztNr, :frmManLE.dfArztNr2) AND zhalternr = 0
AND zart='RA' AND zdeaktiv IS NULL  ORDER BY zdatum DESC", Sys.TBL_FillAll);
				// 04.05.10 OTÄ420
				// Set dfMwSt=nMwStVoll
				this.dfMwSt.Number = Int.PalCheckAuslMwStTA(this.dfArztNr.Number);

				this.dfPosNr.Number = 1;
				this.dfBearbDatum.DateTime = SalDateTime.Current;
				this.strBearbeiter = Var.strBNUser;
				this.tblManAbrPosi.Populate(this.hSqlAbrPosi, this.strSelectPosi, Sys.TBL_FillAll);
				// 28.01.08 A194
				this.dfBarcode.Text = "";
				// 04.02.10 OTF379 +  ORDER BY lebarcode DESC
				Int.SqlImmedSel(@"SELECT lebarcode INTO :frmManLE.dfBarcode FROM le WHERE learztnr IN (:frmManLE.dfArztNr, :frmManLE.dfArztNr2) AND lehalternr=:frmManLE.dfHalterGr AND leposnr = :frmManLE.dfPosNr
AND lebearbdatum=:frmManLE.dfBearbDatum ORDER BY lebarcode DESC");

			}
			// 30.06.14 Ä961
			// 19.09.14
			// Set nLeJahr = 0
			Int.SqlImmedSel(@"SELECT @YEAR(lepdatum)+1900 INTO :frmManLE.nLeJahr FROM lep WHERE leparztnr IN (:frmManLE.dfArztNr, :frmManLE.dfArztNr2) AND lephalternr=:frmManLE.dfHalterGr AND lepposnr = :frmManLE.dfPosNr
AND lebearbdatum=:frmManLE.dfBearbDatum");
			if (this.nLeJahr == SalNumber.Null) 
			{
				this.nLeJahr = 0;
			}
			// 07.11.16 Ä1421 + aneuenr
			if (this.nNeueNr > 0) 
			{
				Sal.MessageBox(@"Diese Mitglied-Nr. ist nicht mehr gültig.
Die neue Nummer lautet: " + this.nNeueNr.ToString(0), "Mitglied nicht mehr aktuell", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}

			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
				
				case Sys.SAM_KillFocus:
					this.dfHalterNr_OnSAM_KillFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 26.07.2006 F21
			if (this.dfHalterNr.Number > 0 && this.dfHalterNr.Number < 99999) 
			{
				// 12.02.19 Ä1825
				Int.SqlIstDa(@"
from H where hhalternr=:frmManLE.dfHalterNr and harztnr=:frmManLE.dfArztNr AND hdeaktiv = 1", ref this.bOK);
				if (this.bOK) 
				{
					Int.SqlImmed("UPDATE h SET hdeaktiv = NULL WHERE hhalternr=:frmManLE.dfHalterNr AND harztnr=:frmManLE.dfArztNr");
					Sal.MessageBox("Der Halter war deaktiviert und wurde nun wieder aktiviert.", "Info", (Sys.MB_Ok | Sys.MB_IconAsterisk));
				}

				Int.SqlIstDa(@"
from H where hhalternr=:frmManLE.dfHalterNr and harztnr=:frmManLE.dfArztNr AND hdeaktiv IS NULL ", ref this.bOK);
				if (this.bOK) 
				{
					// 07.08.23 Ä2107 Versicherung
					Int.SqlImmedSel(@"SELECT hti, hvn, hnn,hland || ' ' || hort,hname2,hstr,hmahnint, herfdat, hhalternein, handerehalter, hsperrdatum, hreverse, hland,
hvecode, hvevsnr
into :frmManLE.dfSHalterTi, :frmManLE.dfSHalterVN, :frmManLE.dfSHalterNN, :frmManLE.dfSHalterOrt, :frmManLE.dfSHalterName2,
:frmManLE.dfSHalterStr, :frmManLE.dfSHalterMI, :frmManLE.dtErfDat, :frmManLE.nHalterNein, :frmManLE.strAndererHalter, :frmManLE.dtSperrDatum, :frmManLE.cbReverse, :frmManLE.strHLand,
:frmManLE.cmbVECode, :frmManLE.dfVeVSNr
from H where hhalternr=:frmManLE.dfHalterNr and harztnr=:frmManLE.dfArztNr");
					if (this.nHalterNein == 1) 
					{
						Sal.MessageBox(@"Halter ist gesperrt!!!

Alternative Halternummer(n) : " + this.strAndererHalter, "Achtung!", (Sys.MB_Ok | Sys.MB_IconStop));
						this.dfHalterNr.Number = 0;
						this.dfHalterNr.SetFocus();
					}
					// 03.04.07 Ä102
					if (this.dtSperrDatum != SalDateTime.Null) 
					{
						this.dfSperrDatum.Text = "Postausgang gesperrt seit " + Int.PalDateToStrJJJJMMTT(this.dtSperrDatum).Mid(6, 2) + "." + Int.PalDateToStrJJJJMMTT(this.dtSperrDatum).Mid(4, 2) + "." + Int.PalDateToStrJJJJMMTT(this.dtSperrDatum).Mid(0, 4);
						this.dfSperrDatum.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Red);
						this.dfSperrDatum.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_White);
					}
					else
					{
						this.dfSperrDatum.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
						this.dfSperrDatum.SetWindowColor(Sys.COLOR_IndexWindowText, Sys.COLOR_Red);
					}

				}
				else
				{
					Sal.WaitCursor(true);
					frmHalter.CreateWindow(this, "frmManLE", this.dfArztNr.Number, 0);
				}
				this.dfHalterGr.Number = this.dfHalterNr.Number;
				// 28.01.08 A194
				this.dfBarcode.Text = "";
				Int.SqlImmedSel("SELECT lebarcode INTO :frmManLE.dfBarcode FROM le WHERE learztnr IN (:frmManLE.dfArztNr, :frmManLE.dfArztNr2) AND lehalternr=:frmManLE.dfHalterGr AND leposnr = :frmManLE.dfPosNr ORDER BY lebarcode DESC");
				this.tblManAbrPosi.Populate(this.hSqlAbrPosi, this.strSelectPosi, Sys.TBL_FillAll);

				Int.SqlIstDa(@"FROM Z WHERE zarztnr = :frmManLE.dfArztNr  AND zhalternr = :frmManLE.dfHalterNr
AND zart='RA' AND zdeaktiv IS NULL ", ref this.bExistsLE);
				if (this.bExistsLE) 
				{
					Sal.MessageBeep(0);
					this.tblHZettel.Populate(this.hSqlZa, @"SELECT ROWID, zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
INTO :frmManLE.tblHZettel.colROWID, :frmManLE.tblHZettel.colsVon, :frmManLE.tblHZettel.colsAn,
:frmManLE.tblHZettel.colnRechNr, :frmManLE.tblHZettel.collsBemerk,
:frmManLE.tblHZettel.coldtDatum, :frmManLE.tblHZettel.colsErl
WHERE zarztnr = :frmManLE.dfArztNr  AND zhalternr = :frmManLE.dfHalterNr
AND zart='RA' AND zdeaktiv IS NULL  ORDER BY zdatum DESC", Sys.TBL_FillAll);
					this.tblHZettel.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_Yellow);
				}
				else
				{
					this.tblHZettel.SetWindowColor(Sys.COLOR_IndexWindow, Sys.COLOR_3DFace);
					this.tblHZettel.ResetTable();
				}
			}
			// 30.06.14 Ä961
			// 19.09.14
			// Set nLeJahr = 0
			Int.SqlImmedSel(@"SELECT @YEAR(lepdatum)+1900 INTO :frmManLE.nLeJahr FROM lep WHERE leparztnr IN (:frmManLE.dfArztNr, :frmManLE.dfArztNr2) AND lephalternr=:frmManLE.dfHalterGr AND lepposnr = :frmManLE.dfPosNr
AND lebearbdatum=:frmManLE.dfBearbDatum");
			if (this.nLeJahr == SalNumber.Null) 
			{
				this.nLeJahr = 0;
			}
			// 04.11.14 Ä1067
			// Call SalListSetSelect( cmbChargeReverse, -1 )
			// Call SalHideWindow( cmbChargeReverse )


			#endregion
		}
		
		/// <summary>
		/// SAM_KillFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_KillFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfHalterNr.IsEmpty()) 
			{
				this.dfHalterNr.Number = this.dfHalterGr.Number;
			}
			#endregion
		}
		
		/// <summary>
		/// dfTAKenn WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfTAKenn_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfTAKenn_OnSAM_Validate(sender, e);
					break;
				
				case Sys.SAM_KillFocus:
					this.dfTAKenn_OnSAM_KillFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfTAKenn_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlIstDa(@"
from H where hhalternr=:frmManLE.dfHalterNr and harztnr=:frmManLE.dfArztNr AND hdeaktiv IS NULL ", ref this.bOK);
			if (this.bOK) 
			{
				Int.SqlImmedSel(@"SELECT hti, hvn, hnn,hland || ' ' || hort,hname2,hstr,hmahnint, herfdat, hhalternein, handerehalter, hreverse, hland
into :frmManLE.dfSHalterTi, :frmManLE.dfSHalterVN, :frmManLE.dfSHalterNN, :frmManLE.dfSHalterOrt, :frmManLE.dfSHalterName2, :frmManLE.dfSHalterStr,
:frmManLE.dfSHalterMI, :frmManLE.dtErfDat, :frmManLE.nHalterNein, :frmManLE.strAndererHalter, :frmManLE.cbReverse, :frmManLE.strHLand
from H where hhalternr=:frmManLE.dfHalterNr and harztnr=:frmManLE.dfArztNr");
				if (this.nHalterNein == 1) 
				{
					Sal.MessageBox(@"Halter ist gesperrt!!!

Alternative Halternummer(n) : " + this.strAndererHalter, "Achtung!", (Sys.MB_Ok | Sys.MB_IconStop));
					this.dfHalterNr.Number = 0;
					this.dfHalterNr.SetFocus();
				}
			}
			else
			{
				Sal.WaitCursor(true);
				frmHalter.CreateWindow(this, "frmManLE", this.dfArztNr.Number, 0);
			}
			this.dfHalterGr.Number = this.dfHalterNr.Number;
			this.tblManAbrPosi.Populate(this.hSqlAbrPosi, this.strSelectPosi, Sys.TBL_FillAll);
			#endregion
		}
		
		/// <summary>
		/// SAM_KillFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfTAKenn_OnSAM_KillFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfHalterNr.IsEmpty()) 
			{
				this.dfHalterNr.Number = this.dfHalterGr.Number;
			}
			#endregion
		}
		
		/// <summary>
		/// dfPosNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPosNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfPosNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPosNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblManAbrPosi.Populate(this.hSqlAbrPosi, this.strSelectPosi, Sys.TBL_FillAll);
			if (this.dfPosNr.IsEmpty()) 
			{
				this.dfPosNr.Number = 1;
			}
			// 28.01.08 A194
			this.dfBarcode.Text = "";
			Int.SqlImmedSel("SELECT lebarcode INTO :frmManLE.dfBarcode FROM le WHERE learztnr IN (:frmManLE.dfArztNr, :frmManLE.dfArztNr2) AND lehalternr=:frmManLE.dfHalterGr AND leposnr = :frmManLE.dfPosNr ORDER BY lebarcode DESC");

			#endregion
		}
		
		/// <summary>
		/// dfLA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfLA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_KillFocus:
					this.dfLA_OnSAM_KillFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_KillFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfLA_OnSAM_KillFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfLA.Text != "L" && this.dfLA.Text != "A" && this.dfLA.Text != "T") 
			{
				Sal.MessageBox(@"Nur L, A, K und T
ist erlaubt.", "ungültig", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.dfLA.Text = "L";
				this.dfLA.SetFocus();
			}
			if (this.dfLA.Text == "T") 
			{
				this.dfText.Number = 1;
			}
			else
			{
				this.dfText.Number = 0;
			}
			// 15.04.11
			if (this.dfLA.Text == "L") 
			{
				if (Int.PalCheckAuslMwStTA(this.dfArztNr.Number) == 20 && this.dfMwSt.Number == 10) 
				{
					this.dfMwSt.Number = 20;
				}
			}
			if (this.dfLA.Text == "A") 
			{
				if (Int.PalCheckAuslMwStTA(this.dfArztNr.Number) == 20 && this.dfMwSt.Number == 20) 
				{
					this.dfMwSt.Number = 10;
				}
			}

			#endregion
		}
		
		/// <summary>
		/// dfDatum WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDatum_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfDatum_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDatum_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfDatum.Value > SalDateTime.Current) 
			{
				Sal.MessageBeep(0);
				Sal.MessageBox(@"Dieses Datum
liegt in der
Zukunft !", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				Sal.SetFocus(this.dfDatum);
			}
			if (this.dfDatum.Value < new SalDateTime(1998, 4, 1)) 
			{
				this.dfMwSt.Number = Var.nMwSatz[9];
			}
			else if (this.dfDatum.Value < new SalDateTime(2007, 1, 1))  // 08.12.06 Ä48 19% MwSt.
			{
				this.dfMwSt.Number = Var.nMwSatz[1];
			}
			// Else If cbReverse		! 15.03.10 OTÄ397		04.11.14 Ä1067: auskommentiert
			// If dfDatum < 2010-01-01
			// 04.05.10 OTÄ420
			// Set dfMwSt=nMwStVoll
			// Set dfMwSt = PalCheckAuslMwStTA( dfArztNr )
			// Else
			// Set dfMwSt=0
			else
			{
				// 04.05.10 OTÄ420
				// Set dfMwSt=nMwStVoll
				this.dfMwSt.Number = Int.PalCheckAuslMwStTA(this.dfArztNr.Number);

			}
			// 11.06.20 Ä1892
			if (Int.PalGetArztLand(this.dfArztNr.Number) == "DE") 
			{
				if (this.dfDatum.Value >= new SalDateTime(2020, 7, 1) && this.dfDatum.Value <= new SalDateTime(2020, 12, 31)) 
				{
					this.dfMwSt.Number = 16;
				}
				else if (this.dfDatum.Value < new SalDateTime(2020, 7, 1)) 
				{
					this.dfMwSt.Number = 19;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfRechText WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechText_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_KillFocus:
					this.dfRechText_OnSAM_KillFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_KillFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechText_OnSAM_KillFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfText.Number == 0) 
			{
				if (this.dfRechText.IsEmpty()) 
				{
					if (this.dfLA.Text == "A") 
					{
						this.dfRechText.Text = "Abgegebene Arznei(en) siehe Anlage";
					}
					else
					{
						this.dfRechText.Text = "Erbrachte Leistung(en) siehe Anlage";
					}
				}
				else
				{
					this.strDummy = ((SalString)this.dfRechText.Text).ToUpper();
					Int.SqlIstDa(@"
from L where lkenn=:frmManLE.strDummy", ref this.bOK);
					if (this.bOK) 
					{
						Int.SqlImmedSel(@"SELECT lbez,lpreis
into :frmManLE.dfRechText,:frmManLE.dfDM
from L where lkenn=:frmManLE.strDummy");
					}
					else
					{
						// Call SalCreateWindow(tblLeis,hWndForm,'frmManLE', dfRechText)
						this.dfText.Number = 0;
						// Set dfRechText=SalStrRightX( dfRechText,SalStrLength( dfRechText )-1 )
						this.dfRechText.Text = ((SalString)this.dfRechText.Text).ToProper();
					}
				}
				// Else
				// Set dfText=0
				// Set dfRechText=SalStrUpperX(dfRechText)
				// Call SqlIstDa('
				// from L where lkenn=:frmManLE.dfRechText', bOK)
				// If bOK
				// Call SqlImmedSel('SELECT lbez,lpreis
				// into :frmManLE.dfRechText,:frmManLE.dfDM
				// from L where lkenn=:frmManLE.dfRechText')
				// Else
				// Call SalCreateWindow(tblLeis,hWndForm,'frmManLE', dfRechText)
			}
			// Set dfRechText=SalStrProperX(dfRechText)
			#endregion
		}
		
		/// <summary>
		/// dfMwSt WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMwSt_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfMwSt_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfMwSt_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(Int.PalMwStOk(this.dfMwSt.Number))) 
			{
				this.dfMwSt.Number = Var.nMwStVoll;
			}
			// 04.11.14 Ä1067
			// If (strALand != strHLand and cbReverse) Or ( Not PalIsLandEU( strHLand ) And dfLA = 'A')	! 20.11.14 auskommentiert
			// Call SalShowWindow( cmbChargeReverse )
			// If dfMwSt = 0
			// Call SalShowWindow( cmbChargeReverse )
			#endregion
		}
		
		/// <summary>
		/// dfDM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfDM_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDM_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfBrutto.Number = (this.dfDM.Number * 100 + this.dfDM.Number * this.dfMwSt.Number).Round() / 100;
			#endregion
		}
		
		/// <summary>
		/// dfBrutto WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBrutto_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfBrutto_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfBrutto_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfDM.Number = ((this.dfBrutto.Number * 100) / (1 + this.dfMwSt.Number / 100)).Round() / 100;
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfHalterNr.IsEmpty() || this.dfHalterNr.Number == 0) 
			{
				Sal.MessageBox("Es ist keine Halter-Nr. eingetragen !", "Achtung", Sys.MB_IconStop);
			}
			// Else If (SalStrLeftX( cmbChargeReverse, 1 ) = '0' or cmbChargeReverse = '') And dfMwSt = 0
			// Call SalMessageBox('Bei 0% MwSt. muß der Grund ausgewählt sein.', 'Achtung', MB_IconStop)
			else
			{
				// 15.10.13 Ä978 + 979	04.11.14 Ä1067: auskommentiert
				// If cbReverse And dfDatum >= 2010-01-01 and dfLA = 'A' and dfMwSt = 0
				// Set nDummy = SalMessageBox( 'Liegen Versandpapiere oder eine Gelangensbestätigung vor ?', 'Versandpapiewre/Gelangensbestätigung ?', MB_YesNoCancel|MB_IconQuestion )
				// If nDummy = IDNO
				// Set dfMwSt = nMwStVoll
				// Else If nDummy = IDCANCEL
				// Return FALSE
				// Else If dfMwSt = 0 and not cbReverse and dfDM > 0
				// Set nDummy = SalMessageBox( 'Der Kunde nimmt nicht am Charge Reverse-Verfahren teil.
				// Daher darf auf die MwSt nicht verzichtet werden.
				// 
				// Möchten Sie wirklich fortfahren ?', 'Ok ?', MB_YesNo|MB_IconQuestion )
				// If nDummy = IDNO
				// Return FALSE
				// 29.03.11 Ä548
				if (this.PalCheck()) 
				{
					if (Sys.IDYES == Sal.MessageBox("Dieser Eintrag ist bereits erfasst. Dennoch übernehmen?", "Dublette", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
					{
						if (this.PalSpeichern()) 
						{
						}
					}
				}
				else
				{
					if (this.PalSpeichern()) 
					{
					}
				}
			}
			// Call SalClearField( dfHalterNr )
			// Call SalClearField(dfTAKenn)
			// Call SalSetFocus( dfHalterNr )
			#endregion
		}
		
		/// <summary>
		/// pbLeer WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLeer_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbLeer_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbLeer_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfHalterNr.IsEmpty() || this.dfHalterNr.Number == 0) 
			{
				Sal.MessageBox("Es ist keine Halter-Nr. eingetragen !", "Achtung", Sys.MB_IconStop);
			}
			// Else If (SalStrLeftX( cmbChargeReverse, 1 ) = '0' or cmbChargeReverse = '') And dfMwSt = 0
			// Call SalMessageBox('Bei 0% MwSt. muß der Grund ausgewählt sein.', 'Achtung', MB_IconStop)
			else
			{
				// 15.10.13 Ä978 + 979	04.11.14 Ä1067: auskommentiert
				// If cbReverse And dfDatum >= 2010-01-01 and dfLA = 'A' and dfMwSt = 0
				// Set nDummy = SalMessageBox( 'Handelt es sich um eine Lieferung, und zwar in eines der Länder, die am Charge Reverse-Verfahren teilnehmen (z.B.EU, Schweiz oder USA)?', 'Lieferung ?', MB_YesNoCancel|MB_IconQuestion )
				// If nDummy = IDNO
				// Set dfMwSt = nMwStVoll
				// Else If nDummy = IDCANCEL
				// Return FALSE
				// Else If dfMwSt = 0 and not cbReverse and dfDM > 0
				// Set nDummy = SalMessageBox( 'Der Kunde nimmt nicht am Charge Reverse-Verfahren teil.
				// Daher darf auf die MwSt nicht verzichtet werden.
				// 
				// Möchten Sie wirklich fortfahren ?', 'Ok ?', MB_YesNo|MB_IconQuestion )
				// If nDummy = IDNO
				// Return FALSE
				// 20.11.14 Ä548
				Var.bExists = false;
				if (this.PalCheck()) 
				{
					if (Sys.IDYES == Sal.MessageBox("Dieser Eintrag ist bereits erfasst. Dennoch übernehmen?", "Dublette", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
					{
						// If PalSpeichern()
						Var.bExists = true;
					}
				}
				else
				{
					Var.bExists = true;
				}
				if (Var.bExists) 
				{
					// 28.01.08 A194
					if (this.PalSpeichern()) 
					{
						// Set cbPapier = TRUE
						this.dfBarcode.Text = "";
						this.dfHalterNr.Clear();
						this.dfTAKenn.Clear();
						// 04.05.10 OTÄ420
						// Set dfMwSt=nMwStVoll
						this.dfMwSt.Number = Int.PalCheckAuslMwStTA(this.dfArztNr.Number);

						this.dfDatum.Value = Sys.DATETIME_Null;
						this.dfRechText.Text = "";
						this.dfDM.Number = Sys.NUMBER_Null;
						this.dfBrutto.Number = Sys.NUMBER_Null;
						this.dfLA.Text = "L";
						this.tblManAbrPosi.ResetTable();
						this.dfHalterNr.SetFocus();
					}
				}

			}
			#endregion
		}
		
		/// <summary>
		/// dfArztName WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztName_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztName_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztName_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfMwSt.Number = Var.nMwStVoll;
			this.dfPosNr.Number = 1;
			this.dfBearbDatum.DateTime = SalDateTime.Current;
			Sal.WaitCursor(true);
			tblArzt.CreateWindow(this, "frmManLE", this.dfArztName.Text);
			#endregion
		}
		
		/// <summary>
		/// pbHSuche WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHSuche_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbHSuche_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHSuche_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (!(this.dfHalterName.IsEmpty())) 
			{
				Sal.WaitCursor(true);
				tblHalter.CreateWindow(this, "frmManLE", this.dfArztNr.Number, 0, this.dfHalterName.Text, this.dfHalterVN.Text, "", "", "");
			}
			#endregion
		}
		
		/// <summary>
		/// dfSHalterMI WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSHalterMI_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfSHalterMI_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSHalterMI_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlIstDa("FROM mi WHERE minr = :frmManLE.dfSHalterMI", ref this.bOK);
			if (!(this.bOK)) 
			{
				Sal.MessageBox("Der Mahnintervall " + Int.PalStrNum(this.dfSHalterMI.Number, 3, 0) + " ist nicht vrohanden.", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.dfSHalterMI.SetFocus();
			}
			else
			{
				if (Sys.IDYES == Sal.MessageBox(@"Soll der MAHNINTERVALL
des Halters " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0) + @"
wirklich auf " + Int.PalStrNum(this.dfSHalterMI.Number, 3, 0) + " gesetzt werden ?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
				{
					Int.SqlImmed(@"UPDATE h SET hmahnint = :frmManLE.dfSHalterMI
WHERE harztnr = :frmManLE.dfArztNr AND hhalternr = :frmManLE.dfHalterNr");
					Int.PalLog("Mahnintervall auf " + Int.PalStrNum(this.dfSHalterMI.Number, 3, 0) + " gesetzt. (ManLE)");
					this.strKuerzel = App.frmMain.strUser.Left(2);
					this.mlExpress = @"***** automatischer Eintrag *****
Mahnintervall : " + Int.PalStrNum(this.dfSHalterMI.Number, 3, 0) + @"
in Programm <Leistungen erfassen> geändert.";
					// 13.05.14 F2027
					this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

					Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmManLE.dfArztNr, :frmManLE.dfHalterNr, 0,
:frmManLE.mlExpress , SYSDATE, NULL, 'J', 'HS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME");
				}
			}
			#endregion
		}
		
		/// <summary>
		/// tblManAbrPosi WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblManAbrPosi_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_KillFocus:
					this.tblManAbrPosi_OnSAM_KillFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_KillFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblManAbrPosi_OnSAM_KillFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// ----------------------------------------------UPDATEN-------------------------------------------------------------------------------
			if (this.tblManAbrPosi.AnyRows(Sys.ROW_Edited, 0)) 
			{
				this.hSqlUpdPosi.Prepare(@"
UPDATE LEP SET 	LEPLA = :tblManAbrPosi.colsLA,
		LEPDATUM = :tblManAbrPosi.coldtDatum,
		LEPRECHTEXT = :tblManAbrPosi.colsRechText,
		LEPMWST = :tblManAbrPosi.colnMwSt,
		LEPDM = :tblManAbrPosi.colnDM
WHERE LEP.ROWID = :tblManAbrPosi.colsROWID");
				this.tblManAbrPosi.DoUpdates(this.hSqlUpdPosi, true);
				Int.SqlImmedX("COMMIT");
			}
			#endregion
		}
		
		/// <summary>
		/// pbPosLösch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPosLösch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbPosLösch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbPosLösch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// ----------------------------------------------LÖSCHEN-------------------------------------------------------------------------------
			if (this.tblManAbrPosi.AnyRows(Sys.ROW_Selected, 0)) 
			{
				this.bOK = this.hSqlUpdPosi.Prepare(@"
DELETE FROM LEP
WHERE ROWID = :tblManAbrPosi.colsROWID");
				if (this.bOK) 
				{
					this.tblManAbrPosi.DeleteSelected(this.hSqlUpdPosi);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbHalterAnl WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHalterAnl_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbHalterAnl_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbHalterAnl_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.IsEmpty()) 
			{
				frmHalter.CreateWindow(this, "frmManLE", 0, 0);
			}
			else
			{
				if (this.dfHalterNr.IsEmpty()) 
				{
					frmHalter.CreateWindow(this, "frmManLE", this.dfArztNr.Number, 0);
				}
				else
				{
					frmHalter.CreateWindow(this, "frmManLE", this.dfArztNr.Number, this.dfHalterNr.Number);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// tblHZettel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHZettel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// On SAM_FetchRowDone
				
				// 18.09.02
				
				// If bPFarbe
				
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xBFFFFF )
				
				// Set bPFarbe = FALSE
				
				// Else
				
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xEFFFFF )
				
				// Set bPFarbe = TRUE
				
				case Sys.SAM_Create:
					this.tblHZettel_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblHZettel_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblHZettel, 0xbfffff);
			#endregion
		}
		
		/// <summary>
		/// tblAZettel WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAZettel_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// On SAM_FetchRowDone
				
				// 18.09.02
				
				// If bPFarbe
				
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xFFBFBF )
				
				// Set bPFarbe = FALSE
				
				// Else
				
				// Call XSalTblSetRowBackColor( hWndItem, lParam, 0xFFEFEF )
				
				// Set bPFarbe = TRUE
				
				case Sys.SAM_Create:
					this.tblAZettel_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblAZettel_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalPrepareMTbl(this.tblAZettel, 0xffbfbf);
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
			this.DestroyWindow();
			#endregion
		}
		#endregion
		
		#region tblManAbrPosi
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblManAbrPosiTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmManLE _frmManLE = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblManAbrPosiTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmManLE frmManLE
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmManLE == null) 
					{
						_frmManLE = (frmManLE)this.FindForm();
					}
					return _frmManLE;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblManAbrPosiTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblManAbrPosiTableWindow)SalWindow.FromHandle(handle, typeof(tblManAbrPosiTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblHZettel
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblHZettelTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmManLE _frmManLE = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblHZettelTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmManLE frmManLE
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmManLE == null) 
					{
						_frmManLE = (frmManLE)this.FindForm();
					}
					return _frmManLE;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblHZettelTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblHZettelTableWindow)SalWindow.FromHandle(handle, typeof(tblHZettelTableWindow)));
			}
			#endregion
		}
		#endregion
		
		#region tblAZettel
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblAZettelTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmManLE _frmManLE = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblAZettelTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmManLE frmManLE
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmManLE == null) 
					{
						_frmManLE = (frmManLE)this.FindForm();
					}
					return _frmManLE;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblAZettelTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblAZettelTableWindow)SalWindow.FromHandle(handle, typeof(tblAZettelTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
