// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;
using Dart.Ftp;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="nArztNr"></param>
	/// <param name="strBearbeiter"></param>
	/// <param name="dtBearbDatum"></param>
	public partial class frmTVSNrLw : SalFormWindow
	{
		#region Window Parameters
		public SalNumber nArztNr;
		public SalString strBearbeiter;
		public SalDateTime dtBearbDatum;
		#endregion
		
		#region Window Variables
		public SalSqlHandle hSqlTVSNr = SalSqlHandle.Null;
		public SalFileHandle hFile = SalFileHandle.Null;
		public SalString strSelect = "";
		public SalString strKennungTA = "";
		public SalNumber nFetch = 0;
		public SalNumber nArztNr2 = 0;
		public SalNumber nHalterNr = 0;
		public SalString strDateiName = "";
		public SalString strDateiPfad = "";
		public SalNumber nRest = 0;
		public SalNumber nMS = 0;
		public SalDateTime dtHErfDat = SalDateTime.Null;
		public SalString strHErfDat = "";
		public SalString strN1 = "";
		public SalString strN2 = "";
		public SalString strS = "";
		public SalString strO = "";
		public SalString strLC = "";
		public SalString strEMail = "";
		public SalNumber nStatus = 0;
		public SalString strTAN1 = "";
		public SalString strTAN2 = "";
		public SalString strTAStr = "";
		public SalString strTAOrt = "";
		public SalString strTALand = "";
		public SalBoolean bJa = false;
		public SalBoolean bOk = false;
		public SalNumber nKZPraxArt = 0;
		public SalNumber nDummy = 0;
		public SalString strLw = "";
		public SalString strOrdner = "";
		public SalString strProgOrdner = "";
		public SalString strGUID = "";
		public SalBoolean bFTPOk = false;
		public SalNumber nSichFileSize = 0;
		public SalVariant vData = new SalVariant();
		public SalString lsBody = "";
		public SalNumber nNetto = 0;
		public SalNumber nBrutto = 0;
		public Ftp axFTP = new Ftp();
        #endregion

        #region Constructors/Destructors

        /// <summary>
        /// Default Constructor.
        /// </summary>
        public frmTVSNrLw(SalNumber nArztNr, SalString strBearbeiter, SalDateTime dtBearbDatum)
		{
			// Assign global reference.
			App.frmTVSNrLw = this;
			// Window Parameters initialization.
			this.nArztNr = nArztNr;
			this.strBearbeiter = strBearbeiter;
			this.dtBearbDatum = dtBearbDatum;
			// This call is required by the Windows Form Designer.
			InitializeComponent();

            //FC:FINAL:AX_DartFtp:
            this.axFTP.Progress += AxFTP_Progress; ;
            //FC:FINAL:AX_DartFtp:
            this.axFTP.Error += AxFTP_Error; ;
        }

        private void AxFTP_Error(object sender, ErrorEventArgs e)
        {
            mlAntwort.Text = mlAntwort.Text + e.GetException().Message;
            dfSichText2.Text = e.GetException().Message;
        }

        private void AxFTP_Progress(object sender, ProgressEventArgs e)
        {
            //FC:FINAL:#65 Progress FTP-Transfer
			if (!string.IsNullOrEmpty(e.Item.Response))
				mlAntwort.Text = mlAntwort.Text + Int.PalStrReplace(e.Item.Response, "FTPPeg", "<User>") + Environment.NewLine;
            if (e.Item.Status == CopyStatus.Completed && e.Item.Action == CopyAction.Put)
            {
                this.dfSichText2.Text = "Übertragung abgeschlossen";
            }
            else if (e.Item.Status == CopyStatus.Failed)
            {
                this.dfSichText2.Text = "Fehler/" + dfSichText2.Text;
            }
            this.ccMeter.SetProgress(e.Item.Percentage);
        }
        #endregion

        #region System Methods/Properties

        /// <summary>
        /// Shows the form window.
        /// </summary>
        /// <param name="owner"></param>
        /// <returns></returns>
        public static frmTVSNrLw CreateWindow(Control owner, SalNumber nArztNr, SalString strBearbeiter, SalDateTime dtBearbDatum)
		{
			frmTVSNrLw frm = new frmTVSNrLw(nArztNr, strBearbeiter, dtBearbDatum);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmTVSNrLw FromHandle(SalWindowHandle handle)
		{
			return ((frmTVSNrLw)SalWindow.FromHandle(handle, typeof(frmTVSNrLw)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <param name="strDateiname"></param>
		/// <param name="strZielDatei"></param>
		/// <returns></returns>
		public SalBoolean PalAbrUpload(SalString strDateiname, SalString strZielDatei)
		{
			#region Local Variables
			SalBoolean bPOk = false;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				nSichFileSize = Vis.FileGetSize(strDateiname);
				if (nSichFileSize == 0) 
				{
					nSichFileSize = 1;
				}
				// Set dfSichText2 = 'Datei ' || strDateiname || ' wird auf TVN-Server hochgeladen'
				Sal.WaitCursor(true);
				axFTP.Timeout = 60000;
				// 22.12.09
				// 05.12.14 auf Passive umgestellt
				// Call axFTP.PropSetPassive( FALSE )
				//axFTP.PropSetPassive(true);
								
                try
				{
                    axFTP.CreateDirectory("/Praxisinfos/" + strGUID + "/");
                }
                catch { }
				axFTP.SetDirectory("/Praxisinfos/" + strGUID + "/");

                vData.SetString(strDateiname);
				//bPOk = axFTP.Store("/Praxisinfos/" + strGUID + "/" + strZielDatei, vData, 0, 0);
                axFTP.Put(strDateiname, "/Praxisinfos/" + strGUID + "/" + strZielDatei, Dart.Ftp.Synchronize.Off);
                Sal.WaitCursor(false);
				return true;
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmTVSNrLw WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmTVSNrLw_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_CreateComplete:
					this.frmTVSNrLw_OnSAM_CreateComplete(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmTVSNrLw_OnSAM_Destroy(sender, e);
					break;
				
				// On SAM_ReportStart
				
				// 30.04.03
				
				// If (hWndfrmReport)
				
				// Call SalBringWindowToTop(hWndfrmReport)
				
				// Call SalReportDlgOptions(SalNumberToWindowHandle(wParam),
				
				// '','Druck läuft','','')
				
				// On SAM_ReportFetchInit
				
				// Set bJa=TRUE
				
				// Return TRUE
				
				// On SAM_ReportFetchNext
				
				// If bJa=TRUE
				
				// Set bJa=FALSE
				
				// Return TRUE
				
				// Else
				
				// Return FALSE
				
				// On SAM_ReportFinish
				
				// Call SalDestroyWindow(frmTVSNrLw)
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmTVSNrLw_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 30.05.08 A232
			// Set dfLw='A'
			// Call SalMessageBox( '', 'Start', MB_Ok )
			Int.PalLogToFile("TVSNrLW 01", 0);
			this.cmbLw.SetListSelectedIndex(0);
			Int.PalLogToFile("TVSNrLW 02", 0);
			// 26.01.09 OTF175 Schriftverkehr- statt Praxisadresse
			Int.SqlImmedSel(@"SELECT asvname1, asvname2, asvstr, asvort, asvland, ANR2, aemailtvs, akzpraxart
INTO :frmTVSNrLw.strTAN1, :frmTVSNrLw.strTAN2, :frmTVSNrLw.strTAStr, :frmTVSNrLw.strTAOrt, :frmTVSNrLw.strTALand, :frmTVSNrLw.nArztNr2, :frmTVSNrLw.strEMail, :frmTVSNrLw.nKZPraxArt
FROM A
WHERE AARZTNR = :frmTVSNrLw.nArztNr");
			Int.PalLogToFile("TVSNrLW 03", 0);
			if (this.strEMail != "") 
			{
				// Call SalDisableWindowAndLabel(dfLw)
				// Call SalSetWindowText( pbErstellen, 'E-Mail absenden')
				this.dfEMail.Text = this.strEMail;
				// 30.05.08 A232
				this.rbEMail.Checked = true;
			}
			else
			{
				// 30.05.08 A232
				// Call SalDisableWindowAndLabel(dfEMail)
				this.rbLw.Checked = true;
			}
			Int.PalLogToFile("TVSNrLW 04", 0);
			if (this.nArztNr2 == 0) 
			{
				this.nArztNr2 = this.nArztNr;
			}
			Int.PalLogToFile("TVSNrLW 05", 0);
			// 20.11.07 F304
			if (this.nKZPraxArt == 2) 
			{
				this.nDummy = this.nArztNr2;
				this.nArztNr2 = this.nArztNr;
				this.nArztNr = this.nDummy;
			}
			Int.PalLogToFile("TVSNrLW 06", 0);
			// 8.12.10
			// 06.05.14 F2003
			// If Not Email.EmailIsConnected()
			// If Not Email.EmailConnect('','','', EMAIL_SYS_MSMAIL)
			// Set rbLw = TRUE
			// Call SalDisableWindowAndLabel( rbEMail )
			Int.PalLogToFile("Start", 0);
			// Call SalMessageBox( '', 'MailInit', MB_Ok )
			if (!(Int.PalMailInit())) 
			{
				this.rbLw.Checked = true;
				Sal.DisableWindowAndLabel(this.rbEMail);
			}
			else
			{
				Int.PalMailClose();
			}
			Int.PalLogToFile("TVSNrLW 07", 0);
			// 15.12.10 OTÄ519
			this.strGUID = "";
			Int.SqlImmedSel("SELECT leguid INTO :frmTVSNrLw.strGUID FROM le WHERE learztnr IN (:frmTVSNrLw.nArztNr, :frmTVSNrLw.nArztNr2) AND lebearbeiter=:frmTVSNrLw.strBearbeiter AND lebearbdatum=:frmTVSNrLw.dtBearbDatum");
			if (this.strGUID == "" || this.strGUID.Left(3) == "   ") 
			{
				Sal.DisableWindowAndLabel(this.rbInternet);
			}
			else
			{
				this.rbInternet.Checked = true;
			}
			Int.PalLogToFile("TVSNrLW 08", 0);

			this.dfArztNr.Number = this.nArztNr;
			Int.SqlConnection(ref this.hSqlTVSNr);
			Int.PalLogToFile("TVSNrLW 09", 0);
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmTVSNrLw_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlTVSNr.Disconnect();
			// 08.12.10
			// If Email.EmailIsConnected()
			// Call Email.EmailDisconnect()
			#endregion
		}
		
		/// <summary>
		/// pbErstellen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbErstellen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbErstellen_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbErstellen_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.rbEMail.Checked && this.dfEMail.Text == "") 
			{
				Sal.MessageBox("Es ist keine E-Mail-Adresse angegeben.", "Bitte anderen Übertragungsweg auswählen", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				this.SetStatusBarText("Erstelle TVS-Nr.-Datei");
				// 17.11.10
				this.strOrdner = Vis.DosGetEnvString("TEMP") + "\\";

				this.strSelect = @"SELECT lehalternr,lekennungta, leherfdat,  hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
INTO :frmTVSNrLw.nHalterNr,:frmTVSNrLw.strKennungTA,
:frmTVSNrLw.dtHErfDat, :frmTVSNrLw.strN1, :frmTVSNrLw.strN2,
:frmTVSNrLw.strS, :frmTVSNrLw.strO, :frmTVSNrLw.strLC
FROM le, h WHERE learztnr IN (:frmTVSNrLw.nArztNr, :frmTVSNrLw.nArztNr2)
AND lebearbeiter=:frmTVSNrLw.strBearbeiter
AND lebearbdatum=:frmTVSNrLw.dtBearbDatum
AND learztnr=harztnr AND lehalternr=hhalternr AND hdeaktiv IS NULL ";
				// Set bOK = SalFileOpen(hFile, dfLw || ':\TVSNR',OF_Create|OF_Write)
				// Set bOK = SalFileOpen(hFile,  'C:\\ABR\\tvsnr.',OF_Create|OF_Write)
				Var.bOK = this.hFile.Open(this.strOrdner + "tvsnr.", (Sys.OF_Create | Sys.OF_Write));
				if (Var.bOK) 
				{
					Sal.WaitCursor(true);
					Int.SqlHandleExec(this.hSqlTVSNr, this.strSelect, "TVS-Nr. erstellen", ref Var.nErr);
					this.nFetch = this.hSqlTVSNr.FetchNext();
					while (this.nFetch != Sys.FETCH_EOF) 
					{
						this.strKennungTA = this.strKennungTA + "          ";
						this.strKennungTA = Int.PalWinToDos(this.strKennungTA);
						if (this.strKennungTA.Length > 8) 
						{
							this.strKennungTA = this.strKennungTA.Left(8);
						}
						this.strHErfDat = this.dtHErfDat.ToString();
						// 04.05.11 F912
						// Call SalFilePutStr(hFile,strKennungTA || PalStrNum(nHalterNr,5,0)
						// || PalLF(strN1,30) || PalLF(strN2, 30) || PalLF(strS,30) || PalLF(strO,30)
						// || strHErfDat)
						this.hFile.PutString(this.strKennungTA + Int.PalStrNum(this.nHalterNr, 5, 0) + Int.PalLF("", 30) + Int.PalLF("", 30) + Int.PalLF("", 30) + Int.PalLF("", 30) + this.strHErfDat);

						this.nFetch = this.hSqlTVSNr.FetchNext();
					}
					this.hSqlTVSNr.Commit();
					this.hFile.Close();
					// 05.07.10
					Sal.FileCopy(this.strOrdner + "TVSNR.", this.strOrdner + "TVSNR.TVN", true);
					Sal.FileCopy(this.strOrdner + "TVSNR.", this.strOrdner + "TVSNR" + Int.PalNullen(this.nArztNr, 4) + ".TVN", true);

					Sal.WaitCursor(false);
				}
				else
				{
					Sal.MessageBox("Datei kann nicht erstellt werden !", "Fehler !!", (Sys.MB_Ok | Sys.MB_IconAsterisk));
				}
				this.SetStatusBarText("Erstelle OP-Datei");
				this.strSelect = @"SELECT  rkhalternr, herfdat,
sum(rkdmleis+rkdmarzn+rkdmmahn+rkmbdmopl+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkmbzaopl-rkzazins), max(rkmahnstufe)
INTO :frmTVSNrLw.nHalterNr,  :frmTVSNrLw.dtHErfDat, :frmTVSNrLw.nRest, :frmTVSNrLw.nMS
FROM rk, h
WHERE rkarztnr IN (:frmTVSNrLw.nArztNr,:frmTVSNrLw.nArztNr2 )
AND rkkzzahl<2 AND rkdeaktiv IS NULL AND hdeaktiv IS NULL
AND rkarztnr=harztnr AND rkhalternr=hhalternr
GROUP BY 1,2";
				// Set bOK = SalFileOpen(hFile, dfLw || ':\OP' || PalNullen( nArztNr, 4) || '.TVN' ,OF_Create|OF_Write)
				Var.bOK = this.hFile.Open(this.strOrdner + "op" + Int.PalNullen(this.nArztNr, 4) + ".TVN", (Sys.OF_Create | Sys.OF_Write));
				if (Var.bOK) 
				{
					Sal.WaitCursor(true);
					Int.SqlHandleExec(this.hSqlTVSNr, this.strSelect, "OP-Disk erstellen", ref Var.nErr);
					this.nFetch = this.hSqlTVSNr.FetchNext();
					while (this.nFetch != Sys.FETCH_EOF) 
					{
						this.strHErfDat = this.dtHErfDat.ToString();
						this.hFile.PutString(Int.PalNullen(this.nHalterNr, 5) + " " + Int.PalStrNumDecPoint(this.nRest, 10, 2) + " " + Int.PalStrNumDecPoint(this.nMS, 2, 0));
						this.nFetch = this.hSqlTVSNr.FetchNext();
					}
					this.hSqlTVSNr.Commit();
					this.hFile.Close();
					Sal.WaitCursor(false);
				}
				else
				{
					Sal.MessageBox("Datei kann nicht erstellt werden !", "Fehler !!", (Sys.MB_Ok | Sys.MB_IconAsterisk));
				}
				// If rbEMail
				// Call SalWaitCursor(TRUE)
				// Call mail.SetSMTPServer('10.0.0.50')
				// Call mail.SetFrom('rechnung@moveta.de')
				// Call mail.SetTo(dfEMail)
				// Call mail.SetCC('')
				// Call mail.SetBCC('rechnung@moveta.de')
				// Call mail.SetSubject('WICHTIG: SOFORT in Pegasus einlesen: TVS-Nummern und Offene Posten')
				// Call mail.SetData('Sehr geehrtes Mitglied,
				// 
				// Ihre Abrechnung wurde soeben bearbeitet.
				// 
				// Wenn Sie Pegasus ab Version 3.01.02-08 verwenden (Datei hat rotes Pegasus-Symbol), doppelklicken Sie nacheinander auf tvsnr.tvn und OP' || PalNullen( nArztNr, 4) || '.tvn und dann auf "Einlesen".
				// 
				// Für ältere Versionen gehen Sie wie folgt vor:
				// Beigefügte Anlagen speichern Sie bitte in einem beliebigen Ordner und lesen Sie diese wie folgt ein:
				// 
				// Pegasus 2: 	"Datenaustausch / Datei einlesen"
				// Pegasus 3:	"Im-/Export / Datei"
				// 
				// Dies ist SEHR wichtig, um einen reibungslosen Abrechnungsablauf zu gewährleisten.
				// 
				// 
				// Bitte halten Sie Ihr Pegasus-Programm auf dem laufenden Stand. Unter www.moveta.de finden Sie die Downloads, um Pegasus zu aktualisieren.
				// 
				// Hinweis: Bitte achten Sie darauf, uns neben Ihren Abrechnungen den Abrechnungsauftrag zu faxen.
				// 
				// Vielen Dank für Ihre Mithilfe  !
				// 
				// 
				// Mit freundlichen Grüßen,
				// 
				// ' || strBNName || '
				// tvn-Tierärztliche Verrechnungsstelle Niedersachsen r. V.k.V.
				// 
				// Danziger Straße 1
				// 31008 Elze
				// Telefon (0 50 68) 93 07-' || strBNTel || '
				// Telefax (0 50 68) 93 07-80
				// E-mail ' || strBNEMail || '
				// Web www.moveta.de
				// 
				// Sparkasse Hildesheim
				// BLZ 259 501 30
				// Konto 7006 573')
				// Call mail.SetDataHtml('')
				// Call mail.AddAttachement(strOrdner || 'tvsnr.')
				// Call mail.AddAttachement(strOrdner || 'tvsnr.tvn')
				// Call mail.AddAttachement(strOrdner || 'op' || PalNullen( nArztNr, 4) || '.TVN')
				// Call SalWaitCursor(FALSE)
				// Set bOk = mail.Send()
				// If bOk
				// Call SalMessageBox('E-Mail erfolgreich versandt.', 'Senden: Ok', MB_IconExclamation | MB_Ok)
				// Else
				// Set strEMail = ''
				// Call SalMessageBox( 'E-Mail-Sendefehler: ' || SalNumberToStrX(mail.i_nLastError, 0), 'Sendefehler', MB_IconExclamation | MB_Ok)
				// 15.12.10 OTÄ519
				if (this.rbInternet.Checked) 
				{
					//this.bFTPOk = this.axFTP.Login("ftp.tvn-elze.de", "FTPPeg", "ftp", "", 21);
                    this.axFTP.Connect("ftp.tvn-elze.de");
                    this.axFTP.Authenticate("FTPPeg", "ftp");
                    //FC:FINAL:#44 setze bPFTPOk auf den Wert, ob die Verbindung zum Server erfolgreich war
                    this.bFTPOk = this.axFTP.Connected;
                    if (!(bFTPOk)) 
					{
						if (Sys.IDOK == Sal.MessageBox(@"Es konnte keine Verbindung zum moveta-Server hergestellt werden.

Bitte überprüfen Sie Ihre Internet-Verbindung.", "Problem", (Sys.MB_Ok | Sys.MB_IconAsterisk))) 
						{
						}
						this.rbLw.Checked = true;
					}
					else
					{
						if (!(this.PalAbrUpload(this.strOrdner + "op" + Int.PalNullen(this.nArztNr, 4) + ".TVN", "op" + Int.PalNullen(this.nArztNr, 4) + ".TVN"))) 
						{
							this.rbLw.Checked = true;
						}
						else
						{
							// Call SalMessageBox('Die Datei ' || dfDateiName || ' wurde erfolgreich zur TVN hochgeladen.','',MB_Ok)
							if (!(this.PalAbrUpload(this.strOrdner + "TVSNR" + Int.PalNullen(this.nArztNr, 4) + ".TVN", "TVSNR" + Int.PalNullen(this.nArztNr, 4) + Int.PalDateToStrJJJJMMTThhmmsst(SalDateTime.Current) + ".TVN"))) 
							{
								this.rbLw.Checked = true;
							}
							else
							{
								if (this.dfEMail.Text != "") 
								{
									// 06.05.14 F2003
									// If Email.EmailSendMessage(FALSE,'Ihre Abrechnung',
									// 'Sehr geehrtes Mitglied,
									// 
									// Ihre Abrechnung wurde soeben bearbeitet.
									// 
									// Informationen (Offene Posten und Kundennummern) zu Ihren Haltern werden automatisch stündlich über Internet in Pegasus eingelesen.
									// Falls Ihre Firewall nach der Erlaubnis fragt, genehmigen Sie dies bitte.
									// 
									// Mit freundlichen Grüßen,
									// 
									// ' || strBNName || '
									// tvn-Tierärztliche Verrechnungsstelle Niedersachsen r. V.k.V.
									// 
									// Danziger Straße 1
									// 31008 Elze
									// Telefon (0 50 68) 93 07-' || strBNTel || '
									// Telefax (0 50 68) 93 07-80
									// E-mail ' || strBNEMail || '
									// Web www.moveta.de
									// 
									// Sparkasse Hildesheim
									// BLZ 259 501 30
									// Konto 7006 573',dfEMail,'','',
									// '',0,0)
									// Call SalMessageBox( 'Die E-Mail wurde erfolgreich in den "Outlook"-Ausgangskorb gelegt.
									// 
									// Um die E-Mail zu versenden, muß Outlook geöffnet sein.','Ok',
									// MB_Ok|MB_IconAsterisk )
									// Call SqlImmed('UPDATE le SET lestatus=\'TVSNr\'
									// WHERE learztnr IN (:frmTVSNrLw.nArztNr, :frmTVSNrLw.nArztNr2)
									// AND lebearbeiter=:frmTVSNrLw.strBearbeiter
									// AND lebearbdatum=:frmTVSNrLw.dtBearbDatum ')
									// 08.12.10
									// Call SalDestroyWindow(frmTVSNrLw)
									// Call SalPostMsg( hWndForm, SAM_Close, 0, 0 )
									Sal.WaitCursor(true);
									// 03.08.16 Ä1378
									// Call SqlImmedSel(' SELECT sum(lepdm), sum(@round(lepdm*(100+lepmwst)/100,2))
									// INTO :frmTVSNrLw.nNetto, :frmTVSNrLw.nBrutto
									// FROM lep
									// WHERE leparztnr IN (:frmTVSNrLw.nArztNr, :frmTVSNrLw.nArztNr2)
									// AND lepbearbeiter=:frmTVSNrLw.strBearbeiter
									// AND lebearbdatum=:frmTVSNrLw.dtBearbDatum')

									Int.PalMailInit();
									// Set lsBody = 'Sehr geehrtes Mitglied,
									// 
									// Ihre Abrechnung mit € ' || SalNumberToStrX( nNetto, 2 ) || ' netto und € ' || SalNumberToStrX( nBrutto, 2 ) || ' brutto wurde soeben bearbeitet.
									// Vielen Dank für Ihr Vertrauen.
									// 
									// Informationen (Offene Posten und Kundennummern) zu Ihren Haltern werden automatisch stündlich über Internet in Pegasus eingelesen.
									// Falls Ihre Firewall nach der Erlaubnis fragt, genehmigen Sie dies bitte.
									// 
									// Mit freundlichen Grüßen,
									// 
									// ' || strBNName || '
									// tvn-Tierärztliche Verrechnungsstelle Niedersachsen r. V.k.V.
									// 
									// Danziger Straße 1
									// 31008 Elze
									// Telefon (0 50 68) 93 07-' || strBNTel || '
									// Telefax (0 50 68) 93 07-80
									// E-mail ' || strBNEMail || '
									// Web www.moveta.de
									// 
									// Sparkasse Hildesheim
									// BLZ 259 501 30
									// Konto 7006 573'
									this.lsBody = @"Sehr geehrtes Mitglied,

Ihre Abrechnung wurde soeben bearbeitet.
Vielen Dank für Ihr Vertrauen.

Informationen (Offene Posten und Kundennummern) zu Ihren Haltern werden automatisch stündlich über Internet in Pegasus eingelesen.
Falls Ihre Firewall nach der Erlaubnis fragt, genehmigen Sie dies bitte.

Mit freundlichen Grüßen,

" + Var.strBNName + @"
moveta r.V.k.V.

Danziger Straße 1
31008 Elze
Telefon (0 50 68) 93 07-" + Var.strBNTel + @"
Telefax (0 50 68) 93 07-80
E-mail " + Var.strBNEMail + @"
Web www.moveta.de

Sparkasse Hildesheim · IBAN: DE13 2595 0130 0007 0065 73 · BIC: NOLADE21HIK";
									Int.PalLogToFile("OSendMail", 0);
									// 29.07.14 F2003 'noreply@tvn-online.de' -> strBNEmail
									// 30.10.20 Ä1911
									// If 0 = oOutgoingMail.SendMail( MAIL_FORMAT_PLAIN_TEXT, 'Ihre Abrechnung', strBNEMail, dfEMail, STRING_Null, lsBody, STRING_Null, FALSE, MAIL_PRIORITY_NORMAL )
									// Set lsBody = 'E-Mail an ' || dfEMail || '
									// ' || lsBody
									// Call SqlImmed( 'INSERT INTO z (zarztnr, zhalternr, zart, zvon, zan, zbemerk,zdatum, zerledigt) VALUES( :frmTVSNrLw.nArztNr, 0, \'BR\', :strBNZei, \'*\', :frmTVSNrLw.lsBody, SYSDATE, \'J\')'  )
									// Call SqlImmed('UPDATE le SET lestatus=\'TVSNr\'
									// WHERE learztnr IN (:frmTVSNrLw.nArztNr, :frmTVSNrLw.nArztNr2)
									// AND lebearbeiter=:frmTVSNrLw.strBearbeiter
									// AND lebearbdatum=:frmTVSNrLw.dtBearbDatum ')
									// Call SalWaitCursor( FALSE )
									// Call SalMessageBox('Die E-Mail wurde erfolgreich versandt.', 'Ok',MB_Ok)
									if (0 == Int.SendeMail(Const.MAIL_FORMAT_PLAIN_TEXT, "Ihre Abrechnung", Var.strBNEMail, this.dfEMail.Text, this.lsBody, SalString.Null, Const.MAIL_PRIORITY_NORMAL, ref Var.strDummy, "", Var.strBNName))
									{
									}
									else
									{
										Sal.WaitCursor(false);
										Sal.MessageBox("Die E-Mail konnte nicht versandt werden.", "Fehler: " + Var.strDummy, Sys.MB_Ok);
									}
									Int.PalMailClose();
								}
								// 27.11.20
								Int.SqlImmed(@"UPDATE le SET lestatus='TVSNr'
WHERE learztnr IN (:frmTVSNrLw.nArztNr, :frmTVSNrLw.nArztNr2)
AND lebearbeiter=:frmTVSNrLw.strBearbeiter
AND lebearbdatum=:frmTVSNrLw.dtBearbDatum ");
								// Call SalDestroyWindow( hWndForm )
								Sal.MessageBox("Die E-Mail wurde erfolgreich versandt.", "E-Mail-Versand", (Sys.MB_Ok | Sys.MB_IconAsterisk));
							}
						}
						this.axFTP.Close();
					}
				}
				if (this.rbEMail.Checked) 
				{
					// 17.11.10
					this.bOk = Sal.FileGetCurrentDirectory(ref this.strProgOrdner);
					this.bOk = Sal.FileSetCurrentDirectory(this.strOrdner);
					// 13.02.07 Ä82 Signatur	11.04.07 Ä87 Signatur erweitert
					// 06.05.14 F2003
					Sal.WaitCursor(true);
					Int.PalMailInit();
					// 16.02.16 Ä1349
					// Set lsBody = 'Sehr geehrtes Mitglied,
					// 
					// Ihre Abrechnung wurde soeben bearbeitet.
					// 
					// Wenn Sie Pegasus ab Version 3.01.02-08 verwenden (Datei hat rotes Pegasus-Symbol), doppelklicken Sie nacheinander auf tvsnr.tvn und OP' || PalNullen( nArztNr, 4) || '.tvn und dann auf "Einlesen".
					// 
					// Für ältere Versionen gehen Sie wie folgt vor:
					// Beigefügte Anlagen speichern Sie bitte in einem beliebigen Ordner und lesen Sie diese wie folgt ein:
					// 
					// Pegasus 2: 	"Datenaustausch / Datei einlesen"
					// Pegasus 3:	"Im-/Export / Datei"
					// 
					// Dies ist SEHR wichtig, um einen reibungslosen Abrechnungsablauf zu gewährleisten.
					// 
					// 
					// Bitte halten Sie Ihr Pegasus-Programm auf dem laufenden Stand. Unter www.moveta.de finden Sie die Downloads, um Pegasus zu aktualisieren.
					// 
					// Hinweis: Bitte achten Sie darauf, uns neben Ihren Abrechnungen den Abrechnungsauftrag zu faxen.
					// 
					// Vielen Dank für Ihre Mithilfe  !
					// 
					// 
					// Mit freundlichen Grüßen,
					// 
					// ' || strBNName || '
					// tvn-Tierärztliche Verrechnungsstelle Niedersachsen r. V.k.V.
					// 
					// Danziger Straße 1
					// 31008 Elze
					// Telefon (0 50 68) 93 07-' || strBNTel || '
					// Telefax (0 50 68) 93 07-80
					// E-mail ' || strBNEMail || '
					// Web www.moveta.de
					// 
					// Sparkasse Hildesheim
					// BLZ 259 501 30
					// Konto 7006 573'
					this.lsBody = @"Sehr geehrtes Mitglied,

Ihre Abrechnung wurde soeben bearbeitet.

Doppelklicken Sie bitte nacheinander auf tvsnr.tvn und OP" + Int.PalNullen(this.nArztNr, 4) + @".tvn und dann auf ""Einlesen"".
ALTERNATIV können Sie die angefügten Anlagen in einem beliebigen Ordner speichern und diese im Menü ""Im-/Export"" / ""Datei"" einlesen.

Dies ist SEHR wichtig, um einen reibungslosen Abrechnungsablauf zu gewährleisten.

Bitte halten Sie Ihr Pegasus-Programm auf dem laufenden Stand. Unter www.moveta.de finden Sie die Downloads, um Pegasus zu aktualisieren.
Hinweis: Bitte achten Sie darauf, uns neben Ihren Abrechnungen den Abrechnungsauftrag zu faxen.

Vielen Dank für Ihre Mithilfe  !

Mit freundlichen Grüßen,

" + Var.strBNName + @"
moveta r.V.k.V.

Danziger Straße 1
31008 Elze
Telefon (0 50 68) 93 07-" + Var.strBNTel + @"
Telefax (0 50 68) 93 07-80
E-mail " + Var.strBNEMail + @"
Web www.moveta.de

Sparkasse Hildesheim · IBAN: DE13 2595 0130 0007 0065 73 · BIC: NOLADE21HIK";
					// 16.02.16 Ä1349 "tvsnr;" raus
					Int.PalLogToFile("OSendMail", 0);
					// 29.07.14 F2003 'noreply@tvn-online.de' -> strBNEmail
					// 30.10.20 Ä1911
					// If 0 = oOutgoingMail.SendMail( MAIL_FORMAT_PLAIN_TEXT, 'WICHTIG: SOFORT in Pegasus einlesen: TVS-Nummern und Offene Posten', strBNEMail, dfEMail, STRING_Null, lsBody, 'tvsnr.tvn;op' || PalNullen( nArztNr, 4) || '.tvn',
					// FALSE, MAIL_PRIORITY_NORMAL )
					// Set lsBody = 'E-Mail an ' || dfEMail || '
					// ' || lsBody
					// Call SqlImmed( 'INSERT INTO z (zarztnr, zhalternr, zart, zvon, zan, zbemerk,zdatum, zerledigt) VALUES( :frmTVSNrLw.nArztNr, 0, \'BR\', :strBNZei, \'*\', :frmTVSNrLw.lsBody, SYSDATE, \'J\')'  )
					// Call SqlImmed('UPDATE le SET lestatus=\'TVSNr\'
					// WHERE learztnr IN (:frmTVSNrLw.nArztNr, :frmTVSNrLw.nArztNr2)
					// AND lebearbeiter=:frmTVSNrLw.strBearbeiter
					// AND lebearbdatum=:frmTVSNrLw.dtBearbDatum ')
					// 08.12.10
					// Call SalDestroyWindow(frmTVSNrLw)
					// Call SalWaitCursor( FALSE )
					// Call SalMessageBox('Die E-Mail wurde erfolgreich versandt.', 'Ok',MB_Ok)
					// Call SalPostMsg( hWndForm, SAM_Close, 0, 0 )
					if (0 == Int.SendeMail(Const.MAIL_FORMAT_PLAIN_TEXT, "WICHTIG: SOFORT in Pegasus einlesen: TVS-Nummern und Offene Posten", Var.strBNEMail, this.dfEMail.Text, this.lsBody, "tvsnr.tvn;op" + Int.PalNullen(this.nArztNr, 4) + ".tvn", Const.MAIL_PRIORITY_NORMAL, ref Var.strDummy, "", Var.strBNName))
					{
						// 27.11.20
						Int.SqlImmed(@"UPDATE le SET lestatus='TVSNr'
WHERE learztnr IN (:frmTVSNrLw.nArztNr, :frmTVSNrLw.nArztNr2)
AND lebearbeiter=:frmTVSNrLw.strBearbeiter
AND lebearbdatum=:frmTVSNrLw.dtBearbDatum ");
						Int.PalMailClose();

						Sal.FileSetCurrentDirectory(this.strProgOrdner);
						// 17.11.10
						// Call SalDestroyWindow( hWndForm )
						Sal.MessageBox("Die E-Mail wurde erfolgreich versandt.", "E-Mail-Versand", (Sys.MB_Ok | Sys.MB_IconAsterisk));
					}
					else
					{
						Sal.WaitCursor(false);
						Sal.MessageBox("Die E-Mail konnte nicht versandt werden.", "Fehler: " + Var.strDummy, Sys.MB_Ok);
					}
					// If Email.EmailSendMessage(FALSE,'WICHTIG: SOFORT in Pegasus einlesen: TVS-Nummern und Offene Posten',
					// 'Sehr geehrtes Mitglied,
					// 
					// Ihre Abrechnung wurde soeben bearbeitet.
					// 
					// Wenn Sie Pegasus ab Version 3.01.02-08 verwenden (Datei hat rotes Pegasus-Symbol), doppelklicken Sie nacheinander auf tvsnr.tvn und OP' || PalNullen( nArztNr, 4) || '.tvn und dann auf "Einlesen".
					// 
					// Für ältere Versionen gehen Sie wie folgt vor:
					// Beigefügte Anlagen speichern Sie bitte in einem beliebigen Ordner und lesen Sie diese wie folgt ein:
					// 
					// Pegasus 2: 	"Datenaustausch / Datei einlesen"
					// Pegasus 3:	"Im-/Export / Datei"
					// 
					// Dies ist SEHR wichtig, um einen reibungslosen Abrechnungsablauf zu gewährleisten.
					// 
					// 
					// Bitte halten Sie Ihr Pegasus-Programm auf dem laufenden Stand. Unter www.moveta.de finden Sie die Downloads, um Pegasus zu aktualisieren.
					// 
					// Hinweis: Bitte achten Sie darauf, uns neben Ihren Abrechnungen den Abrechnungsauftrag zu faxen.
					// 
					// Vielen Dank für Ihre Mithilfe  !
					// 
					// 
					// Mit freundlichen Grüßen,
					// 
					// ' || strBNName || '
					// tvn-Tierärztliche Verrechnungsstelle Niedersachsen r. V.k.V.
					// 
					// Danziger Straße 1
					// 31008 Elze
					// Telefon (0 50 68) 93 07-' || strBNTel || '
					// Telefax (0 50 68) 93 07-80
					// E-mail ' || strBNEMail || '
					// Web www.moveta.de
					// 
					// Sparkasse Hildesheim
					// BLZ 259 501 30
					// Konto 7006 573',dfEMail,'','',
					// 'tvsnr;tvsnr.tvn;op' || PalNullen( nArztNr, 4) || '.tvn',0,0)
					// Call SalMessageBox( 'Die E-Mail wurde erfolgreich in den "Outlook"-Ausgangskorb gelegt.
					// 
					// Um die E-Mail zu versenden, muß Outlook geöffnet sein.','Ok',
					// MB_Ok|MB_IconAsterisk )
					// Call SqlImmed('UPDATE le SET lestatus=\'TVSNr\'
					// WHERE learztnr IN (:frmTVSNrLw.nArztNr, :frmTVSNrLw.nArztNr2)
					// AND lebearbeiter=:frmTVSNrLw.strBearbeiter
					// AND lebearbdatum=:frmTVSNrLw.dtBearbDatum ')
					// 08.12.10
					// Call SalDestroyWindow(frmTVSNrLw)
					// Call SalPostMsg( hWndForm, SAM_Close, 0, 0 )
					// Else
					// Call SalMessageBox( 'Die E-Mail konnte NICHT erstellt werden ! ! !','Fehler',
					// MB_Ok|MB_IconAsterisk )
					// Set rbLw = TRUE
				}
				else if (this.rbLw.Checked || this.rbAust.Checked) 
				{
					// 03.08.17
					if (this.rbAust.Checked) 
					{
						this.strLw = Const.PATH_DATENAUSTUSCH;
					}
					else
					{
						// 30.05.08 A232 dfLw || ':\ -> cmbLw
						this.strLw = this.cmbLw.GetSelectedDrive();
					}
					// 16.02.16 Ä1349 tvsnr -> tvsnr.tvn
					this.nStatus = Sal.FileCopy(this.strOrdner + "tvsnr", this.strLw + "tvsnr.tvn", true);
					if (this.nStatus == Sys.FILE_CopyDest) 
					{
						Sal.MessageBox("Fehler", @"Fehler beim Erstellen
der Zieldatei", Sys.MB_IconStop);
					}
					else if (this.nStatus == Sys.FILE_CopyRead) 
					{
						Sal.MessageBox("Fehler", @"Fehler beim Lesen
der Diskette", Sys.MB_IconStop);
					}
					else if (this.nStatus == Sys.FILE_CopySrc) 
					{
						Sal.MessageBox("Fehler", @"Fehler beim Erkennen
der Diskette", Sys.MB_IconStop);
					}
					else if (this.nStatus == Sys.FILE_CopyWrite) 
					{
						Sal.MessageBox("Fehler", @"Fehler beim Schreiben
der Zieldatei", Sys.MB_IconStop);
					}
					if (this.nStatus != Sys.FILE_CopyOK) 
					{
						Sal.MessageBox("Diskette kann nicht erstellt werden !", "Fehler !!", (Sys.MB_Ok | Sys.MB_IconAsterisk));
					}
					else
					{
						Int.SqlImmed(@"UPDATE le SET lestatus='TVSNr'
WHERE learztnr IN (:frmTVSNrLw.nArztNr, :frmTVSNrLw.nArztNr2)
AND lebearbeiter=:frmTVSNrLw.strBearbeiter
AND lebearbdatum=:frmTVSNrLw.dtBearbDatum ");
						// 05.07.10
						// 16.02.16 Ä1349 raus
						// Set nStatus = SalFileCopy( strOrdner || 'tvsnr' , strLw || 'tvsnr.tvn', TRUE)
					}
					// 30.05.08 A232 dfLw || ':\ -> cmbLw
					this.nStatus = Sal.FileCopy(this.strOrdner + "op" + Int.PalNullen(this.nArztNr, 4) + ".tvn", this.strLw + "op" + Int.PalNullen(this.nArztNr, 4) + ".tvn", true);
					if (this.nStatus == Sys.FILE_CopyDest) 
					{
						Sal.MessageBox("Fehler", @"Fehler beim Erstellen
der Zieldatei", Sys.MB_IconStop);
					}
					else if (this.nStatus == Sys.FILE_CopyRead) 
					{
						Sal.MessageBox("Fehler", @"Fehler beim Lesen
der Diskette", Sys.MB_IconStop);
					}
					else if (this.nStatus == Sys.FILE_CopySrc) 
					{
						Sal.MessageBox("Fehler", @"Fehler beim Erkennen
der Diskette", Sys.MB_IconStop);
					}
					else if (this.nStatus == Sys.FILE_CopyWrite) 
					{
						Sal.MessageBox("Fehler", @"Fehler beim Schreiben
der Zieldatei", Sys.MB_IconStop);
					}
					if (this.nStatus != Sys.FILE_CopyOK) 
					{
						Sal.MessageBox("Diskette kann nicht erstellt werden !", "Fehler !!", (Sys.MB_Ok | Sys.MB_IconAsterisk));
					}
					else
					{
						Int.SqlImmed(@"UPDATE le SET lestatus='TVSNr'
WHERE learztnr IN (:frmTVSNrLw.nArztNr, :frmTVSNrLw.nArztNr2)
AND lebearbeiter=:frmTVSNrLw.strBearbeiter
AND lebearbdatum=:frmTVSNrLw.dtBearbDatum ");
						// Set nErr = 1
						// Call PalReport(frmTVSNrLw, 'TVSNR.QRP',
						// ':frmTVSNrLw.nArztNr,:frmTVSNrLw.strTAN1, :frmTVSNrLw.strTAN2,:frmTVSNrLw.strTAStr,:frmTVSNrLw.strTAOrt',
						// 'ArztNr, AName1, AName2, AStr, AOrt', nErr)
						// LL
						dlgLlDruck.ModalDialog(App.frmMain, "Brief TVSNr-Diskette.crd", "");
						this.DestroyWindow();
					}
				}
			}
			// 14.03.19 Ä1829
			// Call frmDiskAbr.PalHoleTabelle(  )

			#endregion
		}
		
		/// <summary>
		/// dfSichText2 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSichText2_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.dfSichText2_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfSichText2_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			e.Return = Int.XSalTooltipSetTextActive(this.dfSichText2, this.dfSichText2.Text);
			return;
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
			this.DestroyWindow();
			#endregion
		}
		#endregion
	}
}
