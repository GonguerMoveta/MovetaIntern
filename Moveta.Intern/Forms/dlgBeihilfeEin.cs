// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class dlgBeihilfeEin : SalDialogBox
	{
		#region Window Variables
		public SalNumber nErr = 0;
		public SalBoolean bOk = false;
		public SalString strLine = "";
		public SalString strDateiName = "";
		public SalString strDateiPfad = "";
		public SalDateTime dtDatei = SalDateTime.Null;
		public SalDateTime dtDisk = SalDateTime.Null;
		public SalFileHandle hDisk = SalFileHandle.Null;
		public SalFileHandle hFile = SalFileHandle.Null;
		public SalNumber nCount = 0;
		public SalNumber nCount2 = 0;
		public SalNumber nStatus = 0;
		public SalString strDatum = "";
		public SalString strGUID = "";
		public SalString strRegA = "";
		public SalString strRegH = "";
		public SalString strName = "";
		public SalDateTime dtDatum = SalDateTime.Null;
		public SalNumber nAnzahl = 0;
		public SalNumber nBetrag = 0;
		public SalDateTime dtErfDat = SalDateTime.Null;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public dlgBeihilfeEin()
		{
			// Assign global reference.
			App.dlgBeihilfeEin = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the modal dialog.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static SalNumber ModalDialog(Control owner)
		{
			dlgBeihilfeEin dlg = new dlgBeihilfeEin();
			SalNumber ret = dlg.ShowDialog(owner);
			return ret;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static dlgBeihilfeEin FromHandle(SalWindowHandle handle)
		{
			return ((dlgBeihilfeEin)SalWindow.FromHandle(handle, typeof(dlgBeihilfeEin)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// liest Beihilfe-Datei ein
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalBeihDateieinlesen()
		{
			#region Local Variables
			SalArray<SalString> strArExtensions = new SalArray<SalString>(6);
			SalNumber nIndex = 0;
			SalBoolean xOK = false;
			SalString strEE = "";
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strArExtensions[0] = "Beihilfen - *.csv";
				strArExtensions[1] = "*.csv";
				strArExtensions[4] = "alle Dateien - *.*";
				strArExtensions[5] = "*.*";
				xOK = Sal.DlgOpenFile(this, "Beihilfen einlesen", strArExtensions, 4, ref nIndex, ref strDateiName, ref strDateiPfad);
				if (xOK) 
				{
					if (hDisk.Open(strDateiPfad, Sys.OF_Read)) 
					{
						// While SalFileGetStr(hDisk,strLine,2048)
						hDisk.Close();
						return true;
					}
					else
					{
						return false;
					}
				}
				else
				{
					return false;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalEinlesen()
		{
			#region Actions
			using (new SalContext(this))
			{
				// Neu ?
				// Set strUrDateiPfad = strDateiPfad
				Sal.WaitCursor(true);
				// Call SalFileGetDateTime( strDateiPfad, dtDisk )
				strDatum = Int.PalDateToStrJJJJMMTT(SalDateTime.Current);
				strDatum = Const.PATH_BEIHILFEN + strDatum;
				if (!(Vis.DosExist(strDatum))) 
				{
					if (!(Sal.FileCreateDirectory(strDatum))) 
					{
					}
				}
				if (strDateiPfad.ToUpper().Left(17) != Const.PATH_BEIHILFEN) 
				{
					nStatus = Sal.FileCopy(strDateiPfad, strDatum + "\\" + strDateiName, true);
				}
				else
				{
					nStatus = Sys.FILE_CopyOK;
				}
				if (nStatus == Sys.FILE_CopyDest) 
				{
					// Call SalMessageBox('Fehler', 'Fehler beim Erstellen
					// der Zieldatei', MB_IconStop)
					this.SetStatusBarText("Fehler beim Erstellen der Zieldatei");
				}
				else if (nStatus == Sys.FILE_CopyRead) 
				{
					// Call SalMessageBox('Fehler', 'Fehler beim Lesen
					// der Diskette', MB_IconStop)
					this.SetStatusBarText("Fehler beim Lesen der Datei");
				}
				else if (nStatus == Sys.FILE_CopySrc) 
				{
					// Call SalMessageBox('Fehler', 'Fehler beim Erkennen
					// der Diskette', MB_IconStop)
					this.SetStatusBarText("Fehler beim Erkennen der Datei");
				}
				else if (nStatus == Sys.FILE_CopyWrite) 
				{
					// Call SalMessageBox('Fehler', 'Fehler beim Schreiben
					// der Zieldatei', MB_IconStop)
					this.SetStatusBarText("Fehler beim Schreiben der Zieldatei");
				}
				else if (nStatus == Sys.FILE_CopyOK) 
				{
					Sal.FileSetCurrentDirectory(Const.PATH_TVN32);
					Sal.FileSetDrive(Const.PATH_DRIVE);
					strDateiPfad = strDatum + "\\" + strDateiName;
					Sal.FileGetDateTime(strDateiPfad, ref dtDatei);
					dfDatum.DateTime = dtDatei;
					if (SalDateTime.Current > (dfDatum.DateTime + 14)) 
					{
						Sal.ColorSet(dfDatum, Sys.COLOR_IndexWindow, Sys.COLOR_Red);
						Sal.ColorSet(dfDatum, Sys.COLOR_IndexWindowText, Sys.COLOR_White);
						// Call SalMessageBox( 'Achtung:
						// Die Abrechnung ist alt !!!','Altes Abrechnungsdatum!',
						// MB_Ok|MB_IconExclamation)
					}
					else if (SalDateTime.Current > (dfDatum.DateTime + 7)) 
					{
						Sal.ColorSet(dfDatum, Sys.COLOR_IndexWindow, Sys.COLOR_Yellow);
						Sal.ColorSet(dfDatum, Sys.COLOR_IndexWindowText, Sys.COLOR_Black);
					}
					else
					{
						Sal.ColorSet(dfDatum, Sys.COLOR_IndexWindow, Sys.COLOR_DarkGreen);
						Sal.ColorSet(dfDatum, Sys.COLOR_IndexWindowText, Sys.COLOR_White);
					}

					nCount = 0;
					App.frmMain.SetStatusBarText("Datei OK");
					bkgdDateiName.Text = strDateiPfad;
					if (hDisk.Open(bkgdDateiName.Text, (Sys.OF_Read | Sys.OF_UTF8))) 
					{
						while (true)
						{
							Var.bOK = hDisk.GetString(ref strLine, 2048);
							if (!(Var.bOK)) 
							{
								break;
							}
							else
							{
								nCount = nCount + 1;
							}
						}
						hDisk.Close();
					}
					bkgdAnzahl.Text = nCount.ToString(0);
					// Set cbWinForm=TRUE

					pbOK.EnableWindow();
				}
				if (nStatus != Sys.FILE_CopyOK) 
				{
					App.frmDiskEin.DestroyWindow();
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// dlgBeihilfeEin WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgBeihilfeEin_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.dlgBeihilfeEin_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_CreateComplete:
					this.dlgBeihilfeEin_OnSAM_CreateComplete(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgBeihilfeEin_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.pbOK.DisableWindow();
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgBeihilfeEin_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.strDateiPfad = "C:";
			Sal.WaitCursor(false);
			if (this.PalBeihDateieinlesen()) 
			{
				this.PalEinlesen();
				Sal.WaitCursor(false);
			}
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Set dfBearbDatum = SalDateCurrent()
			// Set strKennungTAalt = ''
			// Set nReverseAlt = 0
			// Set nAnzL = 0
			// Set nAnzA = 0
			this.nCount2 = 0;
			this.pbOK.DisableWindow();
			Sal.WaitCursor(true);
			this.hDisk.Open(this.bkgdDateiName.Text, (Sys.OF_Read | Sys.OF_UTF8));
			while (true)
			{
				Var.bOK = this.hDisk.GetString(ref this.strLine, 1024);
				if (Var.bOK) 
				{
					Int.PalClearToken();
					if (this.strLine.Tokenize("", ";", Var.strArrToken) > 0) 
					{
						this.strRegA = Int.PalStringStrip(Var.strArrToken[0], "\"");
						this.strRegH = Int.PalStringStrip(Var.strArrToken[1], "\"");
						this.strRegA = Int.PalStringStrip(this.strRegA, "-").Left(20);
						this.strRegH = Int.PalStringStrip(this.strRegH, "-").Left(20);
						this.strName = Int.PalStringStrip(Var.strArrToken[2], "\"").Left(50);
						this.dtDatum = Var.strArrToken[8].ToDate();
						this.nAnzahl = Int.PalValNum(Var.strArrToken[10]);
						this.nBetrag = Int.PalValNum(Var.strArrToken[11]);
						this.dtErfDat = SalDateTime.Current;
						this.strGUID = Int.GetGUID();

						if (Sys.IDOK == Int.SqlImmed(@"INSERT INTO be (beregarzt, bereghalter, bename, bedate, beanzahl, bebetrag, beerfdat, beguid)
VALUES ( :dlgBeihilfeEin.strRegA, :dlgBeihilfeEin.strRegH, :dlgBeihilfeEin.strName, :dlgBeihilfeEin.dtDatum, :dlgBeihilfeEin.nAnzahl, :dlgBeihilfeEin.nBetrag,
:dlgBeihilfeEin.dtErfDat, :dlgBeihilfeEin.strGUID )")) 
						{
							this.nCount2 = this.nCount2 + 1;
						}
					}
				}
				else
				{
					break;
				}
			}
			this.hFile.Close();
			Sal.WaitCursor(false);
			Sal.MessageBox("Es wurden " + this.nCount2.ToString(0) + @" Beihilfen eingelesen.
Das Fenster wird geschlossen.", "Einlesen beendet", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			this.DestroyWindow();
			// 14.03.19 Ä1829
			// If strParent = 'D'
			// Call frmDiskAbr.PalHoleTabelle(  )
			#endregion
		}
		#endregion
	}
}
