// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmJahresSummen : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlJS = SalSqlHandle.Null;
		public SalNumber nFetchJS = 0;
		public SalNumber nJahr = 0;
		public SalNumber nBetrag = 0;
		public SalNumber nProz = 0;
		public SalNumber nJahrVon = 0;
		public SalNumber nJahrBis = 0;
		public SalArray<SalNumber> nUmsatz = new SalArray<SalNumber>(3);
		public SalArray<SalNumber> nUmsatzRK = new SalArray<SalNumber>(3);
		public SalArray<SalNumber> nOffen = new SalArray<SalNumber>(3);
		public SalArray<SalNumber> nBez30 = new SalArray<SalNumber>(3);
		public SalArray<SalNumber> nBez60 = new SalArray<SalNumber>(3);
		public SalArray<SalNumber> nBez90 = new SalArray<SalNumber>(3);
		public SalArray<SalNumber> nBez999 = new SalArray<SalNumber>(3);
		public SalArray<SalNumber> nBez = new SalArray<SalNumber>(3);
		public SalArray<SalNumber> nAusbuch = new SalArray<SalNumber>(3);
		public SalNumber nPOffen = 0;
		public SalNumber nPBez30 = 0;
		public SalNumber nPBez60 = 0;
		public SalNumber nPBez90 = 0;
		public SalNumber nPBez999 = 0;
		public SalNumber nPBez = 0;
		public SalNumber nPAusbuch = 0;
		public MTblPrintParams PrintParams = new MTblPrintParams();
		public SalArray<SalString> strPrinters = new SalArray<SalString>();
		public SalNumber nAnz = 0;
		public SalNumber nOff = 0;
		public SalNumber nResult = 0;
		public SalString strDevice = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmJahresSummen()
		{
			// Assign global reference.
			App.frmJahresSummen = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmJahresSummen CreateWindow(Control owner)
		{
			frmJahresSummen frm = new frmJahresSummen();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmJahresSummen FromHandle(SalWindowHandle handle)
		{
			return ((frmJahresSummen)SalWindow.FromHandle(handle, typeof(frmJahresSummen)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmJahresSummen WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmJahresSummen_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_CreateComplete:
					this.frmJahresSummen_OnSAM_CreateComplete(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmJahresSummen_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmJahresSummen_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlConnection(ref this.hSqlJS);
			if (Sys.IDNO == Sal.MessageBox(@"Die folgende Abfrage belastet die Datenbank und dauert ein paar Minuten.
Möchten Sie fortfahren?", "Abfrage ausführen?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
			{
				this.DestroyWindow();
			}
			else
			{
				Sal.WaitCursor(true);

				this.tblJS.colJahr1.SetColumnTitle((SalDateTime.Current.Year() - 3).ToString(0));
				this.tblJS.colJahr2.SetColumnTitle((SalDateTime.Current.Year() - 2).ToString(0));
				this.tblJS.colJahr3.SetColumnTitle((SalDateTime.Current.Year() - 1).ToString(0));
				this.nJahrVon = SalDateTime.Current.Year() - 3;
				this.nJahrBis = SalDateTime.Current.Year() - 1;

				this.nUmsatz.Fill(0, 3);
				this.nUmsatzRK.Fill(0, 3);
				this.nOffen.Fill(0, 3);

				this.SetStatusBarText("Hole Jahressummen aus Rechnungen...");
				Int.SqlHandleExec(this.hSqlJS, @"SELECT @YEAR(rkrechdat)+1900, sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins), sum(@choose( rkkzzahl-1, rkdmleis+rkdmarzn+rkdmmahn+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkzazins, 0))
INTO :frmJahresSummen.nJahr, :frmJahresSummen.nBetrag, :frmJahresSummen.nPOffen
FROM rk
WHERE @YEAR(rkrechdat)+1900 BETWEEN :frmJahresSummen.nJahrVon AND :frmJahresSummen.nJahrBis
AND rkrechnr<999990 AND rkdeaktiv IS NULL GROUP BY 1", "Jahressummen Offen", ref Var.nErr);
				this.nFetchJS = this.hSqlJS.FetchNext();
				while (this.nFetchJS != Sys.FETCH_EOF) 
				{

					this.nUmsatzRK[this.nJahr - this.nJahrVon] = this.nBetrag;
					this.nOffen[this.nJahr - this.nJahrVon] = this.nPOffen;
					this.nFetchJS = this.hSqlJS.FetchNext();
				}
				this.hSqlJS.Commit();

				this.tblJS.InsertRow(Sys.TBL_MaxRow);
				this.tblJS.colBez.Text = "Jahressumme gesamt";
				this.SetStatusBarText("Hole Jahressummen aus Tagebuch...");
				// Call SqlHandleExec(hSqlJS,
				// 'SELECT @YEAR(rkrechdat)+1900, sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins),
				// sum(@choose( rkkzzahl-1, rkdmleis+rkdmarzn+rkdmmahn+rkdmzins - rkzaleis-rkzaarzn-rkzamahn-rkzazins, 0))
				// INTO :frmJahresSummen.nJahr, :frmJahresSummen.nBetrag, :frmJahresSummen.nPOffen
				// FROM rk
				// WHERE @YEAR(rkrechdat)+1900 BETWEEN :frmJahresSummen.nJahrVon AND :frmJahresSummen.nJahrBis
				// AND rkrechnr<999990 AND rkdeaktiv IS NULL GROUP BY 1', 'Jahressummen', nErr)
				Int.SqlHandleExec(this.hSqlJS, @"SELECT @YEAR(akdatum)+1900, sum(akrechsumm)
INTO :frmJahresSummen.nJahr, :frmJahresSummen.nBetrag
FROM ak, a
WHERE aktyp='RG' AND aktypdetail LIKE 'UebOP%' AND @YEAR(akdatum)+1900 BETWEEN :frmJahresSummen.nJahrVon AND :frmJahresSummen.nJahrBis
AND (akarztnr = aarztnr OR (akarztnr = anr2 AND anr2 >= 1)) AND akzpraxart<2 GROUP BY 1", "Jahressummen", ref Var.nErr);
				this.nFetchJS = this.hSqlJS.FetchNext();
				while (this.nFetchJS != Sys.FETCH_EOF) 
				{

					if (this.nJahr == SalDateTime.Current.Year() - 3) 
					{
						this.tblJS.colJahr1.Text = Int.PalStrNumPicture(this.nBetrag, "#,##0.00");
					}
					if (this.nJahr == SalDateTime.Current.Year() - 2) 
					{
						this.tblJS.colJahr2.Text = Int.PalStrNumPicture(this.nBetrag, "#,##0.00");
					}
					if (this.nJahr == SalDateTime.Current.Year() - 1) 
					{
						this.tblJS.colJahr3.Text = Int.PalStrNumPicture(this.nBetrag, "#,##0.00");
					}
					this.nUmsatz[this.nJahr - this.nJahrVon] = this.nBetrag;
					this.nFetchJS = this.hSqlJS.FetchNext();
				}
				this.hSqlJS.Commit();

				this.nBez30.Fill(0, 3);
				this.nBez60.Fill(0, 3);
				this.nBez90.Fill(0, 3);
				this.nBez999.Fill(0, 3);
				this.nBez.Fill(0, 3);
				this.nAusbuch.Fill(0, 3);

				this.SetStatusBarText("Hole Jahressummen aus Zahlungen...");
				// Call SqlHandleExec(hSqlJS,
				// 'SELECT @YEAR(rkrechdat)+1900,
				// sum(@choose(zakz-3, @choose( zabuchdat-rkrechdat -30, zadm, 0), 0)),
				// sum(@choose(zakz-3, @choose( zabuchdat-rkrechdat -60, zadm, 0), 0)),
				// sum(@choose(zakz-3, @choose( zabuchdat-rkrechdat -90, zadm, 0), 0)),
				// sum(@choose(zakz-3, zadm, 0)),
				// sum(@choose(zakz-3, 0, zadm))
				// INTO :frmJahresSummen.nJahr, :frmJahresSummen.nPBez30, :frmJahresSummen.nPBez60, :frmJahresSummen.nPBez90,  :frmJahresSummen.nPBez999, :frmJahresSummen.nPAusbuch
				// from rk,za
				// where @YEAR(rkrechdat)+1900 BETWEEN :frmJahresSummen.nJahrVon AND :frmJahresSummen.nJahrBis
				// AND rkrechnr<999990 AND rkdeaktiv IS NULL
				// and rkarztnr=zaarztnr and rkhalternr=zahalternr and rkrechnr=zarechnr GROUP BY 1', 'Jahressummen', nErr)
				Int.SqlHandleExec(this.hSqlJS, @"SELECT @year(rkrechdat) + 1900, @choose(@INT((@IF(@ISNA(zabuchdat), sysdate, zabuchdat)-rkrechdat)/30),'30','60','90','999'), sum(zadm)
INTO :frmJahresSummen.nJahr, :frmJahresSummen.nProz, :frmJahresSummen.nBetrag
from rk,za
where @YEAR(rkrechdat)+1900 BETWEEN :frmJahresSummen.nJahrVon AND :frmJahresSummen.nJahrBis
AND rkrechnr<999990 AND rkdeaktiv IS NULL AND zakz<4
and rkarztnr=zaarztnr and rkhalternr=zahalternr and rkrechnr=zarechnr GROUP BY 1,2", "Jahressummen", ref Var.nErr);
				this.nFetchJS = this.hSqlJS.FetchNext();
				while (this.nFetchJS != Sys.FETCH_EOF) 
				{

					if (this.nProz == 30) 
					{
						this.nBez30[this.nJahr - this.nJahrVon] = this.nBetrag;
					}
					else if (this.nProz == 60) 
					{
						this.nBez60[this.nJahr - this.nJahrVon] = this.nBetrag;
					}
					else if (this.nProz == 90) 
					{
						this.nBez90[this.nJahr - this.nJahrVon] = this.nBetrag;
					}
					else if (this.nProz == 999) 
					{
						this.nBez999[this.nJahr - this.nJahrVon] = this.nBetrag;
					}
					this.nBez[this.nJahr - this.nJahrVon] = this.nBez[this.nJahr - this.nJahrVon] + this.nBetrag;
					// Set nAusbuch[ nJahr - nJahrVon ] = nPAusbuch

					this.nFetchJS = this.hSqlJS.FetchNext();
				}
				this.hSqlJS.Commit();

				this.SetStatusBarText("Hole Jahressummen der Ausbuchungen...");
				Int.SqlHandleExec(this.hSqlJS, @"SELECT @YEAR(rkrechdat)+1900,
sum(zadm)
INTO :frmJahresSummen.nJahr, :frmJahresSummen.nPAusbuch
from rk,za
where @YEAR(rkrechdat)+1900 BETWEEN :frmJahresSummen.nJahrVon AND :frmJahresSummen.nJahrBis
AND rkrechnr<999990 AND rkdeaktiv IS NULL and zakz>=4
and rkarztnr=zaarztnr and rkhalternr=zahalternr and rkrechnr=zarechnr GROUP BY 1", "Jahressummen", ref Var.nErr);
				this.nFetchJS = this.hSqlJS.FetchNext();
				while (this.nFetchJS != Sys.FETCH_EOF) 
				{
					this.nAusbuch[this.nJahr - this.nJahrVon] = this.nPAusbuch;

					this.nFetchJS = this.hSqlJS.FetchNext();
				}
				this.hSqlJS.Commit();

				this.tblJS.InsertRow(Sys.TBL_MaxRow);
				this.tblJS.colBez.Text = "nach 30 Tagen bezahlt";
				this.tblJS.colJahr1.Text = Int.PalStrNumPicture(this.nBez30[0], "#,##0.00");
				this.tblJS.colJahr2.Text = Int.PalStrNumPicture(this.nBez30[1], "#,##0.00");
				this.tblJS.colJahr3.Text = Int.PalStrNumPicture(this.nBez30[2], "#,##0.00");
				this.tblJS.InsertRow(Sys.TBL_MaxRow);
				this.tblJS.colBez.Text = "nach 60 Tagen bezahlt";
				this.tblJS.colJahr1.Text = Int.PalStrNumPicture(this.nBez60[0], "#,##0.00");
				this.tblJS.colJahr2.Text = Int.PalStrNumPicture(this.nBez60[1], "#,##0.00");
				this.tblJS.colJahr3.Text = Int.PalStrNumPicture(this.nBez60[2], "#,##0.00");
				this.tblJS.InsertRow(Sys.TBL_MaxRow);
				this.tblJS.colBez.Text = "nach 90 Tagen bezahlt";
				this.tblJS.colJahr1.Text = Int.PalStrNumPicture(this.nBez90[0], "#,##0.00");
				this.tblJS.colJahr2.Text = Int.PalStrNumPicture(this.nBez90[1], "#,##0.00");
				this.tblJS.colJahr3.Text = Int.PalStrNumPicture(this.nBez90[2], "#,##0.00");
				this.tblJS.InsertRow(Sys.TBL_MaxRow);
				this.tblJS.colBez.Text = "nach mehr als 90 Tagen bezahlt";
				this.tblJS.colJahr1.Text = Int.PalStrNumPicture(this.nBez999[0], "#,##0.00");
				this.tblJS.colJahr2.Text = Int.PalStrNumPicture(this.nBez999[1], "#,##0.00");
				this.tblJS.colJahr3.Text = Int.PalStrNumPicture(this.nBez999[2], "#,##0.00");
				this.tblJS.InsertRow(Sys.TBL_MaxRow);
				this.tblJS.colBez.Text = "insgesamt bezahlt";
				this.tblJS.colJahr1.Text = Int.PalStrNumPicture(this.nBez[0], "#,##0.00");
				this.tblJS.colJahr2.Text = Int.PalStrNumPicture(this.nBez[1], "#,##0.00");
				this.tblJS.colJahr3.Text = Int.PalStrNumPicture(this.nBez[2], "#,##0.00");
				this.tblJS.InsertRow(Sys.TBL_MaxRow);
				this.tblJS.colBez.Text = "Ausbuchungen";
				this.nAnz = 0;
				while (this.nAnz < 3) 
				{
					this.nAusbuch[this.nAnz] = this.nUmsatz[this.nAnz] - this.nBez30[this.nAnz] - this.nBez60[this.nAnz] - this.nBez90[this.nAnz] - this.nBez999[this.nAnz] - this.nOffen[this.nAnz];
					this.nAnz = this.nAnz + 1;
				}
				// Set tblJS.colJahr1 = PalStrNumPicture( nAusbuch[0] + nUmsatz[0] - nUmsatzRK[0], '#,##0.00')
				// Set tblJS.colJahr2 = PalStrNumPicture( nAusbuch[1] + nUmsatz[1] - nUmsatzRK[1], '#,##0.00')
				// Set tblJS.colJahr3 = PalStrNumPicture( nAusbuch[2] + nUmsatz[2] - nUmsatzRK[2], '#,##0.00')
				this.tblJS.colJahr1.Text = Int.PalStrNumPicture(this.nAusbuch[0], "#,##0.00");
				this.tblJS.colJahr2.Text = Int.PalStrNumPicture(this.nAusbuch[1], "#,##0.00");
				this.tblJS.colJahr3.Text = Int.PalStrNumPicture(this.nAusbuch[2], "#,##0.00");
				// Call SalTblInsertRow( tblJS, TBL_MaxRow )
				// Set tblJS.colBez = 'Stornierungen'
				// Set tblJS.colJahr1 = PalStrNumPicture( nUmsatz[0] - nUmsatzRK[0], '#,##0.00')
				// Set tblJS.colJahr2 = PalStrNumPicture( nUmsatz[1] - nUmsatzRK[1], '#,##0.00')
				// Set tblJS.colJahr3 = PalStrNumPicture( nUmsatz[2] - nUmsatzRK[2], '#,##0.00')
				this.tblJS.InsertRow(Sys.TBL_MaxRow);
				this.tblJS.colBez.Text = "noch offener Betrag";
				this.tblJS.colJahr1.Text = Int.PalStrNumPicture(this.nOffen[0], "#,##0.00");
				this.tblJS.colJahr2.Text = Int.PalStrNumPicture(this.nOffen[1], "#,##0.00");
				this.tblJS.colJahr3.Text = Int.PalStrNumPicture(this.nOffen[2], "#,##0.00");
				this.SetStatusBarText("");

				Sal.WaitCursor(false);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmJahresSummen_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlJS.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// tblJS WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblJS_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.tblJS_OnSAM_Create(sender, e);
					break;
				
				case MT.MTbl.MTM_MouseEnterItem:
					this.tblJS_OnMTM_MouseEnterItem(sender, e);
					break;
				
				case MT.MTbl.MTM_MouseLeaveItem:
					this.tblJS_OnMTM_MouseLeaveItem(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblJS_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call MTblSubClass( hWndItem)
			Int.PalPrepareMTbl(this.tblJS, 0xbfffbf);
			MT.MTbl.SetFlags(this.tblJS, MT.MTbl.MTBL_FLAG_COLOR_ENTIRE_ROW, true);
			MT.MTbl.SetFlags(this.tblJS, MT.MTbl.MTBL_FLAG_VARIABLE_ROW_HEIGHT, true);
			#endregion
		}
		
		/// <summary>
		/// MTM_MouseEnterItem event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblJS_OnMTM_MouseEnterItem(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			MT.MTbl.GetItem(this.tblJS, Sys.lParam, Var.objItem);
			if (Var.objItem.Type == MT.MTbl.MTBL_ITEM_ROW) 
			{
				Ext.MTblSetHighlighted(Var.objItem, true);
			}
			#endregion
		}
		
		/// <summary>
		/// MTM_MouseLeaveItem event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblJS_OnMTM_MouseLeaveItem(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			MT.MTbl.GetItem(this.tblJS, Sys.lParam, Var.objItem);
			if (Var.objItem.Type == MT.MTbl.MTBL_ITEM_ROW) 
			{
				Ext.MTblSetHighlighted(Var.objItem, false);
			}
			#endregion
		}
		
		/// <summary>
		/// pbDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDruck_OnSAM_Click(sender, e);
					break;
				
				case Sys.SAM_Create:
					this.pbDruck_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;


			// 13.11.13
			// Set nErr = 1
			// Set hWndReport = SalCreateWindow (frmReport, hWndNULL,'Statistik')
			// Call SalReportTableCreate('TEST', tblResult, nErr)
			// Call SalReportTableView(tblResult, frmReport, 'TEST', nErr)
			// 08.09.06 Aufgabe 24
			// Call SalBringWindowToTop(hWndReport)
			this.PrintParams.Init();
			this.PrintParams.DocName = "Jahreszahlen von " + this.nJahrVon.ToString(0) + " bis " + this.nJahrBis.ToString(0);
			this.PrintParams.Orientation = MT.MTbl.MTP_OR_LANDSCAPE;
			// Set strDevice = MTblPrintGetDefPrinterName(  )
			this.nResult = this.lbPrinters.GetListSelectedIndex();
			if (this.nResult == Sys.LB_Err) 
			{
				this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			}
			else
			{
				this.strDevice = this.lbPrinters.GetListItemText(this.nResult);
			}
			this.PrintParams.PrinterName = this.strDevice;
			// 07.11.13 F1760
			this.PrintParams.Language = MT.MTbl.MTP_LNG_GERMAN;

			MT.MTbl.Print(this.tblJS, this.PrintParams);
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDruck_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nAnz = MT.MTbl.PrintGetPrinterNames(this.strPrinters);
			this.strDevice = MT.MTbl.MTblPrintGetDefPrinterName();
			this.nOff = -1;
			this.nResult = 0;
			while (this.nResult < this.nAnz) 
			{
				this.lbPrinters.AddListItem(this.strPrinters[this.nResult]);
				if (this.strPrinters[this.nResult] == this.strDevice) 
				{
					this.nOff = this.nResult;
				}
				this.nResult = this.nResult + 1;
			}
			if (this.nOff >= 0) 
			{
				this.lbPrinters.SetListSelectedIndex(this.nOff);
			}

			// Return PalToolTipSetText( hWndItem
			// ,
			// 	"Tabelle mit Abfrage-Ergebnis drucken" )
			#endregion
		}
		
		/// <summary>
		/// pbExport WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbExport_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbExport_OnSAM_Click(sender, e);
					break;
				
				// On SAM_Create
				
				// Return PalToolTipSetText( hWndItem, "Tabelle exportieren" )
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbExport_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.obExcel.Checked) 
			{
				MT.MTbl.ExportToExcel(this.tblJS, MT.MTbl.MTE_LNG_GERMAN, SalString.Null, ((((MT.MTbl.MTE_EXCEL_NEW_INSTANCE | MT.MTbl.MTE_EXCEL_STRING_COLS_AS_TEXT) | Const.MTE_EXCEL_NO_CLIPBOARD) | Const.MTE_EXCEL_NO_AUTO_FIT_COL) | Const.MTE_EXCEL_NO_AUTO_FIT_ROW), 
					(MT.MTbl.MTE_COL_HEADERS | MT.MTbl.MTE_SHOW_STATUS), 0, Sys.ROW_Hidden, Sys.COL_Visible, 0);
			}
			else
			{
				Ext.MTblExportToOOCalc(this.tblJS, MT.MTbl.MTE_LNG_GERMAN, SalString.Null, (Const.MTE_OOCALC_NEW_WORKBOOK | Const.MTE_OOCALC_STRING_COLS_AS_TEXT), (MT.MTbl.MTE_COL_HEADERS | MT.MTbl.MTE_SHOW_STATUS), 0, Sys.ROW_Hidden, Sys.COL_Visible, 0);
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.IDYES == Sal.MessageBox("Wollen Sie das moveta-Programm schließen ?", "Frage", (Sys.MB_YesNo | Sys.MB_IconQuestion)))  // 15.12.10
			{
				// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
				this.DestroyWindow();
			}
			#endregion
		}
		#endregion
		
		#region tblJS
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblJSTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmJahresSummen _frmJahresSummen = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblJSTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmJahresSummen frmJahresSummen
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmJahresSummen == null) 
					{
						_frmJahresSummen = (frmJahresSummen)this.FindForm();
					}
					return _frmJahresSummen;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblJSTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblJSTableWindow)SalWindow.FromHandle(handle, typeof(tblJSTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
