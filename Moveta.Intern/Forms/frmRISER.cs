// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="nPArzt"></param>
	/// <param name="nPHalter"></param>
	/// <param name="nPR"></param>
	public partial class frmRISER : SalFormWindow
	{
		#region Window Parameters
		public SalNumber nPArzt;
		public SalNumber nPHalter;
		public SalNumber nPR;
		#endregion
		
		#region Window Variables
		public SalSqlHandle hSqlAktiErf = SalSqlHandle.Null;
		public SalBoolean bOk = false;
		public SalBoolean bJa = false;
		public SalNumber nArztNr2 = 0;
		public SalNumber nKZPraxArt = 0;
		public SalNumber nBatchBuch = 0;
		public SalString strTyp = "";
		public SalString strTAN1 = "";
		public SalString strTAN2 = "";
		public SalString strTAStr = "";
		public SalString strTAOrt = "";
		public SalString strTALand = "";
		public SalString strTHN1 = "";
		public SalString strTHN2 = "";
		public SalString strTHStr = "";
		public SalString strTHOrt = "";
		public SalString strTHLand = "";
		public SalString strEWA = "";
		public SalString strZei = "";
		public SalString strEL = "";
		public SalString strELZei = "";
		public SalString strAbtlg = "";
		public SalString strKuerzel = "";
		public SalString lsText = "";
		public SalDateTime dtErinnerung = SalDateTime.Null;
		public SalNumber nFax = 0;
		public SalNumber nPRNr = 0;
		public SalDateTime dtTHSperrDatum = SalDateTime.Null;
		public SalNumber nMaxScheckNr = 0;
		public SalString strAZ = "";
		public SalString strTSKFehler = "";
		public SalArray<SalNumber> nSelectedArray = new SalArray<SalNumber>();
		public SalNumber nSelected = 0;
		public SalDateTime dtTHGebDat = SalDateTime.Null;
		public SalDateTime dtErfDat = SalDateTime.Null;
		public SalNumber nTAVSt = 0;
		public SalString strBuchText = "";
		public SalNumber nDiverse = 0;
		public SalDateTime dtBuchDat = SalDateTime.Null;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmRISER(SalNumber nPArzt, SalNumber nPHalter, SalNumber nPR)
		{
			// Assign global reference.
			App.frmRISER = this;
			// Window Parameters initialization.
			this.nPArzt = nPArzt;
			this.nPHalter = nPHalter;
			this.nPR = nPR;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmRISER CreateWindow(Control owner, SalNumber nPArzt, SalNumber nPHalter, SalNumber nPR)
		{
			frmRISER frm = new frmRISER(nPArzt, nPHalter, nPR);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmRISER FromHandle(SalWindowHandle handle)
		{
			return ((frmRISER)SalWindow.FromHandle(handle, typeof(frmRISER)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber LoescheMaske()
		{
			#region Actions
			using (new SalContext(this))
			{
				Sal.ClearField(dfArztNr);
				Sal.ClearField(dfArztName);
				Sal.ClearField(dfHalterNr);
				Sal.ClearField(dfHalterName);
				// Call SalClearField( dfHalterName2 )
				Sal.ClearField(dfRechNr);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HoleArzt()
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlImmedSel(@"SELECT anr2, akzpraxart
INTO :frmRISER.nArztNr2, :frmRISER.nKZPraxArt
FROM a WHERE aarztnr=:frmRISER.dfArztNr");
				if (nKZPraxArt == 2) 
				{
					// 06.06.02 rausgenommen, da für A-Nr. keine Daten aus frmRgSuchen übernommen.
					// Set dfArztNr = nArztNr2
					// Call SqlImmedSel('SELECT anr2
					// INTO :frmRISER.nArztNr2
					// FROM a WHERE aarztnr=:frmRISER.dfArztNr')
				}
				else if (nKZPraxArt == 0) 
				{
					nArztNr2 = dfArztNr.Number;
				}
				Int.SqlIstDa("from A where aarztnr=:frmRISER.dfArztNr", ref bOk);
				if (bOk) 
				{
					Int.SqlImmedSel(@"SELECT aname1, asvname1, asvname2, asvstr, asvort, asvland
into :frmRISER.dfArztName, :frmRISER.strTAN1, :frmRISER.strTAN2, :frmRISER.strTAStr, :frmRISER.strTAOrt, :frmRISER.strTALand
from A where aarztnr=:frmRISER.dfArztNr");
					Sal.ClearField(dfHalterNr);
					Sal.ClearField(dfRechNr);
				}
				else
				{
					Sal.ClearField(dfArztNr);
					Sal.ClearField(dfArztName);
					Sal.SetFocus(dfArztNr);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HoleHalter()
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlIstDa("from H where  harztnr = :frmRISER.dfArztNr AND hhalternr = :frmRISER.dfHalterNr AND hdeaktiv IS NULL ", ref bOk);
				if (bOk) 
				{
					Sal.WaitCursor(true);
					Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland, hsperrdatum, hgebdat
into :frmRISER.dfHalterName,  :frmRISER.strTHN1, :frmRISER.strTHN2, :frmRISER.strTHStr, :frmRISER.strTHOrt, :frmRISER.strTHLand, :frmRISER.dtTHSperrDatum, :frmRISER.dtTHGebDat
from H where  harztnr = :frmRISER.dfArztNr AND hhalternr = :frmRISER.dfHalterNr AND hdeaktiv IS NULL ");
					// ! 10.04.06 Ländercodes
					strTHLand = Int.PalPruefeLC(strTHLand, 0);
					// !
					// 02.04.07 Ä102
					// If dtTHSperrDatum != DATETIME_Null
					// Call SalMessageBox( 'Der Postausgang an den Halter ist gesperrt seit ' || SalStrMidX(PalDateToStrJJJJMMTT(dtTHSperrDatum),6,2) || '.' || SalStrMidX(PalDateToStrJJJJMMTT(dtTHSperrDatum),4,2) || '.' ||
					// SalStrMidX(PalDateToStrJJJJMMTT(dtTHSperrDatum),0,4), 'Achtung', MB_Ok|MB_IconExclamation)

					// Call SqlImmedSel('SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
					// from rk into :frmRISER.dfAussenst where rkhalternr=:frmRISER.dfHalterNr
					// and ' || PalArztNr('rk', dfArztNr, nArztNr2) || '
					// and rkkzzahl <2')
					// Set dfZusatz = 0
					// Call SqlImmedSel('SELECT sum(bbzahldm) INTO :frmRISER.nBatchBuch FROM bb
					// WHERE  ' || PalArztNr('bb', dfArztNr, nArztNr2) || '
					// and bbhalternr=:frmRISER.dfHalterNr')
					// Set dfAussenst = dfAussenst - nBatchBuch
					Sal.ClearField(dfRechNr);
					HoleRISER();
					Sal.WaitCursor(false);
				}
				else
				{
					LoescheMaske();
					Sal.SetFocus(dfArztNr);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HoleRech()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (Sal.IsNull(dfHalterNr)) 
				{
					Int.SqlIstDa("from rk where  " + Int.PalArztNr("rk", dfArztNr.Number, nArztNr2) + " AND rkrechnr = :frmRISER.dfRechNr AND rkdeaktiv IS NULL ", ref bOk);
				}
				else
				{
					Int.SqlIstDa("from rk where  " + Int.PalArztNr("rk", dfArztNr.Number, nArztNr2) + " AND rkhalternr = :frmRISER.dfHalterNr AND rkrechnr = :frmRISER.dfRechNr AND rkdeaktiv IS NULL ", ref bOk);
				}
				if (bOk) 
				{
					if (Sal.IsNull(dfHalterNr)) 
					{
						Int.SqlImmedSel(@"SELECT rkhalternr
into :frmRISER.dfHalterNr
from rk where rkarztnr = :frmRISER.dfArztNr AND rkrechnr = :frmRISER.dfRechNr");
						HoleHalter();
					}
				}
				else
				{
					// Call LoescheMaske()
					dfRechNr.Number = Sys.NUMBER_Null;
					Sal.MessageBox("Die Rechnung gibt es bei diesem Halter nicht.", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
					// Call SalSetFocus( dfArztNr )
					Sal.SetFocus(dfRechNr);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HolePR()
		{
			#region Local Variables
			SalNumber nArzt = 0;
			SalNumber nHalter = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlIstDa("from pr where prnr=:frmRISER.dfPR", ref bOk);
				if (bOk) 
				{
					// 22.11.11 Ä658 + praz
					Int.SqlImmedSel(@"SELECT prarztnr, prhalternr, praz
into :frmRISER.dfArztNr, :frmRISER.dfHalterNr, :frmRISER.strAZ
FROM pr WHERE prnr = :frmRISER.dfPR");
					nArzt = dfArztNr.Number;
					nHalter = dfHalterNr.Number;
					HoleArzt();
					dfHalterNr.Number = nHalter;
					HoleHalter();
					Int.SqlIstDa("FROM prd WHERE prdnr = :frmRISER.dfPR AND prdrechnr = :frmRISER.dfRechNr ", ref bOk);
					if (!(bOk)) 
					{
						Sal.ClearField(dfRechNr);
					}
				}
				else
				{
					Sal.ClearField(dfPR);
					Sal.SetFocus(dfPR);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HoleRISER()
		{
			#region Local Variables
			SalNumber nArzt = 0;
			SalNumber nHalter = 0;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlIstDa("from ri where " + Int.PalArztNr("ri", dfArztNr.Number, nArztNr2) + " AND rihalternr = :frmRISER.dfHalterNr", ref bOk);
				if (bOk) 
				{
					// 22.11.11 Ä658 + praz
					Int.SqlImmedSel(@"SELECT rizei, rierfdat INTO :frmRISER.strKuerzel, :frmRISER.dtErfDat
from ri where " + Int.PalArztNr("ri", dfArztNr.Number, nArztNr2) + " AND rihalternr = :frmRISER.dfHalterNr");
					bkgdRIInfo.Text = "Anfrage bei RISER von " + strKuerzel + " am " + Int.PalDateToStrDE(dtErfDat) + " durchgeführt.";
					pb2.ShowWindow();
					pb2Ktw.ShowWindow();
					pb2As.ShowWindow();
				}
				else
				{
					bkgdRIInfo.Text = "Noch keine Anfrage bei RISER durchgeführt.";
					pb1.ShowWindow();
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmRISER WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRISER_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmRISER_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRISER_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.bkgdRIInfo.Text = "";
			this.pb1.HideWindow();
			this.pb2.HideWindow();
			this.pb2Ktw.HideWindow();
			this.pb2As.HideWindow();
			if (!(Int.PalFormFrei("Übergaben"))) 
			{
				Sal.MessageBox("Abschluß läuft. Übergabe nicht erlaubt !", "Achtung", Sys.MB_Ok);
				this.DestroyWindow();
			}
			else
			{
				if (this.nPArzt != SalNumber.Null) 
				{
					this.dfArztNr.Number = this.nPArzt;
					this.HoleArzt();
					// 12.08.05
					this.dfArztNr.DisableWindow();
				}
				if (this.nPHalter != SalNumber.Null) 
				{
					this.dfHalterNr.Number = this.nPHalter;
					this.HoleHalter();
					// 12.08.05
					this.dfHalterNr.DisableWindow();
				}
				if (this.nPR != SalNumber.Null && this.nPR != 0) 
				{
					this.dfPR.Number = this.nPR;
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfPR WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPR_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfPR_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPR_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfHalterNr.Clear();
			this.dfHalterName.Clear();
			// Call SalClearField( dfHalterName2 )
			// Call SalClearField( dfRechNr )
			this.strTHN1 = "";
			this.strTHN2 = "";
			this.strTHStr = "";
			this.strTHOrt = "";
			this.strTHLand = "";
			this.HolePR();
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfHalterNr.Clear();
			this.dfHalterName.Clear();
			// Call SalClearField( dfHalterName2 )
			this.dfRechNr.Clear();
			this.strTHN1 = "";
			this.strTHN2 = "";
			this.strTHStr = "";
			this.strTHOrt = "";
			this.strTHLand = "";
			this.HoleArzt();
			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.HoleHalter();
			#endregion
		}
		
		/// <summary>
		/// dfRechNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRechNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.HoleRech();
			#endregion
		}
		
		/// <summary>
		/// pb1 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pb1_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pb1_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pb1_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.strKuerzel = App.frmMain.strUser.Left(2);
			this.lsText = "***** EWA Anfrage gemacht (RISER)";
			// 23.11.15 Ä1288 Wiedervorlage raus
			// Set frmRISER.dtErinnerung = SalDateCurrent() + 30
			// 13.05.14 F2027
			this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);
			Int.SqlImmedSel(@"SELECT anr2
INTO :frmRISER.nArztNr2
FROM a WHERE aarztnr=:frmRISER.dfArztNr");
			if (this.nArztNr2 == 0 || this.nArztNr2 == SalNumber.Null) 
			{
				this.nArztNr2 = this.dfArztNr.Number;
			}

			Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :strBNZei, :frmRISER.dfArztNr, :frmRISER.dfHalterNr, 0,
:frmRISER.lsText , SYSDATE, 'J', 'HS', NULL, NULL, :frmRISER.dfPR, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
			Int.SqlImmed(@"INSERT INTO ri (riarztnr, rihalternr, rizei, rierfdat)
VALUES( :frmRISER.dfArztNr, :frmRISER.dfHalterNr, :strBNZei, SYSDATETIME )");
			Int.PalLog("Haltersperre ein (RI) : " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0));
			if (Int.SqlImmed("UPDATE h SET hsperrdatum = SYSDATE WHERE " + Int.PalArztNr("h", this.dfArztNr.Number, this.nArztNr2) + " AND hhalternr = :frmRISER.dfHalterNr")) 
			{
			}
			Sal.MessageBox("Anfrage bei RISER gebucht.", "Ok", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			this.DestroyWindow();
			#endregion
		}
		
		/// <summary>
		/// pb2 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pb2_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pb2_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pb2_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfDM.Number == 0 || this.dfDM.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Bitte geben Sie den Betrag ein, der uns von RISER berechnet wurde.", "Betrag ist leer oder 0", Sys.MB_Ok);
			}
			else
			{
				Int.SqlConnection(ref this.hSqlAktiErf);
				if (Int.PalCheckAuslTA(this.dfArztNr.Number) != "EU")  // 08.05.17 F2906
				{
					this.dfDM.Number = this.dfDM.Number * (100 + Var.nMwStVoll) / 100;
				}
				// Set frmRISER.strKuerzel = SalStrLeftX( frmMain.strUser, 2)
				// Set frmRISER.lsText = '***** EWA Anfrage gemacht'
				// 13.05.14 F2027
				this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);
				// 06.03.23 Ä2086
				this.dtBuchDat = SalDateTime.Current;
				Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
				if (this.dtBuchDat < Var.dtINIMinBuchDat) 
				{
					this.dtBuchDat = Var.dtINIMinBuchDat;
				}


				// Call SqlImmed('
				// INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
				// VALUES (:strBNZei, :strBNZei, :frmRISER.dfArztNr, :frmRISER.dfHalterNr, 0,
				// :frmRISER.lsText , SYSDATE, \'J\', \'HS\', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)')
				// 21.10.10 OTÄ496 + If frmRISER.dfDM != 0
				if (this.dfDM.Number != 0) 
				{
					// 12.01.11 F824 von hier nach PalHoleDaten verschoben
					// Call SqlImmed('UPDATE nr SET nrmax = :frmRISER.nMaxScheckNr WHERE nrcode = \'SCHK\'')
					if (this.dfPR.Number == 0 || this.dfPR.Number == Sys.NUMBER_Null) 
					{
						// 30.06.20 Ä1892
						// If SalDateCurrent() >= 2020-07-01 and SalDateCurrent() <= 2020-12-31
						// Call PalBuchMB( hSqlAktiErf, SalDateCurrent(), 41, frmRISER.dfDM, 0, 3.00, frmRISER.dfArztNr, frmRISER.dfHalterNr, frmRISER.dfPR, 0, 15560, '', NUMBER_Null, FALSE )
						// Else
						Int.PalBuchMB(this.hSqlAktiErf, this.dtBuchDat, 41, this.dfDM.Number, 0, 3.08m, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfPR.Number, 0, 15560, "", SalNumber.Null, false, SalNumber.Null);
						// 08.05.17 F2906
						// 28.05.21 Ä1962
						// Set strBuchText = 'EWARg' || PalStrNum( dfArztNr, 4,0) || 'H' || PalStrNum( dfHalterNr, 5, 0 )
						this.strBuchText = ("Einwohnermeldeamt-Anfrage für Rechng. " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "H" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0)).Left(50);
						if (Int.PalCheckAuslTA(this.dfArztNr.Number) == "EU") 
						{
							this.nTAVSt = 0;
							// 30.06.20 Ä1892
							// If SalDateCurrent() >= 2020-07-01 and SalDateCurrent() <= 2020-12-31
							// Call SqlImmed( 'INSERT INTO TK
							// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
							// tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
							// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
							// VALUES (:frmRISER.dfArztNr, 0, 0, :frmRISER.strBuchText,
							// :frmRISER.dfHalterNr, 0, 0, SYSDATE,
							// 86000, 0,0,:frmRISER.nTAVSt, 0,0,0,0,0,0, 0, 0, 3.00, 3.00, 0)')
							// Else
							Int.SqlImmed(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
VALUES (:frmRISER.dfArztNr, 0, 0, :frmRISER.strBuchText,
:frmRISER.dfHalterNr, 0, 0, :frmRISER.dtBuchDat,
86000, 0,0,:frmRISER.nTAVSt, 0,0,0,0,0,0, 0, 0, 3.08, 3.08, 0)");
						}
						else
						{
							// 30.06.20 Ä1892
							// If SalDateCurrent(  ) >= 2020-07-01 and SalDateCurrent(  ) <= 2020-12-31
							// Set nTAVSt = 3.00 - (3.00 / (100 + nMwStVoll) * 100)
							// Call SqlImmed( 'INSERT INTO TK
							// (tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
							// tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
							// tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
							// VALUES (:frmRISER.dfArztNr, 0, 0, :frmRISER.strBuchText,
							// :frmRISER.dfHalterNr, 0, 0, :frmRISER.dtBuchDat,
							// 86001, 0,0,:frmRISER.nTAVSt, 0,0,0,0,0,
							// :nMwStVoll, 0, 0, 3.00, 3.00, 0)')
							// Else
							// 01.12.17 F3062
							// Set nTAVSt = SalNumberRound( 3.08 * nMwStVoll ) / 100
							this.nTAVSt = 3.08m - (3.08m / (100 + Var.nMwStVoll) * 100);

							Int.SqlImmed(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
VALUES (:frmRISER.dfArztNr, 0, 0, :frmRISER.strBuchText,
:frmRISER.dfHalterNr, 0, 0, :frmRISER.dtBuchDat,
86000, 0,0,:frmRISER.nTAVSt, 0,0,0,0,0,
:nMwStVoll, 0, 0, 3.08, 3.08, 0)");
						}
					}
					else
					{
						// 10.06.11 Ä589
						// Call PalBuchMB( hSqlLlDruck2, SalDateCurrent(), 5, 0, frmRISER.dfDM, 3.08, frmRISER.dfArztNr, frmRISER.dfHalterNr, frmRISER.dfPR, frmRISER.nMaxScheckNr, 13300, '' )
						// 30.06.20 Ä1892
						Var.nMwStSenkung = 8220;
						if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
						{
							Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
						}

						// 04.10.23 Ä2134 + tkfall
						Int.PalBuchMB(this.hSqlAktiErf, SalDateTime.Current, 40, this.dfDM.Number, 0, 0, this.dfArztNr.Number, this.dfHalterNr.Number, this.dfPR.Number, 0, Var.nMwStSenkung, "", SalNumber.Null, false, 1);

					}
					if (Int.SqlImmed("UPDATE h SET hsperrdatum = NULL WHERE " + Int.PalArztNr("h", this.dfArztNr.Number, this.nArztNr2) + " AND hhalternr = :frmRISER.dfHalterNr")) 
					{
					}
					Int.PalLog("Haltersperre aus (RI) : " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0));
					// 03.04.23 Ä2093 14 -> 21
					if (Int.SqlImmed("UPDATE rk SET rkmahnsperrbis = SYSDATE + 21 DAYS WHERE " + Int.PalArztNr("rk", this.dfArztNr.Number, this.nArztNr2) + @" AND rkhalternr = :frmRISER.dfHalterNr
AND rkkzzahl<2")) 
					{
					}
					Int.SqlImmed("DELETE FROM ri WHERE " + Int.PalArztNr("ri", this.dfArztNr.Number, this.nArztNr2) + " AND rihalternr = :frmRISER.dfHalterNr");
					Sal.MessageBox("RISER-Kosten wurden gebucht.", "Ok", (Sys.MB_Ok | Sys.MB_IconAsterisk));
					this.DestroyWindow();
					// ! 06.09.10
					// Set strDummy = SalStrLeftX( PalStrNum(frmRISER.dfArztNr,4,0) || '/H' || PalStrNum( frmRISER.dfHalterNr,5,0) || ' ' || frmRISER.strTHN1, 100)
					// Call SqlImmed( 'INSERT INTO dl (dlcode, dlerfdat, dlid, dlname, dldm)
					// VALUES(\'SCHK\', SYSDATETIME, :frmRISER.nMaxScheckNr, :strDummy, :frmRISER.dfDM)' )
				}
				else
				{
					Sal.MessageBox("Bitte Betrag eingeben.", "Betrag fehlt", (Sys.MB_Ok | Sys.MB_IconStop));
				}
				this.hSqlAktiErf.Disconnect();
			}
			#endregion
		}
		
		/// <summary>
		/// pb2Ktw WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pb2Ktw_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pb2Ktw_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pb2Ktw_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfDM.Number == 0 || this.dfDM.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Bitte geben Sie den Betrag ein, der uns von RISER berechnet wurde.", "Betrag ist leer oder 0", Sys.MB_Ok);
			}
			else
			{
				Int.SqlConnection(ref this.hSqlAktiErf);
				if (Int.PalCheckAuslTA(this.dfArztNr.Number) != "EU")  // 08.05.17 F2906
				{
					this.dfDM.Number = this.dfDM.Number * (100 + Var.nMwStVoll) / 100;
				}
				// Set frmRISER.strKuerzel = SalStrLeftX( frmMain.strUser, 2)
				// Set frmRISER.lsText = '***** EWA Anfrage gemacht'
				// 13.05.14 F2027
				this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);
				// 06.03.23 Ä2086
				this.dtBuchDat = SalDateTime.Current;
				Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
				if (this.dtBuchDat < Var.dtINIMinBuchDat) 
				{
					this.dtBuchDat = Var.dtINIMinBuchDat;
				}


				// Call SqlImmed('
				// INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
				// VALUES (:strBNZei, :strBNZei, :frmRISER.dfArztNr, :frmRISER.dfHalterNr, 0,
				// :frmRISER.lsText , SYSDATE, \'J\', \'HS\', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)')
				// 21.10.10 OTÄ496 + If frmRISER.dfDM != 0
				if (this.dfDM.Number != 0) 
				{
					// 18.12.17 Ä1658
					if (Int.PalCheckAuslTA(this.dfArztNr.Number) == "EU")  // 08.05.17 F2906
					{
						this.nTAVSt = 0;
					}
					else
					{
						this.nTAVSt = (this.dfDM.Number * Var.nMwStVoll * 100 / (100 + Var.nMwStVoll)).Round() / 100;
					}
					this.nDiverse = this.dfDM.Number - this.nTAVSt;
					// 21.07.21 Mail JA
					this.strBuchText = "RISER-Kostenübern. " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0);
					// Call SqlImmed( 'INSERT INTO FI
					// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
					// VALUES (0, 49000, 15560, :frmRISER.dfArztNr, SYSDATE, \'RISER-Kostenübern.\', :frmRISER.nDiverse , 7)')
					Int.SqlImmed(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 49000, 15560, :frmRISER.dfArztNr, :frmRISER.dtBuchDat, :frmRISER.strBuchText, :frmRISER.nDiverse , 7)");

					// 30.06.20 Ä1892
					Var.nMwStSenkung = 15760;
					if (SalDateTime.Current >= new SalDateTime(2020, 7, 1) && SalDateTime.Current <= new SalDateTime(2020, 12, 31)) 
					{
						Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
					}
					// Call SqlImmed( 'INSERT INTO FI
					// (fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
					// VALUES (0, 49000, 15760, :frmRISER.dfArztNr, SYSDATE, \'RISER-Kostenübern.\', :frmRISER.nTAVSt, 7)')
					Int.SqlImmed(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 49000, :nMwStSenkung, :frmRISER.dfArztNr, :frmRISER.dtBuchDat, :frmRISER.strBuchText, :frmRISER.nTAVSt, 7)");

					Int.SqlImmed(@" INSERT INTO bub
									(bubbearbeiter, bubbearbdatum, bubarztnr, bubsoll, bubhaben, bubdm, bubbuchtext)
									VALUES (:frmMain.strUser, SYSDATETIME, :frmRISER.dfArztNr, 49000, 15560, :frmRISER.nDiverse, :frmRISER.strBuchText)");
					Int.SqlImmed(@" INSERT INTO bub
									(bubbearbeiter, bubbearbdatum, bubarztnr, bubsoll, bubhaben, bubdm, bubbuchtext)
									VALUES (:frmMain.strUser, SYSDATETIME, :frmRISER.dfArztNr, 49000, :nMwStSenkung, :frmRISER.nTAVSt, :frmRISER.strBuchText )");

					Int.SqlImmed("DELETE FROM ri WHERE " + Int.PalArztNr("ri", this.dfArztNr.Number, this.nArztNr2) + " AND rihalternr = :frmRISER.dfHalterNr");
					Int.PalLog("RISER Ktw: " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0));
					Sal.MessageBox("RISER-Kosten wurden auf moveta gebucht.", "Ok", (Sys.MB_Ok | Sys.MB_IconAsterisk));
					this.DestroyWindow();
					// ! 06.09.10
					// Set strDummy = SalStrLeftX( PalStrNum(frmRISER.dfArztNr,4,0) || '/H' || PalStrNum( frmRISER.dfHalterNr,5,0) || ' ' || frmRISER.strTHN1, 100)
					// Call SqlImmed( 'INSERT INTO dl (dlcode, dlerfdat, dlid, dlname, dldm)
					// VALUES(\'SCHK\', SYSDATETIME, :frmRISER.nMaxScheckNr, :strDummy, :frmRISER.dfDM)' )
				}
				else
				{
					Sal.MessageBox("Bitte Betrag eingeben.", "Betrag fehlt", (Sys.MB_Ok | Sys.MB_IconStop));
				}
				this.hSqlAktiErf.Disconnect();
			}
			#endregion
		}
		
		/// <summary>
		/// pb2As WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pb2As_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pb2As_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pb2As_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 11.12.17 Ä1658
			Int.SqlImmed("DELETE FROM ri WHERE " + Int.PalArztNr("ri", this.dfArztNr.Number, this.nArztNr2) + " AND rihalternr = :frmRISER.dfHalterNr");
			Int.PalLog("RISER storniert: " + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(this.dfHalterNr.Number, 5, 0));
			Sal.MessageBox("RISER-Anfrage wurde gelöscht.", "Ok", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			this.DestroyWindow();
			#endregion
		}
		#endregion
	}
}
