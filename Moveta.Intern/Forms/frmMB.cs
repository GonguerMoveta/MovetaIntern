// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmMB : SalFormWindow
	{
		#region Window Variables
		public SalBoolean bOk = false;
		public SalSqlHandle hSqlMB = SalSqlHandle.Null;
		public SalNumber nZeile = 0;
		public SalBoolean bMBOk = false;
		public SalBoolean bVBOk = false;
		public SalString strBez = "";
		public SalString strPLZ = "";
		public SalDateTime dtMBZust = SalDateTime.Null;
		public SalString strN2 = "";
		public SalString strStr = "";
		public SalNumber nPGM = 0;
		public SalNumber PREAGANR = 0;
		public SalString PREAGN1 = "";
		public SalString PREAGN2 = "";
		public SalString PREAGN3 = "";
		public SalString PREAGRF = "";
		public SalString PREAGSH = "";
		public SalString PREAGPLZ = "";
		public SalString PREAGO = "";
		public SalString PREAGAL = "";
		public SalNumber PREPGM = 0;
		public SalString PREPGPLZ = "";
		public SalString PREPGO = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmMB()
		{
			// Assign global reference.
			App.frmMB = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmMB CreateWindow(Control owner)
		{
			frmMB frm = new frmMB();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmMB FromHandle(SalWindowHandle handle)
		{
			return ((frmMB)SalWindow.FromHandle(handle, typeof(frmMB)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <param name="strPLZ"></param>
		/// <param name="nDM"></param>
		/// <returns></returns>
		public SalString PalHoleGericht(SalString strPLZ, SalNumber nDM)
		{
			#region Local Variables
			SalBoolean bExists = false;
			SalString strSelect = "";
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				if (nDM <= 5112.92m)  // Amtsgericht
				{
					strSelect = " FROM ge WHERE gelg=0 AND geplz= " + strPLZ;
				}
				else
				{
					strSelect = " FROM ge WHERE gelg=1 AND geplz= " + strPLZ;
				}
				Int.SqlIstDa(strSelect, ref bExists);
				if (bExists) 
				{
					Int.SqlImmedSel("SELECT gebez INTO :frmMB.strBez " + strSelect);
					return strBez;
				}
			}

			return "";
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="strXPLZ"></param>
		/// <param name="nDM"></param>
		/// <param name="strXBez"></param>
		/// <returns></returns>
		public SalNumber PalSpeGericht(SalString strXPLZ, SalNumber nDM, SalString strXBez)
		{
			#region Local Variables
			SalBoolean bExists = false;
			SalString strSelect = "";
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				strBez = strXBez;
				strPLZ = strXPLZ;
				if (nDM <= 5112.92m)  // Amtsgericht
				{
					strSelect = " WHERE gelg=0 AND geplz= " + strPLZ;
				}
				else
				{
					strSelect = " WHERE gelg=1 AND geplz= " + strPLZ;
				}
				Int.SqlIstDa("FROM ge " + strSelect, ref bExists);
				if (bExists) 
				{
					Int.SqlImmed("UPDATE ge SET gebez = :frmMB.strBez " + strSelect);
				}
				else
				{
					if (nDM <= 5112.92m) 
					{
						Int.SqlImmed(@"INSERT INTO ge (gelg, geplz, gebez)
VALUES(0, :frmMB.strPLZ, :frmMB.strBez)");
					}
					else
					{
						Int.SqlImmed(@"INSERT INTO ge (gelg, geplz, gebez)
VALUES(1, :frmMB.strPLZ, :frmMB.strBez)");
					}
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmMB WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMB_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmMB_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmMB_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMB_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlConnection(ref this.hSqlMB);
			// Call SalDisableWindow( pbMBNeu )
			// Call SalDisableWindow( pbVBNeu )
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmMB_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlMB.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// dfProzNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfProzNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfProzNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfProzNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			this.dfProzDatum.Clear();
			Int.SqlIstDa(" from pr where prnr=:frmMB.dfProzNr", ref this.bOk);
			if (this.bOk) 
			{
				Int.SqlImmedSel(@"SELECT prdatum, praz, prterminvb, prterminva, prgername
into :frmMB.dfProzDatum,  :frmMB.dfAZ, :frmMB.dfTerminVB, :frmMB.dfTerminVA, :frmMB.dfGericht
from pr
WHERE prnr=:frmMB.dfProzNr");
				// 13.05.19 Ä1852
				Int.SqlIstDa("FROM ge WHERE gebez = :frmMB.dfGericht AND gestr IS NOT NULL", ref Var.bExists);
				if (!(Var.bExists)) 
				{
					Sal.MessageBox(@"Für Gericht ist noch keine Straße hinterlegt!
Bitte in Daten ändern hinterlegen.", "Straße fehlt", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}

				Int.SqlImmedSel(@"SELECT prdarztnr, prdhalternr,
preagn1a || ' ' || preagn2a || ', ' || preagoa,
preagn1b || ' ' || preagn2b || ', ' || preagob,
preagn1c || ' ' || preagn2c || ', ' || preagoc,
preagn1d || ' ' || preagn2d || ', ' || preagod,
preazb, preazc, preazd,
hti || hvn || ' ' || hnn, hort, hland, hname2, hstr
into  :frmMB.dfArztNr, :frmMB.dfHalterNr, :frmMB.dfAG1, :frmMB.dfAG2, :frmMB.dfAG3, :frmMB.dfAG4,
:frmMB.dfAZb, :frmMB.dfAZc, :frmMB.dfAZd,
:frmMB.dfHN1, :frmMB.dfHO, :frmMB.dfHLC, :frmMB.strN2, :frmMB.strStr
from pre, prd, h
WHERE preproznr=prdnr AND prdnr=:frmMB.dfProzNr AND prdarztnr=harztnr AND prdhalternr=hhalternr AND hdeaktiv IS NULL");
				if (this.dfAG1.Text == " , ") 
				{
					this.dfAG1.Text = "";
				}
				if (this.dfAG2.Text == " , ") 
				{
					this.dfAG2.Text = "";
					this.dfAZb.HideWindow();
				}
				else
				{
					this.dfAZb.ShowWindow();
				}
				if (this.dfAG3.Text == " , ") 
				{
					this.dfAG3.Text = "";
					this.dfAZc.HideWindow();
				}
				else
				{
					this.dfAZc.ShowWindow();
				}
				if (this.dfAG4.Text == " , ") 
				{
					this.dfAG4.Text = "";
					this.dfAZd.HideWindow();
				}
				else
				{
					this.dfAZd.ShowWindow();
				}

				this.dfZust.Text = Int.PalZust(this.dfArztNr.Number);
				this.tblMB.Populate(this.hSqlMB, @"SELECT akdatum, aktypdetail, akdm, akzust
INTO :frmMB.tblMB.coldtDatum, :frmMB.tblMB.colsVorgang, :frmMB.tblMB.colnDM,
:frmMB.tblMB.coldtZust
FROM ak
WHERE akproznr = :frmMB.dfProzNr AND aktyp ='MB' AND akdeaktiv IS NULL ORDER BY akdatum", Sys.TBL_FillAll);
			}
			else
			{
				Sal.WaitCursor(false);
				Sal.MessageBox(@"angegebene PR-Nr.
ist nicht vorhanden !", "PR falsch", (Sys.MB_Ok | Sys.MB_IconStop));
				this.dfProzNr.Clear();
			}
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// dfAZ WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAZ_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfAZ_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAZ_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			Int.SqlImmedX(@"UPDATE pr
SET praz = :frmMB.dfAZ
WHERE prnr = :frmMB.dfProzNr");
			Sal.MessageBeep(0);
			this.tblMB.SetFocusCell(Sys.TBL_MinRow, this.tblMB.coldtZust, 0, 0);
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// dfAZb WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAZb_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfAZb_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAZb_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedX(@"UPDATE pre
SET preazb = :frmMB.dfAZb
WHERE preproznr = :frmMB.dfProzNr");
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// dfAZc WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAZc_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfAZc_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAZc_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedX(@"UPDATE pre
SET preazc = :frmMB.dfAZc
WHERE preproznr = :frmMB.dfProzNr");
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// dfAZd WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAZd_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfAZd_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfAZd_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedX(@"UPDATE pre
SET preazd = :frmMB.dfAZd
WHERE preproznr = :frmMB.dfProzNr");
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// tblMB WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblMB_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// 04.03.02 On SAM_SetFocus
				
				case Sys.SAM_SetFocus:
					this.tblMB_OnSAM_SetFocus(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_SetFocus event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblMB_OnSAM_SetFocus(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.wParam == Sal.WindowHandleToNumber(this.dfAZ)) 
			{
				// 18.12.06 Ä47
				// Call SalTblSetFocusCell( tblMB, 1, coldtZust, 0, 0 )
				this.tblMB.SetFocusCell(0, this.tblMB.coldtZust, 0, 0);
			}
			#endregion
		}
		
		/// <summary>
		/// dfTerminVB WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfTerminVB_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfTerminVB_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfTerminVB_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			this.bMBOk = false;
			this.bVBOk = false;
			this.nZeile = Sys.TBL_MinRow;
			while (this.tblMB.FindNextRow(ref this.nZeile, 0, 0)) 
			{
				this.tblMB.SetFocusRow(this.nZeile);
				if (this.tblMB.colsVorgang.Text == "MB") 
				{
					this.bMBOk = true;
				}
				if (this.tblMB.colsVorgang.Text == "VB") 
				{
					this.bVBOk = true;
				}
			}

			if (!(this.bMBOk) && this.dfTerminVB.DateTime == Sys.DATETIME_Null) 
			{
				Sal.WaitCursor(false);
				this.dfTerminVB.DateTime = Sys.DATETIME_Null;
				Sal.MessageBox(@"Noch kein MB gemacht.

Daher noch kein VB möglich !", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else if (this.bVBOk && this.dfTerminVB.DateTime != Sys.DATETIME_Null) 
			{
				Sal.WaitCursor(false);
				this.dfTerminVB.DateTime = Sys.DATETIME_Null;
				Sal.MessageBox(@"Bereits VB gemacht.

Daher kein weiterer VB möglich !", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				Int.SqlImmedX(@"UPDATE pr
SET prterminvb = :frmMB.dfTerminVB
WHERE prnr = :frmMB.dfProzNr");
				Sal.MessageBeep(0);
			}
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// dfTerminVA WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfTerminVA_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfTerminVA_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfTerminVA_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			this.bMBOk = false;
			this.bVBOk = false;
			this.nZeile = Sys.TBL_MinRow;
			while (this.tblMB.FindNextRow(ref this.nZeile, 0, 0)) 
			{
				this.tblMB.SetFocusRow(this.nZeile);
				if (this.tblMB.colsVorgang.Text == "MB") 
				{
					this.bMBOk = true;
				}
				if (this.tblMB.colsVorgang.Text == "VB") 
				{
					this.bVBOk = true;
				}
			}

			if ((!(this.bMBOk) || !(this.bVBOk)) && this.dfTerminVA.DateTime != Sys.DATETIME_Null) 
			{
				Sal.WaitCursor(false);
				this.dfTerminVA.DateTime = Sys.DATETIME_Null;
				Sal.MessageBox(@"Noch kein MB oder VB gemacht.

Daher noch kein VA möglich !", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				Int.SqlImmedX(@"UPDATE pr
SET prterminva = :frmMB.dfTerminVA
WHERE prnr = :frmMB.dfProzNr");
				Sal.MessageBeep(0);
			}
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// dfGericht WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfGericht_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfGericht_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfGericht_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// If IDYES = SalMessageBox('Soll ' || dfGericht || ' für alle MBs
			// mit PLZ ' || SalStrLeftX(dfHO,5) || ' gelten ?', 'Für alle MBs ?', MB_YesNo|MB_IconQuestion)
			if (this.dfHLC.Text != "DE") 
			{
				Sal.MessageBox("Die Gerichtsdatenbank wird nicht auch aktualisiert, da keine deutsche Adresse!", "Schtung", Sys.MB_Ok);
			}
			else
			{
				if (this.cbLG.Checked) 
				{
					this.PalSpeGericht(((SalString)this.dfHO.Text).Left(5), 20000, this.dfGericht.Text);
				}
				else
				{
					this.PalSpeGericht(((SalString)this.dfHO.Text).Left(5), 1, this.dfGericht.Text);
				}
			}
			Int.SqlImmed(@"UPDATE pr SET prgername = :frmMB.dfGericht
WHERE prnr = :frmMB.dfProzNr");
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// pbGerSuch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbGerSuch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbGerSuch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbGerSuch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sys.IDYES == Sal.MessageBox(@"Beträgt die HF € 5112,92
oder weniger ?", "unter 5112,92  ?", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
			{
				this.dfGericht.Text = this.PalHoleGericht(((SalString)this.dfHO.Text).Left(5), 1);
				this.cbLG.Checked = false;
			}
			else
			{
				this.dfGericht.Text = this.PalHoleGericht(((SalString)this.dfHO.Text).Left(5), 20000);
				this.cbLG.Checked = true;
			}
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(true);
			this.nZeile = Sys.TBL_MinRow;
			while (this.tblMB.FindNextRow(ref this.nZeile, Sys.ROW_Edited, 0)) 
			{
				this.tblMB.SetFocusRow(this.nZeile);
				Int.SqlImmed(@"UPDATE ak SET
akzust = :frmMB.tblMB.coldtZust
WHERE akproznr = :frmMB.dfProzNr AND aktypdetail = :frmMB.tblMB.colsVorgang");
				Sal.MessageBeep(0);
			}
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// pbMBNeu1 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMBNeu1_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				// On SAM_Click
				
				// MB
				
				// Call SqlImmedSel('SELECT akzust
				
				// INTO :frmMB.dtMBZust
				
				// FROM ak WHERE akproznr = :frmMB.dfProzNr
				
				// AND aktyp=\'MB\' AND aktypdetail = \'MB\' ')
				
				// Call SqlImmedSel( 'SELECT preagn1a, preagn2a, preagrfa, preagsha, preagplza, preagoa, prepgma, prepgplza, prepgoa
				
				// INTO :frmMB.PREAGN1, :frmMB.PREAGN2, :frmMB.PREAGRF, :frmMB.PREAGSH, :frmMB.PREAGPLZ, :frmMB.PREAGO,
				
				// :frmMB.PREPGM, :frmMB.PREPGPLZ, :frmMB.PREPGO
				
				// FROM pre WHERE preproznr = :frmMB.dfProzNr' )
				
				// Call SqlImmedX('INSERT INTO MBK
				
				// (mbkproznr, mbktyp, mbkzustmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkuser,
				
				// mbkskobet, mbkskobeg, mbkausk, mbkpgm, mbkpgplz, mbkpgo, mbkaz)
				
				// VALUES( :frmMB.dfProzNr, \'MBNeu\', :frmMB.dtMBZust,
				
				// :frmMB.PREAGN1, :frmMB.PREAGN2, :frmMB.PREAGSH, :frmMB.PREAGO, :strBNUser,
				
				// :frmMB.dfMBNeuSKOBET, :frmMB.dfMBNeuSKOBEG, :frmMB.dfMBNeuAUSK, :frmMB.PREPGM, :frmMB.PREPGPLZ, :frmMB.PREPGO, :frmMB.dfAZ)')
				
				// Call PalLog('MB-Neuzustelllung: PR' || PalStrNum(dfProzNr, 5, 0))
				
				// Call SalMessageBeep( 0 )
				
				case Sys.SAM_Click:
					this.pbMBNeu1_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMBNeu1_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// MB
			Int.SqlImmedSel(@"SELECT akzust
INTO :frmMB.dtMBZust
FROM ak WHERE akproznr = :frmMB.dfProzNr
AND aktyp='MB' AND aktypdetail = 'MB' AND akdeaktiv IS NULL ");
			Int.SqlImmedSel(@"SELECT preagn1a, preagn2a, preagrfa, preagsha, preagplza, preagoa, preagala, prepgma, prepgplza, prepgoa
INTO :frmMB.PREAGN1, :frmMB.PREAGN2, :frmMB.PREAGRF, :frmMB.PREAGSH, :frmMB.PREAGPLZ, :frmMB.PREAGO, :frmMB.PREAGAL,
:frmMB.PREPGM, :frmMB.PREPGPLZ, :frmMB.PREPGO
FROM pre WHERE preproznr = :frmMB.dfProzNr");

			Int.SqlImmedX(@"INSERT INTO MBK
(mbkproznr, mbktyp, mbkzustmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkagal, mbkuser,
mbkskobet, mbkskobeg, mbkausk, mbkpgm, mbkpgplz, mbkpgo, mbkaz, mbkhrf, mbkagplz)
VALUES( :frmMB.dfProzNr, 'MBNeu', :frmMB.dtMBZust,
:frmMB.PREAGN1, :frmMB.PREAGN2, :frmMB.PREAGSH, :frmMB.PREAGO, :frmMB.PREAGAL, :strBNUser,
:frmMB.dfMBNeuSKOBET, :frmMB.dfMBNeuSKOBEG, :frmMB.dfMBNeuAUSK, :frmMB.PREPGM, :frmMB.PREPGPLZ, :frmMB.PREPGO, :frmMB.dfAZ, :frmMB.PREAGRF, :frmMB.PREAGPLZ)");
			Int.PalLog("MB-Neuzustelllung: PR" + Int.PalStrNum(this.dfProzNr.Number, 5, 0));
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// pbVBNeu1 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbVBNeu1_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbVBNeu1_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbVBNeu1_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT preagn1a, preagn2a, preagrfa, preagsha, preagplza, preagoa, preagala, prepgma, prepgplza, prepgoa
INTO :frmMB.PREAGN1, :frmMB.PREAGN2, :frmMB.PREAGRF, :frmMB.PREAGSH, :frmMB.PREAGPLZ, :frmMB.PREAGO, :frmMB.PREAGAL, :frmMB.PREPGM, :frmMB.PREPGPLZ, :frmMB.PREPGO
FROM pre WHERE preproznr = :frmMB.dfProzNr");
			Int.SqlImmedX(@"INSERT INTO MBK
(mbkproznr, mbktyp, mbkzustmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkagal, mbkuser, mbkpgm, mbkpgplz, mbkpgo, mbkaz, mbkagplz)
VALUES( :frmMB.dfProzNr, 'VBNeu', NULL,
:frmMB.PREAGN1, :frmMB.PREAGN2, :frmMB.PREAGSH, :frmMB.PREAGO, :frmMB.PREAGAL, :strBNUser,
:frmMB.PREPGM, :frmMB.PREPGPLZ, :frmMB.PREPGO, :frmMB.dfAZ, :frmMB.PREAGPLZ)");
			Int.PalLog("VB-Neuzustelllung: PR" + Int.PalStrNum(this.dfProzNr.Number, 5, 0));
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// pbMBNeu2 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMBNeu2_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbMBNeu2_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMBNeu2_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// MB
			Int.SqlImmedSel(@"SELECT akzust
INTO :frmMB.dtMBZust
FROM ak WHERE akproznr = :frmMB.dfProzNr
AND aktyp='MB' AND aktypdetail = 'MB' AND akdeaktiv IS NULL ");
			Int.SqlImmedSel(@"SELECT preagn1b, preagn2b, preagrfb, preagshb, preagplzb, preagob, preagalb, prepgmb, prepgplzb, prepgob
INTO :frmMB.PREAGN1, :frmMB.PREAGN2, :frmMB.PREAGRF, :frmMB.PREAGSH, :frmMB.PREAGPLZ, :frmMB.PREAGO, :frmMB.PREAGAL,
:frmMB.PREPGM, :frmMB.PREPGPLZ, :frmMB.PREPGO
FROM pre WHERE preproznr = :frmMB.dfProzNr");

			Int.SqlImmedX(@"INSERT INTO MBK
(mbkproznr, mbktyp, mbkzustmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkagal, mbkuser,
mbkskobet, mbkskobeg, mbkausk, mbkpgm, mbkpgplz, mbkpgo, mbkaz, mbkhrf, mbkagplz)
VALUES( :frmMB.dfProzNr, 'MBNeu', :frmMB.dtMBZust,
:frmMB.PREAGN1, :frmMB.PREAGN2, :frmMB.PREAGSH, :frmMB.PREAGO, :frmMB.PREAGAL, :strBNUser,
:frmMB.dfMBNeuSKOBET, :frmMB.dfMBNeuSKOBEG, :frmMB.dfMBNeuAUSK, :frmMB.PREPGM, :frmMB.PREPGPLZ, :frmMB.PREPGO, :frmMB.dfAZb, :frmMB.PREAGRF, :frmMB.PREAGPLZ)");
			Int.PalLog("MB-Neuzustelllung: PR" + Int.PalStrNum(this.dfProzNr.Number, 5, 0));
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// pbVBNeu2 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbVBNeu2_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbVBNeu2_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbVBNeu2_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT preagn1b, preagn2b, preagrfb, preagshb, preagplzb, preagob, preagalb, prepgmb, prepgplzb, prepgob
INTO :frmMB.PREAGN1, :frmMB.PREAGN2, :frmMB.PREAGRF, :frmMB.PREAGSH, :frmMB.PREAGPLZ, :frmMB.PREAGO, :frmMB.PREAGAL, :frmMB.PREPGM, :frmMB.PREPGPLZ, :frmMB.PREPGO
FROM pre WHERE preproznr = :frmMB.dfProzNr");
			Int.SqlImmedX(@"INSERT INTO MBK
(mbkproznr, mbktyp, mbkzustmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkagal, mbkuser, mbkpgm, mbkpgplz, mbkpgo, mbkaz, mbkagplz)
VALUES( :frmMB.dfProzNr, 'VBNeu', NULL,
:frmMB.PREAGN1, :frmMB.PREAGN2, :frmMB.PREAGSH, :frmMB.PREAGO, :frmMB.PREAGAL, :strBNUser,
:frmMB.PREPGM, :frmMB.PREPGPLZ, :frmMB.PREPGO, :frmMB.dfAZb, :frmMB.PREAGPLZ)");
			Int.PalLog("VB-Neuzustelllung: PR" + Int.PalStrNum(this.dfProzNr.Number, 5, 0));
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// pbMBNeu3 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMBNeu3_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbMBNeu3_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMBNeu3_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// MB
			Int.SqlImmedSel(@"SELECT akzust
INTO :frmMB.dtMBZust
FROM ak WHERE akproznr = :frmMB.dfProzNr
AND aktyp='MB' AND aktypdetail = 'MB' AND akdeaktiv IS NULL ");
			Int.SqlImmedSel(@"SELECT preagn1c, preagn2c, preagrfc, preagshc, preagplzc, preagoc, preagalc, prepgmc, prepgplzc, prepgoc
INTO :frmMB.PREAGN1, :frmMB.PREAGN2, :frmMB.PREAGRF, :frmMB.PREAGSH, :frmMB.PREAGPLZ, :frmMB.PREAGO, :frmMB.PREAGAL,
:frmMB.PREPGM, :frmMB.PREPGPLZ, :frmMB.PREPGO
FROM pre WHERE preproznr = :frmMB.dfProzNr");

			Int.SqlImmedX(@"INSERT INTO MBK
(mbkproznr, mbktyp, mbkzustmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkagal, mbkuser,
mbkskobet, mbkskobeg, mbkausk, mbkpgm, mbkpgplz, mbkpgo, mbkaz, mbkhrf, mbkagplz)
VALUES( :frmMB.dfProzNr, 'MBNeu', :frmMB.dtMBZust,
:frmMB.PREAGN1, :frmMB.PREAGN2, :frmMB.PREAGSH, :frmMB.PREAGO, :frmMB.PREAGAL, :strBNUser,
:frmMB.dfMBNeuSKOBET, :frmMB.dfMBNeuSKOBEG, :frmMB.dfMBNeuAUSK, :frmMB.PREPGM, :frmMB.PREPGPLZ, :frmMB.PREPGO, :frmMB.dfAZc, :frmMB.PREAGRF, :frmMB.PREAGPLZ)");
			Int.PalLog("MB-Neuzustelllung: PR" + Int.PalStrNum(this.dfProzNr.Number, 5, 0));
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// pbVBNeu3 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbVBNeu3_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbVBNeu3_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbVBNeu3_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT preagn1c, preagn2c, preagrfc, preagshc, preagplzc, preagoc, preagalc, prepgmc, prepgplzc, prepgoc
INTO :frmMB.PREAGN1, :frmMB.PREAGN2, :frmMB.PREAGRF, :frmMB.PREAGSH, :frmMB.PREAGPLZ, :frmMB.PREAGO, :frmMB.PREAGAL, :frmMB.PREPGM, :frmMB.PREPGPLZ, :frmMB.PREPGO
FROM pre WHERE preproznr = :frmMB.dfProzNr");
			Int.SqlImmedX(@"INSERT INTO MBK
(mbkproznr, mbktyp, mbkzustmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkagal, mbkuser, mbkpgm, mbkpgplz, mbkpgo, mbkaz, mbkagplz)
VALUES( :frmMB.dfProzNr, 'VBNeu', NULL,
:frmMB.PREAGN1, :frmMB.PREAGN2, :frmMB.PREAGSH, :frmMB.PREAGO, :frmMB.PREAGAL, :strBNUser,
:frmMB.PREPGM, :frmMB.PREPGPLZ, :frmMB.PREPGO, :frmMB.dfAZc, :frmMB.PREAGPLZ)");
			Int.PalLog("VB-Neuzustelllung: PR" + Int.PalStrNum(this.dfProzNr.Number, 5, 0));
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// pbMBNeu4 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMBNeu4_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbMBNeu4_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbMBNeu4_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// MB
			Int.SqlImmedSel(@"SELECT akzust
INTO :frmMB.dtMBZust
FROM ak WHERE akproznr = :frmMB.dfProzNr
AND aktyp='MB' AND aktypdetail = 'MB' AND akdeaktiv IS NULL ");
			Int.SqlImmedSel(@"SELECT preagn1d, preagn2d, preagrfd, preagshd, preagplzd, preagod, preagald, prepgmd, prepgplzd, prepgod
INTO :frmMB.PREAGN1, :frmMB.PREAGN2, :frmMB.PREAGRF, :frmMB.PREAGSH, :frmMB.PREAGPLZ, :frmMB.PREAGO, :frmMB.PREAGAL,
:frmMB.PREPGM, :frmMB.PREPGPLZ, :frmMB.PREPGO
FROM pre WHERE preproznr = :frmMB.dfProzNr");

			Int.SqlImmedX(@"INSERT INTO MBK
(mbkproznr, mbktyp, mbkzustmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkagal, mbkuser,
mbkskobet, mbkskobeg, mbkausk, mbkpgm, mbkpgplz, mbkpgo, mbkaz, mbkhrf, mbkagplz)
VALUES( :frmMB.dfProzNr, 'MBNeu', :frmMB.dtMBZust,
:frmMB.PREAGN1, :frmMB.PREAGN2, :frmMB.PREAGSH, :frmMB.PREAGO, :frmMB.PREAGAL, :strBNUser,
:frmMB.dfMBNeuSKOBET, :frmMB.dfMBNeuSKOBEG, :frmMB.dfMBNeuAUSK, :frmMB.PREPGM, :frmMB.PREPGPLZ, :frmMB.PREPGO, :frmMB.dfAZd, :frmMB.PREAGRF, :frmMB.PREAGPLZ)");
			Int.PalLog("MB-Neuzustelllung: PR" + Int.PalStrNum(this.dfProzNr.Number, 5, 0));
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// pbVBNeu4 WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbVBNeu4_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbVBNeu4_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbVBNeu4_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT preagn1d, preagn2d, preagrfd, preagshd, preagplzd, preagod, preagald, prepgmd, prepgplzd, prepgod
INTO :frmMB.PREAGN1, :frmMB.PREAGN2, :frmMB.PREAGRF, :frmMB.PREAGSH, :frmMB.PREAGPLZ, :frmMB.PREAGO, :frmMB.PREAGAL, :frmMB.PREPGM, :frmMB.PREPGPLZ, :frmMB.PREPGO
FROM pre WHERE preproznr = :frmMB.dfProzNr");
			Int.SqlImmedX(@"INSERT INTO MBK
(mbkproznr, mbktyp, mbkzustmb, mbkhname1, mbkhname2, mbkhstr, mbkhort, mbkagal, mbkuser, mbkpgm, mbkpgplz, mbkpgo, mbkaz, mbkagplz)
VALUES( :frmMB.dfProzNr, 'VBNeu', NULL,
:frmMB.PREAGN1, :frmMB.PREAGN2, :frmMB.PREAGSH, :frmMB.PREAGO, :frmMB.PREAGAL, :strBNUser,
:frmMB.PREPGM, :frmMB.PREPGPLZ, :frmMB.PREPGO, :frmMB.dfAZd, :frmMB.PREAGPLZ)");
			Int.PalLog("VB-Neuzustelllung: PR" + Int.PalStrNum(this.dfProzNr.Number, 5, 0));
			Sal.MessageBeep(0);
			#endregion
		}
		
		/// <summary>
		/// pbAGAendern WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAGAendern_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAGAendern_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAGAendern_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			frmMBErf.CreateWindow(this, "frmMB", this.dfProzNr.Number);
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblMB
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblMBTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmMB _frmMB = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblMBTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmMB frmMB
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmMB == null) 
					{
						_frmMB = (frmMB)this.FindForm();
					}
					return _frmMB;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblMBTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblMBTableWindow)SalWindow.FromHandle(handle, typeof(tblMBTableWindow)));
			}
			#endregion
			
			#region Window Actions
			
			/// <summary>
			/// coldtZust WindowActions Handler
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void coldtZust_WindowActions(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				switch (e.ActionType)
				{
					case Sys.SAM_Validate:
						this.coldtZust_OnSAM_Validate(sender, e);
						break;
				}
				#endregion
			}
			
			/// <summary>
			/// SAM_Validate event handler.
			/// </summary>
			/// <param name="sender"></param>
			/// <param name="e"></param>
			private void coldtZust_OnSAM_Validate(object sender, WindowActionsEventArgs e)
			{
				#region Actions
				e.Handled = true;
				this.frmMB.pbOk.PostMessage(Sys.SAM_Click, 0, 0);
				#endregion
			}
			#endregion
		}
		#endregion
	}
}
