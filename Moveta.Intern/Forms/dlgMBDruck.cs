// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class dlgMBDruck : SalDialogBox
	{
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public dlgMBDruck()
		{
			// Assign global reference.
			App.dlgMBDruck = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the modal dialog.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static SalNumber ModalDialog(Control owner)
		{
			dlgMBDruck dlg = new dlgMBDruck();
			SalNumber ret = dlg.ShowDialog(owner);
			return ret;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static dlgMBDruck FromHandle(SalWindowHandle handle)
		{
			return ((dlgMBDruck)SalWindow.FromHandle(handle, typeof(dlgMBDruck)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// dlgMBDruck WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgMBDruck_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.dlgMBDruck_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dlgMBDruck_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// pkOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pkOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pkOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pkOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.rbDeckBlatt.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Deckbl√§tter -  Bitte warten !')
				// Set frmMahn.nErr = 1
				// Set frmMahn.strReportName = 'MBDECKBL'
				// Call PalReport(frmMahn,'MBDECKBL.QRP',
				// ':frmMahn.nTANr,:frmMahn.strTAN1,:frmMahn.strTAN2,:frmMahn.strTAStr,:frmMahn.strTAOrt,
				// :frmMahn.nTHNr,:frmMahn.strTHN1,:frmMahn.strTHN2,:frmMahn.strTHStr,:frmMahn.strTHOrt,:frmMahn.strTHLand,
				// :frmMahn.nRg1,
				// :frmMahn.nHF1,
				// :frmMahn.nMG1,
				// :frmMahn.nZI1,
				// :frmMahn.dtDat1,
				// :frmMahn.dtMBDatum, :frmMahn.nGerKosten, :frmMahn.nMBNr, :frmMahn.strZust',
				// 'ArztNr, AName1, AName2, AStr, AOrt,
				// HalterNr, HName1, HName2, HStr, HOrt, HLand,
				// Rg1,
				// HF1,
				// MG1,
				// ZI1,
				// Dat1,
				// MBDATUM, GERKOSTEN, MBNr, Zei',
				// nErr)
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "MB-Deckblatt.lst", "");
			}
			else if (this.rbGerKosten.Checked == true) 
			{
				// Call SalStatusSetText(hWndForm,'Erstelle Gerichtskosten-Liste -  Bitte warten !')
				// Set frmMahn.nErr = 1
				// Set frmMahn.strReportName = 'GERKOST'
				// Call PalReport(frmMahn,'GERKOST.QRP',
				// ':frmMahn.nTANr, :frmMahn.nTHNr, :frmMahn.strTHN1,
				// :frmMahn.nRechNr, :frmMahn.nGerKosten, :frmMahn.nMBNr, :frmMahn.strZust',
				// 'ArztNr, HalterNr, HName1, RechNr, MBKosten, MBNr, Zei',
				// nErr)
				// Call SalWaitCursor( FALSE )
				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "Gerichtskosten.lst", "");
			}
			// Else If rbMB = TRUE
			// Call SalStatusSetText(hWndForm,'Erstelle Mahnbescheide -  Bitte warten !')
			// Set frmMahn.nErr = 1
			// Set frmMahn.strReportName = 'MB'
			// Call PalReport(frmMahn,'MB.QRP',
			// ':frmMahn.nTANr,:frmMahn.strTAN1,:frmMahn.strTAN2,:frmMahn.strTAStr,:frmMahn.strTAOrt,
			// :frmMahn.nTHNr,:frmMahn.strTHN1,:frmMahn.strTHN2,:frmMahn.strTHStr,:frmMahn.strTHOrt,
			// :frmMahn.nRg1, :frmMahn.nRg2, :frmMahn.nRg3, :frmMahn.nRg4, :frmMahn.nRg5, :frmMahn.nRg6,
			// :frmMahn.nHF1, :frmMahn.nHF2, :frmMahn.nHF3, :frmMahn.nHF4, :frmMahn.nHF5, :frmMahn.nHF6,
			// :frmMahn.nMG1, :frmMahn.nMG2, :frmMahn.nMG3, :frmMahn.nMG4, :frmMahn.nMG5, :frmMahn.nMG6,
			// :frmMahn.nZinsProz,
			// :frmMahn.dtDat1, :frmMahn.dtDat2, :frmMahn.dtDat3, :frmMahn.dtDat4, :frmMahn.dtDat5, :frmMahn.dtDat6,
			// :frmMahn.dtFaell1, :frmMahn.dtFaell2, :frmMahn.dtFaell3, :frmMahn.dtFaell4, :frmMahn.dtFaell5, :frmMahn.dtFaell6,
			// :frmMahn.dtMBDatum, :frmMahn.nGerKosten, :frmMahn.strGerName,
			// :frmMahn.nEheleute, :frmMahn.strEhepartner, :frmMahn.nNebenford, :frmMahn.nAnzRech, :frmMahn.nMBNr,  :frmMahn.nBeiblatt, :frmMahn.nDMHF',
			// 'ArztNr, AName1, AName2, AStr, AOrt,
			// HalterNr, HName1, HName2, HStr, HOrt,
			// Rg1, Rg2, Rg3, Rg4, Rg5, Rg6,
			// HF1, HF2, HF3, HF4, HF5, HF6,
			// MG1, MG2, MG3, MG4, MG5, MG6,
			// ZI1,
			// Dat1, Dat2, Dat3, Dat4, Dat5, Dat6,
			// Faell1, Faell2, Faell3, Faell4, Faell5, Faell6,
			// MBDATUM, GERKOSTEN, GERNAME, EHELEUTE, EHEPARTNER, Nebenford, AnzRech, MBNr, Beiblatt, Hauptford',
			// nErr)
			// Call SalWaitCursor( FALSE )
			// Else If rbBB = TRUE
			// Call SalStatusSetText(hWndForm,'Erstelle MB-Aufkleber -  Bitte warten !')
			// Set frmMahn.nErr = 1
			// Set frmMahn.strReportName = 'MB-BB'
			// Call PalReport(frmMahn,'MB-BB.QRP',
			// ':frmMahn.nMBNr, :frmMahn.dtDat, :frmMahn.nHF, :frmMahn.nMG','ProzNr, Dat, HF, MG',nErr)
			// Call SalWaitCursor( FALSE )
			// Else If rbMBAufkl = TRUE
			// Call SalStatusSetText(hWndForm,'Erstelle MB-Aufkleber -  Bitte warten !')
			// Set frmMahn.nErr = 1
			// Set frmMahn.strReportName = 'MBAUFKL'
			// Call PalReport(frmMahn,'MBAUFKL.QRP',
			// ':frmMahn.nTANr, :frmMahn.strTHN1, :frmMahn.nRg1','ArztNr, HName1, Rg1',nErr)
			// Call SalWaitCursor( FALSE )
			this.SetStatusBarText("");
			this.EndDialog(0);
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.DestroyWindow();
			#endregion
		}
		#endregion
	}
}
