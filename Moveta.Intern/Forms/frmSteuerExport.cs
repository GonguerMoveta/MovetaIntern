// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// 06.11.06 Ä41
	/// </summary>
	public partial class frmSteuerExport : SalFormWindow
	{
		#region Window Variables
		public SalFileHandle hFile = SalFileHandle.Null;
		public SalString strFile = "";
		public SalNumber nFileType = 0;
		public SalSqlHandle hSqlTR = SalSqlHandle.Null;
		public SalNumber nFetch = 0;
		public SalBoolean bOk = false;
		public SalString strDummy = "";
		public SalString strText = "";
		public SalString strText2 = "";
		public SalString strText3 = "";
		public SalString strDiv = "";
		public SalNumber nIndex = 0;
		public SalNumber nLocalIndex = 0;
		public SalNumber nItemFlags = 0;
		public SalNumber nColor = 0;
		public SalString strKen = "";
		public SalDateTime dtErfDat = SalDateTime.Null;
		public SalString strSelect = "";
		public SalNumber nArztNr = 0;
		public SalNumber nRechNr = 0;
		public SalNumber nRechNrAlt = 0;
		public SalNumber nRechNrNeu = 0;
		public SalNumber nDiff = 0;
		public SalString strDir = "";
		public SalString strProgOrdner = "";
		public SalNumber nDummy = 0;
		public SalFileHandle hFileZ = SalFileHandle.Null;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmSteuerExport()
		{
			// Assign global reference.
			App.frmSteuerExport = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmSteuerExport CreateWindow(Control owner)
		{
			frmSteuerExport frm = new frmSteuerExport();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmSteuerExport FromHandle(SalWindowHandle handle)
		{
			return ((frmSteuerExport)SalWindow.FromHandle(handle, typeof(frmSteuerExport)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <param name="strFile"></param>
		/// <param name="strSelect"></param>
		/// <param name="strFelder"></param>
		/// <returns></returns>
		public SalBoolean PalMakeFile(SalString strFile, SalString strSelect, SalString strFelder)
		{
			#region Local Variables
			SqlLocals.PalMakeFileLocals locals = new SqlLocals.PalMakeFileLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.strFile = strFile;
				locals.strSelect = strSelect;
				locals.strFelder = strFelder;

				strText = "";
				strText2 = "";
				strText3 = "";
				locals.bOk = true;
				if (hFile.Open(locals.strFile, Sys.OF_Exist)) 
				{
					hFile.Open(locals.strFile, Sys.OF_Delete);
					nFileType = Sys.OF_Create;
				}
				else
				{
					nFileType = Sys.OF_Create;
				}
				if (locals.bOk) 
				{
					this.SetStatusBarText("Erstelle " + locals.strFile);
					if (hFile.Open(locals.strFile, ((nFileType | Sys.OF_Write) | Sys.OF_Text))) 
					{
						hFile.PutString(locals.strFelder);
					}
					locals.bOk = true;
					Int.SqlHandleExec(hSqlTR, locals.strSelect, "Funktion: MakeFile", ref Var.nErr);
					nFetch = hSqlTR.FetchNext();
					while (nFetch != Sys.FETCH_EOF && locals.bOk) 
					{
						// 12.10.18 Audicon
						// Set strText = strText || SalNumberToChar ( 9 ) || strText2 || SalNumberToChar ( 9 ) || strText3
						if (strText2 != "") 
						{
							strText = strText + ((SalNumber)9).ToCharacter() + strText2;
						}
						if (strText3 != "") 
						{
							strText = strText + ((SalNumber)9).ToCharacter() + strText3;
						}

						while (!(hFile.PutString(strText)) && locals.bOk) 
						{
							hFile.Close();
							if (Sys.IDCANCEL == Sal.MessageBox(@"Die Platte/Diskette ist voll.

Legen Sie bitte eine neue ein.", "Achtung", Sys.MB_OkCancel)) 
							{
								locals.bOk = false;
							}
							else
							{
								hFile.Open(locals.strFile, ((nFileType | Sys.OF_Write) | Sys.OF_Text));
							}
						}
						nFetch = hSqlTR.FetchNext();
					}
					hSqlTR.Commit();
					if (locals.bOk) 
					{
						hFile.Close();
					}
					else
					{
						Sal.MessageBox("Die Übertragung der Datei " + locals.strFile + @"
wurde abgebrochen.", "Achtung", Sys.MB_Ok);
					}
				}
				hFile.Close();
				return locals.bOk;
			}
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmSteuerExport WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmSteuerExport_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmSteuerExport_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmSteuerExport_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmSteuerExport_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlConnection(ref this.hSqlTR);
			this.dfvon.Value = new SalDateTime(1900, 1, 1);
			this.dfbis.Value = new SalDateTime(2100, 12, 31);
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmSteuerExport_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlTR.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// dfNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel("SELECT aname1 INTO :frmSteuerExport.dfFirma FROM a WHERE aarztnr = :frmSteuerExport.dfNr");
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfNr.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Bitte wählen Sie den gewünschten Arzt aus.", "Abbruch", (Sys.MB_Ok | Sys.MB_IconExclamation));
				e.Return = false;
				return;
			}
			else
			{
				// 05.07.11 Ä603
				App.frmRgSuchen.strDrive = Sal.FileGetDrive();
				Sal.FileSetDrive("C:");
				Sal.WaitCursor(false);
				dlgLaufwerk.ModalDialog(this, "Steuerprüfer", ref this.strDir);
				Sal.FileSetDrive(App.frmRgSuchen.strDrive);
			}
			if (this.strDir == "") 
			{
				Sal.MessageBox("Bitte Ordner für die Exportdateien auswählen.", "Abbruch", (Sys.MB_Ok | Sys.MB_IconExclamation));
				e.Return = false;
				return;
			}
			else
			{
				if (!(this.hFile.Open(this.strDir + "\\TEST", ((Sys.OF_Create | Sys.OF_Text) | Sys.OF_Write)))) 
				{
					Sal.MessageBox(@"Im angegebenen Ordner
kann keine Datei erstellt werden !"".", "Achtung", Sys.MB_Ok);
				}
				else
				{
					Sal.WaitCursor(true);
					if (this.dfvon.Value == Sys.DATETIME_Null) 
					{
						this.dfvon.Value = new SalDateTime(1900, 1, 1);
					}
					if (this.dfbis.Value == Sys.DATETIME_Null) 
					{
						this.dfbis.Value = new SalDateTime(2199, 12, 31);
					}
					this.hFile.Close();
					// Prüfen, ob RechNr.-Lücken
					// Set nRechNrAlt = 0
					// Set bOk = (SqlHandleExecX(hSqlTR, '
					// SELECT rkarztnr, rkrechnr
					// INTO :frmSteuerExport.nArztNr, :frmSteuerExport.nRechNr
					// FROM rk
					// WHERE rkarztnr = :frmSteuerExport.dfNr AND rkrechdat BETWEEN :frmSteuerExport.dfvon AND :frmSteuerExport.dfbis AND rkrechnr < 999990
					// ORDER BY 1,2' ,'StPr-Export: RechNr.-Prüfung') = IDOK)
					// If bOk
					// Call SqlFetchNext(hSqlTR,nFetch)
					// While nFetch != FETCH_EOF
					// Set nDiff = nRechNr - nRechNrAlt
					// If nDiff > 1 And nRechNrAlt != 0
					// While nDiff > 1
					// Set nRechNrNeu = nRechNrAlt + nDiff -1
					// Call SqlImmedX('INSERT INTO RK (RKARZTNR, RKHALTERNR, RKRECHNR, RKBUCHTEXT, RKKZZAHL)
					// VALUES(:frmSteuerExport.dfNr, 0, :frmSteuerExport.nRechNrNeu, \'-\', 4) ')
					// Call PalLog('StPrf-Export: RechNr.' || SalNumberToStrX(nRechNrNeu,0))
					// Set nDiff = nDiff - 1
					// Set nRechNrAlt = nRechNr
					// Call SqlFetchNext(hSqlTR,nFetch)
					// Call SqlCommit(hSqlTR)

					this.bOk = false;
					// Rechnungen
					this.strFile = this.strDir + "\\Rechnungen.txt";
					if (this.PalMakeFile(this.strFile, @"SELECT  rkarztnr, rkrechnr, rkarztnr || @char(9) || rkhalternr || @char(9) || rkrechnr || @char(9) || rkbuchtext || @char(9) || rkrechdat || @char(9) || rkfaelldat || @char(9) || (rkdmleis+rkdmarzn) || @char(9) || (rkdmmahn+rkdmzins) ||
@char(9) ||
(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins-rkzaleis-rkzaarzn-rkzamahn-rkzazins), sum(rpdm)
INTO :frmSteuerExport.nArztNr, :frmSteuerExport.nRechNr, :frmSteuerExport.strText, :frmSteuerExport.strText2
FROM rk,rp
WHERE rkarztnr=rparztnr and rkhalternr=rphalternr and rkrechnr=rprechnr AND rkdeaktiv IS NULL
AND rkarztnr = :frmSteuerExport.dfNr AND rkrechdat BETWEEN :frmSteuerExport.dfvon.Value AND :frmSteuerExport.dfbis.Value AND rkrechnr < 999990 group by 1,2,3", @"ArztNr	HalterNr	RechNr	Buchungstext	Rechnungsdatum	Fälligkeitsdatum	Brutto-HF-EUR	MahnZins-EUR	Offen-EUR	Netto-HF-EUR")) 
					{
					}
					// Rechnungsdetails
					// Set strFile = strDir || '\\Rechnungsdetails.txt'
					// If PalMakeFile( strFile,
					// 'SELECT  rkarztnr || @char(9) || rkhalternr || @char(9) || rkrechnr || @char(9) || rpla || @char(9) || rpmwst || @char(9) || rpdatum || @char(9) || rprechtext || @char(9) || rpdm || @char(9) || rptext
					// INTO :frmSteuerExport.strText
					// FROM rk,rp
					// WHERE rkarztnr=rparztnr and rkhalternr=rphalternr and rkrechnr=rprechnr
					// AND rkarztnr = :frmSteuerExport.dfNr AND rkrechdat BETWEEN :frmSteuerExport.dfvon AND :frmSteuerExport.dfbis AND rkrechnr < 999990 ORDER BY rkarztnr, rkrechnr',
					// 'ArztNr	HalterNr	RechNr	Typ	MwSt	Datum	Bezeichnung	Netto-EUR	Text')
					// Kunden
					this.strFile = this.strDir + "\\Kunden.txt";
					if (this.PalMakeFile(this.strFile, @"SELECT DISTINCT rkarztnr*100000+rkhalternr, rkarztnr || @char(9) || rkhalternr || @char(9) || hnn || @char(9) || hvn || @char(9) || hname2 || @char(9) || hstr || @char(9) || hland || @char(9) || hort
INTO :frmSteuerExport.strDummy, :frmSteuerExport.strText
FROM rk, h
WHERE   rkarztnr=harztnr and rkhalternr=hhalternr AND rkdeaktiv IS NULL AND hdeaktiv IS NULL
AND rkarztnr = :frmSteuerExport.dfNr AND rkrechdat BETWEEN :frmSteuerExport.dfvon.Value AND :frmSteuerExport.dfbis.Value AND rkrechnr < 999990
ORDER BY rkarztnr,rkhalternr", @"ArztNr	HalterNr	Nachname	Vorname	Name2	Strasse	Land	PLZ-Ort")) 
					{
					}
					// Zahlungen
					this.strFile = this.strDir + "\\Zahlungen.txt";
					if (this.PalMakeFile(this.strFile, @"SELECT  zaarztnr || @char(9) || zahalternr || @char(9) || zarechnr || @char(9) || zakz || @char(9) || zabuchdat || @char(9) || zabelegnr || @char(9) || zadm || @char(9) || zabuchtext
INTO :frmSteuerExport.strText
FROM za
WHERE zaarztnr = :frmSteuerExport.dfNr AND zabuchdat BETWEEN :frmSteuerExport.dfvon.Value AND :frmSteuerExport.dfbis.Value AND zakz < 4 AND zadeaktiv IS NULL ORDER BY zabuchdat", @"ArztNr	HalterNr	RechNr	Zahl-Kz	BuchDat	BelegNr	Brutto-EUR	BuchText")) 
					{
					}
					// Ausbuchungen
					this.strFile = this.strDir + "\\Ausbuchungen.txt";
					if (this.PalMakeFile(this.strFile, @"SELECT  zaarztnr || @char(9) || zahalternr || @char(9) || zarechnr || @char(9) || zakz || @char(9) || zabuchdat || @char(9) || zabelegnr || @char(9) || zadm || @char(9) || zabuchtext
INTO :frmSteuerExport.strText
FROM za
WHERE zaarztnr = :frmSteuerExport.dfNr AND zabuchdat BETWEEN :frmSteuerExport.dfvon.Value AND :frmSteuerExport.dfbis.Value AND zakz >=4 AND zadeaktiv IS NULL ORDER BY zabuchdat", @"ArztNr	HalterNr	RechNr	Zahl-Kz	BuchDat	BelegNr	Brutto-EUR	BuchText")) 
					{
					}
					// ! 16.10.18 Ä1782
					Int.PalGetProfileStringR("", "Directory", "", ref this.strProgOrdner, "TVN");
					if (this.hFile.Open(this.strProgOrdner + "\\GoBS\\index.xml", Sys.OF_Exist)) 
					{
						if (Sys.FILE_CopyOK != Sal.FileCopy(this.strProgOrdner + "\\GoBS\\gdpdu-01-09-2004.dtd", this.strDir + "\\gdpdu-01-09-2004.dtd", true)) 
						{
							Sal.MessageBox("Die IDEA-Formatdatei " + this.strProgOrdner + "\\GoBS\\gdpdu-01-09-2004.dtd kann nicht nach " + this.strDir + @" kopiert werden.
Kontaktieren Sie bite den moveta-Support.", "Kopierfehler IDEA-Formatdatei", (Sys.MB_Ok | Sys.MB_IconStop));
						}
						if (this.hFile.Open(this.strProgOrdner + "\\GoBS\\index.xml", (Sys.OF_UTF8 | Sys.OF_Read))) 
						{
							this.hFileZ.Open(this.strDir + "\\index.xml", Sys.OF_Delete);
							if (this.hFileZ.Open(this.strDir + "\\index.xml", (Sys.OF_UTF8 | Sys.OF_Write))) 
							{
								while (this.hFile.GetString(ref this.strText, 32000)) 
								{
									this.nDummy = this.strText.Scan("<From>2018");
									if (this.nDummy == -1) 
									{
										this.nDummy = this.strText.Scan("<To>2018");
										if (this.nDummy == -1) 
										{
											this.hFileZ.PutString(this.strText);
										}
										else
										{
											this.hFileZ.PutString(this.strText.Left(this.nDummy) + "<To>" + Int.PalDateToStr(this.dfvon.Value).Left(10) + "</To>");
										}
									}
									else
									{
										this.hFileZ.PutString(this.strText.Left(this.nDummy) + "<From>" + Int.PalDateToStr(this.dfvon.Value).Left(10) + "</From>");
									}
								}
								this.hFileZ.Close();
							}
							else
							{
								Sal.MessageBox("Die IDEA-Indexdatei " + this.strDir + @"\index.xml kann nicht erstellt werden.
Kontaktieren Sie bite den moveta-Support.", "Schreibfehler IDEA-Indexdatei", (Sys.MB_Ok | Sys.MB_IconStop));
							}
							this.hFile.Close();
						}
						else
						{
							Sal.MessageBox("Die IDEA-Indexdatei " + this.strProgOrdner + @"\GoBS\index.xml kann nicht ausgelesen werden.
Kontaktieren Sie bite den moveta-Support.", "Lesefehler IDEA-Indexdatei", (Sys.MB_Ok | Sys.MB_IconStop));
						}
					}
					else
					{
						Sal.MessageBox("Die IDEA-Indexdatei " + this.strProgOrdner + @"\GoBS\index.xml fehlt.
Kontaktieren Sie bite den moveta-Support.", "IDEA-Indexdatei fehlt", (Sys.MB_Ok | Sys.MB_IconStop));
					}
					this.hFileZ.Open(this.strDir + "\\TEST", Sys.OF_Delete);
					// !
					this.SetStatusBarText("Export abgeschlossen");
					Sal.WaitCursor(false);
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.DestroyWindow();
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class PalMakeFileLocals
			{
				public SalBoolean bOk = false;
				public SalString strFile = "";
				public SalString strSelect = "";
				public SalString strFelder = "";
			}
		}
		#endregion
	}
}
