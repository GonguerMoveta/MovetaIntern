// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;
using System.Windows.Forms.DataVisualization.Charting;
using System.Data;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmPRGrafik : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlGraph = SalSqlHandle.Null;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmPRGrafik()
		{
			// Assign global reference.
			App.frmPRGrafik = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
            //this.cc1.Customize += Cc1_Customize;
		}       

		// FC:FINAL: cQuickGraph
		private void AddCustomXAxisLabels(cQuickGraph chart)
		{			
			DataTable table = chart.DataSource as DataTable;

			if (table != null)
			{
				chart.ChartAreas[0].AxisX.CustomLabels.Clear();  // Clear any previous labels

				int pointIndex = 0;
				foreach (DataRow row in table.Rows)
				{
					string year = row[tbl1.colJahr.Name].ToString();  // Assuming 'Year' is a column
					int month = Convert.ToInt32(row[tbl1.colMonat.Name]);  // Assuming 'Month' is a column

					// Set label only at the start of each year (e.g., first month of the year)
					// Set custom label only at the start of each year (e.g., for January)
					if (month == 1)
					{
						CustomLabel label = new CustomLabel();

						// Special handling for the first point to avoid missing the label
						if (pointIndex == 0)
						{
							// Align label exactly with the first point
							label.FromPosition = pointIndex + 1;
							label.ToPosition = pointIndex + 1.5;
						}
						else
						{
							// Align label to the middle of the data point range
							label.FromPosition = pointIndex - 0.5;
							label.ToPosition = pointIndex + 0.5;
						}

						label.Text = year;  // Set the year as the label
						label.RowIndex = 0;  // Place it in the first row of labels
						chart.ChartAreas[0].AxisX.CustomLabels.Add(label);  // Add the custom label
					}

					pointIndex++;
				}
			}
		}

		// Method to add a trendline
		private void AddTrendline(cQuickGraph chart)
		{
			// Create a new series for the trendline
			Series trendline = new Series("Trendline");
			trendline.ChartType = SeriesChartType.Line; // You can set this to your preferred type
			trendline.Color = Color.Red; // Set the trendline color
			trendline.BorderDashStyle = ChartDashStyle.Dash; // Optional: Make the trendline dashed

			//// Calculate the trendline points using a simple linear regression
			//double sumX = 0;
			//double sumY = 0;
			//double sumXY = 0;
			//double sumX2 = 0;
			//int n = chart.Series[0].Points.Count;

			//for (int i = 0; i < n; i++)
			//{
			//	double xValue = chart.Series[0].Points[i].XValue;
			//	double yValue = chart.Series[0].Points[i].YValues[0]; // Assuming YValues[0] is the amount

			//	sumX += xValue;
			//	sumY += yValue;
			//	sumXY += xValue * yValue;
			//	sumX2 += xValue * xValue;
			//}

			//double slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
			//double intercept = (sumY - slope * sumX) / n;

			//// Generate trendline points based on the calculated slope and intercept
			//for (int i = 1; i <= 12; i++) // Assuming 12 months for the x-values
			//{
			//	double trendY = slope * i + intercept; // y = mx + b
			//	trendline.Points.AddXY(i, trendY);
			//}

			int n = chart.Series[0].Points.Count;
			if (n < 2) return; // At least 2 points needed to create a trend line

			double sumX = 0;
			double sumY = 0;
			double sumXY = 0;
			double sumX2 = 0;

			// Step 1: Calculate the necessary sums
			for (int i = 0; i < n; i++)
			{
				double x = chart.Series[0].Points[i].XValue;
				double y = chart.Series[0].Points[i].YValues[0];

				sumX += x;
				sumY += y;
				sumXY += x * y;
				sumX2 += x * x;
			}

			// Step 2: Calculate slope (m) and intercept (b) for y = mx + b
			double slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
			double intercept = (sumY - slope * sumX) / n;

			// Step 3: Add points for the trend line
			double minX = chart.Series[0].Points[0].XValue; // First X value
			double maxX = chart.Series[0].Points[n - 1].XValue; // Last X value

			double minY = slope * minX + intercept; // Corresponding Y for minX
			double maxY = slope * maxX + intercept; // Corresponding Y for maxX

			// Add two points to the trend line series (start and end)
			trendline.Points.AddXY(minX, minY);
			trendline.Points.AddXY(maxX, maxY);

			// Add the trendline to the chart
			Series oldTrendline = chart.Series.FindByName("Trendline");
			if(oldTrendline != null)
				chart.Series.Remove(oldTrendline);
			chart.Series.Add(trendline);
		}

		#endregion

		#region System Methods/Properties

		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmPRGrafik CreateWindow(Control owner)
		{
			frmPRGrafik frm = new frmPRGrafik();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmPRGrafik FromHandle(SalWindowHandle handle)
		{
			return ((frmPRGrafik)SalWindow.FromHandle(handle, typeof(frmPRGrafik)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmPRGrafik WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmPRGrafik_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmPRGrafik_OnSAM_Create(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmPRGrafik_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfvon.DateTime = new SalDateTime(1995, 1, 1);
			this.dfbis.DateTime = new SalDateTime(2030, 12, 31);
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlConnection(ref this.hSqlGraph);
			Sal.WaitCursor(true);
			this.tbl1.Populate(this.hSqlGraph, @"SELECT @YEAR(prdatum)+1900, @MONTH(prdatum), COUNT(*) FROM pr
	WHERE prdatum BETWEEN :frmPRGrafik.dfvon AND :frmPRGrafik.dfbis GROUP BY 1,2 ORDER BY 1,2", Sys.TBL_FillAll);
			this.hSqlGraph.Disconnect();
			//FC:FINAL: replace cQuickGraph
			Action<cQuickGraph>[] actions = new Action<cQuickGraph>[]
			{
				AddCustomXAxisLabels,
				//AddTrendline
			};
			this.cc1.Draw(actions);
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tbl1
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tbl1TableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmPRGrafik _frmPRGrafik = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tbl1TableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmPRGrafik frmPRGrafik
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmPRGrafik == null) 
					{
						_frmPRGrafik = (frmPRGrafik)this.FindForm();
					}
					return _frmPRGrafik;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tbl1TableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tbl1TableWindow)SalWindow.FromHandle(handle, typeof(tbl1TableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
