// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="nArztNr"></param>
	/// <param name="nHalterNr"></param>
	/// <param name="nRechNr"></param>
	public partial class frmRechAb : SalFormWindow
	{
		#region Window Parameters
		public SalNumber nArztNr;
		public SalNumber nHalterNr;
		public SalNumber nRechNr;
		#endregion
		
		#region Window Variables
		public SalSqlHandle hSqlAktiErf = SalSqlHandle.Null;
		public SalBoolean bOk = false;
		public SalBoolean bJa = false;
		public SalNumber nArztNr2 = 0;
		public SalNumber nKZPraxArt = 0;
		public SalNumber nBatchBuch = 0;
		public SalString strTyp = "";
		public SalString strTAN1 = "";
		public SalString strTAN2 = "";
		public SalString strTAStr = "";
		public SalString strTAOrt = "";
		public SalString strTALand = "";
        public SalString strTAEMail = "";
        public SalString strTATel = "";
        public SalString strTHN1 = "";
		public SalString strTHN2 = "";
		public SalString strTHStr = "";
		public SalString strTHOrt = "";
		public SalString strTHLand = "";
		public SalString strEWA = "";
		public SalString strZei = "";
		public SalString strWarum = "";
		public SalString strVermerk = "";
		public SalNumber nPRNr = 0;
		public SalNumber nRAAbgMS = 0;
		public SalNumber nRAAbgAusb = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmRechAb(SalNumber nArztNr, SalNumber nHalterNr, SalNumber nRechNr)
		{
			// Assign global reference.
			App.frmRechAb = this;
			// Window Parameters initialization.
			this.nArztNr = nArztNr;
			this.nHalterNr = nHalterNr;
			this.nRechNr = nRechNr;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmRechAb CreateWindow(Control owner, SalNumber nArztNr, SalNumber nHalterNr, SalNumber nRechNr)
		{
			frmRechAb frm = new frmRechAb(nArztNr, nHalterNr, nRechNr);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmRechAb FromHandle(SalWindowHandle handle)
		{
			return ((frmRechAb)SalWindow.FromHandle(handle, typeof(frmRechAb)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HoleArzt()
		{
			#region Actions
			using (new SalContext(this))
			{
				// Call SqlImmedSel('SELECT anr2, akzpraxart
				// INTO :frmRechAb.nArztNr2, :frmRechAb.nKZPraxArt
				// FROM a WHERE aarztnr=:frmRechAb.dfArztNr')
				// If nKZPraxArt = 2
				// Set dfArztNr = nArztNr2
				// Call SqlImmedSel('SELECT anr2
				// INTO :frmRechAb.nArztNr2
				// FROM a WHERE aarztnr=:frmRechAb.dfArztNr')
				// Else If nKZPraxArt = 0
				// Set nArztNr2 = dfArztNr
				Int.SqlIstDa("from A where aarztnr=:frmRechAb.dfArztNr", ref bOk);
				if (bOk) 
				{
                    // 10.04.24 ### +, atelpraxis, aemail
                    Int.SqlImmedSel(@"SELECT aname1, aname1, aname2, astr, aort, aland, araabgms, araabgaus, atelpraxis, aemail
into :frmRechAb.dfArztName, :frmRechAb.strTAN1, :frmRechAb.strTAN2, :frmRechAb.strTAStr, :frmRechAb.strTAOrt, :frmRechAb.strTALand, :frmRechAb.nRAAbgMS, :frmRechAb.nRAAbgAusb, :frmRechAb.strTATel, :frmRechAb.strTAEMail
from A where aarztnr=:frmRechAb.dfArztNr");
                    dfRAAbgMS.Number = nRAAbgMS;
					if (dfRAAbgMS.Number == Sys.NUMBER_Null || dfRAAbgMS.Number < 5) 
					{
						dfRAAbgMS.Number = 5;
						nRAAbgAusb = 1;
					}
					if (nRAAbgAusb == 0) 
					{
						cbRAAbgAusb.Checked = false;
					}
					else
					{
						cbRAAbgAusb.Checked = true;
					}
				}
				else
				{
					Sal.ClearField(dfArztNr);
					Sal.ClearField(dfArztName);
					Sal.SetFocus(dfArztNr);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HoleHalter()
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlIstDa("from H where  harztnr = :frmRechAb.dfArztNr AND hhalternr = :frmRechAb.dfHalterNr AND hdeaktiv IS NULL  ", ref bOk);
				if (bOk) 
				{
					Sal.WaitCursor(true);
					Int.SqlImmedSel(@"SELECT hti || hvn || ' ' || hnn, hti || hvn || ' ' || hnn, hname2, hstr, hort, hland
into :frmRechAb.dfHalterName,  :frmRechAb.strTHN1, :frmRechAb.strTHN2, :frmRechAb.strTHStr, :frmRechAb.strTHOrt, :frmRechAb.strTHLand
from H where  harztnr = :frmRechAb.dfArztNr AND hhalternr = :frmRechAb.dfHalterNr ");
					// #23 11.05.06 Ländercodes
					strTHLand = Int.PalPruefeLC(strTHLand, 0);
					// !
					Int.SqlImmedSel(@"SELECT sum(rkdmleis+rkdmarzn+rkdmmahn+rkdmzins+rkmbdmopl-rkzaleis-rkzaarzn-rkzamahn-rkzazins-rkmbzaopl)
from rk into :frmRechAb.dfAussenst where rkhalternr=:frmRechAb.dfHalterNr AND rkrechnr=:frmRechAb.dfRechNr
and " + Int.PalArztNr("rk", dfArztNr.Number, nArztNr2) + @"
and rkkzzahl <2 AND rkdeaktiv IS NULL ");
					Int.SqlImmedSel(@"SELECT sum(bbzahldm) INTO :frmRechAb.nBatchBuch FROM bb
WHERE  bbarztnr IN (:frmRechAb.dfArztNr, :frmRechAb.nArztNr2)
and bbhalternr=:frmRechAb.dfHalterNr and bbrechnr=:frmRechAb.dfRechNr");
					dfAussenst.Number = dfAussenst.Number - nBatchBuch;
					Sal.WaitCursor(false);
				}
				else
				{
					// Call LoescheMaske()
					Sal.SetFocus(dfArztNr);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber HoleRech()
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlIstDa("from rk where  rkarztnr = :frmRechAb.dfArztNr AND rkrechnr = :frmRechAb.dfRechNr AND rkdeaktiv IS NULL ", ref bOk);
				if (bOk) 
				{
					if (Sal.IsNull(dfHalterNr)) 
					{
						Int.SqlImmedSel(@"SELECT rkhalternr
into :frmRechAb.dfHalterNr
from rk where rkarztnr = :frmRechAb.dfArztNr AND rkrechnr = :frmRechAb.dfRechNr");
						HoleHalter();
					}
				}
				else
				{
					Sal.SetFocus(dfArztNr);
				}
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber Speichern()
		{
			// String: strTypX
			
			#region Actions
			using (new SalContext(this))
			{
				if (Sal.IsNull(dfArztNr) || Sal.IsNull(dfHalterNr) || Sal.IsNull(dfRechNr)) 
				{
					Sal.MessageBox(@"Arzt-Nr., Halter-Nr. oder
Rech-Nr. fehlt", "Daten unvollständig", (Sys.MB_Ok | Sys.MB_IconExclamation));
					Sal.SetFocus(dfArztNr);
				}
				else
				{
					// Call SalModalDialog(dlgText, hWndForm, 'Warum wird an RA abgegeben ? :', '', 20, strWarum)
					// Set nErr = 1
					// Call PalReport(frmRechAb, 'RechAb.QRP',
					// ':frmRechAb.strZei, :frmRechAb.dfArztNr,:frmRechAb.strTAN1, :frmRechAb.strTAN2,:frmRechAb.strTAStr,:frmRechAb.strTAOrt,
					// :frmRechAb.dfHalterNr,:frmRechAb.strTHN1,:frmRechAb.strTHN2,:frmRechAb.strTHStr,:frmRechAb.strTHOrt,:frmRechAb.strTHLand,
					// :frmRechAb.dfRechNr, :frmRechAb.dfRA1, :frmRechAb.dfRA2, :frmRechAb.dfRA3',
					// 'Zei, ArztNr, AName1, AName2, AStr, AOrt,
					// HalterNr, HName1, HName2, HStr, HOrt,HLand,
					// RechNr, RA1, RA2, RA3', nErr)
					// LL
					dlgLlDruck.ModalDialog(App.frmMain, "Rechnungsabgabe.crd", "");
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmRechAb WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRechAb_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmRechAb_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_ReportStart:
					this.frmRechAb_OnSAM_ReportStart(sender, e);
					break;
				
				case Sys.SAM_ReportFetchInit:
					this.frmRechAb_OnSAM_ReportFetchInit(sender, e);
					break;
				
				case Sys.SAM_ReportFetchNext:
					this.frmRechAb_OnSAM_ReportFetchNext(sender, e);
					break;
				
				case Sys.SAM_ReportFinish:
					this.frmRechAb_OnSAM_ReportFinish(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRechAb_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.strEWA = "Rechtsanwaltskanzlei";
			// 17.3.97
			// Set strZei = ''
			// If SqlUser = 'DUEMMER'
			// Set strZei = '40 /Dü'
			// Else If SqlUser = 'BEVERBUR'
			// Set strZei = '40 /Be'
			// Else If SqlUser = 'HENNECKE'
			// Set strZei = '41 /He'
			// Else If SqlUser = 'SEIL'
			// Set strZei = '21 /Se'
			// Else If SqlUser = 'KOLLAY'
			// Set strZei = '52 /Ko'
			// Else If SqlUser = 'ZK'
			// Set strZei = '32 /Zk'
			// Else If SqlUser = 'ZINK'
			// Set strZei = '60 /Zi'
			// Else If SqlUser = 'FRIEDRIC'
			// Set strZei = '60 /Fr'
			// Else If SqlUser = 'SYMOLKA'
			// Set strZei = '60 /Sy'
			// Else If SqlUser = 'STUKE'
			// Set strZei = '60 /St'
			// Else If SqlUser = 'KEUER'
			// Set strZei = '30 /Ke'
			// Else If SqlUser = 'LINKER'
			// Set strZei = '20 /Li'
			// Else If SqlUser = 'SASSE'
			// Set strZei = '10 /Sa'
			// Else If SqlUser = 'MARTIN'
			// Set strZei = '50 /Ma'
			// Else If SqlUser = 'SC'
			// Set strZei = '/Sc'
			// Else If SqlUser = 'SD'
			// Set strZei = '31/Sd'
			// Set strName = ''
			// 28.11.05
			this.strZei = Var.strBNTel + " /" + Var.strBNZei.ToProper();

			if (this.nArztNr != 0 && this.nArztNr != SalNumber.Null) 
			{
				this.dfArztNr.Number = this.nArztNr;
				this.dfArztNr.PostMessage(Sys.SAM_Validate, 0, 0);
				if (this.nHalterNr != 0 && this.nHalterNr != SalNumber.Null) 
				{
					this.dfHalterNr.Number = this.nHalterNr;
					this.dfHalterNr.PostMessage(Sys.SAM_Validate, 0, 0);
					if (this.nRechNr != 0 && this.nRechNr != SalNumber.Null) 
					{
						this.dfRechNr.Number = this.nRechNr;
						this.dfRechNr.PostMessage(Sys.SAM_Validate, 0, 0);
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportStart event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRechAb_OnSAM_ReportStart(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 30.04.03
			if (Var.hWndfrmReport) 
			{
				Var.hWndfrmReport.BringWindowToTop();
			}

			Sal.ReportDlgOptions(Sys.wParam.ToWindowHandle(), "", "Druck läuft", "", "");
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFetchInit event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRechAb_OnSAM_ReportFetchInit(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.bJa = true;
			e.Return = true;
			return;
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFetchNext event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRechAb_OnSAM_ReportFetchNext(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.bJa == true) 
			{
				this.bJa = false;
				e.Return = true;
				return;
			}
			else
			{
				e.Return = false;
				return;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_ReportFinish event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmRechAb_OnSAM_ReportFinish(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Sal.MessageBox(@"Ist der Druck
in Ordnung ?", "Druck Ok ?", (Sys.MB_YesNo | Sys.MB_IconQuestion)) == Sys.IDYES) 
			{
				Int.PalAktion(this.dfArztNr.Number, this.dfHalterNr.Number, this.dfRechNr.Number, "BR", "RAAbX", SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null);
				this.strVermerk = "an RA " + this.dfRA1.Text + @"
" + this.dfRA2.Text + @"
" + this.dfRA3.Text + @"
abgegeben.

Begründung : " + this.strWarum;
				this.strZei = Var.strBNZei;
				this.nPRNr = SalNumber.Null;
				if (this.cbRAAbgAusb.Checked) 
				{
					Int.SqlImmedSel(@"SELECT prdnr INTO :frmRechAb.nPRNr FROM prd
WHERE prdarztnr = :frmRechAb.dfArztNr  AND prdrechnr = :frmRechAb.dfRechNr");
					// 13.05.14 F2027
					this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

					// 09.05.16 Ä1367 AN -> HE
					Int.SqlImmed(@"INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:frmRechAb.strZei, 'HE', :frmRechAb.dfArztNr, :frmRechAb.dfHalterNr, :frmRechAb.dfRechNr,
:frmRechAb.strVermerk , SYSDATE, NULL, 'N', 'ZM', 'RA', :frmRechAb.dfAussenst, :frmRechAb.nPRNr, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
				}
				else
				{
					Int.SqlImmed(@"UPDATE rk SET rkmahnstufe = :frmRechAb.dfRAAbgMS WHERE rkarztnr = :frmRechAb.dfArztNr
AND rkhalternr = :frmRechAb.dfHalterNr AND rkrechnr = :frmRechAb.dfRechNr");
				}
				// 18.01.22 Ä1987 + , raan4, raan5
				Int.SqlImmed(@"INSERT INTO ra (raarztnr, rahalternr, rarechnr, radatum, razeichen, raan1, raan2, raan3, raan4, raan5)
VALUES(:frmRechAb.dfArztNr, :frmRechAb.dfHalterNr, :frmRechAb.dfRechNr, SYSDATE, :frmRechAb.strZei,
:frmRechAb.dfRA1, :frmRechAb.dfRA2, :frmRechAb.dfRA3, :frmRechAb.dfRA4, :frmRechAb.dfRA5)");

				Sal.MessageBeep(0);
				this.DestroyWindow();
			}
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfArztNr.Number > 0) 
			{
				this.HoleArzt();
				// 18.01.22 Ä1987 + , raan4, raan5
				Int.SqlImmedSel(@"SELECT raan1, raan2, raan3, raan4, raan5
INTO :frmRechAb.dfRA1, :frmRechAb.dfRA2, :frmRechAb.dfRA3, :frmRechAb.dfRA4, :frmRechAb.dfRA5
FROM ra WHERE raarztnr = :frmRechAb.dfArztNr ORDER BY radatum DESC");
				// 18.01.22 Ä1987
				if (this.dfRA5.Text == "" && this.dfRA4.Text == "") 
				{
					this.dfRA4.Text = this.dfRA3.Text;
					this.dfRA3.Text = this.dfRA2.Text;
					this.dfRA2.Text = "";
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.HoleHalter();
			#endregion
		}
		
		/// <summary>
		/// dfRechNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfRechNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfRechNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.HoleRech();
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.Speichern();
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
	}
}
