// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;
using System.Windows.Forms.DataVisualization.Charting;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmGraph : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlGraph = SalSqlHandle.Null;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmGraph()
		{
			// Assign global reference.
			App.frmGraph = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
            this.ccGraph.Customize += CcGraph_Customize; ;
		}

        private void CcGraph_Customize(object sender, EventArgs e)
        {
			CustomizeGraph(this.ccGraph);
        }
        #endregion

        #region System Methods/Properties

        /// <summary>
        /// Shows the form window.
        /// </summary>
        /// <param name="owner"></param>
        /// <returns></returns>
        public static frmGraph CreateWindow(Control owner)
		{
			frmGraph frm = new frmGraph();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmGraph FromHandle(SalWindowHandle handle)
		{
			return ((frmGraph)SalWindow.FromHandle(handle, typeof(frmGraph)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlConnection(ref this.hSqlGraph);
			Sal.WaitCursor(true);
			// 07.07.16 + +1900
			if (this.rbRG.Checked) 
			{
				this.tblGraph.Populate(this.hSqlGraph, @"SELECT @YEAR(akdatum)+1900, SUM(akanzahl) FROM ak
	WHERE aktyp = 'RG' AND akdatum >= '1995-1-1' AND akdeaktiv IS NULL GROUP BY 1 ORDER BY 1", Sys.TBL_FillAll);
			}
			if (this.rbMG.Checked) 
			{
				this.tblGraph.Populate(this.hSqlGraph, @"SELECT @YEAR(akdatum)+1900, SUM(akanzahl) FROM ak
	WHERE aktyp = 'MG' AND akdatum >= '1995-1-1' AND akdeaktiv IS NULL GROUP BY 1 ORDER BY 1", Sys.TBL_FillAll);
			}
			if (this.rbMB.Checked) 
			{
				this.tblGraph.Populate(this.hSqlGraph, @"SELECT @YEAR(akdatum)+1900, COUNT(*) FROM ak
	WHERE aktyp = 'MB' AND akdatum >= '1995-1-1' AND akdeaktiv IS NULL GROUP BY 1 ORDER BY 1", Sys.TBL_FillAll);
			}
			if (this.rbBR.Checked) 
			{
				this.tblGraph.Populate(this.hSqlGraph, @"SELECT @YEAR(akdatum)+1900, COUNT(*) FROM ak
	WHERE aktyp = 'BR' AND akdatum >= '1995-1-1' AND akdeaktiv IS NULL GROUP BY 1 ORDER BY 1", Sys.TBL_FillAll);
			}
			// 07.07.16
			if (this.rbRZ.Checked) 
			{
				this.tblGraph.Populate(this.hSqlGraph, "SELECT @YEAR(rzerfdat)+1900, COUNT(*) FROM rz WHERE rzdeaktiv IS NULL GROUP BY 1 ORDER BY 1", Sys.TBL_FillAll);
			}
			this.hSqlGraph.Disconnect();
			// 07.07.16
			// If rbRG
			// Set ccGraph.Graph.GraphTitle = 'Rechnungen'
			// If rbMG
			// Set ccGraph.Graph.GraphTitle = 'Mahnungen'
			// If rbMB
			// Set ccGraph.Graph.GraphTitle = 'MB-Aktivitäten'
			// If rbBR
			// Set ccGraph.Graph.GraphTitle = 'Briefe'
			// If rbRZ
			// Set ccGraph.Graph.GraphTitle = 'Ratenzahler-Verträge'
			// Set ccGraph.Graph.ToolBar = 1
			//FC:FINAL: replace cQuickGraph
			this.ccGraph.Draw(null);
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblGraph
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblGraphTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmGraph _frmGraph = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblGraphTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmGraph frmGraph
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmGraph == null) 
					{
						_frmGraph = (frmGraph)this.FindForm();
					}
					return _frmGraph;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblGraphTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblGraphTableWindow)SalWindow.FromHandle(handle, typeof(tblGraphTableWindow)));
			}
			#endregion
		}
		#endregion

		#region ccGraph
		private void CustomizeGraph(cQuickGraph chart)
		{			
			if (chart != null)
			{
				if (chart.Series[0].IsValueShownAsLabel)
				{
					foreach (var point in chart.Series[0].Points)
					{
						point.IsValueShownAsLabel = true;
						double amountInThousands = point.YValues[0] / 1000;
						// Format as '300.00 k'
						point.Label = amountInThousands.ToString("0.00") + " k"; 
						// Set label back color and fore color
						point.LabelBackColor = chart.Series[0].Color;
						point.LabelForeColor = Color.White;
					}
				}
			}
		}
        #endregion
    }
}
