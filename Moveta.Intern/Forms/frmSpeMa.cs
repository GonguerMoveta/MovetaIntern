// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// Mahnungsdruck
	/// </summary>
	public partial class frmSpeMa : SalFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlMV = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalNumber nFetchMV = 0;
		public SalSqlHandle hSqlOR = SalSqlHandle.Null;
		public SalString strSelectOR = "";
		public SalNumber nFetchOR = 0;
		public SalNumber nArztNr = 0;
		public SalNumber nArztNrAlt = 0;
		public SalNumber nArztNr2 = 0;
		public SalNumber nHalterNr = 0;
		public SalNumber nHalterNrAlt = 0;
		public SalString strHN1 = "";
		public SalString strHN1Alt = "";
		public SalNumber nRechNr = 0;
		public SalBoolean bExists = false;
		public SalBoolean bOffRech = false;
		public SalBoolean bZinsen = false;
		public SalDateTime dtRechDat = SalDateTime.Null;
		public SalNumber nSeite = 0;
		public SalNumber nZeile = 0;
		public SalNumber nRechZaehl = 0;
		public SalString strDrucker = "";
		public SalNumber nMS = 0;
		public SalNumber nDMRest = 0;
		public SalNumber nDMOP = 0;
		public SalNumber nMZFRechNr = 0;
		public SalNumber nMZFMS = 0;
		public SalArray<SalString> strMT1 = new SalArray<SalString>("1:6");
		public SalArray<SalString> strMT2 = new SalArray<SalString>("1:6");
		public SalArray<SalNumber> nMI = new SalArray<SalNumber>("1:3");
		public SalArray<SalNumber> nMG = new SalArray<SalNumber>("1:3");
		public SalNumber nGesBrutto = 0;
		public SalNumber nGesMahnDM = 0;
		public SalNumber nORRechNr = 0;
		public SalDateTime dtORRechDat = SalDateTime.Null;
		public SalNumber nORDMRest = 0;
		public SalArray<SalNumber> nZIProz = new SalArray<SalNumber>("1:3");
		public SalNumber nZIZaAnz = 0;
		public SalNumber nZIZaGes = 0;
		public SalNumber nGesZinsen = 0;
		public SalSqlHandle hSqlZI = SalSqlHandle.Null;
		public SalString strSelectZI = "";
		public SalNumber nFetchZI = 0;
		public SalNumber nZIRechGes = 0;
		public SalNumber nZIZahlGes = 0;
		public SalNumber nZIZinsAlt = 0;
		public SalDateTime dtZIRechDat = SalDateTime.Null;
		public SalDateTime dtZIZahlDat = SalDateTime.Null;
		public SalNumber nZIZahlDM = 0;
		public SalNumber nZITage = 0;
		public SalNumber nZinsen = 0;
		public SalDateTime dtMahnDat = SalDateTime.Null;
		public SalNumber nMahnGeb = 0;
		public SalString strMDText = "";
		public SalString strPMDText = "";
		public SalNumber nPBereich = 0;
		public SalNumber nPNr = 0;
		public SalString strAN1or = "";
		public SalString strAN2or = "";
		public SalString strASor = "";
		public SalString strAOor = "";
		public SalString strHTor = "";
		public SalString strHN1or = "";
		public SalString strHN2or = "";
		public SalString strHSor = "";
		public SalString strHOor = "";
		public SalDateTime dtRatDat = SalDateTime.Null;
		public SalDateTime dtRat1 = SalDateTime.Null;
		public SalNumber nRatmtl = 0;
		public SalNumber nRatDM = 0;
		public SalString strMZF = "";
		public SalDateTime dtDefMahnDat = SalDateTime.Null;
		public SalString strLand = "";
		public SalString strPFehler = "";
		public SalString strPAusland = "";
		public SalString strROWID = "";
		public SalString strMvROWID = "";
		public SalNumber nRkMS = 0;
		public SalNumber nRkKZZahl = 0;
		public SalNumber nOPNr2 = 0;
		public SalNumber nMGNr2 = 0;
		public SalNumber nOPNr3 = 0;
		public SalDateTime dtZahlEing = SalDateTime.Null;
		public SalNumber nMVNr = 0;
		public SalNumber nMVFussNr = 0;
		public SalNumber nGirocodeDM = 0;
		public SalString strVeCode = "";
		public SalString strVeVSNr = "";
		public SalString strVeN1 = "";
		public SalString strVeN2 = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmSpeMa()
		{
			// Assign global reference.
			App.frmSpeMa = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmSpeMa CreateWindow(Control owner)
		{
			frmSpeMa frm = new frmSpeMa();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmSpeMa FromHandle(SalWindowHandle handle)
		{
			return ((frmSpeMa)SalWindow.FromHandle(handle, typeof(frmSpeMa)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <param name="nArztX"></param>
		/// <param name="nHalterX"></param>
		/// <param name="nRechX"></param>
		/// <returns></returns>
		public SalNumber Mahnung_Kopf(SalNumber nArztX, SalNumber nHalterX, SalNumber nRechX)
		{
			#region Local Variables
			SalDateTime dtTimer = SalDateTime.Null;
			#endregion
			
			#region Actions
			using (new SalContext(this))
			{
				Var.nArzt = nArztX;
				Var.nHalter = nHalterX;
				Var.nRech = nRechX;
				// erste Rechnungs-Nr. auf jeder Mahnung kommt in MZF
				nMZFRechNr = nRechX;
				nMZFMS = nMS;

				Var.nRpZeile = 0;
				nSeite = 0;
				nGesBrutto = 0;
				nGesMahnDM = 0;
				nGesZinsen = 0;
				nGirocodeDM = 0;
				// 30.06.09 OTÄ138 + ArztNr2
				Int.SqlImmedSel(@"SELECT ANAME1,ANAME2,ASTR,AORT, ANR2
INTO :strAN1, :strAN2, :strAS, :strAO, :frmSpeMa.nArztNr2
FROM A WHERE AARZTNR = :nArzt");
				// Call SqlIstDa(' FROM mg WHERE mgarztnr = :nArzt',bExists)
				// If bExists
				// Call SqlImmedSel('SELECT mgdm1, mgdm2, mgdm3  INTO
				// :frmSpeMa.nMG[1], :frmSpeMa.nMG[2], :frmSpeMa.nMG[3]
				// FROM  mg WHERE mgarztnr = :nArzt')
				// Else
				// Call SqlImmedSel('SELECT mgdm1, mgdm2, mgdm3  INTO
				// :frmSpeMa.nMG[1], :frmSpeMa.nMG[2], :frmSpeMa.nMG[3]
				// FROM  mg WHERE mgarztnr = 0')
				Int.SqlImmedSel(@"SELECT HTITEL,hti || hvn || ' ' || hnn,HNAME2,HSTR,HORT,HPROZ1,HPROZ2,HPROZ3
INTO :strHT, :strHN1, :strHN2, :strHS, :strHO,
:frmSpeMa.nZIProz[1], :frmSpeMa.nZIProz[2], :frmSpeMa.nZIProz[3] FROM H
WHERE HARZTNR = :nArzt
AND HHALTERNR = :nHalter");
				// Call PalWriteMD( 'Rech-Nr.       Rech-Datum      €-Restbetrag       Mahnstufe',1 )
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// Druckt Mahnung
		/// </summary>
		/// <param name="nArztX"></param>
		/// <param name="nHalterX"></param>
		/// <param name="nRechX"></param>
		/// <param name="bWrite"></param>
		/// <returns></returns>
		public SalNumber Mahnung_Pos(SalNumber nArztX, SalNumber nHalterX, SalNumber nRechX, SalBoolean bWrite)
		{
			#region Local Variables
			SqlLocals.Mahnung_PosLocals locals = new SqlLocals.Mahnung_PosLocals();
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.nArztX = nArztX;
				locals.nHalterX = nHalterX;
				locals.nRechX = nRechX;
				locals.bWrite = bWrite;

				nArztNrAlt = nArztNr;
				nHalterNrAlt = nHalterNr;

				while (nArztNr == nArztNrAlt && nHalterNr == nHalterNrAlt && nFetchMV != Sys.FETCH_EOF) 
				{
					// 01.08.23 Ä2107 Versicherung + rkvecode
					// 12.5.97 Ermittlung der bereits bei alten Mahnungen belasteten Zinsen.
					Int.SqlImmedSel(@"SELECT  rkdmzins, rkvecode, rkvevsnr
INTO :frmSpeMa.nZIZinsAlt, :frmSpeMa.strVeCode, :frmSpeMa.strVeVSNr
FROM rk WHERE rkarztnr = :nArzt AND rkrechnr = :frmSpeMa.nRechNr");

					// 04.04.11 F889 nach dlgMahnVor verschoben
					// If nZIProz[nMS] != 0 Or nZIZinsAlt > 0
					// Set bZinsen = TRUE
					// Else
					// Set bZinsen = FALSE
					// If bZinsen
					// noch offener Hauptforderungsbetrag
					// Set nZinsen = 0
					// Call SqlImmedSel('SELECT rkfaelldat, (rkdmleis+rkdmarzn-rkzaleis-rkzaarzn)
					// INTO :frmSpeMa.dtZIRechDat, :frmSpeMa.nZIRechGes
					// FROM rk WHERE rkarztnr = :nArzt AND rkrechnr = :frmSpeMa.nRechNr')
					// Set dtZIZahlDat = dfZahlEing
					// Set nZITage = dtZIZahlDat - dtZIRechDat
					// Set nZinsen = SalNumberRound(nZIRechGes * (nZITage / 360) * nZIProz[nMS])  /100
					// Else
					// Set nZinsen = 0
					if (locals.bWrite)  // 06.07.09 OTÄ138
					{
						PalWriteMD("", 1);
					}
					if (nMS == 3) 
					{
						// 02.09.03
						// Set strMDText = PalStrNum(nArztNr,4,0) || '/R' || PalStrNum(nRechNr,6,0) || '  '
						// || SalDateToStrX(dtRechDat)
						// || PalStrNum(nDMRest,12,2) || ' +'
						// || PalStrNum(nZIZinsAlt,6,2) || ' letzte Mahnung'
						strMDText = Int.PalStrNum(nArztNr, 4, 0) + "/R" + Int.PalStrNum(nRechNr, 6, 0) + "     " + Int.SalDateToStrX(dtRechDat) + Int.PalStrNum(nDMRest + nZIZinsAlt, 15, 2) + "    letzte Mahnung";
					}
					else
					{
						// 02.09.03
						// Set strMDText = PalStrNum(nArztNr,4,0) || '/R' || PalStrNum(nRechNr,6,0) || '  '
						// || SalDateToStrX(dtRechDat)
						// || PalStrNum(nDMRest,12,2) || '  '
						// || PalStrNum(nZinsen,6,2) || ' '
						// || PalStrNum(nMS,1,0) || '.Mahnung'
						// 17.02.17 Ä1504 + Zahlungserinnerungen
						// Set strMDText = PalStrNum(nArztNr,4,0) || '/R' || PalStrNum(nRechNr,6,0) || '  '
						// || SalDateToStrX(dtRechDat)
						// || PalStrNum(nDMRest + nZIZinsAlt,12,2) || ' '
						// || PalStrNum(nMS,1,0) || '.Mahnung'
						strMDText = Int.PalStrNum(nArztNr, 4, 0) + "/R" + Int.PalStrNum(nRechNr, 6, 0) + "     " + Int.SalDateToStrX(dtRechDat) + Int.PalStrNum(nDMRest + nZIZinsAlt, 15, 2) + "    ";
						if (nMS == 0) 
						{
							strMDText = strMDText + "Zahlungserinnerung";
						}
						else
						{
							strMDText = strMDText + Int.PalStrNum(nMS, 1, 0) + ".Mahnung";
						}
					}
					if (locals.bWrite)  // 02.07.09 OTÄ138
					{
						PalWriteMD(strMDText, 1);
					}
					// 01.08.23 Ä2107 Versicherung + rkvecode
					if (strVeCode != "") 
					{
						Int.SqlImmedSel("SELECT vename1, vename2 INTO :frmSpeMa.strVeN1, :frmSpeMa.strVeN2 FROM ve WHERE vecode = :frmSpeMa.strVeCode");
						strMDText = "    Rechnung wurde versandt an : " + strVeN1 + " " + strVeN2;
						if (locals.bWrite)  // 02.07.09 OTÄ138
						{
							PalWriteMD(strMDText, 1);
						}
					}
					// 12.5.97
					// 04.04.11 F889 nach dlgMahnVor verschoben
					// Set nMahnGeb = nMG[nMS]
					// If bZinsen
					// 18.10.01 if bZinsen ...
					// If nZinsen != 0
					// Set nZinsen = nZinsen - nZIZinsAlt
					// 18.03.13 F1500
					// If nZinsen != 0
					// Set nZinsen = nZinsen - nZIZinsAlt
					if (nZinsen != 0 && nZinsen > nZIZinsAlt) 
					{
						nZinsen = nZinsen - nZIZinsAlt;
					}

					// DATEV #55 Zinsen niemals negativ
					if (nZinsen < 0) 
					{
						nZinsen = 0;
					}

					// Call SqlImmedX('UPDATE mv SET 	mvdmmahngeb = :frmSpeMa.nMahnGeb,
					// 				mvdmzins = :frmSpeMa.nZinsen
					// WHERE mvarztnr = :nArzt AND mvrechnr = :frmSpeMa.nRechNr')
					nGesBrutto = nGesBrutto + nDMRest + nZIZinsAlt;
					// 17.07.07 A114
					nSeite = nSeite + 1;

					nGesZinsen = nGesZinsen + nZinsen;
					nGesMahnDM = nGesMahnDM + nMahnGeb;
					// ------------------------------------------------------------
					nArztNrAlt = nArztNr;
					nHalterNrAlt = nHalterNr;
					strHN1Alt = strHN1;
					// 06.11.18 Ä1806 + mvnr
					nMVFussNr = nMVNr;

					nFetchMV = hSqlMV.FetchNext();
					// ------------------------------------------------------------
				}
				hSqlMV.Commit();
				if (locals.bWrite)  // 06.07.09 OTÄ138
				{
					Mahnung_Fuss();
				}

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// Druckt Mahnung
		/// </summary>
		/// <returns></returns>
		public SalNumber Mahnung_Fuss()
		{
			#region Actions
			using (new SalContext(this))
			{
				PalWriteMDa("", 1);
				// 02.09.03 rausgenommen, wie mit Fr.Kollay besprochen
				// Set strMDText = 'Gesamt-€ fällig       ' || PalStrNum(nGesBrutto,12,2)
				// Call PalWriteMDa( strMDText,1 )
				strMDText = "+ Mahngebühr                " + Int.PalStrNum(nGesMahnDM, 12, 2);
				PalWriteMDa(strMDText, 1);
				if (nGesZinsen > 0)  // 09.10.07 F277 vorher: if bZinsen
				{
					strMDText = "+ Zinsen                    " + Int.PalStrNum(nGesZinsen, 12, 2);
					PalWriteMDa(strMDText, 1);
				}
				nGesBrutto = nGesBrutto + nGesMahnDM + nGesZinsen;
				// 12.11.18 Ä1807
				nGirocodeDM = nGesBrutto;
				Int.SqlImmed(@"UPDATE md SET mdgirocodedm = :frmSpeMa.nGirocodeDM
WHERE mdarztnr = :frmSpeMa.nArztNrAlt AND mdhalternr = :nHalter AND mddatum = :frmSpeMa.dtMahnDat");

				strMDText = "Gesamtbetrag                " + Int.PalStrNum(nGesBrutto, 12, 2);
				PalWriteMDa(strMDText, 1);
				// Set strMDText = '====================================='
				// Call PalWriteMDa( strMDText,1 )
				// ------------------- sonst noch offene Rechnungen ----------------------
				// 30.06.09 OTÄ138 + ArztNr2
				if (nArztNr2 != 0 && nArztNr2 != SalNumber.Null) 
				{
					nOPNr2 = 0;
					nMGNr2 = 0;
					// + rkdmzins
					// 21.11.18
					// Call SqlImmedSel('
					// SELECT sum(rkdmleis + rkdmarzn + rkdmmahn + rkmbdmopl - rkzaleis - rkzaarzn - rkzamahn -  rkzazins - rkmbzaopl)
					// INTO :frmSpeMa.nOPNr2
					// FROM  rk
					// WHERE rkarztnr= :frmSpeMa.nArztNr2 AND rkhalternr= :nHalter
					// AND rkkzzahl<2
					// AND (rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn)>0')
					Int.SqlImmedSel(@"
SELECT sum(rkdmleis + rkdmarzn + rkdmmahn + rkmbdmopl - rkzaleis - rkzaarzn - rkzamahn -  rkzazins - rkmbzaopl)
INTO :frmSpeMa.nOPNr2
FROM  rk
WHERE rkarztnr= :frmSpeMa.nArztNr2 AND rkhalternr= :nHalter
AND rkkzzahl<2
AND (rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn)>0
AND rkarztnr*100000000+rkrechnr IN (SELECT mvarztnr*100000000+mvrechnr FROM mv)");
					Int.SqlImmedSel(@"
SELECT sum(rkdmleis + rkdmarzn + rkdmmahn + rkdmzins + rkmbdmopl - rkzaleis - rkzaarzn - rkzamahn -  rkzazins - rkmbzaopl)
INTO :frmSpeMa.nOPNr3
FROM  rk
WHERE rkarztnr= :frmSpeMa.nArztNr2 AND rkhalternr= :nHalter
AND rkkzzahl<2
AND (rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn)>0
AND rkarztnr*100000000+rkrechnr NOT IN (SELECT mvarztnr*100000000+mvrechnr FROM mv)");

					Int.SqlImmedSel(@"
SELECT SUM( mvdmmahngeb+mvdmzins )
INTO :frmSpeMa.nMGNr2
FROM  mv
WHERE mvarztnr= :frmSpeMa.nArztNr2 AND mvhalternr= :nHalter");
					if (nOPNr3 != 0 && nOPNr3 != SalNumber.Null) 
					{
						nOPNr2 = nOPNr2 + nOPNr3;
					}
					if (nMGNr2 != 0 && nMGNr2 != SalNumber.Null) 
					{
						nOPNr2 = nOPNr2 + nMGNr2;
					}
					if (nOPNr2 != 0 && nOPNr2 != SalNumber.Null) 
					{
						strMDText = "";
						PalWriteMDa(strMDText, 2);
						PalWriteMDa(strMDText, 2);
						strMDText = "Für Nr." + nArztNr2.ToString(0) + "/H" + Var.nHalter.ToString(0) + " sind noch € " + nOPNr2.ToString(2) + " offen.";
						PalWriteMDa(strMDText, 2);
						nGesBrutto = nGesBrutto + nOPNr2;
					}
				}
				// 23.06.08 F382 +rkdmzins-rkzazins
				strSelectOR = @"
SELECT rkrechnr, rkrechdat, (rkdmleis + rkdmarzn + rkdmmahn + rkdmzins + rkmbdmopl - rkzaleis - rkzaarzn - rkzamahn -  rkzazins - rkmbzaopl)
INTO :frmSpeMa.nORRechNr, :frmSpeMa.dtORRechDat, :nORDMRest
FROM  rk
WHERE rkarztnr= :nArzt AND rkhalternr= :nHalter
AND rkkzzahl<2 AND rkdeaktiv IS NULL AND rkrechnr NOT IN
(SELECT mvrechnr FROM mv WHERE mvarztnr= :nArzt and mvhalternr= :nHalter)
AND (rkdmleis+rkdmarzn+rkdmmahn-rkzaleis-rkzaarzn-rkzamahn)>0";
				Sql.Exists(strSelectOR, ref bOffRech);

				if (bOffRech) 
				{
					strMDText = "";
					PalWriteMDa(strMDText, 2);
					PalWriteMDa(strMDText, 2);
					strMDText = "Außerdem stehen noch folgende Rechnungen zur Zahlung an :";
					PalWriteMDa(strMDText, 2);
					strMDText = "";
					PalWriteMDa(strMDText, 2);
					strMDText = "Rech-Nr.    Rech-Datum    €-Restbetrag ";
					PalWriteMDa(strMDText, 2);
					PalWriteMDa("", 2);
					Int.SqlHandleExec(hSqlOR, strSelectOR, "Hole noch offen bei DruMa", ref Var.nErr);
					nFetchOR = hSqlOR.FetchNext();
					while (nFetchOR != Sys.FETCH_EOF) 
					{
						strMDText = Int.PalStrNum(Var.nArzt, 4, 0) + "/R" + Int.PalStrNum(nORRechNr, 6, 0) + "  " + Int.SalDateToStrX(dtORRechDat) + Int.PalStrNum(nORDMRest, 15, 2);
						PalWriteMDa(strMDText, 2);
						// 17.07.07 A114
						// If nSeite > 1
						nGesBrutto = nGesBrutto + nORDMRest;

						nFetchOR = hSqlOR.FetchNext();
					}
				}
				if ((nOPNr2 != 0 && nOPNr2 != SalNumber.Null) || bOffRech)  // 30.06.09 OTÄ138
				{
					// 17.07.07 A114
					strMDText = "";
					PalWriteMDa(strMDText, 2);
					strMDText = "Die gesamten Außenstände belaufen sich auf € " + nGesBrutto.ToString(2) + ".";
					PalWriteMDa(strMDText, 2);

				}
				// 13.09.10 OTÄ437 auskommentiert:
				// Set nGesBrutto = NUMBER_Null
				// -----------------------------------------------------
				// OCR-A    (nSeite>=0 nur um Anzeige zu unterdrücken)
				// 06.11.18 Ä1806 + mvnr
				// Set strMZF = '11' || PalNullen(nArztNrAlt,4) || PalNullen(nMZFRechNr,6)
				strMZF = "22" + Int.PalNullen(nArztNrAlt, 4) + Int.PalNullen(nMVFussNr, 8);

				strMZF = strMZF + Int.PalPruefZiffer22(strMZF);
				Int.SqlImmed(@"UPDATE md SET mdmzf = :frmSpeMa.strMZF, mddm = :frmSpeMa.nGesBrutto
WHERE mdarztnr = :frmSpeMa.nArztNrAlt AND mdhalternr = :nHalter AND mddatum = :frmSpeMa.dtMahnDat");
				// -----------------------------------------------------
			}

			return 0;
			#endregion
		}
		// Function: RatMahnung_Kopf
		// Description:
		// Returns
		// Parameters
		// Number: nArztX
		// Number: nHalterX
		// Number: nRechX
		// Static Variables
		// Local variables
		// Date/Time: dtTimer
		// String: strMZF
		// Actions
		// Set nArzt = nArztX
		// Set nHalter = nHalterX
		// Set nRech = nRechX
		// erste Rechnungs-Nr. auf jeder Mahnung kommt in MZF
		// Set nMZFRechNr = nRechX
		// Set nSeite = 0
		// Call RDRatKopf(nArzt,nHalter)
		// If nSeite != 0
		// If nDMRest < nRatDM
		// Set nRatDM = nDMRest
		// Set strMZF = '11' || PalNullen(nArzt,4) || PalNullen(nMZFRechNr,6)
		// Set strMZF = strMZF || PalPruefZiffer(strMZF)
		// -----------------------------------------------------
		// Call SqlFetchNext(hSqlMV,nFetchMV)
		// Function: RDRatKopf
		// Description: Druckt Rechnungs-Kopf
		// Returns
		// Parameters
		// Number: nArztX
		// Number: nHalterX
		// Static Variables
		// Local variables
		// Boolean: bExists
		// Actions
		// Set nArzt = nArztX
		// Set nHalter = nHalterX
		// Set nZeile = 0
		// Set nSeite = nSeite +1
		// If nArztNr != nArztNrAlt
		// Call SqlIstDa(' FROM mg WHERE mgarztnr = :nArzt',bExists)
		// If bExists
		// Call SqlImmedSel('SELECT mgdm1, mgdm2, mgdm3  INTO
		// :frmSpeMa.nMG[1], :frmSpeMa.nMG[2], :frmSpeMa.nMG[3]
		// FROM  mg WHERE mgarztnr = :nArzt')
		// Else
		// Call SqlImmedSel('SELECT mgdm1, mgdm2, mgdm3  INTO
		// :frmSpeMa.nMG[1], :frmSpeMa.nMG[2], :frmSpeMa.nMG[3]
		// FROM  mg WHERE mgarztnr = 0')
		// Set nMahnGeb=nMG[2]
		// Call SqlImmedX('UPDATE mv SET 	mvdmmahngeb = :frmSpeMa.nMahnGeb
		// WHERE mvarztnr = :nArzt AND mvhalternr = :nHalter')
		/// <summary>
		/// </summary>
		/// <param name="pstrMDText"></param>
		/// <param name="pnBereich"></param>
		/// <returns></returns>
		public SalNumber PalWriteMD(SalString pstrMDText, SalNumber pnBereich)
		{
			#region Actions
			using (new SalContext(this))
			{
				strPMDText = pstrMDText;
				nPBereich = pnBereich;
				// 23.11.15 Ä1286 dfZahlEing -> dtZahlEing
				// 06.11.18 Ä1806 + mvnr
				// 26.07.21 F4792
				// Call SqlImmedX('INSERT INTO md
				// (mdarztnr, mdhalternr, mddatum, mdbereich, mdtext, mdms, mdzahleing, mdlfd, mdnr)
				// VALUES( :frmSpeMa.nArztNr, :nHalter, :frmSpeMa.dtMahnDat,
				// :frmSpeMa.nPBereich, :frmSpeMa.strPMDText, :frmSpeMa.nMZFMS, :frmSpeMa.dtZahlEing, :frmSpeMa.nPNr, :frmSpeMa.nMVNr) '  )
				Int.SqlImmedX(@"INSERT INTO md
(mdarztnr, mdhalternr, mddatum, mdbereich, mdtext, mdms, mdzahleing, mdlfd, mdnr)
VALUES( :frmSpeMa.nArztNr, :frmSpeMa.nHalterNr, :frmSpeMa.dtMahnDat,
:frmSpeMa.nPBereich, :frmSpeMa.strPMDText, :frmSpeMa.nMZFMS, :frmSpeMa.dtZahlEing, :frmSpeMa.nPNr, :frmSpeMa.nMVNr) ");
				nPNr = nPNr + 1;
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <param name="pstrMDText"></param>
		/// <param name="pnBereich"></param>
		/// <returns></returns>
		public SalNumber PalWriteMDa(SalString pstrMDText, SalNumber pnBereich)
		{
			#region Actions
			using (new SalContext(this))
			{
				strPMDText = pstrMDText;
				nPBereich = pnBereich;
				// 23.11.15 Ä1286 dfZahlEing -> dtZahlEing
				// 06.11.18 Ä1806 + mvnr
				// Call SqlImmedX('INSERT INTO md
				// (mdarztnr, mdhalternr, mddatum, mdbereich, mdtext, mdms, mdzahleing, mdlfd, mdnr, mdgirocodedm)
				// VALUES( :frmSpeMa.nArztNrAlt, :nHalter, :frmSpeMa.dtMahnDat,
				// :frmSpeMa.nPBereich, :frmSpeMa.strPMDText, :frmSpeMa.nMZFMS, :frmSpeMa.dtZahlEing, :frmSpeMa.nPNr, :frmSpeMa.nMVFussNr, :frmSpeMa.nGirocodeDM) '  )
				Int.SqlImmedX(@"INSERT INTO md
(mdarztnr, mdhalternr, mddatum, mdbereich, mdtext, mdms, mdzahleing, mdlfd, mdnr, mdgirocodedm)
VALUES( :frmSpeMa.nArztNrAlt, :frmSpeMa.nHalterNrAlt, :frmSpeMa.dtMahnDat,
:frmSpeMa.nPBereich, :frmSpeMa.strPMDText, :frmSpeMa.nMZFMS, :frmSpeMa.dtZahlEing, :frmSpeMa.nPNr, :frmSpeMa.nMVFussNr, :frmSpeMa.nGirocodeDM) ");
				nPNr = nPNr + 1;
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmSpeMa WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmSpeMa_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmSpeMa_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmSpeMa_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmSpeMa_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Set dfZahlEing = SalDateCurrent()
			this.nMI[1] = 14;
			this.nMI[2] = 14;
			this.nMI[3] = 10;
			this.nPNr = 1;
			this.dtDefMahnDat = SalDateTime.Current;
			Int.SqlConnection(ref this.hSqlMV);
			Int.SqlConnection(ref this.hSqlOR);
			Int.SqlConnection(ref this.hSqlZI);
			Sal.WaitCursor(false);
			// 17.02.17 Ä1504 + Zahlungserinnerungen
			// Call SqlIstDa(' FROM mv WHERE mvms IS NULL OR mvms NOT IN (1,2,3)',bExists)
			Int.SqlIstDa(" FROM mv WHERE mvms > 4", ref this.bExists);
			if (this.bExists) 
			{
				Sal.MessageBox("Dieser Programmpunkt gilt NICHT für MB-Anfragen!!!", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
				this.DestroyWindow();
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmSpeMa_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlMV.Disconnect();
			this.hSqlOR.Disconnect();
			this.hSqlZI.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nSeite = 0;
			this.nRechZaehl = 0;
			this.nArztNrAlt = 0;
			this.nHalterNrAlt = 0;
			this.strPFehler = "";
			// Set strPAusland = ''
			// # Prüfung, ob bereits gespeichert
			// MV Rechnung für Rechnung
			this.strSelect = "SELECT DISTINCT mvmahndat  INTO :frmSpeMa.dtMahnDat FROM mv,md WHERE mvmahndat=mddatum";
			Int.SqlHandleExec(this.hSqlMV, this.strSelect, "Fehler", ref Var.nCount);
			this.nFetchMV = this.hSqlMV.FetchNext();
			while (this.nFetchMV != Sys.FETCH_EOF) 
			{
				this.nFetchMV = this.hSqlMV.FetchNext();
				Int.SqlImmed("DELETE FROM md WHERE mddatum= :frmSpeMa.dtMahnDat");
				Int.PalLog("SpeMa Lö " + Int.PalDateToStrJJJJMMTThhmmss(this.dtMahnDat));
			}
			this.hSqlMV.Commit();
			// #18 Prüfung, ob bezahlt
			// MV Rechnung für Rechnung
			this.strSelect = @"SELECT ROWID, mvarztnr, mvrechnr, mvms
INTO :frmSpeMa.strMvROWID, :frmSpeMa.nArztNr, :frmSpeMa.nRechNr, :frmSpeMa.nMS
FROM mv ORDER by mvarztnr, mvrechnr";
			Int.SqlHandleExec(this.hSqlMV, this.strSelect, "Fehler", ref Var.nCount);
			this.nFetchMV = this.hSqlMV.FetchNext();
			while (this.nFetchMV != Sys.FETCH_EOF) 
			{
				Int.SqlImmedSel(@"SELECT ROWID, rkkzzahl, rkmahnstufe
INTO :frmSpeMa.strROWID, :frmSpeMa.nRkKZZahl, :frmSpeMa.nRkMS
FROM rk
WHERE rkarztnr = :frmSpeMa.nArztNr AND rkrechnr = :frmSpeMa.nRechNr AND rkdeaktiv IS NULL");
				// inzwischen bezahlt
				if (this.nRkKZZahl > 1) 
				{
					Int.SqlImmed("DELETE FROM mv WHERE ROWID=:frmSpeMa.strMvROWID");
					Sal.MessageBox("Rech-Nr. " + this.nArztNr.ToString(0) + "/R" + this.nRechNr.ToString(0) + @" wurde mittlerweile
bezahlt und wird daher aus dem
Mahnvorschlag entfernt.", "Achtung", (Sys.MB_Ok | Sys.MB_IconAsterisk));
					Int.PalLog("MV wgZahlg gelöscht: " + this.nArztNr.ToString(0) + "/R" + this.nRechNr.ToString(0));
				}
				else if (this.nRkMS > this.nMS) 
				{
					Int.SqlImmed("DELETE FROM mv WHERE ROWID=:frmSpeMa.strMvROWID");
					Sal.MessageBox("Rech-Nr. " + this.nArztNr.ToString(0) + "/R" + this.nRechNr.ToString(0) + " hat mittlerweile bereits MS " + this.nRkMS.ToString(0) + @"
bekommen und wird daher aus dem
Mahnvorschlag entfernt.", "Achtung", (Sys.MB_Ok | Sys.MB_IconAsterisk));
					Int.PalLog("MV wgMS" + this.nRkMS.ToString(0) + " gelöscht: " + this.nArztNr.ToString(0) + "/R" + this.nRechNr.ToString(0));
				}
				this.nFetchMV = this.hSqlMV.FetchNext();
			}
			this.hSqlMV.Commit();
			// 02.07.09 OTÄ138 Berechnung der Mahngeb. und Zinsen für alle Mahnungen
			this.strSelect = @"SELECT mvarztnr, mvhalternr, mvname, mvrechnr, mvms , mvrechdat , mvdmrest, mvmahndat, hland
INTO :frmSpeMa.nArztNr, :frmSpeMa.nHalterNr,  :frmSpeMa.strHN1,
:frmSpeMa.nRechNr , :frmSpeMa.nMS,
:frmSpeMa.dtRechDat, :frmSpeMa.nDMRest, :frmSpeMa.dtMahnDat, :frmSpeMa.strLand
FROM MV,H WHERE mvarztnr=harztnr AND mvhalternr=hhalternr AND hdeaktiv IS NULL
ORDER BY mvarztnr asc , mvhalternr asc , mvms desc";
			Sal.WaitCursor(true);
			Int.SqlHandleExec(this.hSqlMV, this.strSelect, "Hole MV bei DruMa", ref Var.nErr);
			this.nFetchMV = this.hSqlMV.FetchNext();
			// Set bRaten = FALSE
			// If nMS = NUMBER_Null
			// Set bRaten = TRUE
			while (this.nFetchMV != Sys.FETCH_EOF) 
			{
				// If bRaten
				// Else
				// kann raus?
				// Call SqlIstDa(' FROM mg WHERE mgarztnr = :frmSpeMa.nArztNr',bExists)
				// If bExists
				// Call SqlImmedSel('SELECT mgdm1, mgdm2, mgdm3  INTO
				// :frmSpeMa.nMG[1], :frmSpeMa.nMG[2], :frmSpeMa.nMG[3]
				// FROM  mg WHERE mgarztnr = :frmSpeMa.nArztNr')
				// Else
				// Call SqlImmedSel('SELECT mgdm1, mgdm2, mgdm3  INTO
				// :frmSpeMa.nMG[1], :frmSpeMa.nMG[2], :frmSpeMa.nMG[3]
				// FROM  mg WHERE mgarztnr = 0')
				Var.nArzt = this.nArztNr;
				this.Mahnung_Pos(this.nArztNr, this.nHalterNr, this.nRechNr, false);
				this.SetStatusBarText("Berechne Halter-Nr.: " + this.nArztNr.ToString(0) + "/" + this.nHalterNr.ToString(0));
				// Fetchnext usw. erfolgt in Mahnung_Pos
			}
			this.hSqlMV.Commit();

			this.dtMahnDat = this.dtDefMahnDat;

			Int.SqlImmedX("UPDATE mv SET mvmahndat = :frmSpeMa.dtMahnDat WHERE mvmahndat IS NULL");
			// 23.11.15 Ä1286 + mvzahleing
			// 06.11.18 Ä1806 + mvnr
			// ORDER BY mvarztnr asc , mvhalternr asc -> ORDER BY mvnr asc
			this.strSelect = @"SELECT mvarztnr, mvhalternr, mvname, mvrechnr, mvms,
mvrechdat , mvdmrest, mvmahndat, mvzahleing, mvdmmahngeb, mvdmzins, mvnr, hland
INTO :frmSpeMa.nArztNr, :frmSpeMa.nHalterNr,  :frmSpeMa.strHN1, :frmSpeMa.nRechNr , :frmSpeMa.nMS,
:frmSpeMa.dtRechDat, :frmSpeMa.nDMRest, :frmSpeMa.dtMahnDat, :frmSpeMa.dtZahlEing, :frmSpeMa.nMahnGeb, :frmSpeMa.nZinsen, :frmSpeMa.nMVNr, :frmSpeMa.strLand
FROM MV,H WHERE mvarztnr=harztnr AND mvhalternr=hhalternr AND hdeaktiv IS NULL
ORDER BY mvnr asc , mvms desc";
			Sal.WaitCursor(true);
			Int.SqlHandleExec(this.hSqlMV, this.strSelect, "Hole MV bei DruMa", ref Var.nErr);
			this.nFetchMV = this.hSqlMV.FetchNext();
			// Set bRaten = FALSE
			// If nMS = NUMBER_Null
			// Set bRaten = TRUE
			while (this.nFetchMV != Sys.FETCH_EOF) 
			{
				// 13.04.06
				if (this.strLand == "" || this.strLand == "--") 
				{
					this.strPFehler = this.strPFehler + this.nArztNr.ToString(0) + " /H " + this.nHalterNr.ToString(0) + " /R " + this.nRechNr.ToString(0) + @"
";
					Int.PalLog("SpeMa ohne Land: " + this.nArztNr.ToString(0) + " /H " + this.nHalterNr.ToString(0) + " /R " + this.nRechNr.ToString(0));
				}
				// Else If strLand != 'DE'
				// Set strPAusland = strPAusland || SalNumberToStrX(nArztNr,0) || ' /H ' || SalNumberToStrX(nHalterNr,0) || ' /R ' || SalNumberToStrX(nRechNr,0) || ': ' || strLand || '
				// '

				// If bRaten
				// Call RatMahnung_Kopf(nArztNr,nHalterNr, nRechNr)
				// Else
				// If nHalterNr = 5562
				// Call SalMessageBeep( 0 )
				if (this.nArztNr != this.nArztNrAlt || this.nHalterNr != this.nHalterNrAlt || Var.nHalter == 0) 
				{
					this.Mahnung_Kopf(this.nArztNr, this.nHalterNr, this.nRechNr);
				}
				this.Mahnung_Pos(this.nArztNr, this.nHalterNr, this.nRechNr, true);
				this.SetStatusBarText("Halter-Nr.: " + this.nArztNr.ToString(0) + "/" + this.nHalterNr.ToString(0));
				// Fetchnext usw. erfolgt in Mahnung_Pos
			}
			this.hSqlMV.Commit();

			Sal.WaitCursor(false);
			if (this.strPFehler != "" || this.strPAusland != "") 
			{
				// If strPAusland != ''
				// Set strPAusland = 'Folgende Ausländer sind dabei:
				// 
				// ' || strPAusland
				this.strPAusland = "";
				if (this.strPFehler != "") 
				{
					this.strPAusland = this.strPAusland + @"Bei folgenden Haltern fehlt das Land:

" + this.strPFehler;
				}
				Sal.MessageBox(this.strPAusland, "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			this.DestroyWindow();
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
			this.DestroyWindow();
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class Mahnung_PosLocals
			{
				public SalNumber nArztX = 0;
				public SalNumber nHalterX = 0;
				public SalNumber nRechX = 0;
				public SalBoolean bWrite = false;
			}
		}
		#endregion
	}
}
