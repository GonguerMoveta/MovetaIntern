// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmInfoSasse : FCRibbonFormWindow
	{
		#region Window Variables
		public SalSqlHandle hSqlInfo = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalNumber nErr = 0;
		public SalWindowHandle hWndReport = SalWindowHandle.Null;
		public SalString strReportName = "";
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmInfoSasse()
		{
			// Assign global reference.
			App.frmInfoSasse = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
			//FC:FINAL: create menu as RibbonBar
			this.CreateRibbon();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmInfoSasse CreateWindow(Control owner)
		{
			frmInfoSasse frm = new frmInfoSasse();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmInfoSasse FromHandle(SalWindowHandle handle)
		{
			return ((frmInfoSasse)SalWindow.FromHandle(handle, typeof(frmInfoSasse)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem__Copy_EnabledWhen()
		{
			return Sal.EditCanCut();
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem__Copy_MenuActions()
		{
			Sal.EditCopy();
			return 0;
		}
		
		/// <summary>
		/// Menu EnabledWhen Expression
		/// </summary>
		/// <returns></returns>
		private bool menuItem_Clear_EnabledWhen()
		{
			return Sal.EditCanCut();
		}
		
		/// <summary>
		/// Menu Actions
		/// </summary>
		/// <returns></returns>
		private SalNumber menuItem_Clear_MenuActions()
		{
			Sal.EditClear();
			return 0;
		}
		
		/// <summary>
		/// frmInfoSasse WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmInfoSasse_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmInfoSasse_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Close:
					this.frmInfoSasse_OnSAM_Close(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmInfoSasse_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlConnection(ref this.hSqlInfo);
			#endregion
		}
		
		/// <summary>
		/// SAM_Close event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmInfoSasse_OnSAM_Close(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlInfo.Disconnect();
			Sal.EnableWindow(App.frmMain.pbStatistik);
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.rbW.Checked == true) 
			{
				this.strSelect = "SELECT @WEEKBEG(rkrechdat), AVG(rkarztnr), count(*), avg(rkdmleis+rkdmarzn)";
			}
			else if (this.rbM.Checked == true) 
			{
				this.strSelect = "SELECT @MONTHBEG(rkrechdat), AVG(rkarztnr), count(*), avg(rkdmleis+rkdmarzn)";
			}
			else if (this.rbQ.Checked == true) 
			{
				this.strSelect = "SELECT @QUARTERBEG(rkrechdat),AVG(rkarztnr), count(*), avg(rkdmleis+rkdmarzn)";
			}
			else if (this.rbJ.Checked == true) 
			{
				this.strSelect = "SELECT @YEARBEG(rkrechdat), AVG(rkarztnr), count(*), avg(rkdmleis+rkdmarzn) ";
			}
			// 11.08.15 F2516 + AND rkrechnr<999990  / 1992-5-31 -> 2005-01-01
			this.strSelect = this.strSelect + @", sum(rkdmleis+rkdmarzn),sum(rkdmmahn),sum(rkdmzins)
INTO :frmInfoSasse.tblAusw.coldtRechDat,
:frmInfoSasse.tblAusw.colnArztNr,
:frmInfoSasse.tblAusw.colnAnzahl,
:frmInfoSasse.tblAusw.colnSchnitt,
:frmInfoSasse.tblAusw.colnHF,
:frmInfoSasse.tblAusw.colnMG,
:frmInfoSasse.tblAusw.colnZins
FROM rk WHERE rkarztnr = :frmInfoSasse.dfArztNr AND rkrechdat>'2005-01-01'
AND rkrechnr<999990 AND rkdeaktiv IS NULL
GROUP BY 1";
			Sal.WaitCursor(true);
			this.tblAusw.Populate(this.hSqlInfo, this.strSelect, Sys.TBL_FillAll);
			this.hSqlInfo.Commit();
			// Call ccGraph.Draw()
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// pbKreuztab WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKreuztab_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbKreuztab_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKreuztab_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalStatusSetText(hWndForm,'Erstelle Kreuztabelle -  Bitte warten !')
			// Set frmMain.nErr = 1
			// Set frmMain.strReportName = 'KREUZTAB'
			// Call PalReport(frmMain,'KREUZTAB.QRP',
			// ':frmInfoSasse.dfArztNr,:frmMain.dtRechDat,
			// :frmMain.nRechGeb,:frmMain.nRechDM',
			// 'ArztNr,Datum,DMGeb,DMRech',nErr)
			// Call SalWaitCursor( FALSE )
			dlgLlDruck.ModalDialog(App.frmMain, "KreuztabelleRG.lst", "");
			#endregion
		}
		
		/// <summary>
		/// pbKreuztabMG WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKreuztabMG_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbKreuztabMG_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKreuztabMG_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalStatusSetText(hWndForm,'Erstelle Kreuztabelle -  Bitte warten !')
			// Set frmMain.nErr = 1
			// Set frmMain.strReportName = 'KREUZTABMG'
			// Call PalReport(frmMain,'KREUZTAB.QRP',
			// ':frmInfoSasse.dfArztNr,:frmMain.dtRechDat,
			// :frmMain.nRechGeb,:frmMain.nRechDM',
			// 'ArztNr,Datum,DMGeb,DMRech',nErr)
			// Call SalWaitCursor( FALSE )
			dlgLlDruck.ModalDialog(App.frmMain, "KreuztabelleMG.lst", "");
			#endregion
		}
		
		/// <summary>
		/// pbKreuztabRGYTD WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKreuztabRGYTD_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbKreuztabRGYTD_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKreuztabRGYTD_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 06.05.22
			dlgLlDruck.ModalDialog(App.frmMain, "KreuztabelleRG.lst", "YTD");
			#endregion
		}
		
		/// <summary>
		/// pbKreuztabMGYTD WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKreuztabMGYTD_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbKreuztabMGYTD_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKreuztabMGYTD_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 06.05.22
			dlgLlDruck.ModalDialog(App.frmMain, "KreuztabelleMG.lst", "YTD");
			#endregion
		}
		
		/// <summary>
		/// pbDrucken WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbDrucken_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbDrucken_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.nErr = 1;
			this.strReportName = "STATIST";
			this.hWndReport = Sal.ReportTableView(this.tblAusw, Sys.hWndNULL, "STATIST.QRP", ref this.nErr);
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PostMessage(Sys.SAM_Close, 0, 0);
			#endregion
		}
		#endregion
		
		#region tblAusw
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblAuswTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmInfoSasse _frmInfoSasse = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblAuswTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmInfoSasse frmInfoSasse
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmInfoSasse == null) 
					{
						_frmInfoSasse = (frmInfoSasse)this.FindForm();
					}
					return _frmInfoSasse;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblAuswTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblAuswTableWindow)SalWindow.FromHandle(handle, typeof(tblAuswTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
