// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// EU-Standardüberweisung
	/// </summary>
	/// <param name="nArztNr"></param>
	/// <param name="strBearbeiter"></param>
	/// <param name="dtBearbDatum"></param>
	public partial class frmEUUeberw : SalFormWindow
	{
		#region Window Parameters
		public SalNumber nArztNr;
		public SalString strBearbeiter;
		public SalDateTime dtBearbDatum;
		#endregion
		
		#region Window Variables
		public SalNumber nJob = 0;
		public SalSqlHandle hSqlLe = SalSqlHandle.Null;
		public SalSqlHandle hSqlLp = SalSqlHandle.Null;
		public SalString strSelect = "";
		public SalNumber nFetchLe = 0;
		public SalNumber nFetchLp = 0;
		public SalNumber nPosNr = 0;
		public SalNumber nArztNr2 = 0;
		public SalNumber nHalterNr = 0;
		public SalNumber nRechNr = 0;
		public SalNumber nRechNrLe = 0;
		public SalString strPraxArt = "";
		public SalString strLA = "";
		public SalBoolean bExists = false;
		public SalBoolean bAufschlag = false;
		public SalNumber nAuGrenze = 0;
		public SalNumber nAuDM = 0;
		public SalNumber nAuKZ = 0;
		public SalString strAuRgText = "";
		public SalNumber nRechSumme = 0;
		public SalDateTime dtDatum = SalDateTime.Null;
		public SalDateTime dtRechDat = SalDateTime.Null;
		public SalNumber nSeite = 0;
		public SalNumber nZeile = 0;
		public SalNumber nRechZaehl = 0;
		public SalString strDrucker = "";
		public SalNumber nFaellTg = 0;
		public SalString strRT1 = "";
		public SalString strRT2 = "";
		public SalString strMZF = "";
		public SalNumber nBrutto = 0;
		public SalString strBruttoLA = "";
		public SalNumber nBruttoMwSt = 0;
		public SalNumber nBruttoDM = 0;
		public SalString strLogo = "";
		public SalNumber nStatus = 0;
		public SalNumber nCount = 0;
		public SalBoolean bInsert = false;
		public SalNumber nUeber = 0;
		public SalNumber nError = 0;
		public SalDateTime dt1 = SalDateTime.Null;
		public SalDateTime dt2 = SalDateTime.Null;
		public SalNumber nTime = 0;
		public SalString strPath = "";
		public SalString strDKUser = "";
		public SalNumber nFileSize = 0;
		public SalNumber nFileSize0 = 0;
		public SalNumber nSBMSt1 = 0;
		public SalNumber nSBMStGeb = 0;
		public SalString strDevice = "";
		public SalString strDriver = "";
		public SalString strPort = "";
		public SalString strOldDevice = "";
		public SalString strOldDriver = "";
		public SalString strOldPort = "";
		public SalNumber nSBMMwSt = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmEUUeberw(SalNumber nArztNr, SalString strBearbeiter, SalDateTime dtBearbDatum)
		{
			// Assign global reference.
			App.frmEUUeberw = this;
			// Window Parameters initialization.
			this.nArztNr = nArztNr;
			this.strBearbeiter = strBearbeiter;
			this.dtBearbDatum = dtBearbDatum;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmEUUeberw CreateWindow(Control owner, SalNumber nArztNr, SalString strBearbeiter, SalDateTime dtBearbDatum)
		{
			frmEUUeberw frm = new frmEUUeberw(nArztNr, strBearbeiter, dtBearbDatum);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmEUUeberw FromHandle(SalWindowHandle handle)
		{
			return ((frmEUUeberw)SalWindow.FromHandle(handle, typeof(frmEUUeberw)));
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmEUUeberw WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmEUUeberw_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmEUUeberw_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmEUUeberw_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmEUUeberw_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// If SalPrtGetDefault( strDevice, strDriver, strPort )
			// Set dfDrucker = strDevice || ' an ' || strPort
			// Set strOldDevice = strDevice
			// Set strOldDriver = strDriver
			// Set strOldPort = strPort
			this.dfArztNr.Number = this.nArztNr;
			// Set dfExempl = 1
			Int.SqlImmedSel(@"SELECT AKZPRAXART,ANR2 INTO :frmEUUeberw.strPraxArt,:frmEUUeberw.nArztNr2
FROM A WHERE AARZTNR = :frmEUUeberw.dfArztNr");
			if (this.strPraxArt == "2") 
			{
				this.dfArztNr2.Number = this.nArztNr;
				this.dfArztNr.Number = this.nArztNr2;
				this.nArztNr = this.dfArztNr.Number;
				this.nArztNr2 = this.dfArztNr2.Number;
			}
			else if (this.strPraxArt == "1") 
			{
				this.dfArztNr2.Number = this.nArztNr2;
				this.dfArztNr.Number = this.nArztNr;
			}
			// Call SqlConnection(hSqlLe)
			// Call SqlConnection(hSqlLp)
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmEUUeberw_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call PEClosePrintJob( nJob )
			// Call SqlDisconnect(hSqlLe)
			// Call SqlDisconnect(hSqlLp)
			// Call SalPrtSetDefault( strOldDevice, strOldDriver, strOldPort )
			#endregion
		}
		
		/// <summary>
		/// pbOk WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOk_OnSAM_Click(sender, e);
					break;
				
				// On SAM_Click
				
				// Call Ausdruck( frmEUUeberw.nArztNr, dfA1von, dfA1bis )
				
				// If Not SalIsNull(dfArztNr2)
				
				// Call Ausdruck( frmEUUeberw.dfArztNr2, dfA2von, dfA2bis )
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOk_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// XXXXX
			if (this.dfA1von.IsEmpty()) 
			{
				this.dfA1von.Number = 1;
			}
			if (this.dfA1bis.IsEmpty()) 
			{
				this.dfA1bis.Number = 999989; // 12.04.12 F1283 99999 -> 999989
			}
			if (this.dfA2von.IsEmpty()) 
			{
				this.dfA2von.Number = 1;
			}
			if (this.dfA2bis.IsEmpty()) 
			{
				this.dfA2bis.Number = 999989; // 12.04.12 F1283 99999 -> 999989
			}


			Int.SqlIstDa(@" FROM LE WHERE (learztnr=:frmEUUeberw.nArztNr OR learztnr=:frmEUUeberw.nArztNr2)
AND (lerechnr=0 OR lerechnr IS NULL)
AND lebearbeiter=:frmEUUeberw.strBearbeiter
AND lebearbdatum=:frmEUUeberw.dtBearbDatum", ref this.bExists);
			if (!(this.bExists)) 
			{
				Int.SqlIstDa(@" FROM LEP WHERE (leparztnr=:frmEUUeberw.nArztNr OR leparztnr=:frmEUUeberw.nArztNr2)
AND (leprechnr=0 OR leprechnr IS NULL)
AND lepbearbeiter=:frmEUUeberw.strBearbeiter
AND lebearbdatum=:frmEUUeberw.dtBearbDatum", ref this.bExists);
			}
			if (this.bExists) 
			{
				Sal.MessageBox("Es sind noch nicht alle Rechnungen gedruckt.", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			if (!(this.bExists)) 
			{
				Sal.WaitCursor(false);
				// 15.09.98
				// Set strDrucker= 'EU-Ueberw.rpt'
				// 30.4.98 rech_ra.rpt
				// Call Ausdruck( frmEUUeberw.nArztNr, dfA1von, dfA1bis, dfExempl, strDrucker )
				// If Not SalIsNull(dfArztNr2)
				// 15.09.98
				// Set strDrucker= 'EU-Ueberw.rpt'
				// Call Ausdruck( frmEUUeberw.dfArztNr2, dfA2von, dfA2bis, dfExempl, strDrucker )

				// LL
				dlgLlDruck.ModalDialog(App.frmMain, "EU-Überweisungen.lst", "");
				// 20.09.99
				Int.SqlImmed(@"UPDATE le SET lestatus='EUÜbe'
WHERE " + Int.PalArztNr("le", this.nArztNr, this.nArztNr2) + @"
AND lebearbeiter=:frmEUUeberw.strBearbeiter
AND lebearbdatum=:frmEUUeberw.dtBearbDatum");
			}

			this.DestroyWindow();
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// Call SalPostMsg(hWndForm, SAM_Close, 0, 0)
			this.DestroyWindow();
			#endregion
		}
		#endregion
	}
}
