// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;
using Dart.Ftp;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	public partial class frmAbrFTP : SalFormWindow
	{
		#region Window Variables
		public SalString strTemp = "";
		public SalVariant vData = new SalVariant();
		public SalBoolean bPFTPOk = false;
        public Ftp axFTP = new Ftp();
        public Listing objFTPList = new Listing();
		public ListEntry objFTPEntry;
		public SalNumber nPCount = 0;
		public SalString strName = "";
		public SalString strDirectory = "";
		public SalBoolean bOPOk = false;
		public SalString strDate = "";
		public SalNumber nSize = 0;
		public SalFileHandle hDisk = SalFileHandle.Null;
		public SalString strLine = "";
		public SalBoolean bLogin = false;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmAbrFTP()
		{
			// Assign global reference.
			App.frmAbrFTP = this;
			// This call is required by the Windows Form Designer.
			InitializeComponent();

            //FC:FINAL:AX_DartFtp:
            this.axFTP.Progress += AxFTP_Progress; ;
            //FC:FINAL:AX_DartFtp:
            this.axFTP.Error += AxFTP_Error; ;
        }

        private void AxFTP_Error(object sender, ErrorEventArgs e)
        {
            mlAntwort.Text = mlAntwort.Text + e.GetException().Message;
			dfSichText2.Text = "Fehler/" + dfSichText2.Text;
        }

        private void AxFTP_Progress(object sender, ProgressEventArgs e)
        {
			mlAntwort.Text = mlAntwort.Text + "(Command: " + e.Item.Action + " Status: " + e.Item.Status.ToString() + "): " + Int.PalStrReplace(e.Item.Response, "FTPPeg", "<User>") + Environment.NewLine; 
            //FC:CHECK:
            if (e.Item.Status == CopyStatus.Completed && e.Item.Action == CopyAction.Put && e.Item.Length > 1024)
            {
                this.dfSichText2.Text = "Übertragung abgeschlossen";
            }
            else if (e.Item.Status == CopyStatus.InProgress)
            {
				//FC:CHECK:
				this.dfSichText2.Text = Sal.NumberToStrX(e.Item.Length / 1024, 0) + "kB übertragen.";
            }
            else if (e.Item.Status == CopyStatus.Failed)
            {
                this.dfSichText2.Text = "Fehler/" + dfSichText2.Text;
            }
        }
        #endregion

        #region System Methods/Properties

        /// <summary>
        /// Shows the form window.
        /// </summary>
        /// <param name="owner"></param>
        /// <returns></returns>
        public static frmAbrFTP CreateWindow(Control owner)
		{
			frmAbrFTP frm = new frmAbrFTP();
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmAbrFTP FromHandle(SalWindowHandle handle)
		{
			return ((frmAbrFTP)SalWindow.FromHandle(handle, typeof(frmAbrFTP)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalFTPCheck()
		{
			#region Actions
			using (new SalContext(this))
			{
				tblFTP.ResetTable();
				Sal.WaitCursor(true);

				PalFTPLogout();
				if (PalFTPLogin()) 
				{
				}

				// If Not bLogin
				// If PalFTPLogin(  )
				if (bLogin) 
				{
					// Call axFTP.PropSetDirectory( String )
					//axFTP.List("/Pegasus");
					//axFTP.PropGetListing(objFTPList);
					//objFTPList.PropGetCount(ref nPCount);
                    objFTPList = axFTP.List("/Pegasus", "", ListType.Full);
					this.nPCount = this.objFTPList.Count;
                    
                    while (nPCount > 0) 
					{
						vData.SetNumber(nPCount, Sys.VT_I2);
						//objFTPList.Item(vData, objFTPEntry);
						//objFTPEntry.PropGetName(ref strName);
						//objFTPEntry.PropGetDirectory(ref strDirectory);
						//objFTPEntry.PropGetTimeStamp(ref strDate);
						//objFTPEntry.PropGetSize(ref nSize);

                        objFTPEntry = objFTPList[nPCount - 1]/*Item(vData, objFTPEntry)*/;
                        strName = objFTPEntry.Name;
                        strDirectory = objFTPEntry.DirectoryName;
                        strDate = objFTPEntry.TimeStamp;
                        nSize = objFTPEntry.Length;

                        // If SalFileOpen( hDisk,  strTemp || '\\' || strName, OF_Exist )
                        tblFTP.InsertRow(Sys.TBL_MaxRow);
						// 30.08.22
						tblFTP.colQuelle.Text = "Pegasus";

						tblFTP.colDatum.Text = strDate;
						tblFTP.colGroesse.Number = nSize / 1024;
						tblFTP.colName.Text = strName;
						// 04.05.11 F914 auskommentiert
						nPCount = nPCount - 1;
					}
				}
				// 30.08.22
				//axFTP.List("/MovetaON");
				//axFTP.PropGetListing(objFTPList);
				//objFTPList.PropGetCount(ref nPCount);
				objFTPList = axFTP.List("/MovetaON", "", ListType.Full);
				this.nPCount = this.objFTPList.Count;

                while (nPCount > 0) 
				{
					vData.SetNumber(nPCount, Sys.VT_I2);
					//objFTPList.Item(vData, objFTPEntry);
					//objFTPEntry.PropGetName(ref strName);
					//objFTPEntry.PropGetDirectory(ref strDirectory);
					//objFTPEntry.PropGetTimeStamp(ref strDate);
					//objFTPEntry.PropGetSize(ref nSize);
                    objFTPEntry = objFTPList[nPCount - 1]/*Item(vData, objFTPEntry)*/;
                    strName = objFTPEntry.Name;
                    strDirectory = objFTPEntry.DirectoryName;
                    strDate = objFTPEntry.TimeStamp;
                    nSize = objFTPEntry.Length;

                    // If SalFileOpen( hDisk,  strTemp || '\\' || strName, OF_Exist )
                    tblFTP.InsertRow(Sys.TBL_MaxRow);
					// 30.08.22
					tblFTP.colQuelle.Text = "MovetaON";

					tblFTP.colDatum.Text = strDate;
					tblFTP.colGroesse.Number = nSize / 1024;
					tblFTP.colName.Text = strName;
					// 04.05.11 F914 auskommentiert
					nPCount = nPCount - 1;
				}

				this.SetStatusBarText("");
				Sal.WaitCursor(false);
			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalBoolean PalFTPLogin()
		{
			#region Actions
			using (new SalContext(this))
			{
                //bLogin = axFTP.Login("abr.tvn-elze.de", "ftptvn", "Ep9vyRsr8", "", 21);
                this.axFTP.Connect("abr.tvn-elze.de");
                this.axFTP.Authenticate("ftptvn", "Ep9vyRsr8");//, "", 21);
                bLogin = this.axFTP.Connected;
                if (bLogin) 
				{
					// 06.04.22 F4878 6000 -> 60000
					axFTP.Timeout = 60000;
					// 22.12.09
					// 07.12.12
					// Call axFTP.PropSetPassive( FALSE )
					//axFTP.PropSetPassive(true);
				}
				else
				{
					dfSichText2.Text = "Keine Internetverbindung zum Server abr.tvn-elze.de";
				}
				// 06.04.22 F4878
				return bLogin;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalFTPLogout()
		{
			#region Actions
			using (new SalContext(this))
			{
				if (bLogin) 
				{
					axFTP.Close();
				}
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmAbrFTP WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAbrFTP_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_CreateComplete:
					this.frmAbrFTP_OnSAM_CreateComplete(sender, e);
					break;
				
				case Sys.SAM_Timer:
					this.frmAbrFTP_OnSAM_Timer(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmAbrFTP_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_CreateComplete event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAbrFTP_OnSAM_CreateComplete(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.PalGetSize(this, false);
			this.bLogin = false;
			if (this.PalFTPLogin()) 
			{
			}
			// Call PalPNCheck(  )
			this.PalFTPCheck();
			this.SetTimer(1, 300000);
			this.SetStatusBarText("Timer: 5 Minuten");
			#endregion
		}
		
		/// <summary>
		/// SAM_Timer event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAbrFTP_OnSAM_Timer(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalFTPCheck();
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmAbrFTP_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.KillTimer(1);
			this.PalFTPLogout();
			Int.PalSetSize(this);
			#endregion
		}
		
		/// <summary>
		/// tblFTP WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblFTP_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_RowHeaderClick:
					this.tblFTP_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_Click:
					this.tblFTP_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblFTP_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Var.bfrmDiskEin)  // 22.12.15 Ä1304
			{
				Sal.MessageBox("Das Fenster ist noch geöffnet und kann kein zweites Mal geöffnet werden.", "bereits geöffnet", (Sys.MB_Ok | Sys.MB_IconAsterisk));
			}
			else
			{
				// 06.04.22 F4878
				// Set bPFTPOk = axFTP.Login( 'abr.tvn-elze.de', 'ftptvn', 'Ep9vyRsr8', '', 21 )
				// If bPFTPOk
				this.PalFTPLogout();
				if (this.PalFTPLogin()) 
				{
					this.strTemp = Vis.DosGetEnvString("TEMP");
					this.vData.SetString(this.strTemp + "\\" + this.tblFTP.colName.Text);
					// 30.08.22
					// Set bPFTPOk = axFTP.Retrieve( '/Pegasus/' || frmAbrFTP.tblFTP.colName, vData, 0, 0 )
					//this.bPFTPOk = this.axFTP.Retrieve("/" + this.tblFTP.colQuelle.Text + "/" + this.tblFTP.colName.Text, this.vData, 0, 0);
                    var result = this.axFTP.Get("/" + this.tblFTP.colQuelle.Text + "/" + this.tblFTP.colName.Text, this.vData.ToString(), Synchronize.Off);
                    if (result.Status == CopyStatus.Completed) 
					{
						this.hDisk.Open(this.strTemp + "\\" + this.tblFTP.colName.Text, Sys.OF_Read);
						while (this.hDisk.GetString(ref this.strLine, 2048)) 
						{
							if (this.strLine.Left(2) == "EE") 
							{
								this.tblFTP.strEE = "EE";
							}
						}
						this.hDisk.Close();
						if (this.tblFTP.strEE == "EE") 
						{

							frmDiskEin.CreateWindow(this.tblFTP, this.strTemp + "\\" + this.tblFTP.colName.Text, this.tblFTP.colName.Text, "I", this.tblFTP.colQuelle.Text);
						}
						else
						{
							Sal.MessageBox("Die Datei ist nicht komplett (wird noch hochgeladen oder defekt).", "nicht einzulesen", (Sys.MB_Ok | Sys.MB_IconAsterisk));
						}
					}
					// Call axFTP.Logout(  )
				}
				else
				{
					Sal.MessageBox("Die Anmeldung am Server hat nicht geklappt.", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
				}
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblFTP_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblFTP.PostMessage(Sys.SAM_RowHeaderClick, 0, 0);
			#endregion
		}
		
		/// <summary>
		/// pbAkt WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAkt_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAkt_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAkt_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalFTPCheck();
			#endregion
		}
		#endregion
		
		#region tblFTP
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblFTPTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmAbrFTP _frmAbrFTP = null;
			
			
			#region Window Variables
			public SalString strEE = "";
			#endregion
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblFTPTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmAbrFTP frmAbrFTP
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmAbrFTP == null) 
					{
						_frmAbrFTP = (frmAbrFTP)this.FindForm();
					}
					return _frmAbrFTP;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblFTPTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblFTPTableWindow)SalWindow.FromHandle(handle, typeof(tblFTPTableWindow)));
			}
			#endregion
		}
		#endregion
	}
}
