// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;

namespace Moveta.Intern
{
	
	/// <summary>
	/// </summary>
	/// <param name="strROWID"></param>
	public partial class frmUeberw : SalQuickTabsForm
	{
		#region Window Parameters
		public SalString strROWID;
		#endregion
		
		#region Window Variables
		public SalNumber nTVNr = 0;
		public SalString strSelect = "";
		public SalString strAbsBank = "";
		public SalString strKonto = "";
		public SalString strBLZ = "";
		public SalString strBearbeiter = "";
		public SalString strBuchText = "";
		public SalNumber nManuell = 0;
		public SalSqlHandle hSqlUe = SalSqlHandle.Null;
		public SalNumber nFetchUe = 0;
		public SalString strBuchArt = "";
		public SalBoolean bExists = false;
		public SalNumber nBuchArt = 0;
		public SalNumber nSoll1 = 0;
		public SalNumber nSoll2 = 0;
		public SalNumber nSoll3 = 0;
		public SalNumber nHaben1 = 0;
		public SalNumber nHaben2 = 0;
		public SalNumber nHaben3 = 0;
		public SalNumber nDM1 = 0;
		public SalNumber nDM2 = 0;
		public SalNumber nDM3 = 0;
		public SalBoolean bMitSt = false;
		public SalNumber nBelNr = 0;
		public SalNumber nKeinGeld = 0;
		public SalString lsGrund = "";
		public SalString strLand = "";
		public SalString strTVIBAN = "";
		public SalString strTVBIC = "";
		public SalString strTABIC = "";
		public SalNumber nKeinGuthaben = 0;
		public SalNumber nKeinDarlehen = 0;
		public SalNumber nRow = 0;
		public SalString strBuchText2 = "";
		public SalDateTime dtBuchDat = SalDateTime.Null;
		public SalNumber nSumme = 0;
		public SalNumber nMwSt = 0;
		public SalNumber nBrutto = 0;
		public SalNumber nZinsen = 0;
		public SalNumber nTKFall = 0;
		#endregion
		
		#region Constructors/Destructors
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public frmUeberw(SalString strROWID)
		{
			// Assign global reference.
			App.frmUeberw = this;
			// Window Parameters initialization.
			this.strROWID = strROWID;
			// This call is required by the Windows Form Designer.
			InitializeComponent();
		}
		#endregion
		
		#region System Methods/Properties
		
		/// <summary>
		/// Shows the form window.
		/// </summary>
		/// <param name="owner"></param>
		/// <returns></returns>
		public static frmUeberw CreateWindow(Control owner, SalString strROWID)
		{
			frmUeberw frm = new frmUeberw(strROWID);
			frm.Show(owner);
			return frm;
		}
		
		/// <summary>
		/// Returns the object instance associated with the window handle.
		/// </summary>
		/// <param name="handle"></param>
		/// <returns></returns>
		[DebuggerStepThrough]
		public static frmUeberw FromHandle(SalWindowHandle handle)
		{
			return ((frmUeberw)SalWindow.FromHandle(handle, typeof(frmUeberw)));
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// </summary>
		/// <param name="nTyp"></param>
		/// <param name="nParam"></param>
		/// <returns></returns>
		public SalNumber DropDownEmpf(SalNumber nTyp, SalNumber nParam)
		{
			#region Local Variables
			SqlLocals.DropDownEmpfLocals locals = new SqlLocals.DropDownEmpfLocals();
			// String: UEEEMPFNAME
			// String: UEEBLZ
			// String: UEEKONTO
			// Date/Time: UEEDATUM
			#endregion
			
			#region Actions
			using (new SalContext(this, locals))
			{

				// PPJ: Assign parameters to the locals instance.
				locals.nTyp = nTyp;
				locals.nParam = nParam;

				tblSuch.ResetTable();
				// Set strPTemp = '%' ||  strPSave  || '%'

				// 29.12.17 Ä1676 + ROWID
				// 12.01.18
				if (locals.nTyp == 1) 
				{
					locals.strPSave = dfEmpfKo.Text;
					locals.strPSelect = @"SELECT ROWID, ueeempfname, ueeblz, ueekonto, ueeiban, ueebic
FROM uee
INTO :frmUeberw.tblSuch.colROWID, :frmUeberw.tblSuch.colEmpf, :frmUeberw.tblSuch.colBLZ, :frmUeberw.tblSuch.colKonto, :frmUeberw.tblSuch.colIBAN, :frmUeberw.tblSuch.colBIC
WHERE @LICS(ueeempfname) LIKE @LICS('%" + locals.strPSave + "%\') ORDER BY ueedatum";
				}
				else
				{
					locals.strPSave = dfEmpfIBAN.Text;
					locals.strPSelect = @"SELECT ROWID, ueeempfname, ueeblz, ueekonto, ueeiban, ueebic
FROM uee
INTO :frmUeberw.tblSuch.colROWID, :frmUeberw.tblSuch.colEmpf, :frmUeberw.tblSuch.colBLZ, :frmUeberw.tblSuch.colKonto, :frmUeberw.tblSuch.colIBAN, :frmUeberw.tblSuch.colBIC
WHERE ueeiban LIKE '%" + locals.strPSave + "%\' ORDER BY ueedatum";
				}
				tblSuch.SetTableFlags(Sys.TBL_Flag_SuppressLastColLine, false);
				tblSuch.Populate(hSqlUe, locals.strPSelect, Sys.TBL_FillAll);
				hSqlUe.Commit();

				return 0;
			}
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalHoleArzt()
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlImmedSel(@"SELECT aname1, aabrkeinguthaben, aabrkeindarlehenbeiabrg
into :frmUeberw.dfArztName, :frmUeberw.nKeinGuthaben, :frmUeberw.nKeinDarlehen
from A where aarztnr=:frmUeberw.dfArztNrKo");
				// 18.12.17 Ä1461 + , aabrkeinguthaben, aabrkeindarlehenbeiabrg
				// If nKeinGuthaben and nKeinDarlehen
				// Set bkgdInfo = 'ACHTUNG !!
				// Laut Arztstamm erhält dieses Mitglied weder Guthaben noch Darlehen.
				// 
				// Bitte beachten!'
				// Else If nKeinGuthaben
				// Set bkgdInfo = 'ACHTUNG !!
				// Laut Arztstamm erhält dieses Mitglied kein Guthaben.
				// 
				// Bitte beachten!'
				// Else If nKeinDarlehen
				// Set bkgdInfo = 'ACHTUNG !!
				// Laut Arztstamm erhält dieses Mitglied kein Darlehen.
				// 
				// Bitte beachten!'
				// Else
				// Call SalHideWindow( bkgdInfo )

			}

			return 0;
			#endregion
		}
		
		/// <summary>
		/// </summary>
		/// <returns></returns>
		public SalNumber PalHoleHalter()
		{
			#region Actions
			using (new SalContext(this))
			{
				Int.SqlImmedSel(@"SELECT hnn  || ', ' || hti || hvn
INTO :frmUeberw.dfHalterName
from H where harztnr = :frmUeberw.dfArztNrKo AND hhalternr = :frmUeberw.dfHalterNr AND hdeaktiv IS NULL ");
			}

			return 0;
			#endregion
		}
		#endregion
		
		#region Window Actions
		
		/// <summary>
		/// frmUeberw WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmUeberw_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Create:
					this.frmUeberw_OnSAM_Create(sender, e);
					break;
				
				case Sys.SAM_Destroy:
					this.frmUeberw_OnSAM_Destroy(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Create event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmUeberw_OnSAM_Create(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.rbKSK.Checked = true;
			Int.SqlImmedSel(@"SELECT bsname, bsblz, bskonto
INTO :frmUeberw.strAbsBank, :frmUeberw.dfAbsBLZ, :frmUeberw.dfAbsKonto
FROM bs WHERE bsnr = 12000");
			if (this.strROWID != "") 
			{
				this.strSelect = @"SELECT uetvnr,  uetvblz, uetvkonto, uetaname, uetabank, uetablz, uetakonto,
uedm, ueverw1, ueverw2, ueverw3, ueverw4
INTO :frmUeberw.nTVNr,  :frmUeberw.dfAbsBLZ, :frmUeberw.dfAbsKonto,
:frmUeberw.dfEmpf, :frmUeberw.dfEmpfBank, :frmUeberw.dfEmpfBLZ, :frmUeberw.dfEmpfKonto,
:frmUeberw.dfDM, :frmUeberw.dfVerw1, :frmUeberw.dfVerw2, :frmUeberw.dfVerw3, :frmUeberw.dfVerw4
FROM ue WHERE ROWID = :frmUeberw.strROWID";
				Int.SqlImmedSel(this.strSelect);
				// 01.07.19 Mail Hennecke
				this.rbKSK.Checked = true;
				// Select Case nTVNr
				// Case 12000
				// Set rbKSK = TRUE
				// Break
				// Case 12400
				// Set rbVB = TRUE
				// Break
				// Case 11000
				// Set rbPost = TRUE
				// Break
			}
			this.dfArztNr.SetFocus();
			// 06.08.10 OTÄ442
			Int.SqlConnection(ref this.hSqlUe);
			// 28.10.10 OTF780 If PalFormFrei('Übergaben')
			if (Int.PalFormFrei("Übergaben")) 
			{
				this.cmbBuchArt.ClearList();
				// 30.03.22 Trillian YI: 7 raus, 42 rein
				// 20.02.23 Ä2071 +,43
				this.hSqlUe.PrepareAndExecute("SELECT banr || \'-\' || babuart INTO :frmUeberw.strBuchArt FROM ba WHERE banr in (10,12,16,34,36,37,38,39,42,43) ORDER BY banr");
				this.nFetchUe = this.hSqlUe.FetchNext();
				while (this.nFetchUe != Sys.FETCH_EOF) 
				{
					if (this.strBuchArt.Mid(1, 1) == "-") 
					{
						this.strBuchArt = "0" + this.strBuchArt;
					}
					this.cmbBuchArt.AddListItem(this.strBuchArt);
					this.nFetchUe = this.hSqlUe.FetchNext();
				}
				this.hSqlUe.Commit();
			}
			else
			{
				this.pbKoOK.DisableWindow();
			}
			// 29.12.17 Ä1676
			this.tblSuch.SetContextMenu("frmUeberwRightClick", 0);
			// 01.07.19 Ä1854
			if (Var.strBNAbtlg != "RA" && Var.strBNZei != "KE" && Var.strBNAbtlg != "GF") 
			{
				this.pbVoOK.DisableWindow();
			}

			this.tblSuch.SetTableFlags(Sys.TBL_Flag_SuppressLastColLine, false);
			Sal.WaitCursor(false);
			#endregion
		}
		
		/// <summary>
		/// SAM_Destroy event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void frmUeberw_OnSAM_Destroy(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.hSqlUe.Disconnect();
			#endregion
		}
		
		/// <summary>
		/// rbKSK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbKSK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbKSK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbKSK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.rbKSK.Checked == true) 
			{
				Int.SqlImmedSel(@"SELECT bsblz, bskonto INTO :frmUeberw.dfAbsBLZ, :frmUeberw.dfAbsKonto
FROM bs WHERE bsnr = 12000");
			}
			#endregion
		}
		
		/// <summary>
		/// rbVB WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbVB_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.rbVB_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rbVB_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.rbVB.Checked == true) 
			{
				Int.SqlImmedSel(@"SELECT bsblz, bskonto INTO :frmUeberw.dfAbsBLZ, :frmUeberw.dfAbsKonto
FROM bs WHERE bsnr = 12400");
			}
			#endregion
		}
		
		/// <summary>
		/// dfArztNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			// 18.12.17 Ä1461 + , aabrkeinguthaben, aabrkeindarlehenbeiabrg
			Int.SqlImmedSel(@"SELECT aname1, abank, ablz, akonto, akeingeld, aiban, aland, abic, aabrkeinguthaben, aabrkeindarlehenbeiabrg
INTO :frmUeberw.dfEmpf, :frmUeberw.dfEmpfBank, :frmUeberw.strBLZ, :frmUeberw.strKonto, :frmUeberw.nKeinGeld, :frmUeberw.dfEmpfIBAN, :frmUeberw.strLand, :frmUeberw.dfEmpfBIC,
:frmUeberw.nKeinGuthaben, :frmUeberw.nKeinDarlehen
FROM a WHERE aarztnr = :frmUeberw.dfArztNr");
			// 20.01.14 F1837
			if (Int.PalValNum(((SalString)this.dfEmpfIBAN.Text).Left(2)) > 0) 
			{
				this.dfEmpfIBAN.Text = "";
				this.dfEmpfBIC.Text = "";
			}
			// 01.07.19 Ä1854
			if (this.dfZinsProz.IsEmpty()) 
			{
				if (this.dfArztNr.Number == 167 || this.dfArztNr.Number == 168 || this.dfArztNr.Number == 567) 
				{
					this.dfZinsProz.Number = 0.45m;
				}
				else
				{
					this.dfZinsProz.Number = 0.50m;
				}
			}
			// 22.12.11 Ä696
			if (this.nKeinGeld == 0 || this.nKeinGeld == SalNumber.Null) 
			{
				this.dfEmpfBLZ.Text = Int.PalCheckBLZKonto(this.strBLZ);
				if (this.dfEmpfBIC.Text == "") 
				{
					this.dfEmpfBIC.Text = Int.PalGetBIC(this.dfEmpfBLZ.Text);
				}
				this.dfEmpfKonto.Text = Int.PalCheckBLZKonto(this.strKonto);
				if (this.dfEmpfIBAN.Text == "") 
				{
					this.dfEmpfIBAN.Text = Int.PalIBAN(this.strLand, this.dfEmpfBLZ.Text, this.dfEmpfKonto.Text);
				}
				// 18.12.17 Ä1461 + , aabrkeinguthaben, aabrkeindarlehenbeiabrg
				if (((bool)this.nKeinGuthaben) && ((bool)this.nKeinDarlehen)) 
				{
					this.bkgdInfo.Text = @"ACHTUNG !!
Laut Arztstamm erhält dieses Mitglied weder Guthaben noch Darlehen.

Bitte beachten!";
				}
				else if (this.nKeinGuthaben) 
				{
					this.bkgdInfo.Text = @"ACHTUNG !!
Laut Arztstamm erhält dieses Mitglied kein Guthaben.

Bitte beachten!";
				}
				else if (this.nKeinDarlehen) 
				{
					this.bkgdInfo.Text = @"ACHTUNG !!
Laut Arztstamm erhält dieses Mitglied kein Darlehen.

Bitte beachten!";
				}
				else
				{
					this.bkgdInfo.HideWindow();
				}

				this.dfDM.SetFocus();
			}
			else
			{
				Sal.MessageBox("Laut Arztstamm erhält dieses Mitglied kein Geld.", "Mitglied " + this.dfArztNr.Number.ToString(0), (Sys.MB_Ok | Sys.MB_IconAsterisk));
				this.dfArztNr.Number = Sys.NUMBER_Null;
				e.Return = false;
				return;
			}
			#endregion
		}
		
		/// <summary>
		/// dfEmpfKo WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfEmpfKo_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Vis.VTM_KeyUp:
					this.dfEmpfKo_OnVTM_KeyUp(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// VTM_KeyUp event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfEmpfKo_OnVTM_KeyUp(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (((SalString)this.dfEmpfKo.Text).Length >= 5 && ((Sys.wParam >= 0x0030 && Sys.wParam <= 0x005a) || Sys.wParam == Vis.VK_Backspace || Sys.wParam == Vis.VK_Clear || Sys.wParam == 186 || Sys.wParam == 222 || Sys.wParam == 192 || Sys.wParam == 
			219)) 
			{
				this.DropDownEmpf(1, Sys.wParam);
			}
			#endregion
		}
		
		/// <summary>
		/// dfEmpfKonto WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfEmpfKonto_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfEmpfKonto_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfEmpfKonto_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfEmpfIBAN.Text = Int.PalIBAN(this.strLand, this.dfEmpfBLZ.Text, this.dfEmpfKonto.Text);
			#endregion
		}
		
		/// <summary>
		/// dfEmpfBLZ WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfEmpfBLZ_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfEmpfBLZ_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfEmpfBLZ_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfEmpfIBAN.Text = Int.PalIBAN(this.strLand, this.dfEmpfBLZ.Text, this.dfEmpfKonto.Text);
			#endregion
		}
		
		/// <summary>
		/// dfEmpfIBAN WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfEmpfIBAN_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Vis.VTM_KeyUp:
					this.dfEmpfIBAN_OnVTM_KeyUp(sender, e);
					break;
				
				case Sys.SAM_Validate:
					this.dfEmpfIBAN_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// VTM_KeyUp event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfEmpfIBAN_OnVTM_KeyUp(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (((SalString)this.dfEmpfIBAN.Text).Length >= 5 && ((Sys.wParam >= 0x0030 && Sys.wParam <= 0x005a) || Sys.wParam == Vis.VK_Backspace || Sys.wParam == Vis.VK_Clear || Sys.wParam == 186 || Sys.wParam == 222 || Sys.wParam == 192 || Sys.wParam == 
			219)) 
			{
				this.DropDownEmpf(2, Sys.wParam);
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfEmpfIBAN_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (((SalString)this.dfEmpfIBAN.Text).Scan(" ") > -1)  // 26.03.15 F2159
			{
				this.dfEmpfIBAN.Text = Int.PalStringStrip(this.dfEmpfIBAN.Text, " ");
			}
			#endregion
		}
		
		/// <summary>
		/// dfEmpfBIC WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfEmpfBIC_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfEmpfBIC_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfEmpfBIC_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfEmpfBIC.Text != "") 
			{
				if (((SalString)this.dfEmpfBIC.Text).Scan(" ") > -1)  // 16.11.15 F1275
				{
					this.dfEmpfBIC.Text = Int.PalStringStrip(this.dfEmpfBIC.Text, " ");
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfDM WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDM_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfDM_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfDM_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (this.dfDM.Number == Sys.NUMBER_Null || this.dfDM.Number <= 0) 
			{
				Sal.MessageBox("Der Betrag muß größer 0,00 € sein.", "Betrag fehlt", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			#endregion
		}
		
		/// <summary>
		/// pbOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (((SalString)this.dfEmpfIBAN.Text).Scan(" ") > -1)  // 16.11.15 Ä1275
			{
				this.dfEmpfIBAN.Text = Int.PalStringStrip(this.dfEmpfIBAN.Text, " ");
			}
			if (((SalString)this.dfEmpfBIC.Text).Scan(" ") > -1)  // 16.11.15 Ä1275
			{
				this.dfEmpfBIC.Text = Int.PalStringStrip(this.dfEmpfBIC.Text, " ");
			}

			if (this.dfDM.Number == Sys.NUMBER_Null || this.dfDM.Number <= 0) 
			{
				Sal.MessageBox("Der Betrag muß größer 0,00 € sein.", "Betrag fehlt", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else if (this.dfVerw1.Text == "") 
			{
				Sal.MessageBox("Bitte geben Sie einen Verwendungszweck ein", "Fehlende Eingabe", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else if (!(Int.PalIBANPruef(this.dfEmpfIBAN.Text))) 
			{
				Sal.MessageBox(@"Die IBAN ist falsch.
Die Überweisung kann NICHT gespeichert werden.", "IBAN falsch", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				if (this.rbKSK.Checked == true) 
				{
					Int.SqlImmedSel(@"SELECT bsname, bsblz, bskonto
INTO :frmUeberw.strAbsBank, :frmUeberw.dfAbsBLZ, :frmUeberw.dfAbsKonto
FROM bs WHERE bsnr = 12000");
					// 13.02.17 Ä1496 12000 -> 15400
					this.nTVNr = 15400;
				}
				if (this.rbVB.Checked == true) 
				{
					Int.SqlImmedSel(@"SELECT bsname, bsblz, bskonto
INTO :frmUeberw.strAbsBank, :frmUeberw.dfAbsBLZ, :frmUeberw.dfAbsKonto
FROM bs WHERE bsnr = 12400");
					this.nTVNr = 12400;
				}
				// If rbPost = TRUE
				// Call SqlImmedSel( 'SELECT bsname, bsblz, bskonto
				// INTO :frmUeberw.strAbsBank, :frmUeberw.dfAbsBLZ, :frmUeberw.dfAbsKonto
				// FROM bs WHERE bsnr = 11000')
				// Set nTVNr = 11000
				// 23.10.97 	Korrigiere Bankverbindungen
				this.dfAbsKonto.Text = Int.PalCheckBLZKonto(this.dfAbsKonto.Text);
				this.dfAbsBLZ.Text = Int.PalCheckBLZKonto(this.dfAbsBLZ.Text);
				this.strTVIBAN = Int.PalIBAN("DE", this.dfAbsBLZ.Text, this.dfAbsKonto.Text);
				this.strTVBIC = Int.PalGetBIC(this.dfAbsBLZ.Text);
				this.dfEmpfKonto.Text = Int.PalCheckBLZKonto(this.dfEmpfKonto.Text);
				this.dfEmpfBLZ.Text = Int.PalCheckBLZKonto(this.dfEmpfBLZ.Text);
				if (this.dfEmpfIBAN.Text == "") 
				{
					this.dfEmpfIBAN.Text = Int.PalIBAN(this.strLand, this.dfEmpfBLZ.Text, this.dfEmpfKonto.Text);
				}
				if (this.dfEmpfBIC.Text == "" && (this.strLand == "DE" || this.strLand == "")) 
				{
					this.dfEmpfBIC.Text = Int.PalGetBIC(this.dfEmpfBLZ.Text);
					if (this.dfEmpfBIC.Text == "" && (this.strLand == "DE" || this.strLand == ""))  // 13.11.13
					{
						this.dfEmpfBIC.Text = Int.PalGetBIC(((SalString)this.dfEmpfIBAN.Text).Mid(4, 8));
					}
				}

				Var.bOK = true;
				if (this.dfEmpfIBAN.Text == "" || this.dfEmpfBIC.Text == "") 
				{
					Sal.MessageBox("Ohne IBAN und BIC ist keine Überweisung möglich.", "IBAN o. BIC fehlt", (Sys.MB_Ok | Sys.MB_IconExclamation));
					Var.bOK = false;
				}
				// 20.01.14 F1837
				if (Var.bOK) 
				{
					if (!(Int.PalIBANPruef(this.dfEmpfIBAN.Text))) 
					{
						if (Sys.IDNO == Sal.MessageBox("Diese IBAN könnte ungültig sein. Soll die Überweisung dennoch gespeichert werden?", "IBAN ungültig", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							Var.bOK = false;
						}
					}
				}

				if (Var.bOK) 
				{
					if (this.strROWID == "") 
					{
						// 16.07.19 Ä1860 + ueexportnr
						App.frmMain.nUeberwNr = Int.PalGetProfileInt("BH", "Ueberweisungsnummer", 1);

						// 13.02.07 Ä70
						if (this.dfArztNr.Number > 0) 
						{
							this.strBuchText = ("+" + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + this.dfVerw1.Text).Left(20);
							// 06.03.23 Ä2086
							this.dtBuchDat = SalDateTime.Current;
							Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
							if (this.dtBuchDat < Var.dtINIMinBuchDat) 
							{
								this.dtBuchDat = Var.dtINIMinBuchDat;
							}

							// 05.05.11 F913 tksa 0 -> 2
							Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
VALUES (:frmUeberw.dfArztNr, 2, 0, :frmUeberw.strBuchText, 0, 0, 0,
:frmUeberw.dtBuchDat, :frmUeberw.nTVNr, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, :frmUeberw.dfDM,
:frmUeberw.dfDM, 0)");
							Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp,
fiexportnr)
VALUES (0, 16000,:frmUeberw.nTVNr, :frmUeberw.dfArztNr, :frmUeberw.dtBuchDat, :frmUeberw.strBuchText,
:frmUeberw.dfDM, 6,
:frmMain.nUeberwNr)");
							Int.SqlImmedX(@" INSERT INTO bub
(bubbearbeiter, bubbearbdatum, bubarztnr, bubsoll, bubhaben, bubdm, bubbuchtext)
VALUES (:frmMain.strUser, SYSDATETIME, :frmUeberw.dfArztNr, 16000,:frmUeberw.nTVNr, :frmUeberw.dfDM, :frmUeberw.strBuchText)");
							Sal.MessageBox(@"Die Überweisung wurde gespeichert und eine Buchung im Tierarzt-Kontoauszug und KHK erstellt.

Es muß kein Buchungsbeleg erstellt werden.", "Buchung durchgeführt", (Sys.MB_Ok | Sys.MB_IconAsterisk));
							this.nManuell = 0;
						}
						else
						{
							this.nManuell = 1;
						}
						// 16.11.07 Ä183
						if (this.dfArztNr.Number > 0) 
						{
							this.dfVerw1.Text = (Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + this.dfVerw1.Text).Left(27);
						}
						this.strBearbeiter = Var.strBNZei;
						Int.SqlImmedX(@" INSERT INTO ue
(uetvnr, uetvbank, uetvblz, uetvkonto,
uetabank, uetablz, uetakonto,
uetaname, ueverw1, ueverw2,  uedm, uemanuell, uebearbeiter, uetyp, ueverw3, ueverw4, uetviban, uetaiban, uetvbic, uetabic,
ueexportnr)
VALUES (:frmUeberw.nTVNr, :frmUeberw.strAbsBank, :frmUeberw.dfAbsBLZ, :frmUeberw.dfAbsKonto,
:frmUeberw.dfEmpfBank, :frmUeberw.dfEmpfBLZ, :frmUeberw.dfEmpfKonto,
:frmUeberw.dfEmpf, :frmUeberw.dfVerw1, :frmUeberw.dfVerw2, :frmUeberw.dfDM, :frmUeberw.nManuell, :frmUeberw.strBearbeiter, 0,
:frmUeberw.dfVerw3, :frmUeberw.dfVerw4, :frmUeberw.strTVIBAN, :frmUeberw.dfEmpfIBAN, :frmUeberw.strTVBIC, :frmUeberw.dfEmpfBIC,
:frmMain.nUeberwNr)");
					}
					else
					{
						Int.SqlImmedX(@"UPDATE ue SET
uetaname = :frmUeberw.dfEmpf,
uetabank = :frmUeberw.dfEmpfBank,
uetablz = :frmUeberw.dfEmpfBLZ,
uetakonto = :frmUeberw.dfEmpfKonto,
uetvnr = :frmUeberw.nTVNr,
uetvbank = :frmUeberw.strAbsBank,
uetvblz = :frmUeberw.dfAbsBLZ,
uetvkonto = :frmUeberw.dfAbsKonto,
ueverw1 = :frmUeberw.dfVerw1,
ueverw2 = :frmUeberw.dfVerw2,
uedm = :frmUeberw.dfDM,
ueverw3 = :frmUeberw.dfVerw3,
ueverw4 = :frmUeberw.dfVerw4,
uetviban = :frmUeberw.strTVIBAN,
uetaiban = :frmUeberw.dfEmpfIBAN,
uetvbic = :frmUeberw.strTVBIC,
uetabic = :frmUeberw.dfEmpfBIC
WHERE ROWID = :frmUeberw.strROWID");
					}
					Sal.TblPopulate(App.frmUeberwListe.tblUeberw, App.frmUeberwListe.hSqlUeberwListe, App.frmUeberwListe.strSelect, Sys.TBL_FillAll);
					this.DestroyWindow();
				}
			}
			#endregion
		}
		
		/// <summary>
		/// tblSuch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblSuch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_RowHeaderClick:
					this.tblSuch_OnSAM_RowHeaderClick(sender, e);
					break;
				
				case Sys.SAM_DoubleClick:
					this.tblSuch_OnSAM_DoubleClick(sender, e);
					break;
				
				case Sys.SAM_Click:
					this.tblSuch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_RowHeaderClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblSuch_OnSAM_RowHeaderClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblSuch.PalClick();
			#endregion
		}
		
		/// <summary>
		/// SAM_DoubleClick event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblSuch_OnSAM_DoubleClick(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblSuch.PalClick();
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void tblSuch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.tblSuch.PalClick();
			#endregion
		}
		
		/// <summary>
		/// pbKoOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKoOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbKoOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbKoOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (Int.PalValNum(((SalString)this.cmbBuchArt.Text).Left(2)) != 16 && (this.dfDM.Number == Sys.NUMBER_Null || this.dfDM.Number <= 0)) 
			{
				Sal.MessageBox("Der Betrag muß größer 0,00 € sein.", "Betrag fehlt", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else if (this.dfVerw1.Text == "") 
			{
				Sal.MessageBox("Bitte geben Sie einen Verwendungszweck ein", "Fehlende Eingabe", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else if (this.cmbBuchArt.Text == "") 
			{
				Sal.MessageBox("Bitte geben Sie eine Buchungsart ein", "Fehlende Eingabe", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else if (!(Int.PalIBANPruef(this.dfEmpfIBAN.Text)))  // 23.11.15 Ä1275
			{
				Sal.MessageBox(@"Die IBAN ist falsch.
Die Überweisung kann NICHT gespeichert werden.", "IBAN falsch", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				if (this.rbKSK.Checked == true) 
				{
					Int.SqlImmedSel(@"SELECT bsname, bsblz, bskonto
INTO :frmUeberw.strAbsBank, :frmUeberw.dfAbsBLZ, :frmUeberw.dfAbsKonto
FROM bs WHERE bsnr = 12000");
					// 13.02.17 Ä1496 12000 -> 15400
					this.nTVNr = 15400;
				}
				if (this.rbVB.Checked == true) 
				{
					Int.SqlImmedSel(@"SELECT bsname, bsblz, bskonto
INTO :frmUeberw.strAbsBank, :frmUeberw.dfAbsBLZ, :frmUeberw.dfAbsKonto
FROM bs WHERE bsnr = 12400");
					this.nTVNr = 12400;
				}
				// 23.10.97 	Korrigiere Bankverbindungen
				this.dfAbsKonto.Text = Int.PalCheckBLZKonto(this.dfAbsKonto.Text);
				this.dfAbsBLZ.Text = Int.PalCheckBLZKonto(this.dfAbsBLZ.Text);
				this.strTVIBAN = Int.PalIBAN("DE", this.dfAbsBLZ.Text, this.dfAbsKonto.Text);
				this.dfEmpfKonto.Text = Int.PalCheckBLZKonto(this.dfEmpfKonto.Text);
				this.dfEmpfBLZ.Text = Int.PalCheckBLZKonto(this.dfEmpfBLZ.Text);
				if (this.dfEmpfIBAN.Text == "") 
				{
					this.dfEmpfIBAN.Text = Int.PalIBAN(this.strLand, this.dfEmpfBLZ.Text, this.dfEmpfKonto.Text);
				}
				// 13.12.13
				if (this.dfEmpfBIC.Text == "") 
				{
					this.dfEmpfBIC.Text = Int.PalGetBIC(this.dfEmpfBLZ.Text);
				}

				// If dfEmpfIBAN = ''
				// Call SalMessageBox( 'Ohne IBAN ist keine Überweisung möglich.', 'IBAN fehlt', MB_Ok|MB_IconExclamation )

				Var.bOK = true;
				if (this.dfEmpfIBAN.Text == "" || this.dfEmpfBIC.Text == "") 
				{
					Sal.MessageBox("Ohne IBAN und BIC ist keine Überweisung möglich.", "IBAN o. BIC fehlt", (Sys.MB_Ok | Sys.MB_IconExclamation));
					Var.bOK = false;
				}
				// 20.01.14 F1837
				if (Var.bOK) 
				{
					if (!(Int.PalIBANPruef(this.dfEmpfIBAN.Text))) 
					{
						if (Sys.IDNO == Sal.MessageBox("Diese IBAN könnte ungültig sein. Soll die Überweisung dennoch gespeichert werden?", "IBAN ungültig", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							Var.bOK = false;
						}
					}
				}

				if (Var.bOK) 
				{
					this.nDM1 = 0;
					this.nDM2 = 0;
					this.nDM3 = 0;

					if (this.dfVerw2.Text == "") 
					{
						this.dfVerw2.Text = this.dfArztNrKo.Number.ToString(0) + "H" + this.dfHalterNr.Number.ToString(0);
						if (this.dfPR.Number != Sys.NUMBER_Null && this.dfPR.Number != 0) 
						{
							this.dfVerw2.Text = this.dfVerw2.Text + "PR" + this.dfPR.Number.ToString(0);
						}
						this.dfVerw2.Text = ((SalString)(this.dfVerw2.Text + " " + this.dfHalterName.Text)).Left(27);
					}

					this.nBuchArt = Int.PalValNum(((SalString)this.cmbBuchArt.Text).Left(2));
					// 04.10.23 Ä2134
					if (this.nBuchArt != 37) 
					{
						this.nTKFall = 1;
					}
					else
					{
						this.nTKFall = SalNumber.Null;
					}

					Int.SqlImmedSel(@"SELECT baktosoll1, baktohaben1, baktosoll2, baktohaben2, baktosoll3, baktohaben3, badm2
FROM ba
INTO :frmUeberw.nSoll1, :frmUeberw.nHaben1, :frmUeberw.nSoll2, :frmUeberw.nHaben2, :frmUeberw.nSoll3, :frmUeberw.nHaben3, :frmUeberw.nDM2
WHERE banr = :frmUeberw.nBuchArt");
					// 20.02.23 Ä2071 +8 or nBuchArt = 43
					if (this.nBuchArt == 12 || this.nBuchArt == 39) 
					{
						if (Sys.IDYES == Sal.MessageBox("Enthalten die RA-Kosten MwSt.?", "Achtung", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							this.nDM1 = this.dfDM.Number;
						}
						else
						{
							this.nDM2 = this.dfDM.Number;
						}
					}
					else if (this.nBuchArt == 7 || this.nBuchArt == 10 || this.nBuchArt == 34 || this.nBuchArt == 38 || this.nBuchArt == 43) 
					{
						this.nDM2 = this.dfDM.Number;
					}
					else if (this.nBuchArt == 16 || this.nBuchArt == 42) 
					{
						if (this.dfDM.Number == Sys.NUMBER_Null)  // 11.01.21 F4688
						{
							this.dfDM.Number = this.nDM2;
						}
						else
						{
							this.nDM2 = this.dfDM.Number;
						}
					}
					else if (this.nBuchArt == 36) 
					{
						this.nDM2 = this.dfDM.Number;
						// 10.06.11 Ä589
						// Set nDM3 = 3.08
						this.nDM3 = 0;

					}
					else if (this.nBuchArt == 37) 
					{
						this.nDM2 = this.dfDM.Number;
						this.nDM3 = 3.08m;

						// 30.06.20 Ä1892
						// If SalDateCurrent() >= 2020-07-01 and SalDateCurrent() <= 2020-12-31
						// Set nDM3 = 3.00
					}
					// 30.06.20 Ä1892
					// If SalDateCurrent() >= 2020-07-01 and SalDateCurrent() <= 2020-12-31
					// Set nSoll1 = PalKontenMwStSenkung( nSoll1 )
					// Set nSoll2 = PalKontenMwStSenkung( nSoll2 )
					// Set nSoll3 = PalKontenMwStSenkung( nSoll3 )
					// Set nHaben1 = PalKontenMwStSenkung( nHaben1 )
					// Set nHaben2 = PalKontenMwStSenkung( nHaben2 )
					// Set nHaben3 = PalKontenMwStSenkung( nHaben3 )

					// 16.07.19 Ä1860 + ueexportnr
					App.frmMain.nUeberwNr = Int.PalGetProfileInt("BH", "Ueberweisungsnummer", 1);

					if ((this.dfPR.Number == 0 || this.dfPR.Number == Sys.NUMBER_Null) && (this.nBuchArt == 7 || this.nBuchArt == 10 || this.nBuchArt == 16 || this.nBuchArt == 12 || this.nBuchArt == 34 || this.nBuchArt == 36)) 
					{
						Sal.MessageBox("Bitte PR-Nummer eingeben.", "Fehlende Eingabe", (Sys.MB_Ok | Sys.MB_IconExclamation));
					}
					else
					{

						Int.SqlImmedSel("SELECT MAX(uebelnr) FROM ue INTO :frmUeberw.nBelNr");
						if (this.nBelNr == SalNumber.Null) 
						{
							this.nBelNr = 0;
						}
						this.nBelNr = this.nBelNr + 1;

						Int.PalBuchMB(this.hSqlUe, SalDateTime.Current, this.nBuchArt, this.nDM1, this.nDM2, this.nDM3, this.dfArztNrKo.Number, this.dfHalterNr.Number, this.dfPR.Number, this.nBelNr, this.nTVNr, "", App.frmMain.nUeberwNr, false, this.nTKFall);

						if (this.dfArztNr.Number > 0) 
						{
							this.dfVerw1.Text = (Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/" + this.dfVerw1.Text).Left(27);
						}
						this.strBearbeiter = Var.strBNZei;
						// 14.01.14 + BIC
						Int.SqlImmedX(@" INSERT INTO ue
(uetvnr, uetvbank, uetvblz, uetvkonto,
uetablz, uetakonto,
uetaname, ueverw1, ueverw2,  uedm, uemanuell, uebearbeiter, uetyp, uebelnr, ueverw3, ueverw4, uetaiban, uetviban, uetabic, uetvbic, ueexportnr)
VALUES (:frmUeberw.nTVNr, :frmUeberw.strAbsBank, :frmUeberw.dfAbsBLZ, :frmUeberw.dfAbsKonto,
:frmUeberw.dfEmpfBLZ, :frmUeberw.dfEmpfKonto,
:frmUeberw.dfEmpfKo, :frmUeberw.dfVerw1, :frmUeberw.dfVerw2, :frmUeberw.dfDM, 0, :frmUeberw.strBearbeiter, 1, :frmUeberw.nBelNr,
:frmUeberw.dfVerw3, :frmUeberw.dfVerw4, :frmUeberw.dfEmpfIBAN, :frmUeberw.strTVIBAN, :frmUeberw.dfEmpfBIC, :frmUeberw.strTVBIC,
:frmMain.nUeberwNr)");
						// 26.07.13 Ä891
						if (this.nBuchArt == 39)  // RAKRg
						{
							this.lsGrund = "***** Überweisung € " + Int.PalStrNum(this.dfDM.Number, 8, 2) + @" extern mit Kosten RAKRg an
" + this.dfEmpfKo.Text;
							// 13.05.14 F2027
							this.dfHalterNr.Number = Int.PalCheckNULL(this.dfHalterNr.Number);

							Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, '*', :frmUeberw.dfArztNrKo, :frmUeberw.dfHalterNr, 0,
:frmUeberw.lsGrund , SYSDATE, NULL, 'J', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
						}
						// 21.01.14
						// Call SqlIstDa( 'FROM uee
						// WHERE ueeiban = :frmUeberw.dfEmpfIBAN', bExists )
						// If not bExists
						// Call SqlIstDa( 'FROM uee
						// WHERE ueeblz = :frmUeberw.dfEmpfBLZ AND ueekonto = :frmUeberw.dfEmpfKonto', bExists )
						// If bExists
						// Call SqlImmed( 'UPDATE uee SET ueeempfname = :frmUeberw.dfEmpfKo, ueedatum = SYSDATETIME
						// WHERE ueeblz  = :frmUeberw.dfEmpfBLZ AND ueekonto = :frmUeberw.dfEmpfKonto' )
						// Else
						// Call SqlImmed( 'INSERT INTO uee (ueeempfname, ueeblz, ueekonto, ueeiban, ueedatum)
						// VALUES (:frmUeberw.dfEmpfKo, :frmUeberw.dfEmpfBLZ, :frmUeberw.dfEmpfKonto, :frmUeberw.dfEmpfIBAN, SYSDATETIME )')
						// Else
						// Call SqlImmed( 'UPDATE uee SET ueeempfname = :frmUeberw.dfEmpfKo, ueedatum = SYSDATETIME
						// WHERE ueeblz  = :frmUeberw.dfEmpfBLZ AND ueekonto = :frmUeberw.dfEmpfKonto' )
						Int.SqlIstDa("FROM uee WHERE ueeempfname = :frmUeberw.dfEmpfKo", ref this.bExists);
						if (this.bExists) 
						{
							Int.SqlImmed(@"UPDATE uee SET ueeiban = :frmUeberw.dfEmpfIBAN, ueebic = :frmUeberw.dfEmpfBIC, ueedatum = SYSDATETIME
WHERE ueeempfname = :frmUeberw.dfEmpfKo");
						}
						else
						{
							Int.SqlImmed(@"INSERT INTO uee (ueeempfname, ueeblz, ueekonto, ueeiban, ueebic, ueedatum)
VALUES (:frmUeberw.dfEmpfKo, :frmUeberw.dfEmpfBLZ, :frmUeberw.dfEmpfKonto, :frmUeberw.dfEmpfIBAN, :frmUeberw.dfEmpfBIC, SYSDATETIME )");
						}

						Sal.TblPopulate(App.frmUeberwListe.tblUeberw, App.frmUeberwListe.hSqlUeberwListe, App.frmUeberwListe.strSelect, Sys.TBL_FillAll);
						this.DestroyWindow();
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// dfPR WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPR_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfPR_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfPR_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			Int.SqlImmedSel(@"SELECT prarztnr, prhalternr
into :frmUeberw.dfArztNrKo, :frmUeberw.dfHalterNr
from pr where prnr=:frmUeberw.dfPR");
			this.PalHoleArzt();
			this.PalHoleHalter();
			// 21.01.14
			this.dfVerw2.Text = this.dfArztNrKo.Number.ToString(0) + "/H" + this.dfHalterNr.Number.ToString(0) + " PR " + this.dfPR.Number.ToString(0);
			#endregion
		}
		
		/// <summary>
		/// dfArztNrKo WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNrKo_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfArztNrKo_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfArztNrKo_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.dfHalterNr.Clear();
			this.dfHalterName.Clear();
			this.PalHoleArzt();
			#endregion
		}
		
		/// <summary>
		/// dfHalterNr WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Validate:
					this.dfHalterNr_OnSAM_Validate(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Validate event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dfHalterNr_OnSAM_Validate(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.PalHoleHalter();
			#endregion
		}
		
		/// <summary>
		/// pbVoOK WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbVoOK_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbVoOK_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbVoOK_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			if (((SalString)this.dfEmpfIBAN.Text).Scan(" ") > -1)  // 16.11.15 Ä1275
			{
				this.dfEmpfIBAN.Text = Int.PalStringStrip(this.dfEmpfIBAN.Text, " ");
			}
			if (((SalString)this.dfEmpfBIC.Text).Scan(" ") > -1)  // 16.11.15 Ä1275
			{
				this.dfEmpfBIC.Text = Int.PalStringStrip(this.dfEmpfBIC.Text, " ");
			}

			if (this.dfDM.Number == Sys.NUMBER_Null || this.dfDM.Number <= 0) 
			{
				Sal.MessageBox("Der Betrag muß größer 0,00 € sein.", "Betrag fehlt", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else if (!(Int.PalIBANPruef(this.dfEmpfIBAN.Text))) 
			{
				Sal.MessageBox(@"Die IBAN ist falsch.
Die Überweisung kann NICHT gespeichert werden.", "IBAN falsch", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else if (this.dfArztNr.Number == 0 || this.dfArztNr.Number == Sys.NUMBER_Null) 
			{
				Sal.MessageBox("Es muss eine Arztnr. eingegeben sein.", "Arzt fehlt", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else if (this.strROWID != "") 
			{
				Sal.MessageBox("Änderungen sind nicht möglich.", "keine Änderungen", (Sys.MB_Ok | Sys.MB_IconExclamation));
			}
			else
			{
				if (this.rbKSK.Checked == true) 
				{
					Int.SqlImmedSel(@"SELECT bsname, bsblz, bskonto
INTO :frmUeberw.strAbsBank, :frmUeberw.dfAbsBLZ, :frmUeberw.dfAbsKonto
FROM bs WHERE bsnr = 12000");
					// 13.02.17 Ä1496 12000 -> 15400
					this.nTVNr = 15400;
				}
				if (this.rbVB.Checked == true) 
				{
					Int.SqlImmedSel(@"SELECT bsname, bsblz, bskonto
INTO :frmUeberw.strAbsBank, :frmUeberw.dfAbsBLZ, :frmUeberw.dfAbsKonto
FROM bs WHERE bsnr = 12400");
					this.nTVNr = 12400;
				}
				// If rbPost = TRUE
				// Call SqlImmedSel( 'SELECT bsname, bsblz, bskonto
				// INTO :frmUeberw.strAbsBank, :frmUeberw.dfAbsBLZ, :frmUeberw.dfAbsKonto
				// FROM bs WHERE bsnr = 11000')
				// Set nTVNr = 11000
				// 23.10.97 	Korrigiere Bankverbindungen
				this.dfAbsKonto.Text = Int.PalCheckBLZKonto(this.dfAbsKonto.Text);
				this.dfAbsBLZ.Text = Int.PalCheckBLZKonto(this.dfAbsBLZ.Text);
				this.strTVIBAN = Int.PalIBAN("DE", this.dfAbsBLZ.Text, this.dfAbsKonto.Text);
				this.strTVBIC = Int.PalGetBIC(this.dfAbsBLZ.Text);
				this.dfEmpfKonto.Text = Int.PalCheckBLZKonto(this.dfEmpfKonto.Text);
				this.dfEmpfBLZ.Text = Int.PalCheckBLZKonto(this.dfEmpfBLZ.Text);
				if (this.dfEmpfIBAN.Text == "") 
				{
					this.dfEmpfIBAN.Text = Int.PalIBAN(this.strLand, this.dfEmpfBLZ.Text, this.dfEmpfKonto.Text);
				}
				if (this.dfEmpfBIC.Text == "" && (this.strLand == "DE" || this.strLand == "")) 
				{
					this.dfEmpfBIC.Text = Int.PalGetBIC(this.dfEmpfBLZ.Text);
					if (this.dfEmpfBIC.Text == "" && (this.strLand == "DE" || this.strLand == ""))  // 13.11.13
					{
						this.dfEmpfBIC.Text = Int.PalGetBIC(((SalString)this.dfEmpfIBAN.Text).Mid(4, 8));
					}
				}

				Var.bOK = true;
				if (this.dfEmpfIBAN.Text == "" || this.dfEmpfBIC.Text == "") 
				{
					Sal.MessageBox("Ohne IBAN und BIC ist keine Überweisung möglich.", "IBAN o. BIC fehlt", (Sys.MB_Ok | Sys.MB_IconExclamation));
					Var.bOK = false;
				}
				// 20.01.14 F1837
				if (Var.bOK) 
				{
					if (!(Int.PalIBANPruef(this.dfEmpfIBAN.Text))) 
					{
						if (Sys.IDNO == Sal.MessageBox("Diese IBAN könnte ungültig sein. Soll die Überweisung dennoch gespeichert werden?", "IBAN ungültig", (Sys.MB_YesNo | Sys.MB_IconQuestion))) 
						{
							Var.bOK = false;
						}
					}
				}
				// 06.03.23 Ä2086
				this.dtBuchDat = SalDateTime.Current;
				Var.dtINIMinBuchDat = Int.PalGetMinBuchDat();
				if (this.dtBuchDat < Var.dtINIMinBuchDat) 
				{
					this.dtBuchDat = Var.dtINIMinBuchDat;
				}


				if (Var.bOK) 
				{
					// 16.07.19 Ä1860 + ueexportnr
					App.frmMain.nUeberwNr = Int.PalGetProfileInt("BH", "Ueberweisungsnummer", 1);
					this.strBuchText = ("+" + Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/Darlehen").Left(20);
					// 05.05.11 F913 tksa 0 -> 2
					Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
VALUES (:frmUeberw.dfArztNr, 2, 0, :frmUeberw.strBuchText, 0, 0, 0,
:frmUeberw.dtBuchDat, :frmUeberw.nTVNr, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, :frmUeberw.dfDM,
:frmUeberw.dfDM, 0)");
					Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp,
fiexportnr)
VALUES (0, 16000,:frmUeberw.nTVNr, :frmUeberw.dfArztNr, :frmUeberw.dtBuchDat, :frmUeberw.strBuchText,
:frmUeberw.dfDM, 6,
:frmMain.nUeberwNr)");
					Int.SqlImmedX(@" INSERT INTO bub
(bubbearbeiter, bubbearbdatum, bubarztnr, bubsoll, bubhaben, bubdm, bubbuchtext)
VALUES (:frmMain.strUser, SYSDATETIME, :frmUeberw.dfArztNr, 16000,:frmUeberw.nTVNr, :frmUeberw.dfDM, :frmUeberw.strBuchText)");
					Sal.MessageBox(@"Die Überweisung wurde gespeichert und eine Buchung im Tierarzt-Kontoauszug und KHK erstellt.

Es muß kein Buchungsbeleg erstellt werden.", "Buchung durchgeführt", (Sys.MB_Ok | Sys.MB_IconAsterisk));

					this.strBearbeiter = Var.strBNZei;
					// 01.07.19 Ä1854
					this.strBuchText = (Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/Darlehen f.Abrg.").Left(27);

					this.strBuchText2 = (Int.SalDateToStrX(SalDateTime.Current) + " Sonderabschlag").Left(27);
					Int.SqlImmedX(@" INSERT INTO ue
(uetvnr, uetvbank, uetvblz, uetvkonto,
uetabank, uetablz, uetakonto,
uetaname, ueverw1, ueverw2,  uedm, uemanuell, uebearbeiter, uetyp, uetviban, uetaiban, uetvbic, uetabic,
ueexportnr)
VALUES (:frmUeberw.nTVNr, :frmUeberw.strAbsBank, :frmUeberw.dfAbsBLZ, :frmUeberw.dfAbsKonto,
:frmUeberw.dfEmpfBank, :frmUeberw.dfEmpfBLZ, :frmUeberw.dfEmpfKonto,
:frmUeberw.dfEmpf, :frmUeberw.strBuchText, :frmUeberw.strBuchText2, :frmUeberw.dfDM, :frmUeberw.nManuell,  :frmUeberw.strBearbeiter, 0,
:frmUeberw.strTVIBAN, :frmUeberw.dfEmpfIBAN, :frmUeberw.strTVBIC, :frmUeberw.dfEmpfBIC,
:frmMain.nUeberwNr)");

					// Zinsen
					// 11.06.21 Ä1962 ZINSABSCHL. -> Zinsabschlag
					this.strBuchText = Int.PalStrNum(this.dfArztNr.Number, 4, 0) + "/Zinsabschlag";

					// Set strZBuchText = strBuchText
					this.nZinsen = (this.dfDM.Number * this.dfZinsProz.Number).Round() / 100;
					// 28.07.14 F2098
					if (Int.PalCheckAuslTA(this.dfArztNr.Number) == "EU") 
					{
						this.nMwSt = 0;
						// 08.01.15 F2226
						App.frmMain.nErloeskonto = 81340;
						// 16.01.15 F2235 von unten
						this.nBrutto = this.nZinsen + this.nMwSt;
						// 14.01.14 F2235 nBrutto -> nZinsen
						// 29.01.15 F2235 nZinsen -> nBrutto
						Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
VALUES (:frmUeberw.dfArztNr, 0, 0, :frmUeberw.strBuchText, 0, 0, 0,
:frmUeberw.dtBuchDat, :frmMain.nErloeskonto, 0, 0, :frmUeberw.nMwSt, 0, 0, 0, 0, 0, 0, 0, 0, :frmUeberw.nBrutto,
:frmUeberw.nBrutto, 0)");
					}
					else
					{
						// 27.12.12 Ä855
						this.nMwSt = (this.nZinsen * Var.nMwStVoll).Round() / 100;
						// 08.01.15 F2226
						App.frmMain.nErloeskonto = 81300;
						// 30.06.20 Ä1892
						if (this.dtBuchDat >= new SalDateTime(2020, 7, 1) && this.dtBuchDat <= new SalDateTime(2020, 12, 31)) 
						{
							App.frmMain.nErloeskonto = Int.PalKontenMwStSenkung(App.frmMain.nErloeskonto);
						}
						// 16.01.15 F2235 von unten
						this.nBrutto = this.nZinsen + this.nMwSt;
						// 14.01.14 F2235 nBrutto -> nZinsen
						// 29.01.15 F2235 nZinsen -> nBrutto
						Int.SqlImmedX(@"INSERT INTO TK
(tkarztnr, tksa, tkjournalnr, tkbuchtext, tkhalternr, tkrechnr, tkbelnr, tkbeldat,
tkkontonr, tkdmabr, tkkzhaben, tktavst, tkdmzaleis, tkdmzaarzn, tkdmzamahn, tkdmzazins,
tkdmzamwst, tkprozmwst, tkkzzahl, tkdmporto, tkrechdm, tksoll, tkhaben)
VALUES (:frmUeberw.dfArztNr, 0, 0, :frmUeberw.strBuchText, 0, 0, 0,
:frmUeberw.dtBuchDat, :frmMain.nErloeskonto, 0, 0, :frmUeberw.nMwSt, 0, 0, 0, 0, 0, :nMwStVoll, 0, 0, :frmUeberw.nBrutto,
:frmUeberw.nBrutto, 0)");
					}

					Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16000, :frmMain.nErloeskonto, :frmUeberw.dfArztNr, :frmUeberw.dtBuchDat, :frmUeberw.strBuchText,
:frmUeberw.nZinsen, 6)");
					Int.SqlImmedX(@" INSERT INTO bub
(bubbearbeiter, bubbearbdatum, bubarztnr, bubsoll, bubhaben, bubdm, bubbuchtext)
VALUES (:frmMain.strUser, SYSDATETIME, :frmUeberw.dfArztNr, 16000, :frmMain.nErloeskonto, :frmUeberw.nZinsen, :frmUeberw.strBuchText)");
					// 27.12.12 Ä855
					this.strBuchText = "MwSt Haben";
					// 30.06.20 Ä1892
					Var.nMwStSenkung = 17760;
					if (this.dtBuchDat >= new SalDateTime(2020, 7, 1) && this.dtBuchDat <= new SalDateTime(2020, 12, 31)) 
					{
						Var.nMwStSenkung = Int.PalKontenMwStSenkung(Var.nMwStSenkung);
					}

					Int.SqlImmedX(@"INSERT INTO FI
(fifertig, fisoll, fihaben, fibelnr, fibeldat, fibuchtext, fidm, fityp)
VALUES (0, 16000, :nMwStSenkung, :frmUeberw.dfArztNr, :frmUeberw.dtBuchDat, :frmUeberw.strBuchText,
:frmUeberw.nMwSt, 6)");
					Int.SqlImmedX(@" INSERT INTO bub
(bubbearbeiter, bubbearbdatum, bubarztnr, bubsoll, bubhaben, bubdm, bubbuchtext)
VALUES (:frmMain.strUser, SYSDATETIME, :frmUeberw.dfArztNr, 16000, :nMwStSenkung, :frmUeberw.nMwSt, :frmUeberw.strBuchText)");

					Sal.TblPopulate(App.frmUeberwListe.tblUeberw, App.frmUeberwListe.hSqlUeberwListe, App.frmUeberwListe.strSelect, Sys.TBL_FillAll);
					this.DestroyWindow();
				}
			}
			#endregion
		}
		
		/// <summary>
		/// pbAbbruch WindowActions Handler
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_WindowActions(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			switch (e.ActionType)
			{
				case Sys.SAM_Click:
					this.pbAbbruch_OnSAM_Click(sender, e);
					break;
			}
			#endregion
		}
		
		/// <summary>
		/// SAM_Click event handler.
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void pbAbbruch_OnSAM_Click(object sender, WindowActionsEventArgs e)
		{
			#region Actions
			e.Handled = true;
			this.DestroyWindow();
			#endregion
		}
		#endregion
		
		#region tblSuch
		
		/// <summary>
		/// Child Table Window implementation.
		/// </summary>
		public partial class tblSuchTableWindow : SalTableWindow
		{
			// reference to the container form.
			private frmUeberw _frmUeberw = null;
			
			
			#region Constructors/Destructors
			
			/// <summary>
			/// Default Constructor.
			/// </summary>
			public tblSuchTableWindow()
			{
				// This call is required by the Windows Form Designer.
				InitializeComponent();
			}
			#endregion
			
			#region System Methods/Properties
			
			/// <summary>
			/// Parent form.
			/// </summary>
			private frmUeberw frmUeberw
			{
				[DebuggerStepThrough]
				get
				{
					if (_frmUeberw == null) 
					{
						_frmUeberw = (frmUeberw)this.FindForm();
					}
					return _frmUeberw;
				}
			}
			
			/// <summary>
			/// Returns the object instance associated with the window handle.
			/// </summary>
			/// <param name="handle"></param>
			/// <returns></returns>
			[DebuggerStepThrough]
			public static tblSuchTableWindow FromHandle(SalWindowHandle handle)
			{
				return ((tblSuchTableWindow)SalWindow.FromHandle(handle, typeof(tblSuchTableWindow)));
			}
			#endregion
			
			#region Methods
			
			/// <summary>
			/// </summary>
			/// <returns></returns>
			public SalNumber PalClick()
			{
				#region Actions
				using (new SalContext(this))
				{
					this.frmUeberw.dfEmpfKo.Text = this.colEmpf.Text;
					this.frmUeberw.dfEmpfBLZ.Text = this.colBLZ.Text;
					this.frmUeberw.dfEmpfKonto.Text = this.colKonto.Text;
					this.frmUeberw.dfEmpfIBAN.Text = this.colIBAN.Text;
					this.frmUeberw.dfEmpfBIC.Text = this.colBIC.Text;
					this.frmUeberw.strLand = "DE";
					// 20.01.14 F1837
					if (Int.PalValNum(((SalString)this.frmUeberw.dfEmpfIBAN.Text).Left(2)) > 0) 
					{
						this.frmUeberw.dfEmpfIBAN.Text = "";
						this.frmUeberw.dfEmpfBIC.Text = "";
					}
					// 13.12.13
					if (this.frmUeberw.dfEmpfIBAN.Text == "") 
					{
						this.frmUeberw.dfEmpfIBAN.Text = Int.PalIBAN(this.frmUeberw.strLand, this.frmUeberw.dfEmpfBLZ.Text, this.frmUeberw.dfEmpfKonto.Text);
					}
					if (this.frmUeberw.dfEmpfBLZ.Text == "") 
					{
						this.frmUeberw.dfEmpfBLZ.Text = ((SalString)this.frmUeberw.dfEmpfIBAN.Text).Mid(4, 8);
					}
					if (this.frmUeberw.dfEmpfBIC.Text == "") 
					{
						this.frmUeberw.dfEmpfBIC.Text = Int.PalGetBIC(this.frmUeberw.dfEmpfBLZ.Text);
					}

				}

				return 0;
				#endregion
			}
			#endregion
		}
		#endregion
		
		#region SqlLocals
		
		/// <summary>
		/// Container class used to group the inner classes that contain
		/// the local variables that have been extracted from methods that use sql calls.
		/// </summary>
		private class SqlLocals
		{
			
			/// <summary>
			/// Contains the local variables that have been extracted from the
			/// method that uses sql calls and might need to access local bind variables.
			/// </summary>
			public class DropDownEmpfLocals
			{
				public SalString strPSelect = "";
				public SalString strPTemp = "";
				public SalString strPTemp2 = "";
				public SalString strPSave = "";
				public SalArray<SalNumber> nTabStops = new SalArray<SalNumber>(10);
				public SalNumber nTyp = 0;
				public SalNumber nParam = 0;
			}
		}
		#endregion
	}
}
