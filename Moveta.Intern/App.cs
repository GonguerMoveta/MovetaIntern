// <ppj name="Moveta.Intern" date="1/17/2024 7:59:41 AM" id="F4EC85BAD2BF79AC25C9F8643540E90F9BE1DAF0"/>
// ======================================================================================================
// This code was generated by the Ice Porter(tm) Tool version 4.8.15.0
// Ice Porter is part of The Porting Project (PPJ) by Ice Tea Group, LLC.
// The generated code is not guaranteed to be accurate and to compile without
// manual modifications.
// 
// ICE TEA GROUP LLC SHALL IN NO EVENT BE LIABLE FOR ANY DAMAGES WHATSOEVER
// (INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF BUSINESS PROFITS, BUSINESS
// INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY OTHER LOSS OF ANY KIND)
// ARISING OUT OF THE USE OR INABILITY TO USE THE GENERATED CODE, WHETHER
// DIRECT, INDIRECT, INCIDENTAL, CONSEQUENTIAL, SPECIAL OR OTHERWISE, REGARDLESS
// OF THE FORM OF ACTION, EVEN IF ICE TEA GROUP LLC HAS BEEN ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGES.
// =====================================================================================================
using System;
using System.Text;
using System.Drawing;
using System.Diagnostics;
using System.Collections;
using System.Windows.Forms;
using System.ComponentModel;
using MT;
using PPJ.Runtime;
using PPJ.Runtime.Com;
using PPJ.Runtime.Sql;
using PPJ.Runtime.Vis;
using PPJ.Runtime.Windows;
using PPJ.Runtime.Windows.QO;
using PPJ.Runtime.XSal;
using System.IO;
using System.Collections.Generic;

namespace Moveta.Intern
{
	
	/// <summary>
	/// l
	/// </summary>
	public class App : SalApplication
	{
		#region Global References
		
		/// <summary>
		/// </summary>
		public static dlgSqlErrorAction dlgSqlErrorAction;
		
		/// <summary>
		/// Halter nach Suche anzeigen
		/// </summary>
		/// <param name="strParent"></param>
		/// <param name="nArztNr"></param>
		/// <param name="nHalterNr"></param>
		/// <param name="strName"></param>
		/// <param name="strVN"></param>
		/// <param name="strPLZ"></param>
		/// <param name="strStr"></param>
		/// <param name="strOrt"></param>
		public static tblHalter tblHalter;
		
		/// <summary>
		/// Ärzte nach Suche anzeigen
		/// </summary>
		/// <param name="strParent"></param>
		/// <param name="strName"></param>
		public static tblArzt tblArzt;
		
		/// <summary>
		/// </summary>
		public static frmStamm frmStamm;
		
		/// <summary>
		/// </summary>
		public static tblStamm tblStamm;
		
		/// <summary>
		/// Disketten einlesen
		/// </summary>
		/// <param name="strPathName"></param>
		/// <param name="strFileName"></param>
		/// <param name="strParent"></param>
		/// <param name="strProjekt"></param>
		public static frmDiskEin frmDiskEin;
		
		/// <summary>
		/// </summary>
		public static dlgDiskEinRechNr dlgDiskEinRechNr;
		
		/// <summary>
		/// </summary>
		/// <param name="strParent"></param>
		public static frmAbrBearb frmAbrBearb;
		
		/// <summary>
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="strBearbeiter"></param>
		/// <param name="dtBearbDatum"></param>
		public static frmTVSNrLw frmTVSNrLw;
		
		/// <summary>
		/// </summary>
		public static frmManLE frmManLE;
		
		/// <summary>
		/// Zettelkasten
		/// </summary>
		/// <param name="strHerkunft"></param>
		/// <param name="nArztNr"></param>
		/// <param name="nHalterNr"></param>
		/// <param name="nRechNr"></param>
		public static frmZettel frmZettel;
		
		/// <summary>
		/// Text: BE
		/// Text: FR
		/// Text: HE
		/// Text: KE
		/// Text: KO
		/// Text: MA
		/// Text: SA
		/// Text: SC
		/// Text: SD
		/// Text: SE
		/// Text: ST
		/// Text: SY
		/// Text: ZI
		/// Text: ZK
		/// Text: A
		/// Text: H
		/// Text: R
		/// Text: BE
		/// Text: FR
		/// Text: HE
		/// Text: KE
		/// Text: KO
		/// Text: MA
		/// Text: SA
		/// Text: SC
		/// Text: SD
		/// Text: SE
		/// Text: ST
		/// Text: SY
		/// Text: ZI
		/// Text: ZK
		/// </summary>
		public static frmArztVorgaben frmArztVorgaben;
		
		/// <summary>
		/// </summary>
		public static frmUebFibuBH frmUebFibuBH;
		
		/// <summary>
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="strBearbeiter"></param>
		/// <param name="dtBearbDatum"></param>
		/// <param name="strDM"></param>
		public static frmUebOP frmUebOP;
		
		/// <summary>
		/// Rechnungsdruck
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="strBearbeiter"></param>
		/// <param name="dtBearbDatum"></param>
		/// <param name="strParent"></param>
		public static frmSpeRg frmSpeRg;
		
		/// <summary>
		/// FiBu
		/// </summary>
		public static frmFiBu frmFiBu;
		
		/// <summary>
		/// Text: 1 - Verarbeiten Rechng. / Mahnungen
		/// Text: 2 - Zahlungen der Halter
		/// Text: 2a - Retouren
		/// Text: 3 - Zahlungen ausbatchen
		/// Text: 4 - Rechnungen ausbuchen
		/// Text: 4a - Ausbuchung rückgängig machen
		/// Text: 5 - sonst. Buchungen
		/// Text: 6 - Buchen MB-Kosten
		/// Text: 7 - Bank-Clearing
		/// Text: 8 - Buchungskontrolle
		/// Text: 8a- TA-Konto durchsuchen
		/// Text: 8 - Drucken
		/// Text: 9a- Übergaben sperren
		/// Text: 9b- Monatsabschluß
		/// Text: 9c- Übergaben erlauben
		/// Text: --------------------------------------------------------
		/// Text: A - Abschlags-Vorschlag erstellen
		/// Text: B - Abschläge ändern
		/// Text: C - Bank-Datei erstellen + Übergabe FiBu
		/// Text: --------------------------------------------------------
		/// Text: D - Steuerberaterdatei erstellen
		/// Text: --------------------------------------------------------
		/// Text: M - Myco - Pfizer-Rechnung
		/// Text: X - Beiträge und Einlagen automatisch buchen
		/// Mahnungen / MB's
		/// </summary>
		public static frmMahn frmMahn;
		
		/// <summary>
		/// Text: 1 - Mahntexte
		/// Text: 2 - Mahnvorschlag erstellen
		/// Text: 3 - Mahnvorschlag ändern
		/// Text: 4a - 123-Mahnungen speichern
		/// Text: 4b - 123-Mahnungen drucken
		/// Text: 4c - RaZa-Mahnungen drucken
		/// Text: 6 - TA-Etiketten aus Vorschlag
		/// Text: 7 - Summenblatt drucken
		/// Text: 9 - Übergabe FiBu
		/// Text: 9b - Übergabe Ratenzahler-Mahnungen
		/// Text: --------------------------------------------------------
		/// Text: A - MB-Anfragen drucken
		/// Text: B - Mahnbescheide erfassen
		/// Text: C - MB-Drucke
		/// Text: D - Diskette erstellen
		/// Text: E - Übergabe FiBu (Mahnbescheide)
		/// Text: --------------------------------------------------------
		/// Text: P - Mahnprotokoll Tierärzte
		/// Text: X - Tagebucheinträge erfassen für MBs
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="nHalterNr"></param>
		/// <param name="nRechNr"></param>
		public static tblZahlungen tblZahlungen;
		
		/// <summary>
		/// </summary>
		public static frmZahlHalter frmZahlHalter;
		
		/// <summary>
		/// Rechnungen ausbuchen
		/// </summary>
		public static frmRechAusb frmRechAusb;
		
		/// <summary>
		/// sonstige Buchungen
		/// </summary>
		/// <param name="bPharma"></param>
		public static frmsonstBuch frmsonstBuch;
		
		/// <summary>
		/// Mahntexte
		/// </summary>
		public static frmMahntexte frmMahntexte;
		
		/// <summary>
		/// </summary>
		public static frmMahnVor frmMahnVor;
		
		/// <summary>
		/// Mahnungsdruck
		/// </summary>
		public static frmSpeMa frmSpeMa;
		
		/// <summary>
		/// Mahnungsdruck
		/// </summary>
		public static frmDruMa frmDruMa;
		
		/// <summary>
		/// </summary>
		public static dlgMBDruck dlgMBDruck;
		
		/// <summary>
		/// Ausbatch-Programm
		/// </summary>
		public static frmAusbatch frmAusbatch;
		
		/// <summary>
		/// </summary>
		/// <param name="nArztNr"></param>
		public static frmMCSuche frmMCSuche;
		
		/// <summary>
		/// </summary>
		public static frmSonderSuche frmSonderSuche;
		
		/// <summary>
		/// Buchen MB-Kosten
		/// </summary>
		public static frmBuchMB frmBuchMB;
		
		/// <summary>
		/// Liste zum ändern von Halter-Nr. und Match
		/// </summary>
		/// <param name="strParent"></param>
		public static frmAbrHalter frmAbrHalter;
		
		/// <summary>
		/// </summary>
		public static dlgAbschVor dlgAbschVor;
		
		/// <summary>
		/// </summary>
		public static frmAbschVor frmAbschVor;
		
		/// <summary>
		/// </summary>
		public static frmUeberwListe frmUeberwListe;
		
		/// <summary>
		/// ArztStamm
		/// </summary>
		/// <param name="strPHerkunft"></param>
		/// <param name="nPArztNr"></param>
		public static frmAerzte frmAerzte;
		
		/// <summary>
		/// </summary>
		public static dlgdivDruck dlgdivDruck;
		
		/// <summary>
		/// </summary>
		/// <param name="nArztNr"></param>
		public static frmOPDisk frmOPDisk;
		
		/// <summary>
		/// </summary>
		public static frmInfoSasse frmInfoSasse;
		
		/// <summary>
		/// </summary>
		public static dlgMS dlgMS;
		
		/// <summary>
		/// </summary>
		public static dlgSalden dlgSalden;
		
		/// <summary>
		/// </summary>
		/// <param name="nArztX"></param>
		/// <param name="nHalterX"></param>
		public static frmTagebuch frmTagebuch;
		
		/// <summary>
		/// </summary>
		public static dlgAbout dlgAbout;
		
		/// <summary>
		/// </summary>
		public static frmMBAktiErf frmMBAktiErf;
		
		/// <summary>
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="nHalterNr"></param>
		/// <param name="nRechNr"></param>
		public static frmRechAb frmRechAb;
		
		/// <summary>
		/// </summary>
		public static dlgZinsen dlgZinsen;
		
		/// <summary>
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="nHalterNr"></param>
		/// <param name="nRechNr"></param>
		public static tblMahnungen tblMahnungen;
		
		/// <summary>
		/// </summary>
		public static frmBuKo frmBuKo;
		
		/// <summary>
		/// </summary>
		public static frmGewinnErm frmGewinnErm;
		
		/// <summary>
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="nHalterNr"></param>
		/// <param name="nOP"></param>
		public static tblHistorie tblHistorie;
		
		/// <summary>
		/// </summary>
		/// <param name="nArztX"></param>
		/// <param name="nHalterX"></param>
		public static frmProzReg frmProzReg;
		
		/// <summary>
		/// </summary>
		public static frmDatLoe frmDatLoe;
		
		/// <summary>
		/// neue Halter anlegen
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="strBearbeiter"></param>
		/// <param name="dtBearbDatum"></param>
		public static frmDublPruef frmDublPruef;
		
		/// <summary>
		/// </summary>
		public static frmTKSuch frmTKSuch;
		
		/// <summary>
		/// </summary>
		public static frmMBKalender frmMBKalender;
		
		/// <summary>
		/// Text: 1 - Pflege
		/// Text: --------------------------------------------------------
		/// Text: 2 - Vorschlag erstellen
		/// Text: 3 - Vorschlag ändern
		/// Text: 4a - Drucken
		/// Text: 4b - Einzeldrucke
		/// Text: 5 - MB-Kosten-Protokoll a+c
		/// Text: 6 - MB-Kosten-Protokoll b
		/// Text: 9 - Übergabe FiBu
		/// </summary>
		public static frmMB frmMB;
		
		/// <summary>
		/// </summary>
		public static dlgMBKalenderVor dlgMBKalenderVor;
		
		/// <summary>
		/// </summary>
		public static frmMBKalenderVor frmMBKalenderVor;
		
		/// <summary>
		/// </summary>
		public static dlgMBKalenderVorDruck dlgMBKalenderVorDruck;
		
		/// <summary>
		/// </summary>
		public static frmStatTK frmStatTK;
		
		/// <summary>
		/// </summary>
		public static frmLogbuch frmLogbuch;
		
		/// <summary>
		/// </summary>
		public static frmTVNOnline frmTVNOnline;
		
		/// <summary>
		/// </summary>
		public static frmMonatsAbschl frmMonatsAbschl;
		
		/// <summary>
		/// </summary>
		public static frmGraph frmGraph;
		
		/// <summary>
		/// </summary>
		public static frmBankZahl frmBankZahl;
		
		/// <summary>
		/// </summary>
		public static frmMycoLE frmMycoLE;
		
		/// <summary>
		/// </summary>
		public static frmMycoBH frmMycoBH;
		
		/// <summary>
		/// Erinnerungsliste
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="nHalterNr"></param>
		/// <param name="nRechNr"></param>
		public static frmEL frmEL;
		
		/// <summary>
		/// </summary>
		/// <param name="strFrage"></param>
		/// <param name="strParent"></param>
		/// <param name="nPLength"></param>
		/// <param name="strEin"></param>
		public static dlgText dlgText;
		
		/// <summary>
		/// </summary>
		public static frmInfoZahlAusbuch frmInfoZahlAusbuch;
		
		/// <summary>
		/// </summary>
		public static frmRueckErst frmRueckErst;
		
		/// <summary>
		/// </summary>
		/// <param name="strPHerkunft"></param>
		/// <param name="nPArztNr"></param>
		/// <param name="nPHalterNr"></param>
		public static frmHalter frmHalter;
		
		/// <summary>
		/// 23.01.01
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="nSumme"></param>
		/// <param name="dtBearbDatum">18.06.19 Ä1854</param>
		/// <param name="strBearbeiter"></param>
		public static dlgVorschuss dlgVorschuss;
		
		/// <summary>
		/// </summary>
		/// <param name="nArztNr"></param>
		public static tblUeberw tblUeberw;
		
		/// <summary>
		/// Anmeldung
		/// </summary>
		public static frmMain frmMain;
		
		/// <summary>
		/// </summary>
		/// <param name="strFrage"></param>
		/// <param name="strEin"></param>
		/// <param name="nEinDM"></param>
		public static dlgTextundDM dlgTextundDM;
		
		/// <summary>
		/// </summary>
		/// <param name="nPArzt"></param>
		/// <param name="nPHalter"></param>
		/// <param name="nPRech"></param>
		public static frmBrAktiErf frmBrAktiErf;
		
		/// <summary>
		/// </summary>
		/// <param name="nEin"></param>
		public static dlgEinCopies dlgEinCopies;
		
		/// <summary>
		/// </summary>
		/// <param name="strFrage"></param>
		/// <param name="strEin"></param>
		/// <param name="nEinPRNr"></param>
		/// <param name="nEinDM"></param>
		public static dlgTextPRundDM dlgTextPRundDM;
		
		/// <summary>
		/// </summary>
		public static frmRetouren frmRetouren;
		
		/// <summary>
		/// </summary>
		public static tblVN tblVN;
		
		/// <summary>
		/// </summary>
		public static frmNamenstest frmNamenstest;
		
		/// <summary>
		/// </summary>
		public static frmDiskAbr frmDiskAbr;
		
		/// <summary>
		/// Text: Eingang
		/// Text: Diskette einlesen
		/// Text: Halterliste von Diskette
		/// Text: Halter prüfen
		/// Text: Matchcode suchen
		/// Text: Halterstamm
		/// Text: Abrechnung bearbeiten
		/// Text: Halter-Nr. ändern
		/// Text: neue Halter anlegen
		/// Text: Dublettenprüfung
		/// Text: Dublettenprüfung neu
		/// Text: TVS-Nr.-Diskette erstellen
		/// Text: Rechnungen drucken (alt)
		/// Text: Vorab-Rechnungen drucken
		/// Text: Rechnungen drucken
		/// Text: EU-Standardüberweisungen
		/// Text: CHF-Überweisungen
		/// Text: Rechnungsprotokoll drucken
		/// Text: Etiketten aus Rechnungsprotokoll
		/// Text: Übergabe OP
		/// Text:
		/// Text: RA-Info-Zettel
		/// </summary>
		/// <param name="hWndRepForm"></param>
		/// <param name="strTemplate"></param>
		/// <param name="strVariables"></param>
		/// <param name="strInputs"></param>
		public static dlgDruckUtil dlgDruckUtil;
		
		/// <summary>
		/// </summary>
		/// <param name="sRepName"></param>
		public static frmReport frmReport;
		
		/// <summary>
		/// </summary>
		public static frmDruMahnProtokoll frmDruMahnProtokoll;
		
		/// <summary>
		/// </summary>
		public static frmHalterDoppelt frmHalterDoppelt;
		
		/// <summary>
		/// </summary>
		public static frmRechAusbRueck frmRechAusbRueck;
		
		/// <summary>
		/// EU-Standardüberweisung
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="strBearbeiter"></param>
		/// <param name="dtBearbDatum"></param>
		public static frmEUUeberw frmEUUeberw;
		
		/// <summary>
		/// </summary>
		/// <param name="strPArt"></param>
		public static frmEDA frmEDA;
		
		/// <summary>
		/// </summary>
		/// <param name="strParent"></param>
		/// <param name="nProzNr"></param>
		public static frmMBErf frmMBErf;
		
		/// <summary>
		/// </summary>
		/// <param name="strFrage"></param>
		/// <param name="strN1"></param>
		/// <param name="strN2"></param>
		/// <param name="strN3"></param>
		/// <param name="strN4"></param>
		/// <param name="strN5"></param>
		public static dlgAnschrift dlgAnschrift;
		
		/// <summary>
		/// </summary>
		public static frmPRGrafik frmPRGrafik;
		
		/// <summary>
		/// </summary>
		public static frmStatBenutzer frmStatBenutzer;
		
		/// <summary>
		/// neue Halter anlegen
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="strBearbeiter"></param>
		/// <param name="dtBearbDatum"></param>
		public static frmDublPruef2 frmDublPruef2;
		
		/// <summary>
		/// </summary>
		public static frmVKZ frmVKZ;
		
		/// <summary>
		/// </summary>
		public static frmInventHaendler frmInventHaendler;
		
		/// <summary>
		/// </summary>
		public static frmBenutzer frmBenutzer;
		
		/// <summary>
		/// </summary>
		public static dlgPWChange dlgPWChange;
		
		/// <summary>
		/// </summary>
		public static dlgAbwAss dlgAbwAss;
		
		/// <summary>
		/// </summary>
		/// <param name="strFrage"></param>
		/// <param name="dtEinDatum"></param>
		public static dlgDatum dlgDatum;
		
		/// <summary>
		/// 06.11.06 Ä41
		/// </summary>
		public static frmSteuerExport frmSteuerExport;
		
		/// <summary>
		/// 5.10.06 A32
		/// </summary>
		/// <param name="strPNr"></param>
		/// <param name="strPFU"></param>
		/// <param name="strPVN"></param>
		/// <param name="strPSH"></param>
		/// <param name="strPPLZ"></param>
		/// <param name="strPO"></param>
		/// <param name="strPAL"></param>
		/// <param name="strPFU2">16.01.07 Ä59</param>
		/// <param name="strPVN2"></param>
		/// <param name="strPSH2"></param>
		/// <param name="strPPLZ2"></param>
		/// <param name="strPO2"></param>
		/// <param name="strPAL2"></param>
		/// <param name="strPFU3"></param>
		/// <param name="strPVN3"></param>
		/// <param name="strPSH3"></param>
		/// <param name="strPPLZ3"></param>
		/// <param name="strPO3"></param>
		/// <param name="strPAL3"></param>
		/// <param name="strPFU4"></param>
		/// <param name="strPVN4"></param>
		/// <param name="strPSH4"></param>
		/// <param name="strPPLZ4"></param>
		/// <param name="strPO4"></param>
		/// <param name="strPAL4"></param>
		public static dlgEDAGV dlgEDAGV;
		
		/// <summary>
		/// </summary>
		/// <param name="nSuchArzt"></param>
		/// <param name="nSuchHalter"></param>
		/// <param name="nSuchRech"></param>
		public static frmRgSuchen frmRgSuchen;
		
		/// <summary>
		/// RechnungsPositionen
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="nHalterNr"></param>
		/// <param name="nRechNr"></param>
		public static frmRechPos frmRechPos;
		
		/// <summary>
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="nHalterNr"></param>
		/// <param name="nRechNr"></param>
		/// <param name="strEmpf"></param>
		/// <param name="lsText"></param>
		/// <param name="dtDatum"></param>
		/// <param name="strRA0"></param>
		/// <param name="strRA1"></param>
		/// <param name="strRA2"></param>
		/// <param name="strRA3"></param>
		/// <param name="strRA4"></param>
		/// <param name="bBrief"></param>
		public static frmBriefVari frmBriefVari;
		
		/// <summary>
		/// </summary>
		/// <param name="lsPAdresse"></param>
		/// <param name="strParent"></param>
		public static frmDYMODruck frmDYMODruck;
		
		/// <summary>
		/// </summary>
		public static frmManAbr frmManAbr;
		
		/// <summary>
		/// Text: Matchcode suchen
		/// Text: Leistungen erfassen
		/// Text: Halterstamm
		/// Text: Abrechnung bearbeiten
		/// Text: Rechnungs-Check
		/// Text: TVS-Nr.-Diskette erstellen
		/// Text: Rechnungen drucken (alt)
		/// Text: Vorab-Rechnungen drucken
		/// Text: Rechnungen drucken
		/// Text: EU-Standardüberweisungen
		/// Text: Rechnungsprotokoll drucken
		/// Text: Etiketten aus Rechnungsprotokoll
		/// Text: Übergabe OP
		/// Text:
		/// Text: Myco-Abrechnung
		/// Text: Myco-Zettel drucken
		/// Text:
		/// Text: Seuchenbekämpfungsmaßnahmen
		/// Text:
		/// Text: RA-Info-Zettel
		/// </summary>
		/// <param name="strPFile"></param>
		public static frmPDFAnzeige frmPDFAnzeige;
		
		/// <summary>
		/// </summary>
		public static frmVETAemter frmVETAemter;
		
		/// <summary>
		/// </summary>
		public static frmTSK frmTSK;
		
		/// <summary>
		/// </summary>
		public static frmRechNachdruck frmRechNachdruck;
		
		/// <summary>
		/// </summary>
		/// <param name="strFrage"></param>
		/// <param name="nEinDM"></param>
		public static dlgDM dlgDM;
		
		/// <summary>
		/// </summary>
		public static frmLoad frmLoad;
		
		/// <summary>
		/// </summary>
		/// <param name="nPArzt"></param>
		/// <param name="nPHalter"></param>
		/// <param name="nPRech"></param>
		/// <param name="lsPRTF"></param>
		public static frmText frmText;
		
		/// <summary>
		/// </summary>
		/// <param name="nSpalten"></param>
		/// <param name="nZeilen"></param>
		public static dlgEinTabelle dlgEinTabelle;
		
		/// <summary>
		/// </summary>
		/// <param name="strFrage"></param>
		/// <param name="strEin"></param>
		public static dlgEinString dlgEinString;
		
		/// <summary>
		/// </summary>
		public static frmTSKZahl frmTSKZahl;
		
		/// <summary>
		/// </summary>
		/// <param name="nParArztNr"></param>
		/// <param name="nParHalterNr"></param>
		public static frmRaZa frmRaZa;
		
		/// <summary>
		/// </summary>
		/// <param name="strROWID"></param>
		public static frmUeberw frmUeberw;
		
		/// <summary>
		/// </summary>
		/// <param name="strS1"></param>
		/// <param name="strS2"></param>
		/// <param name="strS3"></param>
		/// <param name="strS4"></param>
		/// <param name="strS5"></param>
		/// <param name="strNeuKenn"></param>
		/// <param name="nLen"></param>
		/// <param name="strParent"></param>
		public static dlgEinString1 dlgEinString1;
		
		/// <summary>
		/// </summary>
		public static frmKA frmKA;
		
		/// <summary>
		/// </summary>
		public static dlgMahnVor dlgMahnVor;
		
		/// <summary>
		/// </summary>
		/// <param name="strFrage"></param>
		/// <param name="nEin"></param>
		public static dlgEinNumber dlgEinNumber;
		
		/// <summary>
		/// </summary>
		/// <param name="strTyp"></param>
		public static frmMBKEinzeldruck frmMBKEinzeldruck;
		
		/// <summary>
		/// </summary>
		/// <param name="nPArzt"></param>
		/// <param name="nPHalter"></param>
		/// <param name="nPRech"></param>
		/// <param name="nPPR"></param>
		/// <param name="lsPText"></param>
		public static dlgZahlInfo dlgZahlInfo;
		
		/// <summary>
		/// </summary>
		/// <param name="nPArztNr"></param>
		public static frmInvent frmInvent;
		
		/// <summary>
		/// Text: Austausch
		/// Text: Wartung
		/// Text: Installation
		/// Text: Erstgerät
		/// </summary>
		/// <param name="strKey"></param>
		/// <param name="strLaufwerk"></param>
		public static dlgLaufwerk dlgLaufwerk;
		
		/// <summary>
		/// </summary>
		/// <param name="strFrage"></param>
		/// <param name="dtEin2"></param>
		public static dlgEinDat2 dlgEinDat2;
		
		/// <summary>
		/// </summary>
		public static frmBEZStamm frmBEZStamm;
		
		/// <summary>
		/// </summary>
		public static frmBEZDaten frmBEZDaten;
		
		/// <summary>
		/// </summary>
		public static frmHalterKopieren frmHalterKopieren;
		
		/// <summary>
		/// </summary>
		public static frmStatAbrg frmStatAbrg;
		
		/// <summary>
		/// </summary>
		public static frmSerienbrief frmSerienbrief;
		
		/// <summary>
		/// </summary>
		public static dlgVADetail dlgVADetail;
		
		/// <summary>
		/// </summary>
		public static frmBuchAbgleich frmBuchAbgleich;
		
		/// <summary>
		/// 06.11.06 Ä41
		/// </summary>
		public static frmSteuerExportA frmSteuerExportA;
		
		/// <summary>
		/// </summary>
		public static frmSerienbriefH frmSerienbriefH;
		
		/// <summary>
		/// </summary>
		public static frmRR frmRR;
		
		/// <summary>
		/// EWA-Erinnerungsliste
		/// </summary>
		public static frmEE frmEE;
		
		/// <summary>
		/// </summary>
		public static frmAbrFTP frmAbrFTP;
		
		/// <summary>
		/// Ä1436
		/// </summary>
		/// <param name="nPArztNr"></param>
		/// <param name="nPHalterNr"></param>
		/// <param name="nPRechNr"></param>
		/// <param name="dtPErfDat"></param>
		public static dlgBEZRetoure dlgBEZRetoure;
		
		/// <summary>
		/// </summary>
		/// <param name="strPBericht"></param>
		/// <param name="strPSpezial"></param>
		public static dlgLlDruck dlgLlDruck;
		
		/// <summary>
		/// </summary>
		/// <param name="nPArzt"></param>
		/// <param name="nPHalter"></param>
		/// <param name="nPR"></param>
		public static frmRISER frmRISER;
		
		/// <summary>
		/// </summary>
		public static frmAnwBeleg frmAnwBeleg;
		
		/// <summary>
		/// </summary>
		/// <param name="dtPStart"></param>
		/// <param name="nPArztNr"></param>
		/// <param name="strPPerson"></param>
		/// <param name="nNeu"></param>
		public static frmSupportLog frmSupportLog;
		
		/// <summary>
		/// </summary>
		public static frmDSGVOLoesch frmDSGVOLoesch;
		
		/// <summary>
		/// neue Halter anlegen
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="strBearbeiter"></param>
		/// <param name="dtBearbDatum"></param>
		/// <param name="bAuto"></param>
		public static frmHalterAnl frmHalterAnl;
		
		/// <summary>
		/// </summary>
		/// <param name="strFrage"></param>
		/// <param name="dtEin1"></param>
		/// <param name="dtEin2"></param>
		public static dlgEinDat dlgEinDat;
		
		/// <summary>
		/// </summary>
		public static frmStatVariabel frmStatVariabel;
		
		/// <summary>
		/// </summary>
		/// <param name="strHeader"></param>
		public static dlgUserCredentials dlgUserCredentials;
		
		/// <summary>
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="nHalterNr"></param>
		/// <param name="nRechNr"></param>
		public static frmtblMahnungen frmtblMahnungen;
		
		/// <summary>
		/// 08.12.20 Ä1897
		/// </summary>
		public static frmRechVonBisStorno frmRechVonBisStorno;
		
		/// <summary>
		/// </summary>
		public static frmAbrDateiX frmAbrDateiX;
		
		/// <summary>
		/// </summary>
		/// <param name="nArztNr"></param>
		/// <param name="strBearbeiter"></param>
		/// <param name="dtBearbDatum"></param>
		/// <param name="strParent"></param>
		public static frmRechProtneu frmRechProtneu;
		
		/// <summary>
		/// </summary>
		public static frmDATEVStamm frmDATEVStamm;
		
		/// <summary>
		/// 14.05.21 Ä1957
		/// </summary>
		public static frmNegativsalden frmNegativsalden;
		
		/// <summary>
		/// </summary>
		public static frmFeiertage frmFeiertage;
		
		/// <summary>
		/// </summary>
		public static frmJahresSummen frmJahresSummen;
		
		/// <summary>
		/// </summary>
		/// <param name="strFrage"></param>
		/// <param name="strParent"></param>
		/// <param name="nPLength"></param>
		/// <param name="strEin"></param>
		/// <param name="strHerkunft"></param>
		public static dlgTextHalter dlgTextHalter;
		
		/// <summary>
		/// </summary>
		public static frmHalterFehlend frmHalterFehlend;
		
		/// <summary>
		/// </summary>
		/// <param name="strS1"></param>
		/// <param name="strS2"></param>
		/// <param name="strS3"></param>
		/// <param name="strS4"></param>
		/// <param name="strS5"></param>
		/// <param name="strNeuKenn"></param>
		/// <param name="nLen"></param>
		/// <param name="strParent"></param>
		public static dlgEinStringScan dlgEinStringScan;
		
		/// <summary>
		/// </summary>
		public static frmGerichte frmGerichte;
		
		/// <summary>
		/// </summary>
		public static frmZust frmZust;
		
		/// <summary>
		/// </summary>
		/// <param name="strS1"></param>
		/// <param name="strS2"></param>
		/// <param name="strNeuKenn"></param>
		/// <param name="nLen"></param>
		public static dlgEinStr2 dlgEinStr2;
		
		/// <summary>
		/// </summary>
		public static frmPrintIds frmPrintIds;
		
		/// <summary>
		/// </summary>
		public static frmVersicherungen frmVersicherungen;
		
		/// <summary>
		/// </summary>
		public static frmNegativerSaldo frmNegativerSaldo;
		
		/// <summary>
		/// </summary>
		public static dlgBeihilfeEin dlgBeihilfeEin;
		
		/// <summary>
		/// </summary>
		public static frmTSKBeihilfen frmTSKBeihilfen;
		
		/// <summary>
		/// </summary>
		public static frmKontierungen frmKontierungen;
		
		/// <summary>
		/// </summary>
		public static frmTSKWaisen frmTSKWaisen;
		
		/// <summary>
		/// cQuickTable login dialog. This dialog simply prompts for the login parameters.
		/// The data source will actually handle the login to the data source.
		/// </summary>
		/// <param name="pDatabase"></param>
		/// <param name="pUser"></param>
		/// <param name="pPassword"></param>
		public static dlgQOLogin dlgQOLogin;


		public static dlgBenutzerFE dlgBenutzerFE;
        #endregion

        /// <summary>
        /// Entry point for the application.
        /// </summary>
        /// <param name="args"></param>
        /// <returns></returns>
        [STAThread]
		public static int Main(string[] args)
		{
			SalApplication.VisualStyles = true;
			SalApplication.UseCompatibleTextRendering = false;
			return new App().Run(args);
		}
		
		#region Application Actions
		
		/// <summary>
		/// SAM_AppStartup Handler.
		/// </summary>
		protected override void OnAppStartup()
		{
			// Fecher Extension SYSTABLES, SYSCOLUMNS
			if(File.Exists(@"systables.xml"))
            {
				Var.SYSTABLES = TD60.DeserializeFromXml<List<TD60.Systables>>("systables.xml");
			}
			if (File.Exists(@"syscolumns.xml"))
			{
				Var.SYSCOLUMNS = TD60.DeserializeFromXml<List<TD60.Syscolumns>>("syscolumns.xml");
			}

			Sal.ActiveXAutoErrorMode(false);
			// Call SetSysColors( 1, 0x00000C, 0xBFFFFF )
			Var.nNumStackPtr = 0;
			Var.nStrStackPtr = 0;
			// Call OpenReportEngine(  )
			Var.IconDLLName = "icons.dll";
			// 10.04.08 Beilagen-PDF Einbettung
			Var.bOK = Ext.AtlAxWinInit();
			// ! 17.12.14
			Ext.DisableProcessWindowsGhosting();
			// 19.08.15
			Var.LVhDC = Ext.GetDC(SalWindowHandle.Null);
			Var.FPrnSourceWidth = Ext.GetDeviceCaps(Var.LVhDC, Const.HORZRES);
			Var.FPrnSourceHeight = Ext.GetDeviceCaps(Var.LVhDC, Const.VERTRES);
			// !

			Sal.UseRegistry(true, "TVN");
			Int.PalGetProfileStringR("Vorgabe", "Theme2010", "17 - Office2010_R2_Silver", ref Var.strTheme, "TVN");
			Var.nTheme = Int.PalValNum(Var.strTheme.Left(Var.strTheme.Scan("-")));
            //FC:FINAL: Set themes using PPJ Skins
            if (Var.nTheme != Int.SalThemeGet())
            {
                Int.SalThemeSet(Var.nTheme);
            }
            //FC:FINAL: Use Ribbon Bar forms from PPJ (ComponentOne C1Ribbon)
            //bMenuBarAsRibbonBar = true;

            // 02.10.06 Ä35
            Int.PalGetProfileStringR("", "Directory", "", ref Var.strDummy, "TVN");
			if (Var.strDummy == "") 
			{
				Sal.FileGetCurrentDirectory(ref Var.strDummy);
				if (Var.strDummy.Scan("Gupta Projekte") == -1) 
				{
					Sal.SetProfileString("", "Directory", Var.strDummy, "TVN");
				}
			}
		}
		
		/// <summary>
		/// SAM_AppExit Handler.
		/// </summary>
		/// <returns>Call CloseReportEngine(  )</returns>
		protected override int OnAppExit()
		{
			// Call CloseReportEngine(  )
			return 0;
		}
		#endregion
		
		/// <summary>
		/// Automatic forms creation.
		/// </summary>
		protected override void OnAppCreateAutomaticForms()
		{
			frmMain.CreateWindow(Sys.hWndNULL);
		}
		
		#region Menu Classes
		
		/// <summary>
		/// Named menus definitions.
		/// </summary>
		public class NamedMenus
		{
			
			/// <summary>
			/// </summary>
			public class frmTSKZahltblTSKMerkRightClick : SalPopupMenu
			{
				private SalMenuItem menuItem_Beihilfe;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_Beihilfe = new SalMenuItem();
					// 
					// frmTSKZahltblTSKMerkRightClick
					// 
					this.Text = "KontexMenue";
					this.MenuItems.Add(this.menuItem_Beihilfe);
					// 
					// menuItem_Beihilfe
					// 
					this.menuItem_Beihilfe.Text = "Beihilfe eintragen, Eintrag aus Merkliste entfernen";
					this.menuItem_Beihilfe.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem_Beihilfe_EnabledWhen);
					this.menuItem_Beihilfe.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Beihilfe_MenuActions);
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_Beihilfe_EnabledWhen()
				{
					return App.frmTSKZahl.tblTSKMerk.colMerkTyp.Text == "BEI20";
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Beihilfe_MenuActions()
				{

					// If SqlPrepareAndExecute(hSqlTSKPos, 'SELECT tsktyp, tskdatum, tskzm, tskppos, tskpgot, tskptext, tskpwert, tskpeinheit,
					// hvn, hnn, hstr, hort
					// INTO :frmTSKZahl.strTyp, :frmTSKZahl.dtDatum, :frmTSKZahl.strZM, :frmTSKZahl.nPos, :frmTSKZahl.strGOT, :frmTSKZahl.strText, :frmTSKZahl.nWert, :frmTSKZahl.strEinheit,
					// :frmTSKZahl.strHVN, :frmTSKZahl.strHNN, :frmTSKZahl.strHS, :frmTSKZahl.strHO
					// FROM tsk, tskp, h
					// WHERE tskarztnr=harztnr AND tskhalternr=hhalternr AND tskarztnr=tskparztnr AND tskhalternr=tskhalternr AND tskerfdat=tskperfdat
					// AND tskparztnr = :frmTSKZahl.tblTSKMerk.colArztNr AND tskphalternr = :frmTSKZahl.tblTSKMerk.colHalterNr AND tskperfdat = :frmTSKZahl.tblTSKMerk.colErfDat')
					// Set frmTSKZahl.nSum = 0
					// Call SqlFetchNext(hSqlTSKPos, nFetchTSKPos)
					// While nFetchTSKPos != FETCH_EOF
					// Call PalTSKBerechnePos()
					// Set frmTSKZahl.nSum = frmTSKZahl.nSum +  frmTSKZahl.nEUR + SalNumberRound(frmTSKZahl.nEUR * frmTSKZahl.nMwSt) / 100
					// Call SqlFetchNext(hSqlTSKPos, nFetchTSKPos)
					// Call SqlCommit( hSqlTSKPos )
					// If frmTSKZahl.tblTSKMerk.colDM > frmTSKZahl.nSum
					// Else
					// Set frmTSKZahl.nSum = frmTSKZahl.tblTSKMerk.colDM
					Int.SqlImmed(@"UPDATE tsk SET
tskbeihilfe = :frmTSKZahl.tblTSKMerk.colDM ,
tskbeihtext = 'Beihilfe wurde gewährt'
WHERE tskarztnr= :frmTSKZahl.tblTSKMerk.colArztNr AND tskhalternr = :frmTSKZahl.tblTSKMerk.colHalterNr AND tskerfdat = :frmTSKZahl.tblTSKMerk.colErfDat ");
					Int.SqlImmed(@"UPDATE tskml SET
tskmlerldat = SYSDATETIME
WHERE tskmlarztnr= :frmTSKZahl.tblTSKMerk.colArztNr AND tskmlhalternr = :frmTSKZahl.tblTSKMerk.colHalterNr AND tskmlerfdat = :frmTSKZahl.tblTSKMerk.colErfDat ");
					return 0;
				}
			}
			
			/// <summary>
			/// </summary>
			public class frmInventtblIVkRightClick : SalPopupMenu
			{
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					// 
					// frmInventtblIVkRightClick
					// 
					this.Text = "Kontextmenü";
				}
			}
			
			/// <summary>
			/// </summary>
			public class frmInventtblIVpRightClick : SalPopupMenu
			{
				private SalMenuItem menuItem_Brief;
				private SalMenuItem menuItem_Brief_1;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_Brief = new SalMenuItem();
					this.menuItem_Brief_1 = new SalMenuItem();
					// 
					// frmInventtblIVpRightClick
					// 
					this.Text = "Kontextmenü";
					this.MenuItems.Add(this.menuItem_Brief);
					this.MenuItems.Add(this.menuItem_Brief_1);
					// 
					// menuItem_Brief
					// 
					this.menuItem_Brief.Text = "Brief für Inventaretiketten an Händler drucken";
					this.menuItem_Brief.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Brief_MenuActions);
					// 
					// menuItem_Brief_1
					// 
					this.menuItem_Brief_1.Text = "Brief für Inventaretiketten an Tierarzt drucken";
					this.menuItem_Brief_1.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Brief_1_MenuActions);
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Brief_MenuActions()
				{
					Sal.TblKillEdit(App.frmInvent.tblIVp);
					App.frmInvent.strBrief = @"Sehr geehrte Damen und Herren,

für die von Ihnen gelieferten Artikel erhalten Sie anbei unsere Inventaraufkleber:
";
					if (Sal.TblAnyRows(App.frmInvent.tblIVp, Sys.ROW_Selected, 0)) 
					{
						App.frmInvent.nRowP = Sys.TBL_MinRow;
						while (true)
						{

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalNumber temp1 = App.frmInvent.nRowP;
							SalBoolean temp2 = Sal.TblFindNextRow(App.frmInvent.tblIVp, ref temp1, Sys.ROW_Selected, 0);
							App.frmInvent.nRowP = temp1;

							if (!(temp2)) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmInvent.tblIVp, App.frmInvent.nRowP);
							if (App.frmInvent.tblIVp.colInvNr.Number == Sys.NUMBER_Null) 
							{
								Int.SqlImmedSel("SELECT MAX(ipinvnr) INTO :frmInvent.tblIVp.colInvNr FROM ip");
								App.frmInvent.tblIVp.colInvNr.Number = App.frmInvent.tblIVp.colInvNr.Number + 1;
								Int.SqlImmed("UPDATE ip SET ipinvnr = :frmInvent.tblIVp.colInvNr WHERE ipnr = :frmInvent.tblIVp.colNr AND ippos = :frmInvent.tblIVp.colPos");
								Sal.TblSetRowFlags(App.frmInvent.tblIVp, App.frmInvent.nRowP, Sys.ROW_Edited, true);
							}
							// 26.04.12 Ä757
							if (Var.bfrmDYMODruck) 
							{
								while (!(App.frmDYMODruck.DestroyWindow())) 
								{
								}
							}
							frmDYMODruck.CreateWindow(Sys.hWndForm, App.frmInvent.tblIVp.colBez.Text + @"
Seriennr. " + App.frmInvent.tblIVp.colSerienNr.Text + @"
Inventarnr. " + Sal.NumberToStrX(App.frmInvent.tblIVp.colInvNr.Number, 0), "frmEDA");

							// Set frmInvent.strEti1 = 'TVN-Eigentum seit ' || SalDateToStrX( frmInvent.tblIVk.colRechDat )
							// Set frmInvent.strEti2 = 'Inventar-Nr. -' || PalStrNum(frmInvent.tblIVp.colInvNr,8,0) || '- '
							App.frmInvent.strBrief = App.frmInvent.strBrief + @"
Inventar-Nr. " + Int.PalStrNullen(Sal.NumberToStrX(App.frmInvent.tblIVp.colInvNr.Number, 0), 6) + " " + Int.PalLF(App.frmInvent.tblIVp.colBez.Text, 30);
							if (App.frmInvent.tblIVp.colSerienNr.Text != "") 
							{
								// Set frmInvent.strEti3 = 'Serien-Nr.   ' || frmInvent.tblIVp.colSerienNr
								App.frmInvent.strBrief = App.frmInvent.strBrief + "(Serien-Nr." + App.frmInvent.tblIVp.colSerienNr.Text + ")";
							}
							// Else
							// Set frmInvent.strEti3 = ''
							// Set frmInvent.strEti4 = SalStrLeftX(frmInvent.tblIVp.colBez, 30)
							// Call SqlImmed('INSERT INTO ed (edn1,edn2,eds,edo) VALUES( :frmInvent.strEti1, :frmInvent.strEti2, :frmInvent.strEti3, :frmInvent.strEti4 )')
						}
						if (Int.SqlImmedSel(@"
SELECT ian1, ian2, ias, iap || ' ' || iao, ialand
FROM ia
INTO :frmInvent.strEti1, :frmInvent.strEti2, :frmInvent.strEti3, :frmInvent.strEti4, :frmInvent.strEti5
WHERE iacode = :frmInvent.tblIVk.colRechErst")) 
						{
							// If strEti4 != ''
							// Set strEti5 = strEti4 || ' ' || strEti5
							App.frmInvent.strBrief = App.frmInvent.strBrief + @"


Bitte bringen Sie diese an den entsprechenden Artikeln möglichst so an, daß sie in normaler Bedienposition zu sehen sind.

Vielen Dank !";
							// 06.08.08
							if (Var.bfrmBriefVari) 
							{
								while (!(App.frmBriefVari.DestroyWindow())) 
								{
								}
							}

							// 06.08.18 Ä1763 TRUE -> FALSE
							frmBriefVari.CreateWindow(Sys.hWndForm, App.frmInvent.tblIVk.colArztNr.Number, 0, 0, "", App.frmInvent.strBrief, SalDateTime.Current, App.frmInvent.strEti1, App.frmInvent.strEti2, App.frmInvent.strEti3, App.frmInvent.strEti4, App.frmInvent.strEti5, 
								false);
							Sal.MessageBox("Ok wenn gedruckt", "Druck Ok?", Sys.MB_Ok);
						}
					}
					return 0;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Brief_1_MenuActions()
				{
					Sal.TblKillEdit(App.frmInvent.tblIVp);
					App.frmInvent.strBrief = @"Sehr geehrte Damen und Herren,

für die Ihnen gelieferten Artikel erhalten Sie anbei unsere Inventaraufkleber:
";
					if (Sal.TblAnyRows(App.frmInvent.tblIVp, Sys.ROW_Selected, 0)) 
					{
						App.frmInvent.nRowP = Sys.TBL_MinRow;
						while (true)
						{

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalNumber temp1 = App.frmInvent.nRowP;
							SalBoolean temp2 = Sal.TblFindNextRow(App.frmInvent.tblIVp, ref temp1, Sys.ROW_Selected, 0);
							App.frmInvent.nRowP = temp1;

							if (!(temp2)) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmInvent.tblIVp, App.frmInvent.nRowP);
							if (App.frmInvent.tblIVp.colInvNr.Number == Sys.NUMBER_Null) 
							{
								Int.SqlImmedSel("SELECT MAX(ipinvnr) INTO :frmInvent.tblIVp.colInvNr FROM ip");
								App.frmInvent.tblIVp.colInvNr.Number = App.frmInvent.tblIVp.colInvNr.Number + 1;
								Int.SqlImmed("UPDATE ip SET ipinvnr = :frmInvent.tblIVp.colInvNr WHERE ipnr = :frmInvent.tblIVp.colNr AND ippos = :frmInvent.tblIVp.colPos");
								Sal.TblSetRowFlags(App.frmInvent.tblIVp, App.frmInvent.nRowP, Sys.ROW_Edited, true);
							}
							// 07.05.12 Ä757
							if (Var.bfrmDYMODruck) 
							{
								while (!(App.frmDYMODruck.DestroyWindow())) 
								{
								}
							}
							frmDYMODruck.CreateWindow(Sys.hWndForm, App.frmInvent.tblIVp.colBez.Text + @"
Seriennr. " + App.frmInvent.tblIVp.colSerienNr.Text + @"
Inventarnr. " + Sal.NumberToStrX(App.frmInvent.tblIVp.colInvNr.Number, 0), "frmEDA");
							// Set frmInvent.strEti1 = 'TVN-Eigentum seit ' || SalDateToStrX( frmInvent.tblIVk.colRechDat )
							// Set frmInvent.strEti2 = 'Inventar-Nr. -' || SalNumberToStrX(frmInvent.tblIVp.colInvNr,0) || '-'
							App.frmInvent.strBrief = App.frmInvent.strBrief + @"
Inventar-Nr. " + Int.PalStrNullen(Sal.NumberToStrX(App.frmInvent.tblIVp.colInvNr.Number, 0), 6) + " " + Int.PalLF(App.frmInvent.tblIVp.colBez.Text, 30);
							if (App.frmInvent.tblIVp.colSerienNr.Text != "") 
							{
								// Set frmInvent.strEti3 = 'Serien-Nr.   ' || frmInvent.tblIVp.colSerienNr
								App.frmInvent.strBrief = App.frmInvent.strBrief + "(Serien-Nr." + App.frmInvent.tblIVp.colSerienNr.Text + ")";
							}
							// Else
							// Set frmInvent.strEti3 = ''
							// Set frmInvent.strEti4 = SalStrLeftX(frmInvent.tblIVp.colBez, 30)
							// Call SqlImmed('INSERT INTO ed (edn1,edn2,eds,edo) VALUES( :frmInvent.strEti1, :frmInvent.strEti2, :frmInvent.strEti3, :frmInvent.strEti4 )')
						}
						if (Int.SqlImmedSel(@"
SELECT aname1, aname2, astr, aort
FROM a
INTO :frmInvent.strEti1, :frmInvent.strEti2, :frmInvent.strEti3, :frmInvent.strEti4
WHERE aarztnr = :frmInvent.tblIVk.colArztNr")) 
						{
							App.frmInvent.strBrief = App.frmInvent.strBrief + @"


Bitte bringen Sie diese an den entsprechenden Artikeln möglichst so an, daß sie in normaler Bedienposition zu sehen sind.

Vielen Dank !";
							// 06.08.08
							if (Var.bfrmBriefVari) 
							{
								while (!(App.frmBriefVari.DestroyWindow())) 
								{
								}
							}

							// 06.08.18 Ä1763 TRUE -> FALSE
							frmBriefVari.CreateWindow(Sys.hWndForm, App.frmInvent.tblIVk.colArztNr.Number, 0, 0, "", App.frmInvent.strBrief, SalDateTime.Current, "", App.frmInvent.strEti1, App.frmInvent.strEti2, App.frmInvent.strEti3, App.frmInvent.strEti4, false);
							Sal.MessageBox("Ok wenn gedruckt", "Druck Ok?", Sys.MB_Ok);
						}
					}
					return 0;
				}
			}
			
			/// <summary>
			/// </summary>
			public class frmBenutzerRightClick : SalPopupMenu
			{
				private SalMenuItem menuItem_Kennwort;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_Kennwort = new SalMenuItem();
					// 
					// frmBenutzerRightClick
					// 
					this.Text = "";
					this.MenuItems.Add(this.menuItem_Kennwort);
					// 
					// menuItem_Kennwort
					// 
					this.menuItem_Kennwort.Text = "Kennwort zurücksetzen";
					this.menuItem_Kennwort.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Kennwort_MenuActions);
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Kennwort_MenuActions()
				{
					Sal.TblKillEdit(App.frmBenutzer.tblBenutzer);
					if (Sal.TblAnyRows(App.frmBenutzer.tblBenutzer, Sys.ROW_Selected, 0)) 
					{
						App.frmBenutzer.nRow = Sys.TBL_MinRow;
						while (true)
						{

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalNumber temp1 = App.frmBenutzer.nRow;
							SalBoolean temp2 = Sal.TblFindNextRow(App.frmBenutzer.tblBenutzer, ref temp1, Sys.ROW_Selected, 0);
							App.frmBenutzer.nRow = temp1;

							if (!(temp2)) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmBenutzer.tblBenutzer, App.frmBenutzer.nRow);
							App.frmBenutzer.tblBenutzer.colPW.Text = Int.PalDateToStrJJJJMMTThhmmss(SalDateTime.Current);
							Sal.TblSetRowFlags(App.frmBenutzer.tblBenutzer, App.frmBenutzer.nRow, Sys.ROW_Edited, true);
							Int.PalLog("Paßwort zurückgesetzt");
							// If frmBenutzer.tblBenutzer.colEMail != ''
							// Call SalWaitCursor(TRUE)
							// Call mail.SetSMTPServer('10.0.0.246')
							// Call mail.SetFrom('noreply@moveta.de')
							// Call mail.SetTo(frmBenutzer.tblBenutzer.colEMail)
							// Call mail.SetCC('')
							// Call mail.SetBCC('')
							// Call mail.SetSubject('WICHTIG: Ihr TVN-Paßwort wurde zurückgesetzt.')
							// Call mail.SetData('Sehr geehrte Mitarbeiterin, sehr geehrter Mitarbeiter,
							// 
							// Ihr Kennwort im TVN-Programm wurde soeben zurückgesetzt auf einen Zufallswert.
							// 
							// Verwenden Sie beim nächsten Anmelden bitte das Paßwort ' || frmBenutzer.tblBenutzer.colPW || '.
							// Ändern Sie bitte nach dem Anmelden sofort unter -Stammdaten- Ihr Kennwort.
							// 
							// Vielen Dank!
							// 
							// 
							// Ihre
							// 
							// 
							// Tierärztliche Verrechnungsstelle Niedersachsen
							// 
							// 
							// 
							// (Diese E-mail wurde automatisch erstellt)')
							// Call mail.SetDataHtml('')
							// Set frmBenutzer.bOk = mail.Send()
							// Call SalWaitCursor(FALSE)
							// If frmBenutzer.bOk
							// Call SalMessageBox('Eine Bestätigungs-E-Mail an ' || frmBenutzer.tblBenutzer.colEMail || ' wurde erfolgreich versandt.', 'Senden: Ok', MB_IconAsterisk | MB_Ok)
							// Else
							// Call SalMessageBox( 'E-Mail-Sendefehler: ' || SalNumberToStrX(mail.i_nLastError, 0), 'Sendefehler', MB_IconExclamation | MB_Ok)
						}
					}
					return 0;
				}
			}
			
			/// <summary>
			/// Menu: frmTAPIRightClick
			/// Title: (untitled)
			/// Description:
			/// Enabled when:
			/// Status Text:
			/// Menu Item Name:
			/// Menu Item: Skype
			/// Keyboard Accelerator: (none)
			/// Status Text:
			/// Menu Settings
			/// Enabled when:
			/// Checked when:
			/// Menu Actions
			/// Set strDummy = (frmTAPIDial.tblNummern.colsRufnummer)
			/// Set strDummy1 = ''
			/// Set nTemp = SalStrLength(frmTAPIDial.tblNummern.colsRufnummer)
			/// Set nCount = 0
			/// While nCount < nTemp
			/// If SalStrToNumber(SalStrMidX(frmTAPIDial.tblNummern.colsRufnummer, nCount, 1)) >=0
			/// Set strDummy1 = strDummy1 || SalStrMidX(frmTAPIDial.tblNummern.colsRufnummer, nCount, 1)
			/// Set nCount = nCount  + 1
			/// If SalStrLeftX(strDummy1,1) != '+' And SalStrLeftX(strDummy1,2) != '00'
			/// If SalStrLeftX(strDummy1,1) = '0'
			/// Set strDummy1 = SalStrMidX(strDummy1,1,255)
			/// Set strDummy1 = '+49' || strDummy1
			/// Call ShellExecuteA( hWndForm, 'open', "skype:" || strDummy1, STRING_Null, STRING_Null, 1)
			/// Call ShellExecuteA( hWndForm, 'open', "callto://tvn-martin/", STRING_Null, STRING_Null, 1)
			/// Menu Item Name:
			/// </summary>
			public class frmAbrBearbPosiRightClick : SalPopupMenu
			{
				private SalMenuItem menuItem_Diese;
				private SalMenuItem menuItem_Diese_1;
				private SalMenuSeparator menuSeparator1;
				private SalMenuItem menuItem_Für;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_Diese = new SalMenuItem();
					this.menuItem_Diese_1 = new SalMenuItem();
					this.menuSeparator1 = new SalMenuSeparator();
					this.menuItem_Für = new SalMenuItem();
					// 
					// frmAbrBearbPosiRightClick
					// 
					this.Text = "";
					this.MenuItems.Add(this.menuItem_Diese);
					this.MenuItems.Add(this.menuItem_Diese_1);
					this.MenuItems.Add(this.menuSeparator1);
					this.MenuItems.Add(this.menuItem_Für);
					// 
					// menuItem_Diese
					// 
					this.menuItem_Diese.Text = "Diese Positionen isolieren";
					this.menuItem_Diese.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem_Diese_EnabledWhen);
					this.menuItem_Diese.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Diese_MenuActions);
					// 
					// menuItem_Diese_1
					// 
					this.menuItem_Diese_1.Text = "Diese Positionen löschen";
					this.menuItem_Diese_1.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem_Diese_1_EnabledWhen);
					this.menuItem_Diese_1.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Diese_1_MenuActions);
					// 
					// menuItem_Für
					// 
					this.menuItem_Für.Text = "Für diese Positionen M anschreiben, ob Voraussetzungen für MwSt-Freiheit vorliegen";
					this.menuItem_Für.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem_Für_EnabledWhen);
					this.menuItem_Für.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Für_MenuActions);
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_Diese_EnabledWhen()
				{
					return App.frmAbrBearb.tblAbrHalter.colnRechNr.Number == Sys.NUMBER_Null;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Diese_MenuActions()
				{
					if (Sal.TblAnyRows(App.frmAbrBearb.tblAbrPosi, Sys.ROW_Selected, 0)) 
					{
						Sal.WaitCursor(true);
						// 02.01.18 F3063
						App.frmAbrBearb.nPosOffset = 1000000 + SalDateTime.Current.Hour() * 10000 + SalDateTime.Current.Minute() * 100 + SalDateTime.Current.Second();

						Var.nRow = Sys.TBL_MinRow;
						// Set frmAbrBearb.dtNeu = SalDateCurrent()
						Int.SqlImmed(@"INSERT INTO le (LEBEARBEITER, LEARZTNR, LEHALTERNR,	 LEPOSNR, LENAME1, LENAME2, LESTR, LEORT, LEKENNUNGTA, LEBEARBDATUM, LEMANDISK, LERECHNR, LERECHDAT, LEMATCH,
LEFAELLDAT,
LEMZF, LEZEILE1, LEZEILE2, LEBRUTTO, LEHERFDAT, LESTATUS, LETI, LEVN, LENN, LEBARCODE, LEGUID,
LEHTEL, LEHTEL2, LEHTELHANDY, LEHTELFAX, LEHEMAIL )
SELECT LEBEARBEITER, LEARZTNR, LEHALTERNR,
LEPOSNR+ :frmAbrBearb.nPosOffset, LENAME1, LENAME2, LESTR, LEORT, LEKENNUNGTA, LEBEARBDATUM,
LEMANDISK, LERECHNR, LERECHDAT, LEMATCH, LEFAELLDAT,
LEMZF, LEZEILE1, LEZEILE2, LEBRUTTO, LEHERFDAT, LESTATUS, LETI, LEVN, LENN, LEBARCODE, LEGUID,
LEHTEL, LEHTEL2, LEHTELHANDY, LEHTELFAX, LEHEMAIL FROM le
WHERE lebearbeiter = :frmAbrBearb.tblAbrHalter.colsBearbeiter AND lebearbdatum = :frmAbrBearb.tblAbrHalter.coldtBearbDatum AND leposnr = :frmAbrBearb.tblAbrHalter.colnPosNr
AND learztnr = :frmAbrBearb.tblAbrHalter.colnArztNr AND lehalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr");
						while (true)
						{
							if (!(Sal.TblFindNextRow(App.frmAbrBearb.tblAbrPosi, ref Var.nRow, Sys.ROW_Selected, 0))) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmAbrBearb.tblAbrPosi, Var.nRow);
							Int.SqlImmed(@"UPDATE lep SET lepposnr=lepposnr+:frmAbrBearb.nPosOffset
WHERE lepbearbeiter = :frmAbrBearb.tblAbrHalter.colsBearbeiter AND lebearbdatum = :frmAbrBearb.tblAbrHalter.coldtBearbDatum AND lepposnr =
:frmAbrBearb.tblAbrHalter.colnPosNr AND leparztnr = :frmAbrBearb.tblAbrHalter.colnArztNr AND lephalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr
AND ROWID = :frmAbrBearb.tblAbrPosi.colsROWID ");
						}
						App.frmAbrBearb.PalPopulate(App.frmAbrBearb.strSelect);

						Sal.WaitCursor(false);
					}
					return 0;
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_Diese_1_EnabledWhen()
				{
					return App.frmAbrBearb.tblAbrHalter.colnRechNr.Number == Sys.NUMBER_Null;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Diese_1_MenuActions()
				{
					if (Sal.TblAnyRows(App.frmAbrBearb.tblAbrPosi, Sys.ROW_Selected, 0)) 
					{
						Sal.WaitCursor(true);

						Var.nRow = Sys.TBL_MinRow;
						while (true)
						{
							if (!(Sal.TblFindNextRow(App.frmAbrBearb.tblAbrPosi, ref Var.nRow, Sys.ROW_Selected, 0))) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmAbrBearb.tblAbrPosi, Var.nRow);
							Int.SqlImmed(@"DELETE FROM lep
WHERE lepbearbeiter = :frmAbrBearb.tblAbrHalter.colsBearbeiter AND lebearbdatum = :frmAbrBearb.tblAbrHalter.coldtBearbDatum AND lepposnr =
:frmAbrBearb.tblAbrHalter.colnPosNr AND leparztnr = :frmAbrBearb.tblAbrHalter.colnArztNr AND lephalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr
AND ROWID = :frmAbrBearb.tblAbrPosi.colsROWID ");
						}
						App.frmAbrBearb.PalPopulate(App.frmAbrBearb.strSelect);

						Sal.WaitCursor(false);
					}
					return 0;
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_Für_EnabledWhen()
				{
					return App.frmAbrBearb.tblAbrHalter.colnRechNr.Number == Sys.NUMBER_Null;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Für_MenuActions()
				{
					// 27.11.14
					if (App.frmAbrBearb.tblAbrHalter.colnArztNr.Number > 0 && App.frmAbrBearb.tblAbrHalter.colnHalterNr.Number > 0) 
					{
						Int.SqlImmedSel(@"SELECT hti, hvn, hnn, hname2, hstr, hort, hland
INTO :frmMain.strTHTi, :frmMain.strTHVN, :frmMain.strTHNN, :frmMain.strTHN2, :frmMain.strTHStr, :frmMain.strTHOrt, :frmMain.strTHLand
FROM h
WHERE harztnr=:frmAbrBearb.tblAbrHalter.colnArztNr
AND hhalternr=:frmAbrBearb.tblAbrHalter.colnHalterNr AND hdeaktiv IS NULL");
					}
					else
					{
						App.frmMain.strTHTi = App.frmAbrBearb.tblAbrHalter.colsTi.Text;
						App.frmMain.strTHVN = App.frmAbrBearb.tblAbrHalter.colsVN.Text;
						App.frmMain.strTHNN = App.frmAbrBearb.tblAbrHalter.colsNN.Text;
						App.frmMain.strTHStr = App.frmAbrBearb.tblAbrHalter.colsStr.Text;
						App.frmMain.strTHOrt = App.frmAbrBearb.tblAbrHalter.colsOrt.Text;
						App.frmMain.strTHN2 = App.frmAbrBearb.tblAbrHalter.colsName2.Text;
					}

					dlgLlDruck.ModalDialog(App.frmMain, "BriefM-MwSt-0.lst", "");
					return 0;
				}
			}
			
			/// <summary>
			/// </summary>
			public class frmVETAemterRightClick : SalPopupMenu
			{
				private SalMenuItem menuItem_Adressetiketten;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_Adressetiketten = new SalMenuItem();
					// 
					// frmVETAemterRightClick
					// 
					this.Text = "Kontextmenü";
					this.MenuItems.Add(this.menuItem_Adressetiketten);
					// 
					// menuItem_Adressetiketten
					// 
					this.menuItem_Adressetiketten.Text = "Adressetiketten drucken";
					this.menuItem_Adressetiketten.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Adressetiketten_MenuActions);
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Adressetiketten_MenuActions()
				{
					Sal.TblKillEdit(App.frmVETAemter.tblVA);
					if (Sal.TblAnyRows(App.frmVETAemter.tblVA, Sys.ROW_Selected, 0)) 
					{
						App.frmVETAemter.nRow = Sys.TBL_MinRow;
						while (true)
						{

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalNumber temp1 = App.frmVETAemter.nRow;
							SalBoolean temp2 = Sal.TblFindNextRow(App.frmVETAemter.tblVA, ref temp1, Sys.ROW_Selected, 0);
							App.frmVETAemter.nRow = temp1;

							if (!(temp2)) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmVETAemter.tblVA, App.frmVETAemter.nRow);

							App.frmVETAemter.lsDummy = "";
							if (App.frmVETAemter.tblVA.colN1.Text != "") 
							{
								App.frmVETAemter.lsDummy = App.frmVETAemter.lsDummy + App.frmVETAemter.tblVA.colN1.Text + " (" + App.frmVETAemter.tblVA.colCode.Text + @")
";
							}
							if (App.frmVETAemter.tblVA.colN2.Text != "") 
							{
								App.frmVETAemter.lsDummy = App.frmVETAemter.lsDummy + App.frmVETAemter.tblVA.colN2.Text + @"
";
							}
							if (App.frmVETAemter.tblVA.colS.Text != "") 
							{
								App.frmVETAemter.lsDummy = App.frmVETAemter.lsDummy + App.frmVETAemter.tblVA.colS.Text + @"
";
							}
							if (App.frmVETAemter.tblVA.colO.Text != "") 
							{
								App.frmVETAemter.lsDummy = App.frmVETAemter.lsDummy + App.frmVETAemter.tblVA.colO.Text + @"
";
							}

							if (Var.bfrmDYMODruck) 
							{
								while (!(App.frmDYMODruck.DestroyWindow())) 
								{
								}
							}
							frmDYMODruck.CreateWindow(Sys.hWndForm, App.frmVETAemter.lsDummy, "");
						}
					}
					return 0;
				}
			}
			
			/// <summary>
			/// </summary>
			public class frmRRRightClick : SalPopupMenu
			{
				private SalMenuItem menuItem_eskalieren;
				private SalMenuItem menuItem_deeskalieren;
				private SalMenuItem menuItem_übernommen;
				private SalMenuItem menuItem_erledigt;
				private SalMenuItem menuItem_wieder;
				private SalMenuSeparator menuSeparator2;
				private SalMenuItem menuItem_SupportLog;
				private SalMenuSeparator menuSeparator3;
				private SalMenuItem menuItem_Mail;
				private SalMenuItem menuItem_nicht;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_eskalieren = new SalMenuItem();
					this.menuItem_deeskalieren = new SalMenuItem();
					this.menuItem_übernommen = new SalMenuItem();
					this.menuItem_erledigt = new SalMenuItem();
					this.menuItem_wieder = new SalMenuItem();
					this.menuSeparator2 = new SalMenuSeparator();
					this.menuItem_SupportLog = new SalMenuItem();
					this.menuSeparator3 = new SalMenuSeparator();
					this.menuItem_Mail = new SalMenuItem();
					this.menuItem_nicht = new SalMenuItem();
					// 
					// frmRRRightClick
					// 
					this.Text = "Kontextmenü";
					this.MenuItems.Add(this.menuItem_eskalieren);
					this.MenuItems.Add(this.menuItem_deeskalieren);
					this.MenuItems.Add(this.menuItem_übernommen);
					this.MenuItems.Add(this.menuItem_erledigt);
					this.MenuItems.Add(this.menuItem_wieder);
					this.MenuItems.Add(this.menuSeparator2);
					this.MenuItems.Add(this.menuItem_SupportLog);
					this.MenuItems.Add(this.menuSeparator3);
					this.MenuItems.Add(this.menuItem_Mail);
					this.MenuItems.Add(this.menuItem_nicht);
					// 
					// menuItem_eskalieren
					// 
					this.menuItem_eskalieren.Text = "eskalieren";
					this.menuItem_eskalieren.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_eskalieren_MenuActions);
					// 
					// menuItem_deeskalieren
					// 
					this.menuItem_deeskalieren.Text = "de-eskalieren";
					this.menuItem_deeskalieren.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_deeskalieren_MenuActions);
					// 
					// menuItem_übernommen
					// 
					this.menuItem_übernommen.Text = "übernommen";
					this.menuItem_übernommen.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_übernommen_MenuActions);
					// 
					// menuItem_erledigt
					// 
					this.menuItem_erledigt.Text = "erledigt";
					this.menuItem_erledigt.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_erledigt_MenuActions);
					// 
					// menuItem_wieder
					// 
					this.menuItem_wieder.Text = "wieder öffnen";
					this.menuItem_wieder.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_wieder_MenuActions);
					// 
					// menuItem_SupportLog
					// 
					this.menuItem_SupportLog.Text = "Support-Log";
					this.menuItem_SupportLog.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_SupportLog_MenuActions);
					// 
					// menuItem_Mail
					// 
					this.menuItem_Mail.Text = "Mail senden wegen Nichterreichbarkeit";
					this.menuItem_Mail.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Mail_MenuActions);
					// 
					// menuItem_nicht
					// 
					this.menuItem_nicht.Text = "nicht erreicht";
					this.menuItem_nicht.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_nicht_MenuActions);
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_eskalieren_MenuActions()
				{
					Int.SqlImmed("UPDATE rr SET  rrlevel = 1 WHERE rrdatum = :frmRR.gridRR.colDatum AND rrlevel IS NULL");
					Int.SqlImmed("UPDATE rr SET  rrlevel = rrlevel + 1 WHERE rrdatum = :frmRR.gridRR.colDatum");

					App.frmRR.PalPopulate("");
					return 0;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_deeskalieren_MenuActions()
				{
					// 09.02.16 Ä1326
					Int.SqlImmed("UPDATE rr SET  rrlevel = rrlevel - 1 WHERE rrdatum = :frmRR.gridRR.colDatum");
					Int.SqlImmed("UPDATE rr SET  rrlevel = 1 WHERE rrdatum = :frmRR.gridRR.colDatum AND rrlevel = 0");

					App.frmRR.PalPopulate("");
					return 0;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_übernommen_MenuActions()
				{
					Int.SqlImmed("UPDATE rr SET  rrerluser = :strBNZei WHERE rrdatum = :frmRR.gridRR.colDatum");
					// 07.02.14 Ä1023
					// If strBNUser = 'DAERR'
					// Call SalFileOpen( hFile, 'F:\\Allgemein\\~DA.txt', OF_Create )
					// Call SalFileClose( hFile )
					// Else If strBNUser = 'KEUER'
					// Call SalFileOpen( hFile, 'F:\\Allgemein\\~KE.txt', OF_Create )
					// Call SalFileClose( hFile )
					// 04.12.17 Ä1392
					Int.SqlIstDa("FROM aa WHERE aaarztnr= :frmRR.gridRR.colArztNr AND aaname = :frmRR.gridRR.colName", ref Var.bExists);
					if (Var.bExists) 
					{
						Int.SqlImmed("UPDATE aa SET aarufnr = :frmRR.gridRR.colRufNr WHERE aaarztnr= :frmRR.gridRR.colArztNr AND aaname = :frmRR.gridRR.colName");
					}
					else
					{
						Int.SqlImmed("INSERT INTO aa (aaarztnr, aaname, aarufnr) VALUES( :frmRR.gridRR.colArztNr, :frmRR.gridRR.colName, :frmRR.gridRR.colRufNr )");
					}

					App.frmRR.PalPopulate("");
					return 0;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_erledigt_MenuActions()
				{
					Int.SqlImmed("UPDATE rr SET rrerldat = SYSDATETIME, rrerluser = :strBNZei WHERE rrdatum = :frmRR.gridRR.colDatum");
					// 07.02.14 Ä1023
					// If strBNUser = 'DAERR'
					// Call SalFileOpen( hFile, 'F:\\Allgemein\\~DA.txt', OF_Delete )
					// Else If strBNUser = 'KEUER'
					// Call SalFileOpen( hFile, 'F:\\Allgemein\\~KE.txt', OF_Delete )
					// 04.12.17 Ä1392
					Int.SqlIstDa("FROM aa WHERE aaarztnr= :frmRR.gridRR.colArztNr AND aaname = :frmRR.gridRR.colName", ref Var.bExists);
					if (Var.bExists) 
					{
						Int.SqlImmed("UPDATE aa SET aarufnr = :frmRR.gridRR.colRufNr WHERE aaarztnr= :frmRR.gridRR.colArztNr AND aaname = :frmRR.gridRR.colName");
					}
					else
					{
						Int.SqlImmed("INSERT INTO aa (aaarztnr, aaname, aarufnr) VALUES( :frmRR.gridRR.colArztNr, :frmRR.gridRR.colName, :frmRR.gridRR.colRufNr )");
					}

					if (Var.bfrmSupportLog) 
					{
						while (!(App.frmSupportLog.DestroyWindow())) 
						{
						}
					}
					frmSupportLog.CreateWindow(Sys.hWndForm, App.frmRR.gridRR.colDatum.DateTime, App.frmRR.gridRR.colArztNr.Number, App.frmRR.gridRR.colName.Text, 1);

					App.frmRR.PalPopulate("");
					return 0;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_wieder_MenuActions()
				{
					// 09.02.16 Ä1326
					Int.SqlImmed("UPDATE rr SET rrerldat = NULL, rrerluser = NULL WHERE rrdatum = :frmRR.gridRR.colDatum");

					App.frmRR.PalPopulate("");
					return 0;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_SupportLog_MenuActions()
				{
					frmSupportLog.CreateWindow(Sys.hWndForm, App.frmRR.gridRR.colDatum.DateTime, App.frmRR.gridRR.colArztNr.Number, App.frmRR.gridRR.colName.Text, 0);
					return 0;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Mail_MenuActions()
				{
					Sal.WaitCursor(true);

					Int.SqlImmedSel("SELECT aemail INTO :frmRR.strMail FROM a WHERE aarztnr = :frmRR.gridRR.colArztNr");
					if (App.frmRR.strMail == "") 
					{
						Sal.MessageBox("Es ist keine Mailadresse für dieses Mitglied hinterlegt.", "Achtung", (Sys.MB_Ok | Sys.MB_IconExclamation));
					}
					else
					{
						Int.PalMailInit();
						App.frmRR.lsBody = @"Sehr geehrtes Mitglied,

Ihr Rückrufwunsch ist hier eingegangen, wir haben Sie jedoch nicht erreicht.
Bitte melden Sie sich erneut bei uns, wenn Sie telefonisch erreichbar sind.

Vielen Dank für Ihr Verständnis.

Mit freundlichen Grüßen,

" + Var.strBNName + @"
moveta r.V.k.V.

Danziger Straße 1
31008 Elze
Telefon (0 50 68) 93 07-" + Var.strBNTel + @"
Telefax (0 50 68) 93 07-80
E-mail " + Var.strBNEMail + @"
Web www.moveta.de

Sparkasse Hildesheim · IBAN: DE13 2595 0130 0007 0065 73 · BIC: NOLADE21HIK";
						Int.PalLogToFile("OSendMail", 0);
						// 29.07.14 F2003 'noreply@tvn-online.de' -> strBNEmail
						// 30.10.20 Ä1911
						// If 0 = oOutgoingMail.SendMail( MAIL_FORMAT_PLAIN_TEXT, 'Ihre Abrechnung', strBNEMail, dfEMail, STRING_Null, lsBody, STRING_Null, FALSE, MAIL_PRIORITY_NORMAL )
						// Set lsBody = 'E-Mail an ' || dfEMail || '
						// ' || lsBody
						// Call SqlImmed( 'INSERT INTO z (zarztnr, zhalternr, zart, zvon, zan, zbemerk,zdatum, zerledigt) VALUES( :frmTVSNrLw.nArztNr, 0, \'BR\', :strBNZei, \'*\', :frmTVSNrLw.lsBody, SYSDATE, \'J\')'  )
						// Call SqlImmed('UPDATE le SET lestatus=\'TVSNr\'
						// WHERE learztnr IN (:frmTVSNrLw.nArztNr, :frmTVSNrLw.nArztNr2)
						// AND lebearbeiter=:frmTVSNrLw.strBearbeiter
						// AND lebearbdatum=:frmTVSNrLw.dtBearbDatum ')
						// Call SalWaitCursor( FALSE )
						// Call SalMessageBox('Die E-Mail wurde erfolgreich versandt.', 'Ok',MB_Ok)

						// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
						SalString temp1 = App.frmRR.strDummy;
						SalNumber temp2 = Int.SendeMail(Const.MAIL_FORMAT_PLAIN_TEXT, "Ihr Rückrufwunsch", Var.strBNEMail, App.frmRR.strMail, App.frmRR.lsBody, SalString.Null, Const.MAIL_PRIORITY_NORMAL, ref temp1, "", Var.strBNName);
						App.frmRR.strDummy = temp1;

						if (0 == temp2) 
						{
							Sal.MessageBox("Folgende Mail wurde an " + App.frmRR.strMail + @" gesendet:

" + App.frmRR.lsBody, "Mail gesendet", (Sys.MB_Ok | Sys.MB_IconAsterisk));
						}
						else
						{
							Sal.WaitCursor(false);
							Sal.MessageBox("Die E-Mail konnte nicht versandt werden.", "Fehler: " + App.frmRR.strDummy, Sys.MB_Ok);
						}
						Int.PalMailClose();

						Int.SqlImmed("UPDATE rr SET rrerldat = SYSDATETIME, rrerluser = :strBNZei WHERE rrdatum = :frmRR.gridRR.colDatum");
						App.frmRR.PalPopulate("");
					}
					return 0;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_nicht_MenuActions()
				{
					Sal.WaitCursor(true);

					App.frmRR.gridRR.colBemerk.Text = App.frmRR.gridRR.colBemerk.Text + @"
" + Int.PalDateToStrhhmmss(SalDateTime.Current).Left(5) + " " + Var.strBNZei + ": nicht erreicht";
					Int.SqlImmed("UPDATE rr SET  rrbemerk = :frmRR.gridRR.colBemerk WHERE rrdatum = :frmRR.gridRR.colDatum");
					App.frmRR.PalPopulate("");
					Sal.WaitCursor(false);
					return 0;
				}
			}
			
			/// <summary>
			/// </summary>
			public class frmEERightClick : SalPopupMenu
			{
				private SalMenuItem menuItem_Infobild;
				private SalMenuItem menuItem_als;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_Infobild = new SalMenuItem();
					this.menuItem_als = new SalMenuItem();
					// 
					// frmEERightClick
					// 
					this.Text = "Kontextmenü";
					this.MenuItems.Add(this.menuItem_Infobild);
					this.MenuItems.Add(this.menuItem_als);
					// 
					// menuItem_Infobild
					// 
					this.menuItem_Infobild.Text = "Infobild anzeigen";
					this.menuItem_Infobild.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Infobild_MenuActions);
					// 
					// menuItem_als
					// 
					this.menuItem_als.Text = "als Erledigt markieren";
					this.menuItem_als.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_als_MenuActions);
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Infobild_MenuActions()
				{
					App.frmRgSuchen.PalFuelle(App.frmEE.tblEE.colnArztNr.Number, App.frmEE.tblEE.colnHalterNr.Number, 0);
					return 0;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_als_MenuActions()
				{
					Int.SqlImmed("UPDATE ee SET eeerldatum = SYSDATETIME WHERE eearztnr = :frmEE.tblEE.colnArztNr AND eehalternr = :frmEE.tblEE.colnHalterNr");
					App.frmEE.tblEE.colnErl.Number = 1;
					return 0;
				}
			}
			
			/// <summary>
			/// </summary>
			public class frmUeberwRightClick : SalPopupMenu
			{
				private SalMenuItem menuItem_Markierte;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_Markierte = new SalMenuItem();
					// 
					// frmUeberwRightClick
					// 
					this.Text = "Kontextmenü";
					this.MenuItems.Add(this.menuItem_Markierte);
					// 
					// menuItem_Markierte
					// 
					this.menuItem_Markierte.Text = "Markierte löschen";
					this.menuItem_Markierte.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Markierte_MenuActions);
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Markierte_MenuActions()
				{
					Sal.TblKillEdit(App.frmUeberw.tblSuch);
					if (Sal.TblAnyRows(App.frmUeberw.tblSuch, Sys.ROW_Selected, 0)) 
					{
						App.frmUeberw.nRow = Sys.TBL_MinRow;
						while (true)
						{

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalNumber temp1 = App.frmUeberw.nRow;
							SalBoolean temp2 = Sal.TblFindNextRow(App.frmUeberw.tblSuch, ref temp1, Sys.ROW_Selected, 0);
							App.frmUeberw.nRow = temp1;

							if (!(temp2)) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmUeberw.tblSuch, App.frmUeberw.nRow);
							Int.SqlImmed("DELETE FROM uee WHERE ROWID = :frmUeberw.tblSuch.colROWID");
							Int.PalLog("UEEmpf gelöscht: " + App.frmUeberw.tblSuch.colEmpf.Text);
						}
					}
					App.frmUeberw.DropDownEmpf(1, 65);
					return 0;
				}
			}
			
			/// <summary>
			/// </summary>
			public class frmAbrBearbRightClick : SalPopupMenu
			{
				private SalMenuItem menuItem_Diesen;
				private SalMenuItem menuItem_Diesen_1;
				private SalMenuSeparator menuSeparator4;
				private SalMenuItem menuItem_Diesen_2;
				private SalMenuSeparator menuSeparator5;
				private SalMenuItem menuItem_Unternehmer;
				private SalMenuItem menuItem_kein;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_Diesen = new SalMenuItem();
					this.menuItem_Diesen_1 = new SalMenuItem();
					this.menuSeparator4 = new SalMenuSeparator();
					this.menuItem_Diesen_2 = new SalMenuItem();
					this.menuSeparator5 = new SalMenuSeparator();
					this.menuItem_Unternehmer = new SalMenuItem();
					this.menuItem_kein = new SalMenuItem();
					// 
					// frmAbrBearbRightClick
					// 
					this.Text = "KontexMenue";
					this.MenuItems.Add(this.menuItem_Diesen);
					this.MenuItems.Add(this.menuItem_Diesen_1);
					this.MenuItems.Add(this.menuSeparator4);
					this.MenuItems.Add(this.menuItem_Diesen_2);
					this.MenuItems.Add(this.menuSeparator5);
					this.MenuItems.Add(this.menuItem_Unternehmer);
					this.MenuItems.Add(this.menuItem_kein);
					// 
					// menuItem_Diesen
					// 
					this.menuItem_Diesen.Text = "Diese(n) Kunden isolieren";
					this.menuItem_Diesen.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem_Diesen_EnabledWhen);
					this.menuItem_Diesen.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Diesen_MenuActions);
					// 
					// menuItem_Diesen_1
					// 
					this.menuItem_Diesen_1.Text = "Diese(n) Kunden zurückstellen";
					this.menuItem_Diesen_1.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem_Diesen_1_EnabledWhen);
					this.menuItem_Diesen_1.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Diesen_1_MenuActions);
					// 
					// menuItem_Diesen_2
					// 
					this.menuItem_Diesen_2.Text = "Diese(n) Kunden löschen";
					this.menuItem_Diesen_2.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem_Diesen_2_EnabledWhen);
					this.menuItem_Diesen_2.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Diesen_2_MenuActions);
					// 
					// menuItem_Unternehmer
					// 
					this.menuItem_Unternehmer.Text = "Unternehmer im Ausland";
					this.menuItem_Unternehmer.CheckedWhen += new PPJ.Runtime.Windows.SalMenuCheckedWhenHandler(this.menuItem_Unternehmer_CheckedWhen);
					this.menuItem_Unternehmer.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem_Unternehmer_EnabledWhen);
					this.menuItem_Unternehmer.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Unternehmer_MenuActions);
					// 
					// menuItem_kein
					// 
					this.menuItem_kein.Text = "kein Unternehmer im Ausland";
					this.menuItem_kein.CheckedWhen += new PPJ.Runtime.Windows.SalMenuCheckedWhenHandler(this.menuItem_kein_CheckedWhen);
					this.menuItem_kein.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem_kein_EnabledWhen);
					this.menuItem_kein.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_kein_MenuActions);
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_Diesen_EnabledWhen()
				{
					return App.frmAbrBearb.tblAbrHalter.colnRechNr.Number == Sys.NUMBER_Null;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Diesen_MenuActions()
				{
					if (Sal.TblAnyRows(App.frmAbrBearb.tblAbrHalter, Sys.ROW_Selected, 0)) 
					{
						Sal.WaitCursor(true);

						Var.nRow = Sys.TBL_MinRow;
						App.frmAbrBearb.dtNeu = SalDateTime.Current;
						while (true)
						{
							if (!(Sal.TblFindNextRow(App.frmAbrBearb.tblAbrHalter, ref Var.nRow, Sys.ROW_Selected, 0))) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmAbrBearb.tblAbrHalter, Var.nRow);
							if (Int.SqlImmed(@"UPDATE le SET lebearbdatum = :frmAbrBearb.dtNeu WHERE lebearbeiter = :frmAbrBearb.tblAbrHalter.colsBearbeiter AND lebearbdatum = :frmAbrBearb.tblAbrHalter.coldtBearbDatum AND leposnr = :frmAbrBearb.tblAbrHalter.colnPosNr
AND learztnr = :frmAbrBearb.tblAbrHalter.colnArztNr AND lehalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr")) 
							{
							}
							if (Int.SqlImmed(@"UPDATE lep SET lebearbdatum = :frmAbrBearb.dtNeu WHERE lepbearbeiter = :frmAbrBearb.tblAbrHalter.colsBearbeiter AND lebearbdatum = :frmAbrBearb.tblAbrHalter.coldtBearbDatum AND lepposnr =
:frmAbrBearb.tblAbrHalter.colnPosNr AND leparztnr = :frmAbrBearb.tblAbrHalter.colnArztNr AND lephalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr")) 
							{
							}
						}
						if (App.frmAbrBearb.PalPopulate(App.frmAbrBearb.strSelect)) 
						{
						}

						Sal.WaitCursor(false);
					}
					return 0;
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_Diesen_1_EnabledWhen()
				{
					return App.frmAbrBearb.tblAbrHalter.colnRechNr.Number == Sys.NUMBER_Null;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Diesen_1_MenuActions()
				{
					if (Sal.TblAnyRows(App.frmAbrBearb.tblAbrHalter, Sys.ROW_Selected, 0)) 
					{
						Sal.WaitCursor(true);

						Var.nRow = Sys.TBL_MinRow;
						App.frmAbrBearb.dtNeu = SalDateTime.Current;
						while (true)
						{
							if (!(Sal.TblFindNextRow(App.frmAbrBearb.tblAbrHalter, ref Var.nRow, Sys.ROW_Selected, 0))) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmAbrBearb.tblAbrHalter, Var.nRow);
							if (Int.SqlImmed(@"UPDATE le SET lestatus='---', lebearbdatum = :frmAbrBearb.dtNeu WHERE lebearbeiter = :frmAbrBearb.tblAbrHalter.colsBearbeiter AND lebearbdatum = :frmAbrBearb.tblAbrHalter.coldtBearbDatum AND leposnr =
:frmAbrBearb.tblAbrHalter.colnPosNr AND learztnr = :frmAbrBearb.tblAbrHalter.colnArztNr AND lehalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr")) 
							{
							}
							if (Int.SqlImmed(@"UPDATE lep SET lebearbdatum = :frmAbrBearb.dtNeu WHERE lepbearbeiter = :frmAbrBearb.tblAbrHalter.colsBearbeiter AND lebearbdatum = :frmAbrBearb.tblAbrHalter.coldtBearbDatum AND lepposnr =
:frmAbrBearb.tblAbrHalter.colnPosNr AND leparztnr = :frmAbrBearb.tblAbrHalter.colnArztNr AND lephalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr")) 
							{
							}
						}
						App.frmAbrBearb.PalPopulate(App.frmAbrBearb.strSelect);

						Sal.WaitCursor(false);
					}
					return 0;
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_Diesen_2_EnabledWhen()
				{
					return App.frmAbrBearb.tblAbrHalter.colnRechNr.Number == Sys.NUMBER_Null;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Diesen_2_MenuActions()
				{
					if (Sal.TblAnyRows(App.frmAbrBearb.tblAbrHalter, Sys.ROW_Selected, 0)) 
					{
						Sal.WaitCursor(true);

						Var.nRow = Sys.TBL_MinRow;
						App.frmAbrBearb.dtNeu = SalDateTime.Current;
						while (true)
						{
							if (!(Sal.TblFindNextRow(App.frmAbrBearb.tblAbrHalter, ref Var.nRow, Sys.ROW_Selected, 0))) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmAbrBearb.tblAbrHalter, Var.nRow);
							if (Int.SqlImmed(@"DELETE FROM le WHERE lebearbeiter = :frmAbrBearb.tblAbrHalter.colsBearbeiter AND lebearbdatum = :frmAbrBearb.tblAbrHalter.coldtBearbDatum AND leposnr = :frmAbrBearb.tblAbrHalter.colnPosNr
AND learztnr = :frmAbrBearb.tblAbrHalter.colnArztNr AND lehalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr")) 
							{
							}
							if (Int.SqlImmed(@"DELETE FROM lep WHERE lepbearbeiter = :frmAbrBearb.tblAbrHalter.colsBearbeiter AND lebearbdatum = :frmAbrBearb.tblAbrHalter.coldtBearbDatum AND lepposnr =
:frmAbrBearb.tblAbrHalter.colnPosNr AND leparztnr = :frmAbrBearb.tblAbrHalter.colnArztNr AND lephalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr")) 
							{
							}
						}
						if (App.frmAbrBearb.PalPopulate(App.frmAbrBearb.strSelect)) 
						{
						}

						Sal.WaitCursor(false);
					}
					// Call SqlHandleExecX(hSqlUpdPosi,'
					// DELETE FROM LEP
					// WHERE leparztnr=:frmAbrBearb.tblAbrHalter.colnArztNr
					// AND lephalternr=:frmAbrBearb.tblAbrHalter.colnHalterNr
					// AND lepbearbeiter=:frmAbrBearb.tblAbrHalter.colsBearbeiter
					// AND lebearbdatum=:frmAbrBearb.tblAbrHalter.coldtBearbDatum
					// AND lepposnr=:frmAbrBearb.tblAbrHalter.colnPosNr ','Löschen LEP')
					// Call SqlHandleExecX(hSqlUpdBearb,'
					// DELETE FROM LE
					// WHERE ROWID = :frmAbrBearb.tblAbrHalter.colsROWID','Löschen LE')
					return 0;
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_Unternehmer_EnabledWhen()
				{
					return App.frmAbrBearb.tblAbrHalter.colnReverse.Number == 0 || App.frmAbrBearb.tblAbrHalter.colnReverse.Number == Sys.NUMBER_Null;
				}
				
				/// <summary>
				/// Menu CheckedWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_Unternehmer_CheckedWhen()
				{
					return App.frmAbrBearb.tblAbrHalter.colnReverse.Number == 1;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Unternehmer_MenuActions()
				{
					App.frmAbrBearb.tblAbrHalter.colnReverse.Number = 1;
					Int.SqlImmed("UPDATE LE SET LEREVERSE = :frmAbrBearb.tblAbrHalter.colnReverse WHERE LE.ROWID = :frmAbrBearb.tblAbrHalter.colsROWID");
					return 0;
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_kein_EnabledWhen()
				{
					return App.frmAbrBearb.tblAbrHalter.colnReverse.Number == 1;
				}
				
				/// <summary>
				/// Menu CheckedWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_kein_CheckedWhen()
				{
					return App.frmAbrBearb.tblAbrHalter.colnReverse.Number == 0 || App.frmAbrBearb.tblAbrHalter.colnReverse.Number == Sys.NUMBER_Null;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_kein_MenuActions()
				{
					App.frmAbrBearb.tblAbrHalter.colnReverse.Number = 0;
					Int.SqlImmed("UPDATE LE SET LEREVERSE = :frmAbrBearb.tblAbrHalter.colnReverse WHERE LE.ROWID = :frmAbrBearb.tblAbrHalter.colsROWID");
					return 0;
				}
			}
			
			/// <summary>
			/// </summary>
			public class frmRaZaRightClick : SalPopupMenu
			{
				private SalMenuItem menuItem_Brief_2;
				private SalMenuItem menuItem_Ratenzahlungsvereinbarung;
				private SalMenuItem menuItem_vorläufigen;
				private SalMenuSeparator menuSeparator6;
				private SalMenuItem menuItem_RZ;
				private SalMenuSeparator menuSeparator7;
				private SalMenuItem menuItem_RZ_1;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_Brief_2 = new SalMenuItem();
					this.menuItem_Ratenzahlungsvereinbarung = new SalMenuItem();
					this.menuItem_vorläufigen = new SalMenuItem();
					this.menuSeparator6 = new SalMenuSeparator();
					this.menuItem_RZ = new SalMenuItem();
					this.menuSeparator7 = new SalMenuSeparator();
					this.menuItem_RZ_1 = new SalMenuItem();
					// 
					// frmRaZaRightClick
					// 
					this.Text = "Kontextmenü";
					this.MenuItems.Add(this.menuItem_Brief_2);
					this.MenuItems.Add(this.menuItem_Ratenzahlungsvereinbarung);
					this.MenuItems.Add(this.menuItem_vorläufigen);
					this.MenuItems.Add(this.menuSeparator6);
					this.MenuItems.Add(this.menuItem_RZ);
					this.MenuItems.Add(this.menuSeparator7);
					this.MenuItems.Add(this.menuItem_RZ_1);
					// 
					// menuItem_Brief_2
					// 
					this.menuItem_Brief_2.Text = "Brief drucken";
					this.menuItem_Brief_2.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Brief_2_MenuActions);
					// 
					// menuItem_Ratenzahlungsvereinbarung
					// 
					this.menuItem_Ratenzahlungsvereinbarung.Text = "Ratenzahlungsvereinbarung drucken";
					this.menuItem_Ratenzahlungsvereinbarung.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Ratenzahlungsvereinbarung_MenuActions);
					// 
					// menuItem_vorläufigen
					// 
					this.menuItem_vorläufigen.Text = "vorläufigen Tilgungsplanvorschlag drucken";
					this.menuItem_vorläufigen.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_vorläufigen_MenuActions);
					// 
					// menuItem_RZ
					// 
					this.menuItem_RZ.Text = "RZ reaktivieren";
					this.menuItem_RZ.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_RZ_MenuActions);
					// 
					// menuItem_RZ_1
					// 
					this.menuItem_RZ_1.Text = "RZ ungültig machen";
					this.menuItem_RZ_1.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_RZ_1_MenuActions);
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Brief_2_MenuActions()
				{
					App.frmRaZa.strAuswahl = "";
					Sal.TblKillEdit(App.frmRaZa.tblTagebuch);
					if (Sal.TblAnyRows(App.frmRaZa.tblTagebuch, Sys.ROW_Selected, 0)) 
					{
						App.frmRaZa.nRow = Sys.TBL_MinRow;
						while (true)
						{

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalNumber temp1 = App.frmRaZa.nRow;
							SalBoolean temp2 = Sal.TblFindNextRow(App.frmRaZa.tblTagebuch, ref temp1, Sys.ROW_Selected, 0);
							App.frmRaZa.nRow = temp1;

							if (!(temp2)) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmRaZa.tblTagebuch, App.frmRaZa.nRow);

							App.frmRaZa.strAuswahl = App.frmRaZa.strAuswahl + ", " + Sal.NumberToStrX(App.frmRaZa.tblTagebuch.colnRZNr.Number, 0);
						}
					}
					if (App.frmRaZa.strAuswahl != "") 
					{
						App.frmRaZa.strAuswahl = "(" + App.frmRaZa.strAuswahl.Mid(2, 32000) + ")";
						dlgLlDruck.ModalDialog(App.frmMain, "RaZaVerBrief.crd", " AND rznr IN " + App.frmRaZa.strAuswahl);
					}
					return 0;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Ratenzahlungsvereinbarung_MenuActions()
				{
					App.frmRaZa.strAuswahl = "";
					Sal.TblKillEdit(App.frmRaZa.tblTagebuch);
					if (Sal.TblAnyRows(App.frmRaZa.tblTagebuch, Sys.ROW_Selected, 0)) 
					{
						App.frmRaZa.nRow = Sys.TBL_MinRow;
						while (true)
						{

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalNumber temp1 = App.frmRaZa.nRow;
							SalBoolean temp2 = Sal.TblFindNextRow(App.frmRaZa.tblTagebuch, ref temp1, Sys.ROW_Selected, 0);
							App.frmRaZa.nRow = temp1;

							if (!(temp2)) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmRaZa.tblTagebuch, App.frmRaZa.nRow);

							App.frmRaZa.strAuswahl = App.frmRaZa.strAuswahl + ", " + Sal.NumberToStrX(App.frmRaZa.tblTagebuch.colnRZNr.Number, 0);
						}
					}
					if (App.frmRaZa.strAuswahl != "") 
					{
						App.frmRaZa.strAuswahl = "(" + App.frmRaZa.strAuswahl.Mid(2, 32000) + ")";
						dlgLlDruck.ModalDialog(App.frmMain, "Ratenzahler-Vereinbarung.lst", " AND rznr IN " + App.frmRaZa.strAuswahl);
					}
					return 0;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_vorläufigen_MenuActions()
				{
					App.frmRaZa.strAuswahl = "";
					Sal.TblKillEdit(App.frmRaZa.tblTagebuch);
					if (Sal.TblAnyRows(App.frmRaZa.tblTagebuch, Sys.ROW_Selected, 0)) 
					{
						App.frmRaZa.nRow = Sys.TBL_MinRow;
						while (true)
						{

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalNumber temp1 = App.frmRaZa.nRow;
							SalBoolean temp2 = Sal.TblFindNextRow(App.frmRaZa.tblTagebuch, ref temp1, Sys.ROW_Selected, 0);
							App.frmRaZa.nRow = temp1;

							if (!(temp2)) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmRaZa.tblTagebuch, App.frmRaZa.nRow);

							App.frmRaZa.strAuswahl = App.frmRaZa.strAuswahl + ", " + Sal.NumberToStrX(App.frmRaZa.tblTagebuch.colnRZNr.Number, 0);
						}
					}
					if (App.frmRaZa.strAuswahl != "") 
					{
						App.frmRaZa.strAuswahl = "(" + App.frmRaZa.strAuswahl.Mid(2, 32000) + ")";
						dlgLlDruck.ModalDialog(App.frmMain, "Ratenzahler-Tilgungsplan.lst", " AND rznr IN " + App.frmRaZa.strAuswahl);
					}
					return 0;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_RZ_MenuActions()
				{
					App.frmRaZa.strAuswahl = "";
					Sal.TblKillEdit(App.frmRaZa.tblTagebuch);
					if (Sal.TblAnyRows(App.frmRaZa.tblTagebuch, Sys.ROW_Selected, 0)) 
					{
						App.frmRaZa.nRow = Sys.TBL_MinRow;
						while (true)
						{

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalNumber temp1 = App.frmRaZa.nRow;
							SalBoolean temp2 = Sal.TblFindNextRow(App.frmRaZa.tblTagebuch, ref temp1, Sys.ROW_Selected, 0);
							App.frmRaZa.nRow = temp1;

							if (!(temp2)) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmRaZa.tblTagebuch, App.frmRaZa.nRow);

							// 14.06.11 Ä588 + If frmRaZa.tblTagebuch.coldtAktivDat = DATETIME_Null
							if (App.frmRaZa.tblTagebuch.coldtAktivDat.DateTime == Sys.DATETIME_Null) 
							{
								Sal.MessageBox("Der Vertrag war noch gar nicht aktiviert worden und kann daher nicht reaktiviert werden.", "RZ " + Sal.NumberToStrX(App.frmRaZa.tblTagebuch.colnRZNr.Number, 0), (Sys.MB_Ok | Sys.MB_IconExclamation));
							}
							else if (App.frmRaZa.tblTagebuch.coldtKuendDat.DateTime != Sys.DATETIME_Null) 
							{
								if (App.frmRaZa.tblTagebuch.coldtKuendDat.DateTime < SalDateTime.Current - 14) 
								{
									Sal.MessageBox("Die Kündigung liegt länger als 14 Tage zurück und der Vertrag kann daher nicht reaktiviert werden.", "RZ " + Sal.NumberToStrX(App.frmRaZa.tblTagebuch.colnRZNr.Number, 0), (Sys.MB_Ok | Sys.MB_IconExclamation));
								}
								else
								{
									App.frmRaZa.strAuswahl = App.frmRaZa.strAuswahl + ", " + Sal.NumberToStrX(App.frmRaZa.tblTagebuch.colnRZNr.Number, 0);

									// Call SqlImmed( 'UPDATE rz SET rzkuenddat = NULL WHERE rznr = :frmRaZa.tblTagebuch.colnRZNr' )
									Int.PalAktionRZ(App.frmRaZa.tblTagebuch.colnArztNr.Number, App.frmRaZa.tblTagebuch.colnHalterNr.Number, App.frmRaZa.tblTagebuch.colnRZNr.Number, "RZ", "KünRü", SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, 
										SalNumber.Null);
									Int.SqlImmed(@"UPDATE rk
SET rkmahnsperrbis = SYSDATE + 7 DAYS
WHERE rkkzzahl<2 AND rkdeaktiv IS NULL
AND rkarztnr*10000000000+rkhalternr*10000+rkrechnr IN (SELECT rzparztnr*10000000000+rzphalternr*10000+rzprechnr FROM rzp WHERE rzpnr = :frmRaZa.nRZNr)");
									// 14.12.10 OTÄ502

									// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
									SalBoolean temp3 = App.frmRaZa.bMBJa;
									Int.SqlIstDa(@"FROM rzp, rk WHERE rzparztnr=rkarztnr AND rzphalternr=rkhalternr AND rzprechnr=rkrechnr AND (rkmahnstufe=9 OR rzprechnr>999990) AND rkdeaktiv IS NULL
AND rzpnr = :frmRaZa.tblTagebuch.colnRZNr", ref temp3);
									App.frmRaZa.bMBJa = temp3;

									if (App.frmRaZa.bMBJa) 
									{
										App.frmMain.strZust = Int.PalZust(App.frmRaZa.tblTagebuch.colnArztNr.Number);
										// Set dtZettelWi = SalDateCurrent(  ) + 30
										App.frmRaZa.lsZettel = "Reaktivierung der RaZa-Vereinbarung RZ " + Sal.NumberToStrX(App.frmRaZa.tblTagebuch.colnRZNr.Number, 0);
										// 13.05.14 F2027
										App.frmRaZa.tblTagebuch.colnHalterNr.Number = Int.PalCheckNULL(App.frmRaZa.tblTagebuch.colnHalterNr.Number);

										Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :frmMain.strZust, :frmRaZa.tblTagebuch.colnArztNr, :frmRaZa.tblTagebuch.colnHalterNr, 0,
:frmRaZa.lsZettel , SYSDATE, NULL, 'N', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
										Int.PalLog("RaZa Reaktivierung: RZ " + Int.PalStrNum(App.frmRaZa.tblTagebuch.colnRZNr.Number, 4, 0));
										Sal.MessageBeep(0);
									}
								}
							}
						}
					}
					if (App.frmRaZa.strAuswahl != "") 
					{
						// 14.06.11
						App.frmRaZa.PalTagebuchRefresh();

						App.frmRaZa.strAuswahl = "(" + App.frmRaZa.strAuswahl.Mid(2, 32000) + ")";
						if (dlgLlDruck.ModalDialog(App.frmMain, "RaZaReakt.crd", " AND rznr IN " + App.frmRaZa.strAuswahl)) 
						{
						}
					}
					return 0;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_RZ_1_MenuActions()
				{
					// 14.06.11 Ä588
					Sal.TblKillEdit(App.frmRaZa.tblTagebuch);
					if (Sal.TblAnyRows(App.frmRaZa.tblTagebuch, Sys.ROW_Selected, 0)) 
					{
						App.frmRaZa.nRow = Sys.TBL_MinRow;
						while (true)
						{

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalNumber temp1 = App.frmRaZa.nRow;
							SalBoolean temp2 = Sal.TblFindNextRow(App.frmRaZa.tblTagebuch, ref temp1, Sys.ROW_Selected, 0);
							App.frmRaZa.nRow = temp1;

							if (!(temp2)) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmRaZa.tblTagebuch, App.frmRaZa.nRow);

							if (App.frmRaZa.tblTagebuch.coldtAktivDat.DateTime != Sys.DATETIME_Null) 
							{
								Sal.MessageBox("Der Vertrag ist bereits aktiviert und kann daher nicht ungültig gemacht werden.", "RZ " + Sal.NumberToStrX(App.frmRaZa.tblTagebuch.colnRZNr.Number, 0), (Sys.MB_Ok | Sys.MB_IconExclamation));
							}
							else
							{
								Int.SqlImmed("UPDATE rz SET rzkuenddat = SYSDATETIME WHERE rznr = :frmRaZa.tblTagebuch.colnRZNr");
								Int.PalAktionRZ(App.frmRaZa.tblTagebuch.colnArztNr.Number, App.frmRaZa.tblTagebuch.colnHalterNr.Number, App.frmRaZa.tblTagebuch.colnRZNr.Number, "RZ", "Ungül", SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, SalNumber.Null, 
									SalNumber.Null);
								Int.SqlImmed(@"UPDATE rk
SET rkmahnsperrbis = SYSDATE + 7 DAYS
WHERE rkkzzahl<2 AND rkdeaktiv IS NULL
AND rkarztnr*10000000000+rkhalternr*10000+rkrechnr IN (SELECT rzparztnr*10000000000+rzphalternr*10000+rzprechnr FROM rzp WHERE rzpnr = :frmRaZa.nRZNr)");
								// 14.12.10 OTÄ502

								// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
								SalBoolean temp3 = App.frmRaZa.bMBJa;
								Int.SqlIstDa(@"FROM rzp, rk WHERE rzparztnr=rkarztnr AND rzphalternr=rkhalternr AND rzprechnr=rkrechnr AND (rkmahnstufe=9 OR rzprechnr>999990) AND rkdeaktiv IS NULL
AND rzpnr = :frmRaZa.tblTagebuch.colnRZNr", ref temp3);
								App.frmRaZa.bMBJa = temp3;

								if (App.frmRaZa.bMBJa) 
								{
									App.frmMain.strZust = Int.PalZust(App.frmRaZa.tblTagebuch.colnArztNr.Number);
									// Set dtZettelWi = SalDateCurrent(  ) + 30
									App.frmRaZa.lsZettel = "Ungültigmachung der RaZa-Vereinbarung RZ " + Sal.NumberToStrX(App.frmRaZa.tblTagebuch.colnRZNr.Number, 0);
									// 13.05.14 F2027
									App.frmRaZa.tblTagebuch.colnHalterNr.Number = Int.PalCheckNULL(App.frmRaZa.tblTagebuch.colnHalterNr.Number);

									Int.SqlImmed(@"
INSERT INTO Z (zvon, zan, zarztnr, zhalternr, zrechnr, zbemerk, zdatum, zwiedervor, zerledigt, zart, zzm, zzmdm, zproznr, zan0, zan1, zan2, zan3, zan4, zanzeige, zerfdat)
VALUES (:strBNZei, :frmMain.strZust, :frmRaZa.tblTagebuch.colnArztNr, :frmRaZa.tblTagebuch.colnHalterNr, 0,
:frmRaZa.lsZettel , SYSDATE, NULL, 'N', 'TN', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,0, SYSDATETIME)");
									Int.PalLog("RaZa Ungültig gemacht: RZ " + Int.PalStrNum(App.frmRaZa.tblTagebuch.colnRZNr.Number, 4, 0));
									Sal.MessageBeep(0);
								}
								// 14.06.11
								App.frmRaZa.PalTagebuchRefresh();
							}
						}
					}
					return 0;
				}
			}
			
			/// <summary>
			/// </summary>
			public class frmRaZaPruefRightClick : SalPopupMenu
			{
				private SalMenuItem menuItem_Diese_2;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_Diese_2 = new SalMenuItem();
					// 
					// frmRaZaPruefRightClick
					// 
					this.Text = "KontexMenue";
					this.MenuItems.Add(this.menuItem_Diese_2);
					// 
					// menuItem_Diese_2
					// 
					this.menuItem_Diese_2.Text = "Diese Verträge aus Vorschlag löschen";
					this.menuItem_Diese_2.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Diese_2_MenuActions);
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Diese_2_MenuActions()
				{
					if (Sal.TblAnyRows(App.frmRaZa.tblPruef, Sys.ROW_Selected, 0)) 
					{
						Var.nRow = Sys.TBL_MinRow;
						while (true)
						{
							if (!(Sal.TblFindNextRow(App.frmRaZa.tblPruef, ref Var.nRow, Sys.ROW_Selected, 0))) 
							{
								break;
							}
							// Call SalTblSetRowFlags( frmRaZa.tblPruef, nRow, ROW_MarkDeleted, TRUE )
							Sal.TblDeleteRow(App.frmRaZa.tblPruef, Var.nRow, Sys.TBL_Adjust);
							// 20.01.14 F1843
							Int.PalLog("RaZa Vorschl entf.: RZ" + Sal.NumberToStrX(App.frmRaZa.tblPruef.colnRZNr.Number, 0));
						}
					}
					return 0;
				}
			}
			
			/// <summary>
			/// </summary>
			public class frmBEZStammRightClick : SalPopupMenu
			{
				private SalMenuItem menuItem_BEZRetoure;
				private SalMenuItem menuItem_BEZ;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_BEZRetoure = new SalMenuItem();
					this.menuItem_BEZ = new SalMenuItem();
					// 
					// frmBEZStammRightClick
					// 
					this.Text = "Kontextmenü";
					this.MenuItems.Add(this.menuItem_BEZRetoure);
					this.MenuItems.Add(this.menuItem_BEZ);
					// 
					// menuItem_BEZRetoure
					// 
					this.menuItem_BEZRetoure.Text = "BEZ-Retoure buchen";
					this.menuItem_BEZRetoure.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_BEZRetoure_MenuActions);
					// 
					// menuItem_BEZ
					// 
					this.menuItem_BEZ.Text = "BEZ zurücksetzen";
					this.menuItem_BEZ.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_BEZ_MenuActions);
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_BEZRetoure_MenuActions()
				{
					dlgBEZRetoure.ModalDialog(Sys.hWndForm, App.frmBEZStamm.tblBEZS.colArztNr.Number, App.frmBEZStamm.tblBEZS.colHalterNr.Number, App.frmBEZStamm.tblBEZS.colRechNr.Number, App.frmBEZStamm.tblBEZS.colErfDat.DateTime);
					return 0;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_BEZ_MenuActions()
				{
					Sal.TblKillEdit(App.frmBEZStamm.tblBEZS);
					if (Sal.TblAnyRows(App.frmBEZStamm.tblBEZS, Sys.ROW_Selected, 0)) 
					{
						App.frmBEZStamm.nRow = Sys.TBL_MinRow;
						while (true)
						{

							// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
							SalNumber temp1 = App.frmBEZStamm.nRow;
							SalBoolean temp2 = Sal.TblFindNextRow(App.frmBEZStamm.tblBEZS, ref temp1, Sys.ROW_Selected, 0);
							App.frmBEZStamm.nRow = temp1;

							if (!(temp2)) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmBEZStamm.tblBEZS, App.frmBEZStamm.nRow);

							// 14.06.11 Ä588 + If frmRaZa.tblTagebuch.coldtAktivDat = DATETIME_Null
							if (App.frmBEZStamm.tblBEZS.colLtztEinzug.DateTime == Sys.DATETIME_Null) 
							{
								Sal.MessageBox("Der Bankeinzug war noch gar nicht ausgeführt worden und kann daher nicht zurückgesetzt werden.", "Fehler", (Sys.MB_Ok | Sys.MB_IconExclamation));
							}
							else
							{
								// 18.04.12 + , bezserldat = NULL
								// 29.11.13 F1791 + AND bezsarztnr = :frmBEZStamm.tblBEZS.colArztNr AND bezshalternr = :frmBEZStamm.tblBEZS.colHalterNr AND :frmBEZStamm.tblBEZS.colRechNr
								if (App.frmBEZStamm.tblBEZS.colRechNr.Number == Sys.NUMBER_Null) 
								{
									Int.SqlImmed(@"UPDATE bezs SET bezsltzteinzug = NULL, bezserldat = NULL WHERE bezserfdat = :frmBEZStamm.tblBEZS.colErfDat
AND bezsarztnr = :frmBEZStamm.tblBEZS.colArztNr AND bezshalternr = :frmBEZStamm.tblBEZS.colHalterNr AND bezsrechnr IS NULL");
								}
								else
								{
									Int.SqlImmed(@"UPDATE bezs SET bezsltzteinzug = NULL, bezserldat = NULL WHERE bezserfdat = :frmBEZStamm.tblBEZS.colErfDat
AND bezsarztnr = :frmBEZStamm.tblBEZS.colArztNr AND bezshalternr = :frmBEZStamm.tblBEZS.colHalterNr AND bezsrechnr = :frmBEZStamm.tblBEZS.colRechNr");
								}
								Int.PalLog("BEZrück " + Int.PalStrNum(App.frmBEZStamm.tblBEZS.colArztNr.Number, 4, 0) + "/H" + Int.PalStrNum(App.frmBEZStamm.tblBEZS.colHalterNr.Number, 5, 0));
							}
						}
						App.frmBEZStamm.PalHoleTabelle(App.frmBEZStamm.dfArztNr.Number, App.frmBEZStamm.dfHalterNr.Number);
					}
					return 0;
				}
			}
			
			/// <summary>
			/// </summary>
			public class frmRgSuchenZaRightClick : SalPopupMenu
			{
				private SalMenuItem menuItem_drucken;
				private SalMenuItem menuItem_PRNummer;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_drucken = new SalMenuItem();
					this.menuItem_PRNummer = new SalMenuItem();
					// 
					// frmRgSuchenZaRightClick
					// 
					this.Text = "Kontextmenü";
					this.MenuItems.Add(this.menuItem_drucken);
					this.MenuItems.Add(this.menuItem_PRNummer);
					// 
					// menuItem_drucken
					// 
					this.menuItem_drucken.Text = "drucken";
					this.menuItem_drucken.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_drucken_MenuActions);
					// 
					// menuItem_PRNummer
					// 
					this.menuItem_PRNummer.Text = "PR-Nummer verändern";
					this.menuItem_PRNummer.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem_PRNummer_EnabledWhen);
					this.menuItem_PRNummer.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_PRNummer_MenuActions);
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_drucken_MenuActions()
				{
					App.frmRgSuchen.strText = "";
					dlgLlDruck.ModalDialog(App.frmMain, "InfoZahlungen.lst", "");
					return 0;
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_PRNummer_EnabledWhen()
				{
                    return (Var.strBNAbtlg == "MA" || Var.strBNUser == "KEUER") && App.frmRgSuchen.tblHZahlungen.colnZARechNr.Number > 0;
                }
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_PRNummer_MenuActions()
				{

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalNumber temp1 = App.frmMain.nProzNr;
					SalNumber temp2 = dlgEinNumber.ModalDialog(Sys.hWndForm, "Bitte geben Sie die PR-Nr. ein:", ref temp1);
					App.frmMain.nProzNr = temp1;

					if (1 == temp2) 
					{
						if (Int.SqlImmed(@"UPDATE za
SET zaproznr = :frmMain.nProzNr
WHERE zaarztnr = :frmRgSuchen.tblHZahlungen.colnZAArztNr
AND zarechnr = :frmRgSuchen.tblHZahlungen.colnZARechNr
AND zabuchdat = :frmRgSuchen.tblHZahlungen.coldtZADat
AND zadm = :frmRgSuchen.tblHZahlungen.colnZADM
AND zabuchtext = :frmRgSuchen.tblHZahlungen.colsZABuchtext")) 
						{
						}
						App.frmRgSuchen.PalFuelleZahlungen();
					}
					return 0;
				}
			}
			
			/// <summary>
			/// </summary>
			public class frmAbrBearbtblAZettel : SalPopupMenu
			{
				private SalMenuItem menuItem_Zettel;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_Zettel = new SalMenuItem();
					// 
					// frmAbrBearbtblAZettel
					// 
					this.Text = "";
					this.MenuItems.Add(this.menuItem_Zettel);
					// 
					// menuItem_Zettel
					// 
					this.menuItem_Zettel.Text = "Zettel löschen";
					this.menuItem_Zettel.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Zettel_MenuActions);
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Zettel_MenuActions()
				{
					if (Sal.TblAnyRows(App.frmAbrBearb.tblAZettel, Sys.ROW_Selected, 0)) 
					{
						Sal.WaitCursor(true);

						Var.nRow = Sys.TBL_MinRow;
						while (true)
						{
							if (!(Sal.TblFindNextRow(App.frmAbrBearb.tblAZettel, ref Var.nRow, Sys.ROW_Selected, 0))) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmAbrBearb.tblAZettel, Var.nRow);
							if (Int.SqlImmed("DELETE FROM z WHERE ROWID = :frmAbrBearb.tblAZettel.colROWID")) 
							{
							}
						}
						// 28.10.13
						// Call SalTblPopulate( frmAbrBearb.tblAZettel, frmAbrBearb.hSqlZettel,
						// 'SELECT ROWID, zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
						// INTO :frmAbrBearb.tblAZettel.colROWID, :frmAbrBearb.tblAZettel.colsVon, :frmAbrBearb.tblAZettel.colsAn,
						// :frmAbrBearb.tblAZettel.colnRechNr, :frmAbrBearb.tblAZettel.collsBemerk,
						// :frmAbrBearb.tblAZettel.coldtDatum, :frmAbrBearb.tblAZettel.colsErl
						// WHERE zarztnr = :frmManAbr.nArztNr  AND (zhalternr IS NULL OR zhalternr = 0)
						// AND zart=\'RA\' ORDER BY zdatum DESC',TBL_FillAll )
						// 29.11.13 F1792
						Int.SqlImmedSel(@"SELECT ANR2 INTO :frmAbrBearb.nArztNr2
FROM A WHERE AARZTNR = :frmAbrBearb.tblAbrHalter.colnArztNr");
						// + nArztNr2
						if (App.frmAbrBearb.strParent == "frmDiskAbr") 
						{
							// 13.05.14 (zhalternr IS NULL OR zhalternr = 0) -> zhalternr = 0
							Sal.TblPopulate(App.frmAbrBearb.tblAZettel, App.frmAbrBearb.hSqlZettel, @"SELECT ROWID, zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
INTO :frmAbrBearb.tblAZettel.colROWID, :frmAbrBearb.tblAZettel.colsVon, :frmAbrBearb.tblAZettel.colsAn,
:frmAbrBearb.tblAZettel.colnRechNr, :frmAbrBearb.tblAZettel.collsBemerk,
:frmAbrBearb.tblAZettel.coldtDatum, :frmAbrBearb.tblAZettel.colsErl
WHERE " + Int.PalArztNr("z", App.frmAbrBearb.tblAbrHalter.colnArztNr.Number, App.frmAbrBearb.nArztNr2) + @" AND zhalternr = 0
AND zart='RA' AND zdeaktiv IS NULL ORDER BY zdatum DESC", Sys.TBL_FillAll);
						}
						else if (App.frmAbrBearb.strParent == "frmManAbr") 
						{
							// 13.05.14 (zhalternr IS NULL OR zhalternr = 0) -> zhalternr = 0
							Sal.TblPopulate(App.frmAbrBearb.tblAZettel, App.frmAbrBearb.hSqlZettel, @"SELECT ROWID, zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
INTO :frmAbrBearb.tblAZettel.colROWID, :frmAbrBearb.tblAZettel.colsVon, :frmAbrBearb.tblAZettel.colsAn,
:frmAbrBearb.tblAZettel.colnRechNr, :frmAbrBearb.tblAZettel.collsBemerk,
:frmAbrBearb.tblAZettel.coldtDatum, :frmAbrBearb.tblAZettel.colsErl
WHERE " + Int.PalArztNr("z", App.frmAbrBearb.tblAbrHalter.colnArztNr.Number, App.frmAbrBearb.nArztNr2) + @" AND zhalternr = 0
AND zart='RA' AND zdeaktiv IS NULL ORDER BY zdatum DESC", Sys.TBL_FillAll);
						}

						Sal.WaitCursor(false);
					}
					return 0;
				}
			}
			
			/// <summary>
			/// </summary>
			public class frmManLEtblAZettel : SalPopupMenu
			{
				private SalMenuItem menuItem_Zettel_1;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_Zettel_1 = new SalMenuItem();
					// 
					// frmManLEtblAZettel
					// 
					this.Text = "";
					this.MenuItems.Add(this.menuItem_Zettel_1);
					// 
					// menuItem_Zettel_1
					// 
					this.menuItem_Zettel_1.Text = "Zettel löschen";
					this.menuItem_Zettel_1.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Zettel_1_MenuActions);
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Zettel_1_MenuActions()
				{
					if (Sal.TblAnyRows(App.frmManLE.tblAZettel, Sys.ROW_Selected, 0)) 
					{
						Sal.WaitCursor(true);

						Var.nRow = Sys.TBL_MinRow;
						while (true)
						{
							if (!(Sal.TblFindNextRow(App.frmManLE.tblAZettel, ref Var.nRow, Sys.ROW_Selected, 0))) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmManLE.tblAZettel, Var.nRow);
							if (Int.SqlImmed("DELETE FROM z WHERE ROWID = :frmManLE.tblAZettel.colROWID")) 
							{
							}
						}
						// 28.10.13
						// Call SalTblPopulate( frmAbrBearb.tblAZettel, frmAbrBearb.hSqlZettel,
						// 'SELECT ROWID, zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
						// INTO :frmAbrBearb.tblAZettel.colROWID, :frmAbrBearb.tblAZettel.colsVon, :frmAbrBearb.tblAZettel.colsAn,
						// :frmAbrBearb.tblAZettel.colnRechNr, :frmAbrBearb.tblAZettel.collsBemerk,
						// :frmAbrBearb.tblAZettel.coldtDatum, :frmAbrBearb.tblAZettel.colsErl
						// WHERE zarztnr = :frmManAbr.nArztNr  AND (zhalternr IS NULL OR zhalternr = 0)
						// AND zart=\'RA\' ORDER BY zdatum DESC',TBL_FillAll )
						// 13.05.14 (zhalternr IS NULL OR zhalternr = 0) -> zhalternr = 0
						Sal.TblPopulate(App.frmManLE.tblAZettel, App.frmManLE.hSqlZa, @"SELECT zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
INTO :frmManLE.tblAZettel.colsVon, :frmManLE.tblAZettel.colsAn,
:frmManLE.tblAZettel.colnRechNr, :frmManLE.tblAZettel.collsBemerk,
:frmManLE.tblAZettel.coldtDatum, :frmManLE.tblAZettel.colsErl
WHERE zarztnr IN (:frmManLE.dfArztNr, :frmManLE.dfArztNr2)  AND zhalternr = 0
AND zart='RA' AND zdeaktiv IS NULL ORDER BY zdatum DESC", Sys.TBL_FillAll);

						Sal.WaitCursor(false);
					}
					return 0;
				}
			}
			
			/// <summary>
			/// </summary>
			public class frmAbrBearbtblHZettel : SalPopupMenu
			{
				private SalMenuItem menuItem_Zettel_2;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_Zettel_2 = new SalMenuItem();
					// 
					// frmAbrBearbtblHZettel
					// 
					this.Text = "";
					this.MenuItems.Add(this.menuItem_Zettel_2);
					// 
					// menuItem_Zettel_2
					// 
					this.menuItem_Zettel_2.Text = "Zettel löschen";
					this.menuItem_Zettel_2.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Zettel_2_MenuActions);
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Zettel_2_MenuActions()
				{
					if (Sal.TblAnyRows(App.frmAbrBearb.tblHZettel, Sys.ROW_Selected, 0)) 
					{
						Sal.WaitCursor(true);

						Var.nRow = Sys.TBL_MinRow;
						while (true)
						{
							if (!(Sal.TblFindNextRow(App.frmAbrBearb.tblHZettel, ref Var.nRow, Sys.ROW_Selected, 0))) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmAbrBearb.tblHZettel, Var.nRow);
							if (Int.SqlImmed("DELETE FROM z WHERE ROWID = :frmAbrBearb.tblHZettel.colROWID")) 
							{
							}
						}
						// 29.11.13 F1792
						Int.SqlImmedSel(@"SELECT ANR2 INTO :frmAbrBearb.nArztNr2
FROM A WHERE AARZTNR = :frmAbrBearb.tblAbrHalter.colnArztNr");
						// + nArztNr2

						Sal.TblPopulate(App.frmAbrBearb.tblHZettel, App.frmAbrBearb.hSqlZettel, @"SELECT ROWID, zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
INTO :frmAbrBearb.tblHZettel.colROWID, :frmAbrBearb.tblHZettel.colsVon, :frmAbrBearb.tblHZettel.colsAn,
:frmAbrBearb.tblHZettel.colnRechNr, :frmAbrBearb.tblHZettel.collsBemerk,
:frmAbrBearb.tblHZettel.coldtDatum, :frmAbrBearb.tblHZettel.colsErl
WHERE " + Int.PalArztNr("z", App.frmAbrBearb.tblAbrHalter.colnArztNr.Number, App.frmAbrBearb.nArztNr2) + @"  AND zhalternr = :frmAbrBearb.tblAbrHalter.colnHalterNr
AND zart='RA' AND zdeaktiv IS NULL AND zhalternr<>0 and zhalternr IS NOT NULL ORDER BY zdatum DESC", Sys.TBL_FillAll);
						Sal.WaitCursor(false);
					}
					return 0;
				}
			}
			
			/// <summary>
			/// </summary>
			public class frmManLEtblHZettel : SalPopupMenu
			{
				private SalMenuItem menuItem_Zettel_3;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_Zettel_3 = new SalMenuItem();
					// 
					// frmManLEtblHZettel
					// 
					this.Text = "";
					this.MenuItems.Add(this.menuItem_Zettel_3);
					// 
					// menuItem_Zettel_3
					// 
					this.menuItem_Zettel_3.Text = "Zettel löschen";
					this.menuItem_Zettel_3.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Zettel_3_MenuActions);
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Zettel_3_MenuActions()
				{
					if (Sal.TblAnyRows(App.frmManLE.tblHZettel, Sys.ROW_Selected, 0)) 
					{
						Sal.WaitCursor(true);

						Var.nRow = Sys.TBL_MinRow;
						while (true)
						{
							if (!(Sal.TblFindNextRow(App.frmManLE.tblHZettel, ref Var.nRow, Sys.ROW_Selected, 0))) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmManLE.tblHZettel, Var.nRow);
							if (Int.SqlImmed("DELETE FROM z WHERE ROWID = :frmManLE.tblHZettel.colROWID")) 
							{
							}
						}

						Sal.TblPopulate(App.frmManLE.tblHZettel, App.frmManLE.hSqlZa, @"SELECT ROWID, zvon,zan,zrechnr,zbemerk,zdatum, zerledigt FROM Z
INTO :frmManLE.tblHZettel.colROWID, :frmManLE.tblHZettel.colsVon, :frmManLE.tblHZettel.colsAn,
:frmManLE.tblHZettel.colnRechNr, :frmManLE.tblHZettel.collsBemerk,
:frmManLE.tblHZettel.coldtDatum, :frmManLE.tblHZettel.colsErl
WHERE " + Int.PalArztNr("z", App.frmManLE.dfArztNr.Number, App.frmManLE.dfArztNr2.Number) + @"  AND zhalternr = :frmManLE.dfHalterNr
AND zart='RA' AND zdeaktiv IS NULL AND zhalternr<>0 and zhalternr IS NOT NULL ORDER BY zdatum DESC", Sys.TBL_FillAll);
						Sal.WaitCursor(false);
					}
					return 0;
				}
			}
			
			/// <summary>
			/// Menu: frmRgSuchenWvRightClick
			/// Title: Kontextmenü
			/// Description:
			/// Enabled when:
			/// Status Text:
			/// Menu Item Name:
			/// Menu Item: alle Wiedervorlagen für diese PR-Nummer entfernen
			/// Keyboard Accelerator: (none)
			/// Status Text:
			/// Menu Settings
			/// Enabled when:
			/// Checked when:
			/// Menu Actions
			/// Call SqlImmed( 'UPDATE z SET zwiedervor = NULL WHERE zproznr = :frmRgSuchen.gridWv.colPR AND zwiedervor IS NOT NULL' )
			/// Menu Item Name:
			/// Menu Item: neues Wiedervorlage-Datum für diese PR-Nummer eintragen
			/// Keyboard Accelerator: (none)
			/// Status Text:
			/// Menu Settings
			/// Enabled when:
			/// Checked when:
			/// Menu Actions
			/// Set dtdlgDatum = SalDateCurrent() + 42
			/// Call SalModalDialog(dlgDatum, hWndForm, 'Wiedervorlagedatum für PR ' || SalNumberToStrX( frmRgSuchen.gridWv.colPR, 0 ) || ' :', dtdlgDatum)
			/// Call SqlImmed( 'UPDATE z SET zwiedervor = :dtdlgDatum WHERE zproznr = :frmRgSuchen.gridWv.colPR AND zwiedervor IS NULL' )
			/// Menu Item Name:
			/// </summary>
			public class frmDiskAbrRightClick : SalPopupMenu
			{
				private SalMenuItem menuItem_Diese_3;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_Diese_3 = new SalMenuItem();
					// 
					// frmDiskAbrRightClick
					// 
					this.Text = "";
					this.MenuItems.Add(this.menuItem_Diese_3);
					// 
					// menuItem_Diese_3
					// 
					this.menuItem_Diese_3.Text = "Diese Abrechnung löschen";
					this.menuItem_Diese_3.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Diese_3_MenuActions);
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Diese_3_MenuActions()
				{
					Sal.WaitCursor(true);
					App.frmDiskAbr.nRechNr = 0;
					Int.SqlImmedSel(@"SELECT MAX(lerechnr) INTO :frmDiskAbr.nRechNr FROM le WHERE learztnr = :frmDiskAbr.tblOffeneAbr.colnArztNr
AND lebearbeiter = :frmDiskAbr.tblOffeneAbr.colsBearbeiter AND lebearbdatum = :frmDiskAbr.tblOffeneAbr.coldtBearbDatum ");
					if (App.frmDiskAbr.nRechNr > 0) 
					{
						Sal.MessageBox(@"Es sind bereits Rechnungsnummern vergeben.
Daher kann die Abrechnung nicht in Gänze gelöscht werden.", "abgerechnet!", (Sys.MB_Ok | Sys.MB_IconStop));
					}
					else
					{
						if (Int.SqlImmed(@"DELETE FROM le WHERE lebearbeiter = :frmDiskAbr.tblOffeneAbr.colsBearbeiter AND lebearbdatum = :frmDiskAbr.tblOffeneAbr.coldtBearbDatum
AND learztnr = :frmDiskAbr.tblOffeneAbr.colnArztNr")) 
						{
						}
						if (Int.SqlImmed(@"DELETE FROM lep WHERE lepbearbeiter = :frmDiskAbr.tblOffeneAbr.colsBearbeiter AND lebearbdatum = :frmDiskAbr.tblOffeneAbr.coldtBearbDatum
AND leparztnr = :frmDiskAbr.tblOffeneAbr.colnArztNr")) 
						{
						}
						App.frmDiskAbr.PostMessage(Sys.SAM_Activate, 0, 0);
					}
					Sal.WaitCursor(false);
					return 0;
				}
			}
			
			/// <summary>
			/// </summary>
			public class frmAerzteTSERightClick : SalPopupMenu
			{
				private SalMenuItem menuItem_TSE;
				private SalMenuItem menuItem_Client;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_TSE = new SalMenuItem();
					this.menuItem_Client = new SalMenuItem();
					// 
					// frmAerzteTSERightClick
					// 
					this.Text = "";
					this.MenuItems.Add(this.menuItem_TSE);
					this.MenuItems.Add(this.menuItem_Client);
					// 
					// menuItem_TSE
					// 
					this.menuItem_TSE.Text = "TSE kündigen";
					this.menuItem_TSE.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem_TSE_EnabledWhen);
					this.menuItem_TSE.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_TSE_MenuActions);
					// 
					// menuItem_Client
					// 
					this.menuItem_Client.Text = "Client anlegen";
					this.menuItem_Client.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem_Client_EnabledWhen);
					this.menuItem_Client.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Client_MenuActions);
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_TSE_EnabledWhen()
				{
					return App.frmAerzte.tblTSE.state.Text == "INITIALIZED";
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_TSE_MenuActions()
				{
					Var.strFiskalyTSSId = App.frmAerzte.tblTSE._id.Text;
					Var.nFiskalyFirma = App.frmAerzte.dfArztNr.Number;
					// 11.08.22 F4916
					Var.FISKALY.fInit(App.frmAerzte.dfAPIKey.Text, App.frmAerzte.dfAPISecret.Text, "V" + Sal.StrLeftX(App.frmAerzte.tblTSE.colVersion.Text, 1));

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalString temp1 = App.frmAerzte.strStatus;
					SalString temp2 = App.frmAerzte.strObject;
					SalBoolean temp3 = Int.PalFiskalyRetrieveTSS(App.frmAerzte.dfArztNr.Number, ref Var.strFiskalyTSSId, ref temp1, ref temp2, ref Var.strFiskalyCertificateSerial, ref Var.strFiskalyPublicKey, ref Var.strFiskalySignature_algorithm, ref Var.nFiskalySignature_counter, ref 
						Var.strFiskalySignature_timestamp_format, ref Var.strFiskalyState, ref Var.nFiskalyTransaction_number, ref Var.strFiskalySignature_value, ref Var.strFiskalyQR_code_date, ref Var.strFiskalyEnv, Var.strFiskalyDescription, ref Var.strFiskalyProcessType, ref 
						Var.strFiskalyProcessData, ref Var.strFiskalyExportID, ref Var.strFiskalyTime_Start, ref Var.strFiskalyTime_End);
					App.frmAerzte.strStatus = temp1;
					App.frmAerzte.strObject = temp2;

					if (temp3) 
					{
						Var.bFiskalyConnect = true;
						// If PalFiskalyListClientsOfTSS( frmAerzte.dfArztNr, strFiskalyTSSId, frmAerzte.strStatus, frmAerzte.strObject,
						// strFiskalyCertificateSerial, strFiskalyPublicKey, strFiskalySignature_algorithm, nFiskalySignature_counter, strFiskalySignature_timestamp_format,
						// strFiskalyClientId, strFiskalyClientSerialNumber, strFiskalyState,
						// nFiskalyTransaction_number, strFiskalySignature_value, strFiskalyQR_code_date, strFiskalyEnv,
						// strFiskalyDescription, strFiskalyProcessType, strFiskalyProcessData, strFiskalyExportID, strFiskalyTime_Start, strFiskalyTime_End )

						// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
						SalString temp4 = App.frmAerzte.strStatus;
						SalString temp5 = App.frmAerzte.strObject;
						SalBoolean temp6 = Int.PalFiskalyDisableTSS(App.frmAerzte.dfArztNr.Number, ref Var.strFiskalyTSSId, ref Var.strFiskalyClientId, ref temp4, ref temp5, ref Var.strFiskalyCertificateSerial, ref Var.strFiskalyPublicKey, ref Var.strFiskalySignature_algorithm, ref 
							Var.nFiskalySignature_counter, ref Var.strFiskalySignature_timestamp_format, ref Var.strFiskalyState, ref Var.nFiskalyTransaction_number, ref Var.strFiskalySignature_value, ref Var.strFiskalyQR_code_date, ref Var.strFiskalyEnv, Var.strFiskalyDescription, ref 
							Var.strFiskalyProcessType, ref Var.strFiskalyProcessData, ref Var.strFiskalyExportID, ref Var.strFiskalyTime_Start, ref Var.strFiskalyTime_End);
						App.frmAerzte.strStatus = temp4;
						App.frmAerzte.strObject = temp5;

						if (temp6) 
						{
							Int.PalLog("TSE gekündigt: " + App.frmAerzte.tblTSE._id.Text);
						}
					}
					return 0;
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_Client_EnabledWhen()
				{
					return App.frmAerzte.tblTSE.state.Text == "INITIALIZED";
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Client_MenuActions()
				{
					Var.strFiskalyTSSId = App.frmAerzte.tblTSE._id.Text;
					Var.nFiskalyFirma = App.frmAerzte.dfArztNr.Number;

					// PPJ: Automatically generated temporary assignments. Properties canot be passed by reference.
					SalString temp1 = App.frmAerzte.strStatus;
					SalString temp2 = App.frmAerzte.strObject;
					SalBoolean temp3 = Int.PalFiskalyCreateOrUpdateClient(App.frmAerzte.dfArztNr.Number, Var.strFiskalyTSSId, ref temp1, ref temp2, ref Var.strFiskalyCertificateSerial, ref Var.strFiskalyPublicKey, ref Var.strFiskalySignature_algorithm, ref 
						Var.nFiskalySignature_counter, ref Var.strFiskalySignature_timestamp_format, ref Var.strFiskalyClientId, ref Var.strFiskalyClientSerialNumber, ref Var.strFiskalyState, ref Var.nFiskalyTransaction_number, ref Var.strFiskalySignature_value, ref 
						Var.strFiskalyQR_code_date, ref Var.strFiskalyEnv, Var.strFiskalyDescription, ref Var.strFiskalyProcessType, ref Var.strFiskalyProcessData, ref Var.strFiskalyExportID, ref Var.strFiskalyTime_Start, ref Var.strFiskalyTime_End);
					App.frmAerzte.strStatus = temp1;
					App.frmAerzte.strObject = temp2;

					if (temp3) 
					{
						Int.PalLog("TSE " + App.frmAerzte.tblTSE._id.Text + " /Client " + Var.strFiskalyClientId + " angelegt");
						Sal.MessageBox("Der Client " + Var.strFiskalyClientId + " wurde angelegt.", "Ok", (Sys.MB_Ok | Sys.MB_IconAsterisk));
					}
					else
					{
						Sal.MessageBox("Der Client konnte NICHT angelegt werden.", "Ok", (Sys.MB_Ok | Sys.MB_IconAsterisk));
					}
					return 0;
				}
			}
			
			/// <summary>
			/// Menu: tblMahnungenRightClick
			/// Title:
			/// Description:
			/// Enabled when:
			/// Status Text:
			/// Menu Item Name:
			/// Menu Item: Tabelle drucken
			/// Keyboard Accelerator: (none)
			/// Status Text:
			/// Menu Settings
			/// Enabled when:
			/// Checked when:
			/// Menu Actions
			/// Call tblMahnungen.PrintParams.Init(  )
			/// Set tblMahnungen.PrintParams.DocName = 'Abschlagsvorschlag'
			/// Set tblMahnungen.PrintParams.Orientation = MTP_OR_LANDSCAPE
			/// Set tblMahnungen.strDevice = MTblPrintGetDefPrinterName(  )
			/// Set tblMahnungen.PrintParams.PrinterName = tblMahnungen.strDevice
			/// Set tblMahnungen.PrintParams.Language = MTP_LNG_GERMAN
			/// Call MTblPrint( tblMahnungen, tblMahnungen.PrintParams )
			/// Menu Item Name:
			/// </summary>
			public class frmProzRegRightClick : SalPopupMenu
			{
				private SalMenuItem menuItem_Archiv;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_Archiv = new SalMenuItem();
					// 
					// frmProzRegRightClick
					// 
					this.Text = "";
					this.MenuItems.Add(this.menuItem_Archiv);
					// 
					// menuItem_Archiv
					// 
					this.menuItem_Archiv.Text = "Archiv anzeigen";
					this.menuItem_Archiv.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem_Archiv_EnabledWhen);
					this.menuItem_Archiv.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Archiv_MenuActions);
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_Archiv_EnabledWhen()
				{
					return Var.strPfadArchiv != "";
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Archiv_MenuActions()
				{
					App.frmRgSuchen.PalZeigeArchiv(App.frmProzReg.tblProzReg.colnArztNr.Number, App.frmProzReg.tblProzReg.colnHalterNr.Number, App.frmProzReg.tblProzReg.colnNr.Number);
					return 0;
				}
			}
			
			/// <summary>
			/// </summary>
			public class frmTSKBeihilfenRightClick : SalPopupMenu
			{
				private SalMenuItem menuItem_Beihilfe_1;
				private SalMenuItem menuItem_Beihilfe_2;
				private SalMenuSeparator menuSeparator8;
				private SalMenuItem menuItem_Rechnungsnr;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem_Beihilfe_1 = new SalMenuItem();
					this.menuItem_Beihilfe_2 = new SalMenuItem();
					this.menuSeparator8 = new SalMenuSeparator();
					this.menuItem_Rechnungsnr = new SalMenuItem();
					// 
					// frmTSKBeihilfenRightClick
					// 
					this.Text = "";
					this.MenuItems.Add(this.menuItem_Beihilfe_1);
					this.MenuItems.Add(this.menuItem_Beihilfe_2);
					this.MenuItems.Add(this.menuSeparator8);
					this.MenuItems.Add(this.menuItem_Rechnungsnr);
					// 
					// menuItem_Beihilfe_1
					// 
					this.menuItem_Beihilfe_1.Text = "Beihilfe erledigt";
					this.menuItem_Beihilfe_1.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem_Beihilfe_1_EnabledWhen);
					this.menuItem_Beihilfe_1.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Beihilfe_1_MenuActions);
					// 
					// menuItem_Beihilfe_2
					// 
					this.menuItem_Beihilfe_2.Text = "Beihilfe unerledigt";
					this.menuItem_Beihilfe_2.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem_Beihilfe_2_EnabledWhen);
					this.menuItem_Beihilfe_2.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Beihilfe_2_MenuActions);
					// 
					// menuItem_Rechnungsnr
					// 
					this.menuItem_Rechnungsnr.Text = "Rechnungsnr. anzeigen";
					this.menuItem_Rechnungsnr.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem_Rechnungsnr_EnabledWhen);
					this.menuItem_Rechnungsnr.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Rechnungsnr_MenuActions);
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_Beihilfe_1_EnabledWhen()
				{
					return App.frmTSKBeihilfen.tblBeihilfen.coldtErlDatum.DateTime == Sys.DATETIME_Null;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Beihilfe_1_MenuActions()
				{
					if (Sal.TblAnyRows(App.frmTSKBeihilfen.tblBeihilfen, Sys.ROW_Selected, 0)) 
					{
						Sal.WaitCursor(true);

						Var.nRow = Sys.TBL_MinRow;
						while (true)
						{
							if (!(Sal.TblFindNextRow(App.frmTSKBeihilfen.tblBeihilfen, ref Var.nRow, Sys.ROW_Selected, 0))) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmTSKBeihilfen.tblBeihilfen, Var.nRow);
							Int.SqlImmed("UPDATE be SET beerldat = SYSDATETIME WHERE beguid = :frmTSKBeihilfen.tblBeihilfen.colsGUID");
							App.frmTSKBeihilfen.tblBeihilfen.coldtErlDatum.DateTime = SalDateTime.Current;
						}

						Sal.WaitCursor(false);
					}
					return 0;
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_Beihilfe_2_EnabledWhen()
				{
					return App.frmTSKBeihilfen.tblBeihilfen.coldtErlDatum.DateTime != Sys.DATETIME_Null;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Beihilfe_2_MenuActions()
				{
					if (Sal.TblAnyRows(App.frmTSKBeihilfen.tblBeihilfen, Sys.ROW_Selected, 0)) 
					{
						Sal.WaitCursor(true);

						Var.nRow = Sys.TBL_MinRow;
						while (true)
						{
							if (!(Sal.TblFindNextRow(App.frmTSKBeihilfen.tblBeihilfen, ref Var.nRow, Sys.ROW_Selected, 0))) 
							{
								break;
							}
							Sal.TblSetFocusRow(App.frmTSKBeihilfen.tblBeihilfen, Var.nRow);
							Int.SqlImmed("UPDATE be SET beerldat = NULL WHERE beguid = :frmTSKBeihilfen.tblBeihilfen.colsGUID");
							App.frmTSKBeihilfen.tblBeihilfen.coldtErlDatum.DateTime = Sys.DATETIME_Null;
						}

						Sal.WaitCursor(false);
					}
					return 0;
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_Rechnungsnr_EnabledWhen()
				{
					return App.frmTSKBeihilfen.tblBeihilfen.coldtErlDatum.DateTime != Sys.DATETIME_Null;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Rechnungsnr_MenuActions()
				{
					App.frmTSKBeihilfen.nBEArztNr = 0;
					App.frmTSKBeihilfen.nBERechNr = 0;
					Int.SqlImmedSel("SELECT rkarztnr, rkrechnr INTO :frmTSKBeihilfen.nBEArztNr, :frmTSKBeihilfen.nBERechNr FROM rk WHERE rkbeguid LIKE \'" + App.frmTSKBeihilfen.tblBeihilfen.colsGUID.Text + "%\'");
					if (App.frmTSKBeihilfen.nBERechNr == 0 || App.frmTSKBeihilfen.nBERechNr == SalNumber.Null) 
					{
						Sal.MessageBox("Es wurde keine Rechnung gefunden.", "keine Rechnung da", (Sys.MB_Ok | Sys.MB_IconExclamation));
					}
					else
					{
						Sal.MessageBox("abgerechnet mit Rechnung " + Sal.NumberToStrX(App.frmTSKBeihilfen.nBEArztNr, 0) + "/R" + Sal.NumberToStrX(App.frmTSKBeihilfen.nBERechNr, 0), "keine Rechnung da", (Sys.MB_Ok | Sys.MB_IconAsterisk));
					}
					return 0;
				}
			}
			
			/// <summary>
			/// Simple Edit menu with Undo, Cut, Copy, Paste, Clear.
			/// </summary>
			public class menuEdit : SalPopupMenu
			{
				private SalMenuItem menuItem__Undo;
				private SalMenuSeparator menuSeparator9;
				private SalMenuItem menuItem_Cut;
				private SalMenuItem menuItem__Copy;
				private SalMenuItem menuItem__Paste;
				private SalMenuItem menuItem_Clear;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem__Undo = new SalMenuItem();
					this.menuSeparator9 = new SalMenuSeparator();
					this.menuItem_Cut = new SalMenuItem();
					this.menuItem__Copy = new SalMenuItem();
					this.menuItem__Paste = new SalMenuItem();
					this.menuItem_Clear = new SalMenuItem();
					// 
					// menuEdit
					// 
					this.Text = "&Edit";
					this.StatusText = "Undo, Cut, Copy, Paste, Clear";
					this.MenuItems.Add(this.menuItem__Undo);
					this.MenuItems.Add(this.menuSeparator9);
					this.MenuItems.Add(this.menuItem_Cut);
					this.MenuItems.Add(this.menuItem__Copy);
					this.MenuItems.Add(this.menuItem__Paste);
					this.MenuItems.Add(this.menuItem_Clear);
					// 
					// menuItem__Undo
					// 
					this.menuItem__Undo.Text = "&Undo";
					this.menuItem__Undo.StatusText = "Reverses the last action";
					this.menuItem__Undo.Shortcut = Shortcut.CtrlZ;
					this.menuItem__Undo.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem__Undo_EnabledWhen);
					this.menuItem__Undo.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem__Undo_MenuActions);
					// 
					// menuItem_Cut
					// 
					this.menuItem_Cut.Text = "Cu&t";
					this.menuItem_Cut.StatusText = "Cuts the selection and puts it on the clipboard";
					this.menuItem_Cut.Shortcut = Shortcut.CtrlX;
					this.menuItem_Cut.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem_Cut_EnabledWhen);
					this.menuItem_Cut.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Cut_MenuActions);
					// 
					// menuItem__Copy
					// 
					this.menuItem__Copy.Text = "&Copy";
					this.menuItem__Copy.StatusText = "Copies the selection and puts it on the clipboard";
					this.menuItem__Copy.Shortcut = Shortcut.CtrlC;
					this.menuItem__Copy.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem__Copy_EnabledWhen);
					this.menuItem__Copy.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem__Copy_MenuActions);
					// 
					// menuItem__Paste
					// 
					this.menuItem__Paste.Text = "&Paste";
					this.menuItem__Paste.StatusText = "Inserts the Clipboard contents at the insertion point";
					this.menuItem__Paste.Shortcut = Shortcut.CtrlV;
					this.menuItem__Paste.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem__Paste_EnabledWhen);
					this.menuItem__Paste.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem__Paste_MenuActions);
					// 
					// menuItem_Clear
					// 
					this.menuItem_Clear.Text = "C&lear";
					this.menuItem_Clear.StatusText = "Clears the selection";
					this.menuItem_Clear.Shortcut = Shortcut.Del;
					this.menuItem_Clear.EnabledWhen += new PPJ.Runtime.Windows.SalMenuEnabledWhenHandler(this.menuItem_Clear_EnabledWhen);
					this.menuItem_Clear.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem_Clear_MenuActions);
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem__Undo_EnabledWhen()
				{
					return Sal.EditCanUndo();
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem__Undo_MenuActions()
				{
					Sal.EditUndo();
					return 0;
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_Cut_EnabledWhen()
				{
					return Sal.EditCanCut();
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Cut_MenuActions()
				{
					Sal.EditCut();
					return 0;
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem__Copy_EnabledWhen()
				{
					return Sal.EditCanCut();
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem__Copy_MenuActions()
				{
					Sal.EditCopy();
					return 0;
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem__Paste_EnabledWhen()
				{
					return Sal.EditCanPaste();
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem__Paste_MenuActions()
				{
					Sal.EditPaste();
					return 0;
				}
				
				/// <summary>
				/// Menu EnabledWhen Expression
				/// </summary>
				/// <returns></returns>
				private bool menuItem_Clear_EnabledWhen()
				{
					return Sal.EditCanCut();
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem_Clear_MenuActions()
				{
					Sal.EditClear();
					return 0;
				}
			}
			
			/// <summary>
			/// Menu to manage MDI child windows.
			/// </summary>
			public class menuMDIWindows : SalWindowsMenu
			{
				private SalMenuItem menuItem__Tile;
				private SalMenuItem menuItem__Tile_1;
				private SalMenuItem menuItem__Cascade;
				private SalMenuItem menuItem__Arrange;
				
				/// <summary>
				/// Named Menu initialization.
				/// </summary>
				protected override void OnInitializeMenu()
				{
					this.menuItem__Tile = new SalMenuItem();
					this.menuItem__Tile_1 = new SalMenuItem();
					this.menuItem__Cascade = new SalMenuItem();
					this.menuItem__Arrange = new SalMenuItem();
					// 
					// menuMDIWindows
					// 
					this.Text = "&Window";
					this.StatusText = "Manage MDI child windows";
					this.MenuItems.Add(this.menuItem__Tile);
					this.MenuItems.Add(this.menuItem__Tile_1);
					this.MenuItems.Add(this.menuItem__Cascade);
					this.MenuItems.Add(this.menuItem__Arrange);
					// 
					// menuItem__Tile
					// 
					this.menuItem__Tile.Text = "&Tile Vertical";
					this.menuItem__Tile.StatusText = "Arrange MDI child windows in a vertical tiled format";
					this.menuItem__Tile.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem__Tile_MenuActions);
					// 
					// menuItem__Tile_1
					// 
					this.menuItem__Tile_1.Text = "&Tile Horizontal";
					this.menuItem__Tile_1.StatusText = "Arrange MDI child windows in a horizontal tiled format";
					this.menuItem__Tile_1.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem__Tile_1_MenuActions);
					// 
					// menuItem__Cascade
					// 
					this.menuItem__Cascade.Text = "&Cascade";
					this.menuItem__Cascade.StatusText = "Arrange MDI child windows in a cascaded format";
					this.menuItem__Cascade.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem__Cascade_MenuActions);
					// 
					// menuItem__Arrange
					// 
					this.menuItem__Arrange.Text = "&Arrange Icons";
					this.menuItem__Arrange.StatusText = "Arrange minimized MDI child windows";
					this.menuItem__Arrange.MenuActions += new PPJ.Runtime.Windows.SalMenuActionsHandler(this.menuItem__Arrange_MenuActions);
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem__Tile_MenuActions()
				{
					Sys.hWndMDI.MDITile(true);
					return 0;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem__Tile_1_MenuActions()
				{
					Sys.hWndMDI.MDITile(false);
					return 0;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem__Cascade_MenuActions()
				{
					Sys.hWndMDI.MDICascade();
					return 0;
				}
				
				/// <summary>
				/// Menu Actions
				/// </summary>
				/// <returns></returns>
				private SalNumber menuItem__Arrange_MenuActions()
				{
					Sys.hWndMDI.MDIArrangeIcons();
					return 0;
				}
			}
		}
		#endregion
	}
}
