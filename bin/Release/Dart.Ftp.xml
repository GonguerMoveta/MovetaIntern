<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dart.Ftp</name>
    </assembly>
    <members>
        <member name="T:Dart.Ftp.ComponentBase">
            <summary>
            Base class for PowerTCP Components.
            </summary>
        </member>
        <member name="P:Dart.Ftp.ComponentBase.SynchronizingObject">
            <summary>
            Gets or sets the object used to marshal data to the UI thread (for raising events). 
            </summary>
            <remarks>
                <para>
                This property determines the thread on which the component's event handlers are raised. If set
                to a UI control, events are raised on the UI thread. If null, events are raised on the current thread.
                </para>
                <para>
                This property is automatically set to the containing control when used in the Windows Forms designer. 
                When a derived class is dynamically created this property must be set if marshaling
                to the UI thread is desired.
                </para>
            </remarks>
        </member>
        <member name="P:Dart.Ftp.ComponentBase.SyncRoot">
            <summary>
            Gets an object that is used to synchronize access to the upper layer protocol in use.
            </summary>
            <remarks>
            Upper layer protocols typically send a command and wait for it to complete. Use of this object in a C# "lock" statement
            can allow your code to wait until any ongoing command has completed.
            </remarks>
        </member>
        <member name="M:Dart.Ftp.ComponentBase.Marshal(System.String,System.Object)">
            <summary>
            Marshals a string and/or object to the UI thread and raises the UserState event.
            </summary>
            <param name="message">Message to pass into the UserState event.</param>
            <param name="state">Object to pass to the UserState event; can be null.</param>
            <remarks>
                <para>
                Used to marshal a string and/or object from a worker thread to the UI thread 
                for typical display purposes. 
                It calls <see cref="M:Dart.Ftp.ComponentBase.OnUserState(Dart.Ftp.UserStateEventArgs)" />, which raises the <see cref="E:Dart.Ftp.ComponentBase.UserState" /> event.
                </para>
                <para>
                See the <see cref="P:Dart.Ftp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
                Internally, SynchronizingObject.BeginInvoke is used to marshal data when the SynchronizingObject is not null, and
                Delegate.DynamicInvoke is used when SynchronizingObject is null.  
                This method is provided for convenience; the developer may use alternative methods for marshaling data as required.
                </para>
            </remarks>
        </member>
        <member name="M:Dart.Ftp.ComponentBase.Marshal(System.Exception)">
            <summary>
            Marshals an exception to the UI thread and raises the Error event.
            </summary>
            <param name="exception">The Exception to be marshaled.</param>
            <remarks>
                <para>
                Used to marshal exceptions from a worker thread to the UI thread for typical display purposes.  
                It calls <see cref="M:Dart.Ftp.ComponentBase.OnError(Dart.Ftp.ErrorEventArgs)" />, which raises the <see cref="E:Dart.Ftp.ComponentBase.Error" /> event.
                </para>
                <para>
                When Start is used, unhandled exceptions generated on worker threads are marshaled to the UI thread
                by this method.
                </para>
                <para>
                See the <see cref="P:Dart.Ftp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
                Internally, SynchronizingObject.BeginInvoke is used to marshal data when the SynchronizingObject is not null, and
                Delegate.DynamicInvoke is used when SynchronizingObject is null.   
                This method is provided for convenience; the developer may use alternative methods for marshaling data as required.
                </para>
            </remarks>
        </member>
        <member name="E:Dart.Ftp.ComponentBase.UserState">
            <summary>
            Raised when <see cref="M:Dart.Ftp.ComponentBase.Marshal(System.String,System.Object)" /> is used.
            </summary>
            <remarks>
                See the <see cref="P:Dart.Ftp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
            </remarks>
        </member>
        <member name="E:Dart.Ftp.ComponentBase.Error">
            <summary>
            Raised when <see cref="M:Dart.Ftp.ComponentBase.Marshal(System.Exception)" /> is used or an unhandled Exception is thrown in a worker thread created using Start.
            </summary>
            <remarks>
                See the <see cref="P:Dart.Ftp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
            </remarks>
        </member>
        <member name="P:Dart.Ftp.ComponentBase.Encoding">
            <summary>
            Character encoding used by the component.
            </summary>
        </member>
        <member name="P:Dart.Ftp.ComponentBase.Tag">
            <summary>
            Gets or sets an object that stores any user data.
            </summary>
        </member>
        <member name="T:Dart.Ftp.UserStateEventArgs">
            <summary>
            Provides data for <see cref="E:Dart.Ftp.ComponentBase.UserState" />.
            Base class for EventArgs that have <see cref="P:Dart.Ftp.UserStateEventArgs.Message" /> and <see cref="P:Dart.Ftp.UserStateEventArgs.UserState" /> properties.
            </summary>
        </member>
        <member name="M:Dart.Ftp.UserStateEventArgs.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new UserStateEventArgs.
            </summary>
        </member>
        <member name="P:Dart.Ftp.UserStateEventArgs.Message">
            <summary>
            Returns the message argument provided by the Marshal method.
            </summary>
        </member>
        <member name="P:Dart.Ftp.UserStateEventArgs.UserState">
            <summary>
            Returns the user state argument provided by the Marshal method.
            </summary>
        </member>
        <member name="T:Dart.Ftp.ErrorEventArgs">
            <summary>
            Provides data for the <see cref="E:Dart.Ftp.ComponentBase.Error">Error</see> event.
            </summary>
        </member>
        <member name="M:Dart.Ftp.ErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Save an exception within this class.
            </summary>
            <param name="exception">Exception to save.</param>
        </member>
        <member name="M:Dart.Ftp.ErrorEventArgs.GetException">
            <summary>
            Returns the Exception marshaled to the UI thread.
            </summary>
            <returns>Exception</returns>
        </member>
        <member name="T:Dart.Ftp.CopyAction">
            <summary>
            Enumerates the copy action desired or completed.
            </summary>
        </member>
        <member name="F:Dart.Ftp.CopyAction.Get">
            <summary>
            A download from the server.
            </summary>
        </member>
        <member name="F:Dart.Ftp.CopyAction.Put">
            <summary>
            An upload to the server.
            </summary>
        </member>
        <member name="T:Dart.Ftp.CopyMode">
            <summary>
            Enumerates the type of copy desired or performed.
            </summary>
            <remarks>
            CopyMode.Restart - If the file timestamps match and the source is larger than the destination, then the necessary trailing 
            bytes from the source are appended to the destination. This mode should only be used to restart a failed copy. If the 
            timestamps and sizes match, then no copy is performed (like CopyMode.Synchronize). If the timestamps do not match or the 
            source is smaller than the destination, then a full copy is performed.
            </remarks>
        </member>
        <member name="F:Dart.Ftp.CopyMode.Copy">
            <summary>
            Uploads the entire file, overwriting any existing file. Upon completion of a copy operation, indicates the file was uploaded or 
            overwritten.
            </summary>
        </member>
        <member name="F:Dart.Ftp.CopyMode.Synchronize">
            <summary>
            If the file timestamps and sizes match, no copy is performed. Otherwise a full copy is performed. Upon completion of a copy 
            operation, indicates no copy was performed.
            </summary>
        </member>
        <member name="F:Dart.Ftp.CopyMode.Restart">
            <summary>
            Resumes an incomplete transfer or overwrites the destination file if the source file has been changed. Upon completion of 
            a copy operation, indicates the transfer was resumed.
            </summary>
        </member>
        <member name="F:Dart.Ftp.CopyMode.Append">
            <summary>
            Appends the source file to the destination file. Upon completion of a copy operation, indicates the source file was 
            appended to the destination file.
            </summary>
        </member>
        <member name="T:Dart.Ftp.CopyStatus">
            <summary>
            Enumerates the status of a Copy action.
            </summary>
        </member>
        <member name="F:Dart.Ftp.CopyStatus.Aborted">
            <summary>
            The copy was aborted by the user.
            </summary>
        </member>
        <member name="F:Dart.Ftp.CopyStatus.Completed">
            <summary>
            The copy completed successfully.
            </summary>
        </member>
        <member name="F:Dart.Ftp.CopyStatus.Failed">
            <summary>
            The copy failed.
            </summary>
        </member>
        <member name="F:Dart.Ftp.CopyStatus.InProgress">
            <summary>
            The copy is is progress.
            </summary>
        </member>
        <member name="T:Dart.Ftp.CopyResult">
            <summary>
            Provides the results of a copy operation (in uncompressed bytes).
            </summary>
        </member>
        <member name="P:Dart.Ftp.CopyResult.DateTimeSet">
            <summary>
            Returns true if the DateTime of the destination file was updated to the DateTime of the source.
            </summary>
            <remarks>
            The MFMT command is used to set the DateTime of a file transfered to a server. This property can only return true for stored files if the server supports this command.
            </remarks>
        </member>
        <member name="P:Dart.Ftp.CopyResult.StartTime">
            <summary>
            Gets the time that the copy action started.
            </summary>
        </member>
        <member name="P:Dart.Ftp.CopyResult.Response">
            <summary>
            Gets the last response received from the server
            </summary>
        </member>
        <member name="P:Dart.Ftp.CopyResult.Action">
            <summary>
            Gets the requested action (either CopyAction.Get or CopyAction.Put).
            </summary>
        </member>
        <member name="P:Dart.Ftp.CopyResult.Mode">
            <summary>
            Gets the technique used for the copy (Copy, Synchronize, Restart or Append).
            </summary>
        </member>
        <member name="P:Dart.Ftp.CopyResult.Count">
            <summary>
            Gets the total number of bytes copied. Will be less than <see cref="P:Dart.Ftp.CopyResult.Position" /> when appending to an existing file.
            </summary>
        </member>
        <member name="P:Dart.Ftp.CopyResult.Position">
            <summary>
            Gets the current position within the file being copied.
            </summary>
        </member>
        <member name="P:Dart.Ftp.CopyResult.Length">
            <summary>
            Gets the size of the file being copied. Returns the value of <see cref="P:Dart.Ftp.CopyResult.Position" /> if the SIZE is unknown or less than Position.
            </summary>
            <remarks>
            When retrieving a compressed file (<see cref="P:Dart.Ftp.FtpSession.Compression" /> == <see cref="F:Dart.Ftp.Compression.Archive" />) and the SIZE
            command is supported, Length would normally return the byte count of the compressed file, so in this case Length returns
            the value of <see cref="P:Dart.Ftp.CopyResult.Position" /> when the Length of the remote file is less than <see cref="P:Dart.Ftp.CopyResult.Position" />.
            </remarks>
        </member>
        <member name="P:Dart.Ftp.CopyResult.LocalPath">
            <summary>
            Gets the absolute path of the file on the client.
            </summary>
        </member>
        <member name="P:Dart.Ftp.CopyResult.Status">
            <summary>
            Gets the status of the copy operation.
            </summary>
        </member>
        <member name="P:Dart.Ftp.CopyResult.Percentage">
            <summary>
            Gets the percentage (0-100) of bytes transferred in the copied file.
            </summary>
        </member>
        <member name="T:Dart.Ftp.RemoveResult">
            <summary>
            Provides the results of a requested remove operation.
            </summary>
        </member>
        <member name="P:Dart.Ftp.RemoveResult.RemotePath">
            <summary>
            Gets the path of the file or folder on the server.
            </summary>
            <remarks>
            Absolute if the server supports and allows the PWD command, relative if it does not.
            </remarks>
        </member>
        <member name="P:Dart.Ftp.RemoveResult.IsDirectory">
            <summary>
            Returns true if the item is a directory.
            </summary>
        </member>
        <member name="M:Dart.Ftp.RemoveResult.GetException">
            <summary>
            Gets any Exception that occurred during the operation.
            </summary>
            <returns>An Exception, otherwise null.</returns>
        </member>
        <member name="T:Dart.Ftp.ProgressEventArgs">
            <summary>
            Provides progress information to the user as a copy operation proceeds.
            </summary>
        </member>
        <member name="P:Dart.Ftp.ProgressEventArgs.List">
            <summary>
            Gets progress for the entire copy operation.
            </summary>
        </member>
        <member name="P:Dart.Ftp.ProgressEventArgs.Item">
            <summary>
            Gets progress for the current file or directory in the copy operation.
            </summary>
        </member>
        <member name="T:Dart.Ftp.ListProgress">
            <summary>
            Provides progress information during a copy operation for a list of files and folders 
            </summary>
        </member>
        <member name="M:Dart.Ftp.ListProgress.#ctor(System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary></summary>
        </member>
        <member name="P:Dart.Ftp.ListProgress.Count">
            <summary>
            Total number of folders + files to be transferred.
            </summary>
        </member>
        <member name="P:Dart.Ftp.ListProgress.Index">
            <summary>
            Index of folder or file in the transfer list.
            </summary>
        </member>
        <member name="P:Dart.Ftp.ListProgress.BytesCopied">
            <summary>
            Gets the total number of bytes transferred for the entire copy operation.
            </summary>
        </member>
        <member name="P:Dart.Ftp.ListProgress.TotalBytes">
            <summary>
            Gets the aggregated number of bytes for the entire copy operation. 
            Returns the value of <see cref="P:Dart.Ftp.ListProgress.BytesCopied" /> if the SIZE is unknown or less than BytesCopied.
            </summary>
            <remarks>
            When retrieving compressed files (<see cref="P:Dart.Ftp.FtpSession.Compression" /> == <see cref="F:Dart.Ftp.Compression.Archive" />) and the SIZE
            command is supported, TotalByes would normally return the byte count of the compressed files, so in this case TotalBytes returns
            the value of <see cref="P:Dart.Ftp.ListProgress.BytesCopied" /> when the Length of the remote files is less than <see cref="P:Dart.Ftp.ListProgress.BytesCopied" />.
            </remarks>
        </member>
        <member name="P:Dart.Ftp.ListProgress.Percentage">
            <summary>
            Gets the percentage (0-100) of bytes copied in the entire copy operation.
            </summary>
        </member>
        <member name="T:Dart.Ftp.CopyEventArgs">
            <summary>
            Provides copy result information to the user.
            </summary>
        </member>
        <member name="F:Dart.Ftp.CopyEventArgs.Result">
            <summary>
            Gets the progress of the copy operation.
            </summary>
        </member>
        <member name="T:Dart.Ftp.License">
            <summary>
            This class is used to license Dart products in any environment. 
            If your project targets the .NET Framework, you can use 
            the licenses.licx file to trigger the license compiler (LC.EXE) and these manual steps are not needed.
            </summary>
        </member>
        <member name="M:Dart.Ftp.License.Create">
            <summary>
            Used to explicitly create a runtime license string. Only necessary for creating an Extended Distribution license.
            </summary>
            <remarks>
            By default, creating a product component with a development license present will create a Dart.{product}.lic file that licenses 
            product distribution with the application using it. Use this method to create a .lic file that licenses product distribution with
            the calling library instead.
            <exception>
            Throws a <see cref="T:Dart.Ftp.DartLicenseException" /> if no development license is present.
            </exception></remarks>
            <returns>A runtime license string that can be used in <see cref="M:Dart.Ftp.License.Set(System.String)" />.</returns>
        </member>
        <member name="M:Dart.Ftp.License.Set(System.String)">
            <summary>
            Optionally used to set the runtime license before product classes are used. Precludes deployment of the Dart.{product}.lic file.
            </summary>
            <param name="runtimeLicense">A runtime license key string commonly copied from the Dart.{product}.lic file.</param>
            <remarks>Since product licensing depends upon the presence of an intact Dart.{product}.lic file, your deployed application
            can be made more secure by hard-coding your runtime license into your application by using this method.</remarks>
        </member>
        <member name="T:Dart.Ftp.DartLicenseException">
            <summary>
             Used for all Dart component license exceptions.
             </summary>
            <remarks>
                <para>
             Use the DartLicenseException class to catch runtime licensing exceptions.
             This exception can be thrown at component creation time and when the License class is referenced.
             The Message property will provide a description of the specific licensing problem encountered.
             The InnerException property should also be examined for additional details.
             </para>
            </remarks>
        </member>
        <member name="T:Dart.Ftp.DataDirection">
            <summary>
            Enumerates the direction of data flow.
            </summary>
        </member>
        <member name="F:Dart.Ftp.DataDirection.In">
            <summary>
            Data was received (using the Read method).
            </summary>
        </member>
        <member name="F:Dart.Ftp.DataDirection.Out">
            <summary>
            Data was sent (using the Write method).
            </summary>
        </member>
        <member name="T:Dart.Ftp.Data">
            <summary>
            Encapsulates data read or written.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Data.Direction">
            <summary>
            Indicates whether data is inbound or outbound.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Data.Encoding">
            <summary>
            Gets the character encoding used by the object.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Data.Delimiter">
            <summary>
            Gets the delimiter byte array used by <see cref="M:Dart.Ftp.TcpBase.ReadToDelimiter(System.Byte[])" />.
            </summary>
            <value>Null if no delimiter was used or no delimiter was found. Otherwise, the delimiter byte array.</value>
        </member>
        <member name="M:Dart.Ftp.Data.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a Data object using the default encoding.
            </summary>
            <param name="buffer">The buffer holding byte data values.</param>
            <param name="offset">The offset bytes where the data starts.</param>
            <param name="count">The number of bytes with data values.</param>
        </member>
        <member name="M:Dart.Ftp.Data.#ctor(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Creates a Data object using the specified encoding.
            </summary>
            <param name="buffer">The buffer holding byte data values.</param>
            <param name="offset">The offset bytes where the data starts.</param>
            <param name="count">The number of bytes with data values.</param>
            <param name="encoding">The encoding type to use.</param>
        </member>
        <member name="M:Dart.Ftp.Data.ToString">
            <summary>
            Gets the data as a decoded string.
            </summary>
            <returns>The <see cref="T:System.Buffer" /> decoded into a string using <see cref="P:Dart.Ftp.Data.Encoding" />.</returns>
        </member>
        <member name="T:Dart.Ftp.BaseEventArgs">
            <summary>
            Base class for event arguments.
            </summary>
        </member>
        <member name="T:Dart.Ftp.ConnectionState">
            <summary>
            Enumerates the possible values of the connection state.
            </summary>
        </member>
        <member name="F:Dart.Ftp.ConnectionState.Closed">
            <summary>
            The connection is closed.
            </summary>
        </member>
        <member name="F:Dart.Ftp.ConnectionState.Connected">
            <summary>
            The TCP connection is established but not secure.
            </summary>
        </member>
        <member name="F:Dart.Ftp.ConnectionState.ConnectedAndSecure">
            <summary>
            The connection is connected and secure.
            </summary>
        </member>
        <member name="T:Dart.Ftp.DataEventArgs">
            <summary>
            Provides data for reporting events.
            </summary>
        </member>
        <member name="M:Dart.Ftp.DataEventArgs.#ctor(Dart.Ftp.Data,System.String,System.Object)">
            <summary>
            Initialize a new DataEventArgs.
            </summary>
        </member>
        <member name="P:Dart.Ftp.DataEventArgs.Data">
            <summary>
            Gets data provided by Data and Log events.
            </summary>
        </member>
        <member name="M:Dart.Ftp.DataEventArgs.ToString">
            <summary>
            Gets the Data property as a decoded string.
            </summary>
            <returns>The Data.Buffer decoded into a string using the Data.Encoding specified.</returns>
        </member>
        <member name="T:Dart.Ftp.Datagram">
            <summary>
            Encapsulates a datagram read into a buffer.
            </summary>
        </member>
        <member name="F:Dart.Ftp.Datagram.Origin">
            <summary>
            The origin of the datagram sent or received.
            </summary>
        </member>
        <member name="T:Dart.Ftp.ProxyType">
            <summary>
            Enumerates the proxy support provided by this product.
            </summary>
            <example>
        This example demonstrates using the FTP control to connect to an FTP site using Explicit security.
        <code lang="C#">
        private void connectExplicit()
        {
            //Set the proxy type and details
            ftp1.Session.Proxy.Type = ProxyType.User;
            ftp1.Session.Proxy.RemoteEndPoint = new IPEndPoint(myProxyServer, 21);
            ftp1.Session.Proxy.Username = myProxyUsername;
            ftp1.Session.Proxy.Password = myProxyPassword;

            //Connect to 'myServer' through the proxy.
            ftp1.Connect(myServer);

            //Authenticate the user.
            ftp1.Authenticate(myUsername, myPassword);

            //Perform user operations here, such as get a file listing.
            Listing Files = ftp1.List("", "", ListType.Full);

            //Close the connection.
            ftp1.Close();
        }
        </code><code lang="VB">
        Private Sub connectExplicit()
            'Set the proxy type and details
            ftp1.Session.Proxy.Type = ProxyType.User
            ftp1.Session.Proxy.RemoteEndPoint = New IPEndPoint(myProxyServer, 21)
            ftp1.Session.Proxy.Username = myProxyUsername
            ftp1.Session.Proxy.Password = myProxyPassword

            'Connect to 'myServer' through the proxy.
            ftp1.Connect(myServer)

            'Authenticate the user.
            ftp1.Authenticate(myUsername, myPassword)

            'Perform user operations here, such as get a file listing.
            Dim Files As Listing = ftp1.List("", "", ListType.Full)

            'Close the connection.
            ftp1.Close()
        End Sub
        </code></example>
        </member>
        <member name="F:Dart.Ftp.ProxyType.None">
            <summary>
            No server proxy is to be used.
            </summary>
        </member>
        <member name="F:Dart.Ftp.ProxyType.Http">
            <summary>
            An HTTP server proxy is to be used.
            </summary>
        </member>
        <member name="F:Dart.Ftp.ProxyType.Socks4">
            <summary>
            A SOCKS4 server proxy is to be used.
            </summary>
        </member>
        <member name="F:Dart.Ftp.ProxyType.Socks5">
            <summary>
            A SOCKS5 server proxy is to be used.
            </summary>
        </member>
        <member name="F:Dart.Ftp.ProxyType.Open">
            <summary>
            The "OPEN" command is used to connect to an FTP server through this FTP server proxy.
            </summary>
        </member>
        <member name="F:Dart.Ftp.ProxyType.Site">
            <summary>
            The "SITE" command is used to connect to an FTP server through this FTP server proxy.
            </summary>
        </member>
        <member name="F:Dart.Ftp.ProxyType.User">
            <summary>
            The "USER" command is used to connect to an FTP server through this FTP server proxy.
            </summary>
        </member>
        <member name="T:Dart.Ftp.Proxy">
            <summary>
            Describes the server proxy, if any, to connect to.
            </summary>
        </member>
        <member name="M:Dart.Ftp.Proxy.#ctor">
            <summary>
            The default constructor for Proxy
            </summary>
        </member>
        <member name="P:Dart.Ftp.Proxy.RemoteEndPoint">
            <summary>
            IPEndPoint of the server proxy to connect to.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Proxy.Password">
            <summary>
            The password to send to the server proxy. Not used for Socks4.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Proxy.Type">
            <summary>
            The <see cref="T:Dart.Ftp.ProxyType" /> desired.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Proxy.Username">
            <summary>
            The username to send to the server proxy.
            </summary>
        </member>
        <member name="T:Dart.Ftp.Security">
            <summary>
            Holds the configuration used to establish an SSL session.
            </summary>
        </member>
        <member name="M:Dart.Ftp.Security.#ctor">
            <summary>
            The default constructor for Security
            </summary>
        </member>
        <member name="P:Dart.Ftp.Security.CheckCertificateRevocation">
            <summary>
            Indicates whether the certificate revocation list is checked during authentication.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Security.Protocols">
            <summary>
            Gets or sets the SSL/TLS Protocols available for authentication.
            </summary>
            <remarks>
                <para>
            If 'None' is specified in .NET 4.7+ or .NET Core 2.0, the operating system will choose the best protocol to use during authentication, and block protocols that are not secure (with certain exceptions dependent upon the OS). 
            For more information, see the 'Security Protocol' section of the 'Security Implementation' top-level help topic.
            </para>
                <para>
            TLS, SSL2, SSL3, and Default should not be used due to their security vulnerabilities, and cannot be used in projects targeting .NET Core 2.0.
            </para>
            </remarks>
        </member>
        <member name="F:Dart.Ftp.Security.ValidationCallback">
            <summary>
            The delegate that executes after the server provides its certificate to the client.
            </summary>
        </member>
        <member name="T:Dart.Ftp.ClientSecurity">
            <summary>
            Holds the configuration used to establish an SSL client session.
            </summary>
        </member>
        <member name="M:Dart.Ftp.ClientSecurity.#ctor">
            <summary>
            The default constructor for ClientSecurity
            </summary>
        </member>
        <member name="F:Dart.Ftp.ClientSecurity.SelectionCallback">
            <summary>
            The delegate that executes to permit selection of a cient certificate.
            </summary>
            <remarks>
                <para>If null, the <see cref="P:Dart.Ftp.ClientSecurity.Certificates" /> collection will be examined for a valid certifiate.</para>
                <para>The certificate returned in this delegate will supercede any certificate present in the <see cref="P:Dart.Ftp.ClientSecurity.Certificates" /> collection.</para>
            </remarks>
        </member>
        <member name="P:Dart.Ftp.ClientSecurity.Certificates">
            <summary>
            Gets or sets a collection of client certificates to use during authentication.
            </summary>
            <remarks>
                <para>If <see cref="F:Dart.Ftp.ClientSecurity.SelectionCallback" /> is not null, the certificate chosen in the delegate will supercede any certificate present in this collection.</para>
                <para>The first certificate in this collection that passes Microsoft's validation checks will be used during authentication.</para>
            </remarks>
        </member>
        <member name="P:Dart.Ftp.ClientSecurity.TargetHost">
            <summary>
            Gets or sets the remote host to be authenticated.
            </summary>
            <remarks>
                <para>Used internally as the first parameter for <see cref="M:System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)">SslStream.AuthenticateAsClient()</see>, 
            it will typically match the common name of the server-side certificate. .NET also uses this value to maintain an internal cache of SSL sessions that can be re-used.</para>
                <para>If left empty, the value of the configured <see cref="P:Dart.Ftp.IPEndPoint.HostNameOrAddress">RemoteEndPoint.HostNameOrAddress</see> will be used for authentication when available.</para>
            </remarks>
        </member>
        <member name="T:Dart.Ftp.Segment">
            <summary>
            Used to describe a byte[] segment that holds data.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Segment.Buffer">
            <summary>
            Gets the buffer that holds data.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Segment.Offset">
            <summary>
            The offset into the buffer where the data starts.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Segment.Count">
            <summary>
            Byte count of data.
            </summary>
        </member>
        <member name="M:Dart.Ftp.Segment.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Used to create a Segment object that holds a buffer of data.
            </summary>
            <param name="buffer">Byte[] containing data.</param>
            <param name="offset">Offset into the buffer where the data starts.</param>
            <param name="count">Byte count of data.</param>
        </member>
        <member name="T:Dart.Ftp.SocketBase">
            <summary>
            Base class for PowerTCP Components.
            </summary>
        </member>
        <member name="P:Dart.Ftp.SocketBase.Socket">
            <summary>
            Gets the socket used by the component for communications.
            </summary>
            <value>The <see cref="T:System.Net.Sockets.Socket">Socket</see> used for UDP or TCP communications. Returns null when not in use.</value>
        </member>
        <member name="M:Dart.Ftp.SocketBase.Dispose(System.Boolean)">
            <summary>
            Disposes of SocketBase and its associated resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Dart.Ftp.IPEndPoint">
            <summary>
            Allows user to specify a range of IPEndPoints for local binding. Also resolves hostnames and saves them for future use.
            </summary>
        </member>
        <member name="M:Dart.Ftp.IPEndPoint.#ctor">
            <summary>
            Creates an IPEndPoint using IPAddress.Any and an ephemeral port (0).
            </summary>
        </member>
        <member name="M:Dart.Ftp.IPEndPoint.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Creates an IPEndPoint using IPAddress.Any or IPAddress.IPv6Any and an ephemeral port (0).
            </summary>
            <param name="addressFamily">AddressFamily to match.</param>
        </member>
        <member name="M:Dart.Ftp.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Creates an IPEndPoint using a specified IPAddress and port.
            </summary>
            <param name="address">An IPv4 or IPv6 address.</param>
            <param name="port">The port to bind to.</param>
        </member>
        <member name="M:Dart.Ftp.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            Creates an IPEndPoint using an IPAddress, port, and port range.
            </summary>
            <param name="address">An IPv4 or IPv6 address.</param>
            <param name="port">The port to bind to.</param>
            <param name="range">The range of ports, starting at port, to attempt to bind to.</param>
            <para>
            The socket will try to bind to the specified <i>port</i>. Upon failure, it will try to bind to each 
            successive port up to (<i>port</i> + <i>range</i>), until successful. 
            An Exception is raised if all binding attempts fail.
            </para>
        </member>
        <member name="M:Dart.Ftp.IPEndPoint.#ctor(System.String)">
            <summary>
            Creates an IPEndPoint using a hostname or string address, and port 0.
            </summary>
            <param name="hostNameOrAddress">A hostname or an IPv4 or IPv6 string address. Empty string resolves to the first local IPv4 network interface.</param>
            <remarks>
                <para>
            The <i>hostNameOrAddress</i> parameter is limited to 126 characters in pre-4.0 versions of the .NET Framework, and 255 characters in versions 4.0 and higher.
            </para>
                <para>
            If <i>hostNameOrAddress</i> is a hostname, resolves to the IPv4 address.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Ftp.IPEndPoint.#ctor(System.String,System.Int32)">
            <summary>
            Creates an IPEndPoint using a hostname or string address, and port.
            </summary>
            <param name="hostNameOrAddress">A hostname or an IPv4 or IPv6 string address. Empty string resolves to the first local IPv4 network interface.</param>
            <param name="port">The port to bind to.</param>
            <remarks>
                <para>
            The <i>hostNameOrAddress</i> parameter is limited to 126 characters in pre-4.0 versions of the .NET Framework, and 255 characters in versions 4.0 and higher.
            </para>
                <para>
            If <i>hostNameOrAddress</i> is a hostname, resolves to the IPv4 address.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Ftp.IPEndPoint.#ctor(System.String,System.Net.Sockets.AddressFamily,System.Int32)">
            <summary>
            Creates an IPEndPoint using a hostname or address, port, and AddressFamily.
            </summary>
            <param name="hostNameOrAddress">A hostname or string address. Empty string resolves to the first local network interface in the specified AddressFamily.</param>
            <param name="addressFamily">The <see cref="T:System.Net.Sockets.AddressFamily" /> to match if resolving a hostname.</param>
            <param name="port">The port to bind to.</param>
            <remarks>
                <para>
            The <i>hostNameOrAddress</i> parameter is limited to 126 characters in pre-4.0 versions of the .NET Framework, and 255 characters in versions 4.0 and higher.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Ftp.IPEndPoint.#ctor(System.String,System.Net.Sockets.AddressFamily,System.Int32,System.Int32)">
            <summary>
            Creates an IPEndPoint using a hostname or address, address family, port and range.
            </summary>
            <param name="hostNameOrAddress">A hostname or string address. Empty string resolves to the first local network interface in the specified AddressFamily.</param>
            <param name="addressFamily">The <see cref="T:System.Net.Sockets.AddressFamily">AddressFamily</see> to match if resolving a hostname.</param>
            <param name="port">The port to bind to.</param>
            <param name="range">The range of ports, starting at port, to attempt to bind to.</param>
            <remarks>
                <para>
            The socket will try to bind to the specified <i>port</i>. Upon failure, it will try with each 
            successive port up to (<i>port</i> + <i>range</i>), until successful. 
            An Exception is raised if all binding attempts fail.
            </para>
                <para>
            The <i>hostNameOrAddress</i> parameter is limited to 126 characters in pre-4.0 versions of the .NET Framework, and 255 characters in versions 4.0 and higher.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Ftp.IPEndPoint.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates an IPEndPoint using a hostname or address, address, port and range.
            </summary>
            <param name="hostNameOrAddress">A hostname or string address.</param>
            <param name="address">The IPAddress in string notation.</param>
            <param name="port">The port to bind to.</param>
            <param name="range">The range of ports, starting at port, to attempt to bind to.</param>
            <remarks>
                <para>
            This constructor is typically used to serialize the IPEndPoint and does not resolve hostNameOrAddress. 
            The hostname can be needed for some proxies.
            </para>
            </remarks>
        </member>
        <member name="P:Dart.Ftp.IPEndPoint.HostNameOrAddress">
            <summary>
            Gets or sets the host name or string address resolved to create this IPEndPoint. Performs a DNS resolution when set to a host name.
            </summary>
            <remarks>The value of this property is limited to 126 characters in pre-4.0 versions of the .NET Framework,
            and 255 characters in versions 4.0 and higher. IDN encoding is performed for DNS resolution if a non-ASCII hostname is provided.</remarks>
        </member>
        <member name="P:Dart.Ftp.IPEndPoint.HostNameOrAddressColonPort">
            <summary>
            The host name or address used to create this IPEndPoint with ":port" appended.
            </summary>
            <remarks>If HostNameOrAddress is an IPv6 address, the format includes square brackets as follows: [xx:yy...zz]:port.</remarks>
        </member>
        <member name="P:Dart.Ftp.IPEndPoint.Port">
            <summary>
            Gets or sets the port number of the endpoint.
            </summary>
        </member>
        <member name="P:Dart.Ftp.IPEndPoint.Address">
            <summary>
            Gets or sets the address of the endpoint.
            </summary>
        </member>
        <member name="F:Dart.Ftp.IPEndPoint.Range">
            <summary>
            The socket will be bound to a port between IPEndPoint.Port and (IPEndPoint.Port + Range), inclusive.
            </summary>
        </member>
        <member name="M:Dart.Ftp.IPEndPoint.GetSchema">
            <summary>
            This method is only used by IXmlSerializable.
            </summary>
            <seealso cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />
        </member>
        <member name="M:Dart.Ftp.IPEndPoint.ReadXml(System.Xml.XmlReader)">
            <summary>
            This method is only used by IXmlSerializable.
            </summary>
            <seealso cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
        </member>
        <member name="M:Dart.Ftp.IPEndPoint.WriteXml(System.Xml.XmlWriter)">
            <summary>
            This method is only used by IXmlSerializable.
            </summary>
            <seealso cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
        </member>
        <member name="T:Dart.Ftp.SocketOption">
            <summary>
            Contains socket options that may be set by TCP and UDP sockets. These options are automatically applied to the connection used.
            </summary>
        </member>
        <member name="P:Dart.Ftp.SocketOption.ExclusiveAddressUse">
            <summary>
            When set to true, forbids multiple socket bindings to the same address.
            <remarks>Set this value to true to ensure you have exclusive use of the local endpoint. Socket.ExclusiveAddressUse is set to this
            value before Socket.Bind is used.</remarks></summary>
        </member>
        <member name="F:Dart.Ftp.SocketOption.LocalEndPoint">
            <summary>
            Gets or sets the desired local IPEndPointRange (address, port, range) the socket should be bound to.
            </summary>
            <remarks>
            Socket.Bind will be used bind the socket to the specified endpoint(s).
            .mjb.11-17-10.Remove from public interface...set from within Connect() instead.
            </remarks>
        </member>
        <member name="P:Dart.Ftp.SocketOption.ReceiveBufferSize">
            <summary>
            Gets or sets a value that specifies the size of the system receive buffer.
            </summary>
            <value>An integer with a default value of 32786.</value>
            <remarks>
                <para>
                Increasing the buffer size may help performance when transferring large amounts of data,
                or when high bandwidth, high latency connections (such as a satellite broadband provider) are used.
                </para>
                <para>
                The value cannot be changed on CF devices.
                </para>
            </remarks>
        </member>
        <member name="P:Dart.Ftp.SocketOption.ReceiveTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which the underlying Socket.Receive call will time out.
            </summary>
            <value>The time-out value in milliseconds.</value>
            <remarks>
            A value of 0 or -1 indicates an infinite time-out period.
            </remarks>
        </member>
        <member name="P:Dart.Ftp.SocketOption.ReuseAddress">
            <summary>
            When set to true, allows multiple socket bindings to the same address.
            <remarks>Set this value to true to allow multiple sockets to bind to the same local address.</remarks></summary>
        </member>
        <member name="P:Dart.Ftp.SocketOption.SendBufferSize">
            <summary>
            Gets or sets a value that specifies the size of the system send buffer.
            </summary>
            <value>An integer with a default value of 8192.</value>
            <remarks>
                <para>
                Increasing the buffer size may help performance when transferring large amounts of data,
                or when high bandwidth, high latency connections (such as a satellite broadband provider) are used.
                </para>
            </remarks>
        </member>
        <member name="P:Dart.Ftp.SocketOption.SendTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which the underlying Socket Send call will time out.
            </summary>
            <value>The time-out value in milliseconds. The default value is 0, which indicates an infinite time-out period.</value>
            <remarks>
                <para>
                Values between 1 and 499 will be changed to 500, as 500 is the minimum positive value. 
                Values of 0 and -1 indicate an infinite time-out period.
                </para>
                <para>
                This option has no affect on CF devices (the Write method will not time out).
                </para>
            </remarks>
        </member>
        <member name="T:Dart.Ftp.TcpBase">
            <summary>
            Base class for components utilizing protocols built upon the TCP protocol.
            </summary>
        </member>
        <member name="M:Dart.Ftp.TcpBase.Marshal(Dart.Ftp.Data,System.String,System.Object)">
            <summary>
            Marshals data to the UI thread. 
            </summary>
            <param name="data">
                <see cref="E:Dart.Ftp.TcpBase.Data" /> to be marshaled.</param>
            <param name="message">Text message to be marshaled.</param>
            <param name="state">State information to be marshaled.</param>
            <remarks>
                <para>
                This method is used to marshal data from a worker thread to the UI thread for typical display purposes. 
                It calls the <see cref="M:Dart.Ftp.TcpBase.OnData(Dart.Ftp.DataEventArgs)" /> method, which raises the <see cref="E:Dart.Ftp.TcpBase.Data" /> event.
                </para>
                <para>
                See the <see cref="P:Dart.Ftp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
                </para>
            </remarks>
            <example>
        This example demonstrates execution of a looping Read on a worker thread, and marshaling the data to the UI.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            myComponent.Start(readLoopWorker, null);
        }

        private void readLoopWorker(object state)
        {
            byte[] buffer = new byte[1024];
            Data data = myComponent.Read(buffer);
            while (data != null)
            {
                myComponent.Marshal(data, "", null);
                data = myComponent.Read(buffer);
            }
            myComponent.Close();
        }

        void myComponent_Data(object sender, Dart.Sockets.DataEventArgs e)
        {
            textBox1.AppendText(e.Data.ToString());
        }
        </code><code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            myComponent.Start(AddressOf readLoopWorker, Nothing)
        End Sub

        Private Sub readLoopWorker(ByVal state As Object)
            Dim buffer(1023) As Byte
            Dim data As Data = myComponent.Read(buffer)
            Do While data IsNot Nothing
                myComponent.Marshal(data, "", Nothing)
                data = myComponent.Read(buffer)
            Loop
            myComponent.Close()
        End Sub

        Private Sub myComponent_Data(ByVal sender As Object, ByVal e As Dart.Sockets.DataEventArgs)
            textBox1.AppendText(e.Data.ToString())
        End Sub
        </code></example>
        </member>
        <member name="E:Dart.Ftp.TcpBase.Data">
            <summary>
            Raised when <see cref="M:Dart.Ftp.TcpBase.Marshal(Dart.Ftp.Data,System.String,System.Object)" /> is used. 
            </summary>
            <remarks>
                See the <see cref="P:Dart.Ftp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
            </remarks>
        </member>
        <member name="E:Dart.Ftp.TcpBase.StateChanged">
            <summary>
            Raised when the value of the State property changes.
            </summary>
            <remarks>
                <para>
            See the <see cref="P:Dart.Ftp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
            updating UI controls in your event handler.
            </para>
                <para>
            This event can be raised during a Read call if the remote host closes the connection. In this scenario, a form 
            should not be disposed of within this event handler if the Dart component was created on the form (this includes 
            calling Form.Close if Form.Show was used to show it). Instead, the component can be created elsewhere and passed to 
            the form, or the form can be disposed of after the posted Read returns.
            </para>
            </remarks>
            <example>
        This example demonstrates using the StateChanged event and State property to update the UI.
        <code lang="C#">
        private void myComponent_StateChanged(object sender, EventArgs e)
        {
            if (myComponent.State == ConnectionState.Closed)
                this.Text = "Not Connected";
            else if (myComponent.State == ConnectionState.Connected)
                this.Text = "Connected to " + myComponent.RemoteEndPoint.ToString();
            else
                this.Text = "Securely connected to " + myComponent.RemoteEndPoint.ToString();
        }
        </code><code lang="VB">
        Private Sub myComponent_StateChanged(ByVal sender As Object, ByVal e As EventArgs)
            If myComponent.State = ConnectionState.Closed Then
                Me.Text = "Not Connected"
            ElseIf myComponent.State = ConnectionState.Connected Then
                Me.Text = "Connected to " &amp; myComponent.RemoteEndPoint.ToString()
            Else
                Me.Text = "Securely connected to " &amp; myComponent.RemoteEndPoint.ToString()
            End If
        End Sub
        </code></example>
        </member>
        <member name="E:Dart.Ftp.TcpBase.Log">
            <summary>
            Raised when data is read or written.
            </summary>
            <remarks>
                The handler must be added before connecting.
                See the <see cref="P:Dart.Ftp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
            </remarks>
            <example>
        This example demonstrates logging sent and received data to a textbox.
        <code lang="C#">
        private void myComponent_Log(object sender, DataEventArgs e)
        {
            string prompt = (e.Data.Direction == DataDirection.In) ? "Recv: " : "Sent: ";
            textBox1.AppendText(prompt + e.Data.ToString() + Environment.NewLine);
        }
        </code><code lang="VB">
        Private Sub myComponent_Log(ByVal sender As Object, ByVal e As DataEventArgs)
            Dim prompt As String = If(e.Data.Direction = DataDirection.In, "Recv: ", "Sent: ")
            textBox1.AppendText(prompt &amp; e.Data.ToString() &amp; Environment.NewLine)
        End Sub
        </code></example>
        </member>
        <member name="P:Dart.Ftp.TcpBase.State">
            <summary>
            Gets the status of the connection as of the last socket operation.
            </summary>
            <example>
        This example demonstrates using the StateChanged event and State property to update the UI.
        <code lang="C#">
        private void myComponent_StateChanged(object sender, EventArgs e)
        {
            if (myComponent.State == ConnectionState.Closed)
                this.Text = "Not Connected";
            else if (myComponent.State == ConnectionState.Connected)
                this.Text = "Connected to " + myComponent.RemoteEndPoint.ToString();
            else
                this.Text = "Securely connected to " + myComponent.RemoteEndPoint.ToString();
        }
        </code><code lang="VB">
        Private Sub myComponent_StateChanged(ByVal sender As Object, ByVal e As EventArgs)
            If myComponent.State = ConnectionState.Closed Then
                Me.Text = "Not Connected"
            ElseIf myComponent.State = ConnectionState.Connected Then
                Me.Text = "Connected to " &amp; myComponent.RemoteEndPoint.ToString()
            Else
                Me.Text = "Securely connected to " &amp; myComponent.RemoteEndPoint.ToString()
            End If
        End Sub
        </code></example>
        </member>
        <member name="M:Dart.Ftp.TcpBase.AuthenticateAsClient(Dart.Ftp.ClientSecurity)">
            <summary>
            Authenticates the server when establishing a secure connection.
            </summary>
            <param name="security">Security parameters used during authentication.</param>
            <remarks>
                <para>
            The security.TargetHost should match the server certificate name. If authentication fails, an <see cref="T:System.Security.Authentication.AuthenticationException">AuthenticationException</see> will occur.
            </para>
                <para>
            To accept or reject a certificate "on-the-fly" implement a <see cref="F:Dart.Ftp.Security.ValidationCallback">ClientSecurity.ValidationCallback</see> function.
            </para>
                <para>
            To select a client certificate "on-the-fly" implement a <see cref="F:Dart.Ftp.ClientSecurity.SelectionCallback">ClientSecurity.SelectionCallback</see> function.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Ftp.TcpBase.AuthenticateAsClient(Dart.Ftp.TcpSession)">
            <summary>
            Authenticates the server when establishing a secure connection.
            </summary>
            <param name="session">Session parameters used during authentication.</param>
            <remarks>
                <para>
            Uses <see cref="P:Dart.Ftp.Session.RemoteEndPoint" />, <see cref="P:Dart.Ftp.TcpSession.Proxy" /> and <see cref="P:Dart.Ftp.TcpSession.Security" /> to specify
            <see cref="F:Dart.Ftp.Security.ValidationCallback" />, <see cref="F:Dart.Ftp.ClientSecurity.SelectionCallback" />, <see cref="P:Dart.Ftp.ClientSecurity.TargetHost" />,
            <see cref="P:Dart.Ftp.ClientSecurity.Certificates" />, <see cref="P:Dart.Ftp.Security.Protocols" />, and <see cref="P:Dart.Ftp.Security.CheckCertificateRevocation" />.
            </para>
                <para>If session.Security.TargetHost is not specified, then session.RemoteEndPoint.HostNameOrAddress will be used instead.
            session.Security.TargetHost should match the server certificate name. If authentication fails, an <see cref="T:System.Security.Authentication.AuthenticationException">AuthenticationException</see> will occur.
            </para>
                <para>
            To accept or reject a certificate "on-the-fly" implement a <see cref="F:Dart.Ftp.Security.ValidationCallback">TcpSession.Security.ValidationCallback</see> function.
            </para>
                <para>
            To select a client certificate "on-the-fly" implement a <see cref="F:Dart.Ftp.ClientSecurity.SelectionCallback">TcpSession.Security.SelectionCallback</see> function.
            </para>
            </remarks>
            <example>
        This example demonstrates the AuthenticateAsClient call, the callback that prompts for a local certificate, and the callback that executes when a certificate is received.
        <code lang="C#">
        using System.Net.Security;
        using System.Security.Authentication;
        using System.Security.Cryptography.X509Certificates;

        /// &lt;summary&gt;
        /// Establishes SSL with the provided Tcp object. Typically called immediately after connecting to the server (implicit) 
        /// or after a command such as STARTTLS is sent to the server (explicit).
        /// &lt;/summary&gt;
        /// &lt;param name="myComponent"&gt;Object to establish SSL with&lt;/param&gt;
        /// &lt;param name="session"&gt;The TcpSession object used for connecting to the server&lt;/param&gt;
        /// &lt;param name="serverHostName"&gt;The name of the server&lt;/param&gt;
        /// &lt;param name="protocols"&gt;Protocols the client will accept&lt;/param&gt;
        /// &lt;param name="checkRevocation"&gt;Check certificate revocation list during authentication&lt;/param&gt;
        private void authenticateTcp(Tcp myComponent, TcpSession session, string serverHostName, SslProtocols protocols, bool checkRevocation)
        {
            //Specify configuration and certificate callback function, and authenticate server
            //Specifying TargetHost is only necessary if TcpSession.RemoteEndPoint.HostNameOrAddress doesn't match the server's certificate
            session.Security.TargetHost = serverHostName;
            session.Security.Protocols = protocols;
            session.Security.CheckCertificateRevocation = checkRevocation;
            session.Security.ValidationCallback = certificateReceived;
            session.Security.SelectionCallback = selectLocalCertificate;
            myComponent.AuthenticateAsClient(session);
        }

        /// &lt;summary&gt;
        /// Prompts the user to select a certificate for SSL authentication.
        /// &lt;/summary&gt;
        /// &lt;remarks&gt;
        /// This snippet assumes the presence of the Dart Test Certificate in the user's 'My' certificate store. 
        /// The Dart Test Certificate may be installed from the component's Start Menu program group.
        /// For a UI-based certificate selection, please see the CertificateListForm included with our 
        /// WinForms samples.
        /// &lt;/remarks&gt;
        /// &lt;param name="targetHost"&gt;The host server specified by the client.&lt;/param&gt;
        /// &lt;param name="localCertificates"&gt;A reference to ClientSecurity.Certificates&lt;/param&gt;
        /// &lt;param name="remoteCertificate"&gt;The certificate used to authenticate the remote party.&lt;/param&gt;
        /// &lt;param name="acceptableIssuers"&gt;A String array of certificate issuers acceptable to the remote party.&lt;/param&gt;
        /// &lt;returns&gt;An X509Certificate to use for establishing the SSL connection.&lt;/returns&gt;
        private X509Certificate selectLocalCertificate(Object sender, string targetHost, 
            X509CertificateCollection localCertificates, X509Certificate remoteCertificate, string[] acceptableIssuers)
        {
            //Try to find the Dart Test Certificate
            X509Store certificateStore = new X509Store(StoreName.My);
            certificateStore.Open(OpenFlags.ReadOnly);
            foreach (X509Certificate2 cert in certificateStore.Certificates)
                if (cert.GetNameInfo(X509NameType.SimpleName, true) == "DartdomCA")
                {
                    certificateStore.Close();
                    return cert;
                }
            //Certificate not found, return null
            return null;
        }

        /// &lt;summary&gt;
        /// Presents the server's certificate for validation.
        /// &lt;/summary&gt;
        /// &lt;param name="certificate"&gt;The certificate presented by the server&lt;/param&gt;
        /// &lt;param name="chain"&gt;The chain of certificate authorities associated with the remote certificate&lt;/param&gt;
        /// &lt;param name="sslPolicyErrors"&gt;One or more errors associated with the server's certificate&lt;/param&gt;
        /// &lt;returns&gt;A Boolean value that specifies whether the presented certificate is accepted for authentication&lt;/returns&gt;
        private bool certificateReceived(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
        {
            //Accept certificate if it passed standard validation.
            if (sslPolicyErrors == SslPolicyErrors.None)
                return true;

            string msg = "The server could not be validated for the following reason(s):";

            if ((sslPolicyErrors &amp; SslPolicyErrors.RemoteCertificateNotAvailable) == SslPolicyErrors.RemoteCertificateNotAvailable)
                msg += Environment.NewLine + "    -The server did not present a certificate.";
            else
            {
                if ((sslPolicyErrors &amp; SslPolicyErrors.RemoteCertificateNameMismatch) == SslPolicyErrors.RemoteCertificateNameMismatch)
                    msg += Environment.NewLine + "    -Certificate name mismatch.";
                if ((sslPolicyErrors &amp; SslPolicyErrors.RemoteCertificateChainErrors) == SslPolicyErrors.RemoteCertificateChainErrors)
                {
                    msg += Environment.NewLine + "    -Certificate chain errors:" + Environment.NewLine;

                    foreach (X509ChainStatus item in chain.ChainStatus)
                        msg += "    --" + item.StatusInformation;
                }
            }

            //Prompt to override security check
            msg += Environment.NewLine + "Override security check?";
            if (MessageBox.Show(msg, "Security Alert: Server could not be validated", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                return true;
            else
                return false;
        }
        </code><code lang="VB">
        Imports System.Net.Security
        Imports System.Security.Authentication
        Imports System.Security.Cryptography.X509Certificates

        ''' &lt;summary&gt;
        ''' Establishes SSL with the provided Tcp object. Typically called immediately after connecting to the server (implicit) 
        ''' or after a command such as STARTTLS is sent to the server (explicit).
        ''' &lt;/summary&gt;
        ''' &lt;param name="myComponent"&gt;Object to establish SSL with&lt;/param&gt;
        ''' &lt;param name="session"&gt;The TcpSession object used for connecting to the server&lt;/param&gt;
        ''' &lt;param name="serverHostName"&gt;The name of the server&lt;/param&gt;
        ''' &lt;param name="protocols"&gt;Protocols the client will accept&lt;/param&gt;
        ''' &lt;param name="checkRevocation"&gt;Check certificate revocation list during authentication&lt;/param&gt;
        Private Sub authenticateTcp(ByVal myComponent As Tcp, ByVal session As TcpSession, ByVal serverHostName As String, ByVal protocols As SslProtocols, ByVal checkRevocation As Boolean)
            'Specify configuration and certificate callback function, and authenticate server
            'Specifying TargetHost is only necessary if TcpSession.RemoteEndPoint.HostNameOrAddress doesn't match the server's certificate
            session.Security.TargetHost = serverHostName
            session.Security.Protocols = protocols
            session.Security.CheckCertificateRevocation = checkRevocation
            session.Security.ValidationCallback = AddressOf certificateReceived
            session.Security.SelectionCallback = AddressOf selectLocalCertificate
            myComponent.AuthenticateAsClient(session)
        End Sub

        ''' &lt;summary&gt;
        ''' Prompts the user to select a certificate for SSL authentication.
        ''' &lt;/summary&gt;
        ''' &lt;remarks&gt;
        ''' This snippet assumes the presence of the Dart Test Certificate in the user's 'My' certificate store. 
        ''' The Dart Test Certificate may be installed from the component's Start Menu program group.
        ''' For a UI-based certificate selection, please see the CertificateListForm included with our 
        ''' WinForms samples.
        ''' &lt;/remarks&gt;
        ''' &lt;param name="targetHost"&gt;The host server specified by the client.&lt;/param&gt;
        ''' &lt;param name="localCertificates"&gt;A reference to ClientSecurity.Certificates&lt;/param&gt;
        ''' &lt;param name="remoteCertificate"&gt;The certificate used to authenticate the remote party.&lt;/param&gt;
        ''' &lt;param name="acceptableIssuers"&gt;A String array of certificate issuers acceptable to the remote party.&lt;/param&gt;
        ''' &lt;returns&gt;An X509Certificate to use for establishing the SSL connection.&lt;/returns&gt;
        Private Function selectLocalCertificate(ByVal sender As Object, ByVal targetHost As String, ByVal localCertificates As X509CertificateCollection, ByVal remoteCertificate As X509Certificate, ByVal acceptableIssuers() As String) As X509Certificate
            'Try to find the Dart Test Certificate
            Dim certificateStore As New X509Store(StoreName.My)
            certificateStore.Open(OpenFlags.ReadOnly)
            For Each cert As X509Certificate2 In certificateStore.Certificates
                If cert.GetNameInfo(X509NameType.SimpleName, True) = "DartdomCA" Then
                    certificateStore.Close()
                    Return cert
                End If
            Next cert
            'Certificate not found, return null
            Return Nothing
        End Function

        ''' &lt;summary&gt;
        ''' Presents the server's certificate for validation.
        ''' &lt;/summary&gt;
        ''' &lt;param name="certificate"&gt;The certificate presented by the server&lt;/param&gt;
        ''' &lt;param name="chain"&gt;The chain of certificate authorities associated with the remote certificate&lt;/param&gt;
        ''' &lt;param name="sslPolicyErrors"&gt;One or more errors associated with the server's certificate&lt;/param&gt;
        ''' &lt;returns&gt;A Boolean value that specifies whether the presented certificate is accepted for authentication&lt;/returns&gt;
        Private Function certificateReceived(ByVal sender As Object, ByVal certificate As X509Certificate, ByVal chain As X509Chain, ByVal sslPolicyErrors As SslPolicyErrors) As Boolean
            'Accept certificate if it passed standard validation.
            If sslPolicyErrors = System.Net.Security.SslPolicyErrors.None Then
                Return True
            End If

            Dim msg As String = "The server could not be validated for the following reason(s):"

            If (sslPolicyErrors And System.Net.Security.SslPolicyErrors.RemoteCertificateNotAvailable) = System.Net.Security.SslPolicyErrors.RemoteCertificateNotAvailable Then
                msg &amp;= Environment.NewLine &amp; "    -The server did not present a certificate."
            Else
                If (sslPolicyErrors And System.Net.Security.SslPolicyErrors.RemoteCertificateNameMismatch) = System.Net.Security.SslPolicyErrors.RemoteCertificateNameMismatch Then
                    msg &amp;= Environment.NewLine &amp; "    -Certificate name mismatch."
                End If
                If (sslPolicyErrors And System.Net.Security.SslPolicyErrors.RemoteCertificateChainErrors) = System.Net.Security.SslPolicyErrors.RemoteCertificateChainErrors Then
                    msg &amp;= Environment.NewLine &amp; "    -Certificate chain errors:" &amp; Environment.NewLine

                    For Each item As X509ChainStatus In chain.ChainStatus
                        msg &amp;= "    --" &amp; item.StatusInformation
                    Next item
                End If
            End If

            'Prompt to override security check
            msg &amp;= Environment.NewLine &amp; "Override security check?"
            If MessageBox.Show(msg, "Security Alert: Server could not be validated", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) = System.Windows.Forms.DialogResult.Yes Then
                Return True
            Else
                Return False
            End If
        End Function
        </code></example>
        </member>
        <member name="P:Dart.Ftp.TcpBase.ConnectTime">
            <summary>
            Returns the DateTime the connection was established.
            </summary>
        </member>
        <member name="P:Dart.Ftp.TcpBase.CloseTime">
            <summary>
            Returns the DateTime the connection was closed.
            </summary>
        </member>
        <member name="P:Dart.Ftp.TcpBase.NetworkStream">
            <summary>
            Returns the <see cref="T:System.Net.Sockets.NetworkStream">NetworkStream</see> object created when Connect() is called.
            </summary>
            <remarks>Returns null when no TCP connection exists.</remarks>
        </member>
        <member name="P:Dart.Ftp.TcpBase.RemoteEndPoint">
            <summary>
            Gets the remote address and port of the connection.
            </summary>
            <value>The <see cref="T:System.Net.IPEndPoint">Socket.RemoteEndPoint</see>. This value persists after the connection is closed.</value>
            <example>
        This example demonstrates using the StateChanged event and State property to update the UI.
        <code lang="C#">
        private void myComponent_StateChanged(object sender, EventArgs e)
        {
            if (myComponent.State == ConnectionState.Closed)
                this.Text = "Not Connected";
            else if (myComponent.State == ConnectionState.Connected)
                this.Text = "Connected to " + myComponent.RemoteEndPoint.ToString();
            else
                this.Text = "Securely connected to " + myComponent.RemoteEndPoint.ToString();
        }
        </code><code lang="VB">
        Private Sub myComponent_StateChanged(ByVal sender As Object, ByVal e As EventArgs)
            If myComponent.State = ConnectionState.Closed Then
                Me.Text = "Not Connected"
            ElseIf myComponent.State = ConnectionState.Connected Then
                Me.Text = "Connected to " &amp; myComponent.RemoteEndPoint.ToString()
            Else
                Me.Text = "Securely connected to " &amp; myComponent.RemoteEndPoint.ToString()
            End If
        End Sub
        </code></example>
        </member>
        <member name="P:Dart.Ftp.TcpBase.SocketOption">
            <summary>
            Gets and sets the socket options for classes derived from TcpBase.
            </summary>
        </member>
        <member name="P:Dart.Ftp.TcpBase.SslStream">
            <summary>
            Returns the <see cref="T:System.Net.Security.SslStream">SslStream</see> object created when AuthenticateAsClient or AuthenticateAsServer are called.
            </summary>
            <remarks>Returns null when no secure connection exists.</remarks>
        </member>
        <member name="M:Dart.Ftp.TcpBase.ShutdownSsl">
            <summary>
            Signals the remote host to shutdown the SSL connection.
            </summary>
            <remarks>
                <para>
                This method provides a means for switching a secure connection to a non-secure connection.
                </para>
            </remarks>
        </member>
        <member name="M:Dart.Ftp.TcpBase.Connect(Dart.Ftp.TcpSession)">
            <summary>
            Connect to a server using the configuration specified by <i>session</i>.
            </summary>
            <param name="session">Used to specify the local and remote endpoints, and proxy configuration.</param>
        </member>
        <member name="M:Dart.Ftp.TcpBase.ConnectAsync(Dart.Ftp.TcpSession,Dart.Ftp.TcpAsyncCallback,System.Object)">
            <summary>
            Connect to a server using the configuration specified by <i>session</i>.
            </summary>
            <param name="session">Used to specify the local and remote endpoints, and proxy configuration.</param>
            <param name="callback">A <see cref="T:Dart.Ftp.TcpAsyncCallback" /> delegate referencing the method to invoke on an IO completion thread when the operation completes.</param>
            <param name="state">Object to pass into the callback method when the operation completes; can be null.</param>
        </member>
        <member name="M:Dart.Ftp.TcpBase.Close">
            <summary>
            Gracefully closes the connection.
            </summary>
            <remarks>
                <para>
                This method enters a normal TIME_WAIT state after the connection is closed.
                </para>
            </remarks>
        </member>
        <member name="M:Dart.Ftp.TcpBase.Abort">
            <summary>
            Performs a hard close of the connection.
            </summary>
            <remarks>
                <para>
                This method resets the connection and immediately clears the socket state.
                </para>
            </remarks>
        </member>
        <member name="M:Dart.Ftp.TcpBase.GetStream">
            <summary>
            Provides access to the underlying Stream.
            </summary>
            <returns>The underlying <see cref="T:System.IO.Stream">Stream</see> object used by the component.</returns>
            <remarks>Derived classes can override this method to provide a stream that implements an upper-layer protocol.</remarks>
        </member>
        <member name="M:Dart.Ftp.TcpBase.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Receives data from the remote host.
            </summary>
            <param name="buffer">The byte array used to store the received data.</param>
            <param name="offset">The position in the buffer to store the data.</param>
            <param name="count">The maximum number of bytes to receive.</param>
            <returns>
            A <see cref="E:Dart.Ftp.TcpBase.Data">Data</see> object encapsulating the received data. Returns null if the socket is closed.
            </returns>
            <remarks>
                <para>
            This method performs a single socket read, blocking until at least one byte is read, up to as much 
            data as is available on the socket, <i>count</i> bytes, or <i>buffer</i>.Length, whichever is lowest. 
            A SocketException indicating SocketError.Timeout will not result in the socket being closed; 
            other SocketExceptions are fatal and the socket is automatically closed by the class.
            </para>
                <para>
            The <see cref="P:Dart.Ftp.TcpSocketOption.ReceiveTimeout">ReceiveTimeout</see> property controls how 
            long this method will block before throwing a Timeout exception.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Ftp.TcpBase.Read(System.Byte[])">
            <summary>
            Receives data from the remote host.
            </summary>
            <param name="buffer">The byte array used to store the received data.</param>
            <returns>
            A <see cref="E:Dart.Ftp.TcpBase.Data">Data</see> object encapsulating the received data. Returns null if the socket is closed.
            </returns>
            <remarks>
                <para>
            This method performs a single socket read, blocking until at least one byte is read, up to as much 
            data as is available on the socket or <i>buffer</i>.Length, whichever is lowest.
            </para>
                <para>
            This method will block until data is available or the <see cref="P:Dart.Ftp.TcpSocketOption.ReceiveTimeout">ReceiveTimeout</see> has expired.
            </para>
            </remarks>
            <example>
        This example demonstrates execution of a looping Read on a worker thread, and marshaling the data to the UI.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            myComponent.Start(readLoopWorker, null);
        }

        private void readLoopWorker(object state)
        {
            byte[] buffer = new byte[1024];
            Data data = myComponent.Read(buffer);
            while (data != null)
            {
                myComponent.Marshal(data, "", null);
                data = myComponent.Read(buffer);
            }
            myComponent.Close();
        }

        void myComponent_Data(object sender, Dart.Sockets.DataEventArgs e)
        {
            textBox1.AppendText(e.Data.ToString());
        }
        </code><code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs)
            myComponent.Start(AddressOf readLoopWorker, Nothing)
        End Sub

        Private Sub readLoopWorker(ByVal state As Object)
            Dim buffer(1023) As Byte
            Dim data As Data = myComponent.Read(buffer)
            Do While data IsNot Nothing
                myComponent.Marshal(data, "", Nothing)
                data = myComponent.Read(buffer)
            Loop
            myComponent.Close()
        End Sub

        Private Sub myComponent_Data(ByVal sender As Object, ByVal e As Dart.Sockets.DataEventArgs)
            textBox1.AppendText(e.Data.ToString())
        End Sub
        </code></example>
        </member>
        <member name="M:Dart.Ftp.TcpBase.ReadToDelimiter(System.String)">
            <summary>
            Read until the delimiter is found, an exception is thrown, or the connection is closed.
            </summary>
            <param name="delimiter">A delimiter to search for.</param>
            <returns>
            A <see cref="E:Dart.Ftp.TcpBase.Data">Data</see> object encapsulating the received data.
            </returns>
            <remarks>
                <para>
            This method blocks until the delimiter is found, an exception is thrown, or the server closes the connection.
            The value of Data.Delimiter is set to the found delimiter, if any.
            </para>
                <para>
            If a DataException is thrown, the <see cref="F:Dart.Ftp.DataException.DataRead" /> property contains
            any data received prior to the exception.
            </para>
            </remarks>
            <exception cref="T:Dart.Ftp.DataException">
            The delimiter was not found. The <see cref="F:Dart.Ftp.DataException.DataRead" /> property contains any data received before the failure occurred.
            </exception>
        </member>
        <member name="M:Dart.Ftp.TcpBase.ReadToDelimiter(System.Byte[])">
            <summary>
            Read until the delimiter is found, an exception is thrown, or the connection is closed.
            </summary>
            <param name="delimiter">The delimiter to search for.</param>
            <returns>
            A <see cref="E:Dart.Ftp.TcpBase.Data">Data</see> object encapsulating the received data.
            </returns>
            <remarks>
                <para>
            This method blocks until the delimiter is found, an exception is thrown, or the server closes the 
            connection. The value of Data.Delimiter is set to the found delimiter, if any.
            </para>
                <para>
            If a DataException is thrown, the  <see cref="F:Dart.Ftp.DataException.DataRead" /> property contains any data 
            received prior to the exception.
            </para>
            </remarks>
            <exception cref="T:Dart.Ftp.DataException">
            The delimiter was not found. The <see cref="F:Dart.Ftp.DataException.DataRead" /> property contains any data 
            received before the failure occurred.
            </exception>
        </member>
        <member name="M:Dart.Ftp.TcpBase.ReadToDelimiter(System.String[])">
            <summary>
            Read until a delimiter is found, an exception is thrown, or the connection is closed.
            </summary>
            <param name="delimiters">An array of delimiters to search for.</param>
            <returns>
                <see cref="E:Dart.Ftp.TcpBase.Data">Data</see> object encapsulating the received data.
            </returns>
            <remarks>
                <para>
            This method blocks until a delimiter is found, an exception is thrown, or the server closes the connection. 
            The value of Data.Delimiter is set to the found delimiter, if any.
            </para>
                <para>
            If a DataException is thrown, the  <see cref="F:Dart.Ftp.DataException.DataRead" /> property contains any data received prior to the exception.
            </para>
            </remarks>
            <exception cref="T:Dart.Ftp.DataException">
            The delimiter was not found. The <see cref="F:Dart.Ftp.DataException.DataRead" /> property contains any data received before the failure occurred.
            </exception>
        </member>
        <member name="M:Dart.Ftp.TcpBase.ReadToDelimiter(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Read until a delimiter is found, an exception is thrown, or the connection is closed.
            </summary>
            <param name="delimiters">A list of delimiters to search for.</param>
            <returns>
            A <see cref="E:Dart.Ftp.TcpBase.Data">Data</see> object encapsulating the received data.
            </returns>
            <remarks>
                <para>
            This method blocks until a delimiter is found, an exception is thrown, or the server closes the connection. 
            The value of Data.Delimiter is set to the found delimiter, if any.
            </para>
                <para>
            If a DataException is thrown, the  <see cref="F:Dart.Ftp.DataException.DataRead" /> property contains any data received prior to the exception.
            </para>
            </remarks>
            <exception cref="T:Dart.Ftp.DataException">
            The delimiter was not found. The <see cref="F:Dart.Ftp.DataException.DataRead" /> property contains any data received before the failure occurred.
            </exception>
        </member>
        <member name="M:Dart.Ftp.TcpBase.ReadAsync(System.Byte[],System.Int32,System.Int32,Dart.Ftp.TcpAsyncCallback,System.Object)">
            <summary>
            Start an asynchronous read on the socket.
            </summary>
            <param name="buffer">The byte array used to store the received data.</param>
            <param name="offset">The position in the buffer to store the data.</param>
            <param name="count">The maximum number of bytes to receive.</param>
            <param name="callback">A <see cref="T:Dart.Ftp.TcpAsyncCallback" /> delegate referencing the method to invoke on an IO completion thread when the operation completes.</param>
            <param name="state">Object to pass into the callback method when the operation completes; can be null.</param>
            <remarks>
            The TCP component is typically used by making blocking calls on a worker (non-UI) thread. This technique keeps development
            simple as there is no need for saving state information, but does require a dedicated thread for each connection. If a dedicated 
            worker thread for each socket is not scalable enough, such as in server applications, developers can instead use 
            the Async methods which utilize IO completion ports. The Async methods do not require a dedicated worker thread for each connection, 
            and the specified <i>callback</i> is invoked on an IO completion thread when the operation completes. This is the best way to create a 
            high-performance server without using dedicated worker threads.
            </remarks>
        </member>
        <member name="M:Dart.Ftp.TcpBase.ReadToCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read until count bytes are read, an exception is thrown, or the connection is closed.
            </summary>
            <param name="buffer">The byte array used to store the received data.</param>
            <param name="offset">The position in the buffer to store the data.</param>
            <param name="count">The number of byte to read.</param>
            <returns>
            A <see cref="E:Dart.Ftp.TcpBase.Data">Data</see> object encapsulating the received data.
            </returns>
            <remarks>
            If a DataException is thrown, the  <see cref="F:Dart.Ftp.DataException.DataRead" /> property contains any data received prior to the exception.
            </remarks>
            <exception cref="T:Dart.Ftp.DataException">
            Count bytes could not be read. The <see cref="F:Dart.Ftp.DataException.DataRead" /> property contains any data received before the failure occurred.
            </exception>
        </member>
        <member name="M:Dart.Ftp.TcpBase.ReadToEnd">
            <summary>
            Read until the connection is closed or an exception is thrown.
            </summary>
            <returns>
            A <see cref="E:Dart.Ftp.TcpBase.Data">Data</see> object encapsulating the received data. Returns null if the socket is closed.
            </returns>
            <remarks>
                <para>
            If a DataException is thrown, the  <see cref="F:Dart.Ftp.DataException.DataRead" /> property contains any data received prior to the exception.
            </para>
            </remarks>
            <exception cref="T:Dart.Ftp.DataException">
            A failure occurred before the normal end of stream was found. The <see cref="F:Dart.Ftp.DataException.DataRead" /> property contains any data 
            received before the failure occurred.
            </exception>
        </member>
        <member name="M:Dart.Ftp.TcpBase.Write(System.Byte[])">
            <summary>
            Sends data to the remote host.
            </summary>
            <param name="buffer">Byte array of data to send.</param>
            <returns>
            A <see cref="E:Dart.Ftp.TcpBase.Data">Data</see> object encapsulating the sent data. Returns null if the socket is closed.
            </returns>
            <remarks>
            This method synchronously sends data to the remote host over an existing connection. It will block until a buffer 
            is available to accept the data or SocketOption.SendTimeout has expired.
            </remarks>
        </member>
        <member name="M:Dart.Ftp.TcpBase.Write(System.String)">
            <summary>
            Sends data to the remote host.
            </summary>
            <param name="data">String of data to send.</param>
            <returns>
            A <see cref="E:Dart.Ftp.TcpBase.Data">Data</see> object encapsulating the sent data. Returns null if the socket is closed.
            </returns>
            <remarks>
            This method synchronously sends data to the remote host over an existing connection. It will block until a buffer is available to accept the data or 
            SocketOption.SendTimeout has expired.
            </remarks>
        </member>
        <member name="M:Dart.Ftp.TcpBase.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends data to the remote host.
            </summary>
            <param name="buffer">Byte array of data to send.</param>
            <param name="offset">The position in the data buffer at which to begin sending data.</param>
            <param name="count">The number of bytes to send.</param>
            <returns>
            A <see cref="E:Dart.Ftp.TcpBase.Data">Data</see> object encapsulating the sent data. Returns null if the socket is closed.
            </returns>
            <remarks>
            This method synchronously sends data to the remote host over an existing connection. It will block until a buffer is available to accept the data or 
            SocketOption.SendTimeout has expired.
            </remarks>
        </member>
        <member name="M:Dart.Ftp.TcpBase.WriteAsync(System.Byte[],System.Int32,System.Int32,Dart.Ftp.TcpAsyncCallback,System.Object)">
            <summary>
            Start an asynchronous write on the socket.
            </summary>
            <param name="buffer">The byte array containing data to be written.</param>
            <param name="offset">The position in the buffer to start writing data from.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="callback">A <see cref="T:Dart.Ftp.TcpAsyncCallback" /> delegate referencing the method to invoke on an IO completion thread when the operation completes.</param>
            <param name="state">Object to pass into the callback method when the operation completes; can be null.</param>
            <remarks>
            The TCP component is typically used by making blocking calls on a worker (non-UI) thread. This technique keeps development
            simple as there is no need for saving state information, but requires a dedicated thread for each connection. If a dedicated 
            worker thread for each socket is not scalable enough, such as in server applications, developers can use 
            Async methods which utilize IO completion ports. Async methods do not require a dedicated worker thread for each connection, 
            and the specified <i>callback</i> is invoked on an IO completion thread when the operation completes. This is the best way to create a 
            scalable, high-performance server.
            </remarks>
        </member>
        <member name="M:Dart.Ftp.TcpBase.ConnectTaskAsync(Dart.Ftp.TcpSession)">
            <summary>
            Connect to a server using the configuration specified by <i>session</i>.
            </summary>
            <param name="session">Used to specify the local and remote endpoints, and proxy configuration.</param>
            <returns>
            An awaitable task that represents the connect operation.
            </returns>
        </member>
        <member name="M:Dart.Ftp.TcpBase.AuthenticateAsClientTaskAsync(Dart.Ftp.ClientSecurity)">
            <summary>
            Authenticates the server when establishing a secure connection.
            </summary>
            <param name="security">Security parameters used during authentication.</param>
            <returns>
            An awaitable task that represents the authentication operation.
            </returns>
            <remarks>
                <para>
            The security.TargetHost should match the server certificate name. If authentication fails, an <see cref="T:System.Security.Authentication.AuthenticationException">AuthenticationException</see> will occur.
            </para>
                <para>
            To accept or reject a certificate "on-the-fly" implement a <see cref="F:Dart.Ftp.Security.ValidationCallback">ClientSecurity.ValidationCallback</see> function.
            </para>
                <para>
            To select a client certificate "on-the-fly" implement a <see cref="F:Dart.Ftp.ClientSecurity.SelectionCallback">ClientSecurity.SelectionCallback</see> function.
            </para>
            </remarks>
        </member>
        <member name="M:Dart.Ftp.TcpBase.AuthenticateAsClientTaskAsync(Dart.Ftp.TcpSession)">
            <summary>
            Authenticates the server when establishing a secure connection.
            </summary>
            <param name="session">Session parameters used during authentication.</param>
            <remarks>
                <para>
            Uses <see cref="P:Dart.Ftp.Session.RemoteEndPoint" />, <see cref="P:Dart.Ftp.TcpSession.Proxy" /> and <see cref="P:Dart.Ftp.TcpSession.Security" /> to specify
            <see cref="F:Dart.Ftp.Security.ValidationCallback" />, <see cref="F:Dart.Ftp.ClientSecurity.SelectionCallback" />, <see cref="P:Dart.Ftp.ClientSecurity.TargetHost" />,
            <see cref="P:Dart.Ftp.ClientSecurity.Certificates" />, <see cref="P:Dart.Ftp.Security.Protocols" />, and <see cref="P:Dart.Ftp.Security.CheckCertificateRevocation" />.
            </para>
                <para>If session.Security.TargetHost is not specifed, then session.RemoteEndPoint.HostNameOrAddress will be used instead.
            session.Security.TargetHost should match the server certificate name. If authentication fails, an <see cref="T:System.Security.Authentication.AuthenticationException">AuthenticationException</see> will occur.
            </para>
                <para>
            To accept or reject a certificate "on-the-fly" implement a <see cref="F:Dart.Ftp.Security.ValidationCallback">TcpSession.Security.ValidationCallback</see> function.
            </para>
                <para>
            To select a client certificate "on-the-fly" implement a <see cref="F:Dart.Ftp.ClientSecurity.SelectionCallback">TcpSession.Security.SelectionCallback</see> function.
            </para>
            </remarks>
            <example>
        This example demonstrates the AuthenticateAsClient call, the callback that prompts for a local certificate, and the callback that executes when a certificate is received.
        <code lang="C#">
        using System.Net.Security;
        using System.Security.Authentication;
        using System.Security.Cryptography.X509Certificates;

        /// &lt;summary&gt;
        /// Establishes SSL with the provided Tcp object. Typically called immediately after connecting to the server (implicit) 
        /// or after a command such as STARTTLS is sent to the server (explicit).
        /// &lt;/summary&gt;
        /// &lt;param name="myComponent"&gt;Object to establish SSL with&lt;/param&gt;
        /// &lt;param name="session"&gt;The TcpSession object used for connecting to the server&lt;/param&gt;
        /// &lt;param name="serverHostName"&gt;The name of the server&lt;/param&gt;
        /// &lt;param name="protocols"&gt;Protocols the client will accept&lt;/param&gt;
        /// &lt;param name="checkRevocation"&gt;Check certificate revocation list during authentication&lt;/param&gt;
        private void authenticateTcp(Tcp myComponent, TcpSession session, string serverHostName, SslProtocols protocols, bool checkRevocation)
        {
            //Specify configuration and certificate callback function, and authenticate server
            //Specifying TargetHost is only necessary if TcpSession.RemoteEndPoint.HostNameOrAddress doesn't match the server's certificate
            session.Security.TargetHost = serverHostName;
            session.Security.Protocols = protocols;
            session.Security.CheckCertificateRevocation = checkRevocation;
            session.Security.ValidationCallback = certificateReceived;
            session.Security.SelectionCallback = selectLocalCertificate;
            myComponent.AuthenticateAsClient(session);
        }

        /// &lt;summary&gt;
        /// Prompts the user to select a certificate for SSL authentication.
        /// &lt;/summary&gt;
        /// &lt;remarks&gt;
        /// This snippet assumes the presence of the Dart Test Certificate in the user's 'My' certificate store. 
        /// The Dart Test Certificate may be installed from the component's Start Menu program group.
        /// For a UI-based certificate selection, please see the CertificateListForm included with our 
        /// WinForms samples.
        /// &lt;/remarks&gt;
        /// &lt;param name="targetHost"&gt;The host server specified by the client.&lt;/param&gt;
        /// &lt;param name="localCertificates"&gt;A reference to ClientSecurity.Certificates&lt;/param&gt;
        /// &lt;param name="remoteCertificate"&gt;The certificate used to authenticate the remote party.&lt;/param&gt;
        /// &lt;param name="acceptableIssuers"&gt;A String array of certificate issuers acceptable to the remote party.&lt;/param&gt;
        /// &lt;returns&gt;An X509Certificate to use for establishing the SSL connection.&lt;/returns&gt;
        private X509Certificate selectLocalCertificate(Object sender, string targetHost, 
            X509CertificateCollection localCertificates, X509Certificate remoteCertificate, string[] acceptableIssuers)
        {
            //Try to find the Dart Test Certificate
            X509Store certificateStore = new X509Store(StoreName.My);
            certificateStore.Open(OpenFlags.ReadOnly);
            foreach (X509Certificate2 cert in certificateStore.Certificates)
                if (cert.GetNameInfo(X509NameType.SimpleName, true) == "DartdomCA")
                {
                    certificateStore.Close();
                    return cert;
                }
            //Certificate not found, return null
            return null;
        }

        /// &lt;summary&gt;
        /// Presents the server's certificate for validation.
        /// &lt;/summary&gt;
        /// &lt;param name="certificate"&gt;The certificate presented by the server&lt;/param&gt;
        /// &lt;param name="chain"&gt;The chain of certificate authorities associated with the remote certificate&lt;/param&gt;
        /// &lt;param name="sslPolicyErrors"&gt;One or more errors associated with the server's certificate&lt;/param&gt;
        /// &lt;returns&gt;A Boolean value that specifies whether the presented certificate is accepted for authentication&lt;/returns&gt;
        private bool certificateReceived(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
        {
            //Accept certificate if it passed standard validation.
            if (sslPolicyErrors == SslPolicyErrors.None)
                return true;

            string msg = "The server could not be validated for the following reason(s):";

            if ((sslPolicyErrors &amp; SslPolicyErrors.RemoteCertificateNotAvailable) == SslPolicyErrors.RemoteCertificateNotAvailable)
                msg += Environment.NewLine + "    -The server did not present a certificate.";
            else
            {
                if ((sslPolicyErrors &amp; SslPolicyErrors.RemoteCertificateNameMismatch) == SslPolicyErrors.RemoteCertificateNameMismatch)
                    msg += Environment.NewLine + "    -Certificate name mismatch.";
                if ((sslPolicyErrors &amp; SslPolicyErrors.RemoteCertificateChainErrors) == SslPolicyErrors.RemoteCertificateChainErrors)
                {
                    msg += Environment.NewLine + "    -Certificate chain errors:" + Environment.NewLine;

                    foreach (X509ChainStatus item in chain.ChainStatus)
                        msg += "    --" + item.StatusInformation;
                }
            }

            //Prompt to override security check
            msg += Environment.NewLine + "Override security check?";
            if (MessageBox.Show(msg, "Security Alert: Server could not be validated", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
                return true;
            else
                return false;
        }
        </code><code lang="VB">
        Imports System.Net.Security
        Imports System.Security.Authentication
        Imports System.Security.Cryptography.X509Certificates

        ''' &lt;summary&gt;
        ''' Establishes SSL with the provided Tcp object. Typically called immediately after connecting to the server (implicit) 
        ''' or after a command such as STARTTLS is sent to the server (explicit).
        ''' &lt;/summary&gt;
        ''' &lt;param name="myComponent"&gt;Object to establish SSL with&lt;/param&gt;
        ''' &lt;param name="session"&gt;The TcpSession object used for connecting to the server&lt;/param&gt;
        ''' &lt;param name="serverHostName"&gt;The name of the server&lt;/param&gt;
        ''' &lt;param name="protocols"&gt;Protocols the client will accept&lt;/param&gt;
        ''' &lt;param name="checkRevocation"&gt;Check certificate revocation list during authentication&lt;/param&gt;
        Private Sub authenticateTcp(ByVal myComponent As Tcp, ByVal session As TcpSession, ByVal serverHostName As String, ByVal protocols As SslProtocols, ByVal checkRevocation As Boolean)
            'Specify configuration and certificate callback function, and authenticate server
            'Specifying TargetHost is only necessary if TcpSession.RemoteEndPoint.HostNameOrAddress doesn't match the server's certificate
            session.Security.TargetHost = serverHostName
            session.Security.Protocols = protocols
            session.Security.CheckCertificateRevocation = checkRevocation
            session.Security.ValidationCallback = AddressOf certificateReceived
            session.Security.SelectionCallback = AddressOf selectLocalCertificate
            myComponent.AuthenticateAsClient(session)
        End Sub

        ''' &lt;summary&gt;
        ''' Prompts the user to select a certificate for SSL authentication.
        ''' &lt;/summary&gt;
        ''' &lt;remarks&gt;
        ''' This snippet assumes the presence of the Dart Test Certificate in the user's 'My' certificate store. 
        ''' The Dart Test Certificate may be installed from the component's Start Menu program group.
        ''' For a UI-based certificate selection, please see the CertificateListForm included with our 
        ''' WinForms samples.
        ''' &lt;/remarks&gt;
        ''' &lt;param name="targetHost"&gt;The host server specified by the client.&lt;/param&gt;
        ''' &lt;param name="localCertificates"&gt;A reference to ClientSecurity.Certificates&lt;/param&gt;
        ''' &lt;param name="remoteCertificate"&gt;The certificate used to authenticate the remote party.&lt;/param&gt;
        ''' &lt;param name="acceptableIssuers"&gt;A String array of certificate issuers acceptable to the remote party.&lt;/param&gt;
        ''' &lt;returns&gt;An X509Certificate to use for establishing the SSL connection.&lt;/returns&gt;
        Private Function selectLocalCertificate(ByVal sender As Object, ByVal targetHost As String, ByVal localCertificates As X509CertificateCollection, ByVal remoteCertificate As X509Certificate, ByVal acceptableIssuers() As String) As X509Certificate
            'Try to find the Dart Test Certificate
            Dim certificateStore As New X509Store(StoreName.My)
            certificateStore.Open(OpenFlags.ReadOnly)
            For Each cert As X509Certificate2 In certificateStore.Certificates
                If cert.GetNameInfo(X509NameType.SimpleName, True) = "DartdomCA" Then
                    certificateStore.Close()
                    Return cert
                End If
            Next cert
            'Certificate not found, return null
            Return Nothing
        End Function

        ''' &lt;summary&gt;
        ''' Presents the server's certificate for validation.
        ''' &lt;/summary&gt;
        ''' &lt;param name="certificate"&gt;The certificate presented by the server&lt;/param&gt;
        ''' &lt;param name="chain"&gt;The chain of certificate authorities associated with the remote certificate&lt;/param&gt;
        ''' &lt;param name="sslPolicyErrors"&gt;One or more errors associated with the server's certificate&lt;/param&gt;
        ''' &lt;returns&gt;A Boolean value that specifies whether the presented certificate is accepted for authentication&lt;/returns&gt;
        Private Function certificateReceived(ByVal sender As Object, ByVal certificate As X509Certificate, ByVal chain As X509Chain, ByVal sslPolicyErrors As SslPolicyErrors) As Boolean
            'Accept certificate if it passed standard validation.
            If sslPolicyErrors = System.Net.Security.SslPolicyErrors.None Then
                Return True
            End If

            Dim msg As String = "The server could not be validated for the following reason(s):"

            If (sslPolicyErrors And System.Net.Security.SslPolicyErrors.RemoteCertificateNotAvailable) = System.Net.Security.SslPolicyErrors.RemoteCertificateNotAvailable Then
                msg &amp;= Environment.NewLine &amp; "    -The server did not present a certificate."
            Else
                If (sslPolicyErrors And System.Net.Security.SslPolicyErrors.RemoteCertificateNameMismatch) = System.Net.Security.SslPolicyErrors.RemoteCertificateNameMismatch Then
                    msg &amp;= Environment.NewLine &amp; "    -Certificate name mismatch."
                End If
                If (sslPolicyErrors And System.Net.Security.SslPolicyErrors.RemoteCertificateChainErrors) = System.Net.Security.SslPolicyErrors.RemoteCertificateChainErrors Then
                    msg &amp;= Environment.NewLine &amp; "    -Certificate chain errors:" &amp; Environment.NewLine

                    For Each item As X509ChainStatus In chain.ChainStatus
                        msg &amp;= "    --" &amp; item.StatusInformation
                    Next item
                End If
            End If

            'Prompt to override security check
            msg &amp;= Environment.NewLine &amp; "Override security check?"
            If MessageBox.Show(msg, "Security Alert: Server could not be validated", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) = System.Windows.Forms.DialogResult.Yes Then
                Return True
            Else
                Return False
            End If
        End Function
        </code></example>
        </member>
        <member name="M:Dart.Ftp.TcpBase.ReadTaskAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Start an awaitable asynchronous read on the socket.
            </summary>
            <param name="buffer">The byte array used to store the received data.</param>
            <param name="offset">The position in the buffer to store the data.</param>
            <param name="count">The maximum number of bytes to receive.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the TResult parameter contains the <see cref="E:Dart.Ftp.TcpBase.Data">Data</see> 
            object encapsulating the received data (null if the socket is closed).
            </returns>
            <remarks>
            ReadTaskAsync encapsulates <see cref="M:Dart.Ftp.TcpBase.ReadAsync(System.Byte[],System.Int32,System.Int32,Dart.Ftp.TcpAsyncCallback,System.Object)" /> and its callback into an easy-to-use awaitable method, leveraging the benefits of 
            IO completion ports without the complexity of callbacks.
            </remarks>
        </member>
        <member name="M:Dart.Ftp.TcpBase.WriteTaskAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Start an awaitable asynchronous write on the socket.
            </summary>
            <param name="buffer">Byte array of data to send.</param>
            <param name="offset">The position in the data buffer at which to begin sending data.</param>
            <param name="count">The number of bytes to send.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the TResult parameter contains the <see cref="E:Dart.Ftp.TcpBase.Data">Data</see> 
            object encapsulating the written data (null if the socket is closed).
            </returns>
            <remarks>
            WriteTaskAsync encapsulates <see cref="M:Dart.Ftp.TcpBase.WriteAsync(System.Byte[],System.Int32,System.Int32,Dart.Ftp.TcpAsyncCallback,System.Object)" /> and its callback into an easy-to-use awaitable method, leveraging the benefits of 
            IO completion ports without the complexity of callbacks.
            </remarks>
        </member>
        <member name="M:Dart.Ftp.TcpBase.Dispose(System.Boolean)">
            <summary>
            Disposes of TcpBase and its associated resources.
            </summary>
        </member>
        <member name="T:Dart.Ftp.TcpSocketOption">
            <summary>
            Contains socket options that may be set by TCP sockets.
            </summary>
        </member>
        <member name="P:Dart.Ftp.TcpSocketOption.KeepAliveTime">
            <summary>
            The connection idle time in milliseconds before TCP will begin sending keepalives.
            </summary>
            <remarks>
                <para>Set to 0 to disable keepalives. Defaults to 7,200,000 (2 hours).</para>
                <para>This property is not implemented in MONO.</para>
            </remarks>
        </member>
        <member name="P:Dart.Ftp.TcpSocketOption.KeepAliveInterval">
            <summary>
            The time in milliseconds between retransmission of keepalives once the KeepAliveTime has expired.
            </summary>
            <remarks>
                <para>
            Once KeepAliveTime has expired, keepalives are sent every KeepAliveInterval milliseconds until a response
            is received, up to the maximum established by TcpMaxDataRetransmissions (OS-level configuration) before the connection is terminated.
            The default is 1000 (1 sec).
            </para>
                <para>This property is not implemented in MONO.</para>
            </remarks>
        </member>
        <member name="P:Dart.Ftp.TcpSocketOption.NoDelay">
            <summary>
            Gets or sets a value that disables the use of Nagle's algorithm so that data is sent immediately.
            </summary>
            <value>False if Nagle's algorithm is used; otherwise true. The default value is false.</value>
            <remarks>
                <para>
                When small pieces of data (such as single bytes) are send many times consecutively, inefficient packets 
                can be sent with one byte of useful data and 40 bytes of header information. 
                Nagle's algorithm specifies that this type of data should be automatically concatenated and sent in a single packet. 
                When true, Nagle's algorithm is defeated and data is immediately sent in a dedicated packet. 
                When false, Nagle's algorithm is used and consecutive Socket Send calls might send data in a single (more efficient) packet.
                </para>
                <para>
                Setting this property to true may result in a speed optimization (because packets are sent immediately, 
                without having to wait to see if Send is called again). 
                Setting this property to false results in data being transmitted more efficiently.
                </para>
            </remarks>
        </member>
        <member name="P:Dart.Ftp.TcpSocketOption.OutOfBandInline">
            <summary>
            Gets or sets a value that indicates whether out-of-band (urgent) data is read as normal in-line data. 
            </summary>
            <value>True if urgent data is to be read as normal in-line data, otherwise false. The default value is false.</value>
            <remarks>
                <para>
                When the "urgent" socket flag is set, the packet contains data that should be acted upon before "non-urgent" data. 
                Setting this property to true will cause this urgent data to be read in-line. 
                To minimize interoperability problems, developers are advised not to use out-of-band data unless it is required
                to interoperate with an existing service.
                </para>
            </remarks>
        </member>
        <member name="P:Dart.Ftp.TcpSocketOption.ReceiveTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time after which the underlying TCP Socket.Receive call will time out.
            </summary>
            <value>The time-out value in milliseconds.</value>
            <remarks>
            Values between 1 and 499 will be changed to 500, as 500 is the minimum positive value. A value of 0 or -1 indicates an infinite time-out period.
            </remarks>
        </member>
        <member name="T:Dart.Ftp.TcpSession">
            <summary>
            Holds the configuration used by TCP.
            </summary>
        </member>
        <member name="M:Dart.Ftp.TcpSession.#ctor">
            <summary>
            Default constructor for TcpSession.
            </summary>
        </member>
        <member name="M:Dart.Ftp.TcpSession.#ctor(Dart.Ftp.IPEndPoint)">
            <summary>
            Constructor for TcpSession with a Remote IPEndPoint parameter.
            </summary>
            <param name="remoteEP">The remote IPEndPoint to connect to.</param>
        </member>
        <member name="P:Dart.Ftp.TcpSession.Security">
            <summary>
            Specifies the client-side SSL options. See the <see cref="T:Dart.Ftp.ClientSecurity" /> class for more information.
            </summary>
            <value>
                <see cref="T:Dart.Ftp.ClientSecurity" />
            </value>
        </member>
        <member name="P:Dart.Ftp.TcpSession.Proxy">
            <summary>
            Defines the optional server proxy configuration.
            </summary>
            <remarks>
            Use this property to define the server proxy configuration.
            </remarks>
        </member>
        <member name="P:Dart.Ftp.TcpSession.ConnectTimeout">
            <summary>
            Gets or sets a value that specifies the amount of time (in milliseconds) after which a call to <see cref="M:Dart.Ftp.TcpBase.Connect(Dart.Ftp.TcpSession)" /> will time out.
            </summary>
            <value>The timeout value in milliseconds. The default value is -1, which defers to the system timeout.</value>
            <remarks>
            This property is used to cancel a connect request early; it does not override the system-level connect timeout.
            </remarks>
        </member>
        <member name="T:Dart.Ftp.Session">
            <summary>
            Holds the configuration common to UDP and TCP.
            </summary>
        </member>
        <member name="M:Dart.Ftp.Session.#ctor">
            <summary>
            Default constructor for Session.
            </summary>
        </member>
        <member name="M:Dart.Ftp.Session.#ctor(Dart.Ftp.IPEndPoint)">
            <summary>
            Constructor for Session with a Remote IPEndPoint parameter.
            </summary>
            <param name="remoteEP">The remote IPEndPoint to connect to.</param>
        </member>
        <member name="P:Dart.Ftp.Session.RemoteEndPoint">
            <summary>
            EndPoint of the remote host to connect to.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Session.LocalEndPoint">
            <summary>
            EndPoint to bind to locally.
            </summary>
            <remarks>
                <para>
            Use this property to control the use of IPv4/IPv6, the IP interface to bind to (for multi-homed hosts), and the port or port-range to use. 
            Defaults to AddressFamily.InterNetworkV4, IPAddress.Any, and a port selected by the system (ephemeral port 0).
            </para>
                <para>
            To use AddressFamily.InterNetworkV6, create a new IPEndPoint that specifies this AddressFamily. A Socket will be created that can connect to
            both IPv4 and IPv6 hosts. This is called a "dual stack", allowing clients to connect to both IPv4 and IPv6 servers, and allowing servers
            to accept connections from both IPv4 and IPv6 clients.
            </para>
                <para>
            If IPEndPoint.Any is not desired, specify the hostname or address in the constructor.
            </para>
                <para>
            If a random ephemeral port is not desired, specify the port or range in the constructor.
            </para>
            </remarks>
        </member>
        <member name="T:Dart.Ftp.DataException">
            <summary>
            Thrown when the expected data could not be read.
            </summary>
        </member>
        <member name="F:Dart.Ftp.DataException.DataRead">
            <summary>
            Data read from the socket before a failure generated this exception.
            </summary>
        </member>
        <member name="T:Dart.Ftp.TcpAsyncCallback">
            <summary>
            References the method to invoke on an IO completion thread when the corresponding asynchronous operation completes.
            </summary>
            <param name="tcp">The TcpBase object that initiated the asynchronous operation.</param>
            <param name="data">The Data object containing received/sent data. Null for connect operations or if the socket is closed.</param>
            <param name="exception">Populated if the operation threw an exception, otherwise null.</param>
            <param name="state">State object passed into the asynchronous call.</param>
        </member>
        <member name="T:Dart.Ftp.ProtocolException">
            <summary>
            Thrown when an upper-layer protocol like FTP, SMTP or POP3 receives a negative response from the server.
            </summary>
            <remarks>This exception is thrown when a server response is negative. For example, 
            if an FTP server returned a "500" respose (indicating a syntax error) to a sent command.</remarks>
        </member>
        <member name="M:Dart.Ftp.ProtocolException.#ctor">
            <summary>
            Initializes a new ProtocolException.
            </summary>
        </member>
        <member name="M:Dart.Ftp.ProtocolException.#ctor(System.String)">
            <summary>
            Initializes a new ProtocolException.
            </summary>
        </member>
        <member name="M:Dart.Ftp.ProtocolException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new ProtocolException.
            </summary>
        </member>
        <member name="M:Dart.Ftp.ProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new ProtocolException.
            </summary>
        </member>
        <member name="T:Dart.Ftp.UnixPath">
            <summary>
            Path manipulation and conversion methods compatible with Unix filesystem paths.
            </summary>
            <remarks>
            Not available via COM.
            </remarks>
        </member>
        <member name="F:Dart.Ftp.UnixPath.UnixDirectorySeparatorChar">
            <summary>
            Unix directory separator character, slash ('/').
            </summary>
        </member>
        <member name="M:Dart.Ftp.UnixPath.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified Unix path string.
            </summary>
            <param name="unixPath">The Unix path of a file or directory.</param>
            <returns>Directory information for <i>unixPath</i>, or null if <i>unixPath</i> denotes a root directory or is null. Returns String.Empty if <i>unixPath</i> does not contain directory information.</returns>
            <remarks>In most cases, the string returned by this method consists of all characters in the path up to but not including the last <see cref="F:Dart.Ftp.UnixPath.UnixDirectorySeparatorChar" />. If the path consists of a root ("/"), null is returned.</remarks>
            <exception cref="T:System.ArgumentException">
                <i>unixPath</i> contains Unix filesystem-illegal characters (NUL), is empty, or contains only white spaces.</exception>
        </member>
        <member name="M:Dart.Ftp.UnixPath.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified Unix path string.
            </summary>
            <param name="unixPath">The Unix path string from which to obtain the file name and extension.</param>
            <returns>
            The characters after the last directory character in <i>unixPath</i>. If the last character of <i>unixPath</i> 
            is a directory separator character, this method returns String.Empty. If <i>unixPath</i> is null, returns null.
            </returns>
            <exception cref="T:System.ArgumentException">
                <i>unixPath</i> contains a Unix filesystem-illegal character, NUL.</exception>
        </member>
        <member name="M:Dart.Ftp.UnixPath.Combine(System.String,System.String)">
            <summary>
            Combines two strings into a Unix path.
            </summary>
            <param name="unixPath1">The first path to combine.</param>
            <param name="unixPath2">The second path to combine.</param>
            <returns>The combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <i>unixPath2</i> contains an absolute path, this method returns <i>unixPath2</i>.</returns>
            <remarks>
                <para>If <i>unixPath1</i> does not end with <see cref="F:Dart.Ftp.UnixPath.UnixDirectorySeparatorChar" />, it is appended to <i>unixPath1</i> before concatenation.</para>
                <para>If <i>unixPath2</i> is a relative path (<i>unixPath2</i> does not start with <see cref="F:Dart.Ftp.UnixPath.UnixDirectorySeparatorChar" />), the result is a concatenation of the two paths, with an intervening separator character. If <i>unixPath2</i> is an absolute path, <i>unixPath2</i> is returned.</para>
                <para>White space is not parsed. Therefore, if <i>unixPath2</i> starts with white space (for example, " /file.txt "), the Combine method appends <i>unixPath2</i> to <i>unixPath1</i> instead of returning only <i>unixPath2</i>.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <i>unixPath1</i> or <i>unixPath2</i> is null.</exception>
            <exception cref="T:System.ArgumentException">
                <i>unixPath1</i> or <i>unixPath2</i> contains a Unix filesystem-illegal character, NUL.</exception>
        </member>
        <member name="M:Dart.Ftp.UnixPath.Combine(System.String[])">
            <summary>
            Combines an array of strings into a Unix path.
            </summary>
            <param name="unixPaths">An array of parts of the path.</param>
            <returns>The combined paths.</returns>
            <remarks>
                <para>
                    <i>unixPaths</i> should be an array of the parts of the path to combine. If the one of the subsequent paths is an absolute path, then the combine operation resets starting with that absolute path, discarding all previous combined paths.</para>
                <para>Zero-length strings are omitted from the combined path.</para>
                <para>White space is not parsed. Therefore, if a path starts with white space (for example, " /file.txt "), the Combine method appends it to the prior paths instead of returning only that path.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <i>unixPaths</i> or one of the string in the array is null.</exception>
            <exception cref="T:System.ArgumentException">One of the strings in the array contains a Unix filesystem-illegal character, NUL.</exception>
        </member>
        <member name="M:Dart.Ftp.UnixPath.ConvertToWindows(System.String)">
            <summary>
            Converts a relative or absolute Unix path to a Windows path fragment, and replaces any Windows filesystem-illegal characters with underscores.
            </summary>
            <param name="unixPath">A relative or absolute Unix path</param>
            <returns>A sanitized Windows path fragment</returns>
        </member>
        <member name="M:Dart.Ftp.UnixPath.ConvertToWindows(System.String,System.String,System.String)">
            <summary>
            Converts a Unix path to a Windows path, replacing <i>unixRoot</i> with <i>windowsRoot</i>, and any Windows filesystem-illegal characters with underscores.
            </summary>
            <param name="unixPath">A relative or absolute Unix path.</param>
            <param name="unixRoot">The root to remove from the beginning of <i>unixPath</i>.</param>
            <param name="windowsRoot">The root to prepend to the Windows path.</param>
            <returns>A sanitized Windows path equivalent to <i>unixPath</i> under <i>windowsRoot</i>.</returns>
            <exception cref="T:System.ArgumentNullException">
                <i>unixPath</i>, <i>unixRoot</i> or <i>windowsRoot</i> is null.</exception>
            <remarks>
            If <i>windowsRoot</i> is an empty string, returns a relative path.
            </remarks>
        </member>
        <member name="M:Dart.Ftp.UnixPath.ConvertToUnix(System.String)">
            <summary>
            Converts a relative or absolute Windows path to a Unix path fragment, and replaces any Unix filesystem-illegal characters with underscores.
            </summary>
            <param name="windowsPath">A Windows path</param>
            <returns>A Unix-compatible path fragment</returns>
            <remarks>
            Typically intended for relative paths, as absolute Windows paths contain root (eg: "C:\" or "\\ServerName"), which may result in unexpected conversions.
            </remarks>
        </member>
        <member name="M:Dart.Ftp.UnixPath.ConvertToUnix(System.String,System.String,System.String)">
            <summary>
            Converts a Windows path to a Unix path, replacing <i>windowsRoot</i> with <i>unixRoot</i>, and any Unix filesystem-illegal characters with underscores.
            </summary>
            <param name="windowsPath">A relative or absolute Windows path.</param>
            <param name="windowsRoot">The root to remove from the beginning of <i>windowsPath</i>.</param>
            <param name="unixRoot">The root to prepend to the Unix path.</param>
            <returns>A sanitized Unix path equivalent to <i>windowsPath</i> under <i>unixRoot</i>.</returns>
            <exception cref="T:System.ArgumentNullException">
                <i>windowsPath</i>, <i>windowsRoot</i> or <i>unixRoot</i> is null.</exception>
            <remarks>
            If <i>unixRoot</i> is an empty string, returns a relative path.
            </remarks>
        </member>
        <member name="T:Dart.Ftp.BaseStream">
            <summary>Abstract base class for ZipEncryptingStream, ZipDecryptingStream, AesEncryptingStream, AesDecryptingStream, UtilityStream and ZStream.</summary>
        </member>
        <member name="M:Dart.Ftp.BaseStream.Close">
            <summary>
				Calls InnerStream.Close.
			</summary>
        </member>
        <member name="M:Dart.Ftp.BaseStream.Flush">
            <summary>
				Updates the underlying repository with the current state of the 
				buffer and then clears the buffer. 
			</summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The Stream is closed.</exception>
            <remarks>
                <p>If the Stream contains any internal Streams as members, this method will also cause the Flush method of all
					internal Streams.
				</p>
                <p>
				This method MUST be called when writing is complete for operations to operate properly. One example is when creating a message 
				comprised of only headers. If Flush is not called, the headers will be lost.
				</p>
            </remarks>
        </member>
        <member name="M:Dart.Ftp.BaseStream.SetLength(System.Int64)">
            <summary>
				Sets the length of the current Stream to the specified value. Always throws a NotSupportedException.
			</summary>
            <param name="value">The value at which to set the length.</param>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
            <remarks>
				This method is not supported, and always throws a NotSupportedException.
			</remarks>
        </member>
        <member name="M:Dart.Ftp.BaseStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
				Sets the position within the current Stream to the specified value. Always throws a NotSupportedException.
			</summary>
            <param name="offset">The desired offset relative to the origin parameter.</param>
            <param name="origin">A value of type SeekOrigin, which acts as the seek reference point.</param>
            <returns>The new position within the stream.</returns>
            <exception cref="T:System.NotSupportedException">Always thrown by this method.</exception>
            <remarks>
				This method is not supported, and always throws a NotSupportedException.
			</remarks>
        </member>
        <member name="P:Dart.Ftp.BaseStream.CanRead">
            <summary>	
				Gets a value indicating whether the current Stream supports reading.
			</summary>
            <value>
				true if reading is currently allowed, and false if not.
			</value>
        </member>
        <member name="P:Dart.Ftp.BaseStream.CanSeek">
            <summary>
				Gets a value indicating whether the current Stream supports seeking.
			</summary>
            <value>
				This property always returns false;
			</value>
            <remarks>
				Streams used by PowerTCP do not support seeking. This property always returns false.
			</remarks>
        </member>
        <member name="P:Dart.Ftp.BaseStream.CanWrite">
            <summary>
				Gets a value indicating whether the current Stream supports writing.
			</summary>
            <value>
				true if the Stream supports writing; false otherwise.
			</value>
        </member>
        <member name="P:Dart.Ftp.BaseStream.Length">
            <summary>
				Gets the length in bytes of the stream.
			</summary>
            <value>
				A long value representing the length of the Stream in bytes.
			</value>
            <remarks>
                <p>If the Stream is a CodingStream or a Stream derived from CodingStream, this property is an estimate and should not be considered accurate. 
				When using a MessageStream, MessageStream.Length cannot be depended on to be completely accurate once an object is set by the user.  It is only precise during write operations.
				With other PowerTCP Streams this number should be accurate.</p>
            </remarks>
            <exception cref="T:System.NotSupportedException">The Stream does not support seeking.</exception>
        </member>
        <member name="P:Dart.Ftp.BaseStream.Position">
            <summary>
				Gets or sets the current position of this stream.
			</summary>
            <value>
				The current position of this stream.
			</value>
            <remarks>
                <p>If the Stream is a CodingStream or a MessageStream or a Stream derived
				from CodingStream or MessageStream, this property can only be set to 0. Setting
				the property to any other value results in a NotSupportedException.</p>
            </remarks>
            <exception cref="T:System.NotSupportedException">The Stream does not support setting the Position to any value except 0.</exception>
        </member>
        <member name="T:Dart.Ftp.ZStream">
            <summary>Used as the abstract base class for CompressingStream and InflatingStream.</summary>
            <remarks>
                <p>Compression software is provided by the generosity of ComponentAce:</p>
                <p>Copyright (c) 2006-2007, ComponentAce
					<br>http://www.componentace.com</br><br>All rights reserved.</br></p>
                <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p>
                <p>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of ComponentAce nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. </p>
                <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
            </remarks>
        </member>
        <member name="M:Dart.Ftp.ZStream.Close">
            <summary>
				Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
			</summary>
        </member>
        <member name="M:Dart.Ftp.ZStream.Flush">
            <summary>
				Updates the underlying repository with the current state of the 
				buffer and then clears the buffer. 
			</summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
            <exception cref="T:System.ObjectDisposedException">The Stream is closed.</exception>
            <remarks>
                <p>If the Stream contains any internal Streams as members, this method will also cause the Flush method of all
					internal Streams.
				</p>
                <p>
				This method MUST be called when writing is complete for operations to operate properly. One example is when creating a message 
				comprised of only headers. If Flush is not called, the headers will be lost.
				</p>
            </remarks>
        </member>
        <member name="T:Dart.Ftp.ZStreamException">
            <summary>
            Indicates a failure in ZLIB compression processing.
            </summary>
        </member>
        <member name="M:Dart.Ftp.ZStreamException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZStreamException class.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Dart.Ftp.Synchronize">
            <summary>
            Enumerates synchronization options for selected high-level Get and Put methods.
            </summary>
            <remarks>
                <para>The values of this enumeration can be used as bit flags to indicate multiple techniques.</para>
                <para>
            WARNING: The synchronization algorithm used by Synchronize.On is not suitable for ALL scenarios, so you should ensure its use is compatible 
            with technical requirements:
            </para>
                <para>
            If the destination file DateTime (UTC, LastWrittenTo) is more recent or the same as the source file, 
            then the files are considered synchronized. If the files are synchronized and the sizes match, then no copy is performed. 
            If the files are synchronized and the destination file is smaller, then the missing bytes are appended. 
            If the files are synchronized and the destination file is bigger, then corruption is assumed and a full copy is performed. 
            If the files are not synchronized, then a full copy is performed.
            </para>
                <para>
            Synchronize.SetDateTime - This option indicates that the destination file DateTime (UTC, LastWrittenTo) should be set to the source DateTime after
            the transfer operation is complete. Server support for the MFMT (Modify Fact: Modification Time) command or MDTM set is required to update the destination file's 
            DateTime when Put is used. No Exception is thrown if the attempt fails - check <see cref="P:Dart.Ftp.CopyResult.DateTimeSet" /> to confirm that the action was 
            completed successfully.
            </para>
            </remarks>
            <example>
        This example demonstrates how to use the synchronize enumeration to synchronize files, and automatically set the modified date.
        <code lang="C#">
        private void putFile()
        {
            ftp1.Get("testfile.txt", myLocalDirectory + "\\testfile.txt", Synchronize.On | Synchronize.SetDateTime);
        }
        </code><code lang="VB">
        Private Sub putFile()
            ftp1.Get("testfile.txt", myLocalDirectory &amp; "\testfile.txt", Synchronize.Off Or Synchronize.SetDateTime)
        End Sub
        </code></example>
        </member>
        <member name="F:Dart.Ftp.Synchronize.Off">
            <summary>
            No synchronization - the entire file will always be copied.
            </summary>
        </member>
        <member name="F:Dart.Ftp.Synchronize.On">
            <summary>
            Synchronizes the source to the destination.
            </summary>
        </member>
        <member name="F:Dart.Ftp.Synchronize.SetDateTime">
            <summary>
            Sets the destination file's modified DateTime to the source file's after the transfer operation is complete.
            </summary>
        </member>
        <member name="T:Dart.Ftp.ListType">
            <summary>
            Enumerates the type of listing desired.
            </summary>
        </member>
        <member name="F:Dart.Ftp.ListType.Full">
            <summary>
            Sends a LIST command.
            </summary>
            <remarks>
            A full human-readable listing is returned on the data connection and parsed into a <see cref="T:Dart.Ftp.Listing" />.
            This is the full listing defined in RFC 959.
            </remarks>
        </member>
        <member name="F:Dart.Ftp.ListType.Machine">
            <summary>
            Sends an MLST or MLSD command, whichever is more efficient.
            </summary>
            <remarks>
            A machine-readable listing is returned on the control (MLST) or data (MLSD) connection and parsed into a <see cref="T:Dart.Ftp.Listing" />. 
            This capability is defined in RFC 3659 (FTP extentions). MLST is used when a single file name is presented.
            Check the <see cref="P:Dart.Ftp.Features.GetMachineList" /> and <see cref="P:Dart.Ftp.Features.GetMachineListDirectory" /> properties to see if your server supports this type of listing.
            </remarks>
        </member>
        <member name="F:Dart.Ftp.ListType.Names">
            <summary>
            Sends a NLST command.
            </summary>
            <remarks>
            A name-only listing is returned on the data connection. This is the named listing defined in RFC 959.
            </remarks>
        </member>
        <member name="T:Dart.Ftp.DataConnectType">
            <summary>
            Enumerates alternatives for establishing the data connection used for file transfers and listings.
            </summary>
            <remarks>
                <para>
            DataConnectType.Port is used to direct the server to make an active connection to the client. The client accepts the connection. 
            The timeout for accepting the connection from the FTP server is configured by <see cref="P:Dart.Ftp.Ftp.Timeout" />.
            </para>
                <para>
            DataConnectType.Passive is used to direct the server to accept a passive connection from the client. The client makes an active connection. 
            The technique is often necessary when intermediate proxies or firewalls are used.
            </para>
                <para>
            DataConnectType.PassiveOverrideAddress is like DataConnectType.Passive except that the address provided by the server is replaced with the address used by the control connection.
            Please read on for a brief description of why this option might be used.
            </para>
                <para>
            FTP is not a "firewall friendly" protocol, so some configuration is required when a firewall is used. 
            This will typically involve using DataConnectType.Passive so the server accepts a passive connection. 
            Most servers can be configured to use the external address of its firewall when it builds the PASV response, 
            so the client just connects to this address (like it did to establish the original control connection), and operations proceed normally.
            If, however, the server is not configured to properly respond to the PASV command with the firewall address, 
            AND the firewall does not replace the response with its own address (or the control connection is encrypted so the PASV response cannot be seen), 
            then use DataConnectType.PassiveOverrideAddress to use the control connection address instead of the address sent by the server. 
            This technique may compensate for a poorly configured server/firewall combination.
            </para>
            </remarks>
            <value>
            Used for <see cref="P:Dart.Ftp.FtpSession.ConnectType" />.
            </value>
        </member>
        <member name="F:Dart.Ftp.DataConnectType.Passive">
            <summary>
            A PASV command is sent to the server and it responds with the address and port it is "passively" listening on.
            </summary>
        </member>
        <member name="F:Dart.Ftp.DataConnectType.Port">
            <summary>
            A PORT command is sent to the server, which then connects to the client's address and port specified.
            </summary>
        </member>
        <member name="F:Dart.Ftp.DataConnectType.PassiveOverrideAddress">
            <summary>
            The control connection address should be used for the data connection instead of the address returned by the server in response to the PASV command.
            Used to compensate for a poorly configured server/firewall combination.
            </summary>
        </member>
        <member name="T:Dart.Ftp.Compression">
            <summary>
            Enumerates the compression options for file transfers and listings.
            </summary>
            <remarks>
            Some servers support 'MODE Z' zlib compression. This enumeration is used to indicate how compression should be used.
            </remarks>
        </member>
        <member name="F:Dart.Ftp.Compression.None">
            <summary>
            No compression/decompression is used. 'MODE S' is the transfer mode used and no compression/decompression takes place.
            </summary>
        </member>
        <member name="F:Dart.Ftp.Compression.Archive">
            <summary>
            Local compression/decompression is used, but the server is not instructed to compress/decompress. 
            'MODE S' is the transfer mode used and client-side files are compressed/decompressed as sent/received. Compressed files reside on the server.
            </summary>
        </member>
        <member name="F:Dart.Ftp.Compression.Full">
            <summary>
            Local and server compression/decompression is used. 'MODE Z' is the transfer mode used and server-side files are not compressed.
            </summary>
        </member>
        <member name="T:Dart.Ftp.ListingFormat">
            <summary>
            Enumerates the perceived format of the listing.
            </summary>
            <remarks>
                <p>This enumeration is used by <see cref="P:Dart.Ftp.Listing.Format" />.</p>
                <p>Automatic detection of the listing format (UNIX or DOS) is attempted. 
            If the listing type is unable to be discerned, this property will be ListingFormat.Unknown. The raw listing can be accessed through <see cref="F:Dart.Ftp.Listing.Text" /> 
            (for the entire listing) or <see cref="F:Dart.Ftp.ListEntry.Text" /> (for a single ListEntry).
            </p>
            </remarks>
        </member>
        <member name="F:Dart.Ftp.ListingFormat.UNIX">
            <summary>
            The perceived listing format is UNIX. UNIX is used by most UNIX-based operating systems.
            </summary>
        </member>
        <member name="F:Dart.Ftp.ListingFormat.DOS">
            <summary>
            The perceived listing format is DOS. Microsoft's server can be configured to provide a DOS-formatted listing.
            </summary>
        </member>
        <member name="F:Dart.Ftp.ListingFormat.Names">
            <summary>
            The listing format is name only. Only ListEntry.Name is used.
            </summary>
        </member>
        <member name="F:Dart.Ftp.ListingFormat.Machine">
            <summary>
            The listing format is machine-readable. Utilized when the MLST or MLSD extended FTP commands are used.
            </summary>
        </member>
        <member name="F:Dart.Ftp.ListingFormat.Unknown">
            <summary>
            Listing format cannot be determined. If the listing format cannot be determined, you can parse the Listing.Text property.
            </summary>
        </member>
        <member name="T:Dart.Ftp.EntryType">
            <summary>
             Enumerates entry type, indicating a file, directory, symbolic link or an unknown type (if Listing.Format is Unknown).
             </summary>
            <remarks>
                <p>This enumeration is used by <see cref="F:Dart.Ftp.ListEntry.Type" />. 
             It is useful for detecting whether a list entry is a file, directory or symbolic link. 
             For example, when populating a ListBox with a retrieved listing, a folder icon may be displayed
             if the ListEntry represents a Directory, and a file icon if the ListEntry represents 
             a file.</p>
            </remarks>
        </member>
        <member name="F:Dart.Ftp.EntryType.File">
            <summary>
            Indicates ListEntry represents a file.
            </summary>
        </member>
        <member name="F:Dart.Ftp.EntryType.Directory">
            <summary>
            Indicates ListEntry represents a directory.
            </summary>
        </member>
        <member name="F:Dart.Ftp.EntryType.Link">
            <summary>
            Indicates ListEntry represents a symbolic link.
            </summary>
        </member>
        <member name="F:Dart.Ftp.EntryType.Unknown">
            <summary>
            Indicates ListEntry could not be parsed.
            </summary>
        </member>
        <member name="T:Dart.Ftp.StoreType">
            <summary>
            Enumerates how to treat a stored file when a file exists with the same name.
            </summary>
            <remarks>
                <p>This enumeration is used by the Ftp.Put methods, specifying the action to take when a file is put to the 
            server and there is an existing file with the same name. Use StoreType.Replace to overwrite the existing file,
            StoreType.Append to add the new file to the end of the existing file, and StoreType.Unique to 
            store the file with a unique name. The unique name will be returned in the response.</p>
            </remarks>
            <example>
        The following example demonstrates appending a local file to a remote file.
        <code lang="C#">
        /// &lt;summary&gt;
        /// Appends the specified local file to the remote file
        /// &lt;/summary&gt;
        /// &lt;param name="myFtp"&gt;A connected and authenticated Ftp instance&lt;/param&gt;
        /// &lt;param name="localPath"&gt;Path to the local file&lt;/param&gt;
        /// &lt;param name="remotePath"&gt;An absolute or relative path to the file on the server&lt;/param&gt;
        /// &lt;returns&gt;The CopyResult of the operation&lt;/returns&gt;
        public CopyResult AppendFile(Ftp myFtp, string localPath, string remotePath)
        {
            //Open the local file
            using (FileStream fs = File.OpenRead(localPath))
            {
                //Append the local file to the destination, and (optionally) return the result
                return myFtp.Put(fs, remotePath, 0, StoreType.Append);
            }
        }
        </code><code lang="VB">
        ''' &lt;summary&gt;
        ''' Appends the specified local file to the remote file
        ''' &lt;/summary&gt;
        ''' &lt;param name="myFtp"&gt;A connected and authenticated Ftp instance&lt;/param&gt;
        ''' &lt;param name="localPath"&gt;Path to the local file&lt;/param&gt;
        ''' &lt;param name="remotePath"&gt;An absolute or relative path to the file on the server&lt;/param&gt;
        ''' &lt;returns&gt;The CopyResult of the operation&lt;/returns&gt;
        Public Function AppendFile(ByVal myFtp As Ftp, ByVal localPath As String, ByVal remotePath As String) As CopyResult
            'Open the local file
            Using fs As FileStream = File.OpenRead(localPath)
                'Append the local file to the destination, and (optionally) return the result
                Return myFtp.Put(fs, remotePath, 0, StoreType.Append)
            End Using
        End Function
        </code></example>
        </member>
        <member name="F:Dart.Ftp.StoreType.Replace">
            <summary>
            Over-write any existing file.
            </summary>
        </member>
        <member name="F:Dart.Ftp.StoreType.Unique">
            <summary>
            If an existing file is present, store the file using a unique name.
            </summary>
        </member>
        <member name="F:Dart.Ftp.StoreType.Append">
            <summary>
            If an existing file is present, append the stored file to it.
            </summary>
        </member>
        <member name="T:Dart.Ftp.FileType">
            <summary>
            Enumerates the supported file transfer types.
            </summary>
        </member>
        <member name="F:Dart.Ftp.FileType.Image">
            <summary>
            An exact binary image of the file is to be copied.
            </summary>
        </member>
        <member name="F:Dart.Ftp.FileType.Ascii">
            <summary>
            Host "newline" characters are transformed to/from CR/LF pairs by the server.
            </summary>
        </member>
        <member name="F:Dart.Ftp.FileType.Ebcdic">
            <summary>
            Data is represented as 8-bit EBCDIC characters.
            </summary>
        </member>
        <member name="T:Dart.Ftp.Ftp">
            <summary>
            The Ftp Component provides comprehensive file copy services to and from any File Transfer Protocol (FTP) server.
            </summary>
            <remarks>
                <p>The <b>Ftp</b> component provides high-level FTP capabilities to your application, including 
            the ability to transfer files and streams, and the ability to read/write to the data connection. 
            The ability to send any command (including proprietary commands) is supported. 
            These capabilities are all encapsulated by high-level methods, so no knowledge of low-level protocols is required.
            Multithreading techniques are fully supported.</p>
                <H4 class="dtH4">Using the Ftp Component</H4>
                <p>Some short descriptions of common usage scenarios follows. 
            For a more complete description, see the reference section pages.</p>
                <p>
                    <b>Connecting and Logging in:</b> Before any communication with the server can take place, 
            <see cref="P:Dart.Ftp.Session.RemoteEndPoint" />, <see cref="P:Dart.Ftp.FtpSession.Username" />, 
            and <see cref="P:Dart.Ftp.FtpSession.Password" /> must first be set. 
            Once set, whenever communication needs to occur with the server, the client will automatically connect and log in. 
            The client will stay logged in until the <b>Ftp</b> component is destroyed or <see cref="M:Dart.Ftp.Ftp.Close" /> or <see cref="M:Dart.Ftp.Ftp.Abort" /> 
            is called.</p>
                <p>For more information about logging in and out, see the <see cref="T:Dart.Ftp.FtpSession" /> page.</p>
                <p>
                    <b>Synchronous Use:</b> All methods are synchronous: methods will not return until the action is complete.</p>
                <p>
                    <b>Asynchronous Use:</b> For use with Windows forms applications, the <see cref="M:Dart.Ftp.Ftp.Start(System.Threading.WaitCallback,System.Object)" /> method starts a worker thread 
            upon which methods may be called without interfering with UI thread message processing. 
            Marshaling of data to the UI thread is achieved using the <see cref="M:Dart.Ftp.Ftp.Marshal(Dart.Ftp.CopyResult,System.String,System.Object)">Marshal</see> method, 
            which raises an event on the UI thread.</p>
                <p>For more information see the topic "Windows Forms Applications (Async Use)."</p>
                <p>
                    <b>Transferring files:</b>
            Files are retrieved using 4 overloaded Get methods and stored using 4 overloaded Put methods. 
            These methods include overloads to support the transfer of multiple files 
            (see <see cref="M:Dart.Ftp.Ftp.Get(System.Collections.Generic.List{Dart.Ftp.ListEntry},System.String,System.String,Dart.Ftp.Synchronize)" /> and 
            <see cref="M:Dart.Ftp.Ftp.Put(System.Collections.Generic.List{System.IO.FileSystemInfo},System.String,System.String,Dart.Ftp.Synchronize)" />).</p>
                <p>For more information about copying files, see the reference pages.</p>
                <p>
                    <b>Transferring streams:</b>
            Files can be retrieved into streams using the <see cref="M:Dart.Ftp.Ftp.Get(System.String,System.Int64,System.IO.Stream)" /> overload (by passing in a destination stream), 
            and streams can be stored to the server as files using the <see cref="M:Dart.Ftp.Ftp.Put(System.IO.Stream,System.String,System.Int64,Dart.Ftp.StoreType)" /> overload 
            (by passing in a source stream).</p>
                <p>
                    <b>Reading/Writing to the data stream:</b> The Ftp component can be used to read and write to a data stream 
            (that reads/writes from/to a socket). See the <see cref="M:Dart.Ftp.Ftp.Get(System.String,System.Int64)" /> and <see cref="M:Dart.Ftp.Ftp.Put(System.String,System.Int64,Dart.Ftp.StoreType)" /> 
            overloads.</p>
                <p>For more information about reading and writing to the data stream, see the <see cref="T:Dart.Ftp.Data" /> class.</p>
                <p>
                    <b>Sending commands:</b> Commands are sent in two ways using the Ftp component. 
            The first is when they are encapsulated by a high-level method. 
            For example, the <see cref="M:Dart.Ftp.Ftp.Rename(System.String,System.String)" /> method encapsulates the sending of the RNFR (rename from) and RNTO (rename to) commands.
            Other high-level commands include <see cref="M:Dart.Ftp.Ftp.GetSize(System.String)" /> (issues the SIZE command and parses the response), 
            <see cref="M:Dart.Ftp.Ftp.GetDirectory" /> (issues a PWD and parses the response), and <see cref="M:Dart.Ftp.Ftp.List(System.String,System.String,Dart.Ftp.ListType)" /> returns 
            an encapsulated listing. 
            The second is when commands are explicitly sent using the <see cref="M:Dart.Ftp.Ftp.Send(System.String)" /> method. 
            Use this method to send any command not included in any higher level method (including proprietary commands).</p>
                <p>
                    <b>Retrieving info about the control connection:</b> The TCP control connection is exposed through the <see cref="P:Dart.Ftp.Ftp.Connection" />
            property, allowing access to low-level properties and methods. 
            This can be used to view TCP-level activity such as the local and remote IP address.</p>
            </remarks>
        </member>
        <member name="M:Dart.Ftp.Ftp.#ctor">
            <summary>
            Dynamically create an instance of the <see cref="T:Dart.Ftp.Ftp" /> class.
            </summary>
            <remarks>
            When this method is used you may need to add "Dart.Ftp.Ftp, Dart.Ftp" to your project's licenses.licx file.
            </remarks>
        </member>
        <member name="M:Dart.Ftp.Ftp.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Create an instance of the <see cref="T:Dart.Ftp.Ftp" /> class, typically by dragging and dropping it onto a form.
            </summary>
            <param name="container">An IContainer that represents the container for the Ftp instance.</param>
            <remarks>
            When this method is used by the designer, licensing information is automatically added to the project's licenses.licx file.
            </remarks>
        </member>
        <member name="P:Dart.Ftp.Ftp.Encoding">
            <summary>
            Specifies the character encoding to be used by the component.
            </summary>
            <remarks>
            When this property is set the component will use the specified encoding to encode and decode data on the underlying socket.
            </remarks>
            <example>
        This example demonstrates sending FTP commands and processing the response.
        <code lang="C#">
        public void InitConnection(object state)
        {
            //Connect to the FTP server.
            ftp1.Connect();

            //Use UTF8 if available. 
            //NOTE: Some servers require the user to be authenticated before UTF8 support can be enabled,
            //if that is true then the following line must be called after the call to ftp1.Authenticate();
            UseUTF8();

            //Authenticate the user.
            ftp1.Authenticate();

            //Send the CCC command.
            UseCCC();
        }

        public void UseUTF8()
        {
            //Check the feeatures property to see if the server supports UTF8 encoding.
            if (ftp1.Features.Utf8Encoding)
            {
                //If the server supports UTF8 encoding, send the UTF8 command as specified in RFC2640.
                //Some servers (such as Filezilla) do not explicitly require this command but others (such as IIS) do.
                Response Resp = ftp1.Send("OPTS UTF8 ON");

                if (Resp.Code &lt; 299)
                    //If the OPTS UTF8 ON command succeeded then set the connection encoding appropriately.
                    ftp1.Encoding = System.Text.Encoding.UTF8;
            }
        }

        public void UseCCC()
        {
            //Send the CCC command
            Response Resp = ftp1.Send("CCC");

            //Check the response to see if the CCC command was successful.
            if (Resp.Code &lt; 299)
                //Shutdown the SSL layer of the control connection. This command leaves the underlying unencrypted TCP connection open.
                ftp1.Connection.ShutdownSsl();
        }
        </code><code lang="VB">
        Public Sub InitConnection(ByVal state As Object)
            'Connect to the FTP server.
            ftp1.Connect()

            'Use UTF8 if available. 
            'NOTE: Some servers require the user to be authenticated before UTF8 support can be enabled,
            'if that is true then the following line must be called after the call to ftp1.Authenticate();
            UseUTF8()

            'Authenticate the user.
            ftp1.Authenticate()

            'Send the CCC command.
            UseCCC()
        End Sub

        Public Sub UseUTF8()
            'Check the feeatures property to see if the server supports UTF8 encoding.
            If ftp1.Features.Utf8Encoding Then
                'If the server supports UTF8 encoding, send the UTF8 command as specified in RFC2640.
                'Some servers (such as Filezilla) do not explicitly require this command but others (such as IIS) do.
                Dim Resp As Response = ftp1.Send("OPTS UTF8 ON")

                If Resp.Code &lt; 299 Then
                    'If the OPTS UTF8 ON command succeeded then set the connection encoding appropriately.
                    ftp1.Encoding = System.Text.Encoding.UTF8
                End If
            End If
        End Sub

        Public Sub UseCCC()
            'Send the CCC command
            Dim Resp As Response = ftp1.Send("CCC")

            'Check the response to see if the CCC command was successful.
            If Resp.Code &lt; 299 Then
                'Shutdown the SSL layer of the control connection. This command leaves the underlying unencrypted TCP connection open.
                ftp1.Connection.ShutdownSsl()
            End If
        End Sub
        </code></example>
        </member>
        <member name="P:Dart.Ftp.Ftp.UsePWD">
            <summary>
            Specifies whether to utilize PWD commands for file and listing operations.
            </summary>
            <remarks>
            When this property is set to false no PWD commands will be issued, and all path information will be relative.
            </remarks>
        </member>
        <member name="M:Dart.Ftp.Ftp.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="F:Dart.Ftp.Ftp.DefaultPort">
            <summary>
            The "well-known" default port 21 for connecting to standard FTP Servers.
            </summary>
            <remarks>
            Note that Ftp servers implementing "implicit" security typically use port 990.
            </remarks>
        </member>
        <member name="M:Dart.Ftp.Ftp.Start(System.Threading.WaitCallback,System.Object)">
            <summary>
            Start a worker thread and execute the specified delegate.
            </summary>
            <param name="worker">
                <see cref="T:System.Threading.WaitCallback" /> delegate specifying the method to execute.</param>
            <param name="state">Information to pass to the worker delegate method; can be null.</param>
            <remarks>
                <para>
                This method provides a convenient way to execute any method on a worker thread. 
                Applications with a UI thread can use this technique to execute methods (like List, Get, Put) on a worker thread
                that would "freeze" the UI if executed on the UI thread.
                </para>
                <para>
                Unhandled exceptions occurring on the worker thread will be caught and reported by the 
                <see cref="E:Dart.Ftp.ComponentBase.Error">Error</see> event.
                </para>
                <para>Internally, this method uses ThreadPool.QueueUserWorkItem to start a worker thread.
                This method is provided for convenience; the developer may of course use alternative methods for starting worker threads
                if more specialized use is required.</para>
            </remarks>
            <example>
        This example demonstrates using the FTP control to obtain a directory listing from a remote server.
        <code lang="C#">
        private void getListing()
        {
            //Setup the Ftp session and then connect, authenticate, and retrieve a listing on a worker thread
            ftp1.Session.RemoteEndPoint.HostNameOrAddress = myServer;
            ftp1.Session.Username = myUsername;
            ftp1.Session.Password = myPassword;

            //Wire up the Listing event to receive the listing on the UI thread
            ftp1.Listing += new EventHandler&lt;ListingEventArgs&gt;(ftp1_Listing);

            //The Start method executes the listing operation on a worker thread so the UI is not blocked.
            //Worker thread Exceptions are automatically caught and marshaled to the Error event
            ftp1.Start(getListingWorker, null);
        }

        private void getListingWorker(object state)
        {
            try
            {
                //Login to a server and get a listing
                ftp1.Connect();
                ftp1.Authenticate();
                Listing listing = ftp1.List("", "", ListType.Full);

                //Marshal the listing to the UI thread
                ftp1.Marshal(listing, "", null);
            }
            finally
            {
                //Logout of the server
                ftp1.Close();
            }
        }

        private void ftp1_Listing(object sender, ListingEventArgs e)
        {
            //Add all the list entries in the listing to a listbox
            foreach (ListEntry entry in e.Listing)
                listBox1.Items.Add(entry.Text);
        }
        </code><code lang="VB">
        Private Sub getListing()
            'Setup the Ftp session and then connect, authenticate, and retrieve a listing on a worker thread
            ftp1.Session.RemoteEndPoint.HostNameOrAddress = myServer
            ftp1.Session.Username = myUsername
            ftp1.Session.Password = myPassword

            'Wire up the Listing event to receive the listing on the UI thread
            AddHandler ftp1.Listing, AddressOf ftp1_Listing

            'The Start method executes the listing operation on a worker thread so the UI is not blocked.
            'Worker thread Exceptions are automatically caught and marshaled to the Error event
            ftp1.Start(AddressOf getListingWorker, Nothing)
        End Sub

        Private Sub getListingWorker(ByVal state As Object)
            Try
                'Login to a server and get a listing
                ftp1.Connect()
                ftp1.Authenticate()
                Dim listing As Listing = ftp1.List("", "", ListType.Full)

                'Marshal the listing to the UI thread
                ftp1.Marshal(listing, "", Nothing)
            Catch ex As Exception
                ftp1.Marshal(ex)
            Finally
                'Logout of the server
                ftp1.Close()
            End Try
        End Sub

        Private Sub ftp1_Listing(ByVal sender As Object, ByVal e As ListingEventArgs)
            'Add all the list entries in the listing to a listbox
            For Each entry As ListEntry In e.Listing
                listBox1.Items.Add(entry.Text)
            Next entry
        End Sub
        </code></example>
        </member>
        <member name="P:Dart.Ftp.Ftp.DataIsBusy">
            <summary>
            Returns true while performing a copy or listing operation.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Ftp.Connected">
            <summary>
            Returns true when the control connection is connected.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Ftp.Connection">
            <summary>
            The control connection used for FTP server communications.
            </summary>
            <value>
                <see cref="T:Dart.Ftp.TcpBase" />
            </value>
        </member>
        <member name="P:Dart.Ftp.Ftp.Features">
            <summary>
            A list of features that represent supported features documented in RFC 2389. 
            Automatically populated the first time the value is read.
            </summary>
            <value>
                <see cref="P:Dart.Ftp.Ftp.Features" />
            </value>
            <example>
        This example demonstrates sending FTP commands and processing the response.
        <code lang="C#">
        public void InitConnection(object state)
        {
            //Connect to the FTP server.
            ftp1.Connect();

            //Use UTF8 if available. 
            //NOTE: Some servers require the user to be authenticated before UTF8 support can be enabled,
            //if that is true then the following line must be called after the call to ftp1.Authenticate();
            UseUTF8();

            //Authenticate the user.
            ftp1.Authenticate();

            //Send the CCC command.
            UseCCC();
        }

        public void UseUTF8()
        {
            //Check the feeatures property to see if the server supports UTF8 encoding.
            if (ftp1.Features.Utf8Encoding)
            {
                //If the server supports UTF8 encoding, send the UTF8 command as specified in RFC2640.
                //Some servers (such as Filezilla) do not explicitly require this command but others (such as IIS) do.
                Response Resp = ftp1.Send("OPTS UTF8 ON");

                if (Resp.Code &lt; 299)
                    //If the OPTS UTF8 ON command succeeded then set the connection encoding appropriately.
                    ftp1.Encoding = System.Text.Encoding.UTF8;
            }
        }

        public void UseCCC()
        {
            //Send the CCC command
            Response Resp = ftp1.Send("CCC");

            //Check the response to see if the CCC command was successful.
            if (Resp.Code &lt; 299)
                //Shutdown the SSL layer of the control connection. This command leaves the underlying unencrypted TCP connection open.
                ftp1.Connection.ShutdownSsl();
        }
        </code><code lang="VB">
        Public Sub InitConnection(ByVal state As Object)
            'Connect to the FTP server.
            ftp1.Connect()

            'Use UTF8 if available. 
            'NOTE: Some servers require the user to be authenticated before UTF8 support can be enabled,
            'if that is true then the following line must be called after the call to ftp1.Authenticate();
            UseUTF8()

            'Authenticate the user.
            ftp1.Authenticate()

            'Send the CCC command.
            UseCCC()
        End Sub

        Public Sub UseUTF8()
            'Check the feeatures property to see if the server supports UTF8 encoding.
            If ftp1.Features.Utf8Encoding Then
                'If the server supports UTF8 encoding, send the UTF8 command as specified in RFC2640.
                'Some servers (such as Filezilla) do not explicitly require this command but others (such as IIS) do.
                Dim Resp As Response = ftp1.Send("OPTS UTF8 ON")

                If Resp.Code &lt; 299 Then
                    'If the OPTS UTF8 ON command succeeded then set the connection encoding appropriately.
                    ftp1.Encoding = System.Text.Encoding.UTF8
                End If
            End If
        End Sub

        Public Sub UseCCC()
            'Send the CCC command
            Dim Resp As Response = ftp1.Send("CCC")

            'Check the response to see if the CCC command was successful.
            If Resp.Code &lt; 299 Then
                'Shutdown the SSL layer of the control connection. This command leaves the underlying unencrypted TCP connection open.
                ftp1.Connection.ShutdownSsl()
            End If
        End Sub
        </code></example>
        </member>
        <member name="P:Dart.Ftp.Ftp.Session">
            <summary>
            Specifies a complete FTP connection and authentication configuration.
            </summary>
            <remarks>
            This class is serializable, and can be used to persist a runtime session configuration.
            </remarks>
            <value>
                <see cref="T:Dart.Ftp.FtpSession" />
            </value>
            <example>
        This example demonstrates using the FTP control to retrieve a file using the FTP GET command.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Wire up the FTP component's progress event to track the transfer's progress
            ftp1.Progress += new EventHandler&lt;ProgressEventArgs&gt;(ftp1_Progress);

            //Wire up the FTP component's error event to report errors
            ftp1.Error += new EventHandler&lt;ErrorEventArgs&gt;(ftp1_Error);

            //Setup the Ftp session and then connect, authenticate, and retrieve a file on a worker thread
            ftp1.Session.RemoteEndPoint.HostNameOrAddress = myServer;
            ftp1.Session.Username = myUsername;
            ftp1.Session.Password = myPassword;

            //The Start method executes the GET operation on a worker thread so the UI is not blocked.
            //Unhandled worker thread exceptions are automatically caught and marshaled to the Error event
            ftp1.Start(getFile, null);
        }

        private void getFile(object state)
        {
            try
            {
                //Connect to the FTP Server.
                ftp1.Connect();

                //Authenticate the user.
                ftp1.Authenticate();

                //Retrieve a file.
                ftp1.Get("testfile.txt", myLocalDirectory + "\\testfile.txt", Synchronize.Off);
            }
            catch (Exception Ex)
            {
                //If an exception occurs, marshal it to the UI thread.
                ftp1.Marshal(Ex);
            }
            finally
            {
                //Close the connection.
                ftp1.Close();
            }
        }

        void ftp1_Progress(object sender, ProgressEventArgs e)
        {
            //Transfer progress can be provided via this event, for a more complete
            //example of reporting progress, please see the Ftp Listview sample.

            //The file transfer is in progress.
            if (e.Item.Status == CopyStatus.InProgress)
            {
                if (e.Item.Count &gt; 0)
                {
                    //Update the progress of the transfer.
                    progressBar1.Value = e.Item.Percentage;
                }
            }
            //The file transfer is complete.
            else if (e.Item.Status == CopyStatus.Completed)
            {
                //Reset the progressbar
                progressBar1.Value = 0;
            }
            //The file transfer was aborted or failed.
            else if (e.Item.Status == CopyStatus.Aborted || e.Item.Status == CopyStatus.Failed)
            {
                //Reset the progress bar
                progressBar1.Value = 0;

                //Report that the transfer has stopped.
                MessageBox.Show("The file transfer has failed or was aborted.", "The File transfer has stopped.", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        void ftp1_Error(object sender, ErrorEventArgs e)
        {
            //Show a messagebox containg the exception.
            MessageBox.Show(e.GetException().ToString(), "An error has occurred.", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
        </code><code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs) Handles button1.Click
            'Wire up the FTP component's progress event to track the transfer's progress
            AddHandler ftp1.Progress, AddressOf ftp1_Progress

            'Wire up the FTP component's error event to report errors
            AddHandler ftp1.Error, AddressOf ftp1_Error

            'Setup the Ftp session and then connect, authenticate, and retrieve a file on a worker thread
            ftp1.Session.RemoteEndPoint.HostNameOrAddress = myServer
            ftp1.Session.Username = myUsername
            ftp1.Session.Password = myPassword

            'The Start method executes the GET operation on a worker thread so the UI is not blocked.
            'Unhandled worker thread exceptions are automatically caught and marshaled to the Error event
            ftp1.Start(AddressOf getFile, Nothing)
        End Sub

        Private Sub getFile(ByVal state As Object)
            Try
                'Connect to the FTP Server.
                ftp1.Connect()

                'Authenticate the user.
                ftp1.Authenticate()

                'Retrieve a file.
                ftp1.Get("testfile.txt", myLocalDirectory &amp; "\testfile.txt", Synchronize.Off)
            Catch Ex As Exception
                'If an exception occurs, marshal it to the UI thread.
                ftp1.Marshal(Ex)
            Finally
                'Close the connection.
                ftp1.Close()
            End Try
        End Sub

        Private Sub ftp1_Progress(ByVal sender As Object, ByVal e As ProgressEventArgs)
            'Transfer progress can be provided via this event, for a more complete
            'example of reporting progress, please see the Ftp Listview sample.

            'The file transfer is in progress.
            If e.Item.Status = CopyStatus.InProgress Then
                If e.Item.Count &gt; 0 Then
                    'Update the progress of the transfer.
                    progressBar1.Value = e.Item.Percentage
                End If
            'The file transfer is complete.
            ElseIf e.Item.Status = CopyStatus.Completed Then
                'Reset the progressbar
                progressBar1.Value = 0
            'The file transfer was aborted or failed.
            ElseIf e.Item.Status = CopyStatus.Aborted OrElse e.Item.Status = CopyStatus.Failed Then
                'Reset the progress bar
                progressBar1.Value = 0

                'Report that the transfer has stopped.
                MessageBox.Show("The file transfer has failed or was aborted.", "The File transfer has stopped.", MessageBoxButtons.OK, MessageBoxIcon.Error)
            End If
        End Sub

        Private Sub ftp1_Error(ByVal sender As Object, ByVal e As ErrorEventArgs)
            'Show a messagebox containg the exception.
            MessageBox.Show(e.GetException().ToString(), "An error has occurred.", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End Sub
        </code></example>
        </member>
        <member name="P:Dart.Ftp.Ftp.Timeout">
            <summary>
            Gets or sets the timeout value (in milliseconds) used for send and receive timeouts.
            </summary>
            <value>The timeout value in milliseconds. The default value is 10000 (10 seconds).</value>
            <remarks>
                <para>
            This property is used to specify <see cref="P:System.Net.Sockets.Socket.SendTimeout">SendTimeout</see> and 
            <see cref="P:System.Net.Sockets.Socket.ReceiveTimeout">ReceiveTimeout</see> for control and data connections. 
            Set <see cref="P:Dart.Ftp.SocketOption.SendTimeout">Ftp.Connection.SocketOption.SendTimeout</see> or 
            <see cref="P:Dart.Ftp.TcpSocketOption.ReceiveTimeout">Ftp.Connection.SocketOption.ReceiveTimeout</see> after setting 
            this property to configure control connection timeouts only.
            </para>
                <para>This property does not affect an active data connection.</para>
            </remarks>
        </member>
        <member name="E:Dart.Ftp.Ftp.Progress">
            <summary>
            Reports progress information at the frequency specified by <see cref="P:Dart.Ftp.FtpSession.ProgressSize" />. 
            </summary>
            <remarks>
                <para>
            See the <see cref="P:Dart.Ftp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
            updating UI controls from within your event handler.
            </para>
            </remarks>
            <example>
        This example demonstrates using the FTP control to retrieve a file using the FTP GET command.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Wire up the FTP component's progress event to track the transfer's progress
            ftp1.Progress += new EventHandler&lt;ProgressEventArgs&gt;(ftp1_Progress);

            //Wire up the FTP component's error event to report errors
            ftp1.Error += new EventHandler&lt;ErrorEventArgs&gt;(ftp1_Error);

            //Setup the Ftp session and then connect, authenticate, and retrieve a file on a worker thread
            ftp1.Session.RemoteEndPoint.HostNameOrAddress = myServer;
            ftp1.Session.Username = myUsername;
            ftp1.Session.Password = myPassword;

            //The Start method executes the GET operation on a worker thread so the UI is not blocked.
            //Unhandled worker thread exceptions are automatically caught and marshaled to the Error event
            ftp1.Start(getFile, null);
        }

        private void getFile(object state)
        {
            try
            {
                //Connect to the FTP Server.
                ftp1.Connect();

                //Authenticate the user.
                ftp1.Authenticate();

                //Retrieve a file.
                ftp1.Get("testfile.txt", myLocalDirectory + "\\testfile.txt", Synchronize.Off);
            }
            catch (Exception Ex)
            {
                //If an exception occurs, marshal it to the UI thread.
                ftp1.Marshal(Ex);
            }
            finally
            {
                //Close the connection.
                ftp1.Close();
            }
        }

        void ftp1_Progress(object sender, ProgressEventArgs e)
        {
            //Transfer progress can be provided via this event, for a more complete
            //example of reporting progress, please see the Ftp Listview sample.

            //The file transfer is in progress.
            if (e.Item.Status == CopyStatus.InProgress)
            {
                if (e.Item.Count &gt; 0)
                {
                    //Update the progress of the transfer.
                    progressBar1.Value = e.Item.Percentage;
                }
            }
            //The file transfer is complete.
            else if (e.Item.Status == CopyStatus.Completed)
            {
                //Reset the progressbar
                progressBar1.Value = 0;
            }
            //The file transfer was aborted or failed.
            else if (e.Item.Status == CopyStatus.Aborted || e.Item.Status == CopyStatus.Failed)
            {
                //Reset the progress bar
                progressBar1.Value = 0;

                //Report that the transfer has stopped.
                MessageBox.Show("The file transfer has failed or was aborted.", "The File transfer has stopped.", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        void ftp1_Error(object sender, ErrorEventArgs e)
        {
            //Show a messagebox containg the exception.
            MessageBox.Show(e.GetException().ToString(), "An error has occurred.", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
        </code><code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs) Handles button1.Click
            'Wire up the FTP component's progress event to track the transfer's progress
            AddHandler ftp1.Progress, AddressOf ftp1_Progress

            'Wire up the FTP component's error event to report errors
            AddHandler ftp1.Error, AddressOf ftp1_Error

            'Setup the Ftp session and then connect, authenticate, and retrieve a file on a worker thread
            ftp1.Session.RemoteEndPoint.HostNameOrAddress = myServer
            ftp1.Session.Username = myUsername
            ftp1.Session.Password = myPassword

            'The Start method executes the GET operation on a worker thread so the UI is not blocked.
            'Unhandled worker thread exceptions are automatically caught and marshaled to the Error event
            ftp1.Start(AddressOf getFile, Nothing)
        End Sub

        Private Sub getFile(ByVal state As Object)
            Try
                'Connect to the FTP Server.
                ftp1.Connect()

                'Authenticate the user.
                ftp1.Authenticate()

                'Retrieve a file.
                ftp1.Get("testfile.txt", myLocalDirectory &amp; "\testfile.txt", Synchronize.Off)
            Catch Ex As Exception
                'If an exception occurs, marshal it to the UI thread.
                ftp1.Marshal(Ex)
            Finally
                'Close the connection.
                ftp1.Close()
            End Try
        End Sub

        Private Sub ftp1_Progress(ByVal sender As Object, ByVal e As ProgressEventArgs)
            'Transfer progress can be provided via this event, for a more complete
            'example of reporting progress, please see the Ftp Listview sample.

            'The file transfer is in progress.
            If e.Item.Status = CopyStatus.InProgress Then
                If e.Item.Count &gt; 0 Then
                    'Update the progress of the transfer.
                    progressBar1.Value = e.Item.Percentage
                End If
            'The file transfer is complete.
            ElseIf e.Item.Status = CopyStatus.Completed Then
                'Reset the progressbar
                progressBar1.Value = 0
            'The file transfer was aborted or failed.
            ElseIf e.Item.Status = CopyStatus.Aborted OrElse e.Item.Status = CopyStatus.Failed Then
                'Reset the progress bar
                progressBar1.Value = 0

                'Report that the transfer has stopped.
                MessageBox.Show("The file transfer has failed or was aborted.", "The File transfer has stopped.", MessageBoxButtons.OK, MessageBoxIcon.Error)
            End If
        End Sub

        Private Sub ftp1_Error(ByVal sender As Object, ByVal e As ErrorEventArgs)
            'Show a messagebox containg the exception.
            MessageBox.Show(e.GetException().ToString(), "An error has occurred.", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End Sub
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Ftp.Connect(System.String)">
            <summary>
            Connects to the specified FTP server using other parameters specified in <see cref="P:Dart.Ftp.Ftp.Session" />.
            </summary>
            <param name="hostNameOrAddress">The hostname or IP address of the server.</param>
            <remarks>
                <para>Sets <see cref="P:Dart.Ftp.IPEndPoint.HostNameOrAddress">Session.RemoteEndPoint.HostNameOrAddress</see> to the provided value and calls <see cref="M:Dart.Ftp.Ftp.Connect" />.</para>
                <para>
                    <see cref="M:Dart.Ftp.Ftp.Authenticate" /> or <see cref="M:Dart.Ftp.Ftp.Authenticate(System.String,System.String)" /> must be called after this method if a login is desired. Otherwise, the 
            user must send their own custom commands to authenticate with the server.</para>
                <para>SSL encryption is negotiated if Session.Security.EncryptControl is EncryptControl.Implicit.</para>
            </remarks>
            <returns>The server greeting.</returns>
            <example>
        This example demonstrates using the FTP control to retrieve a file using the FTP GET command.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Connect to the FTP Server.
            ftp1.Connect(myServer);

            //Login with user credentials
            ftp1.Authenticate(myUsername, myPassword);

            //Retrieve a file.
            ftp1.Get("testfile.txt", Path.Combine(myLocalDirectory, "testfile.txt"), Synchronize.Off);

            //Close the connection.
            ftp1.Close();
        }
        </code><code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs) Handles button1.Click
            'Connect to the FTP Server.
            ftp1.Connect(myServer)

            'Login with user credentials
            ftp1.Authenticate(myUsername, myPassword)

            'Retrieve a file.
            ftp1.Get("testfile.txt", Path.Combine(myLocalDirectory, "testfile.txt"), Synchronize.Off)

            'Close the connection.
            ftp1.Close()
        End Sub
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Ftp.Connect">
            <summary>
            Connects to an FTP server using parameters specified in <see cref="P:Dart.Ftp.Ftp.Session" />.
            </summary>
            <remarks>
                <para>
                    <see cref="M:Dart.Ftp.Ftp.Authenticate" /> or <see cref="M:Dart.Ftp.Ftp.Authenticate(System.String,System.String)" /> must be called after this method if a login is desired. Otherwise, the 
            user must send their own custom commands to authenticate with the server.</para>
                <para>SSL encryption is negotiated if Session.Security.EncryptControl is EncryptControl.Implicit.</para>
            </remarks>
            <returns>The server greeting.</returns>
            <example>
        The following example demonstrates connecting to an Ftp server, with options for encryption (FTPS: Explicit/Implicit), and authenticating the user.
        <code lang="C#">
        using System.Security.Cryptography.X509Certificates;
        using System.Security.Authentication;
        using System.Net.Security;

        /// &lt;summary&gt;
        /// Connects to an Ftp server, optionally using encryption (Explicit/Implicit), and authenticates the user.
        /// &lt;/summary&gt;
        /// &lt;param name="myFtp"&gt;The Ftp instance to connect and authenticate&lt;/param&gt;
        /// &lt;param name="hostNameOrAddress"&gt;The server's hostname or IP address&lt;/param&gt;
        /// &lt;param name="port"&gt;Port that the server is listening on. Usually 21 for Explicit or non-secure, 990 for Implicit.&lt;/param&gt;
        /// &lt;param name="username"&gt;Username&lt;/param&gt;
        /// &lt;param name="password"&gt;Password&lt;/param&gt;
        /// &lt;param name="encryptControl"&gt;Controls whether SSL/TLS is used, and the implementation. None/Explicit/Implicit.&lt;/param&gt;
        /// &lt;param name="encryptData"&gt;Controls whether the data channel is encrypted.&lt;/param&gt;
        private void ConnectFtp(Ftp myFtp, string hostNameOrAddress, int port, string username, string password, EncryptControl encryptControl, bool encryptData)
        {
            //Set the server address
            myFtp.Session.RemoteEndPoint = new IPEndPoint(hostNameOrAddress, port);

            if (encryptControl != EncryptControl.None)
            {
                //Set the control channel's security protocol - Implicit/Explicit
                myFtp.Session.Security.EncryptControl = encryptControl;

                //Set whether the data channel should be encrypted. This may or may not be required by your FTP server.
                myFtp.Session.Security.EncryptData = encryptData;

                //Optionally set the protocols available for SSL/TLS negotiation (defaults to SslProtocols.Default)
                //TLS 1.1/1.2 requires .NET 4.5+. See the SslProtocols MSDN documentation for more information.
                myFtp.Session.Security.Protocols = SslProtocols.Tls | SslProtocols.Ssl3;

                //Specify the server certificate validation callback
                myFtp.Session.Security.ValidationCallback = remoteCertificateValidation;
            }

            //Connect to the server.
            myFtp.Connect();

            //Authenticate the user.
            myFtp.Authenticate(username, password);
        }

        private bool remoteCertificateValidation(Object sender, X509Certificate remoteCertificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
        {
            //For this simple snippet, accept all server certificates. Please see the 'Security' top-level help topics for more information, or 
            //the System.Net.Security.RemoteCertificateValidationCallback MSDN documentation.
            return true;
        }
        </code><code lang="VB">
        Imports System.Security.Cryptography.X509Certificates
        Imports System.Security.Authentication
        Imports System.Net.Security

        ''' &lt;summary&gt;
        ''' Connects to an Ftp server, optionally using encryption (Explicit/Implicit), and authenticates the user.
        ''' &lt;/summary&gt;
        ''' &lt;param name="myFtp"&gt;The Ftp instance to connect and authenticate&lt;/param&gt;
        ''' &lt;param name="hostNameOrAddress"&gt;The server's hostname or IP address&lt;/param&gt;
        ''' &lt;param name="port"&gt;Port that the server is listening on. Usually 21 for Explicit or non-secure, 990 for Implicit.&lt;/param&gt;
        ''' &lt;param name="username"&gt;Username&lt;/param&gt;
        ''' &lt;param name="password"&gt;Password&lt;/param&gt;
        ''' &lt;param name="encryptControl"&gt;Controls whether SSL/TLS is used, and the implementation. None/Explicit/Implicit.&lt;/param&gt;
        ''' &lt;param name="encryptData"&gt;Controls whether the data channel is encrypted.&lt;/param&gt;
        Private Sub ConnectFtp(ByVal myFtp As Ftp, ByVal hostNameOrAddress As String, ByVal port As Integer, ByVal username As String, ByVal password As String, ByVal encryptControl As EncryptControl, ByVal encryptData As Boolean)
            'Set the server address
            myFtp.Session.RemoteEndPoint = New IPEndPoint(hostNameOrAddress, port)

            If encryptControl &lt;&gt; Dart.Ftp.EncryptControl.None Then
                'Set the control channel's security protocol - Implicit/Explicit
                myFtp.Session.Security.EncryptControl = encryptControl

                'Set whether the data channel should be encrypted. This may or may not be required by your FTP server.
                myFtp.Session.Security.EncryptData = encryptData

                'Optionally set the protocols available for SSL/TLS negotiation (defaults to SslProtocols.Default)
                'TLS 1.1/1.2 requires .NET 4.5+. See the SslProtocols MSDN documentation for more information.
                myFtp.Session.Security.Protocols = SslProtocols.Tls Or SslProtocols.Ssl3

                'Specify the server certificate validation callback
                myFtp.Session.Security.ValidationCallback = AddressOf remoteCertificateValidation
            End If

            'Connect to the server.
            myFtp.Connect()

            'Authenticate the user.
            myFtp.Authenticate(username, password)
        End Sub

        Private Function remoteCertificateValidation(ByVal sender As Object, ByVal remoteCertificate As X509Certificate, ByVal chain As X509Chain, ByVal sslPolicyErrors As SslPolicyErrors) As Boolean
            'For this simple snippet, accept all server certificates. Please see the 'Security' top-level help topics for more information, or 
            'the System.Net.Security.RemoteCertificateValidationCallback MSDN documentation.
            Return True
        End Function
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Ftp.Authenticate(System.String,System.String)">
            <summary>
            Logs into the FTP server using username, password, and other configuration settings specified in <see cref="P:Dart.Ftp.Ftp.Session" />.
            </summary>
            <param name="username">The username to use for login.</param>
            <param name="password">The password to use for login.</param>
            <remarks>
                <para>
            Sets <see cref="P:Dart.Ftp.FtpSession.Username">Session.Username</see> and <see cref="P:Dart.Ftp.FtpSession.Password">Session.Password</see> to the provided values and calls <see cref="M:Dart.Ftp.Ftp.Authenticate" />.
            </para>
                <para>
            This method or <see cref="M:Dart.Ftp.Ftp.Authenticate" /> should be used after <see cref="M:Dart.Ftp.Ftp.Connect" /> or <see cref="M:Dart.Ftp.Ftp.Connect(System.String)" /> (or another login technique must be used).
            </para>
                <para>
            SSL encryption is negotiated before logging in if Session.Security.EncryptionControl == EncryptionControl.Explicit. 
            </para>
            </remarks>
            <returns>A List of Response objects generated.</returns>
            <example>
        The following example demonstrates connecting to an Ftp server, with options for encryption (FTPS: Explicit/Implicit), and authenticating the user.
        <code lang="C#">
        using System.Security.Cryptography.X509Certificates;
        using System.Security.Authentication;
        using System.Net.Security;

        /// &lt;summary&gt;
        /// Connects to an Ftp server, optionally using encryption (Explicit/Implicit), and authenticates the user.
        /// &lt;/summary&gt;
        /// &lt;param name="myFtp"&gt;The Ftp instance to connect and authenticate&lt;/param&gt;
        /// &lt;param name="hostNameOrAddress"&gt;The server's hostname or IP address&lt;/param&gt;
        /// &lt;param name="port"&gt;Port that the server is listening on. Usually 21 for Explicit or non-secure, 990 for Implicit.&lt;/param&gt;
        /// &lt;param name="username"&gt;Username&lt;/param&gt;
        /// &lt;param name="password"&gt;Password&lt;/param&gt;
        /// &lt;param name="encryptControl"&gt;Controls whether SSL/TLS is used, and the implementation. None/Explicit/Implicit.&lt;/param&gt;
        /// &lt;param name="encryptData"&gt;Controls whether the data channel is encrypted.&lt;/param&gt;
        private void ConnectFtp(Ftp myFtp, string hostNameOrAddress, int port, string username, string password, EncryptControl encryptControl, bool encryptData)
        {
            //Set the server address
            myFtp.Session.RemoteEndPoint = new IPEndPoint(hostNameOrAddress, port);

            if (encryptControl != EncryptControl.None)
            {
                //Set the control channel's security protocol - Implicit/Explicit
                myFtp.Session.Security.EncryptControl = encryptControl;

                //Set whether the data channel should be encrypted. This may or may not be required by your FTP server.
                myFtp.Session.Security.EncryptData = encryptData;

                //Optionally set the protocols available for SSL/TLS negotiation (defaults to SslProtocols.Default)
                //TLS 1.1/1.2 requires .NET 4.5+. See the SslProtocols MSDN documentation for more information.
                myFtp.Session.Security.Protocols = SslProtocols.Tls | SslProtocols.Ssl3;

                //Specify the server certificate validation callback
                myFtp.Session.Security.ValidationCallback = remoteCertificateValidation;
            }

            //Connect to the server.
            myFtp.Connect();

            //Authenticate the user.
            myFtp.Authenticate(username, password);
        }

        private bool remoteCertificateValidation(Object sender, X509Certificate remoteCertificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
        {
            //For this simple snippet, accept all server certificates. Please see the 'Security' top-level help topics for more information, or 
            //the System.Net.Security.RemoteCertificateValidationCallback MSDN documentation.
            return true;
        }
        </code><code lang="VB">
        Imports System.Security.Cryptography.X509Certificates
        Imports System.Security.Authentication
        Imports System.Net.Security

        ''' &lt;summary&gt;
        ''' Connects to an Ftp server, optionally using encryption (Explicit/Implicit), and authenticates the user.
        ''' &lt;/summary&gt;
        ''' &lt;param name="myFtp"&gt;The Ftp instance to connect and authenticate&lt;/param&gt;
        ''' &lt;param name="hostNameOrAddress"&gt;The server's hostname or IP address&lt;/param&gt;
        ''' &lt;param name="port"&gt;Port that the server is listening on. Usually 21 for Explicit or non-secure, 990 for Implicit.&lt;/param&gt;
        ''' &lt;param name="username"&gt;Username&lt;/param&gt;
        ''' &lt;param name="password"&gt;Password&lt;/param&gt;
        ''' &lt;param name="encryptControl"&gt;Controls whether SSL/TLS is used, and the implementation. None/Explicit/Implicit.&lt;/param&gt;
        ''' &lt;param name="encryptData"&gt;Controls whether the data channel is encrypted.&lt;/param&gt;
        Private Sub ConnectFtp(ByVal myFtp As Ftp, ByVal hostNameOrAddress As String, ByVal port As Integer, ByVal username As String, ByVal password As String, ByVal encryptControl As EncryptControl, ByVal encryptData As Boolean)
            'Set the server address
            myFtp.Session.RemoteEndPoint = New IPEndPoint(hostNameOrAddress, port)

            If encryptControl &lt;&gt; Dart.Ftp.EncryptControl.None Then
                'Set the control channel's security protocol - Implicit/Explicit
                myFtp.Session.Security.EncryptControl = encryptControl

                'Set whether the data channel should be encrypted. This may or may not be required by your FTP server.
                myFtp.Session.Security.EncryptData = encryptData

                'Optionally set the protocols available for SSL/TLS negotiation (defaults to SslProtocols.Default)
                'TLS 1.1/1.2 requires .NET 4.5+. See the SslProtocols MSDN documentation for more information.
                myFtp.Session.Security.Protocols = SslProtocols.Tls Or SslProtocols.Ssl3

                'Specify the server certificate validation callback
                myFtp.Session.Security.ValidationCallback = AddressOf remoteCertificateValidation
            End If

            'Connect to the server.
            myFtp.Connect()

            'Authenticate the user.
            myFtp.Authenticate(username, password)
        End Sub

        Private Function remoteCertificateValidation(ByVal sender As Object, ByVal remoteCertificate As X509Certificate, ByVal chain As X509Chain, ByVal sslPolicyErrors As SslPolicyErrors) As Boolean
            'For this simple snippet, accept all server certificates. Please see the 'Security' top-level help topics for more information, or 
            'the System.Net.Security.RemoteCertificateValidationCallback MSDN documentation.
            Return True
        End Function
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Ftp.Authenticate">
            <summary>
            Logs into the FTP server using configuration settings specified in <see cref="P:Dart.Ftp.Ftp.Session" />.
            </summary>
            <remarks>
                <para>This method or <see cref="M:Dart.Ftp.Ftp.Authenticate(System.String,System.String)" /> should be used after <see cref="M:Dart.Ftp.Ftp.Connect" /> or <see cref="M:Dart.Ftp.Ftp.Connect(System.String)" /> (or another login techniques must be used).</para>
                <para>
                    <see cref="P:Dart.Ftp.FtpSession.Username" />, <see cref="P:Dart.Ftp.FtpSession.Password" /> and <see cref="P:Dart.Ftp.FtpSession.Account" /> are used for login purposes.
            SSL encryption is negotiated before logging in if Session.Security.EncryptionControl == EncryptionControl.Explicit. 
            </para>
            </remarks>
            <returns>A List of Response objects generated.</returns>
            <example>
        This example demonstrates using the FTP control to retrieve a file using the FTP GET command.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Wire up the FTP component's progress event to track the transfer's progress
            ftp1.Progress += new EventHandler&lt;ProgressEventArgs&gt;(ftp1_Progress);

            //Wire up the FTP component's error event to report errors
            ftp1.Error += new EventHandler&lt;ErrorEventArgs&gt;(ftp1_Error);

            //Setup the Ftp session and then connect, authenticate, and retrieve a file on a worker thread
            ftp1.Session.RemoteEndPoint.HostNameOrAddress = myServer;
            ftp1.Session.Username = myUsername;
            ftp1.Session.Password = myPassword;

            //The Start method executes the GET operation on a worker thread so the UI is not blocked.
            //Unhandled worker thread exceptions are automatically caught and marshaled to the Error event
            ftp1.Start(getFile, null);
        }

        private void getFile(object state)
        {
            try
            {
                //Connect to the FTP Server.
                ftp1.Connect();

                //Authenticate the user.
                ftp1.Authenticate();

                //Retrieve a file.
                ftp1.Get("testfile.txt", myLocalDirectory + "\\testfile.txt", Synchronize.Off);
            }
            catch (Exception Ex)
            {
                //If an exception occurs, marshal it to the UI thread.
                ftp1.Marshal(Ex);
            }
            finally
            {
                //Close the connection.
                ftp1.Close();
            }
        }

        void ftp1_Progress(object sender, ProgressEventArgs e)
        {
            //Transfer progress can be provided via this event, for a more complete
            //example of reporting progress, please see the Ftp Listview sample.

            //The file transfer is in progress.
            if (e.Item.Status == CopyStatus.InProgress)
            {
                if (e.Item.Count &gt; 0)
                {
                    //Update the progress of the transfer.
                    progressBar1.Value = e.Item.Percentage;
                }
            }
            //The file transfer is complete.
            else if (e.Item.Status == CopyStatus.Completed)
            {
                //Reset the progressbar
                progressBar1.Value = 0;
            }
            //The file transfer was aborted or failed.
            else if (e.Item.Status == CopyStatus.Aborted || e.Item.Status == CopyStatus.Failed)
            {
                //Reset the progress bar
                progressBar1.Value = 0;

                //Report that the transfer has stopped.
                MessageBox.Show("The file transfer has failed or was aborted.", "The File transfer has stopped.", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        void ftp1_Error(object sender, ErrorEventArgs e)
        {
            //Show a messagebox containg the exception.
            MessageBox.Show(e.GetException().ToString(), "An error has occurred.", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
        </code><code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs) Handles button1.Click
            'Wire up the FTP component's progress event to track the transfer's progress
            AddHandler ftp1.Progress, AddressOf ftp1_Progress

            'Wire up the FTP component's error event to report errors
            AddHandler ftp1.Error, AddressOf ftp1_Error

            'Setup the Ftp session and then connect, authenticate, and retrieve a file on a worker thread
            ftp1.Session.RemoteEndPoint.HostNameOrAddress = myServer
            ftp1.Session.Username = myUsername
            ftp1.Session.Password = myPassword

            'The Start method executes the GET operation on a worker thread so the UI is not blocked.
            'Unhandled worker thread exceptions are automatically caught and marshaled to the Error event
            ftp1.Start(AddressOf getFile, Nothing)
        End Sub

        Private Sub getFile(ByVal state As Object)
            Try
                'Connect to the FTP Server.
                ftp1.Connect()

                'Authenticate the user.
                ftp1.Authenticate()

                'Retrieve a file.
                ftp1.Get("testfile.txt", myLocalDirectory &amp; "\testfile.txt", Synchronize.Off)
            Catch Ex As Exception
                'If an exception occurs, marshal it to the UI thread.
                ftp1.Marshal(Ex)
            Finally
                'Close the connection.
                ftp1.Close()
            End Try
        End Sub

        Private Sub ftp1_Progress(ByVal sender As Object, ByVal e As ProgressEventArgs)
            'Transfer progress can be provided via this event, for a more complete
            'example of reporting progress, please see the Ftp Listview sample.

            'The file transfer is in progress.
            If e.Item.Status = CopyStatus.InProgress Then
                If e.Item.Count &gt; 0 Then
                    'Update the progress of the transfer.
                    progressBar1.Value = e.Item.Percentage
                End If
            'The file transfer is complete.
            ElseIf e.Item.Status = CopyStatus.Completed Then
                'Reset the progressbar
                progressBar1.Value = 0
            'The file transfer was aborted or failed.
            ElseIf e.Item.Status = CopyStatus.Aborted OrElse e.Item.Status = CopyStatus.Failed Then
                'Reset the progress bar
                progressBar1.Value = 0

                'Report that the transfer has stopped.
                MessageBox.Show("The file transfer has failed or was aborted.", "The File transfer has stopped.", MessageBoxButtons.OK, MessageBoxIcon.Error)
            End If
        End Sub

        Private Sub ftp1_Error(ByVal sender As Object, ByVal e As ErrorEventArgs)
            'Show a messagebox containg the exception.
            MessageBox.Show(e.GetException().ToString(), "An error has occurred.", MessageBoxButtons.OK, MessageBoxIcon.Error)
        End Sub
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Ftp.Close">
            <summary>
            Gracefully closes the connection.
            </summary>
            <remarks>
                <para>This method sends a QUIT message, reads until the stream is empty, and closes the connection.</para>
                <para>Note: Some servers using an encrypted control connection will not shutdown the SSL connection gracefully. 
                In this case an IOException will be generated while closing, which can be safely ignored.</para>
            </remarks>
            <returns>
                <see cref="T:Dart.Ftp.Response" /> object with the results of the command.</returns>
            <example>
        This example demonstrates using the FTP control to retrieve a file using the FTP GET command.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Connect to the FTP Server.
            ftp1.Connect(myServer);

            //Login with user credentials
            ftp1.Authenticate(myUsername, myPassword);

            //Retrieve a file.
            ftp1.Get("testfile.txt", Path.Combine(myLocalDirectory, "testfile.txt"), Synchronize.Off);

            //Close the connection.
            ftp1.Close();
        }
        </code><code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs) Handles button1.Click
            'Connect to the FTP Server.
            ftp1.Connect(myServer)

            'Login with user credentials
            ftp1.Authenticate(myUsername, myPassword)

            'Retrieve a file.
            ftp1.Get("testfile.txt", Path.Combine(myLocalDirectory, "testfile.txt"), Synchronize.Off)

            'Close the connection.
            ftp1.Close()
        End Sub
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Ftp.Get(System.Collections.Generic.List{Dart.Ftp.ListEntry},System.String,System.String,Dart.Ftp.Synchronize)">
            <summary>
            Get the specified files using a single method.
            </summary>
            <param name="remoteFiles">A <see cref="T:System.Collections.Generic.List`1" /> of files to download. Use null to indicate the complete directory tree.</param>
            <param name="remoteRoot">Absolute or relative remote root directory from which the files and folders will be copied.</param>
            <param name="localRoot">Absolute or relative local root where files are to be copied to. Existing files will be overwritten.</param>
            <param name="sync">The file synchronization technique desired, if any.</param>
            <remarks>
                <para>
            If the file or directory paths relative to remoteRoot contain characters that are invalid for the local filesystem, those characters will be replaced with an underscore 
            when constructing the local path.
            </para>
                <para>
                    <see cref="P:Dart.Ftp.Ftp.DataIsBusy" /> returns true while this method executes.</para>
            </remarks>
            <returns>A List of <see cref="T:Dart.Ftp.CopyResult" /> objects.</returns>
            <example>
        This example demonstrates using the FTP control to retrieve multiple files using the FTP GET Command.
        <code lang="C#">
        public void getMultipleFiles()
        {
            //Retrieve a list of txt files to transfer.
            List&lt;ListEntry&gt; filesToGet = ftp1.ListDirectoryTree("MyTextFiles", "*.txt", true);

            //Tailor the list to not include a specific file.
            foreach (ListEntry entry in filesToGet)
            {
                if (entry.Name == "not_me.txt")
                {
                    filesToGet.Remove(entry);
                    break;
                }
            }

            //Retrieve the files.
            string workingDirectory = ftp1.GetDirectory();
            ftp1.Get(filesToGet, workingDirectory + "/MyTextFiles", myLocalDirectory, Synchronize.Off);
        }
        </code><code lang="VB">
        Public Sub getMultipleFiles()
            'Retrieve a list of txt files to transfer.
            Dim filesToGet As List(Of ListEntry) = ftp1.ListDirectoryTree("MyTextFiles", "*.txt", True)

            'Tailor the list to not include a specific file.
            For Each entry As ListEntry In filesToGet
                If entry.Name = "not_me.txt" Then
                    filesToGet.Remove(entry)
                    Exit For
                End If
            Next entry

            'Retrieve the files.
            Dim workingDirectory As String = ftp1.GetDirectory()
            ftp1.Get(filesToGet, workingDirectory &amp; "/MyTextFiles", myLocalDirectory, Synchronize.Off)
        End Sub
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Ftp.Get(System.String,System.String,Dart.Ftp.Synchronize)">
            <summary>
            Downloads a file from an FTP server.
            </summary>
            <param name="remotePath">An absolute or relative path to the source file on the server.</param>
            <param name="localPath">Path to the local file to create.</param>
            <param name="sync">The file synchronization technique desired, if any.</param>
            <remarks>
                <see cref="P:Dart.Ftp.Ftp.DataIsBusy" /> returns true while this method executes. Paths may be specified as relative or absolute.
            </remarks>
            <returns>
                <see cref="T:Dart.Ftp.CopyResult" /> containing the result of the operation.</returns>
            <example>
        This example demonstrates using the FTP control to retrieve a file using the FTP GET command.
        <code lang="C#">
        private void button1_Click(object sender, EventArgs e)
        {
            //Connect to the FTP Server.
            ftp1.Connect(myServer);

            //Login with user credentials
            ftp1.Authenticate(myUsername, myPassword);

            //Retrieve a file.
            ftp1.Get("testfile.txt", Path.Combine(myLocalDirectory, "testfile.txt"), Synchronize.Off);

            //Close the connection.
            ftp1.Close();
        }
        </code><code lang="VB">
        Private Sub button1_Click(ByVal sender As Object, ByVal e As EventArgs) Handles button1.Click
            'Connect to the FTP Server.
            ftp1.Connect(myServer)

            'Login with user credentials
            ftp1.Authenticate(myUsername, myPassword)

            'Retrieve a file.
            ftp1.Get("testfile.txt", Path.Combine(myLocalDirectory, "testfile.txt"), Synchronize.Off)

            'Close the connection.
            ftp1.Close()
        End Sub
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Ftp.Get(System.String,System.Int64,System.IO.Stream)">
            <summary>
            Starts download at the specified offset and writes to the destination Stream.
            </summary>
            <param name="remotePath">An absolute or relative path to the source file on the server.</param>
            <param name="remoteOffset">Restart marker from which the data transfer should start.</param>
            <param name="localDestination">Stream to write file data to.</param>
            <remarks>
                <para>The destination Stream is not closed after use.</para>
                <para>
                    <see cref="P:Dart.Ftp.Ftp.DataIsBusy" /> returns true while this method executes.</para>
            </remarks>
            <returns>
                <see cref="T:Dart.Ftp.CopyResult" /> containing the result of the operation.</returns>
            <example>
        The following example demonstrates restarting/resuming a Get.
        <code lang="C#">
        /// &lt;summary&gt;
        /// Resumes (or starts) a Get operation
        /// &lt;/summary&gt;
        /// &lt;param name="myFtp"&gt;A connected and authenticated Ftp instance&lt;/param&gt;
        /// &lt;param name="remotePath"&gt;An absolute or relative path to the file on the server&lt;/param&gt;
        /// &lt;param name="localPath"&gt;The download location&lt;/param&gt;
        /// &lt;returns&gt;The CopyResult of the operation&lt;/returns&gt;
        public CopyResult RestartGet(Ftp myFtp, string remotePath, string localPath)
        {
            //Ensure that the Ftp object is in binary/image transfer mode
            myFtp.SetType(FileType.Image);
            
            //Create a new file, or open the existing file
            using (FileStream fs = File.OpenWrite(localPath))
            {
                //Set the stream to the correct position
                fs.Position = fs.Length;
                //Start/resume the transfer, and (optionally) return the result
                return myFtp.Get(remotePath, fs.Position, fs);
            }
        }
        </code><code lang="VB">
        ''' &lt;summary&gt;
        ''' Resumes (or starts) a Get operation
        ''' &lt;/summary&gt;
        ''' &lt;param name="myFtp"&gt;A connected and authenticated Ftp instance&lt;/param&gt;
        ''' &lt;param name="remotePath"&gt;An absolute or relative path to the file on the server&lt;/param&gt;
        ''' &lt;param name="localPath"&gt;The download location&lt;/param&gt;
        ''' &lt;returns&gt;The CopyResult of the operation&lt;/returns&gt;
        Public Function RestartGet(ByVal myFtp As Ftp, ByVal remotePath As String, ByVal localPath As String) As CopyResult
            'Ensure that the Ftp object is in binary/image transfer mode
            myFtp.SetType(FileType.Image)

            'Create a new file, or open the existing file
            Using fs As FileStream = File.OpenWrite(localPath)
                'Set the stream to the correct position
                fs.Position = fs.Length
                'Start/resume the transfer, and (optionally) return the result
                Return myFtp.Get(remotePath, fs.Position, fs)
            End Using
        End Function
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Ftp.Get(System.String,System.Int64)">
            <summary>
            Lowest level Get method starts a download at the specified offset and returns a Stream to read from.
            </summary>
            <param name="remotePath">An absolute or relative path to the source file on the server.</param>
            <param name="remoteOffset">Restart marker from which the data transfer should start.</param>
            <remarks>
                <para>
            The returned stream must be closed before sending more commands over the control connection 
            (the server response to the RETR command is read when the stream is closed).
            </para>
                <para>
                    <see cref="P:Dart.Ftp.Ftp.DataIsBusy" /> returns true until the stream this method opens is closed.</para>
                <para>A file retrieval may be aborted by using Connection.Write("ABOR\r\n"), reading the stream until the server closes it, 
            and using Connection.ReadToDelimiter("\r\n") to get the response from the ABOR command sent.</para>
            </remarks>
            <returns>A Stream to read from.</returns>
            <example>
         The following example demonstrates using a stream to process data as it is received from the server.
        <code lang="C#">
        private void streamRecords()
        {
            //Establish the stream with 'using' so it is automatically closed and disposed
            using (Stream dataStream = ftp1.Get("myRecords.txt", 0))
            {
                //Set up a buffer to hold the incoming data.
                byte[] buffer = new byte[1024];
                int count = -1;

                //Loop as long as we can read data from the incoming stream.
                do
                {
                    //Read data from the stream into the buffer.
                    count = dataStream.Read(buffer, 0, buffer.Length);

                    //Write any data read into the textbox.
                    textBox1.AppendText(System.Text.Encoding.Default.GetString(buffer, 0, count));
                } while (count &gt; 0);
            }
        }
        </code><code lang="VB">
        Private Sub streamRecords()
            'Establish the stream with 'using' so it is automatically closed and disposed
            Using dataStream As Stream = ftp1.Get("myRecords.txt", 0)
                'Set up a buffer to hold the incoming data.
                Dim buffer(1023) As Byte
                Dim count As Integer = -1

                'Loop as long as we can read data from the incoming stream.
                Do
                    'Read data from the stream into the buffer.
                    count = dataStream.Read(buffer, 0, buffer.Length)

                    'Write any data read into the textbox.
                    textBox1.AppendText(System.Text.Encoding.Default.GetString(buffer, 0, count))
                Loop While count &gt; 0
            End Using
        End Sub
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Ftp.GetSynchronization(System.String,System.IO.FileInfo,Dart.Ftp.CopyAction)">
            <summary>
            Computes a value that indicates whether a local and remote file are synchronized.
            </summary>
            <param name="remotePath">Path to the file on the server.</param>
            <param name="localFile">The local file.</param>
            <param name="action">Indicates a Get or a Put.</param>
            <remarks>
            If the destination file DateTime (UTC, LastWrittenTo) is more recent or the same as the source file, 
            then the files are considered synchronized. 
            If the files are synchronized and the destination file is smaller, then a restart is indicated by a return value &gt; 0. 
            If the files are synchronized and the destination file is bigger, then corruption is assumed 0 is returned. If the files
            are not synchronized, then 0 is returned.
            </remarks>
            <returns>-1 indicates the files are synchronized. 0 indicates the files are not synchronized. A value &gt; 0 indicates a 
            restart should be performed using value as the offset.</returns>
        </member>
        <member name="M:Dart.Ftp.Ftp.List(System.String,System.String,Dart.Ftp.ListType)">
            <summary>
            Returns a flat listing of remote files and directories contained within a single directory.
            </summary>
            <param name="remoteRoot">Path to the remote directory. Null or empty string indicates the current working directory.</param>
            <param name="pattern">Search pattern. Null or empty string indicates all files. Can include arguments.</param>
            <param name="type">The <see cref="T:Dart.Ftp.ListType" /> listing technique to use.</param>
            <remarks>
                <para>
            The <i>pattern</i> can include arguments, such as "-r" for recursive or "-a" to include hidden files. If <i>remoteRoot</i> is specified (not null or an empty string), 
            and <i>pattern</i> is intended to only contain arguments, you must prepend a wildcard to <i>pattern</i>, e.g. "* -a".
            </para>
                <para>
            If your server returns the timestamp in a non-standard format, or uses non-english month abbreviations, 
            set <see cref="P:Dart.Ftp.FtpSession.DateTimeFormatInfo">Ftp.Session.DateTimeFormatInfo</see> to the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat">CultureInfo.DateTimeFormat</see> 
            of the appropriate <see cref="T:System.Globalization.CultureInfo">CultureInfo</see>.
            </para>
                <para>
                    <see cref="P:Dart.Ftp.Ftp.DataIsBusy" /> returns true while this method executes.</para>
            </remarks>
            <returns>
                <see cref="E:Dart.Ftp.Ftp.Listing" />
            </returns>
            <example>
        This example demonstrates using the FTP control to obtain a directory listing from a remote server.
        <code lang="C#">
        private void getListing()
        {
            //Connect and log into the server, and get a listing
            ftp1.Connect(myServer);
            ftp1.Authenticate(myUsername, myPassword);
            Listing listing = ftp1.List("", "", ListType.Full);

            //Add all the list entries in the listing to a listbox
            foreach (ListEntry entry in listing)
                listBox1.Items.Add(entry.Text);

            //Logout of the server
            ftp1.Close();
        }
        </code><code lang="VB">
        Private Sub getListing()
            'Connect and log into the server, and get a listing
            ftp1.Connect(myServer)
            ftp1.Authenticate(myUsername, myPassword)
            Dim listing As Listing = ftp1.List("", "", ListType.Full)

            'Add all the list entries in the listing to a listbox
            For Each entry As ListEntry In listing
                listBox1.Items.Add(entry.Text)
            Next entry

            'Logout of the server
            ftp1.Close()
        End Sub
        </code></example>
            <exception cref="T:System.ArgumentException">
                <i>pattern</i> is an absolute path (starts with "/").</exception>
        </member>
        <member name="M:Dart.Ftp.Ftp.ListDirectoryTree(System.String,System.String,System.Boolean)">
            <summary>
            Get a recursive directory listing of remote files and directories within a directory tree.
            </summary>
            <param name="remoteRoot">Path to the remote directory. Null or empty string indicates the current working directory.</param>
            <param name="pattern">Search pattern. Null or empty string indicates all files.</param>
            <param name="excludeEmptyDirs">Indicates whether empty directories should be excluded.</param>
            <remarks>
                <para>
            Creates a List of remote files that can be used as a parameter for the 
            <see cref="M:Dart.Ftp.Ftp.Get(System.Collections.Generic.List{Dart.Ftp.ListEntry},System.String,System.String,Dart.Ftp.Synchronize)">Get</see> method.
            </para>
                <para>
            Empty directories are directories containing no files anywhere within their tree. 
            An empty directory containing an empty directory is considered empty.
            </para>
                <para>
            If your server returns the timestamp in a non-standard format, or uses non-english month abbreviations, 
            set <see cref="T:System.Globalization.DateTimeFormatInfo" /> to the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat">CultureInfo.DateTimeFormat</see> 
            of the appropriate <see cref="T:System.Globalization.CultureInfo">CultureInfo</see>.
            </para>
                <para>
                    <see cref="P:Dart.Ftp.Ftp.DataIsBusy" /> returns true while this method executes.</para>
            </remarks>
            <returns>
                <see cref="T:System.Collections.Generic.List`1" /> of remote files.</returns>
            <example>
        This example demonstrates using the FTP control to retrieve multiple files using the FTP GET Command.
        <code lang="C#">
        public void getMultipleFiles()
        {
            //Retrieve a list of txt files to transfer.
            List&lt;ListEntry&gt; filesToGet = ftp1.ListDirectoryTree("MyTextFiles", "*.txt", true);

            //Tailor the list to not include a specific file.
            foreach (ListEntry entry in filesToGet)
            {
                if (entry.Name == "not_me.txt")
                {
                    filesToGet.Remove(entry);
                    break;
                }
            }

            //Retrieve the files.
            string workingDirectory = ftp1.GetDirectory();
            ftp1.Get(filesToGet, workingDirectory + "/MyTextFiles", myLocalDirectory, Synchronize.Off);
        }
        </code><code lang="VB">
        Public Sub getMultipleFiles()
            'Retrieve a list of txt files to transfer.
            Dim filesToGet As List(Of ListEntry) = ftp1.ListDirectoryTree("MyTextFiles", "*.txt", True)

            'Tailor the list to not include a specific file.
            For Each entry As ListEntry In filesToGet
                If entry.Name = "not_me.txt" Then
                    filesToGet.Remove(entry)
                    Exit For
                End If
            Next entry

            'Retrieve the files.
            Dim workingDirectory As String = ftp1.GetDirectory()
            ftp1.Get(filesToGet, workingDirectory &amp; "/MyTextFiles", myLocalDirectory, Synchronize.Off)
        End Sub
        </code></example>
            <exception cref="T:System.ArgumentException">
                <i>pattern</i> is an absolute path (starts with "/").</exception>
        </member>
        <member name="M:Dart.Ftp.Ftp.Put(System.String,System.String,Dart.Ftp.Synchronize)">
            <summary>
            Upload a file to an FTP server.
            </summary>
            <param name="localPath">Path to the local file to upload.</param>
            <param name="remotePath">Absolute or relative destination filepath.</param>
            <param name="sync">The file synchronization technique desired, if any.</param>
            <remarks>
                <para>
                    <see cref="P:Dart.Ftp.Ftp.DataIsBusy" /> returns true while this method executes.</para>
                <para>
        Characters specified in the remote path are sent to the server unmodified. If the path contains characters that are invalid for the server host filesystem, it may cause the operation to fail with an FtpProtocolException.
      </para>
            </remarks>
            <returns>
                <see cref="T:Dart.Ftp.CopyResult" /> containing the result of the operation.</returns>
            <example>
        This example demonstrates using the FTP control to store a file using the FTP STOR Command. For details on displaying file transfer progress see the Ftp.Progress event.
        <code lang="C#">
        private void putFile()
        {
            ftp1.Put(myLocalDirectory + "\\testfile.txt", "testfile.txt", Synchronize.Off);
        }
        </code><code lang="VB">
        Private Sub putFile()
            ftp1.Put(myLocalDirectory &amp; "\testfile.txt", "testfile.txt", Synchronize.Off)
        End Sub
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Ftp.Put(System.IO.Stream,System.String,System.Int64,Dart.Ftp.StoreType)">
            <summary>
            Starts upload from the current position in the specified source stream and writes to the destination file at the 
            specified offset.
            </summary>
            <param name="localSource">Source stream to read from.</param>
            <param name="remotePath">Absolute or relative destination filepath.</param>
            <param name="remoteOffset">Restart marker to which the data transfer should start. Used when storeType is StoreType.Replace.</param>
            <param name="storeType">The type of store to use. If remoteOffset &gt; 0 then storeType must be StoreType.Replace.</param>
            <remarks>
                <para>The source Stream is not closed.</para>
                <para>
                    <see cref="P:Dart.Ftp.Ftp.DataIsBusy" /> returns true while this method executes.</para>
                <para>
        Characters specified in the remote path are sent to the server unmodified. If the path contains characters that are invalid for the server host filesystem, it may cause the operation to fail with an FtpProtocolException.
      </para>
            </remarks>
            <returns>
                <see cref="T:Dart.Ftp.CopyResult" /> containing the result of the operation.</returns>
            <example>
        The following example demonstrates restarting/resuming a Put.
        <code lang="C#">
        /// &lt;summary&gt;
        /// Resumes a Put operation
        /// &lt;/summary&gt;
        /// &lt;param name="myFtp"&gt;A connected and authenticated Ftp instance&lt;/param&gt;
        /// &lt;param name="localPath"&gt;Path to the local file&lt;/param&gt;
        /// &lt;param name="remotePath"&gt;An absolute or relative path to the file on the server&lt;/param&gt;
        /// &lt;returns&gt;The CopyResult of the operation&lt;/returns&gt;
        public CopyResult RestartPut(Ftp myFtp, string localPath, string remotePath)
        {
            //Check that the server advertises/supports features required to resume a Put
            if (!myFtp.Features.Size || !myFtp.Features.Restart)
                throw new Exception("Server doesn't support features required to restart a Put");

            //Ensure that the Ftp object is in binary/image transfer mode
            myFtp.SetType(FileType.Image);

            //Get the size of the remote file
            long offset = myFtp.GetSize(remotePath);

            using (FileStream fs = File.OpenRead(localPath))
            {
                //Set the stream to the correct position
                fs.Position = offset;
                //Resume the transfer, and (optionally) return the result
                return myFtp.Put(fs, remotePath, offset, StoreType.Replace);
            }
        }
        </code><code lang="VB">
        ''' &lt;summary&gt;
        ''' Resumes a Put operation
        ''' &lt;/summary&gt;
        ''' &lt;param name="myFtp"&gt;A connected and authenticated Ftp instance&lt;/param&gt;
        ''' &lt;param name="localPath"&gt;Path to the local file&lt;/param&gt;
        ''' &lt;param name="remotePath"&gt;An absolute or relative path to the file on the server&lt;/param&gt;
        ''' &lt;returns&gt;The CopyResult of the operation&lt;/returns&gt;
        Public Function RestartPut(ByVal myFtp As Ftp, ByVal localPath As String, ByVal remotePath As String) As CopyResult
            'Check that the server advertises/supports features required to resume a Put
            If (Not myFtp.Features.Size) OrElse (Not myFtp.Features.Restart) Then
                Throw New Exception("Server doesn't support features required to restart a Put")
            End If

            'Ensure that the Ftp object is in binary/image transfer mode
            myFtp.SetType(FileType.Image)

            'Get the size of the remote file
            Dim offset As Long = myFtp.GetSize(remotePath)

            Using fs As FileStream = File.OpenRead(localPath)
                'Set the stream to the correct position
                fs.Position = offset
                'Resume the transfer, and (optionally) return the result
                Return myFtp.Put(fs, remotePath, offset, StoreType.Replace)
            End Using
        End Function
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Ftp.Put(System.Collections.Generic.List{System.IO.FileSystemInfo},System.String,System.String,Dart.Ftp.Synchronize)">
            <summary>
            Put the specified files and folders onto the server using a single method.
            </summary>
            <param name="localFileSystemInfos">A list of FileSystemInfo objects representing files to 
            upload and folders to create. Use null to copy all files, directories and subdirectories 
            found in localRoot.</param>
            <param name="localRoot">Absolute or relative local root directory from which the files and folders will be copied.</param>
            <param name="remoteRoot">Absolute or relative remote root directory to which the files and folders will be copied.</param>
            <param name="sync">The file synchronization technique desired, if any.</param>
            <remarks>
                <para>
            localFileSystemInfos must contain DirectoryInfo objects for any subfolders under localRoot containing 
            files specified by FileInfo objects in this list, if the subfolder does not exist in remoteRoot.
            </para>
                <para>
                    <see cref="P:Dart.Ftp.Ftp.DataIsBusy" /> returns true while this method executes.</para>
                <para>
            The local file and directory paths relative to localRoot are assumed to be legal on the remote filesystem. If not, use the other Put methods to specify 
            a legal remote path manually.
            </para>
            </remarks>
            <returns>A List of <see cref="T:Dart.Ftp.CopyResult" /> objects.</returns>
            <example>
        This example demonstrates using the FTP control to retrieve multiple files using the FTP GET Command.
        <code lang="C#">
        public void putMultipleFiles()
        {
            //Get a list of files to put.
            System.IO.DirectoryInfo rootDir = new System.IO.DirectoryInfo(myLocalDirectory);
            List&lt;System.IO.FileSystemInfo&gt; files = new List&lt;System.IO.FileSystemInfo&gt;(rootDir.GetFileSystemInfos());

            //Modify the list prior to the Put.
            files.Remove(new System.IO.FileInfo(myLocalDirectory + "\\not_me.txt"));

            //Put the files.
            ftp1.Put(files, myLocalDirectory, "MyTextFiles", Synchronize.Off);
        }
        </code><code lang="VB">
        Public Sub putMultipleFiles()
            'Get a list of files to put.
            Dim rootDir As New System.IO.DirectoryInfo(myLocalDirectory)
            Dim files As New List(Of System.IO.FileSystemInfo)(rootDir.GetFileSystemInfos())

            'Modify the list prior to the Put.
            files.Remove(New System.IO.FileInfo(myLocalDirectory &amp; "\not_me.txt"))

            'Put the files.
            ftp1.Put(files, myLocalDirectory, "MyTextFiles", Synchronize.Off)
        End Sub
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Ftp.Put(System.String,System.Int64,Dart.Ftp.StoreType)">
            <summary>
            Lowest level Put method starts upload to the specified offset.
            </summary>
            <param name="remotePath">Absolute or relative destination file path.</param>
            <param name="remoteOffset">Restart marker to which the data transfer should start. Used when storeType is StoreType.Replace.</param>
            <param name="storeType">The type of store to use. If remoteOffset &gt; 0 then storeType must be StoreType.Replace.</param>
            <remarks>
                <para>
            The returned stream must be closed before sending more commands over the control connection (the server response to the store command is read when the stream is closed).
            </para>
                <para>
                    <see cref="P:Dart.Ftp.Ftp.DataIsBusy" /> returns true until the stream this method opens is closed.</para>
                <para>
        Characters specified in the remote path are sent to the server unmodified. If the path contains characters that are invalid for the server host filesystem, it may cause the operation to fail with an FtpProtocolException.
      </para>
            </remarks>
            <returns>A Stream to write to.</returns>
            <example>
        The following example demonstrates using a stream to process data as it is uploaded to the server.
        <code lang="C#">
        private void processRecords()
        {
            //Open the local file for transfer, with 'using' so it is automatically closed and disposed
            using (FileStream localFileStream = File.OpenRead(myRecordsFile))
            {
                //Request a stream for writing to the remote file, with 'using' so it is automatically closed and disposed
                using (Stream remoteStream = ftp1.Put(myRecordsFile, 0, StoreType.Replace))
                {
                    //Create the buffer to read data into for transfer.
                    //In this example, each record is 64 bytes, but not delimited
                    byte[] buffer = new byte[64];

                    //Create the end of record tag as a byte array.
                    byte[] endOfRecord = System.Text.Encoding.Default.GetBytes("[END OF RECORD]" + Environment.NewLine);

                    int count = -1;

                    //Write until all local file records are written.
                    do
                    {
                        //Read the data into the buffer.
                        count = localFileStream.Read(buffer, 0, buffer.Length);

                        //Write the record to the remote file. 
                        remoteStream.Write(buffer, 0, buffer.Length);

                        //Write the end of record tag.
                        remoteStream.Write(endOfRecord, 0, endOfRecord.Length);
                    } while (count &gt; 0);
                }
            }
        }
        </code><code lang="VB">
        Private Sub processRecords()
            'Open the local file for transfer, with 'using' so it is automatically closed and disposed
            Using localFileStream As FileStream = File.OpenRead(myRecordsFile)
                'Request a stream for writing to the remote file, with 'using' so it is automatically closed and disposed
                Using remoteStream As Stream = ftp1.Put(myRecordsFile, 0, StoreType.Replace)
                    'Create the buffer to read data into for transfer.
                    'In this example, each record is 64 bytes, but not delimited
                    Dim buffer(63) As Byte

                    'Create the end of record tag as a byte array.
                    Dim endOfRecord() As Byte = System.Text.Encoding.Default.GetBytes("[END OF RECORD]" &amp; Environment.NewLine)

                    Dim count As Integer = -1

                    'Write until all local file records are written.
                    Do
                        'Read the data into the buffer.
                        count = localFileStream.Read(buffer, 0, buffer.Length)

                        'Write the record to the remote file. 
                        remoteStream.Write(buffer, 0, buffer.Length)

                        'Write the end of record tag.
                        remoteStream.Write(endOfRecord, 0, endOfRecord.Length)
                    Loop While count &gt; 0
                End Using
            End Using
        End Sub
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Ftp.Abort">
            <summary>
            Immediately terminate any file transfer or listing operation and close the control connection.
            </summary>
        </member>
        <member name="M:Dart.Ftp.Ftp.AbortData">
            <summary>
            Aborts any ongoing file transfer.
            </summary>
            <remarks>
            Call this method to gracefully abort any file transfer(s) in progress. 
            If a file is being retrieved, the ABOR command is sent (IP/SYNCH signaling is used for non-SSL connections) and the data connection is immediately closed. 
            If storing a file, the transfer simply exits gracefully. 
            The control connection is not disturbed and will accept additional commands after the data connection is closed (<see cref="P:Dart.Ftp.Ftp.DataIsBusy" /> is false).
            </remarks>
        </member>
        <member name="M:Dart.Ftp.Ftp.ChangeDirectoryUp">
            <summary>
            Sends the "CDUP" command to the server.
            </summary>
            <exception cref="T:Dart.Ftp.FtpProtocolException">The command did not succeed.</exception>
            <returns>
                <see cref="T:Dart.Ftp.Response" />
            </returns>
        </member>
        <member name="M:Dart.Ftp.Ftp.CreateDirectory(System.String)">
            <summary>
            Sends the "MKD" command to the server.
            </summary>
            <param name="path">Absolute or relative path to the new directory.</param>
            <exception cref="T:Dart.Ftp.FtpProtocolException">The command did not succeed.</exception>
            <remarks>
                <para>
        Characters specified in the remote path are sent to the server unmodified. If the path contains characters that are invalid for the server host filesystem, it may cause the operation to fail with an FtpProtocolException.
      </para>
            </remarks>
            <returns>
                <see cref="T:Dart.Ftp.Response" />
            </returns>
        </member>
        <member name="M:Dart.Ftp.Ftp.GetDirectory">
            <summary>
            Gets the server's current working directory.
            </summary>
            <remarks>If UsePWD is set to false, will return String.Empty.</remarks>
            <returns>String value containing the current working directory</returns>
        </member>
        <member name="M:Dart.Ftp.Ftp.GetModificationTime(System.String)">
            <summary>
            Sends the "MDTM" command to the server and parses the response.
            </summary>
            <param name="path">Path to file.</param>
            <exception cref="T:Dart.Ftp.FtpProtocolException">The command did not succeed.</exception>
            <returns>
                <see cref="T:System.DateTime" />
            </returns>
        </member>
        <member name="M:Dart.Ftp.Ftp.GetSize(System.String)">
            <summary>
            Get the size of a remote file.
            </summary>
            <param name="path">Path to the file on the server.</param>
            <returns>Size of the file specified if the SIZE command is supported, or 0 if the SIZE command is not supported.</returns>
            <remarks>
                <see cref="P:Dart.Ftp.Features.Size">Ftp.Features.Size</see> may be checked to determine server support for the SIZE command.
            </remarks>
            <exception cref="T:Dart.Ftp.FtpProtocolException">The server returned an error response code.</exception>
        </member>
        <member name="M:Dart.Ftp.Ftp.Help(System.String)">
            <summary>
            Sends the "HELP" command to the server.
            </summary>
            <param name="command">Command that help is being requested for.</param>
            <exception cref="T:Dart.Ftp.FtpProtocolException">The command did not succeed.</exception>
            <returns>
                <see cref="T:Dart.Ftp.Response" />
            </returns>
        </member>
        <member name="M:Dart.Ftp.Ftp.Noop">
            <summary>
            Sends the "NOOP" (no operation) command to the server.
            </summary>
            <remarks>This method be used to keep the control connection active during idle periods when the server would 
            normally close the control connection.</remarks>
            <returns>
                <see cref="T:Dart.Ftp.Response" />
            </returns>
        </member>
        <member name="M:Dart.Ftp.Ftp.Delete(System.String)">
            <summary>
            Sends the "DELE" command to the server.
            </summary>
            <param name="path">Absolute or relative path to the file.</param>
            <exception cref="T:Dart.Ftp.FtpProtocolException">The command did not succeed.</exception>
            <returns>
                <see cref="T:Dart.Ftp.Response" />
            </returns>
            <example>
        This example demonstrates using the FTP control to delete files and subdirectories.
        <code lang="C#">
        private void deleteFiles()
        {
            //Delete a list of files (in this case, the txt files).
            ftp1.Delete(ftp1.ListDirectoryTree("MyTextFiles", "*.txt", false));

            //Delete a specific file.
            ftp1.Delete("MyTextFiles/test.dat");

            //Delete the directory, even when it is not empty.
            ftp1.DeleteDirectory("MyTextFiles");
        }
        </code><code lang="VB">
        Private Sub deleteFiles()
            'Delete a list of files (in this case, the txt files).
            ftp1.Delete(ftp1.ListDirectoryTree("MyTextFiles", "*.txt", False))

            'Delete a specific file.
            ftp1.Delete("MyTextFiles/test.dat")

            'Delete the directory, even when it is not empty.
            ftp1.DeleteDirectory("MyTextFiles")
        End Sub
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Ftp.Delete(System.Collections.Generic.List{Dart.Ftp.ListEntry})">
            <summary>
            Delete the specified files and directories using a single method.
            </summary>
            <param name="listing">A file <see cref="E:Dart.Ftp.Ftp.Listing" /> that includes files and directories to delete.</param>
            <remarks>
                <para>Any specified directories that are not empty (after the specified files are removed) will not be deleted by the server.</para>
                <para>Use <see cref="M:Dart.Ftp.Ftp.DeleteDirectory(System.String)" /> for deleting a directory tree.</para>
                <para>First all files, then all directories are removed, starting at the end of the list.</para>
            </remarks>
            <exception cref="T:Dart.Ftp.FtpProtocolException">At least one command did not succeed. Details are included in the exception thrown.</exception>
            <returns>A List of <see cref="T:Dart.Ftp.Response" /> objects.</returns>
            <example>
        This example demonstrates using the FTP control to delete files and subdirectories.
        <code lang="C#">
        private void deleteFiles()
        {
            //Delete a list of files (in this case, the txt files).
            ftp1.Delete(ftp1.ListDirectoryTree("MyTextFiles", "*.txt", false));

            //Delete a specific file.
            ftp1.Delete("MyTextFiles/test.dat");

            //Delete the directory, even when it is not empty.
            ftp1.DeleteDirectory("MyTextFiles");
        }
        </code><code lang="VB">
        Private Sub deleteFiles()
            'Delete a list of files (in this case, the txt files).
            ftp1.Delete(ftp1.ListDirectoryTree("MyTextFiles", "*.txt", False))

            'Delete a specific file.
            ftp1.Delete("MyTextFiles/test.dat")

            'Delete the directory, even when it is not empty.
            ftp1.DeleteDirectory("MyTextFiles")
        End Sub
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Ftp.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory and all subfolders and files.
            </summary>
            <param name="rootDirectory">The absolute or relative path of the directory to remove.</param>
            <returns>A List of <see cref="T:Dart.Ftp.Response" /> objects representing the files and directories that were acted upon.</returns>
            <remarks>
            In the event of a failure an <see cref="T:Dart.Ftp.FtpProtocolException" /> will be thrown that will contain the list of <see cref="T:Dart.Ftp.Response" /> objects.
            The failed response will have code whose value is greater than 400. If you receive a '500 Directory not empty' error it could be an indication
            that the directory contains hidden files.
            </remarks>
            <example>
        This example demonstrates using the FTP control to delete files and subdirectories.
        <code lang="C#">
        private void deleteFiles()
        {
            //Delete a list of files (in this case, the txt files).
            ftp1.Delete(ftp1.ListDirectoryTree("MyTextFiles", "*.txt", false));

            //Delete a specific file.
            ftp1.Delete("MyTextFiles/test.dat");

            //Delete the directory, even when it is not empty.
            ftp1.DeleteDirectory("MyTextFiles");
        }
        </code><code lang="VB">
        Private Sub deleteFiles()
            'Delete a list of files (in this case, the txt files).
            ftp1.Delete(ftp1.ListDirectoryTree("MyTextFiles", "*.txt", False))

            'Delete a specific file.
            ftp1.Delete("MyTextFiles/test.dat")

            'Delete the directory, even when it is not empty.
            ftp1.DeleteDirectory("MyTextFiles")
        End Sub
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Ftp.Rename(System.String,System.String)">
            <summary>
            Rename a file or directory.
            </summary>
            <param name="oldPath">Existing path.</param>
            <param name="newPath">New name for path.</param>
            <exception cref="T:Dart.Ftp.FtpProtocolException">The command did not succeed.</exception>
            <remarks>
                <para>
        Characters specified in the remote path are sent to the server unmodified. If the path contains characters that are invalid for the server host filesystem, it may cause the operation to fail with an FtpProtocolException.
      </para>
            </remarks>
            <returns>A List of <see cref="T:Dart.Ftp.Response" /> objects.</returns>
        </member>
        <member name="M:Dart.Ftp.Ftp.SetModificationTime(System.String,System.DateTime)">
            <summary>
            Sets the specified file's modified time to the specified DateTime.
            </summary>
            <param name="path">Relative or absolute path to the file.</param>
            <param name="time">The DateTime to use for the new modification time.</param>
            <exception cref="T:Dart.Ftp.FtpProtocolException">The command did not succeed.</exception>
            <returns>
                <see cref="T:Dart.Ftp.Response" />
            </returns>
            <remarks>
            Sends the "MFMT" command, or "MDTM" if the server does not advertise support for MFMT.
            </remarks>
        </member>
        <member name="M:Dart.Ftp.Ftp.Send(System.String)">
            <summary>
            Send the provided command over the control connection and return the response.
            </summary>
            <param name="command">Command to send (do not include CR/LF).</param>
            <remarks>
            For example, if you set Session.AutoType to false, you can manually send the TYPE command by calling Send("TYPE I") for 
            binary or Send("TYPE A") for ascii. This gives you complete extensibility for servers that support custom commands.
            No FtpProtocolException is thrown, so the user should always check for a valid response code.
            </remarks>
            <returns>
                <see cref="T:Dart.Ftp.Response" />
            </returns>
            <example>
        This example demonstrates sending FTP commands and processing the response.
        <code lang="C#">
        public void InitConnection(object state)
        {
            //Connect to the FTP server.
            ftp1.Connect();

            //Use UTF8 if available. 
            //NOTE: Some servers require the user to be authenticated before UTF8 support can be enabled,
            //if that is true then the following line must be called after the call to ftp1.Authenticate();
            UseUTF8();

            //Authenticate the user.
            ftp1.Authenticate();

            //Send the CCC command.
            UseCCC();
        }

        public void UseUTF8()
        {
            //Check the feeatures property to see if the server supports UTF8 encoding.
            if (ftp1.Features.Utf8Encoding)
            {
                //If the server supports UTF8 encoding, send the UTF8 command as specified in RFC2640.
                //Some servers (such as Filezilla) do not explicitly require this command but others (such as IIS) do.
                Response Resp = ftp1.Send("OPTS UTF8 ON");

                if (Resp.Code &lt; 299)
                    //If the OPTS UTF8 ON command succeeded then set the connection encoding appropriately.
                    ftp1.Encoding = System.Text.Encoding.UTF8;
            }
        }

        public void UseCCC()
        {
            //Send the CCC command
            Response Resp = ftp1.Send("CCC");

            //Check the response to see if the CCC command was successful.
            if (Resp.Code &lt; 299)
                //Shutdown the SSL layer of the control connection. This command leaves the underlying unencrypted TCP connection open.
                ftp1.Connection.ShutdownSsl();
        }
        </code><code lang="VB">
        Public Sub InitConnection(ByVal state As Object)
            'Connect to the FTP server.
            ftp1.Connect()

            'Use UTF8 if available. 
            'NOTE: Some servers require the user to be authenticated before UTF8 support can be enabled,
            'if that is true then the following line must be called after the call to ftp1.Authenticate();
            UseUTF8()

            'Authenticate the user.
            ftp1.Authenticate()

            'Send the CCC command.
            UseCCC()
        End Sub

        Public Sub UseUTF8()
            'Check the feeatures property to see if the server supports UTF8 encoding.
            If ftp1.Features.Utf8Encoding Then
                'If the server supports UTF8 encoding, send the UTF8 command as specified in RFC2640.
                'Some servers (such as Filezilla) do not explicitly require this command but others (such as IIS) do.
                Dim Resp As Response = ftp1.Send("OPTS UTF8 ON")

                If Resp.Code &lt; 299 Then
                    'If the OPTS UTF8 ON command succeeded then set the connection encoding appropriately.
                    ftp1.Encoding = System.Text.Encoding.UTF8
                End If
            End If
        End Sub

        Public Sub UseCCC()
            'Send the CCC command
            Dim Resp As Response = ftp1.Send("CCC")

            'Check the response to see if the CCC command was successful.
            If Resp.Code &lt; 299 Then
                'Shutdown the SSL layer of the control connection. This command leaves the underlying unencrypted TCP connection open.
                ftp1.Connection.ShutdownSsl()
            End If
        End Sub
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Ftp.SetDirectory(System.String)">
            <summary>
            Sets the server's current working directory.
            </summary>
            <param name="path">The relative or absolute path of the new directory.</param>
            <exception cref="T:Dart.Ftp.FtpProtocolException">The command did not succeed.</exception>
            <returns>
                <see cref="T:Dart.Ftp.Response" />
            </returns>
        </member>
        <member name="M:Dart.Ftp.Ftp.SetType(Dart.Ftp.FileType)">
            <summary>
            Sends the TYPE command.
            </summary>
            <param name="type">Transfer type to use.</param>
            <returns>Response, or null if no command was sent.</returns>
            <remarks>
                <para>
            Set <see cref="P:Dart.Ftp.AsciiExtensions.Enabled" /> to false and use this command to override automatic use of the TYPE command.
            </para>
                <para>
                    <see cref="P:Dart.Ftp.Ftp.Type" /> returns the current transfer type.
            </para>
                <para>
            The TYPE command will only be sent if there is a change in transfer type.
            </para>
            </remarks>
        </member>
        <member name="P:Dart.Ftp.Ftp.Type">
            <summary>
            Gets the current file transfer type.
            </summary>
        </member>
        <member name="M:Dart.Ftp.Ftp.Site(System.String)">
            <summary>
            Send a command that is specific to the site. 
            </summary>
            <param name="command">Message to send to the server.</param>
            <exception cref="T:Dart.Ftp.FtpProtocolException">The command did not succeed.</exception>
            <remarks>"SITE 'command'" is sent to the server.</remarks>
            <returns>
                <see cref="T:Dart.Ftp.Response" />
            </returns>
        </member>
        <member name="M:Dart.Ftp.Ftp.Status">
            <summary>
            Shows current status of the FTP session.
            </summary>
            <exception cref="T:Dart.Ftp.FtpProtocolException">The command did not succeed.</exception>
            <remarks>"STAT" is sent to the server.</remarks>
            <returns>
                <see cref="T:Dart.Ftp.Response" />
            </returns>
        </member>
        <member name="M:Dart.Ftp.Ftp.StructureMount(System.String)">
            <summary>
            Mount a different file system.
            </summary>
            <param name="modifier">Identifies the file system to mount.</param>
            <exception cref="T:Dart.Ftp.FtpProtocolException">The command did not succeed.</exception>
            <remarks>"SMNT modifier" is sent to the server.</remarks>
            <returns>
                <see cref="T:Dart.Ftp.Response" />
            </returns>
        </member>
        <member name="M:Dart.Ftp.Ftp.Syst">
            <summary>
            Identifies the type of system used on the server.
            </summary>
            <exception cref="T:Dart.Ftp.FtpProtocolException">The command did not succeed.</exception>
            <remarks>"SYST" is sent to the server.</remarks>
            <returns>
                <see cref="T:Dart.Ftp.Response" />
            </returns>
        </member>
        <member name="M:Dart.Ftp.Ftp.Marshal(Dart.Ftp.CopyResult,System.String,System.Object)">
            <summary>
            Marshals a CopyResult to the UI thread.
            </summary>
            <param name="result">The <see cref="T:Dart.Ftp.CopyResult" /> to be marshaled.</param>
            <param name="message">Any message to be marshaled.</param>
            <param name="state">Any object to be marshaled.</param>
            <remarks>
                <para>
                This method is used to marshal CopyResult from a worker thread to the UI thread 
                for typical display purposes. 
                It calls the <see cref="M:Dart.Ftp.Ftp.OnCopy(Dart.Ftp.CopyEventArgs)" /> method, which raises the <see cref="E:Dart.Ftp.Ftp.Copy" /> event.
                </para>
                <para>
                See the <see cref="P:Dart.Ftp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
                Internally, SynchronizingObject.BeginInvoke is used to marshal data when the SynchronizingObject is not null, and
                Delegate.DynamicInvoke is used when SynchronizingObject is null. 
                This method is provided for convenience; the developer may of course use alternative methods for marshaling data
                if more specialized use is required.
                </para>
            </remarks>
        </member>
        <member name="E:Dart.Ftp.Ftp.Copy">
            <summary>
            Raised when <see cref="M:Dart.Ftp.Ftp.Marshal(Dart.Ftp.CopyResult,System.String,System.Object)" /> is used.
            </summary>
            <remarks>
                See the <see cref="P:Dart.Ftp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
            </remarks>
        </member>
        <member name="E:Dart.Ftp.Ftp.DataIsBusyChanged">
            <summary>
            Raised when the value of <see cref="P:Dart.Ftp.Ftp.DataIsBusy" /> changes.
            </summary>
            <remarks>
            Can be used as a trigger for enabling/disabling the UI while a file transfer or listing process is active.
            </remarks>
        </member>
        <member name="M:Dart.Ftp.Ftp.Marshal(Dart.Ftp.Listing,System.String,System.Object)">
            <summary>
            Marshals a string and/or Listing to the UI thread.
            </summary>
            <param name="listing">The listing to be marshaled.</param>
            <param name="message">Any message to be marshaled.</param>
            <param name="state">Any object to be marshaled.</param>
            <remarks>
                <para>
                This method is used to marshal a Listing from a worker thread to the UI thread 
                for typical display purposes. 
                It calls the <see cref="M:Dart.Ftp.Ftp.OnListing(Dart.Ftp.ListingEventArgs)" /> method, which raises the <see cref="E:Dart.Ftp.Ftp.Listing" /> event.
                </para>
                <para>
                See the <see cref="P:Dart.Ftp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
                Internally, SynchronizingObject.BeginInvoke is used to marshal data when the SynchronizingObject is not null, and
                Delegate.DynamicInvoke is used when SynchronizingObject is null.   
                This method is provided for convenience; the developer may of course use alternative methods for marshaling data
                if more specialized use is required.
                </para>
            </remarks>
            <example>
        This example demonstrates using the FTP control to obtain a directory listing from a remote server.
        <code lang="C#">
        private void getListing()
        {
            //Setup the Ftp session and then connect, authenticate, and retrieve a listing on a worker thread
            ftp1.Session.RemoteEndPoint.HostNameOrAddress = myServer;
            ftp1.Session.Username = myUsername;
            ftp1.Session.Password = myPassword;

            //Wire up the Listing event to receive the listing on the UI thread
            ftp1.Listing += new EventHandler&lt;ListingEventArgs&gt;(ftp1_Listing);

            //The Start method executes the listing operation on a worker thread so the UI is not blocked.
            //Worker thread Exceptions are automatically caught and marshaled to the Error event
            ftp1.Start(getListingWorker, null);
        }

        private void getListingWorker(object state)
        {
            try
            {
                //Login to a server and get a listing
                ftp1.Connect();
                ftp1.Authenticate();
                Listing listing = ftp1.List("", "", ListType.Full);

                //Marshal the listing to the UI thread
                ftp1.Marshal(listing, "", null);
            }
            finally
            {
                //Logout of the server
                ftp1.Close();
            }
        }

        private void ftp1_Listing(object sender, ListingEventArgs e)
        {
            //Add all the list entries in the listing to a listbox
            foreach (ListEntry entry in e.Listing)
                listBox1.Items.Add(entry.Text);
        }
        </code><code lang="VB">
        Private Sub getListing()
            'Setup the Ftp session and then connect, authenticate, and retrieve a listing on a worker thread
            ftp1.Session.RemoteEndPoint.HostNameOrAddress = myServer
            ftp1.Session.Username = myUsername
            ftp1.Session.Password = myPassword

            'Wire up the Listing event to receive the listing on the UI thread
            AddHandler ftp1.Listing, AddressOf ftp1_Listing

            'The Start method executes the listing operation on a worker thread so the UI is not blocked.
            'Worker thread Exceptions are automatically caught and marshaled to the Error event
            ftp1.Start(AddressOf getListingWorker, Nothing)
        End Sub

        Private Sub getListingWorker(ByVal state As Object)
            Try
                'Login to a server and get a listing
                ftp1.Connect()
                ftp1.Authenticate()
                Dim listing As Listing = ftp1.List("", "", ListType.Full)

                'Marshal the listing to the UI thread
                ftp1.Marshal(listing, "", Nothing)
            Catch ex As Exception
                ftp1.Marshal(ex)
            Finally
                'Logout of the server
                ftp1.Close()
            End Try
        End Sub

        Private Sub ftp1_Listing(ByVal sender As Object, ByVal e As ListingEventArgs)
            'Add all the list entries in the listing to a listbox
            For Each entry As ListEntry In e.Listing
                listBox1.Items.Add(entry.Text)
            Next entry
        End Sub
        </code></example>
        </member>
        <member name="E:Dart.Ftp.Ftp.Listing">
            <summary>
            Raised when <see cref="M:Dart.Ftp.Ftp.Marshal(Dart.Ftp.Listing,System.String,System.Object)" /> is used.
            </summary>
            <remarks>
                See the <see cref="P:Dart.Ftp.ComponentBase.SynchronizingObject">SynchronizingObject</see> property for information on 
                updating UI controls in your event handler.
            </remarks>
            <example>
        This example demonstrates using the FTP control to obtain a directory listing from a remote server.
        <code lang="C#">
        private void getListing()
        {
            //Setup the Ftp session and then connect, authenticate, and retrieve a listing on a worker thread
            ftp1.Session.RemoteEndPoint.HostNameOrAddress = myServer;
            ftp1.Session.Username = myUsername;
            ftp1.Session.Password = myPassword;

            //Wire up the Listing event to receive the listing on the UI thread
            ftp1.Listing += new EventHandler&lt;ListingEventArgs&gt;(ftp1_Listing);

            //The Start method executes the listing operation on a worker thread so the UI is not blocked.
            //Worker thread Exceptions are automatically caught and marshaled to the Error event
            ftp1.Start(getListingWorker, null);
        }

        private void getListingWorker(object state)
        {
            try
            {
                //Login to a server and get a listing
                ftp1.Connect();
                ftp1.Authenticate();
                Listing listing = ftp1.List("", "", ListType.Full);

                //Marshal the listing to the UI thread
                ftp1.Marshal(listing, "", null);
            }
            finally
            {
                //Logout of the server
                ftp1.Close();
            }
        }

        private void ftp1_Listing(object sender, ListingEventArgs e)
        {
            //Add all the list entries in the listing to a listbox
            foreach (ListEntry entry in e.Listing)
                listBox1.Items.Add(entry.Text);
        }
        </code><code lang="VB">
        Private Sub getListing()
            'Setup the Ftp session and then connect, authenticate, and retrieve a listing on a worker thread
            ftp1.Session.RemoteEndPoint.HostNameOrAddress = myServer
            ftp1.Session.Username = myUsername
            ftp1.Session.Password = myPassword

            'Wire up the Listing event to receive the listing on the UI thread
            AddHandler ftp1.Listing, AddressOf ftp1_Listing

            'The Start method executes the listing operation on a worker thread so the UI is not blocked.
            'Worker thread Exceptions are automatically caught and marshaled to the Error event
            ftp1.Start(AddressOf getListingWorker, Nothing)
        End Sub

        Private Sub getListingWorker(ByVal state As Object)
            Try
                'Login to a server and get a listing
                ftp1.Connect()
                ftp1.Authenticate()
                Dim listing As Listing = ftp1.List("", "", ListType.Full)

                'Marshal the listing to the UI thread
                ftp1.Marshal(listing, "", Nothing)
            Catch ex As Exception
                ftp1.Marshal(ex)
            Finally
                'Logout of the server
                ftp1.Close()
            End Try
        End Sub

        Private Sub ftp1_Listing(ByVal sender As Object, ByVal e As ListingEventArgs)
            'Add all the list entries in the listing to a listbox
            For Each entry As ListEntry In e.Listing
                listBox1.Items.Add(entry.Text)
            Next entry
        End Sub
        </code></example>
        </member>
        <member name="T:Dart.Ftp.Features">
            <summary>
            Contains response to the FEAT (features) command sent by <see cref="M:Dart.Ftp.Ftp.Authenticate" />.
            </summary>
            <remarks>The FEAT command is described in RFC 2389.</remarks>
        </member>
        <member name="P:Dart.Ftp.Features.AuthSsl">
            <summary>
            Returns true if the server advertises the "AUTH SSL" feature.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Features.AuthTlsP">
            <summary>
            Returns true if the server advertises the "AUTH TLS-P" feature. Legacy feature synonymous with "AUTH SSL".
            </summary>
        </member>
        <member name="P:Dart.Ftp.Features.AuthTls">
            <summary>
            Returns true if the server advertises the "AUTH TLS" feature.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Features.AuthTlsC">
            <summary>
            Returns true if the server advertises the "AUTH TLS-C" feature. Legacy feature synonymous with "AUTH TLS".
            </summary>
        </member>
        <member name="P:Dart.Ftp.Features.Client">
            <summary>
            Returns true if the server advertises the "CLNT" feature.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Features.Compression">
            <summary>
            Returns true if the server advertises the "COMPRESSION" feature.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Features.GetModificationTime">
            <summary>
            Returns true if the server advertises the "MDTM" feature.
            </summary>
            <remarks>Documented in RFC 3659.</remarks>
        </member>
        <member name="P:Dart.Ftp.Features.SetModificationTime">
            <summary>
            Returns true if the server advertises the "MFMT" feature.
            </summary>
            <remarks>Documented in RFC 3659.</remarks>
        </member>
        <member name="P:Dart.Ftp.Features.GetMachineListDirectory">
            <summary>
            Returns true if the server advertises the "MLSD" feature.
            </summary>
            <remarks>Documented in RFC 3659.</remarks>
        </member>
        <member name="P:Dart.Ftp.Features.GetMachineList">
            <summary>
            Returns true if the server advertises the "MLST" feature.
            </summary>
            <remarks>Documented in RFC 3659.</remarks>
        </member>
        <member name="F:Dart.Ftp.Features.Response">
            <summary>
            Returns the <see cref="F:Dart.Ftp.Features.Response" /> from the FEAT command.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Features.Restart">
            <summary>
            Returns true if the server advertises the "REST STREAM" feature.
            </summary>
            <remarks>Documented in RFC 3659.</remarks>
        </member>
        <member name="P:Dart.Ftp.Features.Size">
            <summary>
            Returns true if the server advertises the "SIZE" feature.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Features.Utf8Encoding">
            <summary>
            Returns true if the server advertises the "UTF8" feature.
            </summary>
        </member>
        <member name="T:Dart.Ftp.FtpProtocolException">
            <summary>
            Thrown when an FTP protocol error or failure is encountered.
            </summary>
            <remarks>
                <p>This exception is thrown when a server response is negative. For example, 
            if the server returned "500" (indicating a syntax error) as the response to a command.</p>
            </remarks>
        </member>
        <member name="P:Dart.Ftp.FtpProtocolException.Responses">
            <summary>
            A List of Response objects generated by the method used.
            </summary>
        </member>
        <member name="T:Dart.Ftp.EncryptControl">
            <summary>
            Enumerates the possible values for specifying the encryption of the control connection.
            </summary>
            <remarks>
                <para>
            With implicit security, it is understood that both the client and the server will use TLS/SSL for the entire session. 
            The client connects, the SSL handshake occurs, and (if successful) secure communication continues for the session. 
            For this reason, implicit encryption typically must use a different port (the well-known port of 990).
            </para>
                <para>
            With explicit security, secure communication occurs only after some preliminary negotiation in the clear. 
            The client connects normally to the FTP server on the well-known port of 21 and issues the AUTH command along with 
            the security mechanism (such as TLS) that the client would like to use. 
            If the server supports this mechanism and responds positively, secure communication continues for the rest of the session.
            </para>
                <para>
            EncryptControl.Explicit will select the AUTH command from the server's response to a FEAT command in the order of preference: 
            "AUTH TLS", "AUTH TLS-C", "AUTH SSL" or "AUTH TLS-P", and will fallback to "AUTH TLS" if the server does not advertise any.
            </para>
                <para>
            Despite that some legacy AUTH arguments imply data channel encryption, it is controlled solely by the value of 
            <see cref="P:Dart.Ftp.FtpSecurity.EncryptData" />; when it is false, data channel encryption will be explicitly disabled.
            </para>
            </remarks>
            <example>
        The following example demonstrates connecting to an Ftp server, with options for encryption (FTPS: Explicit/Implicit), and authenticating the user.
        <code lang="C#">
        using System.Security.Cryptography.X509Certificates;
        using System.Security.Authentication;
        using System.Net.Security;

        /// &lt;summary&gt;
        /// Connects to an Ftp server, optionally using encryption (Explicit/Implicit), and authenticates the user.
        /// &lt;/summary&gt;
        /// &lt;param name="myFtp"&gt;The Ftp instance to connect and authenticate&lt;/param&gt;
        /// &lt;param name="hostNameOrAddress"&gt;The server's hostname or IP address&lt;/param&gt;
        /// &lt;param name="port"&gt;Port that the server is listening on. Usually 21 for Explicit or non-secure, 990 for Implicit.&lt;/param&gt;
        /// &lt;param name="username"&gt;Username&lt;/param&gt;
        /// &lt;param name="password"&gt;Password&lt;/param&gt;
        /// &lt;param name="encryptControl"&gt;Controls whether SSL/TLS is used, and the implementation. None/Explicit/Implicit.&lt;/param&gt;
        /// &lt;param name="encryptData"&gt;Controls whether the data channel is encrypted.&lt;/param&gt;
        private void ConnectFtp(Ftp myFtp, string hostNameOrAddress, int port, string username, string password, EncryptControl encryptControl, bool encryptData)
        {
            //Set the server address
            myFtp.Session.RemoteEndPoint = new IPEndPoint(hostNameOrAddress, port);

            if (encryptControl != EncryptControl.None)
            {
                //Set the control channel's security protocol - Implicit/Explicit
                myFtp.Session.Security.EncryptControl = encryptControl;

                //Set whether the data channel should be encrypted. This may or may not be required by your FTP server.
                myFtp.Session.Security.EncryptData = encryptData;

                //Optionally set the protocols available for SSL/TLS negotiation (defaults to SslProtocols.Default)
                //TLS 1.1/1.2 requires .NET 4.5+. See the SslProtocols MSDN documentation for more information.
                myFtp.Session.Security.Protocols = SslProtocols.Tls | SslProtocols.Ssl3;

                //Specify the server certificate validation callback
                myFtp.Session.Security.ValidationCallback = remoteCertificateValidation;
            }

            //Connect to the server.
            myFtp.Connect();

            //Authenticate the user.
            myFtp.Authenticate(username, password);
        }

        private bool remoteCertificateValidation(Object sender, X509Certificate remoteCertificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
        {
            //For this simple snippet, accept all server certificates. Please see the 'Security' top-level help topics for more information, or 
            //the System.Net.Security.RemoteCertificateValidationCallback MSDN documentation.
            return true;
        }
        </code><code lang="VB">
        Imports System.Security.Cryptography.X509Certificates
        Imports System.Security.Authentication
        Imports System.Net.Security

        ''' &lt;summary&gt;
        ''' Connects to an Ftp server, optionally using encryption (Explicit/Implicit), and authenticates the user.
        ''' &lt;/summary&gt;
        ''' &lt;param name="myFtp"&gt;The Ftp instance to connect and authenticate&lt;/param&gt;
        ''' &lt;param name="hostNameOrAddress"&gt;The server's hostname or IP address&lt;/param&gt;
        ''' &lt;param name="port"&gt;Port that the server is listening on. Usually 21 for Explicit or non-secure, 990 for Implicit.&lt;/param&gt;
        ''' &lt;param name="username"&gt;Username&lt;/param&gt;
        ''' &lt;param name="password"&gt;Password&lt;/param&gt;
        ''' &lt;param name="encryptControl"&gt;Controls whether SSL/TLS is used, and the implementation. None/Explicit/Implicit.&lt;/param&gt;
        ''' &lt;param name="encryptData"&gt;Controls whether the data channel is encrypted.&lt;/param&gt;
        Private Sub ConnectFtp(ByVal myFtp As Ftp, ByVal hostNameOrAddress As String, ByVal port As Integer, ByVal username As String, ByVal password As String, ByVal encryptControl As EncryptControl, ByVal encryptData As Boolean)
            'Set the server address
            myFtp.Session.RemoteEndPoint = New IPEndPoint(hostNameOrAddress, port)

            If encryptControl &lt;&gt; Dart.Ftp.EncryptControl.None Then
                'Set the control channel's security protocol - Implicit/Explicit
                myFtp.Session.Security.EncryptControl = encryptControl

                'Set whether the data channel should be encrypted. This may or may not be required by your FTP server.
                myFtp.Session.Security.EncryptData = encryptData

                'Optionally set the protocols available for SSL/TLS negotiation (defaults to SslProtocols.Default)
                'TLS 1.1/1.2 requires .NET 4.5+. See the SslProtocols MSDN documentation for more information.
                myFtp.Session.Security.Protocols = SslProtocols.Tls Or SslProtocols.Ssl3

                'Specify the server certificate validation callback
                myFtp.Session.Security.ValidationCallback = AddressOf remoteCertificateValidation
            End If

            'Connect to the server.
            myFtp.Connect()

            'Authenticate the user.
            myFtp.Authenticate(username, password)
        End Sub

        Private Function remoteCertificateValidation(ByVal sender As Object, ByVal remoteCertificate As X509Certificate, ByVal chain As X509Chain, ByVal sslPolicyErrors As SslPolicyErrors) As Boolean
            'For this simple snippet, accept all server certificates. Please see the 'Security' top-level help topics for more information, or 
            'the System.Net.Security.RemoteCertificateValidationCallback MSDN documentation.
            Return True
        End Function
        </code></example>
        </member>
        <member name="F:Dart.Ftp.EncryptControl.None">
            <summary>
            No encryption is to be used.
            </summary>
        </member>
        <member name="F:Dart.Ftp.EncryptControl.Explicit">
            <summary>
            Encryption will be negotiated in Ftp.Authenticate based on the response to a FEAT command.
            </summary>
        </member>
        <member name="F:Dart.Ftp.EncryptControl.Implicit">
            <summary>
            Encryption will be negotiated immediately after establishing the control connection with the server.
            </summary>
        </member>
        <member name="F:Dart.Ftp.EncryptControl.ExplicitTls">
            <summary>
            Encryption will be negotiated in Ftp.Authenticate using "AUTH TLS" (only).
            </summary>
        </member>
        <member name="F:Dart.Ftp.EncryptControl.ExplicitTlsC">
            <summary>
            Encryption will be negotiated in Ftp.Authenticate using "AUTH TLS-C" (only). Legacy command synonymous with "AUTH TLS".
            </summary>
        </member>
        <member name="F:Dart.Ftp.EncryptControl.ExplicitSsl">
            <summary>
            Encryption will be negotiated in Ftp.Authenticate using "AUTH SSL" (only).
            </summary>
        </member>
        <member name="F:Dart.Ftp.EncryptControl.ExplicitTlsP">
            <summary>
            Encryption will be negotiated in Ftp.Authenticate using "AUTH TLS-P" (only). Legacy command synonymous with "AUTH SSL".
            </summary>
        </member>
        <member name="T:Dart.Ftp.FtpSecurity">
            <summary>
            Specializes the ClientSecurity class with properties used by FTP.
            </summary>
            <example>
        The following example demonstrates connecting to an Ftp server, with options for encryption (FTPS: Explicit/Implicit), and authenticating the user.
        <code lang="C#">
        using System.Security.Cryptography.X509Certificates;
        using System.Security.Authentication;
        using System.Net.Security;

        /// &lt;summary&gt;
        /// Connects to an Ftp server, optionally using encryption (Explicit/Implicit), and authenticates the user.
        /// &lt;/summary&gt;
        /// &lt;param name="myFtp"&gt;The Ftp instance to connect and authenticate&lt;/param&gt;
        /// &lt;param name="hostNameOrAddress"&gt;The server's hostname or IP address&lt;/param&gt;
        /// &lt;param name="port"&gt;Port that the server is listening on. Usually 21 for Explicit or non-secure, 990 for Implicit.&lt;/param&gt;
        /// &lt;param name="username"&gt;Username&lt;/param&gt;
        /// &lt;param name="password"&gt;Password&lt;/param&gt;
        /// &lt;param name="encryptControl"&gt;Controls whether SSL/TLS is used, and the implementation. None/Explicit/Implicit.&lt;/param&gt;
        /// &lt;param name="encryptData"&gt;Controls whether the data channel is encrypted.&lt;/param&gt;
        private void ConnectFtp(Ftp myFtp, string hostNameOrAddress, int port, string username, string password, EncryptControl encryptControl, bool encryptData)
        {
            //Set the server address
            myFtp.Session.RemoteEndPoint = new IPEndPoint(hostNameOrAddress, port);

            if (encryptControl != EncryptControl.None)
            {
                //Set the control channel's security protocol - Implicit/Explicit
                myFtp.Session.Security.EncryptControl = encryptControl;

                //Set whether the data channel should be encrypted. This may or may not be required by your FTP server.
                myFtp.Session.Security.EncryptData = encryptData;

                //Optionally set the protocols available for SSL/TLS negotiation (defaults to SslProtocols.Default)
                //TLS 1.1/1.2 requires .NET 4.5+. See the SslProtocols MSDN documentation for more information.
                myFtp.Session.Security.Protocols = SslProtocols.Tls | SslProtocols.Ssl3;

                //Specify the server certificate validation callback
                myFtp.Session.Security.ValidationCallback = remoteCertificateValidation;
            }

            //Connect to the server.
            myFtp.Connect();

            //Authenticate the user.
            myFtp.Authenticate(username, password);
        }

        private bool remoteCertificateValidation(Object sender, X509Certificate remoteCertificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
        {
            //For this simple snippet, accept all server certificates. Please see the 'Security' top-level help topics for more information, or 
            //the System.Net.Security.RemoteCertificateValidationCallback MSDN documentation.
            return true;
        }
        </code><code lang="VB">
        Imports System.Security.Cryptography.X509Certificates
        Imports System.Security.Authentication
        Imports System.Net.Security

        ''' &lt;summary&gt;
        ''' Connects to an Ftp server, optionally using encryption (Explicit/Implicit), and authenticates the user.
        ''' &lt;/summary&gt;
        ''' &lt;param name="myFtp"&gt;The Ftp instance to connect and authenticate&lt;/param&gt;
        ''' &lt;param name="hostNameOrAddress"&gt;The server's hostname or IP address&lt;/param&gt;
        ''' &lt;param name="port"&gt;Port that the server is listening on. Usually 21 for Explicit or non-secure, 990 for Implicit.&lt;/param&gt;
        ''' &lt;param name="username"&gt;Username&lt;/param&gt;
        ''' &lt;param name="password"&gt;Password&lt;/param&gt;
        ''' &lt;param name="encryptControl"&gt;Controls whether SSL/TLS is used, and the implementation. None/Explicit/Implicit.&lt;/param&gt;
        ''' &lt;param name="encryptData"&gt;Controls whether the data channel is encrypted.&lt;/param&gt;
        Private Sub ConnectFtp(ByVal myFtp As Ftp, ByVal hostNameOrAddress As String, ByVal port As Integer, ByVal username As String, ByVal password As String, ByVal encryptControl As EncryptControl, ByVal encryptData As Boolean)
            'Set the server address
            myFtp.Session.RemoteEndPoint = New IPEndPoint(hostNameOrAddress, port)

            If encryptControl &lt;&gt; Dart.Ftp.EncryptControl.None Then
                'Set the control channel's security protocol - Implicit/Explicit
                myFtp.Session.Security.EncryptControl = encryptControl

                'Set whether the data channel should be encrypted. This may or may not be required by your FTP server.
                myFtp.Session.Security.EncryptData = encryptData

                'Optionally set the protocols available for SSL/TLS negotiation (defaults to SslProtocols.Default)
                'TLS 1.1/1.2 requires .NET 4.5+. See the SslProtocols MSDN documentation for more information.
                myFtp.Session.Security.Protocols = SslProtocols.Tls Or SslProtocols.Ssl3

                'Specify the server certificate validation callback
                myFtp.Session.Security.ValidationCallback = AddressOf remoteCertificateValidation
            End If

            'Connect to the server.
            myFtp.Connect()

            'Authenticate the user.
            myFtp.Authenticate(username, password)
        End Sub

        Private Function remoteCertificateValidation(ByVal sender As Object, ByVal remoteCertificate As X509Certificate, ByVal chain As X509Chain, ByVal sslPolicyErrors As SslPolicyErrors) As Boolean
            'For this simple snippet, accept all server certificates. Please see the 'Security' top-level help topics for more information, or 
            'the System.Net.Security.RemoteCertificateValidationCallback MSDN documentation.
            Return True
        End Function
        </code></example>
        </member>
        <member name="P:Dart.Ftp.FtpSecurity.EncryptControl">
            <summary>
            Gets or sets a value that controls how the control connection is encrypted.
            </summary>
            <remarks>
            Only controls control connection encryption. <see cref="P:Dart.Ftp.FtpSecurity.EncryptData" /> is used to configure data connection 
            encryption.
            </remarks>
            <example>
        The following example demonstrates connecting to an Ftp server, with options for encryption (FTPS: Explicit/Implicit), and authenticating the user.
        <code lang="C#">
        using System.Security.Cryptography.X509Certificates;
        using System.Security.Authentication;
        using System.Net.Security;

        /// &lt;summary&gt;
        /// Connects to an Ftp server, optionally using encryption (Explicit/Implicit), and authenticates the user.
        /// &lt;/summary&gt;
        /// &lt;param name="myFtp"&gt;The Ftp instance to connect and authenticate&lt;/param&gt;
        /// &lt;param name="hostNameOrAddress"&gt;The server's hostname or IP address&lt;/param&gt;
        /// &lt;param name="port"&gt;Port that the server is listening on. Usually 21 for Explicit or non-secure, 990 for Implicit.&lt;/param&gt;
        /// &lt;param name="username"&gt;Username&lt;/param&gt;
        /// &lt;param name="password"&gt;Password&lt;/param&gt;
        /// &lt;param name="encryptControl"&gt;Controls whether SSL/TLS is used, and the implementation. None/Explicit/Implicit.&lt;/param&gt;
        /// &lt;param name="encryptData"&gt;Controls whether the data channel is encrypted.&lt;/param&gt;
        private void ConnectFtp(Ftp myFtp, string hostNameOrAddress, int port, string username, string password, EncryptControl encryptControl, bool encryptData)
        {
            //Set the server address
            myFtp.Session.RemoteEndPoint = new IPEndPoint(hostNameOrAddress, port);

            if (encryptControl != EncryptControl.None)
            {
                //Set the control channel's security protocol - Implicit/Explicit
                myFtp.Session.Security.EncryptControl = encryptControl;

                //Set whether the data channel should be encrypted. This may or may not be required by your FTP server.
                myFtp.Session.Security.EncryptData = encryptData;

                //Optionally set the protocols available for SSL/TLS negotiation (defaults to SslProtocols.Default)
                //TLS 1.1/1.2 requires .NET 4.5+. See the SslProtocols MSDN documentation for more information.
                myFtp.Session.Security.Protocols = SslProtocols.Tls | SslProtocols.Ssl3;

                //Specify the server certificate validation callback
                myFtp.Session.Security.ValidationCallback = remoteCertificateValidation;
            }

            //Connect to the server.
            myFtp.Connect();

            //Authenticate the user.
            myFtp.Authenticate(username, password);
        }

        private bool remoteCertificateValidation(Object sender, X509Certificate remoteCertificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
        {
            //For this simple snippet, accept all server certificates. Please see the 'Security' top-level help topics for more information, or 
            //the System.Net.Security.RemoteCertificateValidationCallback MSDN documentation.
            return true;
        }
        </code><code lang="VB">
        Imports System.Security.Cryptography.X509Certificates
        Imports System.Security.Authentication
        Imports System.Net.Security

        ''' &lt;summary&gt;
        ''' Connects to an Ftp server, optionally using encryption (Explicit/Implicit), and authenticates the user.
        ''' &lt;/summary&gt;
        ''' &lt;param name="myFtp"&gt;The Ftp instance to connect and authenticate&lt;/param&gt;
        ''' &lt;param name="hostNameOrAddress"&gt;The server's hostname or IP address&lt;/param&gt;
        ''' &lt;param name="port"&gt;Port that the server is listening on. Usually 21 for Explicit or non-secure, 990 for Implicit.&lt;/param&gt;
        ''' &lt;param name="username"&gt;Username&lt;/param&gt;
        ''' &lt;param name="password"&gt;Password&lt;/param&gt;
        ''' &lt;param name="encryptControl"&gt;Controls whether SSL/TLS is used, and the implementation. None/Explicit/Implicit.&lt;/param&gt;
        ''' &lt;param name="encryptData"&gt;Controls whether the data channel is encrypted.&lt;/param&gt;
        Private Sub ConnectFtp(ByVal myFtp As Ftp, ByVal hostNameOrAddress As String, ByVal port As Integer, ByVal username As String, ByVal password As String, ByVal encryptControl As EncryptControl, ByVal encryptData As Boolean)
            'Set the server address
            myFtp.Session.RemoteEndPoint = New IPEndPoint(hostNameOrAddress, port)

            If encryptControl &lt;&gt; Dart.Ftp.EncryptControl.None Then
                'Set the control channel's security protocol - Implicit/Explicit
                myFtp.Session.Security.EncryptControl = encryptControl

                'Set whether the data channel should be encrypted. This may or may not be required by your FTP server.
                myFtp.Session.Security.EncryptData = encryptData

                'Optionally set the protocols available for SSL/TLS negotiation (defaults to SslProtocols.Default)
                'TLS 1.1/1.2 requires .NET 4.5+. See the SslProtocols MSDN documentation for more information.
                myFtp.Session.Security.Protocols = SslProtocols.Tls Or SslProtocols.Ssl3

                'Specify the server certificate validation callback
                myFtp.Session.Security.ValidationCallback = AddressOf remoteCertificateValidation
            End If

            'Connect to the server.
            myFtp.Connect()

            'Authenticate the user.
            myFtp.Authenticate(username, password)
        End Sub

        Private Function remoteCertificateValidation(ByVal sender As Object, ByVal remoteCertificate As X509Certificate, ByVal chain As X509Chain, ByVal sslPolicyErrors As SslPolicyErrors) As Boolean
            'For this simple snippet, accept all server certificates. Please see the 'Security' top-level help topics for more information, or 
            'the System.Net.Security.RemoteCertificateValidationCallback MSDN documentation.
            Return True
        End Function
        </code></example>
        </member>
        <member name="P:Dart.Ftp.FtpSecurity.EncryptData">
            <summary>
            Gets or sets a value that controls whether the data connection is encrypted.
            </summary>
            <example>
        The following example demonstrates connecting to an Ftp server, with options for encryption (FTPS: Explicit/Implicit), and authenticating the user.
        <code lang="C#">
        using System.Security.Cryptography.X509Certificates;
        using System.Security.Authentication;
        using System.Net.Security;

        /// &lt;summary&gt;
        /// Connects to an Ftp server, optionally using encryption (Explicit/Implicit), and authenticates the user.
        /// &lt;/summary&gt;
        /// &lt;param name="myFtp"&gt;The Ftp instance to connect and authenticate&lt;/param&gt;
        /// &lt;param name="hostNameOrAddress"&gt;The server's hostname or IP address&lt;/param&gt;
        /// &lt;param name="port"&gt;Port that the server is listening on. Usually 21 for Explicit or non-secure, 990 for Implicit.&lt;/param&gt;
        /// &lt;param name="username"&gt;Username&lt;/param&gt;
        /// &lt;param name="password"&gt;Password&lt;/param&gt;
        /// &lt;param name="encryptControl"&gt;Controls whether SSL/TLS is used, and the implementation. None/Explicit/Implicit.&lt;/param&gt;
        /// &lt;param name="encryptData"&gt;Controls whether the data channel is encrypted.&lt;/param&gt;
        private void ConnectFtp(Ftp myFtp, string hostNameOrAddress, int port, string username, string password, EncryptControl encryptControl, bool encryptData)
        {
            //Set the server address
            myFtp.Session.RemoteEndPoint = new IPEndPoint(hostNameOrAddress, port);

            if (encryptControl != EncryptControl.None)
            {
                //Set the control channel's security protocol - Implicit/Explicit
                myFtp.Session.Security.EncryptControl = encryptControl;

                //Set whether the data channel should be encrypted. This may or may not be required by your FTP server.
                myFtp.Session.Security.EncryptData = encryptData;

                //Optionally set the protocols available for SSL/TLS negotiation (defaults to SslProtocols.Default)
                //TLS 1.1/1.2 requires .NET 4.5+. See the SslProtocols MSDN documentation for more information.
                myFtp.Session.Security.Protocols = SslProtocols.Tls | SslProtocols.Ssl3;

                //Specify the server certificate validation callback
                myFtp.Session.Security.ValidationCallback = remoteCertificateValidation;
            }

            //Connect to the server.
            myFtp.Connect();

            //Authenticate the user.
            myFtp.Authenticate(username, password);
        }

        private bool remoteCertificateValidation(Object sender, X509Certificate remoteCertificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
        {
            //For this simple snippet, accept all server certificates. Please see the 'Security' top-level help topics for more information, or 
            //the System.Net.Security.RemoteCertificateValidationCallback MSDN documentation.
            return true;
        }
        </code><code lang="VB">
        Imports System.Security.Cryptography.X509Certificates
        Imports System.Security.Authentication
        Imports System.Net.Security

        ''' &lt;summary&gt;
        ''' Connects to an Ftp server, optionally using encryption (Explicit/Implicit), and authenticates the user.
        ''' &lt;/summary&gt;
        ''' &lt;param name="myFtp"&gt;The Ftp instance to connect and authenticate&lt;/param&gt;
        ''' &lt;param name="hostNameOrAddress"&gt;The server's hostname or IP address&lt;/param&gt;
        ''' &lt;param name="port"&gt;Port that the server is listening on. Usually 21 for Explicit or non-secure, 990 for Implicit.&lt;/param&gt;
        ''' &lt;param name="username"&gt;Username&lt;/param&gt;
        ''' &lt;param name="password"&gt;Password&lt;/param&gt;
        ''' &lt;param name="encryptControl"&gt;Controls whether SSL/TLS is used, and the implementation. None/Explicit/Implicit.&lt;/param&gt;
        ''' &lt;param name="encryptData"&gt;Controls whether the data channel is encrypted.&lt;/param&gt;
        Private Sub ConnectFtp(ByVal myFtp As Ftp, ByVal hostNameOrAddress As String, ByVal port As Integer, ByVal username As String, ByVal password As String, ByVal encryptControl As EncryptControl, ByVal encryptData As Boolean)
            'Set the server address
            myFtp.Session.RemoteEndPoint = New IPEndPoint(hostNameOrAddress, port)

            If encryptControl &lt;&gt; Dart.Ftp.EncryptControl.None Then
                'Set the control channel's security protocol - Implicit/Explicit
                myFtp.Session.Security.EncryptControl = encryptControl

                'Set whether the data channel should be encrypted. This may or may not be required by your FTP server.
                myFtp.Session.Security.EncryptData = encryptData

                'Optionally set the protocols available for SSL/TLS negotiation (defaults to SslProtocols.Default)
                'TLS 1.1/1.2 requires .NET 4.5+. See the SslProtocols MSDN documentation for more information.
                myFtp.Session.Security.Protocols = SslProtocols.Tls Or SslProtocols.Ssl3

                'Specify the server certificate validation callback
                myFtp.Session.Security.ValidationCallback = AddressOf remoteCertificateValidation
            End If

            'Connect to the server.
            myFtp.Connect()

            'Authenticate the user.
            myFtp.Authenticate(username, password)
        End Sub

        Private Function remoteCertificateValidation(ByVal sender As Object, ByVal remoteCertificate As X509Certificate, ByVal chain As X509Chain, ByVal sslPolicyErrors As SslPolicyErrors) As Boolean
            'For this simple snippet, accept all server certificates. Please see the 'Security' top-level help topics for more information, or 
            'the System.Net.Security.RemoteCertificateValidationCallback MSDN documentation.
            Return True
        End Function
        </code></example>
        </member>
        <member name="T:Dart.Ftp.AsciiExtensions">
            <summary>
            Defines the file extensions to be used for ascii mode transfers.
            </summary>
        </member>
        <member name="P:Dart.Ftp.AsciiExtensions.Enabled">
            <summary>
            When true, the <see cref="T:Dart.Ftp.AsciiExtensions" /> property is used to automatically set the transfer type,
            otherwise the user is reponsible for setting the desired transfer type using <see cref="M:Dart.Ftp.Ftp.SetType(Dart.Ftp.FileType)" /> or <see cref="M:Dart.Ftp.Ftp.Send(System.String)" />.
            </summary>
        </member>
        <member name="T:Dart.Ftp.FtpSession">
            <summary>
            Provides a holder for parameters used for many component operations.
            </summary>
            <example>
        The following example demonstrates connecting to an Ftp server, with options for encryption (FTPS: Explicit/Implicit), and authenticating the user.
        <code lang="C#">
        using System.Security.Cryptography.X509Certificates;
        using System.Security.Authentication;
        using System.Net.Security;

        /// &lt;summary&gt;
        /// Connects to an Ftp server, optionally using encryption (Explicit/Implicit), and authenticates the user.
        /// &lt;/summary&gt;
        /// &lt;param name="myFtp"&gt;The Ftp instance to connect and authenticate&lt;/param&gt;
        /// &lt;param name="hostNameOrAddress"&gt;The server's hostname or IP address&lt;/param&gt;
        /// &lt;param name="port"&gt;Port that the server is listening on. Usually 21 for Explicit or non-secure, 990 for Implicit.&lt;/param&gt;
        /// &lt;param name="username"&gt;Username&lt;/param&gt;
        /// &lt;param name="password"&gt;Password&lt;/param&gt;
        /// &lt;param name="encryptControl"&gt;Controls whether SSL/TLS is used, and the implementation. None/Explicit/Implicit.&lt;/param&gt;
        /// &lt;param name="encryptData"&gt;Controls whether the data channel is encrypted.&lt;/param&gt;
        private void ConnectFtp(Ftp myFtp, string hostNameOrAddress, int port, string username, string password, EncryptControl encryptControl, bool encryptData)
        {
            //Set the server address
            myFtp.Session.RemoteEndPoint = new IPEndPoint(hostNameOrAddress, port);

            if (encryptControl != EncryptControl.None)
            {
                //Set the control channel's security protocol - Implicit/Explicit
                myFtp.Session.Security.EncryptControl = encryptControl;

                //Set whether the data channel should be encrypted. This may or may not be required by your FTP server.
                myFtp.Session.Security.EncryptData = encryptData;

                //Optionally set the protocols available for SSL/TLS negotiation (defaults to SslProtocols.Default)
                //TLS 1.1/1.2 requires .NET 4.5+. See the SslProtocols MSDN documentation for more information.
                myFtp.Session.Security.Protocols = SslProtocols.Tls | SslProtocols.Ssl3;

                //Specify the server certificate validation callback
                myFtp.Session.Security.ValidationCallback = remoteCertificateValidation;
            }

            //Connect to the server.
            myFtp.Connect();

            //Authenticate the user.
            myFtp.Authenticate(username, password);
        }

        private bool remoteCertificateValidation(Object sender, X509Certificate remoteCertificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
        {
            //For this simple snippet, accept all server certificates. Please see the 'Security' top-level help topics for more information, or 
            //the System.Net.Security.RemoteCertificateValidationCallback MSDN documentation.
            return true;
        }
        </code><code lang="VB">
        Imports System.Security.Cryptography.X509Certificates
        Imports System.Security.Authentication
        Imports System.Net.Security

        ''' &lt;summary&gt;
        ''' Connects to an Ftp server, optionally using encryption (Explicit/Implicit), and authenticates the user.
        ''' &lt;/summary&gt;
        ''' &lt;param name="myFtp"&gt;The Ftp instance to connect and authenticate&lt;/param&gt;
        ''' &lt;param name="hostNameOrAddress"&gt;The server's hostname or IP address&lt;/param&gt;
        ''' &lt;param name="port"&gt;Port that the server is listening on. Usually 21 for Explicit or non-secure, 990 for Implicit.&lt;/param&gt;
        ''' &lt;param name="username"&gt;Username&lt;/param&gt;
        ''' &lt;param name="password"&gt;Password&lt;/param&gt;
        ''' &lt;param name="encryptControl"&gt;Controls whether SSL/TLS is used, and the implementation. None/Explicit/Implicit.&lt;/param&gt;
        ''' &lt;param name="encryptData"&gt;Controls whether the data channel is encrypted.&lt;/param&gt;
        Private Sub ConnectFtp(ByVal myFtp As Ftp, ByVal hostNameOrAddress As String, ByVal port As Integer, ByVal username As String, ByVal password As String, ByVal encryptControl As EncryptControl, ByVal encryptData As Boolean)
            'Set the server address
            myFtp.Session.RemoteEndPoint = New IPEndPoint(hostNameOrAddress, port)

            If encryptControl &lt;&gt; Dart.Ftp.EncryptControl.None Then
                'Set the control channel's security protocol - Implicit/Explicit
                myFtp.Session.Security.EncryptControl = encryptControl

                'Set whether the data channel should be encrypted. This may or may not be required by your FTP server.
                myFtp.Session.Security.EncryptData = encryptData

                'Optionally set the protocols available for SSL/TLS negotiation (defaults to SslProtocols.Default)
                'TLS 1.1/1.2 requires .NET 4.5+. See the SslProtocols MSDN documentation for more information.
                myFtp.Session.Security.Protocols = SslProtocols.Tls Or SslProtocols.Ssl3

                'Specify the server certificate validation callback
                myFtp.Session.Security.ValidationCallback = AddressOf remoteCertificateValidation
            End If

            'Connect to the server.
            myFtp.Connect()

            'Authenticate the user.
            myFtp.Authenticate(username, password)
        End Sub

        Private Function remoteCertificateValidation(ByVal sender As Object, ByVal remoteCertificate As X509Certificate, ByVal chain As X509Chain, ByVal sslPolicyErrors As SslPolicyErrors) As Boolean
            'For this simple snippet, accept all server certificates. Please see the 'Security' top-level help topics for more information, or 
            'the System.Net.Security.RemoteCertificateValidationCallback MSDN documentation.
            Return True
        End Function
        </code></example>
        </member>
        <member name="M:Dart.Ftp.FtpSession.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Dart.Ftp.FtpSession.Account">
            <summary>
            Account to use for authentication. Not normally used.
            </summary>
        </member>
        <member name="P:Dart.Ftp.FtpSession.AsciiExtensions">
            <summary>
            A list of file extensions that indicate what files should be copied using the ASCII transfer type.
            </summary>
            <remarks>
                <para>
            The ASCII transfer type signals FTP servers that use a LF or CR for a line terminator to encode it as CR/LF when
            transfering a file. Files with extensions that are not on this list will be transfered with no encoding (binary).
            </para>
                <para>
            Initialized to "asp", "c", "cf", "cgi", "cs", "css", "cpp", "h", "htm", html", "jc", "php", "pl", "ps", "rtf, "svg", "txt", "vb", "vbs" and "xml".
            </para>
                <para>
            This property has no effect when <see cref="P:Dart.Ftp.AsciiExtensions.Enabled" /> is false.
            </para>
            </remarks>
        </member>
        <member name="P:Dart.Ftp.FtpSession.AutoSize">
            <summary>
            Set to true to enable automatic use of the SIZE command for displaying progress information.
            </summary>
            <remarks>
            Defaults to true, so if the server supports the SIZE command it is used to populate <see cref="P:Dart.Ftp.CopyResult.Length" /> and
            <see cref="P:Dart.Ftp.ListProgress.TotalBytes" />. If these values are not required, then setting this property to false will disable its use.
            </remarks>
        </member>
        <member name="P:Dart.Ftp.FtpSession.BlockSize">
            <summary>
            Gets or sets the buffer size used during file and socket I/O.
            </summary>
        </member>
        <member name="P:Dart.Ftp.FtpSession.Compression">
            <summary>
            Gets or sets the type of compression desired.
            </summary>
            <remarks>
                <p>Some servers support 'MODE Z' that will compress/decompress files and listings that are transferred. 
            This is useful when bandwidth is restricted.</p>
                <p>Compression.None indicates no compression is used and bandwidth use is higher.</p>
                <p>Compression.Archive is used for client-side compression/decompression only, resulting in compressed server-side files.</p>
                <p>Compression.Full is used for client AND server compression/decompression, resulting in uncompressed server-side files.</p>
                <p>Compression software is provided by ComponentAce:</p>
                <p>Copyright (c) 2006-2007, ComponentAce
             <br>http://www.componentace.com</br><br>All rights reserved.</br></p>
                <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the 
            following conditions are met:</p>
                <p>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
            Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer 
            in the documentation and/or other materials provided with the distribution. Neither the name of ComponentAce nor the names of 
            its contributors may be used to endorse or promote products derived from this software without specific prior written permission. </p>
                <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
            BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
            IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
            CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
            OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
            (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
            SUCH DAMAGE.</p>
            </remarks>
            <value>
            The desired compression. The default is Compression.None.
            </value>
        </member>
        <member name="P:Dart.Ftp.FtpSession.ConnectType">
            <summary>
            Gets or sets a value that specifies how the data connection is established.
            </summary>
            <value>
                <see cref="T:Dart.Ftp.DataConnectType" />
            </value>
        </member>
        <member name="P:Dart.Ftp.FtpSession.DataLocalEndPoint">
            <summary>
            Specifies the IPEndPoint and port range to be used by the data connection.
            </summary>
            <remarks>Defaults to IPAddress.Any and an ephemeral port of 0.</remarks>
        </member>
        <member name="P:Dart.Ftp.FtpSession.IncludeHiddenFiles">
            <summary>
            Determines whether hidden files should be included in any Listing operations.
            </summary>
            <remarks>
            This property is only used when <see cref="T:Dart.Ftp.ListType" /> set to ListType.Full. It is equivalent to 
            adding '-a' to the search pattern.
            </remarks>
        </member>
        <member name="P:Dart.Ftp.FtpSession.ReceiveBufferSize">
            <summary>
            Gets or sets a value that determines the size of the data connection's (socket) internal receive buffer.
            </summary>
        </member>
        <member name="P:Dart.Ftp.FtpSession.SendBufferSize">
            <summary>
            Gets or sets a value that determines the size of the data connection's (socket) internal send buffer.
            </summary>
        </member>
        <member name="P:Dart.Ftp.FtpSession.MaxRate">
            <summary>
            Gets or sets the maximum transfer rate of the Ftp component in bytes per second.
            </summary>
            <remarks>
                <p>The default value of 0 indicates that all available bandwidth will be used.</p>
                <p>This property is used to throttle the speed of data transfer and can be changed during a transfer.</p>
            </remarks>
            <value>
            An integer value indicating the desired speed of transfer in bytes per second. The default is 0.
            </value>
            <example>
        The following example demonstrates setting the maximum transfer rate, to throttle file transfers.
        <code lang="C#">
        /// &lt;summary&gt;
        /// Limits the transfer rate of the provided Ftp instance
        /// &lt;/summary&gt;
        /// &lt;param name="myFtp"&gt;Ftp instance to throttle transfer rate for&lt;/param&gt;
        /// &lt;param name="maxRate"&gt;Transfer rate limit, in bytes per second&lt;/param&gt;
        public void ThrottleFtp(Ftp myFtp, int maxRate)
        {
            myFtp.Session.MaxRate = maxRate;
        }
        </code><code lang="VB">
        ''' &lt;summary&gt;
        ''' Limits the transfer rate of the provided Ftp instance
        ''' &lt;/summary&gt;
        ''' &lt;param name="myFtp"&gt;Ftp instance to throttle transfer rate for&lt;/param&gt;
        ''' &lt;param name="maxRate"&gt;Transfer rate limit, in bytes per second&lt;/param&gt;
        Public Sub ThrottleFtp(ByVal myFtp As Ftp, ByVal maxRate As Integer)
            myFtp.Session.MaxRate = maxRate
        End Sub
        </code></example>
        </member>
        <member name="P:Dart.Ftp.FtpSession.Password">
            <summary>
            Gets or sets the password to use for login.
            </summary>
            <remarks>
            Used by <see cref="M:Dart.Ftp.Ftp.Authenticate" />.
            </remarks>
        </member>
        <member name="P:Dart.Ftp.FtpSession.ProgressSize">
            <summary>
            Specifies the frequency, in bytes, for raising the Progress event.
            </summary>
            <remarks>
                <p>A lower value will provide finer granularity for a progress bar, but may 
            saturate the UI thread when larger files are transferred. A larger value will 
            provide fewer Progress events, depending on the needs of the application.</p>
                <p>When using blocking techniques, it is possible for some messages on the UI thread
            to not be processed properly, causing behavior such as button clicks not registering,
            minimized windows not being able to be restored, etc. To eliminate any such behavior, use non-blocking
            techniques (i.e. call Ftp.Put, Ftp.Get, etc in methods run on a worker thread by calling Ftp.Start).</p>
            </remarks>
            <value>
            An integer value representing the frequency the Progress event is raised at.
            </value>
        </member>
        <member name="P:Dart.Ftp.FtpSession.Security">
            <summary>
            Specifies the privacy parameters to use with the FTP server. See the <see cref="T:Dart.Ftp.FtpSecurity" /> class for more information.
            </summary>
            <value>
                <see cref="T:Dart.Ftp.FtpSecurity" />
            </value>
        </member>
        <member name="P:Dart.Ftp.FtpSession.Username">
            <summary>
            Gets or sets the username for login.
            </summary>
            <remarks>
            Used by <see cref="M:Dart.Ftp.Ftp.Authenticate" />.
            </remarks>
        </member>
        <member name="P:Dart.Ftp.FtpSession.DateTimeFormatInfo">
            <summary>
            Specifies the DateTimeFormatInfo used by <see cref="M:Dart.Ftp.Ftp.List(System.String,System.String,Dart.Ftp.ListType)" /> for parsing timestamps.
            </summary>
            <remarks>
            The default "en-US" DateTimeFormatInfo is suitable for most servers. 
            If your server returns the timestamp in a non-standard format, or uses non-english month abbreviations, 
            set this to the <see cref="P:System.Globalization.CultureInfo.DateTimeFormat">CultureInfo.DateTimeFormat</see> 
            of the appropriate <see cref="T:System.Globalization.CultureInfo">CultureInfo</see>, or construct one as needed.
            </remarks>
        </member>
        <member name="T:Dart.Ftp.ListEntry">
            <summary>
            Represents each line of the textual listing received from an FTP server.
            </summary>
            <remarks>
                <p>To access a field that is not represented in the <b>ListEntry</b> object, manually parse the <see cref="F:Dart.Ftp.ListEntry.Text" /> property.</p>
            </remarks>
            <example>
        This example demonstrates using the FTP control to obtain a directory listing from a remote server.
        <code lang="C#">
        private void getListing()
        {
            //Connect and log into the server, and get a listing
            ftp1.Connect(myServer);
            ftp1.Authenticate(myUsername, myPassword);
            Listing listing = ftp1.List("", "", ListType.Full);

            //Add all the list entries in the listing to a listbox
            foreach (ListEntry entry in listing)
                listBox1.Items.Add(entry.Text);

            //Logout of the server
            ftp1.Close();
        }
        </code><code lang="VB">
        Private Sub getListing()
            'Connect and log into the server, and get a listing
            ftp1.Connect(myServer)
            ftp1.Authenticate(myUsername, myPassword)
            Dim listing As Listing = ftp1.List("", "", ListType.Full)

            'Add all the list entries in the listing to a listbox
            For Each entry As ListEntry In listing
                listBox1.Items.Add(entry.Text)
            Next entry

            'Logout of the server
            ftp1.Close()
        End Sub
        </code></example>
        </member>
        <member name="M:Dart.Ftp.ListEntry.#ctor(System.String,System.String,Dart.Ftp.EntryType)">
            <summary>
            Constructor used to create a ListEntry using the provided parameters.
            </summary>
            <param name="directoryName">File directory or directory root.</param>
            <param name="fileOrDirectory">File or directory name.</param>
            <param name="type">Type of ListEntry.</param>
        </member>
        <member name="M:Dart.Ftp.ListEntry.#ctor(System.String)">
            <summary>
            Constructor used for ListingFormat.Machine.
            </summary>
            <param name="line">The line to parse into a ListEntry.</param>
        </member>
        <member name="M:Dart.Ftp.ListEntry.#ctor(System.String,System.String,Dart.Ftp.ListingFormat)">
            <summary>
            Creates a new instance of ListEntry.
            </summary>
            <remarks>
                <p>When any method is called that requests an FTP listing from the server
            a Listing object (and all of the <b>ListEntry</b> objects contained within this object) is automatically created.</p>
            </remarks>
            <param name="text">Line received from the server.</param>
            <param name="path">Path information returned from the server. "/" indicates root directory, but in other cases should not terminate with "/".</param>
            <param name="format">Format of the Listing.</param>
        </member>
        <member name="M:Dart.Ftp.ListEntry.#ctor(System.String,System.String,Dart.Ftp.ListingFormat,System.Globalization.DateTimeFormatInfo)">
            <summary>
            Creates a new instance of ListEntry.
            </summary>
            <remarks>
                <p>When any method is called that requests an FTP listing from the server
            a Listing object (and all of the <b>ListEntry</b> objects contained within this object) is automatically created.</p>
            </remarks>
            <param name="text">Line received from the server.</param>
            <param name="path">Path information returned from the server. "/" indicates root directory, but in other cases should not terminate with "/".</param>
            <param name="format">Format of the Listing.</param>
            <param name="dateTimeInfo">A DateTimeFormatInfo object used to parse timestamps.</param>
        </member>
        <member name="F:Dart.Ftp.ListEntry.Destination">
            <summary>
            Gets or sets the actual location to which a link is pointing when Listing.Format indicates a UNIX listing, 
            and Listing.Type is Link. Can be set by the user when parsing the Text property.
            </summary>
            <value>
            A string representing the actual location to which a link is pointing.
            </value>
            <remarks>
                <p>UNIX links act as shortcuts to other files. For example, if there is a link named "MyLink" pointing to a file 
            called "MyFile.txt", the ListEntry.Name property will be "MyLink". 
            To get the actual file, you would have to access ListEntry.Destination, which would contain "MyFile.txt".</p>
                <p>This property will only have a value if the Listing.Format is UNIX and the ListEntry.Type is Link.</p>
            </remarks>
        </member>
        <member name="F:Dart.Ftp.ListEntry.Group">
            <summary>
            When Listing.Format indicates a UNIX listing, gets the UNIX file group name. 
            Can be set by the user when parsing the Text property.
            </summary>
            <value>
            A string representing the UNIX file group name.
            </value>
            <remarks>
                <p>This property will only have value when the Listing.Format property is UNIX. 
            To determine group rights, see ListEntry.Permissions.</p>
            </remarks>
        </member>
        <member name="F:Dart.Ftp.ListEntry.Name">
            <summary>
            Gets or sets the file or directory name, depending on the value of the Type property. 
            Can be set by the user when parsing the Text property.
            </summary>
            <value>
            A string representing the name of the file or directory.
            </value>
            <remarks>
                <p>This property represents the name of the file only. To obtain the path, use the ListEntry.Path property.</p>
                <p>If the Listing.Format is UNIX and the ListEntry.Type is Link, this property will contain the value of the link name. 
            In this case, to obtain the file the link is pointing to, see ListEntry.Destination.</p>
            </remarks>
        </member>
        <member name="F:Dart.Ftp.ListEntry.Owner">
            <summary>
            When Listing.Format indicates a UNIX listing, gets the UNIX file owner name. 
            Can be set by the user when parsing the Text property.
            </summary>
            <value>
            A string representing the UNIX file owner.
            </value>
            <remarks>
                <p>This property will only have a value if the Listing.Format is UNIX. 
            The owner is typically the person who created the file. Inspect ListEntry.Permissions to determine owner rights.</p>
            </remarks>
        </member>
        <member name="F:Dart.Ftp.ListEntry.DirectoryName">
            <summary>
            Gets the path reported for files in sub-directories. Can be set by the user when parsing the Text property.
            </summary>
            <value>
            A string representing the path of the file.
            </value>
            <remarks>
                <p>This property represents the path of the file only. To obtain the name, use the ListEntry.Name property.</p>
                <p>This property will only have a value if:</p>
                <ol>
                    <li>The List call is for a recursive listing: Ftp.List("-R", true)</li>
                    <li>The server supports recursive listings, in the format of:</li>
                </ol>
                <pre class="code">
            ./hello:
            total 12
            -rw-r-----   1 test     users       5751 Jan 29  2011 links.txt
            
            ./newdir:
            total 12
            -rw-r-----   1 test     users       4339 Jan 29  2011 ftpdebug2.txt
            -rw-r-----   1 test     users         12 Jan 27  2011 rtv.txt
            </pre>
            </remarks>
        </member>
        <member name="F:Dart.Ftp.ListEntry.Permissions">
            <summary>
            In UNIX, gets the file permissions for a ListEntry object. Can be set by the user when parsing the Text property.
            </summary>
            <value>
            A string representing the UNIX permissions.
            </value>
            <remarks>
                <p>This property will only be valid if the Listing.Format is UNIX.
            Use the ListEntry.Permissions property if the server is returning a UNIX listing and you would like to know 
            the permissions for a file.</p>
            </remarks>
        </member>
        <member name="F:Dart.Ftp.ListEntry.Length">
            <summary>
            Gets the size of the file in bytes. Can be set by the user when parsing the Text property.
            </summary>
            <value>
            An integer value representing the size of the file or directory as reported by the server in the listing.
            </value>
            <remarks>
                <p>This value may not reflect the actual size of the file, as CRLF may not be included in the count by the server. 
            To get the actual file size for any file, use Ftp.GetSize.</p>
            </remarks>
        </member>
        <member name="P:Dart.Ftp.ListEntry.FullName">
            <summary>
            Gets the path to the file or directory.
            </summary>
            <remarks>
            Absolute if the server supports and allows the PWD command, relative if it does not.
            </remarks>
        </member>
        <member name="M:Dart.Ftp.ListEntry.ToString">
            <summary>
            Gets the raw list entry.
            </summary>
            <remarks>
                <p>Listings are automatically parsed for most common fields. However, many servers have proprietary fields. 
            In cases such as this, for listing fields not contained within the ListEntry object, the raw listing can be retrieved 
            using this property, and parsed.</p>
                <p>The ListEntry.Text property is useful for diagnostics purposes, to see a raw ListEntry. 
            It is also useful for dealing with servers that return a "proprietary" listing. 
            For example, if the server may return a UNIX listing. This would look something like:</p>
                <code>
            r-xr-xr-x   1 owner    group               20 Jan 10  2002 file1.txt 
            </code>
                <p>It also may return a DOS listing which would look something like:</p>
                <code>
            01-10-02  10:18AM                    20 file1.txt 
            </code>
                <p>In either of these cases, the format would be detected and Listing.Format would be set appropriately. 
            However, if the listing returned was a proprietary listing such as:</p>
                <code>
            file1.txt   Jan-10-2002   20
            </code>
                <p>The Ftp component would be unable to detect the type. You would have to get the raw text using the ListEntry.Text property, 
            and maually parse it.</p>
            </remarks>
            <returns>A String value representing the raw text returned from the server for the particular list entry.</returns>
        </member>
        <member name="F:Dart.Ftp.ListEntry.Source">
            <summary>
            When Listing.Format indicates a UNIX listing, and ListEntry.Type is Link, gets the name of the link. 
            Can be set by the user when parsing the Text property.
            </summary>
            <value>
            A string representing the name of a UNIX link.
            </value>
            <remarks>
                <p>UNIX links act as shortcuts to other files. For example, if there is a link named "MyLink" pointing to a file 
            called "MyFile.txt", the ListEntry.Source property will be "MyLink". 
            To get the actual file, you would have to access ListEntry.Destination, which would contain "MyFile.txt".</p>
                <p>This property will only have a value if the Listing.Format is UNIX and the ListEntry.Type is Link.</p>
            </remarks>
        </member>
        <member name="F:Dart.Ftp.ListEntry.Text">
            <summary>
            Gets the raw list entry.
            </summary>
            <value>
            A string value representing the raw text returned from the server for the particular list entry.
            </value>
            <remarks>
                <p>Listings are automatically parsed for most common fields. However, many servers have proprietary fields. 
            In cases such as this, for listing fields not contained within the ListEntry object, the raw listing can be retrieved 
            using this property, and parsed.</p>
                <p>The ListEntry.Text property is useful for diagnostics purposes, to see a raw ListEntry. 
            It is also useful for dealing with servers that return a "proprietary" listing. 
            For example, if the server may return a UNIX listing. This would look something like:</p>
                <code>
            r-xr-xr-x   1 owner    group               20 Jan 10  2002 file1.txt 
            </code>
                <p>It also may return a DOS listing which would look something like:</p>
                <code>
            01-10-02  10:18AM                    20 file1.txt 
            </code>
                <p>In either of these cases, the format would be detected and Listing.Format would be set appropriately. 
            However, if the listing returned was a proprietary listing such as:</p>
                <code>
            file1.txt   Jan-10-2002   20
            </code>
                <p>The Ftp component would be unable to detect the type. You would have to get the raw text using the ListEntry.Text property, 
            and manually parse it.</p>
            </remarks>
        </member>
        <member name="F:Dart.Ftp.ListEntry.TimeStamp">
            <summary>
            Gets the time/date the file was last modified. Can be set by the user when parsing the Text property.
            </summary>
            <value>
            A string representing the time/date the file was last modified.
            </value>
        </member>
        <member name="F:Dart.Ftp.ListEntry.LastWriteTime">
            <summary>
            Gets a DateTime object representing the time/date when the file was last modified. 
            Can be set by the user when parsing the Text property.
            </summary>
            <value>
            A DateTime object representing the time/date the file was last modified.
            </value>
        </member>
        <member name="F:Dart.Ftp.ListEntry.Type">
            <summary>
            Gets type of entry (File, Directory, Link, Unknown).
            </summary>
            <value>
            One of the EntryType values.
            </value>
            <remarks>
                <p>The <b>Type</b> of Listing will either be EntryType.File, EntryType.Directory, EntryType.Link or EntryType.Unknown. 
            If the Type is EntryType.Link, <see cref="F:Dart.Ftp.ListEntry.Source" /> will contain the link name and <see cref="F:Dart.Ftp.ListEntry.Destination" />
            will contain the file the link is pointing to.</p>
            </remarks>
        </member>
        <member name="T:Dart.Ftp.ListingEventArgs">
            <summary>
            Provides data for the <see cref="E:Dart.Ftp.Ftp.Listing" /> event.
            </summary>
        </member>
        <member name="F:Dart.Ftp.ListingEventArgs.Listing">
            <summary>
            Returns the Listing provided by the Marshal method.
            </summary>
        </member>
        <member name="T:Dart.Ftp.Listing">
            <summary>
            Represents the textual listing received from an FTP server.
            </summary>
            <remarks>
                <p>This object encapsulates the listing returned from Ftp.List and cotains a collection of
            <see cref="T:Dart.Ftp.ListEntry" /> objects (representing individual list entries, such as a file).</p>
            </remarks>
            <example>
        This example demonstrates using the FTP control to obtain a directory listing from a remote server.
        <code lang="C#">
        private void getListing()
        {
            //Connect and log into the server, and get a listing
            ftp1.Connect(myServer);
            ftp1.Authenticate(myUsername, myPassword);
            Listing listing = ftp1.List("", "", ListType.Full);

            //Add all the list entries in the listing to a listbox
            foreach (ListEntry entry in listing)
                listBox1.Items.Add(entry.Text);

            //Logout of the server
            ftp1.Close();
        }
        </code><code lang="VB">
        Private Sub getListing()
            'Connect and log into the server, and get a listing
            ftp1.Connect(myServer)
            ftp1.Authenticate(myUsername, myPassword)
            Dim listing As Listing = ftp1.List("", "", ListType.Full)

            'Add all the list entries in the listing to a listbox
            For Each entry As ListEntry In listing
                listBox1.Items.Add(entry.Text)
            Next entry

            'Logout of the server
            ftp1.Close()
        End Sub
        </code></example>
        </member>
        <member name="M:Dart.Ftp.Listing.#ctor">
            <summary>
            Default constructor for a Listing.
            </summary>
        </member>
        <member name="F:Dart.Ftp.Listing.Text">
            <summary>
            Gets the text used to initialize the Listing.
            </summary>
        </member>
        <member name="M:Dart.Ftp.Listing.#ctor(System.String,System.String,Dart.Ftp.ListType)">
            <summary>
            Creates a Listing instance and populates it with the raw text listing.
            </summary>
            <param name="text">Raw text listing.</param>
            <param name="rootDir">The root directory for the listing.</param>
            <param name="type">The type of listing to create.</param>
        </member>
        <member name="M:Dart.Ftp.Listing.#ctor(System.String,System.String,Dart.Ftp.ListType,System.Globalization.DateTimeFormatInfo)">
            <summary>
            Creates a Listing instance and populates it with the raw text listing.
            </summary>
            <param name="text">Raw text listing.</param>
            <param name="rootDir">The root directory for the listing.</param>
            <param name="type">The type of listing to create.</param>
            <param name="dateTimeInfo">The DateTimeFormatInfo object to use to parse timestamps.</param>
        </member>
        <member name="P:Dart.Ftp.Listing.Format">
            <summary>
            Gets the format of the listing: ListingFormat.UNIX, ListingFormat.DOS or ListingFormat.Unknown.
            </summary>
            <value>
            One of the ListingFormat values.
            </value>
            <remarks>
                <p>When a Listing object is created, the format of the listing is automatically detected. 
            If the format is unable to be detected, ListingFormat.Unknown is returned.</p>
                <p>The <see cref="F:Dart.Ftp.Listing.Text" /> property is useful when dealing with servers that return a "proprietary" listing. 
            For example, if the server may return a UNIX listing. This would look something like:</p>
                <code>
            r-xr-xr-x   1 owner    group               20 Jan 10  2002 file1.txt 
            </code>
                <p>It also may return a DOS listing which would look something like:</p>
                <code>
            01-10-02  10:18AM                    20 file1.txt 
            </code>
                <p>In either of these cases, the format would be detected and Listing.Format would be set appropriately. 
            However, if the listing returned was a proprietary listing such as:</p>
                <code>
            file1.txt   Jan-10-2002   20
            </code>
                <p>The Ftp component would be unable to detect the type, and the Listing would require manual parsing.</p>
            </remarks>
        </member>
        <member name="M:Dart.Ftp.Listing.ToString">
            <summary>
            Gets the text used to initialize the Listing.
            </summary>
            <returns>A string representing the text used to initialize the Listing.</returns>
        </member>
        <member name="T:Dart.Ftp.Response">
            <summary>
            Presents the response portion from an Internet protocol Request/Response pair.
            </summary>
            <remarks>
                <p>Often, protocols define that commands be responded to with responses made up of a 
            response code and response text. For example, the FTP protocol defines a "CWD" command,
            which is a request to change the working directory. If the command sent to the server is "CWD 
            MYDIR" (a request to change to a directory called "MYDIR"), the 
            response from the server may be something like "200 Working Directory Changed." 
            In PowerTCP, this response is encapsulated by the Response object, allowing access to the 
            code (through the Response.Code property), the text (through the Response.Text property),
            or the raw response (through the Response.ToString method).</p>
            </remarks>
        </member>
        <member name="M:Dart.Ftp.Response.ToString">
            <summary>
            The raw response from the server, including code and text.
            </summary>
            <returns>String</returns>
        </member>
        <member name="F:Dart.Ftp.Response.Command">
            <summary>
            The command that elicited the response.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Response.Text">
            <summary>
            The formatted text part of the response.  Multi-line replies are condensed into a single line.
            </summary>
        </member>
        <member name="P:Dart.Ftp.Response.Code">
            <summary>
            Gets the 3-digit response code from the response string.
            </summary>
            <value>An integer response code parsed from the string response.</value>
        </member>
        <member name="T:Dart.Ftp.strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Dart.Common.DevLicense.Email">
            <summary>
            Doc
            </summary>
        </member>
        <member name="M:Dart.Common.DevLicense.#ctor(System.Reflection.Assembly)">
            <summary>
            Constructor used by Windows Activation utility sets Product string from dll attribute
            </summary>
            <param name="dartAssembly"></param>
        </member>
        <member name="M:Dart.Common.DevLicense.#ctor">
            <summary>
            Constructor used by dotnet DartLicense utility that will set Product name for ProductKey
            </summary>
        </member>
    </members>
</doc>